00:00 - [Music]
00:01 - in this section we're going to look at
00:03 - building forums in angular so by the end
00:05 - of this section you'll be able to
00:07 - implement forms with different kinds of
00:09 - input fields such as text boxes
00:11 - checkboxes radio buttons and drop-down
00:14 - lists you'll be able to display
00:16 - validation errors next to input fields
00:18 - and disable the submit button if the
00:20 - form is not in a valid state so now
00:23 - let's get started
00:28 - all right we're gonna start this section
00:30 - by creating a simple bootstrap form and
00:33 - then we're gonna bring that to life and
00:35 - add some validation to it using angular
00:37 - so here let's open up the terminal and
00:39 - generate a new component so ng G C let's
00:44 - call this contact - form okay now let's
00:51 - go to contact the HTML delete all the
00:56 - mark-up here you want to add a form we
00:59 - don't need this action attribute inside
01:02 - this form we need to input fields one is
01:05 - the first name and the other is comment
01:07 - so once again I'm gonna use Zen coding
01:10 - to quickly generate marca so first we
01:13 - need a label next to this we want an
01:15 - input i want the type of this input to
01:19 - read text so note that you can use
01:21 - square brackets to put any attribute
01:24 - here now this input field should have a
01:27 - class called form
01:28 - - control and this is one of the classes
01:32 - defined in bootstrap that gives our
01:34 - input field a nice modern look and feel
01:37 - so tab this is our markup let's break it
01:41 - up
01:41 - so with this input field we can set an
01:44 - ID here let's call this first name and
01:48 - note that I'm using camel notation so
01:50 - the first letter of the first word is
01:52 - lowercase and the first letter of every
01:54 - word after is uppercase now if we use
01:58 - this ID here as the value for the for
02:00 - attribute of the label this improves the
02:03 - accessibility of our form so when the
02:05 - user clicks on this label this input
02:08 - field here will automatically get focus
02:10 - okay now finally we need to wrap these
02:14 - two elements inside a div with the class
02:16 - form
02:17 - - group this is one of the requirements
02:19 - by bootstrap so we want a div with a
02:23 - class form
02:24 - - group now let's move this stuff here
02:30 - okay now this time I'm gonna generate
02:33 - all this markup in one go so we want to
02:36 - start with a div with a class form
02:38 - - group now inside this div
02:42 - we want a label and this label shall
02:45 - have an attribute called for said to us
02:48 - a comment now next to this label we want
02:52 - an input with an ID attribute set to
02:55 - comment actually let's change this to a
02:59 - text area so we can have multiple lines
03:02 - now this text area should also have a
03:05 - class called form
03:06 - - ctrl tab okay here's our markup here's
03:13 - our div we have a label inside that and
03:15 - next to that we have a text area we
03:18 - don't need this name attribute so let's
03:20 - delete this and here's the closing div
03:25 - element now finally we need a bun this
03:28 - button should have two classes one is
03:30 - BTN and the other is BTN - primary and
03:34 - let's call this submit now one more
03:38 - thing is that each of these label
03:40 - elements need a value so the first one
03:43 - should be first name and the second
03:45 - should be comment ok now finally let's
03:50 - use this form on our home page first
03:53 - let's go to contact dot TS I want to
03:58 - change the selector here we don't really
04:00 - need this app - prefix it's extra noise
04:03 - added only if it's clashing with another
04:06 - component defined somewhere else
04:07 - something that you're importing from a
04:09 - third-party library so finally let's go
04:12 - to app that HTML delete all the mark up
04:16 - here and add our contact - form element
04:20 - now let's preview this so back in the
04:23 - browser this is our contact form so
04:26 - first name comment and our submit button
04:34 - so we have built this simple form now we
04:37 - want to add validation to it in angular
04:39 - we have a class called form control for
04:43 - each input field in our form we need to
04:45 - create an instance of the control class
04:47 - and with this control class we can check
04:50 - the current value stored in an input
04:52 - field we can see if the input field has
04:54 - been touched or untouched we can see if
04:57 - it's dirty which means its value is
04:59 - changed or pristine which means its
05:02 - value is not changed whether it's valid
05:04 - or not and if it's not what are the
05:07 - validation errors so for each input
05:09 - field in the form we need a control
05:11 - object now similar to the control class
05:14 - we have another class called form group
05:17 - which represents a group of controls in
05:20 - a form each form is essentially a
05:23 - control group because it contains at
05:25 - least one control but in a complex
05:27 - application you might have a form with
05:29 - multiple control groups for example you
05:32 - might have a control group for the
05:33 - shipping address and another for the
05:36 - billing address now interestingly all
05:39 - the properties of the control class that
05:41 - you saw earlier are also available in
05:43 - the form group class as well so we can
05:45 - ask a form group if it's valid or not
05:48 - and that returns true if all the
05:51 - controls in that group are valid
05:53 - similarly we can get all the validation
05:56 - errors in that group so accessing these
05:58 - properties of a form group is easier
06:00 - than iterating over all the controls in
06:04 - that group and checking their status so
06:06 - to add validation to a form we need to
06:08 - create a form group objects for the form
06:11 - and a form control object for each input
06:13 - field in the form this way we can keep
06:16 - track of the state of each input field
06:18 - and the entire form as a whole now there
06:21 - are two ways to create these control
06:22 - objects one way is by applying some
06:25 - directives in our template an angular
06:28 - will create these control objects for us
06:30 - implicitly under the hood we call forms
06:33 - that are built this way template driven
06:36 - forms so we build them using their
06:38 - template another approach involves
06:41 - explicitly creating these control
06:43 - objects so in our components we should
06:46 - write code to create new in
06:48 - stencils of the control group and
06:49 - control objects we call forms that are
06:52 - built this way as reactive forms
06:54 - previously they used to be called model
06:57 - driven forms now they are called
06:59 - reactive forms now you might ask what is
07:01 - the difference what is the difference
07:02 - between template driven forms and
07:04 - reactive forms the difference is that
07:07 - when we create these control objects
07:08 - explicitly we have more control over
07:11 - their validation logic so if you want to
07:14 - build a complex form with complex
07:16 - validation you need to use reactive
07:18 - forms you need to create these control
07:20 - objects explicitly and also another
07:23 - benefit of this approach is that you can
07:25 - unit test the validation logic of your
07:28 - form otherwise if you want to build a
07:30 - simple form with some basic validation
07:32 - like making some fields required or
07:34 - within a given range then you can use
07:36 - template driven forms so template driven
07:39 - forms are easier to create we write less
07:42 - code but we have also less control over
07:44 - the validation of our form now in this
07:47 - section we're going to look at template
07:48 - driven forms and we'll leave reactive
07:50 - forms in the next section
07:57 - so we are built its basic bootstrap form
08:00 - now we want to add validation to this
08:02 - using template driven approach so as I
08:05 - explained in the last lecture we
08:06 - template driven approach we apply a
08:09 - directive to our input field and angular
08:12 - will create a control object and
08:14 - associated with that input field under
08:16 - the hood that guess what you already
08:19 - know this directive that is ng model so
08:23 - here on this first name input field I'm
08:24 - gonna apply the ng model directive we
08:28 - use this before with the two-way binding
08:30 - syntax or banana in a box remember that
08:33 - so we used it like this here's a box
08:36 - here is a banana and we used engine
08:40 - model like this and bound this to a
08:42 - property or a field in our component
08:44 - like first thing here we don't need to a
08:47 - binding yet perhaps we can add this in
08:49 - the future but all I want to show you is
08:51 - that when you apply the ng model
08:54 - directive on an input field and its
08:57 - simplest form without any binding
08:59 - angular will create an control object
09:02 - and associated with this input field
09:03 - under the hood now let's preview this in
09:07 - the browser so back in chrome we get
09:10 - this error if ng model is used within a
09:13 - form tag either the name attribute must
09:15 - be set or the form control must be
09:18 - defined as standalone
09:19 - so basically the reason we got that
09:22 - error is that we didn't set a name
09:24 - attribute here this is a requirement
09:26 - because every time we apply this ng
09:29 - model on an input field and it needs a
09:32 - way to distinguish these control objects
09:34 - so here we set the name attribute I'm
09:37 - gonna use the same value as the ID so
09:40 - first name save now back in the browser
09:44 - the error is gone now I want to show you
09:47 - that control object under the hood so
09:51 - these two attributes are all you need to
09:53 - set in order to use the template driven
09:55 - approach but in this video I want to
09:57 - show you what is happening under the
09:59 - hood so I want to handle the change
10:02 - event of this input field and here we're
10:05 - gonna call the log method now I need a
10:08 - reference to this ng model directive
10:11 - I want to pass that reference to the log
10:12 - method so we can log in on the console
10:15 - for that we're gonna create a template
10:18 - variable so hashtag let's call that
10:21 - template variable first name because
10:23 - call it anything and as the value I'm
10:26 - gonna use ng model so when angular sees
10:30 - this it's going to set this template
10:32 - variable to the ng model directive that
10:35 - is applied on this input field okay and
10:38 - then we can pass this variable to our
10:41 - log method so here's the log method we
10:44 - pass first name now let's go and
10:48 - implement this method so back in our
10:50 - component I'm gonna delete the stuff
10:53 - that we don't need let's just keep it
10:55 - simple
10:56 - here's the log method let's give it a
10:58 - parameter called X and simply log it on
11:01 - the console this is just for Diagnostics
11:04 - now back in the browser I'm gonna type
11:07 - my name here press tab now let's take a
11:10 - look at the console okay here's our ng
11:13 - model so you can see ng model is an
11:16 - object with these properties now look at
11:20 - this property control this is the
11:22 - control object that I was telling you
11:23 - about now if you click on the value look
11:27 - it's an instance of the form control
11:30 - class in angular let's expand this here
11:34 - we have a bunch of properties and many
11:37 - of these properties come in pairs
11:38 - for example we have this dirty which
11:41 - determines if the value of the input
11:43 - field is changed from the moment the
11:46 - form was initialized in this case
11:48 - because I typed my name here dirty is
11:51 - true now the opposite property is
11:54 - pristine pristine means clean so dirty
11:58 - should be true and pristine is false
12:01 - okay now we have another pair in valid
12:05 - and valid in this case because we
12:08 - haven't implemented validation yet this
12:10 - input field is considered valid
12:12 - so invalid should be false and valid
12:16 - should be true now if you have any
12:19 - validation errors they're available here
12:23 - currently
12:24 - errors is null because we don't have any
12:26 - errors we have another pair which is
12:29 - touched and untouched in this case
12:31 - because I touch the input field or in
12:33 - other words I put the focus there and
12:36 - then moved away touched should be true
12:38 - and untouched should be false we have
12:42 - another important property value which
12:45 - returns the current value in the input
12:47 - film so what I want you to note here is
12:50 - that we use this form control class to
12:52 - track state changes and the validity of
12:55 - input fields when we apply the ng-model
12:59 - directive along with the name attribute
13:01 - at an input field angular automatically
13:04 - creates an instance of the form control
13:07 - class and associates it with this input
13:10 - field now to finish up this lecture I'm
13:12 - gonna apply ng model on our text area as
13:15 - well and set the name attribute to
13:18 - comment in the next lecture we're going
13:21 - to add some validation here
13:27 - all right now let's make this first name
13:30 - field required so in html5 we can use
13:33 - this required attribute on an input
13:36 - field and angular uses this to apply
13:38 - this kind of meditation on this input
13:40 - field so just next to this input field I
13:43 - want to add a div this is where will
13:45 - display the validation error so first
13:48 - name is required now to make this pretty
13:52 - can apply to bootstrap classes one is
13:56 - alert and the other is alert - danger
14:00 - which puts this in a red box now we
14:04 - don't want to display this at all times
14:05 - you want to display this only if the
14:07 - input field is not valid so we use the
14:12 - end if directive that you have seen
14:14 - before
14:14 - now how do we know if the field is valid
14:16 - or not well back here in the console you
14:19 - saw this ng-model directive right and we
14:23 - looked at this control property this
14:26 - control has a property called valid from
14:29 - here we can tell if an input field is
14:31 - valid or not but there is a simpler way
14:34 - so let's collapse this property if you
14:38 - look at the properties of this ngmodel
14:40 - directive we have all those properties
14:43 - you saw earlier as part of this class as
14:45 - well so here we have valid which is a
14:49 - computed property so when we use this
14:51 - property internally the ngmodel
14:54 - directive delegates to the underlying
14:57 - form control object so here has the
15:00 - value of the ng-if directive we can
15:03 - reference our directive so earlier we
15:06 - created this template variable first
15:07 - name we can type first name dot valid
15:11 - now we apply the not operator here so
15:15 - we'll render this Dib only if the first
15:17 - name is not valid let's test the result
15:19 - so back in the browser okay you can see
15:23 - the error is initially displayed here
15:25 - which is a little bit too confronting
15:26 - for the user because they haven't done
15:28 - anything wrong yet so I will show you
15:31 - how to fix this problem in a second
15:32 - let's type something here look as soon
15:35 - as I type one character the error is
15:37 - gone and when I delete this the error is
15:40 - back so
15:41 - the validation is working now let me
15:43 - show you how to show this error only if
15:45 - the user puts focus in this input Ville
15:48 - and moves away without entering a value
15:50 - so back here I'm gonna change this
15:53 - condition I'm gonna add first name that
15:56 - touched and first name not valid with
16:01 - this I'm telling angular to render this
16:03 - div if this input field has been touched
16:05 - which means it received focus but the
16:08 - user left this input field without
16:10 - entering a valid value so let's try it
16:13 - again back in the browser so look
16:17 - initially the error is not here now I'll
16:19 - put the focus if I press tab I get this
16:23 - error so this is how we add the
16:26 - validation errors next to each input
16:28 - field we add a div with the validation
16:30 - error and render it only if that input
16:33 - field has been touched and it's not
16:36 - valid in the next lecture I'm going to
16:38 - show you different kinds of validation
16:40 - errors
16:46 - so in the last lecture you saw the
16:48 - required validation error in angular we
16:51 - have a few built-in validators that are
16:53 - based on html5 validation attributes so
16:57 - let's say we want to set a minimum links
16:59 - for our first name you can set that here
17:01 - it has to be minimum three characters we
17:05 - can also set a maximum links let's say
17:09 - 10 characters now finally we can also
17:12 - apply a pattern now in case of a first
17:16 - name it doesn't quite make sense but if
17:18 - you have something that you want to
17:19 - apply regular expression validation on
17:21 - you can use this pattern attribute so
17:24 - I'm gonna set this to banana and this
17:26 - means only the word banana is a valid
17:29 - value in this input field now when you
17:31 - have multiple validation attributes you
17:33 - cannot show them all with one div like
17:36 - here we want specific validation errors
17:39 - okay so we want to make a small change
17:41 - here first I'm gonna remove this
17:44 - validation error here now inside this
17:47 - div you want to have a separate div for
17:49 - each validation error so div first name
17:54 - is required now we want to render this
17:58 - only if we have the required validation
18:02 - error so here as the value for the ng-if
18:05 - directive we type first name remember
18:07 - here we have a property called errors
18:10 - now from here we can check to see if we
18:14 - have this error required so in this
18:16 - error object we have one or more key
18:19 - value pairs and the keys are the
18:21 - validation errors I'm going to show you
18:23 - the content of this errors object in a
18:25 - second now let us add the second div so
18:29 - another div first name should be minimum
18:35 - three characters okay now once again we
18:40 - want to render this only a first name
18:43 - that errors that min length is true yeah
18:47 - I'm gonna duplicate this and for the
18:50 - last one I'm gonna use pattern so first
18:53 - name
18:55 - doesn't match the pattern okay now let's
19:00 - inspect this in the browser so initially
19:02 - no error
19:03 - I put the focus here move away we get
19:06 - this error message first name is
19:08 - required
19:08 - I type only one character now look we
19:12 - have two errors first name should be
19:14 - minimum three characters and the second
19:16 - error is about a regular expression so
19:19 - if I type two more characters the first
19:21 - error is gone but the value we have here
19:23 - doesn't match the pattern so let me
19:26 - change this to banana and all the errors
19:29 - are gone so this is how we add multiple
19:32 - validation constraints on an input field
19:34 - we simply use these standard html5
19:37 - attributes required min length max
19:41 - length and pattern and for each error
19:43 - will have a separate div now finally
19:46 - before we finish this lecture let me
19:47 - show you the content of this errors
19:49 - object so once again here I'm going to
19:51 - type one two now let's open up the
19:54 - console so here's our ng model we have
19:59 - this error object look we have two key
20:03 - value pairs keys are min lengths and
20:05 - pattern look at the values so this
20:09 - object has two properties actual length
20:11 - which is two and the required lengths
20:13 - which is three we can take advantage of
20:16 - these properties and render a dynamic
20:18 - message to the user so here for the min
20:21 - length validation error instead of
20:24 - hard-coding
20:25 - this value 3 here we can render it
20:28 - dynamically because tomorrow we may
20:30 - decide to change the value of the min
20:32 - length attribute we don't want to change
20:34 - this in two places okay so here we add
20:37 - interpolation and render first name that
20:41 - errors that min length dot now the
20:45 - property we want to add here is required
20:47 - length so dot require head length let's
20:53 - test this so back here I type my two
20:55 - characters tab and first name should be
20:58 - minimum three characters which is
21:00 - rendered dynamically
21:06 - back to our forum I want type an invalid
21:09 - value here now as a best practice we
21:12 - should highlight the invalid input
21:14 - fields this improves the usability of
21:17 - our form so how do we apply a red border
21:19 - to this input field well let's inspect
21:22 - this all right here's our input field
21:27 - now there are so many attributes here
21:29 - don't worry about them
21:30 - just look at this part class so we have
21:33 - the form - control class that we applied
21:35 - in our template but we also have three
21:38 - more classes that are added by angular
21:40 - dynamically one is ng - invalid the
21:44 - other is ng - dirty and ng - touched we
21:48 - can use these classes to apply styles to
21:51 - invalid input fields so let's go to
21:54 - styles that CSS here I'm gonna add a new
21:59 - rule so if you have an element with the
22:01 - class form that's control which should
22:04 - be applied on all input fields and also
22:07 - in the same element we have ng - touched
22:11 - as well as ng - invalid I wanna make the
22:16 - border of that element - pixel solid red
22:20 - straight back in the browser so I put
22:24 - the focus here and tab and here we have
22:26 - a red border
22:31 - as you build forms with angular you will
22:34 - notice that your templates get more
22:36 - complex now in this video I have
22:38 - increased the font size and for that
22:40 - reason you don't see all the markup here
22:42 - so we have to scroll to the right
22:45 - however on your screen chances are you
22:48 - have everything in one view but what I
22:51 - want to point out here is that as a best
22:53 - practice your code should be formatted
22:55 - in such a way that another developer
22:58 - does not have to scroll to the right and
23:01 - to the left to see what's happening so
23:02 - let me show you a cleaner way to write
23:05 - this template we can break up these
23:07 - lines and list one attribute on each
23:09 - line for example consider this input
23:12 - field we can add all these attributes
23:15 - like this one on each line I note that
23:18 - I'm listing all the validation
23:20 - attributes first so another person
23:22 - another developer reading this code they
23:24 - know immediately what are the validation
23:26 - constraints of this input field after
23:29 - these I add ng model and immediately
23:32 - follow that I add the name attribute as
23:34 - well as first name set to ng model now
23:38 - we don't really need this event binding
23:40 - here this is purely for this demo and
23:43 - finally we add ID type and class then
23:48 - similarly we can format our validation
23:52 - errors like this so we have the parent
23:54 - div I add all the classes here and then
23:58 - ng if so here you can easily see this
24:00 - ng-if without having to scroll to the
24:02 - left and right now for each validation
24:05 - error we can break it up like this so I
24:08 - put the error on the next line and this
24:11 - is much easier to the eyes like this
24:16 - so this is the end result which is way
24:19 - cleaner than what we had before hi thank
24:25 - you for watching my angular tutorial if
24:27 - you enjoyed this video please like it
24:28 - and share it with others also you can
24:31 - subscribe to my channel for free new
24:33 - videos every week this video is part of
24:36 - my complete angular course with almost
24:38 - 30 hours of high quality content where
24:42 - you learn everything about angular from
24:44 - the basic to the advanced topics all in
24:46 - one course so you don't have to jump
24:48 - from one tutorial to another in case
24:50 - you're interested we can get this course
24:52 - with a big discount using the link in
24:54 - the video description and if not that's
24:56 - perfectly fine continue watching as the
24:58 - next section is coming up