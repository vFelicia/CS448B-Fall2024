00:00 - [Music]
00:01 - so earlier I mentioned that note
00:03 - applications are highly scalable and
00:05 - this is because of the non-blocking or
00:08 - asynchronous nature of note what do you
00:11 - mean by asynchronous let me give you a
00:13 - metaphor imagine you go to a restaurant
00:15 - the waiter comes to your table takes
00:18 - your order and gives it to the kitchen
00:20 - then they move on to serve another table
00:22 - while the chef is preparing your meal so
00:26 - the same person can serve many different
00:28 - tables they don't have to wait for the
00:30 - chef to cook one meal before they serve
00:32 - another table this is what we call
00:35 - non-blocking or asynchronous
00:37 - architecture and this is how node
00:40 - applications work the waiter is like a
00:43 - thread allocated to handle a request so
00:46 - a single thread is used to handle
00:49 - multiple requests in contrast to
00:52 - non-blocking or asynchronous
00:54 - architecture we have blocking or
00:56 - synchronous architecture let's see how
00:58 - that works so back to our restaurant
01:01 - example imagine you go to another
01:03 - restaurant and in this restaurant a
01:05 - waiter is allocated to you
01:07 - they take your order and give it to the
01:09 - kitchen now they are sitting in the
01:11 - kitchen waiting for the chef to prepare
01:13 - your meal at this time they are not
01:15 - doing anything else they're just waiting
01:17 - they're not going to take an order from
01:19 - another table until your meal is ready
01:21 - this is what we call blocking or
01:24 - synchronous architecture and that's how
01:27 - applications built with frameworks like
01:29 - a speed net or rails work out of the box
01:32 - so when we receive a request on the
01:35 - server a thread is allocated to handle
01:37 - that request as part of handling that
01:40 - requests it is likely that we're going
01:42 - to query a database and as you know
01:44 - sometimes it may take a little while
01:45 - until the result is ready when the
01:48 - database is executing the query that
01:50 - thread is sitting there waiting it can't
01:53 - be used to serve another client so we
01:56 - need a new thread to serve another
01:58 - client imagine what would happen if we
02:00 - have a large number of concurrent
02:02 - clients at some point we're going to run
02:05 - out of threads to serve these clients so
02:08 - new clients have to wait until three
02:11 - threads are available or if we don't
02:13 - want
02:13 - them to wait we need to add more
02:15 - hardware so with this kind of
02:17 - architecture we are not utilizing our
02:20 - resources efficiently this is the
02:22 - problem with blocking or synchronous
02:25 - architecture and as I explained that's
02:27 - how applications built with frameworks
02:29 - like asp.net worked by default of course
02:33 - in asp.net it is possible to use
02:34 - asynchronous architecture but you will
02:37 - have to do extra work for now in
02:39 - contrast no the applications are
02:41 - asynchronous by default so you don't
02:44 - have to do anything extra in node we
02:47 - have a single thread to handle all
02:49 - requests linear request arrives that
02:52 - single thread is used to handle that
02:54 - request if you need to query a database
02:56 - our thread doesn't have to wait for the
02:59 - database to return the data while the
03:01 - database is executing our query that
03:04 - thread will be used to serve another
03:06 - client when the database prepares the
03:08 - result it puts a message in what we call
03:11 - an event queue node is continuously
03:14 - monitoring this queue in the background
03:17 - when it finds an event in this queue it
03:19 - will take it out and process it this
03:22 - kind of architecture makes node ideal
03:24 - for building applications that include a
03:27 - lot of disk or network access we can
03:30 - serve more clients without the need to
03:32 - throw in more hardware and that's why no
03:35 - the applications are highly scalable in
03:37 - contrast node should not be used for CPU
03:40 - intensive applications like a video
03:43 - encoding or an image manipulation
03:45 - service in this kind of applications we
03:49 - have a lot of calculations that should
03:51 - be done by CPU and few operations that
03:53 - touch the file system or the network
03:56 - since no the applications are single
03:58 - threaded when performing the
04:00 - calculations to serve one client other
04:03 - clients have to wait and that's why note
04:06 - should not be used or CPU intensive
04:08 - applications it should only be used for
04:10 - building data intensive and real-time
04:13 - applications ok enough theory Nix I'm
04:17 - gonna show you how to install node and
04:19 - build your first node application
04:23 - hi guys its mosh here thank you for
04:26 - watching my know tutorial I just wanted
04:28 - to let you know that this video you've
04:30 - been watching it's part of my complete
04:32 - note course where you will learn
04:34 - everything about node from the basic to
04:36 - the advanced topics if you're serious
04:38 - about learning node I highly recommend
04:40 - you to enroll in my node course because
04:42 - this is much faster than jumping from
04:44 - one tutorial to another it saves you
04:46 - time plus you're going to get a lot of
04:49 - exercises that will prepare you for the
04:51 - real work and also at the end of the
04:53 - course you'll receive a certificate of
04:55 - completion that you can provide your
04:57 - current or future employer so if you
05:00 - want to enroll click on the link in the
05:02 - video description I hope to see you in
05:03 - the course