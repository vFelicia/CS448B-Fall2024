00:02 - if you need to access a database in your
00:04 - application which most often you do you
00:06 - need a persistence framework with the
00:09 - persistence framework you'll be able to
00:11 - load your objects from or save them to a
00:14 - database now you can write this
00:16 - persistence framework yourself using
00:18 - plain ad. net classes like SQL
00:20 - connection SQL command and SQL data
00:22 - reader or you can use an existing
00:25 - persistence
00:26 - framework but writing a persistence
00:28 - framework from scratch is very cost ly
00:30 - you'll have to write a lot of store
00:32 - procedures read the data using ado.net
00:34 - objects and manually map your database
00:37 - tables and Records to The Domain objects
00:39 - in your
00:40 - application and this is where Entity
00:42 - framework
00:43 - shines Entity framework is essentially a
00:46 - persistence framework that frees you
00:48 - from all this dirty work you no longer
00:51 - have to write store procedures well in
00:53 - most bases or manage database
00:55 - connections or manually map the database
00:57 - tables and Records to your domain
00:59 - objects
01:00 - enti framework takes care of all of this
01:02 - for you and that's what I'm going to
01:04 - teach you in this
01:08 - [Music]
01:10 - course in this section I'm going to
01:12 - introduce you to various workflows to
01:15 - build a model using Entity framework and
01:17 - then I'm going to show you a demo of
01:18 - database first and code first so you get
01:21 - an idea of the process just to let you
01:23 - know this section is purely an
01:25 - introduction to these workflows over the
01:27 - next few sections I will cover each
01:29 - workflow in detail so let's get
01:34 - started in this section I'm going to
01:36 - show you any framework in action so you
01:39 - can quickly get an idea of what it is
01:41 - like to build a data access layer using
01:43 - anti framework as part of this section
01:46 - I'm going to introduce you to various
01:48 - workflows when using an framework that
01:51 - is database first code first and model
01:55 - first by the end of this section you
01:57 - will have a high level understanding of
01:59 - En framework and then from next section
02:02 - onwards we'll be covering the details so
02:04 - let's get
02:08 - started so there are three workflows to
02:11 - build a domain model using anti
02:13 - framework database first code first and
02:17 - model first with database first of
02:20 - course we start with the database so we
02:23 - designed our tables using visual
02:24 - designers and then have Entity framework
02:27 - generate the domain classes based on the
02:30 - database this is the traditional
02:32 - approach that a lot of developers have
02:34 - been doing for
02:36 - years with code first of course we start
02:38 - with the code so we simply create our
02:41 - domain classes and then have enti
02:43 - framework generate the database for us
02:46 - this approach was introduced in more
02:48 - recent years and is still new to many
02:51 - developers and finally we have the model
02:53 - first approach with this approach we use
02:56 - a visual designer in Visual Studio to
02:59 - model our classes and their associations
03:01 - some kind of uml
03:03 - diagram then based on this diagram enti
03:06 - the framework will generate the domain
03:08 - classes and the database for us I
03:11 - personally am not a fan of this approach
03:13 - and I'm not going to explore it in this
03:15 - course mainly because the visual
03:17 - designer for modeling classes is very
03:19 - poor and to be honest I have hardly seen
03:22 - anyone building software that way so our
03:25 - two main choices here are database first
03:27 - and code first now now over the next two
03:30 - lectures I will show you each of these
03:32 - workflows in action and then I will give
03:35 - you some guidelines about the strengths
03:36 - and weaknesses of each
03:39 - approach hi guys msh here thank you for
03:41 - watching my video I just wanted to let
03:43 - you know that this video you've been
03:45 - watching is part of my complete enti
03:47 - framework course on us in this course
03:50 - over almost 7 hours you will learn how
03:53 - to use enti framework to build a data
03:55 - access layer for your applications I'm
03:57 - going to teach you how to build a domain
03:59 - model model using both the database
04:01 - first and the code first workflow you're
04:04 - going to learn about code first
04:05 - migrations to upgrade or downgrade your
04:07 - database you're going to learn how to
04:09 - overwrite code first conventions using
04:11 - data annotations and fluent API you're
04:14 - going to learn how to query data using
04:16 - link both using query syntax and
04:19 - extension methods I'm also going to talk
04:21 - about eager loading lazy loading and
04:23 - explicit loading you're going to learn
04:25 - how to add update and remove objects and
04:29 - along the way way I will also talk about
04:31 - some of the best practices when using Ed
04:33 - framework as well as additional tools
04:35 - that help you profile and troubleshoot
04:37 - your applications if you're interested
04:39 - you can get this course for a discount
04:41 - using the link in the video description
04:43 - all the best and have a great
04:46 - day okay in this lecture I'm going to
04:49 - show you database first workflow in
04:51 - action so I'm going to start with
04:53 - creating a simple table and then I will
04:55 - have Entity framework generate a domain
04:57 - class based on that table so let's get
05:03 - started so here in SQL Server management
05:06 - Studio I've got a database called
05:08 - database first demo I'm going to create
05:10 - a new
05:13 - table I'm going to use this table for
05:15 - storing posts in a
05:23 - blog okay I'm back and the table is
05:25 - ready now here's the tricky part of
05:28 - database first approach
05:30 - we have this database here locally but
05:33 - in order to bring a different database
05:35 - like a test database or a production
05:38 - database to this
05:39 - version we need a
05:42 - mechanism there are tools out there that
05:44 - can compare to databases and bring them
05:47 - to the same
05:48 - version but in my experience they are
05:50 - not always reliable and can sometimes
05:53 - cause issues due to dependency between
05:55 - tables and
05:56 - Records a more reliable flexible ible
06:00 - but unfortunately more manual approach
06:02 - is to create a change of script every
06:04 - time we make a change to our
06:06 - database then we can store these change
06:09 - scripts somewhere in the repository and
06:11 - run them on any database to bring them
06:13 - to the current version so in this demo
06:16 - I'm going to go with that
06:17 - approach so I'm going to create a change
06:20 - of script
06:26 - here and I'm going to store this as
06:32 - here's a sequence number and a
06:42 - description okay and finally I'm going
06:44 - to save this table okay so the table is
06:47 - ready in my database let's refresh
06:51 - beautiful now I'm going to go to visual
06:53 - studio create a new project and import
06:55 - this database and its tables into my
06:58 - project
07:00 - okay so start with a new
07:04 - project I'm going to stick to a console
07:06 - application for now because we don't
07:07 - want to get distracted by the complexity
07:10 - of web applications or WPF applications
07:13 - so let's just keep it simple and focus
07:15 - on Entity
07:19 - framework database first
07:27 - demo okay with a new project the first
07:30 - step is to install Entity framework and
07:32 - to do that we use package manager
07:35 - console so
07:37 - tools new get package
07:40 - manager package manager
07:48 - console so we run install package Entity
07:58 - Framework
08:00 - beautiful so here I got edti framework
08:03 - version
08:06 - 6.1.3 now we go to solution
08:11 - Explorer right click the
08:14 - project
08:16 - add new
08:21 - item ado.net Ed data
08:25 - model so this is going to be our
08:27 - conceptual model that represents the
08:29 - mapping between the database tables and
08:32 - our domain classes so I'm going to give
08:34 - it a name like blog
08:40 - model and in this window I'm going to
08:42 - use any framework designer from database
08:45 - because I already have a
08:46 - database
08:49 - next and here we need to specify a
08:51 - connection to our
08:58 - database so Microsoft SQL Server
09:09 - continue okay here's my database test
09:12 - the connection
09:14 - beautiful
09:16 - okay
09:20 - next so at this point Entity framework
09:23 - looks at our database and discovers the
09:26 - tables views store procedures and
09:28 - functions we have there so currently we
09:30 - only have
09:33 - tables and here's my table so I'm going
09:36 - to tick all of
09:38 - this and leave the rest as is
09:45 - finish you get the security warning
09:47 - about running this template can
09:49 - potentially harm your computer don't
09:51 - worry about it so just click do not show
09:54 - this message again because Visual Studio
09:57 - is trying to run a template to generate
09:59 - some code I'll show you that in a
10:04 - second okay here's our anti data model
10:08 - which is stored in a file with the edmx
10:10 - extension and here you see a class
10:13 - called post which is exactly like the
10:15 - table I created
10:17 - earlier let's go to solution
10:21 - Explorer okay let's expand blog model
10:26 - edmx what you see here is all designed
10:29 - generated code there are two parts that
10:31 - are important here what is the first one
10:35 - blog model. context.
10:38 - TT so TT stands for T4 template it's a
10:42 - way to generate code based on a
10:46 - template if we expand
10:48 - these we see the actual generated
10:51 - code so here is a C class that en
10:54 - framework generated for
10:56 - me and this class D deres from DB
11:00 - context DB context is a class that's an
11:03 - abstraction over the
11:06 - database so it provides a simple API to
11:09 - load the data from or save it to the
11:12 - database now I scroll down a little
11:15 - bit look we have a property of type DB
11:19 - set called
11:22 - posts a DB set represents a table in the
11:25 - database so because in our database we
11:28 - have a table called called posts here we
11:30 - have a DB set of type post called
11:34 - posts now this post class you see here
11:37 - is again generated code so back to
11:40 - solution
11:43 - Explorer this was the context template
11:46 - so here is the template and the code
11:48 - that you just saw this DB context was
11:52 - generated based on this
11:54 - template now let's take a look at the
11:56 - other
11:57 - template blog model
12:00 - template so here's the template code and
12:04 - if we expand this we see the post class
12:10 - look it has four properties based on the
12:13 - columns I currently have in the
12:15 - database so the key thing here is we
12:18 - started with a database we created our
12:20 - table and then we imported that into our
12:23 - Ed data
12:24 - model every time I want to make a change
12:27 - in my model I start with the dat
12:28 - database and then I come back to my edmx
12:32 - file or edited data model and refresh it
12:36 - and at this point Entity framework will
12:38 - update my domain classes as you see here
12:41 - so here's the database first
12:43 - workflow okay now let me show you how we
12:46 - can use a DB context to work with a
12:48 - database and this applies to both
12:51 - database first and code first so I'm
12:53 - going to close all the windows
12:55 - here
12:57 - okay then I go to
13:04 - program here I'm going to create an
13:06 - instance of our DB context class which
13:09 - is called database first model
13:19 - entities now I'm going to create a new
13:25 - post and initialize it here
13:32 - now in a real world application most
13:34 - often we'll use an identity column so we
13:37 - don't have to specify an ID here but for
13:40 - now it doesn't matter because I just
13:41 - want to show you the
13:43 - workflow and finally I'm going to add
13:46 - this post to our DB set and save the
13:49 - changes so
13:52 - context. poost do
13:56 - add so we add it to the DB set and and
13:58 - at this point changes are only in the
14:00 - memory nothing is committed to the
14:02 - database yet so context let's save
14:07 - changes that's it now let's run the
14:17 - application
14:19 - done so as easy as that note that I did
14:23 - not have to write a store procedure I
14:25 - did not have to work with ado.net
14:27 - classes like SQL connection and SQL
14:30 - command and the framework took care of
14:33 - all of this for me now let's verify that
14:35 - it worked so I'm going to go to
14:37 - management
14:39 - studio and let's take a look at our
14:45 - table there you go we got this record in
14:47 - the
14:49 - database now reading data from database
14:52 - is as easy as what you saw and that's
14:54 - what I'm going to cover later in this
14:56 - course so this was D database first
14:59 - workflow in action in the next lecture
15:01 - I'm going to show you code first and
15:03 - then I will do a comparison between the
15:08 - two okay in this lecture I'm going to
15:10 - show you the code first workflow in
15:13 - action so here in Visual Studio I'm
15:15 - going to create a new console
15:22 - application and call it code first
15:27 - demo
15:30 - okay now similar to last lecture we need
15:32 - to install anti framework so tools new
15:37 - get package manager and package manager
15:46 - console install package enti
15:52 - framework
15:54 - beautiful okay now back to the
15:57 - program
15:59 - now with code first of course we start
16:02 - with the code so I'm not going to go to
16:04 - management studio and create a new
16:05 - database instead I'm going to create a
16:08 - new class called
16:14 - post so this post class looks exactly
16:17 - like the one that Entity framework
16:19 - generated for me as part of database
16:21 - first workflow but in this lecture I
16:24 - created it by
16:25 - hand now in companion to this class I
16:28 - also need a DB context remember DB
16:31 - context it's an abstraction over the
16:33 - database that we use to load or save
16:36 - data
16:50 - so basically all we have to do here is
16:53 - to create a class that derives from DB
16:56 - context and exposed one or more DB sets
17:00 - in this case DB set of post next we need
17:04 - to specify the connection string to the
17:08 - database so we go to app
17:13 - config and
17:18 - here I create the connection strings
17:21 - element and
17:23 - add a new connection string I'm going to
17:26 - call this the same name as my DB
17:30 - context so blog DB
17:35 - context and the actual connection string
17:42 - is in this case I'm using SQL Express
17:45 - you might be using a different engine so
17:47 - you create a connection string that
17:49 - works for
17:57 - you
18:01 - so initial catalog is the database name
18:04 - and Integrated Security means I'm using
18:07 - Windows
18:08 - authentication now one more element we
18:11 - need to add to this connection
18:14 - string and that is provider
18:19 - name which should be system. data. SQL
18:25 - client this is required to work with
18:27 - code first
18:29 - okay next I'm going to go to package
18:31 - manager
18:35 - console we need to enable code first
18:38 - migrations so this is a command that we
18:40 - run only once for the lifetime of a
18:43 - project so enable
18:49 - migrations so code first migrations
18:51 - enabled for project code first demo
18:54 - beautiful now out of these few steps I
18:58 - have have done so far installing Ed
19:00 - framework adding the connection string
19:02 - and enabling migrations are steps that
19:05 - we do only
19:07 - once that's it every time we want to
19:10 - make a change in our model we start with
19:12 - a code so in this
19:17 - case for example we create a new class
19:19 - like post or modify an existing class
19:23 - the possibilities are
19:24 - endless now every time we make a change
19:26 - to our model we need to create a
19:29 - migration so we go to package manager
19:34 - console and use the command add
19:38 - migration and here we need to specify a
19:41 - name that represents the kind of change
19:43 - we have made in this example I created
19:46 - the post
19:54 - class let's see what
19:56 - happened so I go to solution
20:01 - Explorer look we've got a new folder
20:04 - called
20:05 - migrations and inside this folder we've
20:08 - got two files the first one is my
20:11 - migration note that it has a datetime
20:14 - stamp and a
20:16 - description and this is very similar to
20:18 - the migration script that we created
20:20 - manually last time remember I had to
20:23 - create a change script this is exactly
20:25 - the same process but in a more automated
20:28 - fashion let's see what's inside this
20:32 - file so interestingly we don't have any
20:35 - SQL code here this is plain C
20:39 - code this class create post deres from
20:43 - DB migration and it has two methods up
20:46 - and
20:47 - down so the first one is used to upgrade
20:50 - database and the second one is used to
20:52 - downgrade
20:54 - database so with code first migrations
20:56 - we can take any database and take it to
20:59 - any version whether that version is
21:01 - higher or lower and this is very
21:04 - powerful if you're maintaining different
21:06 - versions of an application this is going
21:08 - to be your best
21:10 - friend now let's see what's happening
21:12 - inside the up method so there is a call
21:14 - to this method create table it tries to
21:18 - create a table called posts with these
21:21 - columns so ID which is an integer it's
21:25 - not knowable and its identity date
21:28 - published is a date time and it's not
21:31 - knowable and we have two more columns
21:34 - title and body they both are a
21:36 - string and finally here there is a call
21:39 - to primary key method which specifies
21:42 - that the ID column should be set as
21:44 - primary
21:46 - key so the interesting thing here is
21:48 - Entity framework uses convention over
21:52 - configuration so when it looks at our
21:55 - model in this case our post class based
21:58 - on the name and type of our properties
22:01 - it can figure out how the database
22:03 - should look like for example it knows
22:06 - that ID is typically used for the
22:08 - primary key and often it's an identity
22:10 - column so it automatically added these
22:14 - Expressions
22:15 - here so we created a code firste
22:18 - migration the next step is to run
22:21 - it when we run it Entity framework looks
22:24 - at the database detects the current
22:26 - version which I will show you later and
22:29 - then figures out what migrations need to
22:31 - run on the database to bring it up to
22:34 - date then it gets these migration
22:36 - classes and converts them to SQL code
22:39 - and runs it on a
22:41 - database so to run the migration we go
22:44 - back to package manager
22:46 - console and run update
22:53 - database so in this example it realized
22:56 - that this is the only migration that
22:59 - needs to be run on the database and of
23:01 - course it ran it so let's see the result
23:04 - I'm going to go back to management
23:08 - Studio refresh the
23:11 - databases and here we have code first
23:14 - demo so I did not have to come here and
23:16 - manually create this database I just
23:18 - focused on my code which is much more
23:20 - fun for us
23:22 - developers so let's expand
23:25 - this look we've got two t tabls here
23:29 - underline migration history which is
23:31 - used internally by any framework to
23:33 - figure out what migrations have been run
23:35 - on this database and we also have this
23:38 - post
23:40 - table with these columns which looks
23:43 - exactly like the one we created in the
23:45 - database first
23:47 - demo so as you saw with the code first
23:50 - workflow we simply focus on our code and
23:53 - let the edit framework take care of
23:55 - generating or migrating the database
23:57 - from for us every time we want to make a
24:00 - change to the database again we start
24:02 - with a code create a migration run it
24:04 - and the database will be updated so this
24:07 - is the process in the next lecture I'm
24:09 - going to give you a comparison of
24:11 - database first and code
24:16 - first so database first or code first
24:20 - well in my opinion that comes back to
24:23 - you and your preferences anything you
24:25 - want to do is possible with both code
24:27 - first and database
24:29 - first there are a number of
24:32 - misconceptions I have heard in the
24:33 - community especially on a stack
24:35 - Overflow for example some developers say
24:38 - database first gives you more control
24:40 - over the database but this is actually
24:43 - not true at all with code first you have
24:45 - full control over the database even if
24:48 - the kind of change you want to make got
24:50 - nothing to do with your code let's say
24:52 - you want to create a trigger or modify
24:55 - the query behind the view or maybe
24:57 - create create or remove a store
24:59 - procedure you can do all of these with
25:01 - code first and I will show you later in
25:03 - the
25:04 - course I've also heard some people say
25:06 - that code first is good for Greenfield
25:08 - projects and if you have an existing
25:11 - database you should use database first
25:14 - again this is not right at all because
25:16 - you can reverse engineer your existing
25:18 - database to create a code first model
25:21 - and then use code first migrations for
25:23 - any subsequent changes afterwards I will
25:26 - show you all of these techniques later
25:27 - in the course so here's the question
25:30 - again database first or code
25:32 - first again to reemphasize you can do
25:36 - anything with either of these workflows
25:38 - but in my opinion there are a few
25:40 - advantages to using Code first first you
25:43 - get full versioning of your database you
25:46 - can bring your database to any version
25:48 - with running only one command and this
25:51 - is extremely helpful if you're
25:53 - maintaining different versions of an
25:55 - application without code first you you
25:57 - either have to manually take care of
25:59 - versioning or use a tool like redgate's
26:02 - Source control but that's very expensive
26:05 - with code first you get this for free
26:08 - another Advantage is
26:10 - productivity it's much faster to write
26:12 - code than use the mouse and a table
26:15 - designer we are programmers we are not
26:17 - designers if you're used to visual
26:20 - designers and wizards and clicking and
26:22 - clicking I highly recommend you to
26:24 - change your approach and start to use
26:26 - your keyboard more if you want to be
26:28 - successful because successful
26:30 - programmers use their keyboard they
26:31 - don't use the mouse often anyway code
26:34 - first helps you get things done more
26:36 - quickly of course there's a bit of
26:38 - learning curve at the beginning and you
26:40 - may run into a number of problems early
26:42 - on but trust me all this will disappear
26:46 - after a while and you're never going to
26:47 - switch back I have used code first in
26:50 - many projects and even in production and
26:52 - I've been very happy with it the only
26:55 - thing is where you work you might have
26:57 - have a legacy database deployment tool
27:00 - and for that reason you may not be able
27:02 - to use code first because there are
27:04 - certain steps you need to follow to
27:06 - update the database and everyone in the
27:08 - team has been doing it for a number of
27:10 - years and maybe they're too lazy to
27:12 - change their approach then you have to
27:14 - use database first if that's the case
27:17 - you have no choice but if you have a
27:20 - chance to change the system and
27:22 - influence your team to adopt code first
27:25 - that's great go for it or at least give
27:28 - it a try don't just stick to the old
27:30 - ways of doing things because some people
27:33 - say that's a better way always try
27:35 - different approaches and see what works
27:37 - for you so in this course I'm going to
27:40 - teach you both database first and code
27:42 - first so you can see the differences try
27:45 - them yourself and pick one that works
27:47 - better for you so in the next section
27:49 - we'll be looking at details of databased
27:51 - first workflow I hope you enjoyed this
27:53 - section and thank you for
27:55 - watching