00:00 - to become a backend developer there are
00:01 - five essential skills let's go over them
00:04 - one by
00:07 - one the first step to learning backend
00:09 - development is to pick up a programming
00:11 - language here we have a few options like
00:13 - JavaScript python Ruby Java C and go
00:17 - just to name a few now which one is the
00:19 - best well it's almost impossible to pick
00:21 - one language as the best or the ultimate
00:23 - language because the choice of language
00:25 - depends on various factors like project
00:28 - requirements team expertise and
00:30 - performance needs for example JavaScript
00:32 - is used for full stack development
00:34 - because we can use it on both the front
00:36 - end and the back end in contrast Python
00:39 - and Ruby are often used for rapid
00:41 - prototyping and fast development Cycles
00:44 - Java and C are often used in building
00:46 - large scale Enterprise grade
00:48 - applications they're heavily used in
00:50 - large organizations and government
00:52 - systems and go is used for performance
00:54 - critical and concurrent applications now
00:56 - a common mistake I see among my students
00:58 - is that they try to learn learn many of
01:00 - these languages hoping that this would
01:02 - increase their job opportunities but it
01:04 - doesn't work that way because learning a
01:06 - language is only the first step you also
01:08 - need to learn the ecosystem of tools and
01:11 - libraries for that language to land a
01:13 - job so if you're starting out just stick
01:15 - to one language whichever you like but
01:18 - also do a bit of research and see how
01:20 - many job opportunities are available for
01:22 - that language where you live generally
01:24 - speaking there are often more job
01:26 - opportunities for python Java and
01:28 - JavaScript but again I want want you to
01:30 - do your own research now assuming that
01:32 - there are more job opportunities for
01:34 - these three languages in your town and
01:36 - you're not sure what language to start
01:38 - with I would recommend python because
01:40 - it's the easiest and has a simple
01:42 - readable syntax that's great for
01:44 - beginners my second choice is Java
01:46 - because it's a solid language and is
01:48 - often taught to computer science and
01:50 - software engineering students JavaScript
01:52 - has a ton of weird parts and baggage
01:54 - from the past because it wasn't
01:56 - originally built for building backends
01:58 - we can certainly use it to build great
02:00 - backends and I've done that many times
02:02 - but I still prefer Java or C to
02:04 - JavaScript for building backends so
02:06 - don't overthink this pick a language and
02:08 - dedicate 2 months to learning it if you
02:11 - spend 3 to 5 hours every day studying
02:13 - and coding you can learn any of these
02:15 - languages in about 2 months now to help
02:18 - you on this journey I've created a free
02:20 - supplementary PDF that breaks down the
02:23 - specific Concepts you need to learn for
02:25 - each skill it also includes several
02:27 - project ideas to help you practice and
02:29 - apply what you have learned it's a great
02:31 - resource to review your progress find
02:33 - gaps in your knowledge and prepare for
02:35 - interviews you can find the link in the
02:37 - description Box by the way I have a
02:39 - bunch of tutorials on this channel and
02:41 - complete courses on my website if you're
02:43 - looking for structured learning again
02:45 - links are in the description box the
02:47 - next thing you need to learn is a
02:49 - version control system like git git is
02:51 - not a programming language it's a tool
02:53 - that we use to track changes to our code
02:55 - and collaborate with others git and
02:57 - GitHub which is a platform that hosts
02:59 - git repositories are essential for every
03:02 - developer git has a ton of features but
03:04 - you don't need to know them all for
03:05 - everyday use think of it like the 8020
03:08 - rule 80% of the time you use 20% of gits
03:11 - features so 1 to two weeks of practice
03:13 - is enough to get up and running now
03:15 - building backends often involves working
03:17 - with data structures and implementing
03:20 - complex algorithms this is where a lot
03:22 - of self-taught programmers struggle
03:24 - because they try to skip ahead and learn
03:26 - more and more languages and tools
03:28 - without learning the fun alss of
03:30 - computer science data structures and
03:32 - algorithms are critical subjects taught
03:34 - to computer science students and they're
03:37 - often covered in Tech interviews
03:38 - especially at Big tech companies like
03:40 - apple Google and Microsoft while you can
03:43 - skip this step and go to the next as
03:45 - someone who has had the privilege of
03:47 - teaching millions of people I highly
03:49 - recommend you not overlook this step
03:51 - otherwise you're going to feel the pain
03:52 - later in your career so spend 1 to 2
03:55 - months studying classic computer science
03:57 - data structures and algorithms this will
03:59 - give you a strong foundation in
04:01 - programming and problem solving the next
04:03 - thing I would recommend to learn which a
04:05 - lot of self-taught people Miss is design
04:08 - patterns design patterns are proven
04:10 - solutions to Common software design
04:12 - problems there are 23 classic design
04:15 - patterns that were documented in this
04:17 - classic book design patterns by the gang
04:19 - of four many of these patterns are used
04:21 - in web Frameworks particularly springing
04:23 - Django and as.net core which we'll talk
04:26 - about in a few minutes so learning these
04:28 - design patterns will give you a deeper
04:31 - understanding of objectoriented design
04:33 - principles and how these Frameworks work
04:35 - under the hood now I got to tell you
04:37 - this book is pretty old and it's written
04:39 - in C++ honestly it's a difficult read
04:42 - because many of the examples in the book
04:44 - are dry and not quite relevant to Modern
04:46 - software that's why I've created a very
04:49 - Hands-On and pragmatic course on this
04:51 - topic where I use Java and modern
04:53 - examples that you find in applications
04:55 - we use every day so you can see how
04:57 - these design patterns are used to solve
04:59 - problem problems in modern applications
05:01 - whether you want to take my course or a
05:03 - different resource I believe if you
05:05 - dedicate a few hours every day you can
05:06 - have a pretty solid understanding of
05:08 - design patterns in about 2 months the
05:11 - next thing you need to learn is
05:12 - understanding and designing databases
05:15 - there are two classes of database
05:16 - engines relational and non-relational
05:19 - also called nosql databases in
05:21 - relational databases data is stored in
05:23 - tables with rows and columns that are
05:26 - related that's why we call them
05:28 - relational databases these databases are
05:30 - best for applications that require
05:32 - complex queries and transactions like
05:35 - banking systems and e-commerce
05:36 - applications especially any application
05:39 - that needs complex reporting examples of
05:42 - relational database engines are MySQL
05:44 - postgress SQL server and Oracle these
05:47 - are different products that despite some
05:49 - differences work more or less the same
05:51 - way with all these products you retrieve
05:54 - or store data using a language called
05:56 - SQL some people call it SQL which is
05:59 - short for structured query language it's
06:02 - a simple language that looks like plain
06:04 - English now you don't need to learn all
06:06 - these database engines because different
06:08 - projects and teams use different
06:09 - database engines when you're starting
06:11 - out you just need to learn one of them
06:13 - and you can easily pick up others on the
06:15 - job out of these I would recommend MySQL
06:18 - because it's the most popular database
06:20 - engine but you can pick any other
06:21 - database engine that you like one month
06:23 - is enough to learn the essence of SQL
06:26 - and working with a relational database
06:28 - now in no SQL databases data is stored
06:31 - without a predefined table structure so
06:34 - these databases are more flexible
06:36 - they're best for applications that
06:37 - require flexible data models and
06:39 - real-time analytics examples include
06:42 - mongodb couch DB and Cassandra again
06:46 - these are several products out there and
06:48 - you don't have to learn all of them out
06:49 - of these I would recommend mongodb
06:52 - because it's the most popular and you
06:54 - can learn it in about a month you're not
06:56 - going to be an expert but you're going
06:57 - to have a decent practical knowledge
07:00 - the next thing you need to learn is a
07:01 - web framework which depends on your
07:03 - programming language for python you
07:05 - should learn D Jango for Java you should
07:07 - learn spring boot for JavaScript you
07:09 - should learn express.js for C you should
07:12 - learn as.net core for Ruby you should
07:14 - learn Ruby on Rails and for go you
07:17 - should learn gen all these Frameworks
07:19 - more or less do the same thing they
07:21 - provide a bunch of tools for building
07:23 - backends handling tasks like routing
07:26 - request and response handling database
07:28 - interaction and Security in a nutshell
07:31 - with these Frameworks we can build and
07:33 - publish application programming
07:35 - interfaces or apis these apis are
07:38 - essentially communication points between
07:40 - front-ends and backends allowing
07:42 - frontends to retrieve or post data to
07:45 - backends if you have a solid background
07:47 - in a programming language and databases
07:49 - you can learn any of these Frameworks in
07:51 - about 2 months so if you dedicate a few
07:53 - hours every day and follow this road map
07:56 - you'll have the necessary knowledge to
07:58 - apply for entry level backend Developer
08:00 - jobs in about 12 months now if you want
08:02 - to take your skills to the next level
08:04 - there are of course additional things
08:06 - you should learn I've included them in
08:08 - the PDF I mentioned earlier again the
08:10 - link is in the description if you have
08:12 - any questions please let me know in the
08:13 - comments below and I'll do my best to
08:16 - answer you right here or in my future
08:18 - videos If you enjoyed this video please
08:20 - give it a like And subscribe for more
08:21 - useful content