00:00 - [Music]
00:01 - in JavaScript we have two categories of
00:04 - types on one side we have value types
00:07 - also called primitives and the other
00:10 - side we have reference types so in the
00:13 - value types category we have number
00:15 - string boolean symbol which is new in
00:19 - es6 we're going to look at that later in
00:21 - the course as well as undefined and know
00:24 - these are the primitive or value types
00:27 - on the other side we have objects
00:30 - functions and arrays
00:32 - so in the last lecture you learned that
00:34 - functions are also objects the same is
00:37 - true about a race so in a nutshell in
00:39 - JavaScript we have primitives and
00:41 - objects now in this lecture I'm gonna
00:43 - show you how primitives and objects
00:46 - behave differently because this is
00:48 - absolutely important for you to
00:49 - understand before we move on to the next
00:51 - section where I talk about prototypes so
00:55 - on this empty canvas I'm gonna define
00:57 - two primitives x and y I'm gonna set Y
01:04 - to X so here Y is 10 now I'm gonna
01:07 - change the value of x to 20 what I want
01:10 - you to note here is that X and y are two
01:14 - independent variables so I save the
01:17 - changes go back in the console let's log
01:20 - X X is 20 and Y is 10 they are
01:25 - independent so when we work with
01:27 - primitives this value is value that we
01:31 - have here is stored inside of this
01:33 - variable when we copy that variable that
01:37 - value that is stored in the variable is
01:39 - copied into this new variable so they
01:42 - are completely independent of each other
01:45 - now let's see what happens if we use a
01:48 - reference type or an object here so I'm
01:51 - gonna change this to an object that has
01:54 - a property called value
01:58 - and then instead of setting X to 20 I'm
02:00 - gonna set X dot value to 20 so save the
02:04 - changes back in the console let's log X
02:08 - so you can see value property is 20 now
02:12 - let's log Y we can see the value
02:15 - property of Y is also 20 so this is the
02:18 - takeaway when we use an object that
02:21 - object is not stored in this variable
02:23 - that object is stored somewhere else in
02:26 - the memory and the address of that
02:28 - memory location is stored inside that
02:31 - variable so then when we copy X into y
02:35 - it's the address or the reference that
02:38 - is copied in other words both x and y
02:41 - are pointing to the same object in
02:44 - memory and when we modify that object
02:47 - using either X or Y the changes are
02:50 - immediately visible to the other
02:52 - variable so here's the conclusion
02:54 - primitives are copied by value reference
02:58 - types or objects are copied by the
03:01 - reference let's take a look at another
03:03 - example so I'm gonna define a function
03:07 - called increase that takes a number and
03:12 - here we simply increase this number by 1
03:16 - let's declare a number variable and set
03:20 - it to 10 and then call increase and pass
03:25 - this number now if I log this number on
03:29 - the console what do you think we're
03:31 - going to see let's have a look so save
03:34 - the changes we see 10 but dinner we
03:38 - increase the number well when we call
03:41 - increase and pass this number variable
03:44 - its value is copied into this parameter
03:48 - that is local in this function so this
03:51 - number variable here is completely
03:53 - independent of this other number
03:56 - variable here in this function we
03:58 - increment number by 1 so it will be 11
04:01 - but after this function this number is
04:04 - going to go out of the scope so when we
04:07 - log this number on the console we're
04:10 - essentially dealing
04:12 - with this first number so I told you
04:14 - that primitives are copied by their
04:17 - value so here we are dealing with two
04:19 - independent copies that's why we see ten
04:23 - on the console now let's change this to
04:26 - a reference type or an object so I'm
04:28 - gonna change ten to an object that has a
04:32 - value property okay let's rename this
04:36 - variable to object and similarly I'm
04:40 - going to rename this parameter in this
04:43 - function to object and then increment
04:46 - object dot value now when we log this on
04:50 - the console what do you think we're
04:52 - gonna see we're gonna see 11 see we got
04:57 - this object with value 11 the reason for
05:00 - this is because when we call increase
05:02 - and pass this object this object is
05:05 - passed by its reference so this local
05:07 - parameter that we have here will point
05:10 - to the same object that we defined here
05:13 - so in this case we are not dealing with
05:16 - two independent copies we have two
05:18 - variables that are pointing to the same
05:20 - object so any changes we make to this
05:22 - object will be visible to the other
05:24 - variable so remember this in JavaScript
05:28 - we have value types also called
05:30 - primitives as well as reference types
05:32 - which are objects our primitives are
05:35 - number string boolean symbol undefined
05:39 - and no primitives or value types are
05:42 - copied by their value reference types or
05:45 - objects are copied by the reference
05:50 - hi guys thank you for watching my
05:53 - javascript tutorial this tutorial is
05:55 - part of my JavaScript course where you
05:57 - learn all the essential JavaScript
05:59 - features that every web and mobile
06:02 - application developer must know if
06:04 - you're an absolute beginner or have some
06:06 - experience in JavaScript and are looking
06:08 - for a fun and in-depth course that
06:10 - teaches you the fundamentals of
06:11 - JavaScript this course is for you this
06:14 - course is also packed with tons of
06:16 - exercises that help you master what you
06:18 - learned in the course in fact many of
06:20 - these exercises are questions that come
06:22 - up in technical programming interviews
06:25 - so if you're pursuing a job as a
06:27 - front-end or a back-end developer or if
06:30 - you simply want to have a more in-depth
06:32 - understanding of JavaScript I highly
06:34 - encourage you to enroll in the course
06:36 - for a limited time you can get this
06:38 - course with a discount using the link in
06:40 - the video description click the link to
06:42 - find out more about the course and
06:43 - enroll