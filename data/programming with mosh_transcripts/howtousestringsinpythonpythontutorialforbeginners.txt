00:03 - so here we have this course variable set
to Python programming as I told you
00:08 - before whenever you work with text you
should surround your text with quotes
00:12 - you can either use double quotes or
single quotes that's more of a personal
00:17 - preference but quite often we use double
quotes
00:20 - you also have triple quotes and we use
them to format a long string for example
00:26 - if you have let's say a variable message
that is the message we want to include
00:32 - in the body of an email
you can use triple quotes to format it
00:38 - like this hi John this is Marsh from
code with marsh comm blah blah blah so
00:47 - that's when we use triple quotes now we
don't need this in this lecture so
00:52 - delete let me show you a few useful
things you can do with strings first of
00:57 - all we have this built-in function in
Python for getting the lengths of
01:02 - strings what is a function a function is
basically a reusable piece of code that
01:08 - carries out a task as a metaphor think
of the remote control of your TV on this
01:14 - remote control you have buttons for
different functions like turn on turn
01:18 - off change the channel and so on these
are the built-in functions in your TV in
01:23 - Python and many other programming
languages we have the exact same concept
01:27 - so we have functions that are built into
the language on the platform you can
01:32 - reuse these functions to perform various
tasks so here we can use the built-in
01:37 - Len function to get the length of a
string which means the number of
01:42 - characters in that string now whenever
you want to use a function you should
01:46 - use parentheses now we say you're
calling this function which basically
01:52 - means we are using this function now
some functions take additional data
01:57 - which we refer to as arguments these
arguments are inputs to these functions
02:02 - so this Len function takes an input or
an argument here we pass our course
02:09 - variable and this will return the number
of characters in this string so let's
02:15 - print that and see what we get run the
program we get 18 because we have 18
02:22 - characters here let's look at another
example if you want to get access to a
02:28 - specific character in this string you
use the square bracket notation so here
02:33 - we add course square brackets to get the
first character you use the index 0 so
02:41 - in Python like many other languages
strings are 0 index which means the
02:47 - index of the first
actor or the first element is zero so
02:52 - now when we print this
02:55 - we'll get P okay now you can also use a
negative index like minus one what does
03:05 - that mean
well if zero represents the first
03:10 - character here what do you think
negative one represents that takes us
03:15 - back to the end of this string so that
returns the first character from the end
03:20 - of this string let's run this program
you will see it will get G there you go
03:27 - using a similar syntax you can slice
strings let me show you so I'm gonna
03:33 - duplicate this line and remove negative
one now let's say we want to extract the
03:39 - first string characters in this string
so here we need two indexes the start
03:44 - index colon the end index so this will
return a new string that contains the
03:51 - first three characters in this course
variable that will be P Y and T so the
03:58 - index of these characters are 0 1 & 2 so
that means the character at the end
04:04 - index is not included ok let's run the
program and make sure we get the right
04:10 - result there you go
py T now what if we don't include the
04:15 - end index what do you think we're gonna
get it's common sense
04:20 - we start from index 0 and go all the way
to the end of this string so this will
04:26 - return a new string that is exactly the
same as the original string let's take a
04:31 - look so we get python programming now
what if we don't include the start index
04:39 - but include the end index what do you
think we're gonna get once again it's
04:45 - common sense so by default Python will
put 0 here so it will start from the
04:50 - beginning of this string so when I run
this program we should get py t one more
04:55 - time there you go and finally as the
last example if we don't include the
05:01 - start
and the end index this will return a
05:05 - copy of the original string let's look
at this so we get Python programming now
05:13 - you don't have to memorize any of these
just remember we use the Len function to
05:17 - get the length of a string we use
bracket notation to get access to a
05:22 - specific element or a specific character
and we use this notation to a slice a
05:27 - string
05:34 - so we have this string here Python
programming now let's say we want to put
05:40 - a double quote in the middle of this
string there is a problem here
05:45 - Python interpreter sees this second
string as the end of the string so the
05:51 - rest of the code is meaningless and
invalid how do you solve this problem
05:56 - well there are two ways one way is to
use single quotes for our string and
06:03 - then we can use a double quote in the
middle of this string but what if for
06:08 - whatever reason perhaps for being
consistent in our code we decided to use
06:13 - double quotes how can we add another
double quote in the middle of this
06:18 - string well we can prefix this with a
backslash backslash in Python strings is
06:25 - a special character we have a jargon for
that called
06:29 - escape character we use it to escape the
character after let me show you what I
06:35 - mean so let's print this course and run
this program what's going on here we
06:44 - don't have the backslash because we use
that to escape this double code and
06:49 - basically displayed here so backslash is
an escape character and backslash double
06:56 - quote is an escape sequence in Python
strings we have a few other escape
07:01 - sequences that you should be aware of
let me show you so in Python we use a
07:06 - high sign to indicate a comment a
comment is like additional note that we
07:12 - add to our program it's not executed by
Python interpreter okay
07:16 - so here are the escape sequences you
have seen backslash double quote we also
07:22 - have backslash single quote so we can
use that to add a single code here let's
07:30 - run the program here it is beautiful we
also have double backslash so if you
07:37 - want to include a backslash in your
strings
07:40 - you should prefix it with another
backslash let me show you so when we run
07:45 - this
we get python one backslash programming
07:48 - and finally we have backslash n which is
short for newline so now if I add a
07:56 - backslash n here see what we get we get
a new line after Python so programming
08:04 - will end up on the second line so these
are the escape sequences in Python
08:16 - here we have two variables first and
last let's say we want to print my full
08:22 - name on the console so we can define
another variable full set it to first
08:29 - then concatenate it with a space and one
more time concatenate it with last now
08:37 - when we print full we get my full name
on the console beautiful now this
08:44 - approach are using concatenation to
build a string is okay but there is a
08:49 - better and newer approach we can use
formatted strings so here we can set
08:55 - full to this string and prefix it with
an F which can be lowercase or uppercase
09:02 - this formatted string doesn't have a
constant value like these two strings
09:08 - here it's actually an expression that
will be evaluated at runtime so here we
09:14 - want to add our first name we use curly
braces to print the value of the first
09:21 - variable after that we had a space and
then we add curly braces one more time
09:27 - to print the last name so at runtime
this expression will be evaluated what
09:34 - we have in between curly braces will be
replaced at runtime now let's run this
09:40 - program one more time we get the exact
same result just be aware that you can
09:46 - put any valid expressions in between
curly braces so earlier you learned
09:52 - about the built-in Len function we can
call Len here to get the length of this
09:59 - string let's run this program one more
time so we get four we can also replace
10:05 - last with an expression like there's two
plus two let's run this program we get
10:10 - four and four so when using formatted
strings you can put any valid
10:16 - expressions in between curly braces
10:26 - in this lecture we're going to look at a
few useful functions available to work
10:31 - with strings so earlier you learned
about this built-in Len function this
10:37 - function is general-purpose so it's not
limited to strings later I will show you
10:41 - how to use this function with other kind
of objects but in Python we have quite a
10:46 - few functions that are specific to
strings
10:49 - let me show you so here if we type
course dot C all these are functions
10:58 - available on strings now in precise
terms we refer to these functions as
11:03 - methods this is a term in
object-oriented programming that you
11:07 - will learn about later in the course for
now what I want you to take away is that
11:13 - everything in Python is an object and
objects have functions we call methods
11:19 - that we can access using the dot
notation so here course is an object we
11:25 - use the dot notation to access its
functions or more accurately methods
11:30 - let's take a look at a few of these
methods we have upper to convert a
11:35 - string to uppercase now let's print this
and run the program here is what we get
11:42 - beautiful now note that the metals that
you call here return a new string so the
11:48 - original string is not affected let me
show you
11:51 - so print course run the program one more
time look this is our original string
11:57 - right so course the upper returns a new
string a new value we can store it in a
12:04 - variable like chorus underline capital
like this now to keep this demo simple
12:12 - and consistent I'm gonna revert this
back and use a print statement we also
12:18 - have the lower method to convert a
string to lowercase we also have title
12:25 - which will capitalize the first letter
of every word
12:29 - so if our string was like this when we
call the title method we get Python
12:37 - programming as you see here okay another
useful method is strip and we use it to
12:44 - trim any white space at the beginning or
end of a string this is particularly
12:49 - useful when we receive input from the
user
12:52 - let me show you so let's imagine the
user entered a couple of white spaces at
12:58 - the beginning of this string when we
call course that strip those white
13:04 - spaces will be removed
take a look so note that in the first
13:09 - three examples we have those white
spaces but in the last one it is removed
13:14 - so a strip removed the whitespace from
both the beginning and end of a string
13:19 - we also have L strip which is short for
left strip and our strip which is short
13:25 - for right strip so it will remove the
white space from the end of a string if
13:29 - you want to get the index of a character
or a sequence of characters in your
13:35 - string you should use the find method &
masaya so course that find so as an
13:43 - argument here we pass another string we
can pass a character or a series of
13:50 - characters let's find the index of Pro
run the program so the index of Pro is 9
13:57 - so if you start from 0 here all the way
to 9 this is the index of Pro ok now as
14:06 - I told you before python is a case
sensitive language so if I pass a
14:10 - capital P here obviously we don't have
these exact characters in our string so
14:17 - let's see what we get we get negative 1
that means this string was not found in
14:23 - the original string another useful
method is replace so we call replace
14:30 - with this we can replace a character or
a sequence of characters with something
14:36 - else so let's say we want to replace all
lowercase peas with J with this we get
14:44 - Jai Thunderer cramming whatever that
means and finally if you want to check
14:50 - for the
existence of a character or a sequence
14:53 - of characters in your string you can use
the in operator let me show you so print
15:00 - rewrite an expression like this throw in
course so this is an expression as I
15:08 - told you before an expression is a piece
of code that produces a value so this
15:13 - expression checks to see if we have Pro
in course the difference between this
15:19 - expression and calling the find method
is that the find method returns the
15:23 - index of these characters in our string
but as this expression returns a boolean
15:30 - so it's a true or false let me show you
so run the program we get the boolean
15:37 - true and finally we have the not
operator and we use that to see if our
15:43 - string does not contain a character or
sequence of characters so let's change
15:51 - this to swift not in course when this
expression is evaluated what do you
15:59 - think we're gonna get well we don't have
Swift in this string so not in will
16:06 - return true let's take a look there you
go
16:12 - so these are the useful string methods
next we'll look at numbers
16:20 - hi guys thank you for watching this
tutorial my name is muhammad ani and i
16:24 - have tons of tutorials like this for you
on my channel so be sure to subscribe
16:28 - and also please like and share this
video if you want to learn Python
16:32 - properly from scratch with depth I have
a comprehensive python tutorial for you
16:37 - the link is below this video so click
the link to get started thank you and
16:41 - have a fantastic day