00:00 - [Music]
00:01 - so you have learned the essentials of
00:03 - angular every application needs to be
00:06 - deployed at some point and that's the
00:08 - topic for this section so you're going
00:11 - to learn how to optimize your
00:12 - applications for deployment build
00:15 - deployable packages of your app with
00:17 - angular CLI work with different
00:20 - environments like development testing
00:22 - and production lint your code to keep it
00:25 - clean and consistent and deploy your
00:28 - apps to github pages firebase and Heroku
00:32 - so now let's get started
00:38 - in this section we're going to deploy a
00:40 - very simple application I have built
00:42 - that you can download from this lecture
00:44 - so if you want to code along with me
00:46 - download the zip file extract the
00:49 - project and just like always run npm
00:52 - install and then ng surf so this is our
00:58 - application we have a couple of pages
01:00 - one is the home page and the other is
01:03 - the list of my followers on github so
01:07 - this application includes routing and
01:09 - consuming HTTP services so here we have
01:13 - only a front-end or back-end in this
01:16 - case github api is provided by a third
01:19 - party in your applications you may build
01:22 - the backend yourself so later in this
01:25 - section I will give you some directions
01:26 - about how to deploy both the front-end
01:29 - and the backend now in terms of the
01:32 - deployment here we have a couple of
01:35 - options the simplest option is to copy
01:37 - this entire folder with all its files
01:40 - into a non development machine so I can
01:43 - copy this folder into let's say
01:45 - production machine and there I can run
01:48 - ng serve that's the simplest option but
01:51 - there are a couple of problems with this
01:53 - approach the first problem is that here
01:55 - we have quite a large number of files so
01:58 - if you look at this node modules folder
02:00 - here we have more than 23,000 files and
02:04 - a total size of this folder is more than
02:07 - 230 megabytes sure we can exclude this
02:10 - folder and do an NPM install on the
02:13 - target machine but there is still
02:15 - another problem with this approach the
02:17 - problem is that here we have large
02:20 - bundles so here in the terminal look at
02:24 - the size of the vendor bundle our vendor
02:26 - bundle is 2.5 megabytes and this is a
02:30 - very simple application we are not using
02:32 - a lot of third-party libraries in fact
02:35 - we're only using angular also our main
02:38 - bundle is 20 kilobytes and our Styles
02:41 - bundle is 159 kilobytes we can do much
02:44 - better so let me show you a few
02:47 - optimization techniques we can apply
02:49 - here these techniques have been around
02:51 - for more than
02:52 - decade and they're not specific to
02:54 - angular chances are you're familiar with
02:57 - most of these techniques the first
02:59 - technique is minification and this
03:02 - involves removing all the comments and
03:04 - white spaces so look at this piece of
03:07 - code here we have three lines of comment
03:10 - a class with one method if we run this
03:13 - code through a mini fire we're going to
03:15 - get something like this
03:16 - so our comment is gone and all the white
03:19 - spaces are removed so this is
03:21 - minification we have another technique
03:24 - called adla fication and this involves
03:27 - renaming long descriptive variable and
03:30 - function names into short cryptic names
03:34 - so back to our example we can rename our
03:37 - home component and unclick method to
03:39 - something like this so this is
03:42 - uglification now the good thing is we
03:44 - don't have to do this ourselves there
03:46 - are lots of tools out there that do this
03:48 - for us the third optimization technique
03:51 - is bundling and you have already seen
03:54 - that throughout the course so when we
03:56 - serve our application using angular CLI
03:58 - it automatically creates a few bundles
04:01 - for us each bundle is basically a
04:04 - combination of multiple JavaScript files
04:07 - without these bundles if you want to
04:09 - serve our application exactly the way we
04:12 - have structured our code the client has
04:15 - to send hundreds of requests to download
04:18 - the application and this is very
04:20 - inefficient by combining multiple files
04:23 - into a bundle the client can get a large
04:26 - portion of the applications code using
04:28 - one HTTP request and this means the
04:31 - application loads faster on the client
04:33 - but it also allows the server to serve
04:36 - more clients because instead of serving
04:39 - let's say 500 requests from one client
04:42 - it can serve five requests from that
04:44 - client and at the same time it can serve
04:47 - several other clients so this is
04:50 - bundling the fourth optimization
04:52 - technique is dead code elimination and
04:55 - this involves removing any code that is
04:58 - not part of the application for example
05:00 - you might have created a few classes but
05:03 - perhaps we haven't used them anywhere in
05:05 - the application
05:06 - it doesn't make sense to include these
05:08 - classes in our final bundle so we want
05:10 - to exclude these or similarly if we have
05:13 - referenced a few third-party libraries
05:15 - in our package that JSON but we're not
05:18 - using them we don't want to bring all
05:20 - these third-party libraries in our
05:21 - bundles so this is dead code elimination
05:24 - and the last optimization technique is
05:27 - ahead of time compilation and this
05:31 - involves pre compiling angular
05:33 - components and their templates and this
05:36 - will have a significant improvement in
05:37 - the performance of our application I'm
05:40 - going to talk about this in the next
05:41 - lecture now here's the good news we can
05:44 - apply all these optimization techniques
05:46 - using a single command with angular CLI
05:50 - so when we build our application using
05:53 - angular CLI with the prod flag angular
05:56 - CLI will produce highly optimized
05:59 - bundles and then we can simply deploy
06:01 - these files to a non development machine
06:04 - you're going to see this later in this
06:06 - section so first let's take a look at
06:09 - ahead of time compilation
06:14 - so what is this ahead of time
06:16 - compilation well every angular
06:19 - application involves a compilation step
06:21 - so far you haven't seen this compilation
06:24 - because it happens behind the scene but
06:28 - I'm gonna show that to you in a minute
06:29 - so in angular framework we have a
06:32 - compiler the job of this compiler is a
06:35 - little bit different from other
06:37 - compilers you might be familiar with for
06:39 - example a C++ compiler takes C++ code
06:43 - and converts it to a different language
06:45 - like machine code angular compiler in
06:48 - contrast takes JavaScript code and
06:51 - produces JavaScript code and this might
06:54 - be confusing for you at the beginning
06:55 - but it's actually very easy to
06:57 - understand let me explain it using an
06:59 - example look at the template for our
07:02 - home component here we have an
07:05 - interpolation string for rendering the
07:07 - title field if you load this HTML file
07:10 - in a browser are we going to see the
07:13 - value of the title field of course not
07:15 - we're going to see this as static text
07:18 - exactly as is so this curly brace syntax
07:22 - is only meaningful to angular the same
07:25 - is true for all the property and event
07:28 - binding expressions browsers don't
07:31 - understand that it's only angular that
07:33 - understands what these property and
07:35 - event bindings mean so when our
07:38 - application starts angular compiler is
07:40 - going to kick in it's going to walk down
07:43 - the tree of our components and for each
07:46 - component is going to parse its template
07:48 - so in this case it's going to look at
07:50 - the template for home component it sees
07:53 - that here on the top we have a div
07:55 - inside this div we have an h1 and inside
07:59 - this h1 we have some static text plus
08:02 - some dynamic text and interpolation
08:05 - strings so based on this template is
08:08 - going to produce some JavaScript code to
08:10 - create this structure in the Dom so
08:13 - here's an example this is a very
08:15 - simplified example when angular compiler
08:18 - parses the template for our home
08:20 - component it may produce some JavaScript
08:22 - code like this so here we create a new
08:25 - element using document that create
08:27 - element
08:28 - this is our div then we create an h1 and
08:31 - next we append this h1 as a child
08:34 - element inside this div now after this
08:37 - there's going to be some code to take
08:39 - the value of the title field from our
08:41 - component and displayed in the Dom and
08:44 - also there's going to be more code for
08:47 - detecting the changes in the value of
08:48 - this field and refreshing the Dom if
08:51 - necessary so angular compiler will
08:53 - produce this JavaScript code at runtime
08:56 - and then this code will be executed and
08:59 - as a result we'll see the view this is
09:02 - what we call just-in-time compilation in
09:05 - other words the compilation that happens
09:08 - at runtime
09:08 - now this just-in-time compilation is
09:11 - perfectly fine when you're developing an
09:13 - application on our local machine but
09:16 - it's very inefficient for a production
09:18 - environment because this compilation
09:20 - step is going to happen for every user
09:22 - of our application so every time a user
09:25 - lands on our application angular
09:28 - compiler is going to walk down the tree
09:30 - of our components and compile all these
09:33 - components and their templates now you
09:35 - can imagine as the number of our
09:37 - components increases or as our templates
09:40 - get more complex this compilation step
09:42 - is going to take longer also for this
09:46 - very reason we have to ship angular
09:48 - compiler as part of the vendor bundle
09:51 - and this is why our vendor bundle is 2.5
09:54 - megabytes
09:55 - even for a simple application because
09:58 - almost half of this bundle is dedicated
10:00 - to angular compiler now what's the
10:03 - solution well we can perform this
10:06 - compilation step ahead of time before
10:09 - deploying our application then this
10:11 - compilation step doesn't have to happen
10:13 - for every user our users will download
10:16 - the final precompiled application and
10:19 - this means our application will start
10:22 - faster so the browser doesn't have to
10:25 - wait for the angular compiler to compile
10:27 - our application also we no longer have
10:31 - to ship angular compiler with our vendor
10:33 - bundle and this will reduce the size of
10:36 - this bundle significantly another
10:39 - benefit of ahead of time compilation is
10:41 - that
10:42 - can catch all the errors in our
10:43 - templates earlier at compile-time before
10:46 - deploying our application in contrast
10:49 - with just-in-time compilation we see
10:52 - these errors at runtime but if you have
10:55 - a complex application with a lot of
10:56 - pages we may not be aware of the errors
10:59 - in our ten place until we navigate the
11:02 - particular page in our application in
11:04 - contrast with ahead of time compilation
11:06 - we can catch all these errors at compile
11:09 - time before deploying our application
11:11 - and finally with ahead of time
11:13 - compilation we get better security
11:16 - because we compiled HTML templates and
11:18 - components into Java Script files long
11:21 - before they are served to the client
11:23 - with no templates to read and no risky
11:26 - client-side HTML or JavaScript
11:29 - evaluation there are less opportunities
11:31 - for injection attacks so these are the
11:34 - benefits of ahead of time compilation
11:37 - next we're going to see this angular
11:39 - compiler in action
11:44 - all right now let's see an angular
11:46 - compiler in action so if you open up
11:49 - package.json under dev dependencies look
11:54 - here we have a dependency to angular
11:56 - slash compiler
11:58 - - CLI this is the angular compiler
12:01 - package that takes a significant part of
12:04 - our vendor bundle now let me show you
12:06 - how to run this compiler so here in the
12:10 - terminal we can run angular compiler
12:12 - from node modules folder so node under
12:15 - line modules dot bin that's where the
12:20 - binary files are located and here we run
12:23 - in GC that's angular compiler now let's
12:27 - see what happens
12:28 - all right angular compiler compiled our
12:31 - components and their templates now back
12:34 - in vs code you can see we have 25 new
12:37 - files here here is an example in the
12:41 - home folder next to our CSS file you can
12:43 - see we have a new file got shim an NGO
12:46 - style at es let's have a look so
12:51 - currently we don't have any CSS for this
12:54 - home component that's why this array is
12:56 - empty but if we didn't have any styles
12:59 - angular compiler would export these
13:01 - Styles using a constant here let's take
13:04 - a look at another example back in the
13:07 - home folder we have this file home that
13:10 - component that ng factory so for every
13:14 - component that we have reference in our
13:15 - application angular compiler generates
13:18 - an NG factory file look at this code
13:23 - here this is the combination of our
13:27 - component and its template so we can see
13:30 - a little bit of our markup here so
13:33 - earlier we had this text-align:center
13:35 - applied to our div in our home component
13:38 - here we have an image you can see the
13:40 - source attribute of this image so this
13:43 - is the code that angular compiler
13:44 - generates and runtime and of course this
13:47 - is typescript so it should be
13:49 - transported to JavaScript and then it
13:51 - will be executed and the result of this
13:54 - is our home component rendered in the
13:57 - Dom
13:58 - now as you can see this code is very
14:00 - cryptic so it's not designed it's not
14:02 - produced for humans to read I just
14:05 - wanted to show you what is happening at
14:07 - runtime when you load an angular
14:09 - application so angular component kicks
14:12 - in and it generates a bunch of energy
14:14 - factory files for each component
14:16 - reference in our application now let me
14:19 - show you something interesting I'm gonna
14:22 - go to home dot HTML and change this
14:27 - title to title too
14:29 - obviously we don't have a field with
14:31 - that name so now let's see what happens
14:34 - when we run angular compiler back in the
14:38 - terminal
14:38 - I run ng see here we get a compilation
14:43 - error property title - does not exist on
14:47 - type home component so this is the
14:50 - benefit of ahead of time compilation we
14:53 - can catch the errors in our templates
14:55 - earlier now in the real word we don't
14:57 - have to run NGC like how I showed you
15:00 - here this was purely for demonstration
15:02 - instead we're going to use angular CLI
15:05 - to build our application for production
15:07 - and angular CLI will internally run
15:10 - angular compiler and that's what I'm
15:13 - going to show you in the next lecture
15:19 - in this lecture I'm going to show you
15:20 - how to use angular CLI to build your
15:23 - applications and get deployable packages
15:26 - for production with this you will get
15:28 - all the optimization techniques that I
15:30 - mentioned at the beginning of this
15:32 - section first of all I want to delete
15:35 - all these 25 files that were generated
15:37 - in the last lecture as part of running
15:39 - angular CLI we don't want any of these
15:42 - files in our project so undo discard all
15:47 - changes now back in terminal in order to
15:51 - build our application for production
15:53 - we run ng build with the prod flag and
16:00 - this will create a deployable package
16:01 - that we can simply copy paste to a
16:04 - different machine or use FTP or any
16:06 - other mechanism to deploy the production
16:08 - server but before running this I want to
16:11 - show you what happens when you run ng
16:13 - build without the prod flag so delete
16:18 - this is going to take a few seconds okay
16:22 - we got those five bundles just like
16:24 - before you can see our vendor bundle is
16:27 - still big
16:27 - it's 2.2 megabytes so we don't have
16:30 - ahead of time compilation here in other
16:33 - words in your compiler is part of this
16:35 - vendor bundle now back in vs code you
16:39 - can see this new folder here dist which
16:42 - is short for distributable let's have a
16:45 - look so we've got the favorite icon for
16:48 - our application we've got the glyph icon
16:51 - files which are part of bootstrap you've
16:53 - got index dot HTML and our bundles now I
16:58 - want to show you a few things here first
16:59 - let's take a look at this index dot HTML
17:04 - this index dot HTML is slightly
17:07 - different from the index dot HTML that
17:10 - we have in our source folder so here in
17:13 - the body element after app root we have
17:16 - a few script references so the first one
17:19 - is a reference to inline the bundle that
17:21 - j/s after that you can see a reference
17:25 - to polyfills and other bundles in our
17:28 - application in contrast the index dot
17:31 - HTML that we have in this
17:33 - source folder doesn't have any script
17:35 - references let's have a look so we go to
17:38 - index that HTML in the source folder
17:42 - look here in the body element we don't
17:45 - have any script references because
17:47 - during development these bundles are
17:50 - injected into the body element at
17:52 - runtime okay now back to the dist folder
17:56 - for every bundle we have two files one
17:59 - is the actual bundle file and the other
18:02 - is a map or a source map file the
18:05 - purpose of this map file is to map a
18:08 - piece of JavaScript code in the bundle
18:10 - to its original source file so when
18:13 - you're debugging our application in
18:14 - chrome this map file allows chrome
18:17 - debugger to show you the actual code in
18:19 - the source file not in the bundle okay
18:22 - now let's take a look at one of these
18:24 - bundles you can see here we don't have
18:28 - any of the optimization techniques I
18:30 - told you at the beginning of this
18:32 - section we have all these kinds of
18:34 - comments we have a lot of white space we
18:37 - have long descriptive names so we don't
18:39 - have minification or activation you also
18:42 - have dead code so if you have created
18:44 - components and services that we have not
18:46 - used in our application they will end up
18:49 - in these bundles let me show you an
18:51 - example so I'm going to create a new
18:54 - component let's call this courses and
18:58 - I'm not going to use this anywhere in
19:00 - our application
19:01 - okay now I'm gonna build the application
19:04 - one more time
19:05 - so ng build all right our bundles all
19:12 - ready now let's take a look at this main
19:15 - that bundled edge is so here if you
19:20 - search for courses you can see 27
19:23 - references so all the code for our
19:25 - courses component is in the bundle so we
19:28 - have dead code here also here we don't
19:31 - have a head of time compilation because
19:34 - the angular compiler is included in the
19:36 - vendor bundle now let's see what happens
19:39 - when we build the application with the
19:41 - production flag so ng build - there
19:46 - Brod now look at the size of our vendor
19:52 - bundle is 1.2 megabytes so it's almost
19:56 - half the size but by the way this is the
19:58 - initial size before applying any kind of
20:01 - minification and uglification so if you
20:03 - look at the actual file size it's even
20:05 - smaller let me show you so let's have a
20:09 - look I'm going to show you the vendor
20:11 - bundle in the dist folder look at the
20:16 - size of this file it's 325 kilobytes so
20:20 - we reduce this from 2.5 megabytes
20:23 - initially to 300 kilobytes also if you
20:27 - look at the other bundles in your
20:28 - application they're all smaller now back
20:32 - in the dist folder we've got this
20:34 - favorite icon and glyph icons just like
20:36 - before but look at this index dot HTML
20:40 - you can see we don't have any white
20:42 - space here so all our HTML markup is
20:45 - represented as one long string now let's
20:50 - take a look and one of our bundles so
20:54 - this is the in line bundle that you saw
20:56 - earlier you can see we don't have any
20:58 - comments here we don't have any
21:00 - descriptive identifiers so our function
21:02 - names are variables they're all cryptic
21:05 - like e are n and so on also here in the
21:09 - filenames we have this random string
21:12 - that we call hash this hash is generated
21:16 - based on the content of the bundle and
21:18 - it's a technique to prevent caching so
21:21 - every time you modify your code and
21:23 - regenerate these bundles this hash is
21:26 - going to change and this will prevent
21:28 - the clients browser to Keysha file with
21:30 - the exact same name because the name of
21:32 - the file is going to change in each
21:34 - build so to recap we can use angular CLI
21:38 - to build a deployable version of our
21:41 - application and what we get is this dist
21:44 - order you can simply copy paste this
21:47 - folder into a non development machine
21:49 - you can use FTP or in a more advanced
21:52 - scenario you can set up some kind of
21:54 - continuous deployment workflow
22:00 - in a typical web application we have the
22:02 - concept of environment so quite often in
22:05 - most organizations we have three
22:07 - environments you have the development
22:09 - environment which is used by developers
22:11 - you have the testing environment which
22:13 - is used by testers and the production
22:16 - environment which is where with deploy
22:18 - your application
22:18 - earlier in the course we had a quick
22:21 - look at this environments folder this is
22:23 - exactly to implement the concept of
22:26 - environment for our application so now
22:28 - let's take a closer look at what we have
22:30 - here and how we can define additional
22:33 - custom environments in this folder we
22:35 - have two files environment dot prot
22:38 - which is for production and environment
22:40 - which is used for development let's take
22:43 - a look at environment at TS so here
22:46 - we're simply exporting an environment
22:48 - object with one property production here
22:51 - we can have additional properties for
22:54 - example you may want to change the color
22:55 - of the navigation bar depending on the
22:58 - environment this way testers know that
23:01 - they are looking at the actual testing
23:02 - website not the production website so
23:05 - they don't accidentally modify some data
23:07 - in the production or you may want to
23:10 - change the name of the application in
23:11 - the navigation bar you may want to add
23:13 - the word testing or perhaps you want to
23:16 - use a different API endpoint in your
23:18 - testing environment you can add all
23:20 - these properties in this object for
23:23 - example I'm gonna add navbar background
23:28 - color so in my development environment I
23:32 - want to make this blue now we should add
23:34 - the same property in our production
23:37 - environment so let's go to environment
23:40 - but product es and simply paste this
23:45 - property but change the color to let's
23:48 - say white now back in the other file you
23:52 - can read from this comment then when you
23:54 - build your application using angular CLI
23:56 - and supply the environment flag angular
23:59 - CLI will pick one of these environment
24:01 - files and put it in our bundle so we
24:04 - don't have to write any code to work
24:06 - with a specific environment object let
24:08 - me show you what I mean so let's go to
24:11 - our navbar component
24:14 - here I'm gonna define a field called
24:16 - background color and I'm gonna set this
24:20 - to the navbar background color of our
24:23 - environment object so environment auto
24:28 - import look on the top here is a problem
24:32 - our auto import plug-in specifically
24:34 - imported the production environment and
24:36 - this is very dangerous we don't want to
24:39 - use this you want to use environment and
24:41 - then when we build our application
24:43 - angular CLI will either pick this
24:45 - environment or environment that prod
24:49 - depending on the environment we specify
24:51 - during building so make sure to always
24:55 - import from environment okay now we set
24:59 - this background color to environment dot
25:01 - look you've got this properties here so
25:04 - let's set it to navbar background color
25:07 - and then let's go to navbar that HTML
25:12 - here on this nav element I'm gonna apply
25:14 - a style binding style that background
25:18 - color I'm gonna bind this to the
25:23 - background color filled in our component
25:27 - now if you want to see this in action
25:29 - you don't necessarily have to build your
25:31 - application you can still serve your
25:33 - application with ng serve but
25:36 - additionally you need to specify the
25:37 - target environment so when we run ng
25:40 - serve here the target environment by
25:42 - default is development if you want to
25:45 - load your application in the production
25:46 - environment you can add - - prod this is
25:51 - the short-form for adding environment
25:54 - equals prod so now angler CLI is going
26:00 - to build our bundles using the
26:02 - production environment object so back in
26:05 - the browser you can see our navigation
26:08 - bar is white but if you go back here and
26:11 - run ng serve now we're going to be in
26:14 - the development environment and our
26:16 - navigation bar is going to be blue so
26:19 - back in the browser look this is our
26:22 - environment object in action
26:26 - hi thank you for watching my angular
26:29 - tutorial if you enjoyed this video
26:30 - please like it and share it with others
26:33 - also you can subscribe to my channel for
26:35 - free new videos every week this video is
26:39 - part of my complete angular course with
26:41 - almost 30 hours of high quality content
26:44 - where you learn everything about angular
26:46 - from the basic to the advanced topics
26:48 - all in one course so you don't have to
26:51 - jump from one tutorial to another in
26:53 - case you're interested you can get this
26:55 - course with a big discount using the
26:57 - link in the video description but if not
26:59 - that's perfectly fine continue watching
27:01 - as the next section is coming up