00:04 - okay guys I found this code on one of
00:06 - Facebook groups called as.net and it
00:10 - immediately got my attention because I
00:12 - can see quite a few number of problems
00:14 - here so in this video I'm going to show
00:16 - you how to fix these problems and how to
00:19 - write cleaner more maintainable more
00:21 - robust and testable
00:24 - code I'm guessing this code is for a web
00:28 - form that might potentially look
00:29 - something like this don't worry about
00:33 - the stuff happening here I'm guessing on
00:35 - that web
00:36 - form we should have a text box where the
00:39 - user types the name of a book and a
00:42 - button which I'm guessing when it's
00:45 - clicked it will display a message saying
00:47 - the book is in the stock or not I
00:50 - actually didn't see the web form all I
00:52 - saw was this code behind file here so
00:55 - let's read this code line by line and
00:57 - see exactly what's happening here before
00:59 - we can start are improving it first we
01:02 - are declaring a quantity setting it to
01:04 - zero next we are declaring a SQL
01:07 - connection and then a data reader
01:10 - finally a query which is trying to
01:13 - select the quantity of a book from book
01:16 - detail table and it's filtering that
01:18 - based on the book name which is entered
01:21 - into the text
01:22 - box finally we are instantiating a SQL
01:26 - command opening the connection to the
01:29 - database
01:30 - executing the command and reading the
01:32 - result in the reader we access the First
01:35 - Column which should be an in32 or an
01:37 - integer which represents the quantity if
01:40 - the quantity is zero we display a
01:42 - message saying book is not in the stock
01:45 - otherwise we display a message saying
01:47 - book is issued which I'm not quite sure
01:49 - what it means and finally we close the
01:52 - data reader and the
01:55 - connection so the first problem I see
01:58 - this code is poor naming convention look
02:02 - at this button one
02:04 - here what does one mean how is it
02:07 - different from button two or button
02:09 - three I can't tell without looking at
02:12 - all the code and figuring out what does
02:14 - one represent so I'm guessing if that's
02:18 - our button one that's trying to check
02:21 - the quantity or availability of a
02:23 - product in the stock it would be much
02:25 - better if we name this button something
02:28 - like instead of button one BTN check
02:33 - quantity that's more
02:36 - meaningful now I click this button here
02:38 - to show the events and see it
02:41 - automatically rename that method which
02:45 - is oops didn't work I don't know let's
02:48 - double click that okay so I'm going to
02:52 - move all of this code
02:54 - here into this method and get rid of
02:58 - this
03:00 - so now instead of saying button one
03:02 - click we have BTN check availability
03:05 - click which is very
03:07 - meaningful same for this aqt here now
03:12 - it's kind of obvious that it's quantity
03:15 - but aqt is not a very beautiful and
03:19 - meaningful name for a variable why a
03:22 - quantity why not just quantity and
03:24 - instead of QT writing the actual word
03:27 - quantity it would be much cleaner so I'm
03:30 - going to rename that but see how I
03:32 - rename this I'm not going to go and
03:35 - rename it like
03:37 - this why because see these are
03:41 - references to that variable and if I
03:43 - manually rename it here I have to go
03:45 - here copy this and then paste it here
03:49 - and who knows how many references you
03:51 - have here this is very slow and really
03:53 - not how a good coder renames variables a
03:57 - better way
03:58 - is you use the refactor rename command
04:03 - of visual studio so in visual studio if
04:06 - you press controlr and R you're going to
04:09 - get a dialog box which actually is not
04:12 - appearing here because I've got a plugin
04:14 - installed called resharper but um even
04:17 - if you don't have resharper you can
04:18 - still use Visual Studio to rename
04:20 - variables basically when you use that
04:22 - dialog box you rename a variable and
04:25 - visual studio automatically renames all
04:27 - the references to that variable so you
04:29 - don't have to manually rename each one
04:32 - now here with resharper you see this
04:35 - little box here and resharper tries to
04:38 - find a good name but in this case it's
04:40 - not intelligent enough to suggest the
04:43 - name quantity it's suggesting in32 which
04:45 - is not really a good variable name so
04:47 - I'm going to go ahead and just rename
04:50 - that and enter c it automatically
04:53 - updated the quantity variable here so
04:56 - remember control r and r I believe
05:00 - another shortcut in Visual Studio is F2
05:03 - so try it and you'll love
05:05 - it similarly this CN CN is not a good
05:10 - variable name try to avoid acronyms and
05:13 - use full meaningful names for your
05:16 - variables so I'm going to rename this
05:19 - again control R and R and see this time
05:22 - resharper realize that this is for a SQL
05:25 - connection and the variable names is
05:27 - suggesting is connection or a SQL
05:29 - connection my preference is a shorter
05:32 - variable name so I'm just going to
05:33 - select the first one and resharper
05:36 - automatically updated all the references
05:38 - to that variable
05:41 - here same here what does dr1 represent
05:45 - how is it different from dr2 I don't
05:47 - know so let's just rename that to
05:51 - reader
05:53 - okay and here s again s is not a good
05:56 - variable name this is a query right so
05:59 - so let's just rename this to
06:03 - query and instead of cmd1 I'm going to
06:06 - use
06:07 - command there you
06:10 - go
06:12 - and that's it I think yeah the code is
06:15 - kind of more readable now there's just
06:17 - one more issue here and that's textbox
06:21 - three again as a reader of this code
06:23 - when I look at this I don't know what's
06:25 - the difference between textbox 3 and
06:27 - textbox 2 or if there is a Tex TT Box 2
06:30 - on the form at all so I have to look at
06:32 - the whole code to figure out that
06:34 - textbox 3 is where the user types in the
06:37 - name of a book so it would be much
06:39 - better if we name this to txd book name
06:42 - instead of textbox 3 so what I'm going
06:45 - to do is I'm going to again use
06:48 - resharper and rename that to
06:51 - txt book name press enter resharper
06:56 - automatically realize that that object
07:00 - is used somewhere else in this file
07:02 - default ASX designer which is the code
07:06 - that Visual Studio automatically
07:07 - generates for each of your web forms so
07:11 - I've selected that is selected by
07:12 - default and I'm going to let resharper
07:14 - to rename that for
07:16 - me now let's save
07:18 - everything if I go to that Designer file
07:21 - here you see that resharper
07:24 - automatically rename this for me that's
07:27 - why I say always use Visual Studio or
07:29 - resharper for renaming your variables
07:32 - let's go to
07:33 - default and this is the text
07:36 - box I select the properties here and
07:40 - here here it's not renamed I don't know
07:42 - why resharper cannot rename um objects
07:46 - on a web form like this so I have to
07:48 - manually change that to
07:50 - txt book
07:53 - name all right all good get back to our
07:57 - code
07:58 - behind next problem I see
08:02 - is this reader is declared here but then
08:06 - it's used
08:08 - here it's best to declare a variable
08:12 - closer or closest to where it's being
08:15 - used this reduces the noise in your code
08:18 - see as a developer reading this code I
08:21 - see you are telling me that okay we have
08:23 - quantity we have connection we have a
08:25 - reader and then you kind of forget this
08:28 - uh move on and go somewhere then you
08:29 - talk about query and then command and
08:31 - Connection open so what happened to the
08:34 - reader see it kind of creates a mental
08:37 - disconnect it would be much better if I
08:40 - move this line of code here just where
08:44 - we need the SQL reader we declare it and
08:47 - use it straight
08:48 - away and see the court is also one line
08:51 - shorter all right another thing we can
08:54 - do here is using the VAR keyword in C
08:58 - with VAR you can uh write cleaner and
09:01 - shorter code let me show you how it
09:02 - works so here instead of using SQL
09:05 - connection I can just use the keyword
09:09 - VAR and the benefit of that is see with
09:14 - this I'm saying SQL connection
09:17 - connection is new SQL connection so I'm
09:19 - repeating this word twice here all right
09:23 - we can just use VAR to write less code
09:26 - and it's cleaner and less
09:28 - noisy same here we are saying SQL
09:31 - command and again new SQL command so one
09:34 - is enough to have it here and we can use
09:37 - bar
09:38 - here and same for
09:42 - reader see the code is getting cleaner
09:45 - with every
09:47 - step okay another problem I see is this
09:50 - last line here connection. close even
09:54 - though the writer of this code had good
09:56 - intention and they wanted to make sure
09:58 - that the connection to the database
10:00 - would be closed at the end but
10:02 - unfortunately this code is not very
10:06 - robust why well see we open the
10:09 - connection here and then here we're
10:11 - trying to read something from the
10:12 - database now if something goes wrong in
10:15 - between for any reason for example maybe
10:18 - there was a bug in your query or maybe
10:21 - the value that was returned it wasn't an
10:23 - integer you know anything can go wrong
10:26 - in that case if um something is wrong an
10:29 - exception will be thrown which means
10:32 - anything after this line will not be
10:34 - executed so there is no way to guarantee
10:37 - that the connection will be closed how
10:39 - we can resolve this we use try finally
10:42 - block let me show you how it works so
10:45 - what I'm going to do is once the
10:47 - connection is open I can define a try
10:51 - finally that means type in try F this is
10:55 - a code snippet so you write a little bit
10:58 - of code and then let Visual Studio
11:00 - generate more code for you so try F and
11:03 - then press tab see it automatically
11:05 - creates a try finally block for you I
11:08 - have a course on Udi called Visual
11:10 - Studio tips and tricks or double your
11:12 - coding speed where I cover a lot of tips
11:14 - on how to write code faster and if
11:18 - you're interested you can look at more
11:19 - code Snippets and other ways to write
11:21 - code faster so let's move on I'm going
11:23 - to move all of this stuff here into the
11:26 - try
11:27 - block
11:29 - and then I want to make sure that the
11:31 - reader and connection are closed no
11:34 - matter what and that's the intention of
11:37 - the finally so if an exception is thrown
11:40 - here no matter what this finally block
11:43 - will always be executed okay now we have
11:47 - an error here reader because reader is
11:50 - defined in this Tri block but we are
11:53 - using it in the finally the problem is
11:56 - um when we Define it here in the triy
11:58 - the scope is is applicable only here so
12:01 - it has no meaning outside that block
12:04 - which means we have to take this line
12:05 - out of the tri block so I'm going to put
12:08 - it here all right let's look at the next
12:12 - problem in this code look at this bit
12:16 - here we are trying to construct a
12:19 - dynamic SQL query based on what the user
12:23 - put in the text box this is very
12:26 - dangerous because there is a security
12:29 - attack called SQL injection which
12:31 - basically means a hacker can go and type
12:34 - in some weird text in your text
12:37 - boxes and that would translate to some
12:40 - query that will be executed on your
12:43 - database let me show you what I mean by
12:45 - that imagine if I go into text box and
12:49 - type in something like this so ignore
12:52 - this comment bit here just look at this
12:54 - bit I'm
12:57 - writing
13:04 - so if I type exactly this into the text
13:10 - box see what is going to
13:13 - happen well this code is trying to
13:16 - concatenate this string with what comes
13:18 - from the text box right so let's just
13:21 - simulate that
13:22 - here I'm going to copy this bit
13:26 - here and then I'm going to copy P what
13:29 - the haer puts in the text
13:32 - box and
13:35 - finally um this bit here so
13:42 - another actually I can don't worry about
13:46 - it I don't want to confuse you here um
13:49 - but just for demonstration see with that
13:53 - input in the text box the query will end
13:55 - up looking something like this so we're
13:58 - selecting qu from book detail table
14:00 - where book name is empty string or one
14:04 - is one well one is one is always true
14:07 - which means this query will be somehow
14:10 - executed don't worry about what it's
14:12 - returned but here is the tricky part
14:14 - with semicolon we can batch queries
14:17 - which means this would be also executed
14:19 - on your database which means if the
14:21 - hacker puts that string in the text box
14:24 - they can easily drop one of your tables
14:27 - using a similar technique they can go
14:29 - ahead and write a query that would
14:31 - create an administrator account on your
14:33 - database something like this insert into
14:35 - members or users you know with some
14:38 - values blah blah blah now they it also
14:41 - requires a little bit of um intelligence
14:43 - and guessing the schema of your database
14:46 - uh I'm not a hacking expert but I know
14:48 - there are ways for them to even extract
14:50 - the schema of your database no exactly
14:53 - what what tables you have what columns
14:55 - you have and based on that they can
14:57 - construct a query that will take that
15:00 - would give them the complete control of
15:02 - your uh application and potentially your
15:04 - server depending on the
15:06 - permissions
15:08 - so the lesson here is never ever ever
15:12 - trust um what the user puts in a text
15:15 - box and based on that just go ahead and
15:18 - create a query the way to resolve this
15:20 - is to use parameterized queries which
15:23 - means instead of concatenating strings
15:25 - here we're going to change our query to
15:27 - something more um kind of static which
15:31 - would be like
15:35 - this so this is a parameter that is
15:39 - prefixed with the AD Sign so what the
15:41 - user puts in the text box will end up
15:44 - being as a parameter here and this is
15:46 - the actual query so nothing else will be
15:48 - executed on the database so if I go and
15:51 - put some weird string here that would go
15:53 - here and when SQL Server runs that query
15:56 - um it doesn't see this t takes as yet
15:59 - another query so this is the actual
16:01 - query that will be
16:03 - executed now in order to use
16:05 - parameterized queries the first thing
16:07 - you need to do is Define a parameter in
16:09 - your query and then you need to add that
16:13 - parameter in your command object so here
16:16 - after I Define my command I'm going to
16:18 - go ahead and say command. parameters.
16:22 - add now the parameters to the ad method
16:24 - you can define a parameter name the DB
16:27 - type and size and column or I would say
16:31 - this is the best
16:34 - overload so you pass a SQL parameter
16:36 - object so here I'm going to create a SQL
16:39 - parameter object and give it a name the
16:42 - name should be exactly what I put here
16:45 - book
16:46 - name and a value which would be what we
16:51 - put into the text box so that was txd
16:54 - book name.
16:57 - text
16:59 - right so with this we can get rid of our
17:02 - SQL injection attack and our code will
17:04 - be more
17:05 - secure let me get rid of this commands
17:08 - comments
17:09 - here okay let's see another way to
17:12 - improve this code see this method here
17:15 - between check availability is doing too
17:18 - many things it's trying to access the
17:20 - database here and read the quantity and
17:23 - then it's trying
17:26 - to show a message to the user
17:29 - user this bit accessing the database
17:32 - should not be the responsibility of a
17:34 - method in your code behind
17:38 - file your code behind file belongs to
17:41 - your web form this web form and the web
17:44 - form is in the presentation layer of
17:47 - your software which is what the user
17:49 - sees this bit here is about data access
17:54 - so data access code should not be in the
17:56 - presentation
17:57 - layer so what I'm going to do is um
18:01 - first of all I'm going to move all of
18:02 - this code into a separate method just to
18:05 - show you a stepbystep refactoring
18:07 - technique so
18:10 - basically what we need is a method that
18:13 - gets as a parameter or argument the name
18:17 - of a book and then go in the database
18:19 - and return the quantity right that code
18:22 - should not know nothing about what is
18:24 - going to be displayed in the user
18:25 - interface like this response. right all
18:28 - it needs to know is how to get the data
18:29 - from the database right so let me go
18:33 - ahead here going to declare it as
18:36 - private and I wanted to return the
18:38 - quantity which which would be an integer
18:41 - and I'm going to call this method get
18:43 - product quantity from stock as the sorry
18:50 - stock and as the parameter I'm going to
18:53 - define a string which is book
18:56 - name and see um
18:58 - creating um methods that have meaningful
19:02 - names and meaningful parameters anyone
19:05 - looking at this code can immediately
19:08 - tell what this method is doing without
19:11 - going and reading every line of this
19:13 - method and that's the key you should
19:16 - write code that is Meaningful like a uh
19:18 - like a story like a newspaper like a
19:20 - book you don't have to a developer does
19:24 - not have to read every line of your code
19:26 - to know what's happening so what I'm
19:29 - going to do
19:30 - is I'm going to kind of well copy
19:34 - everything here into this method now
19:38 - this method as I said is about data
19:40 - access so it should not know anything
19:43 - about writing something on the web form
19:48 - so basically once we read the quantity
19:51 - it did we don't need to know anything
19:55 - else finally we close the reader and the
19:58 - connection and just return the
20:02 - quantity right so let's review again
20:05 - this method creates a
20:07 - connection query command opens the
20:11 - connection reads the data from the
20:12 - database and return it it has one single
20:15 - responsibility it's not doing too many
20:18 - things then I can go ahead and refactor
20:21 - this code and instead of going to the
20:24 - database and doing everything here I can
20:26 - ask this method to get the data for me
20:29 - and then if the quantity is zero I can
20:31 - just display this message otherwise this
20:34 - message so let's do
20:36 - that I'm going to define a VAR quantity
20:39 - and ask this method get product quantity
20:42 - from stock and then just pass the txt
20:45 - bookname do
20:47 - text and at this point we've got the
20:50 - quantity it's either zero or not if it's
20:54 - zero we're going to display this message
20:55 - otherwise this message and we can can
20:58 - get rid of everything else here
21:01 - so let me clean up this
21:06 - code see now this method is much cleaner
21:09 - it has only a few lines of code and its
21:12 - responsibility is purely to display a
21:16 - proper message to the user and this code
21:19 - has
21:20 - also few lines of code well it's a
21:23 - little bit more than uh my personal
21:25 - taste and I will show you shortly how we
21:27 - can even make this a little little bit
21:28 - shorter but it has only one single
21:30 - responsibility and that is to get the
21:32 - data from the
21:35 - database okay let's look at this code
21:37 - again this query we can just grab
21:42 - this
21:44 - and put that here where it's used
21:47 - because this is the only place we have
21:49 - used that query and we don't necessarily
21:52 - need to store it in a separate variable
21:55 - so I'll just put that here and get rid
21:57 - of this extra variable here all right
22:00 - other things we can do to improve this
22:02 - code is this hardcoded connection string
22:05 - here it's not a good thing why because
22:07 - if the connectional string changes we
22:09 - have to go here and change it here and
22:13 - recompile the application now you might
22:16 - wonder when the connection string
22:17 - changes well it's quite possible that in
22:20 - real world scenarios you have a
22:22 - development server a test server and a
22:24 - production server and each of these
22:26 - servers require a different connection
22:28 - string you cannot recompile your
22:30 - application every time you want to
22:32 - deploy it to one of these servers so a
22:35 - better way is to use a configuration
22:37 - file where you can store the connection
22:39 - strings for each environment and then
22:41 - your source code would just read the
22:43 - data from the configuration file in the
22:47 - case of this web forms application we're
22:50 - going to store the connection string in
22:51 - web.config so I'm going to open up
22:54 - web.config
22:55 - here under here at the beginning just
23:00 - after configuration and config sections
23:02 - you see these connection strings so I
23:04 - can define a connection string
23:07 - here use the ad give it a name let's
23:11 - call it I don't know book book store for
23:16 - example
23:18 - bookstore and the value sorry the
23:20 - connection string would be exactly what
23:24 - we put here so I'm going to cut that and
23:28 - paste that
23:29 - here now this is just an XML it doesn't
23:32 - require a Rec compilation and when we
23:34 - deploy this application to each
23:36 - environment whether it's Dev test or
23:39 - production we would have a separate web.
23:41 - config for that environment and the
23:44 - application code will be exactly the
23:46 - same now how can we read the data from
23:48 - connection string we use the
23:50 - configuration manager class like this so
23:54 - I type in configuration manager now I'm
23:56 - using resharper and resharper
23:58 - automatically knows that this class is
24:00 - in a namespace called system.
24:03 - configuration so I can just hit enter
24:06 - and resharper automatically adds that uh
24:09 - name space here for me if you are not
24:12 - using resharper you probably have to
24:14 - type it here and visual studio doesn't
24:16 - recognize that then you right click and
24:19 - there will be
24:20 - some um menu on the top here that is
24:24 - called resolve namespace something like
24:26 - that I Str recommend you to install
24:28 - resharper because it makes your coding a
24:31 - lot easier all right let's go ahead so
24:34 - configuration manager is a class I'm
24:36 - going to go to app
24:39 - sorry to connection
24:41 - strings and this has an indexer I can
24:44 - specify the name of my connection string
24:46 - which is in this case
24:48 - bookstore and that returns a connection
24:50 - string object which is equivalent to
24:56 - this object here so that object has a
24:59 - property called connection string which
25:01 - is the actual string here so in order to
25:03 - get that we come back here we get the
25:07 - connection string object and then we
25:09 - access the connection string
25:12 - property so this is what we'll put here
25:15 - in the SQL connection I would argue that
25:18 - it would be also cleaner to instead of
25:20 - writing this raw query here you use a
25:23 - store procedure for example you would
25:26 - have a store procedure called get
25:28 - quantity which gets an input which is
25:31 - the name of the book and Returns the
25:33 - quantity I'm going to leave that
25:35 - exercise to you because I want to talk
25:37 - about more fundamental issues in this
25:39 - course so let's see what else we can do
25:41 - to improve this code one thing that just
25:44 - um got my attention
25:46 - is this book name we declared it but we
25:48 - never used it how do I know well
25:51 - resharper is kind of graying out this
25:53 - for me look this is white and this is
25:56 - gray which makes me think this is never
25:57 - used so when I look here at the
26:00 - parameter I can see that it's still
26:02 - using the txt book name I don't want
26:06 - this method to be dependent on that text
26:08 - box because shortly I will show you that
26:10 - I'm going to move this somewhere else so
26:12 - let's just use book name here and see
26:16 - now it became
26:18 - White earlier I told you that the data
26:21 - access code should not be in the
26:23 - presentation layer which means this code
26:25 - does not belong to this code behind file
26:28 - for this web page what we can do is to
26:32 - move this to a separate
26:34 - class let's say we're going to create a
26:36 - class called stock that would be
26:39 - responsible for getting the stock or
26:42 - updating the stock from the
26:44 - database now there are various ways to
26:46 - model that and create layers for your
26:48 - application but um it's going to beyond
26:51 - the scope of this video because this
26:54 - code is I think for beginner level
26:57 - level.net developer and I don't want to
26:59 - confuse you with too much complexity so
27:02 - what I would suggest is at a minimum um
27:05 - go to your project here right
27:08 - click add a new
27:11 - folder call it maybe
27:15 - services so here I'm going to create a a
27:18 - new class
27:21 - at so add a class I'm going to call this
27:24 - stock
27:26 - service
27:30 - and then I'm going to move this code
27:33 - here into that class let me also show
27:36 - you a quick shortcut here see I can uh
27:39 - go and use the mouse to select this and
27:41 - cut and paste or there is a quicker way
27:44 - so anywhere here I can press control and
27:47 - M twice the method gets collapsed now I
27:51 - can press control X and then I can press
27:55 - control and tab and this shows all the
27:58 - open windows in my visual studio project
28:01 - so I'm going to go to stock service and
28:04 - then I come
28:05 - here and then contrl V to paste the
28:09 - code right it's much easier when you use
28:11 - your keyboard again in my visual studio
28:13 - course on udem I talk about all these
28:16 - things so if you want to learn how to
28:18 - write code fast you can take my course
28:20 - and get a lot out of it now when I paste
28:23 - this code resharper is automatically
28:25 - detecting that um this SQL connection
28:28 - here is um in the system. data. SQL
28:33 - client namespace which is not added here
28:36 - so I'm just going to click this or press
28:38 - alt and enter as the resharper suggests
28:42 - so there you go and S similarly
28:45 - configuration manager is in system.
28:47 - configuration namespace which does not
28:50 - exist here again I rely on resharper to
28:53 - automatically fix this for me so the
28:55 - shortcut is alt and enter there you
28:58 - go which means now I can go back to my
29:01 - code behind file again I'm going to use
29:03 - control and tab go here see this class
29:08 - is much cleaner
29:10 - now now this method does not exist in
29:13 - this class anymore and it's in our stock
29:15 - service so we need a reference to the
29:17 - stock service so what I'm going to do is
29:20 - I'm going to create a private field
29:23 - here stock service give it a meaningful
29:27 - name
29:27 - now private Fields should always be
29:29 - prefixed with an
29:31 - underscore and C resharp is
29:33 - automatically suggesting three names for
29:35 - me I'm thinking stock service is more
29:38 - meaningful in this
29:41 - case and then in the Constructor of this
29:44 - class we can initialize this
29:53 - field and finally
29:56 - here
29:57 - we can use that reference stock service.
30:01 - getet product quantity from
30:04 - stock it's still
30:06 - complaining okay because that method was
30:09 - originally declared as private and now
30:11 - resharper is telling cannot sorry it's
30:14 - Visual Studio that is complaining it
30:16 - says cannot access private method get
30:18 - product quantity from stock here so I'm
30:21 - going to go back to my stock
30:23 - service and change that to public
30:29 - now control tab back here the problem is
30:33 - resolved also another thing that um got
30:36 - my attention is this method here is a
30:38 - little bit too long for my taste I would
30:41 - like it to be a little bit shorter see
30:43 - we are using stock service so it's
30:45 - obvious that we're dealing with the
30:47 - stock so it would be more um so it would
30:51 - be cleaner if we just name this method
30:53 - get product quantity instead of get
30:55 - product quantity from stock
30:58 - right now how can we rename this I told
31:00 - you earlier contrl R and R again so
31:03 - contrl R and R and then I'm going to go
31:06 - ahead and get rid of this extra two
31:09 - words get product
31:11 - quantity and guess what resharper
31:14 - automatically renames it here as well as
31:17 - in the stock service where we Define the
31:21 - method and another tip I show you is
31:24 - look at this name spaces here the first
31:27 - two are gray which means they're not
31:29 - used as well as the last two now with
31:32 - Visual Studio you can right click this
31:34 - and go organize using and select remove
31:38 - and sort which cleans up your code or
31:41 - you can install a plug-in called VSS
31:44 - commands which automatically cleans up
31:47 - your code whenever you save your code
31:50 - file so in this case if I press controll
31:52 - and S to save this code file see it
31:55 - automatically removes that I don't even
31:57 - have to touch my
31:58 - Mouse um okay I think this code is
32:03 - almost okay let's get back to our code
32:07 - behind file see the intention of this
32:09 - code is very clear now instead of having
32:12 - button one or textbox 3 or seeing all
32:15 - the details of connection and command I
32:17 - can immediately see this button when
32:20 - clicks it tries to check availability it
32:23 - goes to stock service which gets the
32:25 - product quantity from the database uh
32:29 - returns it here if it's zero this is the
32:31 - message we display otherwise this is the
32:33 - message I don't care how the stock
32:36 - service gets the product quantity from
32:38 - the database it's the implementation
32:40 - detail of that service if there is a bug
32:44 - in that code I can just go here click
32:46 - this and press F12 to jump to that
32:49 - method and then read the details of this
32:52 - method so the lesson is your code should
32:55 - be clean such that a reader looks at a
32:58 - method name like this and knowing what's
33:01 - happening without going and looking at
33:03 - every line of that method similar here
33:07 - see B10 check availability I don't
33:10 - really necessarily need to look at this
33:12 - detail I can just look at the method
33:13 - name and say okay this is checking the
33:14 - availability of the uh
33:18 - product okay that's it for this video I
33:21 - hope you enjoyed it and if you like me
33:23 - to review your code please contact me
33:25 - I'm more than happy to help you thank
33:27 - you for
33:30 - [Music]
33:53 - [Music]
33:55 - watching
34:00 - [Music]
34:08 - [Music]
34:16 - oh