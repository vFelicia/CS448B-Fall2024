00:01 - all right in this lecture I'm going to
00:03 - talk about value and reference types in
00:05 - JavaScript now if you're familiar with
00:07 - this concept or your c-sharp developer
00:10 - feel free to skip this lecture and move
00:12 - on to the next lecture so in JavaScript
00:15 - we have two types of variables we have
00:18 - value types like strings numbers
00:21 - billions null and undefined and
00:23 - reference types which include objects
00:26 - arrays and functions so here is an
00:29 - example when we declare a variable like
00:32 - X and set it to a string like Apple the
00:35 - part of computer's memory is allocated
00:37 - for X variable let's imagine the address
00:41 - of this location in memory is 1 1 1 so X
00:45 - will be a label for this memory location
00:47 - and at that location we have to string
00:50 - Apple now let's see how many where
00:53 - allocation is different for reference
00:55 - types so here we set X to an object
00:58 - instead of a string an object of
01:00 - reference types when this line is
01:03 - executed similar as before a part of
01:06 - computer's memory is allocated for the X
01:08 - variable and let's imagine the address
01:10 - of this memory location is 1 1 1
01:12 - but our object is not stored in this
01:16 - memory location it's stored somewhere
01:18 - else and let's imagine the address of
01:21 - this target memory location is 2 2 2 so
01:25 - our X variable which is a label for
01:27 - memory location 1 1 1 will hold the
01:31 - address of the target memory location so
01:34 - X is pointing or referencing a different
01:38 - memory location and that's why we call
01:40 - them reference types now in case you're
01:43 - curious why memory allocation is
01:44 - different between value and reference
01:46 - types the reason is that we use value
01:49 - types for simple values like numbers
01:51 - strings boolean's and so on we don't
01:54 - need much memory for this kind of values
01:57 - in contrast we use objects and arrays
02:00 - for storing complex values we need more
02:03 - memory that's why in terms of memory
02:06 - allocation we have two different types
02:08 - of memory we have stack memory which is
02:11 - used for storing simple values or value
02:14 - types
02:15 - heap memory she's used for storing
02:17 - larger complex objects now there are
02:21 - three facts you need to know about value
02:24 - types and reference types the first one
02:26 - is that value types are immutable which
02:29 - means you cannot mutate them you cannot
02:31 - change them once you initialize them
02:33 - they're always the same here is an
02:35 - example so let's declare X and set it to
02:39 - Apple now if we call one of these string
02:42 - methods like to uppercase this method
02:46 - will return a new string which is
02:48 - completely different from our original
02:50 - string so here's our uppercase Apple but
02:55 - if we print X we still have the original
02:58 - lowercase Apple so the original value is
03:01 - not modified that's why we call value
03:04 - types immutable in contrast if X was an
03:09 - object with the title property Apple now
03:14 - we can directly modify this title
03:16 - property here and make it uppercase now
03:22 - if it print X on the console you can see
03:26 - the original object is modified so we no
03:29 - longer have the lowercase Apple in other
03:32 - words we can mutate or change reference
03:35 - types now the second fact about value
03:38 - types is that they're compared by value
03:41 - what do I mean by that well let's
03:44 - imagine X is Apple and I also have Y
03:49 - which is Apple now if we compare x and y
03:53 - the result is true so even though x and
03:57 - y are in two different parts of the
03:59 - memory because their value types they're
04:02 - compared by the value they're holding in
04:04 - this case Apple in contrast reference
04:08 - types are compared by their references
04:10 - and that means if X is an object with
04:15 - title property set to Apple and Y is
04:19 - also another object with the exact same
04:23 - property
04:25 - if we compare them we get false because
04:28 - x and y are reference types and when we
04:31 - compare them the references are compared
04:34 - in other words x is referencing this
04:37 - object at this location two to two
04:39 - whereas Y is referencing this other
04:42 - object at location 3 3 3 so when we
04:45 - compare an X on Y it's like we're
04:47 - comparing 2 to 2 with 3 3 3 and of
04:51 - course they're different so this is the
04:53 - second fact about value types on
04:55 - reference types and the third one is
04:57 - that value types are copied by value
05:00 - what do I mean by that well one more
05:04 - time let's imagine X is Apple now if we
05:08 - declare Y and set it to X because X is a
05:13 - value type a copy of X's value is taken
05:16 - and stored in Y so now x and y are two
05:21 - independent variables in the memory in
05:24 - contrast if X is an object with the
05:29 - title property set to Apple and Y is
05:31 - another variable and we set this to X
05:34 - now both x and y are referencing or
05:38 - pointing to the same object in memory
05:40 - and that means if I change this object
05:42 - via X reference so X dot title let's
05:46 - update this now this change is visible
05:50 - through the other reference so if I
05:53 - print Y look have an object with title
05:57 - set to orange so a value type is copied
06:01 - by its value whereas a reference type is
06:03 - copied by its reference
06:05 - [Music]
06:06 - hey thank you for watching my youtube
06:08 - video my name is Mohammad Ani and I'm a
06:11 - full-stack developer applause I know sir
06:14 - and in udemy instructor with about 14
06:16 - courses at the time of recording this
06:18 - video so I've got lots of courses on
06:20 - both front end and back end development
06:23 - including C sharp and ADA framework a
06:25 - splendid MVC angular architecture unit
06:29 - testing and so on this video watch is
06:32 - actually part of my angular course on
06:34 - udemy that you can get with a discount
06:36 - using the link in the video description
06:37 - and if you want to see my other courses
06:40 - simply head over to program with mass
06:42 - comm slash courses you can also
06:45 - subscribe to my youtube channel to get
06:47 - free videos every week have a great day
06:50 - and I'll be back soon
06:51 - [Music]