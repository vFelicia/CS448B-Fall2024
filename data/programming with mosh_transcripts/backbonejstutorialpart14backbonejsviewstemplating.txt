00:05 - in the examples we've covered so far I
00:08 - implemented the rendering logic by using
00:10 - the jorea HTML method this works fine
00:13 - for simple cases but can get ugly if the
00:16 - view has a lot of details what if our
00:19 - view looked like this Twitter feed in
00:21 - such cases we have a lot of domb
00:23 - elements with various IDs and classes
00:26 - and putting all that markup inside the
00:28 - render function is not a clean and
00:30 - elegant way we can use templates to
00:33 - resolve this issue underscore has a
00:35 - simple templating solution which we can
00:38 - use in our backbone views there are
00:40 - other templating Solutions out there
00:42 - like mustache.js and handlebars.js in
00:46 - this lecture I'm going to introduce you
00:47 - to underscores templating
00:49 - solution so here we've got a simple
00:52 - model and a view as you have seen in the
00:54 - earlier examples nothing fancy
00:57 - here our view simply run ERS the title
01:00 - of a song along with a button to listen
01:02 - to it now let's see how we can use a
01:05 - template to define the markup outside
01:08 - this render
01:09 - function first we go to our index.html
01:12 - and create the
01:28 - template
01:39 - we Define the template using a script
01:41 - element with a type set to text/html we
01:45 - also need to give our template an ID
01:48 - it's a good convention to end the ID
01:50 - with the word
01:53 - template note this syntax here this is
01:56 - for rendering values
01:58 - dynamically whatever we play between
02:00 - these angle brackets will be evaluated
02:02 - at runtime and inserted into the markup
02:05 - as a string in this case this is to
02:07 - render the title of a
02:10 - song now let's go to our main.js and
02:13 - modify the render
02:28 - method
02:45 - let me explain what's happening here
02:47 - first we use jQuery selectors to get the
02:50 - script element that contains the
02:52 - template we use the HTML method to get
02:55 - the template mark up then we pass this
02:58 - HTML to underscore template method which
03:01 - compiles the markup into a template this
03:03 - template is a function that we can call
03:06 - and Supply data to it so in the second
03:08 - line we call the template function and
03:11 - pass a Json representation of Our Song
03:14 - model note that underscore doesn't know
03:16 - about backbone models and expects a Json
03:19 - when evaluating a template that's the
03:22 - reason we need to convert our model into
03:24 - a Json
03:25 - object underscores template function
03:28 - then returns an HTML mark up which be
03:30 - passed to the HTML function of jQuery
03:34 - here okay let's try this in
03:37 - Chrome cool so with templates we can
03:41 - Define any complex markup and this does
03:43 - not affect our views plus it provides
03:46 - better separation of
03:49 - concerns now let's take this to the next
03:51 - level let's say we want to display a tag
03:54 - called Popular if the song has been
03:55 - played more than a thousand
03:58 - times
04:01 - to do this we need to add a conditional
04:03 - statement in our
04:28 - template
04:30 - note the difference between the Syntax
04:32 - for conditional statements and the one
04:34 - we use for rendering the title if we use
04:37 - an equal sign anything between the angle
04:39 - brackets will be rendered on the page
04:42 - without an equal sign the code will be
04:44 - evaluated and we can use this to
04:46 - implement
04:48 - Logics okay now let's set the number of
04:51 - plays when instantiating our
04:55 - model so with 10 plays we shouldn't see
04:58 - the popular tag
05:00 - let's verify
05:04 - this nothing is
05:06 - here now we can change the number of
05:08 - plays to
05:17 - 1100 there you
05:19 - go so we can use templates to render
05:22 - more complex
05:24 - marops underscore has templating support
05:27 - out of the box which we can use by
05:29 - calling the template
05:31 - method the template method gets to
05:33 - markup and compiles it into a template
05:36 - function we call this function and pass
05:39 - the data to get the final
05:41 - result templates should be wrapped with
05:44 - a script element with the type text/html
05:47 - we should give our script elements an ID
05:51 - to look them up during rendering thank
05:53 - you for
05:54 - watching