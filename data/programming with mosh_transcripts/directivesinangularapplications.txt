00:00 - [Music]
00:01 - earlier in the course you learned about
00:03 - ng 4 which is one of the built-in
00:06 - directives and angular that we use for
00:08 - rendering lists in this section we're
00:11 - going to look at in g4 in more detail
00:13 - we're also going to look at the other
00:15 - built-in directives including ng F and
00:18 - just switch case into class and ng style
00:21 - and finally we'll wrap up this section
00:24 - by looking at building custom directives
00:26 - in angular so let's get started
00:32 - there are times that you may want to
00:34 - show or hide part of a page depending on
00:37 - some condition so here in app component
00:40 - I'm gonna define a field courses set it
00:44 - to an array with two items now for now
00:47 - we're just gonna use simple numbers in a
00:49 - real world application you're gonna have
00:51 - the actual course objects but let's not
00:53 - worry about that and just focus on
00:55 - showing or hiding part of a page now in
00:58 - our app that component that HTML file if
01:02 - you have any courses in this array we
01:04 - want to render them in a list otherwise
01:06 - we want to display a message to the user
01:08 - like there are no courses yet so first
01:12 - I'm going to create a div this is where
01:15 - we're gonna display the list of courses
01:18 - now here again I'm simplifying this
01:20 - example if you want to render the list
01:22 - of courses you would use a ul and Li
01:25 - with the ng4 directive so here's one day
01:30 - for displaying the list of courses and
01:32 - here's another for displaying a message
01:35 - like no courses yet you want to render
01:39 - one day for the other depending on the
01:42 - number of items in our courses array for
01:45 - that we use the ng-if directive so to
01:49 - refresh your memory we use directives to
01:51 - modify the Dom now there are two types
01:54 - of directives structural directives
01:57 - modify the structure of the Dom by
01:59 - adding or removing Dom elements
02:01 - attribute directives
02:03 - modify the attributes of Dom elements so
02:07 - here we want to change or modify this
02:08 - structure of our Dom we want to add or
02:11 - remove one Dom element so whenever
02:14 - you're using structural directives you
02:16 - need to prefix them with an asterisk and
02:19 - I'm gonna explain the reason later in
02:21 - this section so asterisk ng if now here
02:26 - we add the condition if this condition
02:28 - evaluates to true the-- this div will be
02:31 - rendered in the Dom so we can add
02:33 - something like courses that length
02:36 - greater than zero now you don't
02:39 - necessarily have to write the condition
02:40 - here you may have a method in your class
02:42 - like this do we have any courses
02:46 - and we call this method we get some
02:49 - value if that value evaluates to true
02:51 - see then this dip will be rendered
02:53 - now let's revert this back now we can
02:56 - use the same technique or the other div
02:58 - and this is the old approach before
02:59 - angular 4 so let's see how that works
03:02 - ng if I want to render this Dave if we
03:06 - don't have any courses so courses that
03:09 - length equals zero now back in the
03:13 - browser so because we have two items in
03:16 - our array we see the list of courses
03:18 - message now back in our component I'm
03:21 - gonna empty this array save like in the
03:26 - browser now we get no courses yet
03:30 - message let's inspect this
03:34 - so here under app route look we have
03:37 - only one div which is the div with the
03:39 - message no courses yet so the other div
03:42 - is not in the Dom and that's what I want
03:45 - you to pay attention to so when you use
03:47 - ng if if this condition evaluates to
03:50 - true see this element will be added to
03:53 - the Dom otherwise it will be removed
03:55 - from the Dom now in angular for now we
03:59 - have a slightly different syntax to
04:01 - implement the exact same feature so
04:03 - instead of repeating in G if twice with
04:05 - this condition reversed we can implement
04:08 - it using an if and else kind of approach
04:10 - just like how we have F and LS in a lot
04:13 - of programming languages so first we
04:16 - need to change the type of this second
04:18 - element from div to ng template so ng -
04:23 - template then we remove this ng if make
04:27 - the code cleaner but we need to assign
04:29 - this template and identifier earlier you
04:32 - learned that you can use this hashtag to
04:34 - define a template variable let's call
04:36 - this block no courses then we modify our
04:41 - ng if so after the condition we add a
04:44 - semicolon and we type else and then the
04:48 - name of our template variable no courses
04:51 - note that I didn't add this hashtag here
04:55 - just the name of our template variable
04:57 - so if this condition is true see this
05:00 - block will be rendered otherwise the
05:02 - other block let's try it back in the
05:05 - browser so currently we don't have any
05:08 - courses and that's why we see this
05:09 - message if I go back in app component
05:12 - and add a couple of items here now we
05:16 - see the list of courses now you may not
05:19 - quite like this syntax because in the
05:21 - first block we're using a div in the
05:23 - second block we're using ng template
05:25 - they're kind of inconsistent there is
05:28 - another approach so we can define
05:30 - another ng template here ng template and
05:35 - this is for displaying the list of
05:36 - courses so we assign it an identifier
05:39 - like courses list and here we add that
05:44 - message list of courses
05:46 - okay now we have one div with two
05:52 - templates one for the condition that is
05:54 - true C and the other for condition that
05:56 - is policy okay now we need to change our
05:59 - njf so first we add our condition if
06:04 - this condition is true C right then and
06:06 - here we specify the name of our ng
06:09 - template so courses list and then we
06:13 - have LS and here's the other block so
06:17 - note that we have a semicolon after the
06:19 - condition then we have then as a keyword
06:22 - here is the name of our target block or
06:24 - target template after that we have else
06:27 - as a keyword and finally the name of the
06:29 - other template I personally prefer this
06:32 - approach because it's more clear and
06:34 - more consistent now there is another
06:36 - approach to show or hide part of a page
06:38 - and that's what I'm going to show you in
06:40 - the next lecture
06:45 - now back in the same example let me show
06:47 - you another way to show or hide part of
06:50 - a page instead of using the ng-if
06:52 - directive we can use the hidden
06:54 - attribute so in HTML you know we can
06:57 - apply this hidden attribute to our divs
06:59 - to hide them if you go back in the
07:02 - browser we should see no courses yet
07:05 - message here's the message beautiful now
07:08 - this attribute in HTML also exists as a
07:11 - property in our Dom objects so we can
07:15 - use property binding and bind this
07:17 - property of the underlying Dom object to
07:21 - some expression for example here I want
07:23 - to hide this first div if we don't have
07:26 - any courses so courses that links equals
07:30 - 0 now similarly we can hide the second
07:34 - div if we have at least one course so
07:38 - courses the length greater than 0 now
07:41 - back in app component currently we have
07:45 - two items here let's see if application
07:47 - is working properly so we get the list
07:50 - of courses beautiful now back in app
07:53 - components I'm gonna empty this array
07:55 - save and back in the browser no courses
07:59 - yet beautiful now let me show you
08:01 - something let's inspect this element
08:04 - note that both divs exist in our Dom but
08:09 - the first tip has the hidden attribute
08:11 - and that's why it's hidden so that's the
08:13 - main difference between using ng F and
08:15 - the hidden property when we use ng F on
08:19 - an element if the condition evaluates to
08:21 - false II that element is removed from
08:24 - the dawn whereas when we use the hidden
08:26 - attribute the element is in the Dom is
08:29 - just hidden so you might ask which
08:31 - approach is better well if you're
08:34 - working with a large tree with a lot of
08:36 - children it's better to use ng F because
08:39 - these elements can take substantial
08:41 - memory and computing resources you don't
08:44 - want to put them in the Dom if you're
08:45 - not gonna show them to the user plus
08:47 - angular may continue to check for
08:49 - changes even to invisible properties so
08:53 - the change detection mechanism in
08:55 - angular that's the mechanism that keeps
08:57 - your views in sync
08:59 - components that's running in the
09:00 - background and when these elements are
09:02 - in the Dom angular continues to perform
09:04 - change tracking on these elements so in
09:07 - these situations if you're dealing with
09:08 - a large tree with a lot of diorama
09:10 - objects it's better to use ngf to free
09:13 - up resources there is just one exception
09:15 - in some situations building a large
09:18 - element tree in the right state may be
09:21 - costly so if you have a page with an
09:23 - element subtree
09:24 - in that case and you if may have a
09:27 - negative impact on the performance of
09:29 - that page so if the user is going to
09:31 - click a button to toggle something to
09:34 - show or hide that part of the page if
09:36 - building that elementary is costly you
09:39 - shouldn't use ng if it's better to keep
09:41 - it in the Dom and hide it using the
09:43 - hidden attribute so in summary if you're
09:46 - dealing with a small tree of objects it
09:48 - doesn't matter which approach you choose
09:49 - it's purely your personal preference if
09:52 - you're working with the large tree first
09:54 - check to see if building that tree is
09:56 - going to be costly or not if it's costly
09:58 - use the hidden property to keep it in
10:00 - the Dom but hide it otherwise it's
10:03 - better to use ng if to remove it from
10:05 - the Dom and free up the resources
10:10 - in angular we have another directive
10:12 - called ng-switch case which is very
10:15 - similar to the concept of switch case we
10:18 - have in a lot of programming languages
10:20 - so imagine we want to build a page to
10:22 - display properties on a map or in a list
10:25 - so here we have two tabs map view and
10:29 - list view when we select the list view
10:32 - we see the list view content and when we
10:34 - select a map view we see Matthew content
10:36 - so let me show you how to implement this
10:38 - with ng-switch case and by the way you
10:41 - can implement the exact same thing with
10:43 - ng-if but ng-if works only if you have a
10:47 - true c and a falsie condition in this
10:49 - case we might have multiple tabs so we
10:52 - cannot implement that using ng-if and
10:54 - that's why we need ng switch case so in
10:57 - app component on HTML i want to add some
11:00 - basic markup to render bootstrap tabs so
11:03 - here we want a UL and this UL should
11:06 - have two classes so we add dot nav and
11:10 - also dot nav - pills this syntax you see
11:15 - here is what we call Zen coding and with
11:18 - this we can quickly generate HTML markup
11:20 - so tab now we have a ul with these two
11:23 - classes now inside this ul we want an Li
11:28 - and inside this Li we want an anchor now
11:32 - we want two of these elements so I put
11:36 - them in parentheses x to tab and this is
11:39 - what we get now let me temporarily make
11:42 - the first li active so I apply the
11:45 - active class here and name this map view
11:51 - the second Li the anchor should be
11:54 - called list view now below that will
11:59 - have a div and here will have either the
12:03 - content of the map views of map view
12:05 - content or list view content now I want
12:12 - to temporarily comment this out
12:15 - because one div one content div will be
12:17 - rendered dynamically now let's just make
12:20 - sure that our markup is working back in
12:23 - the browser
12:24 - all right it looks good beautiful now
12:27 - let's move on and make this dynamic so
12:30 - let's go to our app component here we
12:33 - need to define a field to keep track of
12:35 - the currently selected tab we can call
12:38 - this View mode and we can set this
12:41 - initially to map and then we can change
12:44 - this to a list so it can hold one of
12:47 - these two values map or list now back in
12:50 - our template let's bring this div back
12:53 - we want to render one of these divs
12:55 - dynamically based on the value of View
12:58 - mode field so on this top parent div
13:01 - we're gonna apply property binding so
13:05 - angular adds a new property to our Dom
13:07 - elements that is not part of the
13:09 - standard Dom this property is called
13:12 - ng-switch we can use property binding
13:15 - and just switch and bind this to a field
13:20 - in our class like View mode now an HD
13:25 - will apply ng switch case directive and
13:28 - because with this directive we add or
13:31 - remove a Dom element this is a
13:33 - structural directive and we should
13:35 - prefix it with an asterisk
13:37 - so ng switch case now if the value of
13:44 - view mode is map so map as a string note
13:48 - that I put map in single quotes let me
13:50 - zoom in so we have double quotes which
13:54 - is for the value of this directive and
13:56 - we have single quotes which is for the
13:58 - map as a string okay
14:01 - now similarly for the other div I'm
14:04 - gonna apply ng switch case we want to
14:09 - render this Dave if the value of view
14:11 - mode is list now optionally we can have
14:16 - another div so if the value of view mode
14:20 - is something else I want to render this
14:22 - div so here we add ng-switch default and
14:27 - it doesn't have a value yeah I played
14:29 - like an attribute okay
14:31 - so let's add some label here otherwise
14:35 - right so this is
14:37 - we use the engine switch directive now
14:40 - finally we want to make this class
14:42 - active dynamic so we can use class
14:46 - binding you put it in square brackets
14:49 - class dot active and we want to render
14:53 - this if view mode is set to map so we
14:57 - can write a simple conditional statement
14:59 - here view mode equals map okay and
15:05 - similarly for the other Li I'm gonna add
15:08 - another class binding class that active
15:11 - we set this if view mode equals list now
15:17 - finally when we click these links here
15:19 - you want to change the view mode so
15:22 - let's remove this href attribute we use
15:25 - event binding and bind the click event
15:28 - to an expression now here we can simply
15:31 - call a method in our class like change
15:34 - view mode and simply pass a string like
15:38 - map but that method is going to be a
15:41 - one-liner so we can simply write that
15:43 - expression here so we simply set view
15:46 - mode to map ok
15:50 - and I'm gonna copy this and apply to the
15:54 - other link as well but this time I'm
15:58 - gonna change this value to list all
16:01 - right now let's test the application so
16:03 - back in the browser
16:05 - initially the map view is visible
16:08 - because we set the view mode to map in
16:10 - our component if we click list we go to
16:13 - the list view and back to the map view
16:16 - now back in the component I'm gonna
16:18 - change this value to something else with
16:22 - this this other div that we applied
16:26 - ng-switch default directive to this one
16:29 - should be rendered so look we get the
16:33 - otherwise message here so here's the
16:35 - lesson if you want to compare the value
16:38 - of the field or a property against
16:39 - multiple values use the ng switch case
16:42 - directive
16:47 - all righty I've seen the ng4 directive
16:50 - before we use this directive to render a
16:52 - list of objects so let's review this one
16:55 - more time and this time I'm going to
16:57 - show you more details about this
16:59 - directive so here in app component I'm
17:02 - gonna define a new field called courses
17:04 - and set this to an array of objects in
17:08 - this array we're going to have three
17:11 - course objects and for each course we're
17:13 - going to have two properties one is ID
17:15 - and the other is the name so of course
17:19 - one now I'm going to duplicate this so
17:24 - ID two and three and obviously course
17:27 - two and course three now let's use the
17:30 - ng4 directive to render these on the
17:32 - view so app dot component at HTML we
17:36 - want to have a ul and inside this ul we
17:40 - need an Li tab that's the markup now we
17:45 - add ng for and here as the value with
17:49 - type let course of courses and then we
17:55 - can use interpolation to render the name
17:57 - of each course so course that name let's
18:01 - make sure the application works up to
18:02 - this point so back in the browser okay
18:06 - we got three courses on the screen
18:07 - beautiful
18:08 - now this ng4 directive exports a bunch
18:12 - of values that might help you build
18:14 - certain features for example imagine you
18:16 - want to render a table and you want to
18:19 - highlight the first row or maybe you
18:21 - want to highlight the last row or you
18:23 - want to highlight the odd or even rows
18:25 - or maybe you want to display an index
18:27 - next to each object we can use the
18:29 - exported values from ng for directive so
18:33 - here after this expression we had
18:35 - semicolon one of these exported values
18:38 - is index so we type index now we need to
18:43 - alias this to a local variable so we
18:46 - type as and then the name of our local
18:48 - variable like I so with this expression
18:51 - we get the value of the index and put it
18:54 - in a local variable called I and then we
18:57 - can use interpolation to render I on the
18:59 - screen so
19:01 - like this I all right now let's test
19:06 - this back in the browser
19:08 - look before each course we have its
19:11 - index in our courses field so as you can
19:13 - see the index of the first item or the
19:16 - first course is zero now index is one of
19:19 - these exported values there are several
19:21 - other let me show you how you can find
19:23 - the list of all these exported values so
19:27 - if you head over to angular dot IO in
19:29 - the search box you can search for ng4 of
19:34 - directive s anyway our directive even
19:37 - though in HTML we use ng 4 but the
19:40 - actual name of this directive is ng for
19:42 - off and you can see that here it has a
19:46 - d' icon which indicates our directive
19:48 - now in this page if you scroll down
19:50 - under local variables you can see all
19:54 - these exported values so you saw index
19:56 - we also have first last even and odd so
20:01 - let me show you one more example let's
20:03 - say we want to render a table and you
20:05 - want to highlight all the even rows so
20:08 - you can get access to the even value an
20:12 - alias this as a local variable is even
20:15 - because this even is a boolean
20:18 - unlike the index which is a number even
20:20 - odd first and last values they are all
20:24 - boolean now here next to each course I
20:29 - want to render a span and I want to
20:33 - render this only if this is an even row
20:36 - so ng if is even for now I just add a
20:42 - simple label now in your applications
20:45 - you might want to render a table so you
20:47 - can use this variable is even and apply
20:50 - some style or some class to even rows in
20:53 - your table now let's try this back in
20:55 - the browser so you can see in front of
20:58 - the first and the third rows we have
21:00 - this label even
21:05 - all right now let me show you how this
21:07 - ng4 directive responds to the changes in
21:10 - the component state so on the top I want
21:14 - to add a button with this button we want
21:17 - to add a new course in our list so here
21:21 - we can handle the click event and bind
21:24 - this to a method called
21:26 - on add ok now back in the component
21:31 - let's add this new method here so on add
21:35 - we call this that courses let push and
21:41 - we push in your object here ID for a
21:43 - name it's going to be course for save
21:49 - back in the browser so here we have
21:52 - three courses when I click the Add
21:54 - button we get a new course here so
21:57 - angular has this change detection
21:58 - mechanism so whenever you click a button
22:01 - or when I ran Ajax request or a timer
22:04 - function completes angular performs its
22:06 - change detection it looks at our
22:09 - component it knows that this course is
22:11 - filled now has a new object that's the
22:14 - course with ID 4 so then it will render
22:18 - that course using this template now
22:21 - similarly we can add a button next to
22:25 - each course to remove it so button
22:28 - remove and here we can handle the click
22:31 - event and bind this for this expression
22:35 - we're gonna call on remove method in our
22:39 - class and as an argument we can pass
22:42 - this course object and we have in each
22:45 - iteration that is the course object here
22:47 - ok now back in the component so
22:51 - similarly I'm gonna add another method
22:53 - on remove here we get a course object
22:57 - now to remove this from an array first
23:00 - we need to find the index of this course
23:03 - in array so this of course is that index
23:07 - of this course object we get the index
23:12 - and then we call this that courses that
23:17 - splice
23:18 - so we go to that index and delete one
23:22 - object let's try it so back in the
23:25 - browser now if I click this remove
23:28 - button
23:29 - course number two will be removed there
23:31 - you go
23:32 - so once again after the execution of
23:35 - this on remove method angular performed
23:38 - it's changed detection it realized that
23:40 - one of the objects in our courses array
23:42 - is no longer there so it removed the
23:45 - corresponding list item in the Dom now
23:49 - similarly if we modify an existing
23:51 - object again angular will refresh the
23:54 - Dom automatically so let's change the
23:56 - name of this method from Unruh moved on
23:58 - change back in the component rename it
24:04 - here now instead of removing this course
24:06 - from the array I'm simply gonna change
24:09 - its name update it like that let's test
24:15 - the application you forgot to change the
24:18 - label it doesn't matter so when we click
24:20 - this the name of the course changes
24:22 - again this is change detection in action
24:25 - in the next lecture we're going to look
24:27 - at this change detection from a
24:29 - performance point of view hi thank you
24:34 - for watching my angular tutorial if you
24:36 - enjoyed this video please like it and
24:38 - share it with others also you can
24:41 - subscribe to my channel for free new
24:43 - videos every week this video is part of
24:46 - my complete angular course with almost
24:48 - 30 hours of high quality content where
24:51 - you learn everything about angular from
24:53 - the basic to the advanced topics all in
24:56 - one course so you don't have to jump
24:57 - from one tutorial to another in case
25:00 - you're interested you can get this
25:01 - course with a big discount using the
25:03 - link in the video description and if not
25:05 - that's perfectly fine continue watching
25:07 - as the next section is coming up