00:02 - in this python tutorial you're going to
00:03 - learn everything you need to know to
00:05 - start programming in python if you want
00:07 - to learn python programming for data
00:08 - science machine learning or web
00:10 - development this python tutorial is the
00:12 - perfect place to learn python you don't
00:14 - need any prior knowledge in python or
00:16 - programming in general i'm going to
00:18 - teach you everything from scratch i'm
00:19 - mosh hamadani and i've taught millions
00:21 - of people how to code through this
00:23 - channel if you're new here make sure to
00:25 - subscribe as i upload new videos every
00:27 - week now let's jump in and get started
00:30 - all right before we get started let me
00:31 - give you some ideas about what you can
00:32 - do with python that's a very common
00:34 - question python is a multi-purpose
00:36 - programming language so you can use it
00:38 - for a variety of different tasks you can
00:40 - use python for machine learning and ai
00:42 - in fact python is the number one
00:44 - language for machine learning and data
00:45 - science projects python is also very
00:47 - popular in web development using python
00:50 - and a framework called django you can
00:51 - build amazing websites here are five
00:54 - websites powered with python and django
00:56 - youtube instagram spotify dropbox and
01:00 - pinterest you can also use python in
01:02 - automation with python you can save your
01:04 - time and increase your productivity by
01:06 - automating repetitive tasks so why are
01:09 - you learning python are you learning it
01:10 - for automation for data science or web
01:12 - development let me know in the comment
01:14 - section below
01:19 - all right the first thing i want you to
01:20 - do is to head over to python.org to
01:23 - download the latest version of python so
01:26 - you go to downloads and select the
01:28 - latest version of python
01:33 - here in your downloads folder you should
01:34 - see this package simply double click it
01:37 - you're going to see this python
01:38 - installer if you're on windows you will
01:41 - see this checkbox over here add python
01:44 - to path make sure to check it it's
01:46 - really important otherwise you're not
01:48 - going to be able to follow this tutorial
01:50 - simply click on continue
01:52 - again
01:53 - one more time
01:55 - i agree with the terms
01:57 - and install the latest version of python
02:00 - now here you need to enter the username
02:02 - password of your computer
02:03 - so
02:04 - let's do that real quick
02:08 - next you need to install a code editor
02:11 - we use a code editor to write our code
02:13 - and execute it the most popular code
02:15 - editor for python is pycharm you can get
02:18 - it from jetbrains.com
02:20 - pycharm
02:21 - so on this page
02:23 - click on download
02:25 - you should see two different editions
02:27 - one is the professional edition which is
02:29 - commercial and we also have this
02:31 - community edition which is free and open
02:33 - source so we're going to download the
02:35 - community edition
02:39 - now in your downloads folder you should
02:41 - have this package let's double click it
02:45 - if you're on windows you're going to see
02:47 - an installation wizard so simply click
02:49 - on the next button until you install
02:51 - pycharm if you're on a mac you need to
02:53 - drag this pycharm and drop it onto the
02:56 - applications folder
03:00 - now
03:01 - let's open it
03:02 - the first time you open pycharm you have
03:04 - to configure a few settings we don't
03:06 - want to spend time on this so over here
03:09 - we're going to click on skip remaining
03:11 - and set defaults
03:14 - now let's create a new project
03:16 - over here we can specify the location
03:18 - and the name of our python project so
03:22 - let's append hello world to this path
03:25 - this is where our python project is
03:26 - going to be saved so let's click on
03:29 - create
03:32 - in this window you can see the content
03:34 - of our project so here's our hello world
03:36 - project currently we have only one
03:38 - folder inside this project that is vn
03:40 - which is short for virtual environment
03:42 - we'll talk about virtual environments in
03:44 - the future so currently we don't have
03:46 - any python files inside this project a
03:49 - real application can consist of tens or
03:51 - hundreds or even thousands of python
03:53 - files so let's right click on the
03:55 - project name
03:57 - and go to new python file we're going to
04:00 - call this file up
04:04 - now we can collapse this project window
04:05 - by clicking on this icon so now we have
04:08 - more space let's write our first python
04:10 - code we're going to write print all in
04:12 - lowercase then add parentheses
04:15 - then add quotes either single quotes or
04:18 - double quotes
04:20 - and inside this code we're going to
04:21 - write hello world
04:23 - so this is what we call a string a
04:25 - string means a string or sequence of
04:28 - characters in simple words that means
04:30 - textual data so in python and in many
04:33 - other programming languages whenever
04:35 - we're dealing with textual data we
04:37 - should always surround our text with
04:39 - quotes
04:40 - in python we can use single or double
04:42 - quotes
04:43 - now this print you see here is a
04:45 - function built into python and we can
04:48 - use it to print a message on our
04:49 - application window so let me show you
04:52 - how to run this code
04:54 - on the top we go to the run menu and
04:56 - then select run
04:58 - note that there is a shortcut associated
05:00 - with this command i always use shortcuts
05:02 - because they increase my productivity so
05:05 - let's click on this
05:07 - now select app
05:09 - and over here
05:10 - you can see this little window this is
05:12 - what we call the terminal window and it
05:14 - shows the output of our program
05:16 - so here's the hello world message
05:18 - printed in the terminal window now as
05:20 - you learn more python you will learn how
05:22 - to build applications that have a
05:23 - graphical user interface that's an
05:25 - advanced topic so for now let's not
05:27 - worry about it
05:34 - alright now let's talk about variables
05:36 - we use variables to temporarily store
05:38 - data in a computer's memory for example
05:41 - we can store the price of a product or
05:43 - someone's name their email their age and
05:46 - so on let me show you so
05:48 - to declare a variable we start by typing
05:50 - a name for that variable let's say age
05:54 - then we add an equal sign
05:56 - and then we type a value let's say 20.
05:59 - so with this we're storing the number 20
06:01 - somewhere in our computer's memory and
06:03 - we're attaching this age as a label for
06:05 - that memory location so now we can read
06:08 - the value at this memory location and
06:10 - print it on the terminal so instead of
06:13 - printing hello world we want to print
06:15 - the value of the age variable
06:17 - so i'm going to delete what we have
06:19 - inside parenthesis
06:21 - and type age note that i'm not adding
06:25 - quotes because if i run this program
06:27 - we'll see the text h on the terminal we
06:29 - don't want that we want the value of the
06:31 - age variable so let's remove the quote
06:35 - and
06:36 - print the value of the age variable
06:38 - now here on the toolbar you can click on
06:41 - this play icon to run your program or
06:43 - you can use the shortcut that i showed
06:44 - you in the last video so the shortcut is
06:47 - over here on a mac that's ctrl shift and
06:51 - r
06:52 - so
06:53 - there you go
06:54 - now you can see the value of the age
06:56 - variable
06:58 - now we can also change the value of a
06:59 - variable for example on line 2
07:02 - we can set 8 to 30.
07:05 - now when we run our program
07:07 - we see 30. so as you can see our program
07:10 - gets executed from top to bottom
07:12 - so this is how we can declare and use a
07:14 - variable now let's look at a few more
07:16 - examples
07:17 - so i'm going to declare
07:19 - another variable called price
07:21 - and set it to 19.95
07:24 - so in python we can use numbers with a
07:26 - decimal point or
07:28 - whole numbers we can also declare a
07:31 - variable and assign it a string value so
07:35 - let's say first underline name so if you
07:38 - want to use multiple words in the name
07:40 - of a variable we should separate them
07:42 - using an underscore this makes our code
07:45 - more readable see what would happen if i
07:47 - didn't use this underline
07:49 - this is not easily readable so we always
07:53 - separate multiple words by an underscore
07:56 - now we set this to a string so we can
07:58 - use single quotes or
08:00 - double quotes let's say march
08:02 - we also have a special type of value
08:04 - called a boolean value which can be true
08:07 - or false that is like yes or no in
08:09 - english let me show you so i'm going to
08:12 - declare another variable called is
08:15 - online and set it to true
08:18 - we could also set it to false what we
08:21 - have here is called a boolean value
08:23 - now note that python is a case sensitive
08:26 - language so it's sensitive to lowercase
08:28 - and uppercase letters in this case if i
08:31 - use a lowercase f
08:34 - we can see an error over here because
08:35 - this is not recognized in python
08:38 - so false with a capital f is a special
08:40 - keyword in python that represents the
08:43 - boolean false value
08:45 - so this is how we can declare and use
08:47 - variables in python
08:48 - all right now here's a little exercise
08:50 - for you
08:51 - imagine we want to write a program for a
08:52 - hospital so we're going to check in a
08:54 - patient named john smith he's 20 years
08:57 - old and is a new patient i want you to
08:59 - declare a few variables to store these
09:02 - values use the comment box below to
09:04 - share your code with others
09:12 - in this tutorial i'm going to show you
09:13 - how to receive input from the user so in
09:16 - python we have another built-in function
09:18 - called input we use this to read a value
09:21 - from the terminal window let me show you
09:23 - so we add parenthesis
09:26 - then we type in a string here we can
09:27 - type a message like what is your name we
09:31 - had a question mark followed by a space
09:34 - you will see why we need this space in a
09:35 - second so let's run this program
09:39 - we get this message now we have to enter
09:41 - a value so we click over here
09:44 - now you can see that the carrot is
09:45 - separated from the question mark this is
09:47 - because of the white space that we added
09:49 - over here
09:50 - so now we have to type a value let's say
09:53 - john when we press enter
09:56 - this function will return the value that
09:58 - we entered in the terminal window so we
10:01 - can get that value and store it in a
10:02 - variable so let's declare a variable
10:05 - called name and set it to the return
10:08 - value of the input function
10:10 - now we can print a greeting message for
10:12 - this user so we use the print function
10:16 - we say hello
10:18 - we had a space
10:19 - now after the string we want to add the
10:22 - value of the name variable so we use a
10:25 - plus sign
10:26 - and then type name
10:27 - what we are doing here is called string
10:30 - concatenation so we're combining this
10:32 - string with another string
10:35 - now let's run our program and see what
10:36 - happens so what is your name
10:39 - mosh
10:40 - now
10:41 - we get this message hello mosh
10:43 - so this is how we can use the input
10:44 - function in python
10:52 - you'll learn about the three types of
10:53 - data in python we have numbers
10:56 - strings and booleans now there are times
10:59 - you want to convert the value of a
11:01 - variable from one type to another let me
11:03 - show you so we're going to use our input
11:05 - function
11:06 - to read the user's birth year so enter
11:10 - your birth here
11:13 - now this input function is going to
11:15 - return a value so we can store it in a
11:17 - variable called
11:19 - birth underline year
11:21 - okay
11:22 - now let's write code to calculate the
11:24 - age of this user so we write an
11:26 - expression like this currently we are in
11:28 - the year 2020 so 2020 minus
11:32 - birth year
11:34 - this expression or piece of code is
11:35 - going to produce a value so once again
11:37 - we can store that value in a variable
11:40 - let's call that variable age
11:43 - now let's print age
11:44 - on the terminal
11:46 - let's run our program and see what
11:47 - happens
11:49 - so
11:50 - my birth year is 1982.
11:52 - enter oops our program crashed so
11:55 - whenever you see this red message that
11:57 - indicates an error so this error
11:59 - occurred in this file
12:01 - that is our app.pi on line two
12:05 - right below that you can see the piece
12:07 - of code that generated this error
12:09 - so that is this expression 2020 minus
12:12 - birth year now below that you can see
12:14 - the type of error so here we have
12:17 - unsupported types for subtraction
12:21 - we have int
12:22 - and stir what are these well this end is
12:26 - short for integer and that represents a
12:28 - whole number in programming so
12:31 - 2020 is an example of an integer
12:34 - now birth year is an example of a string
12:37 - because whenever we call the input
12:39 - function this function would return a
12:41 - value as a string even if we enter a
12:44 - number in other words when i entered
12:46 - 1982 this input function returned a
12:50 - string with these characters 1982 so
12:53 - this string is different from the number
12:56 - 1982 they're completely different types
12:59 - so in this case
13:00 - let me delete these lines
13:02 - the reason we got this error is that we
13:04 - try to subtract a string from an integer
13:07 - so our code looks like this
13:10 - 1982
13:12 - now python doesn't know how to subtract
13:14 - a string from an integer
13:16 - so to solve this problem we need to
13:18 - convert this string to an integer
13:20 - now in python we have a bunch of
13:22 - built-in functions for converting the
13:24 - types of our variables so
13:26 - we have this end function
13:29 - we can pass our burst here to it
13:31 - and this will return the new numeric
13:33 - representation of the birth year
13:35 - so to solve this problem
13:38 - we need to replace
13:39 - the string
13:42 - with the end function
13:43 - so let's see what's going on here on the
13:45 - first line we call the input function
13:47 - this returns a string
13:49 - on the second line we pass the string to
13:52 - our end function the in function will
13:54 - return the numeric representation of the
13:56 - burst year
13:58 - then
13:59 - we subtract it from 2020 we get the age
14:02 - and store it in the age variable now
14:04 - let's run our program
14:06 - so
14:07 - 1982
14:08 - and there you go i'm 38 years old
14:11 - so this is how the in function works now
14:14 - we also have another built-in function
14:16 - called float that is for converting a
14:19 - value to a floating point number a
14:21 - floating point number in python and
14:23 - other programming languages is a number
14:25 - with a decimal point so
14:28 - 10 is an integer and 10.1 is a float
14:31 - so we have int we have float and we also
14:35 - have bool for converting a value to a
14:38 - boolean
14:39 - and finally we have stir for converting
14:42 - a value to a string so these are the
14:44 - built-in functions for converting the
14:46 - type of our variables
14:48 - now here's a little exercise for you i
14:50 - want you to write a basic calculator
14:52 - program so here we have to enter two
14:54 - numbers we can type a whole number or a
14:57 - number with a decimal point
15:00 - and then our program will print the sum
15:02 - of these two numbers
15:03 - so pause the video spend two minutes on
15:05 - this exercise and then see my solution
15:10 - all right first we're going to call our
15:12 - input function to read the first number
15:14 - we get the result and store it in a
15:16 - variable called first
15:18 - now let's declare
15:21 - another variable called second and read
15:24 - the second number
15:26 - now
15:27 - we calculate the sum
15:29 - so that is first plus second
15:32 - now let's see what happens when we print
15:34 - sum on the terminal
15:36 - so i enter 10 and 20
15:39 - but instead of 30 we get 10 20. this is
15:42 - because we're combining or concatenating
15:44 - two strings so
15:47 - as i told you before the input function
15:49 - returns a string so
15:52 - this line will be equivalent to first
15:55 - equals 10. we're dealing with a string
15:57 - not an integer
15:59 - similarly
16:00 - second is going to be
16:02 - 20 as a string so when we combine two
16:05 - strings 10 plus 20 will get
16:09 - 10 20 because we're dealing with textual
16:11 - data okay so to solve this problem
16:16 - we need to convert the values we read to
16:18 - their numeric representation so over
16:20 - here
16:22 - we're going to pass
16:24 - first to our int function
16:26 - and here as well
16:28 - now let's run our program
16:30 - so we enter 10 and 20 we get 30. what if
16:34 - we enter a floating point number so 10.1
16:38 - and 20.
16:40 - we got an error
16:41 - so to solve this problem
16:44 - we need to treat both these values as
16:46 - floats so instead of the in function
16:49 - we're going to use the float function
16:52 - now let's run our program one more time
16:55 - we enter a whole number and a floating
16:58 - point number so the result is correct
17:00 - now let's add a label over here so sum
17:05 - is
17:06 - plus sum
17:08 - let's run our program
17:09 - one more time 10 and 20.
17:12 - once again we got an error the error is
17:14 - saying that python can only concatenate
17:17 - strings not floats to strings
17:21 - so on line four we have a string we're
17:23 - concatenating this with a float because
17:26 - the result of this expression is a
17:28 - floating point number we're adding two
17:30 - floats so the result is a float as well
17:33 - so python doesn't know how to evaluate
17:36 - code like this
17:38 - it doesn't know how to concatenate a
17:40 - float
17:42 - to a string to solve this problem
17:45 - we need to convert sum to your string so
17:47 - this is where
17:48 - we use the stir function
17:51 - now let's run the program again so
17:54 - 10 plus 20.1 and here's the result
17:58 - and one last thing
17:59 - in this example i'm calling the float
18:01 - function at the time we want to
18:03 - calculate the sum of these two numbers
18:05 - but this is not a requirement we can
18:07 - call the float function
18:09 - over here so this input function returns
18:12 - a string we can pass that string to our
18:14 - float function take a look so float
18:17 - parenthesis like this
18:20 - so the value that we're passing to the
18:22 - float function is the value that is
18:24 - returned from the input function
18:26 - similarly
18:29 - we call the float function over here
18:32 - now
18:33 - we can change this expression to first
18:35 - plus second that is another way to write
18:38 - this piece of code
18:40 - so type conversion is important in
18:41 - python and other programming languages
18:44 - there are times you need to convert the
18:45 - type of variable to a different type
18:53 - in this tutorial i'm going to show you a
18:55 - bunch of cool things you can do with
18:56 - strings in python so let's start by
18:59 - declaring a variable called course
19:01 - and set it to python for
19:04 - beginners
19:06 - now this string that we have over here
19:07 - is technically an object an object in
19:10 - python is like an object in the real
19:12 - world as a metaphor think of the remote
19:14 - control of your tv this remote control
19:16 - is an object and it has a bunch of
19:18 - capabilities it has a bunch of buttons
19:20 - for turning your tv on turning it off
19:23 - changing the volume and so on now in
19:25 - this program this course variable is
19:27 - storing a string object this string
19:29 - object has a bunch of capabilities so if
19:31 - we type
19:32 - course dot you can see all the
19:35 - capabilities available in a string
19:37 - object these are basically functions
19:39 - that you can call just like the print or
19:41 - input functions the difference is that
19:43 - the print and input functions are
19:45 - general purpose functions they don't
19:47 - belong to a particular object but the
19:49 - functions you see over here are specific
19:51 - to strings now more accurately we refer
19:54 - to these as methods so when a function
19:56 - is part of an object we refer to that
19:59 - function as a method
20:00 - so let's look at a few examples here we
20:03 - have a function or a method called upper
20:06 - and we use that to convert a string to
20:07 - uppercase so if we print
20:10 - course.upper
20:12 - and run this program they can see our
20:14 - course in uppercase
20:16 - pretty useful
20:17 - now what you need to understand here is
20:19 - that this upper method does not change
20:21 - our original string it will return a new
20:24 - string so right after this if we print
20:27 - course
20:29 - you can see that our course variable is
20:31 - not affected so the upper method returns
20:34 - a new string
20:36 - now similarly we have another method
20:38 - called lower for converting a string to
20:40 - lowercase we have a method called find
20:43 - to see if our string contains a
20:45 - character or a sequence of characters
20:47 - for example here we can pass
20:50 - y
20:50 - and this will return the index of the
20:53 - first occurrence of y in our string so
20:57 - in python the index of the first
20:59 - character in a string is 0. so here we
21:01 - have 0 1 2 3 4 and so on so when we run
21:04 - this program you're going to see one on
21:06 - the terminal because the index of y is
21:09 - 1. take a look first i'm going to delete
21:11 - this line we don't need it anymore also
21:14 - let's do this line let's run the program
21:17 - there you go
21:20 - now as i told you before python is
21:21 - sensitive to lowercase and uppercase
21:24 - letters so if i pass an uppercase y here
21:28 - this find method returns negative 1
21:31 - because we don't have an uppercase y in
21:32 - this string we can also pass a sequence
21:35 - of characters for example 4. so this
21:38 - will return the index of the word 4.
21:41 - take a look
21:43 - so it's 7.
21:44 - now there are times we want to replace
21:46 - something in a string with something
21:47 - else
21:48 - to do that we use the replace method
21:51 - replace
21:52 - so we can replace 4
21:54 - with
21:55 - a string containing the number 4. take a
21:58 - look
21:59 - so python for beginners
22:02 - obviously
22:03 - if you look for a character or a
22:04 - sequence of characters that don't exist
22:06 - in our string nothing is going to happen
22:08 - for example if we try to replace x with
22:11 - 4 obviously we don't have x here so
22:14 - nothing is going to happen
22:16 - also just like the upper method the
22:18 - replace method is not going to modify
22:21 - our original string so it's going to
22:22 - return a new string this is because
22:25 - strings in python and many other
22:27 - programming languages are immutable we
22:29 - cannot change them once we create them
22:31 - whenever we want to change your string
22:33 - we'll end up with a new string object in
22:35 - memory
22:36 - now one last thing i want to cover in
22:37 - this tutorial there are times you want
22:39 - to see if your string contains a
22:41 - character or a sequence of characters
22:43 - one way to do that is using the find
22:45 - method that we talked about so let's see
22:48 - if our string
22:50 - contains python
22:52 - now when we run this program
22:54 - that is the index of the first
22:56 - occurrence of the word python in our
22:58 - string now in python we can also use the
23:01 - in operator so we can write an
23:03 - expression like this
23:05 - we type a string
23:07 - python then we type in this is a special
23:10 - keyword in python this is what we call
23:13 - the in operator
23:15 - so after that we type the name of our
23:17 - variable
23:18 - so with this expression we're checking
23:20 - to see if we have python in course as
23:23 - you can see python code is very readable
23:25 - it's like plain english so when we run
23:28 - this program
23:29 - instead of seeing the index of the first
23:31 - occurrence of python we see a boolean
23:34 - value this is more desirable in a lot of
23:36 - cases
23:37 - next we're going to look at arithmetic
23:38 - operations
23:45 - in this tutorial i'm going to show you
23:47 - the arithmetic operators that we have in
23:49 - python these are the same arithmetic
23:51 - operators that we have in math for
23:53 - example we can add numbers we can
23:55 - subtract them multiply them and so on so
23:57 - let's print
23:58 - 10 plus 3. let me run this program we
24:02 - have 13.
24:03 - so this is the addition operator we also
24:06 - have subtraction
24:07 - we have multiplication
24:09 - and division now technically we have two
24:12 - different types of division operators we
24:14 - have a division with one slash and
24:16 - another with two slashes let's look at
24:18 - the differences if you use a single
24:20 - slash
24:22 - we get a floating point number that is a
24:24 - number with a decimal point but if we
24:26 - use double slashes
24:28 - we get
24:29 - an integer a whole number we also have
24:33 - the modulus operator that is indicated
24:35 - by a percent sign and this returns the
24:38 - remainder of the division of ten by
24:40 - three so
24:41 - that is one and finally we have the
24:44 - exponent operator that is indicated by
24:46 - two asterisks so this is 10 to the power
24:49 - of three so when we run this we get a
24:52 - thousand
24:54 - now for all these operators that you saw
24:56 - we have an augmented assignment operator
24:59 - let me explain what it means so let's
25:01 - say we have a variable called x
25:03 - and we set it to 10.
25:05 - now we want to increment the value of x
25:07 - by 3. so we have to write code like this
25:10 - x
25:10 - equals x plus 3. when python executes
25:14 - this code it's going to evaluate this
25:16 - expression or this piece of code the
25:18 - result of this expression is 10 plus 3
25:20 - which is 13. then it will store 13 in
25:23 - the x
25:24 - now there is another way to achieve the
25:26 - same result using less code we can type
25:29 - x plus equal three
25:32 - what we have on line three is exactly
25:34 - identical to what we have on line two so
25:36 - what we have here is called the
25:38 - augmented assignment operator so we have
25:41 - this assignment operator but we have
25:43 - augmented or enhanced it
25:46 - now here we can also use
25:48 - subtraction to decrease the value of x
25:50 - by 3 we can use multiplication and so on
25:54 - so these are the arithmetic operators in
25:56 - python
26:03 - all right let me ask you a question i'm
26:04 - going to declare a variable called x and
26:07 - set it to 10 plus 3 times 2. what do you
26:10 - think is the result of this expression
26:12 - this is a basic math question that
26:14 - unfortunately a lot of people fail to
26:16 - answer
26:17 - the answer is 16. here's the reason in
26:20 - math we have this concept called
26:22 - operator precedence and that determines
26:24 - the order in which these operators are
26:26 - applied so multiplication and division
26:30 - have a higher order so this part of the
26:32 - expression gets evaluated first so 2
26:34 - times 3 is 6
26:36 - and then the result is added to 10. that
26:39 - is why the result of this expression is
26:40 - 16. now in python operator precedence is
26:44 - exactly like math but we can always
26:46 - change it using parenthesis for example
26:48 - in this expression if you want 10 plus 3
26:51 - to be evaluated first we can wrap it in
26:53 - parenthesis
26:55 - so
26:56 - like this now when we execute this code
26:59 - we're going to see 26 because 10 plus 3
27:02 - is 13 and that divided by 2 is 26. let's
27:05 - verify this so print x
27:08 - and we get 26.
27:15 - so you learn about the arithmetic
27:17 - operators in python now in python we
27:19 - have another set of operators called
27:21 - comparison operators we use these
27:24 - operators to compare values let me show
27:26 - you so i'm going to declare a variable
27:28 - called x
27:29 - and set it to an expression like this 3
27:32 - is greater than 2. so what we have here
27:35 - this piece of code this expression is
27:37 - called a boolean expression because it
27:39 - produces a boolean value so in this case
27:42 - because 3 is greater than 2 the result
27:44 - of this expression is the boolean true
27:47 - so if we print x
27:51 - we get true on the terminal
27:53 - so here is the greater than operator we
27:55 - also have greater than or equal to we
27:58 - have less than we have less than or
28:01 - equal to
28:02 - here is the equality operator which is
28:04 - indicated by two equal signs do not
28:06 - confuse this with the assignment
28:08 - operator so here we're comparing three
28:11 - and two for equality so if we run our
28:13 - program
28:15 - we see false because 3
28:17 - does not equal to 2.
28:19 - so here's the equality operator we also
28:21 - have
28:22 - the not equality operator that is
28:24 - indicated by an exclamation mark
28:26 - followed by an equal sign
28:28 - so let's quickly recap
28:30 - here are the comparison operators we
28:32 - have in python greater than greater than
28:35 - or equal to less than less than or equal
28:38 - to
28:39 - equal and not equal
28:41 - these operators are extremely important
28:43 - in real python programs because quite
28:45 - often we have to compare values to
28:47 - evaluate certain conditions you're going
28:49 - to see that soon
28:56 - in python we have another set of
28:58 - operators called logical operators we
29:00 - use these operators to build complex
29:02 - rules and conditions let me show you so
29:05 - i'm going to declare a variable called
29:06 - price and set it to 25.
29:09 - now let's print
29:10 - a boolean expression like this
29:12 - price is greater than 10.
29:15 - now let's say we want to check to see if
29:17 - the price is between 10 and 30. this is
29:20 - where we use the logical and operator so
29:23 - we type and and right after that we type
29:26 - another boolean expression surprise less
29:29 - than 30. so with this and operator if
29:33 - both these boolean expressions return
29:35 - true the result of this entire
29:37 - expression will be true take a look so
29:41 - in this case we get true
29:43 - because the price is between 10 and 30
29:45 - dollars
29:46 - we also have
29:48 - the or operator
29:49 - with the or operator if at least one of
29:52 - these boolean expressions returns true
29:54 - then the result of this entire
29:56 - expression will be true
29:57 - to demonstrate this i'm going to change
29:59 - price to 5. let's see how python is
30:02 - going to execute this code so first it's
30:04 - going to look at this boolean expression
30:06 - is price greater than 10 no it's not so
30:10 - it will keep going
30:11 - then it will look at the second boolean
30:13 - expression is price less than 30 it sure
30:16 - is so the result of this entire
30:18 - expression will be true take a look
30:22 - there you go
30:23 - we also have the not operator which
30:25 - basically inverses any values that you
30:27 - give it let me show you so
30:30 - we're going to have one boolean
30:32 - expression price greater than 10. the
30:34 - result of this expression is false
30:37 - now if you apply the not operator
30:40 - this will inverse false to true so when
30:43 - we run the program we get true
30:46 - so let's quickly recap in python we have
30:48 - three logical operators we have logical
30:51 - and which returns true if both
30:53 - expressions return true
30:55 - we have logical or which returns true if
30:57 - at least one expression returns true and
31:00 - we have not which inverses any value
31:03 - that we give it
31:10 - in this tutorial we're going to talk
31:11 - about if statements in python we use if
31:14 - statements to make decisions in our
31:15 - programs for example we can declare a
31:18 - variable called temperature and
31:19 - depending on the value of this variable
31:21 - we can print different messages on the
31:23 - terminal let me show you
31:25 - so here's our temperature variable
31:27 - we set it to 35.
31:29 - now let's say if temperature is greater
31:32 - than 30 we want to print a message
31:34 - saying it's a hot day so we type if
31:37 - then we type a condition and this is
31:39 - where we use our comparison operators so
31:42 - we type temperature
31:44 - greater than 30.
31:46 - then so we add a colon and see what
31:48 - happens when i press enter now
31:51 - the character is indented and this
31:53 - represents a block of code so the code
31:56 - that we write over here will be executed
31:58 - if this condition is true otherwise it's
32:00 - not going to be executed let me show you
32:03 - so
32:04 - we're going to print
32:06 - it's a hot day
32:08 - and by the way note that here i've
32:09 - surrounded the string with double quotes
32:12 - because here we have a single quote as
32:15 - an apostrophe so i couldn't declare a
32:17 - string like this with single quotes if i
32:20 - typed it's a hot day
32:22 - look python gets confused because it
32:25 - thinks this single code represents the
32:27 - end of our string so it doesn't
32:29 - recognize the subsequent characters okay
32:32 - so that's why we use
32:34 - double quotes here
32:36 - so we can have an apostrophe in our
32:38 - string
32:39 - so it's a hot day
32:41 - now if i press enter again
32:43 - the carrot is indented so the code that
32:46 - right here will be part of our if block
32:48 - and it will get executed if this
32:50 - condition is true so here we can print
32:53 - a second message drink plenty of water
32:57 - now to terminate this block we press
32:59 - enter and then press shift and tab
33:02 - the carrot is no longer indented so the
33:05 - code that we write here will always get
33:07 - executed no matter what whether this
33:09 - condition is true or not
33:11 - now in c based programming languages
33:13 - like c plus c sharp java and javascript
33:17 - we present a block of code using curly
33:19 - braces so
33:21 - you start a block of code using a left
33:23 - brace
33:24 - and then end it using a right brace in
33:27 - python we don't have curly braces so we
33:29 - use indentation to represent a block of
33:31 - code okay
33:33 - so
33:34 - in this case
33:35 - these two lines are indented and that
33:37 - means they are part of this block of
33:40 - code
33:40 - now let's run the program and see what
33:42 - happens
33:44 - so we see these two messages because the
33:46 - temperature is greater than 30.
33:48 - now
33:49 - if i change the temperature to 25
33:52 - and run the program again we don't see
33:54 - anything okay
33:57 - now
33:57 - after this block let's print
34:00 - done
34:01 - because this code is not indented it
34:03 - will always get executed it's not part
34:05 - of our if block okay so take a look
34:09 - here's the down message
34:11 - now
34:11 - let's add a second condition so if
34:14 - temperature is not greater than 30 that
34:17 - means it's less than or equal to 30. so
34:20 - i'm gonna add a second condition so if
34:23 - the temperature is between 20 and 30 i
34:25 - want to print it's a nice day
34:28 - so here we type l if
34:30 - that is short for else if
34:32 - and here we type a second condition
34:35 - so temperature greater than 20.
34:39 - we add a colon press enter now we have a
34:42 - new block
34:43 - so here we can print
34:45 - it's a nice day
34:48 - so if this condition is true that means
34:50 - the temperature
34:52 - is greater than 20 and less than or
34:54 - equal to 30. now what we have here is
34:57 - called a comment that is why it's grayed
34:59 - out it's not real code it's just some
35:01 - note that we add to our program python
35:03 - is not going to execute this so whenever
35:06 - we type a pound sign what we have after
35:08 - is treated as a comment okay
35:11 - so
35:12 - if this condition is true then we're
35:14 - going to see this message on the
35:15 - terminal let's run our program and
35:17 - verify this
35:19 - there you go the temperature is 25
35:21 - that's why we see this message
35:23 - now we can have as many conditions as we
35:25 - want there are no limitations okay
35:28 - so let's add another condition
35:30 - l if
35:31 - temperature is greater than 10
35:34 - then
35:35 - we're going to print
35:37 - it's a bit cold
35:39 - now in this case if this condition is
35:41 - true that means the temperature is
35:44 - greater than 10
35:45 - and less than or equal to 20.
35:48 - now finally if the temperature is less
35:49 - than 10 let's print a message saying
35:51 - it's a cold day
35:53 - so
35:54 - here we type else then we add a colon
35:57 - and now we have a new block
35:59 - so this code will get executed if none
36:02 - of the above conditions are true
36:04 - so here we can print
36:07 - it's called
36:10 - so this is how we use if statements to
36:12 - make decisions in our programs
36:20 - here's a great exercise for you to
36:21 - practice what you have learned so far i
36:23 - want you to write a weight converter
36:25 - program like this
36:27 - so this program is asking me my weight i
36:29 - enter 170.
36:31 - next it's asking me if the weight is in
36:34 - kilograms or pounds so i can type k for
36:37 - kilograms or l for pounds i can type a
36:40 - lowercase l or an uppercase l it doesn't
36:42 - matter so let's go with a lowercase l
36:46 - now it tells me weight in kilogram is
36:49 - 76.5
36:51 - so go ahead and spend 5 minutes on this
36:52 - exercise you can use the comment box
36:54 - below to share your code with others and
36:57 - then when you're done come back see my
36:58 - solution
37:02 - so first we call our input function to
37:05 - ask the first question
37:06 - wait we get the result and store it in a
37:09 - variable called weight
37:12 - next we call the input function one more
37:14 - time to ask the second question
37:16 - is this in kilogram
37:18 - or
37:20 - pounds we get the result and store it in
37:23 - a variable called unit
37:25 - this is where we're going to use an if
37:27 - statement
37:28 - so
37:29 - we want to check to see if unit
37:31 - equals
37:32 - k
37:34 - then we should convert the weight to
37:36 - pounds and print it on a terminal
37:38 - however
37:39 - with this code if i type a lowercase k
37:41 - this condition is not going to be true
37:43 - because earlier i told you that python
37:45 - is a case sensitive language
37:47 - so
37:48 - we need to convert this string to
37:50 - uppercase earlier we talked about string
37:52 - methods so if we type dot we can see all
37:55 - the functions or methods available in a
37:57 - string object so we use the upper method
38:01 - and this returns a new string in case
38:04 - now if this condition is true first we
38:06 - need to convert the weight to pounds so
38:08 - we declare a new variable called
38:10 - converted
38:12 - get the weight and divide it by 0.45
38:17 - and then we can print this on a terminal
38:19 - so
38:21 - we say weight
38:22 - in pounds is
38:24 - then we append converted
38:27 - now to terminate this block we press
38:29 - shift and tab
38:31 - else colon
38:33 - so if this condition is not true that
38:35 - means the weight was entered in pounds
38:37 - so we need to convert it to kilograms
38:39 - once again we declare a variable
38:41 - converted and set it to weight times
38:45 - 0.45
38:47 - and then we print
38:49 - weight in kilograms
38:52 - and here we concatenate
38:54 - this string with converter all right now
38:57 - we need to terminate this block so we
38:59 - press enter then shift and tab good
39:02 - now if we run this program we're going
39:04 - to see an error let me show you so let's
39:06 - run it
39:07 - here i'm going to enter 170
39:10 - then i type a lowercase l
39:13 - okay here's an error
39:15 - can't multiply sequence by non-end of
39:17 - type float so this is where we got this
39:21 - error when we try to multiply the weight
39:23 - by 0.45
39:26 - so
39:27 - that is line seven in our code now the
39:29 - reason this is happening is because the
39:31 - wait variable is storing a string object
39:34 - because earlier i told you the input
39:36 - function always returns a string so here
39:39 - we need to convert the weight
39:41 - to a number we can either use the end or
39:44 - the float function
39:46 - let's run the program one more time
39:48 - so
39:49 - 170
39:52 - in pounds
39:53 - here's the second error can only
39:55 - concatenate string not float to string
39:59 - and that error occurred
40:01 - over here
40:02 - when we try to print the weight in
40:04 - kilograms so
40:06 - look at line seven
40:07 - in this case weight as an integer we are
40:10 - multiplying an integer by a float and
40:12 - the result of this operation is going to
40:14 - be a float
40:16 - now on line eight we are trying to
40:18 - concatenate or combine a string with a
40:21 - float and python doesn't know how to
40:23 - execute this code
40:24 - to solve this problem we need to convert
40:26 - this flow to a string so here we use the
40:29 - built-in stir function
40:32 - let's run the program and see what
40:33 - happens
40:34 - so
40:36 - 170 in pounds and here's my weight in
40:40 - kilograms now let's try entering a
40:42 - weight in kilograms so run it one more
40:44 - time
40:45 - let's say 76
40:47 - kilos
40:49 - here we get a familiar error can only
40:52 - concatenate string to string not float
40:55 - so this error occurred on line five
40:57 - where we try to concatenate a string
41:01 - to a float so once again we need to
41:03 - convert this to a string object now
41:06 - let's run the program one more time
41:09 - 76
41:10 - kilos
41:11 - is equal to 168 pounds
41:16 - hey guys i just wanted to let you know
41:17 - that i have an online coding school at
41:19 - codewoodmosh.com where you can find
41:21 - plenty of courses on web and mobile
41:22 - development in fact i have a
41:24 - comprehensive python course that teaches
41:26 - you everything about python from the
41:28 - basics to more advanced concepts so
41:30 - after you watch this tutorial if you
41:32 - want to learn more you may want to look
41:33 - at my python course it comes with a 30
41:35 - day money back guarantee and a
41:36 - certificate of completion you can add to
41:38 - your resume in case you're interested
41:40 - the link is below this video
41:46 - in this tutorial we're going to talk
41:47 - about while loops in python we use while
41:50 - loops to repeat a block of code multiple
41:52 - times for example let's say we want to
41:54 - print the numbers one to five a poor way
41:57 - of doing this is writing code like this
41:59 - print one then print two print 3
42:02 - print 4 and print 5.
42:05 - now why is this a bad approach well what
42:07 - if we wanted to print the numbers 1 to 1
42:09 - million we don't want to write 1 million
42:12 - lines of code each line printing a
42:14 - number this is where we use while loops
42:16 - so
42:17 - we'll start off by declaring a variable
42:19 - like i and set it to our initial number
42:21 - let's say one
42:23 - then we type while and here we type a
42:25 - condition so once again we can use our
42:27 - comparison operators
42:29 - let's say i less than 5 less than or
42:32 - equal to 5.
42:34 - as long as this condition is true then
42:36 - the code that we write inside of the
42:38 - while block will get executed so here we
42:40 - type a colon then press enter now we
42:43 - have a block of code
42:45 - in this block we can print i
42:48 - and then we need to increment i y one so
42:50 - we set i to i plus one if you don't do
42:53 - this i will always be one and this block
42:56 - of code
42:57 - will get executed indefinitely it will
43:00 - never terminate basically our program
43:02 - will continue running until it runs out
43:04 - of memory
43:05 - so
43:06 - in the first iteration i is 1 is less
43:08 - than 5 so python is going to execute
43:11 - this block of code it will print 1 on
43:13 - the terminal and then i becomes 2.
43:16 - then the control moves back over here so
43:18 - python evaluates this condition
43:21 - 2 is less than or equal to 5 so the
43:23 - condition is true and once again python
43:26 - is going to execute this block one more
43:27 - time in the second iteration we're going
43:30 - to see two on the terminal and then i
43:32 - will become three so this will continue
43:34 - until this condition is no longer true
43:37 - let me show you so
43:39 - let's run this program
43:40 - now we see the numbers one to five so
43:43 - this is the beauty of while loops
43:45 - i can easily change five
43:47 - to one
43:49 - thousand and by the way i'm separating
43:51 - these three digits using an underscore
43:53 - this makes my number more readable we
43:55 - don't have to add this but it just makes
43:56 - our code more readable
43:58 - so let's run the program
44:00 - now we see the numbers 1 to 1000. it's
44:03 - much easier than 1000 lines of code each
44:06 - printing a number okay now let me show
44:08 - you something really cool
44:10 - so i'm going to change this
44:12 - to 10.
44:14 - now instead of printing i i want to
44:17 - print an expression so i'm going to
44:19 - multiply i
44:20 - by a string an asterisk
44:23 - now you might be confused here because
44:25 - earlier i told you that in python we
44:27 - cannot concatenate a number to a string
44:30 - but here i'm using the multiplication
44:32 - operator well this is different we can
44:34 - multiply a number by a string and this
44:37 - will repeat that string based on the
44:39 - value of that number so if i is one
44:42 - we're gonna see one asterisk if i is
44:45 - five we're going to see five asterisks
44:47 - let me show you so when we run this
44:49 - program
44:51 - we see this triangle shape because in
44:53 - the first iteration i is one so we see
44:56 - one asterisk in every iteration i is
44:59 - incremented by one so we see one extra
45:02 - asterisk and finally in the last
45:04 - iteration i is 10 and we see 10
45:07 - asterisks on the terminal
45:15 - so you have learned about three types of
45:16 - data in python we have numbers which can
45:19 - be integers or floats
45:21 - we have booleans and strings
45:24 - these are what we refer to as primitive
45:26 - or basic types in python now in python
45:29 - we have a bunch of complex types as well
45:31 - these complex types are very useful in
45:34 - building real applications
45:35 - in this tutorial we're going to talk
45:37 - about lists we use lists whenever we
45:40 - want to represent a list of objects like
45:42 - a list of numbers or a list of names let
45:44 - me show you
45:45 - so i'm going to declare a variable
45:47 - called names
45:49 - and set it to a list of names
45:51 - so here we add square brackets to
45:53 - represent a list and now we can add one
45:55 - or more objects inside this list in this
45:58 - list we add a bunch of names like john
46:01 - bob
46:02 - marsh
46:04 - sam
46:05 - and mary so we separate this element
46:07 - these items using a comma okay
46:10 - now
46:11 - let's print our list so print names
46:15 - take a look
46:16 - it comes out exactly like how we wrote
46:18 - it
46:19 - now we can also get individual elements
46:21 - in this list for example if we want to
46:23 - get the first element in this list here
46:26 - we type a pair of square brackets and
46:29 - inside the square brackets we type an
46:31 - index the index of the first element in
46:33 - this list is zero so now when we run
46:36 - this program we're going to see john on
46:38 - the terminal
46:39 - there you go
46:40 - now
46:41 - in python we can also use a negative
46:43 - index this is a feature that i
46:45 - personally have not seen in other
46:47 - programming languages
46:48 - so if 0 represents the first element in
46:52 - this list what do you think
46:54 - negative 1 represents it represents the
46:57 - last element in this list let's verify
46:59 - it so let's run the program and here's
47:02 - mary
47:03 - what about
47:06 - negative 2 well that represents the
47:09 - second element
47:10 - from the end of the list
47:12 - so let's run the program and here's some
47:15 - then we can also change an object at a
47:17 - given index for example let's say here
47:20 - we made a mistake and this john should
47:22 - not be spelled with an h
47:24 - so we need to reset it we type names of
47:28 - zero
47:29 - now we treat this like a regular
47:30 - variable so we set it to a new value
47:33 - we set it to john without an h now let's
47:36 - print our list
47:38 - and here's our updated list beautiful
47:41 - we can also select a range of values for
47:44 - example let's say we're only interested
47:46 - in the first three names
47:48 - so over here we type square brackets
47:51 - and here we need to type two indexes a
47:54 - start index and an end index
47:56 - our start index is a zero because we
47:58 - want to start from here
48:00 - and our end index is going to be zero
48:03 - one two plus one that's going to be
48:06 - three so we add a colon three so python
48:10 - is going to return all the elements from
48:12 - the start index up to the end index but
48:15 - excluding the end index so it's going to
48:17 - return the elements at index 0 1 and 2.
48:22 - take a look
48:24 - here are the first three names
48:27 - and by the way
48:29 - this expression does not modify our
48:31 - original list it returns a new list so
48:35 - right after this print statement if we
48:37 - print our original list
48:40 - you can see that it's not changed
48:42 - so this is how we use lists in python
48:51 - earlier i told you that strengths in
48:52 - python are objects objects in
48:55 - programming are kind of like objects in
48:57 - the real world like your mobile phone
48:59 - your bicycle the remote control of your
49:01 - tv and so on they have certain
49:02 - capabilities so if we type a string here
49:06 - and then press dot we can see all the
49:08 - functions or methods available in a
49:10 - string object in python
49:12 - now lists are also objects so they have
49:15 - a bunch of methods for adding items or
49:17 - removing them and so on let me show you
49:19 - so i'm going to declare
49:20 - a list of numbers
49:22 - let's say 1 2 3 4 and 5.
49:25 - now to add a new element at the end of
49:27 - this list we can use the append method
49:30 - so we type numbers
49:31 - that append
49:33 - and here we type 6.
49:35 - now let's print our list
49:39 - so here's our updated list beautiful
49:41 - now what if you want to insert a number
49:43 - somewhere in the middle or at the
49:45 - beginning
49:46 - for that we use the insert method
49:49 - so we're going to call the insert method
49:52 - now on the top
49:53 - go to the view menu
49:55 - and
49:56 - look at parameter info look at the
49:58 - shortcut on a mac computer it's command
50:01 - and p
50:02 - on windows it's probably control and p
50:05 - if we use this shortcut we can see the
50:07 - values that this method expects
50:10 - so the first value that this method
50:12 - expects is an index value and the type
50:14 - of this value is an integer
50:16 - so if i want to insert a value at the
50:18 - beginning of this list i should pass 0
50:21 - as the index of the first element right
50:23 - so let's pass 0.
50:25 - now
50:26 - the second value is highlighted so the
50:29 - second value is an object and the type
50:31 - of this is t that basically means this
50:34 - can be any type we can pass a number we
50:36 - can pass a boolean we can pass a string
50:38 - we can pass a list or any type of
50:40 - objects in python
50:42 - so i'm going to pass negative 1. now
50:45 - let's run our program
50:47 - you can see negative 1 appeared at the
50:49 - beginning of our list
50:50 - we also have a method for removing items
50:52 - so let's call
50:55 - remove
50:56 - three
50:57 - let's run the program
50:59 - three is gone we only have one two four
51:01 - and five
51:02 - now if you wanna remove all the items in
51:04 - the list we call the clear method so
51:07 - clear
51:08 - this method doesn't expect any values
51:11 - so let's run our program our list is
51:13 - empty
51:14 - now sometimes you want to know if a
51:16 - given item exists in our list or not to
51:18 - do that we use the in operator so
51:21 - let's remove this line
51:23 - instead of printing our numbers list i'm
51:26 - going to print an expression
51:28 - one
51:29 - in
51:30 - numbers
51:31 - so here we're using the in operator
51:33 - we're checking to see if one is in the
51:35 - numbers list so this is a boolean
51:37 - expression it returns a boolean value
51:40 - take a look
51:41 - so we get true
51:43 - obviously if we search for a value that
51:45 - doesn't exist in this list
51:47 - like 10
51:48 - we get false okay
51:50 - now finally there are times you want to
51:52 - know how many items you have in the list
51:54 - to do that you can use the built-in lend
51:57 - function
51:58 - so let's print
52:00 - len of numbers so len
52:03 - is a built-in function just like the
52:05 - print function that is why it's
52:07 - highlighted as purple it returns the
52:09 - number of elements in a list take a look
52:12 - so we have five elements in this list
52:20 - when writing python programs there are
52:22 - times you want to iterate over a list
52:25 - and access each item individually let me
52:27 - show you so i'm going to declare
52:29 - a list of numbers
52:31 - one two three four five
52:33 - now if we print this list
52:36 - it comes out exactly like how we wrote
52:38 - it using the square bracket notation but
52:41 - what if we wanted to print each item on
52:42 - a separate line that is where we use the
52:45 - for loop let me show you so we're not
52:48 - going to print the entire list
52:50 - instead we're going to type 4
52:52 - now we declare a variable which is
52:53 - called a loop variable
52:55 - let's call it item
52:57 - then we type in
52:59 - numbers
53:00 - next we add a colon to start a block of
53:03 - code so this is what we call a for loop
53:06 - with this for loop we can iterate over
53:08 - all the items in this list
53:10 - in each iteration this item variable is
53:13 - going to hold one value so in the first
53:15 - iteration item is going to be equal to 1
53:18 - and the second iteration is going to be
53:19 - equal to 2 and so on so
53:22 - now if we print item
53:25 - and run our program
53:26 - we see each item on a new line
53:28 - so this is how we use a for loop now we
53:31 - could also achieve the same thing using
53:33 - a while loop but our code would be a
53:34 - little bit longer let me show you so
53:37 - we would have to start by declaring a
53:39 - loop variable outside of our while loop
53:42 - let's say i we set it to zero
53:44 - now we say while i is less than
53:47 - here we need to find out how many items
53:49 - we have in this list
53:51 - so we use the len function
53:53 - len of
53:54 - numbers as long as i is less than the
53:58 - length of the list
53:59 - print
54:00 - now we can use the square bracket
54:02 - notation to get the element at this
54:04 - index so
54:06 - numbers of
54:08 - i now we need to increment i by one so i
54:13 - equals i plus one
54:15 - let's run the program and see what we
54:16 - get
54:19 - so we get the numbers one to five these
54:21 - are coming out from our for loop and
54:23 - then we get the numbers one to five one
54:25 - more time these are coming out from our
54:27 - while loop now if you compare these two
54:29 - approaches you can definitely see that
54:31 - the implementation using the for loop is
54:33 - shorter and easier to understand we
54:35 - don't have to use the square bracket
54:37 - notation we don't have to call the len
54:39 - function we don't have to declare a
54:41 - variable a loop variable and then
54:43 - increment it explicitly
54:45 - so with the for loop in each iteration
54:48 - the item variable will automatically
54:50 - hold one value in this list
54:58 - in this tutorial we're going to talk
55:00 - about the range function in python we
55:02 - use the range function to generate a
55:04 - sequence of numbers let me show you so
55:07 - you type range
55:08 - this is a built-in function just like
55:10 - the print and input functions here we
55:12 - can pass a value like 5 and this will
55:15 - return a range object
55:17 - a range object is an object that can
55:19 - store a sequence of numbers let me show
55:21 - you so
55:23 - let's call that numbers
55:25 - so this is a range object
55:27 - in this object we're going to have the
55:28 - numbers 0 to 5 but excluding 5.
55:32 - now if we print
55:34 - numbers
55:37 - we're going to see this message range of
55:39 - zero to five not the actual numbers
55:41 - because this is the default
55:42 - representation of a range object to see
55:45 - the actual numbers we need to iterate
55:47 - over this range object using a for loop
55:49 - in the last video you learned how to
55:51 - iterate over a list using a for loop but
55:53 - we can also iterate over a range object
55:56 - using a for loop basically we can use
55:58 - the for loop with any object that
56:00 - represents a sequence of objects
56:02 - so instead of printing numbers
56:05 - we're going to use a for loop
56:07 - for number
56:08 - in numbers colon
56:11 - we're going to print
56:13 - number
56:15 - take a look
56:17 - now we see the numbers zero to four
56:20 - so
56:21 - range of five
56:22 - generates a sequence of numbers starting
56:24 - from zero up to the number we specify
56:27 - here
56:28 - now if we supply two values
56:30 - the first value is going to be
56:31 - considered the starting value
56:34 - and the second value is going to be
56:36 - considered the ending value and it's
56:37 - going to be excluded so range of 5 to 10
56:40 - is going to generate the numbers 5 to 9.
56:43 - take a look
56:45 - there you go
56:46 - now we can also supply a third value and
56:49 - that will be used as a step so let's say
56:52 - instead of having a sequence of numbers
56:53 - like five six seven eight nine we wanna
56:56 - jump two numbers at a time so 5 7 9 and
56:59 - so on so here we pass 2 as the step take
57:03 - a look
57:05 - so we get these odd numbers 5 7 and 9.
57:10 - so this is the range function in python
57:12 - like quite often you see the range
57:13 - function used as part of a for loop
57:16 - because we don't really need to store
57:17 - the result in a separate variable we can
57:20 - call the range function right here where
57:22 - we are using the numbers variable so we
57:24 - can type range of five and this will
57:27 - return a range object holding the
57:29 - numbers zero to four take a look
57:32 - there you go
57:33 - so we don't really need to store the
57:35 - result in a separate variable like
57:37 - numbers
57:39 - there you go
57:47 - in this tutorial we're going to talk
57:48 - about tuples in python tuples are kind
57:51 - of like lists we use them to store a
57:53 - sequence of objects but tuples are
57:55 - immutable which means we cannot change
57:57 - them once we create them let me show you
58:00 - so i'm going to start by defining a list
58:02 - of numbers 1 2 3.
58:04 - now we use square brackets to define a
58:06 - list
58:07 - and parenthesis to define a tuple so now
58:10 - this numbers variable is storing a tuple
58:13 - if we try
58:14 - to reassign let's say the first element
58:18 - we're going to get an error
58:20 - topple object does not support item
58:22 - assignment so this is what i meant by
58:24 - tuples are immutable they're
58:26 - unchangeable
58:28 - also
58:29 - if you type numbers dot
58:32 - you don't see any methods like append
58:34 - insert remove and so on we only have
58:37 - count and index
58:39 - count returns the number of occurrences
58:41 - of an element for example
58:43 - if we have
58:44 - let's say
58:45 - two threes in this tuple
58:47 - and call count of three this will return
58:50 - 2.
58:51 - the other method we have here is index
58:53 - and this returns the index of the first
58:56 - occurrence of the given element
58:58 - now
58:59 - these other methods you see here that
59:00 - start with an underscore they're called
59:03 - magic methods it's an advanced topic and
59:05 - i've covered it in detail in my complete
59:07 - python programming course if you're
59:09 - interested the link is down below this
59:11 - video
59:12 - so tuples are immutable we cannot change
59:14 - them once we create them
59:16 - now practically speaking most of the
59:18 - time you would be using lists but there
59:20 - are times that once you create a list of
59:21 - objects you want to make sure that
59:23 - somewhere in your program you or someone
59:25 - else is not going to accidentally modify
59:28 - that list if that's the case then you
59:30 - should use a tuple
59:33 - hey guys i just wanted to let you know
59:34 - that i have an online coding school at
59:36 - codewoodmarch.com where you can find
59:38 - plenty of courses on web and mobile
59:40 - development in fact i have a
59:41 - comprehensive python course that teaches
59:44 - you everything about python from the
59:45 - basics to more advanced concepts so
59:47 - after you watch this tutorial if you
59:49 - want to learn more you may want to look
59:50 - at my python course it comes with a 30
59:52 - day money back guarantee and a
59:54 - certificate of completion you can add to
59:55 - your resume in case you're interested
59:57 - the link is below this video
60:01 - hey