00:01 - so in the last section you'll learn that
00:03 - in the client-side JavaScript that we
00:05 - run inside of browsers when we declare a
00:08 - variable or a function that is added to
00:11 - the global scope for example when we
00:14 - define a function like say hello that
00:19 - function is added to the global scope
00:22 - and it's available via the window object
00:26 - now there is a problem with this
00:28 - behavior in a real world application we
00:31 - often split our javascript code into
00:34 - multiple files so it is possible that we
00:36 - have two files and in both these files
00:39 - we define this function say hello with
00:41 - the exact same name because this
00:44 - function is added to the global scope
00:46 - when we define this function in another
00:49 - file that new definition is going to
00:51 - overwrite the previous definition so
00:54 - this is the problem with the global
00:55 - scope so in order to build reliable and
00:59 - maintainable applications we should
01:01 - avoid defining variables and functions
01:03 - in the global scope instead we need
01:06 - modularity we need to create small
01:08 - building blocks or modules where we
01:11 - define our variables and functions so
01:14 - two variables or two functions with the
01:16 - same name don't overwrite another
01:18 - variable or function defined somewhere
01:20 - else
01:20 - they're encapsulated inside of that
01:23 - module now at the core of node we have
01:26 - this concept called module so every file
01:29 - in a node application is considered a
01:31 - module the variables and functions were
01:34 - defined in that file or that module are
01:36 - scoped to that file in object-oriented
01:39 - programming terms we say there are
01:41 - private they are not available outside
01:43 - that container outside that module if
01:45 - you want to use a variable or a function
01:47 - defined in a module outside that module
01:50 - you need to explicitly export it and
01:53 - make it public and we're going to look
01:55 - at that in the next lecture so what I
01:57 - want you to take away from this lecture
01:58 - is that every node application has at
02:01 - least one file or one module which we
02:04 - call the main module so in this case is
02:06 - after Jas is our main module now let me
02:10 - show you this module so I'm going to
02:12 - delete all this code here and do
02:15 - console that log of module
02:20 - now this module object here may appear
02:23 - to be global so you may think we can
02:25 - access it while the global object like
02:28 - global that console but actually this is
02:31 - not a global object it appears to be
02:33 - global but it's not global and you will
02:35 - find out why very soon so let's just
02:39 - lock this module object and see what we
02:41 - see in the console back in the terminal
02:44 - node app the jas so you can see we have
02:49 - an object module it's a JSON object with
02:52 - these key value pairs so we have ID
02:54 - every module has an ID or a unique
02:56 - identifier we have exports parent file
03:00 - name which is the complete pass to that
03:02 - file loaded which is a boolean that
03:05 - determines if this module is loaded or
03:07 - not we have children and pads now for
03:11 - now don't worry about these properties
03:12 - as we go through this section you will
03:15 - gradually become familiar with these
03:17 - properties so in node every file is a
03:21 - module and the variables and functions
03:23 - defined in that file are scoped to that
03:26 - module they are not available outside of
03:28 - that module in the next lecture you're
03:30 - going to learn how to create and load a
03:33 - module
03:35 - hi guys its mosh here thank you for
03:38 - watching my node tutorial I just wanted
03:40 - to let you know that this video you've
03:42 - been watching is part of my complete
03:44 - note course where you will learn
03:46 - everything about node from the basic to
03:48 - the advanced topics if you're serious
03:50 - about learning node I highly recommend
03:52 - you to enroll in my node course because
03:54 - this is much faster than jumping from
03:56 - one tutorial to another it saves you
03:58 - time plus you're going to get a lot of
04:00 - exercises that will prepare you for the
04:03 - real work and also at the end of the
04:05 - course you'll receive a certificate of
04:07 - completion that you can provide your
04:09 - current or future employer so if you
04:12 - want to enroll click on the link in the
04:14 - video description I hope to see you in
04:15 - the course