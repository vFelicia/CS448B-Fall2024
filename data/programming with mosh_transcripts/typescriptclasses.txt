00:01 - so in the last lecture we use an
00:04 - interface to define the shape of a point
00:06 - object but there is a problem with this
00:09 - implementation in object-oriented
00:11 - programming languages we have this
00:13 - concept called cohesion which basically
00:16 - means things that are related should be
00:19 - part of one unit they should go together
00:21 - this is what we call cohesion now back
00:24 - to this example on the top we have used
00:27 - an interface to define the shape of a
00:29 - point object and below that we have a
00:31 - standalone function and this is where we
00:34 - have violated the cohesion principle so
00:37 - the concept of drawing a point is highly
00:40 - related to the structure of a point it
00:43 - should not be a separate function now if
00:45 - you're going to build a utility library
00:47 - for working with points chances are
00:49 - you're going to create another function
00:51 - like get distance that calculates the
00:55 - distance between two points so point a
00:58 - of type point and point B of type point
01:02 - and this goes to is code block again we
01:06 - have violated the cohesion principle we
01:09 - have two functions hanging in the air
01:11 - separate from the point object since
01:15 - these concepts are highly related they
01:17 - should be part of one unit in
01:19 - object-oriented languages we call that
01:21 - unit a class so a class groups
01:25 - properties and functions that are highly
01:28 - related now in this implementation
01:31 - unfortunately we cannot move these two
01:33 - functions inside our interface because
01:37 - interfaces are purely for declarations
01:39 - they cannot include any implementation
01:42 - in other words we cannot have the
01:45 - algorithm for calculating the distance
01:47 - between two points or drawing a point
01:50 - inside this interface what we can do
01:53 - instead is to add a function here a
01:57 - function declaration so we're gonna have
02:00 - a draw function that takes no parameters
02:03 - and returns void which means it doesn't
02:08 - return anything now you might be asking
02:10 - why don't we have this point parameter
02:13 - here because if all these
02:15 - members X Y and draw are part of one
02:18 - unit we don't need to pass x and y as
02:21 - parameters to the draw function this
02:24 - function can directly access these
02:26 - properties x and y in the same unit so
02:29 - we don't need this parameter here now in
02:31 - interfaces as I said we cannot have
02:33 - implementation we can only have the
02:36 - signature of a function so with this
02:38 - interface you're telling typescript
02:39 - compiler that our point objects should
02:42 - have two properties x and y and a
02:44 - function called draw the implementation
02:47 - of that is somewhere else so what should
02:49 - we do now
02:50 - to apply the cohesion principle here we
02:53 - need to use a class instead of an
02:55 - interface so on the top I'm going to
02:57 - change the type to class and here I'm
03:00 - gonna replace its comma with semicolon
03:03 - so our point class has three members the
03:07 - first two members are what we call
03:09 - fields that we use for storing data and
03:11 - the third member is a function now here
03:15 - in this class we can have the actual
03:16 - implementation of this draw function so
03:20 - we can simply define it like this draw
03:22 - and then add all that logic for drawing
03:27 - a point now similarly we can have
03:29 - another function get distance that
03:33 - returns the distance between this point
03:34 - and another point like this again all
03:40 - that logic will end up here now with
03:43 - this restructuring you can see that
03:45 - everything about a point is in one unit
03:47 - in one class so we have the coordinate
03:50 - which includes x and y and two functions
03:53 - draw and get distance now in
03:56 - object-oriented programming terms we
03:58 - refer to these members as fields and to
04:01 - these functions as methods so when a
04:03 - function is part of a class we call it a
04:06 - method alright now with this new
04:08 - implementation we don't want these two
04:10 - functions hanging in the air so delete
04:14 - this is a much better structure also
04:17 - you're not gonna call draw a point like
04:19 - this anymore so here's our point class
04:23 - in the next lecture I'm gonna show you
04:25 - how to create an object of this type and
04:27 - call the draw method
04:31 - hi thank you for watching my angular
04:34 - tutorial if you enjoyed this video
04:35 - please like it and share it with others
04:38 - also you can subscribe to my channel for
04:40 - free new videos every week this video is
04:43 - part of my complete angular course with
04:46 - almost 30 hours of high quality content
04:49 - where you learn everything about angular
04:51 - from the basic to the advanced topics
04:53 - all in one course so you don't have to
04:55 - jump from one tutorial to another in
04:58 - case you're interested you can get this
05:00 - course with a big discount using the
05:01 - link in the video description and if not
05:04 - that's perfectly fine continue watching
05:06 - as the next section is coming up