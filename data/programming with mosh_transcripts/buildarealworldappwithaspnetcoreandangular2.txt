00:00 - [Music]
00:04 - hey guys Marcia I'm excited to let you
00:07 - know that next week I'm going to publish
00:09 - a new course on udemy called
00:11 - built available an application with Eska
00:13 - Desna score and angular 2 you don't need
00:16 - any prior knowledge of a statment core
00:18 - but you need to be familiar with eight
00:19 - less than 92 580 framework 6 and angular
00:23 - 2 this course is ideal for developers
00:26 - familiar with HTML and MSC 5 who want to
00:29 - quickly learn about a structured core in
00:31 - the context of a real world application
00:33 - now depending on your level of
00:35 - experience there are two ways to watch
00:37 - this course you can watch it as an
00:39 - educational program just like my other
00:41 - courses or if you have a bit more
00:43 - experience or are willing to challenge
00:45 - yourself you can be part of my 60 day
00:47 - challenge program it's like you and I
00:50 - are part of a team they're working
00:51 - together on a real-world project I'm
00:53 - your team leader and every week I give
00:56 - you a challenge or a task to complete
00:58 - you have one week to complete this task
01:00 - and then the following week I will add a
01:03 - new section for my course and there you
01:05 - will see how I would complete that task
01:07 - in a step-by-step fashion now the price
01:10 - for this course is initially going to be
01:11 - $50 because initially I'm going to
01:14 - publish on littles first section and
01:16 - then every reach I will add a new
01:18 - section and the price is going to
01:19 - increase to about 150 to $200 however if
01:23 - you join my mailing list well you can
01:25 - get the course for only $15 so click on
01:28 - the link in the video description and
01:30 - you will immediately get an email with
01:32 - coupons to my other courses and next
01:34 - week when I publish this course I will
01:36 - send you another email to get the course
01:38 - for $15 and by the way if you don't get
01:41 - the email make sure to check your spam
01:43 - folder or register with another email
01:46 - and one last thing a lot of you ask me
01:49 - why not put on fight because purifies
01:51 - own content exclusively so my ademma
01:55 - courses I cannot put them on full site
01:57 - therefore use earning and more thorough
01:58 - site courses are for full effect so this
02:01 - course build variable application with a
02:03 - splendid core and angular 2 is going to
02:05 - be for udemy and it's going to be
02:06 - published next week next I'm going to
02:09 - show you the first hour of this course
02:11 - you can see exactly what I'm going to
02:12 - teach
02:13 - in that course what are the requirements
02:14 - and what I discuss is for you or not and
02:17 - remember if you want to get the course
02:18 - for $15.00 click on the link in the
02:21 - video description to join my mailing
02:22 - list all the best and have a great day
02:26 - [Music]
02:29 - hi my name is Mohammed Ani and I'm going
02:33 - to be your instructor over the next few
02:34 - hours in this course you're going to
02:37 - learn how to build a real-world
02:38 - application with angular 2 on the client
02:41 - and a 2,000 core on the server by the
02:44 - end of watching this course you will
02:45 - have all the necessary skills to
02:48 - integrate these two frameworks and build
02:50 - real-world applications now in this
02:53 - course I'm going to take a very
02:54 - different approach from my other courses
02:56 - this course is part of a 60 day
02:59 - challenge program so we're going to
03:01 - simulate a real-world coding scenario
03:03 - together it's like you and I are part of
03:05 - a team and I'm your team leader and for
03:08 - a period of two months every week I'm
03:10 - going to give you a task or a challenge
03:12 - which involves building a small piece of
03:15 - functionality and then I will also
03:17 - complete the same task myself and
03:19 - publish by coding videos in the
03:21 - following week so you can compare your
03:24 - solution with mine now if you're an
03:26 - experienced developer you may start
03:28 - coding straightaway complete each task
03:30 - on your own and then review my solution
03:33 - or if you are more of a beginner
03:35 - developer you may prefer to watch me
03:37 - complete each task first and then you
03:40 - can code and repeat the tasks on your
03:41 - own it's entirely up to you
03:43 - well this course is currently in
03:45 - pre-release mode and that's the
03:47 - beginning of our next 60 day challenge
03:49 - so right now only the first section is
03:51 - published and I'll be publishing new
03:53 - sections on a weekly basis if you don't
03:56 - like the weekly gaps between sections
03:58 - and prefer to watch the course as a
04:00 - whole that's perfectly fine but you have
04:02 - to wait for almost two months until I
04:05 - complete all sections next I'm going to
04:08 - talk about the scope of this course
04:10 - you
04:10 - [Music]
04:14 - before we get started let me clarify a
04:17 - few things about what this course is and
04:19 - what it isn't so you have the right
04:21 - expectations first is that our focus
04:24 - will be on building a real-world
04:26 - application and not to explore all
04:28 - features of angular or a student core
04:31 - because each application depending on
04:34 - its requirement often needs a subset of
04:36 - features in any given frameworks so it's
04:39 - impossible for me to talk about all the
04:41 - features of let's say a subnet core or
04:44 - anything where core and how they are
04:46 - different from the previous version
04:47 - that's not the scope of this course and
04:49 - requires a separate course in this
04:52 - course I'm assuming you're familiar with
04:54 - angular 2 and the previous versions of a
04:57 - statement and entity frameworks that is
04:59 - 800 mb c 5 and any different work 6 and
05:02 - want to quickly get up to speed with
05:05 - dotnet core in a hands-on and pragmatic
05:08 - way so our focus here is on building a
05:11 - real-world application using the latest
05:13 - technologies now this app even though
05:16 - it's a real world application it's not a
05:18 - complete and sophisticated app with a
05:20 - fancy user interface like those popular
05:22 - web apps out there these apps especially
05:25 - those with complex features and fancy
05:28 - user interfaces are built by a team of
05:30 - developers working together for several
05:33 - months or longer also in such teams
05:36 - there are other practices like
05:38 - continuous integration continuous
05:39 - deployment automatic testing and so on
05:42 - so it's not something that I as one
05:44 - person can demonstrate within seven to
05:46 - ten hours and even if I extend the scope
05:49 - of this course to 50 or 100 hours it's
05:52 - not going to be useful because both you
05:54 - and I will lose momentum and get lost in
05:57 - detail along the way so from a teaching
06:00 - point of view this is not going to be
06:02 - effective instead we're going to build
06:04 - an application with a few basic
06:06 - functions mostly centered around crud
06:08 - operations so you're going to learn how
06:11 - to build forms with angular that talks
06:13 - to back-end API is built with a 2008
06:15 - core and to make the application more
06:18 - interesting I've included a few complex
06:20 - use cases based on the students feedback
06:22 - like cascading drop-down lists and
06:25 - dynamically render checkboxes and so on
06:28 - also we're going to look at filtering
06:29 - sorting and paging data we're going to
06:32 - look at handling and login errors
06:34 - displaying toast notifications but note
06:37 - that this is not real-time notification
06:40 - coming from the server just a toast
06:42 - notification we are also going to look
06:45 - at ossification and authorization with
06:47 - multiple roles having different
06:49 - permissions we're going to look at
06:51 - preventing CSRF security attacks we're
06:53 - going to look at uploading photos with
06:55 - progress bars displaying charts dialog
06:57 - boxes and so on depending on your level
07:00 - of experience you may find this the
07:02 - right level for you or you may think
07:04 - this is too easy
07:05 - so I'm explaining this to make sure
07:07 - you're at the right level for this
07:09 - course if you are looking for an
07:11 - application with a complex domain and
07:12 - want to learn about domain driven design
07:14 - or design patterns continuous
07:17 - integration automatic testing this
07:19 - course is not what you're looking for
07:21 - having said that you're welcome to
07:23 - extend this application and add new
07:25 - complex features but that's not within
07:27 - the scope of this course also this
07:29 - application is going to have a very
07:31 - simple user interface so our focus is
07:33 - not on something that is visually
07:35 - outstanding that's the job of a UI
07:37 - designer not a programmer if you're good
07:40 - at designing user interfaces it's a
07:42 - bonus it helps you stand out from the
07:44 - rest of the crowd but it's not something
07:46 - that is expected from you and one last
07:48 - thing about the 60 day challenge program
07:51 - as the title of this program says this
07:54 - is all about challenging you and helping
07:57 - you take your coding skills to the next
07:59 - level so as you're building these
08:01 - features you may get stuck you may get
08:03 - compile time or runtime errors or
08:05 - certain things may not work on your
08:08 - machine you're welcome to use the
08:09 - discussion board to post your questions
08:11 - but you cannot expect me or others to
08:14 - help you solve these issues that's your
08:16 - job as a developer because in the real
08:18 - world when you are part of a team every
08:21 - single day you will encounter tens of
08:24 - issues like that there you don't have me
08:26 - or other students in the course to help
08:28 - you so you need to do your own research
08:30 - and find a solution and the first thing
08:33 - you need to do is to jump on google and
08:35 - type the error message or the problem I
08:37 - can guarantee that in more than 90% of
08:40 - the cases you can
08:41 - find your answer on the first page of
08:43 - Google and guess what that's exactly
08:45 - what I do when I encounter issues so if
08:48 - you gonna post your question and expect
08:49 - me to help you chances are I may not
08:51 - know the reason why you're having a
08:53 - problem on your machine because I don't
08:54 - know everything yet in this course I'm
08:56 - your instructor but I'll say this I'm a
08:58 - student myself so when you're asking is
09:01 - something that I don't know I have to
09:02 - jump on Google and do research on your
09:04 - behalf and this will prevent you from
09:07 - growing if you want to take your coding
09:09 - skills to the next level if you want to
09:11 - get a better job with better pay you
09:13 - have to earn it
09:14 - and yet it's not easy it takes time
09:17 - sometimes you have to stay up till 3:00
09:19 - a.m. in the morning
09:20 - nobody said is easy but if you're
09:22 - passionate if you're determined you can
09:24 - earn it we can get senior developer with
09:26 - a good job with a good page and that's
09:28 - the whole purpose of this 60 day
09:30 - challenge program to push you out of
09:32 - your comfort zone okay now that you know
09:35 - exactly what this course is and what it
09:37 - isn't let's take a look at the
09:39 - prerequisite in more detail
09:42 - [Music]
09:46 - in order to take this course you should
09:48 - have at least three months experience
09:50 - with angular 2 asp.net MVC 5 and energy
09:53 - framework 6 but you don't need any prior
09:56 - knowledge of a solid core or any
09:58 - framework or I'm going to introduce you
10:00 - to these frameworks in a programmatic
10:02 - way along the way
10:03 - so more specifically when it comes to
10:06 - angular 2 you should know your
10:08 - components services modules dependency
10:12 - injection property and even binding
10:14 - forms and routing when it comes to 18.9
10:18 - MVC you should know your controllers
10:20 - actions model binding HTTP verbs like
10:24 - get post put and delete and finally when
10:28 - it comes to any framework you should
10:29 - know your code first migration link and
10:32 - dbcontext so if there are areas that
10:35 - you're not quite familiar with I highly
10:37 - recommend you to watch my related
10:39 - courses on udemy that includes angular 2
10:41 - with typescript for beginners to
10:44 - complete a southern mc5 course and any
10:47 - framework 6 in depth
10:48 - all right enough introduction now let's
10:51 - take a look at the requirements for the
10:53 - application we're going to build
10:56 - [Music]
10:59 - so we're going to build a web
11:01 - application for an imaginary vehicle
11:04 - dealer called
11:05 - Riga let's say you want to sell your car
11:07 - you call Vigo talk to someone on the
11:10 - phone and ask them to register your car
11:12 - in their database other people who are
11:15 - buyers can browse the vehicles in their
11:17 - database and if they're interested in a
11:19 - vehicle they will call viga and talk to
11:22 - someone on the phone and the rest of the
11:24 - process happens offline at that stage so
11:27 - this is a big picture now as part of
11:29 - recording a vehicle for sale we need to
11:32 - know it's make its model its features so
11:35 - basically there are a sort of standard
11:37 - features like ABS brakes airbags bottle
11:40 - holders and so on so here we have a many
11:43 - to many relationship between vehicles
11:45 - and features a vehicle can have many
11:47 - features and a feature may be available
11:50 - in many different vehicles we also need
11:53 - to record whether a vehicle is
11:54 - registered or not the owner's name and
11:57 - contact information and finally we
11:59 - should also be able to upload one or
12:02 - more photos for each vehicle so the
12:05 - simplest solution to this problem is to
12:07 - have a page where we see all the
12:09 - vehicles in the database on this page we
12:11 - should be able to filter and sort
12:13 - vehicles if there are more than 10
12:15 - vehicles we should display them in pages
12:18 - and from this page we should be able to
12:20 - click a vehicle to see its details we
12:24 - should also have a page to add a new
12:26 - vehicle to the database also in terms of
12:29 - authorization we need two different
12:31 - roles here one is the moderator role and
12:34 - this includes viga personnel who talk to
12:37 - sellers and buyers on the phone they can
12:40 - create update and delete vehicles in the
12:42 - database we also need an admin role and
12:45 - anyone in this role has additional
12:48 - privileges for this imaginary app we're
12:51 - going to display a report of vehicle
12:53 - sales right there makes in a pie charts
12:55 - like this so anyone with admin access
12:58 - can view this report and finally if
13:01 - someone hasn't logged name they should
13:02 - only be able to browse the vehicles so
13:05 - we're going to hide the buttons for
13:06 - creating updating and deleting vehicles
13:09 - here okay now that you know what we're
13:11 - going to build let's start
13:13 - setting off our development environment
13:16 - [Music]
13:20 - all right to set up your development
13:22 - environment first you need to head over
13:24 - to Microsoft comm slash net slash core
13:27 - on this page you can see the
13:29 - installation instructions for your
13:31 - operating system so if you're a Windows
13:33 - user the simplest way is to install
13:35 - Visual Studio 2017 and this will bring
13:39 - all the components you need so you don't
13:41 - need to do anything else but in this
13:43 - course I'm not going to use Visual
13:45 - Studio I'm going to use Visual Studio
13:47 - code which is a very lightweight and
13:49 - fast editor it's not a full IDE like
13:52 - Visual Studio but it's a very powerful
13:54 - cross-platform
13:55 - code editor so whether you're using
13:57 - Windows Linux or Mac you can use Visual
14:00 - Studio code which we call vs code now
14:03 - what I want you to do is in this course
14:05 - for the next few hours
14:06 - forget about Visual Studio and let's
14:09 - build this application using vs code I
14:11 - know that you might be used to using
14:12 - Visual Studio but trust me vs code is
14:15 - much better in fact
14:16 - I personally have not used Visual Studio
14:19 - for over a year so if you're on Windows
14:23 - on the stage go to command line
14:26 - you need to download and install dotnet
14:28 - core SDK and then to get Visual Studio
14:32 - code simply head over to code that
14:34 - Visual Studio
14:35 - now back to this page if you're in Linux
14:38 - or a Mac user once again you can go to
14:40 - this page and on this page you can see
14:44 - the instructions for installing dotnet
14:46 - core on your version of Linux the
14:48 - instructions are very easy you simply
14:51 - copy paste if you commencing terminal
14:53 - and download net SDK and once again you
14:56 - head over to code Visual Studio comm to
14:59 - get vs code once you install vs code you
15:02 - need to add a few extensions so you can
15:04 - write C sharp code in it so first we
15:07 - need to go to the command palette on Mac
15:10 - the shortcut is shift command + T and
15:13 - windows is shift control P so here's the
15:17 - command palette type install X short for
15:21 - extension and now if you scroll down you
15:25 - can see this command here install
15:27 - extensions here you can see the
15:30 - extensions that I have installed so I've
15:32 - got this angular v2 typescript snippets
15:35 - and with this we can easily create an
15:38 - angular component or a service by using
15:40 - a code snippet and I'm going to show you
15:42 - how this works later in the course so to
15:45 - install this extension or any other
15:47 - extensions simply type its name here
15:49 - like angular v2 and now you can see all
15:53 - the extensions available in vs code
15:56 - Gallery in front of each extension you
15:58 - see this install button so simply
16:00 - install it and then you need to reload
16:02 - vs code for the extension to take effect
16:05 - now let's go back and see what other
16:07 - expansions I have installed here
16:10 - I've got another extension asp.net
16:12 - helper which makes it easier to develop
16:15 - a dotnet MVC application i've got auto
16:19 - import which is extremely powerful when
16:21 - you're writing typescript code you have
16:23 - to constantly go on top of the file and
16:25 - add import statements with this
16:27 - extension you can automatically import
16:30 - the classes you have used in the current
16:32 - module again I'm going to show you how
16:33 - this works later in the course I also
16:36 - have beautifying which is for formatting
16:39 - JavaScript and HTML code it's not really
16:41 - essential but it's a nice thing to have
16:44 - now C sharp and C sharp extensions are
16:47 - the two essential plugins that you need
16:49 - to install it will give you a syntax
16:51 - highlighting code completion and so on I
16:53 - also have darker here but this is not
16:56 - necessary it just gives you syntax
16:58 - highlighting when you're working with
16:59 - darker files here is another extension
17:03 - which is optional MS sequel so with this
17:06 - you can connect to a sequel server
17:07 - database look at your tables write
17:10 - queries and so on and finally here's
17:12 - another extension restclient again this
17:14 - is optional with this you can call
17:17 - restful endpoints now these are the
17:19 - extensions that I have been using but
17:22 - there are hundreds or thousands of
17:24 - extensions available in vs code gallery
17:26 - so feel free to go and explore them on
17:29 - your own
17:29 - and now finally we need to install a
17:32 - couple of node package x one is yeoman
17:35 - which is a web scaffolding tool for
17:37 - modern web applications so in Visual
17:40 - Studio when you create a new project you
17:42 - automatically get a bunch of folders and
17:44 - files that come from a template the s
17:47 - code doesn't have this feature so we
17:49 - need to use yeoman to generate a
17:51 - template for our new project so NPM
17:55 - install - G yo now yo is just an engine
18:00 - we can install templates on top of this
18:02 - engine so the template we're going to
18:04 - use from a 2008 core and angular 2
18:07 - application is called generator - a
18:11 - spinet core - spa
18:14 - so let's quickly recap if you want to
18:17 - use Visual Studio you need to install
18:19 - Visual Studio 2017 otherwise if you
18:23 - don't want to use Visual Studio which is
18:24 - the approach I'm going to take first you
18:26 - need to install document core SDK then
18:29 - you need to install vs code as your
18:31 - editor you add extensions that I told
18:33 - you about
18:34 - and finally you install you'll and
18:36 - generator - a split core - spa now on
18:41 - top of all these we also need sequel
18:43 - server when you install Visual Studio
18:45 - 2017 it automatically comes with a
18:47 - lightweight version of sequel server
18:49 - which is called sequel Express if you're
18:52 - using a Mac or Linux you don't have
18:54 - Visual Studio 2017 so you need to
18:57 - install sequel server using a darker
18:59 - image and that's what I'm going to show
19:01 - you in the next lecture
19:05 - to install sequel server on Mac iOS or
19:08 - Linux we need to use a tool called
19:09 - darker which basically automates
19:12 - and simplifies the deployment of
19:14 - applications and it solves the issue
19:17 - that your application works on your
19:19 - machine but when you deploy to a
19:21 - different machine it doesn't work we dr.
19:24 - we package our application along with
19:26 - all its dependencies and configuration
19:28 - settings into an image and then we can
19:31 - deploy this image to a different machine
19:33 - with only one command this command will
19:36 - load our application with all these
19:38 - dependencies into what we call a
19:40 - container now sequel server for Linux
19:43 - comes at a darker image which means the
19:46 - software along with all these
19:48 - dependencies are packaged inside this
19:50 - image and we're going to use this image
19:52 - to install it on our machine so if you
19:55 - have an installed docker
19:56 - simply head over to docker calm on
19:59 - docker website go to this page get
20:03 - darker and here you can find downloads
20:06 - for Windows Mac OS and different
20:08 - distributions of Linux
20:11 - now after you install darker the first
20:13 - thing you need to do is to configure the
20:15 - memory allocation so here's the darker
20:18 - icon click you can see docker is running
20:21 - sometimes you may run into issues you
20:24 - can simply restart it here now let's go
20:26 - to preferences on this page in the
20:29 - Advanced tab look here I've set the
20:32 - memory to 4 gigabytes why default it's 2
20:35 - gigabytes so you need to increase it to
20:37 - 4 gigabytes in order to run the sequel
20:39 - server image once you do that it's going
20:42 - to take a few seconds until docker is
20:44 - restarted now in terminal let's make
20:48 - sure docker is running so simply type
20:50 - docker beautiful now we need to pull the
20:54 - sequel server image from docker registry
20:56 - so sudo darker pool Microsoft / ms SQL -
21:06 - server
21:07 - - linux with this we download the sequel
21:11 - server image into our machine alright
21:14 - now we want to run this image inside a
21:16 - container so sudo docker run we need to
21:21 - set an environment variable - II except
21:26 - underline EULA which stands for end-user
21:30 - License Agreement we set this to why
21:34 - and note that I have put this
21:35 - environment variable inside single
21:37 - quotes next we need to set another
21:39 - environment variable so - e this one is
21:43 - s a password and here we need to use a
21:47 - complex password if you use a weak
21:50 - password you're going to get a runtime
21:51 - exception I'm going to talk about that
21:53 - later in this video so to make sure that
21:56 - you will have a smooth experience as
21:58 - you're going through this course use the
21:59 - password that I'm going to use in this
22:01 - video my with capital M complex with
22:05 - capital C password with capital P
22:09 - exclamation mark two three four
22:13 - and close the single quote thanks we
22:16 - need to map a port in our container
22:18 - support in our host machine so - P for
22:22 - the port
22:23 - 14:33 - 1433
22:26 - so we're mapping the port 1433 in our
22:28 - container to this port on our host
22:31 - machine and we're going to use this port
22:33 - when connecting to sequel server from
22:35 - our web application now if you're using
22:37 - Linux you can also map a volume in the
22:41 - container to a volume on your host
22:43 - machine and this will allow you to
22:45 - perceive your database between container
22:47 - executions so if you restart the
22:50 - container if you restart your machine
22:51 - your database is going to stay there
22:53 - unfortunately at the time of recording
22:55 - this video this feature is not supported
22:57 - on Mac however if you're on Linux you
23:00 - add - v4 mapping the volume first you
23:04 - add the volume on the host machine like
23:06 - user my database that's the folder
23:09 - that's the pass code on to map and then
23:13 - you add slash bar slash up / ms SQL once
23:19 - again this doesn't work on Macs I'm
23:21 - going to remove it
23:22 - next we add - see - learn this as a
23:26 - background service and finally we need
23:28 - to add the name of our image that's the
23:31 - image we downloaded earlier so Microsoft
23:33 - / ms SQL - server
23:38 - - Linux
23:42 - beautiful sequel server is running now
23:44 - here unlike Windows we don't have sequel
23:47 - server management studio so if you want
23:49 - to connect your database there's two
23:50 - ways if you're on Linux head over to
23:54 - this link on the screen
23:55 - Wheatly slash SQL server tools this is a
23:59 - page on Microsoft website and here you
24:02 - can see the instructions for installing
24:04 - sequel server command-line tools for
24:06 - various distributions of Linux
24:09 - but if you're on a Mac you can use
24:11 - sequel Pro which is similar to sequel
24:14 - server management studio so simply head
24:16 - over to Mac sequel client comm and by
24:19 - the way this is a commercial application
24:21 - there is a trial version which is I
24:23 - think about 30 days and then you need to
24:25 - get a license but that's reasonably
24:27 - cheap it's only about 100 Australian
24:29 - dollars which is about perhaps 70 US
24:31 - dollars
24:33 - once you run sequel Pro you can go to
24:36 - connect on this window go to Neil here
24:40 - we add the server name which is
24:41 - localhost for authentication we're going
24:44 - to use sequel server authentication with
24:47 - SA at the username and password is going
24:50 - to be my complex password exclamation
24:54 - mark two three four
24:55 - save beautiful if you
24:59 - that our servers online so
25:02 - to the server now currently we don't
25:04 - have any databases here but later in the
25:07 - course when we create our database we
25:09 - can come back here look at our table
25:10 - look at our data run queries and so on
25:13 - now what if something goes wrong while
25:15 - you're running the sequel server image
25:17 - let me show you how to troubleshoot this
25:19 - problem so I have open another terminal
25:22 - window I want to show you the docker
25:24 - containers that are currently running so
25:27 - docker PS you can see I have one
25:31 - container this is the ID of my container
25:33 - this is the image that this container is
25:36 - based on which is Microsoft sequel
25:38 - server Linux now I'm going to stop this
25:40 - container so it's docker
25:43 - stop and then I need to add the
25:45 - container ID we can only use the first
25:48 - three or four letters so e8 CF now one
25:53 - of the issues that you may run into is
25:55 - that you run the sequel server image but
25:57 - it automatically terminates so when you
26:00 - run docker PS you don't see anything and
26:03 - then you can run docker PS 8 to see all
26:06 - the previous containers and here you can
26:09 - see I had this container that terminated
26:11 - 29 seconds ago so that's one of the
26:14 - issues you may run into so when you use
26:16 - the sequel pro or sequel server command
26:19 - line tools the server is not running
26:21 - then you come to the terminal
26:23 - you're on docker PS and the container is
26:26 - not there what happens so let's simulate
26:28 - a scenario where you run into an issue
26:31 - so I'm going to run the docker again but
26:33 - this time I'm going to use a weak
26:35 - password so sudo docker run - e-except
26:40 - underline EULA set it's why another
26:44 - environment variable is a password I'm
26:46 - going to set it to 1 2 3 4 map support
26:49 - run it as a daemon
26:51 - and here is the image base server Linux
26:56 - in here we just got a container ID so
26:59 - dr. PS and the container is not there it
27:03 - terminated automatically so we need to
27:06 - find the log for this container and then
27:09 - copy it somewhere in our host machine so
27:13 - let me go to the desktop here create a
27:16 - folder log now I need the ID for the
27:21 - last container so once again darker PS -
27:25 - 8 which is short for all ok so here is
27:28 - the last container ID be 35 F so now dr.
27:34 - C P short for copy be 35 s :
27:40 - and our log is inside this path in the
27:43 - container slash bar slash opt / MS
27:47 - sequel slash log slash error log as the
27:51 - name of the file now we want to copy
27:53 - this to the current folder
27:58 - now you can see here in this folder we
27:59 - have this error log file we can open
28:02 - this with vs code or any other editors
28:04 - so code period and have our log so if
28:09 - you scroll to the bottom of this log
28:12 - you can see this error here passport
28:14 - validation failed the password does not
28:17 - need sequel server password policy
28:19 - requirements and it's the reason we
28:22 - couldn't start this container alright
28:24 - our environment is set up next we're
28:26 - going to create our a that's net core
28:28 - project
28:32 - okay now let's create a new project so
28:36 - I'm going to create a new folder here we
28:38 - go go inside this folder and then use
28:42 - the oh man
28:43 - to generate a project so yo and then we
28:47 - add the name of our template which is a
28:49 - phonetic or - spa
28:51 - so all yeoman templates they're NPM
28:54 - package start with generator - but the
28:59 - actual template name doesn't have
29:01 - generators - all right so this is yeoman
29:04 - and the version of my ethernet cord
29:07 - template is zero point eight point seven
29:09 - the first question here is the type of
29:12 - framework you want to use on the client
29:14 - side we've got angular aralia knockout
29:17 - react react with redux and blue so I'm
29:21 - going to use angular the next question
29:24 - is about the type of project we want to
29:26 - use so previously before the final
29:28 - release of Visual Studio 2017 Microsoft
29:31 - introduced a new project type which is a
29:34 - JSON file called Project JSON they were
29:37 - working on this as a replacement for CS
29:40 - proj files because the approach was very
29:42 - complicated very heavy
29:44 - whereas this project that JSON is very
29:47 - clean very lightweight and consistent
29:49 - with other frameworks however in the
29:52 - final release of Visual Studio 2017
29:54 - Microsoft decided to drop project by
29:56 - JSON and go back to those CS project
29:59 - files so this project that JSON is only
30:02 - here for negative reasons and all the
30:04 - future projects will be based on CS proj
30:07 - so let's select this one here
30:12 - is about unit tests do you want to
30:14 - include them not at this stage now the
30:17 - project name which is the same name as
30:19 - the folder ok yo man created a bunch of
30:22 - files and folders here and now it's
30:24 - going to NPM we download and install all
30:27 - the node modules here ok our project is
30:30 - ready now let's run it there are two
30:33 - ways to run this project one way is here
30:36 - in the terminal so from the project
30:38 - folder we execute the met run so just to
30:43 - build our application and then launch a
30:45 - web server at this address localhost
30:48 - 45000 so when we navigate to this
30:52 - address this is what we get it's a very
30:54 - basic web application using angular 2 on
30:57 - the client and a subnet core on the
30:59 - server in the nav more we have three
31:02 - pages here home counter and fetch data
31:06 - this page shows an example of an API
31:09 - built with a standard core and an
31:12 - angular component that consumes that API
31:14 - so all this data you see in this table
31:17 - are coming from the server now we're not
31:19 - going to work with these pages we're
31:20 - going to delete them we're going to
31:21 - build an application from scratch now
31:25 - there is a second way to run our
31:26 - application so here in the terminal I
31:29 - want to stop this process so we press
31:31 - ctrl + C
31:34 - now I'm going to open this envious code
31:36 - so code period and this will open our
31:40 - visual studio code pointing at the
31:42 - current folder now chances are this may
31:45 - not work on your machine let me show you
31:47 - how to fix this problem
31:48 - so just open up vyas code manually go to
31:52 - the command palette so shift command and
31:55 - P on Mac or shift ctrl P on Windows and
31:57 - search for command the first item is
32:01 - installed code command in pass so when
32:06 - you execute this then you need to
32:07 - restart your terminal window and then
32:09 - the path will be affected so you can go
32:12 - to any folder and type code period now
32:15 - the second way to run our application is
32:17 - from inside vs code so if you don't want
32:20 - to switch back and forth between the
32:21 - terminal you can do it here so press
32:24 - control + backtick which is the key
32:27 - before number one on your keyboard so
32:30 - here inside vs code we have our terminal
32:33 - and once again we can run stuff net
32:36 - run here next we're going to look at the
32:38 - files and folders in this project
32:43 - terminal window is still open and can
32:46 - hide it by pressing ctrl + backtick
32:48 - again okay now we can open up the files
32:51 - and folders panel by pressing command +
32:54 - b on mac or control-d on windows so
32:58 - let's quickly explore what we have in
33:00 - this project this client app folder is
33:02 - where we have the client-side code the
33:05 - angular app so we have this app folder
33:09 - we have our app module we have our
33:11 - components exactly like other angular
33:14 - applications we also have controllers
33:18 - and views which belong to a standard
33:20 - core exactly like 8 month on nbc5 we
33:24 - have a new folder dub-dub-dub root and
33:26 - this is where we put the public assets
33:30 - of our application for the client side
33:32 - so here we have the icon for our
33:34 - application we also have this disk or
33:37 - distributable folder and inside this
33:40 - folder we have a couple of JavaScript
33:42 - files one is main - clients and this is
33:45 - the compilation of our angular
33:46 - application into JavaScript we also have
33:50 - rendered ojs which is the compilation of
33:53 - all the third-party libraries here and
33:55 - similarly we have rendered the CSS which
33:57 - is the compilation of all third-party
33:59 - style sheets in this project so in your
34:03 - applications you need to put the public
34:05 - assets inside this dub-dub-dub root
34:07 - folder that includes any images font
34:10 - icons and so on now this is different
34:13 - from the previous version of a stunner
34:15 - so in 811 nbc5 the project route was
34:19 - considered the route of the web
34:20 - application and then if you wanted to
34:23 - exclude some folders we had to blacklist
34:25 - them now in a plasma core Microsoft took
34:29 - a different approach so the project
34:31 - route is blacklisted and this depth of
34:34 - the root folder is white listed with the
34:37 - structure the chances of something
34:39 - private being accidentally exposed to
34:41 - the outside
34:42 - is reduced okay let's see what else we
34:45 - have here have this app settings JSON so
34:49 - in a plasmid core this is where we store
34:51 - our application settings
34:52 - it's a previous version we use with the
34:55 - country for that and also here we have a
34:58 - hierarchy so you can see we have
35:01 - multiple levels here we have logging
35:02 - under that we have log level and under
35:05 - that we have these three key value pairs
35:07 - in web config we didn't have this
35:10 - hierarchy so we had a bunch of key value
35:13 - pairs under app settings and if you
35:15 - wanted to create a hierarchy it was a
35:17 - little bit complicated but it is loaded
35:19 - core this is inherently supported and
35:21 - it's really easy to access
35:23 - turning as I'll show you later in the
35:25 - course now we have a couple of new files
35:27 - here program and startup and this is
35:31 - where our application starts there's
35:33 - more detail involved so I'm going to
35:34 - talk about that in the next lecture so
35:36 - let's move on here we have our CS proj
35:40 - file and this is a project file that
35:41 - Visual Studio recognizes so if you don't
35:44 - want to use vs code you can open this
35:46 - project in Visual Studio 2017 next is
35:49 - our web config and you can see it's
35:52 - really simplified there is nothing
35:54 - happening here the only have system that
35:56 - web server which is for configuration of
35:59 - iis and nothing else and finally we have
36:03 - a couple of web pack configuration files
36:06 - so web pack if you have worked with
36:08 - angular CLI you should be familiar with
36:10 - that
36:10 - it's a bundler for client-side code so
36:13 - it can compile and minify all our
36:16 - JavaScript and stylesheet files now in
36:19 - this code we are basically telling web
36:20 - pack where our source files are how they
36:23 - should be processed and where they
36:25 - should be stored for example here we
36:28 - have a property called public pass which
36:31 - is set towards disk folder so with this
36:33 - configuration when web pack bundles our
36:36 - client-side code it will store it inside
36:38 - this folder as I showed you earlier
36:40 - which is under dub-dub-dub root now for
36:44 - the most part you don't need to modify
36:46 - this web pack configuration file but
36:48 - sometimes in some projects you may need
36:50 - to modify this configuration that's
36:53 - beyond the scope of this course you need
36:55 - to look at web pack documentation and
36:57 - finally we have one more web pack file
37:00 - which is web pack that config the vendor
37:03 - the j/s so in this file we have the
37:06 - configuration for compiling all the
37:08 - third-party libraries so let's have a
37:11 - quick look here if you scroll down
37:15 - and three vendor here you can see all
37:18 - the third-party libraries so we've got
37:20 - angular bootstrap and so on so in the
37:23 - future when you want to add the
37:24 - third-party library you're going to come
37:26 - back and add it to this file so this is
37:29 - a basic project structure in the next
37:31 - lecture I'm going to talk about
37:32 - applications Garner
37:38 - now let's take a look at this program
37:39 - that's es if you have built console
37:42 - applications with c-sharp this file
37:44 - should look familiar to you so in every
37:46 - console application we have a class
37:48 - called program with a method called main
37:50 - which is the entry point or application
37:52 - a branded core applications are similar
37:55 - to console applications in that regard
37:57 - so here is the main method over these
37:59 - few lines we are configuring and running
38:02 - a web server to host our application a
38:04 - subnet core comes with two in process
38:08 - HTTP server implementations one is
38:11 - kestrel which is cross-platform it can
38:13 - run on Mac Windows and Linux and the
38:15 - other is web listener which is only for
38:18 - Windows now kestrel is a new web server
38:21 - it doesn't have all the features of IRS
38:24 - or Apache it's not very secure but it's
38:27 - good enough to be used in an internal
38:29 - network so if you're building an
38:31 - application for internal use you can use
38:33 - Castro but for a public facing website
38:36 - you need to put tetryl behind IRS on
38:39 - Windows or Apache on Linux now the
38:42 - explanation of details of that is beyond
38:44 - the scope of this course but all I want
38:46 - you to take away is that Castro is an in
38:49 - process HTTP server implementation that
38:52 - comes with a standard core now back in
38:55 - the main method here we are telling to
38:57 - use Castro we're specifying the route of
39:00 - our application you're enabling iOS
39:02 - integration and specifying the start of
39:05 - class finally when you build a host you
39:09 - run it and at this point Carol starts
39:11 - listening on port 5000 of localhost now
39:15 - let's take a look at the start of class
39:17 - so we command on P on Mac or ctrl + P on
39:21 - Windows you can easily find a file here
39:24 - startup that here we have two methods
39:27 - that are automatically called at one
39:29 - time one is configured services and the
39:32 - other is configure
39:34 - consumer services is used for dependency
39:36 - injection we should be familiar with
39:38 - dependency injection in angular 2 so in
39:41 - angular if our components have
39:43 - dependencies that should be provided to
39:45 - their constructor we register these
39:48 - dependencies as providers at a module we
39:52 - have the exact same concept here so in
39:54 - April at midcourt if our controllers
39:56 - have dependencies that should be
39:58 - provided in their constructor we need to
40:00 - register them here so this method has a
40:02 - parameter of type I service collection
40:05 - which is a container for all the
40:07 - dependencies in our application so here
40:10 - I can register a dependency like this
40:14 - services does add transient but don't
40:18 - worry about what is this method just
40:19 - look at its syntax this is a generic
40:22 - method with two generic parameters the
40:24 - first one is an interface like I
40:27 - repository and the second one is an
40:31 - implementation like repository with this
40:35 - for registering repository as an
40:37 - implementation of this interface I
40:39 - repository and then anywhere in our
40:41 - application if we have I repository in
40:44 - the constructor of a class the runtime
40:46 - will create an instance of the
40:48 - repository class and injects it into
40:51 - that class so this is dependency
40:53 - injection now the second line here add
40:56 - MVC if you look at the implementation of
40:59 - this method there there a bunch of
41:01 - statements like this so when we call
41:04 - this method it registers a bunch of
41:06 - interfaces under implementation that are
41:09 - part of a spewed out net MVC or it's not
41:11 - that core itself okay now let's move on
41:15 - now the second method configure over the
41:19 - first two lines here we're considering
41:21 - the logging of our application so we add
41:24 - console as a log so anytime we write
41:27 - something to the log it appears on the
41:28 - console right here and this is good for
41:31 - development but in a real world
41:33 - application in the production
41:34 - environment you want to use a persistent
41:36 - lock so we can add file system database
41:39 - or remote source we can register those
41:42 - logs here now the second line is adding
41:45 - a debug logger
41:46 - anytime we have debug flightline it will
41:49 - appear in our lock now the rest of this
41:51 - method to configure the request
41:54 - processing pipeline so when a request
41:57 - comes in the web server imagine it goes
41:59 - through a pipeline in this pipeline
42:01 - there are multiple components which we
42:04 - call middle where each middleware is
42:07 - like a function it looks at the incoming
42:09 - request and if it's interested in that
42:12 - request it will do something with it
42:14 - otherwise it just skips now the previous
42:18 - version of asp.net in is not on nbc5 our
42:21 - request processing pipeline was fairly
42:23 - heavy weight and we didn't have control
42:26 - over configuring this middleware in a
42:29 - thematic or we can customize this
42:31 - request processing pipeline and add only
42:34 - the middleware that we need and this way
42:37 - we can improve the performance of our
42:39 - application because CPU resources are
42:41 - not wasted for middleware that we don't
42:44 - need let's take a look at a few examples
42:46 - so here if you're in a development
42:50 - environment and by the way I'm going to
42:52 - talk about different environments in the
42:53 - next lecture so if you're in the
42:55 - development environment we add a couple
42:57 - of middleware one is developer exception
43:00 - page which renders an exception with all
43:02 - its details and the other is web pack
43:05 - div middleware
43:06 - so anytime we change one of our client
43:08 - side files like a CSS or JavaScript file
43:10 - web pack will automatically compile as
43:13 - and push the changes in the browser so
43:15 - we don't even need to reload the page
43:17 - this is called hot module replacement
43:20 - and these two middleware are only used
43:24 - in the development environment we can
43:25 - run this in the production so this way
43:27 - we can configure what middleware we want
43:30 - to have in our rico's processing
43:31 - pipeline
43:33 - here is another middleware use static
43:36 - files with this will be able to serve
43:39 - static files like images style sheets
43:42 - and so on
43:43 - so if I comment out this line we won't
43:46 - be able to serve any images or statuses
43:48 - from our application and this is a
43:50 - middleware that every a student
43:52 - application needs and finally the last
43:55 - middleware is MVC so MVC is nothing but
43:59 - a middleware when a request comes in
44:01 - this middleware looks at the request and
44:04 - based on a route it will forward it to
44:08 - an action in a controller that's MBC so
44:11 - when setting up this MVC middleware you
44:14 - have a lambda expression where we define
44:16 - our wrap template and that's all about
44:18 - middleware now for the most part you
44:20 - don't really need to modify any of this
44:22 - stuff here this is just boilerplate code
44:24 - but I wanted you to know what middleware
44:26 - is and where you can configure the
44:28 - middleware for your application next I'm
44:31 - going to talk about the concept of
44:33 - different environments like development
44:35 - staging and production
44:39 - all right now let's look
44:41 - about environments so when we run dotnet
44:44 - run note that my hosting environment is
44:48 - set to development here so in a 2008
44:51 - core we have this concept of
44:53 - environments we have development
44:55 - environment staging and production in a
44:58 - thousand nbc5 we don't really have this
45:00 - concept built into the framework and we
45:03 - had to do some tricks with web config to
45:06 - implement this now in the last lecture I
45:09 - told you that when we are in the
45:11 - development environment we have this web
45:13 - pack dev middleware and this enables hot
45:17 - module replacement so anytime we change
45:20 - our client-side files like HTML CSS and
45:23 - typescript web pack detects the changes
45:26 - does any necessary compilation and
45:28 - pushes the changes into the browser so
45:31 - we don't have to reload the page let me
45:33 - show you how this works so in the
45:36 - browser at localhost port 5000 I'm going
45:39 - to go to the stretch data page now I'm
45:43 - going to open up Chrome developer tools
45:45 - this is our console tab
45:48 - note that here we have this message H M
45:50 - are connected hm R stands for hot module
45:54 - replacement if your machine is
45:57 - configured as the staging or production
45:59 - environment you are not going to see
46:01 - this message now I'm going to show you
46:03 - how to change the environment for your
46:04 - machine later in this video
46:06 - so back in vs code I'm going to go to
46:09 - fetch data that component that HTML here
46:14 - I'm going to add it to in the title for
46:17 - use page save in the console tab you can
46:21 - see that webpack rebuilt our bundle we
46:25 - know that you can see the updated
46:26 - modules so these are the modules that
46:28 - are affected as a result of this simple
46:30 - change
46:31 - so our fetch data that component that
46:33 - HTML the component that uses that
46:37 - our app module and boot - Klein's RTS so
46:41 - these files are modified or compiled and
46:44 - the changes are automatically pushed to
46:46 - the browser so back in our application
46:49 - we can see the updated title and I
46:51 - didn't refresh the page so we web pack
46:54 - dev middleware anytime you modify your
46:57 - client side code assuming that you are
47:00 - in the development environment changes
47:02 - are automatically pushed to the browser
47:03 - and you don't need to refresh that's
47:05 - great I totally love it now here is the
47:08 - thing when you create a project using
47:10 - the approach I show you in this section
47:11 - your machine will not be in the
47:14 - development environment if you create a
47:16 - project with Visual Studio 2017 there is
47:19 - a setting there that marks your machine
47:21 - as a development machine so how can we
47:23 - change this if you're on Windows you can
47:26 - open up your terminal and type set
47:29 - exponet core under line environment to
47:34 - development this is an environment
47:37 - variable and a speed out that looks at
47:40 - the value of this variable to determine
47:42 - your environment like your Mac or Linux
47:45 - you type export a spinet core under line
47:50 - environment and you save it to
47:52 - development then when you execute dotnet
47:55 - run your hosting environment should be
47:57 - development however this approach
48:00 - affects only the current session the
48:03 - current terminal so if I open up a new
48:05 - terminal window and run just net run my
48:08 - environment is not going to be
48:10 - development it's going to be production
48:12 - there is a different approach to setting
48:14 - this environment variables at the
48:16 - Machine level on Windows you need to go
48:19 - to control panel system advanced system
48:23 - settings and there there is a button for
48:25 - adding environment variables now I don't
48:27 - have Windows here
48:28 - so you need to do it on your own it's
48:30 - really easy if you get lost you can
48:32 - simply google it are tons of videos and
48:34 - tutorials on this topic
48:36 - on Mac OS and Linux you go to your home
48:39 - directory so this is my home directory
48:42 - now here we need to edit our bash
48:45 - profile so code to open up vs code dot
48:49 - bash underlined profile note that at the
48:53 - end of this profile have added export a
48:55 - sped-up net core underline environment
48:57 - to development this will apply this
49:00 - environment variable at the machine
49:01 - level and I don't have to repeat these
49:03 - steps every time in a terminal window
49:06 - now here's a critical step I want you to
49:09 - stop watching the videos now and go
49:11 - ahead and set this environment variable
49:13 - at your machine level this is critical
49:16 - because later in the course when you are
49:17 - working on the client-side code if
49:19 - you're in the production environment you
49:21 - keep changing the code and saving and
49:23 - refreshing your browser but you don't
49:24 - see your updates so make sure to change
49:27 - the value of this environment variables
49:28 - to development at the Machine level so
49:31 - later
49:31 - you won't have any problems
49:35 - all right this webpack def middleware
49:38 - only deals with the client-side code so
49:41 - if you modify server-side code it's not
49:43 - going to be notified so I'm going to go
49:45 - to home controller in the index action
49:48 - I'm just going to throw an exception
49:51 - save now back in the browser if i
49:55 - refresh the page I don't see my change
49:57 - because our server-side code is not
50:00 - recompile so we need to get back to
50:02 - terminal stop this process and run
50:06 - dotnet run again but this is very
50:08 - tedious we don't want to stop this
50:10 - process and run it again every time we
50:13 - modify our c-sharp code so let me show
50:15 - you a better way in google search for
50:18 - dotnet watch so here the first link is a
50:22 - github page eight minutes slash dotnet
50:25 - tools under space if you scroll down
50:30 - you can see a link to dotnet watch now
50:34 - on the.net watch page we can see this
50:36 - code that you need to copy and paste
50:38 - into your CS project file so coffee I
50:41 - can vs code I'm going to go to Vega dot
50:46 - CS proj and just below the project
50:49 - element I'm going to paste this code so
50:52 - we have an item group and inside this
50:54 - item group we have a dotnet CLI tool
50:57 - reference and hearing the include
50:59 - attributes we can see the name of the
51:01 - assembly microsoft.net watch our tools
51:04 - save now back in terminal we need to run
51:09 - dotnet restore this command we'll look
51:12 - at the references in RCS project and
51:14 - we'd get them from new gaps just like
51:16 - how we do npm install this is the
51:19 - equivalent for the server-side code
51:20 - alright now if you run dotnet watch
51:24 - beautiful it's working so instead of
51:28 - dotnet run we're going to run dotnet
51:31 - watch run and this will set up a
51:34 - listener so anytime you modify your
51:36 - c-sharp code it will automatically
51:38 - recompile your code on the fly so this
51:41 - is my latest code I'm throwing an
51:43 - exception here and when I navigate to
51:46 - localhost for 5,000 I get this exception
51:49 - now back here I remove this line save in
51:54 - terminal you can see the watch to notice
51:56 - a file change which is home controller
51:58 - that's es so it will compile on our
52:01 - application and restarted the server now
52:03 - this process restarting the server often
52:06 - takes a second or two so during that
52:08 - time your real application is not going
52:10 - to be accessible
52:11 - alright now back here if i refresh
52:15 - my home page is working so before going
52:18 - any further add dotnet wash your
52:20 - projects
52:23 - okay one more thing I want to show you
52:25 - here in vs code if this debug panel here
52:30 - the shortcuts a Mac if shift command and
52:33 - D and on Windows is shift control D so
52:38 - here we have full debugging experience
52:39 - just like Visual Studio on this panel we
52:42 - have the list of local variables below
52:45 - that we can add watches here we have our
52:48 - call stack and below that we have all
52:50 - the breakpoints in the application so
52:53 - here in the index action we can put a
52:56 - breakpoint on this line exactly like
52:58 - visual studio we can also add or remove
53:01 - a breakpoint using f9 okay now we can
53:05 - start the debugger with f5
53:07 - however in debug console note that we
53:10 - have an i/o exception and it's coming
53:13 - from server but kestrel the DLL now if
53:18 - you look at the stack trace you can see
53:20 - this error message here port already in
53:22 - use and the reason for that is because
53:25 - we have started our server on 45000 in
53:28 - our terminal window so this port is
53:31 - already in use we need to stop this
53:33 - process get back here and restart the
53:37 - debugging session so with f5 now
53:42 - this point dotnet crashes you can simply
53:44 - ignore it and restart the debugger so f5
53:48 - one more time so this will launch a new
53:50 - browser window and now you can see my
53:53 - breakpoint is activated all the
53:56 - shortcuts we have in Visual Studio for
53:58 - debugging codes are also available here
54:00 - so with F then we can step over a line
54:04 - with f11 we can step into a method with
54:08 - shift and f11 we can step out of it we
54:12 - can restart the debugger using shift
54:14 - command and f5 on Mac or shift control
54:17 - f5 on Windows and we can stop the
54:20 - debugger using shift and f5 now if I
54:24 - open the debug panel with shift command
54:26 - and D looks we've got our local
54:29 - variables here our watches or call stack
54:31 - and all the breakpoints
54:35 - and the last thing I want to show you
54:37 - here is this kid panel again look at the
54:40 - shortcut control shift and G so here we
54:45 - can initialize our gift repository
54:48 - you can see all the files that are
54:50 - changed you can click any of these files
54:52 - and do a disk but in this case because
54:55 - all these files are new there is no
54:57 - previous version and finally can commit
55:00 - them to your git repository right here
55:01 - so initial commit you can also work with
55:07 - get in the terminal so get add
55:09 - everything get commit whatever now if
55:14 - you're not familiar with git that's
55:15 - perfectly fine don't worry about it it's
55:17 - not something that you need to know in
55:18 - order to take this course but if you're
55:21 - a bit more experienced I want you to
55:23 - know that here you can also use get
55:24 - inside vs code so our project is ready
55:28 - and you have some familiarity with these
55:30 - new tools for building a student core
55:32 - applications next we're going to revisit
55:34 - our legal project requirements and get
55:38 - ready for our first challenge
55:41 - one of the car
55:43 - I get from my students is mush how do I
55:46 - get started I've got this project I
55:47 - don't know what is the first step I
55:49 - don't know what to do next so in this
55:51 - lecture I'm going to show you a
55:52 - systematic approach to build software
55:55 - every software application starts with
55:58 - the requirements document
55:59 - now this requirements document can be
56:01 - one page it can be 500 pages or it can
56:04 - be just a variable discussion between a
56:06 - few people irrespective of how big those
56:08 - requirements document is your first task
56:11 - is to extract the use cases in this
56:14 - application use cases are the actions
56:17 - that the user can perform here are some
56:19 - examples the user should be able to
56:22 - create equals update vehicles real
56:24 - vehicles source them filter them upload
56:27 - photos and so on just write this down on
56:30 - a piece of paper keep it very simple now
56:33 - once you have these use cases you need
56:35 - to find their dependency so we can start
56:38 - anywhere in the list let's say filter
56:40 - vehicles in order for us to build this
56:43 - feature first when it's a list of
56:45 - vehicles and in order to build this
56:48 - vehicle list first we should be able to
56:51 - create vehicles so we can store them in
56:53 - a database and then we can view them in
56:55 - a list so here is the order to implement
56:58 - these use cases you're going to start
57:00 - with creating a vehicle first once we
57:03 - deliver that function then we move on to
57:05 - the second step the second task which is
57:07 - listing the vehicle and finally the
57:09 - third task filtering vehicles now what
57:12 - is critical for you to understand here
57:14 - is that when you're building the list of
57:17 - vehicles you should not worry about all
57:19 - the other fancy features like filtering
57:21 - sorting pagination and so on this is a
57:25 - mistake that a lot of junior developers
57:27 - make they try to do so many things at
57:30 - once and that's why they get lost in
57:32 - detail and deliver poor quality software
57:35 - so focus entirely on building a list of
57:39 - vehicles and that list doesn't even have
57:41 - to be fancy render the vehicles in a
57:43 - very simple list once it's working then
57:46 - you can make it look better you can
57:48 - apply some styles we can add icons and
57:50 - so on once you deliver that feature that
57:53 - move on to the third step
57:54 - so three
57:55 - at this point you should isolate your
57:57 - mind and you shouldn't think about
57:59 - anything else like this is the only and
58:01 - the last feature of this application you
58:04 - need to build so in our current
58:07 - dependency graph we're going to start
58:08 - with create vehicles use case now for
58:12 - this use case what I do is to sketch a
58:14 - simple form so earlier in the
58:16 - requirements I told you about the
58:18 - attributes of the vehicles we need to
58:21 - store so every recall should have a make
58:23 - and model and if you other attributes so
58:26 - here in our form we need to drop-down
58:28 - list for the vehicle make once the user
58:31 - selects a value from this drop-down list
58:33 - then the model drop-down list should be
58:36 - repopulated because models are based on
58:39 - the make now what is important here is
58:42 - that the items in these two drop-down
58:44 - lists come from the server because in
58:47 - our application somewhere in our
58:49 - database we need to register all the
58:51 - standard makes and models now similarly
58:54 - we need a list of features that are
58:57 - available in this vehicle
58:59 - so here we need a checkbox list and the
59:02 - items in this list are rendered
59:04 - dynamically so again we need to store
59:07 - the list of standard features in our
59:09 - database and this data should come from
59:12 - the server so back to our dependency
59:15 - graph you want to build this feature
59:17 - create Vico in order to build this first
59:21 - we need an angular form now this form
59:24 - needs its data from the server so in
59:27 - order to build this form first wait on
59:29 - API we need one or more API end points
59:32 - so we can get the data to populate this
59:35 - form next in order to build this API we
59:39 - need a database to store our data but
59:42 - how do we create our database we're
59:44 - going to use any D framework code first
59:46 - migration so first we create our domain
59:49 - model and then use code first migrations
59:52 - to generate or update our database so
59:55 - this is the approach that I always
59:57 - follow in every project now we want to
60:00 - reduce the scope here you want to focus
60:02 - on a small piece of functionality so
60:05 - first we want to build this API and
60:07 - that's your first challenge so over this
60:10 - week I want you to build these two API
60:13 - endpoints to get the list of vehicles
60:15 - makes and their models as well as their
60:18 - feature so everything you learned in a
60:20 - flood and nbc5 to build api's applies in
60:24 - asp.net core as well there are some
60:26 - subtle differences so I have attached
60:28 - with PDF for you to this lecture where
60:30 - you can find all the necessary
60:32 - information about transitioning from
60:33 - 8085
60:35 - to asp.net core for the purpose of this
60:37 - exercise sometime next week I'm going to
60:40 - publish my solution so you can see how I
60:42 - will go ahead and build this feature
60:44 - step by step so go ahead get started and
60:48 - I'll see you next week
60:53 - so I hope you've been watching this
60:55 - video up to this point if you want to
60:57 - have this course for $15 click on the
60:59 - link in the video description and join
61:01 - my mailing list now next week when I
61:03 - publish the course I will send you a
61:04 - coupon to get the course thank you and
61:07 - have a great day