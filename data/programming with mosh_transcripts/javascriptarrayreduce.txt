00:03 - once again with our array of numbers
00:05 - let's say we want to calculate the sum
00:07 - of all these numbers in this array this
00:10 - would be similar to calculating the
00:12 - total cost of all the items in a
00:14 - shopping cart
00:15 - so each numbers here could represent the
00:17 - price of an item in a shopping cart of
00:19 - course we wouldn't have a negative
00:21 - number there but you got the point so
00:23 - here's a very simple algorithm for
00:26 - calculating the sum of all the numbers
00:28 - in this array we start with declaring a
00:30 - variable called sum and we initialize it
00:34 - to zero
00:34 - next we loop over this array get each
00:38 - element or each number and add it to
00:40 - some something like this for let n of
00:45 - numbers now we're going to add n to sum
00:49 - so we can write an expression like this
00:51 - sum equals sum plus n or a better way is
00:55 - to use the addition assignment operator
00:58 - so you can exclude the second sum so
01:02 - this is exactly like the statement we
01:05 - had before and finally we display sum on
01:09 - the console so we get 5 now there is a
01:15 - cleaner and more elegant way to write
01:17 - the same code using the reduce method in
01:19 - arrays so all these arrays have this
01:22 - reduce method and with this method we
01:24 - can reduce all these elements in an
01:27 - array into a single value that single
01:30 - value can be a number it can be a string
01:32 - it can be an object it can be anything
01:34 - in this example we want to reduce all
01:37 - these elements into a single number that
01:40 - is the sum of all the numbers in this
01:43 - array so let's see how we can use the
01:45 - reduced method this method takes a
01:47 - callback function with two parameters
01:51 - accumulator and current value so here
01:57 - I'm using an arrow function like this
02:00 - this accumulator parameter here is
02:02 - exactly like this song we have here it's
02:05 - something that we initialize and then
02:08 - this callback function is executed
02:10 - multiple times each time this current
02:13 - value will be set to one element in this
02:16 - array
02:16 - okay so in each call we want to get this
02:19 - current value and add it to an
02:21 - accumulator so we simply return the sum
02:26 - of accumulator plus current value now
02:30 - internally this reduce method will get
02:32 - this result and store it in the
02:35 - accumulator you will see that in a
02:37 - second now one last thing we need to do
02:39 - here is to initialize this accumulator
02:42 - to zero so as the second argument to the
02:45 - reduce method we pass zero
02:48 - note that this reduce method has two
02:50 - arguments the first argument is a
02:52 - callback function and the second
02:55 - argument is the initial value for the
02:57 - accumulator finally we get the result as
03:02 - a single value in this case some now we
03:06 - don't need this code anymore and finally
03:11 - let's bring let's consult our log here
03:15 - save the changes you can see we get the
03:19 - same result five but let's see what
03:22 - exactly is happening here so initially
03:25 - we said accumulator to zero so I'm going
03:28 - to set a equals zero in the first round
03:31 - current value will be set to the first
03:34 - number so C equals one now we add this
03:38 - together so we get one and a will be set
03:42 - to one after this callback function is
03:45 - executed so as a result a will be one
03:50 - now in the second round
03:52 - a is one current value will be set to
03:55 - the second number in this array so minus
03:59 - one now once again we add them together
04:02 - so a will be zero after the second call
04:06 - now the third call so a is zero
04:09 - the current value is going to be set to
04:12 - the third element in this array so - and
04:16 - as a result a will be two and finally in
04:20 - the last call we start with a set to two
04:23 - and current value will be three okay so
04:27 - the result will be five and that's why
04:31 - we saw five on the console so
04:33 - essentially with this reduce method we
04:36 - start with an accumulator then we loop
04:38 - through this array and convert all these
04:41 - elements into a single value which is in
04:44 - this case accumulator or the sum of all
04:47 - the numbers in this array now we can
04:49 - make this code even shorter we can
04:52 - exclude the initialization of the
04:54 - accumulator and with this accumulator
04:58 - will be set to the first element so let
05:01 - me show you what will happen a will
05:03 - initially be set to 1 and current value
05:06 - will be set to minus 1 that is exactly
05:09 - like our second call here right so as a
05:13 - result a will be set to zero now in our
05:18 - second round a will be zero and current
05:21 - value will be 2 because in the previous
05:23 - call current value was here so now we're
05:26 - here so current value will be 2 and as a
05:29 - result a will be 2 and finally in the
05:32 - last call a will be 2 and current value
05:35 - will be 3 the last element in this array
05:39 - and once again we get fine so if this
05:43 - supply an initial value we'll have one
05:46 - more call if we don't the first element
05:48 - in this array will be used as the
05:50 - initial value so this is how the reduce
05:53 - method works and finally to make this
05:55 - code a little bit shorter we can get rid
05:58 - of this return keyword because we have a
06:00 - single line and we are simply returning
06:02 - a value so remove the return the
06:06 - semicolon and the curly braces put
06:09 - everything on a single line like this
06:13 - so with this single line of code we
06:15 - reduce the numbers array and this is how
06:18 - our reduction algorithm works we simply
06:21 - get the current value and add it
06:23 - to accumulator this is far cleaner and
06:26 - more elegant than declaring a song and
06:30 - then looping over this array like let n
06:34 - of numbers and then add and to the sum
06:38 - that's a very old way of writing code
06:45 - hi guys thank you for watching my
06:47 - javascript tutorial this tutorial is
06:49 - part of my JavaScript course where you
06:51 - learn all the essential JavaScript
06:54 - features that every web and mobile
06:56 - application developer must know if
06:58 - you're an absolute beginner or have some
07:00 - experience in JavaScript and are looking
07:02 - for a fun and in-depth course that
07:04 - teaches you the fundamentals of
07:05 - JavaScript this course is for you this
07:08 - course is also packed with tons of
07:10 - exercises that help you master what you
07:12 - learned in the course in fact many of
07:14 - these exercises are questions that come
07:17 - up in technical programming interviews
07:19 - so if you're pursuing a job as a
07:21 - front-end or a back-end developer or if
07:24 - you simply want to have a more in-depth
07:26 - understanding of JavaScript I highly
07:28 - encourage you to enroll in the course
07:30 - for a limited time you can get this
07:32 - course with a discount using the link in
07:34 - the video description click the link to
07:36 - find out more about the course and in
07:38 - row