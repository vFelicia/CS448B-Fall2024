00:04 - welcome to the first part of the
00:05 - ultimate html and css series in this
00:08 - series i'm going to take you on a
00:10 - journey and teach you all the skills you
00:11 - need to build fast and beautiful
00:13 - websites that look great on all kinds of
00:15 - devices i'm assuming you know nothing
00:17 - about html or css i want to learn
00:20 - everything from scratch
00:21 - so in the first part of this series
00:23 - we're going to talk about the
00:24 - fundamentals of web development with
00:25 - html and css in the second part we'll
00:28 - explore the advanced concepts and in the
00:31 - third part we'll put everything together
00:33 - and build a beautiful responsive and
00:35 - blazingly fast website for an imaginary
00:38 - cloud hosting company called mashify if
00:41 - you want to play with this website just
00:42 - head over to mashify.com and see it for
00:44 - yourself this is what you're going to
00:46 - build in this series i'm ash hamadani
00:49 - and i've taught millions of people how
00:50 - to code or how to become professional
00:52 - software engineers through my coding
00:54 - school and youtube channel if you're new
00:56 - here be sure to subscribe as we upload
00:58 - new videos all the time now let's jump
01:00 - in and get started
01:03 - [Music]
01:13 - all right let's talk about the tools you
01:14 - need to take this course for the starter
01:17 - you need a code editor there's so many
01:19 - code editors out there like visual
01:21 - studio code or vs code sublime text adam
01:24 - and so on in this course i'm going to
01:26 - use vs code along with a few extensions
01:29 - for starting a web server and formatting
01:31 - our code you're welcome to use your
01:33 - favorite code editor if you know what
01:35 - you're doing but otherwise head over to
01:37 - code.visualstudio.com
01:39 - and download the latest version of vs
01:41 - code
01:42 - now here inside vs code we're going to
01:44 - install a couple of extensions
01:46 - so let's open the extensions panel
01:49 - and search for
01:50 - preview
01:53 - here's the extension we're going to
01:54 - install prettier code formatter with
01:56 - this extension we can format our code
01:59 - and make it pretty this is a very
02:00 - popular extension as you can see it's
02:03 - been downloaded more than 9 million
02:04 - times
02:05 - so over here you're going to have an
02:07 - install button just click it and you're
02:09 - done
02:10 - next we're going to install
02:12 - another extension called live server
02:16 - with this we can launch our website
02:17 - inside a development web server again
02:20 - this is a very popular extension it's
02:22 - been downloaded almost 8 million times
02:25 - now in addition to these we're going to
02:27 - use a browser to view and test our web
02:29 - pages again you can use your favorite
02:31 - browser but in this course i'm going to
02:33 - use google chrome and i encourage you to
02:35 - use the same browser so you can easily
02:37 - follow the course
02:44 - we're going to start our web development
02:46 - journey here in every section you will
02:48 - learn something new about web
02:50 - development and by the end of this
02:51 - course you will put all of this together
02:53 - to build a beautiful web page
02:56 - in this section we're going to talk
02:57 - about the fundamentals of web
02:59 - development you'll learn the languages
03:01 - and tools used in web development as
03:03 - well as the key concepts and vocabulary
03:06 - such as url http gum and so on we're
03:10 - also going to talk about how websites
03:11 - work so you will understand what exactly
03:14 - happens under the hood when you use your
03:16 - browser to visit a website you will also
03:18 - learn how to inspect network traffic
03:21 - using chrome dev tools which is a very
03:23 - powerful tool used by front-end
03:25 - developers
03:26 - we'll also talk about the basics of html
03:28 - and css and validating web pages which
03:31 - is something a lot of developers miss
03:33 - this is going to be an awesome journey
03:35 - so let's jump in and get started
03:38 - [Music]
03:46 - this course is your first step towards
03:48 - becoming a web developer so let me give
03:50 - you a simple roadmap to know where you
03:52 - are and where you should go next every
03:55 - website has two parts a front end and a
03:57 - backhand the front end is the part that
03:59 - you see in your browser and interact
04:01 - with all the visual aspects the back end
04:04 - is the part that powers the front end
04:06 - it's behind the scenes and is mainly
04:08 - about storing data in databases and
04:10 - providing it to the front end
04:12 - so web development jobs fall into three
04:14 - main categories front-end development
04:17 - back-end development and full-stack
04:19 - development which involves both
04:21 - front-end and back-end development
04:23 - front-end developers use html css and
04:26 - javascript to build front-ends back-end
04:28 - developers have different sets of tools
04:31 - available to them which is outside the
04:33 - scope of this course so let's talk about
04:35 - html css and javascript
04:38 - html is short for hypertext markup
04:41 - language i know it's a mouthful but
04:43 - basically we use html to define the
04:45 - building blocks of our web pages
04:48 - css is short for cascading stylesheet
04:50 - and is used for styling web pages and
04:52 - making them beautiful javascript is used
04:55 - for adding functionality to web pages
04:57 - let me give you an analogy think of a
04:59 - building a building in the real world is
05:02 - like a web page on the internet it has a
05:04 - skeleton or structure
05:06 - it can have pretty walls windows and
05:08 - tiles and it can have certain
05:10 - functionality for example when we press
05:12 - the elevator button it comes to pick us
05:15 - up
05:17 - here's a real example let's say we want
05:19 - to build a website like twitter for each
05:21 - tweet we want to have a layout like this
05:24 - so first we use html to define all the
05:26 - building blocks of this layout what are
05:29 - these building blocks here
05:30 - an image some text indicating the user's
05:33 - twitter handle another block of text
05:35 - containing the message and three icons
05:38 - for commenting retweeting and liking the
05:40 - tweet
05:41 - we use html to add these building blocks
05:44 - to our web page then we use css to give
05:46 - it visual effects for example with css
05:49 - we can make the font bold we can make
05:51 - our image round we can add some padding
05:54 - around here
05:55 - we can change the color of these icons
05:57 - and define their look when we hover over
05:59 - them so css is all about aesthetics or
06:02 - visual effects with css we can also
06:05 - create beautiful animations now most web
06:08 - pages these days are interactive they
06:10 - respond to our actions like clicks and
06:12 - scrolls this is where javascript comes
06:14 - in with javascript we can add
06:16 - functionality or behavior to our web
06:19 - pages for example we can like your tweet
06:22 - so javascript is a programming language
06:24 - while html and css are not meaning we
06:27 - cannot use them to tell computers what
06:29 - to do we use them to define the building
06:31 - blocks of our web pages and style them
06:34 - every webpage you have seen on our
06:35 - internet is built with these three
06:37 - languages so the better you learn and
06:39 - understand these languages and their
06:40 - features the better you will be at
06:42 - front-end development
06:45 - so your front-end development journey
06:47 - starts with html and css i would say if
06:50 - you spend three to five hours every day
06:53 - studying and coding you should be able
06:55 - to have a reasonable understanding of
06:56 - these two languages in about a month or
06:59 - a month and a half once you learn these
07:01 - languages then you need to learn
07:02 - javascript i have a separate series for
07:04 - learning javascript so after finishing
07:07 - this series you may want to enroll in
07:08 - that series i would say learning
07:10 - javascript would probably take another
07:13 - six weeks of your time of course you're
07:15 - not going to be a javascript expert in
07:17 - just six weeks but you will have a
07:18 - reasonable understanding of it and you
07:20 - will learn more as you work on different
07:22 - projects
07:23 - so the first three months is all about
07:25 - the fundamentals
07:28 - now building websites often include a
07:31 - bunch of repetitive tasks this is where
07:33 - front-end frameworks and libraries come
07:35 - in a framework or a library comes with a
07:38 - lot of code that we can reuse in our
07:40 - websites so they help us get the job
07:42 - done faster that's why a lot of
07:45 - companies these days use one of these
07:47 - popular frameworks like react angular or
07:50 - vue
07:51 - now technically react is not a framework
07:53 - it's a library but subtle distinction on
07:56 - site all these tools serve the same
07:58 - purpose they help us build applications
08:00 - faster
08:01 - now you don't need to learn all of these
08:03 - to get started different companies use
08:05 - different tools for different projects
08:07 - so as you move from one project to
08:09 - another you may want to learn about the
08:11 - other tools if you're starting out just
08:13 - focus on react because it's the most
08:15 - popular tool in this space
08:17 - once you learn react you can always
08:19 - learn the other tools if needed for
08:21 - react you would probably need one to two
08:24 - months again i have a comprehensive
08:26 - course on react more than 40 000 people
08:28 - have taken this course and loved it
08:31 - alright what's the next step version
08:33 - control systems we use a version control
08:36 - system to keep track of our project
08:38 - history and work collaboratively with
08:40 - others there are many version control
08:42 - systems out there like git subversion
08:45 - mercurial and so on but git is the most
08:47 - popular tool in this space and is used
08:50 - in more than 70 of software companies
08:53 - that's why you'll see it in almost every
08:54 - job description i would say you would
08:57 - probably need two weeks for learning git
08:59 - and again i have a comprehensive course
09:01 - for you so these are the essential
09:03 - skills that every front-end developer
09:05 - must have you'll see these listed on
09:07 - almost every job description now
09:10 - different jobs require other skills but
09:12 - these skills vary from one company to
09:14 - another so you can learn these
09:16 - additional things in the future or on
09:18 - the job for now just focus on these four
09:21 - skills or four steps remember less is
09:24 - more don't try to learn too many things
09:26 - quickly you won't learn anything you'll
09:28 - just waste your time
09:30 - alright that's your roadmap next we're
09:31 - going to talk about how the web works
09:36 - [Music]
09:40 - have you ever wondered how the web works
09:43 - in this lesson i'm going to tell you
09:44 - exactly what happens the moment you type
09:47 - the address of a website into your
09:49 - browser and hit enter
09:51 - as part of this we're going to talk
09:52 - about a few important concepts and terms
09:54 - that you need to know as a web developer
09:57 - so let's say we launch our browser and
09:59 - head over to a website like
10:00 - codewithmosh.com
10:02 - now this address that we have in the
10:03 - browser address bar is called a url
10:05 - which is short for uniform resource
10:08 - locator basically it's a way to locate a
10:10 - resource on the internet resources can
10:12 - be web pages also called html documents
10:16 - they can be images video files fonts and
10:19 - so on so we type the url of a website
10:21 - and hit enter what happens now well
10:24 - there are two pieces involved here the
10:26 - browser also called the client and the
10:29 - computer or computers that host our
10:31 - target website we refer to these as web
10:34 - servers or servers for short this is
10:36 - what we call the client server model the
10:38 - client requests a service the server
10:41 - provides the service
10:43 - so our browser sends a message to the
10:44 - server and says hey give me the home
10:47 - page of this website this is kind of
10:49 - similar to how you send your friend a
10:51 - text message you can think of your phone
10:53 - as the client sending the message and
10:55 - your friend's phone as the server
10:57 - receiving the message now back to our
10:59 - example this message is formatted based
11:02 - on a protocol called http or hypertext
11:05 - transfer protocol you've probably
11:07 - noticed it before but never know what it
11:09 - is in simple terms http is a language
11:12 - that clients and servers use to talk to
11:15 - each other it's not a programming
11:16 - language it's just a plain textual
11:19 - language for communicating over the
11:20 - internet we also have https which is
11:23 - http with encryption so the messages
11:26 - exchange between the client and the
11:27 - server are encrypted here is a
11:29 - simplified example of an http message
11:32 - with this message the browser tells the
11:34 - server what it's looking for
11:36 - so on the first line it says that it
11:38 - wants to get a page or a file called
11:41 - index.html using http version 1.1
11:45 - index.html often represents the home
11:47 - page of websites on the second line we
11:50 - can see the host that is
11:51 - codewithmosh.com and on the third line
11:53 - we can see the language that the client
11:55 - can accept in this case english
11:58 - now don't worry about memorizing any of
12:00 - this all i want you to understand here
12:02 - is that this message is structured based
12:04 - on the http protocol that clients and
12:07 - servers understand so the server
12:09 - receives this message it figures out
12:11 - what the client is asking and then it
12:13 - will send a message back to the client
12:15 - the first message is called an http
12:18 - request and the second message is called
12:20 - an http response every data exchange
12:23 - using the http protocol involves two
12:25 - messages a request and a response
12:28 - now what is in the response here's a
12:30 - simplified example
12:32 - on the first line we see the version of
12:34 - http protocol used followed by a number
12:36 - which is the status code
12:38 - 200 means successful or okay
12:41 - right below that we can see the date and
12:43 - time of the response
12:45 - next we can see the type of content the
12:47 - server is sending back to the client in
12:49 - this case text
12:50 - html and after that we can see the html
12:54 - code or the html document that
12:56 - represents the home page of
12:57 - codewithmosh.com of course the actual
13:00 - html code is way longer now as the
13:03 - browser reads this html document it
13:05 - constructs what we call a dom or a
13:08 - document object model don't let this
13:10 - fancy name scare you this is a model
13:13 - that represents the object or elements
13:15 - in our html document what are these
13:18 - elements all the building blocks of our
13:20 - page like paragraphs of text images
13:23 - links and other stuff you will see this
13:25 - in action in the next lesson
13:27 - now as the browser is reading this html
13:30 - document that is returned from the
13:31 - server it discovers references to other
13:34 - resources in this document like images
13:37 - fonts and other stuff each of these
13:39 - resources has an address or a url so for
13:42 - each resource the browser sends a
13:44 - separate http request to the server to
13:47 - fetch that resource many of these http
13:49 - requests are set in parallel so we can
13:52 - see the page as quickly as possible once
13:54 - the browser has all the necessary
13:56 - resources it will render the html
13:59 - document rendering an html document
14:01 - means displaying it it's a fancy
14:03 - technical term we use often
14:05 - so in a nutshell our browser sends an
14:07 - http request to the server and receives
14:10 - an http response this http response
14:13 - contains an html document the browser
14:16 - reads that html document to construct a
14:18 - document object model and render the
14:20 - page
14:21 - in the next lesson i'm going to show you
14:23 - all of these steps in action
14:27 - [Music]
14:31 - all right let's see http requests and
14:33 - responses in action
14:35 - so open up chrome and head over to
14:36 - google.com now we need to access chrome
14:39 - dev tools this is a very powerful tool
14:41 - used by frontend developers so on the
14:44 - top we go to view
14:46 - developer
14:48 - developer tools now look at the shortcut
14:50 - on mac it's alt or option command and i
14:54 - on windows is obviously different but
14:56 - remember the shortcut because it's much
14:58 - faster to access the devtools via the
15:00 - keyboard
15:01 - so
15:02 - here's the dev tools the first time you
15:04 - see it it might appear a bit
15:06 - intimidating but trust me it's much
15:07 - easier than you think throughout the
15:09 - course you're going to learn more about
15:10 - the dev tools so here we have a few
15:13 - different tabs elements console sources
15:16 - network and so on in this demo we're
15:18 - going to go to the network tab so we can
15:20 - inspect the network traffic to and from
15:23 - google.com
15:25 - now by default devtools is docked to the
15:27 - bottom of the screen we can dock it to
15:29 - the left to the right or undock it as a
15:32 - separate window so over here
15:36 - we can dock it to the left side
15:38 - a lot of frontend developers like this
15:40 - layout so they put devtools on the left
15:42 - side and they have their website on the
15:44 - right side now in this demo i'm going to
15:46 - undock it as a separate window so we
15:49 - have more space to work with
15:51 - so
15:51 - let's undock it
15:53 - good
15:54 - now we need to refresh our website as
15:56 - you can see over here on match we can
15:58 - press command on r on windows is
16:01 - probably control and r
16:02 - alternatively we can go back to this
16:05 - window
16:06 - and press the refresh button now
16:08 - back to the dev tools look at all these
16:10 - items over here these are the http
16:13 - requests that are sent from our browser
16:15 - to google.com
16:16 - as you can see
16:18 - there are totally
16:20 - 45 requests and here's the amount of
16:22 - data transferred over the network so in
16:25 - this case just over 94 kilobytes now
16:28 - look at the first item in this list this
16:30 - is the first http request that chrome
16:33 - sent to google.com
16:35 - as you can see
16:36 - with this request the browser wanted to
16:39 - get a document
16:40 - and the status of this request is 200
16:43 - which means okay over here you can see
16:46 - the amount of data transferred over the
16:48 - network for this request and the time it
16:51 - took to get the response now if we click
16:53 - on this request
16:55 - we can see more details about it so here
16:57 - on the headers tab we can see all the
16:59 - headers of our request and response
17:01 - so here are some general headers like
17:03 - request url request method which is get
17:07 - status code that is 200 we talked about
17:09 - it remote address this is the new make
17:12 - representation of google.com
17:15 - now down below we have response editors
17:17 - there are so many headers here you don't
17:19 - have to worry about them but as an
17:20 - example look at content type we talked
17:23 - about this in the previous lesson so the
17:25 - type of this response is text
17:27 - html below that we have the date and
17:30 - time of the response
17:32 - now if we click on the preview tab
17:34 - we can see a preview of the html
17:36 - document that is returned from the
17:38 - server so this is the home page of
17:40 - google
17:41 - now in this html document we have
17:43 - references to other resources like
17:46 - images fonts and so on so all these
17:48 - subsequent requests are sent to download
17:51 - those resources so right below the first
17:54 - request we have a request for
17:56 - downloading a png or an image file
17:59 - here's another request for getting
18:01 - another image we have two requests for
18:03 - getting two different fonts and so on
18:05 - now we can easily filter this list so
18:08 - let's click on the filter icon here
18:10 - by default we see all requests but we
18:12 - can filter by request type for example
18:15 - we can select doc to see requests for
18:17 - downloading html documents or font
18:21 - to see the requests that were sent to
18:22 - download fonts and so on next i'm going
18:25 - to show you how to create your first
18:26 - html document
18:30 - [Music]
18:35 - alright first things first here on your
18:36 - desktop or anywhere on your computer
18:39 - right click and create a new folder i'm
18:42 - going to call this html but we could
18:43 - call it anything
18:45 - now let's go back to vs code
18:47 - and open the explorer panel
18:50 - then we go to open folder
18:52 - and open the folder that we just created
18:57 - good now this folder is currently empty
18:59 - so let's add a new file here called
19:02 - index.html
19:04 - as i told you before index.html often
19:07 - represents the home page of websites so
19:10 - let's go with that
19:12 - now we can close the explorer panel by
19:14 - pressing command and b on mac or control
19:16 - and b on windows
19:18 - good
19:19 - now the first thing we need to do here
19:21 - is to tell the browser that this is an
19:23 - html5 document
19:25 - so we type a left angle bracket
19:28 - now look at this suggestion list the
19:30 - first item here is doctype or document
19:33 - type let's press enter or tab
19:36 - vs code generated this piece of code for
19:38 - us
19:39 - so with this line of code we can tell
19:40 - browsers that this is an html5 document
19:44 - this line of code here is called doctype
19:46 - declaration in the previous versions of
19:48 - html our doctype declaration was so long
19:52 - it was so messy but html5 solved this
19:54 - problem so all we have to type is
19:56 - doctype html and by the way html is not
20:00 - a case sensitive language which means
20:02 - it's not sensitive to uppercase and
20:04 - lowercase letters but conventionally
20:06 - speaking we type everything in lowercase
20:09 - except doctype this is just a convention
20:12 - we could type this in lowercase and
20:14 - that's perfectly fine
20:15 - so let's revert it back
20:17 - now right after this we need to use our
20:20 - html elements to define the structure of
20:22 - this web page
20:24 - the first element we're going to use is
20:25 - the html element so we type html and
20:29 - then press tab or enter
20:31 - once again vscode generated this piece
20:33 - of code for us
20:35 - so what we have here on the left side is
20:36 - called the opening tag
20:38 - and
20:39 - what we have on the right side is the
20:41 - closing tag so most html elements have
20:43 - an opening and a closing tag but there
20:45 - are exceptions as i'm going to show you
20:47 - later in this video
20:48 - now inside this element we're going to
20:50 - add additional elements now because i
20:52 - don't want to type everything in one
20:54 - line i'm going to press enter
20:56 - that's better now here we're going to
20:58 - add two elements head and body so once
21:01 - again we type head press tab good
21:04 - and then body
21:06 - we use the head element to give browser
21:08 - information about this page for example
21:10 - here we can use the title element
21:14 - to specify the title of this page that
21:16 - appears in the browser over here so
21:19 - let's type my first web page
21:22 - now let's save the changes by pressing
21:24 - command and s on mac or ctrl and s on
21:27 - windows
21:28 - good now before going any further let's
21:31 - right click somewhere
21:32 - and go to open with live server so we're
21:36 - going to open this page using the
21:37 - development server that we just
21:39 - installed
21:40 - okay
21:42 - all right take a look so our page is
21:44 - currently empty because we haven't added
21:46 - any elements inside this page and over
21:49 - here we can see the title that we just
21:51 - typed my first web page
21:54 - now look at the url or address of this
21:56 - page we have 127.0.0.1
22:01 - this number or this ip address
22:03 - represents the local computer it's
22:05 - globally known so everybody knows
22:07 - 127.0.0.1
22:09 - references the current computer
22:11 - after that we have a colon
22:13 - and then we have
22:14 - the port number on which our web server
22:17 - is listening so our web server is
22:19 - waiting for http requests on this port
22:22 - okay
22:23 - then we have a forward slash followed by
22:25 - the name of our file
22:27 - index.html
22:28 - now back to vs code
22:31 - inside the body element we're going to
22:33 - add elements that would appear on our
22:35 - page
22:36 - so let's say we want to display a tweet
22:38 - what elements do we need here an image
22:40 - and some text elements so we type img
22:44 - short for image and then press tab
22:47 - here's our image element now this image
22:49 - element is different from the other
22:51 - elements we have created so far can you
22:53 - tell the differences
22:54 - there are two differences here the first
22:56 - difference is that here we don't have a
22:58 - closing tag we only have an opening tag
23:01 - because the image element cannot have
23:03 - any child elements that's the reason now
23:06 - in the previous versions of html we used
23:08 - to add a forward slash here and this
23:11 - represents a self-closing tag but we
23:14 - don't have to do this in html5 so i'm
23:16 - going to keep the code simpler
23:18 - now here we have
23:20 - two attributes source and alt with these
23:24 - attributes we can supply additional
23:26 - information about an element
23:28 - so we use the source element to specify
23:31 - the path to our image
23:32 - so let's open up the explorer panel one
23:34 - more time by pressing command and b on
23:36 - mac or control and b on windows
23:40 - here i'm going to create a new folder
23:43 - called images
23:45 - now for this demo i'm going to use my
23:47 - own image which you can also download
23:48 - right below this video but you can use
23:50 - any image that you want
23:52 - so here's my image i'm going to drop it
23:56 - onto the images folder
23:57 - it's right here okay
23:59 - now let's close this window
24:01 - good
24:02 - so where is this image
24:04 - relative to our index.html file
24:07 - it's inside the images folder right
24:10 - so here in double quotes we type images
24:13 - slash
24:14 - mosh.jpg
24:16 - now vs code is suggesting this name so
24:18 - we can press tab to complete the code
24:20 - beautiful
24:21 - now alt is short for alternative text
24:24 - and we use this attribute to give the
24:27 - browser some text to display in case the
24:29 - image cannot be displayed we'll talk
24:31 - about this in more detail in the future
24:33 - so for now i'm going to delete this
24:35 - attribute
24:37 - good
24:38 - now after the image we're going to add a
24:40 - text element so we type p that is short
24:43 - for paragraph tab
24:45 - and here we can type my twitter handle
24:47 - so at marsh hammondi
24:50 - after that we're going to add another
24:52 - text element
24:54 - and here we can type the body of our
24:56 - tweet so
24:57 - i love to
24:58 - teach you html
25:00 - perfect
25:01 - save the changes
25:03 - now back in the browser
25:04 - our page refreshed automatically this is
25:07 - one of the beauties of live server so we
25:09 - don't have to manually refresh the page
25:11 - every time we make changes
25:13 - now look at what we have here so we have
25:16 - my image and right below that we have
25:18 - two text elements take a look
25:20 - unfortunately they're not very visible
25:22 - obviously this doesn't look like a tweet
25:24 - because we haven't applied css yet as i
25:27 - told you before we use html to define
25:30 - the structure or the building block of
25:32 - our web pages in the next lesson i'm
25:35 - going to show you how to apply css so
25:37 - our page looks kind of like a real tweet
25:41 - [Music]
25:45 - all right now let's see how we can use
25:46 - css to improve the look and feel of this
25:49 - page
25:50 - look at our head element currently we
25:52 - have a single element inside the head
25:54 - element that is our title element right
25:57 - now after the title we're going to add
25:59 - another element called style
26:02 - this is where we're going to write our
26:03 - css code
26:05 - so in between style tags we're going to
26:07 - write a bunch of css rules first we're
26:09 - going to work
26:10 - on this image our image is currently too
26:13 - big so let's make it a bit smaller
26:15 - back to vs code
26:17 - over here
26:18 - we're going to type img to reference our
26:21 - image element then we type a pair of
26:24 - curly braces
26:25 - and inside the braces we write one or
26:28 - more css declarations
26:30 - each declaration contains a property and
26:33 - a value so here we can set the width
26:35 - property to let's say 100 pixels
26:38 - so we type the property colon and then
26:41 - the value and then we terminate this
26:43 - line using a semicolon so we can write
26:46 - multiple css declarations
26:48 - now let's save the changes
26:50 - back in the browser our image looks
26:52 - smaller that's a lot better
26:54 - but look at the edges the edges are so
26:56 - sharp i would like to make them a bit
26:58 - round so they appear softer now back to
27:00 - our rule
27:01 - here we're going to set
27:03 - the border dash radius property to let's
27:06 - say 10 pixels
27:08 - now don't worry about memorizing any of
27:09 - these properties we're going to go over
27:11 - them several times throughout the course
27:13 - in this lesson i just want you to get a
27:15 - sense of what it's like to use css okay
27:18 - so save the changes
27:20 - now look the edges are round and look
27:22 - softer now let me show you a trick
27:26 - if we set border radius to a value that
27:28 - is half of the width we'll get a round
27:31 - image so
27:32 - i'm going to set this to 50 pixels
27:35 - and here's the result that's a lot
27:37 - better
27:38 - now our elements are stacked vertically
27:40 - i want the image to be pushed to the
27:42 - left side so
27:44 - let's set the float property to left
27:47 - this will push the image element to the
27:49 - left side of our text element take a
27:51 - look
27:52 - so
27:53 - that's a lot better but our image is so
27:55 - close to the text i want to add some
27:57 - space after the image so
28:01 - here we use another property called
28:02 - margin dash right
28:05 - we can set it to 10 pixels
28:07 - save and
28:09 - that's a lot better
28:10 - now let's make the username bold so
28:13 - we're going to repeat one more time this
28:14 - time we're going to apply a rule
28:17 - to our paragraph element
28:19 - so here we're going to set the font dash
28:22 - weight property to
28:23 - bolt
28:25 - take a look
28:27 - see what happened both our text elements
28:29 - are bold but what if you want to apply
28:31 - this style only to the username
28:34 - well we have to separate these two
28:36 - paragraph elements so i'm going to give
28:38 - the first paragraph element an attribute
28:40 - called class
28:42 - so class equals double quotes
28:45 - class is short for classification and we
28:47 - can use this attribute to put this
28:49 - element inside a different class or a
28:52 - different category just like the
28:54 - products in a supermarket in a
28:55 - supermarket we have products in
28:57 - different categories right
28:59 - so i'm going to put this paragraph
29:01 - element inside a class or inside a
29:03 - category called username
29:06 - and then
29:07 - i'm going to change this rule
29:09 - so
29:10 - this rule is currently applied to all
29:12 - paragraph elements but i want it to be
29:14 - applied only to paragraph elements with
29:16 - the username class so right after p we
29:19 - type dot username
29:22 - now we can also remove p
29:24 - and this rule will apply to all elements
29:27 - that have the username class whether
29:29 - there are paragraph elements or other
29:31 - types of elements okay
29:33 - now save the changes and take a look so
29:37 - that's a lot better
29:40 - this is css in action as you can see css
29:43 - has a different syntax or a different
29:45 - grammar than html throughout the rest of
29:47 - the course you're going to learn both
29:49 - these languages in detail next i'm going
29:51 - to show you how to format your code
29:53 - using prettier
29:56 - hey guys mosh here i just wanted to let
29:58 - you know that this video you've been
30:00 - watching is the first hour of my
30:02 - ultimate html and css series so after
30:05 - you watch this video if you want to
30:06 - learn more from me you can enroll in the
30:08 - full course which is about 13 hours long
30:10 - and covers everything you need to know
30:12 - to build professional quality websites
30:14 - with html and css it also includes
30:17 - summary notes exercises a real project a
30:21 - certificate of accomplish and you can
30:22 - add your resume and a 30-day money-back
30:24 - guarantee to get a refund if you are not
30:26 - satisfied so you have nothing to lose
30:29 - and a lot to learn so if you're
30:30 - interested i put the link in the
30:31 - description box
30:35 - [Music]
30:40 - one thing you need to know about
30:41 - browsers is that they ignore white
30:43 - spaces in html and css code for example
30:47 - i can put all these elements on a single
30:49 - line
30:50 - and everything still works let me show
30:52 - you so save the changes back in the
30:54 - browser we have the same result as
30:56 - before because browsers don't care how
30:59 - we format our code but formatting is
31:01 - very important when it comes to reading
31:03 - and maintaining code we want our code to
31:05 - be beautiful and perfectly formatted
31:07 - just like an article this is where we
31:09 - use the prettier plugin with prettier we
31:12 - can format our code in a consistent
31:14 - fashion this is super important when
31:16 - you're part of a team because different
31:18 - people have different ways of formatting
31:19 - their code but if everyone on the team
31:21 - uses the prettier plugin the code will
31:24 - be consistently formatted so let me show
31:27 - you how to use preview
31:28 - on the top we go to the view menu
31:31 - look at the shortcut for the command
31:33 - palette on mac it's shift command and p
31:37 - on windows it's probably shift control
31:39 - mp
31:40 - so let's bring up the command panel and
31:42 - here we search for
31:43 - format document now we press enter
31:47 - we get this message saying there are
31:49 - multiple formatters for html files
31:51 - select the default formatter to continue
31:54 - the reason we're getting this message is
31:55 - that vs code by default comes with a
31:58 - formatter for formatting html files but
32:01 - we have installed prettier which is a
32:03 - separate formatter
32:04 - so let's go to configure
32:06 - and tell vs go to use prettier to format
32:10 - html and css files
32:12 - okay
32:13 - now prettier formatting my code so none
32:16 - of those elements are on the same line
32:18 - this is a lot better but let me show you
32:20 - a trick we don't want to format our code
32:22 - every time we make a change
32:24 - so we can configure vs code to
32:26 - automatically format the code the moment
32:28 - we save the changes so on the top let's
32:31 - go to the code menu then preferences and
32:35 - settings
32:36 - like here search for format and save
32:40 - here's the setting let's enable this
32:42 - setting
32:43 - now
32:44 - every time we save the changes vs code
32:46 - automatically formats our code using
32:48 - prettier
32:51 - [Music]
32:56 - we talked about the dom or document
32:58 - object model i told you that when the
33:00 - browser reads the html document that is
33:02 - returned from the server it constructs a
33:05 - document object model now let me show
33:07 - you this document object model in action
33:10 - so once again we're going to use chrome
33:11 - dev tools the shortcut on mac is shift
33:14 - command and i on windows is probably
33:17 - shift control and i i'm not really sure
33:20 - so let's open up dev tools
33:22 - now in this lesson we're going to look
33:23 - at the elements tab
33:26 - now what we have here on the left side
33:27 - is our document object model so we see
33:30 - the same elements that we created
33:32 - earlier in the course we have the html
33:34 - element head body and so on but we have
33:36 - some additional elements that are
33:38 - injected by live server for example we
33:41 - have the script element and two divs
33:43 - don't worry about these these are purely
33:45 - used by live server so it automatically
33:47 - reloads our page now we can hover over
33:50 - any of these elements and you can see
33:52 - that element highlighted on the screen
33:54 - now we can click an element
33:56 - and on the right side we can see the
33:58 - styles applied to this element so look
34:01 - at the styles we defined for the image
34:03 - element
34:04 - with border radius and so on we can
34:06 - enable or disable these styles so we can
34:08 - disable the width property and now our
34:11 - image is big
34:12 - we can bring it back we can also change
34:14 - its value so we can set it to let's say
34:17 - 50 pixels
34:18 - now our image is smaller
34:20 - we can use the up and down arrows
34:23 - to change this value this is pretty
34:24 - handy so a lot of front-end developers
34:27 - use devtools to play with these styles
34:29 - and get the look they want once they
34:31 - figure out the exact styles and their
34:33 - values then they apply them in the code
34:36 - now one more thing
34:37 - over here we can see where these styles
34:39 - have been applied so
34:41 - in index.html on line six we can click
34:44 - on this link and this takes us to the
34:47 - exact line of code where
34:49 - we wrote that style now we are currently
34:51 - on the sources tab so we can go back to
34:53 - elements and inspect other elements
34:56 - so this is the basics of inspecting
34:58 - elements using devtools we're going to
35:00 - talk about this in more detail in the
35:02 - future
35:05 - [Music]
35:09 - the last thing we're going to cover in
35:10 - this section is validation
35:13 - so as we write code we may run into
35:15 - problems if you have a typo in our code
35:17 - or don't use the right syntax or grammar
35:19 - our web pages may not look as expected
35:22 - in these situations we can use a
35:24 - validator to identify the potential
35:26 - errors in our code now currently we
35:28 - don't have any problems on this web page
35:30 - it looks perfectly fine to me but let's
35:32 - run it by the standard html validator so
35:35 - we go to validator.w3.org
35:39 - this is a standard markup validation
35:41 - service we have three methods for
35:43 - validating our html markup we can
35:46 - validate by an address if our website is
35:48 - live on our internet but this doesn't
35:50 - work for us because our website is
35:52 - currently hosted locally in our
35:54 - development server so this ip address
35:57 - that we have over here
36:00 - 127.0.0.1 this is a local ip address so
36:03 - no one else can access our website
36:06 - so here we have two other methods we can
36:09 - validate by file upload or by direct
36:11 - input
36:12 - in this case i'm going to go with file
36:14 - upload
36:15 - so let's upload our
36:17 - index.html file and check
36:20 - so look we have one warning and two
36:23 - errors the warning is saying that we
36:25 - haven't added the lang or language
36:27 - attribute to the html start tag this is
36:30 - a common best practice because with this
36:32 - we can tell search engines what is the
36:34 - language of this webpage so they can do
36:36 - a better job at displaying the results
36:39 - this is very easy to fix so here's our
36:42 - html tag we're going to add the lang
36:44 - attribute and set it to en which is
36:47 - short for english
36:49 - now what is next
36:51 - we have an error saying the character
36:53 - encoding was not declared don't worry
36:55 - about this we'll talk about this in the
36:57 - next section so let's look at the second
36:59 - error
37:00 - it's saying that an image element must
37:02 - have an alt attribute so earlier we had
37:05 - this auth attribute i told you that we
37:07 - use the alt attribute to provide a
37:09 - description for our image
37:11 - so if the image cannot be displayed the
37:13 - alternative text will be displayed again
37:15 - we're going to talk about the alt
37:16 - attribute in more detail in the future
37:19 - so back to our code let's fix this error
37:21 - real quick here's our image tag
37:23 - let's add the auto attribute
37:26 - and for the description i'm going to say
37:28 - an image of mosh hammer daddy
37:32 - now save the changes
37:33 - let's re-upload the file and validate it
37:37 - one more time
37:39 - okay this time we have only a single
37:41 - error and that has to do with character
37:43 - encoding which we're going to talk about
37:45 - in the next section
37:46 - so this is all about html validation
37:49 - now for css we have a different
37:51 - validator
37:52 - so we go to jigsaw.w3.org
37:57 - css
37:58 - validator now you don't have to memorize
38:00 - this address simply go to google and
38:02 - search for css validator
38:05 - here's the first link
38:07 - so
38:08 - we have the same interface we can
38:10 - validate our css code using an address
38:12 - or by file upload or direct input
38:15 - now in this case we have embedded all of
38:17 - our css code inside our html markup but
38:21 - as our web pages get more complex we
38:23 - want to separate our css code into
38:25 - separate files so our code is better
38:27 - organized we'll talk about this in more
38:29 - detail in the future so for now i'm
38:32 - going to copy
38:33 - all of our css code
38:35 - and then go to the third tab
38:38 - paste it over here
38:39 - and validate it
38:41 - so we don't have any errors everything
38:43 - is perfect
38:44 - so this is all about validation
38:46 - validation is very important if your web
38:48 - pages aren't displayed as expected
38:50 - always start with a quick validation
38:52 - because this can often point you in the
38:54 - right direction
38:55 - right that brings us to the end of this
38:57 - section in the next section we're going
38:59 - to explore html in more detail
39:06 - [Music]
39:09 - we're going to continue our web
39:10 - development journey and explore html in
39:13 - more detail so in this section we're
39:15 - going to cover the essential html
39:17 - elements you need to know to build web
39:19 - pages
39:20 - you will learn all the elements used for
39:21 - displaying text links images lists
39:25 - tables as well as container and
39:27 - structural or semantic elements even if
39:30 - you know the basics of html i would
39:32 - still encourage you to watch this
39:33 - section thoroughly because a lot of
39:35 - people don't use these elements the
39:37 - right way so let's jump in and get
39:39 - started
39:43 - [Music]
39:50 - earlier in the course i told you that we
39:52 - use the head section to give browsers
39:54 - and search engines information about the
39:56 - web page so let's explore it in a bit
39:58 - more detail i'm going to start with a
40:00 - blank document now let me show you a
40:02 - cool trick
40:03 - if we type an exclamation mark and then
40:05 - press tab
40:06 - we get a basic html boilerplate which
40:09 - means a basic html template
40:12 - so on the top we have our doctype
40:14 - declaration
40:15 - below that we have our html element with
40:17 - the lang attribute which is a common
40:19 - best practice
40:20 - next we have our head section with a
40:22 - bunch of elements we're going to talk
40:24 - about in a second
40:25 - followed by the body section so this is
40:27 - a very basic html boiler plate
40:30 - now what do we have in the head section
40:32 - well
40:33 - we have a couple of metal elements for
40:35 - giving information about this web page
40:37 - the first meta element is for defining
40:39 - the character set what is a character
40:41 - set well
40:43 - computers don't understand characters
40:44 - like abc and so on they only understand
40:48 - numbers which are represented in the
40:50 - binary format zeros and ones so using a
40:53 - character set we can map a character to
40:56 - a numeric value
40:57 - the first character set that was
40:59 - designed was the ascii character set
41:01 - which is short for american standard
41:03 - code for information interchange ascii
41:05 - can only represent the characters in the
41:08 - english language so it's very limited
41:10 - so over here different character sets
41:12 - have been created to represent more
41:14 - characters in international languages
41:17 - the character said that we use most of
41:19 - the time these days is utf-8 which can
41:21 - represent almost all characters in the
41:23 - world
41:24 - so back to our code with this meta
41:26 - element we're defining the character set
41:29 - used in this html document okay
41:32 - now below that we have
41:34 - a meta element for configuring the
41:36 - viewport
41:38 - the viewport is the visible area of a
41:40 - web page so it is this area over here
41:44 - obviously on a mobile device or on a
41:46 - tablet our viewport is smaller but here
41:48 - on desktop we can change the size of the
41:51 - viewport by resizing the browser
41:53 - so now our viewport is smaller okay
41:56 - now back to our code
41:58 - with this element we're defining the
42:00 - initial width and
42:02 - zoom factor
42:04 - for the viewport we'll talk about this
42:06 - in more detail in the future for now all
42:08 - i want you to know is that we need this
42:10 - element so our web pages look good on
42:13 - all devices mobiles tablets and desktop
42:16 - computers so as a best practice every
42:18 - web page should have at least these two
42:20 - meta elements but we have additional
42:23 - meta elements let me show you so if you
42:25 - type meta
42:27 - in this list you can see all possible
42:29 - meta elements
42:30 - for example we have this element for
42:32 - defining keywords on a web page so let's
42:34 - select this
42:36 - here we can type multiple keywords like
42:38 - html comma css and so on
42:41 - in the past these keywords were heavily
42:43 - used for search engine optimization but
42:46 - these days most search engines don't put
42:48 - too much weight on these keywords but we
42:50 - can still use them to define the
42:51 - keywords that represent this page
42:54 - we have another meta element for
42:56 - defining a description for this page so
42:58 - if you type meta colon desk and then
43:01 - press tab or enter
43:03 - here we can type a description for this
43:05 - page
43:05 - what we type here will appear on google
43:08 - or other search engines when someone
43:10 - searches for a website for example if we
43:13 - search for apple here's what we get now
43:15 - look at this text
43:17 - what you see here
43:19 - comes from this element over here so
43:21 - this is the purpose of metal elements
43:23 - with this metal element we can give
43:25 - information about the web page
43:27 - alright next we're going to talk about
43:28 - the elements you need to know for
43:30 - working with text
43:33 - [Music]
43:38 - all right now let's talk about the most
43:39 - common elements for working with text
43:42 - so you learn about the p or paragraph
43:44 - element which we use for displaying some
43:46 - text
43:47 - so here i'm going to say i love to teach
43:49 - you html
43:51 - now sometimes we want to emphasize a
43:53 - part of our text let's say the html word
43:56 - here to do that we can wrap it inside an
43:59 - m or emphasis element so here i type m
44:02 - press tab here's the emphasis element
44:05 - let's hover over it and see what the
44:07 - tooltip says
44:08 - it says the m element represents stress
44:11 - emphasis of its content so whenever we
44:13 - want to emphasize some content we can
44:15 - wrap it inside the m element so in this
44:18 - case i'm going to move html inside these
44:21 - tags
44:22 - now let's save the changes
44:25 - here's what we get so by default
44:27 - browsers display emphasized content in
44:30 - italic but don't assume that whenever
44:32 - you want to display italic content you
44:34 - should use the m element because the
44:36 - purpose of the m element is to emphasize
44:39 - content in our html document and this
44:41 - helps search engines extract important
44:44 - content in our documents anything to do
44:46 - with styling should be done in css for
44:48 - example here we can change the default
44:50 - style of emphasize element and remove
44:53 - the italic let me show you so in the
44:55 - head section
44:57 - we add the style element
44:59 - and here we define a rule for emphasized
45:01 - content
45:02 - we can set the color to red
45:04 - and font style
45:06 - to normal
45:07 - now don't worry about memorizing any of
45:09 - these css properties we're going to go
45:11 - over them multiple times throughout the
45:13 - course but let's see what happens now
45:15 - that we apply these styles
45:17 - so our emphasized content is displayed
45:20 - in red and is no longer italic
45:22 - now in the past we had an element called
45:25 - i
45:25 - which was short for italic
45:28 - if we use this element
45:30 - we get the same result as before
45:32 - our content is displayed in italic
45:35 - but this element is considered
45:36 - deprecated because html is not meant for
45:39 - styling it should only be used for
45:41 - structuring content
45:43 - so don't use the i element to display
45:45 - content as italic okay
45:47 - now we have a similar element in html
45:49 - called strong
45:51 - let's hover over it and see
45:53 - what the tooltip says the strong element
45:55 - represents strong importance seriousness
45:58 - or urgency of its contents
46:00 - conceptually it's kind of similar to the
46:02 - emphasis element so where you should use
46:05 - it really depends on your context on
46:07 - your content now let's save the changes
46:09 - and see what we get
46:11 - so by default strong elements are
46:13 - displayed as bold but once again we can
46:16 - always change the styling now in the
46:18 - past we had another element called b
46:21 - which is short for bold so whenever we
46:23 - wanted to make something bold we use
46:25 - this element but once again this element
46:27 - is considered deprecated because styling
46:30 - should be done in css and not in html
46:32 - okay
46:33 - so don't use b or i elements
46:36 - now i'm going to remove
46:38 - this element and just add html let me
46:41 - show you a cool trick
46:42 - let's say we want to wrap this word with
46:44 - the m element there is a shortcut for it
46:47 - so on the top we go to the view menu
46:50 - look at the shortcut for the command
46:51 - palette on mac is shift command on p and
46:55 - on windows is probably shift ctrl np
46:58 - so let's select html
47:00 - and then bring up the command palette
47:02 - with this command palette we can execute
47:04 - commands in vs code so here i'm going to
47:06 - search for a command called wrap with
47:08 - abbreviation that is the first command
47:10 - in the list
47:11 - now we press enter and here we type the
47:14 - element that we want to use to wrap our
47:16 - selected content in this case m
47:19 - press enter done
47:21 - so i didn't have to manually create an m
47:23 - element and then move html inside it
47:25 - it's very handy
47:27 - so this is all about text now let's talk
47:29 - about headings
47:30 - so in html we have six heading elements
47:34 - h1
47:36 - we have h2
47:39 - h3
47:41 - h4
47:43 - h5
47:45 - and h6
47:47 - so let's see what we get
47:50 - so
47:51 - heading 1 represents the most important
47:54 - heading and heading 6 represents the
47:56 - least important heading
47:58 - now one common mistake that i see
47:59 - amongst a lot of people is that they
48:01 - choose these headings based on their
48:03 - size so if they want to have a heading
48:06 - with this size they would just use
48:08 - heading 4. that is not how you're
48:10 - supposed to use headings because the
48:12 - size can always be changed with css it's
48:14 - a matter of styling we should use these
48:16 - headings to create a hierarchy so every
48:19 - web page should have one and only one h1
48:23 - element this heading represents what
48:25 - this page is all about now nothing
48:27 - happens if you have multiple h1 elements
48:30 - for example
48:31 - i can duplicate this line and say
48:33 - heading 1 plus
48:35 - now look we have two h1 elements but
48:38 - this is going to confuse search engines
48:40 - they're not going to figure out what
48:42 - this page is really all about
48:44 - so every page should have a single
48:46 - h1 element so
48:49 - i'm going to remove this line
48:51 - now after we use h1 then we should use
48:53 - h2 we should not jump to h4
48:56 - so let's say on this page we're going to
48:57 - have two sections one for html the other
49:00 - for css so my next heading should be h2
49:04 - and here we can type html
49:06 - obviously below this heading we can have
49:08 - some text
49:09 - so i'm going to say html tutorial
49:13 - our next heading should be h2 so
49:16 - this is the css section
49:18 - and in this section we can have some
49:19 - additional text let's say css tutorial
49:23 - now i'm going to delete
49:25 - these four headings
49:27 - so
49:28 - let's take a look
49:29 - so we have a hierarchy on the top we
49:31 - have an h1 element below that we have
49:34 - two h2 elements now let's say in this
49:36 - section we're going to have two
49:38 - subsections there we should use h3
49:41 - elements
49:42 - so
49:43 - here's our html section
49:45 - in this section we're going to have two
49:47 - h3 elements let's say code
49:50 - and exercise
49:52 - now take a look
49:54 - so we have a hierarchy this is how we
49:56 - should use these heading elements the
49:58 - better we can represent the structure of
50:00 - our document using html the better
50:03 - search engines can read and understand
50:04 - our content
50:06 - so that's all about text next we're
50:08 - going to talk about displaying special
50:10 - characters in html
50:14 - [Music]
50:18 - some characters are reserved in html and
50:20 - to display them we have to use a special
50:22 - notation for example let's say we want
50:25 - to wrap the word html with angle
50:27 - brackets see what's going to happen so i
50:30 - type a left angle bracket and a right
50:33 - angle bracket see what happened
50:36 - vs code thought we're adding an html
50:37 - element so it automatically generated
50:40 - the closing tag we don't want this so
50:42 - let's delete it
50:44 - now back in the browser
50:46 - look where is our html word it's not
50:48 - here because the browser interpreted
50:50 - this
50:51 - as an html tag this is not what we want
50:54 - we want to display this exactly as this
50:57 - so to solve this problem we're going to
50:58 - use html entities all these entities
51:01 - start with an ampersand and end with a
51:04 - semicolon in between these two
51:06 - characters we type a few characters that
51:08 - determine the type of the html entity so
51:11 - we have an entity for displaying the
51:13 - less than sign
51:15 - that is l t short for less than
51:19 - now let's remove this
51:20 - similarly we have another html entity
51:23 - for displaying the greater than sign so
51:25 - we type an ampersand gt which is short
51:28 - for greater than
51:30 - followed by a semicolon
51:31 - now back to the browser that's exactly
51:34 - what we wanted perfect another common
51:37 - html entity is the copyright symbol
51:40 - so
51:41 - at the end i'm going to type an
51:42 - ampersand
51:44 - copy and a semicolon
51:46 - now take a look
51:47 - here's our copyright symbol beautiful
51:50 - now we have so many editors in html and
51:52 - quite frankly you don't need to memorize
51:54 - any of them in fact you're not going to
51:56 - use 99 of them but in case you're
51:58 - curious let me show you the complete
52:00 - list
52:01 - so on google search for html entities
52:05 - and on this second link dev.w3.org
52:09 - you can see the complete list of news
52:11 - entities
52:12 - so as you can see there are so many
52:14 - entities and honestly i have never used
52:16 - any of them the only ones i have used
52:19 - are these three plus non-breaking space
52:22 - let me show you what that is about so
52:24 - i'm going to do this line
52:26 - and generate some dummy text so we add a
52:29 - paragraph element now to generate some
52:31 - dummy text we type lorem
52:33 - followed by the number of words we want
52:35 - to generate let's say 50. tab
52:39 - look this is some dummy text in latin
52:42 - now let's preview it in the browser
52:45 - so here's what we get
52:46 - let's imagine that the last part on the
52:48 - first line
52:50 - and the first word on the second line
52:51 - should be stick together here we have a
52:53 - line break in between these two words
52:56 - you want to prevent that so
52:58 - i'm going to copy this word now
53:01 - here in vs code let's bring up the
53:02 - search panel by pressing command and f
53:05 - on mac or ctrl and f on windows
53:08 - now we paste this word
53:10 - okay here it is we want to make sure
53:12 - that these two words are always together
53:14 - there is no line breaking between them
53:17 - so i'm going to replace this regular
53:19 - space with a non-breaking space which is
53:22 - an html entity so we type an ampersand
53:25 - nbsp which is short for non-breaking
53:28 - space
53:29 - followed by a semicolon
53:31 - now take a look
53:33 - so
53:34 - both these words
53:35 - are on the second line
53:37 - so this is all about html entities next
53:39 - we're going to talk about links
53:43 - [Music]
53:47 - almost every webpage on the internet has
53:49 - links to other pages or websites to
53:52 - create these links we use the anchor
53:53 - element so we type a that is short for
53:56 - anchor and then press tab
53:58 - now every anchor element should have an
54:00 - href attribute
54:02 - href is short for hypertext reference i
54:05 - know it's a mouthful it basically means
54:07 - a url or a link so for this demo i'm
54:09 - going to create a second page called
54:12 - about.html and then link to it over here
54:15 - so in the explorer panel
54:17 - let's add a new page
54:19 - called about.html
54:22 - now here we're going to create a basic
54:24 - html boilerplate remember how to do that
54:27 - we type an exclamation mark and then
54:29 - press tab
54:30 - that's it beautiful
54:31 - now back to index.html
54:34 - here we can use a relative or an
54:36 - absolute url what do you mean by that
54:38 - well a relative url starts from the
54:41 - current page so currently we are on
54:43 - index.html and we want to go to
54:45 - about.html
54:47 - now currently both these pages are in
54:49 - the same folder
54:50 - so we can type a relative url to
54:53 - about.html like this about html
54:57 - that's a relative url now what if
54:59 - about.html was in a different folder so
55:02 - let's add a new folder to our project
55:05 - called company
55:07 - and then move about
55:09 - to this folder
55:10 - now where is about.html relative to the
55:13 - current page it's inside the company
55:15 - folder right so here we type company
55:18 - slash about.html
55:21 - this is a relative url
55:23 - now let's give this link a text i'm
55:25 - going to say about me so we type our
55:27 - text inside the anchor element okay
55:30 - save the changes
55:31 - back to the browser here's our link
55:34 - click
55:35 - and we're currently on the about page
55:36 - which is empty beautiful
55:38 - now back to our homepage
55:40 - instead of a text we can also use an
55:42 - image so i'm going to delete about me
55:45 - and add an image element so img tab once
55:49 - again here we can type a relative url to
55:51 - our target image so i'm going to go with
55:54 - images
55:55 - mosh.jpg now save
55:58 - take a look
55:59 - obviously this image is way too big we
56:02 - can always use css to resize it but that
56:04 - aside look at the mouse icon
56:07 - when we hover over this image it changed
56:10 - to a hand to indicate that this image is
56:12 - clickable okay
56:14 - now back to our code to keep things
56:16 - simple i'm going to get rid of this
56:18 - image and
56:19 - get back
56:20 - to our text about me
56:22 - now let's go to the about page and add a
56:24 - link back to the home page so
56:27 - over here
56:28 - we're going to add
56:30 - an anchor element
56:32 - what should we type for the href
56:33 - attribute well currently we are inside
56:36 - the company folder we have to go one
56:38 - level up so we can access index.html
56:41 - right
56:42 - to do that we type double periods and a
56:44 - forward slash with this we can go one
56:46 - level up now at this level which is the
56:49 - root of our website we have the company
56:51 - folder the images folder and index.html
56:54 - so we can reference index.html
56:57 - and for the text we're going to say home
56:59 - page again this is another example of a
57:02 - relative url because it starts from the
57:04 - current page and goes somewhere else now
57:07 - if you're inside a deeply nested folder
57:09 - structure we might have to go multiple
57:11 - levels up so double period and a forward
57:14 - slash then we repeat and repeat with
57:17 - this we can go three levels up
57:19 - now as you can see urls like this kind
57:21 - of look messy they look hard to read in
57:24 - those cases we can use an absolute url
57:26 - so we start with a forward slash and
57:30 - this represents the root of our website
57:32 - at this level we have access to
57:34 - index.html
57:36 - so this is an absolute url okay
57:38 - now back to index.html
57:41 - here we are linking to an html document
57:43 - but we can also link to non-html
57:46 - documents like images pdfs powerpoints
57:49 - and so on so let's add a link to my
57:51 - image so for the href i'm going to say
57:54 - images slash mosh.jpg
57:57 - and for the text i'm going to say my
58:00 - photo
58:01 - save
58:02 - take a look so here's our second link
58:05 - click
58:06 - my image is displayed in the browser
58:08 - but what if i want to prompt the user to
58:10 - download it that's very easy
58:12 - we're going to add the download
58:14 - attribute to our anchor element so we
58:16 - type download press enter now this
58:19 - attribute doesn't have a value so we can
58:21 - remove the double quotes and the equal
58:24 - sign
58:25 - so we just add the attribute name now
58:27 - save
58:28 - back to the browser
58:30 - we go back
58:31 - here we have to manually refresh the
58:33 - page because the live server only
58:35 - refreshes the current page now
58:37 - previously we were on my image so that
58:38 - was the url that live server refreshed
58:41 - so here we refresh
58:42 - to get the latest changes now when i
58:44 - click on this link instead of seeing my
58:46 - image we're going to see my image
58:48 - getting downloaded take a look click
58:51 - and here's my image beautiful
58:53 - now we can also link to other parts of
58:55 - this page so
58:57 - let's create two sections with a lot of
58:58 - text so i'm going to add an h2 element
59:01 - and of course i missed the h1 but let's
59:04 - not worry about it for this h2 we're
59:05 - going to say html
59:07 - and below that we're going to add some
59:08 - dummy text with 200 words so paragraph
59:12 - lorem 200
59:14 - good
59:15 - now right after that we're going to add
59:16 - another h2 for the css section
59:19 - with some more text
59:22 - okay
59:23 - let's save the changes
59:24 - take a look
59:26 - as you can see the css section is below
59:29 - default so we have to scroll down to see
59:31 - what we can do here
59:33 - is on the top we can add a link to the
59:35 - css section so when the user clicks on
59:37 - that they will immediately jump to the
59:39 - css section that is very easy
59:41 - so here's the css section first we have
59:44 - to give this element a unique identifier
59:46 - just like everyone in the real world can
59:48 - have a unique identifier like a driver's
59:50 - license or a password every element on a
59:53 - page can also have a unique identifier
59:56 - so here i'm going to set the id
59:57 - attribute to
59:59 - css
60:00 - or we can use a more descriptive name
60:02 - like section
60:04 - dash css
60:06 - the name doesn't really matter here what
60:08 - matters is that we're defining what is
60:10 - called a fragment or a place on this
60:13 - page now we're going to add a link to
60:15 - this fragment so on the top
60:19 - let's add another anchor element
60:22 - now for the href we're going to type
60:24 - the pound sign followed by the name of
60:26 - our fragment which is section
60:28 - css
60:30 - and for the text we're going to say css
60:32 - now
60:33 - back to the browser take a look i'm
60:35 - going to click on this
60:36 - we immediately jump to the css section
60:38 - beautiful now a lot of websites like
60:40 - this also have a link that helps you
60:43 - jump to the top of the page let's see
60:45 - how we can create that
60:46 - so after the css section
60:50 - i'm going to add
60:51 - another anchor element
60:53 - now for the href i'm going to use
60:56 - an empty fragment so we just type a
60:58 - pound sign without an identifier
61:01 - and then we say jump to top
61:04 - take a look so
61:06 - here's our link click and now we're on
61:08 - top of the page now let's see how we can
61:11 - link to external websites
61:13 - so let's add another anchor element to
61:15 - link to google
61:17 - now what should we type here well
61:19 - google.com is a different website so
61:21 - here we cannot use a relative url we
61:24 - have to use an absolute url but if you
61:26 - start with a forward slash we're
61:28 - referencing the root of our website but
61:30 - in this case we want to go to a
61:31 - different website how can we do that
61:34 - well we have to start with the protocol
61:36 - so https colon
61:39 - to forward slashes google.com
61:42 - now let's type google
61:44 - and test our page
61:46 - click
61:48 - we're on google beautiful now sometimes
61:50 - when linking to external website we want
61:52 - that link to open in a new browser
61:54 - window or a new tab let me show you how
61:56 - to do that
61:57 - so
61:58 - here's our anchor
62:00 - we set the target attribute to underline
62:02 - blank
62:04 - save
62:05 - now back to the homepage once again we
62:08 - have to manually refresh to get the
62:09 - latest changes
62:11 - okay
62:12 - now when i click on google
62:14 - you see a new tab beautiful and one last
62:17 - thing
62:18 - we can also link to emails so i'm going
62:20 - to add an anchor
62:21 - and for href i'm going to say mailto
62:24 - colon
62:26 - programming
62:27 - with mosh gmail.com
62:31 - email me
62:32 - save the changes
62:34 - now back to our page when i click on
62:37 - this link my mail client will open and
62:39 - my email address will be pre-populated
62:41 - take a look so click
62:44 - and here's my mail client
62:46 - so this is all about links now one last
62:48 - thing before we finish this lesson what
62:50 - is the difference between a link and a
62:51 - hyperlink well a link is just an address
62:54 - a url the location of the target page a
62:57 - hyperlink is the element that the user
62:59 - can click on to navigate to that target
63:01 - page that is the difference between a
63:03 - link and a hyperlink but quite often
63:05 - these terms are used interchangeably
63:07 - alright we're done with this lesson next
63:09 - we're going to talk about images
63:13 - [Music]
63:17 - all right now let's talk about embedding
63:18 - images in a bit more detail for this
63:20 - lesson i'm going to grab an image from
63:22 - unsplash.com which is where we can find
63:24 - a lot of beautiful and freely usable
63:27 - images
63:28 - so let's search for coffee
63:31 - there are tons of coffee pictures here
63:33 - i'm going to grab
63:35 - this picture
63:36 - we can download it for free
63:38 - now look this image comes in different
63:40 - sizes small medium and large for now
63:43 - we're going to grab this image in a
63:44 - small size but in the future we're going
63:46 - to talk about embedding images at
63:48 - different sizes depending on the device
63:51 - so on mobile devices we want to serve a
63:53 - smaller image and on desktop computers
63:56 - we want to serve a larger image for now
63:58 - let's not worry about these complexities
64:00 - we'll have a conflict section on this
64:02 - topic later on
64:03 - so let's download the small image
64:06 - now it says say thank you to nathan
64:09 - thanks nathan this is a beautiful
64:11 - picture you have done a great job
64:13 - now i'm going to drag and drop this
64:14 - image onto the images folder
64:17 - and then rename it to coffee
64:19 - we want to give it a descriptive name
64:21 - this is a small search engine
64:22 - optimization tip when we provide
64:24 - descriptive names for our images search
64:27 - engines can better understand and index
64:29 - our pages okay
64:31 - so here's our image now
64:34 - let's add an image element
64:36 - we set the source to images
64:38 - coffee.jpg
64:40 - now what about the alt attribute well i
64:43 - briefly mentioned that we use this
64:44 - attribute to provide textual description
64:47 - of the image it's not compulsory but is
64:49 - highly recommended for a number of
64:51 - reasons the first reason is to make our
64:53 - page accessible to visually impaired
64:55 - people these people use a screen reader
64:58 - to read the web out to them so with this
65:00 - alternative text we can tell them what
65:02 - we are showing on the page and that
65:04 - means we should write a good meaningful
65:06 - description here like a coffee mug
65:09 - on a table
65:10 - don't write something like image or
65:12 - image one that is pointless now the
65:14 - second benefit of providing an
65:16 - alternative text is that we help search
65:18 - engines read this text and understand
65:21 - what we're providing here and there's
65:23 - one more benefit
65:24 - if this image cannot be loaded for some
65:26 - reason the alternative text is shown let
65:29 - me show you what i mean so i'm going to
65:31 - add a typo here
65:32 - now
65:33 - back to the browser look
65:35 - the image is not loaded but we see the
65:37 - alternative text this can also happen if
65:40 - there is a network connectivity issue if
65:42 - the user gets disconnected they can
65:43 - still see the alternative text
65:46 - so let's remove the typo now let's talk
65:48 - about sizing images as i told you before
65:51 - we can use css to resize our images so
65:54 - here in the head section
65:55 - let's add
65:56 - a style element
65:58 - and apply a rule to our image
66:01 - now this rule is applied to all images
66:03 - on the page this is probably not
66:05 - something we want to do in the real
66:06 - world scenario in a real-world scenario
66:09 - we want to apply a class to this element
66:11 - and then define rules for that class
66:14 - we'll talk about this in more detail in
66:15 - the future
66:16 - so for now let's give this image a width
66:19 - of 200 pixels and a height of 200 pixels
66:23 - now
66:24 - there's a tiny problem in our image can
66:26 - you tell
66:28 - our image is kind of squashed here's the
66:30 - reason
66:31 - we're dealing with a rectangular image
66:33 - look this is a rectangular image but
66:35 - we're converting it to a square image
66:38 - now look at the shape of this coffee mug
66:40 - it's kind of round right like compared
66:42 - with
66:43 - what we have over here our image is
66:45 - vertically squashed let me show you
66:47 - another way to verify this
66:48 - we can right click on the image
66:50 - and then go to inspect
66:53 - this opens chrome devtools and selects
66:55 - our image in the dom
66:57 - now on the right side we can see the
66:59 - styles that we applied to this element
67:01 - now i'm going to disable the height
67:03 - property
67:04 - and i want you to pay close attention to
67:06 - the image and see how the shape changes
67:08 - so look
67:10 - now the coffee mug is more round but if
67:13 - i applied the height property
67:15 - it becomes squashed so how can we solve
67:17 - this problem well we have a new property
67:19 - in css called object fit
67:22 - so here we can set object fit to one of
67:25 - these values most of the time we use
67:27 - cover so the image covers its containing
67:30 - box what is this containing box well
67:33 - first let me set this to cover
67:35 - here we have this image element right
67:38 - conceptually there is a box around every
67:40 - element in an html document we don't see
67:43 - this box but the browser uses that box
67:46 - to figure out how the page should be
67:47 - displayed so here we have a box with
67:49 - this dimension 200x200 and in this box
67:53 - we're trying to insert this image right
67:56 - now when we set object fit to cover
67:58 - our image will get resized and
68:00 - potentially cropped so it covers the
68:03 - entire containing box let's verify this
68:06 - so save the changes and back in the
68:07 - browser look our coffee mug is round but
68:10 - if i disable the object fit property
68:14 - it gets squashed again
68:15 - so object fit is a very useful property
68:18 - now we can always play with all possible
68:20 - values over here so i'm going to select
68:23 - this deleted
68:25 - now using the up and down arrows
68:27 - we can go through this list and see the
68:29 - impact of every value now i'm not going
68:32 - to go over all these values and explain
68:33 - what they mean this is pointless you can
68:36 - always figure them out on your own just
68:37 - remember that most of the time
68:40 - we use cover so the image covers the
68:42 - entire containing box
68:44 - alright this is all about the images for
68:45 - now next we're going to talk about video
68:47 - and audio
68:51 - hey guys mosh here i just wanted to let
68:53 - you know that this video you've been
68:54 - watching is the first hour of my
68:56 - ultimate html and css series so after
68:59 - you watch this video if you want to
69:01 - learn more from me you can enroll in the
69:02 - full course which is about 13 hours long
69:05 - and covers everything you need to know
69:06 - to build professional quality websites
69:08 - with html and css it also includes
69:11 - summary notes exercises a real project a
69:15 - certificate of accomplish and you can
69:16 - add your resume and a 30 day money back
69:19 - guarantee to get a refund if you're not
69:21 - satisfied so you have nothing to lose
69:23 - and a lot to learn so if you're
69:24 - interested i put the link in the
69:26 - description box