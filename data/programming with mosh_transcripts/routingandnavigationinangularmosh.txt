00:00 - [Music]
00:01 - in this section we're going to look at
00:03 - implementing routing and navigation so
00:06 - by the end of this section you will have
00:08 - an in-depth understanding of how routing
00:10 - works in angular and you'll be able to
00:13 - add navigation to your angular apps
00:15 - where specifically you're going to learn
00:17 - about configuring routes implementing
00:20 - single page applications working with
00:23 - route and query parameters and
00:24 - programmatic navigation now let's guess
00:28 - Darla
00:33 - so far you have seen a feel of the
00:35 - built-in modules in angular we abused
00:38 - the forms module the reactive forms
00:40 - module the HTTP module and now it's time
00:44 - to explore another module that is the
00:46 - router module so in this module we have
00:49 - a bunch of directives and services that
00:51 - we use for implementing navigation in
00:54 - our applications you're going to learn
00:56 - about this module throughout this
00:57 - section now there are three steps to
01:00 - implement navigation first we need to
01:03 - configure the route in our application
01:05 - each route determines what component
01:08 - should be visible when the user
01:10 - navigates to a certain URL so a route is
01:13 - the mapping of a path to a component
01:16 - second we need to add a router an outlet
01:19 - and that is where we display the
01:21 - corresponding component when a given
01:24 - route becomes active and finally we need
01:27 - to add links so over the next few
01:30 - lectures we're going to explore each of
01:32 - these steps in detail
01:38 - so here's a simple application we're
01:40 - going to work on throughout this section
01:42 - on the top we have a navigation bar with
01:45 - two links followers and posts the
01:48 - followers page is what we had as an
01:50 - exercise and a section about consuming
01:52 - HTTP services so note the URL in the
01:55 - browser's address bar that is slash
01:58 - followers when we click on a follower we
02:02 - go to a different URL that is profile
02:04 - slash and here we have two parameters
02:08 - the first one is the username and the
02:10 - second one is the user ID and after that
02:13 - we have a query string so we have a
02:15 - question mark with one query string
02:18 - parameter which is foo so you're gonna
02:20 - learn how to implement routes with
02:23 - multiple parameters and query strings in
02:25 - this section now we also have another
02:27 - link on our navigation bar that is posts
02:30 - which takes us to our posts page and
02:33 - note that the URL is slash posts so the
02:37 - first step to implement this navigation
02:38 - is to configure our routes
02:42 - now back in the project I'm gonna go to
02:44 - app module and configure our routes now
02:48 - if you want to code along with me
02:49 - download the zip file I've attached to
02:51 - this lecture then run npm install to
02:56 - install all the node packages and then
02:58 - ng serve okay
03:01 - all right now let's go to app that
03:04 - module
03:06 - so the first thing I want you to note
03:07 - here is that in the declarations array
03:10 - you're going to see a few new components
03:14 - so we've got navbar component which is a
03:17 - very simple bootstrap navigation
03:19 - component let me show you
03:20 - so navbar dot HTML very simple markup
03:26 - that I copied from bootstrap website so
03:28 - in this navigation bar we have two links
03:31 - followers and posts now back in app
03:34 - module the other components here are
03:37 - home component github profile component
03:40 - and not found component these are really
03:43 - basic components there is no code there
03:45 - is no markup
03:46 - I simply generated these with angular
03:49 - CLI for the purpose of this section now
03:51 - one more thing I want you to pay
03:52 - attention to is that here we have an
03:56 - import statement to import the router
03:59 - module from angular slash router so we
04:03 - have imported our router module now
04:04 - we're ready to define our routes so
04:07 - let's go to the imports array right here
04:12 - we're gonna call router module dot for
04:17 - route for route is a static method
04:20 - defined in the router module class and
04:23 - we use this to define the route route
04:25 - for our application now as our
04:28 - application grows we may want to break
04:30 - that application into smaller more
04:32 - manageable modules then in each module
04:35 - we're going to have a set of routes for
04:37 - that particular area of the application
04:39 - then instead of using for route we're
04:42 - gonna use for child you're gonna see
04:45 - this later in the course so for now
04:47 - don't worry about it so back to full
04:49 - route here we pass an array of routes
04:52 - each route is an object with two
04:55 - properties one is path and the other is
05:00 - component with this you're tilling
05:04 - angular router that whenever the browser
05:06 - address changes to this path display
05:09 - this component so here I'm gonna add the
05:12 - first route for our home page so the
05:14 - component should be home component and
05:17 - note that here we don't have
05:19 - a leading slash so none of our routes
05:22 - started with a slash and an empty pass
05:25 - represents the home page or the default
05:27 - route now let's add a comma here and
05:30 - duplicate this the second route is for
05:34 - our followers page so followers and the
05:38 - component is followers github followers
05:41 - component let's duplicate this again now
05:45 - when we click on a follower we want to
05:46 - see their profile so here for the third
05:49 - route the path should be something like
05:51 - this profile now here we want to add a
05:54 - parameter so slash and to add a
05:58 - parameter we use : and then we add the
06:01 - name of the parameter so user name so in
06:05 - this path we have a parameter called
06:07 - user name that will be placed
06:10 - dynamically at runtime you're going to
06:12 - see this later in this section now the
06:15 - component should be github profile
06:19 - component okay now we can reformat this
06:24 - code it's cleaner easier to the eyes all
06:31 - right this is much better now two more
06:34 - routes
06:34 - so let me duplicate this last route I'm
06:39 - gonna change the path to post and the
06:42 - component to post component now if the
06:46 - user navigates to a different URL that
06:48 - is not a valid route we want to display
06:50 - a typical not found page so let's
06:55 - duplicate this one more time now for the
06:59 - past I'm gonna use two asterisks this
07:02 - represents a wild card and this
07:04 - basically catches any URLs in the
07:07 - browser address bar so here I'm gonna
07:10 - change the component to not found
07:12 - component now the order of this route is
07:16 - important so if I put this last route at
07:19 - the beginning of our routes array this
07:22 - pattern this wild card is going to catch
07:24 - any route and we're only gonna see that
07:27 - not found page as another example let's
07:31 - change the
07:33 - as for this route to followers slash
07:36 - username so now with this configuration
07:39 - when we navigate to followers slash
07:41 - anything the path in the first route
07:44 - here will match the URL and as a result
07:47 - get how followers component will be
07:49 - displayed in other words with this
07:52 - configuration we will not be able to
07:54 - look at the profile of a given follower
07:56 - so we need to put more specific routes
07:59 - on the top so I'm gonna move this on top
08:02 - of the followers route so cut from here
08:04 - and paste it here so now the first route
08:08 - is more specific and if you have a URL
08:10 - with this pattern this route will be
08:12 - active and github profile component will
08:15 - be displayed so this is how we define
08:17 - routes next we're going to look at
08:19 - router outlet
08:25 - so we have defined our routes here in
08:27 - app module now if we switch over to the
08:30 - browser we're going to see an error so
08:34 - our generic error handler just kicked in
08:36 - and displayed this alert now let's take
08:39 - a look at the console so we have this
08:42 - error cannot find primary outlet to load
08:46 - home component so as I told you before
08:49 - the second step to implement routing is
08:51 - to add a router outlet and that's where
08:55 - angular router is going to display the
08:57 - component that is associated with the
08:59 - current route so let's go to app dot
09:03 - HTML so currently we only have the
09:07 - navigation bar now below that I'm gonna
09:10 - add a router outlet element this is a
09:14 - directive that is defined in the router
09:17 - module when angular sees this it's going
09:20 - to render the component associated with
09:22 - the current route after this router
09:24 - outlet so it's not going to render it
09:27 - inside this element let me show you so
09:29 - back in the browser alright we don't
09:32 - currently have any errors let's inspect
09:34 - this page so body we have app fruit we
09:41 - have our navbar here's our router outlet
09:44 - and this is our home component so you
09:47 - can see that it's not rendered inside
09:50 - router outlet it's rendered after this
09:53 - element all right now back to the page
09:57 - let's test our routes so currently we
10:00 - are at localhost for 4200 and as you can
10:03 - see our home component is visible now if
10:07 - I change this view RL to slash followers
10:11 - we get the list of followers beautiful
10:14 - so this route is working properly if I
10:17 - change this to followers / 1 we get the
10:22 - profile page perfect so our more
10:25 - specific route is working now if I
10:27 - change this to posts we get our posts
10:32 - page beautiful and finally if I change
10:34 - this to an invalid URL we get the nut
10:39 - found page so all the routes are working
10:41 - properly
10:42 - next we need to add links so as we click
10:45 - on these links in the navigation bar we
10:47 - get the right page currently this is not
10:49 - working properly
10:54 - now we're ready to add links so let's go
10:57 - to navbar dot HTML so currently we have
11:02 - two links on the navigation bar
11:03 - followers and posts and each of these
11:07 - links as you can see has an href
11:09 - attribute in angular applications we
11:12 - don't use this attribute let me show you
11:15 - why so I'm gonna change the value of
11:19 - this href attribute to slash followers
11:22 - and similarly for the second link I'm
11:25 - gonna change this to slash posts let's
11:29 - see what happens when we use the href
11:31 - attribute so back in the browser so
11:35 - currently we're on the home page but you
11:37 - can see the followers link in the
11:39 - navigation bar is highlighted I know
11:41 - this is a little bit confusing don't
11:43 - worry about that as we're gonna fix this
11:45 - in the next lecture but note that when I
11:47 - click under links in the navigation bar
11:49 - the page is going to flicker so I click
11:53 - on followers did you see the page
11:56 - flickered it went blank for a split
11:59 - second you're gonna see this again so
12:01 - I'm gonna click on posts look now this
12:05 - was too fast you probably didn't see it
12:07 - let me click on followers one more time
12:10 - with this kind of navigation every time
12:13 - we click on a link the entire page is
12:15 - downloaded and the angular app is
12:17 - reinitialized that's why the page goes
12:20 - blank for just a split second now as
12:23 - your application grows as you have more
12:25 - code the cost of startup is going to be
12:27 - higher so that delay will be even more
12:30 - now if you look at the browser Network
12:32 - tab so every time we click on any of
12:35 - these links here all the resources in
12:37 - our application are re downloaded so as
12:40 - an example you can see all our Java
12:42 - Script bundles are redownload that every
12:44 - time we click on a link this is
12:46 - something we want to avoid at all costs
12:48 - otherwise there is no point using
12:50 - angular to build modern applications
12:53 - when we click on a link we want only the
12:56 - content for the new page to be
12:58 - downloaded not the inter application not
13:00 - all the resources so to fix this problem
13:04 - instead of the href attribute we're
13:06 - going to use a directive called
13:08 - router link so I'm gonna replace this
13:12 - with router link and similarly here
13:17 - router link this directive is also
13:20 - defined in the router module now let's
13:23 - go back to the browser here first I'm
13:26 - going to refresh the page now open up
13:29 - the network tab these are all the
13:31 - resources that are downloaded the first
13:33 - time you open the application now I'm
13:36 - gonna clear all the items in this list
13:38 - ok now let's see what happens when we
13:41 - click on any of the links in the
13:43 - navigation bar so I'm gonna click
13:46 - followers first of all we didn't have a
13:50 - flickering effect the navigation bar
13:52 - stayed there the page didn't go blank
13:54 - only the content area was reloaded now
13:58 - let's go back to the network tab one
13:59 - more time here you can only see the
14:02 - request for the content of the followers
14:05 - page so these are the images of my
14:07 - followers in this list you are not going
14:09 - to see any JavaScript bundles re
14:12 - download it and you can verify this by
14:14 - filtering for JavaScript files look
14:18 - there is no JavaScript files there is no
14:20 - CSS files all of these resources were
14:23 - downloaded only the first time so we
14:26 - refer to applications built this way as
14:28 - single page applications so essentially
14:31 - a single page is downloaded from the
14:34 - server and as the user navigates from
14:36 - one page to another
14:37 - only the content of the target page is
14:40 - downloaded so single page applications
14:42 - or spas now before we finish this
14:46 - lecture let's go to our followers page
14:48 - and add a link for each follower so
14:51 - followers dot HTML so here we have a
14:56 - link for each follower I'm gonna replace
14:59 - this href with router link however this
15:05 - time we're dealing with a dynamic URL so
15:08 - we don't want to send the user to a page
15:09 - like followers slash 1 this parameter
15:13 - should be rendered dynamically when
15:16 - you're dealing with route parameters
15:17 - instead of using the router link as an
15:20 - attribute
15:21 - should use the property binding syntax
15:23 - so property binding and here instead of
15:29 - binding this to a string we should bind
15:31 - it to an expression in this expression
15:34 - we have an array the first element in
15:37 - this array is the path so that is slash
15:40 - followers after this first element we
15:44 - add all the route parameters so
15:47 - currently we have only one ralph's
15:48 - parameter so we can add that here
15:51 - follower that login if you want to
15:53 - render the username or follow our done
15:55 - ID it doesn't make a difference here so
15:58 - same back in the browser now here if I
16:02 - click the first follower we get to the
16:05 - profile page and note the URL in the
16:08 - browser's location bar so to recap for
16:12 - simple route you can use the router link
16:14 - directive as an attribute and set it to
16:17 - a string value if you're dealing with
16:19 - route parameters you should use the
16:21 - property binding syntax and set the
16:24 - value of this property to an array the
16:26 - first element in this array is the path
16:28 - and the subsequent elements are route
16:31 - arguments
16:36 - so currently we have a problem in this
16:39 - application the followers link and the
16:41 - navigation bar is always highlighted so
16:45 - if you go somewhere else
16:46 - the followers links still active let's
16:49 - see how we can fix this problem in
16:51 - navbar that component that HTML here we
16:55 - have this class active this is part of
16:58 - bootstrap so if you apply the active
17:01 - class on an Li in a navigation bar the
17:04 - corresponding link will be highlighted
17:06 - now we want to apply this dynamically so
17:10 - we have another directive called router
17:14 - linked active so just like we have
17:18 - router linked we also have router linked
17:21 - active and as the value here we set a
17:24 - string that includes a list of CSS
17:27 - classes that should be applied when this
17:29 - link is active so here we have only one
17:32 - CSS class that is active we can add more
17:35 - space current so all these classes
17:39 - should be separated by a space now
17:42 - similarly I'm gonna apply the same
17:45 - directive to the second li like this now
17:50 - let's test the application back in the
17:52 - browser so currently we are on the posts
17:56 - page and you can see the posts link and
17:59 - the nav bar is selected if i click on
18:01 - followers now the followers link is
18:04 - active and if we inspect this element so
18:09 - here's the Li for this link look at the
18:13 - class attribute here we have two classes
18:15 - active and current so we use the router
18:20 - link active to set the CSS class for the
18:23 - selected links in a navigation bar
18:30 - so in app module we have to find this
18:32 - round that takes a parameter username
18:35 - let me show you how we can extract this
18:37 - parameter in our github profile
18:40 - component because in a real world
18:41 - application most likely we want to get
18:44 - this parameter and use a service to get
18:46 - the profile of the given user so let's
18:50 - go to github profile the TS so here in
18:56 - github profile component in order to get
18:59 - access to route parameters we need to
19:01 - inject the activated route class in our
19:04 - constructor so here I add a parameter
19:08 - called route of type activated route
19:15 - this is a service that is defined in
19:17 - angular slash router library and is part
19:20 - of the router module that we imported
19:23 - earlier in this section now here in ng
19:26 - on in it we can get the route parameters
19:30 - from this object so this the route dot
19:34 - pram map that's the property that gives
19:38 - us all the parameters in this route now
19:41 - look at the type of this property it's
19:44 - an observable of pram map you have seen
19:48 - observables in the section about
19:50 - consuming HTTP services so you know that
19:53 - these observables have a method called
19:55 - subscribe we can subscribe to them and
19:58 - get values emitted in these observables
20:01 - so here I'm gonna call the SUBSCRIBE
20:04 - method you can see that here we need to
20:07 - pass a function that takes a parameter
20:09 - of type pram map and returns void so
20:13 - let's add an arrow function here for a
20:16 - map or we can call it params is shorter
20:19 - goes to a code block now let's log this
20:23 - on the console and see what is inside
20:25 - this object so console dot log perhaps
20:29 - save back in the browser so here in the
20:33 - list of followers I'm gonna click the
20:34 - first follower now let's take a look at
20:37 - the console so this is the object we get
20:40 - it has two properties keys
20:43 - and perhaps let's look at the keys so
20:47 - here we have only one key and that is
20:50 - username because in app module we set
20:53 - the name of our parameter to username
20:55 - okay now this object also has another
21:00 - property that is params and here we have
21:03 - key value pairs for route parameters and
21:06 - their values so this is the structure of
21:08 - a pram map object now back here in ng on
21:13 - in it let's look at the members defining
21:16 - this class so params dot we have get get
21:20 - all has and keys you saw the keys field
21:24 - this field returns all the keys or all
21:27 - the route parameters we use the get
21:30 - method to get the value of a given route
21:32 - parameter we use get all to get the
21:35 - value of all route parameters and has to
21:38 - see if we have a parameter by the given
21:40 - name in this object so here to get the
21:43 - value of the user name parameter we call
21:46 - the get method like this get user name
21:50 - and by the way what we have here is
21:53 - actually not user name it's user ID so
21:56 - always pay great attention to naming
21:58 - your route parameters because otherwise
22:00 - you can create confusion for other
22:02 - developers and this will also increase
22:05 - the cost of maintenance of your
22:07 - applications so let's go back to after
22:10 - module and change the name of this
22:14 - parameter to ID now back in github
22:17 - profile component here we need to get
22:21 - the value of the ID parameter now this
22:25 - method as you can see here in the
22:26 - intellisense returns a string if you
22:29 - need to work with a number a technique
22:32 - that we use in Java Script is to put a
22:34 - plus before this this will convert this
22:38 - string to a number now we can store it
22:41 - in a variable like ID and in a real
22:44 - world application we most likely send
22:46 - this to a service to get the profile of
22:48 - this user something like this service
22:50 - that get profile and we give it this ID
22:53 - now we don't need this for now
22:56 - so let's simply lock this on the console
22:59 - let's test the application one more time
23:02 - so here we have the user ID displayed in
23:05 - the console now if I go back to the
23:07 - followers list and click on a different
23:10 - user now in console we have two entries
23:15 - so this is how we get the route
23:17 - parameters but you might be wondering
23:20 - why this pram map is defined as an
23:23 - observable this makes it a little bit
23:26 - hard to access these parameters how come
23:29 - we don't have an API like this so this
23:31 - the route of ID this would be much
23:36 - easier right or potentially we could
23:39 - have listed route the pram map of I T
23:42 - this is easier to work with than an
23:45 - observable so in the next lecture I'm
23:48 - going to answer this question hi thank
23:53 - you for watching my angular tutorial if
23:55 - you enjoyed this video please like it
23:57 - and share it with others also you can
23:59 - subscribe to my channel for free new
24:01 - videos every week this video is part of
24:04 - my complete angular course with almost
24:07 - 30 hours of high quality content where
24:10 - you learn everything about angular from
24:12 - the basic to the advanced topics all in
24:15 - one course so you don't have to jump
24:16 - from one tutorial to another in case
24:18 - you're interested you can get this
24:20 - course with a big discount using the
24:22 - link in the video description and if not
24:24 - that's perfectly fine continue watching
24:26 - as the next section is coming up