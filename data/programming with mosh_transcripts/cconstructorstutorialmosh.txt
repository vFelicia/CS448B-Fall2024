00:03 - okay we got two constructors what is a
00:06 - constructor a constructor is a method
00:09 - that is called when an instance of a
00:11 - class is created
00:13 - why do we need a constructor the
00:15 - intention is to put an object in an
00:18 - earlier state that is to initialize some
00:21 - of the fields in the class
00:23 - here is how we declare a constructor so
00:26 - as you see we have a class called
00:28 - customer and this class has a
00:29 - constructor as you see here
00:32 - a constructor has the exact same name as
00:34 - the class and that's a requirement if
00:36 - you change this name the compiler or the
00:39 - runtime will not treat these as a
00:41 - constructor
00:42 - also note that constructors unlike other
00:45 - methods do not have a return type not
00:48 - even void here in this method we can do
00:50 - any kind of initialization that is
00:52 - required note that we don't always have
00:54 - to use a constructor but if we need to
00:57 - initialize an object upon creation
00:59 - that's where we put our code in this
01:01 - example we have what we call a parameter
01:04 - less or a default constructor so this
01:07 - constructor has no parameters
01:09 - if you don't define a default or
01:12 - parameterless constructor for your class
01:14 - the c-sharp compiler creates one freight
01:16 - you're not gonna see it but it will be
01:18 - in the il or intermediate language code
01:21 - that will be result of the compilation
01:23 - that constructor it doesn't do anything
01:25 - it just initializes the fields of the
01:28 - class to their default values
01:30 - what are those default values for any
01:32 - kind of numbers it sets them to zero or
01:35 - boolean types sets them to false or any
01:39 - other kind of reference types like
01:40 - strings or any other objects sets them
01:43 - to know and for characters sets them to
01:46 - an empty character
01:49 - here is another example of a constructor
01:52 - this example we have a parameter here so
01:55 - we get the name of the customer and we
01:57 - set a name field as you see here not the
02:01 - user of the disc keyword this is a
02:03 - keyword that references the current
02:05 - object why do we need that here
02:09 - look here we have two identifiers that
02:10 - look very similar we have this name
02:13 - field in the class and it's named
02:14 - parameter in the constructor of this
02:17 - class they both have the same spell but
02:20 - are using different naming conventions
02:21 - this parameter here is using camelcase
02:24 - so the first letter of the first word is
02:26 - lowercase the name field here is using
02:29 - Pascal case so the first letter of the
02:32 - first word is uppercase it is possible
02:35 - that sometimes we make a mistake and in
02:38 - the assignment operator here we put the
02:40 - wrong variable on the wrong side of the
02:42 - equation
02:43 - in this example we are passing his name
02:46 - here and we simply copy that to this
02:48 - name field here and that's the right way
02:50 - to do it but imagine what it would look
02:52 - like if it was the other way around
02:55 - it wouldn't make sense that's why we
02:57 - used it this keyword here to make sure
02:59 - what we have on the left side of the
03:01 - assignment operator is a member of the
03:03 - class in this case the name field here
03:05 - so what we get from the outside which is
03:08 - in this case the constructor parameter
03:09 - will be copied to the name field okay
03:14 - with that constructor when we create a
03:16 - new instance of customer we can supply a
03:18 - name here
03:20 - at this point the constructor will be
03:22 - called and the string that is passed
03:23 - here will be copied to the name field
03:26 - we have a concept called constructor
03:28 - overloading overloading means having a
03:32 - method by the same name but different
03:33 - signatures what do I mean by a method
03:36 - signature a signature is what uniquely
03:39 - identifies a method that is its return
03:42 - type its name and the types and numbers
03:46 - of its parameters
03:48 - in this example here we have three
03:50 - constructors so we have overloaded the
03:53 - constructor for this class
03:54 - each constructor as you see has a
03:57 - different signature so the first one
03:59 - takes no parameters the second one takes
04:02 - one parameter of type string the third
04:05 - one takes one integer and 1 string as
04:08 - parameter
04:08 - note that the names here do not matter
04:10 - but the datatypes for the parameters and
04:13 - the order of them is important so we
04:16 - cannot have two constructors with the
04:18 - exact same signature
04:20 - now you would wonder why do we need to
04:22 - overload constructor z' the reason for
04:25 - that is to make initialization of this
04:27 - class easier sometimes we may know only
04:29 - the name so we may use this constructor
04:31 - when creating an instance of this class
04:33 - sometimes we may know both the ID and
04:36 - the name so we use this one or sometimes
04:39 - we may know neither of these parameters
04:41 - so we may use this constructor here ok
04:45 - let's start coding and see constructors
04:47 - in action
04:49 - okay let's start by creating a customer
04:51 - class so public class customer
04:59 - now we declare a field public integer ID
05:06 - and another one public string name
05:11 - I need to clarify something here in the
05:13 - real world applications we do not
05:15 - declare fields with the public access
05:16 - modifier as you see here this is just
05:19 - because I want to take things in a
05:20 - step-by-step fashion when we get to the
05:23 - lecture about properties you will see a
05:25 - better way to declare fields for now
05:27 - let's just keep things simple and learn
05:29 - everything in a step-by-step fashion
05:32 - okay now let's put this customer class
05:33 - in a separate file here I'm using
05:35 - resharper if you don't have resharper I
05:38 - highly recommend you to purchase a
05:39 - license for it because it really helps
05:42 - you with your coding note that I'm not a
05:44 - resharpen affiliate and I don't get a
05:46 - penny from promoting their product I
05:48 - just believe resharper takes coding to
05:50 - the next level it makes it much easier
05:51 - and much faster alright let's put this
05:54 - class in a separate file so I put the
05:56 - cursor here and note this little icon
05:59 - here that is used for refactoring that
06:02 - means changing the structure of the code
06:04 - without changing its functionality
06:07 - so here I press alt' + enter' and it
06:11 - pops up this context menu here the first
06:13 - item says move to another file to match
06:16 - type name so I just press Enter I know
06:19 - that now we have a separate file called
06:21 - customer that's es and this file is
06:24 - added to solution Explorer so if I
06:28 - didn't have resharper I had to go here
06:30 - right click and then go to add and I
06:34 - know you don't see that here in the
06:36 - screen so I put the solution Explorer to
06:38 - the left side
06:40 - okay so right-click
06:44 - bad
06:46 - new item or class which would open up
06:49 - this dialog box here and then here we
06:50 - had to type customer that's es it's
06:53 - really not a good and fast way because
06:55 - as a professional programmer you don't
06:57 - want to switch to Mouse while you're
06:59 - coding you should learn to do everything
07:01 - the keyboard that's much easier and
07:04 - faster so let's not worry about creating
07:08 - a new file and use resharper from now on
07:10 - I put this solution Explorer back to
07:13 - where it was there you go
07:15 - all right now let's go to the programs
07:18 - yes here in the console application and
07:20 - create a new instance of this customer
07:23 - so customer customer equals new customer
07:29 - or a better way is to use vara instead
07:32 - of customer because note that here we
07:34 - are repeating this customer word twice
07:37 - and that makes the code slightly
07:40 - cluttered so we can just use var here
07:42 - and let the compiler figure out that
07:46 - customer is of type customer so the code
07:50 - looks a little bit cleaner now
07:53 - all right now I want to show you the
07:54 - effect of the default constructor that
07:56 - the c-sharp compiler creates for us note
07:59 - that here in the customer class I did
08:02 - not create a constructor
08:04 - but I told you earlier in this slide
08:06 - that the c-sharp compiler creates one
08:08 - for us so let's see what happens
08:12 - let's display the fields of this
08:14 - customer class on the console so console
08:17 - the right line customer dot ID and
08:23 - console the right line customer that
08:26 - name
08:28 - know that the way I typed council the
08:30 - right line was via what we call a code
08:32 - snippet which is much faster so I didn't
08:34 - type console dot write line I just typed
08:37 - CW and press tab this is what we call a
08:41 - code snippet it's a quick way to write
08:44 - code
08:45 - there are many code snippets in c-sharp
08:47 - and I have explored many of them in my
08:49 - course double your coding speed that you
08:51 - can find on udemy so let's move on for
08:54 - now
08:57 - okay now let's put a breakpoint here we
08:59 - can put a breakpoint using f9
09:03 - and we run the application in the debug
09:05 - mode using f5
09:09 - I'm gonna put a watch on the customer
09:11 - object here so customer
09:16 - let's expand this note the default
09:19 - values assigned to these fields here so
09:22 - ID is an integer and the default value
09:24 - for the integers or any other kind of
09:26 - numbers is 0 name is a string and the
09:30 - default value for strings or any other
09:32 - kind of reference types is not so this
09:36 - happened by the default constructor that
09:38 - the c-sharp compiler created for this
09:40 - class
09:42 - okay now let's declare a constructor and
09:44 - see how we can initialize this field
09:46 - upon instantiation of a customer so I
09:49 - stop the debugger using Shift + f5
09:53 - we
09:55 - her class
09:57 - to do that I simply press ctrl and tap
09:59 - look we got the open windows here in
10:02 - Visual Studio I didn't have to go and
10:05 - grab my mouse go to solution explorer
10:07 - and double-click customer all right now
10:10 - here let's declare a constructor
10:14 - to declare constructor there are two
10:16 - ways the slow way is to type public and
10:20 - the name of the class and the curly
10:23 - braces
10:24 - what is the fast way
10:31 - tor has in short or a constructor and
10:34 - note the icon for the code snippet here
10:37 - so that's a code snippet here we can
10:40 - press the tab there you go
10:42 - we got the constructor
10:44 - so this is how I want you to code I
10:46 - don't want you to type every letter as a
10:49 - fast coder you should know all your
10:50 - shortcuts you should code like a ninja
10:53 - okay now let's give a parameter to this
10:55 - constructor so I go here and let's say
10:58 - integer ID and here we need to copy that
11:02 - to our ID field so I type in this that
11:06 - note here are the members of this class
11:09 - so here's our ID field equals ID
11:14 - now let's overload this constructor so
11:17 - I'm gonna create another one with a
11:18 - different signature I can see tour you
11:22 - got here at this time I want to add two
11:24 - parameters int ID and string name
11:28 - okay now let's initialize them
11:31 - this that ID equals ID this the name
11:35 - equals name now if we go back to our
11:39 - program class again using ctrl + tab
11:43 - here note that we got a red underline
11:46 - and that's because the compiler cannot
11:50 - find a default constructor that is
11:52 - parameterless so we can no longer create
11:56 - a customer object using this constructor
11:59 - because it doesn't exist so what does
12:01 - this mean that means because we created
12:04 - two custom constructors the compiler
12:07 - will no longer create that default or
12:09 - parameterless constructor so if we still
12:12 - want to have this freedom to create a
12:15 - customer object without supplying any
12:17 - parameters upon instantiation we need to
12:21 - go back here and create a default or
12:23 - parameterless constructor so seat or
12:28 - that's it in this case I'm not doing
12:31 - anything here
12:33 - like to program
12:36 - red underline is gone but also when we
12:40 - open the bracket here note that here we
12:42 - have three overloads or the constructor
12:45 - one is without any parameters one takes
12:49 - an integer and one takes an integer and
12:52 - a string let's use the third one
12:57 - i DT 1 and the name to John
13:01 - now we're on the application
13:08 - now that ID is initialized to 1 and name
13:12 - is initialized to John and that's the
13:14 - intention of using constructors
13:17 - you
13:18 - okay now let me tell you a best practice
13:20 - let's get back to our customer class
13:25 - see in this case our customer class has
13:27 - only two fields and we have created
13:29 - different variations of these
13:31 - constructors here for initializing this
13:33 - field what if we had five other fields
13:36 - here
13:38 - would you go and create seven other
13:40 - kinds of constructors or initializing
13:42 - each of these fields no definitely not
13:45 - because that would create a lot of
13:47 - clutter in the class we only use
13:49 - constructors in classes and situations
13:52 - where we really want to initialize an
13:55 - object to an earlier state that is
13:57 - really important for that object to
14:00 - perform in this simple example we have
14:02 - here it doesn't really matter whether
14:04 - the customer object has an ID or not
14:07 - same goes for name we can always create
14:09 - a customer back here let me remove these
14:13 - two parameters we can always create a
14:16 - customer object and then set the ID here
14:19 - it's not the end of the world John
14:25 - but there are cases where you really
14:27 - have to initialize an object to an
14:29 - earlier state what is an example of that
14:32 - let me show you so I want to create a
14:35 - new class let's call it order public
14:40 - class order let's not worry about the
14:43 - fills in this class for now so I'm gonna
14:46 - put this in a separate file put the
14:48 - cursor here
14:49 - Alton enter enter done now go back to
14:53 - the customer
14:56 - and the customer we want to create a
14:58 - list of orders so we use the list class
15:02 - public list of order and we call it
15:07 - orders
15:09 - in case you're not familiar with this
15:11 - list this list is a generic class that
15:14 - takes a parameter this is what we call a
15:16 - generic parameter so it represents a
15:19 - list of objects and this parameter here
15:21 - specifies the type of those objects so
15:24 - in this list we can store objects of
15:26 - type order note that this list is
15:28 - declared in the system that collections
15:31 - the generic namespace
15:33 - and here because I'm using resharper as
15:36 - I was typing list of order resharper
15:39 - automatically added that using statement
15:41 - on the top if you're not using resharper
15:43 - you have to manually add this statement
15:46 - okay let's move on as a rule of thumb
15:49 - and as a best practice whenever you have
15:52 - a class like here and that class has a
15:55 - list of objects of any type always
15:59 - initialize that list to an empty list
16:03 - what I mean by that is in the default
16:06 - constructor here we go and type orders
16:09 - equals new list of orders
16:12 - now you might wonder why I think the
16:15 - best way to explain it is by showing
16:18 - what would happen if we didn't do this
16:20 - so let me just comment this out to do
16:23 - this with resharper you can press ctrl
16:25 - and slash
16:29 - if you're not dissing resharper
16:33 - control C alright let's go back to the
16:36 - program
16:39 - let's add a new order for this customer
16:42 - so I'm gonna create var order equals new
16:47 - order
16:49 - now let's say customer that orders dot
16:52 - add this order
16:55 - if we run the application now it's going
16:57 - to crash
17:03 - we got an exception
17:05 - reference exception
17:07 - the reason this happened was let's close
17:10 - this
17:13 - because orders was not initialized and
17:15 - by default because it's a reference type
17:17 - it was set to null so when we call the
17:20 - add method on a null object we get null
17:23 - reference exception which is a very mad
17:25 - thing it's something we need to avoid at
17:27 - all times now an amateur programmer may
17:30 - solve this problem by doing something
17:33 - like this here
17:33 - so saying order sorry customer that
17:38 - orders equals new list of orders
17:43 - that may look like a solution but it's
17:46 - actually a bad solution in fact I
17:47 - wouldn't even call it a solution it's a
17:49 - hack it's a patch why because here in
17:53 - this main method here we should not be
17:55 - responsible for initializing that orders
17:59 - list to an empty list it's not the
18:01 - responsibility of this class here this
18:04 - class just wants to add an order to this
18:06 - customer
18:08 - is the responsibility of the customer
18:10 - class to make sure that his orders field
18:13 - is initialized to an empty list and it's
18:16 - not a null object
18:18 - if you take this responsibility from
18:21 - this customer class and initialize that
18:24 - orders field somewhere else then it's
18:26 - going to be a problem because everywhere
18:28 - in our code we are going to use a
18:30 - customer object we have to remember to
18:32 - initialize that orders field okay
18:36 - so I'm going to remove this line here
18:38 - and go back to the customer class in the
18:43 - default constructor
18:45 - I want to make sure that the orders
18:47 - field is always initialized to an empty
18:50 - list
18:52 - so that's the rule of thumb whenever you
18:54 - have a class and that class has a list
18:56 - of objects make sure that list is always
18:59 - initialized
19:02 - now we have another problem here if we
19:05 - use this constructor here everything is
19:07 - good the orders field is initialized but
19:11 - what if you use either of these
19:13 - constructors here orders is going to be
19:16 - known well we can go and copy/paste this
19:19 - line into these constructors but it's
19:21 - not really a good way
19:23 - what if we had three other feels here
19:27 - that they all were lists
19:30 - so we had to copy-paste three lines of
19:32 - code into each of these constructors
19:34 - here is there better solution of course
19:37 - there is
19:38 - we can use that this keyword let me show
19:41 - you how it works so here in this
19:43 - constructor upon declaration I would put
19:47 - : this and put the brackets like this
19:51 - this means
19:53 - constructor is being called first is
19:55 - going to call the constructor without
19:58 - parameters so before this line is
20:01 - executed this constructor is going to be
20:03 - called which will initialize the orders
20:06 - field and then we get into this
20:07 - constructor here
20:10 - let me show you another example to make
20:12 - sure we really nail it down so using a
20:15 - similar technique I can go to this
20:16 - constructor and :
20:20 - this note that we have two constructors
20:24 - here now we can call one is the default
20:27 - parameter list constructor one is the
20:29 - one that takes an ID I'm gonna pass this
20:33 - ID that is coming here into this
20:36 - constructor and then get rid of this
20:39 - line here what this means is when we use
20:43 - this constructor to initialize the
20:45 - customer object first it's going to call
20:47 - the constructor that takes the ID
20:49 - parameter
20:52 - so are we gonna go here and note that
20:55 - here before this code is executed we're
20:57 - gonna go here
21:00 - at this point the orders field will be
21:02 - initialized then we get back here the ID
21:05 - will be initialized and finally we'll
21:07 - get back here the name will be
21:09 - initialized
21:11 - so what I want you to learn here is that
21:14 - we can use the disk keyword and specify
21:16 - any of the other constructors we would
21:18 - like to pass the control to
21:21 - now here we have a simple example and
21:23 - it's kind of okay to pass the control
21:26 - from this constructor to this one to
21:28 - this one but in general this is not
21:31 - considered a good practice because it
21:34 - makes the control flow a little bit
21:36 - complicated
21:38 - for example imagine someone else had
21:40 - written disco and you had to maintain it
21:42 - you look at this constructor and then
21:44 - you had to look somewhere else and then
21:45 - you had to look somewhere else
21:48 - it's a little bit ugly
21:50 - so what I suggest to you is keep the
21:52 - using of this in this way to a minimum
21:56 - and only define a constructor when you
21:59 - really have to initialize some fields of
22:01 - your class in this example I explained
22:04 - to you that we really have to initialize
22:06 - this orders field here so we created a
22:09 - default constructor I can argue that
22:12 - these two are really redundant and
22:14 - they're just making the code a little
22:16 - bit ugly and hard to maintain
22:20 - so it's okay to remove them but I'm just
22:23 - gonna keep them here because I wanted
22:25 - you to learn a few concepts here one is
22:28 - the default and parameterless
22:30 - constructor
22:32 - another one is the concept of
22:33 - overloading constructors that means we
22:36 - have three different constructors each
22:38 - has a different signature and how we can
22:42 - use that this keyword to pass the
22:45 - execution to another constructor in this
22:47 - class well that's pretty much it for
22:50 - this lecture I hope you enjoyed it and
22:51 - thank you for watching
22:56 - hi guys ma chere I hope you're having a
22:59 - fantastic day or night wherever you are
23:01 - in the world this tutorial you have been
23:03 - watching is actually part of one of my C
23:06 - sharp courses where you will learn
23:07 - everything about classes interfaces and
23:11 - object-oriented programming in case
23:13 - you're interested to enroll in the full
23:15 - course I've put the link for you in the
23:17 - video description and if not that's
23:19 - perfectly fine have a great day