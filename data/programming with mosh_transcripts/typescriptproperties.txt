00:02 - all right now this implementation has a
00:04 - tiny problem we can set the initial
00:07 - coordinate of this point and we can also
00:09 - draw it but there is no way for us to
00:12 - read the coordinate so I cannot access
00:15 - point that the X here so display to the
00:17 - user
00:18 - what's the workaround well one simple
00:21 - solution is to define a method like this
00:24 - yet X
00:27 - and here we simply return this that eggs
00:30 - because in this class we do have access
00:33 - to all the private members of this class
00:36 - but we cannot access them from the
00:38 - outside ok now here I can always call
00:42 - point that get X to get the x value and
00:47 - display to the user now let's talk about
00:49 - another use case maybe we want to give
00:52 - the user the ability to set the initial
00:54 - coordinate here but we also want them to
00:57 - be able to change this coordinate later
00:59 - only if they provide a value within a
01:03 - given range what do you mean by that let
01:05 - me show you I'm gonna define another
01:08 - method here set X
01:11 - now this method is gonna get a value
01:14 - that's the new value for the eggs field
01:17 - let me scroll down now here first we can
01:21 - do some basic validation so if value is
01:24 - less than zero you want to throw an
01:26 - error throw new error value cannot be
01:31 - less than zero otherwise we want to set
01:37 - this well x2 this new value okay now
01:41 - with this implementation we can always
01:44 - change the value of the X field like
01:46 - this point that set X we set it to a new
01:50 - value now if you have a use case like
01:53 - that in your applications you can use
01:55 - what we call a property so in typescript
01:59 - and in a lot of object-oriented
02:00 - programming languages we have a concept
02:03 - called property which is exactly for
02:05 - this very use case so look at how I can
02:08 - define a property here we start with a
02:12 - keyword which is get or set and then the
02:15 - name of the property which is in this
02:16 - case X and after that we're gonna have
02:19 - parentheses just like a method okay now
02:23 - similarly I'm gonna change this to set
02:25 - with a space so we have the set keyword
02:27 - and here it's like we have a function
02:29 - and method now what is the difference
02:32 - the difference is that we can use these
02:34 - properties like fields so here I can
02:39 - read X like this dot note the icon of X
02:43 - is the same icon we have for fields it's
02:46 - not a metal anymore so we can read X and
02:50 - we can also set it like this point that
02:53 - eggs are set it to 10 we don't have to
02:56 - call a method like this it's a cleaner
02:59 - syntax okay so this is what properties
03:03 - are for if you have private fields that
03:06 - you want to give maybe a read-only
03:07 - access to the outside or if you want to
03:10 - give the consumer of your classes the
03:12 - ability to set the values but you want
03:14 - to have some basic validation that's
03:16 - when you use a property now in this case
03:19 - if I want to give only the read-only
03:21 - access to this underlying field I can
03:23 - simply comment out
03:25 - the setter so we call this method a
03:28 - setter and the other method a getter
03:31 - okay I now look at this compilation
03:34 - error we cannot change the value of x
03:36 - now let's bring this back one last thing
03:40 - before we finish this lecture so here I
03:43 - have used a capital X for the name of my
03:45 - X property in JavaScript and in types
03:48 - crib we use camel notation to name our
03:51 - fields so that's why earlier we define
03:55 - this private field here using camel
03:57 - casing notation camel casing means the
03:59 - first letter of the first word is
04:01 - lowercase and the first letter of every
04:04 - word after is uppercase now what should
04:07 - we do to use camel casing notation for
04:10 - our properties if I name this the
04:13 - lowercase eggs it clashes with the
04:16 - existing field so let me revert this
04:19 - back a convention we use to solve this
04:21 - problem is to prefix the name of the
04:24 - underlying field with an underline so
04:27 - let's rename this using f2 and prefix it
04:30 - with an underline okay similarly for the
04:34 - Y parameter or the Y field I'm also
04:37 - going to use underline Y then we can
04:40 - rename this property from capital X to
04:43 - lowercase X once again we press f2
04:46 - lowercase X and note that both instances
04:50 - was the getter and the setter are
04:52 - updated now we can work with this X
04:57 - property exactly the same way we use the
05:00 - X field so here's the lesson a property
05:03 - looks like your field from the outside
05:06 - but internally it's really a method in
05:09 - the class well more accurately it's
05:11 - either one method which is a getter or a
05:13 - setter or a combination of a getter and
05:16 - a setter
05:19 - hi thank you for watching my angular
05:21 - tutorial if you enjoyed this video
05:23 - please like it and share it with others
05:25 - also you can subscribe to my channel for
05:28 - free new videos every week this video is
05:31 - part of my complete angular course with
05:33 - almost 30 hours of high quality content
05:36 - where you learn everything about angular
05:39 - from the basic to the advanced topics
05:41 - all in one course so you don't have to
05:43 - jump from one tutorial to another in
05:45 - case you're interested you can get this
05:47 - course with a big discount using the
05:49 - link in the video description and if not
05:51 - that's perfectly fine continue watching
05:53 - as the next section is coming up