00:00 - you
00:02 - all right so I've got the project open
00:04 - envious code I've also got the terminal
00:08 - running here so our lightweight web
00:10 - server is in the background
00:11 - plus our typescript compiler is in the
00:14 - watch mode is looking for changes and
00:16 - when it observes a change in a file it
00:20 - will transpile it into JavaScript and
00:22 - then the browser sync will kick in and
00:25 - automatically refresh the browser you're
00:28 - going to see this in a second
00:29 - so back to vs code in angular 2 each of
00:34 - the building blocks I talked about like
00:36 - component directives and routers are
00:38 - plane type script classes and that's one
00:41 - thing that I love about angular 2 the
00:43 - API is much simpler and cleaner so I'm
00:46 - going to start by creating a class so
00:49 - right click app new file I'm going to
00:55 - call it courses Docs component dot T s
00:59 - note the naming convention so we start
01:02 - with the name of the component like
01:04 - courses then dot component then TS
01:13 - okay so to create a class we start by
01:16 - export class courses component what is
01:23 - this export here in typescript each file
01:26 - is considered a module in each module we
01:29 - often export one or more things like a
01:32 - class a function or a variable in this
01:35 - case I'm exporting courses component
01:37 - class so it will be available to other
01:39 - modules in my application later when I
01:42 - need this class I can import it as you
01:45 - will see shortly alright so we have a
01:47 - class now how does angular know that
01:50 - this class is going to be a component it
01:52 - looks for specific attributes or
01:54 - metadata on your classes for example to
01:58 - make this a component we need to apply
02:00 - the component decorator to this class a
02:03 - decorator in typescript is like an
02:06 - attribute in c-sharp or an annotation in
02:08 - Java many other languages have similar
02:11 - concepts so first I need to import the
02:14 - component decorator from the core
02:16 - angular module import curly braces
02:22 - component from here is a string that
02:27 - specifies the name of the module angular
02:30 - 2 slash core so in angular 2 slash core
02:34 - module we have a decorator called
02:36 - component and here I'm importing it so
02:40 - if you look at the source code for that
02:42 - module you will see that they have
02:43 - exported this component there so we can
02:46 - import it here that's the idea
02:48 - now these decorators are functions so we
02:51 - need to call them at sign
02:56 - component all decorators need to be
02:59 - prefixed with an ADD sign I know this is
03:02 - a function we just call it like this
03:04 - look at the intellisense it's telling me
03:07 - that this function takes an object so
03:10 - here's my object and you can see the
03:13 - list of attributes that we can add in
03:15 - this object in this video we're gonna
03:17 - look at two basic attributes one is
03:22 - selector which is a string as you can
03:25 - see in the intellisense
03:28 - I'm going to call it courses so this
03:32 - selector field here specifies a CSS
03:34 - selector for a host HTML element when
03:38 - angular sees an element that matches
03:40 - this CSS selector it will create an
03:43 - instance of our component in the host
03:45 - element so here I'm assuming the host
03:48 - element is an element with the tag
03:49 - courses the next attribute is template
03:56 - and this template specifies the HTML
04:00 - that will be inserted into the Dom when
04:02 - the components view is rendered we can
04:05 - either write the template here in line
04:06 - or put it in a separate file I'll get to
04:09 - that later in this section about
04:10 - components so let's just display
04:13 - something very simple courses so that's
04:18 - all we have built our first component as
04:20 - easy as that
04:24 - now we need to add this courses element
04:27 - here somewhere
04:29 - so first save this file and then go to
04:33 - app that component es if you're using vs
04:37 - code or sublime text you can first ctrl
04:40 - P on Windows or command + P on Mac and
04:43 - here you can type the name of the file
04:46 - in your project so app dot component
04:49 - dot TS if you're using a different
04:54 - editor and you don't have this shortcut
04:55 - just go to the app folder and you will
04:58 - see app dot component the TS there all
05:04 - right look at this component it looks
05:06 - familiar doesn't it
05:07 - so first we're importing the component
05:09 - decorator from angular here we're
05:12 - calling it so it's a function that takes
05:16 - an object and this object we have two
05:19 - fields selector and a template just like
05:21 - our other component and finally we've
05:24 - got export class app component so this
05:27 - app component is the root of your
05:29 - application it's a view component that
05:32 - takes control of the entire app or the
05:34 - entire page and here's a template for
05:38 - this view component I'm gonna change
05:40 - this and add courses element here now if
05:47 - we run
05:47 - applicationnow you're not going to see
05:49 - the courses component why because
05:52 - angular sees this courses tag but it
05:55 - doesn't know which component is
05:57 - responsible for that even though we
05:59 - define a component in our application
06:01 - know where we have referenced it so
06:04 - angular does not scan all your files to
06:06 - discover your components it will only
06:08 - recognize the components that you have
06:10 - explicitly referenced so here we need to
06:13 - add a reference to courses component so
06:16 - it can be discovered by angular so we
06:19 - supply a new field here called
06:22 - directives which is an array inside this
06:28 - array we specify any directives or
06:31 - components we have used inside the
06:32 - template for this component just to
06:35 - refresh your memory we use directives to
06:38 - extend our control document object model
06:40 - we can define custom attributes or
06:43 - custom elements that are not part of
06:45 - standard HTML in this case we used our
06:48 - courses component to define a new
06:50 - element so every component is
06:53 - technically a directive the difference
06:56 - is that a component has a template and a
06:58 - directive dozen so back to app we need
07:02 - to reference our component here courses
07:06 - component
07:09 - the read online cannot find name courses
07:14 - component and that's what it love about
07:16 - typescript compile time checking so we
07:20 - need to import this courses component
07:24 - import curly-braces courses component
07:29 - from what is the name of our module for
07:33 - the custom modules that we define we
07:35 - need to specify their path in the file
07:37 - system so this file app that component
07:40 - the TS is in the folder app look app
07:46 - folder and here's app that component TS
07:49 - and here is our courses component so
07:52 - they're both in the same folder so back
07:58 - in app that component of TS here I type
08:02 - dot slash which means start searching
08:05 - from the current folder and then the
08:07 - name of the module so courses dot
08:11 - component without TS extension save now
08:17 - let's look at our terminal
08:20 - ok typescript compiler detected a change
08:23 - so it transpiled
08:25 - or TS files into javascript files and
08:28 - now if you go to Chrome look our courses
08:32 - component is successfully rendered on
08:33 - the page let's inspect the elements
08:40 - so in the HTML we have this my - app
08:44 - element which is the host element for
08:47 - our app component let's have another
08:49 - look at our app component look the
08:53 - selector is my - app so when angular
08:56 - sees my - app is going to put this
08:59 - template there an h1 with the courses
09:02 - element so I can chrome inside my - app
09:07 - you see h1 and courses and courses is
09:11 - the host element for our courses
09:13 - component and inside that you see h2 but
09:17 - where is this root my - app defined it's
09:20 - in our HTML so that can be as code open
09:25 - the project folder
09:28 - laughs app open index dot HTML scroll
09:35 - down in the body we have referenced my
09:40 - dash app so angular saw this and it
09:44 - rendered app component well hello
09:48 - it's Maj here your angular 2 instructor
09:51 - thanks for watching my youtube channel
09:52 - this video you just watched is actually
09:55 - part of my comprehensive angular 2
09:57 - course for beginners in this course I'll
10:00 - walk you through all the core concepts
10:02 - of angular 2 in a step-by-step and
10:04 - pragmatic way by the end of watching
10:06 - this course you will have all the
10:08 - necessary skills to build real-world
10:10 - applications with angular if you want to
10:13 - find out more about this course and the
10:14 - content I've covered click on the link
10:17 - in the video description with this link
10:19 - you can get the course with a discount
10:21 - hope to see you in the course