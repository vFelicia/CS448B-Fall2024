00:03 - now this code that we wrote in the last
00:05 - lecture it works what we could do better
00:07 - what I don't like about this
00:09 - implementation is passing this email
00:11 - parameter or argument around in
00:14 - object-oriented languages where we have
00:16 - the concept of objects we shouldn't
00:18 - really pass parameters around because an
00:21 - object encapsulate some data and some
00:23 - behavior so if an object or a class have
00:26 - all the data it needs we don't have to
00:29 - pass parameters around this kind of code
00:31 - we have here is what we refer to as
00:33 - procedural programming if the kind of
00:35 - code we used to write 30 years ago
00:37 - before we had object-oriented
00:39 - programming languages so imagine if we
00:43 - had a field here called email then we
00:47 - wouldn't have to pass this email around
00:49 - and here we could simply log this good
00:52 - email so you can see our metal has no
00:56 - parameters and this is cleaner easier to
00:59 - read easier to understand and easier to
01:00 - maintain also going back to the
01:03 - definition of a component in angular
01:05 - remember a component encapsulate the
01:07 - data the logic and the HTML markup
01:10 - behind a view here the email field is
01:13 - used to encapsulate the data and the on
01:16 - key op method represents the behavior or
01:18 - the logic behind this view and of course
01:21 - here is our HTML template now how do we
01:23 - get here
01:24 - well first of all we don't need this
01:26 - template variable anymore so delete also
01:31 - we're not going to pass that here so our
01:34 - code is a little bit cleaner now now
01:37 - earlier you learn about property binding
01:40 - so we can bind the value property of
01:43 - this input object in the Dom so this
01:48 - email field right and now if I
01:51 - initialize this let's say me at
01:54 - example.com let me load this page the
01:58 - input field should be populated with
02:00 - this email address so look we've got me
02:03 - at example.com however if I change this
02:06 - to domain comm and press enter now in
02:11 - the console look we got me at
02:13 - example.com so how come
02:16 - didn't get me at domain.com because with
02:19 - property binding the direction of
02:22 - binding is from the component to the
02:24 - view so if the value of this email field
02:27 - changes at some point in the future the
02:30 - view will be notified and this input
02:32 - field will be automatically updated now
02:35 - what we need here is a slightly
02:36 - different kind of binding we want a
02:38 - binding that works in two ways from
02:41 - component to the view and from the view
02:42 - to the component so if you type
02:44 - something in the input box we want this
02:47 - email field to be updated let me show
02:50 - you one way to implement this and of
02:52 - course this is not the best way but I'm
02:54 - going to show you a better way in just a
02:55 - few seconds so with this value property
02:58 - binding we have one direction from
03:00 - component to the view for the other
03:02 - direction we can modify this expression
03:05 - here so instead of directly calling the
03:08 - unque up method first we can set email
03:12 - to dollar event dot target dot value
03:18 - then semicolon and then call the unque
03:22 - up method so what I want you to pay
03:24 - attention to here is that for the value
03:26 - of event binding you can write any
03:28 - expression so here we have two
03:30 - statements one for setting the email
03:33 - field and the other to call the uncute
03:36 - method now let's try this code SAVE back
03:40 - in the browser so we've got me at
03:43 - example.com and I'm going to change this
03:45 - to domain comm now enter look in the
03:50 - console we got me at domain.com
03:52 - beautiful so with this implementation we
03:55 - have two-way binding but as you can
03:58 - imagine this is the kind of feature that
04:00 - we may need frequently in a lot of
04:02 - application we don't want to write all
04:04 - this repetitive code is there a better
04:07 - way of course there is in angular we
04:09 - have a special syntax for implementing
04:11 - two-way binding so let me duplicate this
04:15 - line so you can see the difference
04:17 - instead of using property binding on the
04:20 - value of property we use the two-way
04:24 - binding syntax which includes square
04:26 - brackets and parentheses
04:29 - now if this syntax is complicated or you
04:31 - may forget it I give you a tip this is
04:33 - called banana in a box so this is a
04:36 - banana and this is a box so banana in a
04:40 - box
04:41 - now instead of value you bind to
04:45 - ng-model what is this
04:47 - well our Dom objects are input gum
04:50 - object-- doesn't have a property called
04:52 - ng model so this is something that
04:55 - angular adds to this Dom object earlier
04:59 - you saw ng for remember ng for is a
05:03 - directive and we use directives to
05:05 - manipulate the Dom so in angular we have
05:09 - another built-in directive called
05:11 - ng model that is used for implementing
05:13 - two-way binding so this implementation
05:16 - we have here is encapsulated in a
05:19 - generic way inside a directive called ng
05:23 - model and with this we don't have to
05:24 - repeat this code every time so then we
05:28 - can simplify this expression we can
05:31 - delete this statement and in key opted
05:35 - enter we simply call the on key op
05:37 - method now look the second line is
05:40 - obviously cleaner shorter and easier to
05:42 - understand so here's the lesson whenever
05:45 - you want to use two-way binding use the
05:48 - banana in a box in tags and bind to the
05:51 - ng model property now let's try this
05:54 - save all right we got this error can't
05:58 - bind to engine model since it is an
06:01 - unknown property of input that's a
06:03 - familiar error isn't it so basically our
06:06 - input object doesn't have a property
06:08 - called ng model it's something that
06:10 - angular adds here but why are we getting
06:13 - this error angular framework consists of
06:15 - several different modules in every
06:18 - module you have a bunch of building
06:20 - blocks that are highly related you have
06:22 - components directives and pipes and
06:24 - these are highly related now not every
06:27 - application needs all the modules in
06:29 - angular because when you bring all these
06:31 - modules you increase the code size so
06:34 - this engine model directive is defined
06:37 - in one of the modules called forms and
06:39 - by default this is not imported into
06:42 - your application
06:43 - so if you want to use engine model or if
06:45 - you want to build any kind of form you
06:47 - need to explicitly import this module
06:50 - how do we do that
06:52 - very easy so let's go to app module with
06:56 - command and P or control P we go to app
06:59 - code module now look at this
07:01 - ng module decorator here we have a
07:04 - property called import that is set to an
07:06 - array in this array we have browser
07:09 - module browser module is one of the
07:13 - built-in modules of angular and it
07:15 - brings some features that almost every
07:17 - browser application needs and here we
07:20 - need to add another module the forms
07:22 - module so on the top so look this is
07:26 - where we are importing the browser
07:29 - module let's import forms module from
07:34 - add angular
07:36 - / forms so let's define in this library
07:39 - and then we can import it into our main
07:44 - app module so forms module save back in
07:51 - the browser all right we've got me at
07:54 - example.com and then I'm going to change
07:56 - this to domain comm enter look at the
07:59 - console and here's me at domain calm
08:03 - beautiful