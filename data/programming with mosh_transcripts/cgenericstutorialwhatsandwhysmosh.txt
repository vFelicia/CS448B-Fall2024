00:02 - hi guys my name is mohammad ani and in
00:05 - this video I'm going to talk about
00:06 - c-sharp generics before we start with
00:09 - generics let me explain what problem
00:11 - generics came to solve in Dolphin
00:13 - version 1 we didn't have generics so
00:16 - let's say we wanted to create a list to
00:18 - store a list of numbers this is a simple
00:22 - and basic implementation of a list we
00:24 - could have a method called add to add a
00:27 - number to the list and an indexer that
00:30 - returns their number at the given index
00:33 - now of course there are more methods
00:35 - like remove and find and I'm just
00:37 - leaving that for simplicity here because
00:39 - the intention is to talk about generics
00:41 - and not data structures now if you
00:44 - wanted to store books in a list
00:46 - obviously this class wouldn't work so we
00:49 - had to go and create a class like this
00:51 - call it book list with a method called
00:54 - add a parameter called book and similar
00:57 - indexer now the problem here is for
01:01 - every type we have to create a separate
01:03 - list and this is a lot of code
01:06 - duplication and not productive plus if
01:09 - there is a bug we have to fix it in
01:10 - multiple places so one solution to fix
01:13 - this is to use a list of objects
01:15 - something like this with the object
01:42 - because the
01:44 - parent class for every type in dotnet we
01:46 - can easily pass any types to this method
01:49 - here or get any object from this indexer
01:52 - but there is another problem here the
01:54 - problem is performance if we use this
01:58 - class for storing value types like
02:00 - integers
02:01 - every time we insert a value type inside
02:03 - this list it has to be boxed to be
02:06 - stored as an object and every time we
02:08 - access that value it has to be unboxed
02:10 - and this has a performance penalty or
02:13 - even if you use reference types every
02:16 - time we want to cast an object let's say
02:17 - a book to an object or vice versa
02:20 - it's casting again has performance
02:23 - penalty so generics came as a solution
02:26 - to resolve this problem with generics we
02:29 - create a class once and reuse it
02:31 - multiple times and it doesn't have the
02:33 - performance penalty like with the object
02:35 - list here so let's see how we can create
02:38 - a generic list let me get rid of this
02:40 - code here so I'm going to create my
02:43 - generic list next to this one so you can
02:45 - see the differences let's start with
02:48 - public class I call it generic list now
02:52 - generics have a parameter and the
02:55 - parameters are specified with angle
02:57 - brackets so like this and we usually
02:59 - call them T as in short for template or
03:02 - type now we create our head method now
03:09 - instead of getting a book here you would
03:11 - get a T what is T we don't know yet the
03:14 - consumer of this class will specify that
03:16 - I will show you in a second similarly to
03:22 - get the object at the given index we
03:24 - return
03:25 - T
03:36 - that's all we have to do now let's see
03:38 - how we can use that we go to our program
03:41 - CSS so here your instant sharing a book
03:46 - object your is tensioning a list of
03:49 - numbers as you see and we're
03:52 - instantiating a list of books
03:54 - note that the problem here is that we
03:56 - have two different types of lists we can
03:58 - simply use our generic list instead of
04:00 - these two classes here so I can actually
04:03 - comment out this piece of code now let's
04:09 - create a list of numbers I use the
04:12 - generic list and here I specify the type
04:16 - of tea that we specified earlier so in
04:19 - this case we want the list of integers
04:20 - so I put it in here and now when I
04:25 - access the add method
04:26 - note that the parameter is of type
04:28 - integer we can use the same generic list
04:32 - to store a list of books so I specify
04:39 - book as the template parameter and say
04:42 - books that had now the add method gets
04:46 - an object of type book so new book blah
04:49 - blah blah so see we get code reusability
04:52 - and we don't have that performance
04:54 - penalty why and runtime our generic list
04:57 - is actually a list of books it's not a
05:00 - list of objects so there is no casting
05:02 - or boxing so this is the basics of
05:05 - creating a generic list now in practical
05:09 - terms most often you will be using
05:11 - generics as opposed to creating ones in
05:14 - fact I personally in my professional
05:17 - career as a.net developer have very
05:20 - rarely come across situations that I had
05:23 - to create generic classes or generic
05:24 - methods I would say maybe three or four
05:28 - times over the course of a few years
05:30 - most often you will be using the generic
05:32 - lists that are actually part of dotnet
05:34 - so you're not going to create a generic
05:36 - list in fact let me show you where all
05:39 - the generic collections are in dotnet so
05:42 - you go to system that collections
05:44 - generic and look here we've got a bunch
05:48 - of classes like dictionary
05:50 - at some interfaces like a collection I
05:53 - dictionary I in your Mirabal which is
05:55 - pretty popular i list links list list
06:02 - which is like our generic list queue
06:05 - sorted list stack and so on but in case
06:11 - you need to create a generic for the
06:13 - application you're working on the rest
06:15 - of this video I'm going to cover more
06:17 - details about creating generics so let's
06:20 - get back to our generic here see here T
06:24 - is a parameter we could have multiple
06:27 - parameters for example a use case of
06:29 - that is for dictionaries a dictionary is
06:33 - a data structure that uses a hash table
06:35 - to store and retrieve objects which
06:38 - provides a very fast and efficient way
06:40 - to access objects so with a dictionary
06:43 - we need to specify a key and a value and
06:46 - they can be of any type so let me create
06:49 - a dictionary here public class generic
06:53 - dictionary so I want a key here and a
06:58 - value note that I'm prefixing them with
07:00 - T and giving a proper name here like
07:03 - this is the template parameter for key
07:06 - and this is the template parameter for
07:07 - value I have seen some developers use
07:10 - something like T U or V here which
07:14 - actually makes no sense in terms of code
07:17 - readability
07:17 - so always prefix your generic parameters
07:21 - with T and then give it a proper name so
07:24 - in this case our dictionary has two
07:26 - parameters T key and T value our add
07:30 - method would look something like this
07:32 - T key key T value value now to use that
07:39 - we can go back to our program CS let me
07:47 - create a
07:47 - genera here generic dictionary I want my
07:52 - keys to be off type say string and
07:55 - values can be of type book this way I
07:59 - can call the add method and note that
08:02 - the first parameter is a string and the
08:05 - second is a book so I can say 1 2 3 4
08:10 - and I'm going to store this book here
08:14 - just like that another thing in a tuna
08:19 - generics is constraints look in this
08:22 - case our generic list here or generic
08:25 - dictionary any type can be passed here
08:29 - there is no limitation sometimes this is
08:33 - good like in terms of list we probably
08:35 - want to store a list of anything and
08:37 - everything so there is no need to apply
08:40 - constraint but sometimes you would want
08:42 - to limit what is being sent here let me
08:45 - walk you through some examples so back
08:48 - to our programs yes here and we use
08:56 - resharper to put it in a separate file
09:00 - okay let's say we would like to create a
09:04 - method that gets two parameters let's
09:07 - say two numbers and returns the bigger
09:09 - one so typically this is how we do it so
09:16 - if a is bigger than B we return a
09:19 - otherwise we return P now if you want to
09:22 - create a generic version of that this is
09:24 - how we do it
09:25 - so public instead of returning int
09:28 - return T and the name of the method here
09:33 - we add the template parameter and of
09:36 - course both of our parameters are going
09:38 - to be of type T so T a and T P now see
09:43 - if I write the exact same code it's not
09:48 - going to work why because at this time
09:52 - the compiler doesn't know the type of T
09:55 - so it cannot apply comparison between a
09:58 - and B at this point it thinks a and B
10:01 - are both objects let me show you that so
10:05 - these are the methods that are available
10:06 - in a which come from the object class so
10:10 - what we need to do here is we want to
10:13 - assume that both a and B implement the I
10:16 - comparable interface which provides a
10:19 - method call compare to and with that we
10:21 - can compare these two objects so that's
10:24 - a use case where we need to apply a
10:26 - constraint we apply a constraint by
10:28 - going here at the end of the method and
10:30 - saying where
10:32 - tea use : as in is I comparable with
10:39 - that if I say a dot see we get a new
10:43 - method here compared to which comes from
10:46 - my comparable so with that we can say if
10:49 - a compare to B is greater than zero
10:56 - return a otherwise return B also note
11:02 - that here I created a generic method
11:06 - inside a non-generic class and that's
11:09 - perfectly fine so you don't always have
11:11 - to start with the generic class
11:14 - you could potentially move this template
11:16 - here to the class level so utilities for
11:19 - T where T is I comparable and then we
11:24 - don't have to repeat that here and we
11:26 - can just get rid of that just like that
11:33 - okay now that you have an understanding
11:36 - of constraints and why we need them let
11:39 - me show you the other types of
11:40 - constraints here are five types of
11:43 - constraints you can say where T is I
11:46 - comparable as in applying a constraint
11:49 - to an interface or you can apply
11:51 - constraint to a class this case we are
11:54 - saying if T is a product or any of its
11:58 - children any of its subclasses you can
12:01 - say T should be a value type so we use
12:05 - the keyword struct or you could say
12:08 - where T is a class as in it has to be a
12:11 - reference type or you can say where T is
12:16 - an object that has a default constructor
12:20 - now don't worry I'm going to walk you
12:23 - through these with examples so so far
12:26 - you have seen a constraint to an
12:28 - interface let's take a look at a
12:30 - constraint to a class so I create
12:35 - class here public class a discount
12:42 - calculator T product where T products is
12:49 - a product now I'm going to move this to
12:54 - a separate file so in that case I can
13:01 - create a method here let's call it
13:03 - calculate discount which gets a
13:08 - parameter of type product or any of its
13:11 - subclasses and here look we get the
13:17 - price and title attribute or property
13:19 - earlier I created this product class let
13:23 - me show you so this is my product class
13:27 - we have a title and a price
13:30 - we also have a book class here that
13:34 - derives from the product and adds an
13:36 - extra property here called ispn so with
13:41 - that constraint when we say t product
13:44 - should be a product or any of its
13:47 - subclasses we have access to all of its
13:49 - properties or methods here now we don't
13:53 - really care about the actual calculation
13:56 - of the discount but you got the point
14:00 - let's see an example of a constraint to
14:03 - a value type so a public class nullable
14:09 - t where t is a value type let me move
14:14 - that to a separate file okay what is
14:19 - this use for well in c-sharp as you know
14:22 - value types cannot be null so an integer
14:26 - should have a value like 0 1 2 3 it
14:28 - cannot be not we can use this class to
14:31 - give our value types the ability to be
14:34 - nullable so let's create a constructor
14:36 - here let's say
14:39 - tractor we can get we can get a value
14:44 - and in this class I'm going to store it
14:47 - as an object because I want it to be
14:50 - novel so private object value and here
14:56 - let me initialize it with resharper we
14:58 - can press alt and enter here and enter
15:01 - and it automatically initializes my
15:04 - private field with the value passed in
15:06 - the constructor now I want this class to
15:09 - have a property called has value so if
15:15 - my object has a value it returns true
15:19 - otherwise if it's null it returns false
15:21 - get return so if value is not now return
15:26 - true and we can have a method called
15:30 - public which returns t get value or
15:36 - default so with this method if our
15:40 - object has initialized let's say we have
15:42 - a number that is set to 5 it returns the
15:45 - value which is 5 otherwise it returns
15:48 - the default value or that type so for
15:51 - integers it's 0 so what we need to do is
15:55 - we say if it has value then return value
16:01 - we just have to cast it because this
16:04 - value here is of type object right but
16:08 - this cast is perfectly fine and it's
16:10 - safe because that's what we are passing
16:15 - here in the constructor we're storing it
16:17 - here and it's basically being boxed to
16:19 - be stored in the object but here we are
16:21 - unboxing it and that's perfectly fine
16:23 - now what if it's not set what if it's
16:26 - not we need to find the default value
16:28 - for that type how do we do that we use
16:31 - the default operator so we say return
16:34 - default of T so default is
16:40 - a good keyword that you need to know now
16:44 - with this class what we can do is we can
16:47 - go ahead and actually I forgot to create
16:49 - a default constructor here in case the
16:51 - value is not set now let's go to our
16:54 - program CS and use that I'm going to
16:58 - clear everything here we don't need them
17:00 - anymore so I can say for number equals
17:05 - new nullable of int I can give it a
17:12 - value like five let's look something to
17:16 - consult so CW it's a code snippet press
17:19 - tab out a has value plus number that has
17:29 - value console.writeline and the actual
17:33 - value is plus number that get value or
17:37 - default let's run this code so note that
17:44 - yes it has a value and its value is set
17:47 - to five now we can use this class
17:50 - without setting a value in this case we
17:53 - have an honorable integer so let's run
17:57 - this again so it has a value no what is
18:02 - the default value it's zero now you
18:05 - don't really have to go and create this
18:06 - nullable class is actually part of
18:09 - dotnet framework you can find it in
18:12 - system dot nullable is defined here and
18:14 - in fact it's a structure and look at
18:16 - this icon here it's not a class so let's
18:25 - go here so this not able is using a
18:28 - straight to specify the T has to be a
18:31 - value type let's look at another example
18:35 - let's go to our utilities class here let
18:40 - me create another metal here
18:43 - public void do something with T now
18:50 - let's say in some specific scenarios we
18:52 - want to instantiate and instance of T so
18:58 - if you want to create an object you want
19:00 - to do something like that but that
19:02 - doesn't work because at this time the
19:04 - compiler doesn't know exactly what type
19:07 - T is referring to all it knows is that T
19:10 - should implement a comparable interface
19:13 - if you want to instantiate T here you
19:17 - need a default constructor right so what
19:20 - you can do is to apply a second
19:22 - constraint here you can separate
19:24 - constraints food coma so to have a
19:27 - constraint to a default constructor
19:29 - that's what you use new now this is
19:34 - perfectly fine so with constant
19:39 - and specify that T must implement a
19:41 - given interface or B of a given type or
19:45 - any of its subclasses or be a value type
19:48 - or a reference type or have a default
19:52 - constructor I hope you enjoyed this
19:54 - video and thank you for watching