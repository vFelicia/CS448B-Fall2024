00:00 - let's talk about the skills you need to
00:01 - become a web developer web development
00:04 - is generally broken down into two areas
00:06 - frontend development and backend
00:08 - development and then full stack
00:10 - development which is a combination of
00:11 - both frontend development is all about
00:14 - what the user sees and interacts with
00:16 - it's the website in your browser or the
00:18 - app on your mobile phone or tablet
00:20 - backend development handles everything
00:22 - behind the scenes like data processing
00:24 - storage and logic you can start on
00:26 - either end but if you're starting out
00:28 - and pursuing a career in web development
00:31 - I recommend you to start with the
00:32 - backand because it gives you a solid
00:34 - foundation in programming and problem
00:36 - solving plus when you transition from
00:38 - back end to front end you'll have a deep
00:40 - understanding of what happens under the
00:42 - hood in contrast if you start with the
00:44 - front end back end looks like a mystery
00:46 - and you'll have no idea what's really
00:48 - happening under the hood so in this
00:50 - video first we're going to cover the
00:51 - skills you need to become a backend
00:53 - developer and then we'll talk about
00:55 - front-end development to become a
00:56 - backend developer there are five
00:58 - essential skills let's go over them one
01:00 - by
01:03 - one the first step to learning backend
01:05 - development is to pick up a programming
01:07 - language here we have a few options like
01:09 - JavaScript python Ruby Java C and go
01:13 - just to name a few now which one is the
01:15 - best well it's almost impossible to pick
01:17 - one language as the best or the ultimate
01:20 - language because the choice of language
01:22 - depends on various factors like project
01:24 - requirements team expertise and
01:26 - performance needs for example JavaScript
01:28 - is used for full stack development
01:30 - because we can use it on both the front
01:32 - end and the back end in contrast Python
01:35 - and Ruby are often used for rapid
01:37 - prototyping and fast development Cycles
01:40 - Java and C are often used in building
01:42 - large scale Enterprise grade
01:44 - applications they're heavily used in
01:46 - large organizations and government
01:48 - systems and go is used for performance
01:50 - critical and concurrent applications now
01:53 - the common mistake I see among my
01:54 - students is that they try to learn many
01:56 - of these languages hoping that this
01:58 - would increase their job opportunities
02:00 - but it doesn't work that way because
02:02 - learning a language is only the first
02:04 - step you also need to learn the
02:06 - ecosystem of tools and libraries for
02:08 - that language to land a job so if you're
02:10 - starting out just stick to one language
02:13 - whichever you like but also do a bit of
02:15 - research and see how many job
02:17 - opportunities are available for that
02:18 - language where you live generally
02:20 - speaking there are often more job
02:22 - opportunities for python Java and
02:24 - JavaScript but again I want you to do
02:26 - your own research now assuming that
02:28 - there are more job opportunities is for
02:30 - these three languages in your town and
02:32 - you're not sure what language to start
02:34 - with I would recommend python because
02:36 - it's the easiest and has a simple
02:38 - readable syntax that's great for
02:40 - beginners my second choice is Java
02:43 - because it's a solid language and is
02:44 - often taught to computer science and
02:46 - software engineering students JavaScript
02:49 - has a ton of weird parts and baggage
02:50 - from the past because it wasn't
02:52 - originally built for building backends
02:54 - we can certainly use it to build great
02:56 - backends and I've done that many times
02:58 - but I still prefer Java or or C to
03:00 - JavaScript for building backends so
03:03 - don't overthink this pick a language and
03:05 - dedicate 2 months to learning it if you
03:07 - spend 3 to 5 hours every day studying
03:10 - and coding you can learn any of these
03:11 - languages in about 2 months now to help
03:14 - you on this journey I've created a free
03:16 - supplementary PDF that breaks down the
03:19 - specific Concepts you need to learn for
03:21 - each skill it also includes several
03:23 - project ideas to help you practice and
03:26 - apply what you have learned it's a great
03:27 - resource to review your progress find
03:30 - gaps in your knowledge and prepare for
03:31 - interviews you can find the link in the
03:33 - description Box by the way I have a
03:35 - bunch of tutorials on this channel and
03:37 - complete courses on my website if you're
03:39 - looking for structured learning again
03:41 - links are in the description box the
03:43 - next thing you need to learn is a
03:45 - version control system like git git is
03:47 - not a programming language it's a tool
03:49 - that we use to track changes to our code
03:51 - and collaborate with others git and
03:53 - GitHub which is a platform that hosts
03:56 - git repositories are essential for every
03:58 - developer git has a ton of features but
04:00 - you don't need to know them all for
04:02 - everyday use think of it like the 8020
04:04 - rule 80% of the time you use 20% of gits
04:07 - features so one to two weeks of practice
04:09 - is enough to get up and running now
04:11 - building backends often involves working
04:14 - with data structures and implementing
04:16 - complex algorithms this is where a lot
04:18 - of self-taught programmers struggle
04:20 - because they try to skip ahead and learn
04:22 - more and more languages and tools
04:24 - without learning the fundamentals of
04:26 - computer science data structures and
04:28 - algorithms are critical subjects taught
04:31 - to computer science students and they're
04:33 - often covered in Tech interviews
04:35 - especially at Big tech companies like
04:37 - apple Google and Microsoft while you can
04:39 - skip this step and go to the next as
04:41 - someone who has had the privilege of
04:43 - teaching millions of people I highly
04:45 - recommend you not overlook this step
04:47 - otherwise you're going to feel the pain
04:48 - later in your career so spend 1 to two
04:51 - months studying classic computer science
04:54 - data structures and algorithms this will
04:56 - give you a strong foundation in
04:57 - programming and problem solving the next
05:00 - thing I'll recommend to learn which a
05:01 - lot of self-taught people Miss is design
05:04 - patterns design patterns are proven
05:06 - solutions to Common software design
05:09 - problems there are 23 classic design
05:11 - patterns that were documented in this
05:13 - classic book design patterns by the gang
05:15 - of four many of these patterns are used
05:17 - in web Frameworks particularly spring
05:20 - Django and as.net core which we will
05:22 - talk about in a few minutes so learning
05:24 - these design patterns will give you a
05:26 - deeper understanding of object-oriented
05:28 - design principles
05:30 - and how these Frameworks work under the
05:32 - hood now I got to tell you this book is
05:34 - pretty old and it's written in C++
05:37 - honestly it's a difficult read because
05:39 - many of the examples in the book are dry
05:41 - and not quite relevant to Modern
05:43 - software that's why I've created a very
05:45 - handson and pragmatic course on this
05:47 - topic where I use Java and modern
05:49 - examples that you find in applications
05:51 - we use every day so you can see how
05:53 - these design patterns are used to solve
05:55 - problems in modern applications whether
05:58 - you want to take my course or a
05:59 - different resource I believe if you
06:01 - dedicate a few hours every day you can
06:03 - have a pretty solid understanding of
06:05 - design patterns in about 2 months the
06:07 - next thing you need to learn is
06:09 - understanding and designing databases
06:11 - there are two classes of database
06:12 - engines relational and non-relational
06:15 - also called No SQL databases in
06:18 - relational databases data is stored in
06:20 - tables with rows and columns that are
06:22 - related that's why we call them
06:24 - relational databases these databases are
06:27 - best for applications that require
06:29 - complex queries and transactions like
06:31 - banking systems and e-commerce
06:33 - applications especially any application
06:35 - that needs complex reporting examples of
06:38 - relational database engines are MySQL
06:40 - postgress SQL server and Oracle these
06:43 - are different products that despite some
06:45 - differences work more or less the same
06:47 - way with all these products we retrieve
06:50 - or store data using a language called
06:53 - SQL some people call it SQL which is
06:55 - short for structured query language it's
06:58 - a simple language that looks like plain
07:00 - English now you don't need to learn all
07:02 - these database engines because different
07:04 - projects and teams use different
07:06 - database engines when you're starting
07:07 - out you just need to learn one of them
07:09 - and you can easily pick up others on the
07:11 - job out of these I would recommend MySQL
07:14 - because it's the most popular database
07:16 - engine but you can pick any other
07:17 - database engine that you like one month
07:20 - is enough to learn the essence of SQL
07:22 - and working with a relational database
07:24 - now in no SQL databases data is stored
07:27 - without a predefined table structure so
07:30 - these databases are more flexible
07:32 - they're best for applications that
07:34 - require flexible data models and
07:36 - real-time analytics examples include
07:38 - mongod DB couch DB and Cassandra again
07:42 - these are several products out there and
07:44 - you don't have to learn all of them out
07:46 - of these I would recommend mongodb
07:48 - because it's the most popular and you
07:50 - can learn it in about a month you're not
07:52 - going to be an expert but you're going
07:53 - to have a decent practical knowledge the
07:56 - next thing you need to learn is a web
07:58 - framework which depends on your
07:59 - programming language for python you
08:01 - should learn Jango for Java you should
08:03 - learn spring boot for JavaScript you
08:06 - should learn express.js for C you should
08:09 - learn as. net core for Ruby you should
08:11 - learn Ruby on Rails and for go you
08:13 - should learn J all these Frameworks more
08:16 - or less do the same thing they provide a
08:18 - bunch of tools for building backends
08:20 - handling tasks like routing requests and
08:23 - response handling database interaction
08:25 - and Security in a nutshell with these
08:28 - Frameworks we can build and publish
08:30 - application programming interfaces or
08:32 - apis these apis are essentially
08:35 - communication points between front ends
08:37 - and backends allowing front ends to
08:39 - retrieve or post data to backends if you
08:42 - have a solid background in a programming
08:44 - language and databases you can learn any
08:46 - of these Frameworks in about 2 months so
08:48 - if you dedicate a few hours every day
08:50 - and follow this road map you'll have the
08:53 - necessary knowledge to apply for
08:55 - entrylevel backend Developer jobs in
08:57 - about 12 months now let's talk about the
08:59 - essential languages and Technologies you
09:01 - need for frontend development frontend
09:03 - development is built on Three core
09:05 - languages HTML CSS and JavaScript HTML
09:09 - or hypertext markup language is used for
09:12 - structuring web pages we can Define
09:14 - headings paragraphs images links and
09:16 - more it's quite simple and if you
09:18 - dedicate a few hours a day you can learn
09:20 - the basics in a week or two the next
09:22 - thing you need to learn is CSS or
09:24 - cascading stylesheets CSS is used for
09:27 - styling web pages it allows us to
09:29 - control colors fonts layouts and so on
09:32 - it helps create responsive designs that
09:34 - adapt to different screen sizes with a
09:36 - few hours of practice a day you can
09:38 - learn the essence of CSS in 2 to 4 weeks
09:41 - you won't be an expert but you'll have
09:43 - practical knowledge to apply in your
09:45 - projects as you work on different
09:46 - projects you will learn additional
09:48 - techniques along the way the next thing
09:50 - you need to learn is Javascript and this
09:52 - is where programming starts HTML and CSS
09:55 - are for structuring and styling pages
09:57 - but programming is about logic it's
09:59 - about algorithms and this is where
10:01 - JavaScript comes in with JavaScript we
10:03 - can make our web pages interactive we
10:05 - can handle user clicks validate form
10:08 - data show popups get data from the back
10:10 - end and basically bring our website to
10:12 - life now if you have never programmed
10:14 - before this might be the most
10:15 - challenging part of your journey because
10:17 - you have to learn how to think like a
10:19 - programmer it might feel weird at the
10:21 - beginning but with continuous study and
10:23 - consistent practice I'm sure you can get
10:25 - a reasonable grasp of it in about 2
10:27 - months the next thing you need to learn
10:29 - is typescript it's a language that's
10:31 - built on top of JavaScript that adds
10:33 - static typing and additional features
10:36 - allowing us to write more robust code
10:38 - these days most companies prefer
10:40 - typescript for large scale applications
10:42 - so if you want to land a frontend
10:44 - developer job in 2024 and Beyond
10:46 - typescript is a must know it's
10:48 - relatively small compared to JavaScript
10:51 - and you can get up and running in about
10:52 - 2 to 3 weeks next on our list is a UI or
10:56 - user interface library or framework a UI
10:59 - framework is for building user
11:01 - interfaces using reusable components or
11:04 - building blocks examples include react
11:06 - angular View and so on react is the most
11:09 - popular and has a ton of job
11:11 - opportunities so if you're looking to
11:12 - land a frontend developer job react is
11:15 - your best bet now to learn react
11:17 - effectively you need to have a solid
11:19 - understanding of JavaScript and basic
11:21 - grasp of typescript because most react
11:23 - projects these days use typescript so
11:25 - make sure to build a strong foundation
11:27 - in JavaScript before diving into react
11:30 - otherwise you're going to face numerous
11:32 - challenges with a solid understanding of
11:34 - JavaScript you can get up and running
11:36 - with react in about 2 months then you
11:38 - can explore other options like angular
11:40 - or view to add to your resume focus on
11:42 - one framework at a time learn it
11:44 - properly do a few projects and once you
11:46 - have a solid understanding you can learn
11:48 - other Frameworks if you wish so that's
11:51 - the core of front and development these
11:53 - skills are listed on nearly every job
11:55 - description and with continuous learning
11:57 - and consistent practice you can learn
11:59 - them all in about 6 months but I got to
12:02 - be honest with you frontend development
12:03 - is competitive so to truly stand out
12:06 - there are additional skills you need to
12:08 - learn to increase your job opportunities
12:10 - so let's go over them one by one you
12:12 - learn that with CSS we can style web
12:15 - pages and make them beautiful now as our
12:17 - projects grow and get more complex
12:19 - styling Pages using plain CSS can become
12:22 - painful and messy so over time many
12:24 - solutions have been created to address
12:26 - this problem one of them is CSS
12:29 - pre-processors which allow us to write
12:31 - CSS in a more efficient syntax using
12:34 - additional features and then compile it
12:36 - down to plain CSS examples include SAS
12:39 - Les and stylus different projects use
12:42 - different tools and you don't need to
12:43 - learn all of these to apply for a front
12:45 - and developer job if you're familiar
12:47 - with one of them you can quickly learn
12:49 - others on the job out of these I would
12:51 - suggest SAS because it's the most
12:53 - popular and a good one to start with one
12:55 - to two weeks is enough to get up and
12:57 - running with SAS another approach to
12:59 - writing manageable CSS is using a CSS
13:02 - framework a CSS framework provides
13:05 - pre-written CSS that we can use in our
13:07 - applications some of the popular ones
13:09 - are bootstrap Tailwind Foundation
13:12 - skeleton and so on now as you can see
13:14 - here on npm Trends bootstrap used to be
13:16 - very popular and a lot of projects are
13:19 - still using it but over the past couple
13:21 - of years Tailwind has been emerging and
13:23 - overtaken bootstrap so a lot of newer
13:25 - projects particularly react projects use
13:28 - Tailwind so out of these I recommend
13:30 - learning Tailwind it's not that
13:32 - complicated and you can get a decent
13:34 - grasp of it in about 2 to 4 weeks
13:37 - another key skill that employeers are
13:39 - looking for especially in senior
13:41 - developers is automated testing with
13:43 - automated testing we can write code to
13:45 - test our code and make sure it functions
13:48 - correctly automated testing minimizes
13:50 - bugs and enhances the overall quality of
13:53 - our applications there are many testing
13:55 - Frameworks out there but the two most
13:57 - popular ones are just and V test which
13:59 - are pretty similar so once you learn one
14:01 - of them you can learn the other pretty
14:03 - quickly just is the most popular one but
14:05 - it has some baggage so newer projects
14:08 - often use vest again they're very
14:10 - similar and you can start with either of
14:12 - them I believe 3 to four weeks is enough
14:15 - to learn the essence of just and
14:17 - automated testing principles next on our
14:20 - list is meta Frameworks a meta framework
14:22 - is a higher level framework that sits on
14:24 - top of a core UI library or framework
14:27 - and enhances its cap abilities it's not
14:30 - something that all employers are looking
14:31 - for because it's only used in newer
14:34 - projects a lot of older projects don't
14:36 - use a meta framework but if you want to
14:38 - have a Competitive Edge if you're
14:40 - looking for a better position with a
14:41 - better salary I would recommend learning
14:43 - a meta framework for react applications
14:46 - we have nextjs which is the more popular
14:48 - option and remix I recommend learning
14:51 - nextjs which you can master in 4 to 6
14:54 - weeks if you have a strong foundation in
14:56 - react so that really sums up the
14:58 - essential schem deals you need to become
15:00 - a frontend developer if you have any
15:02 - questions please let me know in the
15:03 - comments below and I will do my best to
15:05 - answer you right here or in my future
15:08 - videos if you enjoy this video please
15:10 - give it a like And subscribe for more
15:12 - useful content