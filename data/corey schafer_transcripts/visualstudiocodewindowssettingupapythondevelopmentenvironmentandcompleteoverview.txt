00:00 - hey there how's it going everybody in
00:01 - this video we're gonna be learning how
00:02 - to install Visual Studio code and set up
00:04 - a Python development environment we're
00:06 - also going to go over the different
00:07 - features of this editor and see why it's
00:09 - so nice for Python development so we'll
00:11 - cover how to easily switch between
00:12 - editors how to debug applications how
00:15 - git integration works look at unit
00:18 - testing capabilities and a few other
00:20 - things so I've had a ton of comments and
00:22 - requests to cover vs code and it just
00:24 - seems like so many people are switching
00:25 - over to it I don't know how many of you
00:27 - all listen to talk Python podcasts with
00:29 - Michael Kennedy but at the end of every
00:31 - show he always asks us guess what editor
00:33 - or IDE they prefer to use and it used to
00:36 - be pretty mixed but now I just feel like
00:38 - I hear vs code so often on there that I
00:40 - figured I had to take some time out to
00:42 - try this and I've got to say so far I'm
00:45 - really impressed with this editor now I
00:47 - wouldn't doubt if you all see me using
00:48 - this from here on out in my videos so
00:51 - with that said let's go ahead and get
00:52 - started and see how to set this up and
00:54 - I'll show you what I like so much about
00:56 - this now I ran into some differences
00:58 - between how this works on Windows and
00:59 - Mac so I decided to just make one video
01:02 - specifically for Windows and one
01:04 - specifically for Mac so this video will
01:06 - be covering how to use vs code on
01:08 - Windows but if you're using a Mac then
01:10 - I'll be sure to leave a link to that
01:11 - video in a description section below so
01:14 - first of all let's go ahead and install
01:15 - Visual Studio code so I've got their
01:18 - website pulled open here in my browser
01:20 - and that is at code Visual Studio com
01:23 - now Visual Studio code is different from
01:26 - Visual Studio which is a full on IDE vs
01:30 - code is a lighter-weight editor that can
01:32 - be extended with plugins for whatever we
01:34 - need so be sure to search for Visual
01:36 - Studio code and not just Visual Studio
01:38 - I'll also have a link to this page in
01:41 - the description section below
01:42 - now vs code is free so we don't need to
01:45 - buy anything we just need to download it
01:47 - and install it so I'm just going to
01:48 - download it from the website here so
01:51 - I'll click on download and then it
01:52 - choose your operating system I'm on a
01:55 - Windows here and now this should
01:58 - download automatically ok so once that
02:00 - is downloaded I'm just going to run that
02:02 - executable and this is just like any
02:06 - other software installation wizard we'll
02:08 - have to accept some terms here pick our
02:10 - install location
02:12 - I'll go ahead and create a desktop icon
02:14 - for this as well and let's just continue
02:17 - on and finally I will install and once
02:20 - that's installed then I will open up
02:22 - visual studio code okay so now that
02:24 - that's finished I'm just going to check
02:26 - this here that says launch Visual Studio
02:27 - code and finish that and now it should
02:31 - launch vs code for the first time here
02:34 - so this might take a sec to pop up okay
02:38 - so when we first run vs code it's going
02:40 - to open they're getting started page in
02:42 - the browser and also it's going to show
02:44 - us their welcome screen here with in vs
02:46 - code now there's a lot of good
02:48 - information on both of these pages but
02:50 - we'll go over a lot of this in the video
02:52 - so I'm just going to close these down
02:54 - here for now so I'm going to close the
02:55 - browser and I'm also going to close this
02:59 - welcome page here and now let me make
03:01 - this larger here so that we can see the
03:03 - editor and I'm also going to zoom in so
03:05 - that we can see the menus and the text a
03:08 - little bit easier here okay so we can
03:10 - see right off the bat that we have a
03:12 - very simple design which is definitely
03:14 - nice once you get used to it
03:15 - because you don't have a lot of other
03:16 - stuff getting in your way but when
03:18 - you're new it might be hard for you to
03:20 - remember your way around because we're
03:21 - mostly dealing with icons and not
03:23 - descriptions so this bar over here on
03:26 - the left is called our activity bar and
03:29 - this is our main navigation for the
03:31 - editor and if you hover over any one of
03:33 - these icons then after a second or two
03:36 - it'll pop up with a description so we
03:38 - can see here that this top one here is
03:40 - the Explorer and if we click on that
03:42 - then this is where we can open our
03:44 - directories and files we don't have
03:46 - anything open right now but we have the
03:49 - option to open a project folder and
03:51 - we'll do that here in just a second
03:53 - so the second option here this is for
03:56 - search so this is where we can do our
03:59 - finds and replace and we can do these
04:01 - within multiple files and the third icon
04:04 - here is the git integration which is the
04:07 - source control and we're gonna take a
04:08 - look at this in a bit and see how to
04:10 - push some code up to github but I'm not
04:12 - going to look at this quite yet but we
04:15 - will take a look at this here in just a
04:17 - bit
04:17 - now the next icon here is the debugging
04:20 - icon now this is a very nice feature in
04:23 - vs code and it's a feature that a lot of
04:26 - other
04:26 - don't have right out-of-the-box now I
04:28 - found the debugging pretty intuitive and
04:30 - easy and we'll take a look at this here
04:33 - in a bit as well when we debug some code
04:35 - some Python code okay so the last icon
04:38 - down here at the bottom is one that
04:40 - we're going to be using right now and
04:41 - this is for managing extensions so
04:44 - whenever we click on this let me make
04:46 - this a little wider and it should show
04:48 - us some icons here ok so right off the
04:50 - bat it shows us some recommended
04:53 - extensions here at the top and then it
04:55 - shows us some popular extensions right
04:57 - below this now you might not have these
04:59 - recommended extensions if you do then
05:01 - they might not be the same ones so for
05:04 - example this is recommending as your
05:06 - repos to me and it tells me that this is
05:08 - recommended because I have git installed
05:10 - now I'm not sure why
05:12 - usually it recommends sublime key
05:14 - mapping let me search for that extension
05:17 - if I search for sublime and click on
05:19 - this then this is a sublime text key map
05:23 - and settings which will import sublime
05:25 - text settings and key bindings into vs
05:28 - code usually it recommends that to me
05:29 - whenever I since I already have sublime
05:32 - text installed but if you're using
05:34 - another editor then it might recommend
05:36 - those key map and setting imports for
05:40 - you within the extensions here but I'm
05:42 - just going to close that for now and now
05:45 - we're going to look at the popular
05:46 - extensions here so the extension that
05:48 - we're really after right now is this
05:50 - Python extension and this is the most
05:52 - popular extension on vs code by far so
05:55 - if I sort the extensions by popularity
05:57 - so right now if we go to show popular
06:01 - extensions then it's already sorted by
06:04 - install count but we can also sort by
06:06 - rating a name if we wanted to as well so
06:09 - we can see here at the top we have
06:11 - Python and this has 40 2.2 million
06:14 - downloads so far and the one in second
06:18 - place only doesn't even have half of
06:20 - that so this is definitely the most
06:21 - popular extension at the moment and we
06:24 - can see in this description here of this
06:26 - extension that this extension adds
06:29 - support for linting and debugging
06:33 - formatting our code unit testing and
06:35 - intellisense and intellisense is what
06:38 - shows us what attributes and methods we
06:40 - use while we're typing and give us
06:42 - information about those and we'll see
06:44 - more about intellisense in just a bit as
06:46 - well so I'm going to install this
06:48 - extension because this is what's going
06:50 - to allow us to work with Python and code
06:52 - and this might take a second to install
06:54 - because it's a larger extension but we
06:57 - can see that it just now finished up ok
06:59 - so now I'm going to open some existing
07:01 - Python code that I have in a folder on
07:03 - my desktop now if you don't have any
07:06 - existing Python code to work with then
07:09 - you can simply create a project folder
07:11 - yourself and add an a script with a dot
07:15 - py extension and be sure that you
07:17 - include that dot py extension so that vs
07:20 - code knows that it's Python and gives
07:21 - you some nice syntax highlighting but
07:23 - I've already got a script available so
07:25 - I'm going to open this up so I'm going
07:27 - to go to open folder and then this is on
07:31 - my desktop so I'm going to go to desktop
07:34 - here and just open up my project and now
07:38 - it's going to open those open that up in
07:40 - a new window now I'm going to close down
07:42 - the welcome page again and actually down
07:44 - here at the bottom I'm going to select
07:45 - deselect to show the welcome page on
07:48 - startup and now I'm going to open up my
07:50 - python script okay so we get a few
07:53 - pop-ups down here this one says that we
07:56 - can change our Python interpreter and
07:57 - this one says that we don't have a
07:59 - linter installed now I'm probably going
08:01 - to get these pop-ups a good bit but I'm
08:03 - just going to ignore them for now and we
08:05 - will take a further look at these
08:06 - whenever we actually do linting but for
08:10 - now I'm gonna have to keep just exiting
08:12 - those out ok so I have a simple python
08:15 - script open here now first I'm importing
08:18 - sis let me make this a bit larger again
08:21 - once we change some settings here in a
08:23 - bit then it will give us a better screen
08:26 - size here with our editor so first
08:29 - within my python script i'm importing
08:31 - sis and i'm printing out sista and sis
08:34 - not executable so this will let me know
08:36 - what version of python i'm using and
08:39 - where it's located on my computer then
08:41 - I'm just then I just have a simple
08:43 - function here that creates a greeting
08:45 - and then I'm printing out a couple of
08:47 - greetings here at the bottom I just
08:49 - wanted some sample code so we could see
08:51 - some of this syntax coloring here
08:54 - okay so first let me see how we can run
08:57 - this Python code so by default our
08:59 - Python extension is going to use the
09:01 - first Python interpreter that it finds
09:03 - on our system path now if you don't have
09:05 - Python 3 installed then this might use
09:07 - Python 2 if you have Python 2 installed
09:10 - if so then I can show how to change
09:12 - these in just a bit so first let's just
09:15 - try to run this so to do this we can
09:17 - right click anywhere within our module
09:20 - and then we can come down here to the
09:23 - bottom and we can see that we can run
09:25 - current test run Python file in terminal
09:28 - I'm going to select run Python file in
09:30 - terminal and now this will bring up our
09:35 - terminal here and it will run our python
09:38 - code now we're going to look at how to
09:40 - use a keyboard shortcut to run code in
09:42 - just a bit so if you don't like right
09:43 - like right clicking to run your code
09:45 - then don't worry we'll see how to make
09:47 - it more simple in just a bit but for now
09:49 - if we look at my output down here then
09:51 - we can see that I'm using Python 3 7
09:54 - that are printed out right there and
09:55 - then it prints out the location where
09:58 - that is here on my machine and also it
10:01 - printed out those greetings ok so what
10:04 - if we wanted to change our Python
10:06 - interpreter so there are a couple of
10:08 - different ways that we can do this so if
10:10 - we look at the blue bar at the bottom of
10:12 - the page then in the bottom left it
10:15 - shows us which Python interpreter we're
10:17 - currently using so if we click on this
10:19 - then we can change our Python
10:21 - interpreter so if I wanted to use Python
10:24 - 2 then I have that installed here in
10:28 - Python 2 7 directory with this Python
10:31 - executable so if I click on that and now
10:34 - I right click and go to run Python file
10:38 - in terminal then now we can see that
10:41 - it's running Python 2 7 and that this is
10:45 - the location of the Python interpreter
10:46 - and then it also prints out those
10:48 - greetings so let me go ahead and clear
10:52 - out my terminal here now if you ever
10:55 - want to clear your screen and you have
10:56 - the CMD running then I think you can
10:59 - just type in CLS yes so that works ok so
11:01 - now I'm going to change this back to
11:02 - Python 3 7 we can see I also have Python
11:05 - 3 6 install here and it's going to find
11:08 - in
11:08 - of those anything that's located in a
11:11 - regular Python path then it's going to
11:14 - find those so I'm gonna switch back to
11:15 - Python three seven here so let me make
11:19 - this a little smaller here so that we
11:21 - can see now if you don't have Python 3
11:23 - installed then I definitely recommend
11:24 - using that if you'd like to see how to
11:27 - install that on both Windows and Mac
11:29 - then I do have a separate video where I
11:32 - show how to do that for both operating
11:33 - systems so I'll put a link to that video
11:35 - in the description section below if
11:37 - anyone needs to see how to install that
11:39 - so I show you I also show you in that
11:41 - video how to get it in your path and
11:43 - everything so once it's in your path
11:45 - then the S code should automatically
11:47 - pick that up and allow you to use that
11:49 - now when I changed my interpreter you
11:51 - may or may not have noticed that vs code
11:53 - created a folder inside of my project
11:56 - directory here called dot vs code and
11:58 - that directory has a Settings dot JSON
12:01 - file so these are settings for our
12:03 - specific current workspace so let me
12:06 - open this up and we can see that it set
12:10 - our Python a path within the settings
12:13 - JSON file but what if we wanted to use a
12:17 - certain Python interpreter by default
12:19 - for every project because right now this
12:21 - is just this specific projects settings
12:24 - so to do that we're going to need to set
12:27 - it in our global user settings and while
12:29 - we're talking about our user settings
12:31 - let's also make some changes to other
12:33 - global settings as well so let's look at
12:36 - how to change our color theme our file
12:38 - icons and things like that so that we
12:40 - can personalize our editor a bit so
12:42 - first let's change our color themes
12:44 - there are several built-in ones that we
12:46 - can use and to change your color theme
12:49 - then we can just open up our command
12:50 - palette now this is the first time that
12:53 - we've opened our command palette but it
12:55 - is extremely useful it basically allows
12:57 - us to access every command and
12:59 - everything that we can do within vs code
13:02 - so to open the command palette we can do
13:04 - that with ctrl shift P so once we open
13:07 - this up then we can basically type in
13:09 - anything we want to do and it will
13:11 - likely show us how to do that so if I
13:14 - want to change color themes and Alki
13:16 - type in color here and I can just change
13:19 - my color theme press preferences by
13:21 - clicking
13:22 - this right here so whenever I click on
13:24 - this if we scroll up and down in this
13:26 - list then we can see that it gives us a
13:29 - live preview of exactly what this looks
13:32 - like now they have some nice built-in
13:34 - themes here but I'm actually going to
13:38 - install additional color themes and
13:40 - that's the last option down here at the
13:43 - bottom so I'm going to click on that now
13:45 - if anyone has watched my videos before
13:47 - then you know that I usually use sublime
13:50 - text and the color theme that I use in
13:52 - sublime text is called
13:54 - pre-dawn now somebody has actually put
13:57 - together a pre-dawn 4 vs code as well
13:59 - and I'm glad that they did because I
14:01 - like that color theme so that's what I'm
14:03 - going to use and it's this one here
14:05 - pre-dawn theme kit this pre-dawn
14:07 - Twilight I'm not sure what that is but
14:09 - this is the one that looks like the
14:11 - sublime text version so I'm going to
14:13 - install that and then click on that to
14:16 - use pre-dawn now if I go back to my
14:18 - script then we can see for those of you
14:20 - have seen my videos before this likely
14:22 - looks more how I usually have it set up
14:26 - and there are plenty other popular color
14:28 - themes out there so definitely look
14:30 - around and see what you like because you
14:32 - know as programmers we are using our
14:34 - editors a lot so you should definitely
14:36 - have something that is pleasant to your
14:38 - specific tastes now we can also change
14:40 - how our file icons look over here in the
14:44 - sidebar so to do that
14:46 - we can see that this looks pretty good
14:48 - right now it gives us a Python icon for
14:51 - the Python files and these brackets for
14:53 - a JSON file but if we wanted to update
14:55 - this then we can open our command
14:57 - palette and now I'm going to type in
14:59 - file icon and then we can change our
15:02 - file icon theme so if I click on that
15:05 - then by default we only have a couple in
15:07 - here but again we can install additional
15:10 - file icon at themes and here if we want
15:15 - to sort by popularity then again we can
15:17 - just click on these extra dropdowns here
15:20 - and then go down to sort by install
15:22 - count and it looks like it probably was
15:24 - already sorted by and saw count so the
15:27 - one that I personally like is this one
15:29 - here called a why you so I'm going to
15:32 - click on that and I'm going to install
15:35 - that
15:36 - and once that installs it might actually
15:39 - override your color theme here I'm gonna
15:42 - select predawn again down there at the
15:44 - bottom but now if we go back to our
15:47 - editor and let me open up the command
15:50 - palette again and press file icon theme
15:54 - then we can select a weiu since that was
15:57 - installed and when I select that we can
15:59 - see that now these changed icons over
16:01 - here and I like this one because it
16:03 - gives a nice indicator of closed and
16:06 - open folders here on within your file
16:09 - explorer over here okay so I think those
16:11 - setting changes look pretty good for
16:13 - both our color theme and for our file
16:16 - icons so right now we're actually
16:18 - implicitly changing our global user
16:20 - settings by changing our color themes
16:23 - and all of that but there are a ton of
16:24 - other settings that we can change that
16:26 - we haven't seen yet so if we want to see
16:28 - all of the settings that we can change
16:30 - then we can open our settings by going
16:32 - to the bottom left of our activity bar
16:34 - and clicking on this gear icon here so
16:37 - if I click on that then we can see that
16:40 - we have some other options here as well
16:42 - we can open our command palette from
16:43 - there we can look at our settings our
16:45 - extentions keyboard shortcuts all of
16:47 - that I am going to open up these
16:49 - settings for now okay so they used to
16:51 - have this set up to where it opened up
16:52 - the default settings and your user
16:54 - settings side by side in JSON format and
16:56 - I kind of liked that a bit better but
16:59 - now we have it to where it opens up this
17:01 - UI version of our settings instead so
17:04 - you can come in here and change your
17:06 - settings using this unit user interface
17:09 - but honestly I hardly ever use it like
17:11 - this I am coming from sublime text so
17:15 - I'm much more used to the JSON settings
17:17 - and I believe that it gives you a better
17:19 - overview of the settings that you're
17:20 - changing now we can switch to the JSON
17:23 - version of our settings just by clicking
17:26 - on these brackets up here and when we
17:28 - hover over that it says open settings in
17:30 - JSON so I'm going to click on that and
17:32 - now these are our settings in JSON
17:34 - format so we can see that I've you have
17:37 - zoomed in to our editor so we have a
17:39 - zoom level of 3 and anytime we hover
17:42 - over a setting we can see that it gives
17:43 - us a description of what that setting
17:45 - does as well so that is a nice feature
17:47 - now since these are our users
17:49 - settings this is only going to show us
17:51 - what these settings that we have changed
17:53 - from the default so I have changed the
17:55 - zoom level this startup editor is
17:58 - because I said that I don't want to see
18:00 - the welcome screen when I log in we have
18:03 - the color theme here and the icon theme
18:05 - here as well now I have some other
18:07 - preferred settings that I'll show in
18:08 - just a bit now I do wish that they
18:11 - showed the default settings by default
18:13 - when we open up our settings as well
18:16 - because I feel like someone who's new to
18:18 - v/s code might not know what settings
18:20 - they can and can't change so it'd be
18:22 - nice to see those default settings so
18:24 - I'm gonna change my settings so that it
18:27 - does show my user settings and default
18:29 - settings now I usually have this set up
18:30 - to where it shows them side by side but
18:32 - since I'm so sumed in here side by side
18:35 - isn't really going to look good in this
18:37 - video so I'm just gonna leave that part
18:39 - out for now so to do this I'm going to
18:43 - open my command palette and now I'm
18:46 - going to type in default settings and my
18:49 - type in default settings we can see here
18:51 - it says open default settings so I'm
18:53 - going to open those and these default
18:56 - settings here these are all of the
18:58 - settings that we can change within vs
19:01 - code so we can see that there are ton
19:02 - here and the comments here show us an
19:06 - exact or show us a snippet of what
19:09 - change the changing these settings would
19:11 - actually do now like I said I'm going to
19:13 - change a couple of settings here that
19:15 - open up my settings in JSON since I
19:17 - prefer that to the UI version and also
19:19 - I'm going to have it open up my default
19:22 - settings when I open up my user settings
19:24 - so to do this you don't really have to
19:27 - know what I am doing here but I'm just
19:30 - going to do a search and you could find
19:32 - these on your own but I've already
19:34 - written them down here so this is within
19:36 - workbench settings and we can see here
19:39 - that we have a few settings here so we
19:42 - have workbench settings editor it's
19:45 - currently set to UI by default I'm going
19:48 - to copy that and go into my user
19:50 - settings and instead I'm gonna change
19:53 - this to JSON now if we don't know what
19:55 - options we can use with this setting
19:57 - then we can always click on this pencil
19:59 - icon over here and the gutter that says
20:02 - edit
20:03 - when I click on that it gives us the
20:04 - options that we can use so we can either
20:06 - use UI or JSON so that is a nice touch
20:10 - there and it says I have to save and
20:11 - retry in order to save that so I changed
20:14 - that to JSON now I'm also going to let's
20:18 - see come down here a little bit and I
20:20 - want open default settings set the true
20:23 - as well we can see that the comment here
20:25 - says controls whether opening settings
20:27 - also opens an editor showing all the
20:30 - default settings and I like to see my
20:32 - default settings while I'm editing my
20:34 - user settings so I will set that to true
20:37 - and now we have that saved so now if I
20:43 - save that and then I close down all of
20:45 - my settings here if I reopen the
20:48 - settings by doing that the same way
20:50 - going to the activity bar here clicking
20:52 - on this gear icon and clicking on
20:54 - settings then now it opens up my
20:58 - settings and default settings here at
21:00 - the same time and just to get that into
21:02 - one single window I can just drag and
21:04 - drop it over there so now we have our
21:06 - default settings here and we have our
21:08 - user settings here so now anytime you
21:11 - want to see what default settings you
21:12 - can change then you can just come in
21:15 - here and look at all of the comments or
21:18 - if you want to search for something
21:19 - specifically like Python then I can do a
21:22 - ctrl F over here to find and then let's
21:26 - say that I wanted to search for Python
21:27 - settings so I can do Python dot and now
21:30 - this will take me to the Python settings
21:33 - so for example like I was saying before
21:35 - one setting that I want to change is my
21:38 - default Python path so that it runs the
21:41 - exact version of Python that I wanted to
21:43 - run by default any time we start a new
21:45 - project so I could just do that by
21:47 - searching python dot and then I'm gonna
21:50 - try to do Python path so python dot p
21:55 - let's search through here so we can see
21:57 - here that we have Pippy and V path
22:00 - poetry path and here we have Python path
22:02 - so now in order to change this I'm just
22:05 - going to copy this and put it here into
22:08 - my settings and now I want to put the
22:12 - full path to the version of Python that
22:15 - I want to use by default
22:16 - so in order to do this I think the best
22:18 - way to grab this would just be to open
22:20 - my integrated terminal here and you can
22:23 - do that with control tilde and now I'm
22:27 - gonna do a command of where Python and
22:30 - this should show me okay so that didn't
22:33 - work there let me see if the Python
22:36 - command is running there okay so that is
22:39 - so I can do import sis and then do sis
22:41 - dot executable and that will give me the
22:45 - full Python path there now that is the
22:48 - version that I want to use for every
22:50 - default project I want to use this
22:52 - Python 3 7 so I can exit out of there
22:56 - and clear the screen and now I'm just
22:59 - going to paste that here within my
23:02 - settings and we can take those single
23:05 - quotes out that it added in for us
23:08 - because that'll just mess it up ok so
23:10 - now I can save that so now anytime we
23:13 - were working with a Python at file then
23:15 - we shouldn't need to check which Python
23:17 - interpreter we're using because you
23:19 - should know by default which one it's
23:21 - going to be using now while we're in our
23:23 - settings here we can also make some
23:25 - other changes to our editor that you
23:27 - might like
23:27 - now I'm gonna copy and paste a few
23:29 - settings into mind here now you don't
23:31 - have to do this but these are just
23:32 - personal preferences and it'll also make
23:35 - the text and a little in window here a
23:37 - little bit easier for you to see during
23:39 - this video so let me grab these and I'll
23:42 - explain exactly what I changed so these
23:45 - are the settings that I want to change
23:46 - here so I'm going to copy these and just
23:50 - paste them in to my user settings here
23:57 - so if I save that then we can see that
23:59 - the text is way too large because I am
24:02 - currently zoomed in too far here so let
24:06 - me zoom actually I'll keep the zoom the
24:09 - same but I will change the font size
24:12 - here so let me try let's see if ok so I
24:15 - think size 14 font well actually that's
24:19 - a little small let's do let's do 16 font
24:22 - for this video now that might look a lot
24:24 - larger than size 16 font but that is
24:27 - because we are zoomed in to the
24:30 - here so that size 16 font actually looks
24:33 - pretty large the reason we're zoomed in
24:35 - is so that we can see everything else
24:37 - here in the editor like the sidebar and
24:39 - things like that now on your machine you
24:41 - might not need to zoom in the only
24:43 - reason I'm doing that is because I'm
24:44 - recording this video and I want
24:46 - everybody to be able to see now I'm also
24:49 - using a source code Pro here as my font
24:52 - for the editor and for the debug
24:55 - terminal now if you want to use that as
24:58 - well then that's a font that you can
25:00 - download from google fonts and I'll be
25:02 - sure to leave a link to that in the
25:03 - description section below as well so
25:05 - like I said those are just personal
25:06 - preferences the important thing here was
25:09 - setting the default Python interpreter
25:11 - so now the s code should use that
25:13 - version of Python by default unless we
25:17 - change our interpreter specifically for
25:19 - our project now why would we want to
25:22 - change our interpreter specifically for
25:24 - one project well the most common reason
25:26 - is because it's usually a good idea to
25:28 - create a virtual environment for our
25:30 - project so let's see how we'd create a
25:33 - virtual environment and then set that as
25:35 - our interpreter for a specific project
25:37 - so I'll create one for the current
25:41 - project that we currently have open here
25:43 - so to do this I think it's easiest to do
25:45 - this through the integrated terminal so
25:47 - I'm going to open that up and again that
25:49 - is control tilde and whenever you open
25:52 - up a terminal it's automatically going
25:54 - to open up into your current project
25:58 - folder so we can see here that I'm on my
25:59 - desktop in this my project folder so now
26:03 - that we're navigated to our project
26:05 - directory this is where I'm going to
26:07 - create the virtual environment so if you
26:09 - want to create a new virtual environment
26:11 - I think the easiest way to do that is
26:13 - using the V env module from the standard
26:16 - library and if you don't know how to
26:17 - create virtual environments using ve and
26:19 - V then I do have a separate video that
26:21 - goes into more detail about how to do
26:23 - this so I'll be sure to leave a link to
26:25 - that in the description section below as
26:26 - well if anyone is interested but
26:28 - basically we can just say Python whoops
26:32 - let me spell that right Python - M and
26:35 - that will run a module and the module we
26:38 - want to run is ve and V and now we can
26:41 - pass in our arguments to that module and
26:43 - the arguments
26:44 - we want our the virtual environment name
26:46 - and the virtual environment name I'm
26:48 - just going to call ve and V as well so
26:50 - if I run that then it might take a
26:53 - second to create that virtual
26:55 - environment but once that finishes then
26:59 - let me check my project directory up
27:00 - here now and yeah we have a V env
27:03 - directory here so that virtual
27:05 - environment did get created so let me
27:08 - close down my terminal here and now that
27:10 - we have that for our project we just
27:13 - need to change the interpreter like we
27:15 - did before so I can come down here to
27:17 - the bottom left and click here and when
27:20 - I do that we can see that we have a
27:22 - Python 3 7 in called ve and V here and
27:26 - we can see that it gives the location of
27:28 - the current directory within this V env
27:30 - folder so V s code automatically pick
27:33 - that up so I'm going to change to that
27:35 - and like I was saying V s code
27:36 - automatically pick that up and that's
27:38 - because V s code automatically picks up
27:41 - virtual environments within the base of
27:43 - our project how like how we created it
27:45 - here now I can also pick up Khanda
27:47 - environments as well and things like
27:49 - that now if you're using a virtual
27:51 - environment that's located somewhere
27:53 - else on your machine then to do that you
27:56 - can just open up the settings dot JSON
27:58 - file here in your dot vs code directory
28:01 - and we can just put the path to whatever
28:05 - virtual environment you want to use
28:08 - within here but it can audit auto detect
28:11 - a lot of those for us but if you have it
28:13 - you know like on your desktop or
28:15 - something like that or an in virtual
28:16 - environments directory then you can just
28:18 - hard code that path in here to use that
28:20 - for a specific project now when you have
28:23 - a virtual environment activated it will
28:25 - actually activate that environment and
28:26 - all new terminal sessions as well so I
28:30 - think that's a really nice feature so if
28:33 - I open up terminal here let me close
28:35 - down the one I currently have by
28:36 - clicking this trashcan and kill terminal
28:38 - let me open up another one and when I
28:42 - open that we can see that it
28:44 - automatically came in and ran that
28:47 - activate script on that virtual
28:49 - environment so if I clear my screen here
28:51 - we can tell that the virtual environment
28:53 - is active because we have V and V over
28:56 - here in a
28:57 - so if we wanted to install some packages
29:00 - within this virtual environment then we
29:02 - should just be able to do it with our
29:03 - pip command so if I say pip install
29:07 - request to install the request package
29:10 - or the request library then I will let
29:13 - this install and once this is installed
29:16 - then we should be able to just import
29:18 - this into our scripts with no problem
29:21 - so I'm going to close down my terminal
29:23 - there and within my script I'm just
29:26 - going to say import requests and I'll
29:29 - make sure this is working bye whoops oh
29:31 - there we go and I will make sure that
29:33 - this is working by coming down here
29:35 - towards at the bottom of this script and
29:38 - I'm just going to remove these current
29:39 - print statements that I have now and I'm
29:42 - going to replace these with a request so
29:45 - now also as I'm typing here watch how
29:49 - the intellisense works and this is built
29:52 - in the vs code and it's going to show us
29:55 - the attributes and methods that we can
29:56 - use for different objects so if I say R
29:59 - is equal to request dot and whenever I
30:02 - press dot then it will pop up with all
30:06 - of the things that I can do with request
30:08 - so we can see that we can use to get
30:10 - method we can use the post method
30:13 - session all kinds of things like that
30:16 - so if let's say that I want to use git
30:18 - so I'll click on get it will autofill
30:20 - that now if I want to know more
30:23 - information about this I can right click
30:25 - on git and we can see that we have you
30:29 - know go to definition peak definition if
30:31 - I click on it go to definition then this
30:34 - is actually took me to that get method
30:37 - within the request library itself so we
30:41 - can see exactly how that method was
30:43 - written so I think that's a very nice
30:45 - feature now if we don't want to
30:47 - completely open up that file where that
30:49 - method exists then we can click on peak
30:51 - definition and that will just show us a
30:54 - little peak here so we can see the get
30:57 - method here within this little window
30:59 - but when we close that or write back to
31:01 - our file so I think that intellisense is
31:04 - very useful for giving you information
31:06 - like that so let me actually go to my
31:10 - you
31:11 - well here so I'm going to just type in
31:15 - that I want to get the URL for I'm just
31:21 - going to go to my personal website so
31:22 - HTTP colon forward slash forward slash
31:25 - core EMS comm and now I'm going to print
31:29 - out the status code that I get back from
31:32 - that so I'll do an r dot status code and
31:36 - now let me save that and now let me run
31:41 - this code first let me uncomment out the
31:45 - cysts top version there because I don't
31:46 - want a whole lot of output but now I can
31:49 - run this code by right-clicking and
31:51 - selecting run Python file in terminal so
31:54 - I will run that and it's going to open
31:56 - up activate our environment and then
31:59 - print this out so we can see here that
32:02 - the executable that it used this is it
32:04 - right here that is our virtual
32:06 - environment so it is using that virtual
32:07 - environment that we just created and get
32:10 - a 200 response there from the website so
32:12 - that's good okay so now let's take a
32:14 - look at how we can auto format our
32:16 - Python code so right now we don't
32:19 - currently have a formatter installed so
32:22 - now we're going to start taking care of
32:24 - some of these pop-ups that we've been
32:25 - seeing throughout the video so I'm now
32:28 - I'm actually going to listen to one of
32:30 - those pop-ups and use and install a
32:33 - formatter so to format our code we can
32:36 - use a keyboard shortcut I kind of forget
32:39 - what that shortcut is so I'm just going
32:41 - to use my command palette and type in
32:43 - format and we can see here that it is
32:46 - shift alt F so I'm gonna use shift alt F
32:50 - to format my code when I do that it pops
32:53 - up here and it says hey you don't have
32:56 - auto pep eighth installed would you like
32:59 - to install that as your formatter
33:01 - and it also suggests some other popular
33:04 - formatters here too such as black and
33:06 - why a PF now I'm going to use black here
33:11 - but you can use auto pepe if you'd like
33:13 - I actually don't really know the
33:15 - differences between those two but I saw
33:17 - on Kenneth writes his blog that he was
33:19 - using black so I'm gonna give it a shot
33:21 - and see if I notice any differences or
33:23 - not okay so now
33:25 - with that formatter installed then we
33:28 - should be able to format our code just
33:30 - by using that shift alt F keyboard
33:33 - shortcut and now it formatted our code
33:36 - now that might not look a lot different
33:38 - because our code was already pretty well
33:42 - formatted to begin with but let me just
33:43 - really make this look ugly so let's say
33:47 - you had some ugly code written here and
33:50 - then I'll save that now if we want to
33:53 - auto format this code then I can just
33:55 - press shift alt F like we saw before and
33:58 - now if formats our code to split that
34:00 - out nicely now sometimes while we're
34:03 - making changes like this it might only
34:05 - make those changes in our workplace
34:07 - settings and not in our global user
34:09 - settings so I'm gonna open up my project
34:12 - settings here within that dot vs code
34:14 - directory and we can see here that it
34:16 - set our formatter to black now I'm just
34:19 - going to copy that and put that into my
34:21 - actual user settings so that it uses
34:25 - that by default so I'm going to come
34:28 - down here to the actually I'll just go
34:30 - below my Python path and I will paste in
34:34 - that formatter and also while I'm here
34:37 - in my global settings I'm also going to
34:39 - change my settings so that my code
34:40 - formats automatically anytime I save my
34:43 - file so I could search for the settings
34:47 - I need to change but let me show you a
34:50 - nice tip that I use a lot while changing
34:52 - settings so if I come down here and I
34:56 - start typing if I press control space
34:59 - then it's going to show us all the
35:01 - options that we have as we type so if I
35:04 - say editor dot and keep typing here so I
35:08 - typed out editor dot form then it's
35:11 - going to show me all of these here so
35:13 - format on paste format on save I want
35:16 - format on save so anytime I save it'll
35:19 - just auto format my code for me and
35:21 - that's a setting that I think is very
35:23 - useful so that we don't have to keep
35:25 - manually doing that and the auto
35:26 - formatting and vs code really is great
35:29 - not only does it do Python like we have
35:32 - set up here but it will also auto format
35:35 - for JSON and other languages as well
35:38 - and those are all things that usually
35:41 - require additional packages with editors
35:43 - like sublime text and sometimes those
35:45 - can be hard to get set up properly so
35:47 - it's nice that a lot of this stuff just
35:49 - simply works within the S code now this
35:51 - isn't part of the formatter but we can
35:53 - actually use vs code to sort our imports
35:56 - also so let me add a couple of imports
35:58 - here so that we can see what this looks
36:00 - like so underneath requests want to also
36:03 - import OS I'm going to also import math
36:06 - and now if I open my command palette and
36:10 - I search for sort imports you spell that
36:15 - correctly if I click on that then it
36:19 - should sort those out okay so we can see
36:23 - that it put these in alphabetical order
36:25 - and I think that it drops requests down
36:27 - a line here because it wants to separate
36:29 - out requests since it's a third party
36:32 - package so it probably has all those
36:33 - third-party packages separate from the
36:36 - standard library modules and if you have
36:38 - any imports that are from imports then
36:40 - it will put those closer to the bottom
36:42 - just because it's the standard so if
36:45 - instead from OS I was to say from OS
36:50 - import rename and then I did a sort
36:56 - installs or sort imports I'm sorry sort
36:59 - imports on that then it should move that
37:02 - from import down to the bottom there so
37:05 - just like it did so that's good okay so
37:07 - now let's also get code linting enabled
37:10 - so we can see the pop up down here that
37:12 - it keeps telling me that I should be
37:14 - using this so linting will look at our
37:16 - code and tell us if it thinks that
37:18 - something is off and it's nice to have
37:20 - this because it can keep you from making
37:22 - mistakes that you might not notice on
37:24 - your own so if this pop-up wasn't open
37:27 - here I'm just going to close it one more
37:29 - time then we can search using our
37:32 - command palette I'm just going to type
37:34 - in linting and now I'm gonna choose run
37:37 - linting when I try to run linting it's
37:39 - going to pop up with that pop-up so now
37:42 - I'm going to install that and it'll
37:45 - install pilant
37:47 - and you can use other linters as well
37:50 - but I think that pilant is a and
37:52 - nice default linter to use I haven't
37:55 - really tried any of the other ones but
37:57 - pilant has been good for me okay so one
38:00 - spy lint is finished installing there
38:02 - now let me put something in that will
38:04 - trigger a lending error and a warning so
38:07 - let me comment uncomment out here where
38:10 - I am printing out sis top version and
38:12 - instead let me use Python - syntax here
38:16 - for this print statement so if I save
38:20 - that then we can see that after a second
38:22 - here I get a red underline and if I
38:25 - hover over that I'm zoomed in a little
38:27 - far but we can see if we look at the
38:29 - bottom there it says missing parentheses
38:31 - and call to print did you mean print
38:33 - with the parentheses now if that's too
38:36 - hard to read there because we're zoomed
38:38 - in so far we can also click down here in
38:41 - the bottom left right beside our
38:44 - interpreter and we can see that there
38:45 - are errors and warnings so this is
38:47 - marked as an error if I click on that
38:49 - then we can see that it lists out the
38:51 - problems for us here so here we have one
38:54 - problem in our script and it says
38:56 - missing parentheses and call to print so
38:59 - then that will give me a hint as to what
39:02 - I need to change and I can come up here
39:04 - and fix that and this will give you hint
39:06 - about things that aren't errors as well
39:08 - so for example if I go down here into my
39:11 - greet function and I just make a
39:15 - variable that I never use so I'll create
39:16 - a test variable and just set it to the
39:19 - string of tests so if I run that then
39:22 - after a second I'm going to get a green
39:23 - underline here and that is for a warning
39:26 - if I look at that warning then it says
39:28 - unused variable test so usually if you
39:31 - have an unused variable then that might
39:33 - be a mistake so usually we don't want
39:36 - those
39:36 - so with that pointed out I'm just going
39:38 - to get rid of that to clean up the code
39:40 - and there we go okay so now let me show
39:43 - you an extension that I like to use that
39:45 - makes running Python code a bit easier
39:47 - so so far we've been right-clicking and
39:50 - selecting run code in terminal every
39:52 - time we want to run our Python code but
39:54 - I'm not the biggest fan of that I'd
39:56 - rather have an easy keyboard shortcut
39:58 - that does this for us and also I don't
40:01 - like how much output the terminal shows
40:03 - so the extension that we're going to use
40:05 - here
40:06 - is called code runner so I'm going to
40:08 - come down to our extensions and I'm
40:09 - going to clear our current search and
40:12 - I'm gonna type in code runner so when I
40:16 - search for that we can see the top
40:18 - result here is code runner so I'm going
40:21 - to install this now anytime you have an
40:25 - extension if we scroll down here let me
40:29 - I don't know if I can make this bigger
40:30 - or not it doesn't look like I can I'm
40:32 - zoomed in a little far here but if I
40:35 - scroll down then we can look at all the
40:37 - documentation that we have here and
40:39 - it'll show you you know different
40:42 - configurations so if we want to change
40:44 - our path for a specific language then we
40:49 - can come in here and these are the
40:50 - settings that we can change here and it
40:53 - also gives us some customized parameters
40:55 - here so within our path we could also
40:59 - put custom parameters as in you know we
41:02 - can use the Python path that vs code is
41:05 - using the full filename to the code that
41:07 - we're trying to run and I'll take a look
41:09 - at this in just a second now whenever I
41:11 - change some of my settings but with this
41:14 - installed will now see a run button in
41:18 - the top right of our editor here now
41:21 - there are a few other changes that I'd
41:23 - like to make to the settings of this
41:25 - extension but let's see what this does
41:27 - just right out of the box with this
41:31 - current Python script so if I run this
41:35 - then we should get some output here okay
41:39 - so this might look like it worked but
41:42 - there's one key difference here look at
41:45 - this right here so it says that we're
41:46 - using Python 3 7 and that we got our
41:49 - status code of 200 but the Python
41:52 - interpreter that it's using is the
41:54 - default interpreter for my system so
41:58 - this is the global version of Python and
42:01 - I do have requests installed in that
42:03 - global version of Python but if I didn't
42:05 - have requests installed then that would
42:07 - fail even though I do have requests
42:10 - installed in my virtual environment so
42:12 - we want to set this up to use our
42:14 - virtual environment instead of our
42:17 - global Python
42:19 - to see how to do this we can change our
42:22 - settings so I'm going to open up my
42:25 - settings here and within our settings
42:28 - let me make this one panel again within
42:32 - our settings here I'm going to I'll just
42:34 - put this here at the bottom now there
42:36 - are a couple of settings and I'm going
42:37 - to change here now I looked up what
42:40 - settings I'm going to change before I
42:41 - started the video and I have those
42:43 - written down here in front of me but if
42:45 - you want to change these to something
42:46 - different then you can just search
42:48 - through and find these settings yourself
42:49 - and change them to whatever you'd like
42:52 - so the first setting I'm going to change
42:54 - here is going to be code - Runner dot
42:58 - executors map and this is going to be a
43:02 - dictionary of values here so or a key
43:08 - value pairs here so when we run Python
43:11 - files I want this to use the current
43:15 - Python path that vs code is using I want
43:19 - to run that with a dash U which is a
43:22 - buffering option I wouldn't worry too
43:24 - much about that and now I also want to
43:27 - run the full filename and that'll give
43:30 - us the full path to the file that we're
43:33 - trying to run now again if you don't
43:36 - know where I got these then you just
43:38 - have to read the extension documentation
43:40 - because that was in here where I
43:44 - scrolled all the way down to their
43:47 - configuration and these are the
43:49 - customized parameters here so that's
43:51 - where I found the Python path the full
43:54 - file name and things like that so now I
43:57 - will close that down go back to our
43:59 - settings here now there are a couple of
44:01 - other things that I want to change here
44:02 - now you don't have to make these changes
44:05 - but this is my preferred settings so I
44:08 - can do a code runner and again I can hit
44:11 - control space to make this autocomplete
44:14 - for me
44:15 - and I want to change this clear previous
44:17 - output I want to change that to true
44:20 - because I don't like a lot of previous
44:23 - runs of my script taking up all of my
44:26 - screen okay and now the last thing that
44:29 - I'm going to change here is code runner
44:32 - show execution message that is true by
44:37 - default I want to set this equal to
44:39 - false I don't know about you all but I
44:42 - don't like a lot of output whenever I
44:47 - run certain things I only want the
44:50 - things that I'm printing out from Python
44:52 - so what this will get rid of here is
44:55 - this is the execution message where it
44:57 - says running and it gives you the Python
44:59 - that it's running and the file path
45:02 - there and also it'll say done with exit
45:05 - code zero none of that's going to show
45:07 - up now now it's only going to give us
45:08 - the output from our what we've printed
45:11 - out within our scripts so if I save
45:14 - those settings which I did and now I
45:16 - rerun this Python script then we can see
45:19 - that it cleared the previous output and
45:21 - now it doesn't have those execution
45:23 - messages it only prints out the things
45:25 - we wanted it to print out so we're using
45:27 - the correct version of Python here we
45:30 - can see that now we are using our
45:32 - virtual environment so that's good and
45:34 - now we also get a 200 for our status
45:37 - code so it is using the requests library
45:39 - there so that's great as well now I also
45:41 - told you that we had a keyboard shortcut
45:43 - here if I right click then we can see
45:46 - here at the top we have an option now to
45:48 - run code and that's what happens
45:51 - whenever we click this Run button here
45:52 - at the top but it tells us that the
45:54 - keyboard shortcut is ctrl alt in and I'm
45:57 - sure that you can change that keyboard
45:59 - shortcut as well but if I press ctrl alt
46:02 - in then we can see that it runs that
46:05 - code as well okay now one thing about
46:07 - sublime text you know I usually use
46:10 - sublime text for these videos
46:12 - one thing about sublime text was that
46:14 - people would always ask me how to do
46:16 - input within sublime and it was actually
46:19 - hard to do within sublime and I would
46:20 - always just recommend against it I would
46:22 - just recommend instead using the
46:24 - terminal so to write your script within
46:26 - sublime and then use the terminal now
46:29 - within vs code if we want to use input
46:33 - then it's kind of the same process but
46:35 - now we have a terminal built in so I'm
46:38 - going to just get rid of my code here
46:41 - everything except the imports and now
46:44 - I'm just going to use an input so I'm
46:45 - going to say name
46:46 - is equal to input and for the input I'm
46:49 - just gonna say your name your name
46:52 - question mark and now I will print out a
46:56 - greeting so I'll just say hello and then
47:00 - print out the name so I will save that
47:04 - now we won't be able to run this using
47:07 - our code runner that we just installed
47:08 - because that output there is read-only
47:11 - and that was our problem with sublime
47:13 - text 2 but with in vs code we can simply
47:16 - do what we did earlier by right-clicking
47:18 - and just clicking on run current run
47:21 - Python file in terminal so if I do that
47:23 - then we can see that it pops up here
47:25 - asking us for our name so I'll just put
47:28 - in Cori and we can see that our program
47:30 - works just fine so that is how I do that
47:33 - within vs code just a little side note
47:36 - there ok so now I'm going to undo those
47:40 - changes there and get back to what we
47:42 - had before okay so now let's look at the
47:45 - built in and get integration with in vs
47:47 - code so let's say that I wanted to track
47:49 - this project with git and upload it to
47:52 - github so to track our current project
47:55 - with git we can simply click on the
48:00 - source control tab over here in our
48:02 - activity bar and right now we're not
48:05 - tracking this project with git so I
48:08 - could do all of this within the terminal
48:10 - but we can also just do this here within
48:12 - the user interface as well so to track
48:15 - this project I can just click on this
48:18 - get symbol here beside source control if
48:20 - I hover over that it says initialize
48:22 - repository so I'm going to click on that
48:24 - and then it's going to ask me what
48:26 - project I want to track so I'm just
48:28 - going to click on my project the one
48:30 - that I've been working in so once we do
48:33 - that it's going to now put in all of the
48:37 - files here that are untracked now it
48:39 - looks like we have a lot it says there
48:40 - are over 3,000 but most of these are
48:44 - from our virtual environment and we
48:46 - usually don't want to even track our
48:49 - virtual environment so to ignore our
48:52 - that directory we just need to create a
48:54 - dot git ignore file and add that to what
48:58 - we're tracking with git
49:00 - within my folder here I'm gonna click on
49:03 - this icon here beside my project
49:05 - directory that is add new file and I
49:08 - want to add one that is called a dot git
49:10 - ignore so I will create that within
49:14 - there I want to ignore ve and V the V in
49:17 - V directory and I'm also going to ignore
49:20 - this dot V s code directory as well
49:22 - because usually you don't want to commit
49:25 - personal settings like that so now this
49:28 - gives us a visual indicator over here
49:30 - that these are green and has a you over
49:32 - here for untracked so we're only going
49:35 - to try to commit two files now or I'll
49:39 - only try to stage two files now and we
49:41 - can see that V s code and V and V are no
49:43 - longer highlighted now you might notice
49:46 - here that it doesn't actually show us
49:47 - the dot git directory either that got
49:49 - created when we initialize our directory
49:51 - so V s code filters out what files are
49:54 - seen by default and ones that you
49:56 - normally don't want to see are just
49:57 - filtered out so normally there's no
49:59 - reason to go into certain folders or
50:01 - directories for example dot git you
50:03 - never really want to go in there and
50:05 - mess around with it so it's just nice to
50:07 - filter it out say that you don't have to
50:08 - see it in your way now if you want to
50:10 - change what is shown and what's hidden
50:12 - then you can change that in your
50:14 - settings but I think that their defaults
50:16 - are pretty good so now let's go back to
50:18 - the git section so we'll click on this
50:20 - source control tab and our activity bar
50:22 - and now we can see that it only wants to
50:24 - stage the git ignore file and our Python
50:28 - script so to stage those we could hover
50:31 - over them and just click on the plus
50:33 - icon beside each file so if I do that
50:35 - with git ignore we can see that that got
50:37 - staged or if we wanted to stage all of
50:40 - the changes then we can just click the
50:42 - extra options up here at the top right
50:44 - and then if I scroll down here I can go
50:47 - to stage all changes so if I do that
50:49 - then we can see that now our script pi
50:52 - is staged as well so now to commit we
50:56 - can just click on this check mark here
50:58 - to commit and now it's going to ask us
51:00 - for a commit message so I'm just going
51:02 - to say this is an initial commit hit
51:05 - enter and now it's giving me a pop-up
51:08 - here that I haven't configured my
51:09 - username or email within
51:12 - get yet so the
51:14 - reason is because I uninstalled get and
51:16 - reinstalled it before this video so you
51:18 - might run into that as well so in order
51:21 - to set my name and my email I'm gonna
51:23 - want to run some get commands here
51:25 - within at the terminal now I use get
51:28 - bash so if you want to use git bash as
51:31 - well then we can set up what terminal we
51:34 - want to use within the S code so to do
51:37 - that I'm going to open up my browser
51:39 - again here and I have this integrated
51:42 - terminal section of their documentation
51:44 - opened up here and you can change what
51:47 - terminal you use by changing this
51:50 - command here terminal integrated shell
51:52 - dot windows so we can see here that they
51:56 - have the default location to get bash if
51:58 - you want to use get bash we can also use
52:00 - the command prompt by default which we
52:01 - have been using we can use power shell
52:03 - or bash on a boon to so I'm gonna use
52:06 - git bash here so I will just copy this
52:10 - entire setting here and I've already
52:12 - double checked this actually is where
52:14 - git bash was installed on my machine if
52:17 - you installed it somewhere else then
52:19 - you'll want to use that exact location
52:21 - but that's where it is on my machine so
52:23 - we can open this back up go to our
52:26 - settings so I'm going to open up my
52:28 - global settings here let me close down
52:30 - that terminal right now and down here at
52:32 - the bottom I'm just going to paste this
52:35 - in to use get bash as the integrated
52:38 - terminal so I'm gonna save that and now
52:42 - let me close down the terminal that we
52:46 - had before and now open that back up and
52:49 - now we should be using git bash instead
52:52 - and we can see that it still activates
52:54 - that virtual environment now my text is
52:56 - a little large here so I'm running on to
52:58 - a new line but it's large enough just so
53:01 - you all can see but normally this would
53:03 - all be on one line here so let me clear
53:07 - this out just by running clear there and
53:11 - now I can run those get configurations
53:13 - that I need so I'll just do a git config
53:15 - - - global some of you might not didn't
53:18 - need to do this you might already have
53:20 - everything for your get setup but just
53:23 - in case you don't then this is how you
53:26 - can make some of the
53:27 - setting changes so I will change the the
53:30 - name and I will also change the email so
53:33 - my email is kori M Schaefer at gmail.com
53:38 - and now if we do a git config - - list
53:44 - then it gives us a lot of different
53:46 - options here but we can see our name and
53:49 - email there okay
53:51 - so now let me close that down let me try
53:54 - to commit these again with those changes
53:57 - in place so initial commit and now it
54:01 - says that those were committed and now
54:03 - we don't have any changes so now that we
54:06 - have our code committed to get now it
54:08 - will only show us the changes that we've
54:09 - made since the last commit so I'm going
54:11 - to change or close down my get ignore
54:13 - file here so if I go to my script and I
54:15 - let me take out some of this stuff here
54:18 - so I am going to take out all of my
54:21 - imports except the request code I'm
54:24 - going to take out the version and the
54:27 - executable take out the greeting and I'm
54:29 - just going to leave the request code
54:31 - there now I'm also going to let's see
54:34 - I will also print the value of r dot
54:37 - okay that'll just tell us if we got a
54:39 - good response or not so now if I go back
54:42 - to the source control section here and
54:45 - look at this if I click on my script
54:48 - then it's going to show us a diff okay
54:50 - so within the diff here we have the
54:52 - version of the code that we last
54:54 - committed over here on the left and now
54:57 - this is our new code over here on the
54:59 - right so the red is saying hey you
55:01 - removed all of this stuff here that's
55:03 - what was last committed it's now gone
55:05 - and the green over here is saying oh and
55:08 - this is what was added this we didn't
55:10 - have this here before and now we do so
55:12 - if that diff looks good then you can
55:15 - simply stage your changes you want to
55:18 - close down the diff here so we staged
55:20 - the changes here it says that it's
55:22 - modified now I can commit that and as a
55:25 - commit message here I'll just say
55:27 - removed some code I know I added some
55:30 - too but that's fun okay so now we have
55:33 - committed those changes so now let's say
55:35 - that we wanted to commit this code up to
55:37 - github so this is pretty simple to do as
55:39 - well so
55:40 - we have to do is create a repository
55:42 - within the browser and then we can set
55:46 - that up to push to that repository so
55:48 - I've got my github open here in the
55:50 - browser so let me refresh this to make
55:53 - sure I am still logged in and it looks
55:56 - like I am so that's good so now I'm
55:58 - going to create a new repository and I'm
56:02 - just going to call this sample - repo so
56:05 - now let's see I'll just have a public no
56:09 - description or anything like that you
56:10 - can add that stuff in if you'd like
56:12 - obviously so once we create this
56:15 - repository then it's going to open up
56:17 - this quick setup page here and give us
56:19 - some commands so if we were creating a
56:22 - new repository from scratch then we
56:23 - would use these commands here but we are
56:26 - actually going to be pushing an existing
56:29 - repository so these are the commands
56:31 - that we need here so I just want this
56:35 - git remote add origin command so I'm
56:38 - going to copy that and that's what is
56:41 - going to connect our local repository to
56:44 - the repository on github so back within
56:47 - vs code here I'm going to open up my
56:50 - terminal and we are now using git bash
56:53 - like I said before so I'll clear the
56:55 - screen and I'm just going to paste that
56:57 - in that command that we got from github
56:59 - so I'll run that and now we have that
57:03 - origin so now I'll close our terminal go
57:06 - back to our source control and within
57:10 - our source control tab I can simply
57:13 - click here with the extra options and
57:16 - I'm going to select this command here
57:19 - push - and when I click push - it says
57:22 - well where do we want to push this we
57:24 - have this thing called origin here at
57:26 - this URL and that is what got added when
57:30 - we ran that command that get gave us or
57:32 - that github gave us so if I run that
57:33 - then it's going to push that up to
57:36 - github now it's asking me to log in here
57:39 - so let me log in really quick with my
57:43 - username and password it's been a while
57:47 - since I've logged in so hopefully that's
57:50 - the right password okay and now it's
57:53 - asking if we'd like to peer out
57:54 - clear on and get fetch we can select
57:57 - whatever we want there I'll just select
57:59 - yes so now it looks like that worked so
58:01 - let me go back to the browser
58:04 - oops that's the wrong one let me go back
58:06 - to the browser here and look in this
58:09 - sample repo and we can see that we got
58:11 - our get ignore file and our script so
58:13 - that is what we pushed up from the s
58:15 - code so that seems to be working
58:17 - well so that's nice so that's how you
58:19 - can work with git and github and vs code
58:22 - now if you'd like to learn more about
58:24 - git then I do have a detailed video on
58:26 - that and I'll leave a link to that video
58:29 - in the description section below if
58:30 - anyone is more interested in learning
58:32 - all of the fundamentals with git now I
58:35 - also plan on doing a video on github in
58:38 - the near future but I haven't got around
58:40 - to doing that just yet but for this
58:42 - video I just wanted to cover the basics
58:44 - of their git integration and just show
58:47 - you how to get started with that ok so
58:49 - now let's look at how to do some basic
58:51 - debugging within vs code so this is a
58:54 - really nice feature that doesn't come
58:56 - built-in with some of the other
58:58 - minimalist editors out there so we're
59:01 - back here in our script and to put in a
59:04 - breakpoint we can simply come over here
59:06 - into the gutter and we can where it has
59:09 - this red line here if I click that then
59:11 - we have now added a breakpoint into our
59:14 - script so now if we want to debug this
59:16 - code we can come into the debug tab over
59:19 - here in our activity bar and now let me
59:23 - make this a little bit larger here we
59:25 - can see that it says we don't currently
59:27 - have any configurations but if I click
59:29 - the little gear icon here then we can
59:32 - see some different configurations so we
59:34 - have Python file we have module Django
59:37 - flask so you can set up these
59:39 - configurations to where it'll run you
59:42 - know your main flask app from there and
59:45 - you can also specify ports and stuff
59:47 - like that for this video we're just
59:49 - going to look at debugging a basic
59:51 - Python file so I'm going to select
59:52 - Python file it's going to show us the
59:55 - launch configuration that we just
59:56 - created so I'm going to exit that and
59:58 - now we have a configuration set here for
60:02 - Python a current file so if I
60:06 - that just by clicking this green arrow
60:08 - here that says start debugging now this
60:11 - is going to start a debugger here what
60:15 - this is going to do is it's going to run
60:16 - our code and it's gonna stop at our
60:18 - breakpoints so now we can interact with
60:21 - our code as it is at the moment of that
60:23 - breakpoint so if we look here and the
60:26 - top left then it'll show you all of the
60:29 - current local values in our code and we
60:32 - can drill down into these as well so we
60:34 - can see that we have this our variable
60:36 - here I can drill down into that to see
60:39 - exactly what all of this is so we can
60:41 - see the headers the encoding the cookies
60:43 - things like that so we can keep drilling
60:46 - down as far as we want so right
60:48 - underneath that local variables we also
60:51 - have a watch section so we could if we
60:54 - wanted to watch a specific variable then
60:57 - we could just click the plus sign there
60:59 - and now specify what we want to watch so
61:01 - let's say that I want to watch our dot
61:04 - status code so we can see that that is
61:06 - equal to 200 so that is the current
61:10 - value of where we are in that breakpoint
61:13 - now if we were watching a value that was
61:15 - in a loop or something like that then
61:17 - we'd actually be able to see that
61:19 - increment each time through the loop if
61:21 - we had a breakpoint within that loop now
61:24 - if you want something more interactive
61:26 - then we can also use let me make this a
61:28 - little smaller over here we can also use
61:31 - the debug console and use this to
61:33 - inspect anything we'd like so I'm gonna
61:36 - click on our additional views here click
61:38 - on debug console and within the debug
61:40 - console we can just use this like an
61:43 - interactive Python prompt so if I wanted
61:46 - to see the value of r dot okay then i
61:50 - could just run that and we can see that
61:52 - it gives us this feedback of exactly
61:55 - what these values are equal to at this
61:57 - point in the script so that's extremely
61:59 - useful and you can just look at anything
62:01 - you'd like so if I want to see our dot
62:02 - URL then we can see the URL that we
62:05 - requested there so being able to jump
62:08 - into the code at a specific location and
62:10 - see the current values can be extremely
62:13 - useful in a lot of situations so
62:16 - debugging like this is so much better
62:18 - than dropping down
62:20 - a lot of print statements or log
62:21 - statements all throughout your code and
62:23 - just running your code over and over
62:25 - this usually allows you to keep your
62:27 - code clean and see all of this
62:29 - information that you need in order to
62:31 - make sure that your code is working how
62:32 - you expect and if not then you know
62:35 - hopefully it'll at least help you out
62:37 - enough to where you can find out where
62:40 - to go fix your code so once you're at a
62:42 - breakpoint we can see that we have
62:43 - several options here and those are all
62:45 - listed right here so we can continue on
62:49 - by clicking this button here we can step
62:52 - over a current breakpoint we can step
62:54 - into the code further we can step out of
62:57 - the code or we can restart or stop our
63:02 - debug session here so I'm just going to
63:06 - continue on and when I continue on it's
63:08 - just going to continue on with our
63:10 - script and since we don't have any more
63:12 - breakpoints it's just going to finish
63:14 - that so now if we want to remove a debug
63:18 - breakpoint then we can just click on it
63:20 - over here and the gutter and now it's
63:22 - gone okay so that is a look at debugging
63:25 - okay so the last thing that we're going
63:27 - to take a look at in this video is the
63:29 - unit testing support that they have
63:31 - built in to vs code and I'm really
63:33 - loving their attention to detail and how
63:35 - they covered so many different aspects
63:37 - of helping us manage our code as easily
63:39 - as possible
63:40 - so having the built-in support for all
63:42 - this stuff is definitely a nice addition
63:43 - that you're not gonna find in most other
63:45 - editors so to show some unit testing I'm
63:48 - going to close down my current project
63:50 - and I'm going to open up a different
63:53 - project that has some sample unit tests
63:56 - so I'm going to close both of these down
63:59 - it looks like I have two of them open up
64:01 - here so I'm going to close both of these
64:03 - down
64:03 - oops actually this is my setup there so
64:07 - I'm just going to close that so now let
64:10 - me open up my terminal and within my
64:12 - terminal I'm going to navigate to my
64:15 - desktop and within my desktop let's see
64:19 - if I can open up vs code here from my
64:22 - terminal so the command that we can use
64:24 - is code so if I say code and then my
64:28 - directory and this directory is called
64:29 - unit testing demo if I run that
64:32 - then it looks like that works it opens
64:35 - up that directory within vs code now
64:38 - I've had times where it doesn't install
64:41 - that code command to my path so if it
64:44 - doesn't and it says you know code
64:46 - command not recognized or something like
64:48 - that you can always install that by
64:50 - opening up your command palette so
64:53 - control shift P and if I type in shell
64:57 - then we should let's see
65:01 - or is it code maybe it's not coming up
65:04 - because it is installed but there is
65:07 - something if we type in shell or code or
65:10 - something like that then it'll say you
65:12 - know install the code command on to your
65:15 - path but I'm not seeing it here now but
65:18 - that's okay because we already have that
65:20 - code command installed so now we have a
65:23 - project here with some sample unit tests
65:27 - so let me open up these unit tests here
65:29 - and let's see now this is giving me a
65:34 - pilant or not installed error again now
65:38 - the reason that it's doing this is
65:39 - because we installed pilant when after
65:43 - we activated our virtual environment
65:45 - last time so I'm just going to say to
65:47 - install that for our default Python as
65:49 - well so that we stop seeing those
65:50 - pop-ups okay so now let me open up both
65:53 - of these unit tests here okay so now
65:56 - that we have some unit tests available
65:57 - here
65:59 - let's run open up our command palette
66:02 - and now let's type in discover tests and
66:07 - when we run discover tests then it's
66:11 - going to come up with this pop-up here
66:13 - that says enable and configure test
66:14 - framework so I'm going to click on that
66:16 - and now it's going to ask us what unit
66:19 - testing framework we want to use PI test
66:21 - is very popular I'm using unit test in
66:23 - this example but you can select whatever
66:25 - it is that you're using now we're gonna
66:27 - choose the directory that contains our
66:29 - unit tests and that is our current
66:31 - directory so our root directory and now
66:33 - the pattern to identify the test so
66:36 - there are a bunch of different naming
66:38 - patterns here the one that we are using
66:40 - is test underscore and then asterisk the
66:43 - wildcard name of the file so I'm
66:45 - use that and now it should discover our
66:49 - unit tests for us and after it
66:52 - discovered that unit test we can see
66:54 - that we had these pop-ups here with in
66:56 - vs code that says run test debug test
67:00 - right here within the editor so we can
67:03 - run a single test at a time if we want
67:05 - so if I was too drunk check this test
67:07 - add test here if I run that then we can
67:11 - see that that got a checkmark but none
67:14 - of these other ones actually ran and
67:15 - down here at the bottom left we can see
67:17 - that it says one test passed now if we
67:20 - run want to run our entire test class
67:22 - then we have that option here as well
67:25 - too so I can go click on run test class
67:28 - and now we can see down here at the
67:30 - bottom it says four tests have passed so
67:33 - let me change one of these assertions to
67:35 - where one of these tests will fail so
67:37 - that we can see what that looks like so
67:38 - I'm going to say 10 plus 5 is equal to
67:40 - 10 which obviously isn't right so now
67:43 - this is also asking us if we want to use
67:46 - our formatter as well so I'll go ahead
67:49 - and install that also so now if we run
67:52 - our tests here then now we can see it
67:55 - says three tests pass one test failed so
67:58 - if I click on this status down here in
68:00 - the bottom then it'll ask us what we
68:02 - want to do so we can run all of the
68:04 - tests again we can simply just run the
68:06 - failed test which is a nice feature as
68:08 - well or we can view the test output if I
68:11 - look at the test output here then we can
68:14 - see it ran for test one of them failed
68:16 - and it failed because of an assertion
68:18 - error that 15 is not equal to 10 and
68:21 - that it failed on line 8 so it shows us
68:23 - exactly where that error occurred so
68:26 - then we can come in here and either fix
68:28 - our code or fix our tests whichever one
68:30 - was broken and then we can rerun all of
68:33 - those again and we can see that oops and
68:37 - it looks like I didn't save that so if I
68:39 - save that and rerun those again then we
68:42 - can see that all of those passed now
68:44 - lastly it actually just opened this up
68:46 - automatically just now but lastly we get
68:49 - an additional tab over here in our
68:51 - activity bar and this is a testing tab
68:54 - so when I click on this this gives us a
68:56 - nice visual indicator
68:59 - if our tests are passing or failing so
69:02 - again let me change this to where it is
69:04 - failing and save that and now we can
69:07 - also run these tests within this testing
69:11 - tab over here as well so if I want to
69:13 - rerun our entire test calc class I can
69:15 - click on that we can see that that
69:17 - failed because this single test here
69:20 - failed all of these seem to do well so
69:23 - we can look at the output and everything
69:26 - like that just like we did before but if
69:29 - I change that back go back here and
69:31 - rerun all of my tests then we can see
69:34 - that now those are passing let me run
69:36 - that entire class and we can see that
69:38 - all those are passing now so I think
69:39 - that this is an awesome interface for
69:41 - seeing all of our tests in one place and
69:43 - if something is failing then we can come
69:46 - in here and just rerun a specific test
69:48 - by running it individually instead of
69:50 - rerunning
69:51 - our entire test suite so I think it's an
69:53 - awesome feature that's built right in
69:55 - the vs code now there's one last thing
69:56 - that I want to show you in this video
69:57 - and it's only going to take one second
70:00 - so I have some other preferred settings
70:02 - that I haven't shown in this video and
70:03 - most of them are settings for changing
70:05 - how they editor looks in full-screen
70:07 - send mode and will allow me to run code
70:10 - without too much other stuff getting in
70:12 - the way and I want to show you these
70:13 - settings so that you can see exactly how
70:15 - I'm gonna have my vs code set up if you
70:17 - see me using this editor in future
70:19 - videos because I get a lot of questions
70:22 - about exactly how I setup my editors so
70:24 - I have those settings pulled up open
70:26 - here in my browser so let me open those
70:29 - and pull these settings up so these are
70:32 - available on my github and I have these
70:34 - open in the raw version here right now
70:37 - so I'm just going to copy these now
70:40 - these are actually my Mac settings so I
70:42 - don't have you know the windows
70:45 - integrated terminal settings in here and
70:47 - things like that but most of these are
70:50 - the same but for now I can just use
70:52 - these because it will show you the Zen
70:55 - mode changes that I'm going to show you
70:56 - here in a second so now I'm going to
70:59 - open up my settings and I'm just going
71:01 - to paste all of those in that I got from
71:04 - github so I'll save that and run it we
71:07 - can see that this is a little smaller
71:10 - text here because these are the settings
71:13 - and I actually use on my machine so it's
71:14 - not super zoomed in let me take these up
71:17 - a bit let's see so I think maybe 20 font
71:21 - would look better so yeah I think
71:23 - that'll look good for the rest of this
71:25 - video so I can close those settings and
71:28 - like I said the settings that we just
71:30 - added in there most of them are the same
71:32 - from the ones that we saw earlier in the
71:33 - video but the new ones just changed how
71:36 - the editor looks in Zen mode and Zen
71:38 - mode is just their distraction free mode
71:40 - that allows you to focus more on your
71:42 - code and your output and hides a lot of
71:45 - the other menus and things that you
71:47 - might find distracting so let me open up
71:49 - Zen mode so I open up my command palette
71:51 - and just type in Zen and open up Zen
71:54 - mode here and we can see how I have this
71:56 - set up it's you know takes away our
71:59 - activity bar the blue bar down here at
72:02 - the bottom so it's just a lot more clean
72:04 - and the nothing is distracting us from
72:07 - the code itself and we can still run
72:09 - code by just clicking up here and
72:11 - clicking run code now it's telling me it
72:13 - can't find the specified path and the
72:16 - reason is because like I was saying
72:18 - these are my Mac settings so the path
72:21 - that I have set up for my Mac is this is
72:25 - more of a Linux style path it's this
72:27 - user local bin Python here so we would
72:31 - have to go into our settings and set
72:33 - that equal to what we set it to before
72:35 - when we used Python 3 from our Windows
72:38 - system but basically I wanted to show
72:40 - this because if I do use vs code in
72:42 - future tutorials then this is likely how
72:45 - you're going to see me using it the code
72:47 - will look a lot like this so the editor
72:50 - that I normally use for videos is
72:51 - sublime text and I really like some lime
72:54 - Texas minimalist look so that we can
72:57 - just focus on the code and the output
72:58 - but with sin mode setup like I have it
73:01 - set up here we have a very similar nice
73:04 - minimalist setup here in vs code as well
73:06 - so you might see me using this if I
73:09 - completely make the switch over to vs
73:11 - code ok so that's all I wanted to cover
73:13 - for the Python features that I wanted to
73:15 - show you in vs code now there's a ton
73:17 - more to learn about vs code itself but I
73:20 - might save that for another video if
73:22 - anyone is interested most of the
73:24 - additional things that I like to cover
73:25 - is just
73:26 - how to use some of the editor features
73:28 - like multiple cursors and some of my
73:30 - favorite keyboard shortcuts but if you'd
73:33 - like to see some of these keyboard
73:34 - shortcuts for yourself then they make it
73:36 - easy to learn these so we can just open
73:38 - up the command palette and search for
73:41 - keyboard
73:42 - whoops spelled that wrong keyboard
73:44 - shortcuts and the first result here is
73:46 - keyboard shortcut references and this
73:49 - will open up a web page and we can zoom
73:51 - in here and we can see that this shows
73:53 - is basically how to do anything within
73:55 - vs code that we'd want to do so we have
73:57 - all of the multi cursor selection here
74:00 - file management search and replace
74:02 - things like that so that is a nice
74:04 - reference there if you would like to
74:07 - learn any of those keyboard shortcuts
74:08 - okay so I think that is going to do it
74:10 - for this video I hope you all found this
74:12 - video helpful especially if you're
74:13 - trying to switch over to vs code for
74:15 - your Python development so personally I
74:17 - think they really knocked it out of the
74:19 - park with this editor as you saw they
74:21 - have so many features that are built in
74:23 - and the features that aren't built in
74:25 - are really easy to get installed and
74:27 - configured it's not like other editors
74:29 - where you have to search through you
74:31 - know ten to twenty different packages
74:33 - and find the one that you like the most
74:34 - and then use that one and make sure that
74:37 - it stays supported and things like that
74:38 - it's not like that with vs code it makes
74:41 - recommendations to install what it
74:43 - suggests and then it just makes it easy
74:45 - to get those up and running but if
74:47 - anyone has any questions about what we
74:48 - covered in this video then feel free to
74:50 - ask in the comment section below and
74:51 - I'll do my best to answer those and if
74:53 - you enjoy these tutorials and would like
74:54 - to support them then there are several
74:56 - ways you can do that the easiest way is
74:57 - to simply like the video and give it a
74:59 - thumbs up and also it's a huge help to
75:00 - share these videos with anyone who you
75:02 - think would find them useful and if you
75:03 - have the means you can contribute
75:04 - through patreon and there's a link to
75:06 - that page in the scription section below
75:07 - be sure to subscribe for future videos
75:09 - and thank you all for watching
75:12 - you