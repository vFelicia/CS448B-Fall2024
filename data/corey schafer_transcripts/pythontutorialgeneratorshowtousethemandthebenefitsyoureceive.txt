00:00 - hey how's it going everybody in this
00:02 - python video we're going to be going
00:03 - over
00:04 - generators and why you'd want to use
00:06 - them and some of the advantages that
00:08 - they have
00:09 - over lists so in this example i have
00:11 - this function up here called
00:13 - square numbers and what it does is it
00:15 - takes in
00:16 - a list of numbers and then we have this
00:18 - result variable which is set to
00:20 - an empty list and then we loop through
00:23 - all the numbers
00:24 - and from the list that we passed in and
00:26 - we append
00:27 - the square of that number to the result
00:30 - list
00:31 - and then after we're done looping
00:32 - through all the numbers then we return
00:34 - the result
00:35 - and then you can see here i have this by
00:37 - numbers variable
00:39 - set equal to square numbers i'm passing
00:41 - in a list of one two three four
00:43 - five and then i just print down or then
00:46 - i just print out my numbers down here
00:48 - so if i run this code then you can see
00:50 - that
00:51 - our list of one two three four five that
00:53 - was passed in
00:54 - our result is 1 4 9 16 25
00:58 - so currently our square numbers function
01:00 - is returning a list
01:02 - now how would we convert this to be a
01:05 - generator
01:06 - well to do this we won't need this
01:09 - result variable anymore so we can take
01:11 - that out we don't need the return
01:13 - statement and this result dot append we
01:16 - can take this out
01:17 - and all we have to do is type in this
01:20 - yield
01:21 - keyword and just yield the square
01:24 - number here so this yield keyword is
01:27 - what makes it a generator
01:28 - now if i save this and run it you can
01:31 - see now whenever i print
01:33 - my nums i'm no longer getting the list
01:36 - if you look at the comment here this is
01:37 - what the result used to be
01:39 - i'm no longer getting 1 4 9 16
01:42 - 25 the squares of one through five no
01:45 - longer getting that result i'm getting
01:47 - this generator object here now the
01:50 - reason for this is because
01:52 - generators don't hold the entire result
01:56 - in memory it yields one result at a time
02:00 - so really this is waiting for us to ask
02:03 - for the next result
02:04 - so it has hasn't actually computed
02:06 - anything yet now
02:08 - if i printed out next my nums which
02:11 - asks for the next result then you can
02:14 - see that it's
02:15 - one because we passed in our list of one
02:17 - two three four five
02:18 - and then we're looping through that list
02:20 - and so one
02:22 - is the first value so it's equal to i
02:24 - here and we yielded out
02:26 - one times one and it gave us that result
02:28 - so now
02:29 - if we copy this line here and print out
02:33 - next mynums a few times here and run
02:36 - that
02:37 - then you can see that each time that we
02:38 - run next it goes
02:40 - and gets the next value that's yielded
02:43 - so now we have
02:44 - uh 1 squared 2 squared which is 4 3
02:47 - squared versus 9
02:48 - 16 25 and so on now 25
02:51 - is the last value from our result so
02:54 - what if i was to run
02:55 - next one more time well if i do that you
02:58 - can see that i got an error here
03:00 - and the exception that it threw was stop
03:02 - iteration and that means that
03:04 - the entire generator has been exhausted
03:07 - and stop iteration just means that it's
03:09 - out of values
03:10 - now instead of getting these values one
03:12 - at a time
03:14 - we still can use a for loop on these
03:18 - generators and this is personally how
03:20 - i use generators a lot of the time so
03:22 - let me comment out this line
03:24 - and then let me uncomment that one and
03:26 - save it
03:27 - so now we're saying for num and my nums
03:30 - which my nums is our generator
03:32 - print out num so i'll run that and you
03:36 - can see that we get
03:37 - all of our values and we don't get the
03:39 - stop iteration exception
03:41 - because the for loop knows when to stop
03:42 - before that happens
03:44 - so one immediate advantage over a list
03:48 - is that i think that this is much more
03:50 - readable here
03:51 - rather than having the result set to an
03:53 - empty list
03:54 - and then appending to that result and
03:56 - then returning the result
03:57 - this is kind of more readable we're
03:59 - saying okay i'm passing in
04:01 - these numbers for each number and
04:04 - that list of numbers yield the result
04:07 - now for those of you more familiar with
04:09 - python
04:10 - you might have noticed that this entire
04:12 - process here
04:14 - of these lines of code would have been
04:16 - much easier to write
04:17 - as a list comprehension so let me
04:20 - comment it this out and if you don't
04:21 - know what a list comprehension is
04:23 - don't worry about it too much i just
04:24 - want to show the
04:27 - generator example with this as well now
04:29 - this is a list comprehension here
04:31 - and it's going to do exactly what our
04:33 - square numbers function did
04:35 - so what we're doing is we're creating a
04:37 - list and
04:39 - we are taking x times x so the square of
04:42 - x
04:42 - for x in this list of one two three four
04:46 - five so if i save this here and run the
04:49 - code
04:49 - you can see that i still get the same
04:51 - results and i can also
04:53 - print out this list up here at the top
04:56 - now you can create a generator
04:58 - in the same way and it's just as easy as
05:01 - taking out these brackets and instead
05:04 - putting in
05:05 - parentheses so if i take out those
05:07 - brackets
05:08 - put in parentheses now if i run this
05:11 - then you can see that when i printed my
05:13 - nums here i tried to print it all at
05:15 - once
05:16 - i got that generator object and then
05:18 - when i ran my for loop
05:19 - it looped through all the values and
05:22 - gave me that result okay so what if you
05:25 - wanted to actually print out
05:27 - all of the values from the generator
05:30 - well like i said they're not currently
05:31 - all held in memory but you can convert
05:34 - it to a list and it's just
05:36 - as easy as just putting
05:39 - list and then wrapping that and then if
05:42 - i run that
05:43 - you can see that it run it that it
05:45 - printed it out just as if it was a list
05:47 - now when you convert this generator to a
05:49 - list then you do
05:51 - lose the advantages that you gained in
05:54 - terms of performance and i haven't
05:55 - talked about performance yet
05:57 - but i have a better example to show
06:00 - those advantages
06:01 - so a generator is better with
06:02 - performance because like i said it's not
06:04 - holding all the values in memory
06:06 - which isn't a big deal at all whenever
06:08 - you have a small list like this
06:10 - of one two three four five but say that
06:13 - you had
06:14 - tens of thousands or even millions of
06:17 - items to loop through then having that
06:19 - many items in memory will definitely be
06:22 - noticeable
06:23 - but you don't get that with generators
06:25 - so whenever you cast a generator to a
06:27 - list like this
06:28 - if this generator had a lot of values
06:32 - that it needed to convert to that list
06:34 - then you lose that performance
06:36 - in terms of it would put all of those
06:39 - values into memory
06:40 - so let me show you a better example here
06:43 - of
06:44 - this performance difference so i have a
06:47 - file here where
06:48 - um some of this stuff you don't have to
06:50 - worry about like these lines here i'm
06:52 - just printing out the memory
06:53 - and then these names and majors i'm just
06:57 - these are just going to be used to make
06:58 - some random values
07:00 - so i have two different functions here
07:02 - one of these
07:03 - is going to make a list and one of these
07:06 - is going to be
07:06 - a generator and they're both returning
07:10 - the same values so within this list
07:13 - i have my result here and i'm looping
07:15 - through
07:16 - a number of people that i'm going to
07:18 - pass to this function
07:20 - and for each person i'm just going to re
07:23 - make a person dictionary give it a
07:26 - an id and a name that's randomly chosen
07:29 - from the list of names up at top
07:31 - and a major that's randomly chosen from
07:33 - the list of majors
07:35 - and then i'm going to return that result
07:38 - and for the generator it's the exact
07:40 - same thing i'm going to
07:42 - loop through the number of people that i
07:45 - pass in
07:46 - and then i'm going to yield this person
07:49 - dictionary
07:50 - that has the same values as the list
07:53 - function had
07:54 - now really quick just to make these the
07:56 - same i'm going to make that an
07:58 - x range instead so that these are
07:59 - exactly the same
08:01 - okay so right here don't worry about
08:03 - these lines here this
08:05 - time dot clock and this t2 time dot
08:07 - clock
08:08 - all i'm going to do is time how long it
08:10 - takes to run
08:12 - this function which returns a list now
08:14 - i'm going to pass
08:15 - in 1 million values to this function
08:18 - so it should return a list of 1 million
08:22 - results
08:23 - and then down here at the bottom i'm
08:24 - printing out the memory usage and the
08:26 - total time that it took
08:27 - so if i run this then you can see
08:31 - up here at the top of the code so this
08:34 - before here
08:35 - this is before i made anything
08:39 - so my base memory usage was around 15
08:41 - megabytes
08:43 - and this memory after is after i created
08:45 - that
08:46 - list of 1 million records so you can see
08:49 - here that it jumped up by
08:51 - nearly 300 megabytes and it took
08:54 - um 1.2 seconds
08:57 - now if you're dealing with large amounts
08:58 - of data you know that's not
09:00 - out of the ordinary to have one million
09:02 - records like that
09:04 - so let's see what this looks like if i
09:06 - instead use the
09:07 - generator example so i'm going to going
09:09 - to comment out
09:10 - the uh the function that returned the
09:13 - list
09:14 - and now i'm going to uncomment this
09:17 - function that returns a generator
09:19 - and i'm going to pass in the same number
09:22 - of values i'm going to pass in 1 million
09:24 - values here
09:25 - so if i save that and run it now you can
09:28 - see here after i ran this that the
09:29 - memory is almost exactly the same
09:32 - and that's because the generator hasn't
09:34 - actually
09:35 - done anything yet it's not holding those
09:37 - million values
09:38 - in memory it's waiting for me to grab
09:41 - the next one or to loop through those
09:43 - and it would give me those one at a time
09:45 - now this time that it took here
09:47 - basically it didn't take any time
09:49 - because as soon as it gets to the first
09:51 - yield statement it stops
09:53 - so if i was instead to make this an
09:56 - integer then it would be
09:58 - nearly zero seconds now whenever i said
10:00 - earlier that if you convert this to a
10:02 - list
10:02 - then you lose that performance then
10:06 - let me show you what i mean here so i
10:07 - will convert this result this entire
10:10 - result to a list
10:12 - and now if i run this
10:15 - then you can see basically i got pretty
10:17 - much the same
10:18 - result that i got when i ran the
10:20 - function that returned the list
10:22 - so if i take these back off and just do
10:25 - the generator
10:26 - then you can see that we get our
10:28 - performance back
10:29 - so that's how you use a generator you
10:31 - know i think that
10:33 - it is a little bit more readable and it
10:36 - also gives you
10:37 - big performance boosts not only with
10:40 - execution time but with memory as well
10:42 - and you can still use all of the
10:45 - comprehensions and this generator
10:48 - expression here so you don't lose
10:50 - anything
10:50 - in that area so those are a few reasons
10:53 - why you would use generators and also
10:55 - some of the advantages that come along
10:57 - with that so i hope this video was
10:59 - useful for you guys if you do have any
11:01 - questions about this stuff just
11:03 - ask in the comment section below be sure
11:05 - to subscribe for future python videos
11:07 - and thank you guys for watching