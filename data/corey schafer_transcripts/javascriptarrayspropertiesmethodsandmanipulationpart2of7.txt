00:01 - now just like it sounds the tostring
00:03 - method on an array
00:05 - will return a string representation of
00:07 - that array
00:08 - so if i un comment out my code here then
00:11 - i have
00:12 - this array that is just a string that
00:15 - says this
00:16 - and then a number 1 and then a string
00:18 - that says time
00:19 - and if i run array 6
00:23 - dot 2 string and then
00:26 - i output that string to the screen
00:29 - then you can see that it returned this
00:32 - string that just has commas and
00:36 - and you can use this variable throughout
00:38 - your code this is usually used
00:40 - just for you know maybe logging out an
00:43 - array to the console
00:45 - or something like that so that is the
00:47 - tostring method
00:49 - now let's take a look at the for each
00:52 - method
00:54 - the for each method will execute a
00:58 - given function for each element
01:01 - in the array so let me go ahead and
01:03 - uncomment out these lines here
01:06 - and you can see that we just have a test
01:08 - array which is
01:10 - one two three four five six seven eight
01:12 - nine and then i'm outputting that to the
01:14 - screen here so you can see it a little
01:16 - bit better
01:17 - um so now let's go ahead and write
01:20 - that callback function that we're going
01:21 - to use with our for each method
01:24 - so i'm just going to call this function
01:27 - times 10
01:28 - and now this callback function has
01:31 - access to a few different parameters
01:33 - here
01:34 - one of those is the element and that is
01:37 - the current element
01:39 - as it's going through the for each
01:40 - method
01:42 - this is the current element in the array
01:45 - and then we have access to the index
01:47 - which is the index of that element
01:49 - and then we have access to the entire
01:52 - array
01:53 - the entire original array so let's just
01:57 - look at an example
01:58 - as to what it would look like to use all
02:00 - of these
02:01 - so i can type in array which is the
02:03 - original array
02:05 - and then i'm going to access the
02:09 - in the current index of that array and
02:11 - then i'm going to set
02:13 - that current index equal to element
02:16 - times 10. and now let's go ahead and run
02:19 - this for each function and then i'll
02:21 - kind of explain a little bit better
02:23 - as to what it did so let's do array 7
02:27 - dot 4 each and then we'll use
02:30 - that times 10 function and then let me
02:33 - output
02:35 - that to the screen okay and now you can
02:38 - see
02:38 - that our original was one two three four
02:40 - five six seven eight nine
02:42 - and then after we ran our four weeks
02:44 - function now the array
02:46 - is 10 20 30 40 50 60 70 80 90.
02:49 - so what happened here was that when we
02:51 - ran this for each method
02:53 - it runs times 10 for every element in
02:56 - the array so it goes through
02:57 - so say for example we're looking at our
02:59 - first element here one
03:02 - so this element would equal one the
03:04 - index would be zero
03:06 - and the array equals the original array
03:08 - so we're accessing
03:10 - the zeroth index of the original array
03:14 - and setting that equal to the element
03:16 - which is 1
03:17 - times 10. so that's what you get there
03:21 - and then it just goes to the next spot
03:23 - so and then the next element's 2
03:25 - and the index is 1 and with the current
03:28 - array
03:30 - and then it goes through the entire
03:31 - array like that and runs that function
03:33 - for every element in the array let's
03:35 - take a look at a slightly
03:37 - more advanced example i'm going to go
03:40 - ahead
03:40 - and comment out that first example
03:44 - and then uncomment this code here
03:50 - okay so we have an array of
03:53 - objects and all these objects are are
03:57 - three people with a name and an age
04:00 - you can see here i've already written
04:02 - out uh the function that i'm going to
04:04 - use for this
04:05 - uh for the for each method and what this
04:08 - does
04:09 - is it just outputs each of these people
04:12 - in the html so you can see if we go in
04:15 - here
04:17 - it will print out person is equal to the
04:20 - index plus one so for the zeroth index
04:22 - that would be one
04:23 - and then for the next is two nexus three
04:26 - and then
04:27 - it uh prints out their name and then it
04:29 - prints out their age
04:31 - you can also see here that i'm not using
04:34 - uh the array parameter anywhere in here
04:36 - so if you're not using one of these and
04:38 - the callback functions you can actually
04:40 - just go ahead and emit it and it won't
04:43 - have any effect on the end result
04:45 - so that is the for each method as you
04:48 - can see it's
04:48 - a little similar to a for loop but it's
04:51 - a little bit more elegant and
04:52 - you know you don't have to worry about
04:54 - things like out of bounds exceptions and
04:56 - things like that
04:58 - so let's go ahead and move on to the
05:01 - reverse method
05:04 - reverse is pretty self-explanatory if i
05:07 - uncomment out my code here
05:09 - you can see i have a test array that is
05:12 - just
05:13 - 0 through 9 and then i'm outputting this
05:16 - original array to the screen here
05:18 - and if i want to reverse this array all
05:20 - i have to do
05:21 - is do that array and then
05:25 - call the reverse method save that
05:28 - and then i'll output that to the screen
05:31 - and you can see that the
05:32 - reversed version of this array
05:35 - is nine through zero and just so you can
05:38 - see what this looks like
05:39 - on a small array of strings let me go
05:42 - ahead and comment that out
05:44 - and uncomment that and you can see here
05:47 - that
05:47 - this original array is reversed this
05:50 - array
05:50 - and then you can see that array reversed
05:53 - here
05:54 - with the reverse method so that is the
05:57 - reverse method for the array
06:00 - next we're going to take a look at
06:03 - the concat method the concat method
06:07 - will take an original array and it will
06:09 - concatenate it
06:10 - with other values or other arrays
06:14 - so for example let me uncomment out my
06:17 - code here
06:18 - and you can see here i have two arrays
06:20 - one is equal to
06:21 - abc and the other is equal to def
06:24 - and i've outputted both of these to the
06:26 - html here
06:29 - so if i was to take this variable a rake
06:31 - and cat
06:32 - and i was to set this equal to array
06:35 - 91 which is my abc array and
06:39 - run concat and then array
06:43 - 92 and save that and then i'll output
06:46 - that to the screen
06:48 - and you can see here that this
06:50 - concatenate
06:51 - is equal to both of these
06:55 - arrays concatenated into one a b c d e f
06:59 - and what this result would look like in
07:01 - code is one big array
07:03 - that has taken all those values and put
07:06 - them into
07:07 - one single array so
07:11 - you don't only need to send
07:14 - in arrays as parameters
07:18 - for concat you can also use
07:23 - some mixed parameters so you can see for
07:26 - example here
07:27 - i already have this example typed out
07:30 - this array concat 2 is equal to
07:34 - our abc array concatenated
07:38 - with just some random values thrown in
07:40 - here i have the numbers 1
07:42 - 2 3 and then for my fourth parameter i
07:45 - put in an array
07:46 - of d e and f and you can see whenever i
07:49 - output this to the screen
07:51 - it still takes all those values and
07:53 - concatenates it into
07:54 - one single array so in javascript if
07:58 - you see here in this comment uh what
08:00 - this would look like
08:01 - in javascript would be one big array
08:04 - that just takes all these values and
08:06 - puts them
08:07 - into one single array like that
08:10 - so that is the concat method
08:14 - now we are going to take a look at the
08:17 - join method the join method joins
08:21 - elements of an array into a
08:24 - single string and it does that with a
08:27 - separator that you can specify so if i
08:31 - uncomma uncomment out my code here
08:34 - we can see that i have a sample array
08:38 - right here that is just
08:40 - uh 192 168 1
08:43 - and 1. and if i wanted to join this
08:46 - into a string then i could set this
08:49 - string 10
08:50 - equal to array 10 join
08:54 - and if i just ran that without any
08:57 - parameters
08:58 - then you can see that by default it
09:01 - makes a string
09:02 - with the default separator
09:05 - as a comma but i can pass in anything
09:08 - that i want here i could do
09:10 - if i did a period there
09:13 - then you can see that now i have
09:18 - 192.168.1.1
09:20 - let me show you a couple of other
09:21 - examples using
09:23 - an array of strings i could
09:27 - join this array together and you can put
09:30 - in
09:32 - a space to where it looks more like a
09:34 - sentence
09:35 - or you can put in dashes or anything
09:39 - that you want the separator
09:42 - to be now if you have an array
09:45 - of characters like the third array
09:48 - example here
09:49 - then what you can do is you can actually
09:53 - take out everything and just do two
09:56 - quotes with no spaces in between
09:59 - and instead of doing the default
10:02 - separator which is a comma
10:04 - it will just bunch all those together
10:06 - and
10:07 - whenever it joins these together into a
10:09 - string you can see it takes these array
10:11 - of characters
10:12 - and puts them into a single string
10:15 - that that reads out with all the
10:18 - characters
10:19 - joined together so that is how the
10:22 - join method works now
10:26 - let's take a look at the
10:29 - slice method