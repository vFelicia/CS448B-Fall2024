00:00 - hey there how's it going everybody in
00:01 - this video we'll be learning about lists
00:03 - tuples and sets in Python now listen to
00:06 - polls allow us to work with sequential
00:08 - data and sets our unordered collections
00:10 - of values with no duplicates and we'll
00:12 - look at all of these to see exactly what
00:15 - that means so first let's look at lists
00:17 - and we're going to spend a majority of
00:19 - the time on lists just because it has a
00:20 - lot more functionality than the other
00:22 - data types so just like the name implies
00:24 - it allows us to work with a list of
00:27 - values so for example let's say that I
00:29 - wanted a list of courses so I could
00:31 - create a variable here called courses
00:34 - and to create a list we're going to use
00:36 - these square brackets and within these
00:39 - brackets we put each value that we want
00:41 - separated by a comma so for example
00:44 - let's say that we wanted a list of
00:46 - courses so I'll say history and math and
00:51 - physics and also lastly we'll put in
00:56 - Comp Sci so now if we print out this
01:00 - list so I'll print out courses and run
01:04 - that and we can see that it prints out
01:06 - our entire list now if we wanted to see
01:08 - how many values are in our list then we
01:11 - can get this by using the le n function
01:13 - which stands for length so if instead we
01:16 - print out the length using le n of
01:19 - courses and run that then you can see
01:21 - that it says that we have four values
01:23 - and our list and we can access each of
01:25 - these values individually so first let's
01:28 - go back to just printing out our list
01:30 - and running that so now to access the
01:33 - values in our list we can use square
01:35 - brackets after our list and pass in the
01:38 - location of the value that we want so we
01:41 - can put in square brackets and this
01:43 - location is called an index and it
01:45 - starts at zero so to access the first
01:48 - value of our list we can access the
01:52 - location at index 0 if I print that then
01:55 - we can see that we get history well
01:57 - since the length of our list is 4 that
01:59 - means with the first value starting at
02:01 - index 0 then the last value will be at
02:04 - index 3 so it's our total length minus 1
02:08 - so let's say I wanted to grab the last
02:10 - value for my list which is comps
02:12 - I could count these indexes out and see
02:15 - which one should be able to access it so
02:18 - 0 1 2 & 3 the third index so if I print
02:22 - out courses 3 and access that index of 3
02:26 - and run that then we can see that we
02:28 - printed out comps I now we can actually
02:30 - use negative indexes 2 and negative
02:33 - indexes we'll just start from the end of
02:35 - the list so since 0 is the first item of
02:38 - our list I can also get the last item of
02:40 - our list using a negative 1 so if we
02:43 - print out courses index of negative 1
02:47 - and run that that we can see that we got
02:49 - comps I again which is the last item
02:51 - it's more convenient a lot of the time
02:54 - using a negative 1 to get the last item
02:57 - because we don't have to worry about
02:58 - what the length of the list is so for
03:01 - example if my list grew by 10 items then
03:04 - the third index would no longer be the
03:06 - last item but the negative one will
03:08 - always be the last item and also if you
03:11 - accidentally try to access an index that
03:13 - doesn't exist then you'll get an index
03:15 - error so in this example if we tried to
03:18 - access an item at index 4 and run that
03:21 - since there is no index 4 you can see
03:23 - that we get this list index out of range
03:25 - now instead of only grabbing one value
03:28 - where you can also access a range of
03:30 - values so if I wanted to grab the first
03:32 - two values from this list then I could
03:35 - say that I want to access starting at
03:37 - index 0 and go to but not including
03:41 - index 2 so this first index is our
03:44 - starting point and the second index
03:46 - which is separated by this colon is the
03:49 - stopping point now one thing that's a
03:50 - little confusing is that the first index
03:52 - is inclusive but the second index is not
03:55 - and there's good reasons for that but
03:56 - it's easy to forget so what we're saying
03:59 - here is that we want all of the values
04:02 - between the beginning and up to but not
04:05 - including the second index so if we run
04:09 - this and we can see that it printed out
04:11 - history and math because it printed out
04:13 - 0 & 1 all the way up to 2 but not
04:17 - including 2 which is physics now since
04:19 - our first index here is just the start
04:21 - of the string we can actually just leave
04:23 - that off and it will assume that we want
04:24 - to start at the beginning so
04:26 - if we said print the courses with
04:29 - nothing there : - and run this and you
04:33 - can see that we get the same result
04:35 - because it just assumed that we wanted
04:36 - to start at the beginning now if we just
04:38 - wanted to grab physics and Comp Sci from
04:41 - this list then we can say that we want
04:43 - to start at index two and then put in
04:46 - our colon and now just like our starting
04:49 - index if we don't put anything here
04:51 - and it's going to assume that we want to
04:53 - go all the way to the end of the list so
04:55 - if I run this and you can see that it
04:57 - printed out physics and Comp Sci as it
04:59 - started that our second index which is
05:01 - physics and just went all the way to the
05:03 - end now what we're doing here is called
05:04 - slicing and if you'd like to learn more
05:06 - about slicing in depth then you can
05:08 - watch my detailed video on that which
05:10 - shows you how you can skip values go in
05:12 - reverse and things like that and I'll
05:14 - leave a link to that video in the
05:16 - description section below ok so let's
05:18 - look at some list methods that we have
05:20 - available to us that allow us to modify
05:22 - our list
05:23 - so first let's say that we wanted to add
05:25 - an item to our list there are a couple
05:27 - of ways we can do this so first if we
05:30 - just wanted to add an item to the end of
05:32 - our list then we could use the append
05:34 - method so let's say that we want to add
05:36 - art to our courses so we can just say
05:39 - courses dot append and we want to append
05:44 - art so now if I remove this slicing and
05:47 - just print out our courses list and run
05:50 - that then you can see the art was
05:52 - appended here to the end of the list now
05:54 - if we wanted to instead add art to a
05:56 - specific location in our list then we
05:59 - could instead use the insert method
06:00 - now insert takes two arguments first it
06:03 - takes the index where you want the to
06:05 - insert the value and then the value
06:07 - itself so if I wanted to insert art to
06:10 - the beginning of our list then we could
06:13 - say courses dot insert and now the first
06:17 - argument is the location so let's just
06:19 - say location 0 which is the beginning
06:21 - and then the value that we want to
06:23 - insert which is art so if we run this
06:25 - now we can see that art was inserted at
06:28 - position 0 now that only inserted the
06:31 - value it didn't overwrite anything so
06:33 - you can see that all the other courses
06:35 - are still here but they just got shifted
06:36 - now another way of adding values to our
06:39 - list
06:40 - using the extend method now sometimes
06:42 - this confuses people so let's look at
06:44 - what this does so we want to use extend
06:47 - when we have multiple values that we
06:49 - want to add to our list so for example
06:51 - let's say that we have another list here
06:54 - called courses - and we'll set this
06:57 - equal to another list with art and
07:01 - education in this list and we want to
07:04 - add these values to our original courses
07:07 - list
07:08 - so first let's see what happens if we
07:10 - use this insert method so instead of
07:13 - inserting art to the beginning of our
07:15 - list let's instead insert these courses
07:18 - to the beginning of our list so let's go
07:20 - ahead and run this so we can see that at
07:22 - the beginning of our list that it
07:24 - actually added the entire list of
07:27 - courses - and not each individual value
07:30 - so we can actually have a list within a
07:34 - list like we have here so if we were to
07:36 - print the first value of our courses
07:39 - list so I'll print out the index of 0
07:41 - and run that then we can see that now
07:44 - the first value is actually this list
07:46 - itself but this isn't really what we
07:48 - wanted we wanted to add all of those
07:50 - values from our second list to our
07:53 - original list now that is why we use the
07:55 - extend method so let's go ahead and set
07:58 - this back to the way it was to just
08:00 - print the courses now instead of
08:02 - inserting here will instead use extend
08:05 - and it only takes one argument which is
08:07 - the iterable so we will extend courses
08:11 - with courses - so now if we run this and
08:15 - we can see that when we did courses
08:17 - extend with courses - that it added the
08:20 - values from our second list here to our
08:24 - original so a lot of people get that
08:26 - mixed up with append and extend so again
08:29 - if you were to append it just like with
08:31 - insert then it's just going to append
08:34 - the list itself on there instead of the
08:38 - each individual item so if we use extend
08:41 - and now we can see that each individual
08:43 - item is extended onto that list ok so
08:46 - now let's look at how we can remove some
08:50 - items or remove some values from our
08:52 - list
08:52 - now one way to remove values is to just
08:55 - use the remove method so if we were to
08:57 - say courses dot remove and let's say
09:01 - that we wanted to remove math so if we
09:04 - save that and run it and we can see that
09:06 - math was removed from the courses list
09:09 - now there's also a way of removing
09:11 - values with this pop method
09:14 - so if we say courses dot top now by
09:17 - default this will remove the last value
09:19 - of our list now this is useful if we
09:22 - want to use our list like a stack or a
09:24 - queue so if we run this like it is then
09:27 - we can see that comps I was pop of our
09:30 - off of our list and now we just have
09:32 - these three courses now one other thing
09:34 - about pop is that it returns the value
09:37 - that it removed so we can actually set a
09:40 - variable and grab that return value so
09:43 - if I set a variable here and say poped
09:45 - equals courses pop and then I was to
09:49 - print this above our courses here and
09:52 - run that that we can see that it grabbed
09:55 - that comp site value that was popped off
09:57 - at the list so if you had a stack or a
09:59 - queue then you could go through and just
10:02 - keep popping off values until your list
10:04 - is empty okay so now let's look at how
10:06 - we can sort our list in a couple of
10:09 - different ways here so first of all
10:11 - let's say that we just wanted to reverse
10:12 - our list as it currently is now this is
10:15 - pretty easy so we can just use the
10:17 - reverse method so I can say courses dot
10:20 - reverse and if we run this and we can
10:23 - see that now it prints out our courses
10:27 - but in Reverse so the last item all the
10:29 - way up until the first item now instead
10:32 - of reversing our list what if we wanted
10:34 - to sort our list now sorting is just as
10:37 - easy we can just use the sort method so
10:40 - I'll save that and run it and you can
10:42 - see that now our list is sorted in
10:44 - alphabetical order so comps I history
10:47 - math physics now if our list contained
10:50 - numbers that it would sort those in
10:52 - ascending order so let me call create
10:54 - another list here of numbers I'll just
10:57 - call that numbs I'll set this equal to
10:59 - some random value cell say 1 5 4 and 3
11:03 - and we'll save that now below course
11:06 - we will just say noms dot sort and we
11:09 - will also print these out so I'll grab
11:13 - that variable print those out and run
11:15 - that so now we can see that our strings
11:17 - were sorted alphabetically and our
11:19 - numbers were sorted in ascending order
11:21 - now what if we wanted our values sorted
11:24 - in descending order now one way you
11:26 - might think to do this is just to use
11:28 - our reverse method on the list after
11:30 - they're sorted and that would work but
11:33 - there's an easier way to do this instead
11:35 - we can just pass an argument to our sort
11:37 - method called reverse so if I come up
11:39 - here to the sort method and I pass
11:42 - reverse is equal to true and let me also
11:45 - grab this for our number and if I run
11:49 - this you can see that now these sorted
11:51 - are in descending order they're sorted
11:54 - in reverse order now one thing to notice
11:56 - here is that we don't need to reset our
12:00 - variables when we call most of these
12:02 - methods
12:03 - it's just altering the list in place but
12:06 - there's also a way that we can get a
12:07 - sorted version of our list without
12:10 - altering the original list so what if we
12:13 - wanted a sorted version of our courses
12:16 - list without altering the original so to
12:20 - do this we can use the sorted function
12:22 - so instead of calling this sort method
12:25 - on our list well instead use this sorted
12:28 - function and I'll pass courses in two
12:31 - sorted there now if we run this as it is
12:34 - and we can see that our list is not
12:36 - sorted it's exactly how we described it
12:39 - up here now that's because the sorted
12:41 - function doesn't sort the list in place
12:44 - it returns a sorted version of the list
12:47 - so to get that sorted list we have to
12:49 - make a new variable and set it to the
12:52 - return value of the sorted function so I
12:54 - could just call this sorted courses is
12:57 - equal to the sorted version of that
13:01 - courses list and now if we copy that and
13:04 - print that out so now we can see that
13:06 - this sorted courses is equal to the
13:08 - sorted version of that list so that's
13:10 - really useful because a lot of the times
13:12 - you won't want to alter your original
13:15 - list in any way
13:16 - so using this sorted function is a nice
13:18 - way to get a sorted
13:20 - version of that list without altering
13:21 - the original and other than this sorted
13:24 - function there are a couple more useful
13:26 - built-ins that we can use with these
13:28 - sequences so let's look at a few of
13:30 - these so we'll look at min Max and some
13:33 - so it's probably pretty obvious what
13:36 - these will do but if I wanted the
13:38 - minimum value of our numbers list here
13:41 - then let me comment out where we're
13:43 - printing out nums so a built-in function
13:46 - that we can use is just min and call men
13:49 - on our sequence of numbers and if I run
13:51 - that and you can see that it returns one
13:53 - as the minimum number of that list
13:56 - and if we wanted the max value of that
13:58 - list then we could use max and if I run
14:00 - that you can see it returns five now if
14:03 - we wanted to print the sum of that
14:06 - entire sequence that I can just say sum
14:08 - of numbers if I print that then it gets
14:11 - 15 because one plus five plus two plus
14:14 - four plus three is equal to 15 okay so
14:16 - lastly let's see how we can find some
14:20 - values here within our list so let me go
14:22 - ahead and clean up here a little bit and
14:25 - uncomment out that so if we want to
14:28 - define the index of a certain value then
14:30 - we can use the index method for this so
14:33 - if I wanted to find the index of comps I
14:36 - and our list then we could just print
14:39 - out courses dot index and then search
14:43 - for Comp Sci now if we run this and we
14:48 - can see that we got three and three is
14:50 - the index where it found that comps I
14:52 - value now if we try to find the index of
14:55 - a value that doesn't exist in the list
14:57 - and we'll get a value error so if we
15:00 - search that original list of courses for
15:03 - art and run that then we can see that we
15:05 - got a value error and it says art is not
15:07 - in the list now if we just wanted to
15:10 - simply check if the value was in our
15:12 - list and simply get back a true or false
15:15 - result then for this we can use the in
15:17 - operator so if I want to check if art is
15:20 - in our list then I could say art in
15:24 - courses so if I run that and we can see
15:27 - that we got false but if instead we said
15:31 - math in courses and ran
15:33 - that and that returned true now this is
15:36 - going to be especially useful once we go
15:37 - over the topic of conditionals and
15:39 - if-else statements and we're going to go
15:41 - over those in a couple of videos and we
15:44 - can also use this to loop through values
15:46 - of our list by using a for loop so if I
15:50 - was to say for item in courses and then
15:55 - scoot that over then we will just print
15:58 - out that item now this is the first time
16:02 - in our series that we've indented a
16:05 - block of code basically what we're
16:06 - saying here is that we want to create a
16:09 - loop we're looping through each value of
16:12 - our list and each loop through this item
16:15 - variable will be equal to the next item
16:18 - in the list so that's why this line is
16:20 - indented because it tells us that this
16:22 - code is executed from within our for
16:25 - loop so if we run this then we can see
16:28 - that it prints out each item of our list
16:30 - now the reason it prints them all out on
16:33 - a new line is because by default the
16:35 - PERT statement goes to a new line each
16:37 - time it's executed now this item
16:39 - variable is just a variable it's not a
16:41 - keyword or anything we can name this
16:42 - anything we want so instead if we wanted
16:45 - to you know call this course for course
16:47 - and courses and print that out and you
16:50 - can see that we get the same result so
16:52 - we can access each value as we're
16:53 - looping through but sometimes it might
16:55 - be useful to also have the index of what
16:58 - value we're on now to do this in Python
17:01 - we can access the index and the value by
17:04 - using the enumerate function so I will
17:07 - say enumerate and I will wrap courses
17:10 - within that enumerate function and this
17:13 - enumerate function returns two values it
17:15 - returns the index that were on and the
17:17 - value so instead of just getting the
17:19 - course here we're also going to need to
17:21 - get the index so I'll call that index so
17:24 - for index course in the numerator PSA's
17:28 - and now if we print out that index and
17:30 - the course and run that and you can see
17:33 - that we had access to each index and
17:36 - value as we're looping through our list
17:38 - and if we don't want to start at zero
17:40 - then we can pass in a start value to our
17:43 - numerate function so if instead we
17:45 - wanted to
17:46 - start at one and I can pass in the
17:50 - second argument say start is equal to
17:52 - one now if I run this and you can see
17:54 - that now our starting value as one okay
17:57 - so there is one more thing that I want
17:59 - to go over before we move on to tuples
18:02 - and sets so it's pretty common that
18:04 - we'll want to turn our list into strings
18:06 - separated by a certain value now to do
18:09 - this we're actually going to use a
18:11 - string method called join and we're
18:13 - going to pass in our list as the
18:15 - argument so for example let's say that
18:17 - we wanted to turn our list of courses
18:19 - into a string of comma separated values
18:22 - so we can say course string and that
18:25 - will hold the string version of our
18:27 - courses and now we'll type the string
18:29 - that we want to separate each item of
18:31 - our list so I want these to be comma
18:33 - separated so I'll put in a string of a
18:36 - comma and a space and then I'm going to
18:39 - use the join method to join the values
18:41 - of the list using this string so I'll
18:44 - say dot join and I want to join my
18:47 - courses on that string so now if I come
18:50 - down here and print that string version
18:53 - of our courses and run that we can see
18:56 - that we get our values comma separated
18:58 - and if we want to change this then we
19:00 - can just change our string within that
19:03 - we're joining on so if we wanted to
19:05 - hyphenate these then I could just change
19:07 - this to space - space and run that and
19:10 - you can see that when we ran that now we
19:13 - are separating these by the - so this is
19:15 - just one long string with all of our
19:17 - list values joined together now we can
19:19 - also do the reverse of this and turn a
19:21 - string back into a list so we can do
19:24 - this by splitting our string on a
19:26 - certain value so if I split the string
19:28 - that we just created so let me create a
19:30 - new list here and I'll set this equal to
19:34 - the string version of our list and I'll
19:37 - do a dot split and I'll split it on a
19:40 - space - space so if we look at the
19:43 - string version that we have down here
19:45 - this is just one whole string what that
19:47 - saying is it's saying hey split up all
19:49 - of these values on this space comma
19:51 - space and make a list out of all those
19:53 - values that you get so now if we print
19:56 - out our new list so I'll print
20:00 - new list and run that and you can see
20:02 - that now we're back to the original list
20:04 - okay so I know that that was a lot to
20:07 - take in because there's so much that we
20:08 - can do with lists but now let's move on
20:11 - to tuples and sets now that we're
20:14 - familiar with lists then these will
20:16 - probably go pretty quickly
20:17 - okay so tuples are very similar to lists
20:20 - but with one major difference so we
20:22 - can't modify tuples now in programming
20:25 - this is called mutable and immutable so
20:28 - lists are mutable and tuples are not
20:30 - they are immutable so let's look at what
20:33 - this means so I'm going to grab a quick
20:35 - snippet of code here from my snippets
20:38 - file just to compare these so I'm just
20:40 - going to grab from here all the way down
20:43 - to here and just go ahead and paste
20:47 - those in so first we have a regular list
20:50 - here that we've already looked at and
20:52 - we're going to look at one issue that
20:53 - you might run into with mutable objects
20:56 - so what I'm doing here is I'm creating
20:59 - our list of courses and I'm calling this
21:01 - list one and then we're creating another
21:04 - variable here called list two and we're
21:07 - setting that equal to list one and then
21:09 - we're printing out both of these so if I
21:12 - run this then we can see that both list
21:14 - one and list two have the same values so
21:17 - now let me uncomment out this code where
21:20 - we're changing a value in the first
21:22 - index of list 1 and then reprinting our
21:26 - values again so now if I run this then
21:29 - we can see here that all we did was
21:30 - change the value at the first index of
21:34 - list 1 but by changing list ones first
21:37 - value it also changed list two and the
21:40 - reason for that is because they're both
21:42 - the same mutable object now if you need
21:45 - to modify your list then this mutability
21:47 - is what you want but if you want a list
21:50 - of values that you know aren't going to
21:53 - change then we can use a tuple so let's
21:56 - look at a tuple example so I'm going to
21:58 - comment out our mutable example here and
22:01 - then uncomment out our two for example
22:03 - so a tuple looks almost exactly like a
22:06 - list but instead of the square brackets
22:09 - we're using instead using these
22:11 - parentheses and after we create our two
22:14 - we're doing the exact same thing we're
22:16 - calling a creating a variable tuple one
22:19 - that is a tuple and then we're setting
22:21 - this tuple to equal to two point one and
22:24 - for now I'll just comment out where
22:26 - we're changing that first value and I'll
22:29 - run that and you can see that both of
22:30 - these tuples are equal to the same list
22:34 - of values but now if we try to change
22:36 - that value at the first index of tuple
22:39 - one just like we did with our list if we
22:42 - run that then we can see here that we
22:44 - get an error and it says type error
22:46 - tuple does not support item assignment
22:49 - and that's because it's immutable so now
22:53 - since a tuple is immutable it doesn't
22:55 - have nearly as many methods as a list
22:58 - because a lot of those list methods that
23:00 - we looked at involves mutating the
23:02 - values so we can't append we can't
23:05 - remove anything or anything like that
23:07 - but other than that they behave pretty
23:09 - much the same we can loop through tuples
23:12 - we can access values and all the other
23:14 - things that we've already seen except
23:16 - for what mutates the list so that's
23:19 - basically the difference between lists
23:21 - and tuples if you need something that
23:23 - you can modify then use a list but if
23:26 - you just want something that you can
23:27 - loop through and access then you might
23:29 - want to think about a tuple so that you
23:32 - don't run into the issues that we just
23:34 - saw okay and lastly let's look at set
23:36 - now set are values that are unordered
23:40 - and also have no duplicates so let me
23:43 - grab a sample from the snippets file
23:45 - here that we can see so I'm just going
23:48 - to go ahead and grab this small snippet
23:51 - and paste that in so we can see that
23:52 - this looks similar to lists and tuples
23:55 - but instead of the brackets or
23:57 - parentheses we're instead using these
23:59 - curly braces now if I run this code to
24:02 - print this set out and we can see that
24:04 - it prints out of values but if you
24:06 - notice here these aren't in the order
24:08 - that we added them so we had history
24:10 - first here and it has history last down
24:13 - here and if I run this a couple more
24:15 - times and we'll see that you know this
24:17 - order can change with each execution now
24:20 - the reason for this is because unlike
24:21 - our lists or tuples sets don't really
24:24 - care about order because some of them
24:27 - uses for a set is either to test whether
24:30 - a value is part of a set and also it's
24:32 - used a lot to remove duplicate values
24:34 - because sets throw away duplicates so
24:37 - first let's look at how to get rid of
24:39 - duplicates so if I add another math
24:41 - course here to the end of our set and
24:44 - now if I rerun this then we can see that
24:47 - we still only have four courses it got
24:50 - rid of that second math course and it
24:52 - just left us with the one now another
24:55 - thing I mentioned was that it's used to
24:57 - test whether a value is part of a set
24:59 - now this is called a membership test so
25:02 - sets do this a lot more efficiently than
25:04 - lists and tuples so what I mean by this
25:07 - is that within our print statement if I
25:09 - was to say math in CS courses and I run
25:16 - that then when you can see that it
25:18 - prints out true now we could do that
25:20 - with lists and tuples also but sets are
25:23 - optimized for this okay and lastly
25:25 - something else really useful that sets
25:27 - can quickly do is determine what values
25:30 - they either share or don't share with
25:32 - other sets so for example let me create
25:35 - another set called art courses and I'll
25:39 - create this pretty similar to CS courses
25:41 - here but instead of physics and Comp Sci
25:45 - I'll instead say art and design and with
25:49 - both of these I'm going to go ahead and
25:50 - take out that extra math on the end just
25:53 - so it's a little bit more clear and
25:54 - instead of this being CS courses I'm
25:57 - going to call this set art courses so
25:59 - now we have two different sets here and
26:01 - some of them have different courses and
26:03 - some of the courses are the same so
26:05 - let's say that I wanted to see what
26:07 - courses these sets had in common so to
26:10 - do this we could use the intersection
26:12 - method so we can say CS courses dot
26:17 - intersection and we will pass in the art
26:21 - courses into that so if we run that then
26:25 - we can see that it shows us that the
26:26 - history and math courses are in both of
26:29 - those sets and if I wanted to see what
26:31 - courses are in the CS courses but not
26:35 - the art courses then I could use the
26:37 - difference method so instead of
26:38 - intersection
26:40 - we'll instead say difference so if I run
26:42 - that and now we can see that it shows
26:44 - that the physics and Comp side courses
26:47 - weren't in the art courses now if I
26:50 - wanted to combine both of these sets and
26:52 - print all of the courses offered then I
26:55 - could use the Union method so I'll say
26:58 - CS courses dot Union and we want a union
27:01 - with the art courses so if I run that
27:04 - and we can see that now we get all of
27:06 - the courses printed out from both sets
27:08 - so sets can definitely be useful for
27:11 - these kinds of use cases and for these
27:13 - particular problems they're much more
27:15 - performant than lists or tuples okay so
27:17 - we are basically finished up with this
27:19 - video but let me show you one last thing
27:21 - before we close this out and that's
27:23 - going to be how to create empty lists
27:25 - tuples and sets so I have these over
27:27 - here in my snippets so let me grab these
27:30 - real quick and copy and paste these over
27:35 - here and bring this down a line so I
27:37 - wanted to show this because there's a
27:39 - small gotcha
27:40 - when it comes to creating an empty set
27:42 - so to create an empty list we can either
27:45 - set it equal to empty square brackets or
27:48 - we can use this built-in list class and
27:51 - to create an empty tuple we can use
27:53 - these empty parentheses or this built-in
27:56 - tuple class now to create an empty set
27:58 - we actually can't use these empty curly
28:02 - braces so this line right here is wrong
28:05 - that's not an empty set this is actually
28:07 - going to create an empty dictionary so
28:10 - to create an empty set the way to
28:12 - properly do this is to use the built-in
28:14 - set class with no values and speaking of
28:17 - dictionaries that's actually what we're
28:19 - going to cover in our next video but I
28:21 - hope everyone feels comfortable now with
28:23 - working with lists and tuples and sets
28:25 - but if anyone does have any questions
28:28 - about what we covered in this video then
28:29 - feel free to ask in the comment section
28:31 - below and I'll do my best to answer
28:32 - those now if you enjoy these tutorials
28:34 - and would like to support them and there
28:35 - are several ways you can do that the
28:37 - easiest way is to simply like the video
28:38 - and give it a thumbs up and also it's a
28:40 - huge help to share these videos with
28:42 - anyone who you think would find them
28:43 - useful and if you have the means you can
28:45 - contribute through patreon and there's a
28:46 - link to that page in the description
28:47 - section below be sure to subscribe for
28:50 - future videos and thank you all for
28:51 - watching
28:53 - you
29:03 - you