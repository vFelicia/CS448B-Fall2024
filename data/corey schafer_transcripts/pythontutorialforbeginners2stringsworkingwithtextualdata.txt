00:01 - Hey there. How's it going everybody in this video?
00:02 - We'll be learning about python Data types and specifically
00:04 - We'll be learning about how to work with textual data and textual data in python are represented with strings
00:10 - So we currently have [opened] our intro pi file that we were working with in the last video
00:15 - Where we just printed out hello world and I'll go ahead and run this so that we can see that down here
00:20 - It does print out hello [world] [now]
00:23 - This line here is using the print function
00:25 - and we're passing this text value into that print function now if we wanted to create a
00:30 - Variable that holds that text value then we could say now
00:34 - I'll just get rid of this comment for now
00:36 - So if I wanted a variable to hold that value then I can just create a variable and we'll call that
00:40 - message and we'll set that message variable equal to our text value that we passed in to print and
00:47 - Here message is our variable [name]
00:49 - so if you're coming from another [language]
00:51 - Then you might be wondering if we need [to] use semicolons or something like that to end each line but python doesn't need that it
00:57 - operates on Whitespace alone
00:59 - Which makes it a very clean language to work with?
01:01 - Now by convention our variables are usually all lowercase and if it's multiple words then we separate those with underscore
01:09 - So if instead my variable name was my message, then it would be my underscore message
01:14 - So that's just a convention that's commonly used and also these variable names should be as descriptive as possible
01:21 - As to what values they're meant to hold so message is a good variable name here because it's holding our message
01:27 - But if I was instead to call this variable m which is a valid variable name
01:32 - But anyone reading my code now wouldn't know when they see this in variable
01:37 - What value it's supposed to hold so message is a much better variable name in this case
01:42 - So this message variable now holds our text data and our text data is called a string now
01:48 - We can use our variable in place of this string
01:51 - Anywhere that we use it in our program, so instead [of] printing out hello world
01:56 - Directly here. I'm instead going to now print out this variable and that should give us the same results
02:01 - So if I run that then you can see down here, we still get [the] same result now
02:05 - We can see that
02:06 - I created this string with single quotes now you can also use double quotes
02:10 - so if you're wondering if there is a difference between the single quotes in the double quotes
02:14 - And it really just depends on what text you have in your string
02:18 - So for example if you have a single quote in your string
02:22 - So for example let's create one with a single quote instead of hello world, [I] will instead make our string
02:29 - Bobby's World
02:30 - Now see the problem [here] is that?
02:33 - Python sees this single quote within our text as being the end of the string and it's not going to know what to do
02:40 - With what comes after that single quote here because it thinks that's where the string is closing
02:46 - So if you run this now then you'll get an error now
02:49 - There's a couple of different ways to [handle] this we could escape this single quote with a backslash
02:55 - so if I escape that single quote and now
02:58 - Run this now python knows that this single quote doesn't close out the string and that instead this one should
03:05 - Now another way to handle that is [to] instead
03:08 - So I'll take away that xscape character now another way to handle that is instead
03:12 - Just use double quotes on the outside of our string any string [that] contains single quotes
03:18 - So if we know that our string contains a single quote then we can instead use double quotes on the outside
03:23 - And then it'll know that that single quote isn't the end of the string so now if we run this then we can see that
03:30 - It still works fine
03:30 - But that doesn't necessarily mean that double quotes are better because it goes both ways if your string contains double quotes in the message then
03:37 - I would use single quotes on the outside now if we needed to create a
03:42 - multi-line string and one way we can do this is by using three quotes at the beginning and end of our string and
03:48 - these can also be
03:50 - Single or double quotes as [well], so let's go ahead and look at an example
03:53 - So I'll add three quotes to the beginning and end of our string here
03:59 - And now I'll just add [some] text to spans multiple Lines here
04:02 - so I'll just say was a good and then hit enter to go to a new line and say cartoon in the
04:09 - 1990s so now if we run [that] and we can see that it printed out [our] string correctly over multiple lines, [okay]?
04:17 - So let's go back to our simple hello world example
04:21 - So I'm just going to take all of that and replace it with our previous
04:25 - Hello world example, and now let's go ahead and just run that really quick
04:29 - So we're back to our starting point so we can think of our string as a string of individual characters
04:34 - And we can access these individual characters also, so first let's see how we can find how many characters are in our string
04:41 - So to do this we can use the [len] function which stands for length
04:46 - So whenever I print out here if I was instead of printing my message if I was to print out this
04:52 - Length function and pass in message, and then run this. Now we're no longer printing out our message
04:58 - We're printing out the length of our message
05:00 - And we can see that it says that the length of our string is 11
05:04 - And if we counted these up 1 2 3 4 5 6 7 8 9 10 11
05:10 - Then we can see that that's correct, and we can access our strings characters individually, so to do this we can use the square
05:18 - Brackets after our string and pass in the location of the character that we want. So, I'll say print
05:25 - Message and then square brackets now the location is called an index and it starts out at 0
05:31 - So to access the first character of our string we can say
05:36 - print the message and then access this index of 0 so if we print that then we can see that we got the
05:43 - capital H now
05:45 - since the length of our string is 11 that means that with the first character starting out at 0 our last character would be at
05:52 - Index 10 so it's our total length minus 1 so if I was to say print out the
05:59 - Location at Index 10 the value at Index 10 then we can see that we got our d character
06:05 - Which is the last character in that string.
06:07 - Now if you accidentally try to access an index that doesn't exist then you'll get an index error. So if we were to say
06:14 - Access the index of 11, and we can see that that through an index error now
06:19 - We can also access a range of characters
06:22 - So if I just wanted to get the word hello from our string then we could say that we want
06:29 - 0 and then this colon 5 and we'll explain this
06:33 - So the first index here is our starting point and the second in that index which is separated by this colon is
06:40 - The stopping point now one thing a little confusing about this is that the first index is
06:45 - Inclusive which means it's going to include that value, but the second index is not now
06:50 - There's good reasons for this
06:52 - But it's still easy to forget so basically what we're saying is I want all the characters
06:57 - Between the beginning and up to but not including the fifth index
07:02 - And it will be more clear if we just go ahead and run this so we can see that it prints out. Hello
07:08 - So it printed out our message from the zero index here all the way up to but not including
07:14 - The [5th] Index here, so we got hello now since our starting point. Here is just [the] first index
07:21 - We can actually just leave that off and it will assume that we want to start at the beginning
07:25 - So if we don't put anything there and then : [five] then we should get the same thing
07:31 - So if we run [that] we can see we still got hello
07:33 - now instead if we wanted to grab the word world from the string then we could start at
07:40 - The sixth Index and then we can just go to the end and just like leaving off our
07:46 - Starting index it will start from the beginning
07:49 - Leaving off the stop index just goes all the way to the end
07:52 - So now if we run that and we can see that it gives us back the word world now what we're doing
07:58 - Here is called slicing and if you'd like to learn more about
08:01 - Slicing in depth then you can watch my detailed video on that and I'll leave a link to [that] in the [description] section below
08:07 - So now let's just go back to printing out our message and let me run this okay
08:12 - So all of the data types that we're going to review are going to have certain methods available to us that give us access to
08:18 - a lot of useful functionality now when I say methods a lot of people wonder what's the difference between a method and a function and
08:26 - functions and methods are basically the same thing [a]
08:29 - Method is just a function that belongs to an object
08:32 - It's not important to get into the details of that now
08:34 - But if you hear me say method or function then you can basically think of those as the same thing for now
08:40 - So like I was saying the data types that we'll be going over all have certain methods
08:45 - Available to us that give us access to a lot of useful functionality so let's look at some of these string methods
08:51 - So we can see here that our hello world text is
08:56 - Capitalized, but let's say [that] we wanted that to be all lowercase now to do this
09:01 - It's just as easy as saying print message and then to lowercase this we can say dot lower
09:09 - Now when we run this dot lower with these parentheses here. That's running the lower method on the string
09:15 - So when we ran that we can see that now our hello world has been set to all lowercase [and] [if] we wanted to do
09:21 - this to uppercase and it's as easy as changing at
09:24 - Lower to upper if we run that now we can see that
09:28 - Hello
World is all uppercase?
09:29 - So now let's say that we want to count a certain number of characters in our string and to do that
09:34 - We can use the count method and the count method actually takes a string as an argument so we can say
09:40 - Message dot count and now we have to pass in an argument
09:45 - And it has to know what we want to count in our message
09:48 - So what for now?
09:49 - We'll [just] say count hello
09:50 - And if we run that we can see that it returns that the string hello appears in our message one time
09:56 - But if we instead just passed in a single character as argument
10:00 - So I'll pass in an L if I run that
10:03 - You can see that we get a 3 because there are three L's and our message variable
10:07 - So if we instead want to find the index of where certain characters can be found and we can use the find method so I?
10:14 - Could come up here instead of saying dot count I can say not fine and now this takes an argument as well
10:20 - It's what we want to find so let me type in world here and run this
10:25 - And we can see when [we] run this that it returns a six
10:28 - and that's because world starts at the sixth index of our message variable now if we try to
10:34 - Find a string of characters that doesn't exist then it will just return negative one
10:39 - so if instead of world
10:40 - I typed in universe and ran that you can see it returns a negative one because it can't find that anywhere in our message variable
10:48 - Okay, so now let's say that we want to replace some characters in our string with some other characters
10:53 - And we can do this with the replace method now first. I'm going to change this change this back to printing out our
11:00 - regular message
11:01 - [so] I'll just delete these
11:03 - Now let's try to use our replace method right below where we first set our message fair herbal and this method takes two arguments
11:11 - First it takes what we want to replace so first let me just say message
11:15 - But replace so first it takes what we want to replace, so let's say that we want to replace
11:22 - world and now the second argument
11:24 - Which is separated by a comma [is] what we want to replace world with so we'll replace world with universe
11:31 - So now if [we] run this and this might be a little unexpected we can see that it's still printing out hello world
11:38 - [now] the reason our replacement didn't work is because it's not making that replacement in place
11:44 - It's actually returning a new string with those values replaced and we'll learn more about return statements when we learn about
11:51 - Functions, but basically we need to set a new variable here
11:55 - To get that returned string with those replacements, so I could say something like new message is
12:02 - equal to
12:04 - That original method with this replacement
12:07 - So now if we set that
12:09 - New variable and instead print that new message and run that and you can see that now it replaced the world with
12:16 - universe
12:16 - and if you really wanted to make the
12:19 - Replacement to the message variable then instead of making a new message variable and we can just set this same message
12:26 - Variable again, so now we're setting the same message variable equal to that replacement and then printing it out
12:33 - So if I run that and we can see that now the message variable had world
12:37 - Replaced with universe and this may look a little strange [to] set a variable to an altered [version] of itself
12:43 - But it's very common, and you'll be using that a lot
12:46 - Okay, so now let's get rid of this replace line here
12:50 - And now let's look at how we can add multiple strings and concatenate them together, so instead of saying hello world
12:56 - I'm instead just going to set this equal to hello and
13:00 - Instead of calling this message. I'm going to set this equal to greeting and just below greeting
13:06 - I'm going to create a variable called name and I'm going [to] set that equal to we'll just say
13:11 - Michael and now lastly let's create a message here and
13:16 - We want this message to combine our greeting with our name
13:21 - Wanted to say hello Michael and one way to do this is to use the plus sign operator
13:27 - so
13:27 - We could try this by saying greeting plus name now if we run this and we can see that
13:34 - It's not exactly what we wanted it combined them together, but it doesn't have a space there
13:40 - So when you're concatenated strings together it's easy to make mistakes like this
13:44 - So what we want to do is add a string between them so that spaces them out so we can add a string between these
13:52 - Just by putting in a string literal here
13:55 - And I'm also going to put in a comma and a space to separate those and now we also need another plus sign
14:02 - So that we're adding the name after that string so now we're saying that we want this greeting. Which is hello
14:09 - plus this comma and space plus the name so if I run this
14:14 - Then we can see that it concatenated those strings together
14:16 - How we wanted now sometimes using the plus sign isn't the best way to go if we wanted to create a longer more?
14:23 - Complicated string while using our variables and adding them all together like this
14:28 - Might get hard to keep track [of] so let's say that we wanted to add to the end of our message
14:33 - Just by you know closing off a sentence and saying
14:37 - Welcome so to do that after our name variable
14:39 - we could add another string that is a period to close off that sentence a space and then
14:46 - Welcome with an exclamation point so let's go ahead and run that now we can see that it printed out the string
14:51 - How we wanted it to look?
14:53 - But it's starting to get a little complicated on this line here to keep track of all of our plus signs and spaces within our
15:00 - message
15:01 - instead with strings like this
15:03 - It's usually better to use a formatted string
15:06 - [this] allows [us] to write the sentence as it will appear and put placeholders in place of our variables
15:12 - So let's go ahead and see what this would look like so though instead use a formatted string
15:16 - We can say message is equal to and we're just going to write it exactly how it appears
15:22 - Except everywhere where we want to
15:24 - Replace with a variable we're going to put in a placeholder and those placeholders are going to be these curly brackets
15:30 - so we want a placeholder for the greeting and then a comma a space and a placeholder for the name [and] a period and then
15:39 - [we'll] type out welcome and an exclamation point and now to fill those placeholders with our variables
15:45 - We can say dot
15:47 - format
15:47 - And pass in greeting for the first placeholder and [then] name for the second place holder
15:54 - So now let's go ahead and delete this line where we where we were using the plus sign
15:59 - Operator so if we run this we can see that
16:01 - We got the same [thing] as when we concatenate and then together but with longer more complicated strings
16:07 - This is actually a little bit easier to read it might look a little confusing now
16:11 - Since we're just seeing these placeholders for the first time but after you get used to this you will realize that this is
16:16 - Easier than keeping track [of] all those concatenations and using [stream] formatting like this also gives us some extra
16:22 - Functionality and if you want to see everything [that] you can do with that and I do have a detailed in-depth video on string
16:28 - Formatting and I'll add that to the description section below
16:31 - Ok and lastly if you're using python
16:34 - 3.6 or above then you'll have access to these new things called f strings now if you aren't using
16:41 - [3.6] or higher then these aren't going to work because they were only
16:44 - Recently released and not a lot of people are using these f strings yet
16:48 - But I'm really liking them so far
16:51 - Basically the idea behind f strings was to make string formatting as simple as possible
16:56 - So let's go ahead and see what these look like so to say that [we] want this to [be] an f string
17:01 - We can just add an f right here to the beginning on the outside of the string
17:06 - now instead of using this dot format method well instead just write the variables directly within the
17:12 - placeholders so [I] can remove that dot format method and now we can pass the
17:18 - variables directly within the placeholder
17:20 - So we'll pass
17:21 - Greeting to that
17:22 - Placeholder and name to that one so I can save that and run it and you can see that using that we got the same
17:27 - Result [and] like I said these f strings are pretty new to the language so even people who are very familiar with python
17:34 - May be seeing this for the first time now one reason
17:37 - I really like these f strings is because you can actually write code within the placeholder
17:42 - So if I wanted the name and all caps for some reason then I could just come [into] the placeholder [here]
17:48 - And say name dot upper and run that directly within the placeholder if I run that
17:53 - Then you can see that now our name was capitalized, okay?
17:57 - So we're almost finished up
17:58 - But I wanted to show you one last trick here when you're learning something new in python
18:03 - So [we] saw a lot [of] different methods that we could use on our strings now if we ever wanted to see everything
18:08 - That's available to us then there are a couple of things that we can do so first we can use this
18:14 - dir function and that looks like this and
18:18 - what this does is if we pass in A
18:21 - Variable then it will show us all of the attributes and methods that we have access [to] with [that] variable now
18:28 - Don't worry about all of these double underscore methods yet, but if we look down here
18:33 - Then we'll see a couple of familiar methods that we used in this video
18:38 - [so] for example we have dot upper here we have
18:42 - not replace
18:44 - dot lower
18:45 - So this kind of gives you a broad overview of all the attributes and methods that are [available] to you now
18:51 - This doesn't show what any of these actually do so to see more information about these string methods
18:57 - Then we can use the help function
18:59 - But if we run this help function on the name then that won't work we actually need to run it on the string class
19:08 - Itself so we'll just type in help and then
19:11 - Str for string and if I run that and we can see that this gives us a lot more [information]
19:17 - And I'll pull this up here a bit
19:19 - so it
19:20 - You know tells us everything that's available to us, and if I scroll down here [a] bit
19:25 - And if I try to find something that we actually used in this video okay, so we have fine here
19:30 - So you can see that actually gives us a description of what these methods do and what arguments they take
19:36 - Now if you know that you had a certain method available to you
19:40 - But you couldn't remember exactly what it does then you can actually pass it directly in to help also, so if I wanted to
19:48 - Find out some more information about the lower method then we could say string dot
19:54 - Lower and if we run that and we can see that it gives us information and the description just of what lower does
20:01 - so using that dir function
20:03 - and that help function is a great way to get a broad overview of the methods and attributes that [are] available to you and
20:09 - Also, what using the help function gives you an idea of what those?
20:14 - Methods do without actually you know going online and checking everything there, okay?
20:19 - So I think that is going to do it for this video
20:20 - I hope that now you feel comfortable with
20:23 - Working with strings and are familiar [with] some of the useful things that we can do with those in the next video
20:27 - We're learning how to work with numbers in python and specifically integers and floats
20:33 - But if anyone has any [questions] about what we covered in this video
20:35 - Then feel free to ask in the comment section below and I'll do my [best] to answer those if you enjoy these tutorials and would
20:41 - Like to support them then there are several ways [you] can do that
20:43 - The easiest ways to simply like the video and give it a thumbs up and also
20:47 - it's a huge help to share these videos with
20:48 - Anyone you think would find them useful and if you have the means you can contribute through patreon
20:52 - And there's a link to that page in the description section below be sure to subscribe for future videos and thank you all for watching
21:10 - you