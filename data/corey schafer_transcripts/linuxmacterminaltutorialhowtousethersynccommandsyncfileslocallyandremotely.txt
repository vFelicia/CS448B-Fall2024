00:00 - hey everybody how's it going in this
00:01 - video we're going to be learning how to
00:02 - use the rsync command now the rsync
00:05 - command allows you to transfer and sync
00:07 - files efficiently across different
00:08 - directories and machines so if you ever
00:10 - want to set up a backup for your files
00:13 - or sync files across different machines
00:15 - then rsync would be a great way to do
00:16 - this so it's a lot more efficient than
00:18 - just copying files because rsync only
00:21 - copies what's different so for example
00:23 - if you're backing up thousands of
00:25 - pictures then copying all of these every
00:27 - time would be way too inefficient so if
00:29 - you did this with rsync then it would
00:31 - only need to sync what's different since
00:33 - the last backup and also if you were
00:35 - copying data and lost a network
00:36 - connection or something like that then
00:38 - when you reran the rsync command it
00:40 - would know where it left off and
00:42 - wouldn't have to start from scratch so
00:44 - this is an extremely beneficial command
00:46 - to know how to use properly so let's go
00:48 - ahead and get started and look at some
00:49 - examples now rsync might already be
00:52 - installed on your machine if you're on a
00:54 - mac then it should already be available
00:56 - to you and if you're on a debian based
00:58 - linux machine and don't have rsync
01:00 - installed then you can install that with
01:03 - apt get install
01:05 - and
01:06 - install rsync and if you are on an rpm
01:09 - based linux machine then you can install
01:11 - this with yum install rsync okay so when
01:15 - you have rsync installed and ready to go
01:18 - let's go ahead and look at a very simple
01:20 - example so i have two directories that i
01:23 - created here on my desktop and this top
01:26 - directory here is called original and
01:28 - the one below is called backup now the
01:31 - original has some images of my dog and
01:34 - the backup is currently empty so let's
01:36 - run an rsync command to sync these two
01:39 - directories and copy the images from the
01:41 - original to the backup folder so in the
01:44 - terminal i'm just going to navigate to
01:46 - where these directories are located and
01:47 - that is on my desktop and now to use the
01:51 - rsync command i'll just type in rsync
01:53 - and here we could add some options for
01:55 - rsync and we'll look at that in just a
01:57 - minute but for now we're not going to
01:58 - give any options so now we just want to
02:02 - put the source directory that we want to
02:04 - sync so in this case we want to sync the
02:06 - files in the original directory and
02:09 - since we're not using any options we
02:11 - actually have to specify the files and
02:13 - not just a directory so we can say
02:16 - original and then a star to sync all of
02:19 - the files and now we want the
02:21 - destination so in our case this is going
02:23 - to be the backup directory so if we run
02:26 - that
02:26 - then we can see that it synced all of
02:28 - the files from our original directory
02:30 - here into our backup directory now
02:33 - there's no harm in running this again so
02:35 - it won't do anything since there's no
02:37 - files different or any files that need
02:39 - to be resynced so you can just rerun
02:41 - this again at no harm so we can see that
02:44 - i ran that again and it didn't recopy
02:46 - the files or anything like that now the
02:48 - way this is running right now it won't
02:50 - actually copy directories and that is
02:52 - why we needed to add the asterisk to
02:54 - specify that we wanted all of the files
02:56 - within the original but a more common
02:58 - usage for rsync is to sync everything in
03:00 - a directory so for example if we were to
03:03 - create a subdirectory within original so
03:06 - i will just say
03:08 - makeder
03:09 - original and we will create a new
03:11 - directory called morepix and now if we
03:14 - reran our previous rsync command then we
03:17 - can see in our output here that it said
03:19 - skipping directory
03:21 - of more pix the one that we just created
03:24 - and when we look in our directories we
03:25 - can see that that was created in the
03:27 - original here but in the backup it was
03:31 - not copied over so if we want to sync
03:33 - the entire directory then we can use the
03:35 - dash r option to say that we want to
03:38 - recurse into directories and copy the
03:40 - total contents of the directory and
03:42 - subdirectories so if we just rerun this
03:46 - and we give rsync a dash r option now we
03:49 - no no longer need this uh asterisk here
03:52 - so if we run this then if we come over
03:55 - here to our directories then we can see
03:57 - that we have our more picks subdirectory
03:59 - within the original and also that was
04:01 - copied over to our backup so that worked
04:04 - as planned now when you do it this way
04:06 - notice that i have the trailing slash
04:08 - here after the original directory now
04:11 - that's actually important so that means
04:14 - that we want to sync the contents of the
04:16 - original directory if we leave it off
04:19 - then it will sync the directory itself
04:22 - so really just let me show you the
04:24 - difference here so i will sync only the
04:26 - directory and i'll leave that trailing
04:28 - slash off and now if i run this then
04:31 - without that trailing slash if we look
04:33 - in our backup directory here then we can
04:35 - see that instead of just syncing the
04:38 - contents of the original directory it
04:40 - actually synced the original directory
04:42 - itself so if we go in here then all of
04:45 - the contents and the subdirectories are
04:47 - still here but it actually placed that
04:50 - folder within uh the backup directory
04:53 - here and these are just left over from
04:56 - the last sync so if i to illustrate this
04:59 - a little further let me delete
05:01 - everything and then rerun that same
05:03 - command again and now we can see that it
05:06 - just copied that original folder over so
05:09 - if you want to sync the actual directory
05:11 - then you can leave that trailing slash
05:12 - off but most of the time my intention is
05:15 - to sync the contents of these
05:17 - directories so you want that trailing
05:19 - slash and when you include that and run
05:21 - it then you can see that it copies
05:23 - everything and syncs everything as it
05:24 - should and i'll go ahead and delete that
05:26 - original directory okay so this dash r
05:29 - option is great for getting all of the
05:31 - contents but i'd say a more common
05:33 - option for doing this is the dash a
05:36 - option so the dash a option is actually
05:38 - a combination of many different options
05:41 - so it stands for archive and not only
05:44 - does it recurse into directories but it
05:46 - also copies sim links preserves the
05:48 - permission
05:50 - modification times groups owners and
05:53 - things like that so i like to use the
05:55 - dash a option most of the time to copy
05:58 - everything okay so now let's look at a
06:00 - few more useful options and i'm going to
06:02 - delete the contents in this backup
06:04 - directory again
06:06 - now if you are about to run a large
06:09 - rsync job that syncs a lot of files and
06:11 - folders then you probably want to do a
06:13 - check on what files and folders are
06:15 - going to be synced so that you can make
06:17 - sure that it's what you expect because
06:19 - checking what's going to be synced
06:20 - before you actually run the command is a
06:22 - lot better than realizing afterward that
06:24 - you spent a lot of time moving gigabytes
06:26 - of data to the wrong place so to check
06:29 - what files are going to be synced
06:30 - without actually syncing the files we
06:32 - can use the dry run option so we can
06:35 - specify that we want to perform the dry
06:37 - run option with dash dash dry run or we
06:41 - can use dash in for short so just to be
06:44 - more clear for the video i'll write out
06:46 - the longer option there so let's say
06:48 - that we wanted to do a dry run of
06:50 - syncing our original folder contents
06:52 - with our backup directory so to do that
06:55 - we could say rsync and then instead of
06:58 - the dash r i said that i like to use the
07:00 - dash a for archive that includes
07:02 - those permissions and everything like
07:04 - that and now to do a dry run we can do
07:07 - dash dash
07:08 - dry run so now if we run this then we
07:11 - can see that it doesn't actually show us
07:12 - anything and if we look in the backup
07:14 - directory then we can see that it didn't
07:16 - actually sync those files or directories
07:19 - so it did do a dry run but the point of
07:21 - this is for us to know what files are
07:23 - going to be synced so that we can make
07:25 - sure that it looks correct so to display
07:27 - this we need to pair dry run with the
07:30 - verbose output and to get the verbose
07:33 - output we can include the dash v option
07:35 - so let's add the dash v option to our
07:40 - last
07:41 - run here and i'll just include that
07:43 - after the a so now we can see that it
07:45 - displays the files that it would have
07:46 - copied to the backup directory but since
07:48 - we had that dry run option as well it
07:50 - didn't actually make those changes so
07:52 - this allows us to make sure that
07:54 - everything looks correct and if it does
07:56 - look good then you can run the same
07:58 - command without the dry run included so
08:01 - now if we take the dry run
08:05 - away and run that then we can see that
08:07 - with that verbose option it told us
08:09 - exactly what it did and without the dry
08:12 - run it actually did perform that action
08:14 - of syncing those files and
08:15 - subdirectories okay so just to show you
08:17 - why rsync is so much more beneficial
08:19 - than just copying files over let me
08:21 - delete a couple of these files here from
08:23 - my backup directory so i'll just delete
08:25 - two pictures here and now if we rerun
08:28 - that command with the
08:29 - dry run option from earlier and run that
08:32 - then we can see that it knows that it
08:35 - only needs to copy these two files and
08:38 - not any of the others and these two
08:40 - files that it says that it will copy
08:41 - over are the ones that we just deleted
08:44 - so you can imagine that this would save
08:46 - an incredible amount of time if you had
08:48 - a lot of files or a lot of images say
08:50 - you had thousands of pictures then
08:52 - copying all of those every time you want
08:54 - to do a backup would be extremely uh you
08:56 - know inefficient and almost impossible
08:59 - to do and the rsync command makes this a
09:01 - lot easier okay so what happens if our
09:03 - backup directory contains some files
09:06 - that our original directory doesn't have
09:08 - so for example let me add a simple file
09:11 - to our backup directory so i'll just do
09:13 - a touch and backup and i'll just create
09:17 - a
09:17 - file here called test.txt and if i
09:20 - create that we can see that it was
09:22 - created in our backup folder so now our
09:25 - backup directory contains this
09:27 - test.txt file but our original directory
09:30 - does not so let's run another dry run
09:33 - and see if this matters at all so we can
09:36 - see that it still wants to sync those
09:38 - two files that we deleted from earlier
09:40 - but other than that it doesn't seem to
09:41 - care that there are more files in the
09:43 - destination now it's just going to move
09:46 - over the files that exist in the
09:48 - original directory now if we want our
09:50 - destination to mirror our source and get
09:52 - rid of any files that don't exist from
09:54 - our source directory then we can add the
09:57 - dash dash delete option to do this so we
10:00 - could say before our dry run here i'm
10:03 - going to add a dash dash delete and i'm
10:06 - going to make my screen a little larger
10:09 - here so that that all
10:10 - fits so now if we rerun this with the
10:13 - dry run then we can see that it still
10:15 - wants to sync the two files that exist
10:17 - in the source directory but it also says
10:19 - that it wants to delete test.txt now it
10:22 - also says that it wants to delete this
10:25 - dot ds store don't worry about that
10:26 - that's just a hidden mac file that gets
10:29 - created sometimes but apparently that is
10:31 - another file that exists in the backup
10:32 - directory that does not exist in the
10:35 - original directory now you have to be
10:36 - really careful with this because there
10:38 - are some horror stories online where
10:40 - people have accidentally set this delete
10:42 - flag on an empty directory which
10:44 - resulted in their entire backup folder
10:46 - being wiped out because if their source
10:49 - directory is empty and you say that you
10:51 - want to delete everything in your backup
10:53 - that doesn't exist in the source
10:55 - directory then that would be everything
10:57 - so you do want to be extremely careful
11:00 - with that and i don't use it a whole lot
11:02 - now i could see this being useful if you
11:04 - had a website or something that you
11:06 - wanted to keep your local and remote
11:08 - files synced perfectly together so for
11:10 - example if you deleted an html page on
11:13 - your local machine and then ran rsync
11:15 - then you would also want that to be
11:17 - removed from the remote machine so you
11:19 - definitely have that option but again
11:21 - just be careful when using that option
11:23 - okay so now let's actually see what it
11:25 - looks like to sync files between a local
11:27 - and a remote machine now i have a test
11:29 - machine that i have ssh access to and i
11:32 - have its ip address now if you'd like to
11:34 - have some test machines that you have
11:35 - ssh access to so that you can follow
11:38 - along then i do have a video on how i
11:40 - set mine up and i'll put a link to that
11:42 - video in the description section below
11:43 - so i have a test website in my projects
11:46 - folder with some html css and javascript
11:50 - files so if i
11:51 - cd back to my home folder and do an ls
11:55 - on this my site directory then you can
11:58 - see that we just have an html file a css
12:01 - file and a javascript file so let's say
12:03 - that i want to push these out to a web
12:05 - server and we'll pretend that my web
12:07 - server is the virtual machine that i'm
12:09 - currently running
12:10 - now if you're transferring data to a
12:12 - machine over the network then rsync does
12:14 - have the option to compress data while
12:16 - transferring and to do that we can use
12:18 - the dash z option and also a useful
12:21 - option for transferring over the network
12:23 - is the dash capital p which will show
12:26 - the progress so to sync this project i
12:29 - can say rsync
12:31 - and then dash z to compress a for
12:34 - archive that we saw earlier capital p to
12:37 - show the progress and then we want to
12:40 - set the projects and my site as our
12:44 - source now remember what i said earlier
12:46 - about that trailing slash now in this
12:49 - case i actually want to transfer the
12:50 - entire directory and not just the
12:52 - contents so i'll leave that trailing
12:54 - slash off for now and now we can put our
12:57 - destination and the destination is going
12:59 - to be our remote machine so first i'm
13:02 - going to put my username and i'm going
13:04 - to make this a little larger here so
13:06 - that we can fit all of this in so this
13:08 - is going to be almost like ssh into the
13:10 - machine so our username at and then the
13:12 - ip address the ip address for my test
13:14 - machine here is 192.168.56.100.
13:20 - and then we want a colon to specify the
13:23 - location and i'm going to put this in
13:26 - the home directory and inside this
13:29 - public folder and then i'm going to put
13:30 - a trailing slash there now i do have key
13:33 - based authentication set up for my test
13:35 - machine there so it didn't ask me for a
13:37 - password now if you don't have that set
13:39 - up then it might ask you for a password
13:41 - to fill in and then after you insert
13:43 - that then you should see output similar
13:45 - to this here so we can see that it shows
13:47 - us what it sent over and what the
13:49 - progress was
13:50 - so now let's ssh into that machine and
13:53 - make sure that everything got there so
13:55 - i'll just say ssh and the username then
13:58 - the address is
14:00 - 192.168.56 dot
14:02 - now let me navigate to the directory
14:05 - where i synced those files and there was
14:08 - not a folder in here before and now we
14:10 - can see that it exists and if i cd into
14:14 - that directory and list all of the files
14:16 - and we can see that the files were
14:18 - synced between our local machine and
14:20 - this remote machine and again this is
14:22 - better than just copying the files
14:23 - because it'll only sync the differences
14:26 - now we can do this in reverse also so
14:28 - let's say that we had a cron job on this
14:31 - test web server here that created a
14:33 - database backup or something like that
14:36 - so let me create a directory within our
14:38 - website and i'm just going to call this
14:40 - backups so i'll do a make dir and call
14:43 - this backups let me clear my screen here
14:46 - so i created that backups directory and
14:48 - now within that backup directory i'm
14:50 - just going to create a test file called
14:53 - backup.sql and we can just pretend that
14:56 - this is a sql dump into a backup file so
15:00 - now that that file exists on our remote
15:02 - machine i'm going to exit out of that
15:05 - machine and now we're back on my local
15:07 - machine so now let's say that we want to
15:09 - sync that backup from our web server to
15:12 - our local machine so we can just use the
15:15 - servers folder for our source and say so
15:18 - i'll just do an rsync and i'll do those
15:20 - same options the z is for compression a
15:23 - for archive capital p to show the
15:25 - progress and then core ems at 192.168.56
15:31 - 100. and now we want to specify the
15:33 - location of that backups directory on
15:35 - our remote machine so we'll put in a
15:38 - colon and that was within public
15:40 - my site
15:42 - slash backups and now we'll put in a
15:44 - space and now we want our destination
15:47 - and our destination is going to be on
15:48 - our local machine and i will just put
15:50 - this within our projects
15:53 - my site directory now you can put this
15:55 - anywhere but i'm just going to leave it
15:56 - within that my site directory so if we
15:59 - run this then we can see that it looks
16:02 - like we received our backups directory
16:05 - and our backup.sql file and if we look
16:08 - in our projects directory and my site
16:12 - then we can see that it does have a
16:14 - backups directory in there and if we
16:16 - look within that directory then we can
16:18 - see that we do have that backup.sql file
16:21 - that was pulled down from my remote
16:22 - machine now a very common use case for
16:25 - rsync is to pair it with cron jobs now
16:27 - if you don't know what cron jobs are
16:29 - they're a way to schedule commands to
16:30 - run on regular intervals and i have a
16:33 - separate video on setting up cron jobs
16:35 - and i'll leave a link to that in the
16:36 - description section below
16:38 - so pairing cron jobs and rsync together
16:41 - allow us to run regular syncs and make
16:43 - sure that backups and things like that
16:45 - remain up to date so it's extremely
16:47 - useful just having that working in the
16:49 - background without really needing to
16:50 - think about it so if those are the kind
16:52 - of things that you've always done
16:53 - manually as far as you know backing up a
16:55 - lot of pictures or pulling down backups
16:57 - from web servers or managing large
16:59 - projects then you know pairing up some
17:01 - cron jobs with some rsync commands just
17:04 - makes it where you really don't have to
17:06 - worry about those things and it just
17:07 - does it all on its own automatically
17:09 - okay so i think that is going to do it
17:11 - for this video i hope that now you have
17:12 - a good understanding of how rsync works
17:14 - and you have some ideas for how you can
17:16 - use this within your workflow but if
17:18 - anyone does have any questions about
17:19 - what we covered in this video then feel
17:21 - free to ask in the comments section
17:22 - below and i'll do my best to answer
17:23 - those now if you enjoy these tutorials
17:25 - and would like to support them then
17:26 - there are several ways you can do that
17:28 - the easiest way is to simply like the
17:29 - video and give it a thumbs up and also
17:31 - it's a huge help to share these videos
17:32 - with anyone who you think would find
17:34 - them useful and if you have the means
17:35 - you can contribute through patreon and
17:37 - there's a link to that page in the
17:38 - description section below be sure to
17:40 - subscribe for future videos and thank
17:41 - you all for watching
17:54 - you