00:00 - hey there how's it going everybody in
00:01 - this video we'll be restructuring our
00:02 - application a bit and learning how to
00:04 - use flash blueprints now we will also
00:06 - move our configuration variables into
00:08 - their own file and move the creation of
00:10 - our application into its own function
00:12 - now the benefits of doing all this will
00:14 - be that we can take our current
00:15 - application which currently has a lot of
00:17 - functionality and a few files and split
00:20 - that up to be more modular now also
00:22 - moving the creation of our application
00:24 - to a function will allow us to create
00:27 - different instances of our application
00:29 - which is extremely useful if we want to
00:31 - have one application for testing and one
00:33 - application for production and that is
00:36 - called an application Factory so let's
00:38 - go ahead and get started and see how we
00:40 - can do this so first of all let's break
00:42 - our application up into blueprints now
00:44 - this is going to allow us to split up
00:45 - the different functionality of our
00:47 - application and to their own sections so
00:49 - for example in our routes module right
00:51 - now if I scroll down through here you
00:54 - can see that we have a lot of different
00:56 - routes all in this one file so this is
00:59 - getting pretty large and also some of
01:01 - these routes aren't really related to
01:03 - each other so for example if we wanted
01:05 - to update our post route then we'd have
01:07 - to sift through a lot of different user
01:09 - routes in order to find what we're
01:11 - looking for and it may not be a big deal
01:13 - for a smaller application like we have
01:15 - here but as your applications grow
01:17 - you're not going to want to maintain a
01:20 - single massive
01:21 - routes file or hundreds of forms in a
01:23 - single file and blueprints are going to
01:26 - be what allows us to separate these out
01:28 - so let's go ahead and see how we can do
01:31 - this now to create a blueprint we're
01:33 - going to want to create a new package in
01:35 - our application that is named after the
01:37 - functionality that it will contain so
01:39 - let's say that I want to make a
01:40 - blueprint for my users and author an
01:43 - authentication functionality so we can
01:45 - create a directory within our
01:47 - application and we'll call this users so
01:49 - within our current application package
01:51 - which is now called flask blog I'm going
01:54 - to create a new directory here and I'm
01:56 - going to call that directory users and
01:59 - we're going to want to do the same thing
02:01 - with posts as well so I'm going to go
02:02 - ahead and create a directory for post as
02:05 - well so call that post and we're also
02:08 - going to have some routes and
02:09 - functionality that don't really belong
02:10 - to either users or posts so for example
02:13 - our home
02:14 - or our about page so let's also create a
02:16 - blueprint for those and we'll just call
02:18 - those main so I'll create another
02:20 - directory here within our current
02:22 - application package and I will call this
02:24 - main and we also want all of those
02:26 - directories that we just created to be
02:28 - packages as well so if you remember in
02:30 - order to tell Python that those are
02:32 - packages we just need to create a double
02:34 - underscore and knit dot pi file within
02:37 - those directories and it doesn't even
02:39 - have to contain anything it can be an
02:40 - empty file and Python will still know
02:43 - that that is a package so I'll create a
02:45 - double underscore a knit PI file in the
02:48 - users posts and main directories that we
02:51 - just created so I will do that now
02:53 - so within main double underscore and
02:56 - knit double underscore dot PI and we
02:59 - will create this under post as well
03:03 - so within post we'll create a double
03:05 - underscore Annette dot PI file and
03:06 - within users we will create that as well
03:10 - now I know that it might be hard to see
03:12 - my directory structure that we're
03:13 - creating here in the sidebar I can't
03:15 - really find a way to make that larger
03:17 - but I will display a larger tree
03:19 - structure in the terminal at the end of
03:21 - this video so you can see what this
03:23 - entire directory structure looks like ok
03:25 - so I'm going to leave these Annette dot
03:27 - pi files that we just created empty so
03:29 - I'm going to close those down and now
03:31 - within each of our packages that we just
03:33 - created we're also going to make a route
03:35 - stop py file that will only contain the
03:38 - routes that have anything to do with
03:39 - that functionality so for example the
03:41 - route stop PI file that we create in our
03:43 - users package will only contain routes
03:45 - for our users and authentication so
03:48 - let's create those so within main here
03:51 - I'll create a file called routes dot py
03:54 - and I will also create this in posts and
03:59 - I will also create this in users and let
04:03 - me expand these directories here so that
04:05 - we can see what files we have in here so
04:07 - far now in our users and our post
04:09 - packages we're also going to want to
04:11 - create a form spy file so that we can
04:13 - have our forms separate as well so I'm
04:16 - going to create those so within posts
04:18 - I'm going to create a forms PI file and
04:21 - within users I'm also going to create a
04:24 - form PI file and all of these are empty
04:26 - for now and we're
04:27 - to fill these in in just a little bit so
04:29 - I'm going to close down these empty
04:31 - files now we also have some functions
04:33 - that we use within our routes I'd like
04:35 - to split out as well
04:36 - so for example if I go down we have safe
04:38 - picture functionality here and also we
04:41 - have a function that sends the reset
04:43 - password email and things like that so
04:45 - those funked functions are all specific
04:47 - to the user's package so let's put them
04:49 - all in their own file also and we'll
04:52 - call that file utils dot pi so within
04:55 - our users package here I'm going to
04:57 - create a new file and we'll call this
04:58 - utils dot pi ok so that'll do it for the
05:01 - files that we are creating for now but
05:03 - now let's actually create a blueprint so
05:06 - let's open our routes top py file within
05:09 - our users package and we'll start there
05:11 - so within our users package I'm going to
05:13 - open up Ralph stop py and now let's
05:16 - create our users blueprint so first of
05:18 - all within here we need to import the
05:20 - blueprint class from flask so I'll say
05:22 - from flask import blueprint and now
05:26 - let's create an instance of this
05:28 - blueprint and it's similar to creating a
05:30 - flask instance
05:31 - so we'll say users is equal to blueprint
05:35 - and then we'll pass in the name of this
05:37 - blueprint so we'll call this users and
05:39 - now we also need to pass in double
05:41 - underscore name so if I open up the init
05:44 - dot PI file of our current application
05:47 - you can see that that's almost like
05:48 - making an instance of a flask object
05:51 - where but instead of only passing in
05:53 - name we're also passing in the name of
05:55 - our blueprint as well ok so now we can
05:57 - start adding our routes but we're no
06:00 - longer going to be using our global app
06:02 - variable to create the routes like we
06:04 - did before instead we're going to create
06:06 - routes specifically for this users
06:08 - blueprint and then register these with
06:10 - our application at a later time so let
06:13 - me show you what I mean so let's grab
06:15 - some routes from our applications
06:16 - existing routes PI file and move them
06:19 - into here so I'm gonna go into our
06:21 - existing routes top PI file and let's
06:23 - grab everything that has to do with
06:25 - users so we'll skip the home and about
06:27 - routes so we want the register route and
06:30 - the login round and logout and we'll
06:34 - stop at save picture so we'll cut those
06:37 - out and paste those in to our use
06:41 - routes here and now will keep going
06:44 - so for safe picture we can put that into
06:47 - our user utils that we've created so I'm
06:49 - going to open up that utils pie file and
06:51 - I may as well add those in as we're
06:53 - going to so I will cut out our save
06:56 - picture function and paste that in to
06:59 - this utils file so now let's keep going
07:02 - so we have a count so we want to move
07:04 - that into our user routes post new
07:07 - that's going to go into our post routes
07:10 - so we don't want that so I will paste in
07:13 - our account route here and let's go back
07:15 - and see if we have any more so we'll
07:18 - leave the post there that's another post
07:20 - route another post route another post
07:22 - route okay here we have a user route for
07:25 - a users post page so we will grab that
07:28 - and cut that out and paste it in to our
07:31 - user routes now we have a send resent or
07:35 - send reset email and this function can
07:38 - go into our utils file so we will cut
07:40 - that out so you can see how we're kind
07:42 - of splitting everything up here so that
07:44 - we don't have this one monolithic file
07:46 - that's the point of this video okay so
07:49 - now our last two routes here we can put
07:52 - these and our users are out as well for
07:54 - resetting passwords and resetting the
07:56 - password tokens so I will cut those and
07:59 - paste those in to the bottom of our user
08:03 - routes okay so now we have all of those
08:05 - user routes and functions moved into our
08:07 - users package and we'll fix all of these
08:10 - imports in just a bit because those will
08:12 - need to be moved around as well but for
08:14 - now in our user routes let me scroll
08:16 - back up to the top here now I said that
08:19 - we weren't going to use this global app
08:21 - variable here to create our routes
08:24 - anymore but instead we're going to
08:26 - create routes specifically for this
08:27 - users blueprint and then register these
08:30 - with our application later so to do this
08:32 - instead of using app dot route right
08:35 - here we're instead going to set this to
08:37 - be equal to users dot route which is
08:39 - this blueprint here and users is
08:43 - whatever that variable name is that you
08:45 - used for your blueprint so now you can
08:47 - do a find and replace in your editor
08:49 - within sublime text I'm going to use
08:51 - this multi cursor to select all of
08:54 - so I'll grab all of these app dot routes
08:56 - and I'm gonna change them all to users
08:59 - dot routes and scroll back up to the top
09:01 - okay so now we're gonna have to go
09:03 - through this same process with our post
09:05 - package so let's open up our post routes
09:09 - dot py file and it's empty for now now
09:12 - from our users I'm going to grab just
09:14 - these first couple of lines here and
09:16 - paste this in to our post route py file
09:19 - but instead of calling this users I'm
09:22 - gonna change this over to posts and the
09:24 - name of our blueprint i will also set as
09:26 - posts and now just like we did with our
09:29 - user routes let's also go back to our
09:31 - old route spy file and let's grab all of
09:35 - the routes that have to do with our post
09:37 - and move them in to that post package so
09:40 - I will grab this post route here and
09:44 - I'll keep grabbing these as long as they
09:46 - have to do with a post and we're already
09:48 - down to the bottom here so I will cut
09:50 - out all of those and now in our original
09:53 - routes top pie file were just left with
09:55 - our home route and our about route but I
09:57 - will paste our post routes into our post
10:01 - blueprint here and now again instead of
10:04 - using this app dot route decorator we're
10:06 - instead going to change this so I'm
10:08 - gonna highlight all of these and we want
10:10 - this to be equal to the name of our
10:12 - blueprint dot route so this will be post
10:14 - dot route so once we change all of those
10:18 - then we can scroll back up to the top
10:20 - here and that looks good and now let's
10:22 - do all of this again for the main
10:23 - package that we've created so I will
10:25 - again copy these top couple of lines
10:27 - here where we're importing the blueprint
10:29 - and creating our blueprint and I'm going
10:31 - to open up the routes that py file in
10:33 - the main package that we created and I
10:35 - will paste that in and I will change
10:38 - this over from being post to being main
10:42 - ok and now let's move the routes from
10:44 - our existing routes top py file over
10:47 - into main and we only have two less we
10:49 - only have our home page and our about
10:51 - page so I will cut those out and paste
10:55 - these in to our main routes PI file and
10:59 - now again I'm going to change these over
11:02 - from being at
11:03 - app dot route to being Maine dot route
11:08 - okay so now we are finished splitting up
11:11 - our routes and if we go back to our old
11:13 - routes file we're only left with the
11:14 - imports and we will clean up the imports
11:17 - later in this video but for now we're
11:19 - going to need to go through this process
11:20 - again with our forms now I know that
11:23 - this can seem a bit tedious moving this
11:25 - stuff around but it really is a good
11:27 - habit to learn how to break up these
11:29 - larger applications into smaller
11:31 - cohesive sections and we'll see how easy
11:34 - it is to add a new section in the next
11:36 - video when we add custom air pages okay
11:39 - so I'm going to open up our blueprint
11:42 - forms file for our users and currently
11:45 - this is empty and we're going to move
11:47 - all of the forms that are specific to
11:49 - users and authentication from our old
11:51 - forms into this directory so if I open
11:55 - up our old forms file then we're going
11:57 - to want to grab all of our forms that
11:59 - have to do with our users or
12:00 - authentication so I'll grab the
12:02 - registration form and the login form
12:04 - update account info I'll take that too
12:07 - I'll stop at the post form so I'll cut
12:10 - out what we have so far and paste this
12:13 - in to our user forms file and now go
12:17 - back to our forms and see if we have
12:19 - anything else so yeah we have our reset
12:22 - or request reset form and our reset
12:24 - password form so almost all these are
12:27 - user forms here so I will paste those in
12:31 - and now let's also do the same thing for
12:33 - our posts so I will go to our post
12:36 - package and open up our forms py file
12:38 - which is empty right now and then open
12:41 - up our old form stop pie file and now we
12:44 - only have this one form that we are
12:46 - going to paste into the post forms file
12:51 - and I'll give this a little bit room at
12:53 - the top for whenever we add some imports
12:55 - okay okay so now let's fix these imports
12:58 - now the way that I like to do this is to
13:00 - use my editor to tell me what imports
13:02 - are missing or are unused the way that I
13:05 - have sublime text set up it will give me
13:07 - a notice if an import isn't used in a
13:10 - module or if one is missing now if you
13:12 - don't have an editor that does this then
13:14 - you'll just have to go through and find
13:16 - what you need to add
13:17 - but I usually just go through my new
13:19 - modules and import whatever is missing
13:21 - and also take away whatever I don't need
13:23 - now I went ahead and wrote these down
13:26 - and some snippets beforehand so that you
13:28 - don't have to watch me slowly go through
13:30 - and add and remove all these one by one
13:33 - now if you don't feel like pausing the
13:35 - video and copying these imports down and
13:37 - each file then remember I do have these
13:39 - code snippets available in the
13:41 - description section below as well so I'm
13:44 - going to pull up those snippets and then
13:46 - put these into their relative files so I
13:49 - can see here that these imports belong
13:52 - to the main route stop py file so I will
13:56 - put those in there so in our main route
14:00 - stop py file here at the top I will add
14:04 - these in and actually in my snippets I'm
14:06 - including the blueprint import as well
14:08 - so we can actually get rid of that
14:10 - single line because we're importing the
14:12 - blueprint here at the end okay so let me
14:14 - grab the rest of these so in our post
14:17 - forms dot py file these are going to be
14:20 - our imports so I will open up our post
14:23 - forms and paste in those imports there
14:26 - and now in our post route snap py file
14:30 - these are going to be the imports so I
14:33 - will pull up our post routes top py file
14:37 - and replace that top import with our new
14:40 - ones here and let's just keep going
14:42 - there's only a couple more here so in
14:44 - our user forum step py file I will put
14:48 - these into our user packages form dot py
14:53 - file so at the top here I will add those
14:57 - in and in our user routes dot py file
15:02 - these are our cleaned-up imports for
15:04 - that so user routes paste in those
15:10 - imports and then lastly we have our user
15:15 - utils imports so I will copy those and
15:19 - open up our user utils and paste those
15:23 - in and I'm gonna do a save all to make
15:26 - sure that I've saved all of those files
15:27 - that we just edited now I've got to be
15:30 - honest fixing
15:31 - imports like that is probably the
15:33 - biggest pain in terms of moving over
15:35 - into blueprints but once you have it
15:37 - done it really is nice or having
15:39 - everything split up into their own
15:41 - cohesive sections now some of those
15:43 - imports actually changed as well so it's
15:45 - not exactly as simple as just moving
15:48 - them around to the correct place
15:49 - sometimes you actually have to change
15:51 - where they came from so for example let
15:53 - me show you if I open up our user routes
15:56 - dot py file here so in our users
15:58 - blueprint these are our routes and you
16:01 - can see here now that whenever I'm
16:02 - importing our user forms instead of
16:05 - importing from flask blog dot forms like
16:08 - we did before now we are using flash
16:10 - blog dot users dot forms because now we
16:13 - are in our flask blog package and our
16:16 - users package within that flash blog
16:18 - package and then our form stop py file
16:20 - and you can also see here that instead
16:22 - of our safe picture and send reset email
16:25 - being functions that are mixed in with
16:27 - our routes now they are actually coming
16:29 - from this utils module here so flash
16:31 - blog dot users dot utils ok so now with
16:34 - all that done we can now delete our old
16:37 - forms and routes file that we were using
16:39 - before because now we've moved
16:41 - everything out of those and into their
16:43 - own blueprints so within our main
16:47 - application package here I'm going to
16:50 - get rid of our previous forms file and
16:55 - delete that and our previous routes file
16:59 - so I'll delete that ok so now let's open
17:01 - our flash blog packages and knit dot PI
17:04 - file where we were importing those
17:06 - routes before so if I open this up and
17:09 - up here in the top I'm just going to
17:11 - close down these old files that we just
17:13 - deleted because they are still open
17:15 - there okay so in our applications a knit
17:18 - PI file we can see that at the bottom we
17:21 - are importing our routes but we just
17:24 - deleted that file so now how do we get
17:26 - our routes that we just added to our
17:28 - blueprints to work so to do this we're
17:30 - going to import those blueprint objects
17:32 - from each of those packages and register
17:35 - them with our route so to do this we can
17:38 - replace our old routes import here since
17:40 - we're no longer using that and we can
17:42 - say from flask blog and
17:45 - let's first do our users so we'll do
17:47 - users dot routes and from that routes
17:51 - top py file we're going to import users
17:53 - now this users here this is the name of
17:56 - the variable in our users route that is
17:58 - the instance of our blueprint class so
18:00 - if I switch over to our user route we
18:03 - can see here that this is what we are
18:05 - importing this blueprint instance here
18:07 - so it switched back to our Annette PI
18:09 - and now we can register that blueprint
18:12 - by saying app dot register underscore
18:16 - blueprint and then pass in that
18:18 - blueprint that we imported so now we can
18:21 - do this with our posts and our main
18:23 - blueprints as well so I'm going to copy
18:25 - this line here and paste this in twice
18:28 - and we want to import from flash blog
18:32 - dot post routes import the post
18:36 - blueprint and from flash blog main dot
18:39 - routes
18:40 - import the main blueprint and now let's
18:43 - register both of those as well so down
18:45 - here where we are registering this
18:46 - blueprints I will register the post and
18:50 - I will register the main ok so we have
18:53 - one more thing to do here before we can
18:55 - run our application and see if this
18:57 - changed to using blueprints has worked
18:59 - and this is another step that will seem
19:01 - tedious right now but it will pay off
19:03 - with a more maintainable application
19:05 - once we're finished
19:06 - so in our application so far we have
19:08 - been using the URL for function to link
19:11 - to all of our routes and well now we
19:14 - need to change all of those to be the
19:16 - URL for the relative blueprints so it
19:20 - used to just be the function name of the
19:22 - route but now it's the blueprint name
19:24 - followed by the function name so we need
19:27 - to do a search on our whole application
19:28 - and change all of these now the editor
19:31 - that you're using should have a find
19:33 - functionality to search through all of
19:35 - the files and if you're following along
19:37 - in sublime text and have the same
19:40 - sublime setup that I have then you can
19:42 - right click on our project directory
19:45 - here and then we can copy our path and
19:48 - now I'm going to go up here to find and
19:50 - choose the option find in files and then
19:54 - in the where location I'm going to paste
19:57 - in
19:58 - the path that we just copied well it
20:00 - doesn't seem to be working for some
20:01 - reason right now but we can just add
20:04 - this location manually if we click over
20:05 - here on the side then we can click on
20:08 - add folder and then I'm going to add our
20:12 - application folder which I have called
20:14 - flash blog so I'll add that and now I'll
20:17 - do a search in our files layer here for
20:19 - URL underscore 4 so this will search our
20:22 - entire project directory for any URL for
20:25 - text and we can go in and click on this
20:28 - and it will take us to that file where
20:31 - this text is located and then we can
20:33 - change this to what it needs to be so
20:36 - for example here this one is a URL for
20:38 - our home page but this is now going to
20:40 - be our blueprint followed by the route
20:43 - function so this is going to be main dot
20:46 - home and we're gonna have to do this for
20:48 - all of these so if I go back now and
20:49 - click on our second result then we can
20:51 - see that this is aur URL for post but
20:54 - this is now going to be our post post
20:57 - blueprint followed by dot post route so
21:01 - there are a lot of these and you're
21:03 - going to need to make these changes in
21:05 - the templates too and for the sake of
21:06 - time I'm just going to go ahead and skip
21:08 - through me changing the rest of these
21:10 - and we'll pick up the video once again
21:12 - when I finish this so I'm gonna go
21:14 - through the entire project and change
21:16 - all of these URL for links right now and
21:18 - I'll pick up the video once I am done ok
21:22 - so I just went through and changed all
21:23 - of the URL for functions to our new
21:26 - values now if it wasn't clear exactly
21:28 - what I was doing there then let me say
21:30 - this again so in our new packages so we
21:33 - have our main package here with our main
21:35 - routes and our user packages with our
21:37 - user routes we want to go through and
21:39 - change all of the URL for functions to
21:43 - be equal to so for example let me bring
21:45 - up my layout dot PI file here and show
21:47 - you what I had to do in this file so all
21:49 - of these URL for functions we can see
21:51 - that we have our home route and our
21:53 - about route and those come from our main
21:55 - blueprint so we had to put main before
21:57 - those route names and down here our new
21:59 - post route that comes from our post
22:01 - blueprint so we had to put a post dot
22:03 - new route our new post and also with our
22:07 - other links here our account and logout
22:09 - and login and register pages the
22:11 - all come from our users blueprint so we
22:14 - had to do users dot and then the
22:16 - function name of that route so again
22:18 - that is tedious to do but like I said I
22:20 - have all of this code available for
22:22 - download if you'd like to download that
22:24 - and make sure that you haven't missed
22:25 - anything okay now there's one last value
22:28 - that we need to change and this one is
22:30 - easy to miss because it's not within a
22:32 - URL for function but if we look in our
22:34 - Annette dot PI module here we can see
22:38 - that we have this login manager login
22:40 - view set to this login route here now
22:44 - this is how the login manager knows
22:45 - where to redirect us when a page
22:47 - requires a login and that also needs to
22:50 - be set differently now so instead of
22:52 - just login this needs to have the
22:55 - blueprint before it so this is in the
22:57 - user's blueprint so we can say users dot
22:59 - login ok so now that we've made all
23:02 - these changes let's bring up our site
23:04 - and make sure that it still works the
23:05 - way that we expect so I will go to our
23:08 - terminal here now I'll clear the screen
23:10 - and run our development server so python
23:13 - run dot pi ok so we don't get any errors
23:16 - so that is good so now let's open up our
23:19 - application and now let's reload this
23:21 - and just kind of click around to see if
23:23 - these routes look like they're working
23:25 - ok so we're on the home page here and
23:27 - the pagination still seems to be working
23:30 - so that's good if we go to a new post
23:33 - page account page can we change our
23:36 - account picture and it looks like we can
23:41 - so that is good and just to test a
23:44 - little bit more let me also try to
23:46 - update a post here so I will change this
23:49 - my latest post to be my latest blog post
23:54 - and we can see that that updated
23:56 - successfully so it looks like our
23:57 - website functionality is working well
24:00 - now I'd like to point out at this point
24:01 - that we haven't done any unit testing on
24:04 - our application yet and I'd like to make
24:06 - a video in the near future showing how
24:07 - we can write unit tests for this
24:09 - application but it's times like these
24:11 - where unit testing is so useful because
24:13 - instead of just opening our application
24:15 - and clicking around to make sure
24:17 - everything seems to be working you could
24:18 - actually run extremely detailed tests in
24:21 - just you know less than a second to make
24:24 - sure that every bit of
24:25 - functionality and your application is
24:27 - working exactly as you expect it to so
24:29 - I'll definitely be sure to do a video in
24:31 - the near future showing how we can test
24:33 - applications like this
24:34 - and speaking of testing there are a
24:36 - couple more changes that I want to make
24:37 - to our application before we finish this
24:39 - video and these changes will have a lot
24:42 - of benefits one of which is that it will
24:44 - make our application a lot easier to
24:45 - test so I want to show how we can put
24:48 - the configuration values for this
24:49 - application into their own file and also
24:52 - how we can move the creation of our
24:54 - application into a function so that we
24:56 - can create instances of our application
24:58 - with different configurations so first
25:00 - of all let's move all of our
25:01 - configurations into a config file so
25:05 - I'll go back to our application here and
25:07 - we will create a new file within our
25:11 - main package here well not our main
25:13 - package but our flash blog package and
25:15 - we will call this config dot PI so I
25:19 - will create that and now within config
25:21 - dot pi we want to take all of the
25:23 - configuration values and put them here
25:25 - but we're actually going to make this
25:26 - class base so we need to first create a
25:30 - class and this will allow us to have all
25:31 - of our configuration contained in a
25:33 - single object and will allow us to do
25:35 - cool things like you know using and
25:37 - Hairy inheritance to create new
25:39 - configurations and things like that so
25:41 - I'll create a class here and we'll call
25:44 - this config so class config and within
25:48 - this config class we want to paste all
25:50 - of our current configurations and those
25:52 - are in currently in our net dot pi file
25:54 - here so I'm going to grab anything that
25:57 - is has app config and I'll paste those
26:00 - into our configuration class so I will
26:02 - cut those values out there and paste
26:06 - those in and now I will go and grab
26:09 - these mail server values here and paste
26:12 - these into our configuration as well now
26:15 - let me get the indentation correct but
26:19 - now within this config class we don't
26:21 - want these to be within this app dot
26:23 - config we just want them to be constant
26:25 - variables with the same names as the
26:27 - keys so I will remove these app config
26:33 - sections here and also the ending parts
26:36 - of these two where we just have
26:39 - what those key name one key names were
26:41 - we just want those to be constant
26:43 - variables there so you want to be sure
26:45 - that the quotes were also removed around
26:46 - those variable names and then the values
26:49 - are just going to remain the same okay
26:51 - so now that we have those set up now
26:53 - let's use some best practices and keep
26:54 - some of the secret information out of
26:56 - our source code and move these to
26:58 - environment variables now I've already
27:00 - done this with my gmail username and
27:03 - password but let's also do this for our
27:05 - secret key and our database URI now it
27:09 - doesn't look like there is any secret
27:11 - information in our database URI right
27:13 - now because we're using SQL Lite but
27:17 - when we are using something like
27:18 - Postgres then the user name and the
27:21 - password are going to be in the
27:23 - connection string so that is why we want
27:25 - to get in the habit of moving these two
27:27 - environment variables now I'm on a Mac
27:29 - but I have videos on how to set
27:30 - environment variables for Mac Linux and
27:33 - Windows so if you're on Windows and
27:35 - don't know how to do this then I will
27:37 - leave a link to that video in the
27:38 - description section below but I'm going
27:40 - to go ahead and move these values to
27:42 - environment variables and to do this on
27:44 - a Mac I'm first going to copy these
27:47 - values and now I'm going to pull up my
27:50 - terminal here and shut down our
27:52 - development server and clear the screen
27:54 - and now I'm going to edit the dot Bash
27:56 - underscore profile file in my home
27:59 - directory and I'm going to use sublime
28:00 - text but you can use anything so I'm
28:02 - going to use sublime and edit my bash
28:06 - underscore profile and I have this set
28:09 - up to open in sublime with that command
28:10 - but you can open it open it manually if
28:13 - need be so now I'll paste in those
28:15 - values and my bias profile may look
28:17 - different than yours so if it is then
28:19 - don't worry about that also you'll
28:21 - notice that my gmail user name and
28:23 - password isn't in here I set those in a
28:25 - private dot file so that I didn't show
28:28 - these on video ok so now within our dot
28:31 - file here which is a bash file we need
28:33 - to export those values and also remove
28:36 - the space between the variables and the
28:38 - equal sign so I will say export for both
28:41 - of these and we need to remove the
28:44 - spaces between the variables and the
28:47 - values ok and that is all we need to do
28:49 - to set those and our bash profile so now
28:52 - back here
28:53 - and our config now we can actually grab
28:56 - those from our bash profile so duo s
29:02 - environ get and now pass in the values
29:06 - that we set those in our environment
29:08 - variables and we just called those the
29:10 - exact same thing that they are listed
29:12 - here so we will say get secret key and
29:16 - get SQL database URI now we actually
29:19 - have an imported this OS module yet in
29:21 - order to use that so here at the top of
29:23 - the file we need to import that so
29:25 - import OS and then save that and so we
29:28 - could set default values here too so if
29:30 - a database URL isn't set then we could
29:33 - just specify that we want an SQLite
29:35 - database by default but in this case I'm
29:38 - going to assume that these environment
29:39 - variables are going to be set and not to
29:42 - provide any default okay so now back in
29:46 - our Annette dot pi file how do we now
29:48 - tell our application that we want to use
29:50 - those configuration values that we just
29:53 - set and to do that we can simply do this
29:56 - by using the app config dot from object
30:00 - method but first we're going to have to
30:02 - import that config object that we want
30:04 - to use for the configuration so here at
30:06 - the top I will say from flask blog dot
30:10 - config and we will import that config
30:14 - class that we just created and now right
30:17 - under the creation of our flask instance
30:19 - where we create this app variable we can
30:21 - say app dot config dot from object and
30:27 - then we can pass in that object as our
30:30 - configuration and real quick you can see
30:32 - that we have a little dot here in the
30:34 - gutter of my sublime text and that is
30:36 - just my editor telling me that we now
30:38 - have an unused import and that is
30:40 - because we're no longer using this OS
30:42 - module in here because we move that to
30:45 - our configuration okay so just to make
30:47 - sure that that didn't break anything
30:48 - let's reload our page in the browser and
30:50 - make sure that it works so I'll bring up
30:53 - our terminal here and rerun our
30:56 - application don't get any errors so if I
30:59 - reload the page then if we see anything
31:01 - on the home page and that's a good sign
31:03 - because it means that it found our
31:05 - database from that configuration a
31:07 - okay so that seems to be working well
31:08 - okay now there is one last thing that
31:10 - I'd like to do before we wrap up this
31:12 - video now like I said before I'd like to
31:15 - move the creation of our app into a
31:17 - function because of the reasons that I
31:20 - mentioned before it will allow us to
31:21 - create different instances of our
31:24 - application with different
31:25 - configurations so to do this I'm going
31:27 - to go back to our own it dot PI file
31:30 - here and down here at the bottom I'm
31:32 - going to create a function and I'm going
31:34 - to call this create underscore app so
31:37 - create a function here create underscore
31:39 - app and this function is going to take
31:41 - an argument for what configuration
31:44 - object we want to use for our
31:45 - application and we'll set this to be our
31:48 - config class that we just created by
31:50 - default so up in our parameters here
31:53 - I'll say config underscore class is
31:56 - equal to config and this config object
31:59 - here is what we imported from our config
32:02 - PI class which is that configuration
32:05 - class that we created in that module
32:07 - okay so now we're going to move the
32:08 - creation of our application inside of
32:10 - this create app function
32:12 - now this isn't as simple as just moving
32:14 - everything inside of this function the
32:17 - extensions that we're using will remain
32:19 - outside of the function so I'm going to
32:21 - grab everything but the extensions and
32:23 - move those in to the function so I'll
32:26 - grab the creation of our app here and I
32:30 - will not touch these extensions for now
32:32 - so I'll paste in the creation of our app
32:35 - and I will also do our blueprints so I
32:39 - will grab those blueprints and paste
32:41 - those in as well make sure that the
32:43 - indentation looks good and also I'll
32:45 - remove this line here now the reason
32:48 - that we don't want to move these
32:49 - extensions into the function is because
32:51 - we want them to be created outside of
32:53 - the function but we still want to
32:55 - initialize these extensions inside of
32:57 - the function with the application now I
32:59 - know that might sound confusing so let
33:01 - me just read the justification for this
33:03 - straight from the flask documentation so
33:06 - the flask documentation says that this
33:08 - is so that the extension object does not
33:11 - initially get bound to the application
33:13 - using this design pattern no application
33:16 - specific state is stored on the
33:17 - extension object so one extension object
33:20 - can be used for multiple apps okay so
33:23 - that's what it says in the docs if that
33:25 - doesn't make complete sense to you then
33:26 - it's not a big deal basically we're
33:28 - going to initialize the extensions at
33:30 - the top of our file but without the app
33:32 - variable so let's do that now
33:35 - so I will remove the app from the
33:39 - initialization of all of these and then
33:41 - inside the create app function will use
33:44 - the Annette app method to pass the
33:46 - application to all of those extensions
33:48 - so I'm going to copy the four extensions
33:53 - that we have here and paste these in to
33:57 - our create app function and now for each
33:59 - of these extensions we are going to run
34:02 - the anit underscore app method and that
34:06 - is where we are going to pass in this
34:07 - app okay and lastly at the bottom of our
34:10 - create app function we need to return
34:12 - the application that we created so we
34:15 - will return app okay so that will do it
34:18 - for the create app function but you may
34:20 - notice one big thing about this now we
34:23 - no longer have an app variable that we
34:25 - can import from this flask blog package
34:28 - and we use that in several places in our
34:31 - application because we got rid of that
34:32 - app variable out here and now we only
34:35 - have this create app function so flask
34:38 - has an answer for this and that is to
34:40 - replace all of our instances where we
34:42 - used the app variable with a flask
34:44 - import called
34:45 - current app so unfortunately yes that
34:48 - does mean that we're going to have to do
34:49 - another Find and Replace on our entire
34:52 - application but this one should be a lot
34:54 - faster since the app variable isn't used
34:56 - that much so I'm going to pull back up
34:59 - the search and do another search for our
35:02 - app variable so if I go up here to find
35:05 - and find in files then this still has my
35:08 - project directory filled in for where we
35:11 - want to search and I'm just going to
35:12 - search for app so if I scroll down to
35:15 - the bottom really fast then we can see
35:17 - that this isn't in too many places so
35:19 - now I'll scroll up here to the top so if
35:21 - I look down through the files that
35:22 - contain I match this is our an it PI
35:25 - file and we don't need to worry about
35:27 - that because that's the module that
35:29 - we're actually coming from we're not
35:31 - actually importing that app there next
35:34 - we have
35:34 - models dot py if we go down a little
35:37 - further here we can see that we have
35:39 - this users utils PI and other than that
35:43 - we just have this run dot pi and we're
35:45 - going to ignore run PI for now and we'll
35:48 - come back to it later so really the only
35:50 - changes that we're going to make are to
35:52 - our models dot pi so I'll open that up
35:56 - and to our users blueprint utils dot pi
36:01 - so I'll open that up and the first thing
36:02 - that we'll do in both of these modules
36:04 - is remove this app import because that
36:07 - no longer exists we got rid of that and
36:10 - put it inside of that create app
36:12 - function so I'm going to remove it from
36:14 - this util stop I I'm also going to
36:17 - remove it from our models dot pi and
36:20 - instead we're going to want to import
36:21 - current app from flask and that's
36:24 - actually from our flask package so we
36:27 - can say from flask import current
36:30 - underscore app and I will also do this
36:33 - in our utils file here we already have a
36:37 - flask import here so we could just add
36:39 - on to that and now everywhere where we
36:41 - use that app variable before now we're
36:43 - instead going to use current app so
36:46 - within our utils here it looks like we
36:49 - were using this down on line 14 for this
36:53 - app dot root path let me make sure it's
36:55 - nowhere else in the application and it's
36:57 - not so we can replace this app with
37:00 - current app dot root path and I'll save
37:02 - that and then we'll do the same thing in
37:04 - models so in models if I scroll down
37:06 - here it looks like we are using the
37:09 - secret key here and also the secret key
37:13 - and here in our token methods so I will
37:16 - replace both of those with current app
37:19 - okay so those are the only places where
37:21 - we need to change those app variables so
37:24 - that's a lot easier than our URL for
37:26 - function that we did earlier
37:28 - now I also said that we would look at
37:30 - this run dot PI file here and that we
37:33 - would come back to this so let's open up
37:35 - our run dot pi and since this is the
37:38 - script to actually run our application
37:39 - we're not going to use current app here
37:41 - instead we're gonna make one very small
37:44 - change in order to run our app so
37:46 - instead of importing app
37:48 - from our Flash blog package instead we
37:51 - want to import the create app function
37:54 - that we created there instead
37:56 - so back in run dot pi from flash bog
37:59 - import create app and now we can simply
38:03 - create our application by saying app is
38:06 - equal to create app and make sure to
38:09 - actually run that function and remember
38:11 - that we could have passed in a
38:13 - configuration there as an argument but
38:15 - it's using the config class that we
38:17 - created as its default so if we want to
38:19 - use that then we don't have to pass
38:22 - anything in so now that we've created
38:24 - that app variable then we can simply
38:26 - leave the run statement there as it is
38:28 - now so now we should be able to run our
38:30 - application and if we made all these
38:32 - changes correctly then it should all
38:34 - still work so let's go back to our
38:37 - command line and rerun our development
38:40 - server so we don't get any errors so
38:42 - that's good and let's pull up our
38:44 - application ok so again let me click
38:46 - around here and make sure that
38:48 - everything still looks good and I will
38:51 - update a blog post again well I'm not
38:53 - logged in here so I can't do that so I
38:56 - will log in so that is still working and
38:59 - now I'll update a blog post here so my
39:02 - latest post ok and that is working well
39:05 - so it seems like our application is
39:07 - still running smoothly even though we
39:09 - made some pretty drastic changes to the
39:11 - structure of our application in this
39:13 - video so I think that is going to do it
39:15 - for this video I did tell you that I'd
39:17 - print out the tree structure for our
39:19 - project here at the end of the video so
39:21 - let me open up my terminal and do that
39:23 - now so first let me open up the terminal
39:25 - and shut down our development server
39:27 - here and clear the screen and also let
39:30 - me maximize the terminal here so that we
39:31 - can see all of this and I actually
39:34 - paused the video and went in and removed
39:36 - those PI cache directories that get
39:38 - created so that they weren't taking up
39:40 - space and our tree structure so now if
39:43 - we say tree then I will try to resize
39:46 - this so that we can fit the whole
39:49 - structure in here and looks like I need
39:52 - to go a little bit more hopefully this
39:55 - isn't getting too small ok and so I
39:58 - think that fits everything there so here
40:00 - is our entire directory structure for
40:02 - application so far hopefully you can see
40:04 - this better than you were able to in the
40:06 - sidebar of sublime text but I'll leave
40:09 - this open while we wrap up the video so
40:11 - you can see here that we've got a pretty
40:12 - large application at this point now
40:14 - you'll notice that all of our templates
40:16 - are still in the same templates folder
40:18 - here we didn't move the templates into
40:21 - their specific blueprints although we
40:23 - could have done that
40:24 - so blueprints do have the ability to
40:26 - have their own static and template
40:28 - folders as well but I'm more of a fan of
40:30 - leaving all the templates in a single
40:32 - directory and if need be then we can
40:35 - create subfolders within the templates
40:37 - directory to make those more manageable
40:39 - and we'll actually see what this looks
40:40 - like in our next video when we create
40:42 - some custom error pages so we have
40:44 - restructured this application a couple
40:46 - of times now but this will be the last
40:48 - time so first we had a single module
40:50 - that we ran and then we restructured it
40:53 - into using packages and now we
40:55 - restructured it again into using
40:57 - blueprints so you might be wondering why
40:59 - I didn't just show you how to use
41:00 - blueprints right off the bat instead of
41:03 - restructuring this project multiple
41:05 - times and the truth is because this is
41:07 - how an application evolves in the real
41:08 - world so sometimes if you have a simple
41:10 - site then running a flask application
41:12 - with a single file and a few templates
41:14 - is really all you need but as it grows
41:17 - it makes sense to move those into
41:19 - packages and finally if your packages
41:21 - start getting hard to maintain then you
41:23 - can split those up into blueprints so
41:25 - it's good to know each step of the
41:27 - process depending on the complexity of
41:29 - your application so for example if I was
41:31 - making a website for a local restaurant
41:33 - that only had some menus and company
41:36 - hours and stuff like that then breaking
41:38 - this up into blueprints could definitely
41:40 - be overkill but if you have a much
41:42 - larger application with forms and
41:44 - databases and all that then it is a good
41:47 - idea to make it as manageable as
41:49 - possible and blueprints are the way to
41:51 - go for that so I hope in this video that
41:53 - you got a good sense for how to use
41:54 - blueprints and how you can separate out
41:56 - your app creation and configuration and
41:59 - in the next video we'll show how easy it
42:01 - is to add to these blueprints now that
42:03 - we have it set up just by adding some
42:05 - custom air pages but if anyone has any
42:07 - questions about what we covered in this
42:09 - video then feel free to ask in the
42:10 - comment section below and I'll do my
42:11 - best to answer those and if you enjoy
42:13 - these tutorials and would like to
42:14 - support them then
42:15 - several ways you can do that the easiest
42:17 - ways to simply like the video and give
42:18 - it a thumbs up and also it's a huge help
42:20 - to share these videos with anyone who
42:21 - you think would find them useful and if
42:23 - you have the means you can contribute
42:24 - through patreon and there's a link to
42:25 - that page in description section below
42:27 - be sure to subscribe for future videos
42:28 - and thank you all for watching
42:40 - you