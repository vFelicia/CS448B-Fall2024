00:00 - hey there how's it going everybody in
00:02 - this video we're going to be looking at
00:03 - chat gbt and how we can use this tool as
00:06 - programmers now I'm sure a lot of you
00:07 - have already heard of chat GPT at this
00:09 - point but if you haven't it's basically
00:12 - a new artificial intelligence technology
00:14 - that we can interact with almost like
00:16 - we're speaking to another person so it's
00:18 - used for a lot of different things
00:20 - outside of programming but the
00:21 - programming aspect is what we're going
00:23 - to be focusing on in this video so what
00:26 - we're going to be looking at is how we
00:28 - can use this to write code for us how to
00:31 - optimize code how to explain code
00:33 - Snippets convert between different
00:35 - languages how we can use it to get ideas
00:37 - for starting projects and also help us
00:40 - with you know some of the more boring
00:42 - tasks that we don't like to do but need
00:44 - to do like writing unit test and
00:46 - commenting code so there has been a
00:48 - little bit of a debate as to whether
00:50 - programmers should use tools like this
00:52 - since it doesn't always get things right
00:54 - but I think after this video we're going
00:57 - to see why this can be so useful for us
00:59 - to learn and it's only going to get
01:01 - better in the future so in my personal
01:03 - opinion it's going to be important for
01:06 - us to know how to use tools like this
01:07 - going forward you know just like some
01:09 - people say that you know how you Google
01:11 - things can be a certain skill in itself
01:13 - uh knowing how to interact with this new
01:16 - wave of AI tools is also going to become
01:19 - a skill that is going to boost our code
01:21 - and productivity so I do think it's
01:24 - going to be important so with that said
01:26 - let's go ahead and get started so first
01:28 - off let's just see how we can use chat
01:30 - GPT to write some code for us now I
01:33 - currently have a chat GPD open here in
01:35 - my browser and if you've never used this
01:37 - before it's extremely simple you just go
01:40 - to their website and create an account
01:42 - and then you're good to go I'll go ahead
01:45 - and leave a link to their page in the
01:47 - description section below where you can
01:48 - use this now you can use it for free but
01:51 - they also have a paid version that gives
01:53 - a few benefits that you can read about
01:55 - on their page now I currently have the
01:57 - paid version which gives me access to I
02:00 - think more up time and I can also use
02:03 - chat gpt4 which is the latest version
02:06 - but I also tested this tutorial using
02:08 - chat gpd3 and I didn't notice much of a
02:11 - difference in its output
02:13 - um now I'm going to be using chat gpt4
02:15 - in this video uh simply because this
02:18 - should be available for everyone to use
02:20 - soon so I want to be sure that I'm using
02:22 - the version that most people are going
02:24 - to be using before too long so when
02:26 - speaking to chat gbt we can basically
02:29 - speak like we're speaking to another
02:31 - person there's no specific queries or
02:34 - anything like that involved so for
02:36 - example if I wanted to do something
02:38 - extremely simple like looping between 1
02:41 - to 10 and printing out those numbers I
02:44 - could simply just come down here and say
02:46 - we'll just simply tell it to please
02:48 - write a python script that Loops from
02:50 - one to ten and prints out each number
02:56 - and so whenever I run this we can see
03:00 - that it takes a while to think here and
03:02 - then prints it out and it says sure
03:04 - here's a simple python script that does
03:06 - exactly that we can see that it gave us
03:09 - our for Loop and our print here and it
03:12 - even explains a couple of details here
03:14 - and I think this is a great tool for
03:16 - learning because uh not only does it
03:18 - give us the code that we can copy just
03:20 - by clicking up here in the top right but
03:22 - it also explains exactly what's going on
03:25 - in case somebody is learning something
03:28 - for the first time so it says why it use
03:30 - the range function and then it also says
03:33 - here note that range 111 actually
03:36 - generates numbers from 1 to 10 not 1 to
03:38 - 11 because the stop value provided to
03:41 - the range function is exclusive so
03:43 - that's pretty cool that we can just tell
03:45 - it exactly what we want in human words
03:47 - and that it understands us to print out
03:49 - the code but like I said this is an
03:51 - extremely simple example we can actually
03:54 - ask ask it to do much more advanced code
03:56 - than this so for example let's say that
03:59 - I wanted to write a script that accepted
04:02 - a password input from a user and then
04:04 - hashes that password using assault now
04:07 - this might be something that some of you
04:09 - have never done before that might take a
04:11 - little bit of research before you're
04:12 - able to actually write it out in code
04:14 - but let's see if we can get chat gbt to
04:17 - write something like this for us so let
04:19 - me type this out here and then I will
04:22 - explain the prompt
04:30 - okay so the prompt that I wrote here I
04:32 - just said write a python script that
04:34 - accepts user input this input will be a
04:36 - password I then want this password to be
04:38 - hashed using a salt then print the hash
04:41 - password to the user so let's run this
04:44 - and see what it gives us
04:49 - okay so let's scroll back up here to the
04:51 - top and see exactly what it gave us for
04:54 - this prompt so we can see it says the
04:57 - python standard Library includes the
04:59 - hashlib module and then we can see that
05:03 - it gave us the script here and attaching
05:05 - this password using several algorithms
05:07 - it is also using a salt like we wanted
05:12 - before and it's generating a salt using
05:14 - the OS dot U random module and then
05:18 - after it hashes that then it prints out
05:20 - that hash password and everything also
05:23 - here is commented pretty well so that we
05:25 - know exactly what's going on and then at
05:27 - the bottom where it gives an explanation
05:29 - It also says in a real application you
05:31 - would also need to store the salt for
05:33 - each user and so on and so forth now one
05:36 - thing that I really love about chat GPT
05:38 - is that it actually remembers previous
05:40 - prompts and requests that we've made so
05:43 - if something is wrong or not how we like
05:46 - it then we can simply ask it to change
05:48 - the code and it's specific way again
05:51 - kind of like we're talking to a
05:52 - co-worker so with the current code that
05:54 - it gave us we can see here that when
05:58 - they entered their password it's just
06:00 - using input here but when we use the
06:02 - input function as the user types it out
06:05 - it actually shows the characters that
06:07 - they're typing to the screen but
06:09 - passwords are usually hidden on the
06:11 - screen so that anyone else who can you
06:13 - know see over their shoulder just can't
06:16 - read the password off the screen so we
06:18 - can just simply ask chat gbt to redo
06:22 - this if it knows how so let me just type
06:25 - out my prompt here and then I'll explain
06:26 - what we're asking it
06:32 - so I'm just saying since the user input
06:35 - is a password can you make it so that
06:38 - when they type in their input it doesn't
06:40 - show the character up the characters
06:42 - that they are typing out to the screen
06:45 - so let's go ahead and run this and it
06:49 - says sure for handling password inputs
06:51 - password python has a built-in module
06:55 - called get pass so if we go down and
06:57 - look at our new code now we can see that
07:00 - it's using this built-in get pass and
07:03 - using that for them to enter their
07:05 - password and that will take care of that
07:08 - user input showing up on the screen so
07:10 - that's one thing that I really like
07:12 - about this kind of a tool is this
07:14 - conversation style where you can go back
07:16 - and forth because if you're Googling
07:18 - something and you come to a roadblock
07:20 - then you're kind of out of luck you just
07:22 - got to keep searching but with this you
07:25 - can give it errors or give it extra
07:28 - input and it'll redo the code and
07:30 - regenerate that response for you so I
07:33 - just think that that's a really good
07:34 - touch and it doesn't put us in these
07:37 - roadblocks that we normally hit okay so
07:39 - now that we've seen a couple of examples
07:40 - of where we can use chat CP to write
07:42 - code from scratch let's look at how we
07:44 - can use it to optimize existing code and
07:47 - I'm going to be using a simple example
07:49 - here just so that we can see exactly
07:51 - what's going on and I'm just going to
07:53 - grab this from some code Snippets here
07:55 - and copy this
07:57 - bring this back over and I'm going to go
08:00 - ahead and paste this in this code is
08:03 - very simple we just have a list of names
08:05 - here and we're doing a for Loop here
08:08 - where We're looping over the names but
08:10 - we also want to access the index which
08:12 - we don't get from a normal for Loop so
08:15 - one way especially coming from another
08:17 - language somebody might want to do this
08:20 - just by saying index equals 0 outside of
08:23 - the for Loop and then looping through or
08:26 - incrementing that by one each time we go
08:29 - through that for Loop to keep track of
08:30 - the index now this code actually does
08:32 - work but you're kind of setting yourself
08:34 - up with possible errors and debugging if
08:37 - the values of the index go out of bounds
08:39 - or anything like that so a better way to
08:42 - write this code would be to use the
08:44 - built-in enumerate function now I know
08:47 - that personally but if someone is
08:48 - learning this for the first time then
08:50 - let's see if chat gbt can pick up on
08:52 - this and optimize this code for them so
08:55 - I have the code pasted here and and I'm
08:58 - just going to put that down one line
09:00 - whoops
09:02 - now what's funny there is I didn't
09:03 - actually mean to submit
09:05 - um that code I was going to put in a
09:07 - prompt that said can you optimize this
09:09 - code for me
09:11 - um but I just put in the code and it
09:14 - says that it kind of knows already that
09:17 - we wanted to optimize it it says the
09:20 - code that you provided Loops over this
09:22 - names list but python provides the
09:24 - built-in function enumerate which makes
09:27 - this task easier and more pythonic and
09:29 - we can see here that at the bottom so it
09:32 - does rewrite that code for us using
09:33 - enumerate and it knows that we want to
09:36 - access the index and the name and then
09:38 - down here in the extra details as usual
09:41 - it says in this code enumerate generates
09:44 - a sequence of tuples where the first
09:47 - element of each stop was the index and
09:49 - the second element is the corresponding
09:50 - item from names and again like I said
09:53 - before this is an extremely simple
09:54 - example just so we can see exactly
09:56 - what's going on but you can paste in
09:58 - much larger and much more complicated
10:00 - section of code to see see how a tool
10:03 - like this will optimize it and one thing
10:05 - I'll mention several times throughout
10:07 - the video is that you shouldn't take
10:10 - everything chat GPT tells you as gospel
10:13 - or as the solid truth I mean definitely
10:15 - be sure to look over the changes that it
10:17 - makes and make sure that your desired
10:20 - functionality is still there and also
10:22 - read over these explanations that it
10:24 - provides to make sure that you agree
10:26 - with the changes that it made again it's
10:29 - just a tool and should be used like a
10:31 - tool we still need to understand the
10:33 - code that it's giving us back but seeing
10:35 - how it will optimize your code may lead
10:38 - you to learning more and discovering new
10:40 - built-in functions or ways of Performing
10:43 - tasks that we didn't know before okay so
10:46 - that's how we can use this to optimize
10:48 - code now let's take some existing code
10:51 - and have it explain it to us if it
10:53 - doesn't make sense to us so for this
10:55 - example I'm going to use regular
10:57 - Expressions since those are fairly
10:59 - notorious for being complicated and hard
11:01 - to figure out so let's say that I have a
11:04 - regular expression in my code that I
11:06 - don't understand and it's not properly
11:08 - commented so we have no idea what it's
11:11 - doing so I'm going to grab this from my
11:13 - Snippets here and let me copy this and
11:16 - let's go back and let's just ask it to
11:18 - explain this to us
11:22 - so I can just say can you explain what
11:24 - this regular expression does paste in
11:26 - the regular expression and run that
11:28 - prompt
11:29 - and we can see that it says that this
11:32 - regular expression matches most valid
11:34 - email addresses it breaks down as the
11:36 - follows and then it gives you a
11:38 - step-by-step basis here of what each
11:40 - part of this regular expression does
11:43 - so if we scroll back up to the top here
11:46 - we can see that it breaks down each part
11:49 - of this regular expression one at a time
11:52 - and tells us exactly what each of those
11:55 - is matching and it also gives a
11:57 - suggestion here that says that this
11:59 - regular expression is somewhat
12:00 - permissive and will also match some
12:02 - invalid email addresses and then
12:04 - explains to us those email addresses
12:07 - that would make it past this regular
12:09 - expression that we currently have so
12:11 - actually think that the learning aspect
12:12 - of something like chat GPT might be one
12:15 - of the biggest potentials for a
12:16 - technology like this now I'm not saying
12:19 - that it's a hundred percent there but I
12:21 - can definitely see a future where we're
12:23 - no longer searching through you know
12:25 - stack Overflow to see if our questions
12:27 - have been answered but instead just
12:29 - asking something like chat GPT to
12:31 - explain an error or an expression or a
12:34 - section of code and have it guide us
12:36 - through step by step like it's doing
12:37 - here now another thing that we can use
12:40 - this tool for is to convert code from
12:42 - one language to another other so this
12:45 - regular expression that I asked chat GPT
12:47 - about is just a normal regular
12:49 - expression it's not currently written in
12:51 - Python so let's ask chat GPT to convert
12:54 - that to a python statement for us so
12:56 - I'll just come down here to the bottom
12:58 - and just write this out
13:05 - so all I asked here was can you write a
13:07 - python script using that regular
13:09 - expression to match email addresses in a
13:11 - string of text so let's see what it
13:14 - gives us here
13:17 - okay so if we scroll up here and look at
13:19 - what we got we can see that it wrote
13:22 - this code out for us and it also gives
13:24 - us an example of how this can be used so
13:26 - it wrote out some test emails here or
13:29 - some test text here with some emails in
13:32 - it and then shows us how we can use that
13:34 - pattern that it created here to match
13:38 - all those using the re dot find all
13:41 - method and then it prints out all those
13:43 - matches looping through those now in a
13:46 - lot of development jobs a lot of us
13:47 - aren't using only one programming
13:50 - language so you know maybe you've been
13:53 - using python for a while now and then
13:56 - you want to take this script and convert
13:58 - it over to JavaScript but it's been a
14:00 - while since you've used JavaScript and
14:01 - you don't really remember exactly how
14:03 - well with something like this we can
14:06 - just ask it to convert this code to
14:08 - JavaScript so I'll just say can you
14:11 - convert
14:13 - this script to
14:16 - JavaScript and then we will run that and
14:20 - see what it gives us
14:24 - so if we go back up here then we can see
14:27 - that it wrote all of this out for us in
14:29 - JavaScript comments the code so we know
14:31 - step by step exactly what it's doing and
14:34 - again it also gives us this test text
14:37 - here so that we can test to make sure
14:39 - that this is working the way that we
14:41 - plan on it working now speaking of
14:43 - testing our code that's actually another
14:45 - thing that we can use a tool like chat
14:47 - gbt to help us out with now I'm guilty
14:51 - of this I'm sure a lot of people are
14:52 - guilty of this I don't always write the
14:55 - best unit tests for my code sometimes on
14:58 - personal projects I don't even write
14:59 - unit tests for my code but when I work
15:02 - for large companies I really did see the
15:04 - benefit because it does save you a lot
15:07 - of time in the long run if you're
15:09 - writing very good unit tests on a large
15:12 - code base so that you know that any
15:14 - small changes that you make don't break
15:17 - everything in other places in the code
15:19 - and having good test coverage within
15:22 - your code base using unit us can
15:25 - definitely help you with that discovery
15:27 - of errors and prevention of Errors so
15:30 - that you're not releasing something to
15:31 - the public that a unit test would have
15:34 - probably found if you had written them
15:36 - well but like I said on a lot of private
15:38 - projects I don't even do this because I
15:41 - just find writing unit tests boring and
15:43 - I'm sure a lot of other people do too
15:45 - but we can use chat gbt to help us out
15:48 - with this so let's ask chat gbt if it
15:52 - can write some unit tests for this
15:54 - python version of this regular
15:56 - expression code that we gave it before
15:58 - so I'm just going to come down to the
16:00 - bottom here and I'm just going to say
16:03 - write unit tests for the python version
16:08 - of this code and like I said it's going
16:11 - to remember previous prompts it doesn't
16:14 - even have to be the one that you just
16:16 - got a response to it can be something up
16:19 - here and it's going to remember what the
16:20 - python version of this code is and it
16:23 - can write unit tests for it so I'll go
16:24 - ahead and run this
16:29 - okay and let's see what we got here so
16:33 - let's see so it rewrote this to where
16:37 - we are using the unit test Library here
16:39 - and it is uh creating fine emails and
16:43 - its own function now and we can see that
16:46 - it created a unit test test case here
16:49 - and
16:51 - we have one function within here that's
16:53 - testing a few different things now this
16:56 - should probably be split up but let's
16:58 - see what it's got for us here so it's
17:01 - saying that this one should catch a
17:06 - couple of emails here this one should
17:08 - have no emails and this one should just
17:11 - have one email and that's another thing
17:13 - about it helping us with testing is that
17:16 - it might even come up with some examples
17:18 - uh that will we wouldn't have thought to
17:21 - cover ourselves you know sometimes
17:23 - people can't forget these edge cases
17:25 - where they forget to add the education
17:28 - of you know not having results or
17:30 - something like that and that can help us
17:33 - out here and we can see here that it
17:35 - actually says this at the bottom that
17:37 - this is just a simple test may not cover
17:39 - all possible edge cases in a real
17:40 - application you'd want to test the
17:42 - function with a wide range of inputs and
17:44 - colliding including edge cases invalid
17:47 - inputs to make sure it handles all
17:48 - scenarios correctly now if we wanted to
17:50 - continue this example people then I
17:52 - could actually you know just copy and
17:55 - paste this and say hey can you change
17:58 - this to where it does handle a wider
18:00 - range of inputs and more invalid inputs
18:03 - and things like that and it would take
18:06 - care of that for us one thing I'm going
18:08 - to see if it can do here is
18:11 - these are usually broken up into
18:14 - different different functions I believe
18:16 - let's see if I can have this split it up
18:19 - for us
18:21 - foreign
18:25 - okay so I asked it to split those up for
18:27 - us and we can see that it kind of uh
18:31 - realizes its mistakes as it goes it says
18:34 - absolutely each test should ideally be
18:36 - testing only one thing here's how you
18:38 - can split up these tests now we can see
18:40 - that we still have our find emails
18:41 - function but now in our testing class
18:44 - now we have multiple functions here and
18:47 - each function tells exactly what it's
18:50 - supposed to do so this test finding
18:53 - multiple emails this is testing find no
18:56 - emails this test finds a single email
18:58 - and then when you run your test and
19:00 - something breaks then you can narrow it
19:02 - down exactly to the specific function
19:05 - the test function that broke your code
19:07 - so this is something that I'm definitely
19:09 - going to be using chat GPT for more even
19:12 - for my own personal projects because
19:14 - like I said I just find testing boring
19:17 - and when it's a large project yes I
19:19 - understand that it's needed but when I'm
19:22 - working on a private project I just want
19:24 - to get to the phone functionality of
19:26 - what I want my code to do and the
19:29 - testing you know just I never get around
19:31 - to it but using something like chat GPT
19:33 - is going to make that so much easier to
19:35 - where you know I have a little bit of
19:37 - some reassurance in my tests in the
19:40 - background now another area of coding
19:43 - where I could definitely personally
19:45 - improve is my documentation and
19:48 - commenting like I said I usually just
19:50 - like to get down into the functionality
19:54 - and I don't comment as much as I should
19:57 - or document as much as I should now
20:00 - that's another one of those things that
20:02 - I always plan to do later and usually
20:04 - just don't get around to but this is
20:06 - another thing that we can pass off to
20:09 - chat GPT if we paste in our code and see
20:11 - if it can help us out so I'm just going
20:14 - to use the same code that we've been
20:15 - using here for these regular expressions
20:19 - and we can see we don't have any
20:20 - comments in here so I'm going to ask it
20:22 - to comment and document this code for us
20:27 - can you add comments and documentation
20:29 - for that code so let's run this and see
20:33 - what it comes up with
20:37 - okay so now it has finished generating
20:39 - that code let's see what it gave us here
20:41 - okay so we can see that it gave us a
20:44 - very detailed documentation and comments
20:47 - for this code it's using a mix of Doc
20:50 - strings and comments to show us exactly
20:52 - what each function does so that if we
20:54 - come back through this code in the
20:56 - future then we'll more quickly be able
20:58 - to see exactly what everything does and
21:00 - for anybody who's ever gone back and
21:02 - looked at code from years ago that
21:04 - doesn't have comments it's definitely a
21:06 - lifesaver to have good documentation
21:08 - that can tell us exactly what's going on
21:10 - so for this one it explains exactly what
21:13 - the function does in this first part
21:15 - here then it gives us the arguments and
21:18 - then the return values and it's also
21:21 - documenting our classes and functions
21:24 - down here as well okay so the next thing
21:27 - that we're going to cover is probably
21:28 - what I use chat GPD for more than
21:31 - anything else now I don't know about you
21:34 - all but when I first start a new project
21:36 - and I I'm literally staring at a blank
21:39 - page with no code it's difficult for me
21:41 - to get started a blank canvas is
21:45 - difficult for a lot of people and that's
21:47 - not just programmers that's you know
21:49 - people talk about this if whether
21:51 - they're an author or an artist a
21:53 - programmer a musician it's that starting
21:56 - point that's usually the most difficult
21:58 - part because you just have nothing to go
22:01 - off of so I think chat gbt is fantastic
22:04 - for getting that starting point of our
22:06 - project as something that we can build
22:09 - off of so let's say that I have a
22:11 - project idea that I've been wanting to
22:13 - do for a while so for example I play the
22:15 - game League of Legends and for a while
22:18 - I've been wanting to check out their API
22:21 - just to do a hobby project in my off
22:23 - time but I've always put it off because
22:25 - it would just be a hobby project and in
22:28 - the back of my head I know that I'll
22:29 - have to dive into their API
22:31 - documentation go through a ton of trial
22:33 - and error and it's just never worked its
22:36 - way up my my priority list but with chat
22:39 - gbt it makes starting these projects so
22:42 - much easier and just getting some code
22:45 - into your IDE so without even looking at
22:49 - the documentation let's see if we can
22:51 - get a basic script that uses this League
22:55 - of Legends API so I'm just going to
22:58 - write out a prompt here
23:02 - so I'm just asking can you write a
23:04 - python script using the League of
23:06 - Legends API that shows me the percentage
23:09 - of wins for a specific player so let's
23:12 - go ahead and run this and let it think
23:15 - about it and generate a response
23:19 - okay so we can see that it spits out a
23:21 - good bit of code here and some
23:23 - explanations of what everything does so
23:26 - right here at the top it tells us
23:28 - exactly what we need to do it says in
23:30 - order to use this API we first need to
23:33 - sign up for an API key at their
23:36 - developer portal that it's going to use
23:38 - the requests library to interact with
23:40 - the API and then exactly what these
23:45 - parameters are here that we need our API
23:47 - key our region and the Summoner name
23:49 - which is the player name and then we can
23:52 - see exactly how it's using this API in
23:56 - these functions now like I said before
23:58 - I've not actually used their API yet so
24:01 - I don't know how accurate this is this
24:04 - is something that I can't really fact
24:06 - check on until I dive into their
24:09 - documentation but this the point is that
24:13 - we now have a starting point where we
24:16 - don't have a blank page anymore we can
24:18 - see that we have diff different ways of
24:20 - interacting with this API and this would
24:23 - allow us to go out and get an API key
24:26 - plug that into our script and start
24:28 - doing some testing and running some
24:29 - queries to see if it does what we want
24:32 - it to do and it also gives us a pretty
24:34 - good idea of how we would interact with
24:36 - this API to fetch different things like
24:39 - we can see here that a way to get a
24:42 - player's information how to get a match
24:44 - history
24:45 - how to get match results and then
24:49 - calculate the win percentage and things
24:50 - like that so that's probably what I use
24:53 - this technology for the most because I
24:56 - like to use this for the starting points
24:58 - of a new project because it allows you
25:01 - to just Dive Right In without so much
25:03 - trial and error and once you get to the
25:05 - point where chat GPT doesn't have an
25:08 - answer for you or you're not getting the
25:10 - results that you want then it's no big
25:12 - deal because then you're just back to
25:13 - where you were previously where you're
25:16 - going to have to dig through the
25:17 - documentation yourself anyway and do it
25:19 - from scratch so I always like to ask
25:22 - what it comes up you know ask it the
25:25 - project that I want see what it comes up
25:27 - with and if I need to make changes I can
25:29 - make changes and if it's not what I want
25:31 - then I'm just back to where I was to
25:34 - where you know I was going to have to
25:36 - start that project from scratch anyway
25:38 - so I think it's a good way to to use
25:42 - this tool okay so we are just about
25:44 - finished up here but one more thing that
25:46 - I wanted to talk about after seeing all
25:48 - of these benefits of chat gbt is to talk
25:51 - a little bit about one of the main
25:53 - concerns and questions that people have
25:55 - with this technology and that's whether
25:57 - or not AI models like this will replace
26:00 - Developer jobs a lot of people have been
26:03 - wondering this I've seen several videos
26:05 - already of hey you know if it writes
26:08 - code this well is it going to replace us
26:10 - as developers and I understand that
26:12 - concern because we see a lot of examples
26:15 - of its capability in this video but I
26:18 - don't think we have to worry about this
26:19 - quite yet like I said earlier this is
26:23 - just another tool that we'll see
26:25 - programmers using regularly but like
26:28 - I've been saying sometimes it doesn't
26:30 - get everything right especially when
26:33 - working on more complicated projects so
26:35 - we're going to need an actual human who
26:38 - can read and understand the code to
26:40 - determine whether or not we are getting
26:42 - back from these tools what we actually
26:45 - want and whether that code works
26:47 - correctly and we saw that a couple of
26:49 - times in this video as well like when I
26:51 - asked it to rewrite those unit tests
26:53 - that could have been done in a better
26:54 - way and also understanding the code and
26:58 - the better of a developer that you are
27:00 - it's also going to allow you to write
27:04 - better prompts and use these tools more
27:06 - efficiently because if you're someone
27:09 - who doesn't understand that you know
27:12 - unit tests should be split up then
27:15 - you're not going to even know to tell it
27:18 - that prompt of hey that she should be
27:20 - split up so the better developer that
27:22 - you are the better that you're going to
27:24 - be able to use these tools to write
27:26 - better code so when it comes to actually
27:28 - replacing developers I think we're a
27:30 - long way off from that I heard this in
27:33 - another YouTube video uh and I would
27:35 - give them credit if I remembered exactly
27:38 - where I heard it but I think that their
27:40 - response to this question was spot on so
27:43 - when it came to whether or not AI tools
27:45 - like this would replace programmers that
27:48 - person said not exactly it's not going
27:50 - to be AI replacing programmers it's
27:53 - going to be programmers who use AI
27:56 - replacing programmers who don't use Ai
27:58 - and I completely agree with what he said
28:01 - here I think that this is going to be an
28:03 - important tool that we use but not
28:05 - something that takes our job it's going
28:08 - to be something that makes us more
28:09 - productive than anything okay so before
28:12 - we go here I'm going to do one final
28:14 - test with chat CPT and see if it gives
28:17 - me correct answers or not let's see
28:18 - exactly how smart this thing is so if I
28:23 - was to say
28:24 - what's the best resource for learning
28:28 - python on YouTube
28:31 - then it better get this one right let's
28:34 - see what we got
28:37 - okay so let's see what these uh YouTube
28:41 - resources are there we go so I take back
28:45 - everything I said earlier uh about it
28:47 - being wrong sometimes because this is
28:49 - obviously super intelligent and we need
28:51 - to take everything that it says at its
28:53 - word
28:54 - okay obviously I'm joking there uh I
28:57 - think one of the main reasons I'm at the
28:58 - top of this list is because it's a bit
29:00 - behind on its data I think that it
29:02 - collects it's collected up to like
29:04 - September of 2001 or something like that
29:06 - because as you guys know I haven't been
29:08 - as active on this channel as I want to
29:10 - be lately and I'm doing my best to
29:12 - change that and put out more content if
29:14 - I were to put a list of resources
29:15 - together uh I would definitely also
29:18 - include some of these uh channels on
29:20 - here uh syntax he's awesome but some of
29:23 - the others that have come up in the last
29:24 - couple years I don't see on here uh I
29:27 - would definitely add you know channels
29:28 - like Tech with Tim I would have one here
29:30 - and I've heard great things about coding
29:33 - with Harry's Channel although I haven't
29:35 - been able to check out his stuff his
29:37 - stuff in depth by myself yet
29:39 - um but I've heard really good things
29:41 - about his channel as well that's
29:42 - actually a video that I want to do in
29:44 - the near future is I want to release a
29:46 - video of my top resources for learning
29:50 - coding and my favorite YouTube channels
29:52 - where I get my information I think you
29:54 - guys would find that that useful I did
29:56 - one a very very long time ago that's
29:57 - outdated at this point so it's
29:59 - definitely time for an update but with
30:01 - that said I think that's going to do it
30:02 - for this video uh hopefully now you have
30:04 - a good idea for how you can use chat GPT
30:07 - as a tool to help you out with your
30:09 - daily programming task and it can help
30:11 - you be more productive these
30:13 - Technologies are moving extremely
30:15 - quickly so I'm curious to see how these
30:17 - tools evolve in the next few years you
30:20 - know hopefully it's not going to look
30:21 - like a Skynet situation or something
30:23 - like that but we never know it's moving
30:25 - fast but if anyone has any questions
30:27 - about what we covered in this video then
30:29 - feel free to ask in the comment section
30:31 - below I'll do my best to answer those
30:33 - and if you enjoy these tutorials and
30:34 - would like to support them then there
30:36 - are several ways you can do that the
30:38 - easiest way is to Simply like the video
30:39 - and give it a thumbs up and also it's a
30:42 - huge help to share these videos with
30:43 - anyone who you think would find them
30:44 - useful and if you have the means you can
30:46 - contribute through patreon or YouTube
30:48 - and there are links to those pages in
30:50 - the description section below be sure to
30:52 - subscribe for future videos and thank
30:54 - you all for watching