00:00 - hey there how's it going everybody in
00:01 - this video we'll be learning how to work
00:03 - with file objects in Python and some of
00:06 - the useful things that we can do with
00:07 - these objects so whether you use Python
00:09 - for desktop or web applications you're
00:11 - likely going to be interacting with
00:12 - files a good bit so it's definitely a
00:15 - good skill to have to know how to
00:16 - properly interact with these file
00:18 - objects okay so let's go ahead and dive
00:20 - in so to get a file object we can use
00:23 - the built-in open command so I have a
00:26 - file here called test.txt in the same
00:29 - directory as my python file now if I
00:32 - open this file we can see that it's just
00:34 - a plain text file with multiple lines so
00:37 - let's see how we can open and read this
00:39 - file from within Python now the way I'm
00:41 - going to open up the file right now
00:43 - isn't the way that it's normally
00:45 - recommended it's usually recommended to
00:47 - use a context manager which I'll show
00:49 - you here in just a second but to show
00:51 - you why a context manager is useful let
00:54 - me first show you this method for
00:56 - opening files first so what we're going
00:58 - to do here is we're going to say F
01:00 - equals open and we're just going to open
01:03 - that test dot txt file now if you're
01:06 - working with files from different
01:08 - directories then you're going to have to
01:09 - pass the path to that file into the open
01:12 - command but since this file is within
01:14 - the same directory as my Python file
01:16 - then I can just pass in the name of the
01:19 - file but if you want to learn more about
01:21 - how paths work then we touch on that a
01:24 - little bit in the tutorial I did on the
01:26 - OS module okay so the open command here
01:29 - allows us to specify whether we want to
01:32 - open this file for reading writing
01:34 - appending or reading and writing now if
01:37 - we don't specify anything then it
01:39 - defaults to opening the file for reading
01:41 - but I usually like to be explicit here
01:44 - so let's go ahead and say that we want
01:45 - to open this file for reading and we can
01:48 - do this by passing in a second argument
01:51 - here and that's just going to be the
01:52 - string of a lowercase R and we'll touch
01:55 - on some of these later but if I wanted
01:58 - to write to a file then it would just be
02:00 - a lowercase W that I pass in appending
02:03 - to a file is a lowercase a and if I
02:06 - wanted to read and write to a file then
02:08 - I could do an R plus but for now we just
02:11 - want to read the contents of the file
02:13 - let's just pass in a lowercase R okay so
02:16 - now the file is actually open and we can
02:19 - print the name of the file if I was to
02:21 - do a print F dot name and also before I
02:26 - run this and print the name of the file
02:28 - out there's one more thing that we have
02:30 - to do here if we open a file like we
02:33 - just did here then we need to explicitly
02:36 - close the file when we're done using it
02:38 - and to do this I'm going to do it by
02:40 - saying F dot close so now we've closed
02:43 - that file let's go ahead and run this
02:45 - and you can see that it printed out the
02:47 - name of the file that we opened and so
02:50 - this has some more information that we
02:51 - can print out also if we wanted to print
02:53 - the mode that the file is currently
02:56 - opened with I can do a F dot mode and if
02:59 - I run that you can see it prints out a
03:01 - lowercase R because we open the file for
03:04 - reading okay so now even though that
03:06 - this works the way that we've just now
03:07 - done this let me show you how to instead
03:09 - open the file using a context manager
03:12 - and why for most use cases you'll want
03:15 - to work with files this way so if we
03:17 - open the file like we did here then we
03:20 - have to remember to explicitly close the
03:23 - file if we don't close the file then you
03:26 - can end up with leaks that cause you to
03:28 - run over the maximum allowed file
03:30 - descriptors on your system and your
03:32 - applications could throw an error so
03:34 - it's always important to make sure that
03:35 - you close the files that you open so in
03:38 - order to use a context manager then it's
03:41 - kind of similar but we can do this using
03:44 - the width keyword so we can say width
03:47 - and then I'm just going to copy all of
03:48 - this
03:49 - so with open test.txt in read mode and
03:54 - then here at the end I'm going to say as
03:55 - F and then I'm going to put in a opening
03:59 - for our block here now this can be a
04:01 - little confusing to people at first
04:03 - because the variable name is actually
04:05 - over here on the right using as F
04:07 - instead of over on the left when we said
04:10 - F equals open but the benefit of these
04:13 - context managers is that they allow us
04:15 - to work with files from within this
04:17 - block and after we exit that block of
04:19 - code it'll automatically close the file
04:22 - for us so we don't have to worry about
04:24 - whether or not we add in these closes
04:26 - here
04:27 - now this will also close the file if
04:29 - there are any exceptions that are thrown
04:31 - or anything like that so that's why
04:33 - using these context managers are
04:35 - considered a best practice and it just
04:37 - automatically takes care of all that
04:39 - cleanup for us so now I'm going to go
04:41 - ahead and delete my outside open and
04:44 - close statements there now one thing
04:47 - that some people don't realize is that
04:48 - you actually have access to this F
04:51 - variable for now I'm just going to say
04:53 - pass within this context manager now we
04:56 - actually have access to this file object
04:58 - variable after we exit the context
05:01 - manager but the file will just be closed
05:03 - so for example if I print the closed
05:06 - method on F now and run that you can say
05:09 - that it you can see that it returns true
05:11 - but even though that we have access to
05:13 - this variable here it is closed so it's
05:16 - not like we can read from it like if I
05:18 - try to read the contents from the file
05:20 - and print that out then you can see that
05:22 - it throws a value error here and it says
05:26 - I owe operation on a closed file so for
05:29 - what we want we're going to have to work
05:30 - with this file from within this context
05:34 - manager and for the rest of the video
05:36 - I'll be using these context managers to
05:38 - work with files since it's a good
05:39 - practice but I wanted to show you the
05:41 - other way first in case you see it in
05:43 - examples or wondered why I wasn't doing
05:45 - it that way okay so back to our file so
05:48 - we just tried to read the contents from
05:50 - the closed file and got our error but
05:52 - let's look at how we can read the
05:54 - contents from the file from here within
05:56 - our context manager so let's create a
05:58 - variable called F underscore contents
06:01 - and this will just hold the contents of
06:04 - our file now if we do an F dot read and
06:08 - if I print this out oh and actually I
06:11 - need to actually print out that F
06:13 - underscore contents so if I save that
06:16 - and print that out then you can see that
06:19 - it printed out all of the contents of
06:20 - our file now if you have a small file
06:23 - then this is probably what you want but
06:25 - what if we have an extremely large file
06:27 - that we want to read but we don't want
06:29 - to load all of the contents of that file
06:31 - into memory well there are a couple of
06:33 - other methods here that we have
06:35 - available for reading file contents
06:37 - instead of F dot read so just to look at
06:40 - a couple of those
06:41 - I could say F dot read lines and if I
06:45 - print this out then you can see that we
06:47 - get a list of all of the lines in the
06:50 - file and it looks a little weird because
06:51 - we have our newline characters in there
06:53 - but if we look through this list then it
06:56 - actually gets every line of the file as
06:59 - a different element of that list now
07:02 - instead of F dot read lines I could do F
07:05 - dot read line and if I save that and run
07:08 - it now you can see that read line
07:10 - grabbed the first line of our file now
07:13 - every time that we run F dot read line
07:15 - it gets the next line in our file so if
07:19 - I was to copy all of this and then do it
07:22 - again and run that now you can see that
07:25 - it got the first and the second lines
07:27 - from the file now this printed out a
07:29 - little weird here because the print
07:30 - statement ends with a new line by
07:33 - default but if I go up here and pass in
07:35 - an empty string to the end of our print
07:39 - statements then it will no longer add in
07:43 - that extra new line and now you can see
07:45 - that those are the way that they are in
07:47 - the file okay but we still haven't
07:49 - solved our problem of how we can read
07:51 - all of the content from an extremely
07:53 - large file if we read the entire file
07:55 - and all at once then we could run out of
07:58 - memory and we don't want to go through
07:59 - and do F dot read line you know
08:02 - thousands of times so what we're going
08:04 - to do here is instead of using read line
08:07 - or read lines we can simply iterate over
08:09 - the lines in a file by saying for let me
08:15 - go to a new line here for line in F and
08:19 - then from here we can just print that
08:22 - line so I'm going to copy that and save
08:25 - that so now let me go ahead and comment
08:28 - out these lines and run this iteration
08:30 - over the lines and you can see that it
08:32 - printed out all of the lines in our file
08:35 - now this is efficient because it's not
08:37 - reading in all of the contents from our
08:40 - file all at once so it's not a memory
08:42 - issue that we have to worry about what
08:44 - it's going to do is it's just going to
08:46 - go through and get one line at a time
08:48 - from the file now this is usually good
08:50 - enough for most people but sometimes you
08:53 - may want more control over a
08:54 - exactly what you're reading from the
08:56 - file now if we go back I'm going to go
08:59 - ahead and delete this line if we go back
09:01 - to our F dot read line here and I'm
09:05 - going to get rid of that one now I'm
09:09 - going to go back to using F dot read and
09:11 - if you remember this red and the entire
09:14 - contents of the file so if I run that
09:16 - you can see that we got the exact same
09:18 - thing well with F dot read we can
09:20 - actually specify the amount of data that
09:22 - we want to read at a time by passing in
09:25 - the size as an argument so if I pass in
09:28 - a 100 to our read method and then print
09:32 - this out you can see that it printed out
09:35 - the first 100 characters are of our file
09:37 - instead of printing the whole thing all
09:39 - at once now if I was to copy this and
09:43 - run this again then you can see that it
09:47 - printed out the rest of the file because
09:49 - it picked up where it left off and read
09:52 - 100 more characters of the file now when
09:54 - we reach the end of the file then read
09:57 - will just return an MG string so if I
09:59 - was to copy this for a third time and
10:02 - rerun this then you can see that nothing
10:05 - happens because what happens when we
10:07 - reach the end of the file read just
10:09 - returns an empty string so this print
10:11 - statement is just printing out an empty
10:13 - string okay so how are we going to use
10:16 - this technique in order to read in a
10:19 - large file so since we don't know
10:22 - exactly how long the file will be we're
10:24 - going to have to use some kind of loop
10:26 - that just iterates over small chunks at
10:28 - a time
10:29 - so instead of hard-coding in 100 here
10:32 - I'm going to create a variable here
10:35 - called size to read and for now we'll
10:38 - just go ahead and set that equal to 100
10:41 - so now if instead of passing in 100 to F
10:44 - dot raid let's just pass in this size to
10:47 - read ok so this will grab the first 100
10:50 - characters of our file now remember when
10:53 - we hit the end of the file then read
10:55 - will just return an empty string so if
10:58 - we do a while loop and say while the
11:02 - length of F contents is greater than 0
11:08 - then we will print out the contents that
11:11 - we got from read now don't run it like
11:14 - this yet because this will be an
11:16 - infinite loop we're never advancing the
11:18 - contents of the file after it prints the
11:21 - contents and we want to read in the next
11:24 - chunk of characters so in order to do
11:26 - that then we just have to again say F
11:29 - contents equals F dot read of that sized
11:34 - chunk now what it's going to do after
11:36 - this line here is that it's going to
11:38 - kick us back out to the while loop and
11:41 - it will check if we've hit the end of
11:44 - the file because F dot read will return
11:47 - an empty string and it won't meet this
11:49 - conditional so now if I go ahead and run
11:52 - this then you can see that it printed
11:54 - out all of the contents of our file so
11:56 - to get a better idea of what's going on
11:58 - here let's change the size to read to
12:01 - ten characters instead of a hundred
12:03 - characters and every time that we print
12:06 - out F dot contents here instead of an
12:08 - empty string let's make this an asterisk
12:12 - so now if I print this out then you can
12:15 - see it's a little more clear that we're
12:17 - looping through ten characters at a time
12:19 - and it's printing out these asterisks
12:21 - through every loop so you can see that
12:24 - it came through the loop here and it
12:25 - printed out these and then the asterisks
12:28 - that we know that it's just that chunk
12:29 - then it printed out the next ten
12:31 - characters and then the next ten
12:33 - characters and so on until we got to the
12:34 - end of the file now when we read from
12:36 - files you can see that it advances its
12:38 - position every time so we can actually
12:41 - see the current position using F dot
12:44 - tell so what I'm going to do is I'm
12:46 - going to comment out this while loop
12:49 - here and down here I'm going to say
12:52 - print and will print out F dot tell so
12:57 - if I go ahead and run that you can see
12:59 - the F dot tell returned ten so it's
13:02 - saying that we're currently at the tenth
13:03 - position of the in the file and that's
13:06 - because we've already read in ten
13:08 - characters here and we can manipulate
13:10 - our current position using the seek
13:14 - method so to show an example of this let
13:17 - me print the first 20 characters of the
13:20 - file by running F
13:22 - dot read twice so I'm going to go ahead
13:24 - and print out the contents after the
13:27 - first 10 characters there and then I'm
13:30 - going to do this a second time to get
13:33 - the next 10 characters and I'm going to
13:35 - go ahead and take out this second empty
13:39 - string there so that it pushes our
13:41 - finished statement out of the way so now
13:43 - actually let me get rid of F dot L here
13:46 - and go ahead and run this so we can see
13:49 - that it printed out the first 20
13:51 - characters of our file now when we read
13:55 - in this second chunk here it picked up
13:58 - at the tenth position
13:59 - and read in the next ten characters like
14:02 - we would expect but what if I wanted
14:04 - that second read to instead start back
14:07 - at the beginning of the file and we can
14:10 - do this with F dot C so between these
14:14 - two reads if I was to do an F dot seek
14:18 - of zero and save that and ran it now you
14:22 - can see that it set our position back to
14:26 - the beginning of the file so the second
14:28 - time we read in our contents it starts
14:31 - back at the beginning instead of picking
14:33 - up where we left off after the first
14:35 - read now we used seek zero to start at
14:39 - the beginning of the file you can use it
14:41 - to change the position to any location
14:43 - that you'd like ok so now let's take a
14:45 - look at writing to files and a lot of
14:47 - this will be similar to reading so first
14:50 - of all what happens if we try to write
14:53 - from within a file that we have opened
14:57 - in read mode so let's go ahead and try
15:00 - that so I'll do an F naught right and
15:02 - I'll just do an F dot right of test I'm
15:05 - going to go ahead and get rid of that
15:07 - while loop also and save that so you see
15:10 - when I have a file open in read mode and
15:13 - try to write that we get an error that
15:15 - says that this is not writable so we
15:18 - have to have the file open in write mode
15:19 - so now back up here within our open
15:23 - statement let's create a new file called
15:25 - test2 dot txt and instead of reading we
15:30 - are going to write to it now in order to
15:33 - do that we can just say a lowercase
15:36 - w instead of that lowercase R now you
15:38 - can see over here in our directory that
15:40 - we don't have a test - txt yet
15:43 - now if the file doesn't exist already
15:45 - then this will go ahead and create it
15:48 - now if the file does exist then it will
15:50 - overwrite it so be careful if you're
15:52 - writing to a file that already exists
15:55 - now if you don't want to overwrite a
15:56 - file then you can use a lowercase a for
15:59 - appending to the file but we're going to
16:01 - go ahead and Rove write this file if it
16:03 - exists so first of all instead of
16:05 - writing to this file I'm just going to
16:07 - go ahead and put in a past statement
16:09 - here which basically says don't do
16:12 - anything so I'm going to go ahead and
16:13 - run this and you can see that it created
16:16 - test - txt so I didn't actually have to
16:20 - write anything to the file in order to
16:22 - create it just using the open with the
16:25 - write mode will create the file so now
16:28 - in order to write to this file then we
16:31 - can just do what we did before we can do
16:33 - an F dot write test.txt so I'm going to
16:37 - go ahead and run that now if we go over
16:39 - here to test - txt then you can see that
16:42 - it wrote test to our file now if I go
16:45 - back here and do another write to this
16:48 - file then it's going to pick up where we
16:51 - left off just like the read method did
16:54 - so now if I run this and go back to the
16:57 - file then you can see that it wrote test
17:00 - twice back to back now you can actually
17:02 - use seek when writing files also to set
17:05 - the position back to the beginning of
17:07 - the file and we can do this if I go back
17:10 - here between these two write statements
17:12 - and I was to do an F dot C of zero now
17:15 - if I run this then you can see that the
17:19 - second test over wrote the first one so
17:22 - C can get a little confusing for file
17:25 - right because it doesn't overwrite
17:27 - everything only what it needs to
17:29 - overwrite so for example if instead of
17:32 - writing the same thing twice if I was to
17:34 - do an F dot seek at the beginning and
17:37 - write out and R as my second one there
17:40 - and now if I run that and go back to the
17:42 - file then you can see that the are only
17:45 - overrode the T and test it didn't delete
17:49 - the rest
17:50 - of the content so using file seek
17:52 - whenever I am writing to files it can
17:55 - get a little confusing and I don't use
17:57 - it a whole lot but maybe there are some
17:59 - use cases out there that you guys will
18:00 - find it useful for okay so let's go
18:03 - ahead and pull all of this together and
18:05 - use read and write on multiple files at
18:08 - the same time so we're going to use this
18:11 - to make a copy of our test dot txt file
18:14 - so let's go ahead and delete our test2
18:17 - dot txt file here so that we don't
18:20 - confuse the two and I'm going to go
18:21 - ahead and close that there okay so I'm
18:24 - going to go ahead and get rid of these
18:26 - here
18:27 - so first let's open our original test
18:30 - txt file in a read mode and instead of F
18:35 - here I'm going to use our F and I'll
18:38 - just say our F therefore read file since
18:41 - this is the file that we're going to
18:42 - read from in order to write to our copy
18:45 - so now within this with statement here
18:49 - I'm going to go ahead and let's go ahead
18:52 - and copy all of this and paste another
18:55 - open within here I'm going to call this
18:58 - a test underscore copy txt I'm going to
19:02 - open this in write mode and I'm going to
19:06 - call this WF for write file now you can
19:09 - actually put both of these open
19:10 - statements on a single line separated by
19:13 - a comma but I think readability here is
19:16 - pretty important and mixing those two on
19:18 - one line is sometimes difficult to
19:19 - understand at least for me so this is
19:21 - usually how I work with multiple files
19:23 - at a time as putting them on two
19:25 - different lines one nested within the
19:29 - other okay so now within here we have
19:31 - two files open our F for reading our
19:34 - original file and WF for writing to our
19:37 - copy not to do this it's just as easy as
19:40 - saying for line in our F we want to do a
19:47 - WF dot right of that line okay so now
19:53 - let's walk over this one more time so we
19:55 - have our original file opened and we're
19:58 - reading from that file and we have a
20:00 - file that doesn't exist yet that's our
20:02 - copy and we're
20:03 - writing to that file and we're saying
20:05 - for each line in our original file write
20:10 - that line to WF which is the file that
20:13 - we are copying to so if I go ahead and
20:16 - run that now you can see that it created
20:19 - this test copy dot txt file and if I
20:21 - open this you can see that it is an
20:23 - exact copy of our original ok and lastly
20:26 - let's look at how we can do something
20:28 - similar and copy a large picture file
20:31 - now this is going to be slightly
20:32 - different so if I look in my current
20:35 - directory that has my Python script that
20:37 - I'm currently running I also have a
20:39 - picture of my dog here when he was a
20:41 - puppy and let's go ahead and try to copy
20:44 - this picture file using file objects in
20:47 - Python now this file here is called
20:49 - Bronx jpg and if I just try to replace
20:53 - our text files with these picture files
20:57 - and down here I'll call this Bronx
21:01 - underscore copy dot jpg now this is
21:04 - exactly the same as our previous example
21:06 - but we're trying to use a picture
21:08 - instead of a text file now if I try to
21:11 - run this you can see that we got an
21:13 - error down here that says UTF codec
21:16 - can't decode byte in the position 0 so
21:20 - in order to work with images we're going
21:22 - to have to open these files and binary
21:25 - mode and all that means is that we're
21:26 - going to be reading and writing bytes
21:28 - instead of working with text now I'm not
21:31 - going to go into the specifics but if
21:33 - anyone is curious about the differences
21:35 - then I'll try to leave some resources in
21:37 - the description section as to what
21:39 - exactly that means or for this case in
21:41 - order to work with these pictures to use
21:43 - binary mode we can just append a V to
21:48 - our read R here and our write W there so
21:53 - now with that one simple change if I
21:55 - save that and now run it then you can
21:58 - see that we do have this copied picture
22:00 - file here and if I go over to finder
22:03 - then you can see that that file copied
22:06 - exactly the way that the original is ok
22:10 - so last thing here now I said earlier
22:12 - that sometimes you want more control
22:14 - over exactly what you're reading
22:16 - and writing so instead of doing this
22:19 - line by line let's instead do this in
22:23 - specific chunk sizes and we saw
22:25 - something like this earlier when we were
22:27 - learning how to read our files so to do
22:29 - this let's just do a chunk size and
22:33 - we'll set this equal to 4096 now you can
22:38 - choose different sizes but this is the
22:39 - one that I'm choosing here so now let's
22:42 - do an RF chunk and we're just going to
22:46 - read in a chunk of our read file here so
22:49 - I'll say RF dot read and I'll pass in
22:53 - this chunk size so now we're reading
22:56 - that much data from our original picture
22:58 - so now let's create a loop that will
23:02 - write these chunks to our copy until
23:04 - there's nothing left to read from the
23:06 - original and if you remember from
23:08 - earlier to do this we can do a while
23:11 - loop and while the length of this chunk
23:14 - here is greater than zero then we want
23:19 - to take our copy file and write that
23:23 - chunk to it so I'm going to write this
23:25 - chunk to our copy and then to keep this
23:28 - from being an infinite loop I have to
23:30 - read in the next chunk size so I'll
23:33 - paste that in there to read in the next
23:36 - chunk from the original file so now if I
23:40 - come up here and I delete this copy that
23:42 - we just created so I'm going to delete
23:45 - that and now I'm going to go ahead and
23:47 - rerun it using the code that we just
23:49 - wrote and you can see that it made that
23:51 - copy there and if I go back over to
23:53 - finder and open up that copy then you
23:56 - can see that it made an exact copy of
23:57 - our original okay so I think that's
24:00 - going to do it for this video there's a
24:02 - lot more that we could look at with
24:03 - files and I'll plan on putting together
24:05 - some tutorials in the near future for
24:07 - how to work with temporary files in
24:09 - memory files and things like that but I
24:12 - hope that this was a good introduction
24:13 - into working with files and some of the
24:15 - useful things that we can do with them
24:17 - now if you do have any questions and
24:18 - feel free to ask in the comment section
24:20 - below and I'll do my best to answer
24:21 - those be sure to subscribe for future
24:23 - videos and thank you all for watching