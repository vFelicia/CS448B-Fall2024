00:00 - hey everybody how's it going uh in this
00:03 - python video we're going to be looking
00:05 - at what is the difference between St Str
00:08 - and
00:09 - re um now this is a question that I see
00:12 - that gets asked a lot um but if you uh
00:15 - go and try to test this out on your own
00:17 - or try to figure it out uh by yourself
00:20 - sometimes the answer isn't extremely
00:22 - obvious um so for example I have a
00:24 - little test file here um so if I save
00:27 - and run this you can see that I have a
00:30 - variable a that's equal to a list of 1 2
00:33 - 3 4 and variable B that is a sample
00:36 - string and if I print out Str Str and re
00:40 - of a down here they are both exactly the
00:44 - same thing of a list and if I print out
00:47 - St Str of B and R of B which is a string
00:51 - you can see that they're very similar uh
00:54 - this one doesn't have quotes around it
00:56 - and this one does have quotes around it
00:58 - so just from these simp test uh it's not
01:02 - extremely obvious as to what the
01:04 - difference between these are um so first
01:07 - of all let's go ahead and uh take a look
01:09 - at the python documentation for these
01:12 - now I have this blown up really large uh
01:14 - so that you guys can um so that you guys
01:17 - can read it so within the python
01:19 - documentation this is for Str Str it
01:22 - says that it returns a string containing
01:24 - a nicely printable representation of an
01:27 - object for Strings this Returns the the
01:30 - string itself uh the difference with RP
01:34 - re is that St Str does not always
01:37 - attempt to return a string that is
01:39 - acceptable to eval and its goal is to
01:42 - return a printable string um so let's
01:46 - take a look at what re is okay so it
01:51 - says that it returns a string containing
01:54 - a printable representation of an object
01:57 - uh this is the same value yielded by
01:59 - conversions reverse quotes it is
02:01 - sometimes useful to be able to access
02:03 - this operation as an ordinary function
02:06 - for many types this function makes an
02:07 - attempt to return a string that would
02:09 - yield an object with the same value when
02:12 - passed to eval um so I think that's
02:15 - enough for that so A even reading
02:18 - through the
02:19 - documentation doesn't M uh make it
02:22 - extremely clear as to what the
02:23 - difference between these are especially
02:25 - if you don't know what this uh eval is
02:28 - now if you dig deeper and you start uh
02:31 - looking at sites like stack Overflow and
02:33 - things like that to answer this question
02:35 - then you'll see kind of the consensus to
02:37 - this answer is that the goal of
02:41 - rpr is to be unambiguous and the goal of
02:45 - St is to be readable um so what does
02:49 - that mean exactly uh well let me show
02:51 - you an example of when something needs
02:55 - to be unambiguous and when something
02:56 - needs to be readable so I have a
02:58 - terminal pulled up here here and I
03:00 - already have a python interpreter
03:01 - started and I've already uh made a
03:04 - couple of variables here so I have
03:06 - variable a and I have variable B and
03:09 - without knowing what they are let me
03:11 - print out these variables as strings so
03:14 - if I do Str Str a then you can see that
03:18 - it looks like a date
03:19 - 2015 and then it's got this little uh
03:22 - tag on the End plus Zer looks like a
03:24 - time or a time zone or something like
03:26 - that so let me do St strb
03:30 - so it's the exact same thing so on the
03:33 - surface A and B are the same if you just
03:36 - look at the uh Str Str or what's
03:40 - returned by Str Str now if we look back
03:42 - here um at what we have written out here
03:45 - the goal of Str Str is to be readable
03:47 - and it is very read readable it looks
03:49 - like a date you can tell that this is
03:51 - probably the year the month the day and
03:53 - then hour minute second things like that
03:56 - now uh the goal of rpr is to be
04:00 - unambiguous so let's run these same
04:02 - values through re so if I run rpr a you
04:07 - can see okay this is a date time and
04:10 - then uh has the year the month and then
04:13 - you can see the time zone info here is
04:16 - uh UTC and if I do the same thing to B
04:20 - then it's just a string so that's what
04:23 - it means to be unambiguous um whenever
04:26 - we ran re on a and we can see that it's
04:31 - a datetime and what it meant in the
04:33 - python documentation about being able
04:36 - able to pass something to eval pretty
04:38 - much just means that uh now not all of
04:41 - them return values like this but pretty
04:43 - much it means that you should be able to
04:45 - uh put this in to Python and run it as a
04:49 - command so date time. dat time I should
04:51 - be able to copy this and paste it down
04:53 - here in The Interpreter and run it now
04:56 - in that case I got an error because the
04:57 - TZ info actually needs to be uh pz. UTC
05:03 - or something like that but really you
05:05 - can see that uh this line here uh hold
05:09 - on let me go ahead and clear the screen
05:12 - and rerun these again um so you can see
05:14 - that the that this line here it looks
05:18 - more like a python uh command than this
05:21 - one up here this one's meant to be
05:22 - readable and this one is meant to be
05:26 - unambiguous so to kind of drive this
05:28 - point home let me bring up the file U
05:31 - that does the same thing as what I just
05:33 - had there in The Interpreter and just
05:35 - ignore these print statements here I'm
05:37 - just uh doing a cheap way of adding in
05:39 - new lines um but you can see here that I
05:41 - have a is equal to date time. dat time
05:44 - UTC now things like that and then B I
05:48 - just set equal to the string
05:50 - representation of a now whenever I print
05:53 - out the Str Str uh values of these
05:58 - variables you can see that they look the
06:00 - same just like they did in the terminal
06:02 - window I had pulled up and the r values
06:05 - here you can see that one is date time.
06:08 - dat time and the other one is just the
06:10 - string
06:11 - representation um of that variable so
06:14 - really a good way to think of this is
06:16 - that the representation the rpr um is
06:21 - really used for is is really meant for
06:24 - developers like if I'm debugging
06:26 - something and something's not working
06:28 - the way that it's supposed to to you
06:29 - know this might be a good example maybe
06:31 - you get a a value back from a database
06:34 - that's a date time and you forget to
06:37 - convert it to a date time and it's just
06:38 - a string well if you just print out the
06:40 - string you're not going to be able to
06:42 - tell that that's a string it's just
06:43 - going to look like these values down
06:45 - here it's going to be uh the Str Str
06:48 - value is just going to look like this
06:50 - they're going to be the same but if you
06:52 - print out the rpr value of it then you
06:55 - can obviously see that it's either a
06:57 - string or that it's a date time um so
07:00 - that's meant for developers and if
07:01 - you're G to uh show if you want
07:04 - something to be uh userfriendly for
07:06 - somebody who's a non-developer then you
07:08 - want to use Str Str because um someone
07:11 - who's less familiar with programming
07:13 - they don't want to see this date time.
07:15 - dat time TZ info stuff like that it's
07:17 - going to be confusing to them this is a
07:19 - more userfriendly version of that so I
07:22 - hope that made sense to you guys I hope
07:24 - that uh it kind of uh cleared up when
07:27 - you would use one over the other
07:30 - um so but if you guys do have any
07:31 - questions you know just ask in the
07:33 - comment section below um and be sure to
07:35 - subscribe for future tips and tutorials
07:38 - and uh thank you guys for
07:43 - watching