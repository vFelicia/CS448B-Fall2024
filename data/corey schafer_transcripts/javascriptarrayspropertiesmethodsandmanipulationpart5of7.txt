00:00 - so what the filter method does is it
00:03 - runs every element in your array through
00:06 - a specified function and that function
00:10 - will look at every element and it will
00:13 - run it through a condition and if that
00:15 - condition returns true then that element
00:18 - gets added to a return array so filter
00:22 - returns an array of elements that met
00:26 - every condition in your function the
00:28 - best way to show you this is just to
00:30 - show you an example so for example here
00:33 - I have a an array with a bunch of random
00:36 - integers and then here I'm printing this
00:39 - array out to the screen so if we write a
00:43 - function called num over
00:47 - now this callback here is going to have
00:50 - access to the same parameters that we've
00:53 - seen before in the other callbacks it's
00:54 - going to have the element of the array
00:57 - the current index of the array and then
00:59 - it's going to have the original array
01:02 - that we're doing the operations on so
01:06 - for this example let's just return
01:09 - whether the element
01:12 - is greater than 20.
01:16 - and then down here
01:18 - where we have this VAR filtered array
01:21 - let's set this equal to
01:24 - the array dot filter and then let's pass
01:27 - in
01:29 - this num over function here
01:32 - and then let's print this filtered array
01:35 - out to the screen let me save that now
01:38 - you can see down here in this filter
01:39 - array every element is over 20. if I
01:44 - came up here to this num over function
01:47 - and said less than 20 and save that now
01:51 - if we come down here to the filtered
01:52 - array we can see it only pulled out the
01:55 - elements that were less than 20. so you
01:58 - can do any check within this function
02:00 - that you want and it will return a new
02:04 - array of all the elements that meet
02:07 - whatever condition it is that you
02:10 - specify
02:11 - so that is a simple example using some
02:17 - integers let's try an example using
02:22 - an object here
02:24 - and pretty much with the object you're
02:26 - just going to do the same thing that you
02:27 - did for the array of integers you see
02:29 - that our array here is an array of
02:31 - objects and each one of these objects
02:32 - has a name and an age so if we wanted to
02:36 - code if we wanted to filter out let's
02:39 - say ages over the age of 30 then I could
02:43 - say
02:45 - function filter age and
02:48 - like I said before you don't have to
02:50 - pass in all those parameters here I'm
02:51 - just going to pass in the element
02:53 - and then I'm going to return any element
02:57 - that is greater
02:59 - actually that's going to be
03:01 - element.age because this is now an
03:04 - object so we wanted to turn element.age
03:08 - over 30.
03:10 - and let's uncomment out this variable
03:13 - here
03:14 - and let's set this equal to
03:17 - array let's see this is array 14.
03:21 - 14 dot filter
03:24 - and pass in
03:27 - filter age and let's print this out
03:31 - to the screen save that
03:34 - and now we can see down in our filtered
03:37 - array
03:38 - we only have John and Steve because both
03:42 - of those are over the age of 30. so that
03:47 - is how the filter method works now let's
03:51 - go down here
03:53 - and take a look
03:54 - at
03:56 - the method every
03:58 - the every method is a little similar to
04:02 - the filter method but instead of it
04:06 - returning an array of all the element
04:09 - elements that meet the criteria it
04:12 - checks to see if every element meets the
04:14 - criteria and it returns a Boolean that
04:16 - is true or false
04:18 - saying whether all those elements met
04:22 - the criteria in the function so for
04:25 - example if I write a function
04:28 - is every and I'm just going to pass in
04:30 - the element here but it could also have
04:33 - access to the index and the original
04:35 - array and let's just return if every
04:40 - element
04:41 - is greater than 10.
04:44 - and then I will uncomment out
04:46 - this variable passed here and I'll set
04:49 - this equal to
04:51 - array 15
04:54 - dot every
04:56 - and then I'm going to pass in
04:58 - this is every function
05:02 - and then I'm going to uncomment out this
05:04 - line here to print it out to the screen
05:07 - and you can see my every result is false
05:10 - because if we look at the array we have
05:13 - this value 4 here so every element in
05:16 - the array is not greater than 10 and as
05:19 - soon as it hits this 4 value it'll just
05:22 - return false immediately because it
05:24 - knows from that point on that not every
05:26 - value in the array is over 10. if I
05:30 - would change this 4 to a 14 and save
05:33 - that now you can see down here where I'm
05:36 - printing this out every result is equal
05:39 - to true because every value in this
05:41 - array is greater than 10. so that is a
05:47 - short example using an array of integers
05:49 - now let's take
05:52 - a look at an example
05:55 - that is using an array of objects and
05:58 - this is just the same array of objects I
06:00 - used last time with
06:02 - three elements here each having a name
06:06 - and an age
06:08 - so this time I'm going to write a
06:09 - function
06:10 - called all under
06:13 - and pass in the element
06:17 - and we will check if all of these
06:18 - elements are under the age of
06:22 - uh
06:24 - 50. so I will do element
06:27 - actually that'll be return element
06:31 - dot age
06:34 - is under 50.
06:37 - and let me uncomment out this variable
06:40 - here
06:42 - set array 15.
06:45 - every
06:47 - and we'll pass in this all under
06:49 - function
06:51 - and then let me output this to the
06:53 - screen
06:56 - I'll put that
06:57 - so we have the every result is false
07:00 - because every one of these elements does
07:04 - not have an age that is under the age of
07:06 - 50. if I would check if all of these
07:09 - ages are under the age of 60 and save
07:12 - that now you can see down here that my
07:15 - every result is true so that's a few
07:18 - examples of how the every method works
07:22 - let me comment that out
07:24 - and now let's take a look
07:28 - at the sum method
07:31 - now we'll just take a quick look at this
07:33 - one because it is so similar to the
07:35 - every method what sum does uh whenever
07:39 - we looked at every it would return false
07:43 - as soon as one of the elements didn't
07:45 - meet the criteria in the sum method it
07:48 - will return true as soon as one of the
07:52 - elements do meet the criteria so for
07:55 - example if I have a function here and
07:58 - I'm going to call this sum odd and I'm
08:01 - going to pass in the element
08:03 - now for some odd I'm just going to
08:07 - return
08:07 - whether the element
08:13 - mod 2
08:15 - equals equals one and that will let us
08:18 - know whether this element is an odd
08:22 - number so then the uncomment out this
08:25 - variable here
08:26 - I'll set this equal to
08:28 - array 16.
08:30 - oh that sun
08:33 - and we will pass in the
08:36 - some odd function save that and let me
08:39 - output
08:41 - that to the screen and you can see that
08:44 - my sum result is false if we look at the
08:48 - array here every single one of these
08:51 - elements is even so it's saying that
08:54 - there are not there are not some of
08:57 - these some of these elements that are
08:59 - odd if I made one of these odd and I put
09:02 - this at 21 and save that now you can see
09:05 - that my sum result is true because it
09:07 - says
09:08 - are some of these odd looks at the array
09:12 - as soon as it hits this 21 it returns
09:14 - true because that's all it needs it just
09:17 - needs the one
09:18 - so that is our example with an array of
09:23 - integers really quick
09:26 - we will take a look
09:29 - at an array of objects it's the same
09:31 - array of objects that we've been using
09:33 - before with the name and the age
09:35 - and I'm just going to write a function
09:39 - here called sum age
09:41 - pass in the element
09:44 - and I will return whether the element
09:48 - dot age we will check if there are
09:53 - some people over 50. so let's do far
09:58 - past equals
10:00 - array 16 dot sum
10:04 - and then sum H save that let's output
10:08 - this to the screen
10:10 - save
10:11 - and you can see that our sum result is
10:13 - true because there is
10:16 - one person in here that has an age over
10:19 - 50 if I said are there some people in
10:21 - here that have an age over 60 and you
10:24 - can see down here that the sum result is
10:26 - now false so that is a quick look
10:31 - at the sum method
10:34 - now let's take a look at
10:38 - produce and reduce right