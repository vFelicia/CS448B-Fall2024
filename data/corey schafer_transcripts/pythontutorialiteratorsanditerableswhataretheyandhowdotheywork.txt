00:00 - hey there how's it going everybody in
00:01 - this video I wanted to go over iterables
00:03 - and iterators now there's a lot of
00:05 - confusion around these terms and exactly
00:07 - what they mean and I definitely
00:08 - understand the confusion because it's
00:10 - also something that took me a while to
00:11 - understand so take a list for example so
00:14 - a list is iterable but it is not an
00:17 - iterator so that can sound a little
00:18 - confusing but hopefully after you watch
00:20 - this video you'll understand exactly
00:21 - what these terms mean and how to
00:23 - determine when something is iterable and
00:25 - when something is an iterator and we're
00:27 - also going to learn how to make an
00:28 - object ourselves that is both an
00:30 - iterable and an iterator now this video
00:33 - isn't only about understanding these
00:35 - definitions it's also about
00:36 - understanding the concepts of iterators
00:38 - so that we can write better code so
00:41 - understanding these underlying concepts
00:42 - is going to help you write code that is
00:44 - more efficient and will also help you
00:46 - see solutions to certain problems in a
00:48 - way that you might not have thought of
00:49 - before so with that said let's go ahead
00:51 - and get started so to start off let's
00:53 - first talk about intervals now what does
00:56 - it mean if something is iterable well on
00:58 - a higher level it simply means that it
01:00 - is something that can be looped over so
01:02 - for example a list is iterable because
01:05 - we can loop over a list now I know this
01:07 - might seem pretty basic right now but
01:09 - just stick with me and we'll get to some
01:11 - lower level concepts in just a second
01:12 - but for now let's see what this looks
01:15 - like so I'm going to create a simple
01:17 - list and with a few items and then loop
01:19 - over it so I'll say nums is equal to and
01:22 - we'll just set this equal to one two
01:24 - three and now let's loop over this so on
01:27 - the next line here I'll say for numb in
01:29 - nums
01:30 - and then we'll just print out the number
01:33 - so if I run that then you can see that
01:35 - it loops through and we get the values
01:37 - one two three now loops aren't the only
01:39 - things that we can loop over we can loop
01:41 - over tuples dictionaries strings files
01:44 - generators and all kinds of different
01:46 - objects so what's actually going on in
01:49 - the background there how can we tell if
01:51 - something can be looped over or not or
01:53 - another way to ask this is how can we
01:55 - tell if something is iterable if
01:58 - something is iterable then it needs to
02:00 - have a special method called double
02:02 - underscore itter
02:04 - so let me write this out that is double
02:06 - underscore hitter now if you've seen my
02:08 - series on object-oriented programming in
02:10 - Python then you might know that these
02:12 - double underscore math
02:13 - kids are also called dunder methods or
02:15 - special methods or also magic methods so
02:18 - let's see if our list has this dunder
02:20 - inter method so to look at the methods
02:23 - and attributes available to a specific
02:25 - object we can simply pass that into the
02:27 - built-in dir function and print that out
02:30 - so I'm going to comment out our for loop
02:34 - for now and right below this I'm going
02:36 - to print dir and pass in our list of
02:40 - nums okay so this returns a good bit of
02:43 - stuff here let me make this a little
02:44 - larger so we can see all of these now
02:46 - this returns a lot of methods and
02:48 - attributes but if we look through here
02:50 - then we can see that one of these
02:51 - methods is double underscore itter so
02:54 - our list does have that dunder itter
02:55 - method so basically something can be
02:58 - looped over if it has that method so
03:00 - what the for loop is doing in the
03:02 - background is calling it err on our
03:04 - object and returning an iterator that we
03:06 - can loop over so that is why we call a
03:09 - list iterable okay so that brings us to
03:11 - iterators so I said that a list was
03:14 - iterable but it's not an iterator but if
03:17 - we run the dunder itter method on our
03:20 - list then it will return an iterator so
03:22 - what makes something an iterator so an
03:25 - iterator is an object with a state so
03:27 - that it remembers where it is during
03:30 - iteration now I know all of these terms
03:32 - might be running together but I think
03:34 - this is all going to make sense when we
03:35 - see some examples so like I said an
03:38 - iterator has a state where it knows
03:40 - where it is during iteration and
03:42 - iterators also know how to get their
03:45 - next value they get their next value
03:47 - with a dunder next method so if I look
03:50 - at my list methods here then you'll see
03:52 - that there's no dunder next method in
03:55 - for our list so our list doesn't have a
03:58 - state and it doesn't know how to get its
04:01 - next value so therefore it isn't an
04:03 - iterator so for example if I try to
04:06 - print the next value of my list so if I
04:08 - go up here and just say print next nums
04:11 - and run that then this gives us an error
04:14 - and we can see that the error that we
04:15 - get says type error list object is not
04:18 - an iterator and by the way when I pass
04:21 - an object into that next function like
04:23 - that in the background it's actually
04:25 - trying to run the dunder next
04:27 - method on that object and we saw that
04:29 - our list doesn't have a dunder next
04:32 - method so that's why it's telling us
04:33 - that our list object isn't an iterator
04:35 - and it's throwing an error there okay
04:37 - but I did say that when we run our
04:39 - dunder itter method that it returns an
04:42 - iterator for us so let's try that
04:44 - so let's manually run that inner method
04:47 - on our list and see what the returned
04:49 - iterator looks like so above the for
04:52 - loop here I'm just going to say i
04:54 - underscore nums oops i underscore nums
04:58 - is equal to numbs dot double underscore
05:01 - hitter okay so now we have an iterator
05:04 - of our nums list now this is what the
05:06 - for loop gets for us in the background
05:08 - so let's print this out and let's also
05:10 - pass this into the dir function and see
05:13 - what methods and attributes are
05:14 - available to our iterator so above here
05:18 - I'm just going to cut this out and right
05:20 - underneath here I'm going to print out
05:23 - dir of I numbs and I'm also just going
05:27 - to print this out by itself as well so
05:30 - let's just print out I nums
05:33 - and save that and run it okay so we got
05:35 - some output here but before we go over
05:37 - this let me change one thing here real
05:39 - quick so it's a bit ugly to run our
05:42 - dunder methods directly like this so for
05:44 - most of these there are functions that
05:46 - call these in the background for us so
05:48 - just like I said that the next function
05:50 - calls the dunder next method the inner
05:52 - function calls the dunder inner method
05:54 - in the background so instead of doing it
05:56 - like we have here we can instead just
05:59 - say it er of nums and that will be the
06:03 - same thing so if we rerun this then we
06:06 - can see that we still get the same
06:07 - output but we don't have to run that
06:09 - ugly dunder method okay so now let's go
06:11 - over this so we can see that when we
06:13 - print it out our iterator that it tells
06:17 - us that this is a list iterator and
06:19 - there are lots of dunder methods
06:22 - returned here but the two that we want
06:24 - to focus on are dunder it ER and dunder
06:26 - next so we can see here that we have
06:28 - dunder it er method here and this also
06:31 - has a dunder next method as well now you
06:34 - might think it's a little weird that
06:35 - this iterator has a dunder itter method
06:38 - because that's what we ran on our
06:40 - list in order to get the iterator that
06:43 - we have now but it has to have a dunder
06:46 - inter method because iterators are also
06:48 - iterable but the difference is that this
06:51 - double underscore itter method returns
06:53 - the same object so it just returns self
06:56 - and we'll see an example of this in just
06:58 - a minute okay so if we remember when I
07:01 - ran next on our original list it threw
07:03 - an error and said that our list wasn't
07:05 - an iterator and that's because it didn't
07:07 - have the dunder next method but our
07:10 - iterator that we just returned here does
07:12 - have a dunder next method so we should
07:14 - be able to get the next value from this
07:16 - so let me comment out these print
07:18 - statements here and underneath this let
07:21 - me print out will just print out next
07:24 - and we want to print out the next of the
07:27 - i underscore nums
07:29 - so if we run that then we can see that
07:31 - it prints out the next value of our list
07:33 - which at this point is just the first
07:35 - item in the original list now remember I
07:37 - said that an iterator is an object with
07:39 - a state so that it remembers where it is
07:42 - during iteration so if we run next on
07:45 - this again then it should remember where
07:47 - it left off and print the next value so
07:49 - let's go ahead and try that so I'm going
07:51 - to copy and paste this a couple of times
07:53 - so we have three print statements here
07:55 - now and let me run this so we can see
07:58 - that each time we printed the next value
08:00 - it remembered where it left off and the
08:02 - next method pointed to the next value in
08:05 - the iterator okay so right now we've
08:07 - printed all of the items in our original
08:09 - list the original list only has one two
08:12 - and three so what happens if we print
08:14 - one more time so let me just paste in
08:17 - another one down here and save this and
08:19 - run it so we can see that when we ran
08:21 - that one more time we got an error so it
08:23 - threw a stop iteration exception now
08:27 - that's expected so if we run out of
08:29 - values then it raises a stop iteration
08:31 - exception but that's what iterators are
08:33 - meant to do so when we hit a stop
08:36 - iteration exception it means that the
08:38 - iterator has been exhausted and has no
08:40 - more values so we can see it when we run
08:42 - through them manually like this but when
08:44 - we run a normal for loop it knows how to
08:47 - handle the stop iteration exception and
08:49 - doesn't show it to us so in the
08:51 - background a for loop is basically doing
08:53 - something like this
08:54 - it's first getting an iterator of our
08:56 - original object like we've done here on
08:59 - line four and then it's getting the next
09:01 - values until it hits a stop iteration
09:03 - exception so basically it looks
09:06 - something like this so let me remove all
09:08 - of these here basically it's doing
09:10 - something like while true and then
09:13 - inside here try to get a next item so
09:17 - we'll say item equals next i underscore
09:20 - nums and then we'll just print that item
09:24 - for now now we also need to check for an
09:28 - exception so we'll say accept stop
09:30 - iteration and if we get a stop iteration
09:33 - then we will simply break out of the
09:36 - while loop so now if I run this code
09:38 - then we can see that we basically got
09:40 - the same result from before when we ran
09:43 - our simple for loop now another
09:45 - characteristic of iterators that I
09:46 - should have mentioned is that they can
09:48 - only go forward so there's no going
09:50 - backwards resetting it or making a copy
09:53 - of it you can only go forward by calling
09:55 - next if you need to start from scratch
09:57 - then you can simply create a new
09:59 - iterator object from scratch and just
10:01 - start that over okay so why does any of
10:04 - this really matter so what are the
10:05 - practical examples of knowing this well
10:08 - one example is that we can add these
10:09 - methods to our own classes and make them
10:12 - iterable as well so let's see an example
10:14 - so let's create a class that basically
10:17 - behaves like the built-in range function
10:20 - so I'm just going to overwrite
10:22 - everything here and I will close out of
10:26 - the output and now we're going to create
10:27 - a class that basically behaves like the
10:29 - built-in range function so I'll say
10:31 - class my range okay so at this point I
10:36 - should mention that we're going to get
10:37 - into some object-oriented concepts by
10:40 - creating classes and I do have a series
10:42 - on object-oriented programming and
10:43 - Python if any of you are interested now
10:46 - I cover a lot in that series that I'm
10:47 - not going to go into detail about here
10:49 - such as the anit method and instance
10:52 - attributes and things like that so if
10:54 - this part is confusing to you in any way
10:56 - then you can watch that series to get a
10:58 - better understanding of what we're doing
10:59 - here okay so if we're going to make our
11:01 - own range class that behaves like the
11:03 - built-in range then we need a starting
11:06 - point and an end point so in
11:08 - and nip method so I'll say def double
11:11 - underscore and knit so first we want to
11:14 - pass in self which will be the instance
11:16 - and then start and then in so that we
11:19 - have a start point and an end point and
11:21 - within the anit method I'll say self dot
11:24 - value is equal to the start and self dot
11:29 - end is equal to the end okay so now we
11:33 - want to make this class iterable now
11:35 - remember for something to be iterable
11:36 - and needs to have a dunder itter method
11:39 - so let's go ahead and add that so we
11:42 - will add a method here of double
11:45 - underscore I ter and that will take in
11:50 - self okay so at this point if we
11:54 - remember our inter method has to return
11:56 - an iterator and by that I mean that it
11:59 - has to return an object that has a
12:01 - dunder next method but we can simply
12:04 - create a dunder next method within this
12:06 - class itself and if we do that then we
12:09 - can simply return this same object from
12:11 - our inter method so we can just simply
12:14 - say return self now this object that
12:17 - it's returning here needs to have a
12:19 - dunder next method so since its
12:22 - returning itself it means that we need
12:23 - to add our dunder next method to this
12:26 - class so let's go ahead and do that so
12:29 - we'll say def double underscore next and
12:33 - we will take in self okay and at this
12:37 - point we need to figure out the logic in
12:39 - order for the iterator to step through
12:41 - the values now if you remember I said
12:44 - that iterators have a state and remember
12:46 - where they left off in the iteration and
12:48 - if they're out of values then it raises
12:50 - a stop iteration exception so first
12:53 - let's put in our check to see if there
12:56 - are any more values because we don't
12:58 - want to do anything if we're already at
13:00 - the end so let's go ahead and say if
13:02 - self dot value is greater than or equal
13:06 - to self dot end then we will simply
13:09 - raise a stop iteration okay so if our
13:13 - value isn't greater than or equal to the
13:16 - in value then we can just continue on so
13:19 - now we can say that the current
13:21 - you is equal to self dot value and then
13:27 - we want to increment self dot value so
13:29 - that we are actually looping through
13:31 - something so I'll say self dot value
13:33 - plus equals one and now we can just
13:37 - return that current value that we first
13:40 - grabbed okay so each time we run this
13:42 - next method it will come in and get the
13:44 - current value increment the old value by
13:47 - one and then return current so now this
13:50 - should work as an iterator so to use
13:53 - this let's just go ahead and create one
13:55 - of these objects so I'll say nums is
13:58 - equal to my range and we will pass in a
14:03 - start value of one and an N value of ten
14:07 - so now let me scroll down here a little
14:09 - bit
14:10 - now let's loop through this so I'll say
14:12 - for numb in numbs print out none so if I
14:19 - save that and run it then we can see
14:21 - that it looped through the values one
14:22 - through ten okay so this class that we
14:24 - created is iterable because we can use
14:26 - it in a for loop but it's also an
14:29 - iterator because it has a dunder next
14:31 - method so we should be able to call next
14:33 - on it manually to get the values one at
14:36 - a time so instead of our for loop let me
14:38 - just overwrite this and instead let's
14:40 - just print out next of nums so if I save
14:44 - that and run it then you can see that we
14:46 - just get the first value and let me do
14:48 - this a few more times here and save that
14:51 - and run it and you can see that it loops
14:53 - through the next values now if we were
14:56 - to continue on printing those out then
14:58 - eventually we'd hit the stop iteration
14:59 - exception okay so we're just about
15:02 - finished up with this video but there's
15:04 - one more thing that I want to show you
15:05 - about iterators so some of you may have
15:08 - used generators now they're extremely
15:10 - useful for creating easy-to-read
15:12 - iterators they look a lot like normal
15:14 - functions but instead of returning a
15:17 - result they instead yield a value and
15:19 - when a when they yield a value it keeps
15:23 - that state until the generator is run
15:25 - again and yields the next value so
15:28 - generators are iterators as well but the
15:30 - dunder it ER and dunder next methods are
15:33 - created automatically
15:34 - so we don't have to create them like we
15:36 - did in our class so with that said let
15:39 - me write a generator function that does
15:41 - the exact same thing that our range
15:43 - class does so to do this we can simply
15:46 - come under the class here and we can
15:50 - create a generator function by saying
15:53 - def and I'll just call this my
15:55 - underscore range and again we want a
15:58 - start and an end argument now this isn't
16:01 - a class so we don't need self here
16:04 - because we're not going to be working
16:05 - with specific instances so all we need
16:07 - our start and end parameters okay and at
16:10 - the beginning here we can just say
16:12 - current is equal to the start value that
16:15 - we pass in and now we'll just say while
16:18 - current is less than end then we want to
16:23 - yield the current value and then after
16:26 - we yield then we'll say current plus
16:29 - equals one and save that okay so now
16:32 - let's use this generator instead of our
16:34 - class and see if we get the same result
16:36 - and then I'll walk through this one more
16:38 - time just to point out exactly what's
16:41 - going on here so if I replace that and
16:44 - run it then you can see that we get the
16:46 - same result okay so let's think about
16:48 - what's going on here so when we create
16:50 - this it comes into this function here
16:53 - with a start value of one and an end
16:55 - value of 10 and then it sets current
16:57 - equal to start which means that current
17:00 - would be equal to one and then we're
17:02 - saying while the current is less than
17:04 - end then we want to yield the current
17:07 - value so the first time through it'll
17:09 - say while one is less than ten which it
17:12 - is so it'll come in here and yield one
17:14 - and then it will increment that by one
17:17 - and now we're still in this while loop
17:19 - so now current will be equal to two
17:22 - since it increment it by one and it says
17:24 - okay is two less than ten yes so yield
17:26 - the next value and then increment by one
17:28 - is 3 less than ten yes so yield that and
17:31 - it will keep doing that until it breaks
17:33 - out of this while loop and whenever it
17:35 - breaks out of that while loop then it
17:36 - hits that stop iteration exception so
17:38 - just like with our class we should be
17:40 - able to loop through this all the way
17:41 - using a for loop as well so if I say for
17:44 - numb in nums and then print
17:48 - none if I save that and run it then you
17:51 - can see that it prints out the values 1
17:53 - through 10 so this generator function
17:56 - works just like the class does that we
17:58 - created but I just think it's much more
18:00 - readable than the class so I like to use
18:02 - these generator functions whenever I can
18:04 - okay now the last thing that I want to
18:06 - say about iterators is that they don't
18:08 - actually need to end so one of the cool
18:10 - things about iterators is that they can
18:12 - simply go on forever
18:14 - so as long as there is a next value then
18:16 - our iterator will keep getting each next
18:19 - value one at a time so for example if I
18:21 - were to remove our end variable here and
18:23 - then just put in a true statement for
18:26 - our while loop so let me do that so I'll
18:28 - just remove this end parameter and then
18:31 - instead of putting in a conditional here
18:34 - I'm just going to say while true and now
18:37 - this generator no longer accepts an end
18:39 - value so we can just pass in a start
18:41 - value so I'm just going to remove the
18:43 - tin and say that we want to start at one
18:45 - so now our generator iterator is going
18:48 - to simply go on forever
18:49 - so since I'm looping through this with a
18:52 - for loop it's actually going to get
18:54 - stuck in an infinite loop and it's going
18:56 - to start printing from our start value
18:58 - counting up by one forever so I'll show
19:01 - you what this looks like but I wouldn't
19:02 - recommend you do this on your machine
19:04 - because it's hard to stop it from
19:05 - executing and can freeze up your
19:07 - computer but I'm gonna try to run it and
19:09 - stop it quickly so let me do this so I'm
19:12 - just going to quickly run this and then
19:14 - stop it okay so I was able to run that
19:17 - and then stop it by hitting ctrl C on my
19:20 - machine but even in that short time it
19:22 - already counted up by a lot so it
19:24 - counted up almost to a million values
19:26 - there and that would have continued
19:28 - going indefinitely if I hadn't stopped
19:30 - it now like I said the iterator can go
19:33 - on forever but it still only fetches one
19:36 - value at a time now this really comes in
19:38 - handy when writing memory efficient
19:39 - programs because sometimes there are so
19:42 - many values that you just couldn't hold
19:43 - them all in memory if you were to put
19:45 - them in a list or a tuple but if you
19:48 - simply use an iterator then you can loop
19:50 - over one value at a time until it's
19:52 - exhausted or just let it keep going so
19:55 - for example let's say that you were
19:56 - writing a password cracker and wanted to
19:59 - brute-force it by checking all of the
20:00 - possible password
20:02 - using a certain group of characters well
20:04 - there would be so many different
20:05 - possible passwords that you couldn't
20:07 - possibly hold them all in a single list
20:09 - your computer would just run out of
20:11 - memory but you could use an iterator to
20:13 - loop through all those possibilities one
20:15 - at a time and it might take some time
20:16 - until you find a result but your program
20:19 - wouldn't take up all of your computer's
20:21 - memory and it wouldn't crash so maybe
20:24 - we'll write a program that cracks easy
20:26 - passwords in the near future so that you
20:28 - can see how something like that would
20:29 - work okay so I think that we're just
20:31 - about ready to end the video but let's
20:33 - do a quick recap of everything that we
20:34 - learned since some of the stuff can kind
20:36 - of run together so what does it mean for
20:38 - something to be iterable so broadly
20:40 - speaking it means that it can be looped
20:43 - over but more specifically it means that
20:45 - the object needs to return an iterator
20:47 - object from its dunder itter
20:50 - method and the iterator that is returned
20:52 - from dunder itter
20:53 - must define a dunder next method which
20:56 - accesses elements in the container one
20:59 - at a time so just because something is
21:01 - iterable doesn't mean that it is an
21:03 - iterator and again what does it mean for
21:05 - something to be an iterator so that
21:07 - means that it's an object with a state
21:10 - so that it remembers where it's at
21:11 - during its iteration and it knows how to
21:14 - fetch its next value using the dunder
21:16 - next method and when it doesn't have an
21:18 - x value then it raises a stop iteration
21:20 - exception now I'm going to try something
21:23 - a little different with this video so
21:25 - I've put together a coding problem to
21:27 - practice what we've learned in this
21:28 - video and I'm going to release the
21:30 - problem and solution in a separate video
21:32 - shortly after this video is released and
21:34 - I've had requests for a long time to
21:36 - come up with some problems where viewers
21:38 - could practice what they've learned so
21:40 - I'm going to give that a shot and see if
21:41 - you all think that it's beneficial now
21:43 - the reason that I'm gonna release the
21:44 - coding problem in a separate video is
21:46 - because I want to keep the lessons and
21:48 - problem separate so that the lessons
21:50 - don't get too long also if anyone wants
21:52 - to skip the problems altogether
21:54 - then they can just simply skip the
21:55 - coding problem videos instead of trying
21:57 - to fast-forward through parts of the
21:59 - lesson so I'll leave a link to the
22:00 - coding problem for this video in the
22:02 - description section below if anyone
22:04 - would like to practice what we've
22:06 - learned here but with that said I think
22:07 - that's going to do it for this video
22:09 - hopefully now you have a clear
22:11 - understanding of what it means for
22:12 - something to be iterable and what it
22:14 - means for something to be a knitter
22:15 - now we also learned how to add this
22:17 - functionality to our own classes as well
22:19 - as writing generators with this
22:21 - functionality as well now that we've
22:23 - covered iterators one of my next videos
22:25 - that I release is going to be on the
22:27 - inner tools module and how that module
22:29 - provides some awesome tools for working
22:31 - with iterators but if anyone has any
22:33 - questions about what we covered in this
22:34 - video then feel free to ask in the
22:36 - comment section below and I'll do my
22:37 - best to answer those and if you enjoyed
22:38 - these tutorials and would like to
22:40 - support them then there are several ways
22:41 - you can do that the easiest ways to
22:42 - simply like the video and give it a
22:44 - thumbs up and also it's a huge help to
22:45 - share these videos with anyone who you
22:47 - think would find them useful and if you
22:48 - have the means you can contribute
22:49 - through patreon and there's a link to
22:50 - that page in the description section
22:51 - below be sure to subscribe for future
22:53 - videos and thank you all for watching
23:06 - you