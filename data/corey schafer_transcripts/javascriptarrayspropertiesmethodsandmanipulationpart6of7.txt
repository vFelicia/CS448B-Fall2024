00:00 - so reduce and reduce right
00:03 - are uh
00:04 - one of the harder methods to grasp just
00:07 - because
00:09 - um
00:10 - instead of running an array
00:13 - instead of running every element through
00:16 - a function and then getting a response
00:19 - reduce and reduce right
00:22 - will actually
00:23 - remember
00:25 - the previous response and apply it the
00:27 - next time around and i don't think i can
00:30 - describe it
00:31 - better than the chart over on the
00:34 - mozilla developer network so i'm just
00:36 - going to show you
00:38 - one of their examples here
00:41 - if you look at their example they have
00:44 - an array that is just 0 1 2 3 4
00:47 - and then they call reduce
00:50 - and then within reduce they are using
00:52 - their callback function and so far in
00:55 - this tutorial we've been pulling these
00:57 - call callback functions out and naming
01:00 - them but putting them
01:02 - inside here is
01:03 - basically the same thing
01:05 - so instead
01:07 - before we have usually called
01:10 - an element here and we've done element
01:12 - and then index and then array but with
01:14 - reduce we have previous value and
01:17 - current value
01:18 - and you can see here that they return
01:21 - previous value plus current value
01:24 - so
01:25 - there is two ways to call reduce you can
01:28 - either
01:29 - not provide an initial value or you can
01:32 - provide an initial value and if you
01:35 - don't provide an initial value
01:37 - then the first time through the first
01:40 - time it runs this function
01:42 - the previous value will be set to the
01:45 - first value of the array
01:47 - the current value will be the second
01:50 - element in the array
01:52 - if you do provide an initial value down
01:55 - here they have one with an initial value
01:58 - of 10
01:59 - and if they do provide one
02:01 - instead of this instead of the first
02:04 - time through the function instead of the
02:06 - previous value
02:07 - equaling the first element of the array
02:10 - it equals the initial value that you
02:12 - passed in and the current value equals
02:16 - that first element of the array
02:19 - but pretty much if we
02:21 - go through this step by step what's
02:23 - happening here
02:25 - is
02:26 - it calls this function
02:28 - on
02:30 - the
02:31 - on the first positions of the array so
02:33 - like i said here there's no initial
02:34 - value so the previous value zero the
02:37 - current value is one and what we're
02:39 - returning is previous value plus current
02:41 - value so zero plus one and then we can
02:44 - see over here they have the return value
02:46 - listed zero plus one is one
02:49 - and now this return value is saved as
02:52 - the previous value the next time around
02:55 - so now
02:56 - uh if we come down here to the second
02:58 - call this previous value is now equal to
03:01 - one
03:03 - and then the current value is the next
03:05 - value in the array which is two
03:08 - so one plus two
03:10 - is three
03:11 - so that three gets saved as the previous
03:14 - value for the next call
03:16 - so three and then we move on to the next
03:18 - value in the array which is now three so
03:20 - three plus three is six
03:23 - and then six it's carried over to the
03:25 - previous value again
03:27 - and then the next value in the array is
03:29 - four so previous value is six current
03:31 - value is 4 6 plus 4
03:33 - equals 10.
03:35 - so basically this reduced function is
03:38 - just a way to sum up all these values
03:41 - and if you provide
03:43 - the initial value here and it does the
03:45 - same thing except it just has this one
03:48 - extra call at the beginning that takes
03:50 - the initial value and adds it to the
03:53 - first element of the array and then that
03:55 - return value gets passed in as the
03:58 - previous value
03:59 - for the second call and it moves to the
04:01 - next index
04:03 - so
04:04 - if i pull this up in our examples here
04:07 - we have this array that is one two three
04:10 - four five
04:12 - if i
04:13 - made a function
04:15 - called add values
04:18 - and
04:19 - remember we'll have
04:20 - previous
04:21 - we'll have current
04:23 - and we can also pass in the index and we
04:25 - can also pass in the array
04:29 - so what we'll do here we'll just i'll
04:31 - just show you the example that they had
04:33 - so let's return
04:36 - previous
04:37 - plus
04:40 - current
04:41 - and then let me uncomment out this
04:43 - result variable here and we'll set the
04:45 - result
04:46 - equal to
04:48 - ray17
04:50 - dot reduce
04:51 - and we will pass in
04:54 - add values and save that and let me
04:58 - output this to the screen
05:01 - and you can see that the reduced result
05:03 - is 15 because 1 plus 2 is 3 3 plus 3 is
05:07 - 6. 6 plus 4 is 10 and 10 plus 5 is 15.
05:13 - so what if we did this with
05:15 - an array
05:17 - of
05:18 - characters so i'll uncomment that
05:21 - and now you can see this reduced result
05:24 - is a b c d e because
05:27 - the first time through it does a plus b
05:31 - and then
05:32 - a plus b
05:34 - which is a b
05:35 - it's passed in as the previous value so
05:38 - then the next time through you have a b
05:41 - plus c
05:42 - and then the next time through you have
05:43 - abc plus d
05:45 - and then you have a b c d plus e
05:48 - so that's how that works and i
05:51 - grouped together reduce and reduce right
05:54 - to show you at the same time because
05:56 - reduce right
05:58 - instead of
05:59 - starting at the zeroth element and
06:03 - working to the right what reduce right
06:05 - does is it starts at the end and it just
06:08 - goes to the left
06:10 - so if i was to do
06:12 - reduce right
06:13 - to these add values then you can see now
06:16 - this reduce result
06:18 - is reversed because
06:20 - it starts off
06:22 - here at e
06:24 - and e is the previous value
06:26 - current value
06:28 - is d
06:29 - so it says e plus d which is e d
06:32 - then the next time through ed is the
06:34 - previous value
06:35 - and then ed
06:37 - plus c is edc
06:39 - then edc plus b
06:42 - and then edc b plus a and then you get
06:45 - uh the entire reversed string as the
06:48 - result so hopefully that makes sense i
06:50 - know that this is one of the more
06:52 - complicated methods that we took a look
06:55 - at um just to come kind of hammer it in
06:58 - let's take a look
07:00 - at doing this with an object
07:04 - so let me uncomment out this
07:07 - and
07:08 - okay
07:10 - now you have to be careful when you're
07:11 - working with
07:13 - objects and this is why reduce can be a
07:16 - little complicated because you might run
07:18 - into some things that you didn't expect
07:20 - so for example if i was to do total age
07:22 - here
07:23 - then
07:24 - okay so we give previous
07:26 - current
07:27 - and then we'll just leave off the index
07:29 - and array since we're not using it
07:31 - so you would think
07:33 - that we could just do
07:35 - something like this previous.age plus
07:39 - current.h
07:41 - and you think that this would go through
07:44 - all of these elements here
07:46 - and see
07:47 - and add up all the ages the sum total
07:49 - total of the ages just like it did for
07:51 - the integers
07:53 - but
07:54 - if
07:55 - we run this bar result
07:57 - let's do
07:58 - array this is array 17
08:01 - ray17
08:02 - dot
08:04 - reduce
08:05 - and this is
08:06 - total age
08:08 - and save that
08:10 - and let's output this to the screen
08:14 - okay you can see that the reduced result
08:17 - is not a number so what's the deal here
08:20 - what happened
08:22 - well if we look at this further then you
08:26 - see i have some comments here
08:29 - whenever we
08:31 - first run through this total age
08:32 - function it starts off since we don't
08:35 - have an initial value
08:36 - the previous value will be the first
08:40 - down here where we've printed out the
08:42 - original this previous value will be an
08:45 - object with name quarry and age 28
08:48 - and the current will be
08:50 - an object with the name john and age 52
08:54 - so we're saying previous dot age plus
08:56 - current that age so 28 plus 52 that
08:59 - returns 80. okay so that's what we
09:02 - expected but then the next time through
09:04 - the next time it calls total age
09:07 - this return value gets passed in as
09:09 - previous
09:11 - so then we get to the point where it
09:14 - gets to previous dot age plus current
09:17 - dot age
09:18 - but it sees this 80 and this 80 doesn't
09:22 - have
09:23 - an age property so it doesn't know what
09:25 - to do and then that's where it kind of
09:27 - blows up
09:28 - so how can we solve something like this
09:30 - it's just something that we need to be
09:32 - aware of
09:33 - so we can do
09:35 - probably the best way there's probably
09:37 - multiple ways to solve this but
09:39 - probably one of the better ways is just
09:40 - to pass in an initial value
09:43 - of 0
09:45 - and then here instead of previous.age
09:48 - we could just do
09:49 - previous plus current.h
09:53 - and now what happens here
09:55 - whenever you pass in an initial value
09:58 - let me go ahead and change
10:00 - what my example is down here
10:02 - so
10:03 - let me move some of this stuff around
10:07 - okay so previous will be the initial
10:10 - value of zero
10:12 - current is going to be the first value
10:14 - of our array which is an object with the
10:16 - name query and the age 28
10:19 - so then we run previous which is zero
10:22 - plus current.age which is 28.
10:25 - so 0 plus 28 is 28
10:28 - and then this return value
10:30 - gets assigned to previous on the next
10:33 - call so we have previous which is 28
10:37 - um
10:38 - plus we're not looking up the dot age
10:40 - property so it's previous which is 28
10:43 - plus current.age which is
10:47 - this object here
10:48 - 52
10:50 - so this will
10:52 - return
10:54 - 80. save that and then the next time
10:56 - through it'll do
10:58 - 80 plus uh 36 which you can see down
11:02 - here now
11:04 - on in our html it's outputting uh 116.
11:08 - so that's what we expect when it adds up
11:10 - all those ages
11:11 - so that's just something that you have
11:12 - to look out for it might not be
11:15 - you have to
11:17 - keep in mind not only what's going to
11:19 - happen the first time you run through
11:20 - the method or through the method reduce
11:23 - but you have to keep in mind
11:24 - what it's going to be looking at
11:26 - every time it runs through and what
11:29 - previous values you're going to be
11:32 - or what values you're going to be
11:33 - assigning to that previous variable
11:36 - so
11:37 - hopefully that was
11:40 - a good look at reduce and you understand
11:43 - how that works
11:45 - so now let's take a look at
11:48 - the
11:49 - map method