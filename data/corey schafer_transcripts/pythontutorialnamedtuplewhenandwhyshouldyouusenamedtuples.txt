00:00 - hey how's it going everybody in this
00:02 - python video we're going to be taking a
00:03 - look at named tupal and what named tupal
00:07 - are and why we would use them um so you
00:10 - can think of a name Tuple kind of like a
00:13 - lightweight object that uh works just
00:16 - like a regular Tuple but it's more
00:19 - readable um so what do I mean by this so
00:22 - say that we want to represent uh RGB
00:26 - color values red green blue color values
00:29 - in code and say that we choose a tupal
00:32 - to do this so here is a regular tupal so
00:35 - we have color equal to and this will be
00:38 - our red uh 55 will be our red 155 will
00:40 - be our green 255 will be our blue so
00:44 - let's say that we wanted to print out
00:45 - the red value so in order to print out
00:47 - that red value we would just do print
00:50 - color and then we would do index of zero
00:54 - and if we run that code then you can see
00:56 - that we got 55 for the red value now
00:58 - what's going to happen here is that
01:01 - someone else is going to come and look
01:02 - at this code or even you could come and
01:04 - look at this code weeks and months later
01:07 - and they're going to read this and
01:09 - they're not going to know what's going
01:10 - on we have color equal to these numbers
01:13 - and then we're printing out uh the index
01:16 - of zero you know what are these numbers
01:18 - somebody could look at this and think
01:20 - you know is this H saturation and light
01:22 - or I don't know what's going on here so
01:25 - it would be really nice if this was more
01:27 - readable now the first idea that might
01:29 - pop into your head is to use a
01:31 - dictionary um so let's see what that
01:33 - would look like so let's grab a
01:36 - dictionary representation of this and
01:38 - let's paste this in here now instead of
01:41 - printing out this index of zero down
01:43 - here uh let's print out red and let's
01:46 - save that and if we run it you can see
01:48 - that we got the same thing it's 55 so
01:51 - what is wrong with this why wouldn't we
01:53 - choose to use a dictionary uh well first
01:55 - of all maybe we chose to use a tupal for
01:58 - a reason um so T pools are immutable um
02:02 - which means that you can't change the
02:04 - values maybe that's something that we
02:06 - wanted um and also dictionaries uh
02:10 - require a little bit more typing here so
02:12 - if we made more than one color we'd have
02:14 - to come in and type all this out every
02:17 - time we created a new color so a named
02:20 - tupal is kind of a good compromise
02:23 - between the tupal in the dictionary uh
02:26 - between readability and also it gives
02:28 - you the functionality of a tupal so
02:30 - let's go ahead and see what this would
02:31 - look like um so let me copy the example
02:36 - I have here and paste this
02:38 - in and let's go ahead and go over this
02:41 - and for now I'm going to go ahead and
02:43 - take out these values
02:48 - here okay so first of all to use the
02:50 - name Tuple uh first we have to import it
02:53 - so from collections import name Tuple
02:56 - and then this line here is the syntax
02:59 - that we use for name tupal so we'll do
03:02 - that we want a color equal to name Tuple
03:06 - and then the name of our name tupal and
03:09 - we'll do this as color I have all this
03:11 - typed out up top but I just want you to
03:13 - see uh if you are making one your
03:15 - yourself the steps here so the name
03:18 - tupal is named color and then these are
03:21 - going to be the values of the tupal so
03:23 - the values that we want for our tupal
03:25 - are
03:26 - red green
03:30 - and
03:33 - blue so that's what the syntax looks
03:35 - like to create a name Tuple now let's
03:38 - take a look at the advantages over a
03:40 - regular tupal here now if you remember
03:42 - when we created a regular tupal uh we
03:46 - just did the
03:48 - values like this and it wasn't very
03:51 - readable and now we are saying that we
03:55 - want this variable color equal to color
03:58 - which is what we called our name Tuple
03:59 - here and right now we have 55 155 255
04:04 - and that is red green and blue now I can
04:07 - still use this just like a regular tupo
04:09 - if I wanted to come in here and I wanted
04:11 - to do the in print the index of zero
04:14 - which would be our red value then I can
04:16 - print that and it prints out 55 but um I
04:20 - can also come in here and print these
04:23 - out by name so I can say color. red and
04:27 - print that out and you can see that it's
04:28 - 55 now you can see this is already a lot
04:31 - more readable than our regular tupal
04:34 - because whenever we come in here or
04:36 - somebody else comes in and looks at our
04:37 - code they're going to see okay they're
04:39 - printing out color. red so and then
04:42 - they're going to look up here and say
04:43 - okay this is a color uh with three
04:46 - values here and they can make a guess as
04:48 - to what that is now if you want to be
04:50 - really explicit you can actually come in
04:52 - here and uh add all these values in so
04:57 - that whenever you come back uh you know
04:59 - EX actly what those values are but even
05:02 - without those there um somebody's going
05:04 - to be able to come in and see okay uh
05:06 - you created this from uh this color here
05:11 - and then they can look back at the name
05:12 - tupal where you made that definition and
05:14 - they can see that it's red green and
05:16 - blue uh with the regular tupal you
05:18 - didn't have that that was that
05:19 - information was nowhere to be found and
05:21 - now if you remember also it's this is a
05:24 - lot less typing as well if you remember
05:26 - our dictionary here every time if we
05:29 - were to make a new color or something
05:32 - like that and I'll just call this
05:34 - something else so it doesn't collide
05:36 - with our other one so with our
05:37 - dictionary this uh we had all this
05:39 - typing to do uh but if I wanted to make
05:42 - another color from a name tupal then I
05:45 - don't have to type out all this stuff I
05:47 - can just do okay I want a color and
05:50 - white would be 255 255 255 and that's
05:54 - done and then later in the code if I
05:56 - wanted to print out um say the blue
05:59 - value of white then I would just do
06:02 - white. blue and you can see that that is
06:06 - 255 and uh that's also a little bit
06:09 - easier to write than the dictionary if
06:11 - you remember the dictionary we can't do
06:13 - this do syntax we'll get an error uh we
06:16 - have to put that in Brackets which isn't
06:20 - a big deal but it's a lot more typing
06:23 - it's a uh lot
06:26 - easier just to come in here and use the
06:30 - do syntax so hopefully that kind of
06:33 - clears up what a name tupal is and why
06:35 - exactly you would use one and also hope
06:38 - you can see how this is a lot more
06:40 - readable than what a regular tupal might
06:42 - be so whenever um someone else read your
06:45 - code or whenever you come back to your
06:47 - code in a couple of weeks or months uh
06:49 - then you're going to be able to take a
06:50 - look at this and see almost instantane
06:54 - instantaneously what's going on and with
06:56 - the regular Tuple example that we used
07:00 - um that would have been really hard so
07:02 - yeah I hope that cleared any uh
07:04 - questions that you had about name tupes
07:06 - um if you do have any questions then
07:08 - just ask in the comment section below um
07:10 - be sure to subscribe for future python
07:13 - videos and thank you guys for watching