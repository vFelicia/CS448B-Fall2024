00:00 - hey there how's it going everybody in
00:01 - this video we're going to be learning
00:03 - about the OS module and some of the
00:05 - useful things that we can do with it
00:06 - now the OS module allows us to interact
00:08 - with the underlying operating system in
00:11 - several different ways
00:12 - so for example we can navigate the file
00:14 - system get file information look up and
00:17 - change the environment variables we can
00:19 - move files around and all kinds of
00:21 - useful stuff so let's go ahead and take
00:23 - a look at a few of the things that we
00:25 - can do so first of all let's go ahead
00:27 - and import the OS module now this is a
00:30 - built-in module so we don't have to
00:32 - install any third-party libraries or
00:34 - anything like that
00:35 - now something useful when you're working
00:37 - with a new module if you print out this
00:41 - built-in dir function and pass in the
00:45 - module that you are working with this
00:47 - will show us all of the attributes and
00:50 - methods that we have access to within
00:53 - this module and you can see here that
00:55 - with the OS module there are plenty to
00:58 - choose from now we're not going to be
00:59 - going over each and every one of these
01:01 - but we will take a look at the ones that
01:03 - I kind of use on a regular basis and
01:06 - also the ones that I consider to be some
01:08 - of the most useful ok so for the first
01:10 - thing let's just print out the current
01:12 - directory that we are in now to do this
01:15 - we can use OS dot get CWD and that
01:20 - stands for get current working directory
01:22 - and you can see here whenever I print
01:24 - this out it prints out that we are
01:26 - within this folder on the desktop called
01:28 - module OS so now what if we wanted to
01:31 - navigate to a new location on the
01:33 - filesystem so let's say that we wanted
01:35 - to navigate to the desktop here so if I
01:38 - go ahead and just copy this path and
01:40 - this can be any path that you want I'm
01:42 - going to do an OS dot CH dir and that
01:46 - stands for change directory and I'm
01:48 - going to pass in the path as a string so
01:52 - if I save that and now I'm going to
01:55 - print out the current working directory
01:58 - after we change the directory now if I
02:01 - run that you can see that we were within
02:03 - this module folder and then we navigated
02:06 - to the desktop so now our current
02:08 - working directory is the desktop ok so
02:10 - now I'm going to take out this top print
02:12 - statement here
02:14 - okay so now let's see what files and
02:16 - folders are here on the desktop now to
02:19 - do this we can use a method called list
02:22 - dir for list directory now you can pass
02:25 - a path into list directory but by
02:28 - default it will list the files and the
02:30 - folders in the current directory which
02:32 - is now our desktop since we change
02:34 - directory up here on line 4 so now if I
02:38 - run this then we can see the files and
02:40 - folders that are on the desktop ok so
02:42 - now what if we wanted to create a new
02:44 - folder on the desktop called let's say
02:47 - OS demo 2 so let me grab this and I'll
02:51 - just paste in OS demo - - here so now
02:56 - let's say that we wanted to create a
02:57 - folder on the desktop with this name
02:59 - here now there are two different methods
03:01 - that we can use to do this we have OS
03:04 - dot make Durer and we can just pass in
03:07 - that string there as an argument and
03:10 - there is also oh s dot make ders now
03:16 - make ders and make Durer are pretty
03:19 - similar but make ders if you want to
03:23 - create a directory that's a few levels
03:26 - deep then make ders will create all of
03:29 - the intermediate level directories that
03:31 - you need and make durst won't do that so
03:34 - for example here if I wanted to do an OS
03:38 - demo and I wanted to do a subdirectory
03:40 - within here let's say subtor one now if
03:44 - I tried to run this it's going to give
03:46 - us an error because this top level here
03:50 - doesn't exist yet now if we wanted to do
03:53 - this with make Thurs then it will go
03:56 - ahead and just create that top level for
03:59 - us so now I'm going to comment out the
04:01 - make der code now if I run that you can
04:05 - see that it ran fine and we have this OS
04:07 - demo 2 here and within that OS demo 2
04:10 - it's also going to have this
04:12 - subdirectory 1 so whenever I'm creating
04:15 - directories I usually use make doors
04:17 - even whenever I'm just making the
04:19 - top-level directory because I feel like
04:21 - it's easier if I want to you know create
04:25 - a a tree structure just to you
04:27 - this one function but now let's say that
04:30 - we wanted to delete these folders now
04:32 - the leading folders is kind of the same
04:35 - deal we have our ember and we have
04:39 - remove di RS so this is the same thing
04:45 - as make dirt and make ders the RM der
04:49 - will not remove the intermediate
04:52 - directories and remove d'oeuvres we'll
04:54 - now I consider deleting directories
04:56 - recursively a little more dangerous than
04:58 - creating them recursively so usually
05:00 - whenever I am deleting folders I will
05:04 - use RM dur so that I can specifically
05:06 - delete the exact directory that I want
05:09 - removed but in this case since we want
05:11 - this entire demo tree gone anyway I'm
05:14 - just going to use RM ders here on this
05:16 - OS demo too and if I run that then we're
05:20 - still printing out our list directory
05:22 - down here and you can see that that OS
05:24 - demo 2 was deleted okay now let's say
05:27 - that we want to rename a file or a
05:29 - folder to do that we can use OS dot
05:33 - rename so let's say that we want to
05:36 - rename this test.txt here let's just
05:40 - rename this to let's see demo dot txt so
05:45 - when you're renaming files you want to
05:47 - pass in the original file name first and
05:49 - then the name of the new file that you
05:52 - want so if I save that and run it now
05:55 - it's in a different order here but you
05:57 - can see that now this demo txt is within
06:01 - the desktop here and not the test dot
06:03 - txt ok so now let's see how we can look
06:06 - at some information about our files so
06:09 - let's say that we wanted to print out
06:11 - all the information about this demo dot
06:13 - txt file now to do this we can use OS
06:17 - dot stat and I'm actually going to have
06:20 - to print this out and for now I'm going
06:22 - to comment out the list directory there
06:25 - and I'm just going to print out this OS
06:27 - stat on the demo dot txt file okay so a
06:32 - few different things got printed out
06:33 - here and a lot of this can look like
06:35 - gibberish but you can look up in the
06:38 - documentation online what all of this
06:40 - means
06:41 - but a couple of useful ones that I
06:43 - usually use is we can see that we have
06:47 - the size here so if I copy that then I
06:51 - can just do a dot with the attribute
06:55 - there and I can print that out so the
06:57 - size of that file is bytes 20 bytes and
07:00 - let's say for example that you wanted
07:02 - the last modification time that would be
07:05 - this M time right here so if I print it
07:09 - out this modification time here then you
07:12 - can see that it prints that out now that
07:14 - returns a timestamp and sometimes people
07:16 - don't know how to get these timestamps
07:17 - and a human readable format so if we
07:21 - want to view this in an actual date time
07:23 - format and what we can do is we can do a
07:27 - from date/time import 8 time and I'm
07:32 - just going to let's see I will save this
07:36 - as a variable here called mod time
07:39 - equals and then we'll just do a print
07:43 - and a 8 time dot from time stamp and we
07:49 - will pass in that mod time and if I save
07:54 - that and run it then you can see it
07:56 - prints out a human readable form of that
07:59 - modified time timestamp and file
08:01 - information like that can be really
08:04 - useful like if you're working with a web
08:05 - application that has a lot of files that
08:08 - have been updated or created recently
08:10 - and you want to know exactly when that
08:12 - was then this is a good way that you can
08:15 - do that within Python ok so now I'm just
08:17 - going to go ahead and get rid of all of
08:20 - this so far ok so now let's say that we
08:25 - want to see the entire directory tree
08:27 - and files within the desktop now if you
08:30 - want to traverse the directory tree and
08:33 - print all of the directories and the
08:34 - files then you can use the OS dot walk
08:38 - method so OS dot Walk is a generator
08:43 - that yields a couple of three values as
08:47 - its walking the directory tree
08:48 - so for each directory that it sees it
08:51 - yields the directory path the direct
08:54 - within that path and the files within
08:57 - that path now I know that might sound a
08:59 - little confusing so let's just go ahead
09:00 - and take a look at an example here
09:02 - so by default this traverses from the
09:06 - top down so if we wanted to start at the
09:08 - desktop then what do all we'd have to do
09:11 - here is now remember this yields a three
09:15 - value tuples so this is why we're able
09:17 - to use this syntax so the first value is
09:20 - der path and then the next value is that
09:24 - there are names within that path and
09:27 - then the third value is the filenames
09:31 - within that path and we want to traverse
09:34 - this directory tree starting at the
09:36 - desktop so I could either copy the
09:39 - desktop path here or I could do an OS
09:42 - get current working directory that path
09:45 - end OS walk I'm just going to go ahead
09:48 - and pass in the path as a string and so
09:51 - now I'm just going to go ahead and print
09:53 - out all of these values from within the
09:56 - for loop here but just so you guys don't
09:58 - have to watch me type I can just grab
10:02 - this from my snippets file and just
10:03 - paste this in here and indent that so
10:07 - let me go ahead and run this and I'll
10:09 - show you what the walk method does and
10:11 - it can be extremely useful so what we
10:15 - did here is it started at the desktop as
10:18 - our current path and then it printed out
10:20 - all of the directories within the
10:22 - desktop and all of the files within the
10:25 - desktop and now it goes down each of
10:28 - these directories one at a time so now
10:30 - it goes into the demos folder and print
10:33 - out all the directories within the demo
10:36 - folder and all the files within that
10:37 - phone and within that path and then it
10:40 - goes down into that subdirectory and
10:43 - prints all the directories and then all
10:45 - the files and it keeps doing this until
10:48 - it goes through the entire tree of all
10:50 - of the directories and files on the root
10:54 - path which we chose as the desktop now
10:57 - this can be extremely useful if say that
11:00 - I had a file somewhere within one of the
11:03 - folders on my desktop but I didn't
11:05 - remember exactly where it was then I
11:07 - could just use the
11:08 - OS dot walk method to go through and
11:10 - search through all of those files and
11:13 - folders on the desktop or like I was
11:15 - saying before if you had a web
11:16 - application and you wanted to keep track
11:19 - of all of the file information within a
11:21 - certain directory structure then you
11:23 - could just go through this OS dot walk
11:25 - method and go through all of the files
11:27 - and folders within your web application
11:30 - and collect file information that way so
11:32 - the OS walk method can be extremely
11:35 - useful for things like that okay so now
11:37 - let's say that we want to access my home
11:41 - directory location by grabbing the home
11:44 - environment variable now we can get
11:47 - environment variables I'm just going to
11:48 - go ahead and delete these lines here now
11:52 - we can get environment variables by
11:54 - accessing OS dot environed
11:58 - to print out the OS dot environment out
12:03 - all of my environment variables but I
12:05 - have a lot of those so let's just grab
12:07 - one so let's say that I wanted to get my
12:10 - home environment variable which will be
12:13 - the location of my user's home directory
12:16 - so let me just go ahead and print that
12:19 - out and run that and you can see that it
12:23 - captures my home directory there okay so
12:26 - now let's say that I wanted to use this
12:29 - path that it gave me with this OS get
12:33 - home let's say that I wanted to use that
12:35 - to create a new file within my home
12:38 - directory that I'll just go ahead and
12:42 - create a file called let's see test dot
12:45 - txt so the first thing that we're going
12:47 - to want to figure out when we're
12:48 - creating this file is what the path
12:51 - should be so how can we combine this
12:55 - path that we got from this home
12:58 - directory here and our file name into a
13:00 - single path for this new file now one
13:04 - thing that some people try is to just
13:06 - concatenate these so let's say that I
13:08 - did a file path equal to the location of
13:13 - this home directory plus text txt now
13:18 - the problem with doing it this way is
13:21 - that it is it's hard to remember if all
13:24 - of these slashes are and then in the
13:26 - correct positions or whether or not you
13:29 - could be missing a slash so for example
13:31 - if I print out this file path that we
13:35 - just created then you can see that we're
13:39 - missing a slash here and sometimes it's
13:42 - easy to forget that and some paths come
13:44 - with the slashes at the end and you can
13:47 - double slashes and things like that so
13:49 - in order to prevent this guesswork we
13:52 - can use the OS path module so the OS
13:55 - path module has a lot of useful methods
13:57 - for working with paths but the one that
13:59 - we're going to use in this situation to
14:02 - combine the home directory with the
14:03 - filename is OS path join now what this
14:08 - does is it just joins two paths together
14:11 - and it takes away that guesswork that we
14:14 - were just talking about so here I'm
14:15 - going to do an OS path dot join and this
14:20 - takes in two arguments here so we're
14:23 - going to have this home path be one
14:26 - argument and then this test.txt
14:29 - as the other one so if I save that I'm
14:32 - just going to comment out that print
14:34 - statement now if I save that and run it
14:36 - and you can see that we have a full path
14:38 - of this filename with the slash in the
14:41 - correct location so that takes all of
14:43 - the guesswork out of creating those
14:45 - paths and whether or not you need to add
14:47 - a slash in a certain location or not so
14:50 - you can see that it combined those and
14:52 - gave us the path that we were hoping for
14:54 - now that's extremely useful again if
14:56 - you're you know reading and writing a
14:58 - bunch of files to different locations
14:59 - and want to make sure that those paths
15:01 - are all created properly then you can go
15:04 - ahead and use that
15:04 - OS path join and know that it's doing it
15:07 - correctly so now if we wanted to
15:09 - actually go ahead and create that file
15:11 - then we could just do a with open file
15:15 - path and then we could do an as F and
15:19 - write it and do you know an F dot right
15:22 - but I'm not going to actually create
15:24 - that file right now I will go into file
15:28 - creations and working with files in a
15:31 - later video but for now let's go ahead
15:33 - and keep looking at some of the
15:34 - other useful methods that we have
15:36 - available here in an OS path so using
15:40 - this OS path it also has a few other
15:46 - useful methods that we can use here so
15:48 - we can do an OS path base name and what
15:53 - this will do is it will grab the file
15:55 - name of any path that we're working on
15:57 - and this doesn't have to be a real path
15:59 - so for example here this path and I'm
16:02 - typing in doesn't exist this temporary
16:04 - text txt so let me go ahead and print
16:08 - out what this gives us so if I print
16:11 - that out you can see that the base name
16:13 - of this entire path is just text txt now
16:17 - if I only wanted the directory name of
16:19 - that path then instead of base name I
16:21 - could type in their name and print that
16:24 - out and you can see that it gives me
16:26 - temp now if I wanted both of those then
16:29 - I could use split and if I print that
16:32 - out you can see that it gives me the
16:34 - directory name first and the base name
16:37 - second so also using OS path you can
16:40 - check if a path exists so like I said
16:43 - before this was a fake path that doesn't
16:46 - exist so if I want to check the
16:48 - existence I can do Oh s dot path dot
16:51 - exists and if I save that and run it you
16:54 - can see that that is false because this
16:56 - path actually doesn't exist on the
16:58 - filesystem
16:58 - now two more methods that I use a lot if
17:02 - you did have a path that exists on the
17:04 - filesystem
17:04 - then sometimes temporary files might
17:08 - just be named without an extension so
17:10 - they might look something like this
17:12 - if you want to check if something is a
17:14 - directory or a file then you can do OS
17:17 - path that is der and it will return true
17:20 - if it's a directory and you can do OS
17:22 - path that is file it will return true if
17:26 - it is a file now one more useful
17:28 - function that I end up using a lot is
17:30 - one called split ext now what this will
17:35 - do is it will split the file root and
17:38 - the extension or I should say the root
17:41 - of the path and the extension so if I
17:44 - was to save this and run it you can see
17:46 - that here we have this slash temp
17:49 - slash text test and for the second value
17:52 - we just have the extension T txt now
17:55 - this is a lot easier than trying to
17:57 - parse out the extension using string
18:01 - slicing or things like that
18:02 - it's a lot easier just to split it off
18:04 - and then take the first value if you
18:07 - want the filename without the extension
18:08 - so that is a method that I end up using
18:11 - a lot for a file manipulation now just
18:14 - like we did with the OS module if you
18:16 - want to see everything that is available
18:18 - within though this OS path module then
18:22 - you can also print out the dir of that
18:25 - and you can see some of these that we've
18:27 - already worked with so we have their
18:29 - name exists is there is file and things
18:32 - like that but there's a lot more useful
18:33 - information here as well okay so I think
18:36 - that is going to do it for this overview
18:38 - of the OS module now this module has a
18:41 - ton of functionality packed into it and
18:43 - we didn't get to go over everything that
18:45 - it can do but these are the methods that
18:47 - I used most often and the ones that I
18:49 - find most useful so hopefully this video
18:51 - will give you some ideas for how you can
18:53 - use the OS module in your own projects
18:55 - if you do have any questions just feel
18:57 - free to ask in the comment section below
18:59 - and I'll do my best to answer those
19:01 - questions be sure to subscribe for
19:03 - future videos and thank you all for
19:05 - watching