00:00 - hey there how's it going everybody in
00:01 - this video we're going to be learning
00:02 - how to use pip env so pipi and V is a
00:05 - new way for us to combine package
00:06 - management with virtual environments and
00:08 - it's also a highly recommended packaging
00:10 - tool from Python org now a lot of teams
00:12 - and companies are switching over from
00:14 - pip to Pippy and V so it's definitely a
00:16 - nice tool to learn basically it is
00:19 - combining the features of Pip and
00:21 - virtual env so first let's go over both
00:24 - pip and virtual env in case either of
00:26 - those are unfamiliar to anyone now I'd
00:28 - say anyone watching this video who has
00:30 - done any Python work beyond the basics
00:32 - has most likely used pip but basically
00:35 - pip is a way for us to install
00:37 - additional packages that allows us to
00:39 - add a ton of functionality that doesn't
00:41 - exist in the Python standard library so
00:43 - for example if you want to do some image
00:45 - manipulation then Python might not have
00:48 - the best tools available right out of
00:49 - the box but you can use pip to install
00:51 - the pillo library and use that to work
00:54 - with images so I guess that a lot of
00:56 - people have probably seen pip before but
00:58 - I'd say fewer people have used virtual
01:00 - environments now that's a topic that a
01:02 - lot of people mean to learn eventually
01:03 - but never really get around to it but
01:06 - basically a virtual environment is a way
01:08 - for us to have a specific environment
01:10 - for each project or application that
01:12 - we're building so for example you could
01:14 - have one application that runs off of
01:16 - Python 2.7 and Django 1.5 and then
01:20 - another project that runs with Python 3
01:22 - 7 and Django 2.1 so each of those
01:25 - projects would have their own version of
01:27 - Python and their own packages which is
01:29 - usually how you want to do it some
01:32 - people put off learning virtual
01:33 - environments and just try to run every
01:35 - project using their global installation
01:37 - of Python and all the packages installed
01:39 - in one place but if you do it that way
01:42 - then as soon as you update to the next
01:43 - version of Python or update your
01:45 - packages then it could break some of
01:47 - your older applications that were
01:49 - running just fine so it's best to split
01:51 - those up using virtual environments so
01:53 - before pipi and V we used pip to handle
01:56 - package management and used virtual env
01:59 - to handle virtual environments but now
02:02 - with pipi and V these can all be handled
02:04 - by one tool that simplifies the process
02:06 - so let's get started and see what this
02:09 - looks like so first we want to install
02:11 - pipi and V and
02:13 - can simply install pipi and V by using
02:15 - pip so we can just say pip install pip
02:19 - env and you can see that mine says
02:21 - requirement already satisfied because
02:23 - I've already installed it but yours
02:24 - should install there so I'm not now I'm
02:26 - going to clear the screen okay and once
02:28 - that's installed let's pretend that
02:30 - we're starting a new project so that we
02:31 - can see how we can install packages for
02:34 - that project and also create a virtual
02:36 - environment automatically so I've
02:38 - created a directory on my desktop called
02:40 - my project now you can have a project
02:43 - folder located anywhere but this is the
02:45 - one that I'm going to be using in this
02:46 - video so you can create an empty folder
02:48 - like I've done here or you can also use
02:50 - pipi and V on an existing project as
02:53 - well so once you have a project or
02:55 - directory containing your code let's
02:57 - navigate to that location within our
02:59 - command line and again I'm locating to a
03:01 - directory on my desktop called my
03:03 - project but you should navigate wherever
03:06 - your code will be located so I'm going
03:08 - to CD into that directory so I called
03:11 - that my project now right now this is
03:13 - just an empty directory so at this point
03:16 - if we were using the old method of
03:18 - installing packages for this project
03:20 - then at this point we would create a
03:22 - virtual environment using one of the
03:23 - older tools to do that and then we would
03:26 - need to manually activate that
03:28 - environment and then start installing
03:30 - the packages that we want to use in this
03:32 - project but with pipi and V this is all
03:35 - built-in together now so instead of
03:37 - creating a new virtual environment
03:38 - manually we're simply going to install
03:41 - the packages that we want with pip in V
03:43 - so let's say that we want to use the
03:45 - request package for this project if you
03:48 - haven't used the request library then
03:49 - don't worry about it we're really just
03:51 - choosing a random package to install for
03:53 - this project so to install this let's
03:56 - say pip env install requests okay so we
04:04 - can see that it did a few things there
04:05 - so once that is finished let's take a
04:07 - look at what this did so right off the
04:10 - bat if we scroll up here to the top
04:12 - where we ran that command right after we
04:15 - installed requests it first notices that
04:17 - we don't have a virtual environment for
04:19 - this project yet so it creates one for
04:22 - us we can see that here creating a
04:23 - virtual env for this project and then it
04:26 - gives us a
04:27 - location to a pip file and we'll talk
04:29 - more about a pip file in just a minute
04:31 - and then it says that it is using this
04:34 - version of Python which is where my
04:36 - Python 3 7 is installed and then it
04:39 - actually goes through and creates that
04:40 - environment for us so if I scroll down
04:42 - here a little bit we can see that it
04:44 - gives us the location of that virtual
04:46 - environment so mine is here within this
04:48 - virtual en V's directory and that
04:51 - virtual environment that it created is
04:52 - actually just a regular virtual
04:55 - environment like you'd be used to using
04:56 - in the past so you can navigate to that
04:59 - location and activate it manually if
05:01 - you'd like but pip P&V gives us simpler
05:04 - commands to interact with that
05:05 - environment than to just do it manually
05:07 - ok and next it says that it created a
05:10 - pip file the pip file is going to be a
05:12 - file that describes our environment and
05:15 - how we can build it back from scratch so
05:18 - this is similar to the requirements txt
05:20 - file that some of you may have used
05:22 - before with pip and it actually will be
05:24 - a replacement for the requirements that
05:26 - txt file within pip env now if you've
05:30 - never used a requirements txt file
05:31 - before then don't worry too much about
05:33 - it basically it just tells us which
05:35 - packages we have installed and what
05:38 - version of that package we're using so
05:41 - that's what this pip file does also but
05:43 - it's also more specific so we'll
05:45 - actually open this in just a second but
05:47 - for now let's see what else our pipi and
05:49 - B install command did for us so after it
05:52 - said it created our pip file then it
05:54 - actually installed the request package
05:56 - here and that's what though this whole
05:58 - section is doing here where it says that
06:00 - it is downloading so let's scroll past
06:03 - all of that ok and after it finish the
06:05 - request installation then it says that
06:08 - it added requests to our pip files
06:11 - packages then it says that this pip file
06:14 - dot lock was not found so it's creating
06:16 - that so pitfall dot lock is another file
06:19 - that gets created and it's similar to
06:21 - our pip file but with some key
06:23 - differences that we'll see throughout
06:24 - the video basically pip file dot lock is
06:27 - a file that we're not supposed to touch
06:29 - it's just a file that gets generated and
06:32 - produces deterministic builds and again
06:34 - we'll see more about that in just a bit
06:36 - okay so lastly here at the bottom
06:40 - we can see that it tells us that we can
06:41 - activate our new environment simply by
06:44 - saying pip env shell and if we just want
06:47 - to run a command inside that virtual
06:49 - environment then we can do pip env run
06:52 - but before we activate the virtual
06:54 - environment let's first look at the PIP
06:56 - file and the PIP file dot lock I have
06:59 - the directory with those files open and
07:01 - mice abloom text so let's open those up
07:03 - and see what they look like now you can
07:05 - use whichever editor that you want in
07:07 - order to look at these but I have them
07:09 - opened up in my sublime text so I have
07:11 - my project open over here so first I'm
07:13 - going to open up the PIP file that it
07:15 - created and this is the PIP file dot
07:18 - lock so first let's look at the PIP file
07:20 - okay so the PIP file is pretty simple
07:22 - the format that this is using is called
07:25 - tamil t om l which is designed to be a
07:28 - minimal format that mostly contains keys
07:31 - and values within these sections so we
07:34 - have a source section here that shows
07:37 - where we're downloading packages from
07:39 - and right here it's just pi pi org and
07:41 - then here we have a packages section we
07:44 - can see that it currently just contains
07:46 - the request package and it says that
07:49 - requests is equal to this asterisk here
07:53 - this star and that just means that we
07:54 - didn't specify a specific version when
07:57 - we installed requests if we had then
07:59 - there would be it would say that it's
08:02 - equal here to that specific version now
08:04 - this is nice because we're not
08:05 - specifying an exact version so any time
08:08 - we run pipi and V install and we'll go
08:11 - out and see if there are newer versions
08:13 - available for us and if there are then
08:15 - it will update those versions
08:16 - automatically so that is something that
08:18 - we would have needed to do manually in
08:21 - the past with pip now like we talked
08:23 - about before updating packages like that
08:25 - can also be risky because we don't want
08:27 - to take any chances of updates breaking
08:30 - our project but that is what the PIP
08:32 - file dot lock is for and we'll discuss
08:34 - more about that in just a bit also if we
08:37 - wanted to specify an exact version of
08:39 - the package here in the pit file then we
08:41 - could do that too and it would just stay
08:43 - with that version even if a newer one is
08:46 - available okay and lastly we can also
08:48 - see down here at the bottom that we are
08:51 - specifying which version of Python
08:53 - that we're using so I'm using Python 3 7
08:56 - but we could change that if we'd like
08:58 - okay so that is a quick overview of the
09:01 - PIP file it's a pretty simple file that
09:03 - just shows how we can create a new
09:05 - environment from scratch and this file
09:07 - is also meant to be editable we could
09:10 - add packages in here and rerun the
09:11 - install command and it would install the
09:14 - packages that we added and we'll see
09:16 - that in just a bit
09:17 - but for now let's look at the PIP file
09:20 - dot lock so I'm gonna open up pip filed
09:22 - out lock okay and real quick just let me
09:24 - kind of scroll through here and then
09:26 - scroll back up so right off the bat we
09:29 - can see that this one is a bit more
09:30 - complicated now don't be intimidated if
09:33 - you don't understand what a lot of this
09:35 - is this is a file that we're not
09:37 - actually meant to change manually this
09:39 - is a generated file that has more
09:41 - detailed information about our current
09:43 - environment now if we scroll down here
09:45 - then we can see that we have some hashes
09:48 - and for the packages that are installed
09:50 - we can see that we have more than just
09:52 - requests so this file even contains the
09:55 - dependencies that are installed when we
09:58 - installed the request library now not
10:00 - only that but it has the exact version
10:03 - of each of these packages that were
10:04 - installed so for example if we look at
10:07 - requests here then we can see that we
10:09 - have these hashes but then down here it
10:12 - also has the exact version so this is
10:14 - the good thing about having this pip
10:16 - file dot lock so this will give you a
10:19 - deterministic build and what I mean by
10:21 - that is that this lock file will
10:23 - absolutely give you the exact same
10:25 - environment every time and you only get
10:27 - a different build when you explicitly
10:29 - update the lock file and we'll see how
10:32 - to do this in just a bit so this gets us
10:34 - around the problem that we had before
10:35 - where I said that updating packages can
10:38 - break your project so the PIP file could
10:40 - see a new version of your package and
10:43 - update them accordingly and then once
10:46 - you're sure that all of your code is
10:48 - still working in development after
10:49 - you've updated those packages then you
10:51 - can simply update your lock file which
10:54 - will give you the exact packages that
10:56 - are installed at the time that you know
10:58 - work well and once you update that lock
11:00 - file then you can push that all to
11:02 - production ok so now that we've actually
11:04 - looked over the PIP file and pip
11:06 - a lakh and what the differences are
11:08 - between those now let's actually
11:10 - activate our environment and go through
11:12 - some other commands to see how to do all
11:14 - of this so to activate our environment I
11:16 - can just go back here to our command
11:19 - line I'm going to clear the screen so to
11:21 - activate our environment we can simply
11:23 - say pip env shell and we can see here it
11:26 - says launching sub shell and virtual
11:28 - environment yours may not say that if it
11:30 - doesn't that's fine but if I clear my
11:33 - screen here now then that should have
11:35 - activated our environment for our
11:36 - project now usually when you have an
11:38 - environment activated it will add
11:40 - something to the beginning of your
11:42 - prompt in the command line and it's
11:44 - doing that here so we can see that in
11:46 - parentheses here it says my project
11:48 - that's the virtual environment that it
11:50 - created for this project now if you're
11:52 - unfamiliar with using virtual
11:53 - environments what this did was it
11:55 - actually put us in an environment where
11:56 - it will now be using a different Python
11:59 - interpreter and a different location for
12:01 - all of our packages so for example if I
12:03 - run Python now that I'm here within this
12:06 - environment then we can see that it
12:08 - still might look the same as your
12:10 - default environment it's just Python 3 7
12:12 - here but if we look at our current
12:14 - Python executable we can do that by
12:17 - saying import sis and then sis not
12:19 - executable then we can see that the
12:22 - Python it's actually using is in this
12:25 - location here and this is our virtual
12:28 - environment that it created in this
12:30 - virtual env directory here so that's a
12:33 - good thing that means that whatever we
12:35 - install in this project will be separate
12:37 - from our other projects on our machine
12:39 - and that's what we want so if you'd like
12:41 - to learn more about how these Python
12:43 - paths work and how to determine the
12:45 - location and version of your current
12:47 - Python interpreter then I do have a
12:48 - separate video on that if you're
12:50 - interested and I'll be sure to leave a
12:52 - link to that in the description section
12:53 - below ok so since we also installed
12:56 - requests in this environment we should
12:58 - also be able to import that so if I say
13:00 - import requests then we can see that it
13:03 - imports that without any error so that
13:05 - means that we do have it installed ok so
13:08 - now let's go ahead and exit out of
13:10 - Python here and I'll go ahead and clear
13:13 - my screen so now let's say that we want
13:15 - to deactivate the environment to
13:17 - deactivate the environment we can simply
13:19 - say
13:20 - now there might be some confusion here
13:22 - that we used exit to deactivate the
13:24 - environment instead of using deactivate
13:27 - which you might be used to using older
13:29 - virtual environments now I was confused
13:31 - at this - what's even more confusing is
13:34 - that if you do use deactivate then it
13:36 - could actually look like it does
13:38 - something but it won't actually exit
13:40 - completely and that's because pipi and V
13:42 - actually launches a subshell to activate
13:45 - the environment and to exit that
13:47 - completely we need to use the exit
13:49 - command so be sure that you do that and
13:51 - not deactivate I know that can be a
13:53 - little confusing but this is just how we
13:55 - do it so now we no longer have that
13:56 - environment activated now we can
13:58 - actually run commands in our environment
14:00 - without activating it so we can do that
14:02 - with the pip env run command so let's
14:05 - say that I want to run Python within our
14:09 - current environment so we could activate
14:11 - the environment like we just did with
14:13 - pipi and V shell and then run Python or
14:16 - we could just simply say pip env run
14:20 - Python and that will run that Python
14:23 - command within that environment so if I
14:26 - run that and check our executable again
14:29 - sis not executable then you can see that
14:32 - this Python is using our virtual
14:35 - environment Python and again just like
14:37 - before we can import packages that we
14:41 - have installed in that environment so
14:43 - I'm going to go ahead and exit out of
14:45 - that now we never actually activated our
14:48 - environment there so we don't need to
14:49 - run exit again to get out of that
14:52 - environment we're already outside of it
14:54 - now you can run scripts that way as well
14:56 - I don't have a script in this current
14:58 - project but if we did then we could
15:01 - simply say something like pip env run
15:04 - Python script PI and that would run a
15:08 - script using the Python that is in our
15:11 - environment but that script doesn't
15:13 - exist so I'll just go ahead and delete
15:15 - that
15:16 - and let me also clear the screen here
15:19 - okay so now let's install some more
15:21 - packages for this project now we could
15:23 - do them one at a time using the install
15:25 - command that we saw before but let's see
15:27 - how to install several packages from an
15:30 - existing project so for those of us who
15:32 - have used pip before
15:34 - you're probably used to using a
15:35 - requirements txt file if you don't know
15:38 - what requirements txt file is basically
15:41 - it's just a list of dependencies and
15:43 - packages that a project needs in a
15:46 - little text file so if you start using
15:48 - pipi and V you can still use your
15:50 - requirements txt files before you
15:53 - completely switch over to using pip
15:55 - files so for example I have a
15:57 - requirements txt file that has all of
16:00 - the dependencies that I use in my Django
16:02 - course so let's say that we wanted to
16:04 - install those here using that
16:06 - requirements txt file so to do this I
16:10 - could simply say pip and V install - R
16:14 - so we want to use that - R option and
16:17 - then you would specify the requirements
16:19 - txt file that you want to use now my
16:22 - requirements dot txt file is actually up
16:24 - one directory in a snippets folder so
16:27 - I'm going to specify that location but
16:30 - at this point you would put in the
16:32 - location of wherever your requirements
16:34 - that txt file is so mine is up one
16:37 - directory in a snippets folder and that
16:39 - is requirements txt so I'm going to go
16:43 - ahead and run that so we can see that
16:47 - after we ran that it says requirements
16:49 - file provided importing into pip file so
16:52 - it updated our pip file dot lock updated
16:56 - pip top filed out lock install the
16:58 - dependencies and it's done so now let's
17:02 - open back up our pip file so I'm in pip
17:06 - file dot lock here let's switch over to
17:08 - pip file so we can see here in our
17:10 - packages section that these new packages
17:13 - were added to our pip file and those are
17:16 - the exact versions that were listed in
17:18 - my requirements txt file now if you're
17:21 - using pipi and V but people on your team
17:23 - are still using pip then you might need
17:25 - to create a requirements txt file to
17:28 - send to them the PIP command to display
17:30 - the list of dependencies that you'd use
17:32 - in a requirements that txt file is PIP
17:35 - freeze now we can do the equivalent in
17:38 - pipi and V by running the pipi and V
17:41 - lock command so let me show you this
17:44 - here so I'll pull back up my terminal
17:46 - let me
17:47 - this so if we wanted to display our
17:50 - dependencies and a way that we would add
17:52 - to our requirements txt file then we can
17:55 - say pip env lock dash R and if we run
17:59 - that then this displays the dependencies
18:03 - in a way that they would be added to a
18:05 - requirements that txt file so this is a
18:08 - good thing because if your team is still
18:10 - using pip but you want to move on the
18:12 - pipi and V then you don't necessarily
18:13 - need everybody to switch over at the
18:16 - same time you can start using it and
18:18 - features like this just make those easy
18:20 - to use together and we're gonna go over
18:22 - this lock command more in just a moment
18:25 - but for now let's move on to some
18:27 - additional pipi and V commands here ok
18:30 - so now let's look at how to install a
18:32 - package only in a dev environment so you
18:35 - can imagine that there are probably
18:36 - going to be some packages that you'll
18:39 - need for a project in your dev
18:40 - environment that you might not need in
18:42 - production so for example let's say that
18:45 - we're using PI tests to test our code
18:47 - but we don't actually want PI tests
18:49 - included when we ship our code to
18:50 - production so to do this we can simply
18:53 - install a package like normal but
18:55 - include the dev option on the end so I
18:58 - could say pip env install PI test - -
19:03 - dev and if we run that then we can see
19:08 - that that installed like it normally
19:09 - would but there's a section here that
19:11 - says adding PI tests to the PIP files
19:13 - dev packages so let's go back to our pip
19:17 - file and look at this so we can see that
19:19 - it didn't add anything to our packages
19:21 - section but there's another section down
19:23 - here called dev packages and it added PI
19:26 - tests there so it knows how to keep
19:28 - those separate and I think that's a
19:29 - really nice feature with pipi and B okay
19:32 - so now let's go back to our command line
19:34 - and let me clear the screen here now if
19:37 - we ever wanted to remove any of these
19:39 - packages that we've installed then it's
19:41 - as easy as going back to the command
19:43 - line here and using the uninstall
19:44 - command so we can just simply say pip in
19:47 - V uninstall and I'll go ahead and
19:50 - uninstall request so I will run that and
19:53 - we can see that it uninstalled requests
19:56 - and also removed it from our pip file so
19:59 - if we go back to our
20:00 - and our packages here we no longer have
20:02 - requests it's only the packages that
20:05 - were in that requirements not txt file
20:07 - from before okay so since I have this
20:09 - pip file open let's go ahead and make
20:12 - some changes in here to see how that's
20:14 - done so let's say that we wanted to
20:16 - actually use a different version of
20:18 - Python for this environment after all so
20:20 - it turns out that instead of using
20:22 - Python 37 we actually needed to use
20:25 - Python 3 6 now if we're using the old
20:28 - way of using virtual environments then
20:30 - we might need to just export our
20:31 - requirements and then delete the
20:33 - environment and recreate it from scratch
20:35 - but using Pippy and V is going to be a
20:38 - lot easier there are actually a couple
20:40 - of ways that we can do this so the first
20:42 - way that we could do this is that we can
20:45 - just come in here into our pip file and
20:47 - change the version of python so where it
20:50 - says python version down here I'm just
20:52 - going to change this to Python 3 6 and
20:55 - now we need to recreate our virtual
20:57 - environment since the existing one is
20:59 - using Python 3 7 so to do this we can
21:02 - simply go back to our terminal here I'm
21:05 - going to clear the screen and now we can
21:07 - just tell Pippy and V that the
21:09 - environment should be recreated using
21:11 - Python at 3 6 to do that we can just say
21:14 - pip env - - Python 3 6 so after that's
21:22 - done if I scroll up here to where we ran
21:25 - that command we can see that the first
21:27 - thing it says virtual env already exists
21:29 - so we want to remove the existing
21:31 - virtual env and now it creates a virtual
21:34 - 1b for this project and it's using now
21:38 - this Python 3 point 6 point 1 so if we
21:43 - run the Python for that environment now
21:46 - so I'll say pip env run Python we can
21:50 - see that now this is using Python 3 6 1
21:53 - and this new environment that it created
21:55 - will also be in that virtual Ian V's
21:57 - directory so if we look at the
21:59 - executable again then we can see that
22:01 - it's still here in this virtual env
22:03 - directory so that is good so I will exit
22:07 - out of Python there now another way that
22:09 - we could have done that would have been
22:11 - to just remove the environment
22:13 - completely and then just
22:14 - recreate it from scratch using the PIP
22:16 - file and if your PIP file and
22:18 - environment ever get too far out of sync
22:20 - then it might be better just to delete
22:23 - the environment completely and then just
22:25 - recreate it from scratch so just so you
22:27 - know how to do that let's go ahead and
22:28 - see how we do this so I'm going to
22:31 - change our project back to using Python
22:33 - 3.7 again so to do that I'm going to
22:36 - open our Pip file back up and I'm going
22:38 - to go down here to our Python version
22:41 - and change that to Python 3 7 and save
22:44 - that and now that we've changed that Pip
22:47 - file let's open our terminal back up now
22:50 - again the new environment that we just
22:51 - created is using Python 3 6 so let's
22:55 - just say that we want to throw that
22:56 - entire environment away and recreate it
22:59 - from scratch using the PIP file so to
23:01 - remove a virtual environment completely
23:03 - we can simply say pip env whoops Pippy
23:06 - and V - - RM so if we run that we can
23:10 - see it says removing virtual environment
23:12 - and gives the location - the invertible
23:15 - environment that we just removed now
23:17 - that only removes the environment that
23:18 - we were using but everything that we
23:20 - need to recreate that environment is
23:22 - still within the PIP file so to create
23:25 - an environment that matches the one in
23:27 - our pip file we can just simply say pip
23:29 - env install and we don't need any other
23:32 - options if we just run that then that
23:37 - will go through and create our
23:38 - environment from scratch using the
23:40 - Python version and packages from our pip
23:43 - file now if you ever get curious and
23:45 - want to look directly at your virtual
23:47 - environment then you can see the path to
23:50 - your environment just by let me clear
23:52 - this out we can simply say pip env -
23:55 - dash V env and that will give you the
23:58 - path to your virtual environment if you
24:00 - ever want to look more deeply into that
24:02 - now like I was saying before that's just
24:04 - like any other virtual environment that
24:06 - you'd create with virtual we and V so we
24:08 - could navigate to that location and run
24:10 - the commands manually to activate and
24:12 - deactivate that environment so even
24:15 - though Pippy and V is nice and new it's
24:17 - still mostly using the same things that
24:19 - you may have been familiar with already
24:21 - in the background ok so now let me clear
24:24 - the screen here now one really nice
24:26 - feature of Pippy and V
24:28 - is that we can easily check for known
24:30 - security vulnerabilities for any of our
24:32 - installed packages so to do that we can
24:35 - simply say pip env check and if I run
24:38 - that then we can see that it discovered
24:41 - a couple of things here
24:42 - so first it said checking pet 508
24:45 - requirements and that those passed but
24:48 - then whenever it checked installed
24:49 - package safety we got a couple of Django
24:52 - issues here now it's nice to have this
24:54 - feedback so that you can make the best
24:55 - decisions as to what you want to do with
24:57 - this information so it says that these
25:00 - particular issues were resolved in the
25:02 - newer versions of Django so we can see
25:05 - here that it says that this was resolved
25:08 - and that this was resolved that we have
25:10 - 2.1 installed but that we could install
25:13 - two point one point two so let me update
25:15 - that version of Django that I'm using in
25:18 - my pip file so I'm going to open the PIP
25:20 - file back up and here with Django where
25:23 - it says I'm using two point one let's
25:25 - instead say two point one point two and
25:27 - save that so now back in our command
25:30 - line let's run the install command again
25:33 - so that it will install those changes
25:35 - from our pip file so I'll say pip env
25:38 - install and that is going to see that we
25:41 - have a newer version of Django in the
25:44 - pip file and it will update that for us
25:46 - okay so once that's done I'm going to
25:49 - clear my screen here and now let's run
25:51 - pip env check again so I'll say pip env
25:54 - check and we can see that when we run
25:57 - that check now that it says that we're
25:59 - all good so I think that's a really nice
26:01 - addition to pip env now another feature
26:04 - of pipi and v that i like a lot is pip
26:07 - env graph that will display a dependency
26:10 - graph showing your packages and the
26:12 - dependencies for each of those so let's
26:15 - clear the screen and run this so if I
26:17 - say pip env graph so we can see here our
26:21 - packages and dependencies for those
26:24 - packages so PI TZ here is listed as a
26:27 - dependency of Django so if you're ever
26:30 - wondering why certain packages are
26:32 - installed or trying to debug you know
26:35 - conflicting dependencies then you can
26:37 - run pip in the graph to see a map of
26:39 - what depends on
26:40 - what okay so now let me clear my screen
26:42 - here okay so we're almost finished up
26:45 - but let me show you an example of what
26:47 - you do once you're ready to push your
26:49 - code to production so currently our
26:51 - installs have been using the PIP file to
26:53 - create our environment but if you
26:55 - remember I said that the PIP file isn't
26:57 - deterministic but the PIP file dot lock
27:00 - is so what I mean by that is that the
27:03 - PIP foul lock has the exact hashes and
27:06 - versions for specific packages that
27:08 - we're currently using in our project but
27:11 - the PIP file might just tell us to grab
27:13 - the latest version of a package now
27:15 - getting the latest version is fine and
27:18 - development but when we push to
27:19 - production we want to know that we're
27:21 - pushing the exact versions of the
27:22 - packages that have already passed all of
27:25 - our testing so once you've tested all of
27:27 - your code and you know that you're ready
27:29 - to push what you have so far
27:30 - then you can create or update the
27:33 - pitbull dot lock with the current
27:35 - dependencies by saying hip env lock and
27:40 - we can see that it says that it updated
27:42 - that pip file dot lock so once that's
27:45 - done then you can take your pip file dot
27:47 - lock and move it to your production
27:49 - environment and once you're ready to
27:51 - install everything that's in your PIP
27:52 - filed out lock then you can simply run
27:55 - the command pip env install and then - -
27:59 - ignore - pip file and that will create
28:04 - an environment using what is in the PIP
28:06 - file dot lock and ignore the PIP file
28:09 - that is usually used by default ok so
28:12 - we're almost finished up here there is
28:14 - one more thing that I wanted to show
28:16 - because it's something that I personally
28:17 - look for when working with tools that
28:19 - create virtual environments and that is
28:21 - the ability to set environment variables
28:23 - that are specific to the environment now
28:27 - this is something that some tools
28:29 - overlook but I think it's extremely
28:30 - important so for example if you're
28:33 - working on multiple flask or Django
28:35 - projects and want to have environment
28:38 - variables for each project that contain
28:40 - the project secret key and database
28:42 - connection information and things like
28:44 - that then it would be nice to have the
28:46 - virtual environment handle this without
28:48 - needing to do that manually so the way
28:51 - that we can do this using pipi and V is
28:53 - create a dot env file within your
28:56 - project directory and you can set that
28:59 - environment variable within that file or
29:02 - any or multiple of our environment
29:04 - variables within that file so let's
29:06 - create this and see what this looks like
29:09 - so I'm going to open my sublime text
29:12 - here and within sublime text I know that
29:14 - this is a little hard to see over here
29:15 - on the left but I'm just going to
29:17 - correct click on my project directory
29:21 - and say new file and I want to call this
29:23 - file dot eat in V so we will create that
29:27 - and now within this dot env file we can
29:29 - add our environment variables that we
29:31 - want to be accessible in our environment
29:34 - so for example let's say that we had a
29:36 - secret key so I can say secret key is
29:38 - equal to my super secret key and now
29:44 - let's save that so now that I have that
29:47 - saved I can go back to the command line
29:49 - here and now let's see if we can see
29:51 - that environment variable within our
29:53 - environment so let's run Python from
29:55 - within our environment so to do this as
29:57 - we saw before we can say pipi and be run
30:00 - Python and we can see that the first
30:03 - line here says loading dot E and V
30:05 - environment variables ok so that's a
30:07 - good sign so now let's try to look at
30:12 - this environment variable so to access
30:13 - environment variables within Python we
30:15 - can use the OS module so I'll say import
30:18 - OS and then OS dot environed we can
30:22 - access that environment variable so we
30:25 - called that secret underscore key so if
30:27 - I run that then we can see that we get
30:29 - the value my super secret key and that
30:31 - was the value that we set in that dot
30:33 - env file now again if you're wondering
30:36 - why this is useful like I was saying you
30:38 - might have multiple projects that all
30:40 - have the same environment variable names
30:43 - so for example flask and Django projects
30:46 - are most likely all going to have secret
30:48 - keys and you don't want to manage all of
30:50 - those manually it's better to just put
30:52 - them in a dot env file specific to that
30:56 - project now another thing is that you do
30:59 - not want to commit those dot env files
31:01 - to your repository so if you're using
31:05 - git or something like that
31:07 - you're most likely going to want to add
31:09 - that dot env file to your get ignore
31:12 - file because you don't want to commit it
31:14 - for other people to see because it's
31:16 - going to could possibly have sensitive
31:18 - information like you know database
31:20 - connection strings and passwords and
31:22 - things like that so just a tip that's
31:25 - something that I use a lot is those
31:28 - environment variables within different
31:29 - projects okay so I think that is going
31:31 - to do it for this video hopefully now
31:33 - you have a good idea for how pipi and V
31:35 - works and how you can start using it on
31:37 - your projects I actually like this tool
31:39 - a lot and will most likely be using it
31:42 - instead of Pip and virtually envy for
31:44 - most projects from here on out now a lot
31:47 - of people are doing the same so it'd
31:49 - definitely be beneficial for you to
31:50 - learn this also but if you have any
31:52 - questions about what we covered in this
31:53 - video then feel free to ask in the
31:55 - comment section below and I'll do my
31:56 - best to answer those and if you enjoy
31:58 - these tutorials and would like to
31:59 - support them then there are several ways
32:00 - you can do that these are sways to
32:02 - simply like the video and give it a
32:03 - thumbs up and also it's a huge help to
32:05 - share these videos with anyone who you
32:07 - think would find them useful and if you
32:08 - have the means you can contribute
32:09 - through patreon and there's a link to
32:11 - that page in the description section
32:12 - below be sure to subscribe for future
32:14 - videos and thank you all for watching
32:26 - you