00:00 - hey there how's it going everybody in
00:01 - this video we'll be learning about
00:03 - dictionaries and how we can work with
00:04 - them in Python so dictionaries allow us
00:06 - to work with key value Pairs and if
00:08 - you're coming from another programming
00:09 - language then you may have heard these
00:11 - called hashmaps or associative arrays so
00:13 - when I say that we'll be working with
00:15 - key value pairs these are two linked
00:17 - values where the key is a unique
00:19 - identifier where we can find our data
00:21 - and the value is that data so we can
00:24 - actually think of that almost like a
00:25 - real physical dictionary where we look
00:27 - up word definitions so in that example
00:30 - each word that we look up would be the
00:31 - key and the definition of that word
00:34 - would be the value so let's go ahead and
00:35 - take a look at some examples so let's
00:37 - say that we wanted to represent a
00:39 - student using a dictionary so to do this
00:41 - we could just create a student variable
00:44 - and set this equal to these curly braces
00:46 - and that's how we start our dictionary
00:48 - now within our curly braces here we will
00:50 - first put in our key so let's say that
00:52 - we want a a key of name now we're going
00:55 - to put in a colon to separate our key
00:58 - from our value and for the name here
01:00 - we'll just start off with John and now
01:02 - let's add some more keys and values and
01:04 - to separate these keys and values we're
01:05 - going to put in a comma so next let's
01:08 - put in a key of age and a value of 25
01:13 - and lastly we'll put in a key of courses
01:16 - and for this value we'll pass in a list
01:19 - of courses here so we'll say math and
01:22 - compy so now let's print out our student
01:25 - and see how that looks so if we save
01:28 - that and run it then we can that it
01:30 - prints out all of our keys and values
01:32 - now let's just get a value of one key so
01:36 - to do this we can add square brackets
01:38 - after our dictionary and then specify
01:40 - the key that we want to access so I can
01:43 - put in square brackets here and let's
01:44 - say that we want to access the name of
01:46 - that student dictionary so I'll just
01:48 - pass in the name key and run that and we
01:51 - can see that that gave us that value of
01:53 - that name key now if I wanted the
01:55 - courses instead then I could just pass
01:57 - in uh that courses for the key if I run
02:00 - that then you can see that we got this
02:02 - list of math and compi so we can see
02:04 - that these values in our dictionary can
02:06 - be just about anything our name is a
02:09 - string our age is an integer and the
02:12 - courses are a list now all of our keys
02:15 - are currently strings but they can
02:17 - actually be any immutable data type so
02:20 - usually these will either be strings or
02:22 - integers but there are a few more data
02:23 - types that they can be as well so for
02:25 - example instead of name as our key here
02:28 - if for some reason we wanted this to be
02:30 - an integer so I'll just pass in one so a
02:33 - one is a valid key and now if I access
02:36 - that key of one and run that then you
02:38 - can see that that gave us John but uh
02:41 - I'm going to set that back to be a
02:44 - string for now and keep that as name so
02:46 - what happens if we try to access a key
02:48 - that doesn't exist so for example I'll
02:51 - try to access the key of phone for a
02:53 - phone number so if we run this then we
02:55 - can see that we get a key error because
02:58 - that phone key doesn't exist
03:00 - now throwing an error when a key doesn't
03:02 - exist might not always be what we want
03:05 - so sometimes we might just want to
03:06 - return none or a default value so to do
03:09 - this we can use the dictionary's get
03:11 - method so instead of accessing this key
03:15 - this way if we were instead to say doget
03:18 - and use the get method um so let's just
03:21 - go ahead and get the name since we know
03:23 - that that key already exists so if I run
03:25 - that then we can see that that works
03:27 - just like before and gave us the value
03:29 - of J on but if I try to access a key
03:31 - that doesn't exist so we'll try to
03:33 - access that phone key again if I save
03:35 - that and run it then by default this git
03:39 - method returns none instead of an error
03:41 - and we can also specify a default value
03:43 - for keys that don't exist so to do this
03:46 - we can just pass the default value that
03:48 - we want as a second argument to this git
03:50 - method so I'll just put in a comma here
03:53 - and we'll put in a string that just says
03:56 - not found so if I save that and run it
03:58 - now we can see that for key that don't
04:00 - exist it returns not found um okay so
04:03 - let's look at how we can add a new entry
04:05 - to our dictionary so let's say that we
04:07 - wanted to add that phone number to our
04:09 - student dictionary and we'll set this
04:11 - just above our print statement here so
04:13 - to do this it's just as easy as saying
04:15 - student and then we will set the key
04:18 - that we want to set and set this equal
04:20 - to and we'll just set this equal to a
04:22 - string of 555
04:24 - 5555 and if I save that and run it then
04:27 - we can see that it found that value of
04:29 - the phone key when we ran our print
04:30 - statement now if a key already exists if
04:34 - we set its value like this then it will
04:36 - update the value of that key so for
04:39 - example if right below this I was to say
04:42 - student and name is equal to and we'll
04:46 - just pass in Jane if I save that and
04:49 - then print out I'll comment out that for
04:52 - now if I print out our entire student
04:55 - variable then we can see down here that
04:57 - the value for name was up updated when
05:00 - we assigned it to Jane now we can also
05:02 - update values using the update method
05:05 - now this is especially useful when we
05:07 - want to update multiple values at a time
05:09 - so for example let's say that we wanted
05:11 - to add this phone number uh update this
05:14 - name and also update the age as well so
05:17 - to do this all in one shot we could say
05:20 - student. update and this takes in a
05:23 - dictionary as an argument and the
05:25 - dictionary is just everything that we
05:27 - either want to add or update so we can
05:29 - say that we want to update that name to
05:31 - Jane and we will update the age to let's
05:35 - say 26 and we also want to add this
05:38 - phone key and that phone key will just
05:41 - set as what we had before
05:43 - 5555555 now if I save that and run it
05:46 - then we can see that just by running
05:48 - this one statement we updated the name
05:51 - to Jane the age is now 26 and it has
05:54 - this new key of phone number okay so now
05:57 - let's say that we wanted to delete
05:59 - delete a specific key and its value now
06:01 - one way that we can do this is by using
06:04 - the Dell keyword which stands for delete
06:07 - so let me just remove these updates here
06:10 - and then we can say so let's say that we
06:12 - wanted to delete the students's age so
06:15 - it's as easy as just saying Dell student
06:18 - age and now if we run this then we can
06:21 - see that now the only keys that exist
06:23 - are name and courses so that age key was
06:25 - deleted now another way that we can
06:27 - remove a key and value is with the pop
06:29 - method so if remember from our video on
06:31 - list the pop method will remove but also
06:34 - return that value so that allows us to
06:37 - grab the removed value with a variable
06:39 - so we could say um age is equal to and
06:44 - do a student. poop and what we want to
06:48 - pop is that age so if I save that then
06:52 - we'll also print the age here below
06:55 - student if I run that then we can see
06:57 - that the age and value were removed
06:59 - removed from our dictionary but we also
07:01 - created that age variable that contained
07:04 - the value that we popped off so that
07:06 - popped off 25 okay now let's look at how
07:09 - we can Loop through all the keys and
07:11 - values of our dictionary so first if we
07:14 - want to see how many keys we have in our
07:15 - dictionary then we can just print out
07:18 - its length with the Len function so if I
07:20 - was to say print Len of student and run
07:25 - that then we can see that it returns
07:27 - three because we have three keys in our
07:28 - student iary now if we wanted to see all
07:31 - of these Keys then we could just print
07:33 - out student. keys if I run that then we
07:37 - can see that that gave us all of the
07:38 - keys of our dictionary if we wanted all
07:40 - of our values then we could print out
07:42 - student. values if I run that you can
07:45 - see that that gives us only the values
07:47 - now if we wanted to see the keys and
07:49 - values then we could use this items
07:52 - method if I run this then we can see
07:55 - that now we have these pairs of key and
07:58 - value pairs so we have name John age 25
08:02 - courses with the list and we'll be
08:04 - coming back to these pairs in just one
08:06 - second so if we wanted to Loop through
08:08 - all of the keys and values in our
08:10 - dictionary we might be tempted to Loop
08:12 - through the same way we Loop through our
08:14 - list but if we just Loop through our
08:16 - list without using any method then it'll
08:19 - just Loop through the keys so for
08:21 - example if you were to say four key in
08:24 - student and then print out that key if
08:28 - we run this then we can see that it just
08:31 - looped through and printed out all of
08:32 - those keys now in order to Loop through
08:34 - the keys and values we'll need to use
08:37 - that items method that we just saw a
08:39 - second ago and so we'll just plug that
08:42 - in there we'll say student. items and
08:44 - now these come in a pair of two values
08:47 - so instead of just key we're also going
08:49 - to have to access the value so we can
08:51 - say for key value and student. items and
08:54 - now we'll print out the key and that
08:56 - value so if I run that so we can see
08:58 - that each Loop through this key variable
09:00 - was equal to each key and this value
09:03 - variable was equal to each value okay so
09:06 - I think that's going to do it for this
09:07 - video I hope that now everyone feels
09:09 - comfortable working with dictionaries
09:10 - and the functionality that's available
09:12 - to us and in the next video we'll be
09:13 - going over conditionals and how to write
09:16 - if else and L if statements we'll also
09:19 - be learning more about booleans and
09:20 - bullan operators now if anyone has any
09:23 - questions about what we covered in this
09:24 - video then feel free to ask in the
09:26 - comment section below and I'll do my
09:27 - best to answer those and if you enjoy
09:29 - these tutorials and would like to
09:30 - support them then there are several ways
09:31 - you can do that the easiest way is to
09:33 - Simply like the video and give it a
09:34 - thumbs up and also it's a huge help to
09:36 - share these videos with anyone who you
09:37 - think would find them useful and if you
09:39 - have the means you can contribute
09:40 - through patreon and there's a link to
09:41 - that page in the description section
09:42 - below be sure to subscribe for future
09:44 - videos and thank you all for
09:57 - watching