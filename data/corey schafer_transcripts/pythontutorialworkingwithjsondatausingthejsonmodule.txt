00:00 - hey there how's it going everybody and
00:01 - this video we'll be learning how to work
00:02 - with JSON data in Python now if you've
00:05 - never used JSON basically it's a very
00:06 - common data format for storing some
00:08 - information and you're bound to run into
00:10 - this at some point if you haven't
00:11 - already
00:12 - so you'll see JSON used a lot when
00:14 - fetching data from online api's but it's
00:16 - also used for configuration files and
00:18 - different kinds of data that can be
00:20 - saved on your local machine so JSON
00:22 - stands for JavaScript object notation
00:24 - but don't get caught up on the
00:26 - JavaScript part of the name it was
00:28 - inspired by JavaScript but is now
00:30 - independent of any one language so
00:32 - pretty much every language these days
00:33 - has libraries for parsing and generating
00:36 - JSON data so let's go ahead and get
00:38 - started and see what this looks like in
00:40 - Python so first of all i've imported the
00:42 - json library here at the top of the file
00:44 - and this is part of the standard library
00:45 - so there's no need to install anything
00:47 - and I have a multi-line string here that
00:49 - is valid JSON and you can see that this
00:53 - almost looks like a Python dictionary so
00:55 - this JSON here has a key called people
00:58 - and the value of people is an array of
01:01 - more objects so in this case it's just
01:03 - two more objects and each object has a
01:06 - key of name a key of phone emails and
01:10 - has license which is just a boolean of
01:13 - true or false so right now this is just
01:15 - a Python string that happens to be valid
01:17 - JSON so let's see how to load this into
01:19 - a Python object so that we can work with
01:22 - the data more easily so to load this
01:23 - into Python from a string we can use the
01:26 - json dot load s method and so to do this
01:30 - we can say data equals json dot load s
01:34 - and we want to pass in that string into
01:38 - that load s function so i'll save that
01:40 - and now let's print this out so I will
01:43 - just print out data and run that ok so
01:45 - we can see that it prints that out but
01:47 - it's not very clean it's kind of bunched
01:49 - together but it looks like a Python
01:51 - dictionary so if I check the type of
01:53 - this data variable and just print out
01:56 - the type of data save that and run it
01:59 - then we can see that that is a
02:01 - dictionary so when we load JSON into a
02:04 - Python object it uses the following
02:07 - conversion table let me pull this up
02:09 - here to convert this into a Python
02:12 - object so when it parses out that string
02:14 - if it finds a JSON object it converts
02:16 - that to a Python dictionary it converts
02:19 - JSON arrays into a Python list a string
02:22 - into a Python string integers into
02:25 - integers and these real numbers and the
02:27 - floats the true values you can see get
02:30 - converted to a capital case true in a
02:33 - capital case false and null values get
02:36 - converted to a Python none value so that
02:38 - is how these conversions happen so now
02:41 - let me open back up our Python so if I
02:44 - print out this data variable again then
02:47 - run this then we can see that locate
02:50 - shows we have a boolean value here and
02:52 - you can see that this is now uppercase
02:54 - and we also had a null value up here for
02:57 - the second objects emails as null and we
03:00 - can see that that got converted to none
03:02 - so those conversions did take place so
03:04 - since our top-level key here is a array
03:09 - of values that should now be equal to a
03:12 - list so since this is a dictionary we
03:15 - should be able to access this key of
03:16 - people and that should be a list so
03:18 - let's say let's print out the type and
03:21 - let's access that people key of that
03:25 - dictionary so if I save that and print
03:27 - that out then you can see that that is a
03:29 - list so that got converted so now that
03:31 - we've converted that JSON to Python
03:33 - objects it's going to be a lot easier to
03:35 - work with these so now we can loop
03:38 - through all these people and access each
03:40 - one individually so since that is a list
03:42 - I could say for person in data and then
03:46 - access that people key there and then
03:49 - for each one of those we could just
03:51 - print out the person so if I save that
03:54 - and run it then you can see that it ran
03:56 - each of these people individually and
03:59 - since each of these people in our
04:00 - original JSON are objects themselves
04:03 - then those should have got converted to
04:05 - dictionaries as well so now we can
04:06 - access those values within our loop so
04:09 - if we wanted to access the name of each
04:11 - person then we can just come here within
04:12 - our loop and say person and then access
04:15 - that name variable so if I save that and
04:17 - run it then you can see that now we're
04:19 - accessing the names of each person in
04:22 - that JSON file okay great so now that
04:24 - we've seen how to load a JSON string
04:26 - into a Python object
04:27 - now let's do the reverse of that and
04:29 - dump a Python object into a JSON string
04:32 - and to do this we'll use the json dot
04:35 - dump s method so in our example let's
04:38 - say that we wanted to remove the phone
04:40 - numbers from each person and then
04:42 - convert this back to a json string so to
04:44 - remove the phone number key and value
04:47 - from each person within our loop we can
04:50 - just delete that value so within our
04:52 - loop here we can just say delft or
04:54 - delete person and then access that phone
04:57 - key and that will delete the key and the
05:00 - value from that dictionary so now that
05:02 - we've removed those phone numbers from
05:03 - those objects let's dump all of that
05:06 - back into a string using that dump s
05:09 - method so I will say new string is equal
05:12 - to and it's JSON dump s and we want to
05:16 - dump in this data dictionary that we
05:20 - just modified so now let's print this
05:23 - out so I'll print out that new string
05:26 - save that and run it let me make this a
05:29 - little larger here so you can see that
05:31 - we have a new JSON string that no longer
05:33 - contains the phone numbers for each
05:35 - person now since this is a string it
05:37 - would be nice if we could just format
05:39 - this in a way where it's easier to read
05:41 - so to do this we can pass in an indent
05:43 - argument to our function to our dump s
05:45 - function to indent this correctly so we
05:47 - could say when we dump this we could
05:50 - pass in indent is equal to and then the
05:53 - number of indentions per item in the
05:57 - string so if we save that and run it
06:00 - then we can see that for each level it
06:02 - indents it twice so this nested level is
06:05 - ended in for x and then this one 6 x and
06:07 - so on so when you're dumping these are
06:09 - strings if you want to format it in a
06:10 - way that's very easy to read then using
06:13 - that indebt method really helps out and
06:15 - makes it a lot easier to see exactly
06:17 - what's going on now another thing that
06:19 - you can do to clean up your json when
06:21 - dumping it to a string is to sort the
06:23 - keys so if we pass in an argument of
06:25 - sort keys is equal to true so at the end
06:28 - here it's sort under underscore keys
06:31 - I'll set that equal to true if we save
06:34 - that and run it then we can see that now
06:35 - all these keys are sorted alphabetically
06:37 - where email comes first and then has
06:39 - licensed and then name now that may
06:41 - or may not be what you want but you have
06:43 - the option there if you want it ok so
06:45 - now that we've seen how to convert
06:47 - strings to Python objects and vice versa
06:49 - now let's see how to load JSON files
06:51 - into Python objects and then write those
06:53 - objects back to JSON files so I'm going
06:56 - to go ahead and delete everything here
06:58 - that we have so far except for our
07:00 - imports and save that and clear that out
07:04 - now I have a JSON file and the same
07:05 - directory as my Python script here and
07:07 - this is called States JSON and this is a
07:11 - JSON file with a list of all the US
07:13 - states their abbreviations and their
07:16 - area codes so if I wanted to load this
07:18 - file into a Python object then we can
07:21 - use the JSON load method so just
07:24 - remember the load method loads a file
07:26 - into a Python object and the load s
07:29 - method we saw before loads a string so
07:31 - to load in this file we first have to
07:34 - open it so we can open this file with a
07:37 - with statement so we can say with open
07:39 - and that file is in the same directory
07:41 - so that we don't have to pass in a path
07:43 - it's just called States dot JSON and
07:46 - we're just going to read that so we'll
07:48 - leave that as the default and we'll just
07:51 - say as F and now with this file open we
07:54 - can load this into a Python object by
07:56 - saying data is equal to json dot load
07:59 - and load in that file now if you've
08:02 - never worked with file objects before
08:04 - and you don't really know what's going
08:05 - on here with this with open statement
08:07 - and what we're doing there then I do
08:09 - have a separate video on working with
08:11 - file objects if you're interested and
08:13 - I'll leave a link to that in the
08:14 - description section below ok so now that
08:16 - we've loaded this JSON file into a
08:18 - Python object we should be able to loop
08:20 - through our data just like we did before
08:22 - now if I look back at the JSON file we
08:25 - can see that there is a state's key here
08:27 - and then that is a list of objects and
08:30 - all these objects have a name
08:32 - abbreviation and area code so if I go
08:35 - back to my list to loop through those
08:37 - remember that was a state's key so we
08:39 - could say for state in data then access
08:43 - that state's key and then for each of
08:47 - those let's just print out the entire
08:49 - object and that object we just called
08:52 - state for the state variable so if I
08:54 - save that and run it
08:55 - then it should print out that object for
08:57 - each state and now that this is a Python
08:59 - object it's very easy to access this
09:02 - information and any way that you want so
09:04 - for example if you wanted to print out
09:06 - just the name and the abbreviation then
09:08 - you could say state name then we'll put
09:10 - in a comma and also print out the state
09:13 - abbreviation so copy that paste that in
09:16 - there save it and run it and you can see
09:18 - that now we have the state and the
09:20 - abbreviation access from that JSON file
09:22 - okay so now that we've loaded this JSON
09:24 - from a file now let's write this Python
09:26 - object out to a JSON file like we did
09:29 - and the smaller example let's just
09:31 - remove one of the keys from the data and
09:33 - then write that to a new file so in this
09:35 - example let's go ahead and just remove
09:37 - the area codes so like we saw a bit ago
09:40 - to remove that from a dictionary we can
09:43 - just say del and then what we want to
09:46 - delete so we will delete the let's see
09:49 - that is I believe area underscore codes
09:52 - yeah I'll just copy and paste it so I
09:54 - don't spell anything wrong so save that
09:56 - so now we've removed the area codes from
09:58 - that data and now to write this file as
10:01 - JSON we will use the JSON dump method so
10:05 - just like with the load and the load s
10:07 - method the dump method converts the data
10:09 - to a JSON file and the dump s method
10:12 - converts the data to a JSON string just
10:14 - like we saw before so first we have to
10:17 - open the file that we want to write to
10:19 - so just like before when we read in the
10:21 - data will say with open and we can call
10:24 - this whatever we want so I'll just call
10:25 - this new underscore States dot JSON and
10:29 - we want to write this file so we gotta
10:32 - pass in a W as an argument there and
10:35 - we'll just say as F and now we can dump
10:40 - that data to the file just by saying
10:42 - json dot dump and at first we want to
10:45 - pass in the data that we want to dump so
10:47 - that is this data variable here and then
10:50 - what we want to dump this to so in this
10:53 - case we want to dump this to the file we
10:54 - just opened which is this F variable so
10:57 - if I save that and run it now let me
11:00 - open up my sidebar here and here in the
11:02 - same directory we can see that it
11:04 - created this new underscore States JSON
11:06 - so if we open this up we can
11:09 - see that it's kind of compressed
11:10 - together but we have States key here and
11:13 - then within this list we have named
11:15 - Alabama a brief of briefie Asian
11:18 - Alabama and then it moves right on to
11:20 - Alaska so it did delete those phone
11:21 - numbers there so that did do what we
11:23 - wanted but it's not really easy to read
11:25 - so just like we did with the dump s
11:27 - method we can also pass in an indent
11:30 - argument into our dump method here to
11:33 - clean this up a bit so if I say indent
11:35 - is equal to 2 and save that and run it
11:38 - if we open back up our new state's JSON
11:40 - file here then we can see that this is
11:43 - now a lot easier to read okay so now
11:45 - that we've seen how to work with JSON
11:47 - strings and files and going back and
11:49 - forth between Python objects now let's
11:52 - look at a real world example of using
11:53 - JSON data so that we can get a sense for
11:55 - how this might be used in practice so
11:57 - it's pretty common for websites to
11:59 - return JSON from their API s so that
12:02 - it's easy to parse so let's see what
12:04 - grabbing JSON data from a public API
12:06 - would look like and how we might parse
12:09 - that data so I found a Yahoo Finance API
12:12 - that converts United States dollars into
12:15 - other currency so let's see if we can
12:18 - pull down this data convert it convert
12:21 - the JSON into a Python object and then
12:23 - parse out some information so I already
12:25 - have a Python file here to get us
12:27 - started out so to make the request to
12:29 - the web API
12:29 - I'm using the built-in URL Lib module
12:32 - and specifically I'm importing URL open
12:35 - from URL Lib dot request now you can
12:38 - also use the request library to do this
12:40 - if you're more comfortable using that so
12:42 - you can see that I've already got the
12:44 - URL paste it in here to the URL open
12:46 - function and then we are setting this
12:49 - source variable here equal to that
12:52 - response and then we are using the dot
12:54 - read method on that response now that
12:56 - will just get the response from the
12:59 - website and right now this is just going
13:01 - to be a string so if I run this then it
13:05 - should just print out all the content of
13:06 - that website you can see it's not very
13:08 - readable we've got newline characters in
13:10 - here and things like that
13:12 - so now let's load this response into a
13:13 - Python object using the JSON module so I
13:17 - will create a variable down here called
13:19 - data and we'll just say JSON dot
13:22 - load s since that is a string and we
13:25 - will pass in that source variable there
13:28 - I'm going to go ahead and get rid of
13:30 - that print statement okay and now that
13:32 - this is a Python object let's
13:34 - immediately dump it back into a string
13:36 - with the indent argument passed in so
13:39 - that we can clean this up a bit and see
13:40 - a little bit more what it looks like so
13:42 - I will just print out json dot dump s
13:46 - and we want to dump out that Python
13:49 - object that we just created but we're
13:51 - gonna set indent equal to two so if we
13:55 - save that and run it then we can see
13:57 - that we've got some cleaned up JSON here
13:58 - and I'll scroll up to the top if I can
14:00 - okay great so we can see we got some
14:02 - JSON data so we can see that the first
14:05 - key is list and then within list we have
14:08 - this meta key which has some metadata so
14:11 - we can see that it says here that the
14:13 - count is 188 items and also within this
14:17 - list we have resources and within
14:20 - resources there is another list in here
14:23 - and inside that list we just have the
14:25 - individual resources that have the
14:27 - conversion information so we have
14:29 - another resource key then we can see
14:31 - that it has fields and then this is
14:33 - where we get down to you know the name
14:35 - of the conversion and the price for that
14:37 - conversion okay so let's start working
14:39 - with this data so first of all let's
14:41 - just see if that count of 188 is correct
14:46 - so let's take a look we have this list
14:49 - and then we have these resources so
14:51 - let's see if there are actually 188
14:53 - resources there so I could print out I'm
14:56 - going to comment out our printed JSON
14:59 - for now so I'm just going to print out
15:00 - the length of that data object and we
15:04 - are going to access that list and within
15:08 - that list
15:09 - we are going to access resources and
15:11 - just so I don't spell this wrong I'll
15:13 - copy that and paste it in there so let
15:15 - me save that and run it and you can see
15:17 - that we did get 188 resources in that
15:20 - list so that is correct okay so now
15:21 - let's actually loop through all of those
15:23 - resources so we can say for item in data
15:28 - and I should have just copied and pasted
15:30 - that but that's okay that is it within
15:31 - list and
15:33 - then access resources so for the item in
15:37 - that list then just print out each of
15:40 - those items okay so that's a little hard
15:43 - to see because my text is a little large
15:45 - here but we can see that each of these
15:47 - items has let's see a resource key and
15:51 - within that resource key we have these a
15:54 - class name and then the fields and
15:55 - within those fields that's where we have
15:57 - the name and the price so let's say that
16:00 - we wanted to print out all the
16:02 - conversion names and all the prices so
16:05 - to do this we can just come up here and
16:06 - remove this line here I'm just going to
16:09 - say the name is equal to our item and
16:12 - then to dig down in to this item we're
16:16 - gonna access this resource key and then
16:18 - within there we're going to access the
16:21 - fields and then within the fields we're
16:25 - going to access the name so now I will
16:28 - save that and paste it in here because
16:31 - now we want to access the price so I'll
16:34 - say price is equal to all that same
16:36 - information but now instead of the name
16:38 - in those fields we want to access the
16:40 - price in those fields and this might
16:42 - look a little messy here but you'll end
16:43 - up doing this a lot when working with
16:45 - JSON data some of this JSON data when
16:47 - you're working you know with real world
16:49 - examples you kind of have to dig down a
16:51 - bit until you get exactly what you're
16:52 - looking for so now we should have the
16:54 - name and the price of those conversions
16:57 - so if I print out name and price and
17:00 - save that and run it then now we have
17:03 - the name of each conversion and then the
17:06 - actual price of that conversion okay so
17:08 - now let's actually use these conversion
17:10 - rates to convert US dollars to a
17:12 - specific currency so I'm going to create
17:14 - a new dictionary that has all of these
17:16 - names as the key and all of the
17:19 - conversion rates as the value so that we
17:21 - can access these quickly so above our
17:23 - for loop here I'm just going to create
17:25 - an indeed empty dictionary so I'm going
17:27 - to say call this USD rates and set that
17:31 - to an empty dictionary there and then
17:34 - within our loop we can add each of these
17:36 - names as a key by saying USD rates and
17:41 - we'll use the name as the key and then
17:44 - the values will be the prices so we'll
17:47 - set the price there and save that oh and
17:51 - it looks like I actually have a typo
17:52 - here this is supposed to be USD rates
17:54 - not us our rate okay so now that we have
17:57 - that new dictionary set up we can access
18:00 - a specific value just by accessing that
18:02 - key so we can get the USD to Euro rate
18:05 - just by printing out let's say just
18:08 - print out USD rate and then we want to
18:11 - access the key for USD into euros so
18:16 - let's save that and run it and we can
18:18 - see that this says that the USD is equal
18:20 - to about zero point eight four six five
18:23 - euros now these conversions here I just
18:27 - have these written down so it's not like
18:29 - I've memorized these if you pull down
18:31 - this data for yourself then you can see
18:33 - whatever a conversion you'd like okay so
18:34 - now let's actually make a conversion so
18:36 - if we wanted to convert let's say 50 US
18:39 - dollars to euros then we could say 50
18:42 - times and now this is actually a float
18:45 - value here but it's coming in as a
18:47 - string right now so let's convert that
18:49 - to a float and then we can save that and
18:52 - run it so 50 US dollars would right now
18:55 - be about forty two point three to five
18:57 - euros and it changed this conversion you
18:59 - could just pass in a different currency
19:01 - so let's say that we wanted to convert
19:03 - to Indian rupees then that would just be
19:06 - USD to I in R so if we save that and run
19:10 - it then we can see that that conversion
19:12 - is about 50 USD to three thousand two
19:15 - hundred and forty now if you wanted to
19:17 - then you could write a script that pulls
19:18 - down this conversion information from
19:20 - the API once a day and then save it to a
19:22 - local JSON file for faster access and
19:25 - then write a function that accesses this
19:27 - information in a more repeatable way so
19:30 - we can see how understanding how to
19:31 - parse and work with this JSON
19:33 - information can be extremely beneficial
19:35 - for grabbing data from the internet and
19:37 - using it to fit our needs and there are
19:39 - countless other JSON API is out there
19:41 - and it's essential to know how to work
19:43 - with this information if you want to
19:45 - grab data from external sources okay so
19:47 - I think that is going to do it for this
19:49 - video hopefully now you understand how
19:51 - to work with JSON data and convert back
19:53 - and forth between that and python
19:55 - objects but if anyone does have any
19:57 - questions about what we covered in this
19:58 - video then feel free to ask in the
20:00 - comment
20:00 - section below and I'll do my best to
20:01 - answer those and if you enjoyed these
20:03 - tutorials and would like to support them
20:04 - then there are several ways you can do
20:06 - that the easiest ways to simply like the
20:08 - video and give it a thumbs up and also
20:09 - it's a huge help to share these videos
20:11 - with anyone who you think would find
20:12 - them useful and if you have the means
20:13 - you can contribute through patreon and
20:15 - there's a link to that page in the
20:16 - description section below be sure to
20:18 - subscribe for future videos and thank
20:20 - you all for watching
20:31 - you