00:00 - hey there how's it going everybody in
00:01 - this video I'm going to be showing a
00:03 - real-world example of writing a Python
00:05 - script that automates some tasks so
00:07 - specifically I'm going to be showing how
00:09 - I can write a script to grab a list of
00:11 - my patreon supporters using the patreon
00:13 - API and then using the pillow library to
00:16 - create an image with those names so that
00:19 - I can add support or credits to the end
00:21 - of my videos now this is going to focus
00:23 - specifically on the patreon API but I'm
00:26 - also going to do this for YouTube
00:27 - members as well in a future video so if
00:30 - you're a YouTube member then don't worry
00:31 - I won't forget about you now this is a
00:34 - perk that I added for YouTube members
00:36 - and patreon supporters just this week
00:38 - and as I was writing the code to do this
00:40 - I thought that would make for a useful
00:42 - video I added a couple of other perks as
00:45 - well so if you're interested then be
00:46 - sure to check out my latest post over on
00:48 - the community tab on YouTube that
00:50 - explains what some of those are now just
00:52 - in case you're not entirely clear what
00:54 - my goal here is let me show you what the
00:56 - finished version of what we'll be
00:58 - building in this video looks like and
01:00 - after we look at this then I'll show you
01:02 - how to write this code from scratch so
01:04 - this is the finished version of the code
01:06 - that we're going to be writing in this
01:07 - video and you can see that I'm using the
01:09 - patreon API here I have an access token
01:13 - don't worry I'm gonna get rid of these
01:14 - access tokens before I publish this
01:16 - video and then we're just doing a bunch
01:20 - of different things here to go out and
01:21 - grab a list of patreon supporters and
01:25 - then I also have this image module over
01:28 - here and what this does is it takes
01:30 - those lists of patreon names and it
01:33 - creates an image using those names and I
01:36 - know that this looks like a lot but
01:37 - we're gonna write all of this from
01:38 - scratch in this video so hopefully by
01:40 - the end it'll all make sense but if I go
01:43 - ahead and run what I have now then let
01:46 - me show you what this is supposed to do
01:48 - so it's going out to the API here and
01:50 - getting patreon info it has to reverse a
01:53 - couple of pages and then once it's done
01:56 - it will create a credits dot PNG here so
02:00 - hold on this isn't done yet let me go
02:03 - ahead and open my Finder window here
02:07 - okay so that just finished up and now if
02:09 - I open up my Finder window here and look
02:12 - at the image
02:13 - is the image that I wanted to create so
02:15 - it went out to the patreon API got a
02:18 - list of supporters and made a credits
02:22 - image here that I can use in my videos
02:25 - now so with that said let's go ahead and
02:28 - see how I can write this from scratch
02:31 - okay so I'm just going to go ahead and
02:33 - close down this project that I have now
02:35 - and I have an empty project pulled up
02:38 - here with no code written yet now I know
02:41 - that there probably aren't a lot of
02:42 - people watching this that will be using
02:44 - the patreon API for anything but I still
02:47 - think that this is a good video to learn
02:48 - some neat Python tricks and see how we
02:50 - can automate some of these tests to make
02:52 - our lives a little bit easier and I'll
02:54 - be covering more api's in the near
02:56 - future as well so this will be a good
02:58 - introduction into how this usually works
03:01 - so with that said let's go ahead and get
03:03 - started so first of all some of you
03:05 - might be wondering why I'm using an API
03:07 - instead of using web scraping or
03:09 - something like that
03:10 - well the reason for that is because I
03:12 - have two-factor authentication set up on
03:15 - my patreon account that texts me a login
03:17 - code to my phone so using web scraping
03:20 - would get a little complicated in that
03:22 - case and that goes for a lot of these
03:25 - services and anytime you want to create
03:27 - an app that grabs information from you
03:29 - know sites like patreon or Twitter or
03:31 - YouTube or something like that
03:33 - then it's almost always a good idea to
03:36 - use their API because it gives you an
03:38 - easier and more effective way to access
03:41 - their data so most of the time when you
03:43 - use an API you'll need to login to
03:46 - whatever service you are using and
03:48 - create a secret API key and that's what
03:51 - you'll use in your application so that
03:53 - they know who you are and can
03:55 - authenticate you so that's the first
03:57 - thing I'm going to do with this project
03:58 - as well so let me go over to my patreon
04:01 - account and create a new API key so that
04:04 - I can be authenticated and get the
04:06 - information that I'm looking for okay so
04:08 - we can see that I already have a one API
04:11 - key here but I'm just going to delete
04:13 - this because this is the one that I just
04:14 - used in that in that sample project so
04:19 - now it's asking you to put in the secret
04:21 - key in order to delete this here so let
04:25 - me delete this
04:26 - and now that API key will be useless so
04:32 - it's okay that I showed that key at the
04:34 - beginning of the video because it's no
04:36 - longer going to be able to be used okay
04:38 - so now I'm going to need to create a new
04:40 - API key so this is most likely going to
04:43 - be the first step
04:44 - anytime you're using an API like Twitter
04:47 - or YouTube or anything like that
04:50 - so to do this on patreon they just have
04:52 - a create client here and then we have to
04:54 - fill in some details and this is pretty
04:56 - common as well so I have to give this an
04:59 - app name so I'm going to just fill in
05:02 - YouTube credits for the app name it
05:04 - needs a description I'll just say Python
05:08 - script to fetch current patrons for the
05:12 - app category here I will select let's
05:15 - see patron recognition and now it
05:17 - doesn't look like any of these other
05:19 - ones are required except for this
05:21 - redirect URIs now if I was doing an oath
05:25 - o auth type of application then I would
05:28 - need to put in a URL here I still need
05:31 - to put in a URL but I'm not gonna be
05:34 - using OAuth in this video whoops and it
05:37 - says that I need HTTPS here so let me
05:41 - add that in as well and I think that if
05:44 - you don't have a personal website
05:45 - I think patreon actually has a website
05:48 - that you can use here in place and also
05:50 - for the client API version I'm gonna
05:53 - select just the latest version and check
05:54 - version 2 there now I can create that
05:57 - client and now whenever I open up this
06:01 - new client that I just created we can
06:03 - see that now we have a bunch of
06:05 - different IDs and secret tokens here so
06:08 - all I'm gonna need for the app that I'm
06:10 - writing in this video is going to be
06:12 - this creators access token right here
06:15 - and I'll be deleting these credentials
06:17 - after this video so don't worry about
06:19 - people seeing this video and trying to
06:21 - access my patreon data because you know
06:24 - by the time I release the video I'll
06:26 - have created a different app with
06:27 - different credentials now as far as
06:29 - these other keys here now if I were
06:32 - building an OAuth application then I
06:34 - would need some of these others as well
06:35 - if you don't know what oh aw this' then
06:37 - don't worry about that too much like I
06:39 - said we won't be covering
06:40 - that here this is just going to be a
06:42 - simple script that just requires this
06:44 - creators access token now if you're
06:47 - wondering how I know that I only need
06:49 - the Creator access token it's because I
06:51 - read through their API documentation
06:53 - anytime you're working with an API the
06:56 - documentation is going to be absolutely
06:58 - essential I have this open here in the
07:01 - browser if we want to see what this
07:03 - looks like and trust me sometimes it's
07:06 - frustrating when the documentation isn't
07:08 - as good as you'd hoped but if you take
07:10 - the time to read through then usually
07:12 - it's a big help I really do wish that
07:14 - they'd add some more Python examples to
07:18 - this patreon API documentation because
07:20 - it did take me a good bit of time
07:22 - playing around to find out how to do
07:24 - exactly what I wanted to do in this
07:26 - video and I'll leave a link to the
07:28 - patreon API documentation and the
07:30 - description section below
07:31 - just in case anybody's interested ok so
07:34 - let me copy this creator access token
07:38 - here and then I can use this in my
07:41 - Python script so now that we have that
07:43 - copied we can begin writing our script
07:45 - that will effect a from patreon and I
07:49 - already have a folder created on my
07:51 - desktop with some empty scripts and I
07:54 - also have a virtual environment
07:56 - activated as well but you don't have to
07:58 - use a virtual environment I just like to
08:00 - use a new environment for every video
08:02 - and if you'd like to learn more about
08:04 - virtual environments then I'll be sure
08:06 - to leave a link to my video on that
08:07 - topic in the description section below
08:09 - as well now before I start writing some
08:11 - code here I do want to install something
08:13 - now sometimes these companies will also
08:15 - make libraries that make it easier to
08:17 - work with their API and patreon has one
08:20 - of these so to use their library we can
08:22 - simply install the official patreon
08:25 - package using pip so I have my terminal
08:28 - open here with my environment activated
08:30 - and this is just pip install and this is
08:34 - patreon so I'm going to install this and
08:38 - what's that is installed then I will
08:41 - minimize this and now open up our
08:43 - project so like I said I have a
08:45 - directory on my desktop here called
08:46 - patreon with two files in here and right
08:50 - now both of these files are empty but
08:52 - this could be located anywhere
08:54 - okay so the first thing I'm going to do
08:55 - here is import the patreon package that
08:58 - we just installed so that is import
09:00 - patreon and now I'm gonna paste in that
09:03 - access token that we got from the
09:05 - patreon site and this is a pretty common
09:08 - workflow so far when working with api's
09:10 - so I'm just going to call this access
09:12 - underscore token and set that equal to
09:15 - that access token that we got from
09:18 - patreon now for the purpose of making
09:19 - things easy for this video I'm just
09:22 - going to have this access token directly
09:24 - in my script but when you work with
09:26 - api's you definitely want to keep these
09:28 - access tokens secret if someone gets
09:31 - ahold of your access code then they'll
09:33 - be able to access the API services on
09:35 - your behalf so if you ever think an API
09:37 - key is lost or stolen then you'll need
09:40 - to delete that key and create a new one
09:43 - now one way to keep these tokens and
09:45 - passwords safe is to put them in an
09:47 - environment variable or a configuration
09:49 - file that isn't committed to any
09:51 - repositories and I have a video on using
09:53 - environment variables for these kinds of
09:55 - secret keys as well so if you'd like to
09:58 - see what that looks like then I will
09:59 - leave a link to that video in the
10:01 - description section below okay so now
10:03 - that we have that access token there are
10:06 - several ways that we could talk to the
10:07 - API so we could make web requests using
10:10 - something like the web request library
10:13 - or the request library and those web
10:16 - requests would return JSON data now this
10:19 - wouldn't be the same as scraping a page
10:21 - because there wouldn't be any HTML that
10:24 - we need to parse api's return data and
10:27 - an easy to digest format which is
10:29 - usually JSON but the reason that we
10:32 - installed this patreon package is
10:33 - because it makes this a bit easier by
10:36 - giving us access to their own custom
10:38 - classes and methods that will make these
10:40 - web requests in the background for us so
10:43 - for example to get authenticated with
10:45 - the API I can simply say something like
10:48 - API underscore client is equal to
10:52 - patreon dot I and then pass in my access
10:58 - token so you can see that the package
11:00 - that we installed had this API class and
11:03 - we instantiate that with our access
11:06 - token and that'll make all the authentic
11:08 - and web requests for us in the
11:10 - background now again I'm not going to go
11:12 - into a lot of the details here on using
11:16 - the API and what's in the documentation
11:18 - but that documentation is what I had to
11:21 - read through in order to know exactly
11:22 - what methods to use and how to pass in
11:25 - this kind of information when you're
11:27 - working with api's the documentation
11:29 - will definitely be your best friend ok
11:31 - so now we should be authenticated
11:33 - through the API and before I fetch my
11:36 - patrons I need to grab my campaign ID
11:38 - which is basically just a reference to
11:41 - my patreon account so to do this I'm
11:45 - just gonna leave a comment here as well
11:47 - and I'll just say you know get the
11:49 - campaign ID
11:51 - and to get this I'm gonna say campaign
11:55 - underscore response is equal to and then
11:59 - I'm going to take this API client here
12:01 - and this is API client dot fetch
12:05 - underscore campaign and now in order to
12:09 - actually get the campaign ID I need to
12:13 - say campaign underscore ID is equal to
12:16 - and this campaign response here has a
12:20 - method called
12:21 - data and within that response
12:25 - I'm gonna grab the first item of that
12:28 - response and then grab the ID of that
12:31 - item now again I know that this looks a
12:34 - little confusing for now but this was
12:37 - just template code that I found in the
12:39 - documentation I haven't really done
12:40 - anything unique with this API yet that
12:43 - wasn't in their documentation but now
12:45 - that I have my campaign ID this is when
12:48 - I'll start customizing this code to kind
12:50 - of fit my own needs so to grab my
12:52 - patrons they have a method that grabs
12:55 - one page of pledges at a time so now let
12:59 - me go ahead and grab a page of pledges
13:01 - so that we can see what this looks like
13:03 - and then we'll see how to loop over and
13:06 - grab all of the results and don't worry
13:08 - I'm not gonna expose any information
13:10 - here from any of my supporters just
13:13 - except for their names and these
13:15 - supporters are actually ones who
13:17 - selected the option on patreon that they
13:19 - are okay with you know me
13:21 - giving them a shout-out so to get a page
13:24 - of pledges I can simply say pledges
13:27 - underscore response is equal to and now
13:32 - I'm gonna use this API client again and
13:34 - this method is called fetch underscore
13:38 - whoops let me spell this correctly
13:40 - fetch underscore page underscore of
13:43 - underscore pledges and now we need to
13:47 - pass in a couple of arguments so first
13:50 - it's going to need our campaign ID so
13:52 - that it knows you know what patreon
13:55 - account to get pledges for and also the
13:58 - number of patrons per page I'll just say
14:01 - 25 so to make sure that we actually got
14:04 - a response of 25 people we can print
14:07 - that response out by accessing the data
14:10 - method of this response so I'll just
14:13 - print this out and say that I want to
14:15 - print pledges response dot data so if I
14:21 - haven't made any mistakes so far in the
14:23 - video then this should work so let's see
14:26 - what we get here okay so we can see that
14:29 - we get a list I'm not going to count
14:30 - these up but I'm just going to assume
14:32 - that we have 25 of these patreon JSON
14:37 - API resource objects and these are
14:40 - actually the patrons even if it's not
14:42 - completely obvious at the moment it
14:44 - actually took me a bit of good bit of
14:46 - time figuring out how to get specific
14:48 - information from these objects you know
14:51 - like I said earlier I think that they're
14:53 - Python documentation could use a little
14:55 - bit of work because it wasn't really
14:57 - easy for me to figure this out but after
15:00 - some playing around I found out that I
15:02 - can get information by accessing
15:05 - specific attributes and relationships on
15:07 - this object so for example if I wanted
15:11 - to grab a patrons name then I could
15:15 - simply say let me remove this print
15:17 - object there I'll say for pledge in this
15:22 - pledge response dot data so we're
15:26 - looping over each of these JSON API
15:29 - resources here and now to print out
15:32 - their first name I will say
15:35 - pledge dot relationship and then I will
15:41 - pass in patron and basically this will
15:44 - allow me to access certain attributes of
15:47 - a specific patron so now to access an
15:51 - attribute I can say dot attribute whoops
15:54 - let me spell that correctly dot
15:56 - attribute and I'm just going to grab the
15:59 - first name now I'm only going to access
16:02 - the first name right and how because not
16:05 - all of these supporters selected the
16:07 - option that they were okay with you know
16:09 - getting shoutouts publicly so I'm gonna
16:12 - respect their privacy here and just
16:13 - print out first names for now and in a
16:16 - bit I'll show how we can narrow it down
16:18 - to the people who are in you know that
16:21 - shout out we're rewarded here so if I
16:26 - run this we should get some first names
16:29 - here okay so this looks good
16:32 - it looks like it is working so far so
16:35 - that's good but right now we're only
16:38 - getting 25 people since we only grabbed
16:41 - one page so how can we get all of the
16:45 - pages so that I can grab everybody
16:48 - well the patreon package helps us out a
16:50 - lot here because each page is returned
16:53 - gives us a reference to the next page
16:57 - and we can keep track of this of which
16:59 - page we're using or which page were on
17:02 - using a cursor so I'm going to write an
17:05 - infinite loop that keeps grabbing pages
17:07 - until there are no more left or until
17:10 - the cursor is equal to none and also
17:14 - create an empty list of our patrons that
17:17 - I'll keep appending to so that we can
17:19 - have all of the results from all the
17:21 - pages just in one list so I'll keep what
17:25 - we have here for now but above this code
17:28 - this is where I will write this infinite
17:32 - loop so first of all I'm going to create
17:35 - a list here of an empty list called all
17:38 - pledges and this will be what I append
17:40 - to with all of the responses from all of
17:43 - the pages and also I'm going to create a
17:45 - cursor and set this equal to none
17:48 - the cursor is what tells us or was what
17:53 - tells us how to get to the next page so
17:56 - now I'm going to create an infinite loop
17:58 - here and now I'm going to copy this line
18:03 - here and move it up into my while loop
18:05 - but now I'm gonna add in one more
18:07 - argument here so right now we are
18:10 - passing in the campaign ID and that we
18:13 - want 25 people per page but I'm also
18:16 - going to pass in an argument of cursor
18:19 - is equal to cursor now when it is none
18:24 - it means that we're going to start on
18:26 - the first page and the way that we're
18:29 - going to update this is every time I go
18:32 - through here I'm going to set this equal
18:35 - to the API client dot extract underscore
18:41 - cursor and we need to pass in this
18:45 - pledges response variable right here so
18:49 - each time through this loop this cursor
18:52 - will get updated and it will go to the
18:54 - next page go to the next page and then
18:57 - I'll show how we break out of this loop
18:59 - but first I want to append the results
19:03 - per page to our all pledges list here so
19:09 - I will just use a plus equals to
19:12 - increment this and I will just say
19:14 - pledges response dot data so that will
19:18 - just keep appending to this all pledges
19:20 - list here with the data per page so now
19:24 - we're in an infinite loop here so now we
19:27 - have to have a way to break out of this
19:28 - loop so if this cursor is still equal to
19:33 - none after it tries to extract the
19:35 - cursor then it just means that there
19:36 - were no more pages so I can just say if
19:40 - not cursor then we can just break out of
19:46 - that loop and now when I actually run
19:48 - this code it's going to take a little
19:50 - bit longer since it's now fetching
19:52 - multiple pages so I'm actually going to
19:55 - add in a print statement above this loop
19:58 - here
19:59 - just so we can see that our program is
20:01 - actually
20:01 - doing something just in case it gets
20:03 - stuck so I'll say print and we'll just
20:07 - say fetching oops let me spell this
20:10 - correctly fetching patron info ok and
20:15 - now let's loop over and look at the
20:17 - first name of all of these responses so
20:21 - instead of using this pledges dot
20:23 - response data remember this was just a
20:25 - single page here now we can loop over
20:28 - this all pledges list here and this
20:32 - should be the data from all of those
20:34 - pages so if I save this and run it then
20:38 - ok it says that it is fetching patron
20:42 - info it might take a second ok and that
20:46 - finished and now we should be getting
20:48 - the first names of everyone from my
20:52 - patreon and we didn't get any errors or
20:55 - warnings so it looks like that is
20:57 - working well ok so now that I have all
20:59 - of my patrons now I'm going to filter
21:02 - down to the ones who are included in the
21:04 - reward tier for being in the credits at
21:07 - the end of videos now this is my first
21:09 - time putting credits in my videos so if
21:12 - you are a patron and think that you
21:14 - should be including here but you know
21:16 - don't see your name
21:17 - by the end of this video then definitely
21:19 - make sure that you have your rewards
21:21 - turned on for this reward tier you know
21:24 - some of my when I was doing this video I
21:26 - saw that some of the biggest supporters
21:28 - over there don't have their rewards
21:30 - turned on so I definitely want to show
21:32 - my thanks but you know I also definitely
21:35 - understand that some people want to
21:36 - remain anonymous and that's fine also
21:38 - but for now now that we have all of
21:40 - these patrons now I'm going to filter
21:43 - out our results here for this specific
21:45 - reward tier and then we'll also sort the
21:48 - results as well so in order to filter
21:51 - these out and also to sort these I'm
21:54 - actually going to grab a couple of extra
21:56 - fields here from our API request so to
21:59 - do this I'm gonna go back up to where we
22:02 - were fetching our page of pledges and
22:05 - I'm going to go ahead and add in a
22:08 - couple of more fields here and these
22:12 - this will help me with
22:14 - with filtering and with sorting so the
22:18 - fields that I want to add here I'm just
22:20 - gonna say fields are equal to and this
22:24 - is going to be a dictionary and the
22:26 - dictionary I'm going to say that the
22:29 - information I want is going to be for
22:31 - pledges and now I'm gonna pass in a list
22:34 - here and the list of additional you know
22:38 - parameters or fields that I want I want
22:41 - the total underscore historical amount
22:46 - of sense that is just the total support
22:51 - that someone has given me over the
22:53 - lifetime of their patreon support and
22:56 - I'll just use that for sorting sense you
22:59 - know I'd like to have those people up
23:01 - towards the top now also I'm gonna get
23:04 - the this field here called declined
23:07 - since this just means that somebody
23:10 - maybe tried to become a patron but their
23:13 - credit card declined or something like
23:14 - that okay so we'll see exactly why I
23:19 - needed those extra fields in just a
23:21 - second but right now let's go ahead and
23:24 - filter out this data so now that we have
23:27 - our pledges in one list now I'm going to
23:31 - create a new list for our filtered data
23:33 - so this new list I'm going to have some
23:37 - information here on the pledges I don't
23:40 - want to call that people I'll call this
23:41 - pledges underscore info I'll set this
23:45 - equal to an empty list and now I can go
23:48 - ahead and use our existing loop here to
23:51 - filter this data down so let me go ahead
23:55 - and get rid of this here I'm gonna use
23:58 - this again in a second but I'm just
24:00 - gonna cut it out for now okay so there
24:02 - are a few things that I want to check
24:04 - here while we're filtering this first
24:06 - I'm gonna create a variable called
24:08 - declined and check if you know they have
24:12 - declined payment or something like that
24:14 - which means that they're technically no
24:15 - longer a patron to do this it is under
24:19 - the pledge dot attribute and it is this
24:24 - declined a since actually just let me
24:27 - what I copied there earlier so I can
24:30 - copy this and paste this in here so this
24:33 - here if the pledge doesn't have anything
24:38 - for decline to sense then it actually
24:41 - means that they are fine but if it has a
24:44 - date there then it means that currently
24:47 - you know their payments are declined so
24:50 - now I also want to check the reward tier
24:54 - for each of these pledges right now I'm
24:58 - just going to set this equal to zero and
25:01 - the reason for that is that I want to be
25:05 - able to grab their reward tier but I
25:07 - need to set up a conditional first so
25:10 - this is actually one spot where I got a
25:11 - little bit hung up whenever I was trying
25:13 - to write the script myself so let me
25:17 - show you how I can grab the current
25:21 - patrons reward tier here so in order to
25:23 - grab their current reward tier you can
25:27 - access the relationship of reward and
25:30 - then look at the attribute for a mount
25:33 - underscore since and that will tell you
25:37 - their current reward tier on patreon now
25:40 - the problem that I ran into here is that
25:43 - it's possible for pledges to not accept
25:46 - rewards so if I you know if I put up a
25:49 - reward tier that says hey if you you
25:52 - know support me at five dollars a month
25:54 - or something like that then I'll credit
25:56 - you at the end of the video they can you
26:00 - know still give five dollars a month but
26:02 - say you know that's okay I don't want my
26:04 - name in the credits just you know I want
26:07 - to support but I don't want the name in
26:08 - the credits so if they turn down the
26:11 - reward then this will actually throw an
26:14 - error here because it won't have a
26:16 - relationship of reward this will be a
26:20 - none return here and then when I try to
26:23 - access attribute here I get the error of
26:25 - you know none type has no attribute
26:28 - method so in order to check if that is
26:31 - none what we need to do is we need to
26:35 - check this pledge dot relation
26:40 - chips and then this actually returns a
26:45 - dictionary this relationships here I
26:47 - want to access the rewards key of these
26:51 - relationships and then I want to see if
26:54 - that rewards key has a data key and if
26:58 - it does then I want to grab this
27:03 - relationship reward here now I'm not
27:06 - actually setting this to anything right
27:07 - now but this rewards here equal to zero
27:11 - here now I'm going to set that equal to
27:15 - their rewards here okay so now let's go
27:20 - ahead and actually filter these out so
27:22 - now for each patron I'm gonna say if
27:26 - that patron is not declined and if their
27:32 - reward tier is greater than 500 now this
27:39 - is cents here so this is not $500 you
27:42 - don't have to give $500 to be in the
27:44 - credits here this is a $5 per month
27:47 - support oh and actually almost messed up
27:49 - here I actually want this to be greater
27:51 - than or equal to because the people who
27:54 - are in this reward tier it will actually
27:56 - equal 500 so if they are greater than or
27:59 - equal to that reward tier then I want to
28:03 - capture their information so I'm going
28:06 - to take this pledges info list which is
28:08 - currently empty and I'm going to append
28:12 - to this list and I'm going to grab some
28:15 - information about them here now I'm also
28:19 - going to make this pledges info I'm
28:23 - gonna make this a list of dictionaries
28:26 - so let me clean this up a bit so this
28:31 - will be a list of dictionaries here and
28:33 - those dictionaries will just contain two
28:38 - bits of information first I want to grab
28:41 - their full name for the credits so that
28:43 - full name key will be equal to the value
28:47 - of let me go up here and grab one of
28:52 - these actually let me grab this real
28:54 - quick and paste it in here so this will
28:58 - be equal to pledge diet relationship dot
29:02 - patron and now we can access the
29:05 - attributes of this patron and I want to
29:08 - grab their full underscore name and now
29:13 - the second bit of information that I'm
29:15 - going to use in order to sort these
29:17 - pledges is going to be their total
29:21 - historical amount of sense so I'll paste
29:26 - that in as the key and now and in order
29:29 - to grab that information here I don't
29:33 - actually have to use this relationship
29:35 - I can just say pledge dot attribute like
29:37 - I did up here so I'll say pledge dot
29:41 - attribute total historical amount of
29:44 - since okay okay so now that we are
29:48 - looping through all the pledges here and
29:50 - then running this filter here now we
29:53 - should have a our list of patrons who
29:56 - are specifically in this rewards here
29:59 - for being featured in the credits so let
30:02 - me print out these names and make sure
30:04 - that we're getting some results and that
30:06 - I didn't make any mistakes while typing
30:09 - this out here so let me just print out
30:14 - actually I'll just go ahead and loop
30:17 - over this pledge info here so I'll say
30:19 - for pledge in this pledge info list and
30:23 - I will print out their full name now
30:27 - remember this is a list of dictionaries
30:29 - so each of these pledges here is going
30:31 - to be a dictionary and I can just access
30:34 - that full name key so if I run this then
30:39 - it's going to go out and fetch that
30:40 - patron information and then filter those
30:43 - out and then print them down here okay
30:46 - so it looks like I'm getting an error
30:48 - here let me check so this is a key error
30:53 - of rewards let me look at my notes here
30:56 - oh okay this is actually this key here
31:00 - is not rewards it is reward for this key
31:03 - and like I said you just have to read
31:06 - through the documentation to know
31:08 - I know that this doesn't make any sense
31:09 - by not looking at the documentation but
31:12 - I just wanted to show you my process
31:13 - here of writing this script so now if I
31:17 - did everything correctly now this should
31:19 - work okay so we got some names printed
31:21 - out here so this looks good it does look
31:25 - like a shorter list of names here so we
31:27 - can see that we're getting some filtered
31:29 - results so right now these results are
31:32 - just in the same order as I fetch them
31:34 - from patreon but I'd like to sort these
31:37 - and order of the biggest supporters
31:39 - first so to do this I'm just going to
31:41 - create a new sorted list
31:43 - so right here let's see I will remove
31:47 - this list where I'm putting out these
31:49 - full names and now let's create a new
31:53 - list of sorted pledges and I will set
31:57 - this equal to now if you've never sorted
31:59 - a list before you can use this sorted
32:02 - function here and within this function
32:05 - we want to pass in the list that we want
32:08 - to that we want to sort so that is this
32:12 - pledges info list now right now this is
32:14 - a list of dictionaries so it's not going
32:18 - to sort it the way that we want to we
32:20 - want to sort it by this total historical
32:23 - amount of since here so we're gonna have
32:25 - to pass in our own custom key and we'll
32:28 - say that the key is equal to and I'm
32:31 - just going to use a lambda function here
32:33 - I could come up here and write my own
32:35 - function but at lambda is basically just
32:38 - an anonymous inline function so I will
32:42 - say that for every pledge that we see we
32:46 - want to sort on the pledges total
32:50 - historical amount of cents key okay and
32:54 - now that's going to sort by default from
32:57 - smallest to largest but I want from
32:59 - largest to smallest
33:01 - so I'm also going to pass in reverse is
33:04 - equal to true so if I save this then I
33:09 - should have a list here of sorted
33:12 - pledges and now I'm just going to write
33:14 - a quick list comprehension just to grab
33:17 - the full names from that sorted list you
33:20 - can use a regular for loop
33:22 - here if you're not familiar with list
33:23 - comprehensions but to do this with a
33:25 - comprehension it's as easy as just
33:27 - saying Pledge names is equal to and a
33:32 - list comprehension just looks like this
33:35 - we can say that I want a to grab the
33:39 - Pledge full name key for all of the
33:44 - pledges in this sorted pledges list okay
33:49 - so now let me print this list just to
33:53 - make sure I don't have any errors so I
33:56 - will print out the list of these pledge
34:01 - names here okay and here we have our
34:04 - list of names so this seems to be
34:06 - working well so now I have a list of
34:09 - names of the supporters that I'll be
34:11 - adding to the credits of videos but I
34:14 - also want to automate the creation of
34:16 - the image that I'll be using for these
34:18 - credits so the editor that the video
34:21 - editor that I use allows me to animate
34:24 - and scroll through an image so all I
34:26 - need is a static PNG image of all these
34:29 - names so to create this image I'm going
34:32 - to use the pillow library in Python
34:34 - which is a library that allows us to
34:37 - work with images and I actually have a
34:39 - video on pillow as well but I didn't
34:41 - cover how to write text to an image so
34:44 - this will be a bit different than what I
34:46 - did in that video but I'll still leave a
34:48 - link to that video in the description
34:49 - section below just in case anyone wants
34:52 - to see some other cool things that we
34:53 - can do with images and I'll actually
34:56 - write the code that creates this image
34:58 - in a separate file and once we're
35:01 - finished we'll import that it within
35:03 - this module here to create the image but
35:07 - first before we do that we need to
35:09 - install the pillow library with pip so
35:12 - let me open my terminal back up here and
35:15 - clear the screen and now I'm going to
35:18 - install pillow by saying pip install
35:21 - pillow and I look and that worked okay
35:25 - so now I can minimize this actually that
35:28 - was pretty quick let me make sure that
35:30 - that actually worked okay it says
35:32 - already satisfied that's good
35:33 - okay so now
35:36 - now let me open up a new Python script
35:39 - here and write a function to write these
35:41 - names to an image now I already have a
35:44 - file here called image dot pi and this
35:49 - is completely blank at the moment now I
35:52 - would like to point out that this file
35:54 - image dot pi is in the same directory as
35:57 - the script that we just got done writing
36:00 - and that will just make importing this
36:02 - function that I write easier okay so how
36:05 - can we write this text to an image so
36:07 - first of all I'm going to need to import
36:10 - a couple of things from pillow in order
36:12 - to create this image so I'm going to say
36:14 - from PIL I want to import this image
36:19 - class also this image draw class and
36:22 - image font class and now I'm going to
36:26 - create a new function that will create
36:28 - our image and it will take in a list of
36:31 - names as an argument so I'll call this
36:33 - function create underscore credits and
36:38 - this will take in a list of patron names
36:42 - okay and now the first thing that I'm
36:45 - going to add here are going to be some
36:46 - image properties you know such as the
36:49 - image width and height along with our
36:51 - starting Y position for the text and the
36:54 - padding between the lines
36:56 - now I had to play around with these
36:58 - numbers to figure out exactly what I
36:59 - wanted and you're seeing the final
37:01 - product here but I definitely
37:04 - you know just had to guess these numbers
37:07 - to start off with and then I you know it
37:11 - just took some trial and error and
37:12 - playing around with it before I got the
37:15 - image to look right but let me go ahead
37:17 - and type these in and I'll try to
37:19 - explain as I go so first I'm gonna have
37:22 - the text Y position here and I'm gonna
37:25 - set this equal to 800 so this is a
37:30 - starting position of 800 units I'm not
37:33 - sure actually what pillo uses I'm not
37:36 - sure if this is pixels or something else
37:38 - but this is going to start 800 units
37:42 - whatever units those are down on the
37:44 - image the reason it's so far down is
37:46 - because since I want this to be credits
37:49 - a lot of blank space at the top before
37:52 - the first name and now I'm going to also
37:55 - use some text padding here and this will
37:58 - be the padding between each line of text
38:01 - and again this is going to be 120 maybe
38:05 - pixels so 120 units of whatever those
38:08 - are and now I want an image width and
38:12 - this is pixels I know this because I
38:15 - want 1920 since that is the resolution
38:18 - that I upload videos to and now I want
38:23 - the image height now the image height is
38:26 - actually going to be variable because if
38:30 - you think about it you know one day I
38:32 - might have 15 patrons and then the next
38:35 - day I might have 20 so I can't just have
38:38 - a standard height it needs to actually
38:40 - grow with the number of patrons so what
38:44 - I'm gonna do here is I'm gonna say that
38:47 - I want the height to be the length of
38:50 - this patrons names list and then I'm
38:53 - going to multiply that by the text
38:56 - padding between each of these line
39:00 - numbers and now I also want to leave
39:03 - room for the top and the bottom because
39:07 - if I just did it this way then it would
39:09 - just barely fit in those names but I
39:12 - also want to have padding for the top
39:14 - and bottom so I want to also add the
39:17 - pixels that will be the text Y position
39:22 - times 2 because I want a text Y position
39:26 - padding at the top and at the bottom and
39:28 - if that doesn't entirely make sense
39:30 - don't worry too much about it right now
39:32 - I'll kind of show you what this did once
39:35 - we actually see the final result and
39:37 - also this is just such a you know unique
39:40 - situation for me so I doubt that you'll
39:42 - be doing you know anything exactly like
39:45 - this but I guess it is good to know you
39:48 - know kind of a little bit about the math
39:50 - behind this just in case you are doing
39:52 - something similar ok and now that we
39:54 - have those image properties now I'm
39:56 - going to create a new blank image so to
39:59 - do this I'm just gonna say image is
40:00 - equal to
40:02 - image dot new and remember this image
40:05 - here is this pillo image class that we
40:08 - imported so I'm going to say image new
40:11 - and we want this to be an RGB image and
40:14 - then I'm going to pass in a tuple of the
40:19 - image width and the image height we
40:21 - already have the image width up here
40:24 - which is static and then the image
40:26 - height we have that calculated here as
40:29 - well and now I need to pass in a
40:31 - background color for this image so I
40:35 - just did some playing around and I found
40:37 - a color that I liked this is just an RGB
40:40 - value it's 58 6368
40:44 - and you can play around with that that's
40:47 - just kind of like a dark blue background
40:49 - and now I'm going to draw this image so
40:54 - I'll say draw is equal to image draw
40:57 - which is this class here that we
41:00 - imported image draw dot draw image okay
41:06 - and lastly I want this to look nice so
41:10 - I'm going to use a custom font now I
41:12 - know exactly where this font is located
41:15 - on my machine so I'm going to put the
41:16 - exact path to this font but the location
41:20 - for fonts is going to be different on
41:22 - your machine so if you're on Windows or
41:24 - Linux then you'll need to look up where
41:26 - her fonts are located if you're doing
41:29 - something like this and if you're on a
41:30 - Mac then your fonts are likely going to
41:32 - be in a similar location as mine but
41:34 - probably in your user folder instead of
41:37 - mine obviously but to specify a font I
41:41 - can simply say FN T is equal to image
41:45 - font dot true type and that is all
41:50 - lowercase and now let me see the
41:53 - location on my machine let me go back to
41:56 - my terminal here I think this is in sa
42:01 - users my user name I think this is in
42:04 - library fonts and then this is I'm gonna
42:10 - use this railway regular font yes so
42:13 - this is the location here
42:14 - so I'm just gonna copy that full path
42:17 - and paste this in as the font that I
42:21 - want to use and now I'm also going to
42:24 - pass in a font size now I want this text
42:27 - to be very large so I'm just going to
42:28 - use 100 font size here and now that we
42:31 - have all this set up now I can loop over
42:33 - the names that will be passed into this
42:35 - function and write those names to our
42:38 - image so to do this let's see what do we
42:41 - call this patrons names so I can say for
42:44 - name in patrons names and now within
42:48 - this loop I want this text to be
42:50 - centered on my image so I'm going to
42:53 - need to know the width of this text in
42:55 - order to Center this to the image so to
42:58 - grab the text width I can use this draw
43:02 - dot text size method here and now I want
43:08 - the text size of the font with that name
43:11 - passed in because you know all of these
43:13 - names are going to be different widths
43:15 - and then I also have to tell it to use
43:17 - the font that we specified so I can get
43:20 - the exact width now this here returns a
43:22 - tuple of the text width and the text
43:25 - height we're only going to be using the
43:27 - text width but we're you're also need to
43:34 - have a placeholder here an underscore is
43:37 - just a throwaway placeholder for a
43:39 - variable that you're not using so I
43:42 - could put text height here as well to
43:44 - capture that but I'm not going to be
43:46 - using it so I'm just using an underscore
43:48 - okay and now all we have to do is draw
43:50 - on our text to this image so I'm going
43:53 - to say draw dot text and now I'm going
43:57 - to pass in a few different parameters
44:00 - here okay so the first parameter is
44:02 - actually going to be the x value of the
44:05 - text now the x value remember we want
44:08 - this to be centered and we know the text
44:11 - width and we know the image width so all
44:14 - I have to do to Center this is I can
44:17 - just say image width minus the text
44:21 - width and then I want to divide that by
44:23 - two okay and that will Center that
44:28 - text on our image now for the Y position
44:31 - of the text we want to use this text Y
44:34 - position here and we're starting at 800
44:37 - so I will pass that in as well
44:40 - whoops and it looks like I accidentally
44:43 - left out some parentheses here so for
44:47 - this draw dot text our first value is
44:50 - going to be a tuple of the X&Y positions
44:54 - so within this text method here this is
44:59 - our first value to this text method an
45:02 - X&Y tuple this is our X this is our Y
45:05 - and now we also want to add in the
45:10 - actual text that we want to write which
45:12 - is going to be this name from the names
45:15 - list and then the font that we want to
45:18 - use is going to be equal to F and T is
45:21 - what we set up for font and also a fill
45:25 - color for this text so white is 255 255
45:30 - 255 I just want this to be a little
45:33 - off-white so I'll say 250 250 250 okay
45:37 - and finally within this loop we also
45:40 - need to increment the Y position of our
45:43 - text by the amount of our padding so
45:45 - that we're not just writing text over
45:47 - itself every time through the loop so
45:50 - what did I call this here text Y
45:52 - position so we need to say text Y
45:55 - position plus equals the text padding
46:01 - and yes I called that text underscore
46:03 - padding so now when we're looping
46:06 - through this every time it's going to
46:09 - you know calculate the text size for
46:11 - that name and then draw that name onto
46:13 - our image at this Y position and then
46:16 - it's going to increment that Y position
46:18 - for the next name so it should just keep
46:20 - going down the image filling in these
46:22 - names so now that should loop over all
46:27 - of our names and write them to an image
46:29 - all we need to do now is save that image
46:31 - to our machine and I'm just going to
46:33 - save this image to the current directory
46:35 - and I'll call this you know credits dot
46:38 - PNG or something like that now be sure
46:42 - that you're outside of your for loop
46:43 - here because you don't want to save the
46:47 - image every time through the loop you
46:49 - only want to save this image once that
46:51 - loop is complete and all these names
46:53 - have been written to our image so now I
46:56 - can just say IMG I believe is what we
47:00 - called our image up here yep
47:01 - IMG dot save and then the name of the
47:05 - image so I'll just call this credits dot
47:08 - PNG okay
47:10 - and now we could be done with this
47:12 - function I'm actually going to return
47:15 - this image as well I don't think I'm
47:19 - gonna actually use this return value but
47:21 - if we don't capture it then that's fine
47:23 - okay so finally we should just about be
47:27 - done with all of our coding the only
47:29 - thing left to do now is to import this
47:32 - function that we just created into our
47:35 - other script and pass in our list of
47:37 - names to this function and at that point
47:39 - it should create this image so let me
47:42 - switch back to my other script here and
47:44 - first I need to import that function
47:47 - that we just created now again this
47:49 - image dot PI module that we just wrote
47:52 - that is in the same directory as this
47:55 - script here so I can just import this
47:58 - directly so I can say from image import
48:02 - and let me make sure I got the name of
48:05 - this function crack so it's create
48:07 - credits so we'll import that create
48:09 - credits function and now let's call this
48:12 - function at the bottom of our script so
48:15 - I'll just go ahead and keep that print
48:16 - statement there it's not gonna hurt
48:17 - anything so I'll say create credits and
48:20 - pass in our pledge names to that
48:25 - function okay so now if everything went
48:27 - according to plan and I didn't make any
48:29 - mistakes I should be able to run this
48:31 - and get the image after that's run so
48:34 - let me try this out so it's going out
48:38 - and fetching the patron info and then
48:41 - once it gets that it should create an
48:42 - image with those names okay so that
48:45 - script completed and we can see that we
48:47 - have a credit stop P&G here let me open
48:50 - this here in finder and open up this
48:54 - image so if I open this
48:55 - we can see that we successfully created
48:59 - that image it has that nicer font and
49:01 - everything I think the colors look good
49:02 - and you can see that we have a lot of
49:04 - padding here at the top and bottom
49:06 - that's just so I can scroll the credits
49:08 - and it looks a little more natural
49:10 - whenever it's actually in a video so
49:13 - that looks good let's go ahead and close
49:15 - this down okay so it looks like this
49:17 - script is working nicely and is doing
49:19 - what I was hoping it would do now I know
49:22 - that this project is very specific to my
49:24 - own needs here but I wanted to show you
49:26 - all this quick little project just to
49:28 - show you how you can use Python to
49:30 - automate just about anything and without
49:33 - writing a script for this you know this
49:36 - is probably something I wouldn't be able
49:38 - to do you know it would be a lot of work
49:40 - manually creating the script or creating
49:43 - these images for each video especially
49:46 - when there are people coming and going
49:47 - from patreon all the time so this script
49:50 - is going to make it a lot easier for me
49:52 - to you know just automate that process
49:54 - of going out and getting those names
49:56 - you know so I can thank some people at
49:59 - the end of my videos so like I said this
50:01 - is a new perk that I added for my
50:03 - patreon and YouTube members I really
50:06 - appreciate all of you guys who support
50:08 - financially because that's really what
50:10 - allows me to keep these videos free for
50:13 - everybody so I wanted some new ways to
50:15 - show my appreciation now I know that
50:17 - this isn't much but I hope it's
50:19 - something at least now I also added a
50:22 - perk for getting early access to videos
50:24 - I usually upload videos a few days early
50:27 - anyways before I release them publicly
50:30 - just to let them you know process
50:32 - correctly and give YouTube a chance to
50:34 - tell me if there were any upload
50:36 - problems or anything like that
50:37 - so I just decided I'll go ahead and give
50:40 - supporters access to those videos as
50:43 - soon as I upload them and then a few
50:45 - days later they'll be available to
50:47 - everyone for free just like they've
50:49 - always been so you know don't worry if
50:51 - you can't support financially then that
50:53 - is completely understandable
50:55 - and nothing will change for everyone
50:57 - else all the videos will still be
50:59 - released for free here on YouTube these
51:01 - were just a couple of ways I thought I
51:03 - could give something back to the people
51:05 - who do support through patreon and
51:07 - YouTube now like I said in this video I
51:09 - only
51:09 - touched on my patreon supporters but in
51:11 - my next video I'll show how we can
51:13 - connect to the YouTube API and go
51:15 - through this same process and then I'll
51:17 - combine these scripts together so that
51:20 - I'm listing both patreon and YouTube
51:22 - members in the credits so with that said
51:25 - you'll likely start seeing credits roll
51:27 - as I finish up videos from now on I'll
51:30 - likely throw those credits up on screen
51:31 - right now just so you can take a look at
51:34 - the final product of what it is I was
51:36 - building here in this video so I hope
51:38 - you feel like you got something useful
51:39 - out of this video this will you know
51:42 - likely be a similar process when working
51:45 - with other api's I do plan on covering
51:47 - more api's in the future so that we can
51:49 - do some more cool projects like this but
51:52 - with that said if anyone has any
51:53 - questions about what we covered in this
51:55 - video then feel free to ask in the
51:56 - comment section below and I'll do my
51:58 - best to answer those and if you enjoy
52:00 - these tutorials and would like to
52:01 - support them then there are several ways
52:03 - you can do that these is ways to simply
52:05 - LIKE the video and give it a thumbs up
52:06 - and also it's a huge help to share these
52:08 - videos with anyone who you think would
52:10 - find them useful and if you have the
52:11 - means you can contribute through patreon
52:13 - or YouTube and there are links to those
52:15 - pages in the description section below
52:16 - be sure to subscribe for future videos
52:18 - and thank you all for watching
52:31 - you