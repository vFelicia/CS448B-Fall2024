00:00 - hey there how's it going everybody in
00:01 - this video we'll be adding a blog
00:02 - application to our Django site and also
00:05 - setting up some URL routes so that we
00:07 - can start directing people to pages that
00:08 - we'd like them to see so let's go ahead
00:10 - and get started so first let's create a
00:13 - blog app for our site now a lot of
00:15 - people might get confused at this part
00:16 - and think to yourself well didn't we
00:18 - already create an app so the thinking
00:20 - behind Django here is that you have your
00:23 - website project which we've already
00:24 - created and then within that website you
00:27 - can have multiple apps that are all
00:29 - their own thing so for example we can
00:31 - have a blog section of our website and
00:33 - that will be its own app and then we
00:35 - could have like a store section of our
00:37 - website and that will be its own app so
00:39 - a single project can contain multiple
00:41 - apps and we'll see later in the series
00:43 - that this is a good thing for separating
00:45 - out different parts of our project and
00:47 - another nice thing is that you can take
00:49 - a single app and add it to multiple
00:51 - projects so let's say that you really
00:53 - like the blog part of your application
00:54 - then you can simply drop that app into
00:57 - multiple websites so hopefully that
00:59 - makes sense and I think it'll make more
01:01 - sense once we see this in action so
01:02 - let's create our blog app within our
01:04 - project so currently I'm in our project
01:07 - in the same directory as our manage py
01:09 - file and we're going to use that to
01:11 - create a new app so we can just say
01:14 - Python whoops let me click on here so we
01:16 - can say Python manage py and then start
01:20 - app is the command to create a new app
01:22 - and now the name of our app and we want
01:25 - this name to be blog so I'll run that
01:27 - and once that's run let me clear the
01:29 - terminal here so that we can see the
01:31 - structure that we just created okay so
01:33 - now let me use that same tree command
01:35 - that I used in the last video to print
01:37 - out our project structure now that we've
01:39 - created that app and again you might not
01:41 - have this command installed but don't
01:43 - worry if you don't I just installed it
01:45 - so that we could see this layout a
01:46 - little bit larger so I will run a tree
01:49 - and now let me see if we can see this
01:50 - all in one screen here so yeah so we can
01:53 - barely fit all that in okay so we
01:55 - already went over the structure of the
01:56 - Django project in the first video so
01:58 - that was the manage py file and the
02:00 - Django project directory here so nothing
02:03 - changed there but now we have this new
02:05 - blog directory with its own structure
02:08 - and that blog directory is what that
02:10 - start app command created now this is
02:13 - what can
02:13 - some people about getting started with
02:15 - Django because we really haven't done
02:17 - any coding yet and there are already so
02:20 - many different files that have been
02:21 - created from the start project and the
02:23 - start app commands so if anyone has
02:25 - watched my Flash series then this might
02:27 - be intimidating compared to my framework
02:28 - like that because we have so many more
02:30 - files that we're starting out with
02:32 - before we even start doing any coding
02:34 - but even though those commands created a
02:36 - lot of these files we're going to get so
02:38 - much more out of the box than what we
02:40 - got with a smaller frame work like flask
02:42 - so there's definitely a trade-off there
02:44 - so instead of going over all of these
02:46 - right now let's just go ahead and get a
02:48 - view created so that we can actually
02:50 - write some code and see some progress
02:52 - but don't worry we'll be exploring some
02:54 - of these other files that were created
02:56 - pretty soon so the first module that
02:57 - we're going to open up is this views dot
03:00 - PI module within the blog directory so
03:03 - now I'm going to open up my sublime text
03:06 - and open up that views dot PI file and
03:09 - again that views that PI file is within
03:11 - the blog app directory that we just
03:13 - created and we can see that it already
03:15 - has an import here at the top so it's
03:17 - already imported render for us and we'll
03:19 - use that in just one second but for now
03:22 - I'm also going to import HTTP response
03:24 - and that's from django HTTP so i will
03:28 - say from django dot HTTP import HTTP
03:33 - response and now i'm going to create a
03:36 - new function here and i'm going to call
03:38 - this function home and this function is
03:41 - going to handle the traffic from the
03:43 - home page of our blog and this function
03:45 - is going to take in a request argument
03:47 - we aren't going to be using the request
03:48 - variable just yet but we need to add it
03:51 - in order to just get our function to
03:53 - work and within this function we're
03:54 - simply going to return what we want the
03:57 - user to see when they're sent to this
03:58 - route so this is where the logic goes
04:01 - for how we want to handle certain routes
04:03 - so I'll create this function and that is
04:05 - called home and like I said this takes a
04:09 - request argument that we're not gonna
04:11 - use right now but it has to be there so
04:13 - for now we're simply going to return an
04:15 - HTTP response that says that we've
04:18 - landed on the blog home page so I will
04:20 - return an HTTP response and I will just
04:24 - make this an h1 tag so I'll say h1
04:27 - log-home and then it close out that h1
04:32 - tag okay so like I said this is the
04:35 - logic for how we want to handle when a
04:37 - user goes to our blog homepage but we
04:40 - haven't actually mapped our URL pattern
04:42 - to this view function just yet so to do
04:44 - this we're going to create a new bot
04:46 - module in our blog directory called urls
04:49 - dot pi and in that file is where we'll
04:52 - map the urls that we want to correspond
04:54 - to each view function so let's do that
04:56 - now so within our blog app directory I'm
05:00 - going to create a new file and I'm going
05:03 - to call this URLs dot pi
05:06 - now this URLs module is going to be very
05:08 - similar to the URLs module that we saw
05:10 - in our Django project so if I open up
05:13 - the project level URLs PI file then we
05:16 - can see that they have imported this
05:18 - path here and then they have a list of
05:21 - URL patterns that are using those paths
05:24 - and we're gonna do something very
05:26 - similar so I'm going to copy this import
05:30 - of the path from Django URLs and I'm
05:33 - gonna paste this into our blog URLs
05:35 - module and I'm also going to copy those
05:38 - URL patterns so I will copy that and
05:40 - paste that into our blog URL spy file as
05:44 - well now we're also going to be using
05:46 - this home view function here within our
05:49 - URLs so what we're going to do is import
05:53 - this view spy module within our URLs so
05:57 - I'll say from dot which is the current
05:59 - directory import views and I'll save
06:02 - that so now let's create a path for our
06:04 - blog homepage now right now this says
06:06 - admin and that is the view that gets run
06:10 - when we go to forward slash admin but if
06:12 - we want this to be the home page then we
06:14 - can just leave this as an empty path and
06:16 - now we want to specify the view that we
06:19 - want to handle the logic at that home
06:21 - page route and we want that to be our
06:24 - home view from our views module so we'll
06:27 - save use dot home and now I'm also going
06:30 - to put in a name for this path so I may
06:33 - say name is equal to blog dash home okay
06:37 - so we have an empty path and the views
06:39 - dot home is
06:41 - the function that we created in the
06:42 - views that just returns that HTTP
06:45 - response that we are on the blog page
06:47 - and you might be wondering why I put the
06:49 - name as blog - home instead of just home
06:52 - and that's because there will be times
06:54 - that we want to do a reverse look-up on
06:57 - this route and naming this something as
06:59 - generic as home could collide with other
07:02 - app routes so if I had a store app then
07:05 - maybe they have an app that has a home
07:07 - route also so I'd want to be clear with
07:10 - the actual naming of this path okay so
07:12 - now we have the URL path for our blog
07:14 - homepage mapped to our home function in
07:17 - the views file but this still wouldn't
07:19 - work quite yet because if you remember
07:22 - we have a URLs module in our main
07:24 - project directory also and that URLs
07:27 - module will tell our whole website which
07:29 - URLs should send us to our blog app now
07:33 - that might sound confusing but let's
07:34 - just pull this up so we can see this in
07:36 - action so now I'm open opening my
07:39 - projects URL spy file and like we've
07:42 - seen them before we already have one
07:44 - route here of this admin that gets
07:46 - mapped to these admin site URLs so we're
07:49 - gonna do the same thing but instead
07:51 - we're gonna tell Django which route
07:53 - should get mapped to our blog URLs so
07:55 - we're just going to need to import
07:57 - another function from Django URLs and
08:01 - that is going to be the include function
08:03 - so up here what from Django URLs we also
08:06 - want to import include and now we can
08:09 - add to our list of URL patterns to
08:11 - specify which route should go to our
08:13 - blog URLs so I will add onto this and I
08:17 - will let me just copy this path here and
08:20 - paste this in so I'll say that if we go
08:24 - to blog then we should now reference our
08:27 - blog URLs and to do that we'll use that
08:30 - include function that we imported there
08:33 - and this is going to be a string and
08:35 - this is going to be blog dot URLs okay
08:38 - so now when we open our web page in the
08:40 - browser and go to word slash blog then
08:43 - it will map that to our blog URLs and
08:47 - then within our blog URLs we have that
08:51 - empty path
08:52 - maps on to our home view and we'll be
08:55 - sure to walk through this a couple of
08:57 - times just to be sure that you're
08:58 - getting all of this correctly now on one
09:00 - other side note here if you've watched
09:01 - any Django tutorials before then you
09:04 - might have seen people who use regular
09:05 - expressions to match their paths and
09:07 - that used to be how we would used to do
09:10 - this but this isn't required anymore in
09:12 - later versions of Django and regular
09:14 - expressions can be overly complicated
09:16 - especially when our routes are usually
09:18 - going to be pretty simple so I think
09:20 - it's best just to simply do our routes
09:22 - the way that we're doing them here okay
09:24 - so we've added a good bit of code so far
09:26 - so let's go ahead and make sure that
09:28 - this works and once we see that it does
09:30 - then we'll go back through all of this
09:32 - and explain exactly what's going on so
09:34 - let me open up my terminal and run our
09:36 - development server so I'll open up the
09:38 - terminal here and clear the screen and
09:40 - now remember to run that dev server
09:44 - it's Python managed py run server and if
09:49 - we run that then it says that the server
09:51 - is running we have to keep that running
09:52 - so now I'll open up Google Chrome and
09:55 - reload localhost on port 8000 so first
09:58 - of all if we go back to the root of our
10:00 - website then we can see that now we get
10:02 - a 404 page not found err so once we add
10:06 - some URL patterns then it should no
10:08 - longer display the default development
10:11 - site like it did before so now it's just
10:14 - going to try to match our specific
10:16 - routes so in this case we get a 404 and
10:18 - if we look at the debug output down here
10:22 - then we can see that within our terminal
10:24 - and that dev server that it also
10:26 - displays all of the routes that we try
10:28 - to access and the status code that we
10:30 - get so we got a four of worth there now
10:33 - back in the website if we look at our
10:35 - errors here I know this is a little
10:37 - small for you to see but this is showing
10:39 - us all of the URL patterns that it tried
10:41 - to match and it says that it tried to
10:43 - match against these URL patterns in this
10:45 - order so first there is admin and then
10:48 - there is blog and since it didn't match
10:50 - either of those then it returned a 404
10:52 - page not found so now if we navigate to
10:56 - forge slash blog and run that then now
11:00 - we can see that we got the text of blog
11:02 - home and in chrome we can view the
11:05 - source of an HTML
11:06 - by right-clicking and then going to view
11:09 - page source and if I do that then we can
11:12 - see exactly what we return to this route
11:15 - here and we can see that this is blog
11:18 - home text wrapped in h1 tags so that
11:21 - worked
11:22 - so now let's walk through this one more
11:24 - time so that we can see exactly what
11:27 - order all of this goes through and let's
11:28 - also add another route to our blog just
11:31 - to get a feel for that so let me close
11:33 - down our source code here so when we
11:36 - navigated to forward slash blog in our
11:39 - website then it first looks in our
11:41 - projects URLs that PI module in the main
11:45 - project so if I open that up it looks in
11:48 - this file and it says ok
11:50 - someone navigated to Ford slash blog so
11:54 - do I have a pattern that matches that
11:55 - and we do have a pattern that matches
11:58 - that it is the second one here so now
12:01 - that it matched that it says where do I
12:03 - want to send people who go to this route
12:06 - well I want to send them to blog dot
12:08 - URLs now whenever Jango encounters this
12:11 - include function it chops off whatever
12:13 - part of the URL has matched up to that
12:16 - point and only sends the remaining
12:18 - string to the included URLs module for
12:20 - further processing so in our example
12:22 - it's already processed this blog part of
12:26 - the URL so it's going to get rid of that
12:28 - and just send what's remaining to the
12:30 - blog URLs now there's nothing remaining
12:33 - after we chop off blog so it's just
12:35 - going to send an empty string to blog
12:37 - URLs so now let's open up blog URLs and
12:41 - see what it searches for here so now
12:44 - we're in blog URLs and now it's saying
12:46 - ok so now I just have an empty string
12:48 - because remember it's already processed
12:50 - the blog part so now do I have a pattern
12:53 - in here that matches an empty route and
12:55 - we do have a pattern that matches an
12:57 - empty route and that pattern will be
12:59 - handled by the function views dot home
13:03 - so then we can navigate to our views
13:05 - file and view that home function and now
13:07 - it comes into that home function and it
13:09 - simply says ok so now we just want to
13:12 - return an HTTP response with an h1 tag
13:15 - that says blog home so that is a
13:18 - walkthrough of the whole process
13:20 - so now let's add another route to our
13:22 - blog so that we can get a feel for this
13:25 - whole process here so now let's add an
13:27 - about page for the blog and we'll do
13:30 - this in the same order that we added the
13:32 - home page so first within our views
13:35 - we'll add a function that handles the
13:37 - logic for the about page and I will just
13:40 - call this about so I'll say def about
13:43 - remember we have to take in a request
13:46 - and then I'm just going to return an
13:49 - another HTTP response so I'll copy and
13:53 - paste that and instead of blog home
13:55 - let's call this blog about okay so now
13:57 - we have an about view so now within our
14:00 - blog URLs module we'll want to set up
14:02 - the mapping for the path and that view
14:05 - function so if I open up our blog URLs
14:08 - then let's add another path to our URL
14:11 - patterns here and I'm just going to copy
14:13 - the path that we already have for our
14:14 - home route and paste that in and I want
14:17 - this to be about and we'll in that with
14:19 - a trailing slash and we want the about
14:22 - view to handle this path so we'll say
14:24 - views dot about and we'll change the
14:27 - name of this to blog - about okay and at
14:30 - this point we should be done with that
14:32 - route so you might be wondering if we
14:34 - need to add anything to our project URLs
14:36 - module but we don't need to add anything
14:39 - to those URL patterns because that just
14:41 - simply tells our website that when
14:43 - someone goes to the blog route to send
14:46 - them to our blog URLs and then our blog
14:48 - URLs will handle this home and about
14:50 - route from there so let's open this up
14:53 - in our browser and make sure that that
14:54 - worked so now if I go to our blog route
14:58 - then our blog homepage still works now
15:00 - if I go to blog ford slash about then we
15:03 - can see that now we have an about page
15:04 - that is working and now let's walk
15:06 - through this one more time now that
15:07 - we've added this about route so that
15:09 - we're sure that we understand this whole
15:10 - process so we've navigated to ford slash
15:13 - blog ford slash about so first it's
15:16 - going to check the URL patterns and our
15:18 - projects URLs module so i will open up
15:21 - our projects urls module and now our
15:24 - application is saying okay somebody has
15:26 - navigated to ford slash blog forward
15:29 - slash about do I have any patterns that
15:31 - match this and yes I have one
15:33 - had pattern that matches the /blog part
15:37 - so I'm going to send this to blog dot
15:41 - URLs for further processing and remember
15:43 - when it passes this to the blog URLs for
15:46 - further processing it's going to chop
15:48 - off the part that it's already matched
15:49 - and only send the remaining string so in
15:52 - this case it chops off the blog part of
15:54 - the URL and passes the about string
15:57 - that's left to the blog URLs so within
16:00 - blog URLs now it's saying ok now I'm
16:02 - looking for a route that matches about
16:05 - do I have anything that matches about
16:07 - and I do here
16:09 - so what View function handles this and
16:11 - it's this views dot about function so
16:14 - then if we go into views then we can see
16:16 - that we're returning an HTTP response
16:18 - with this h1 tag with the text blog
16:21 - about okay so hopefully that makes sense
16:23 - after we've walked through it a couple
16:24 - times now that might seem overly
16:26 - complicated to jump around that much but
16:28 - it's actually a good thing that the URL
16:30 - gets passed around like this because if
16:32 - we wanted to change the route to our
16:34 - blog application then we can simply
16:36 - change that in one place and it applies
16:39 - to all of those routes so for example
16:42 - let's say that we had a blog that was in
16:44 - development and we wanted to do some
16:46 - live testing on our website but weren't
16:48 - ready to quite make it live yet so we
16:51 - could simply go to our projects URLs
16:53 - file so let me open that up here and I
16:56 - could simply create a path instead of
16:58 - blog I could change this to blog
17:00 - underscore dev and with that one change
17:03 - if we go back to our browser here let me
17:06 - open this up then now in order to access
17:07 - my blog I would have to go to forward
17:11 - slash blog underscore dev and that takes
17:14 - me to the home page and to get to the
17:16 - about page its blog dev ford slash about
17:19 - and that takes me to the about page so
17:21 - now we can see that all of our blog
17:22 - routes are accessible through this blog
17:24 - dev route now and I didn't even have to
17:27 - change anything within our actual blog
17:29 - application I only changed the one
17:31 - project path in the URL pad in URLs
17:34 - patterns so that's extremely useful to
17:37 - just be able to change that in one place
17:38 - for your entire blog application ok so
17:41 - just a few more things before we move on
17:43 - to the next topic so first of all you
17:45 - probably noticed that I've been put
17:47 - trailing slashes onto the end of my url
17:51 - patterns so for example at the end of
17:53 - admin we have a forge slash here and
17:55 - after blog dev I put a trailing forward
17:59 - slash there as well
18:00 - so why did I do that and can we leave it
18:03 - off well I think it's a good idea to
18:04 - leave it there because by default if it
18:07 - has a trailing slash then Django will
18:09 - redirect routes without a forward slash
18:11 - or without a trailing slash to that
18:13 - route that has one so both this blog dev
18:17 - without a trailing slash and blog dev
18:19 - with a trailing slash
18:20 - will get redirected to the blog routes
18:22 - and that's usually what we want and web
18:24 - sites so that no one ever gets confused
18:26 - about what routes are not returning the
18:29 - same results okay so lastly what if we
18:31 - wanted to our blog to actually be the
18:33 - home page of our entire web site so
18:35 - right now we have to go to blog
18:37 - underscore dev to get to the home page
18:39 - of our blog but what if we just wanted
18:41 - to be able to go to the home page of our
18:44 - website so just localhost port 8000 is
18:46 - what it is right now and see the home
18:48 - page of our blog from there so in order
18:50 - to do that within our project URLs we
18:53 - can just simply leave the path to our
18:55 - blog URLs empty so I will get rid of
18:58 - that and save it and by doing that it
19:00 - will match the empty path and our
19:01 - project URLs and also the empty path and
19:04 - our blog URLs and just return at the
19:06 - blog home page
19:07 - so now with that change if we open back
19:09 - up our browser and just go to the root
19:13 - of our website so localhost port 8000 if
19:15 - I run that then now the blog homepage is
19:19 - what we see and if we go to just forge
19:22 - slash about then we get the blog about
19:25 - page so I'm gonna leave our routes like
19:27 - this because I want to make our blog the
19:29 - home page of our entire website but you
19:31 - can add a non empty path there in the
19:33 - project URLs if you'd like that's
19:35 - completely up to you okay so I think
19:37 - that is gonna do it for this video
19:38 - hopefully now you have a pretty good
19:40 - idea for how basic routing is going to
19:42 - be working in Jango and in the next
19:44 - video we'll learn how to return some
19:46 - more complicated HTML code using
19:48 - templates and also how to pass variables
19:50 - to our templates but if you have any
19:52 - questions about what we covered in this
19:54 - video then feel free to ask in the
19:55 - comment section below and I'll do my
19:56 - best to answer those and if you enjoy
19:58 - these tutorials and would like to
19:59 - support them there are several ways you
20:00 - can do that
20:01 - the easiest ways to simply like the
20:02 - video and give it a thumbs-up and also
20:04 - it's a huge help to share these videos
20:05 - with anyone who you think would find
20:06 - them useful and if you have the means
20:08 - you could contribute through patreon and
20:09 - there's a link to that page in the
20:10 - description section below be sure to
20:12 - subscribe for future videos and thank
20:13 - you all for watching
20:25 - you