00:00 - now by default the sort method doesn't
00:03 - work exactly like we'd expect it to if i
00:05 - uncomment out this code here you can see
00:08 - i have an array of numbers here that are
00:12 - all jumbled up and if i just
00:15 - run the sort method on this
00:17 - ray13
00:19 - dot sort
00:20 - and then i output this to the screen
00:24 - and you can see that this sorted array
00:27 - isn't exactly what we were expecting and
00:31 - instead of 1 2 3 4 10 20 30 40 we're
00:34 - getting 110 220 330.
00:38 - the reason it does this is because by
00:40 - default
00:41 - the sort method
00:43 - uses the unicode values to sort by and
00:46 - this is how these values are sorted in
00:48 - unicode
00:49 - if we want to sort these values in any
00:51 - other way then we need to manually tell
00:53 - javascript how they should be sorted and
00:56 - the way that we do that is with a
00:58 - compare function
01:00 - so
01:01 - what a compare function is let me go
01:03 - ahead and
01:04 - write one of these out and that would be
01:07 - the best way to explain it so function
01:09 - and i'm just going to call this sort
01:11 - nums and a compare function takes in two
01:14 - values i'm just gonna
01:16 - have this take in a and b two parameters
01:19 - um
01:20 - so you can see i have commented down
01:22 - here if we return a value that is
01:25 - greater than zero
01:26 - then we're telling javascript to that
01:30 - the way this array should be sorted is
01:32 - that the b should come before the a
01:35 - uh if it returns a zero we're saying
01:38 - that these values are equal and that it
01:40 - doesn't matter about the sort order so
01:42 - it'll be unchanged if we return a value
01:45 - that is less than 0 then we're saying
01:47 - that a should come before b
01:51 - so say that we are passing in numbers to
01:54 - this sort to this compare function um so
01:58 - let's just uh pick two random numbers
02:00 - here let's say a is 10
02:02 - and let's say b
02:03 - is 20. and so we want this function if
02:08 - it runs into these two parameters to
02:10 - return a number that is less than 0
02:13 - because we want a to come before b
02:15 - because 10 is less than 20.
02:18 - so how could we
02:20 - do that well if we did
02:24 - 10
02:24 - minus 20
02:26 - that equals negative 10
02:28 - that is a number that is less than zero
02:31 - so
02:33 - we're telling javascript that a should
02:34 - come before b so in this case if we
02:37 - wanted to sort in ascending order that
02:39 - would be correct because a is less than
02:41 - b
02:42 - if a was
02:44 - 30
02:45 - then this would be 30 minus 20
02:48 - and then that would return
02:50 - 10
02:51 - and that's also what we want because now
02:54 - a is greater than b this returns a
02:57 - number that is greater than zero so
02:59 - we're saying that b needs to come before
03:02 - a so we're saying 20 needs to come
03:04 - before 30. and if a was 30 and b was 30
03:08 - that would be 30 minus 30 equals 0
03:11 - and that returns 0 and it's just saying
03:13 - that these values are equal
03:15 - and that
03:16 - the sword order doesn't matter
03:20 - so to sort this in ascending order we
03:22 - could just do a return
03:25 - a minus b
03:27 - and then if i
03:29 - pass this compare function
03:31 - into the sort method
03:34 - then now you can see down here that our
03:37 - array is sorted the way that we uh think
03:40 - it should be one two three four ten
03:42 - twenty thirty forty and now the great
03:44 - thing about these compare functions is
03:45 - that you can customize them any way you
03:47 - want if you want this to be
03:49 - sorted by descending order then we can
03:51 - just do b minus a
03:53 - and now it's sorted by descending order
03:55 - 40 30 20 10 4 3 2 1.
03:58 - so that's a brief look at sorting
04:01 - numbers now let's take a look at sorting
04:05 - some
04:07 - strings here
04:08 - so
04:09 - let me take away that compare function
04:13 - so we are just using the default sort
04:15 - method to sort these strings
04:17 - so i have
04:19 - jack jill cory pete and ann and you can
04:22 - see that the
04:24 - using sort by default
04:26 - kind of looks like it works here but
04:28 - then if we take a look at the end it
04:30 - didn't actually do exactly what we
04:32 - wanted because and is lower case and
04:34 - like i said before this sorts by the
04:37 - unicode values and in unicode
04:40 - these uppercase characters are larger
04:42 - than the lowercase characters so if we
04:45 - wanted this to be case insensitive then
04:47 - we have to write our own compare
04:48 - function for that um so let's go ahead
04:51 - and write a quick compare function and
04:53 - see how we would do this so i'm gonna
04:55 - i'm going to call this one sort alpha
04:57 - and
04:58 - i'm also going to pass in a b
05:01 - usually for compare functions those will
05:03 - be the parameters something like that a
05:05 - b
05:06 - so what we can do here is now we want to
05:10 - uh sort these by
05:13 - the lowercase version of these strings
05:15 - we want it to be case insensitive
05:17 - so what we can do is we can make a
05:19 - variable inside our function and just
05:21 - call it a lower equals a
05:25 - dot to lower case
05:27 - and then we can either make another
05:28 - variable called b lower
05:31 - equals b
05:32 - dot to lower case
05:35 - and then we can just compare
05:38 - these strings
05:39 - so we can say if
05:42 - a lower
05:44 - is less than
05:46 - b lower
05:48 - then we can return
05:50 - negative one because remember if we want
05:53 - uh a to be before b then it needs to be
05:57 - a number that is less than zero so we're
05:59 - going to return negative one for that
06:01 - um so let me go ahead and copy this
06:04 - and paste it in
06:07 - if
06:09 - a lower is greater than b lower then we
06:12 - want to turn
06:13 - positive one
06:15 - and if it's neither of those which in
06:17 - this case it would mean that it's equal
06:18 - then we would just return 0
06:21 - okay
06:22 - and now let's go ahead and
06:25 - pass this compare function
06:26 - into our sort method
06:30 - and whenever we save that and look at
06:32 - the sorted values now now then you can
06:34 - see that this sorts the way
06:37 - that we want it to be sorted it's case
06:39 - insensitive so we have ann cory jack
06:41 - jill and pete
06:43 - okay so that was a quick look at sorting
06:47 - some strings now let's take
06:50 - a look at sorting some
06:53 - objects
06:54 - so i have a sample object here so let me
06:57 - uncomment this
07:00 - and let me go ahead and uncomment out
07:02 - the code that will
07:04 - display this to the html
07:07 - um okay
07:09 - so
07:10 - what this object is
07:11 - is it's an object of names and
07:15 - each object has a first property and a
07:18 - last property for first name and last
07:21 - name
07:22 - um
07:22 - so now let's uh say that we want to sort
07:25 - this
07:26 - first by first name
07:28 - and then by last name
07:30 - so
07:32 - if we look at the comments here you can
07:34 - see my original array of the way that
07:36 - it's displaying now is joe smith and
07:38 - smith tom doe and ando and then
07:41 - in this comment here
07:43 - we have the desired sorting would be
07:46 - ando
07:48 - and smith
07:49 - joe smith and tomdo so we're sorting on
07:51 - the first name first and if the first
07:53 - names are the same then we want to sort
07:56 - on the last name so ando would come
07:58 - before ann smith
08:00 - so we know we're going to need a custom
08:02 - compare function to do this so let's
08:04 - write one called sort names
08:07 - and we're just going to use the same a
08:09 - and b parameters
08:11 - and
08:12 - then let's go ahead and try to reuse
08:14 - some of the code that we used before so
08:17 - let's take
08:18 - this sort alpha
08:21 - function that we wrote earlier
08:23 - and let's paste that into our sort names
08:28 - so then
08:30 - let's
08:31 - take this function
08:34 - and let's go ahead and try to sort this
08:37 - and see what happens
08:40 - so whenever i save that
08:42 - it's not displaying anything so there's
08:44 - most likely an error in here
08:46 - now what's going on is that we need to
08:48 - realize that now we're trying to sort
08:51 - objects
08:53 - now we're trying to sort objects instead
08:55 - of just the strings themselves
08:57 - so whenever we say a dot lower case here
08:59 - it doesn't know
09:01 - uh what it is that we're trying to
09:02 - access
09:04 - so these are the same objects that it is
09:08 - that we're trying to sort so they have
09:09 - the same properties so
09:11 - a lower
09:13 - instead of a dot lower case really needs
09:15 - to be that a object and then the first
09:19 - property and then to lower case and then
09:22 - b dot first dot two or lower case and if
09:25 - i save that
09:26 - then you can see here um that it is now
09:30 - sorted on the first name so now we have
09:33 - ann smith ando joe smith and tomdo but
09:37 - you can see here it's sorted on the
09:39 - first name and the last names are still
09:41 - out of order so we have ann smith and we
09:43 - have ando
09:45 - so how can we do this to where it sorts
09:47 - on the first name first and if those are
09:49 - equal then it'll sort on the last name
09:53 - so all we have to do here is
09:56 - we're going to be sorting on multiple
09:58 - parameters so let's put in
10:00 - an if statement here
10:02 - and just say if
10:05 - now these are the first names here
10:10 - i should probably rename these but i'm
10:12 - just going to leave them the way that
10:13 - they are
10:15 - so
10:16 - if these first names are equal
10:19 - then now we want to sort
10:22 - on the last name
10:24 - so now we can take the same logic that
10:26 - we use for the first names copy that and
10:28 - we can paste it up here into this if
10:32 - statement
10:34 - and now we want to sort on the last name
10:36 - so let's go ahead
10:39 - and
10:40 - to lower case those also so let's paste
10:43 - those in and instead of a lower i'm
10:45 - going to call this a last and instead of
10:47 - b lower i'm going to call this b last
10:50 - and now instead of the first names
10:52 - we want to grab
10:54 - the last property
10:57 - and let's copy that so now remember a
10:59 - lower and b lower are the first names
11:01 - when those are equal
11:03 - then we want to come in here
11:05 - and
11:08 - sort both of these
11:10 - based on the last name so if the last
11:13 - name
11:14 - if the a last name is less than the b
11:16 - last name return negative one
11:20 - and if it is greater than the b last
11:22 - name return one and if it's the same
11:26 - just return zero so let's go ahead and
11:28 - save that
11:29 - and then you can look down here and see
11:32 - that our array of names is sorted
11:36 - exactly how we want it to be sorted so
11:37 - it's sorted by first name and then it's
11:39 - sorted by last name
11:41 - okay so that is a
11:43 - quick look
11:45 - at
11:46 - sorts and a few different examples of
11:48 - that
11:49 - now let's go ahead
11:51 - and take a look at the filter method