00:00 - hey there how's it going everybody in
00:01 - this video we're going to be plotting
00:02 - data that's continuously being generated
00:04 - in real time so these real-time plots
00:06 - would be great for plotting data that is
00:08 - changing frequently that you want to
00:10 - monitor so for example I see a lot of
00:12 - examples on certain sites that will you
00:14 - know plot things like real-time Youtube
00:16 - subscriber counts or or maybe you're
00:18 - reading in data from a sensor and want
00:21 - that immediate feedback no matter what
00:23 - you're doing you're likely going to find
00:24 - a use for something like this so first
00:26 - we're going to look at a basic example
00:28 - where I plot some data that's directly
00:30 - in my Python script so that we can wrap
00:32 - our heads around how this is working and
00:34 - then we'll look at a real world example
00:36 - where we're actually monitoring a CSV
00:39 - file now if you're pulling data from a
00:41 - real time API or a sensor of some kind
00:43 - then it's pretty common to write those
00:45 - results to a CSV file so we'll monitor
00:48 - that for changes and make updates to our
00:50 - plot when there's new data available now
00:52 - I would like to mention that we do have
00:53 - a sponsor for this series of videos and
00:55 - that is brilliant org so I really want
00:58 - to thank brilliant for sponsoring the
01:00 - series and it would be great if you all
01:01 - could check them out using the link in
01:03 - the description section below and
01:04 - support our sponsors and I'll talk more
01:06 - about their services in just a bit so
01:08 - with that said let's go ahead and get
01:10 - started okay so I've got some sample
01:12 - code pulled up here in my script so
01:14 - first we'll look at these real-time
01:17 - plots using this list of data directly
01:19 - in my script and then we'll look at a
01:22 - real world example with data that I'll
01:24 - load in from a CSV file now if you've
01:26 - been following along with the series
01:27 - then you'll likely recognize the other
01:29 - matplotlib code that I have here at the
01:31 - moment but if not let me go over this
01:33 - real quick just in case okay so I have a
01:36 - few imports here at the top I'm
01:38 - importing the random module the count
01:40 - function from itertools we'll go over
01:43 - how we're using those here in just a
01:45 - second I'm importing
01:46 - pandas here we're importing pipe lot for
01:49 - matplotlib we are setting our plot
01:51 - styles to use the 5:38 style just so
01:54 - these look a little nicer now this
01:56 - entire section here is just the data
01:58 - that we're going to be plotting just to
02:00 - get our heads wrapped around how this is
02:02 - working right now we'll look at that
02:04 - here in a second and finally here at the
02:06 - bottom we are doing PLT dot tight layout
02:09 - to add some automatic padding to our
02:11 - plots and PLT dot show
02:13 - we'll just show us our plots and as
02:15 - usual I'm gonna have a link in the
02:17 - description section below to all of this
02:19 - code here if you would like to download
02:20 - that or a copy and paste it into your
02:22 - editor so that you can follow along with
02:25 - this video okay so first off we're used
02:28 - to using static plots that we've already
02:30 - seen in this series before so for
02:33 - example I have an X and a wide list here
02:36 - with values and I'm plotting this with
02:38 - the PLT dot plot method which is just
02:41 - going to make a basic line chart so if I
02:44 - run that then we can see that works so
02:47 - that is pretty simple but now let me
02:50 - delete the current data that we have in
02:52 - these lists and I'll uncomment out this
02:55 - function that I have right here and
02:57 - explain what our desired outcome is so
03:00 - let me remove PLT dot plot and for our x
03:05 - and y values I'm just going to set these
03:07 - to be empty lists and now let me
03:12 - uncomment out our index and our function
03:15 - here so for anyone who has never used
03:17 - the count function from the itertools
03:19 - library basically by default it just
03:22 - counts up one number at a time and each
03:25 - time we get the next value so I have a
03:27 - function here called animate and with
03:29 - this within this function we are
03:31 - appending to our X values list and also
03:35 - our Y values list now X values is just
03:38 - going to append a value that is just
03:40 - going to count up by one so it's just
03:43 - going to be sequential and Y values is
03:46 - appending a random number here between 1
03:49 - and 5 or between 0 and 5 so let's say
03:53 - that we wanted to run this function
03:55 - every second and plot these values that
03:58 - are getting appended to our list well
04:01 - how would we do that so to do that we
04:03 - can use the func animation class from
04:06 - the matplotlib animation module so let
04:09 - me import that and we'll take a look at
04:11 - how this is done so below our other
04:13 - imports here I'm going to say from mat
04:16 - plot Lib dot animation import func
04:21 - animation and now down here below our
04:26 - function let me make sure I spelled all
04:28 - that correctly yep so down here below
04:30 - our animate function
04:32 - let's tell matplotlib that we want to
04:35 - run that function on a specific interval
04:38 - so we can plot that new data so to do
04:41 - this I can simply say create a variable
04:44 - called any and I'll say an e is equal to
04:47 - func animation and now we need to pass
04:50 - in a few arguments so first we need to
04:52 - pass in the figure that we want to
04:54 - animate now we'll learn more about
04:56 - figures in the next tutorial when we
04:58 - learn about subplots but basically we
05:00 - just need to pass in the figure from our
05:03 - current plot and to do that we can just
05:05 - say PLT dot G C F which is get current
05:10 - figure okay and next we need to pass in
05:14 - the function that we want to run for our
05:16 - animation so that was the animate
05:19 - function and also the interval for how
05:23 - often we want to run this function the
05:26 - interval is in milliseconds so if you
05:28 - want one second then you can pass in
05:30 - 1000 and I think one second would be
05:32 - good for us in this video but you can
05:34 - change that depending on your data so
05:37 - I'm going to pass in an interval equal
05:39 - to 1000 which is one second okay so now
05:44 - matplotlib is going to run this animate
05:47 - function every second but currently we
05:50 - aren't plotting the data so within the
05:52 - animate function we're going to plot our
05:54 - X and our Y lists so I'm going to say
05:56 - PLT dot plot and we will plot out those
06:01 - X values and we will also plot out those
06:04 - Y values now if we run it like this then
06:07 - it will somewhat work but there's going
06:10 - to be one big problem so let me run this
06:12 - and I'll show you what that problem is
06:14 - so if we run this we can see that we get
06:19 - an updating chart but you can see here
06:22 - that this is weird we're getting all
06:24 - kinds of different colors here so let me
06:29 - close this and I'll explain what's going
06:31 - on here so the reason it's doing that is
06:34 - because our plot method is actually
06:36 - plotting a brand new line every
06:38 - time but it's not clearing out the old
06:41 - lines so there are actually multiple
06:44 - lines getting stacked on top of each
06:46 - other there but they're just being
06:47 - covered up so you can't really tell so
06:50 - one way we could solve this is to simply
06:52 - clear out our axis and if we do that
06:56 - then every time it plots that new line
06:59 - from scratch we won't have that issue
07:01 - with the different colored lines because
07:02 - it's always going to plot the same color
07:04 - so declare the axis we can simply run
07:07 - the CL a method which I'm assuming
07:10 - stands for clear axis so I'm going to
07:12 - put that right above our plot so I'm
07:15 - gonna say PLT dot CL a and now if I run
07:21 - this then we can see that this looks
07:25 - better it's updating our plot with those
07:27 - random values each time our animate
07:31 - function is run okay so that's nice but
07:34 - using random data directly within our
07:36 - animate function doesn't really give us
07:38 - an idea of how this would help us plot
07:41 - real-world data that's coming from an
07:43 - outside source so let's take a look at
07:46 - how we would do that so to do this I'm
07:49 - going to plot data that's from a CSV and
07:52 - this CSV is going to be constantly
07:55 - updated by an outside source
07:57 - now this source could be data that you
07:59 - pulled down from an online API and put
08:02 - it into a CSV file it could be data that
08:04 - you're saving from a sensor anything
08:06 - like that it's very common to save data
08:10 - from sources like that to a CSV file now
08:13 - the source for my CSV data is going to
08:15 - be a simple Python script that's going
08:17 - to be continuously adding values but it
08:20 - doesn't really have much to do this with
08:22 - this video so I'm not going to go into a
08:24 - lot of detail how that's adding that
08:26 - data but if you'd like to see how I'm
08:28 - doing this then I can open this script
08:30 - up really quick and just give a quick
08:32 - overview so let me go over this really
08:34 - quick and show how I'm writing random
08:36 - data to a CSV file in real time so I'm
08:40 - importing the CSV module random and time
08:43 - we're setting some starting values here
08:45 - of 0 and then total 1 and total to equal
08:48 - to a thousand and then we're just using
08:50 - the built-in CSB module for this stuff
08:52 - so the field names here are going to be
08:54 - the headers for the CSV file we are
08:57 - opening that up and writing those
08:58 - headers and then we're saying while true
09:01 - so this is just going to continue Lissie
09:03 - continuously run we are opening up that
09:06 - data in a pinned mode so it's going to
09:08 - keep appending to the CSV and we are
09:11 - creating a dictionary writer and we are
09:13 - writing out this info here and the info
09:17 - is all of the data for those headers so
09:20 - we're writing that row and then we're
09:22 - also printing this out to the console so
09:24 - that we can get some real-time feedback
09:26 - in the console as well and then lastly
09:28 - we're updating the values so I'm just
09:31 - incrementing by X values by one every
09:33 - time now your x values could be anything
09:36 - they could be dates they could be you
09:38 - know anything and now for total one we
09:42 - are saying total one is equal to its old
09:45 - value plus a random integer between
09:48 - negative six and eight so I just wanted
09:51 - some variation there it can either go
09:52 - down or it can go up but it's got a
09:54 - better chance of going up total to is
09:57 - equal to total twos old value at plus or
10:01 - minus negative five to six so it can
10:05 - also go down or up but it's more likely
10:08 - to go up as well but there's also not as
10:10 - much variance in these random data's
10:12 - here so that'll just kind of mix up the
10:15 - data for those two totals there so
10:17 - that's how I'm writing in real time to
10:19 - our data CSV file so that's the live
10:22 - data that we're going to be monitoring
10:24 - but again that can be live data from any
10:27 - source it doesn't matter that it's
10:28 - coming from a Python script it could be
10:30 - anything so now let's see how to do this
10:33 - so I've got some code commented out down
10:36 - here at the bottom and this just reads
10:38 - in all of the data from that CSV file
10:41 - that we're going to be monitoring and if
10:43 - you've been following along with this
10:44 - series then we've done this several
10:46 - times but in just in case
10:49 - let me uncomment out this and I will
10:51 - show how to do this so first I'm going
10:54 - to put this into our animate function
10:57 - and then I will describe what's going on
11:00 - here so I'm just going to replace these
11:02 - old values that we were using just to do
11:05 - some tests
11:06 - there and now our new values here we are
11:09 - reading in data see s V and that's going
11:12 - to be the data csv file that is getting
11:15 - live data written to it on a continuous
11:18 - basis for our x value we are grabbing
11:22 - the x value row so that's going to be
11:25 - all of the data for the x values in that
11:28 - csv same for y1 we are just grabbing the
11:31 - total one for y2 so we're gonna have two
11:35 - lines on this plot that we are
11:36 - monitoring that is going to be the total
11:38 - two column so now since this is going to
11:41 - run that animate function every second
11:44 - that means that it's also reading in the
11:46 - data from that csv every second now we
11:49 - can simply plot that out and when we
11:51 - plot this out let's also give these
11:53 - labels so that we know which one is
11:55 - which using a legend so let's pretend
11:58 - that these are you know youtube
12:00 - subscriber counts and we're plotting the
12:02 - live counts of two different channels or
12:04 - something like that so below our clear
12:08 - axis there i'm going to plot out first
12:12 - i'm going to plot out our y1 so pass in
12:14 - X for our x-axis y1 for our y-axis then
12:18 - I'm going to give this a label and I'll
12:20 - just call this channel 1 and now I'm
12:23 - going to copy this and also plot out a
12:25 - line for y2 and I will call this channel
12:30 - 2 now when we clear our axis it's also
12:33 - going to clear our legend so we're going
12:35 - to need to recreate that and I will just
12:38 - do that down here at the bottom by
12:39 - saying PLT dot legend and make sure you
12:43 - actually have that indented here within
12:45 - your animate function now with live data
12:47 - coming in I think it's usually best to
12:49 - specify an exact location for the legend
12:52 - I've had it you know switch spots only
12:55 - several times because the data is being
12:58 - updated and it's a bit distracting
12:59 - because this tries to pick the best
13:02 - location by default but if the data is
13:04 - constantly being updated then it could
13:06 - be switching around on you so I'm just
13:08 - going to set a location here and I'm
13:10 - going to set this equal to the upper
13:13 - left of our plots and you can change
13:17 - that based on your data and
13:19 - so I usually put my tight layout method
13:22 - in here as well so that each time it
13:24 - plots it takes that into consideration
13:27 - so I'm also going to put that here
13:29 - within my animate function as well so
13:33 - I'll do taht look tight layout and run
13:35 - that okay and that should be all we need
13:37 - to monitor our CSV file now this file
13:41 - isn't created yet so let me open up my
13:43 - terminal and I'm gonna run that script
13:45 - that's going to generate data for that
13:47 - CSV file so I've got my terminal pulled
13:50 - up here so now I'm going to say Python
13:54 - and that script was called data gen dot
13:58 - PI so I'm going to run that and when I
14:01 - run that it creates that CSV file and
14:03 - now this is writing data to that CSV
14:06 - file and it's going to continue as long
14:07 - as we don't kill our operation here so
14:10 - if we go back to our script now that CSV
14:14 - is being updated with live data so let's
14:17 - go to the scripts and see if this is
14:18 - picking up those real-time changes so
14:21 - I'm going to run our code here and when
14:24 - I run this you can see that that's
14:26 - already been running for some time and
14:27 - that these I've already taken off now so
14:32 - we can see that it's actually updating
14:34 - as that data is being written to that
14:37 - CSV file now let me close this down for
14:41 - a sec and pull this back up in the
14:43 - terminal and stop this and let me start
14:46 - this back over because it was already
14:48 - kind of far long whenever we checked
14:51 - that last time so now let me run this
14:53 - again and now it's basically just
14:55 - started so we can see that it just
14:58 - started writing data out to this CSV
15:00 - file so it's picking up those live tank
15:03 - changes from that CSV file and plotting
15:05 - that data as it comes out and this can
15:07 - be updated on any interval that you'd
15:09 - like so if your data is only updated
15:12 - every 5 seconds or something like that
15:14 - then you can change your interval so
15:16 - that it's only updating when you expect
15:19 - new data that way you don't have to
15:20 - check every second so I was thinking
15:23 - that in the near future maybe I'll put
15:25 - together a YouTube API tutorial using
15:28 - Python and maybe we can actually see how
15:30 - to build a working version of
15:33 - something like this with real YouTube
15:35 - data that would be a cool little project
15:37 - to do so we can see here I think I gave
15:41 - my channel one a better chance of having
15:45 - better random values and it was behind
15:47 - for the longest time and now it's just
15:49 - constantly been going up okay so we can
15:51 - close this down but it's kind of fun to
15:53 - watch these live plots take off like
15:56 - this so this was a pretty basic
15:58 - animation that we put together here
16:00 - using this live data but there's a lot
16:02 - more that you can do depending on your
16:04 - needs so for example if you needed to
16:06 - run an initialize function for your
16:08 - animation that sets things up one time
16:11 - before your animation first runs and
16:14 - then to do that the func animation class
16:18 - has an an it func argument that you
16:20 - could pass in to do that or if you
16:23 - needed to pass in additional arguments
16:25 - to our animate function then our F or
16:29 - func animation class also has an F args
16:32 - argument to do that so there's a lot
16:34 - more that you can do with this and some
16:36 - of these animations can get pretty
16:38 - complex I've seen some people use these
16:40 - for drawings and math simulations and
16:43 - gravity simulations and all kinds of
16:45 - neat stuff now there is a way that we
16:47 - could have updated our plot without
16:49 - totally clearing out the axis but it
16:53 - takes a bit more code since we'd have to
16:55 - also manually check our x and y limits
16:57 - and things like that
16:58 - but it is possible to not clear out our
17:02 - axis here and just update the lines on
17:05 - the axis with the live data so there's
17:07 - more than one way to do things like this
17:09 - but I thought that this was you know
17:12 - good enough for this video I think that
17:14 - this works well with the amount of data
17:16 - that we were looking at now if anyone
17:18 - wants to see the other more manual way
17:20 - then I can also try to include that in
17:23 - these snippets for this video when I
17:25 - upload those to github so you can
17:27 - probably find those there if I don't
17:29 - forget ok so that is the basics of
17:33 - running these cool little live plots and
17:36 - we can see that now when I run this
17:38 - since we haven't cleared that out for a
17:40 - while that that data CSV file has just
17:43 - been continuously getting updated so
17:46 - every time I run this it's just updating
17:49 - with the newest ones but we still have
17:51 - over let's see I think that updates that
17:53 - every second so we have over 200 seconds
17:56 - of data here already okay so we're just
17:58 - about finished up here but before we end
18:00 - I would like to mention the sponsor of
18:02 - this video and that is brilliant org so
18:06 - in this series we've been learning about
18:07 - matplotlib and how to plot data in
18:09 - python and brilliant would be an
18:11 - excellent way to supplement what you
18:12 - learn here with their hands-on courses
18:14 - they have some excellent courses
18:16 - covering the fundamentals of statistics
18:18 - and these lessons do a deep dive on how
18:20 - to think about and analyze data
18:22 - correctly they even use Python in their
18:24 - statistics courses and will quiz you on
18:26 - how to correctly analyze the data within
18:28 - the language they're guided lessons will
18:30 - challenge you but you also have the
18:32 - ability to get hints or even solutions
18:34 - if you need them it's really tailored
18:35 - towards understanding the material
18:37 - they've also recently released a
18:39 - programming with Python course and they
18:41 - even have a coding environment built
18:43 - into their website so that you can run
18:45 - code directly in the browser and that is
18:47 - a great way to complement watching my
18:48 - tutorials because you can apply what
18:50 - you've learned in their active
18:51 - problem-solving environment and that
18:53 - helps to solidify that knowledge so to
18:56 - support my channel and learn more about
18:57 - brilliant you can go to brilliant org
18:59 - ford slash CMS to sign up for free and
19:02 - also the first 200 people that go to
19:04 - that link will get 20% off the annual
19:07 - premium subscription and you can find
19:09 - that link in the description section
19:10 - below
19:11 - again that's brilliant dot org forge /
19:14 - CMS ok so I think that is going to do it
19:18 - for this video I hope you feel like you
19:19 - got a good idea for how these animations
19:22 - work and how you can use that to plot
19:23 - real time data I definitely think this
19:25 - is one of the coolest things that we can
19:27 - do with matplotlib it opens up a lot of
19:29 - possibilities in terms of how we can
19:31 - plot data from api's or sensors and get
19:34 - immediate feedback like this now in the
19:37 - next video we're going to be going over
19:39 - subplots so so far in this series we've
19:42 - simply been creating our plots with the
19:44 - PI plot object and that works great for
19:46 - what we've done so far but if you want
19:48 - additional plots or sub plots then it's
19:50 - best to create your plots with these sub
19:52 - plots method so definitely be sure to
19:54 - check out that video but if anyone has
19:57 - any questions about what we've covered
19:58 - in this video then feel free to add
20:00 - in the comments section below and I'll
20:01 - do my best to answer those and if you
20:03 - enjoy these tutorials and would like to
20:04 - support them then there are several ways
20:06 - you can do that these ways to simply
20:08 - like the video and give it a thumbs up
20:09 - and also it's a huge help to share these
20:11 - videos with anyone who you think would
20:12 - find them useful and if you have the
20:13 - means you can contribute through patreon
20:15 - and there's a link to that page in the
20:16 - description section below be sure to
20:18 - subscribe for future videos and thank
20:20 - you all for watching
20:31 - you