00:00 - hey everybody how's it going in this
00:01 - programming terms video we're going to
00:03 - be going over the term closure we're
00:05 - going to look at closures and both
00:07 - Python and in JavaScript so we can see
00:09 - this concept in two different languages
00:11 - and that may help the term sink in a
00:13 - little bit so don't worry if you're not
00:15 - familiar with one of these languages
00:16 - what's important is to take away the
00:19 - concept of a closure and not the
00:21 - specific syntax of any one language so
00:24 - first of all to better understand
00:25 - closures you may want to watch my video
00:28 - on first-class functions because
00:30 - understanding those will help you better
00:32 - understand why closures work the way
00:34 - that they do so basically to quickly
00:37 - summarize that video first-class
00:39 - functions allow us to treat functions
00:41 - like any other object so for example we
00:45 - can pass functions as an argument to
00:47 - another function we can return functions
00:50 - and we can assign functions to variables
00:53 - so that's going to be important because
00:55 - we'll see this a lot when working with
00:57 - closures okay so what exactly is a
00:59 - closure if we look at the Wikipedia
01:02 - definition then it's defines a closure
01:05 - as a closure is a record storing a
01:09 - function together with an environment a
01:11 - mapping associating each free variable
01:14 - of the function with the value or
01:16 - storage location to which the name was
01:18 - bound when the closure was created a
01:20 - closure
01:21 - unlike plain functions allows the
01:23 - function to access those captured
01:25 - variables through the closures reference
01:27 - to them even when the function is
01:29 - invoked outside their scope so I know
01:32 - that may be kind of a difficult
01:33 - definition to understand but let's take
01:36 - a look at a few code examples to really
01:38 - understand this okay so my first example
01:41 - here is in Python now let's walk through
01:44 - the code and point out exactly what's
01:45 - going on here so you can see here when I
01:48 - run this outer function that it executes
01:52 - the function and it doesn't take any
01:54 - parameters now the first thing that it
01:56 - does is it comes in and assigns this
01:58 - variable message with the value of hi
02:01 - and then we have an inner function here
02:03 - now this function doesn't take in any
02:05 - parameters either and all it does is
02:08 - print the message variable now when our
02:11 - inner function accesses this message
02:13 - variable this is actually what we call a
02:15 - free variable because it's not actually
02:17 - defined in the inner function but we
02:20 - still have access to it within the inner
02:21 - function so then down here we are
02:24 - executing this inner function and then
02:26 - we are returning that okay so if I run
02:29 - this code and you can see that it prints
02:31 - out the value hi so again really fast
02:33 - what it did is we executed this outer
02:36 - function it came in here assign this
02:38 - message variable with this value then we
02:41 - created this inner function from within
02:43 - our outer function which just prints
02:46 - that message variable which we call a
02:48 - free variable inside inner function and
02:50 - now we're returning the inner function
02:52 - and executing that inner function also
02:55 - so it should print that message which it
02:56 - did okay so now let's do something
02:58 - different here instead of executing this
03:01 - inner function and then returning it
03:03 - let's just return the function without
03:06 - executing it and we can do that by
03:08 - taking away the parentheses here and
03:10 - saving that so now if I run this it
03:13 - doesn't look like anything happened but
03:15 - what I'm also going to do is I'm going
03:17 - to assign this to a variable called
03:21 - myfunc
03:22 - and then if I run that again you can see
03:23 - that it still doesn't do anything so
03:25 - let's walk through this really quick
03:27 - when we execute this outer function it
03:30 - comes in here and it does everything
03:31 - that it did before but instead of
03:33 - executing the inner function it just
03:35 - returns the inner function so now my my
03:39 - func variable here is actually a
03:41 - function now and it's equal to the inner
03:44 - func function because that's was what we
03:47 - returned and we can see this if we print
03:51 - myfunc
03:52 - and if I save that and run it then you
03:55 - can see that it is a function and that
03:57 - it's equal to this inner function and I
03:59 - can actually print out just the name of
04:02 - that and if I run it you can see that
04:04 - the name of the function that this
04:07 - variable is assigned to is inner func so
04:09 - now I can execute this variable just
04:13 - like any other function so if I execute
04:16 - this a few times in a row here and then
04:20 - save and run that now you can see that
04:22 - it printed out our message of hi now
04:25 - this is kind of interesting because
04:26 - we're
04:27 - done with the execution of our outer
04:29 - function but the inner function that we
04:31 - returned still has access to that
04:34 - message variable that it's printing out
04:35 - so that's what a closure is so in simple
04:38 - terms a closure is an inner function
04:41 - that remembers and has access to
04:44 - variables in the local scope in which it
04:47 - was created even after the outer
04:49 - function has finished executing now this
04:51 - gets more interesting when we add
04:53 - parameters for our functions now our
04:55 - functions don't currently have
04:56 - parameters but let's go ahead and add a
04:58 - couple really fast so in our outer
05:00 - function here I'm actually going to pass
05:03 - in a parameter of MSG for message and
05:07 - then I'm going to set this message
05:10 - variable equal to the value that we pass
05:13 - into our outer function so now whenever
05:15 - I set this variable here so let me
05:18 - create two new variables I'm going to
05:20 - call this hi function and I will call
05:23 - another one down here something like
05:26 - Hello function and now I actually have
05:28 - to pass in this message parameter here
05:31 - so I'm going to pass in the same one
05:33 - that we had before for that one which is
05:35 - high and for this one I'm going to do
05:38 - hello so both of these variables are
05:40 - taking in a string argument and then it
05:43 - sets our message variable to that string
05:45 - and returns our inner function ready to
05:49 - print that message now one thing we
05:51 - should notice here is that our inner
05:53 - function still doesn't take any
05:54 - arguments so when we execute these
05:57 - functions we only need to add an empty
05:59 - parenthesis so if I go ahead and copy
06:03 - both of these then I can just paste
06:06 - these in here and let me put empty
06:08 - parenthesis to execute both of these and
06:10 - run that so when I print these out you
06:12 - can see that each of these functions
06:14 - remembers the value of their own message
06:17 - variable so I forgot exactly where I
06:19 - read this but I saw that one way that
06:21 - you can remember this is that a closure
06:23 - closes over the free variables from
06:26 - their environment and in this case
06:28 - message would be that free variable okay
06:30 - so now let's look at an example in
06:32 - JavaScript that is a little bit more
06:35 - complex now my hope here is that I sing
06:38 - this in two different languages that it
06:40 - will really knock home the
06:41 - concept rather than just the syntax of
06:43 - the language so this is an example that
06:45 - I used in the first class functions
06:47 - video okay so here I have a function
06:50 - called HTML tag which takes a tag
06:53 - parameter now this is our outer function
06:56 - then we have an inner rap text function
06:59 - that takes a message parameter now all
07:02 - our inner rap text function does is logs
07:05 - a message to the console which wraps our
07:08 - message within these tags and then you
07:11 - can see down here that we are returning
07:13 - the wrap text function okay so here I am
07:16 - setting this print h1 variable to our
07:19 - outer HTML tag function with the
07:22 - argument of h1 now what it's going to do
07:26 - is it's going to execute this HTML tag
07:28 - function set this tag variable to h1 and
07:32 - then return our wrap text function ready
07:36 - to accept a message so there's a
07:38 - difference from our last example so here
07:41 - the inner function we are returning does
07:44 - take one parameter so when we call this
07:47 - print h1 function we need to pass in a
07:51 - message argument okay so now I can treat
07:53 - this print h1 variable just like it is
07:57 - our wrap text function waiting for this
08:00 - message so what I'm going to do is
08:01 - uncomment out this code here and save
08:04 - that and go ahead and run that so you
08:06 - can see when I ran that that it
08:09 - remembered that we passed in the h1 as
08:12 - our tag and then printed out each
08:14 - individual message wrapped in that tag
08:17 - and also have an example down here with
08:19 - a paragraph tag and if I run that then
08:22 - you can see that that works also okay so
08:25 - lastly let's take a look at one last
08:27 - example and the last example will be in
08:29 - Python now this will be a more practical
08:32 - example and also slightly more complex
08:35 - so let me go ahead and grab this code
08:37 - from my snippets here and I'm just going
08:40 - to go ahead and paste that in here
08:42 - ok so let's quickly walk through what
08:45 - this code is doing here so we have an
08:48 - outer function here called logger which
08:51 - takes in a function as its parameter
08:53 - the inner function called log funk takes
08:57 - in any number of arguments and that's
08:59 - what the star does here it's basically
09:02 - saying that we can pass in any number of
09:04 - arguments to this function so then
09:06 - within the inner function here we are
09:08 - logging that we are running the function
09:10 - that we passed in and it also prints out
09:14 - the arguments that we used with that
09:16 - function and then we actually execute
09:19 - the function here with the arguments and
09:21 - then we print that to the console and
09:23 - then you can see down here that we are
09:25 - returning this inner log function okay
09:28 - now down here I have two very simple
09:31 - functions add and subtract which all
09:33 - they do is simply add and subtract two
09:36 - different numbers okay now we have two
09:38 - variables here one called add logger and
09:41 - another one called sub logger which we
09:43 - pass in our add function to our outer
09:46 - logger function and here we pass in our
09:49 - sub function to our outer logger
09:51 - function so now we can use these two
09:54 - variables that we created as if they are
09:56 - our inner function and just to remind
09:59 - you what the inner function looks like
10:00 - it accepts any number of arguments and
10:03 - then it comes in here and logs that were
10:05 - running our function with the arguments
10:07 - then runs that function and prints it to
10:10 - the console okay so I'm just going to go
10:12 - ahead and run this really quick now we
10:14 - can see here that it printed out our
10:16 - results to the console so we did our add
10:19 - logger of 3 & 3 and it printed out 6 4
10:23 - plus 5 as none and then 10 minus 5 is 5
10:26 - 20 minus 10 is 10 so it printed out the
10:29 - correct values to the console now we
10:31 - could have done that with our original
10:32 - add and subtract functions but what
10:35 - creating a closure did for us is that we
10:39 - can see if we look into our files here
10:41 - that it also created this example dot
10:43 - log and you can see that it should have
10:47 - logged this information here that we
10:49 - were running a specific function with
10:51 - specific arguments so if I open up this
10:53 - log file you can see that each time we
10:56 - ran a function that it came in and
10:58 - logged the function that we were running
11:01 - and the arguments that we passed in so
11:03 - you can see how these closures can be
11:05 - extremely powerful and there's
11:07 - countless different ways in which we can
11:09 - use them now this specific example with
11:11 - logging and Python would probably be a
11:14 - better use case for a Python decorator
11:16 - but that's going to be a topic for
11:17 - another video okay so I think that's
11:20 - going to do it for this video I hope
11:22 - this helped you better understand
11:24 - closures and also gave you some ideas
11:26 - for how you can use them within your own
11:28 - applications but if you do have any
11:29 - questions just feel free to ask in the
11:31 - comment section below
11:32 - be sure to subscribe for future videos
11:34 - and thank you all for watching