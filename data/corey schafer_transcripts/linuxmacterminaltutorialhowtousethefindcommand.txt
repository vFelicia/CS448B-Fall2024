00:00 - hey there how's it going everybody in
00:01 - this video we'll be learning how to use
00:03 - the fine command from within a Linux or
00:05 - Mac terminal now the fine command is a
00:07 - powerful tool that allows us to quickly
00:09 - and easily scan through our file system
00:11 - to find files and directories that meet
00:13 - a certain criteria and we can even
00:15 - perform actions on those results that we
00:17 - get back now the reason I wanted to walk
00:18 - through how to use this tool is because
00:20 - sometimes I see people who write scripts
00:22 - that are more complex than they need to
00:23 - be whether that's in Python or another
00:25 - language when really what they are
00:27 - trying to do can sometimes be done a lot
00:29 - more easily using these command line
00:31 - tools so let's go ahead and look at some
00:33 - examples so just like any of these
00:35 - commands if you look at the manual page
00:37 - by typing in man and then the name of
00:39 - the command in this case it's fine now
00:41 - this will show us all of the options and
00:43 - different ways that we can use this
00:45 - command but we're going to go over a lot
00:47 - of these here in this video so right now
00:50 - I'm currently in a test directory where
00:51 - I've created some sample files and
00:53 - directories now if I wanted to find all
00:55 - the files and directories starting in
00:57 - this current directory then I can just
00:59 - say fine and then a dot and that dot
01:02 - signifies the current directory now if I
01:05 - run this then you can see that we get
01:07 - all of the files and directories below
01:09 - the current directory that we searched
01:11 - and you can see that it even searched
01:13 - down through some of the subdirectories
01:14 - here now if I wanted to find all of the
01:17 - files and directories within a specific
01:20 - directory then I can just replace that
01:22 - dot with a directory name so if I wanted
01:25 - to find all the files and folders within
01:27 - my website demo directory then I could
01:30 - just say find website demo and if I run
01:34 - that then you can see that it returned
01:36 - all of the directories and files within
01:38 - that website demo directory okay so now
01:40 - let's start filtering out some of the
01:42 - results so let's say that I wanted to
01:44 - find only the directories and exclude
01:46 - the files now to do that I'm going to do
01:49 - this in my current directory so I'm
01:50 - going to say find within my current
01:52 - directory and I'm just going to say type
01:54 - D and this will find all the directories
01:57 - and no files so there you can see that I
01:59 - got a result of all of my directories
02:01 - below my current directory now if I
02:03 - wanted to find all of the files and no
02:05 - directories then I can just replace that
02:07 - D with an F now if I run this then
02:11 - you'll see that it returns all of the
02:12 - files
02:13 - and no directories okay so now let's say
02:16 - that I wanted to find a file with a
02:18 - specific name now I know that there's a
02:20 - file below my current directory
02:22 - somewhere called
02:23 - test underscore one dot txt but I can't
02:27 - remember exactly where that is so let's
02:29 - go ahead and search within the current
02:31 - directory for this file and it will
02:33 - search in all the sub directories as
02:35 - well so we want to do a find within the
02:37 - current directory which is that dot a
02:39 - type with an F which is going to find
02:42 - all the files and then I'm going to do
02:44 - an option of name and that name was test
02:48 - underscore one dot txt so you can see
02:52 - when I search for that exact filename
02:53 - that it returned this one result within
02:56 - this testdir directory
02:58 - okay but sometimes you don't know the
03:00 - entire file name exactly what if I knew
03:04 - the file started with the word test but
03:06 - I couldn't remember the rest of it so if
03:08 - I wanted to find all the files that
03:10 - started with the word test and you can
03:12 - use an asterisk as a wild-card so
03:15 - instead of searching for the specific
03:18 - file name here I'm just going to say
03:19 - test and then that asterisk there to do
03:22 - a wild-card now if I run that then you
03:25 - can see that it returns all of these
03:26 - files that start with the word test now
03:29 - there are some files that start with the
03:31 - word test that it didn't return and
03:32 - that's because some of them have capital
03:35 - letters and this name option here is
03:38 - case sensitive now if I want it to be
03:40 - case insensitive then instead of typing
03:44 - name I can use I name so I'll do an i
03:47 - name search instead and if I run that
03:51 - now you can see that it gets files that
03:53 - start with test and it's case
03:55 - insensitive so it returns the ones that
03:57 - have capital letters in them also
03:59 - now that wildcard that I showed you
04:01 - sometimes
04:02 - that is useful in order to find files
04:05 - with certain extensions so let's say
04:08 - that I wanted to find all Python files
04:10 - below my current directory then I could
04:13 - just say star dot PI so you can see when
04:16 - I ran that that it did return some
04:18 - Python files within some of these
04:20 - subdirectories here and this star just
04:23 - means anything and then this dot py it's
04:26 - saying return
04:27 - anything that ends in this dot py now we
04:31 - can also filter files and directories
04:32 - based on their metadata and that can be
04:34 - extremely useful so let's say that we
04:35 - wanted to find all the files modified in
04:38 - the last ten minutes so I can do the
04:42 - find type file and now I want to find
04:46 - all the ones modified in the last ten
04:48 - minutes so I'll say M min - 10 so when
04:53 - you will use this minus sign right here
04:55 - it's saying to find files that were
04:57 - modified less than 10 minutes ago and we
05:01 - could use the plus sign to find files
05:02 - that were modified more than 10 minutes
05:04 - ago and you can see that this didn't
05:06 - return any results because none of these
05:08 - files have been modified in the last 10
05:10 - minutes but if I create a new file here
05:13 - so I'm just going to say new one dot txt
05:16 - and then I rerun this command to find
05:19 - files that were modified in the last 10
05:21 - minutes then you can see that it found
05:23 - that new file that we just created now
05:25 - all of the other files were modified
05:27 - more than 10 minutes ago but just to
05:30 - show you what that looks like I can do
05:32 - find files that were modified more than
05:36 - 10 minutes ago
05:38 - so if I run that you can see that it
05:39 - returns a lot more here because all
05:41 - those were modified more than 10 minutes
05:43 - ago now you can actually combine
05:45 - multiple of those time searches together
05:47 - so let's say that I wanted to find a
05:49 - file that was modified more than one
05:52 - minute ago but less than five minutes
05:55 - ago so I can just put in this same
05:57 - option here and this says more than one
06:00 - minute ago and less than five minutes
06:03 - ago so if I run that then you can see
06:06 - that it returned that new file that we
06:08 - just created because it was more than a
06:09 - minute since we created that file now
06:11 - sometimes working with minutes isn't
06:13 - exactly convenient because if you have
06:15 - something where it's been days that you
06:17 - want to search then you don't want to
06:19 - calculate up all the minutes for that
06:21 - now if you wanted to see files that were
06:23 - last modified a certain number of days
06:25 - ago
06:26 - then instead of that m minute option we
06:30 - can use this m time option so I'll do em
06:33 - time and I'll say less than 20 days ago
06:37 - and just like with the minute searches
06:39 - if we wanted to
06:41 - then we could make this more than 20
06:44 - days ago also but you can see that that
06:47 - returns no results because none of these
06:49 - were modified more than 20 days ago now
06:52 - I've been using M min and M time for
06:56 - modified minutes and modified days but
07:00 - you can also use a men and a time for
07:05 - access minutes and access days and you
07:08 - can also use C min and see time for
07:12 - changed minutes and change days ok so
07:17 - another useful option is to be able to
07:18 - search by file size so let's say that we
07:21 - had some files eating up our disk space
07:23 - and we didn't know exactly where those
07:25 - were well we could run a search and try
07:27 - to find all the files over a certain
07:29 - size so let's say that I wanted to find
07:31 - all the files that are over 5 megabytes
07:34 - so in order to do that I'm going to find
07:36 - everything I'm like under my current
07:38 - directory and then that's going to be
07:40 - the size option and we want to find over
07:44 - 5 megabytes and that's how we would find
07:47 - those so if I run that you can see that
07:50 - that returns one result now you can see
07:51 - that this is similar to the same syntax
07:54 - that we use to search by time except now
07:57 - we have this uppercase M here to signify
08:00 - megabytes now we could also use a
08:02 - lowercase K 4 kilobytes and we could use
08:06 - an uppercase G 4 gigabytes and just to
08:10 - prove that that file is over 5 megabytes
08:13 - and I can actually go ahead and search
08:16 - all of the files in this directory and
08:19 - if I run that you can see that our
08:21 - search returned this wallpaper dot jpg
08:24 - and if we look at the size of that it's
08:26 - actually 7 megabytes and we have two
08:28 - more pictures in here that are under
08:31 - that 5 megabytes so those didn't get
08:33 - returned by that fine command ok so
08:35 - another common search that I like to
08:37 - perform is finding any files that I have
08:39 - created that are currently empty
08:42 - now listen come in handy if you've
08:43 - created a bunch of test files that are
08:45 - just lingering around that don't
08:46 - actually have any data so to do this we
08:49 - can just find all of the files and we
08:52 - can just tack on this in
08:54 - the option here and if I run that then
08:57 - you can see that a lot of these files
08:58 - are empty because I just created these
09:00 - to do this walkthrough okay so one of
09:02 - the last filters that we're going to
09:04 - look at is how to search based on
09:05 - permissions and I do this a lot
09:07 - especially when working with websites
09:09 - and checking to make sure that certain
09:11 - permissions are what they should be and
09:13 - we could do that using the - PE RM
09:17 - option so I'm going to do a find within
09:20 - the current directory - PE RM for
09:23 - permissions now I'm going to do a search
09:26 - on all files and directories that have
09:28 - permissions of 777 and you can see that
09:32 - within this website demo directory that
09:35 - a lot of our directories and files have
09:38 - that permission of 777 ok so now that
09:41 - we've looked at several different ways
09:43 - that we can filter our results
09:44 - let's look at how we can actually
09:46 - perform some actions on our results so
09:48 - this is where this becomes extremely
09:50 - useful so let's say that we found a lot
09:52 - of permissions here within our website
09:54 - demo directory that we're in correct and
09:56 - that we wanted to change these so
09:57 - currently everything is set to 777 which
10:00 - gives anyone read write or execute
10:03 - permissions so first we want to change
10:05 - the user and group for every directory
10:08 - and file in our folder and then we want
10:10 - to set all of the directories to have a
10:12 - permission level of 775 and all the
10:15 - files to have a permission level of 664
10:18 - now that might sound like a lot of work
10:20 - and if you did this manually then it
10:22 - could take an extremely long time now
10:24 - this is sometimes where I see people who
10:26 - write overly complicated scripts to do
10:28 - something like this but we don't have to
10:30 - write something like a Python script for
10:32 - this if we know how to use these
10:33 - terminal commands properly so we're
10:35 - going to do this everything that we want
10:37 - in three easy steps
10:38 - so first of all we wanted to change the
10:41 - user and group for every file and
10:44 - directory within our website demo folder
10:46 - so remember find will return every file
10:50 - and directory by default so if we run
10:53 - find on the website demo directory then
10:56 - this will return every file and
10:58 - directory within that folder so now if I
11:01 - want to set the user and group on all
11:03 - those results then we could use this
11:06 - exec
11:08 - in here to execute a command on those
11:11 - results now the command that I want to
11:13 - execute is this CH own and that will
11:17 - change the owner of each result so for
11:20 - the user here I'm just going to type in
11:21 - Corey Schaeffer as the user and for the
11:25 - group I'm going to make this wwa de so
11:29 - now if we were to run this command on a
11:31 - normal file or directory' then this is
11:33 - normally the place where we would put in
11:35 - the name of that file or directory but
11:38 - since we are getting these results
11:39 - through the fine command then we need to
11:42 - put a placeholder here instead and the
11:44 - placeholder for these commands they are
11:46 - just these curly braces and now all we
11:48 - have to do is end our command so we can
11:51 - either put in a plus sign or we can put
11:53 - in a backslash semicolon now I like to
11:56 - use the plus sign but that's just
11:58 - personal preference whatever you want to
12:00 - use is completely up to you
12:01 - so now if I run this then you can see
12:04 - that it looks like not much happen but
12:06 - we also didn't get any errors so now if
12:08 - I do an LS l a on our website demo
12:12 - directory then you can see that our user
12:15 - and group work change for all these
12:17 - files and folders now these two dots
12:19 - here are just the parent directory so
12:23 - that's why they still have the old group
12:24 - so that's fine so now let's say that we
12:26 - wanted to set all of the directory
12:28 - permissions to 775 and all the file
12:31 - permissions to 664 and this time I'm not
12:34 - going to go as in-depth just so you can
12:36 - see how quickly we can run these types
12:38 - of commands so first of all we want to
12:41 - so first I'm going to go ahead and
12:44 - delete the command that we just ran now
12:47 - we want to find all of the directories
12:50 - so I'm going to say type D and now I
12:53 - want to run a command on all these
12:55 - directories and that command I want to
12:57 - be changed mod which we can use to
12:59 - change permissions and I want that to
13:01 - set all of those directories to 775 I'm
13:05 - going to put in my placeholder for all
13:06 - the results and then a plus sign to end
13:08 - that command so now if I wanted to see
13:10 - if that worked that I can do a find
13:13 - within that website demo directory and I
13:16 - can search for permissions of seven
13:18 - seven five if I run that and you can see
13:21 - that returned all
13:21 - our directories so our directories
13:23 - within website demo did get those new
13:26 - permissions of 775 okay so now let's
13:30 - change the file permissions to 664 I'm
13:32 - just going to pull up this old command
13:34 - here and instead of the directories I'm
13:37 - just going to go ahead and find the
13:39 - files and instead of 775 I'm going to
13:42 - change these to 664 and we can run that
13:44 - okay so just like we did with our
13:46 - directories now let's search for the
13:48 - permissions of 664 and make sure that
13:51 - all of those were set correctly and you
13:53 - can see that when I run that that it
13:55 - returned all of our files underneath
13:57 - that website demo directory so they all
14:00 - have those new permission levels of 664
14:02 - ok so now let's look at a slightly more
14:04 - complicated example so let's say that I
14:06 - wanted to delete all the image files in
14:08 - my current directory that ended with a
14:10 - dot jpg extension now first let's go
14:14 - ahead and just build up the command so
14:16 - I'm going to do a find within my current
14:18 - directory and I want to find a type of F
14:21 - which is a file and I want the name to
14:24 - be star dot jpg now see this is
14:27 - important here because if you're doing
14:29 - something like the leading or modifying
14:31 - files then you should always run the
14:33 - find command to see what your results
14:35 - are before doing anything to those
14:38 - results because you might not be
14:39 - removing the files or folders that you
14:41 - expect so running the find command first
14:44 - is like a dry run that allows you to see
14:46 - the results that you'll be working with
14:48 - so you can see when I ran that command
14:50 - that our results aren't what we wanted
14:52 - because I only wanted to remove all the
14:55 - files in the current directory I don't
14:57 - want to delete anything in the
14:59 - subdirectories and you can see here that
15:01 - our fine command returned all of the
15:03 - JPEGs from our website folder as well
15:06 - now this is a mistake that people make
15:08 - sometimes so it's important to be
15:09 - careful so instead to find only the
15:12 - files in our current directory then we
15:14 - can set this max depth option so I can
15:17 - set a max depth here and I'm just going
15:20 - to set this to 1 now setting a max depth
15:23 - of 1 means that you're only going to
15:25 - search down one directory which is the
15:28 - current directory so you can see when I
15:30 - ran that that it got our correct results
15:32 - and that it excluded the matching files
15:34 - within our
15:35 - sub-directories so now if we wanted to
15:37 - delete these files then we know that
15:40 - fine is returning what we expect so we
15:43 - can just bring back up that command and
15:44 - now we can just add on to the command
15:47 - what we want to run so we want to
15:49 - execute an RM and then put in our
15:52 - placeholder for those results and then
15:54 - just end that with a plus sign and if I
15:57 - run that and now if I do an LS within
15:59 - this current directory then it deleted
16:02 - all of those JPEG images within the
16:04 - current directory so you can see how
16:06 - these fine commands can be extremely
16:08 - detailed as to the results that you're
16:10 - getting back and allow you to execute
16:12 - certain commands on those results so
16:14 - this can be extremely useful in your
16:16 - project so for example sometimes I'll
16:19 - see Python programmers who maybe want to
16:21 - clean up any other pyc files that they
16:24 - have lingering around and I sometimes
16:26 - see questions where people ask how to
16:27 - delete those and it would be as easy as
16:30 - running a command like this except
16:32 - instead of a star jpg you could do star
16:37 - dot pyc and you can set that max depth
16:40 - to any level that you wanted or you
16:43 - could take it out all together and that
16:45 - would delete all of the pyc files in
16:47 - your entire project okay so I think
16:50 - that's going to do it for this video
16:51 - like I said there's a ton of different
16:52 - things that you can do with this fine
16:54 - command if you just take the time to
16:55 - play around with it now if you get good
16:57 - with commands like this then it's going
16:59 - to save you a lot of time so like I said
17:01 - instead of writing complicated scripts
17:03 - to do these exact same things you can
17:05 - just run a quick terminal command to do
17:07 - exactly what you want now if you do have
17:09 - any questions about what we covered in
17:10 - this video then feel free to ask in the
17:12 - comment section below and I'll do my
17:13 - best to answer those now if you enjoy
17:15 - these tutorials and I'd like to support
17:16 - them then our several ways you can do
17:18 - that the easiest way is to simply like
17:20 - the video and give it a thumbs up and
17:21 - also it's a huge help to share these
17:23 - videos with anyone you think would find
17:24 - them useful and also if you have the
17:26 - means you can contribute through patreon
17:28 - and there's a link to that page in the
17:29 - description section below be sure to
17:31 - subscribe for future videos and thank
17:33 - you all for watching
17:35 - you