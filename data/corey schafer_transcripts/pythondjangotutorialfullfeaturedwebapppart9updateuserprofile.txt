00:00 - hey there how's it going everybody in
00:01 - this video we'll be finishing up our
00:03 - user profile page and making it so that
00:05 - users can update their information from
00:07 - this page and also upload a new profile
00:09 - picture we're also going to set this up
00:12 - so that our images are automatically
00:13 - resized when we upload them so that we
00:15 - don't have extremely large images on our
00:18 - file system when we're only displaying
00:20 - the small little you know 200 pixel
00:22 - images here on the profile so let's go
00:24 - ahead and get started so in order to
00:26 - update our user and profile we're going
00:28 - to need to create some forms and we've
00:30 - created forms in a previous video when
00:32 - we created the user register form for
00:35 - our register page so let's open up that
00:37 - user app form stop py file that we
00:40 - created in that video and we're going to
00:42 - create a couple of additional forms to
00:44 - update our user and profile so within
00:47 - sublime text within our users app we're
00:50 - going to open up that forms dot py file
00:53 - and within here we're going to create
00:55 - some additional forms so we're going to
00:57 - create something called a model form and
00:59 - a model form allows us to create a form
01:02 - that will work with a specific database
01:04 - model and in this case we want a form
01:07 - that will update our user model so let's
01:10 - create this so on a new line down here
01:13 - I'm going to create a new class and I'm
01:15 - gonna call this user update form and I'm
01:19 - going to inherit from forms dot model
01:23 - form and within this class this is going
01:26 - to be very similar to our user register
01:29 - form except we're not going to use the
01:31 - password and password to here so we only
01:34 - want to update the username and the
01:36 - email so I'm just going to copy this
01:39 - user register form here and paste this
01:41 - in and get rid of the password 1 and
01:44 - password 2 now in a future video we will
01:47 - have a reset password form where they
01:50 - can request a reset email for the
01:53 - passwords but they're not going to be
01:54 - able to update their passwords on this
01:56 - just their username and email for now so
01:58 - by specifying these values here in the
02:00 - fields and let's our form know that we
02:02 - want to work with the username and the
02:04 - email within this user update form but
02:07 - you can see that we don't have the
02:09 - profile picture here yet and that's
02:11 - because that will be in our
02:13 - file model not our user model so we
02:15 - actually need to create an additional
02:17 - form but since we'll be working with the
02:20 - profile model we first need to import
02:22 - that so here at the top I'm going to say
02:25 - from dot models import profile and now
02:30 - we can create that profile form so I'm
02:35 - going to call this class profile update
02:38 - form and I'm going to inherit from that
02:41 - forms dot model form and now we don't
02:45 - want to add any additional fields here
02:47 - so we can just jump straight into that
02:49 - class meta and within that class meta we
02:52 - can say that the model that we want to
02:54 - work with is profile and the fields that
02:58 - we want to work with this is still going
03:00 - to be a list but it's only going to be a
03:01 - list of one value and it's going to be
03:03 - image okay so now we have two forms here
03:06 - a user update form and a profile update
03:08 - form and the user form will allow us to
03:10 - update our user name and email and the
03:13 - profile form will allow us to update our
03:15 - image but whenever we actually put this
03:17 - on the template it's going to look like
03:20 - just one form okay so with those forms
03:22 - created let's open up our views so that
03:25 - we can add these forms to our profile
03:27 - view so I'm going to open up our user
03:31 - app views here now first let's add the
03:35 - forms that we just created so let's
03:37 - import these so we'll import these from
03:40 - the forms module and we're already
03:41 - importing this user register form so now
03:44 - we can just add on the user update form
03:48 - and the profile update form and now down
03:53 - here within our profile let's create
03:56 - instances of these so for our user
03:59 - update form I'll just call this you
04:01 - underscore form and set that to a user
04:05 - update form and let me fix the spacing
04:09 - there and we just want to instantiate
04:10 - that as empty for now now for our
04:13 - profile update form I'll just call this
04:15 - P underscore form and set that equal to
04:17 - a profile update form and now let's pass
04:21 - this in to our template so to do this if
04:24 - you remember we can create a
04:26 - context which is a dictionary and the
04:29 - keys are going to be the variables that
04:31 - we're going to access within our
04:32 - template so we can just pass in a you
04:36 - form variable here that is equal to our
04:38 - you form which is our user update form
04:41 - and I'll do the same for our profile
04:44 - update form so P underscore form is
04:46 - equal to our P underscore form and now
04:49 - let's pass that context into our
04:51 - template so that we can access those
04:53 - forms okay so now let's open our profile
04:56 - template and print out these forms now
04:59 - again we've done this once when we
05:01 - created our register page but it's
05:03 - probably good to go through this again
05:05 - but as a starting point let me go ahead
05:07 - and copy the form section of that
05:09 - register route so that you don't have to
05:11 - watch me type all of this again
05:13 - so I'm going to open up the register
05:15 - route so within our users templates I'm
05:17 - going to open up register dot HTML and
05:20 - I'm just gonna grab this form section
05:22 - here so from the opening form tag to the
05:24 - closing form tag I will copy that and
05:27 - now within our profile template so
05:30 - profile HTML I have a comment here that
05:34 - says this is where I want to drop my
05:36 - form so I'm just going to drop the form
05:38 - right there and then fix the
05:41 - indentations there and save that and
05:44 - remember from that video that we are
05:45 - using these crispy forms applications to
05:49 - print these forms out so make sure that
05:51 - you're loading those at the top of the
05:53 - template so if I go to the top of the
05:54 - template we can see that I have this
05:56 - load crispy forms tags here now if you
05:59 - don't have that if it's not there for
06:01 - any reason then go ahead and add that in
06:03 - so those crispy forms will work okay so
06:05 - now let's go down here and look at our
06:07 - form okay so this is the form that we
06:10 - created in the register page now within
06:13 - our profile template we're actually
06:15 - going to have two forms with different
06:17 - fields but we're going to put the fields
06:19 - for both of these forms into a single
06:22 - HTML form so that the user sees it as
06:25 - one so let's see what this looks like so
06:28 - I'm going to change this form to contain
06:31 - both of our user form and our profile
06:34 - form fields so I'm just going to copy
06:36 - this section here and just put it in
06:39 - twice and
06:40 - this first one here will be our you
06:42 - underscore form for our user forum and
06:44 - the P underscore forum will be the
06:47 - fields for our profile form and now also
06:50 - change a couple of other things with
06:51 - this form to make it specific to our
06:53 - profile page so for example our legend
06:55 - here says join today because that was
06:58 - our register template but now we want
07:00 - this to say you know something like
07:02 - profile info and down here with the
07:04 - submit button it says sign up but now
07:07 - we're going to be updating our profile
07:08 - so let's change this to say update and
07:11 - save that okay and one really important
07:14 - thing that I forget to do sometimes that
07:16 - always throws me off is to add a special
07:18 - encoding type to our form now we have to
07:21 - do this in order for our form to pass
07:23 - our image data for our profile picture
07:26 - properly so at the top of our form
07:28 - within the opening form tag here we need
07:31 - to add an attribute of ink type so
07:34 - that's a and C type and we have to set
07:37 - that equal to multi-part forged slash
07:40 - form - data and save that so be sure not
07:44 - to forget that if you leave that out
07:46 - then it can look like your form is
07:49 - working but it all that won't actually
07:51 - be saving the image in the background
07:52 - and that can be something that is kind
07:54 - of hard to debug okay so with those
07:57 - changes made let's see what this looks
07:59 - like in our browser to make sure that
08:00 - this is working so far so I'm going to
08:03 - save all of those files and open up our
08:06 - terminal here and it looks like we have
08:09 - an issue with one of our forms now it's
08:12 - saying that we don't have a fields
08:14 - attribute for one of our model forms now
08:16 - I don't think that is true okay so I
08:19 - misspelled fields here this needs to be
08:22 - fields and not field so let's save that
08:24 - open up this and now let's restart our
08:28 - server I think it might have trouble
08:30 - restarting there so now it looks like it
08:32 - is starting up without any errors so
08:34 - that's good and now let's go to our
08:36 - browser and reload our profile page okay
08:40 - so this is looking pretty good now right
08:42 - off the bat I noticed one thing
08:43 - important and that's that the fields
08:46 - aren't filled in with the current user
08:48 - information so if you're updating your
08:50 - user name or email
08:51 - then you're going to want to have your
08:53 - information filled in already so that
08:55 - you can see what it currently is and
08:57 - also we're not doing anything with this
09:00 - form information when it's submitted
09:02 - just yet if we remember when we submit
09:04 - forms it's going to do a post request
09:07 - back to that same route with the data
09:09 - from the form so let's address some of
09:12 - this in our views so if we go back to
09:15 - our user app views file within our
09:18 - profile view so first of all let's
09:21 - populate these regular forms with the
09:24 - current information of the logged in
09:25 - user and this is really easy to do so
09:28 - remember these are model forms that are
09:31 - expecting to be working on a specific
09:33 - model object so we can populate the
09:36 - fields of the form just by passing in an
09:39 - instance of the object that it expects
09:41 - so for the user update form that will be
09:44 - an instance of a user and the profile
09:48 - update form that'll be an instance of a
09:50 - profile so to do this we can just say
09:53 - when we instantiate these forms I can
09:55 - say instance is equal to and for the
09:58 - user update form that's going to be
09:59 - request dot user so that'll be the
10:01 - current logged in user and for the
10:04 - profile update form I can say instance
10:06 - is equal to request dot user dot profile
10:10 - to get that user's profile so making
10:12 - those small changes there will now
10:14 - populate those forms with the current
10:16 - users information so the user form user
10:19 - update form will have the username and
10:21 - email filled in and the profile form
10:24 - will have the current image filled in ok
10:27 - so just like up here with our register
10:30 - route we're also going to want to put in
10:32 - a check to see whether this is a post
10:34 - route or not and if it is then we'll
10:36 - want to see if our forms are valid and
10:39 - if the forms are valid then we'll save
10:42 - that information so let me copy this
10:44 - conditional up here and paste this into
10:46 - our profile view so we'll say if the
10:49 - requests stop method is equal to a post
10:52 - then we'll go ahead and create some
10:55 - forms and if it is not then let's also
10:59 - grab another thing of forms here for now
11:03 - ok so within our post conditional
11:06 - is what will be run when we submit our
11:08 - form and possibly pass in new data so we
11:12 - want to pass in the post data into our
11:15 - forms so we wanted to keep the instances
11:18 - set like they are now because it has to
11:20 - know what user and profile that we want
11:22 - to update so let's leave those there but
11:25 - let's also pass in the post data so
11:28 - right here before the instance is set
11:30 - will say request dot post to pass in the
11:33 - post data and still leave the instances
11:35 - set so again request dot post and comma
11:39 - and keep the instance set and finally
11:42 - with the profile form we're also going
11:44 - to be getting some additional data and
11:46 - this is going to be filed data coming in
11:48 - with the request and that will be
11:50 - whatever image the user tries to upload
11:53 - so right after the request dot post data
11:56 - will also add request excuse me I
11:59 - spelled that wrong request dot files and
12:03 - then put in a comma and keep the
12:06 - instance there and if any of this ever
12:07 - spreads out too far then we can always
12:10 - spread these up onto different lines so
12:12 - let me do that and save that okay so now
12:17 - that we have both of our forms populated
12:19 - with the data that's going to be
12:20 - submitted then we can check if they're
12:23 - both valid now if they're not both valid
12:25 - then we're not going to save any of the
12:27 - data and again we're basically doing
12:30 - something very similar to what we did in
12:32 - our user registration form but now we
12:34 - just have two forms but the process is
12:36 - almost identical so we can see up here
12:38 - we said if form is valid but down here
12:42 - we are going to say and we're still
12:45 - within at this if request equals post
12:47 - conditional so this time we're going to
12:50 - say if you form dot is valid and P form
12:56 - dot is valid yes so if they're both
13:00 - valid then we're going to save the data
13:02 - but if one of them isn't then we're not
13:04 - going to say anything so now within this
13:06 - conditional we can simply say you form
13:10 - dot save and P form dot save so that'll
13:16 - save the user update form and the
13:18 - profile update form okay and that should
13:20 - be every
13:20 - that we need so once our forum
13:23 - information is updated then let's give
13:25 - some feedback to our user letting them
13:27 - know that they've updated their profile
13:28 - and then we'll also read redirect them
13:31 - back to the profile page so again this
13:33 - is very similar to our register route so
13:36 - I'm going to copy from here because we
13:37 - already have a success message and a
13:39 - redirect up here so I'm going to copy
13:41 - those and within this is valid
13:44 - conditional I'll paste those in and for
13:47 - the success message I will just say your
13:51 - account has been updated and then we
13:57 - want to redirect them back to the
14:00 - profile page and save that and you want
14:04 - to do a redirect here instead of letting
14:06 - it fall down here to our render template
14:10 - function call and the reason is because
14:11 - of something called the post get
14:13 - redirect pattern now you might not know
14:16 - what that is but most of you have
14:17 - probably seen it before so if you've
14:19 - ever reloaded your browser after
14:20 - submitting a form and then a weird
14:22 - message comes up that says are you sure
14:24 - that you want to reload because the data
14:26 - will be resubmitted or something like
14:28 - that
14:28 - that is because your browser is
14:30 - basically telling you that you're about
14:31 - to run another post request when you
14:34 - reload your page so us redirecting here
14:37 - causes the browser to send a get request
14:40 - and then we don't get that weird message
14:43 - if we try to reload okay so with all of
14:45 - these coding changes saved now let's try
14:48 - this out in our browser and see if we
14:49 - get the functionality that we're hoping
14:51 - for so let's see if our dev server is
14:54 - still running and it says it is so let's
14:56 - reload our profile page and we can see
14:59 - that it filled in our current username
15:00 - and email so that's good and our current
15:03 - profile picture so now let's change some
15:05 - information around so I'll say Cory ms2
15:07 - khorium Schafer - at gmail.com oops let
15:11 - me put that in there and also I will
15:14 - update my profile picture so on I'll
15:18 - grab this picture here and update okay
15:21 - so we can see that it looks like that
15:22 - worked so it fills in our new username
15:26 - and email here at the top where it's
15:28 - printing those out and also it looks
15:30 - like it changed our profile picture now
15:32 - you'll probably want to go into the
15:34 - in section and make sure all of this
15:36 - looks good to you there also I remember
15:38 - one time I forgot to properly set the
15:40 - instance for one of these forms and
15:42 - instead of actually updating existing
15:44 - objects it was creating a lot of new
15:47 - objects in the background so just to
15:48 - make 100% sure let's go ahead and open
15:50 - the admin site as well and make sure
15:52 - that there's no new users or anything
15:55 - like that so let me make this larger so
15:57 - you all can see if I go into users then
16:00 - we don't have a core EMS user we only
16:02 - have this query ms2 and the email
16:05 - address is updated and this is still the
16:08 - admin user so it did update that user so
16:11 - that is good now let me also check the
16:14 - profiles here so if I go into profiles
16:16 - we no longer have a core ems profile but
16:19 - we have a core EMS to profile here so if
16:22 - I click on that then we can see that
16:24 - let's see if this new image is the one
16:28 - that we uploaded and we can see that it
16:30 - is okay now there is one more thing that
16:33 - I want to do here before we end this
16:34 - video so I purposely wanted to update my
16:37 - profile picture to this large photo to
16:39 - show you something else that we can do
16:41 - so I want to show you how you can
16:43 - automatically resize images when you
16:45 - upload them so right now we're just
16:47 - accepting any image that the user
16:49 - uploads but the largest image on our
16:51 - site right now and the CSS is set to
16:54 - like 125 pixels or something like that
16:56 - so there's no use in having a you know
16:59 - huge 4000 pixel image that just gets
17:02 - scaled down to a hundred and 25 pixels
17:05 - it takes up a lot of space on the file
17:07 - system and it also caused your website
17:10 - to run slow because it has to send that
17:12 - large image to the browser every time so
17:15 - for example we can see that this image
17:16 - is really large and it's actually larger
17:19 - than what I think it's showing up here
17:20 - in the browser because it's scaled down
17:22 - a little bit just so it can fit so to
17:25 - resize images when we upload them we're
17:27 - going to use a package called pillow and
17:29 - if you remember we actually already
17:31 - installed pillow when we first use the
17:33 - image field in our profile model because
17:36 - it needs that for the back end so in
17:38 - order to resize this image we're going
17:40 - to override the save method of our
17:43 - profile model so let's open up that
17:46 - model so within
17:47 - our project let's go to our users app
17:50 - and open up our models and here we have
17:54 - our profile model and within our model
17:56 - we're going to override the save method
17:58 - and we can do this simply by saying def
18:03 - save and pass in self as the first
18:07 - parameter there so this save method is
18:10 - the method that gets run after our model
18:12 - is saved it's a method that already
18:14 - exists in our parent class but we're
18:16 - creating our own so that we can add some
18:19 - functionality so first things first I'm
18:21 - actually going to run the save method of
18:24 - our parent class and we can do this with
18:26 - super so if we want to run the save
18:28 - method of our parent class we can say
18:30 - super and then dot save so that parent
18:34 - classes save method would have been run
18:37 - when we saved an instance of this
18:39 - profile anyways so if we uploaded a
18:42 - large image then that should have saved
18:44 - it but now we're going to grab the image
18:47 - that it's saved and resize it so to do
18:49 - this we're going to need to import that
18:52 - pillow library so within our imports we
18:55 - will come up here and say from PIL and
18:59 - we specifically want to import image
19:02 - from that library so now come back down
19:04 - here in our save method and now let's
19:07 - open the image for the instance that
19:09 - we're saving now if any of this class
19:12 - stuff is confusing to you then I do have
19:14 - a series on working with classes in
19:16 - Python that you might be interested in
19:18 - and in that series I go over classes and
19:20 - instances and what the self variable is
19:22 - and everything like that so definitely
19:24 - check that out if you want to know more
19:26 - details about the things that we're just
19:28 - briefly discussing here ok so to open
19:31 - the image for this profile instance then
19:34 - we can simply say I'm going to create a
19:36 - variable here called IMG set this equal
19:39 - to image which we imported from the
19:41 - pillow library image dot open and we
19:44 - want to open the self dot image dot path
19:49 - so this will open the image of the
19:52 - current instance and now we're going to
19:54 - resize that so we want to specify what
19:56 - size that we want our image to be so
19:59 - like I said the max size that we display
20:01 - on the front end of our website is a
20:03 - hundred and twenty-five pixels or around
20:05 - there so let's resize it somewhere
20:07 - closer to that so I think I'll choose
20:09 - around 300 pixels since that's still a
20:12 - small image but it still gives us some
20:14 - flexibility to display larger images in
20:16 - the future if we'd like
20:18 - and if images are larger than this then
20:21 - they'll be sized down so first let's
20:23 - check if this current image is more than
20:27 - 300 pixels so we can say if IMG height
20:31 - height is greater than 300 or if the IMG
20:37 - width is greater than 300 so if either
20:40 - the height or the width is greater than
20:42 - 300 then we want to resize this so now
20:46 - I'll say output size is equal to and
20:48 - this is going to be a tuple of our max
20:52 - sizes here and now to resize this and
20:55 - save it I can say IMG dot thumbnail and
20:59 - then pass in the output size so that
21:04 - will resize that image and now to save
21:07 - it we can just save it back to the same
21:09 - path in order to overwrite that large
21:12 - image so I'll say image dot or self dot
21:15 - image dot path okay so with that in
21:18 - place then that resized 300 pixel image
21:21 - should be saved to the file path and
21:23 - overwrite the larger image now I should
21:25 - say that I found a lot of different ways
21:27 - to resize images like this when I looked
21:29 - online some of them were a lot more
21:32 - complicated than what I wanted to show
21:33 - you here but there are probably some
21:36 - trade-offs also but really I just wanted
21:38 - to show you an example of what it's like
21:40 - to override the save method of a model
21:43 - and I think that this is a good example
21:44 - but if you are working on a larger
21:46 - project where efficiency is really
21:48 - important then there are some additional
21:49 - ways in which you can do something like
21:51 - this also and there are also some
21:53 - third-party packages out there that you
21:56 - can use that will do resizes and stuff
21:58 - like that for you so if anyone is
22:00 - interested in doing this differently
22:01 - then just leave a comment below and I'll
22:03 - make some suggestions but what we have
22:05 - here should be good for our application
22:07 - that we have so far
22:08 - so now let's test this out so let's open
22:12 - back up our browser so first
22:14 - test our dev server and that's still
22:16 - running now let's open back up our
22:18 - browser and re-upload a large image so I
22:22 - will resize this go back to our profile
22:24 - page and now let's reach up load this
22:27 - large image so I'll upload this and now
22:32 - let's see if this is a large image so
22:35 - I'll open image and new tab and now we
22:38 - can see that the large image that we had
22:40 - before which was this one over here it
22:42 - has now been resized to this 300 pixel
22:45 - image here which will save a ton of
22:47 - space on our file system and also speed
22:49 - up our website now there's a lot more
22:52 - that you can do with this you could
22:53 - write some additional code that deletes
22:55 - old images when a user successfully
22:57 - changes their profile picture but I'm
23:00 - just going to leave those there for now
23:01 - since they're not taking up that much
23:03 - space so now let's close down these two
23:06 - tabs here and also while I'm at it I'm
23:09 - also going to change my username and
23:11 - email back to what they were before so
23:14 - update that and now we have the original
23:16 - username and email okay so there is one
23:19 - more thing that I'd like to do in this
23:20 - video and it's going to be really quick
23:22 - now that we have the ability to add a
23:24 - custom user images to our site now let's
23:27 - spice up the home page a bit and display
23:30 - the image of the author beside each post
23:33 - so this information will be in our blogs
23:37 - home dot HTML template because that is
23:39 - where we're listing all of the blog post
23:42 - so let's open up that template so that
23:45 - is within our blog app and templates and
23:49 - then home dot HTML okay and to display
23:52 - the users image I'm going to put in an
23:54 - image tag here with some CSS classes
23:57 - that we added earlier in the series so
23:59 - right below the article tag so right
24:02 - below the article tag and right above
24:03 - this div with the class of media body
24:05 - I'm going to put in an image and the
24:08 - source of the image we can set to an
24:11 - attribute here and this is going to be
24:14 - the post dot author dot profile dot
24:19 - image dot URL so I know that's a long
24:23 - one there but the current post the
24:25 - author of the current post the profile
24:28 - that author the image of that profile
24:30 - and the URL of that image so a lot to
24:32 - chain on there so that'll be the source
24:35 - of the image but I also want to add a
24:36 - class here so we'll put in a class and
24:39 - we will have this be a rounded circle
24:43 - which is a bootstrap class and then one
24:47 - of my own custom classes here I'm going
24:49 - to put this as article - image and save
24:52 - this so now with that in place let's
24:55 - save everything and open this up in our
24:58 - browser and see if these changes took
25:00 - effect so open up our home page and
25:02 - reload this and now we can see that the
25:04 - author's image is popping up beside
25:07 - their post and I think that's a nice way
25:08 - to kind of spice up the homepage there
25:10 - okay so I think that is going to do it
25:12 - for this video we now have a way for a
25:14 - user to update their profile information
25:16 - and they can also update their profile
25:19 - pictures now in the next video we'll
25:21 - create a page where different users can
25:23 - create posts that will then get added to
25:25 - the home page here but we'll also add a
25:27 - way for them to update and delete the
25:29 - post as well but if anyone has any
25:31 - questions about what we covered in this
25:33 - video then feel free to ask in the
25:34 - comment section below and I'll do my
25:35 - best to answer those and if you enjoy
25:37 - these tutorials and would like to
25:38 - support them then there are some ways
25:39 - you can do that the easiest ways is
25:41 - simply like the video and give it a
25:42 - thumbs up and also it's a huge help to
25:44 - share these videos with anyone who you
25:45 - think would find them useful and if you
25:47 - have the means you can contribute your
25:48 - patreon and there's a link to that page
25:49 - in the description section below be sure
25:51 - to subscribe for future videos and thank
25:53 - you all for watching
25:55 - you
26:04 - you