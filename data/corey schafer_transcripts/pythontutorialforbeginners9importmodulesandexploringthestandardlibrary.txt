00:00 - hey there how's it going everybody in
00:01 - this video we'll be learning how to
00:02 - import modules we'll start by importing
00:05 - modules that we've written and then
00:06 - we'll explore a bit of the standard
00:08 - library and how we can import those
00:09 - modules to solve a lot of common
00:11 - problems so I have a module here called
00:13 - my module. py now within this module we
00:17 - have a print statement and we'll talk
00:19 - about that in just a minute we also have
00:21 - this test variable set to test string
00:24 - and then we have this function called
00:25 - find index and this find index function
00:28 - takes in two arguments takes in a list
00:31 - to search and a Target that we're
00:33 - looking for and we can see that we have
00:35 - some documentation here that just says
00:37 - that this finds the index of a value in
00:39 - a sequence um and then it returns that
00:41 - index but if it doesn't find that value
00:44 - then it just returns negative one so
00:46 - let's say that we wrote this function
00:47 - and that we want to use this in other
00:49 - modules or scripts so what we're going
00:51 - to want to do is import this so I have
00:53 - another module over here uh which is
00:56 - just our intro. piy file that we've been
00:58 - working with now within this file we
00:59 - have this courses variable that is just
01:02 - a list of course names so let's say that
01:04 - we want to use that find index function
01:07 - from my module now I actually created
01:09 - this my module in the same directory as
01:12 - my intro. so that means that we're going
01:14 - to be able to directly import that now
01:17 - when we import a file it actually runs
01:19 - all of the code from the module that we
01:21 - import so that's how it creates all the
01:23 - functions and variables but if we have
01:25 - any other code like print statements or
01:27 - anything like that then that will be run
01:29 - as as well so that's why I have the
01:31 - print statement here in my module so
01:34 - that we can see when that happens so to
01:36 - import this module we can just come to
01:38 - the top of the file here and say import
01:40 - my module and again we can import that
01:43 - directly because it's in the same
01:45 - directory as our intro. py file and now
01:48 - if we run this with this import then we
01:50 - can see that it imported successfully
01:52 - because it printed out that print
01:54 - statement within that module okay so
01:56 - let's say that we want to use that find
01:58 - index function now when when importing
02:00 - modules like this we just can't call our
02:02 - find index function we instead have to
02:05 - type the module name first and then what
02:08 - we want to grab from that module so if
02:10 - we wanted to use that then we could say
02:12 - let's say index is equal to my
02:16 - module. find index and now we'll pass in
02:20 - the list that we want to search which is
02:22 - courses and now the Target that we're
02:25 - looking for so we'll go ahead and say
02:27 - that we're looking for Math and now
02:29 - let's print out that index and run that
02:33 - so now we can see that that works it
02:35 - returned one and one is the index of the
02:38 - math value okay so if we're using this
02:41 - find index function multiple times
02:43 - throughout our script then it might get
02:44 - a little old and take up a lot of room
02:47 - to keep typing my module. find index
02:50 - everywhere we can actually specify a
02:52 - name that we want to use for our
02:54 - imported module and usually this is used
02:57 - to make the module name shorter so for
02:59 - example when we're importing my module
03:02 - here at the top we could instead say
03:04 - import my module as mm or any other name
03:08 - that we come up with and now when using
03:10 - this import throughout the script
03:12 - instead of typing out my module
03:14 - everywhere we can instead just use mm so
03:18 - if I save that and run it then we'll see
03:20 - that that still works now you'll see
03:22 - this a lot with modules like numpy or
03:25 - pandas so you might see someone who does
03:27 - an import and they'll do import numpy as
03:30 - NP or something like that now you might
03:32 - be wondering if there's a way that we
03:34 - can import the function itself and there
03:36 - is a way to do this so instead we could
03:39 - say from my module import and then what
03:44 - we want to import from that module so we
03:46 - want to import find index so now when we
03:48 - use this throughout the code now we can
03:50 - just use that find index function
03:52 - anywhere and that really cuts down on
03:55 - the typing so now we can save that and
03:57 - run it and see that it still works now
03:59 - one thing to note about that approach is
04:01 - that it only gives us access to that
04:03 - find index function and not everything
04:06 - else in the module so for example you'll
04:08 - remember that we had this test variable
04:11 - equal to this test string so when we do
04:14 - the import this way now we don't have
04:16 - access to that test variable since we're
04:18 - only now importing the find index
04:21 - function now if we wanted to import that
04:23 - variable then we would have to include
04:25 - it by putting in a comma and then
04:27 - specifying what we want so we want to
04:29 - say from my module import find index
04:33 - comma and test so now down below here we
04:37 - can print out that test variable and if
04:39 - we run that then we can see that we do
04:41 - have access to that test variable now
04:43 - now when doing the import this way we
04:45 - still have access to that as keyword so
04:48 - if we wanted to make this even shorter
04:50 - hand then we can say import find index
04:53 - as fi and now throughout our code we can
04:57 - replace that with Fi and run that you
05:00 - can see that it still works now at this
05:02 - point that's not really readable anymore
05:04 - so don't rename something like that
05:06 - unless it's still readable and Mak sense
05:08 - to others who are reading your code so
05:09 - now let's go ahead and just undo that
05:12 - change now using this method of
05:14 - importing we'd have to add commas and
05:16 - specify each value that we want to
05:18 - import now there is a way to just import
05:21 - everything and I'll show you how to do
05:22 - this but I have to be honest I never use
05:25 - this and it's pretty frowned upon um and
05:27 - we'll see why that is but if we wanted
05:29 - to just import everything then we could
05:31 - say from my module import Star so if we
05:35 - run this then we can see that everything
05:37 - still works we still have access to this
05:39 - find index function and this test
05:42 - variable but the reason that this is
05:43 - frowned upon is because now we can't
05:45 - tell what came from that imported module
05:48 - and what didn't so if we're having
05:50 - problems with this find index function
05:52 - then we might try to track down where
05:54 - that function came from or where it was
05:56 - defined and with that asteris it's just
05:59 - not obvious that it came from that
06:01 - module that was imported so instead
06:04 - we'll go back to importing both of those
06:06 - directly so basically importing
06:08 - everything with that asteris just makes
06:10 - it harder to track down problems so it's
06:11 - better to do it this way okay so when we
06:14 - import a module how does it know where
06:16 - to find this module so we didn't pass in
06:18 - a file path or tell python where to find
06:20 - this module it just found it so the way
06:23 - that this works is that when we import a
06:25 - module it checks multiple locations and
06:27 - the locations that it checks is within a
06:30 - list called cy. paath and we can
06:33 - actually see this list if we import the
06:35 - CIS module so I'll import CIS and now
06:39 - down here we'll comment out these two
06:41 - print statements and now let's print out
06:44 - that sis. paath and run that so this is
06:47 - the list of directories on my machine
06:49 - where python looks for modules when we
06:52 - run an import and it looks in this order
06:55 - now this first value here is just the
06:58 - directory where I'm currently running
07:00 - the script from and the my module python
07:03 - file that we were importing is within
07:05 - that directory also so that's how it
07:07 - found it okay so what directories are
07:09 - added to this cy. paath list so
07:12 - directories get added in this order
07:14 - first the directory containing the
07:16 - script that we're running so that is why
07:19 - this directory where we're running the
07:20 - script is the first value in cy. paath
07:23 - so you can always import modules from
07:25 - the same directory and next it adds
07:27 - directories listed in the python p path
07:29 - environment variable and we'll talk more
07:31 - about the python path environment
07:33 - variable in just a minute and then after
07:36 - the python path it then adds the
07:38 - standard Library directories and that's
07:41 - how we can import those modules from the
07:43 - standard library and lastly it adds the
07:45 - site packages direct directory for
07:48 - third-party packages and we'll look at
07:50 - all of these so first let's see what it
07:52 - looks like when the module that we want
07:54 - to import isn't in the same directory as
07:56 - the script that we're trying to import
07:58 - it from so I'm going to move the module
08:01 - that we've been importing from the same
08:02 - directory into a directory on our
08:05 - desktop so I've got finder pulled up
08:07 - here and I'm just going to drag this my
08:10 - module over here into this my modules
08:13 - directory that is on my desktop so now
08:16 - that module that we're trying to import
08:18 - is in a completely different location on
08:20 - our machine so if we go back to here to
08:22 - our script and now try to run this then
08:25 - we can see that we get this eror module
08:27 - not found no module named my module now
08:30 - there are a couple of approaches that we
08:32 - can take here first is that we can
08:34 - actually manually add that directory to
08:36 - our cy. paath list so this cy. path is a
08:40 - list just like any other that we've been
08:42 - looking at and we can treat it like one
08:44 - so before we try to import my module we
08:47 - could add that directory to cy. paath so
08:51 - I'm going to import this here at the top
08:53 - before we try to import that module and
08:55 - then I'll say sis. paath do append and
09:00 - the location on my machine this is
09:02 - probably going to be different on yours
09:04 - but the location on mine is you uh users
09:09 - dy- desktop dmy modules and I believe I
09:14 - need a dash here at the beginning as
09:15 - well so if I save that and run it we can
09:18 - see that when we appended that directory
09:20 - to our cy. path that we were now able to
09:23 - import that module and run our code but
09:25 - this isn't the best looking approach
09:28 - because we're pending this directory
09:30 - before our other Imports and also if we
09:32 - were to import our module and we had
09:34 - this manually hardcoded in multiple
09:36 - locations then we'd have to change all
09:38 - of those so instead we can make this
09:41 - change in the next place CIS path looks
09:44 - and if we remember that is the python
09:46 - path environment variable now changing
09:49 - the environment variables is different
09:50 - on Mac and windows so we'll show how to
09:52 - do this on both really quick so first
09:55 - we'll see how to do this on a Mac and to
09:57 - do this I'm going to pull up my terminal
09:59 - and we can set environment variables by
10:01 - adding them to the bashore profile file
10:05 - in our home directory and you can edit
10:07 - this file with any text editor but I'm
10:09 - going to use the one built into the
10:10 - terminal here called Nano since Nano is
10:13 - easy for anyone to use so we're going to
10:15 - say Nano and then a Tilda Dash just
10:18 - makes sure that we're working within our
10:19 - home directory then we'll say bashore
10:23 - profile now I might have more stuff in
10:25 - this file than you do these are just
10:27 - personal preferences and customizations
10:29 - but I'm going to scroll down here to the
10:31 - end of the file and set my python path
10:33 - but you can set this anywhere in this
10:35 - file that you'd like so we're going to
10:37 - set this by saying export python path
10:40 - all uppercase and then equals and now we
10:44 - want to set that location so I'm just
10:46 - going to come over here and grab that
10:49 - location and paste that in those quotes
10:52 - and we want it to look just like that no
10:54 - space in between the equals and the path
10:57 - so to save that we can just hit contr X
11:00 - and then y to save and then enter to
11:03 - keep the same file name and now we can
11:05 - either restart our terminal or run a
11:08 - source command on that file but I'll
11:10 - just restart the terminal here and pull
11:12 - this up and now if we run python then
11:16 - let's see if we can import that module
11:18 - so import my module and we can see that
11:21 - that worked and the reason that that
11:22 - worked is because if we import CIS and
11:26 - look at our cy. paath then we can see
11:29 - that after our current directory that we
11:32 - have the directory that was added there
11:33 - and the reason that it's added is
11:35 - because we added it to our python path
11:37 - environment variable so now let's take a
11:39 - look at how to set this environment
11:40 - variable on
11:42 - Windows now to set this environment
11:44 - variable on Windows we can click on our
11:46 - start button here and then rightclick on
11:48 - computer and go to properties and from
11:51 - properties we want to go to Advanced
11:53 - system settings and from here at the
11:56 - very bottom we can click on environment
11:58 - variables and and now we can create a
12:00 - new environment variable so we'll click
12:03 - new and we'll name this python path all
12:06 - uppercase there and then for the
12:09 - location that's going to be C we're
12:12 - going to go to the desktop again so
12:13 - again this is uh specific to my desktop
12:17 - but it may be a little bit different on
12:19 - yours so Corey Ms desktop and then the
12:23 - name of that directory is my- modules
12:27 - and again this python path is going to
12:28 - be unique unque to your own machine so
12:31 - let's hit okay there and okay to save
12:33 - those and exit out of that and now if we
12:36 - open up our Command Prompt by going to
12:38 - start run CMD and then typing in Python
12:43 - and now we should be able to import that
12:44 - module just by saying import my module
12:47 - and if we run that then we can see that
12:49 - it imported that module successfully now
12:51 - the reason that worked is because if we
12:54 - import CIS and look at our cy. path then
12:58 - after our current directory you can see
13:00 - that our directory that we added to our
13:03 - python path is the second one that it
13:05 - looks at here so that is how we add that
13:07 - environment variable on windows so now
13:09 - I'll switch back to my native
13:11 - OS now I do want to point out that if
13:14 - you're using an editor like Sublime Tex
13:16 - or eclipse or pycharm then these may
13:19 - need to have their environment variables
13:21 - set in a different way and that's
13:23 - different for every program so instead
13:25 - of going through each individual one and
13:27 - showing how uh you can likely find out
13:29 - how to do that just by searching for
13:31 - your editor plus python path and there
13:33 - should be plenty of resources showing
13:35 - you how to do that okay so going back to
13:37 - this cy. path now after the directories
13:40 - in the python path environment variable
13:42 - that we just looked at uh after that cy.
13:45 - paath looks at the standard Library
13:48 - directories now this is what allows us
13:50 - to import modules directly from the
13:52 - standard Library so when something is
13:54 - part of the standard Library it means
13:56 - that we're able to use it without
13:57 - installing anything separate so the
13:59 - standard library is incredibly useful
14:01 - because if you're performing a common
14:03 - task then most likely someone has
14:05 - already written the functionality and if
14:07 - we use it from the standard library then
14:09 - we can be sure that it's been written by
14:11 - some of the best programmers in the
14:13 - world and has been optimized to be as
14:15 - performant as possible now that's not to
14:17 - say that you shouldn't try to write your
14:18 - own versions of some of these things uh
14:20 - just to get some practice but as far as
14:22 - using any of that functionality in
14:24 - production it's probably a good idea to
14:26 - use the tried and true standard Library
14:29 - so for example let's say that we wanted
14:31 - to grab a random value from a list of
14:34 - values so you could probably write
14:36 - something to do this on your own but
14:37 - that functionality is already available
14:39 - to us when we use the random module from
14:42 - the standard Library so let's go ahead
14:44 - and take a look at this so I'll get rid
14:45 - of everything here just to clean up
14:48 - except for our courses list now this
14:50 - random module is just part of the
14:52 - standard library and we can just say
14:54 - import random and if we wanted to grab a
14:56 - random value from our courses list then
14:59 - we could just say random course is equal
15:02 - to random. Choice and then pass in our
15:06 - course's list so now if we print out
15:09 - that random course and run that then we
15:13 - can see it gave us a random value and if
15:14 - we run this multiple times then we can
15:17 - see that it gives us a random value just
15:19 - about every time we run through now I'm
15:21 - not going to go through all of the
15:22 - functionality in the standard library
15:24 - but I will create a future video to go
15:26 - over some of these modules in depth but
15:28 - right now I just want to give you an
15:29 - idea of what's available to us so here
15:31 - are a few more useful standard Library
15:35 - modules so if we need to perform some
15:37 - common mathematical operations then we
15:39 - can import the math module and now we
15:42 - can do some mathematic calculations so
15:44 - if we needed to convert 90 Dees into
15:46 - radians then we could say RADS is equal
15:49 - to math. radians and pass in 90 and then
15:54 - if we print RADS and run that then we
15:58 - can see that we get that conversion and
15:59 - if we wanted to get the sign of that
16:02 - value then we could pass those radians
16:04 - into the sign method so I can say math.
16:07 - sign pass in those radians and if I run
16:11 - that then we can see that one is the
16:13 - sign of 90° okay and another useful
16:16 - module from the standard library is the
16:19 - datetime module now this allows us to
16:21 - work with dates and times and while
16:23 - we're at it let's also go ahead and
16:25 - import the calendar module now these
16:28 - have some similar ilities but they're
16:29 - also very different so for example if I
16:32 - wanted today's date then we could just
16:34 - say today is equal to date time. dat.
16:38 - today and if we print this
16:42 - out and run that then we can see that
16:45 - that gives us today's date now with the
16:48 - calendar module we can ask for example
16:50 - is 2017 a leap year so I could print out
16:55 - and say calendar. is leap and pass in
16:59 - 2017 if I run that we can see that
17:02 - that's false but if I instead change
17:04 - that to 2020 and run that then you can
17:06 - see that that is true and the last
17:08 - standard Library module that we'll look
17:10 - at for now is the OS module so I will
17:14 - import OS now this is going to give us
17:17 - access to the underlying operating
17:19 - system so for example if I wanted to see
17:21 - what directory we're currently in with
17:23 - this script then I could print out
17:26 - os. CWD which is current working
17:29 - directory so if we run that then we can
17:32 - see that it prints out the current
17:34 - working directory where this script is
17:36 - located now this o module has a ton of
17:39 - other functionality it gives us the
17:40 - ability to scan the file system and
17:43 - create files delete files and all of
17:45 - that so you can see how these standard
17:46 - Library modules provide a ton of
17:48 - functionality that might be tricky or
17:50 - take forever for us to write ourselves
17:53 - so python comes with a ton of stuff
17:55 - available to us and makes it super easy
17:57 - to get them imported and and running so
17:59 - another great thing about python is that
18:02 - these modules are just python files
18:04 - themselves and we can view the location
18:06 - of a module just by printing out its
18:09 - Dunder file method or its Dunder file
18:11 - attribute I'm sorry so if we print out
18:14 - os. Dunder file and Dunder just means
18:17 - two underscores and don't worry why
18:19 - those are double underscores that'll be
18:21 - a topic for a future video so if we run
18:24 - this then we can see that it prints out
18:26 - the location of this file on our file
18:29 - system and if we open up that python
18:31 - directory where that file lives then we
18:34 - could see the entire standard Library so
18:37 - I actually have this open right here so
18:39 - let me open this up real quick so I
18:41 - actually have open that python 36
18:43 - directory where the entire standard
18:45 - Library lives now I know that this may
18:48 - be a little small over here for you to
18:50 - see on my screen um but let's go ahead
18:53 - and look through a couple of these files
18:55 - so these are all in alphabetical order
18:56 - so one of the first files in the
18:58 - standard library is actually this
19:00 - anti-gravity module now this is kind of
19:03 - a joke in the python community so there
19:05 - this is a module that you can import
19:07 - called anti-gravity that will open up a
19:10 - web comic on your machine and even
19:12 - though this is part of the standard
19:13 - Library we can just open up this module
19:15 - here and see exactly how this is done so
19:18 - we can see that basically it just
19:20 - Imports this web browser module and
19:22 - opens up the web browser to this page
19:26 - here and I know that people are probably
19:27 - going to be curious what this comic is
19:29 - now so let's go ahead and import that so
19:32 - back in
19:33 - intro. I'll just delete everything and
19:35 - do import anti-gravity and run this
19:39 - file then we can see it just opens up
19:42 - our web browser to this comic and I'll
19:44 - leave this open while we close out here
19:47 - so if you get a chance then don't be
19:49 - afraid to go into the standard library
19:51 - and look around at how different things
19:52 - are done um it's a great way to learn
19:55 - now I'm not going to lie there's
19:56 - definitely some complicated code in
19:58 - there but you'll be surprised how much
20:00 - you can understand if you just poke
20:01 - around a bit okay so I think that's
20:03 - going to do it for this video so where
20:05 - did we go from here so so far in this
20:07 - series we've covered a lot of the
20:09 - fundamentals in working with python so
20:11 - we've learned about different data types
20:13 - conditionals Loops functions and
20:16 - importing modules and a bit of the
20:17 - standard library now I think that just
20:19 - about anyone would agree that no matter
20:22 - what specialty you plan on going into
20:23 - for python whether it's back-end web
20:26 - development data science building
20:28 - desktop applications no matter what
20:30 - route you decide to take you're going to
20:32 - need the fundamentals that we've covered
20:34 - up until this point but now that you
20:36 - understand these fundamentals the next
20:37 - topics that you learn are up to you so
20:39 - you can jump into learning
20:41 - objectoriented programming in Python you
20:43 - can learn how to work with files and
20:44 - file data start learning about a web
20:47 - framework basically anything that you
20:49 - want so I'm going to keep adding
20:51 - additional videos onto this playlist
20:53 - that I believe will be a good
20:54 - progression as you continue to Learn
20:56 - Python but these videos won't be
20:58 - numbered anymore after this video and
21:00 - the reason for that is that I don't want
21:02 - to give the impression that you have to
21:04 - watch one before understanding the
21:06 - others so I don't want them to be
21:08 - numbered to make you feel like you have
21:10 - to understand virtual environments
21:12 - before learning how to work with file
21:13 - objects or something like that so you
21:15 - can just skip around depending on what
21:17 - it is that you're wanting to learn so I
21:19 - hope that that makes sense now if anyone
21:20 - has any questions about what we covered
21:22 - in this video then feel free to ask in
21:23 - the comment section below and I'll do my
21:25 - best to answer those if you enjoy these
21:27 - tutorials and would like to support them
21:28 - then there are several ways you can do
21:30 - that the easiest way is to Simply like
21:31 - the video and give it a thumbs up and
21:33 - also it's a huge help to share these
21:34 - videos with anyone who you think would
21:35 - find them useful and if you have the
21:37 - memes you can contribute through patreon
21:39 - and there's a link to that page in the
21:40 - description section below be sure to
21:42 - subscribe for future videos and thank
21:43 - you all for watching