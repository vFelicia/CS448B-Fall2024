00:00 - hey how's it going everybody in this
00:02 - video we'll be going over how to handle
00:03 - errors and exceptions in Python by
00:07 - learning how these try/except blocks
00:09 - work
00:09 - now these try/except blocks can be
00:11 - confusing to people who aren't familiar
00:12 - with them because they can actually have
00:14 - a lot of different sections like we have
00:16 - this try except else and finally so
00:19 - let's take a look at exactly what's
00:21 - going on here and how we can use these
00:23 - now a lot of the time we're just going
00:25 - to use these first to try and except so
00:28 - for now I'm going to go ahead and
00:29 - comment out this else and finally so
00:33 - first of all why would we even need a
00:34 - try and except block in the first place
00:36 - well let's run some code that throws an
00:39 - error and it might give us a better idea
00:42 - of why we need this so I'm going to try
00:44 - to open up a file here if we look in the
00:46 - current folder that I'm in we have this
00:48 - test underscore file.txt let's try to
00:51 - open that up and let's accidentally
00:54 - leave off the underscore so if I do test
00:57 - file dot txt without the underscore now
00:59 - if I run this you can see that we get
01:02 - this long trace back error here now this
01:05 - is useful for us as developers because
01:08 - it gives us a lot of useful information
01:09 - we have this line number here and file
01:12 - not found error and exactly what
01:14 - happened but if we get an error like
01:17 - this we wouldn't want something like
01:18 - this to be displayed to the people who
01:21 - are using our software so if we can
01:23 - anticipate sections of our code that
01:26 - might throw an error or an exception
01:28 - then we can use these try and accept
01:30 - blocks to handle them in the way that we
01:32 - want so what I'm going to do here is I'm
01:34 - going to move the code that through the
01:36 - air into this try section here and
01:40 - within this accept block I'm just going
01:43 - to print an error and an exclamation
01:47 - point actually let me make this a little
01:50 - bit more detailed I'm going to say sorry
01:52 - this file does not exist so now if I run
01:58 - this code
01:58 - you can see that we receive our custom
02:01 - error instead of the that longer more
02:05 - verbose error that Python gave us before
02:07 - so what exactly is going on here so
02:09 - what's going on is that within our try
02:12 - block we're going to
02:13 - try to run some code and this throws an
02:17 - exception right here so then if it
02:19 - throws an exception then we go to our
02:21 - accept and then it's going to print out
02:24 - this line here now this exception here
02:27 - is kind of vague now if you remember
02:30 - when we ran this code outside of the try
02:32 - accept block
02:33 - we got a file not found error and we
02:36 - actually want to be as specific as
02:38 - possible when we catch a catch our
02:39 - exceptions because the goal of the Tri
02:42 - accepts isn't to just get around all of
02:45 - the exceptions and errors that we could
02:47 - run into it's meant to catch the errors
02:50 - that we expect and handle them properly
02:51 - so this general exception here it's not
02:54 - only going to catch foul not found
02:57 - errors it's also going to catch a lot of
02:59 - other different problems that we could
03:01 - run into so for example here if I was to
03:04 - make this the correct file name and then
03:07 - a line underneath here let's just make a
03:11 - bad assignment so I'll say far equals
03:13 - bad bar and if I run this you can see
03:17 - that we get the exact same thing it hits
03:19 - this exception and then it says sorry
03:21 - this file does not exist let me fix this
03:24 - little typo here so what happened here
03:27 - is within our try block this code
03:29 - actually ran successfully and this is
03:32 - what threw the exception but that's not
03:34 - clear right now because this is too
03:35 - general so what I'm going to do is I'm
03:37 - going to change this to a catch a file
03:41 - file not found error so now if I save
03:45 - and run this now you can see that we get
03:48 - the regular Python trace back which is a
03:51 - good thing so what happened here is it
03:53 - came in and it opened up this file and
03:55 - that was the error that we were trying
03:56 - to catch and then this was an unexpected
03:58 - exception here and you can see here that
04:02 - it is a name error and we're only
04:05 - catching file not found errors so it
04:08 - didn't get caught and it didn't execute
04:10 - this code here and instead it just
04:12 - printed out the default Python trace
04:15 - back now if we do want to catch more
04:17 - general exceptions then we can actually
04:19 - add another except below this and so if
04:23 - I say except an exception and then
04:26 - within here
04:27 - I'm just going to print let's see I'll
04:30 - just print sorry something went wrong
04:35 - now if you do handle multiple exceptions
04:38 - like this be sure that you are putting
04:40 - the more specific exceptions at the top
04:43 - and the more general ones the further
04:45 - that you go down because if I was to put
04:47 - this general exception here at the top
04:50 - and it's always going to hit that one
04:52 - first and I'll never get to the file not
04:54 - found error now currently we're printing
04:56 - out some custom messages here but if I
04:58 - wanted to just print out the exception
05:01 - that it threw then I can just do as and
05:04 - you can name this whatever I'm just
05:05 - going to say as E and I can print out E
05:07 - and I can also do this for the file not
05:09 - found error - so I'll do as E and
05:11 - instead of this custom message I will
05:14 - print out E and if I run that you can
05:17 - see that it comes down to this exception
05:20 - here and instead of printing out a
05:22 - custom message it prints out the
05:24 - exception that we hit which is the bad
05:27 - far is not defined so if I just get rid
05:30 - of this line of code and then run that
05:34 - then it runs successfully if I give this
05:36 - a bad filename and run that you can see
05:38 - that it says error number two no such
05:40 - file a directory and then the file name
05:43 - okay so that's a quick look at the try
05:45 - except blocks now what's the deal with
05:47 - the else
05:48 - and finally blocks down here so first
05:51 - let's start out with the else and we'll
05:53 - uncomment this now what the else does is
05:55 - it runs code that needs to be executed
05:58 - if the try Clause doesn't raise an
06:01 - exception so so for example here let's
06:04 - say that this didn't run an exception
06:07 - here so I'm going to make this the
06:08 - correct file name and now I'm just going
06:11 - to print out the contents here and then
06:15 - I'm also going to close the file so I'll
06:17 - do an F dot close so if I run this our
06:21 - try isn't going to throw an exception
06:24 - because we have the correct file name
06:25 - here and then since it doesn't throw an
06:28 - exception it's going to execute the code
06:30 - that's within the else clause so it
06:32 - prints out the contents of the file and
06:34 - then it closes the file if I open up
06:36 - this file here you can see that it just
06:37 - says test file contents and that's
06:39 - exactly what got printed out now
06:41 - here now you might wonder why we just
06:43 - didn't put this in our try block so we
06:45 - can move this up here and just execute
06:48 - this underneath and if it throws an
06:50 - exception then hopefully it's one that
06:52 - we'll catch anyway now you could do that
06:55 - but like I was saying earlier that we
06:57 - want to be specific about what it is
06:59 - that we're actually trying to catch here
07:01 - so if I move this code up here then then
07:05 - it may throw an exception and we may
07:07 - catch that exception but it may be
07:09 - something that we weren't trying to
07:11 - catch and it may just be an accident so
07:13 - it's better to just go ahead and put
07:14 - that in the else clause or to just put
07:18 - it after the try block altogether okay
07:21 - so now we come to our finally Clause so
07:25 - like I was saying the else Clause only
07:27 - runs if we don't throw an exception but
07:30 - the finally runs no matter what happens
07:34 - whether the code is successful or
07:35 - whether we throw an exception so this is
07:38 - useful for making sure that you release
07:40 - certain resources regardless of what
07:42 - happened in the triack set so for
07:44 - example say you are working with a
07:46 - database or something like that then
07:49 - this would be an area where you could
07:51 - close down the database at this step so
07:54 - I'm just going to put in a print
07:56 - statement here and I'm just going to say
07:57 - that I am executing the finally so you
08:03 - can see if I run this then it runs our
08:06 - else clause and then it also executes
08:08 - sauer finally and now if within our try
08:11 - if I make something that's going to
08:13 - throw an exception and then I run this
08:15 - you can see that it throws our exception
08:19 - but it also still executes sauer finally
08:22 - so again that's a way that you can make
08:25 - sure that you properly closed down
08:27 - certain things so like you know closing
08:29 - down a database or something like that
08:31 - something that needs to be done
08:32 - regardless if the code is successful or
08:35 - not okay so we're just about done but
08:37 - the last thing that I wanted you to know
08:39 - about exceptions and so you can actually
08:41 - raise exceptions on your own if you need
08:44 - to do that so it doesn't have to be
08:45 - something that Python would have caught
08:48 - on its own so for example here I have
08:51 - this corrupt file txt so
08:55 - if I open up this corrupt underscore
08:58 - file.txt now there's nothing actually
09:00 - wrong with this file but I'm just kind
09:02 - of using it for this example
09:04 - so I want to raise my own exception here
09:07 - so I'm going to say if F dot name is
09:10 - equal to and I'm going to say corrupt
09:13 - file dot txt so I'll copy that and paste
09:16 - it in there now now I'm going to raise
09:19 - an exception manually so to do that it's
09:22 - easy as saying raise and then the
09:24 - exception that you want to raise so I'll
09:25 - just raise this general exception here
09:28 - so if I save that and if I run that so
09:31 - try to print this exception but it just
09:33 - doesn't have any details here so I'll
09:34 - just put in an error with an exclamation
09:37 - point so if I run that again you can see
09:40 - that this line did raise this exception
09:42 - so then it went down to where this
09:45 - except line where we were handling that
09:46 - exception and it printed out the air so
09:49 - this allows us to manually raise
09:51 - exceptions so if I was to comment out
09:53 - that line and run the code now you can
09:56 - see that it did the correct thing that
09:59 - it would have done normally so it opened
10:00 - up the file and it came down here and
10:02 - printed out the contents and close the
10:04 - file
10:04 - the contents of the file it just says
10:06 - corrupt file and then it ran our finally
10:09 - closed so that about does it for this
10:11 - video hopefully it gave you a large
10:13 - overview of exception handling and give
10:16 - you some ideas of how you can use this
10:18 - in your projects if you do have any
10:20 - questions just ask in the comment
10:21 - section below
10:22 - be sure to subscribe for future videos
10:24 - and thank you all for watching