00:00 - hey there how's it going everybody in
00:01 - this video we'll be adding the ability
00:02 - for users to add posts that will show up
00:05 - on the home page so in this series so
00:07 - far we've been using some dummy data but
00:09 - now we'll actually be able to get rid of
00:11 - that and display actual posts created by
00:13 - the users and we'll also add in the
00:15 - ability to update and delete these posts
00:17 - as well so let's go ahead and get
00:19 - started
00:19 - okay so first of all we're going to need
00:21 - to create a page where users can create
00:23 - a post and we should be getting used to
00:25 - this process by now so first we can
00:27 - create a route where a user can write a
00:30 - new post so I'm in my routes file here
00:33 - and if we go to the bottom then we can
00:34 - create a new route and now I'll create a
00:37 - route for a new post so I will copy one
00:41 - of these routes as a starting point and
00:43 - paste this in down here at the bottom
00:46 - and I will call this route post ford
00:49 - slash new and i will call the function
00:53 - here new underscore post and creating a
00:56 - new post will be a route that requires
00:58 - the user to be logged in so let's add
01:00 - that login required decorator so right
01:02 - underneath here I can add in that login
01:05 - required decorator and just like the
01:07 - other routes we're going to want to
01:09 - render a template for this route so I'll
01:11 - render a template that doesn't exist yet
01:13 - but we'll create it in just a second so
01:15 - I'm going to copy this line here and
01:18 - paste it in to our route and now I'll
01:21 - change this up a little bit for this
01:22 - specific route so the template that we
01:24 - want to render I will just call this
01:26 - template create underscore post and the
01:29 - title we will have for this page is new
01:32 - post and then we'll just close that out
01:35 - okay so now we can create this template
01:37 - so within our templates directory I'm
01:39 - going to right click here and go to new
01:41 - file and I'll create a new file called
01:43 - create underscore post dot HTML we want
01:46 - it to match the template that we just
01:48 - rendered here so I will create that and
01:51 - within our template well want the same
01:52 - starting point as our other templates so
01:54 - we'll extend from the layout HTML which
01:57 - will give us the overall layout of the
01:58 - website and then we'll begin the content
02:00 - block so I'm just going to grab this
02:02 - from the about page since that's fairly
02:04 - stripped down and then paste it in here
02:07 - and get rid of this h1 tag okay so that
02:10 - gives us a bare-bones template to work
02:12 - with and last
02:13 - the content that we want on this page is
02:16 - going to be a forum for posting new
02:18 - posts and first we have to create that
02:21 - forum and it's going to be a simple one
02:23 - with just a couple of fields so let's
02:25 - open up our forms dot pie file here and
02:28 - at the bottom of this file let's create
02:30 - a new form so I will call this form and
02:34 - remember these are classes I will call
02:36 - this post form and remember we want to
02:38 - import from flask form and for a post
02:41 - we're just going to have two fields
02:43 - we're going to have a title and that is
02:45 - going to be a string field and then the
02:48 - label that we want for this is simply
02:50 - title and now we're also going to want
02:52 - some validators so we passed in our list
02:54 - of validators but it's only going to be
02:56 - one we're going to pass in a data
02:57 - required validator because every post
03:00 - has to have a title and the second field
03:02 - is going to be the post content which
03:05 - will actually be a text area field and
03:08 - we haven't used a text area field yet so
03:10 - we need to import that so here from the
03:12 - top where we're importing our other
03:14 - fields I can add on a text area field to
03:20 - that import so now I'll copy that and we
03:23 - can go back to our form and create our
03:26 - content field so I'll say content is
03:28 - equal to text area field and now the
03:32 - title that we want for this is just
03:33 - going to be content and the validators
03:37 - that we're going to pass in here is just
03:39 - the same we want the data required
03:41 - validator because every post has to have
03:43 - some content and lastly we need a
03:45 - submit' button to post this to our route
03:47 - so I will say submit is equal to submit
03:51 - field and this is just like our other
03:53 - forms and the title that I want on this
03:55 - submit button is just going to be post
03:57 - so we can save that and that is going to
03:59 - be it for this form so now let's create
04:02 - an instance of this form and our route
04:04 - and pass it in to our create post
04:06 - template so back in our routes we now
04:11 - need to import this form so that we can
04:13 - create an instance of it so we'll go
04:15 - back to the top where we are importing
04:17 - all of our forms and on to the end here
04:19 - I will just add that post form import
04:23 - and now let's create an instance of that
04:25 - in our route and
04:27 - sit into our template so within our
04:29 - route I'll say form is equal to post
04:31 - form and then we can pass this into our
04:34 - template simply by saying form is equal
04:36 - to form and this should be becoming a
04:39 - little more familiar now since we've
04:40 - done this a couple of times and now
04:43 - since we're going to allow a form the
04:44 - post back to this route we're going to
04:46 - need to accept a post request so up here
04:50 - in our accounts route I'm just going to
04:52 - grab where we are allowing these
04:54 - different methods and then I'm going to
04:56 - paste this in to our post route so now
04:58 - we are accepting it and post request to
05:01 - this route and let's also go ahead and
05:03 - put in our usual conditional to validate
05:05 - the form when it's posted and also how
05:08 - we want to handle that so let's put in
05:10 - this if form that validate on submit
05:14 - conditional and we'll put this right
05:16 - below our form and our new post route
05:18 - and for now let's just add a flash
05:20 - message that their post has been created
05:23 - and then redirect them back to the home
05:24 - page and we'll actually put in the logic
05:27 - for adding this post to the database in
05:29 - just a minute but for now we'll just say
05:31 - a flash message here and we'll say your
05:35 - post has been created with an
05:38 - exclamation point and let's pass in a
05:40 - category of success which is going to be
05:43 - our bootstrap class for that alert and
05:45 - now let's redirect them to the home page
05:48 - so we'll say return redirect and we're
05:51 - going to redirect them to URL for and
05:54 - pass in the home round so now let's
05:57 - actually add this form to our create
05:59 - post template and this would be similar
06:01 - to our other forms so I'm going to grab
06:03 - a snippet from one of our other routes
06:05 - just to get us started so I'm going to
06:07 - open up the login template here and I'm
06:11 - going to copy our entire div of content
06:14 - section that wraps our form and I'm
06:17 - going to paste this in to our create
06:21 - post route so I'll paste that in and fix
06:24 - these indentations here and now we'll
06:27 - change this around to match the fields
06:29 - that we need in our post form so first I
06:33 - will change the legend here so the
06:35 - legend at the top of our field I'm going
06:37 - to change this to
06:39 - new post and now I'll change these form
06:42 - group dibs here to match our current
06:45 - post form so in our first forum group we
06:49 - want to change this to be the title
06:51 - field for our post so instead of email
06:54 - I'm going to use this multi select tool
06:57 - here and change all of these to title if
07:00 - you don't have a multi cursor tool in
07:02 - your editor then you can just use a find
07:05 - and replace for that okay so now all of
07:07 - these in this form group should read
07:08 - form dot title so that's good and now
07:12 - down here we'll replace this password
07:14 - with the content so we want this to be
07:17 - our content field so I will highlight
07:20 - all of those up until the next div and
07:22 - replace that with content it's now
07:25 - everything in this form group should be
07:27 - formed dot content and lastly in our
07:29 - login form we had this check box here
07:32 - for remember me we don't need that
07:34 - anymore so we can just get rid of this
07:36 - entire div it's just a couple of lines
07:38 - there so we will delete that and then
07:41 - after this we have our submit button and
07:42 - that is still called submit in that form
07:44 - so we can leave that but we don't want
07:47 - this forgot password link here after our
07:50 - submit button so we'll get rid of that
07:52 - as well so that should be all the
07:54 - changes that we need to make to this
07:56 - post form now just a reminder I know
07:58 - that it can be hard to keep up with
07:59 - small changes like these when you're
08:00 - following along with a video but if you
08:02 - think that you may have messed something
08:03 - up or just want to grab the completed
08:05 - version of this file from this video
08:08 - then I do have this code available in
08:09 - the description section below ok so that
08:12 - should do it for this template and for
08:13 - our route and for the form but now
08:16 - finally let's add a link to this create
08:19 - post route in our navigation bar so that
08:21 - logged in users can get to this route
08:23 - easily and the navigation bar is in our
08:25 - layout template so let's open up our
08:28 - layout dot HTML template and I will
08:31 - scroll down here to our navigation and
08:33 - we can see our conditional here this is
08:36 - where the links that get displayed
08:39 - whenever a current user is authenticated
08:42 - or is logged in so I'm going to copy
08:44 - this account route here and paste in a
08:48 - route right above it and now we'll
08:50 - change this to link to the new post
08:53 - so this will be new underscore post and
08:55 - the text for that link will just be new
08:58 - posts so we can save that so now let's
09:01 - open up our application and a browser
09:03 - and make sure that all of these changes
09:04 - look good so far so first make sure that
09:07 - all of the files that we have modified
09:08 - are saved and they do look saved on my
09:10 - end so now we can start up our
09:14 - application by pulling up our terminal
09:16 - and running Python run PI and we can see
09:20 - that we don't get any errors and our
09:22 - development server is running so that's
09:23 - good so I will pull up the browser and
09:26 - reload our page and I am currently
09:29 - logged in and we can see that we have
09:30 - this new post route here so if I go to
09:33 - this new post route then we can see that
09:35 - we have this new post form now if you
09:37 - weren't logged in then you'll have to
09:39 - login first before you can see this new
09:41 - post route so now if I hit post on this
09:45 - new post route then we can see our
09:46 - validation is working it says that these
09:48 - fields are required and now let's just
09:51 - fill these in with some dummy values so
09:54 - I will say blog one and then blog one
09:57 - content and now let's post this new post
10:01 - form and now we can see that we get
10:02 - redirected to our home page with our
10:05 - alert message here that our post has
10:06 - been it created but our home page is
10:09 - currently still using our dummy data
10:10 - from the beginning of this series so now
10:12 - let's actually save these posts to our
10:14 - database and display those posts on our
10:17 - home page and delete this old static
10:19 - dummy data that we've been using so
10:20 - let's go back to our routes and add
10:23 - these posts to the database so I will
10:25 - pull back up our application and pull up
10:28 - our routes dot py file here so to
10:31 - actually add this post to our database
10:33 - it's going to be similar to when we
10:35 - added a user to our database but it's
10:37 - actually going to be easier than that
10:39 - because we don't need to hash passwords
10:41 - or anything like that so we can simply
10:45 - just say post is equal to post and then
10:50 - we can set our fields equal to what is
10:53 - coming in from our form so title is
10:55 - equal to form dot title dot data and the
10:59 - content is going to be equal to form dot
11:03 - content dot data and now we also need to
11:06 - spell
11:07 - if I the author for this post now I'm
11:10 - going to use author is equal to current
11:13 - user and let me spell that right now I
11:17 - use the back reference of author to set
11:19 - the author of that post instead of
11:21 - setting the user ID and that choice is
11:24 - up to you I think that it looks more
11:26 - clean this way but now that we have that
11:28 - post created we can simply add that post
11:31 - to our database by saying DB session dot
11:36 - add and we want to add that post and now
11:40 - we can commit those changes to the
11:42 - database so we could say DB dot session
11:45 - dot commit okay so that will add the
11:48 - post to the database and then we still
11:50 - have our flashed message and our
11:52 - redirecting them to the home page so
11:55 - let's change our home page route so that
11:58 - we actually see these real Post instead
12:01 - of the dummy post that we have right now
12:02 - so first of all I'm going to remove the
12:05 - dummy data from the top of our file so
12:08 - that we are sure that we're no longer
12:09 - using that so I'm going to just delete
12:13 - all of that dummy data that we were
12:15 - using which was just a list of
12:17 - dictionaries and now within our home
12:19 - page which is here at the top we can see
12:21 - that we were just passing in that dummy
12:24 - data and to our template as this post
12:26 - variable so let's create a new post
12:29 - variable within our home route that is
12:31 - set to our actual post so this is going
12:34 - to be super easy right above our return
12:37 - statement there will simply say posts is
12:40 - equal to post dot query dot all to grab
12:45 - all of those posts from the database and
12:46 - as long as our dummy data had the same
12:48 - attributes as our model then that should
12:50 - be the only thing that we need to do in
12:52 - order to grab those posts now I do think
12:54 - that we might need to change something
12:56 - with how the post is displayed but let's
12:58 - see how that worked for now so I'm going
13:00 - to open up our browser and give this a
13:02 - look make sure that all of our files
13:04 - have been saved that we changed and that
13:06 - our web server is still running and it
13:08 - is so now I'll reload our homepage and
13:11 - we can see that we don't have any posts
13:13 - so now let's add one so I will add a
13:15 - post and for the title I'll just say my
13:17 - first post and then for the
13:21 - tenth I'll just say this is my first
13:24 - post and I'll actually make this multi
13:26 - lined here so that we can see what this
13:28 - looks like so this is very exciting and
13:32 - change that to be capitalized there so
13:35 - let's post that okay so when we post
13:37 - that we can see that it displays on the
13:39 - homepage so that's good
13:40 - now our dummy data wasn't exactly like
13:43 - our real data it looks like we are
13:45 - printing out the entire user object
13:47 - instead of just the author's user name
13:49 - it also looks like the date is printing
13:54 - out the date and the time instead of
13:57 - just the date and I don't think we need
13:58 - the exact time for these posts so we'll
14:00 - just change this to print out only the
14:02 - Year month and day
14:03 - it's nice having that exact time of the
14:05 - post in the database but on the front
14:07 - page we'll just display the date so
14:09 - we'll fix those and it will also be nice
14:12 - to display the user's profile picture
14:14 - with their post as well like you'd see
14:18 - on other popular sites and I already
14:20 - have styles for that in our CSS we just
14:23 - need to add the HTML to our template so
14:25 - let's go do that so I will open up our
14:29 - home template so I'm going to go into
14:31 - our templates and open home dot HTML so
14:34 - you can see here on line seven this is
14:36 - where we were printing out that entire
14:38 - user but we don't want to print out the
14:40 - entire author we want to print out just
14:42 - the author's user name so instead of
14:44 - post dot author
14:45 - let's do post dot author dot user name
14:48 - and to display just the date instead of
14:51 - the entire date time then we can use the
14:54 - strf time date/time method so right here
14:58 - where we have this date posted then we
15:00 - can simply now this is a date/time
15:03 - object so we can use these date/time
15:05 - methods so we can simply say STR F time
15:09 - and now pass in the formatting that we
15:11 - want now you can look up these
15:13 - formatting codes online but I just
15:15 - happen to know that to display the year
15:17 - month and day that that is a capital y
15:20 - and we can do a dash and then a
15:24 - lowercase M and then a dash and then a
15:27 - lowercase D and all of those have
15:29 - percent signs before those so it should
15:32 - look like that and if you search that
15:35 - strf time method online then you can
15:37 - find different values that you can plug
15:39 - in there to display dates in any format
15:41 - that you'd like okay and to display the
15:43 - users image I'm going to put in an image
15:46 - tag here with some CSS classes that we
15:49 - added earlier in the series and I'm just
15:51 - going to add this image right to the top
15:53 - of the article so right inside the
15:55 - opening article tag there I'm going to
15:58 - say image and this image is going to
16:01 - have a class equal to and I'll set this
16:06 - equal to
16:06 - rounded - circle which is a bootstrap
16:10 - class - just round your image and then I
16:13 - will also set a class here of article -
16:17 - image which is a custom class that we
16:19 - added in our main CSS and that's just
16:21 - going to make sure that has the right
16:22 - sizing and padding and things like that
16:25 - now our source is going to be the URL to
16:29 - that users image so I can put in our
16:32 - curly braces there to write some code
16:34 - and now we can say URL for and this is
16:37 - going to be a URL for our static
16:40 - directory and within our static
16:43 - directory the file name will be equal to
16:45 - the profile underscore pics directory
16:49 - and we will concatenate that with the
16:52 - image of the author who wrote the post
16:54 - so we can simply say post dot author dot
16:59 - image underscore file and we can do that
17:02 - because if we remember that author is a
17:04 - back reference which gives us access to
17:06 - that entire user and their attributes
17:09 - and that image file is an attribute of
17:12 - that user okay so now that we've made
17:14 - those changes let's save all those and
17:16 - then reload our home page in the browser
17:18 - to see what these look like so I'll save
17:20 - those changes and check our development
17:23 - server and it's still running so now
17:25 - let's pull back up our home page and
17:26 - reload this okay so we can see that this
17:29 - looks pretty good we have our user name
17:31 - here instead of that entire user object
17:33 - our date is now the Year month and date
17:36 - instead of the entire time that the
17:39 - poster was written and we also have our
17:41 - author's picture here to the side so
17:43 - that looks nice okay so now we've got
17:45 - some good functionality for our
17:47 - application now as far as a
17:49 - basic blogging system with multiple
17:50 - users we've pretty much got this to a
17:53 - good point where it has all of that
17:54 - basic functionality but there's always
17:56 - going to be more that we can add so
17:58 - let's keep going and adding some more
18:00 - functionality to this just so we can
18:02 - learn how it's done so for example let's
18:05 - say that we wanted to have the ability
18:07 - to update or delete posts now it
18:10 - wouldn't be a very good application if
18:12 - you could only create post but you
18:14 - couldn't correct typos or delete the
18:15 - post altogether so let's see how to do
18:18 - that so first let's make a route that
18:20 - takes us to a specific page for a single
18:24 - post so to do this we'll go back to our
18:27 - routes and to do this we're going to use
18:29 - something that we haven't seen yet so
18:31 - flask gives us the ability to add
18:33 - variables within our actual routes so if
18:36 - we wanted to create a route where the ID
18:39 - of a post is actually part of the route
18:41 - then we can create a route that looks
18:45 - like this so let me grab a starting
18:48 - point here and we can actually put this
18:52 - variable into the URL itself by putting
18:55 - in these angle brackets and then saying
18:57 - post ID so for example if the user was
19:00 - to go to post /one then post ID would be
19:03 - equal to 1 if they were go to post ford
19:05 - slash 2 then post ID would be equal to 2
19:07 - and so on so we also need to add that to
19:12 - our route function so I will just call
19:14 - this route post and pass in that post ID
19:18 - as an argument there and we can actually
19:21 - make these variables even more specific
19:23 - if we want so for example you can
19:26 - specify whether you want to expect that
19:28 - the variable is going to be a string or
19:30 - an integer or something like that now
19:32 - we're going to be expecting a post ID
19:34 - and that's going to be an integer so we
19:37 - can simply come up here and say int
19:40 - colon then post ID okay so now within
19:44 - this route now let's fetch this post if
19:47 - it exists so we'll say post is equal to
19:50 - post dot query and remember when we're
19:54 - getting something by an ID we can use
19:56 - the get method so get and we'll pass in
19:59 - that post ID as an argument now actually
20:02 - in
20:03 - of using this get method let's instead
20:05 - use a method that we haven't seen yet
20:06 - now instead of using get or first like
20:09 - we've seen before in these videos this
20:12 - time let's use the method get underscore
20:15 - or underscore 404 now this is a
20:18 - convenient method that just says you
20:20 - know give me the post with this ID and
20:22 - if it doesn't exist then return a 404
20:25 - which means that the page doesn't exist
20:27 - but if that post does exist then let's
20:30 - simply render a template that returns
20:32 - that post so this template doesn't exist
20:35 - yet but we'll create it right after we
20:37 - render the template so I'll say return
20:39 - render template and this will be we'll
20:43 - call this post dot HTML and for the
20:46 - title of this one let's just pass in the
20:49 - title of our post so I'll say title is
20:51 - equal to post dot title and now let's
20:55 - pass in that post into our template okay
20:58 - and now let's create a template for this
21:00 - so up in my templates here we'll create
21:02 - a new file and we'll call this post dot
21:05 - HTML and then this will be very similar
21:08 - to our home dot HTML except it's going
21:11 - to be a single post instead of all of
21:13 - our post so I'm gonna go to home dot
21:16 - HTML and actually copy all of that and
21:19 - paste it in to our post template and
21:22 - we'll use this as our starting point but
21:24 - within here we won't need to loop over
21:26 - the post since there will only be one so
21:29 - we can just get rid of this for loop
21:32 - here and also the ending of that for
21:35 - loop and then fix that indentation and
21:38 - also we're not going to need our blog
21:40 - title to be a link anymore the only
21:43 - reason it is a link on the home page is
21:45 - so that they can link to this page that
21:47 - we're creating now so we'll just make
21:49 - that an h2 of the post title so I'm
21:53 - going to remove the link here
21:55 - surrounding the post title so remove the
21:58 - opening and the closing tags for that
22:00 - anchor tag but I am going to keep that
22:02 - class that it had on that anchor tag so
22:04 - I'm going to set the class equal to
22:06 - article - title and save that okay and
22:10 - lastly we need to actually add the links
22:12 - to this route for the individual post on
22:14 - the home page so if we pull up the
22:16 - template
22:16 - for the homepage right now if we look at
22:19 - the links for the post title then we can
22:21 - see that we're just using this pound
22:23 - sign for the link location which means
22:25 - that the link doesn't actually go
22:27 - anywhere but we want this to go to the
22:29 - page for that individual post so which
22:33 - would be the post route that we just
22:34 - created with the ID of the post so to do
22:37 - that we can add in our double curly
22:41 - braces like we are used to and then we
22:43 - can say URL for and this is going to be
22:46 - a URL for and we called this route we
22:50 - called that route post so this will be a
22:52 - URL for post and now we also need to
22:55 - post in that post ID with that route so
22:59 - we can say that the post ID for that
23:01 - route is going to be equal to our post
23:05 - dot ID so as we're looping through all
23:08 - of our posts on our homepage once it
23:10 - gets to this point it's going to print
23:11 - out the post title and that is going to
23:13 - be an anchor tag and the location for
23:17 - that anchor tag is going to be the URL
23:19 - for that post and we're going to set
23:22 - this post ID equal to the current post
23:25 - dot ID so let's save this and actually
23:28 - see what this looks like on the website
23:29 - so I've got all of my files saved here
23:32 - let's open back up our web server and we
23:35 - need to restart this so I will run that
23:38 - we can see that our development server
23:40 - is running so let me rerun the home page
23:42 - now first let me add one more post from
23:44 - a different user so that we can see
23:46 - multiple posts on the home page so I'm
23:48 - going to log out of my current user and
23:50 - then I'll log in with another user that
23:53 - I created in a previous video and that
23:56 - user was test user at demo com and I
24:01 - believe that the password I used was
24:04 - testing ok so now I'm logged in as that
24:07 - user so now let me go to new post and
24:09 - the title of this will just be a second
24:12 - post and then we will have some content
24:15 - here that this is a post from a
24:18 - different user so let me post that so
24:23 - now we can see that we have two posts
24:25 - here on our home page so now if I hover
24:28 - over the link for one of our
24:30 - host then I know that this is a little
24:32 - small for you to see on video but in the
24:34 - bottom-left of Chrome it shows us where
24:37 - this link will take us and it currently
24:40 - says that it's going to our post route
24:42 - with a forged slash 1 so that is linking
24:45 - to the post with an ID of 1 so if I
24:49 - click on that then it actually took me
24:51 - to the URL of ford slash post ford slash
24:54 - 1 and if i hover over the title we can
24:56 - see that this is no longer a link so if
24:59 - i go back to the home page and then
25:01 - click on the second post then it's the
25:03 - same thing it takes me to post ford
25:05 - slash 2 and it's the page for this
25:08 - specific post now if i try to go to a
25:10 - post that doesn't exist then I should
25:12 - get a 404 error and that means that the
25:14 - post with that ID doesn't exist so if
25:17 - instead I try to go to post you know
25:20 - forged slash 10 and go there then we can
25:23 - see that we get this not found error and
25:25 - that's good because that route wouldn't
25:27 - exist unless we had a post with that ID
25:30 - ok so now we're able to add posts and
25:33 - see them on our home page but let's also
25:35 - add the ability to update and delete
25:37 - post so let's create a new route that
25:40 - displays a form to update a post so
25:43 - let's go back to our home page here and
25:46 - now let's bring back up our application
25:48 - and go to our routes and now I'm going
25:51 - to create a new route here that is the
25:53 - post ID followed by a forward slash
25:55 - update and it's going to be similar to
25:57 - the one that we just created so I'm
25:59 - going to just copy that as a starting
26:02 - place now right after the post ID I will
26:06 - say update and now we need to change the
26:10 - function name of this route because we
26:13 - can't have the same function name for
26:15 - multiple routes so I will call this
26:16 - update underscore post and this is going
26:19 - to be a route that requires a login
26:21 - because if you're trying to update a
26:22 - post then it means that you have to
26:24 - login first so let's put in that login
26:28 - required decorator there and now let's
26:31 - do the same thing that we did for our
26:32 - specific post page we will get a post
26:35 - with that ID and if it doesn't exist
26:38 - then we will return a 404 okay so first
26:41 - we want to make sure that only the user
26:43 - who wrote this
26:44 - post can update it so let's put that
26:46 - check in place so I'll say if post dot
26:49 - author is not equal to the current user
26:54 - then we're going to do an abort and pass
26:58 - in a 403 there now this is the first
27:00 - time that we've actually manually
27:02 - aborted and returned an error response
27:05 - now this 403 response is the HTTP
27:08 - response for a forbidden route and we'll
27:10 - customize these air pages in a future
27:12 - video to make them look a little nicer
27:14 - now we haven't actually imported that
27:17 - abort function yet so let's do that so
27:19 - that is just going to be from a flask so
27:22 - up here at the top where we have our
27:24 - other flask imports I will just add this
27:27 - abort import onto the end there so now
27:30 - let's go back down to the bottom okay so
27:33 - if the current user is the author of the
27:35 - post then let's go ahead and create our
27:38 - form and render a template now the form
27:40 - that we use will just be the same as our
27:42 - previous post form so let's just reuse
27:45 - that so right underneath here I will say
27:48 - that the form is going to be equal to
27:50 - post form and create an instance of that
27:53 - and the template will pretty much be the
27:56 - same as our current post template with
27:58 - just one small difference so for now
28:00 - let's render that template and see what
28:03 - it looks like so I will actually just
28:05 - grab it from here so I will open that is
28:09 - our post template I want to grab our
28:11 - create post template here so I will copy
28:14 - that and paste that in here at in our
28:17 - update post route and instead of a new
28:19 - post as being the title I will make that
28:22 - update post as being the title so let's
28:24 - open this in our browser and see what
28:27 - this looks like right now so I've got
28:28 - everything saved and in my terminal I'm
28:31 - going to restart our development server
28:33 - and then reload our browser here so
28:38 - first let me log out as our test user
28:40 - and log back in as the corium Shaffer
28:45 - user that we created earlier so I will
28:49 - log in there so first let me go to the
28:51 - link of the second post that I wrote as
28:53 - test user and try to update that post
28:57 - so if I go to this route then we can see
29:00 - that we are at post ford / - now i'm
29:02 - going to add a forward slash update onto
29:05 - that route and we can see that we get a
29:06 - forbidden response when trying to do
29:08 - that and that is because we did that 403
29:12 - abort but if i go back to our homepage
29:15 - and try to update the post that i
29:17 - created so i'll go to the first post
29:19 - here and then go to ford slash update on
29:23 - that post number one then we can see
29:25 - that we get our forum now there are a
29:27 - couple things that i want to change here
29:29 - so first we want the title and content
29:32 - to be populated with the content of the
29:34 - existing post that we're updating and
29:36 - also i want the form legend to say
29:39 - update post instead of new post so to
29:42 - change this let's go back to our routes
29:44 - so first of all i'm not going to create
29:46 - an entirely separate template just to
29:48 - update the legend of that form i'm just
29:50 - going to create a legend value that we
29:53 - pass into each template so for our
29:55 - update route i will just add this on to
29:58 - the end here and i'm going to go to a
29:59 - new line here for this forum and we can
30:03 - pass in a legend and we'll set that
30:06 - equal to update post and save that and
30:11 - i'll copy this and add this to our new
30:13 - post as well so i will go up here to our
30:15 - new post route and put this on a
30:19 - separate line as well and add that
30:22 - legend but for the legend we're gonna
30:24 - call this new post and now we can just
30:27 - display that legend within our create
30:29 - post template so i'm going to open up
30:31 - that template now we could probably have
30:33 - named that template better since now
30:35 - it's being used to create and update
30:37 - post but that's not a big deal we're not
30:39 - going to worry about that so here within
30:42 - create post if we go up to our legend
30:44 - now I'm simply going to use the double
30:48 - curly braces there and use that legend
30:50 - argument that we passed in okay and we
30:53 - also wanted the forum to be populated
30:55 - with the current post title and content
30:57 - on our update page now we've seen this
31:00 - before in our account page with our
31:01 - account info so it's going to be similar
31:04 - so if I go back here to our update route
31:07 - then right under where we are
31:09 - initializing this for
31:11 - we can simply say that the form dot
31:13 - title dot data is going to be equal to
31:16 - the post dot title and we can do the
31:20 - same thing for the content
31:22 - so we'll say form dot content dot data
31:25 - set that equal to the post content okay
31:29 - so those changes should handle changing
31:31 - the legend and filling in the form with
31:33 - the current post data so now let's also
31:36 - add in the logic to update the post if
31:39 - the form validates so as usual we need
31:42 - to accept post requests to any of these
31:45 - routes that we want to submit a form to
31:48 - so we can just copy that from one of our
31:51 - existing routes so I will copy those
31:54 - methods and paste that in there and now
31:57 - we can handle the logic for when that
31:59 - form is submitted
32:00 - so as we've seen before we can say if
32:03 - form dot validate on submit and then
32:07 - within here if that form was valid then
32:10 - we can update our post so we can simply
32:13 - say post dot title is going to be equal
32:16 - to the form dot title dot data and the
32:21 - same with the post content so I will
32:24 - copy and paste that line but change both
32:27 - of those to content so post content is
32:29 - equal to form content data and now we
32:33 - can simply commit those changes so I can
32:36 - say DB session dot commit now you might
32:41 - notice whenever we make those changes we
32:42 - don't need to do a DB session ad because
32:45 - those are already in the database that
32:47 - we're just updating something that is
32:49 - already in the database okay so now
32:51 - after we commit those changes let's do a
32:53 - flash message to the user to let them
32:55 - know so we can flash a message that says
32:57 - your post has been updated and then we
33:02 - can pass in our style and for this we'll
33:04 - do a success style and then we can
33:08 - redirect back to that post route for
33:12 - that specific post so I would say return
33:15 - and that will be a redirect and that'll
33:19 - be a redirect for a URL for and the URL
33:22 - for
33:23 - our post route and we want this to be
33:27 - the post ID of our current post so we'll
33:31 - say post ID is equal to post dot ID and
33:34 - while we're at it let's also move here
33:37 - where we're sending the form data let's
33:39 - put it in its own conditional like we
33:41 - did in our account page and we want to
33:43 - make sure that that's populated when
33:45 - it's a get request so I will add on to
33:48 - our conditional here and say L if
33:50 - request dot method and we will say if
33:55 - that method is equal to a get request
33:58 - then we want to populate that form with
34:02 - those values okay so that should do it
34:05 - for updating our post so let's see if it
34:08 - worked
34:08 - so we have everything saved and let's
34:11 - make sure our web server is still
34:12 - running and it is and let's pull up our
34:14 - site and now I'll try to update post
34:18 - that I have created so I'm on this post
34:21 - page and I'm going to go to forge slash
34:23 - update for that post and we can see that
34:26 - now our legend is correct we have update
34:28 - post and our title and our content is
34:31 - populated so now I'll say my first
34:33 - updated post and this is my first
34:37 - updated post as the content and then we
34:40 - can submit that and we can see that that
34:43 - worked and we got redirected back to the
34:45 - page for this specific post and also we
34:48 - have our flash message here that our
34:49 - post has been updated actually that says
34:52 - update let me change that really fast
34:55 - updated in that flash message okay and
34:58 - if I go back to our home round then we
35:01 - can see that that does stay there so
35:04 - that did update that post permanently
35:06 - okay so we're just about finished up now
35:08 - we just need to add the ability to
35:10 - delete a post for a user so before
35:13 - creating the route to delete a post
35:15 - let's actually add the links for the
35:17 - update and delete routes to our template
35:19 - now I want to do this first because for
35:22 - our delete route I want to add an extra
35:24 - confirmation step to make sure that the
35:26 - user really wants to delete their post
35:29 - and make it hard for them to do it by
35:31 - accident so the update and delete links
35:33 - will be included in the single post
35:36 - template
35:37 - so let's open up that template and we
35:40 - called that post dot HTML and remember
35:43 - this is the page when we're viewing a
35:45 - single post and we'll put those update
35:47 - and delete links right here in this
35:49 - article metadata section of our post and
35:53 - I'll put those after the username and
35:57 - date now you only want to show these
35:59 - links if the post belongs to the current
36:02 - user so we can put in a code block here
36:05 - so curly braces and percent signs and we
36:08 - can say if post dot author is equal to
36:11 - the current underscore user then we can
36:15 - end this if block here and if and now
36:20 - within this if statement then let's put
36:22 - in a div with our links and I'm going to
36:25 - include some bootstrap classes so bear
36:27 - with me while I type this out so I'm
36:29 - going to put in a div here and within
36:32 - the div I'm going to put an anchor tag
36:33 - for our update link and for this update
36:38 - link before I update the href I'm going
36:40 - to give it some classes so I'll set the
36:42 - classes equal to and I want this to be a
36:45 - bootstrap button and specifically a
36:48 - bootstrap button - secondary and also
36:51 - I'm going to make it small so that's BTN
36:54 - - SM and also I want to give it some
36:57 - spacing so I'm going to give it a margin
36:59 - of 1 so M - 1 so that H ref for the
37:03 - update link we've seen this before so we
37:06 - can use our double curly braces and that
37:08 - is going to be URL four and that's going
37:11 - to be a URL for and we called this route
37:14 - if I go back to my routes here we called
37:17 - this update post so that's going to be
37:19 - the URL for update post and remember we
37:22 - need the tapassin the post ID as well so
37:25 - I can say post underscore ID is equal to
37:29 - let me scroll over here bit and that is
37:31 - going to be equal to the post dot ID so
37:35 - we can save that now we also want to be
37:37 - able to delete a post now this is going
37:39 - to be a little different here so I'm
37:41 - actually instead of going making this an
37:43 - anchor tag I'm going to make this a
37:45 - button so I'll say a button is equal to
37:47 - the type of button
37:50 - then we're going to pass in a class here
37:53 - and the class is going to be similar
37:55 - it's going to be a BTN and specifically
37:58 - I want this to be a bootstrap class with
38:00 - BTN - danger which will make it a red
38:02 - button
38:03 - I want them at that to be small as well
38:05 - so BTN - SM and we'll give that the same
38:08 - margin M - one and we want this button
38:11 - to say delete now when it comes to
38:14 - deleting their post I want the user to
38:16 - confirm that they actually want to
38:18 - delete that post so I'm gonna use a
38:20 - bootstrap modal now that's why I used a
38:23 - button instead of a link and I'm
38:25 - actually going to grab this directly
38:26 - from the bootstrap website so that I
38:29 - don't miss type anything so if you were
38:31 - to search bootstrap modal then you will
38:34 - be able to find at this page - so I'm
38:36 - gonna go to my browser and open up this
38:38 - modal page and within here you want to
38:40 - go to their live demo section and I'm
38:43 - just going to copy the data toggle and
38:46 - data target part of their button this is
38:49 - what actually toggles the modal so I
38:51 - will copy that and then I will paste
38:55 - this in to my button on my page here so
38:59 - I will add that in now instead of this
39:04 - data target pointing to example modal
39:06 - let's actually change this to delete
39:08 - modal so now let's go back to their
39:11 - website and now I can actually grab all
39:14 - of the code for this modal and paste it
39:16 - in to the end of my content section now
39:18 - I guess I should show you what a modal
39:20 - is first if you don't know what one is
39:21 - if I do the launch demo modal here then
39:25 - you can see that it's just something
39:26 - that pops up on your screen and kind of
39:28 - darkens everything in the background and
39:30 - give some text and some options here and
39:32 - this is where we'll have our clothes and
39:34 - delete so that we can be sure that we
39:36 - want to actually delete that post and
39:38 - put in a delete confirmation there so
39:40 - that's what that looks like so I will
39:42 - copy this entire modal section here and
39:45 - I will paste this in to the end of our
39:47 - content section so that is going to be
39:49 - after our article and right before the
39:52 - end of the content block so let me make
39:56 - sure that that indentation is correct
39:58 - and I'll save that now remember that we
40:00 - changed the data target on our button to
40:02 - be delete modal and not example modal
40:04 - so everywhere that this says example
40:06 - modal we want to change this to delete
40:08 - modal so I'm gonna do a multi-select
40:12 - here and copy all of the parts that say
40:15 - example modal and I think that I
40:17 - highlighted three here and I'm going to
40:18 - change all of those to be delete modal
40:23 - instead so before going any further with
40:25 - this deletion button let's open this up
40:27 - in our browser and make sure that we got
40:29 - all of this correct so far so I will
40:32 - save all of that and we can open up our
40:35 - server here and make sure that it's
40:37 - still running and it is so I'll go back
40:40 - to our page and try to go to our page
40:43 - for one of our posts and we can see that
40:46 - if it is a post that we have written
40:48 - then we have our update and delete links
40:51 - here now if I click on update then it
40:54 - takes us to the update route for that
40:56 - specific post and if I go back and click
40:59 - on delete then we can see that it pops
41:01 - up that example modal with the modal
41:04 - title and our options here now for now
41:06 - I'm just going to close that down so
41:09 - that's working well for now now we just
41:11 - need to modify that modal to confirm the
41:14 - deletion of our post and while we're
41:16 - changing things with that template I
41:17 - kind of don't like that this has a
41:19 - margin on the left side here so I think
41:22 - I'm going to update this Update button
41:24 - here and only have a margin on the top
41:26 - and bottom and not on the left and right
41:28 - so let's open up that post dot HTML
41:31 - template and I'll go back up here to our
41:34 - button and for this update anchor tag
41:37 - here I'm gonna change this m1 and I'm
41:39 - just gonna have that be an MT which is
41:41 - margin-top and an MB which is
41:44 - margin-bottom and I'll set both of those
41:46 - to one and I'll leave the complete
41:48 - margin on the delete button okay so now
41:51 - let's change this modal so that it is
41:54 - more in line with what we are trying to
41:55 - do so I'm going to go down here to our
41:57 - modal and we have a comment here for
41:59 - where this starts so now the title let's
42:03 - change this modal title and we'll just
42:05 - change this to delete post with a
42:08 - question mark and we can completely get
42:11 - rid of this modal body because there's
42:12 - no additional information that we need
42:14 - all we need is to display this delete
42:17 - post part and
42:18 - for the two buttons that we have on our
42:20 - modal window we'll leave those closed
42:23 - buttons there so we'll leave this
42:26 - secondary closed button here now instead
42:29 - of having this Save Changes button here
42:31 - let's completely get rid of that and we
42:33 - are going to instead make that a form
42:36 - with a submit button so we can simply
42:39 - add in a form here and the form is going
42:42 - to have an action equal to an empty
42:45 - string which we'll post it back to our
42:47 - current route we will set the method
42:49 - equal to post and now within our form
42:52 - we're simply just going to have a submit
42:54 - button with a value of delete for
42:57 - deleting our post so this will be an
42:59 - input and the type will be submit and I
43:03 - will leave off a name and let's put in a
43:06 - class so we want to style this as a
43:10 - bootstrap button and we'll give that a
43:13 - class of BTN - danger - make that red
43:16 - and we also give this a value equal to
43:20 - delete so that it has that text on the
43:23 - button now actually for this action
43:25 - we're not going to leave this empty so
43:28 - this is going to be the route for
43:30 - officially deleting our post and we
43:32 - haven't created that route yet but let's
43:35 - just assume that we'll call it delete
43:37 - underscore post with the post ID
43:40 - included so we can go ahead and fill
43:42 - this in and we'll create that route in
43:44 - just a second so I'll say URL for and we
43:48 - will call that URL or we'll call that
43:51 - route delete underscore post and we are
43:54 - also going to pass in a post ID that we
43:56 - want to delete so we'll pass down a post
43:58 - ID equal to post dot ID okay so now
44:02 - let's go create that delete post route
44:04 - now I know that this is a lot to do for
44:06 - this delete route but there's nothing
44:08 - more frustrating than deleting things
44:09 - that you don't mean to so you want to go
44:11 - through the effort of getting in good
44:13 - habits of being a little careful here
44:15 - and that's what this whole process is
44:17 - about okay so now let's go back to our
44:20 - routes and create a route for deleting a
44:22 - post now this is going to be similar to
44:24 - our update route at least the opening of
44:27 - it so let's copy the beginning of that
44:30 - and paste this
44:32 - and also let's get that post query and
44:35 - the abort section of that as well and
44:38 - paste those in as well and now let's
44:42 - update these values here so instead of
44:44 - this being update we want this to be
44:46 - delete and we will change this route to
44:49 - be delete underscore post okay and we
44:52 - are also only going to accept post
44:54 - requests for this route because we are
44:56 - only going to accept when they submit it
44:59 - from that modal so let's get rid of the
45:02 - get request there and just leave this
45:04 - post and now after we verified that the
45:08 - post belongs to the current user then we
45:10 - can simply delete the post and redirect
45:13 - them back to the home page and we can do
45:16 - that just by saying DB session delete
45:21 - and we want to delete that post and now
45:24 - we can commit that so DB session dot
45:28 - commit and we can also add in a flashed
45:30 - message here so I'm just going to copy
45:33 - this from our update route and paste
45:37 - this in and we can say your post has
45:39 - been deleted and now we can redirect
45:43 - them back to our home route
45:45 - so we'll say return that's going to be a
45:47 - redirect URL for and the URL for the
45:52 - home route so let's save that okay so
45:55 - that should do it if we did everything
45:56 - correctly so let's open this up in the
45:58 - browser and test this functionality so
46:00 - let me make sure that this is still
46:03 - running and the web server needs to be
46:05 - restarted so we'll restart that and pull
46:08 - back up our website here okay so now let
46:11 - me create a new post and then we'll go
46:13 - through the process of updating it and
46:15 - then deleting it so I'll create a new
46:17 - post here and I'll just say this title
46:20 - is this will be updated and then test
46:25 - content so let's post that we can see
46:29 - that it gets posted here on our home
46:32 - page so now let's click on that post and
46:35 - we can see that we have the options to
46:37 - update or delete it so now I'll update
46:39 - this post and instead of updated I'll
46:41 - say this will be deleted so we can see
46:45 - that our up
46:46 - Lync worked if I go back to the homepage
46:48 - then that is still there so now let's
46:51 - see if we can delete this post so I will
46:54 - click on delete and it opens up our
46:56 - modal that says delete post and if we
46:59 - click on this then that should be a
47:01 - submit button that submits a post
47:03 - request to our delete post route with
47:06 - that post ID so let's click that and now
47:09 - we can see that we're redirected back to
47:11 - our home page and it says your post has
47:13 - been deleted so that seems to have all
47:15 - worked ok so I think that is going to do
47:17 - it for this video I hope that now you
47:19 - have a good idea for how you can add
47:21 - some kind of post to your site and also
47:22 - how to handle the updates and deletes of
47:25 - those posts and in the next video we'll
47:27 - learn how to paginate our post so that
47:29 - we can efficiently grab a select number
47:31 - at a time and also we'll learn how to
47:33 - create user specific pages that only
47:35 - show their specific post but if you have
47:37 - any questions about what we covered in
47:39 - this video then feel free to ask in the
47:41 - comment section below and I'll do my
47:42 - best to answer those and if you enjoy
47:43 - these tutorials and would like to
47:45 - support them then there are several ways
47:46 - you can do that these is ways to simply
47:48 - like the video and give it a thumbs up
47:49 - and also it's a huge help to share these
47:51 - videos with anyone you think would find
47:52 - them useful and if you have the means
47:53 - you can contribute through patreon and
47:55 - there's a link to that page and
47:56 - description section below be sure to
47:58 - subscribe for future videos and thank
47:59 - you all for watching
48:11 - you