00:00 - hey there how's it going everybody in
00:01 - this video I'd like to walk through how
00:03 - to set up a python development
00:04 - environment in adom now Adam is a text
00:07 - editor that is becoming a popular
00:09 - alternative to editors like Sublime Text
00:11 - now I've done a video on how to set up a
00:13 - python development environment in
00:15 - Sublime Text but a lot of people are
00:17 - starting to give Adam a try so I wanted
00:19 - to put together a video on this as well
00:22 - so that people can get their python
00:23 - environment set up easily now there are
00:25 - some good reasons that Adam is becoming
00:27 - popular so first of all it is completely
00:29 - free free now Sublime Text is free to
00:32 - evaluate for an unlimited amount of time
00:34 - but you'll get popups asking you to
00:35 - purchase the full version every now and
00:37 - then so Adam being completely free is
00:40 - definitely appealing to most people and
00:42 - also Adam has a lot of support it was
00:44 - developed by the people at GitHub and it
00:46 - comes installed with a package manager
00:48 - and makes it easy to install packages
00:50 - right out of the box now Sublime Tex has
00:52 - improved that in process in some of its
00:54 - later updates but there's still an
00:56 - initial step there that needs to take
00:57 - place before you can begin installing
00:59 - packages Adam doesn't have that problem
01:02 - and we'll see some other differences as
01:03 - we walk through this setup process now
01:05 - if you never used Sublime Text before
01:07 - then uh you can just ignore the
01:08 - comparisons that I make throughout this
01:10 - video the only reason I bring those
01:11 - differences up is because these editors
01:13 - are very similar and they share a lot of
01:16 - the same user base and those people
01:17 - might find it useful to have those
01:19 - differences pointed out okay so let's go
01:21 - ahead and get started so I have the atom
01:23 - download page pulled up here now I'm on
01:25 - my Mac so it defaults to the Mac
01:27 - download uh but you should have a a
01:30 - download link for your operating system
01:32 - here so I'm going to go ahead and
01:33 - download that and I'm going to go ahead
01:35 - and Skip to where this is finished
01:37 - downloading and once that's finished
01:39 - downloading then we can unzip that and
01:42 - on a Mac we just have to drag this app
01:44 - to our applications folder if you're on
01:46 - another operating system then you might
01:48 - have to go through a quick installation
01:50 - okay so now let's open up our fresh
01:52 - installation of
01:56 - atom and now I'm just going to go ahead
01:58 - and maximize this okay so when we first
02:00 - open atom it's going to pop up with some
02:03 - welcome information here so on the right
02:05 - we have this welcome to guide with some
02:07 - documentation to the keyboard shortcuts
02:08 - and things like that um I'm going to go
02:10 - ahead and just close that down and close
02:13 - this link now on this welcome screen
02:15 - here I'm going to uncheck this show
02:17 - Welcome guide when opening atom and now
02:20 - I'm going to close that now this
02:21 - Telemetry consent I'm just going to
02:23 - click no here for now but you can do
02:25 - whatever you want here it's just to uh
02:27 - help them improve atom you can Anon
02:29 - anonymously send information and stats
02:31 - and things like that so just so we have
02:33 - something to work with I have a test
02:36 - python module here that I'm just going
02:38 - to go ahead and dump in to adom and go
02:40 - ahead and open that up now this is a
02:42 - sample class that I use for my object
02:44 - oriented series if you don't understand
02:46 - what the code is doing then uh you don't
02:48 - have to worry about it I just wanted
02:49 - something that we could work with and
02:51 - also something with classes and
02:52 - functions so that we can see the
02:54 - differences between the different color
02:55 - schemes and I'm going to make this font
02:58 - a little bigger here so that we can see
03:00 - everything now if you watched my Sublime
03:02 - Text walk through then at this point we
03:04 - were actually able to go ahead and run
03:06 - our python code now in atom we can't
03:09 - quite do this yet we have to first
03:11 - install a package so that we can run
03:13 - these scripts so let's install that
03:15 - first package so that we can add this
03:17 - functionality um so to install a package
03:20 - let's open up our preferences page and
03:22 - on a Mac that is under atom and
03:26 - preferences now on Windows I think that
03:28 - might be under file preferences now the
03:30 - atom preferences and settings have this
03:33 - nice layout we don't have to use Json
03:35 - configuration files or anything like
03:37 - that so it's a nice little interface
03:39 - that's pretty intuitive so to install
03:41 - our package we can just click on install
03:44 - down here at the bottom now the package
03:46 - that we want to search for is called
03:49 - Script and if we search for that then we
03:51 - can see that the top result is what we
03:53 - are looking for now there's also a nice
03:55 - feature here that shows the total number
03:57 - of downloads which gives you a good idea
03:59 - of how popular a package is so just
04:02 - click on install to install that package
04:06 - and once that package is finished
04:07 - installing then you can click on these
04:09 - settings to view the settings for that
04:11 - package now Within These settings uh
04:13 - this is where we can configure our
04:15 - packages how we like but this is also
04:18 - where we can view the uh readme files
04:20 - and get suggestions for how to properly
04:23 - use the package now if we scroll down to
04:25 - the bottom here then we should see a
04:28 - section on keyboard shortcuts so now
04:32 - with this package installed we should be
04:34 - able to run our Python scripts within
04:36 - atom the keyboard shortcuts here are for
04:38 - each operating system so I can see to
04:41 - run this on the Mac it's command I and
04:43 - on Linux and windows it's shift control
04:45 - B so I'm going to move over here to this
04:48 - test module and run this with the Mac uh
04:50 - command keyboard shortcut now the output
04:53 - that we got here for this script is a
04:55 - little small you might not be able to
04:56 - read this uh but basically when we print
04:59 - it out our executable path uh I got the
05:02 - default path to the python on my machine
05:05 - and that version is python 3.5 and then
05:08 - it also ran the other information here
05:10 - within this script as well now that
05:12 - default path on your machine may be may
05:15 - be different than the default path on my
05:17 - machine now if you want to run different
05:19 - versions of python or run python from a
05:21 - virtual environment here in atom then
05:24 - there's something different that we need
05:25 - to set up and I'll show you how to do
05:27 - that later in this video but for now
05:29 - let's go ahead and install the rest of
05:31 - the packages and get this customized a
05:33 - bit so first of all let's go ahead and
05:35 - install a different color scheme now the
05:37 - color scheme I like to use is the same
05:39 - one that I like to use in Sublime text
05:41 - and it is called pedon so to install
05:43 - this I'm going to go back here to the
05:45 - preferences then I'm going to click on
05:48 - install and instead of packages over
05:51 - here I'm instead going to click on
05:53 - themes to search for themes and now that
05:56 - we're searching for themes I'm going to
05:58 - search for preon now this part is a
06:01 - little different than Sublime Text in
06:03 - Sublime we installed the entire theme
06:06 - but in atom these are broken up between
06:08 - uis and the syntax I actually like the
06:12 - default UI that comes with atom so I'm
06:14 - just going to install the syntax
06:17 - coloring so over here I'm going to click
06:19 - install on the preon syntax so now
06:22 - that's installed but it's not activated
06:23 - yet so to activate this then we can
06:26 - click up here on themes and under the
06:30 - syntax theme then now we have this preon
06:33 - option so I'm going to go ahead and
06:35 - select that and now if we go back to our
06:37 - test module then we can see that the
06:40 - look of this has been updated and this
06:42 - is just a personal preference uh I'd
06:44 - recommend you try different themes and
06:46 - color schemes to see what you like but
06:48 - if you watched many of my videos then
06:49 - you'll probably notice that this is the
06:51 - one that I personally use so now that we
06:53 - have our color scheme in place now let
06:55 - me show you a few of the default
06:56 - settings that I personally like to
06:58 - change so Within our settings here now
07:01 - let's go up here to editor and within
07:04 - editor we can choose our font family so
07:07 - the font that I use is source code Pro
07:11 - and that is a font that is available for
07:13 - free on Google fonts and I'll leave a
07:15 - link to that in the description section
07:16 - below now the font size I usually like
07:19 - to have set to 20 and I know that that's
07:22 - large but that's just because I do these
07:24 - videos and want everyone to be able to
07:25 - see uh you'll likely choose something
07:27 - much smaller there now now if we scroll
07:31 - down here a bit now there's one setting
07:33 - that I like here called scroll past the
07:36 - end now if I go to my test module
07:39 - without that selected then you can see
07:41 - when I scroll down to the bottom then I
07:43 - can't scroll anymore once we hit the end
07:45 - of the file and that kind of annoys me
07:47 - so I like to set that scroll PR scroll
07:50 - past end option and now when I go back
07:53 - to my module then you can see that we
07:55 - can scroll past the end of this file and
07:58 - also whenever I am programming in Python
08:01 - I like to have my tab length uh set to
08:04 - four spaces and by default in adom that
08:07 - is set to two so I'm going to go ahead
08:09 - and change that okay and that does it
08:11 - for the editor settings now one other
08:13 - thing I like to disable in Adam is the
08:16 - default autoc completing uh so for
08:18 - example if I go to my test module down
08:21 - here at the bottom and I was to type in
08:23 - you know employee 2 equals e then you
08:27 - see that it's popping up uh this you
08:31 - know these Auto completes as I'm typing
08:33 - and a lot of the times I don't find
08:35 - these popups that useful so I'd
08:37 - personally rather just disable them and
08:39 - now to do this we can go back to our
08:41 - settings and then we need to select our
08:44 - packages now you can see here are some
08:46 - core packages that came installed with
08:49 - atom and if I scroll down here now you
08:52 - can see a short description of what each
08:54 - of these do now the one that I want to
08:57 - disable is this autocomplete plus and
09:02 - also autocomplete snippet so I'll
09:04 - disable both of those now if I go back
09:07 - to my test module then you can see it's
09:10 - no longer uh trying to autocomplete
09:12 - those now if you are someone who likes
09:15 - that autoc completing capability uh then
09:17 - the suggestions for python code are much
09:20 - more python friendly if you install the
09:23 - autocomplete python package so let's go
09:26 - over to our settings and let's click on
09:29 - install and now we want to select
09:32 - packages over here instead of themes now
09:34 - I'm going to search for auto
09:37 - complete
09:39 - python now I don't personally use this
09:42 - but I'll just go ahead and install this
09:43 - really quick just to show you how this
09:46 - looks now when this finishes installing
09:49 - it's going to ask if you want to use
09:51 - kite or a local engine now kite is
09:54 - something that goes out onto the
09:56 - internet and finds documentation and
09:58 - things like that now I think it sounds
10:00 - really interesting but some of the
10:01 - things that I work on at my full-time
10:03 - job aren't allowed to be sent over the
10:05 - cloud so I usually choose to use the
10:08 - local engine instead but if you think
10:10 - that clout or that kite sounds
10:11 - interesting uh then you're more than
10:13 - welcome to give that a try Okay so once
10:15 - we've selected that local engine now if
10:18 - we're back here on our test module now
10:21 - if I type in you can see that it's
10:23 - trying to autocomplete as I type and
10:25 - these are more python specific so if I
10:28 - come back and just type in you know this
10:30 - e um then I'm assuming that these B's
10:33 - mean builtin I'm not entirely sure but
10:36 - you can see that we have some more
10:37 - python specific autoc completions there
10:40 - so that is a popular python package but
10:42 - like I said I don't personally like the
10:44 - autocomplete popups um so I'm going to
10:47 - go over here and just disable the
10:50 - autocomplete package that I just uh
10:52 - installed okay so let's install a few
10:55 - more packages that I like to use within
10:57 - atom so some of these aren't
10:58 - specifically python related but I like
11:00 - the functionality that they add so if I
11:03 - click on install here where I already at
11:05 - this installation page make sure that
11:07 - we're on packages now one package that I
11:10 - like a lot is file
11:12 - icons now before I install this if you
11:15 - look here at our python file in this
11:17 - tree view over here it's just a simple
11:20 - file icon and this package will make
11:22 - those look a little better and it also
11:24 - is a little bit more descriptive of what
11:26 - the file actually is so you can see that
11:29 - the the top result here has over 2
11:31 - million downloads so it's a pretty
11:32 - popular download so let's go ahead and
11:34 - install that and once that's installed
11:37 - now if we look over here to our python
11:40 - file now we can see that the icon is now
11:43 - a nice colored python icon uh right
11:46 - beside the file name and if you work on
11:48 - a large project with a lot of different
11:50 - file types then I think this package not
11:52 - only makes that tree look better but
11:54 - also helps you find files more quickly
11:56 - okay so another package that I like to
11:58 - install
11:59 - is one called mini map so let's go ahead
12:02 - and search for that and this top one is
12:05 - the one that we want here so let's go
12:07 - ahead and install that okay so once
12:09 - that's finished downloading if we switch
12:11 - over here to our module um then we'll
12:14 - see now that in uh to the far right over
12:17 - here we have this uh General overview of
12:21 - what the file looks like and also where
12:23 - we are in this file now this isn't uh so
12:26 - useful with such a small sample module
12:29 - but if we had thousands of lines of code
12:31 - um then this gives you a better idea of
12:33 - where you are in those scripts okay now
12:36 - let's add a package that's uh more
12:38 - focused on Python Programming so this
12:41 - package is called python Auto Pep 8 so
12:46 - let's go ahead and search for that it is
12:49 - python Auto Pep
12:52 - 8 now I like this package because it
12:55 - keeps everything nice and consistent so
12:57 - let's go ahead and install this we'll
12:59 - take a look at what it does now there
13:01 - are a few other pep8 packages that have
13:03 - more downloads than this one but I found
13:06 - this one to be the easiest to set up and
13:08 - use um so now let's go ahead and go into
13:10 - the settings of this package that we
13:13 - just installed So within the settings
13:15 - here if we scroll down to the bottom
13:17 - then we'll see a very short read me file
13:20 - and it says to make sure that we have
13:22 - Auto pep8 installed uh by using the PIP
13:26 - install auto pep8 command so I'm going
13:28 - to go ahead and copy this and if you
13:32 - don't have that auto pep8 installed then
13:36 - we may need to install this from the
13:38 - command line using pip so actually I
13:41 - just installed that or copied that but
13:43 - I'm just going to type it out so pip
13:45 - install Auto Pep 8 now if you've never
13:48 - used pip before it's very simple to use
13:50 - uh I do have a separate video on how to
13:52 - use pip if you need a walk through but
13:55 - for now I'm just going to go ahead and
13:56 - do that pip install
13:59 - okay so now that is installed now let's
14:02 - go back to the module and see if uh that
14:05 - takes effect so let's make some changes
14:07 - here and add some Extra Spaces that
14:10 - aren't really pep8 compliant and when I
14:12 - save this it should autof format okay so
14:15 - I saved it and it didn't autof format I
14:18 - think sometimes whenever we install
14:21 - different uh packages we might need to
14:23 - restart um atom for those changes to
14:26 - take effect so I'm going to go ahead and
14:28 - quit out of atom and then open that back
14:30 - up okay so now let's see if I make a
14:34 - change and save it okay so that still
14:37 - didn't work let's open up the settings
14:38 - here okay so there is a check here for
14:42 - format on save so I forgot to check that
14:44 - so that was probably the problem so now
14:46 - let's go back to the module again now
14:48 - with that format on Save checked now if
14:52 - we save this okay so now after I save
14:54 - that it uh you know um autof formatted
14:58 - so let me do that again and save it and
15:00 - you can see that everything jumps back
15:02 - up to have the proper pep eight spacing
15:05 - now having that auto formatting on Save
15:07 - is especially nice when working with a
15:09 - team because you don't want a lot of the
15:11 - git differences to be differences in
15:14 - line spacing and things like that so
15:15 - using this helps a lot in those
15:18 - scenarios okay so the last package that
15:20 - we're going to install here is a ler
15:23 - that will point out any of our mistakes
15:26 - um so I'm going to go back over here to
15:28 - the setting and install packages and the
15:32 - linter that I like is a package called
15:36 - linter flake 8 so let's search for that
15:40 - okay so this is the package that we're
15:41 - looking for here at the top so I'm going
15:43 - to go ahead and install that and it also
15:47 - has to install a dependency in uh called
15:50 - linter so it installed that when we
15:52 - installed the flake8 linter okay so just
15:55 - like our Auto pep8 package let's open
15:57 - these settings and let's scroll down
15:59 - here to the readme file and we can see
16:02 - that it has installation instructions as
16:05 - well and just like with the Auto Pep 8
16:07 - um we need to pip install this flake8 if
16:11 - we don't have it installed already so
16:13 - I'm going to pull up my terminal and
16:15 - just like I did with the auto pep8 I'm
16:17 - going to do a pip install and that is
16:22 - flake8 okay so now without restarting um
16:26 - atom here uh let's open up our python
16:30 - module and let's type in some errors uh
16:33 - that our liner should catch so down here
16:36 - at the bottom let's make a for Loop here
16:39 - and let's accidentally so I'll say four
16:42 - num in and I'll just make a list of one
16:46 - two three four and I'm going to
16:48 - accidentally leave off the colon here at
16:50 - the end of this for Loop and within this
16:52 - for Loop I'll do a print and instead of
16:55 - printing numb I'm just going to print in
16:58 - so now if we save this now we have two
17:02 - errors here one says uh syntax error at
17:06 - line 26 this is unexpected indentation
17:09 - so now we can actually click on these
17:11 - lines here where it's showing the air
17:14 - and after looking at this line that's
17:16 - telling us where the syntax is bad if we
17:18 - look at this for a little bit then we'll
17:19 - probably realize that the colon is
17:21 - missing here so let's put that colon in
17:23 - and save that and now after I save that
17:26 - we can see that we have a Mark here that
17:28 - says unidentified name in at line 27 so
17:33 - once it points that out to us then we
17:35 - know that that should be numb instead of
17:37 - in oh it also looks like it gave us that
17:40 - syntax error too because I forgot to
17:42 - remove that line from earlier when I was
17:44 - showing the auto complete okay and after
17:47 - we remove all those errors then all of
17:49 - those linter warnings go away and it's
17:52 - nice having something like that watching
17:54 - in the background because we all make
17:55 - dumb mistakes like that and it's nice to
17:58 - have something that points those out
18:00 - okay so that was the last package that I
18:01 - wanted to show you but one thing that I
18:03 - mentioned before was that I'd like to go
18:05 - over uh how to run different versions of
18:08 - python or how to point to a virtual
18:10 - environment so if you watched my Sublime
18:13 - Text installation video and this is
18:16 - basically the equivalent of their build
18:17 - systems so that very first package that
18:20 - we installed to run our python code that
18:22 - was called Script if we want to run our
18:25 - python code using that then like I said
18:28 - before we can hit command I to run that
18:30 - but we can also hit command shift p to
18:33 - bring up our Command pallet and then we
18:35 - can type in script which is the name of
18:38 - that package now you can see here that
18:40 - this gives us the option to run that's
18:43 - what we've already seen before and then
18:45 - the keyboard shortcut over here is
18:46 - command I but there's also some
18:49 - additional options here and we can see
18:51 - here that one of these is run options so
18:53 - I'm going to go ahead and click on that
18:56 - and then it pops up these different
18:57 - options that we can use when running the
19:00 - script now the one that I want to change
19:02 - here is this command so this command
19:05 - here we can plug in the path to
19:06 - whichever python that we want to use so
19:09 - for example I know that my path to
19:11 - python 27 is in user bin python 27 so
19:18 - let's say that I wanted to run our
19:19 - script with this python 27 version um so
19:23 - we can either just run that um or we can
19:27 - save this as a a profile now we're going
19:30 - to want to save this as a profile
19:31 - because it's something that we're going
19:33 - to want to use over and over without
19:35 - having to type in that path every time
19:37 - so I'm going to save that as a profile
19:39 - and I'm just going to call that python
19:42 - 27 and now that python 27 pops up and I
19:45 - can run the script with that and now if
19:47 - we look at our output down here now
19:50 - sorry again that this text is uh small
19:53 - but um I'm not sure if there's a way
19:55 - that I can enlarge this or not but I'll
19:57 - go ahead and just read to you what it um
20:00 - popped out here but when we print our
20:02 - cy. executable it's printing out the
20:04 - path to that uh
20:06 - python27 and when I print out the cy.
20:09 - version now it's printing out 2.7 down
20:12 - here so it is using that python 27
20:14 - version now the script doesn't default
20:17 - to any of those profiles so if I just
20:20 - run the script regularly so I just ran
20:22 - it again and now down here it's popping
20:25 - out uh python 3.5 so if we want to run
20:30 - it with that python 27 profile again
20:33 - then we can just pull up that command
20:35 - pallet and type in script and there's
20:38 - one option here that is run with profile
20:42 - now usually it gives the keyboard
20:43 - shortcut over here I'm not sure why it's
20:45 - not showing up now but the uh keyboard
20:47 - shortcut on a Mac is command shift K so
20:51 - now that I clicked on run with profile
20:54 - then you can see that it pops up with
20:55 - the profiles that I have available and
20:57 - we've only made the one python 271 so
21:00 - now I can run it with that and down here
21:02 - at the bottom this is uh the output for
21:05 - this for the CIS stop version is Python
21:08 - 2.7 so it did run that correctly and you
21:11 - can set those run options up for
21:13 - multiple versions of python or you can
21:15 - point to any virtual environment if you
21:17 - need to run a python in a virtual
21:20 - environment so I think that's going to
21:21 - do it for this video uh that is
21:23 - everything specific to how I set up a
21:25 - python development environment within
21:27 - atom uh I hope people found this useful
21:30 - uh the most popular questions that I get
21:31 - on this channel are people asking how to
21:34 - set up python development environments
21:36 - and what I recommend so like I mentioned
21:38 - earlier I also use Sublime Text and have
21:41 - done a video on how to set up a python
21:43 - environment within Sublime Text also and
21:46 - I'll put a link to that video in the
21:47 - description section below now if anyone
21:50 - is wondering if I would recommend
21:51 - Sublime Text or adom then I would just
21:54 - say that it depends so I think that Adam
21:57 - is more userfriendly if you're just
21:58 - getting started out and if you don't
22:00 - want to purchase Sublime Tex then I
22:02 - would say that Adam is a great option
22:04 - but I've been using Sublime Text for so
22:06 - long that I'm more used to it and I find
22:09 - myself going back to it often but really
22:12 - the choice is just up to you and
22:13 - whichever you prefer so hopefully having
22:16 - videos on how to set up environments in
22:18 - both of these editors now you can play
22:20 - around with them and just decide which
22:22 - one you personally like more so if
22:24 - anyone has any questions about what we
22:25 - covered in this video then feel free to
22:27 - ask in the comments section below and
22:28 - I'll do my best to answer those uh if
22:30 - you enjoy these tutorials and would like
22:32 - to support them then there are several
22:33 - ways you can do that uh the easiest way
22:35 - is just to Simply like the video and
22:37 - give it a thumbs up and also it's a huge
22:39 - help to share these videos with anyone
22:40 - who you think would find them useful and
22:42 - if you have the mem you can contribute
22:43 - through patreon and there's a link to
22:45 - that page in the description section
22:46 - below be sure to subscribe for future
22:48 - videos and thank you all for watching