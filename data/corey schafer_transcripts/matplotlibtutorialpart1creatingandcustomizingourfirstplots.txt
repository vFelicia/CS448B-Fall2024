00:00 - hey there how's it going everybody in
00:01 - this series of videos we're going to be
00:02 - learning how to use the matplotlib
00:03 - library and python so matplotlib is a
00:06 - plotting library for python that allows
00:08 - us to create some great looking graphs
00:10 - from our data so this is used a ton in
00:12 - the data science field and also in
00:14 - applications where we need to visualize
00:16 - our data so I have the matplotlib
00:18 - website open here and we can see on
00:20 - their example page that you can make
00:22 - some really nice visualizations using
00:24 - matplotlib and we'll be learning how to
00:27 - do several of these in this series so in
00:29 - this video we're going to be going over
00:30 - the basics of matplotlib and start out
00:33 - with an easy line plot we'll also learn
00:35 - how to customize the plot style and
00:37 - labels to the axes add a title create a
00:41 - legend and things like that now I'd also
00:43 - like to mention that we do have a
00:45 - sponsor for this series of videos and
00:46 - that is brilliant org so I really want
00:49 - to thank brilliant for sponsoring this
00:50 - series and it would be great if you all
00:52 - could check them out using the link in
00:54 - the description section below and
00:55 - support the sponsors and I'll talk more
00:57 - about their services in just a bit so
00:59 - with that said let's go ahead and get
01:00 - started
01:01 - ok so first we need to install
01:03 - matplotlib so we can do this easily
01:05 - using pip so I'm going to open my
01:08 - terminal here and we can simply install
01:11 - this with a pip install now I have a
01:14 - virtual environment activated you don't
01:16 - need to be using a virtual environment
01:17 - but in my opinion it's always a good
01:19 - idea to create a new environment for
01:21 - when you're starting new projects even
01:23 - if we're just testing stuff out now if
01:25 - you don't know how to create virtual
01:26 - environments then I'll leave a link to
01:28 - my video explaining those in the
01:30 - description section below ok so to
01:32 - install matplotlib we can simply say pip
01:34 - install and that is Matt plot lib so
01:39 - let's install that and once we have this
01:42 - installed then we're going to go learn
01:44 - how to create a simple plot so I'm using
01:47 - sublime text for these videos so I'm
01:49 - going to open up sublime here and I just
01:54 - have a new folder here called matplotlib
01:56 - and I'm currently within this MPL demo
02:00 - dot Pi file here now it's also very
02:03 - popular to use Jupiter notebooks when
02:05 - working with data because you can run
02:06 - specific cells at a time and also you
02:08 - can see your visualizations in line but
02:11 - some people find it difficult to get up
02:12 - and running would you
02:13 - notebooks so I'm just going to use a
02:15 - regular editor since more people are
02:17 - probably probably familiar with this but
02:19 - if you're using Jupiter then you should
02:21 - be able to follow along just fine now if
02:23 - you'd like to learn how to use Jupiter
02:25 - notebooks then I do have a separate
02:26 - video specifically on that so I'll be
02:28 - sure to leave a link to that video in
02:30 - the description section below as well if
02:32 - anyone is interested
02:33 - ok so let's create some simple plots to
02:35 - get us started out so first I'm going to
02:38 - import PI plot from the matplotlib
02:40 - module so I'm going to say from
02:42 - matplotlib and we want to import PI plot
02:47 - and I'm going to import this as PLT
02:50 - that's a common convention there to just
02:53 - import that as PLT so that we don't have
02:54 - to write out PI plot every time we want
02:56 - to use that and now let's create some
02:58 - sample data that we want to plot so in
03:00 - this video we're gonna add our own data
03:02 - here within Python and in the next video
03:04 - we'll see how to read in data from an
03:06 - external source like a CSV file so I'm
03:09 - gonna use some data that I grabbed from
03:10 - the annual stack overflow developer
03:12 - survey they actually just released the
03:14 - 2019 data publicly the day that I was
03:16 - putting this video together so it was
03:18 - good timing on that part so the data
03:21 - that I'm going to be using from that
03:22 - survey is the median salary for a
03:25 - developer based on their age and this is
03:27 - data that I parsed out of the results
03:29 - myself so I'll be sure to leave a link
03:31 - to my data files here in the description
03:33 - section below for those of you who'd
03:35 - like to follow along also I'm going to
03:37 - make a video in the near future showing
03:39 - how I cleaned and parsed out that data
03:41 - out of their results but for now let's
03:43 - just continue on with plotting this so
03:46 - first I'm going to create a list and I'm
03:48 - going to call this dev underscore X and
03:51 - this will be the values for the x-axis
03:54 - on the plot and these will be age ranges
03:57 - now I'm a pretty slow typer sometimes so
03:59 - I'm going to use some snippets here and
04:01 - again I'm gonna post the link to these
04:04 - snippets and the description section
04:05 - below if anyone wants to grab these
04:07 - themselves so I'm just going to grab
04:10 - these from my snippets here just so I
04:12 - don't have to type all these out so I'm
04:15 - going to grab those and paste those in
04:17 - and this is just a list here from 25 to
04:20 - 35 now in the actual survey they did
04:22 - actually have all of the ages included
04:24 - but I didn't want to crowd the screen
04:26 - with data right off the bat
04:27 - so we're just gonna work with a subset
04:29 - of the ages between 25 and 35 for now
04:31 - but if you stick around to the end of
04:33 - the video then we'll plot out the median
04:34 - salaries for all of the ages that had
04:37 - enough data okay so now I'm going to
04:38 - create a list and I'm going to call this
04:40 - dev Y and this will be the values of our
04:43 - y-axis on the plot and these will be the
04:46 - median salaries for the ages that we
04:48 - added into our other list here so let me
04:51 - also grab these from my snippets file so
04:54 - I'm going to grab those and paste those
04:56 - in okay so now that we have a list of
04:59 - values that we want for our x-axis here
05:01 - as dev X and a list of values that we
05:03 - want for our y-axis here as dev Y so now
05:07 - let's plot this so to plot this data
05:09 - it's as easy as simply saying
05:12 - PLT dot plot and first we want to pass
05:16 - in what with the data for our x-axis
05:18 - which is going to be dev X and then the
05:21 - data for our y-axis which is dev Y now
05:24 - if you've ever looked at the matplotlib
05:26 - documentation or looked at other
05:27 - examples of people creating plots then
05:30 - you may have seen them create plots by
05:31 - creating figures and axes and subplots
05:34 - and all kinds of other stuff and we are
05:36 - going to look at that further on in the
05:37 - series but we're going to keep it simple
05:39 - now and just use what we have here with
05:42 - PLT dot plot so this is going to allow
05:45 - us to work with a single plot which is
05:47 - perfect for the data that we have right
05:49 - now so if we were to run this right now
05:51 - it's not actually going to show us the
05:53 - plot if we want the plot to show then we
05:55 - have to say PLT dot show and now if we
06:00 - run this then we can see that we get a
06:03 - very basic plot here so what this
06:06 - plotted out is a basic plot where we
06:08 - have our ages down here on the x-axis so
06:11 - between 25 and 35 and those median
06:14 - salaries and that other list are on the
06:16 - y-axis here so this does make sense to
06:19 - me it looks like the salaries typically
06:20 - get higher as you get older so
06:23 - matplotlib comes built in with some nice
06:25 - features and we can see that this window
06:27 - here has some controls and options down
06:29 - here at the bottom left so let's go
06:31 - ahead and take a look at some of these
06:32 - so first we have a pan to where we can
06:36 - pan around if we want to see anything in
06:38 - particular we also have a zoom
06:41 - if we click on the magnifying glass and
06:42 - we want to zoom in on you know 26 to 28
06:46 - then we can do that and then pan around
06:48 - from there we have the arrows here and I
06:52 - think these are undo and redo so if I
06:55 - hit back then that should take me back
06:57 - to what we did before and this resume
06:59 - Xand things like that and finally we
07:01 - have home here and also we have this
07:05 - which is just more finely detailed zoom
07:08 - configurations here I hardly ever use
07:10 - that I usually just use the pan and zoom
07:12 - here and lastly we can save this so if I
07:16 - wanted to save this as a PNG then I
07:18 - could click that and save this plot as a
07:20 - PNG file so that's a quick little
07:22 - overview of this window here ok so now
07:25 - let me close this down and now let's
07:28 - look at how to add some more information
07:29 - to our plot so right now there's no way
07:32 - to actually tell what that data
07:33 - represents if we were to send this to
07:35 - somebody or if we were to look at this
07:37 - ourselves then no one would actually
07:39 - know what that X and that y axis were
07:42 - supposed to be there's no labels or
07:44 - anything like that now the point of
07:46 - these plots is to visualize the data and
07:48 - the easiest to digest format as possible
07:50 - and relay the information that could
07:52 - just get hidden in the numbers so we
07:54 - need to have some labels here to show
07:56 - what this actually represents so first
07:58 - let's give our entire plot a title so to
08:02 - do this I'm going to do this right above
08:04 - plot dot show I'm going to say
08:06 - PLT dot title and let's pass in a title
08:10 - of median salary and then I'll say that
08:15 - the salary is in USD by age okay and now
08:19 - to label our X and y axis it's as easy
08:23 - as saying
08:24 - PLT dot X label and we want our X label
08:29 - to be ages and right below that I'm
08:31 - gonna say PLT dot whoops wide label and
08:36 - that Y label let's say median salary and
08:39 - again we will specify USD okay so now if
08:44 - we run what we have here then now our
08:47 - plot is a little bit more detailed so
08:50 - now we have some more useful information
08:51 - here so we have a plot title up here
08:54 - that's
08:54 - top that tells us what this chart is
08:56 - about and our X and our Y axis now have
08:59 - labels explaining those as well okay so
09:01 - now let's add another line to our plot
09:04 - so let's say that I wanted to also plot
09:06 - the median salaries by age for Python
09:09 - developers specifically so the values
09:11 - that we have right now are for
09:13 - developers of any language
09:14 - so now let's do Python so to do this we
09:17 - can simply create more lists and plot
09:20 - just like we did the first ones here so
09:23 - let me close this down so I grab that
09:26 - data from the Stack Overflow survey as
09:29 - well and I added those to my snippets
09:31 - also so let me grab those from the
09:33 - snippets and those are right here median
09:35 - Python developer salaries by age so I'm
09:38 - going to grab this pydev X and this PI
09:41 - dev Y so I'm going to go back to my
09:44 - script here and right below my other
09:47 - data right below where I'm running
09:49 - PLT dot plot of that other data I'm
09:51 - going to paste this pydev data in and
09:54 - now I can plot those simply by saying
09:58 - PLT dot plot and now we want to pass in
10:03 - pi dev x and we want to pass in pi dev y
10:08 - let me get some spacing there so now if
10:12 - I were to actually run this right now
10:13 - then that would work but before I do
10:15 - that if we look at our x axis here then
10:19 - we are just repeating those same age
10:22 - ranges from the other list so we have 25
10:26 - to 35 so instead of repeating these and
10:30 - both of our plots let's just rename our
10:32 - X values at the top here and use that
10:35 - for both plots so instead of dev X and
10:37 - pydev X I'm going to just remove that
10:41 - pydev X there and now this X list here
10:46 - at the top I'm going to rename this to
10:48 - ages underscore X ages underscore X and
10:52 - now I'm going to use that for both plots
10:54 - so I'm going to use it in my first plot
10:57 - there and replace Devex
10:59 - and in the second plot I'm going to
11:01 - replace that pydev X so now we're using
11:03 - this same data for our x-axis and the
11:07 - y-axis we are
11:08 - plotting a different data so like I said
11:10 - we could have had that repeated list in
11:12 - there and it would have worked just fine
11:13 - but this is just a way of cutting down
11:15 - on repeated code okay so now if we run
11:19 - this let me go ahead and make that
11:20 - output little smaller there since we're
11:23 - not using that so now if I run this then
11:27 - we can see that now we are getting two
11:28 - lines so that's nice
11:31 - but we don't know which line is which so
11:33 - we need to add a legend to tell us which
11:36 - line represents what data so let me
11:38 - close this plot here and there are two
11:42 - ways of adding legends so the first way
11:44 - is to do it like this I could add labels
11:47 - for the legend as a list of values and
11:50 - order in the order that they were added
11:52 - to the plot so down here at the bottom
11:55 - whoops down here at the bottom actually
11:57 - let me actually put this below the title
12:00 - here so I could say PLT dot legend and
12:05 - now we can pass in a list of values in
12:08 - the order that they were added to the
12:10 - plot so our all of our developers this
12:14 - dev Y was added to our plot first where
12:16 - we did PLT dot plot and the Python
12:19 - developers was added second so PLT dot
12:21 - plot here with pi dev Y so I could pass
12:24 - in a list and just say all devs is the
12:28 - first value and Python is the second
12:32 - value and if I run this then we can see
12:35 - that that works we get a plot and the
12:39 - legend is telling us which line is which
12:41 - here but there's a way that I actually
12:43 - like to do legends that I really think
12:46 - is better than this so let me close down
12:48 - this plot here now I don't really like
12:50 - this method of adding legends because
12:52 - you have to know the order that all of
12:54 - these things were added to the plot and
12:56 - I feel like that's extremely error-prone
12:58 - so I think that this is a better way to
13:00 - do it so we can pass a label argument to
13:03 - our plot methods so instead let me copy
13:07 - this part here where I said all dibs
13:09 - instead up here where we did our first
13:12 - plot I can pass in a label argument and
13:16 - say label is equal to all devs for that
13:19 - one and for the second plot
13:22 - I can say label is equal to and this
13:26 - will be Python and now when we actually
13:29 - run this legend method here we can
13:33 - actually do that without any arguments
13:36 - so I'm just going to leave that empty
13:37 - and now it's just going to use these
13:40 - plot labels instead so now if I run this
13:43 - then we can see that that works but I
13:46 - feel like this is a lot less error-prone
13:48 - and easier to read and it also kind of
13:51 - self documents our code as well if we
13:54 - look back here at the code then we can
13:57 - see that this is self documenting in a
13:59 - way where it's telling us what we're
14:01 - actually plotting here so I think that
14:02 - that's a much better way to do it okay
14:04 - so now that we have those plotted let's
14:06 - look a bit at how we can change some of
14:08 - the formatting of this plot so let's say
14:10 - that I wanted some different colors and
14:12 - styles for the lines and things like
14:14 - that I feel like since one line is just
14:17 - developers in general I'm just going to
14:19 - make that line in gray and we'll make
14:21 - the Python line blue since that's one of
14:23 - the main colors and the Python logo now
14:26 - there's a way to pass all of this
14:28 - information in all at once but I hardly
14:30 - ever do it this way just because I think
14:32 - it's hard to read so I'll show you a
14:34 - quick example just in case you see this
14:36 - and someone else's code but then I'll
14:38 - show you how I normally do it as well so
14:40 - we could pass in all of the information
14:43 - at once by passing in a format string
14:46 - after our Y values in our plot method so
14:49 - let me pull up a web page here and show
14:52 - you what this format string actually
14:54 - expects so whoops and I did have it
14:57 - pulled up here but I may have over
15:00 - written it here so let me see okay here
15:02 - we are format strings and let me make
15:04 - this just a little bit larger here so
15:06 - that everybody can see so we can see
15:09 - here that it says that a format string
15:11 - consists of a part four color marker and
15:15 - a line so format string looks like this
15:18 - marker line color so let's say that for
15:21 - our line graph we wanted a black dashed
15:24 - line so to do that we can scroll down
15:26 - here these are the marker styles we're
15:29 - not using markers right now we're using
15:30 - lines so I'm going to go down to the
15:32 - line styles so we can see that just a
15:34 - single dash here
15:35 - they saw the line style a dash dash is a
15:38 - dash line style so that's what I'm gonna
15:40 - use but then they also have a couple of
15:42 - others here now let's also look at the
15:44 - colors here so these are the general
15:46 - colors so B is blue so if I want it
15:49 - black then that is K so if I go back up
15:53 - to our format string here then it says
15:56 - that let's see here yeah so if I go up
15:59 - here yeah so color marker line okay so
16:02 - now let's go back to our code here and
16:06 - now let's pass in a format string after
16:09 - our Y value so I'm going to say that I
16:14 - want this one to be black so that was K
16:16 - and then - - is the dashed line so for
16:20 - Python if I wanted this one to be blue
16:22 - then I could just pass in a B for blue
16:26 - and then I'll leave everything else as
16:28 - the default since a solid line is the
16:31 - default we don't have to change anything
16:33 - there so now if I save that and run it
16:37 - then we can see that now our line with
16:40 - all of our developers is this dashed
16:42 - black line here and our python line is
16:45 - this blue line so we were able to change
16:47 - that up a little bit now like I said
16:49 - I've never really liked these format
16:51 - strings that contain the colors and the
16:55 - marker styles and line styles all in one
16:57 - because I don't feel like that's very
16:59 - readable I always forget how to write
17:02 - these down and what these are supposed
17:04 - to be so I just wanted to show you these
17:06 - in case you saw them in someone else's
17:07 - code but I prefer to be more explicit
17:10 - and make our code a bit more readable so
17:13 - to do that we can pass these in as
17:15 - arguments instead so instead of doing it
17:17 - this way
17:18 - I'm going to say that color is equal to
17:22 - K and then I will say line style is
17:26 - equal to - - now that's a little harder
17:31 - or that's a little more code there but I
17:33 - think that that is much easier to read
17:35 - so also down here in the Python plot I'm
17:37 - going to say color is equal to B so for
17:40 - a blue and that should work exactly the
17:43 - same as our format string worked but in
17:45 - my opinion it's just more obvious what's
17:47 - going on there so if we
17:49 - that then we can see that we get the
17:51 - exact same results there now if you also
17:54 - wanted to add markers to your lines then
17:56 - we can do that as well to do that we
17:59 - could simply say so after line style
18:01 - here I'm gonna say marker is equal to
18:04 - and if you want to know what marker
18:06 - styles you can use you can go back to
18:08 - that formatting page where I showed all
18:10 - those different formatting options but I
18:13 - know that some of these off the top of
18:14 - my head I know that the dot is one and
18:18 - let me also put one in here for Python
18:21 - as well and I know that circle will do
18:24 - like a larger marker there so now if I
18:28 - save that and run it then we can see
18:30 - that now these have markers here so we
18:33 - have these small markers for all
18:35 - developers and these bigger markers for
18:37 - Python and I'll be sure to add a link in
18:39 - the description section below to that
18:41 - formatting page in case you want to
18:43 - check out more options that you have
18:44 - here now I don't really like these
18:46 - markers on this specific chart so I'm
18:49 - gonna go ahead and go back and just undo
18:52 - a couple of steps here before we put
18:55 - those markers in okay so we can also use
18:58 - hex color values for our lines as well
19:00 - and that's normally what I use since you
19:03 - have a lot more color options and it's
19:04 - easier to find color palettes online
19:07 - that look good and contain those hex
19:09 - values so I have some written down here
19:12 - that I'm going to use for our plots so
19:14 - for the developers line I'm just going
19:16 - to use a hex value here so for color I'm
19:19 - just going to use a hex value of four
19:22 - four four four four four and if you
19:25 - don't know how hex values work the first
19:27 - pair of numbers are going to be for the
19:30 - red values the next two numbers are
19:32 - going to be for the green values and the
19:34 - last two numbers are going to be for the
19:36 - blue values so with all those being the
19:38 - same it's going to generate a shade of
19:40 - gray and this is a darker shade of gray
19:43 - and you can find hex color palettes
19:45 - online if you'd like to come up with
19:47 - some of your own now for Python I'm
19:49 - going to set this to this steel blue
19:51 - color that I found online so I'm going
19:54 - to change this to be a hex value of five
19:56 - a 7d nine
19:59 - and just to show one more line of
20:01 - information and colors here let me also
20:04 - add in some JavaScript data that I have
20:06 - here in my snippets as well so I'm going
20:08 - to go back to the snippets and now since
20:11 - we're sharing the X we can just copy the
20:14 - Y values that I want here so I'm going
20:16 - to copy these Y values and these are the
20:17 - median JavaScript developer salaries by
20:19 - age and underneath our Python data I'm
20:23 - going to paste that in and let me
20:27 - actually get this plotting data here
20:30 - beside what it's actually plotting there
20:32 - okay and now let me copy the Python line
20:35 - here and I'm just going to use that for
20:38 - my JavaScript data but instead of
20:41 - plotting the pi dev Y I'm going to plot
20:43 - the j/s dev Y for the color I'm going to
20:47 - change this to a yellowish color so this
20:49 - will be ad ad 3b and for the label I'm
20:53 - going to say Java Script ok so if we run
20:57 - this then we can see that now we get
21:00 - three lines here on our plot all of them
21:02 - have labels and legends and they all
21:05 - have their own customized colors and
21:07 - styles as well so that looks pretty good
21:09 - now I'm not sure why the Python
21:11 - developers and the survey are reporting
21:13 - higher salaries like this I didn't
21:15 - expect it to be that much of a
21:16 - difference between you know the
21:18 - different types of developers but that's
21:20 - just what was in the data now I feel
21:23 - like these lines are a little bit thin
21:24 - right now so let's say that we wanted
21:26 - the lines for the specific languages to
21:29 - be a little bit wider so that they're
21:31 - more emphasized and just keep general
21:33 - developers as it is so to do that we can
21:36 - add another argument to both of our plot
21:40 - methods here and to make these lines a
21:42 - little thicker
21:43 - I can just say line width is equal to
21:46 - and I think the default is 1 so let's
21:49 - try 3 and see what this looks like so
21:52 - I'll do that with both Python and
21:55 - JavaScript and I'm gonna leave the all
21:57 - developers as it is now this could
21:59 - actually cover up our dotted line
22:01 - because lines are layered in the order
22:03 - that they're added so instead I'm going
22:06 - to move our dotted line to the bottom
22:08 - here so I'm going to grab this plot and
22:11 - grab this data and
22:12 - I'm gonna move that to the bottom so
22:14 - that it's plotted on top just in case it
22:16 - would have been hidden behind any of
22:18 - those other two lines so do you remember
22:20 - earlier when we changed our legend to
22:22 - use these labels instead of passing them
22:24 - directly into our legend method well
22:27 - this is why that was a good idea because
22:29 - moving the plotting order like we did
22:31 - just now would have meant that we needed
22:34 - to manually come down here and change
22:36 - the order that we passed in those
22:38 - legends also and if we forgot that then
22:40 - our plot would just be wrong but since
22:43 - we did it this way by using these labels
22:45 - instead that just updates automatically
22:47 - so that's why I preferred that method so
22:50 - let's go ahead and run what we have here
22:53 - and we can see that now our language
22:56 - lines are a bit thicker but we can still
22:58 - see that all developers line overtop of
23:01 - the Java Script line here where it would
23:04 - have been hidden behind okay so that
23:05 - looks pretty good now I'm on a larger
23:08 - monitor here but whenever I was running
23:10 - this on my laptop I noticed some weird
23:13 - padding issues if you ever noticed that
23:15 - your padding isn't very good and that
23:17 - stuff is getting cut off then there's a
23:19 - way that we can take care of that and
23:21 - let me go back to the code here and to
23:24 - take care of that I'm just going to do
23:25 - this right above
23:27 - PLT dot show to do this I'm going to add
23:30 - in a line if that automatically adjusts
23:33 - our plot parameters to give some padding
23:35 - and to do this it is just PLT dot tight
23:39 - underscore layout and that is a method
23:42 - so if I run this now then it kind of
23:45 - looks the same on my machine
23:47 - but on my laptop it made the padding a
23:50 - lot better whenever I ran that now
23:51 - there's one more thing about the plot
23:53 - that I think that we could improve here
23:55 - now if we look at this if we go out here
23:57 - further to the right it might be harder
24:00 - to tell when we cross certain salaries
24:02 - so if we put in a grid then I think it
24:05 - would make this a lot easier to read so
24:07 - if we go back to our code we can put in
24:10 - a grid really easily just by saying and
24:12 - I'll just do this above where we
24:14 - currently are I'll just say PLT dot grid
24:18 - and we just have to pass in a value of
24:20 - true so if we run that then now we can
24:23 - see we have a grid so we can tell
24:25 - exactly when
24:26 - each of these lines crosses certain
24:29 - salaries and ages here okay so that's
24:31 - looking pretty good now one more thing
24:33 - before we finish let's look at how we
24:35 - can change the style of our plots and
24:37 - make these look a bit better now we have
24:40 - some built in styles that we can use
24:42 - with matplotlib so let me go to the top
24:46 - of our file here and let's use some of
24:49 - these here so underneath our imports I'm
24:52 - going to say PLT dot style and to see
24:56 - the available styles that we can use we
24:59 - can access a list of available styles by
25:02 - saying PLT style dot available now
25:07 - that's not a method so you don't want to
25:09 - put in parenthesis there it's just a
25:11 - attribute so don't execute that so now
25:14 - let's print that out to see what styles
25:18 - we have available and I'm going to
25:20 - comment out our PLT show so that a plot
25:24 - doesn't show up when we run this so I'm
25:26 - going to run this and I'm gonna make our
25:28 - output a little bigger here so that we
25:31 - can see these and these are the
25:32 - available styles that we can use that
25:34 - are built in the matplotlib and you can
25:36 - experiment around with these and see
25:38 - which ones you like personally I really
25:40 - like the 5:38 style and I also like the
25:44 - Seabourn and the ggplot styles and I'll
25:48 - probably use a you know a few of those
25:50 - throughout the series just so we can get
25:52 - an idea of what some of these different
25:53 - styles looks like so let's say that I
25:55 - wanted to use the 538 style so to do
25:58 - this I could simply say I'm going to
26:01 - overwrite our print statement here I'm
26:03 - gonna say peel T dot style dot use and
26:06 - then pass in the string of 538 so now
26:11 - let me uncomment out PLT show and let me
26:16 - run this so when I run this I don't know
26:20 - if you remembered what that looked like
26:22 - before but now this is a bit of a
26:25 - different style and these Styles all
26:27 - have their own unique way of coloring
26:28 - lines and stuff like that too so you
26:30 - could also draw try plotting these
26:32 - without your custom colors and see if
26:34 - you like the Styles default colors more
26:36 - than the ones that we specifically added
26:38 - for our line
26:39 - so I'm actually gonna try that I'm gonna
26:41 - remove my colors and line wits for
26:44 - Python and JavaScript plots and I'll
26:47 - just leave the all devs plot as it is so
26:49 - for Python and JavaScript I'm going to
26:53 - remove the line width and I'm gonna
26:54 - remove the color and I'll do that for
26:57 - JavaScript as well and let me make this
27:01 - output a little smaller here and I'm
27:02 - also going to remove the grid as well
27:04 - since some of these Styles also have
27:07 - their own grid preferences as well so
27:09 - I'm going to remove that okay so now
27:12 - with all those in place first let me
27:14 - comment out where I'm using the style
27:16 - and run that plot so that is the default
27:19 - matplotlib style and now let me plot
27:23 - with the 538 so if I look at both of
27:28 - these then you can see the difference
27:30 - here there is a definitely a different
27:33 - style with the 538 plot over here and I
27:36 - really like the 538 default colors and
27:39 - styles here now if you want to play
27:41 - around with the different styles then
27:42 - it's as easy as choosing another one
27:44 - from the list that we printed out just a
27:46 - second ago so if I wanted to try a
27:49 - ggplot style instead then I could just
27:52 - say that use ggplot if I run that then
27:56 - we can see that now we get a different
27:59 - looking style and this one kind of has
28:00 - like a grayish background with some
28:02 - thinner lines here
28:03 - now speaking of styles let me show you
28:05 - something else that I think is pretty
28:06 - cool that's built-in the matplotlib and
28:08 - it's nice if you have like a blog or
28:10 - something where you're making some plots
28:12 - and want to have a little bit of fun
28:13 - with it now most of you have probably
28:15 - heard of xkcd comics they published some
28:18 - online comics that are usually pretty
28:19 - funny and a lot of those are tech
28:21 - related also for those of you that have
28:23 - watched my videos in the past then you
28:25 - might know that the python has a
28:26 - standard library module called
28:28 - antigravity and it actually opens up one
28:31 - of their comics and at the browser
28:32 - anyways they have a pretty distinct
28:35 - style with their comics and matplotlib
28:37 - actually has a method that will mimic
28:39 - the style of their comics and it's super
28:42 - easy to use so in order to use that all
28:45 - we'd have to do I'm going to overwrite
28:47 - this style line here now this is
28:50 - actually a method instead of a style so
28:52 - this will be
28:53 - PLT dot xkcd and that is a method and
28:57 - with that small change in place if I run
29:00 - this and make this a little larger then
29:03 - now you can see that this is kind of in
29:04 - the style of those xkcd comics so it
29:07 - kind of looks like a graph that you
29:09 - would see embedded in a comic somewhere
29:11 - it's kind of got these squiggly lines
29:13 - here that kind of makes it look like it
29:14 - was hand drawn by somebody so I think
29:16 - that's a pretty cool built-in feature
29:17 - that matplotlib has and it's fun way to
29:20 - mix up your plots if you're making them
29:21 - for something that isn't too serious
29:23 - so if you wanted to actually put this on
29:26 - your website or something then you could
29:28 - just save this as a PNG like we saw
29:31 - before and then upload it that way now
29:33 - we saw how to do that here within the
29:36 - window but we can also do this
29:38 - programmatically as well so if I close
29:41 - this plot here if we go back to the code
29:44 - I'm just going to save this right here
29:47 - before PLT dot show in order to save
29:50 - this as a PNG then we can simply say PLT
29:54 - dot save fig and now I'm going to just
29:59 - save that as plot dot PNG or something
30:02 - like that and that will save an image
30:04 - called plot PNG to my current directory
30:07 - now if I wanted to save it somewhere
30:09 - else then you can also pass in a full
30:12 - path here as well and it'll save it to
30:14 - whatever path you pass in so I'm going
30:16 - to run this and it's going to show that
30:19 - graph there but if I open up my current
30:22 - directory we can see that I have a plot
30:24 - dot PNG here and if I open that then we
30:27 - can see that it saved that PNG file here
30:30 - in my directory okay so real quick let
30:33 - me do one more thing before we finish up
30:35 - here so I mentioned towards the
30:36 - beginning of the video that I'd plot the
30:39 - data for ages of 18 to 55 that's the
30:43 - larger set of data that they had in the
30:45 - survey if anyone was interested in
30:48 - seeing that now I didn't do it earlier
30:49 - because I didn't want to crowd the
30:51 - screen with tons of data but let me grab
30:54 - that from my snippets file and see what
30:56 - this looks like so here within the
30:58 - snippets these are all of the ages that
31:01 - had enough data here they had more data
31:03 - ages than this but these were the only
31:05 - ones that had
31:07 - I think it was like over a hundred
31:09 - answers to the question or something
31:12 - like that I can't remember exactly the
31:14 - not the the cutoff that I used there but
31:17 - it was something like that there were
31:19 - some people who you know in their 80s
31:23 - and 90s that answered the survey but
31:25 - there were so few of them that it was
31:27 - hard to get a mean that was trustworthy
31:30 - so these are the ones that had you know
31:33 - hundreds of answers so lastly let me
31:37 - grab this last list here this will be
31:40 - the last one that I need to replace and
31:43 - again these will be available for
31:45 - download on my github page if anybody
31:48 - else wants to follow along so now that
31:50 - we have all that data copied and pasted
31:52 - into our script now let me save that and
31:54 - run it and now this is the data for all
31:58 - of those ages and the median salaries so
32:02 - it looks like that big gap between
32:03 - Python developers and other developers
32:05 - it was mainly between the ages of 25 and
32:08 - 35 that's what we saw here and once we
32:11 - plot the rest of these then they're a
32:13 - bit more in line the other languages
32:15 - catch up around in here and Python
32:17 - doesn't have such a big gap anymore but
32:19 - it still looks like Python it does have
32:21 - the leverage here in most of these ages
32:24 - though okay so before we end here I'd
32:26 - like to also mention the sponsor of this
32:28 - video and that is brilliant org so in
32:31 - this series we've been learning about
32:32 - matplotlib and how to plot data in
32:34 - python and brilliant would be an
32:36 - excellent way to supplement what you
32:38 - learn here with their hands-on courses
32:40 - they have some excellent courses
32:41 - covering the fundamentals of statistics
32:43 - and these lessons do a deep dive on how
32:45 - to think about and analyze data
32:47 - correctly they even use Python in their
32:49 - statistics courses and will quiz you on
32:51 - how to correctly analyze the data within
32:53 - the language they're guided lessons will
32:55 - challenge you but you also have the
32:57 - ability to get hints or even solutions
32:59 - if you need them it's really tailored
33:01 - towards understanding the material
33:02 - they've also recently released a
33:04 - programming with Python course and they
33:06 - even have a coding environment built
33:08 - into their website so that you can run
33:10 - code directly in the browser and that is
33:12 - a great way to compliment watching my
33:14 - tutorials because you can apply what
33:16 - you've learned in their active
33:17 - problem-solving environment and that
33:19 - helps to solidify that
33:21 - so to support my channel and learn more
33:22 - about brilliant you can go to brilliant
33:24 - org ford slash CMS to sign up for free
33:27 - and also the first 200 people that go to
33:30 - that link will get 20% off the annual
33:32 - premium subscription and you can find
33:34 - that link in the description section
33:36 - below
33:36 - again that's brilliant dot org forge
33:39 - slash c m/s okay so I think that is
33:43 - going to do it for our first matplotlib
33:44 - video I hope you feel like you got a
33:46 - good introduction for how to create some
33:48 - simple plots and Python and also how to
33:50 - customize these in different ways in the
33:52 - next videos in this series we're going
33:54 - to be learning how to create all kinds
33:55 - of different plots so we're gonna learn
33:57 - how to create bar charts pie charts
33:59 - scatter plots histograms stack plots
34:02 - we're gonna be plotting time series data
34:04 - and things like that now we're also
34:06 - going to learn how to create multiple
34:07 - subplots in case you want to plot more
34:10 - than one thing at a time so in the next
34:12 - video we're going to be learning how to
34:14 - create bar charts and we're also going
34:16 - to learn how to load in data from a CSV
34:17 - instead of having the data directly in
34:20 - our Python scripts like we did here so
34:22 - be sure to stick around for that but if
34:24 - anyone has any questions about what we
34:26 - covered in this video then feel free to
34:27 - ask in the comment section below and
34:29 - I'll do my best to answer those and if
34:30 - you enjoy these tutorials and would like
34:32 - to support them then there are several
34:33 - ways you can do that the easiest ways to
34:35 - simply like the video and give it a
34:36 - thumbs up and also it's a huge help to
34:38 - share these videos with anyone who you
34:39 - think would find them useful and if you
34:41 - have the means you can contribute
34:42 - through patreon and there's the link to
34:43 - that page in the description section
34:44 - below be sure to subscribe for future
34:46 - videos and thank you all for watching
34:59 - you