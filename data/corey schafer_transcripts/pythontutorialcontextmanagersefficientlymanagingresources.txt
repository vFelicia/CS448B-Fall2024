00:00 - hey there how's it going everybody in
00:01 - this video we'll be learning how to use
00:02 - context managers within Python so
00:05 - context managers allow us to properly
00:06 - manage resources so that we can specify
00:09 - exactly what we want to set up and tear
00:11 - down when working with certain objects
00:13 - so for example if anyone has ever
00:15 - watched my video on working with file
00:17 - objects then I showed two different ways
00:18 - that we could work with the files and
00:20 - the first is like we currently see up
00:22 - here at the top where we're opening the
00:25 - file and then doing something with it in
00:27 - this case we're just writing some text
00:28 - and then we have to remember to close
00:30 - the file after we're done working with
00:32 - it and also in that video I showed what
00:36 - I said was the recommended way of
00:37 - working with file objects and that is
00:40 - using a context manager like we have
00:42 - here so we can tell that this is a
00:44 - context manager because of the with
00:46 - statement here now one thing you'll
00:48 - notice is that we no longer have to
00:49 - remember to close down the file after
00:51 - we're done working with it and not only
00:53 - that but this is also recommended
00:54 - because if we throw an error when
00:56 - working with this file then it's still
00:58 - going to get closed properly and that is
01:01 - why contact managers are so useful it
01:03 - handles the teardown of the resources
01:05 - for us so that we don't have to remember
01:06 - to do it and the more that is handled
01:08 - for us automatically the better so this
01:11 - is great for files but it's useful for
01:13 - so many different resources so for
01:15 - example we could use this to connect to
01:18 - and close databases automatically we
01:21 - could acquire and release locks there's
01:23 - plenty of use cases you'll find for
01:25 - these you know down the road so in this
01:28 - video we'll be learning how to write our
01:29 - own context managers to handle custom
01:31 - resources so let's go ahead and get
01:33 - started so there are a couple of
01:35 - different ways that we can write out our
01:36 - own context managers we can either do
01:38 - this by using a class or by using a
01:41 - function with a decorator and we'll look
01:43 - at both of those in this video so to
01:45 - start off let's just replicate the
01:47 - functionality that we saw when using the
01:49 - context manager when opening a file so
01:52 - we'll create a context manager that
01:54 - opens the file for us and then
01:56 - automatically closes the file when we're
01:58 - done with it
01:58 - so first we'll use a class to create
02:01 - this context manager because I think it
02:02 - shows a little more clearly what's going
02:04 - on so I have a snippet in my snippets
02:07 - file here that we will use to get us
02:10 - started so you don't have to watch me
02:11 - type all this out so I'm just going to
02:13 - call
02:14 - this part here and paste it in I'm just
02:17 - gonna go ahead and overwrite that and
02:18 - then we will walk through this now if
02:21 - you're unfamiliar with working with
02:22 - classes and want to learn more about
02:23 - working with classes in Python and I do
02:26 - have a series specifically on that and
02:28 - I'll link to that in the description
02:29 - section below that series will explain
02:31 - everything that you need to know about
02:33 - the self parameter here and the anit
02:36 - method and all of that so for the sake
02:38 - of time I'm not really going to go into
02:39 - a lot of detail of the object-oriented
02:41 - concepts within this video okay so with
02:44 - that said we have a class here called
02:46 - open file and inside that class we have
02:49 - three special methods so first we have
02:52 - that init method which you've probably
02:53 - seen if you've used classes before and
02:55 - we also have these enter and exit
02:59 - methods so the inner and exit methods
03:01 - are going to be the setup and teardown
03:02 - of our context manager so we want to
03:04 - setup a couple of things in our NIT
03:06 - method so the anit method is going to
03:08 - accept the arguments that we pass into
03:10 - our class and also allow us to access
03:12 - the attributes that we set from our
03:14 - other methods so you can see here that
03:16 - it takes a self parameter which is just
03:19 - the instance itself and then we have a
03:22 - destination here that's not very
03:23 - specific I'm instead going to call this
03:26 - file name and also on top of file name
03:28 - among also going to accept a mode
03:30 - argument there so that file name will be
03:33 - the name of our file and the mode will
03:36 - be for opening this file for reading or
03:39 - writing or something like that and to
03:41 - turn these into instance attributes so
03:43 - that we can access these from our other
03:44 - methods we can just say self dot file
03:47 - name is equal to file name and then we
03:51 - will do the same thing for mode so self
03:54 - dot mode is equal to mode okay so now
03:57 - within our inner method which I said
03:59 - would be the setup part of our contact
04:01 - manager we're actually going to open our
04:03 - file so within here we can say self dot
04:07 - file so I'm creating a new instance
04:09 - variable there and now we just want to
04:12 - open this file so we will open self dot
04:16 - file name and we will open that with the
04:20 - mode of whatever we pass in of self dot
04:23 - mode and if this isn't quite making
04:25 - sense just yet then just stick with it
04:27 - and we will
04:27 - walk through this a couple of times so
04:29 - now within this inner method I'm
04:30 - actually going to return this file that
04:33 - we just created that we just opened so
04:35 - I'm going to return self dot file now
04:38 - when we return this what we return here
04:42 - will be the object that we're working
04:43 - with within our context manager okay so
04:46 - to finish this example up now we need to
04:48 - do the exit method which I said would be
04:50 - the teardown and this is what gets run
04:53 - when we exit the context manager so we
04:55 - want to be sure that our file gets
04:57 - closed at this point so we can just take
04:59 - this file that we created in the self
05:02 - dot inner method on the setup and in
05:04 - this hair down just do a self dot file
05:06 - dot close now the extra parameters here
05:09 - for the exit method are therefore if we
05:13 - throw an exception and we could use
05:15 - those to access that information okay so
05:18 - now let's use this context manager and
05:19 - walk through exactly what's going on so
05:22 - to use this we can use it just like we
05:26 - did before
05:26 - so we'll say with and I'm going to use
05:29 - this open file class that we just
05:31 - created and now this takes in a file
05:34 - name and the mode so I'm just going to
05:36 - pass in a file name of sample dot txt
05:40 - and we will pass this in with the mode
05:42 - of W which is right and then I'll say as
05:45 - F and then within our context manager
05:48 - we'll just do F dot write and we'll just
05:52 - write to this file and say testing and
05:54 - just to make sure that our context
05:56 - manager is working as it should and to
05:58 - make sure that the file was closed
06:00 - outside of the context manager and let's
06:02 - go ahead and print out the closed
06:04 - attribute of that file so that we can
06:07 - see if it was closed properly so this
06:10 - should return true outside of this
06:13 - context manager that the file was in
06:15 - fact closed after we were done working
06:16 - with it okay so if I run what we
06:18 - currently have then we can see that that
06:21 - returned true for that file being closed
06:23 - so that's good and I have the sample dot
06:27 - txt file open up here if we open that up
06:29 - then we can see that we did write the
06:31 - text testing there so that all worked
06:34 - okay so now let's walk through the
06:36 - context manager and point out exactly
06:38 - what's going on so first of all when
06:41 - we run this part here with the open file
06:44 - class and pass in the filename and the
06:47 - mode what it does is it comes up here
06:49 - into the init method and sets those
06:51 - attributes so we're setting this file
06:53 - name and mode and then since we're using
06:56 - the with statement here what this does
06:59 - is it runs the code within our inter
07:02 - method so that opens the file and then
07:05 - that file is returned so we set this
07:08 - self dot file variable equal to that
07:11 - open file with the filename and mode and
07:13 - then we're returning that file variable
07:16 - so our f variable down here within our
07:18 - context manager is then set to the
07:20 - return value from that enter method so
07:23 - that is why F is a file object inside of
07:27 - our context manager here because that is
07:29 - what was returned from our enter method
07:32 - so now at this point with this entire
07:34 - line here we have ran the anit method
07:39 - and set those attributes and we've also
07:41 - run the inter method to do the setup of
07:44 - opening the file and returning that file
07:46 - and now within the context manager here
07:48 - we can just work with this in any way
07:51 - that we'd like to and then when we exit
07:53 - that block that is whenever and and you
07:56 - know unand en't back here to the main
07:58 - part of the file that is whenever it
08:00 - hits the exit part of the context
08:02 - manager and when it runs that exit
08:04 - method it comes in and does the self dot
08:06 - file that closed so you can see that
08:08 - that is why F dot closed return true
08:11 - after we have exited this context
08:13 - manager okay so hopefully that cleared
08:15 - that up on working with context managers
08:18 - using a class but now that we've seen
08:20 - how to create our own context manager
08:22 - using a class now let's see how to do
08:24 - this using a function and using a
08:27 - function is how I most often use context
08:29 - managers but that's just a personal
08:31 - preference so I wanted to also show the
08:33 - the class as well so that you know both
08:35 - ways so to do this using a function
08:38 - we're going to need to use the context
08:41 - Lib module and to import the context
08:44 - manager decorator so let's go ahead and
08:47 - import that here at the top so we can
08:50 - just say from context
08:53 - import context manager and we can use
08:57 - this context manager or decorator to
08:59 - decorate a generator function now let me
09:02 - grab an example again from my snippets
09:04 - so that you don't have to watch me type
09:06 - all this out and then we will walk
09:09 - through this again now I'm just going to
09:12 - replace everything that we have here so
09:15 - far okay so we're going to go through
09:17 - the same example and this is the open
09:20 - file context manager that is equivalent
09:23 - to what our class was so we can see that
09:25 - this is a little less code than our
09:27 - class was but it can be a little more
09:29 - difficult to understand if you've never
09:31 - worked with decorators or generators
09:33 - before now just like with the classes if
09:35 - you'd like to learn more about
09:36 - decorators and generators then I do have
09:38 - separate videos on those topics
09:40 - specifically but basically if we look at
09:42 - our function then we can see that we
09:44 - have one yield statement in here where
09:47 - we're doing this yield F so everything
09:49 - before the yield statement is going to
09:51 - be equivalent to what our inter method
09:54 - of our class was so this is going to be
09:57 - this setup of the context manager and
10:00 - then the yield is actually where the
10:03 - code within the with statement is going
10:05 - to run and then everything after the
10:08 - yield statement is going to be
10:10 - equivalent to what was in the exit
10:13 - method of our class so this is going to
10:15 - be the teardown of the context manager
10:17 - now technically we should be using some
10:20 - try and finally statements in here to
10:22 - handle errors but we'll take a look at
10:23 - that in just a second but for now let's
10:25 - look at our sample code using this
10:27 - context manager and walk through it just
10:29 - like we did with the class and basically
10:31 - we're doing the same thing that we did
10:32 - with our class code so we're using the
10:34 - with statement here and calling our
10:37 - generator function and our function
10:39 - takes in a file name and a mode and then
10:41 - we are setting this to an F variable now
10:44 - at this point it's going to run
10:46 - everything up until our yield statement
10:49 - so in our example here it's going to
10:51 - come in and actually o create this F
10:54 - variable and open up that file with that
10:57 - file name and that mode and then it's
10:59 - going to yield F and yield F is just
11:02 - like when we returned that file within
11:04 - our Enter
11:06 - method of our class it's going to yield
11:09 - F and that is what this F variable here
11:12 - is going to equal and that is what we're
11:14 - going to be working with within our
11:16 - context manager so within our context
11:18 - manager we can do whatever we like with
11:19 - this file so in our example we're just
11:21 - writing some more text now after we exit
11:25 - the with statement block then it's going
11:28 - to run all of the code after the yield
11:31 - statement so in our example that is
11:34 - closing our file so after the yield
11:36 - statement it comes up here and this is
11:38 - basically the teardown so just like we
11:40 - did before outside of our context
11:41 - manager we are printing F dot closed and
11:44 - that will tell us if the file that we
11:46 - opened is closed or not and since that
11:48 - is run in our teardown code then we
11:50 - should see a return value of true for
11:52 - that that it was in fact closed okay so
11:55 - let's go ahead and run this code and we
11:57 - got an error here because whenever I
11:58 - typed this out this is context Lib not
12:01 - context Lib so context live import
12:04 - context manager so save that and rerun
12:06 - it you can see that we got a true return
12:09 - value for F dot closed it being true so
12:12 - that's good and I still have that sample
12:13 - dot txt file open up so if I open that
12:15 - then you can see that it wrote the new
12:17 - text so that all worked properly so one
12:20 - more thing when I said before that we
12:22 - should be using try and finally blocks
12:25 - to handle errors we can do that by
12:27 - putting our setup and yield code within
12:29 - a try block so if I come in here and do
12:32 - try and then indent this to where it is
12:35 - in the try block and then we're going to
12:38 - put the teardown code into a finally
12:41 - block so I'll do finally and then in
12:43 - that that to where it is in the finally
12:46 - block there and doing that will ensure
12:48 - that even if we run into any errors our
12:50 - teardown code is still going to get run
12:53 - okay so I think that's going to do it
12:55 - for the open file example but that is
12:59 - not very practical because open is
13:02 - already a context manager within Python
13:04 - and we can already do everything that we
13:06 - did here just using the open function so
13:09 - now that we've seen how to replicate
13:12 - that built-in functionality of the open
13:14 - function that using both classes and
13:16 - generators now let's look at a practical
13:18 - example that we'll build from
13:20 - garage so let's say that we we are using
13:22 - Python to do some work in a lot of
13:24 - different directories and we're
13:26 - constantly a you know seeding into those
13:28 - directories doing some work and then
13:30 - seeding back to where we started so let
13:33 - me grab a snippet of code here so that
13:35 - we can see what this would look like
13:36 - without a context manager so I'm going
13:40 - to copy all of this code here and paste
13:43 - this in let's see I will just replace
13:46 - all of this from scratch and we're also
13:49 - using the OS module there so I'm going
13:52 - to have to also import that so I'll
13:54 - import OS okay so let's look at what
13:56 - we're trying to do here so in our code
13:58 - we can see that we are setting this CWD
14:01 - variable to our current working
14:03 - directory so we're just doing OS dot get
14:06 - current working directory and then we
14:08 - are changing to the directory where we
14:10 - want to do some work and in this case I
14:12 - have a let me open up my sidebar here I
14:16 - have two directories here I know that
14:19 - this is probably a little small on your
14:20 - screen but basically in sample directory
14:23 - one I have a few files and inseparable
14:25 - directory - I have a few files so we are
14:28 - changing directory to sample directory
14:30 - one and then we are listing out
14:33 - everything in that directory and just
14:35 - printing it and then we're changing
14:37 - directory back to our current working
14:38 - directory which is our original location
14:41 - and you can see that we're doing this
14:43 - multiple times so whenever we want to do
14:45 - this again with sample directory - we
14:47 - are setting the CWD variable which is
14:49 - our current working directory changing
14:51 - directories printing out everything that
14:54 - is in there and then changing
14:56 - directories back to our original so if I
14:59 - run the code that we have now then we
15:01 - can see that this works so these are the
15:03 - files that exist in sample directory 1
15:05 - and these are the files that exist in
15:07 - sample directory - but this is a little
15:10 - inconvenient to save our current
15:12 - directory switch directories and then
15:14 - switch back to the original after we're
15:16 - done doing what we need to do so if we
15:18 - look at this then saving the current
15:21 - directory and switching it to the
15:22 - destination is basically setting up for
15:25 - the work that needs to be done and
15:27 - switching back to our original directory
15:30 - is basically the teardown so these are
15:33 - things that we don't want to have to
15:35 - remember to do each time so this is a
15:37 - good candidate for a context manager so
15:39 - let's create one that does this so I'm
15:42 - going to do this with a generator
15:43 - function like we saw in the second
15:45 - example but you could also convert this
15:47 - to a class if you're more comfortable
15:48 - with that now I will create this
15:52 - underneath our examples here so that we
15:54 - have those to reference so first we're
15:56 - going to use the context manager
15:59 - decorator so I will just paste that in
16:02 - and now we want to create our function
16:06 - so I will just call this change Durr and
16:09 - what we're going to accept here is we
16:13 - want when we do our setup we are getting
16:15 - our current working directory and then
16:17 - we want to change directory to this
16:21 - destination so let's take in a
16:23 - destination as a parameter there so then
16:27 - within our function now remember what I
16:30 - said about catching errors we want to
16:32 - put our setup in a try and a our
16:37 - teardown in a finally so with our setup
16:41 - now we want to get that current working
16:44 - directory so it's just like we saw up
16:46 - here so we will save the current
16:49 - directory that we are in into that CWD
16:51 - favorable and now we want to change
16:54 - directory to our destination so I'll do
16:57 - an OS change directory to this
17:00 - destination and now we are done with our
17:04 - setup
17:05 - so now we can just yield now we are not
17:08 - working with any variables inside of our
17:10 - context manager so we don't actually
17:12 - have to yield anything we can just say
17:14 - yield so if you remember in the open
17:16 - file example we did a yield F where we
17:19 - yielded that file object and we worked
17:22 - with that file object with or inside of
17:24 - our context manager but we're not going
17:26 - to be working with any objects inside of
17:28 - our context manager so putting yield
17:30 - there is perfectly fine so so far in our
17:32 - setup we have the current working
17:34 - directory which is our original
17:35 - directory we have change directory to
17:38 - our destination and yielded so that
17:40 - we're ready to do whatever we want in
17:42 - that destination and now in the teardown
17:44 - we just want to change directory
17:47 - back to the original so if I copy that
17:51 - in and paste that there then that will
17:53 - change directory back to that current
17:55 - working directory okay so now instead of
17:57 - doing what we did up here using this
17:59 - code I'm now going to use our context
18:01 - managers so I'm just going to delete
18:03 - everything that we had there and now we
18:06 - can use the context managers to do
18:09 - basically the exact same thing but a
18:11 - little bit more clean so we can say with
18:14 - changed er and now we want to pass in at
18:17 - the destination so our first destination
18:19 - we'll just do sample there one and we
18:23 - didn't return anything here with this
18:25 - yield statement so we're just instead of
18:27 - using as and putting a variable we're
18:30 - not actually working with anything there
18:31 - so we'll just jump directory and
18:33 - directly into the context manager and
18:36 - now from in here you can do anything
18:37 - within the directory that we just see
18:39 - deed into so in our example we were just
18:42 - printing out the list of that directory
18:44 - so OS dot list der but you could do
18:48 - whatever you wanted there you could
18:49 - create files or anything like that so
18:52 - now we want to do this with our sample
18:54 - directory too as well so I will just
18:56 - paste all of that in except using sample
18:59 - directory to there so now let's go ahead
19:02 - and save this and run it and I'll scroll
19:05 - down here a little bit so we can see
19:08 - that that works just like it did before
19:09 - by printing out the contents of those
19:12 - directories but now we don't have to
19:13 - worry about the setup and teardown each
19:15 - time we use those contacts managers so
19:19 - you know before we were saving all this
19:21 - information and then had to remember to
19:23 - change back and now we can reuse this
19:25 - context manager over and over and over
19:27 - and we always know that those resources
19:29 - are going to be managed exactly how we
19:31 - want them to be managed and we don't
19:32 - have to remember to do that on our own
19:34 - every single time so that is a simple
19:36 - example of a practical context manager
19:38 - that you can create on your own but
19:40 - these are used for many different things
19:41 - so like I said they can be used for
19:43 - opening and closing database connections
19:46 - acquiring and releasing locks and all
19:48 - kinds of different stuff okay so I think
19:50 - that it's going to do it for this video
19:51 - I hope that now you have a pretty good
19:53 - idea for how you can use context
19:55 - managers to setup and teardown resources
19:57 - and also how you can write your own from
19:59 - scratch but if anyone has any questions
20:01 - about what we covered in this video then
20:02 - feel free to ask in the comment section
20:04 - below and I'll do my best to answer
20:05 - those and if you enjoy these tutorials
20:07 - and would like to support them then
20:08 - there are several ways you can do that
20:09 - the easiest way is to simply like the
20:11 - video and give it a thumbs up and also
20:13 - it's a huge help to share these videos
20:14 - with anyone who you think would find
20:15 - them useful and if you have the means
20:17 - you can contribute through patreon and
20:18 - there's a link to that page and it's
20:20 - scription section below be sure to
20:21 - subscribe for future videos and thank
20:23 - you all for watching
20:34 - you