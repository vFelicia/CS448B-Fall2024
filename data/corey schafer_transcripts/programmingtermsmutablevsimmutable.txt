00:00 - hey how's it going everybody this is
00:01 - going to be another programming terms
00:03 - video and in this video we're going to
00:05 - look at the terms mutable and immutable
00:08 - so if we look at the definition on
00:10 - Wikipedia it says that an immutable
00:13 - object is an object whose State cannot
00:16 - be modified after it is created this is
00:18 - in contrast to a mutable object which
00:21 - can be modified after it's created um so
00:24 - let's go ahead and look at an example of
00:26 - this and uh why you need to know these
00:29 - two terms
00:30 - now I'm going to be using python uh in
00:33 - these examples but uh like most of my
00:35 - programming term videos don't get caught
00:37 - up in the language I'm using because uh
00:40 - these terms apply to a variety of
00:43 - programming languages so first we're
00:45 - going to take a look at an example of
00:46 - something that is immutable and in
00:49 - Python A String is immutable um so right
00:53 - here you can see that we're setting a
00:55 - equal to the string Corey and if I print
00:58 - out a you can see that I get quy right
01:00 - there um now immutable doesn't mean that
01:05 - I can't assign this variable again uh
01:09 - you can see down here I could change
01:11 - this to John if I run this code you can
01:14 - see that a was equal to Corey now a is
01:17 - equal to John um but you know I said
01:21 - that a was immutable that strings were
01:23 - immutable so what's going on here so
01:25 - what's going on is that it's not
01:27 - actually modifying this string object
01:30 - it's creating a new string object now to
01:34 - um kind of see this in more detail uh
01:38 - python has this ID function which prints
01:41 - out the memory address um so if I save
01:46 - that and now I run this if I run through
01:49 - this code you can see that up here I
01:51 - said that a is equal to Corey I printed
01:53 - out a then I printed out the memory
01:56 - address then I changed it down here and
01:59 - printed out a again and then printed out
02:01 - the memory address again so you can see
02:03 - whenever I changed a here since a string
02:07 - is immutable it created a new string
02:11 - object so you can see here that these uh
02:13 - memory addresses don't match so really
02:16 - to show you that strings are immutable
02:19 - um let's try to change one single
02:21 - character of a so let's say that I want
02:24 - to capitalize Corey so if I said a and
02:28 - the index of zero which would be the c
02:32 - um what if I tried to set this to an
02:34 - uppercase C so let's save that then I'll
02:38 - put back in here print a so let's save
02:41 - that and let's try to run it now you can
02:43 - see here that we get a type error and it
02:45 - says that string object does not support
02:48 - item assignment that's because this is
02:51 - immutable we can't change this string
02:55 - object so what's an example of a an
02:57 - object that is mutable well well in
03:00 - Python a list is mutable so if I make a
03:03 - list here and let's just do 1 2 3 4 5
03:06 - and then let's comment this out down
03:09 - here for now and let's run this you can
03:11 - see that it uh printed out our list and
03:14 - now if we wanted to change the first
03:19 - value in our list uh let's set it to uh
03:22 - six and we print this out then you can
03:25 - see that it printed out both of the
03:29 - lists and the memory address is the same
03:32 - so it changed that value in place that's
03:35 - what it means to be mutable okay so why
03:38 - is it important to know this why is it
03:39 - important to know the difference between
03:41 - a mutable and an immutable object um
03:44 - well aside from just avoiding errors
03:47 - there's also uh problems with memory as
03:51 - well so some things can seem harmless uh
03:54 - which um really end up being really bad
03:58 - in performance so for example I have
04:01 - this file over here called uh concat
04:04 - dopy and what this does is it has a list
04:09 - of employees here and then it Loops
04:11 - through and this is some sample uh HTML
04:15 - output so let's look at what we're doing
04:18 - in our code here we have this output
04:20 - which is a string uh equal to this
04:23 - opening uh list here and then we are
04:27 - looping through our list of fake
04:30 - employees here and the same output
04:33 - variable we are
04:35 - concatenating these lists with these
04:38 - employees added on to the end and like I
04:40 - said before don't get caught up in the
04:42 - python syntax um just going over these
04:45 - terms here um so then at the very end
04:48 - after we Loop through all the employees
04:50 - and concatenate these strings together
04:52 - then we add on the uh closing list and
04:55 - if I print this out uh you can see that
04:59 - it went through and created some fake
05:01 - HTML here with a list and has our list
05:05 - of employees so what's wrong with doing
05:07 - something like this um because it looks
05:10 - fine and it is fine if you have such a
05:12 - small list here but this is just an
05:14 - example but you know in um in production
05:18 - code you may have uh thousands of
05:21 - strings that you're concatenating and um
05:23 - that's whenever it becomes an issue um
05:26 - so if I uncomment out this line here
05:28 - where I print out the address of output
05:31 - within this for Loop then you can see if
05:34 - I print that out then the address every
05:38 - time it goes through and it adds a new
05:41 - employee to the output then it's
05:43 - creating a new string object so imagine
05:46 - that I had thousands of these then it
05:49 - would be creating thousands of different
05:51 - objects in memory so you can see all
05:54 - these are all different so it's good to
05:56 - keep those the differences between
05:59 - mutable and immutable objects in mind
06:01 - whenever you're thinking about
06:03 - performance also and like I said you'll
06:05 - see this in other other languages also
06:07 - so for example in Java you have a string
06:11 - class uh which is immutable and then you
06:14 - have something I think it's called
06:16 - string buffer which is mutable and it's
06:19 - used for the same thing uh so whenever
06:21 - you're doing large amounts of
06:24 - concatenation and things like that in
06:26 - Java you would want to use a string
06:28 - buffer instead of a string because it
06:31 - doesn't take that performance hit
06:33 - whenever uh of creating uh thousands and
06:37 - thousands of new string objects in
06:40 - memory so hopefully after watching this
06:42 - video you have a better idea of what
06:45 - mutable and immutable means and also
06:48 - some of the things that you need to
06:49 - watch out for once you do understand
06:50 - those differences but if you do have any
06:53 - questions just ask in the comments
06:54 - section below um be sure to subscribe
06:57 - for future videos like this and uh thank
06:59 - you guys for
07:04 - watching