00:00 - hey there how's it going everybody in
00:01 - this video we're going to be learning
00:02 - how to schedule tasks using the cron
00:05 - utility now you can use cron for pretty
00:07 - much anything but you see it used a lot
00:08 - to handle things like automated backups
00:11 - rotating log files syncing files between
00:14 - remote machines or clearing out
00:16 - temporary folders and things like that
00:17 - now just about anyone can find a lot of
00:19 - uses for cron tasks but it becomes
00:21 - especially useful once you start doing a
00:23 - system administration type of work so
00:25 - let's see how we can set this up now we
00:28 - can schedule the list of commands that
00:30 - we want to run using something called
00:31 - the cron table and the command is cron
00:34 - tab for short so first we can see a list
00:37 - of the current users cron jobs with the
00:40 - command cron tab - L so we can see that
00:44 - we don't have any scheduled jobs yet for
00:45 - this user so let's go ahead and add some
00:48 - now when we edit our crontab we're going
00:50 - to have to use an editor so for most
00:53 - operating systems this is going to
00:54 - default to them and that's what I'm
00:56 - going to be using for this video but if
00:58 - you aren't comfortable using them and
00:59 - would like to use something like Nano
01:01 - instead then you can set this
01:03 - environment variable called editor and
01:05 - you can set that to none Nano so we
01:07 - could say something like export editor
01:10 - and I believe that Nano is in user bin
01:13 - Nano so if you set that value then when
01:17 - you edit your contact in stead of them
01:20 - and also I think if you're on a boon -
01:23 - then it'll ask you to select your editor
01:25 - when you first try to edit your cron
01:26 - time but like I said I'm just going to
01:28 - keep the default of them for this video
01:30 - okay so let's go ahead and edit our
01:32 - crontab so we can edit our list of cron
01:35 - jobs by saying cron tab - E and if we
01:39 - run that then it opens up our editor and
01:41 - in them if we want to insert something
01:43 - you can press I to put yourself in
01:46 - insert mode and it says insert down here
01:48 - at the bottom so we're just going to
01:49 - start off with some simple commands just
01:51 - to see how this works and then we'll
01:53 - look at some more practical examples
01:54 - once we get the hang of it
01:55 - so on each line we're going to specify
01:58 - when we're going to run our command and
02:01 - also the command that we want to run so
02:03 - let me grab a comment from my snippets
02:06 - here that will make this a little more
02:07 - clear so I'm going to copy these and
02:12 - paste them in here and then minimize
02:13 - that again okay so each line is going to
02:16 - look like this
02:17 - right here we're going to have five
02:19 - values that specify when we want the job
02:22 - to run and then the job that we want to
02:25 - execute now first we specify the minute
02:28 - and then the hour and then the day of
02:32 - the month and then the month and then
02:35 - the day of the week now we can use exact
02:38 - values or we can use an asterisk to
02:41 - match every value so for example one of
02:44 - the simplest schedules would be an
02:46 - asterisk for all five values so if I go
02:50 - ahead and type out a line here and I'm
02:52 - putting spaces between each of these so
02:54 - we have asterisks for all five of our
02:56 - values and then the command that we want
02:58 - to run and we'll just make this simple
03:00 - I'm just going to echo out hello and we
03:03 - want to put this into a temporary file
03:05 - so I'll send this to the temporary
03:07 - folder and to a file just called text
03:10 - txt and to save this in them we can
03:13 - press escape and then a colon W and I'll
03:16 - also quit out of here for now with the
03:19 - queue so now that we're back to our menu
03:22 - here let's list out our crontab to see
03:25 - to make sure that that was safe
03:28 - successfully okay and now we can see our
03:29 - command that we added here so let's go
03:32 - over exactly what this is saying so what
03:34 - this is saying is that we want to run
03:36 - this echo command and send it to that
03:38 - file we want to run that on every minute
03:42 - of every hour of every day of the week
03:46 - or every day of the month on every month
03:49 - on any day of the week now I know that
03:52 - that sounds confusing but we're going to
03:53 - see a lot of examples and we'll get the
03:55 - hang of it after a while but basically
03:57 - what that says is that we're just going
03:59 - to run this command every minute of
04:01 - every day so there's a good chance that
04:03 - cron has already run this echo command
04:06 - and appended the word hello to our test
04:09 - txt file in the temp folder so let's go
04:12 - ahead and cat that file to see if that
04:16 - has run already so we can see that our
04:19 - command was successfully scheduled and
04:20 - run through our cron system okay now
04:23 - let's look at some different
04:24 - combinations for
04:25 - or how the schedule when our job is
04:28 - going to be run so to do this let's go
04:30 - back and edit our cron job again okay so
04:34 - the asterisk will match any value but we
04:37 - can also use exact values so the minutes
04:39 - can be anything between 0 & 59 so if I
04:44 - was to set this minute here to 30 then
04:47 - what this would mean is that our command
04:49 - would be run on the 30th minute of every
04:53 - hour of every day of the month on every
04:56 - month on any day of the week so if I
04:59 - look at what my local time is now it's
05:02 - about 10:40 so that means that this job
05:05 - would now get run 30 past the hour for
05:09 - every hour so this would run since it's
05:12 - 10:40 now this would run at 11:30 and
05:15 - then 12:30 and then 1:30 and 2:30 and so
05:18 - on now the hour can be anything between
05:20 - 0 & 23 so 0 for midnight and 23 for
05:27 - 11:00 p.m. at night so if we were to
05:30 - change this to a 5 so now this line is
05:34 - saying that we're going to run our
05:35 - command 30 minutes past the 5th hour on
05:40 - every single day so at 5:30 every single
05:43 - day it will run that command and we can
05:45 - continue just going down the line of
05:47 - values here so the days of the month can
05:50 - be anything between 1 and 31 so if we
05:53 - were to set the day of the month to 1
05:56 - now what our line is saying is that
05:58 - we're going to run our command 30
06:01 - minutes past 5:00 on the 1st of every
06:04 - month
06:05 - so basically on the 1st of every month
06:06 - at 5:30 a.m.
06:08 - it will run our command so basically now
06:10 - our command is only going to run once a
06:12 - month and just like you might expect the
06:14 - months can be anything between 1 and 12
06:17 - and if we were to set this to you know
06:20 - something like a value of 1 as well then
06:23 - now we're scheduling our command to run
06:24 - once a year so it would run at 5:30 a.m.
06:28 - on the 1st of the month of the first
06:31 - month which is January now this last
06:33 - value is for day of the week and this is
06:36 - really useful because sometimes we want
06:38 - to schedule commands to
06:39 - on at a certain time on a specific day
06:42 - and we can see our comment above that
06:45 - zero is Sunday and six is Saturday so
06:49 - let's say that I wanted to back up some
06:51 - files at midnight every Monday so to do
06:54 - this we could just set our day of the
06:56 - week to one which is Monday and then we
07:00 - want to put an asterisk for the month
07:03 - and then a an asterisk for the day of
07:06 - the month and then a zero for the hour
07:09 - because we want it to be midnight and
07:11 - zero for the minute as well so just go
07:14 - over that one more time we have zero for
07:16 - our minute and zero for our hour which
07:19 - is midnight a combination of two zeros
07:21 - here's midnight and then for any day of
07:23 - the month for any month and then on the
07:27 - day of the week we want one which is
07:29 - Monday so every Monday at midnight run
07:31 - this command ok so now let's look at
07:33 - some more advanced schedules so we can
07:35 - create a lot of different schedules with
07:37 - what we've learned so far but what if we
07:39 - had a script that we wanted to run on
07:41 - the 1st and 15th of every month now to
07:44 - do this we can use a comma operator to
07:48 - specify multiple values so for example
07:50 - let's say that we wanted to run a
07:51 - command at midnight on the 1st and the
07:54 - 15th of every month so we've already
07:56 - seen that a 0 for the minutes and a 0
07:59 - for the hour is midnight and now we want
08:02 - it to run on the first day and the 15th
08:05 - day of the month so we can use a comma
08:08 - operator to do multiple values here so I
08:10 - can put in a 1 comma 15 and then we want
08:14 - an asterisk for any month and then an
08:16 - asterisk for any day of the week so
08:18 - again that's a 0 for the minutes 0 for
08:22 - the hours which is midnight and then for
08:24 - the day of the month 1 comma 15 which
08:26 - means it will run on both the 1st and
08:28 - the 15th of every month now one common
08:30 - mistake that people make when they
08:32 - schedule cron tasks is that it's
08:34 - important that we put a specific time
08:37 - like we did here like with midnight when
08:39 - we want to run something on a certain
08:41 - day like this because some people make
08:44 - the mistake of leaving these as
08:46 - asterisks here and they think that this
08:49 - will run on this command on the 1st and
08:52 - the 15th of every month
08:53 - as well but what this actually does is
08:55 - that it will run your command every
08:58 - minute of the day on the 1st and the
09:00 - 15th so it'll never run your command
09:03 - whenever it's not the first or the 15th
09:05 - of the month but whenever it is the
09:07 - first or it is the 15th then it's going
09:09 - to run our command every minute of that
09:12 - day and that's likely not what we wanted
09:14 - so to run it once that day then we have
09:17 - to select a specific time which in this
09:19 - case we're choosing midnight but you can
09:21 - choose whatever you like ok so now let's
09:23 - look at how we can schedule intervals so
09:25 - what if we wanted to run a command every
09:27 - 10 minutes then you could use multiple
09:30 - values here and say you know 0 10 20 30
09:34 - and so on but that's pretty ugly and it
09:37 - also becomes completely unmanageable if
09:39 - we wanted to run you know something
09:41 - every two minutes or something like that
09:43 - so instead we can use the forward slash
09:46 - operator to do an interval so to run
09:49 - something every 10 minutes we could just
09:52 - put in an asterisk here and then a
09:54 - forged slash pin and then for these
09:56 - other values I'm just going to go ahead
09:59 - and fill in all asterisks for those so
10:02 - we have an asterisk here for our minute
10:04 - and then that forged slash 10 which
10:06 - actually says we just want to run this
10:08 - every 10 minutes and then asterisk for
10:10 - every other value which just means every
10:13 - 10 minutes of every day so then if you
10:15 - wanted to change that to run something
10:16 - every 5 minutes of every day then you
10:19 - could just change that 10 to a 5 and
10:21 - you're good to go and this works with
10:23 - the other values as well so let's say
10:25 - that you wanted to run a command every 3
10:28 - days then we could put a 0 for the
10:32 - minutes a 0 for the hours and then for
10:34 - the days just a ford slash 3 and again
10:38 - that common mistake that I mentioned
10:40 - earlier if you want to run something
10:42 - every few hours or every few days then
10:44 - you have to be sure that you set the
10:47 - minutes and the hours to zero because if
10:50 - you made the mistake of leaving these as
10:52 - asterisks then it would just run every
10:54 - minute on every third day instead of
10:57 - once every three days so you have to be
11:00 - careful with that okay so lastly let's
11:02 - look at ranges so let's say that we
11:05 - wanted to run a command
11:06 - every hour from midnight to 5:00 a.m. so
11:10 - to do this we can use the - operator to
11:13 - specify a range so I'm just going to use
11:16 - an asterisk for the day here for the
11:18 - minute I will keep at zero and let's say
11:21 - that we wanted to run a command every
11:23 - hour from midnight to 5:00 a.m. so we
11:26 - can keep this as zero then put in a dash
11:28 - 5 so the schedule that we currently have
11:30 - here would run this echo command every
11:35 - hour between 0 to 5 of every day so
11:38 - another example might be you know
11:40 - something that you might want to
11:42 - schedule seasonally so let's say that
11:43 - you worked for a university and you had
11:46 - certain scripts that you wanted to run
11:48 - at noon every day during the summer
11:50 - months while the students were on break
11:52 - or something then you know you could
11:54 - write something like you know I want to
11:56 - run this at noon every day of the month
12:00 - but only through the months you know
12:02 - 5:00 to 8:00 which i think is made
12:05 - august ok so now let's do one more
12:08 - advanced example that ties a few of
12:11 - these things together so let's say that
12:12 - we wanted to run a command every 30
12:15 - minutes during regular business hours
12:17 - and common business hours are Monday
12:19 - through Friday from 9:00 a.m. to 5:00
12:22 - p.m. so let's write this out so we want
12:26 - to run every 30 minutes Monday through
12:31 - Friday from 9:00 a.m. to 5:00 p.m. okay
12:36 - so I'm just going to make these all
12:39 - asterisks for now and then we will
12:42 - change these as we go ok so first we
12:45 - want to run a command every 30 minutes
12:47 - so we can use our interval and do every
12:50 - 30 minutes and now we want our hours to
12:53 - be between 9 a.m. and 5 p.m. so that
12:57 - would be 9 a.m. and then 5 p.m. and
13:00 - military time is just 17 and we also
13:03 - only want this command to run between
13:05 - Monday and Friday so we go here to the
13:08 - days of the week and we would do 1 which
13:12 - is Monday through 5 which is Friday so
13:15 - that's a little more complicated of a
13:18 - command but you
13:20 - these contests are really versatile and
13:22 - allow you to create you know some
13:24 - complicated schedules okay so hopefully
13:26 - at this point you have a pretty good
13:28 - idea for how the schedule jobs to run on
13:31 - just about any schedule or integral that
13:34 - you would like now as one last example
13:37 - let me grab a couple of cron jobs from
13:40 - my snippets file here and they can just
13:42 - give some ideas for what multiple cron
13:45 - jobs might look like so I'll just grab a
13:47 - couple of these out of here and paste
13:49 - these in then minimize that okay so one
13:52 - thing about editing your crontab is not
13:55 - to be shy about writing comments so I
13:57 - usually leave this entire timing comment
14:00 - here at the top micron tab but just as a
14:03 - reference in case I forget what one of
14:05 - these values are and then I also comment
14:08 - each cron task so for our first job here
14:11 - this is to remove the contents of our
14:14 - temp folder at 5:00 p.m.
14:16 - on every Friday so you can see we have a
14:18 - 0 for the minute 5 for the hour so
14:22 - that's actually 5 am sorry and then a 5
14:25 - for the day of the week which is Friday
14:27 - and then our command will remove all the
14:30 - contents from our temp folder and the
14:32 - second task that I have here is to
14:34 - backup my pictures folder to Google
14:36 - Drive every night at midnight so these
14:39 - are just two small examples for how you
14:42 - can use what we learned here but I'm
14:44 - sure you'll be able to find plenty of
14:45 - use cases yourself but you can use these
14:48 - for you know system updates and all
14:50 - kinds of different things
14:51 - ok so real quick before we finish up
14:54 - here let me give a couple more tips for
14:57 - using cron so in this video we've been
14:59 - editing our own users cron tasks but if
15:02 - we ever wanted to view or edit another
15:04 - user's cron tasks then we can use the -
15:07 - you option to specify which user so for
15:10 - example we could say crontab - you and
15:12 - you know user - - e now this would edit
15:17 - user twos cron tasks instead of your own
15:20 - cron tests now if you have any tasks
15:23 - that need to be run as a root user then
15:25 - we can just put sudo before the crontab
15:28 - so for example to view the roots cron
15:31 - tasks we could say
15:33 - to do crontab - L and that's going to
15:36 - ask for the sudo password and we can put
15:39 - that in and you can see that I currently
15:41 - don't have a cron tab for the root
15:42 - account but that is how you would edit
15:45 - the root or view the roots cron tabs so
15:47 - for example to edit the root crontab you
15:50 - would just do a dash e and then you're
15:53 - editing the root users contacts now
15:56 - another useful command is being able to
15:58 - easily remove cron tasks so you know if
16:00 - you've been playing around with your
16:01 - cron test while watching this video and
16:03 - would like to remove all of them then
16:05 - you can do that either by you know
16:07 - deleting all of the contents and the
16:09 - file that you just edited or you could
16:11 - just simply say crime tab - R - remove
16:14 - and if we run that and now we do a
16:16 - crontab - L you can see that now it says
16:20 - that we have no crontab for our user
16:22 - even though we saved everything that we
16:25 - were working with before okay so there's
16:28 - one last thing that I'd like to show you
16:30 - so I know that those schedules can be a
16:32 - little difficult to comprehend
16:34 - especially you know in such a short
16:35 - video but if you're still unsure how
16:38 - those schedules work then there are some
16:41 - great tools online where you can type in
16:44 - a schedule and it will do its best to
16:45 - translate that schedule for you so one
16:48 - of the first results online is this
16:50 - crontab guru and in here we can add a
16:53 - schedule and it will do its best to tell
16:55 - us what that schedule is so for example
16:58 - we have five for the minute and four for
17:01 - the hour so it's saying that it'll run
17:03 - at 4:05 and another cool thing here is
17:06 - that the text is kind of small here I'm
17:08 - not sure if you can see in the video but
17:10 - it also shows an example of when at the
17:12 - next time this schedule would be
17:14 - executed based on the current time and
17:16 - if you click this next value here and it
17:19 - expands this out to show you the next
17:21 - five executions so what this is saying
17:23 - here is that this is going to execute at
17:26 - 4:05 a.m. on the next five days now if
17:31 - we were to change this to something like
17:33 - 0 for the minute 0 for the hour and then
17:37 - 1 for the day of the week and now we can
17:39 - see that this is saying that it's going
17:41 - to be on midnight on Monday and our
17:44 - schedule here is saying that it'll be on
17:47 - night on the seventh and then the 14th
17:49 - and then the 21st which I'm assuming are
17:52 - Mondays so even if you're pretty
17:53 - comfortable with how the scheduling
17:55 - works you know using sites like this can
17:57 - give you some reassurance that you're
17:58 - putting in the right values and that
18:00 - you're scheduling your jobs exactly how
18:02 - you expect okay so I think that is going
18:04 - to do it for this video I hope now that
18:07 - everybody has a good understanding for
18:09 - how scheduling tasks through cron works
18:11 - but if anyone does have any questions
18:13 - about what we covered in this video then
18:15 - feel free to ask in the comment section
18:16 - below and I'll do my best to answer
18:18 - those now if you enjoy these tutorials
18:20 - and would like to support them then
18:21 - there are several ways you can do that
18:22 - the easiest ways to simply like the
18:24 - video and give it a thumbs up and also
18:26 - it's a huge help to share these videos
18:27 - with anyone who you think would find
18:29 - them useful and if you have the means
18:30 - you can contribute through patreon and
18:32 - there's a link to that page and it's a
18:33 - strips in section below be sure to
18:35 - subscribe for future videos and thank
18:37 - you all for watching
18:48 - you