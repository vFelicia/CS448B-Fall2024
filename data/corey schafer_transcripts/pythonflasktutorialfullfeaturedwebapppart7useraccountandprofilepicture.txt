00:00 - hey there how's it going everybody in
00:01 - this video we'll be finishing our user
00:03 - account page where our users can update
00:05 - their information and we'll also add the
00:07 - ability to upload a profile picture as
00:09 - well so let's go ahead and get started
00:11 - so first of all let's update the
00:13 - template for our account page this will
00:16 - be the page where the user can update
00:17 - their information and also upload a
00:20 - picture so I have the account template
00:23 - open here and now I'm going to grab a
00:25 - snippet of HTML from my snippets folder
00:28 - because it would be a lot to watch me
00:30 - type all of this in and the code for
00:32 - these snippets will be in the
00:33 - description section below if you are
00:35 - following along and want to grab that so
00:37 - within my snippets folder here I'm gonna
00:41 - grab this code from account HTML and now
00:45 - back in our project in our account
00:47 - template I'm going to paste this within
00:50 - the content block so I'll replace the h1
00:54 - heading that we have there for now and
00:56 - now I will make sure that this is
00:58 - indented correctly and this HTML here is
01:01 - just a short little layout that has some
01:03 - bootstrap classes to make things look a
01:05 - little nicer plus some styles from the
01:07 - main CSS file that we added earlier into
01:11 - our static folder which is referenced in
01:14 - our layout template so we can see that
01:16 - in the snippet that I pasted in here we
01:18 - have an image for the users image and
01:21 - right now that's hard-coded to user
01:22 - image JPEG we'll change that in just a
01:24 - second we also have this h2 heading here
01:28 - with the users username and also this
01:31 - paragraph tag here with the users email
01:34 - so for right now let's change the
01:36 - username and the email to be the current
01:39 - users username and email address and
01:41 - we've seen how to do this before we can
01:43 - use these double curly braces here and
01:45 - now we can say current underscore user
01:48 - dot username and now we want to also put
01:53 - in their email address so we'll place
01:55 - this filler email there with the current
01:59 - user email now like I said we also have
02:02 - an image here for the user's profile
02:05 - picture and right now the source for
02:07 - this picture is just hard coded in but
02:10 - we want this to be set to the users
02:12 - image if
02:13 - they've uploaded one and to display a
02:15 - default image if they haven't uploaded a
02:17 - picture yet
02:18 - so if we remember back in our database
02:20 - video we set the users image file field
02:23 - to be equal to default dot jpg by
02:27 - default so we need to actually create
02:29 - this default image so that we can
02:31 - display that for now and we can use any
02:34 - image here but I have one that I like
02:36 - that I'm going to use for now so I have
02:38 - a folder on my desktop here called
02:41 - profile underscore pics and if I open
02:45 - this up we can see that we have a
02:47 - default jpg image here that's kind of an
02:50 - anonymous user and also and also put a
02:53 - link for this image in the description
02:55 - section below
02:56 - if you'd like to use this as well so I'm
02:58 - going to go back here to my desktop and
03:00 - now I'm going to move this profile pics
03:03 - folder into my project
03:06 - static directory so that we can use the
03:09 - URL for function to grab that image so I
03:12 - am within my static folder here in this
03:15 - other Finder window you can see right
03:17 - now we just have this main dot CSS which
03:19 - we've added earlier in the series and
03:21 - now I'm just going to move that profile
03:24 - pics folder into that static directory
03:27 - okay so once we've copied that over now
03:29 - let's update the hard-coded image source
03:32 - within our account template to be equal
03:35 - to the user's image and again that'll be
03:38 - default jpg if they haven't uploaded an
03:40 - image yet so I'm actually going to set
03:43 - this and our routes and pass it into our
03:46 - template so first let's open up our
03:48 - routes dot PI file and let's go down to
03:51 - our account route here at the bottom and
03:54 - now let's set the image file that we
03:56 - want to pass to that template so I will
03:58 - say image file is equal to and we're
04:01 - going to have all of these user images
04:03 - located in the same place so this is
04:05 - going to be URL four and we put that in
04:08 - the static directory and within the
04:11 - static directory we can say that the
04:13 - file name is equal to and that was in a
04:17 - profile pics directory and now let's
04:21 - concatenate the current users image onto
04:26 - the end of this Phi
04:27 - now you could use an F string here as
04:29 - well but I'm just going to use the plus
04:31 - sign for concatenation so now I'll say
04:33 - current user dot image file and if we
04:37 - remember image file if I open up my
04:40 - models dot py in the user model image
04:44 - file was the name of that column where
04:46 - we're storing that image and like I said
04:48 - before we have a default set the default
04:50 - dot JPEG so back to our routes so we now
04:54 - have an image file variable here that is
04:57 - set to the URL for our static directory
05:00 - and within our static directory profile
05:03 - pics and then the users image file okay
05:06 - so now let's pass that image file into
05:09 - our account template so just like we've
05:12 - seen before when we do our render
05:15 - template we can just pass additional
05:16 - arguments into here so I'm just going to
05:18 - call this the same thing as our variable
05:21 - so I'll say image file is equal to image
05:23 - file and now within our account template
05:26 - if I open that back up we can now use
05:28 - that image file as the source instead of
05:31 - the filler value that we currently have
05:33 - so I'm going to get rid of that filler
05:36 - value and just put in our double curly
05:38 - braces here and we want to use that
05:40 - image file that we passed in to this
05:43 - template so now if we save all of the
05:45 - files that we just changed then we
05:47 - should have a basic account page for our
05:50 - user so let's run this in our browser
05:52 - and see what we get so I'll pull up my
05:55 - terminal here and clear this out and
05:57 - then I will run our application by doing
06:02 - Python run PI so if I run that we can
06:05 - see that we don't get any errors and our
06:06 - web server is running and I will pull up
06:10 - our application here and reload this
06:12 - okay so now I am already logged in here
06:15 - so if you're not logged in then you'll
06:17 - have to log in in order to get to the
06:19 - account page now if I click on account
06:22 - then we can see that we have a basic
06:24 - account information page here where it's
06:26 - showing our default image also our user
06:29 - name and our email now within this page
06:32 - we'll also want to be able to update our
06:34 - user name and email address and also
06:36 - upload a custom profile picture as well
06:39 - so we need to create four
06:41 - for that and so let's open up our
06:43 - application and open up our forms dot py
06:47 - file so I will open that up so now we
06:50 - want a form to update our account
06:52 - information and this is going to be
06:54 - similar to our register form because
06:56 - it's going to allow us to update our
06:57 - username and email address so I'm just
07:00 - going to copy our registration form as a
07:03 - starting point so I will copy those
07:05 - custom validations as well so I'll copy
07:08 - that come down here to the bottom and
07:10 - paste that in and now I'll change this
07:13 - name here from registration form to
07:17 - update account form and we are gonna
07:20 - leave the username and email fields as
07:22 - they are but we don't need the password
07:24 - or confirm password fields so we will
07:27 - remove those we are going to have the
07:30 - ability to update our password and we'll
07:32 - see that later in the video but it's not
07:34 - going to be through this form it's gonna
07:35 - be through a reset link and an email and
07:38 - we're also going to add a field here to
07:41 - update our profile picture but for now
07:43 - let's just get this working with the
07:44 - username and email and come back to the
07:46 - profile picture in just a second ok so
07:49 - now instead of this submit button saying
07:53 - sign up let's change this to be update
07:57 - so I will save that and for our username
08:00 - and email validations these are going to
08:03 - stay pretty similar so for the
08:05 - registration form they were just
08:07 - checking whether the username or email
08:09 - already exists and would throw a
08:11 - validation error if those were already
08:13 - taken but we have to realize that our
08:15 - user could submit this form without
08:18 - changing either their user name or email
08:20 - and the way that this and that should
08:22 - still be valid but the way that this is
08:24 - set up right now is that it will query
08:26 - the database and find their current
08:29 - username and email in the database and
08:31 - see that that value is taken and we'll
08:33 - throw a validation error so we only want
08:36 - to run these validation checks if the
08:38 - data they submit is different than their
08:40 - current username or email so let's
08:43 - import the current user from flask login
08:45 - so that we can use that to make this
08:47 - check so up here at our imports I will
08:51 - import flask login so I'll say from
08:54 - flask underscore login import and we
08:58 - want to import that current underscore
09:01 - user so I will copy that go back down to
09:05 - our update account form and now we can
09:07 - say that we only want to do these
09:09 - validation checks if the username or
09:11 - email that they enter is different than
09:14 - their current username or email address
09:15 - so I will come up here to the top and
09:19 - for this username validation I'll say if
09:22 - username dot data is not equal to the
09:26 - current user dot username then we can
09:31 - run these validation checks if it is
09:33 - equal to the current username and then
09:35 - we're just not going to validate it so
09:37 - now I'll copy this conditional here and
09:39 - do the same thing for our email so I'll
09:42 - say if email dot data is not equal to
09:46 - current user dot email then indent
09:50 - everything underneath that okay so now
09:52 - let's import this form that we've
09:53 - created into our routes and then from
09:56 - there we can pass it into our account
09:58 - template so I'm going to open up our
10:00 - routes here and at the top we want to
10:03 - include this in the forms that were
10:06 - importing so right after our
10:07 - registration and login forms we will
10:09 - also import this update account form and
10:13 - copy that and then down in our account
10:18 - route we can create an instance of that
10:21 - form and we've seen this before with the
10:23 - registration and login routes and now we
10:26 - can pass this form into our template so
10:30 - where we are rendering the template here
10:32 - at the end I also say form is equal to
10:34 - form and if we want we can break these
10:37 - lines up to be you know pepp eight
10:39 - compliant in these videos I make the
10:41 - text so large that it's easy for it to
10:43 - run off to the right of the screen but I
10:46 - will take that one on to the next line
10:48 - there so we can see all of that
10:49 - okay so we'll add our form validation
10:51 - logic here in this route in just a
10:54 - second but first let's just get this
10:56 - displaying in our template so like I
10:59 - said this form is similar to our
11:01 - registration form but with fewer fields
11:03 - so I'm going to open up our register
11:07 - template
11:07 - and grab the code that we use for that
11:10 - so that we can reuse it and so within
11:12 - the registration template I'm just going
11:14 - to grab this entire div of this content
11:17 - section and that wraps our form and I'm
11:20 - just going to copy that entire thing so
11:22 - I will copy that and then within our
11:26 - account template within my snippets here
11:28 - I have a comment in the HTML for where
11:31 - to drop this form so I'm just going to
11:34 - paste that in on this line right here so
11:37 - go up to the top here and save that okay
11:40 - now this is similar to our registration
11:42 - form but it's not exactly the same so
11:44 - we're going to keep the username and the
11:46 - email fields but we want to get rid of
11:48 - the password and the confirm password
11:50 - fields and we're just going to get rid
11:52 - of the entire div that surrounds those
11:54 - so these divs of form groups I'm going
11:58 - to delete both of those for the password
12:01 - and confirm password fields so let's
12:04 - take those out and lastly I'm also going
12:07 - to if I go to the top here we can see
12:10 - that we have a legend I'm going to
12:11 - change this legend from join today and
12:15 - I'm gonna change this over to say
12:17 - account info now we've already gone over
12:19 - what these different form elements do
12:21 - when we created the register and login
12:24 - routes in the third video of this series
12:26 - so I'm not going to go over those again
12:28 - in this video like I said this is pretty
12:30 - much like our register or form with some
12:33 - stuff taken out okay so now let's see
12:35 - how this looks in the browser and make
12:37 - sure that we changed everything
12:38 - correctly so I'm going to save all of
12:41 - the files that we changed and now let's
12:44 - pull this up so it looks like we need to
12:46 - restart our flask server here so I'll do
12:49 - a Python run PI and now pull this up in
12:53 - the browser and reload our account page
12:56 - and actually now that I'm looking at
12:58 - this I don't think that I like the
12:59 - border around this section here around
13:02 - our form and that is that div of content
13:05 - section so I'm going to remove that so
13:07 - I'm going to go back to our account dot
13:10 - HTML template and I'm only going to use
13:13 - the form and I'm going to get rid of
13:15 - this div of this content section so I'm
13:19 - going to get rid of that and right after
13:20 - week
13:21 - close our form I will get rid of that
13:24 - closing div for that and save it okay so
13:27 - now let me reload this in the browser
13:29 - and see how this looks so I will reload
13:32 - this and now we can see that that border
13:34 - around that section is gone and I like
13:35 - that a little bit better now none of
13:37 - this currently does anything when we
13:39 - submit this form but we'll get that set
13:41 - up right now and another thing that
13:43 - jumps out to me with what we have here
13:44 - is that it would be nice if our form
13:46 - already had our username and email
13:49 - filled in for us when we navigated to
13:51 - this page so let's go add that now so I
13:55 - will pull up our project and I will go
13:58 - to our routes dot PI file and first we
14:01 - need to add our allowed messages because
14:03 - we're going to be posting this form back
14:05 - to this route and that is something that
14:07 - is easy to forget when you add new
14:09 - routes with forms so I'm just going to
14:11 - grab that methods section from our login
14:15 - route and paste that down here in our
14:18 - account route so we're allowing get and
14:20 - post requests and now we want to add in
14:22 - a conditional for if our form is valid
14:25 - when submitted so we're going to say if
14:27 - form dot validate on submit and that's
14:32 - actually a method so we need to put
14:34 - parentheses in there and now if our form
14:37 - is valid then we can update our current
14:39 - username and email and one good thing
14:42 - about SQL alchemy is that it makes this
14:44 - really easy so we can simply change the
14:47 - values of our current user variable and
14:49 - then commit those so we can come in here
14:53 - and just say current user dot username
14:56 - is equal to and it'll be equal to form
14:59 - dot username dot data which is what they
15:02 - are going to enter into the username
15:04 - field in that form and now we can also
15:07 - set the email by doing the same thing so
15:10 - we can say current user name dot email
15:13 - and form email data and now all we need
15:18 - to do is submit that so we can say DB
15:20 - dot session dot commit so if I save this
15:24 - now let's also add a flash message that
15:27 - tells the user that their account has
15:29 - been updated so I'll say flash and we'll
15:32 - pass in a message here that says your
15:34 - account
15:35 - has been updated and then also let's
15:39 - pass in a category which is going to be
15:41 - our bootstrap class and so we'll pass in
15:43 - a category of success for that
15:45 - and now let's redirect them back to the
15:49 - account page so I'll say return redirect
15:52 - and that is going to be URL four and we
15:56 - want the URL for the account page and
15:58 - you do want to do a redirect here
16:01 - instead of letting it fall down to the
16:03 - render template line and the reason is
16:06 - because of something called the post get
16:08 - redirect pattern and you might not know
16:11 - what that is but most of you have
16:13 - probably seen it before so if you've
16:15 - ever really reloaded your browser after
16:17 - submitting a form and you see a weird
16:19 - message that comes up that says
16:20 - something like are you sure you want to
16:22 - reload data will be resubmitted or
16:25 - something like that that is because your
16:27 - browser is basically telling you that
16:29 - you're about to run a another post
16:31 - request when you reload your page so us
16:34 - redirecting causes the browser to send a
16:37 - get request and then we don't get that
16:40 - okay so that should take care of
16:41 - updating our users username and email
16:44 - but I also said that it would be nice if
16:46 - our forum was already populated with the
16:49 - current users username and email as soon
16:52 - as we go to the account page so to do
16:54 - this we can add on to our conditional
16:56 - and we can simply say so here we're
16:59 - saying if form not validate on submit
17:01 - and then we can add to this and say L if
17:05 - request dot method is equal to a get
17:10 - request then we can populate those form
17:14 - fields with our current users data so I
17:17 - can say form dot user name dot data is
17:20 - equal to current user dot user name and
17:23 - now also do the same for the email so
17:25 - I'll just copy that and paste it in
17:27 - there and now change both of those to be
17:30 - email so those changes should populate
17:32 - our form with the current users data
17:35 - okay so now that we have those changes
17:38 - in place let's make sure all of that
17:40 - works
17:40 - so first let's pull up the site and
17:42 - create a second user so that we can make
17:45 - sure the validation that we put in place
17:47 - is working
17:48 - so I'm going to make sure that our
17:50 - server is still running here it looks
17:51 - like we need to restart that so I'll do
17:53 - a Python run PI and go back to our
17:57 - website and now let's log out and create
18:01 - a second user here so that we can make
18:03 - sure that our validation is working so
18:05 - the user name I'll just type in as test
18:08 - user this will be test user at demo comm
18:12 - and then paste in a password of testing
18:17 - there and sign up so now we have a
18:19 - second user in our system that is set to
18:22 - test user now I'm going to log in with
18:25 - the first account that I first created
18:27 - and then I will try to update my account
18:31 - so first I'll log in and now I'll go to
18:34 - my account page and we can see that the
18:37 - form is already populated with the
18:39 - current users data so we have our
18:42 - current username and our current email
18:44 - address so now let me try to update my
18:47 - username and email using the values of
18:50 - the other account that we just created
18:52 - so I will try to set my username to test
18:57 - user and I will set the email address to
19:00 - test user at demo comm so if we update
19:04 - this then we can see that both of those
19:06 - fields came back as being invalid saying
19:08 - that that username has already taken and
19:10 - that that email is already taken so
19:12 - that's good but if we instead change
19:14 - these to something like test user 1-2-3
19:17 - and test user 1-2-3 at demo com if I
19:21 - update now then we can see that the
19:23 - account was successfully updated and
19:25 - those values for our username and email
19:28 - are also changed here in the heading now
19:31 - it looks like my flashed message here I
19:32 - should have started that with a capital
19:34 - letter there so I must have missed that
19:36 - let me go and change that which is just
19:39 - right here so I'll change that back save
19:41 - it open up our website again so now let
19:43 - me change these values back to what they
19:45 - were before and this shouldn't be a
19:47 - problem because those old values will no
19:49 - longer exist in the database because
19:51 - they've been updated to these new values
19:52 - so I can set these back to what they
19:55 - were so Cory M s and then Cory M Schafer
19:59 - at gmail.com
20:01 - so we can update that okay so we can see
20:04 - that that changes back fine okay awesome
20:06 - so we've got a pretty good account page
20:08 - here where users can update their
20:11 - information so now let's focus on
20:13 - getting this set up so that we can
20:15 - change the profile picture now to do
20:17 - this we're going to need to add a new
20:19 - field to our form that is an input type
20:22 - of file so let's open up our project and
20:25 - go back to our forms and at the top of
20:28 - this module we're going to import a
20:30 - couple of things from flask WTF so this
20:34 - is going to be so right under flask WTF
20:37 - here I'm going to say from flask WTF dot
20:41 - file and from there we want to import
20:44 - they file field and that needs to be
20:47 - uppercase there so file field and also
20:50 - file allowed so this file field is going
20:54 - to be the type of field that this is and
20:56 - this file aloud is going to be just like
21:00 - a validator where we can say what kind
21:02 - of files we want to allow uploaded and
21:05 - in this case we can restrict it to as
21:07 - since we're uploading images to
21:09 - something like jpg and PNG so let's go
21:12 - down to the update account form and see
21:16 - what this looks like so right above our
21:18 - submit I'm going to add in another field
21:21 - here and we will just call this picture
21:24 - and we'll set this equal to file field
21:26 - and now just like our other fields we
21:28 - can pass in the label for this field so
21:31 - I will say the label for this is update
21:33 - profile picture and now we can pass in
21:37 - our validators so we'll do validators is
21:40 - equal to a list of validators but this
21:43 - is only going to be equal to 1 this will
21:46 - be file allowed and now the arguments
21:49 - that we're going to pass in here is a
21:51 - list of allowed files so for this
21:55 - example we're just going to accept JPEG
21:58 - images and PNG images if you want to add
22:01 - more file extensions on there then you
22:04 - can if you want but this is just we're
22:06 - going what we're going to do for this
22:07 - example and now we have to actually make
22:09 - sure that this field is going to be
22:10 - rendered in our template so we've
22:12 - updated the form and now we need to pull
22:15 - up
22:15 - our account template here to make sure
22:17 - that this gets added now at the bottom
22:20 - of our form here right above our submit
22:23 - button I'll put this picture field and
22:26 - this would be a little different than
22:27 - our other fields so I'm not going to
22:29 - copy and paste the entire div for that
22:31 - section but I will grab certain parts so
22:34 - I'll grab the opening div here and also
22:37 - the label and then I'll paste in a new a
22:41 - new form group here and then close out
22:44 - that div and then we want this to be
22:46 - form picture dot label and we won't give
22:50 - this any class that's just going to be
22:52 - empty there and now underneath here we
22:55 - will add the field itself so this will
22:58 - be form dot picture and we do want to
23:02 - give this a class so we'll say class is
23:04 - equal to and we'll set this equal to the
23:07 - bootstrap class of form control - file
23:11 - and save that now if we get any
23:13 - validation errors back then these errors
23:15 - are a bit different for this file form
23:17 - field so I'll just use a simple span to
23:21 - spit out those errors so inside of our
23:23 - div here I will put in a conditional
23:27 - with our curly braces and percent signs
23:30 - and say if form dot picture dot errors
23:34 - and loop over the over these just like
23:36 - we did our other errors and then I'll
23:39 - copy this end if section here and paste
23:43 - that in and now we want to loop through
23:44 - and print out those errors if there are
23:46 - any so I'm going to grab this for loop
23:49 - here since this is similar to what we're
23:52 - going to be printing out so I will paste
23:54 - that in and correct that indentation now
23:58 - instead this isn't for our email this is
24:00 - for our picture so we'll say form dot
24:02 - picture airs so for error in form
24:06 - picture errors then we want to print
24:08 - this error here and we're also going to
24:12 - want to put in a break after that span
24:17 - so that we can get some spacing between
24:19 - those and all so let's do a class here
24:23 - of text - danger that'll just make sure
24:27 - that those errors are outlined in red
24:30 - text now we didn't have to do that in
24:33 - our other forms because they were
24:34 - wrapped in this invalid
24:36 - feedback div but this is a different
24:38 - kind of field this is a file field so we
24:40 - had to do this a little bit differently
24:42 - ok and one thing that I forget to do
24:44 - sometimes that always throws me off is
24:46 - to add a special encoding type to our
24:49 - form and we have to do this in order for
24:51 - our form to pass our image data properly
24:54 - so at the top of the form here in the
24:56 - HTML where we have the method of post
24:59 - and the action we need to also add an
25:02 - encoding type so I'll say E and C type
25:05 - is equal to and within double quotes
25:09 - there this is going to be multi-part
25:11 - ford slash
25:12 - form - data so again be sure that you
25:16 - get that because sometimes I forget to
25:18 - put that in and the errors that you get
25:20 - aren't entirely obvious if you forget to
25:22 - put that in and it's something that's
25:24 - tripped me up in the past ok so now
25:26 - let's see if we got everything right now
25:28 - so far so let's pull up our site and the
25:31 - browser so it looks like our web server
25:34 - is still running so that's good and now
25:36 - I will reload our account page and we
25:40 - can see at the bottom here that we have
25:41 - an input to choose a new profile picture
25:44 - now we don't have the logic in place to
25:47 - save this image yet but our validation
25:50 - should already work if we try to upload
25:52 - something that isn't a JPEG or PNG so
25:55 - let me try to upload a text file or
25:57 - something like that so I think I have a
25:59 - text file on my desktop so on my desktop
26:02 - here I'm going to try to upload test dot
26:05 - txt so let's open that so when I choose
26:10 - that you can see that it gives us the
26:11 - name of the file that it's going to
26:13 - upload there so now if we submit this
26:15 - then we got an error back here and it
26:19 - said file does not have an approved
26:20 - extension and then gives the extensions
26:23 - here jpg and PNG
26:24 - now like I've said a couple of times now
26:26 - if you get to this point and your form
26:28 - doesn't seem like it's doing anything
26:30 - then definitely double-check that you
26:32 - have that encoding type set in the HTML
26:35 - because I forgot that before and it's
26:37 - not really obvious where the problem is
26:38 - and also it's not really mentioned much
26:40 - in the flash doc you
26:41 - patience oh it took me a while to find
26:42 - out whenever I ran into that okay so now
26:45 - let's add the logic to our route to
26:47 - actually save this profile picture for
26:49 - our user so if we go to our routes I'll
26:53 - open up my project here and go to the
26:56 - routes dot py file then within our
26:58 - validate on submit conditional let's add
27:01 - another conditional to the top of this
27:04 - to see if there is any picture data
27:06 - because that's not a required field so
27:09 - we're gonna have to make this check so
27:11 - we can say if form dot picture dot data
27:15 - then we want to do something with that
27:18 - picture data and now within this
27:19 - conditional I want to set the user's
27:21 - profile picture now the code to set the
27:24 - user's profile picture is logically its
27:27 - own little section of code so it would
27:29 - be nice just to turn this into a
27:31 - different function so I'm going to
27:33 - create a new function above our account
27:37 - route here and I'll just call this save
27:40 - underscore picture and we'll take the
27:43 - picture data as an argument here so I'll
27:46 - accept an argument that is form picture
27:49 - and save that and now inside of that
27:52 - safe picture function will put the logic
27:55 - for saving the users uploaded image to
27:57 - our file system so first we don't really
28:00 - want to keep the name of the file that
28:02 - they uploaded because it might collide
28:04 - with the name of an image that's already
28:06 - in our folder so it would be nice to
28:09 - just randomize the name of this image
28:11 - with something like a random hex so one
28:14 - module that I like to use to create a
28:16 - random hex is one that we saw earlier in
28:18 - the series when we created our secret
28:20 - key and that is the secrets module so
28:23 - I'm gonna go to the top here and import
28:26 - the secrets module so I'll say import
28:29 - secrets and then go back down to our
28:33 - save picture function and now within the
28:36 - safe picture function I'll create a
28:38 - random hex that will be the base of our
28:40 - file name so I'll say I'll call this
28:42 - random underscore hex and set this equal
28:46 - to secrets
28:47 - dot token underscore hex and we'll pass
28:51 - in eight bytes there
28:54 - and now we also want to be sure that
28:55 - we're saving this file with the same
28:57 - extension as it was uploaded so if they
29:00 - uploaded a PNG then it'll be a PNG and
29:03 - if it's a JPEG then it'll be a JPEG and
29:05 - in order to grab the file extension from
29:08 - the file that they uploaded we can use
29:10 - the OS module so I'm going to import
29:13 - that as well so at the top here I will
29:15 - import OS now back down in our save
29:20 - picture function and now we can use the
29:23 - OS path split ext function to get this
29:27 - extension and that function returns two
29:30 - values it returns the file name without
29:32 - the extension and then it returns the
29:35 - extension itself so to grab both of
29:37 - those values we can say F name and comma
29:41 - F ext is equal to AU s dot path dot
29:46 - split ext and then we want to pass in
29:50 - the file name of the picture that they
29:52 - uploaded so we'll say form picture dot
29:56 - file name now this form picture here is
29:59 - going to be the data from the field that
30:02 - the user submits and if it's a file then
30:05 - it does have this file name attribute
30:07 - there so we can use that now we're
30:09 - actually not going to use this F name
30:12 - variable at all we're only going to use
30:14 - the extension now one common thing that
30:16 - people do with in Python when they just
30:18 - want to throw away a variable name is to
30:21 - use an underscore so let's do that
30:24 - now if you don't use an underscore then
30:26 - whatever your editor you're using it
30:28 - might gripe about you having a variable
30:31 - that is unused in your application okay
30:34 - so now let's combine the random hex with
30:36 - the file extension in order to get the
30:38 - file name of the image that we're going
30:40 - to save so to do this I'll just create a
30:43 - new variable here called picture
30:44 - underscore F in for a file name and I
30:47 - will set this equal to the random hex
30:50 - plus the file extension so it'll just
30:53 - concatenate both of those together and
30:56 - now we need to get the full path to
30:58 - where this image will be saved so that
31:00 - Python knows where we're saving this and
31:02 - to do this we're going to use an
31:04 - attribute that we haven't seen yet and
31:06 - that is the
31:07 - - path attribute of our app and that
31:10 - will give the route path of our
31:12 - application all the way up to our
31:14 - package directory so if we want to save
31:18 - this image into our profile pics within
31:21 - our static folder then we can create a
31:24 - variable here called picture path and we
31:28 - will do an OS path dot join and we will
31:32 - join the app dot route path and we will
31:37 - join that with static ford slash profile
31:43 - underscore pics and then we will also
31:47 - join that with the picture file named
31:50 - variable that we just created and we're
31:52 - actually going to use that variable so
31:55 - those can't be within strings okay so
31:58 - let's look at this full line again so we
32:00 - have picture path equal to OS path join
32:04 - we are joining that with the app dot
32:06 - root path which is going to give us the
32:09 - full path all the way up to our package
32:12 - directory and we're going to join that
32:14 - with our static folder and profile pics
32:18 - within the static folder and then join
32:20 - that with our picture file name and
32:22 - using that OS path dot join will make
32:25 - sure that all of that gets concatenated
32:27 - correctly into one long path now if
32:29 - you're not very familiar with what the
32:31 - OS module can do then I do have a
32:33 - separate video on that and that goes
32:35 - into more detail about that module if
32:37 - anyone is interested ok and then we can
32:40 - actually save that image by using this
32:43 - form picture variable again and we can
32:47 - say form picture dot save and now where
32:51 - we want to save this so we can save this
32:53 - at the picture path that we just created
32:56 - so now at this point we've actually
32:58 - saved that picture to the file system
33:00 - but the users image in the database is
33:03 - still set to the default image so we
33:05 - need to update that but since everything
33:07 - and this function is just about saving
33:09 - our image so far let's not put that
33:12 - logic in here instead let's just return
33:14 - the pictures filename that we created so
33:17 - that the user can use that value outside
33:20 - of this function
33:21 - so now I'll just return this picture
33:24 - file name so return picture underscore F
33:28 - in and now back in the conditional that
33:33 - we were writing before we created that
33:35 - function now we can use that function
33:37 - that we just created to save our picture
33:40 - and give us back the file name so we can
33:42 - say picture underscore file is equal to
33:46 - save picture and that's the function
33:48 - that we just created and now we can pass
33:51 - in that form data so form dot picture
33:54 - dot data and I will go ahead and save
33:57 - that and now we can set the current
33:59 - users image to that picture file just
34:02 - like we did with the username and email
34:04 - so I'll copy that line and paste that in
34:07 - here and now we're going to set the
34:09 - current user dot picture oh and actually
34:13 - I forgot that's not picture that is
34:15 - let's see current user image file is
34:18 - what we called that in our models so we
34:20 - need to set the current user dot image
34:22 - file and we want to set that equal to
34:25 - the picture file that was returned from
34:28 - that save picture function so I'll paste
34:30 - that in there okay so now let's save
34:33 - everything and test this out because
34:34 - that was a lot that we just changed so
34:37 - we want to make sure that nothing is
34:38 - broken so let's open up our terminal and
34:42 - we'll probably have to restart our
34:44 - server here and we do so I will run our
34:47 - server and then open up our website and
34:51 - now I am here in my account page so I'm
34:54 - going to try to update my profile
34:56 - picture so I'm gonna actually use a real
34:59 - image here so I will set this equal to
35:02 - this avatar dot PNG on my desktop so
35:05 - I'll open that and now we can see that
35:08 - we're going to update our profile
35:10 - picture to avatar dot PNG so I will
35:12 - update that and we can see that that
35:14 - seemed to work it put our new picture
35:17 - here in our account page ok so that is
35:19 - great that that works so far and also
35:22 - let me reload the page here to make sure
35:23 - that that is still there okay and it is
35:26 - now there is one more thing that I want
35:28 - to do here before we end this video I
35:30 - want to show you how you can
35:32 - automatically resize images when you
35:34 - upload
35:35 - them so right now we're just accepting
35:37 - any image that the user uploads but the
35:41 - largest image on our site right now is
35:43 - just set in CSS to 125 pixels so there
35:47 - would be no use in having a 4,000 pixel
35:50 - image that just gets scaled down to 125
35:53 - pixels it takes up a lot of space on the
35:55 - file system and will also cause your
35:57 - website to run slow because it has to
36:00 - send that large image to the browser
36:01 - every time so for example I have a large
36:04 - image of my dog as a puppy on my desktop
36:07 - and if I upload that as my profile
36:10 - picture then I'll choose file here and
36:12 - we can see that this is large jpg so I
36:15 - will open that and now I'll update this
36:18 - as my profile picture and we can see
36:20 - that that worked now this new image that
36:22 - we uploaded actually looks small but
36:25 - that's just scaled down in CSS if I
36:27 - actually right-click on this and go to
36:30 - open image and new tab and then look at
36:33 - this image in the new tab then we can
36:35 - see that this image is actually pretty
36:36 - large so let's resize these large images
36:39 - before they actually get saved to the
36:41 - file system and to do this I'm going to
36:43 - be using a package called pillow and I
36:45 - have a separate video on this package
36:47 - that some of you may have seen before
36:49 - where I go into a little more in-depth
36:51 - how to work with pictures but in this
36:54 - video we'll just be using this to simply
36:57 - resize the image to 125 pixels so first
37:00 - we need to install that package and we
37:03 - can do that with pip so I will open back
37:06 - up my command line here and shut down
37:08 - our webserver and clear this page and we
37:11 - can do this with a pip install and this
37:14 - is pillow with a capital P there so pip
37:17 - install pillow and once that is
37:20 - installed we can import that into our
37:22 - routes so I will bring back up our
37:24 - application here and go to the top of
37:27 - our page and right below our secrets
37:30 - here I'll say from PIL and this was
37:34 - installed when we installed that pillow
37:36 - package then we can say import we want
37:39 - to import the image class from that
37:42 - library so now let's go back to our save
37:45 - picture function down here towards the
37:48 - bottom right here
37:49 - and now within this function we want to
37:51 - resize this image before we save it so
37:54 - right above our picture dot save we can
37:59 - resize this so to do this I can set an
38:02 - output underscore size and I'll set this
38:06 - to a tuple of the size that we want and
38:08 - I'm just going to set this to 125 125
38:11 - and then we can create a new image so
38:14 - I'll say I is equal to image dot open
38:17 - and we want to open the image that we
38:22 - passed in to the function so form dot
38:25 - picture and now we want to resize this
38:28 - and we'll say image dot thumbnail and
38:31 - we'll set that equal to the output size
38:35 - and now we can save this image instead
38:39 - of saving the form picture that we
38:42 - passed in so instead of doing form
38:44 - picture dot Save we're going to do I dot
38:47 - save because I is the new image that we
38:50 - created from that form picture so like I
38:53 - said that is a pretty simple example of
38:55 - an image resizing and if you'd like to
38:57 - see more of what you can do with images
39:00 - then you can check out the video I did
39:01 - on that pillow package but now we should
39:04 - be able to save this and see that our
39:06 - large picture now gets resized on our
39:09 - file system so I saved everything there
39:12 - now let's rerun our server so I will do
39:15 - a Python run pi and open our website
39:19 - again close down that old image and now
39:23 - for the update profile picture I'll just
39:26 - update that with that large JPEG image
39:29 - again so now let's submit this form and
39:32 - it should resubmit that picture again
39:35 - but this time it should be resized so
39:38 - now if I right click on this and go to
39:40 - open image and new tab and look at this
39:43 - image then we can see it's no longer
39:45 - that very large image that we had before
39:47 - this is scaled down to 125 by 125 pixels
39:51 - and doing that is going to save a ton of
39:54 - space on our file system and also speed
39:56 - up our website and we can view these
39:59 - images within our file system so if I
40:02 - was to
40:03 - go back to our static directory here
40:06 - that I had opened up before if we go
40:09 - into that profile pics directory within
40:11 - our static folder then we can see that
40:13 - we have these images that we uploaded to
40:15 - our site now we have two here that are
40:18 - of my dog and one of these should be
40:21 - large and one of them should be small so
40:22 - I'll preview both of these we can see
40:24 - that that is a large one and if I go
40:26 - over we can see that that is just a
40:28 - small one so I'll close those out and if
40:30 - I was to check the size of these images
40:32 - so I'm on this one I'll go right click
40:34 - and go and get info and it looks like
40:37 - this one here is 2.7 megabytes and if I
40:40 - do a get info on this one this one is 8
40:43 - kilobytes so the difference is huge and
40:46 - lastly you can see that the images that
40:48 - we uploaded here do have a random hex
40:51 - token as the file name for the image and
40:54 - the correct extension so these are JPEGs
40:56 - and this one here is a PNG and we can
40:59 - also see that our older profile pictures
41:01 - are still here that aren't active
41:03 - anymore and if you'd like you could also
41:05 - write some additional code to clean
41:07 - those up and delete those when a user
41:09 - successfully changes their profile
41:11 - picture but I'm just going to leave
41:13 - those there for the time being since
41:15 - they're not taking up that much space
41:17 - okay so I think that is going to do it
41:19 - for this video we now have a way for a
41:21 - user to update their profile information
41:23 - and can also update their profile
41:25 - pictures and in the next video we'll
41:27 - create a page where different users can
41:30 - create posts that get added to the home
41:32 - page and we'll also show how to update
41:35 - and delete those posts from within the
41:37 - website so if anyone has any questions
41:39 - about what we covered in this video then
41:41 - feel free to ask in the comment section
41:42 - below and I'll do my best to answer
41:43 - those and if you enjoy these tutorials
41:45 - and would like to support them then
41:47 - there are several ways you can do that
41:48 - the easiest ways to simply like the
41:49 - video and give it a thumbs up and also
41:51 - it's a huge help to share these videos
41:52 - with anyone who you think would find
41:53 - them useful and if you have the means
41:55 - you can contribute through patreon and
41:56 - there's a link to that page in the
41:58 - description section below
41:59 - be sure to subscribe for future videos
42:00 - and thank you all for watching
42:03 - you
42:12 - you