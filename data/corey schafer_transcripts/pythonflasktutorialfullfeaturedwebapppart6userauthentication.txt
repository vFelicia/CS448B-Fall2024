00:00 - hey there how's it going everybody in
00:01 - this video we'll be learning how to use
00:03 - our application to add users to our
00:04 - database and also how to authenticate
00:06 - users so that they can log in log out
00:09 - and also soon be able to create posts
00:11 - and things like that so let's go ahead
00:13 - and get started so in a previous video
00:15 - we created our database and saw how we
00:17 - could manually create some users and
00:19 - posts but now let's add that same logic
00:22 - to our application to create these users
00:24 - through the registration form now before
00:27 - we create our users we're going to need
00:29 - a way to hash our passwords so in the
00:31 - previous video we were using plain text
00:34 - passwords for our examples but you never
00:36 - want to do this with your actual website
00:37 - because if anyone was to ever get access
00:40 - to your database then they would have
00:42 - the logins for all of your users and
00:45 - that's definitely not a good thing so
00:46 - there are several different hashing
00:48 - algorithms but one good one that we can
00:50 - use is called bcrypt
00:52 - and there's an extension for flask that
00:53 - makes this easy to use and that is
00:55 - called flask bcrypt
00:57 - so let's pull up our command line and
00:59 - install this with pip so I have my
01:01 - virtual environment activated and I'm
01:02 - here in my project directory and I'm
01:04 - going to install this just by saying pip
01:06 - install and this is flask - be crypt so
01:10 - let's install that and once that is
01:12 - installed I'm going to clear my screen
01:15 - here and now let's open up python from
01:18 - our command line and see how this works
01:19 - so i'm going to import the bcrypt class
01:22 - from that flask extension so i'll say
01:24 - from flask underscore bcrypt import this
01:28 - bcrypt class and now we'll create an
01:31 - instance of that class will say bcrypt
01:33 - is equal to this class and put in those
01:37 - parentheses there and now let's hash a
01:40 - password so we can say be crypt and we
01:42 - can use the generate password hash
01:45 - method and then pass in a password and
01:48 - I'll just pass in a password of testing
01:50 - for now and we can see that this created
01:52 - a password hash in this be here at the
01:55 - beginning means that this is in bytes
01:57 - now on the extensions documentation page
01:59 - they say if you want a string then you
02:01 - can simply decode this to utf-8 so if I
02:05 - rerun that password hash and do a decode
02:08 - of utf-8 then now we can see that we
02:13 - a similar hash but there is no longer to
02:16 - be at the beginning there so that's just
02:17 - a regular string okay so one thing to
02:19 - notice here is that each time I run this
02:21 - I get a different hash even when using
02:24 - the same password so if I do this again
02:26 - then this hash is different than the one
02:29 - before and if I do it again then it's
02:31 - completely different than the one before
02:32 - so this means that if someone was to
02:34 - steal this from your database then they
02:36 - wouldn't even be able to use a hash
02:37 - table to crack these passwords so if
02:40 - it's a different hash every time then
02:43 - how can we verify if the user enters the
02:45 - correct password if we just hash they're
02:47 - entered password and can compare it to
02:49 - what we have stored in the database then
02:51 - those will most likely be different so
02:53 - we need to use another method called
02:56 - check password hash in order to check if
02:58 - those passwords are equal so I'm going
03:01 - to save this hash password as a variable
03:04 - so I'll rerun this again and I'll just
03:06 - say that this is our hashed password and
03:09 - remember the password that we used there
03:11 - was the string of testing so now let me
03:14 - clear this out so we have some more room
03:16 - here and now let's check a few passwords
03:19 - against this hashed password so if I say
03:21 - be dot check password hash then
03:27 - first we want to pass in the hashed
03:28 - password so I'll pass in that hashed
03:31 - password and now let's compare this
03:33 - against a password of password so this
03:36 - should return false since our hash
03:38 - password was originally testing so we
03:40 - can see that we did get a false value
03:42 - there but if I pass in testing and check
03:46 - that then that gives us a true so that
03:50 - is how we are going to hash and verify
03:52 - passwords so let's add this to our
03:54 - application initialization so I will
03:57 - exit out of this and clear my terminal
04:01 - and now let's open up our project and I
04:05 - am within my package and knit dot pie
04:08 - file here where we are initializing our
04:10 - application and now to initialize this
04:12 - it's going to be pretty similar to SQL
04:14 - alchemy here so we'll just say from
04:16 - flask bcrypt import that bcrypt
04:19 - class and then down here at the bottom
04:23 - we will say be crypt is equal to
04:27 - decrypt and we want to pass in that app
04:29 - to that bcrypt class to initialize that
04:33 - okay so now let's open up our routes and
04:35 - see what our current registration logic
04:37 - is so if I go to the routes and go to
04:40 - our registration route here and I'm
04:43 - going to make this text a little larger
04:45 - so we can see better here okay so right
04:48 - now we are checking if this form is
04:50 - valid on submit and if it is then we
04:54 - flash a message that an account has been
04:57 - created for the user but we're currently
05:00 - but we aren't currently creating that
05:03 - account so let's do that
05:05 - so if the form is valid on submit then
05:07 - first let's hash the password that they
05:10 - entered so that it's ready for us to
05:12 - save it to the bait database so first we
05:15 - need to import bcrypt and the DB
05:17 - variables and remember if we're
05:20 - importing from our package then it's
05:23 - going to import it from that Annette PI
05:25 - file but we can just simply write that
05:26 - as if we're importing from the package
05:28 - itself so we're already importing this
05:31 - app from that package so now we need to
05:33 - also import the DB and our bcrypt okay
05:38 - so now let's go back down to our
05:39 - registration route and inside of our
05:43 - validate on submit conditional here and
05:45 - this will basically be the same thing
05:47 - that we just saw a second ago in the
05:48 - command line so I will say hashed
05:50 - password is equal to be crypt dot
05:54 - generate hashed well actually that is
05:57 - generate password hash and then we want
06:02 - to pass in the password that we want to
06:04 - hash and this is going to be whatever
06:07 - they insert into the password field so
06:10 - that is form dot password dot data and
06:14 - now remember if we want this to be a
06:15 - string instead of bytes then we can do a
06:17 - dot decode of utf-8 and I'm going to
06:21 - close the sidebar here so that we can
06:23 - see more of this line okay so now that
06:26 - we have a hashed password now we can
06:28 - create a new instance of a user and we
06:30 - saw how to do this in a previous video
06:32 - so we can do this just by going to the
06:36 - next line and creating a new user so
06:39 - I'll say user is equal
06:40 - to user and now we have to pass in all
06:44 - of the fields so we want the username of
06:46 - this user to be equal to the information
06:50 - that they passed into the username of
06:52 - fields audio username data and now we
06:56 - want to set the email of this user equal
06:59 - to form email data and then we can set
07:03 - the password for this user and that
07:05 - password is going to be equal to our
07:07 - hashed password we don't want to pass in
07:10 - the data that they passed to the form
07:13 - because that will be the plain text
07:15 - password we want the hashed version of
07:16 - that okay so once we have that user
07:19 - created then we can go to the next line
07:22 - here and add this user to the changes
07:25 - that we want to make to our database so
07:27 - we can do this by saying DB session dot
07:31 - add and then adding that user and now we
07:34 - also want to commit those changes it's
07:36 - only one change so we can say DB session
07:39 - dot commit okay so that will add the
07:42 - user to the database
07:43 - now let's flash them a message telling
07:45 - them that their account has been created
07:46 - and that they can now log in so instead
07:49 - of the message that we currently have
07:52 - here I am instead going to pass in a
07:56 - message it just says your account has
07:58 - been created you are now able to log in
08:05 - and again we'll keep that success
08:07 - category there because that is the
08:09 - bootstrap class and now instead of
08:11 - returning them to the home route let's
08:12 - return them to the login route so that
08:15 - they can login with that newly created
08:16 - account okay so now let's see if this
08:18 - part worked so let's start up our
08:20 - website so I'll bring up our terminal
08:23 - here our command line and I'll run this
08:25 - application just like we've seen before
08:27 - with Python run dot pi so our server is
08:30 - running we didn't get any airs so I will
08:32 - open this up ok and the website looks
08:36 - good so now if I go to the registration
08:38 - page
08:38 - so if I click sign up with nothing there
08:41 - we can see that the validation is still
08:43 - working so that's good and now let me
08:45 - just create a dummy user here so Cory M
08:49 - s and Cory M Schaefer at gmail.com and
08:52 - the password I'll just put in
08:54 - as testing so let's sign up okay so with
08:57 - valid form information we can see that
08:59 - we now got redirected to the login page
09:01 - was not with our flashed message telling
09:03 - us that we can now login now our logins
09:06 - still aren't working but it looks like
09:08 - our user was added to the database but
09:10 - let's make sure of that though so I'm
09:12 - going to bring up my command line and
09:15 - stop our site from running so I will
09:18 - kill that with control C now I'm going
09:20 - to clear this and I'll start up Python
09:22 - and import our database user model so I
09:26 - will say from flask blog import DB and
09:31 - we also want to import our user model so
09:34 - we'll say from flask blog dot models
09:38 - import user and now let's grab the first
09:41 - user out of this table so I'll say user
09:43 - is equal to user query dot first and we
09:48 - saw how to do this in a previous video
09:49 - so if you haven't watched our database
09:51 - video then you might want to watch that
09:53 - to understand what these queries are
09:54 - doing okay so now let's print out that
09:57 - user and we can see that we got a user
09:59 - with the username of core DMS the email
10:03 - of khorium Schaefer at gmail.com and our
10:05 - default JPEG profile picture so now
10:08 - let's look at the password for this user
10:09 - so if I say user dot password then we
10:13 - can see that we do get a hashed version
10:14 - of a password and that's exactly what we
10:16 - wanted okay so that's good but if we go
10:20 - back to our application then there's
10:21 - actually something wrong with how we
10:23 - have this right now that might not be
10:26 - obvious right off the bat so currently
10:28 - our registration form will validate
10:30 - against things like bad emails and empty
10:33 - fields but there's nothing stopping a
10:35 - user from trying to sign up with a
10:37 - username or email that already exists in
10:40 - our database now we have a restriction
10:42 - set on our database models that say that
10:46 - those have to be unique but that won't
10:48 - be caught or throw an error until we try
10:50 - to add that new user to the database so
10:53 - let's see what this looks like if we
10:55 - were to try to add another user or email
10:57 - that currently already exists so let's
11:00 - start up the website again so I will go
11:02 - back here and close out of the Python
11:05 - interpreter and
11:06 - rerun our application and now let's go
11:10 - back to our application and go to the
11:12 - registration route and now I'm just
11:14 - going to try to sign up with these same
11:15 - credentials that I used before so that
11:18 - was for EMS and Cory M Schaefer at
11:22 - gmail.com with password here and sign up
11:27 - and you can see that we get this ugly
11:29 - error screen where it says that we had
11:31 - an SQL alchemy integrity air and that
11:35 - the unique constraint has failed and it
11:38 - also prints out the stack trace here of
11:41 - all the code that led up to this air now
11:43 - this is the first time that we've seen
11:44 - an error screen like this this is what
11:46 - happens when flask throws an error and
11:48 - you're running in debug mode this
11:50 - information can be extremely useful for
11:52 - debugging problems in your application
11:54 - but this is also why you don't want to
11:56 - be why you want to be absolutely sure
11:58 - that you're never running in debug mode
12:00 - when you deploy your website publicly
12:02 - because this is just too much
12:04 - information to expose to other people
12:06 - you can actually come to the bottom of
12:09 - the stack trace and run Python code to
12:11 - dig further into the problem and you
12:13 - need the debugger pin from your console
12:15 - to do this but it's still risky having
12:17 - that capability so for example if I
12:19 - wanted to debug this line here where we
12:22 - did the DB session dot commit then I
12:25 - could just click on that line or click
12:28 - on the option over here to the right
12:31 - where it says to run code here so if I
12:34 - click on that then it'll ask for the
12:36 - debug or pin and if I pull up our
12:39 - terminal and scroll up here a bit when
12:41 - we first started our server we can see
12:46 - that it has a debug or pin here so I'll
12:48 - copy that and paste that into our
12:51 - debugger on the site and now we can
12:54 - actually run Python code here within the
12:56 - browser to see the context of what the
12:58 - variables were at this point in the
13:00 - application so if I was to print out
13:02 - user and we can see what our user
13:05 - variable was at that point so user dot
13:08 - email so we can see that we can get
13:10 - information back so again that can be
13:13 - useful to debug certain problems but
13:15 - it's also why you don't want to be in
13:17 - debug mode when you're in production
13:18 - okay so
13:20 - now we need to catch the failure that we
13:22 - saw here before we get to this ugly air
13:25 - screen now you might think that it's
13:26 - best to go into our register route here
13:30 - and add in some database checks after
13:32 - our form is validated to see if the
13:36 - username or email already exists in our
13:38 - database and that would be one way to do
13:40 - it but I think that the best way to do
13:42 - this would be to add our own custom
13:44 - validation for the register form that
13:47 - way it gets checked when we actually try
13:49 - to validate the form and we'll return
13:51 - the visual feedback of the error
13:53 - messages like we've seen before so how
13:55 - do we do this now I got this from the WT
13:58 - form documentation so if we open up our
14:02 - forms file so I open up my side bar here
14:05 - and open up our forms module to do this
14:07 - we want to come inside of our
14:09 - registration form here and go down and
14:12 - now we can create a custom validation
14:14 - simply by creating a function within
14:16 - this form so I'll type this out and we
14:19 - can go over it so this is going to say
14:22 - this is going to be a function of
14:24 - validate field and take self and field
14:28 - as arguments there then we'll say if
14:31 - true raised validation error and we're
14:37 - also going to want a error validation
14:39 - message so validation message okay so
14:43 - what I just created here is basically a
14:45 - template for our validation methods so
14:49 - we're going they're going to be in this
14:51 - format so validate and then we're going
14:53 - to put the field name here that we want
14:54 - to validate and then also pass in at the
14:57 - field name here as an argument and then
14:59 - we're going to have some kind of
15:01 - conditional so this just says if true
15:04 - for now but we'll add in some type of
15:05 - conditional and if it meets that
15:07 - condition then we can raise a validation
15:09 - error with a validation message and I
15:11 - think this will be more clear once we
15:13 - customize this to our needs so let's do
15:15 - that now so we want to validate the user
15:17 - name field so we can change this field
15:21 - name to be user name and we also changed
15:25 - that argument to use your name there and
15:27 - the condition that we want to check is
15:29 - whether or not the user already exists
15:31 - in the database so first we need to imp
15:34 - the user model from our models so from
15:36 - the top here I will say from flask blog
15:40 - dot models import user and now go back
15:44 - to our conditional and now we can query
15:47 - whether the username being submitted to
15:49 - the form is already in our database by
15:52 - saying of above the conditional here
15:55 - will say user is equal to user dot query
16:00 - dot filter by and we want to filter by
16:04 - if this username is already in the
16:07 - database we'll say username is equal to
16:09 - username dot data now this is what's
16:12 - coming from the form that's what this
16:14 - argument is here and then we'll just get
16:16 - the first value back from the database
16:19 - so if there is a value then we'll get
16:22 - the first one there if there isn't a
16:24 - user then that's just going to return
16:25 - none and now we can change our
16:27 - conditional to something that we want to
16:29 - throw a validation error so if this user
16:32 - exists already then we want to throw the
16:35 - validation error so I'll get rid of
16:37 - these empty spaces here so we'll just
16:39 - say if user whoops if user then we want
16:45 - to raise the validation error so
16:47 - basically if user is none then it won't
16:49 - hit this conditional but if user is
16:52 - anything other than none then it will
16:53 - throw this validation error now the
16:55 - validation message is what gets sent
16:57 - back to the form so we want to be more
16:59 - specific so that the user knows what
17:01 - actually went wrong so we want to say
17:03 - that username is taken please choose a
17:11 - different one and lower case that see
17:14 - there looks a little weird okay
17:15 - so that should be good for our username
17:17 - validation Oh actually there is one more
17:19 - thing we haven't actually imported this
17:21 - validation error yet so that needs to be
17:23 - done as well and that is part of the WT
17:26 - forms validator so we can just add that
17:29 - to the import there so from WT forms dot
17:33 - validators add that validation error
17:35 - there onto the import okay so that
17:38 - should give us a validation error if the
17:39 - user name is already taken now we want
17:41 - the email to be unique too so let's make
17:45 - another custom validator for the email
17:47 - and we can simply copy and paste this
17:50 - one since it will be so similar and I
17:54 - will paste this in right below here and
17:59 - now we need to change out the field
18:00 - names here so we can say that we want
18:02 - this to be validate email and also
18:05 - change the argument that we're passing
18:06 - in there so the email parameter is what
18:09 - we want and now for this we want to make
18:12 - sure that the email doesn't exist in our
18:14 - database so instead of username equal
18:17 - equaling user name data we want this to
18:19 - be email equals email dot data and so
18:24 - the conditional will be the same so if a
18:25 - user exists with that email then we want
18:29 - to throw a validation error and our
18:31 - message will just say that email is
18:34 - taken please choose a different one so
18:36 - we'll save that okay and simply by
18:38 - adding those custom validators that
18:40 - should solve our problem and catch that
18:42 - before we see that ugly error that we
18:44 - saw before so let's go back and reload
18:47 - our page so okay it looks like our
18:50 - website is still running so that's good
18:52 - so I'll go back to our register form so
18:55 - we're still on that ugly page there and
18:57 - now let me try to fill out our form with
19:00 - a username and email that is already in
19:04 - the system so we will fill this out and
19:08 - sign up and we can see that we got
19:10 - validation errors for both of those this
19:12 - one says that the username is currently
19:14 - taken please choose a different one this
19:15 - says that the email was taken and two
19:17 - please choose a different one so those
19:19 - are working and we were able to query
19:21 - our database and tell the user that this
19:23 - username or email was already taken and
19:26 - that they'll need to choose something
19:27 - different okay so now we have a pretty
19:29 - good registration system now we need to
19:31 - create a login system so that our users
19:34 - that have created accounts can log in
19:36 - and log out now to do this we're going
19:38 - to be using another flask extension and
19:40 - this extension is called flask login and
19:42 - it makes it really easy to manage user
19:44 - sessions so first let's install that by
19:48 - using pip so I'm going to open our
19:51 - command line here and I'm going to shut
19:53 - down server by hitting ctrl C and
19:56 - clearing this out and we can install
19:57 - this just by saying pip install flask
20:01 - login and once we have that installed
20:05 - I'll clear the screen here and now let's
20:07 - add this to our initialization of our
20:11 - application like we've done with our
20:12 - other extensions so I'll open up our
20:14 - code here and go to our an it dot PI
20:18 - file within our package and just like
20:20 - our other extensions we can import this
20:22 - and then initialize it so the class that
20:24 - we want to import from this extension
20:26 - will be so from flask login we want to
20:29 - import the class login manager and now
20:33 - we can create an instance of that so
20:35 - I'll save that there and down below our
20:37 - other extensions I will say login
20:40 - manager is equal to login manager and
20:44 - I'll pass in the app into that class ok
20:47 - so now we're ready to use this login
20:49 - manager in our application so the way
20:52 - that this works is that we add some
20:54 - functionality to our database models and
20:57 - then it will handle all of the sessions
20:59 - in the background for us so let's open
21:02 - up our database model so I'll open up
21:04 - this model stop py file here and first
21:06 - of all we need to import our login
21:08 - manager from our package and that can't
21:11 - comes from the same place as our DB
21:13 - instance so we can just add that to our
21:15 - import so I will add the login manager
21:20 - to our imports there from our flash blog
21:21 - package and now we need to create a
21:23 - function with a decorator called user
21:26 - loader and this is for reloading the
21:29 - user from the user ID stored in this
21:31 - session and I simply grab this from
21:33 - their documentation on the extensions
21:35 - website so it's not like I've memorized
21:38 - this it's just one thing that you need
21:39 - to put in place for the extension to
21:42 - work because the extension has to know
21:44 - how to find one of your users by ID
21:46 - so first let's create this decorated
21:49 - function so we can create a function
21:53 - called load user that takes a user ID as
21:56 - an argument so I'll do that now
21:57 - so load user that takes a user ID as our
22:02 - argument and then we can return the user
22:05 - for that ID and if you remember from a
22:07 - couple of video videos ago we can do
22:09 - this with the query dot get method so
22:12 - I'll say return user dot
22:14 - query dot get and we want to get the
22:17 - user with that ID and let's cast that to
22:20 - an integer just to be sure so we will
22:23 - pass in this user ID here and save that
22:26 - and now let's decorate this function so
22:28 - that the extension knows that this is
22:30 - the function to get a user by an ID and
22:33 - we have to use this naming convention so
22:36 - we will say so we'll put the @ sign to
22:39 - specify a decorator this is going to be
22:41 - login manager dot user underscore loader
22:46 - okay so we've almost got this extension
22:48 - set up but there's one more thing that
22:50 - we have to do so the extension will
22:52 - expect your user model to have certain
22:55 - attributes and methods it's going to
22:57 - expect for to be exact one is called is
23:01 - authenticated which will return true if
23:03 - they've provided valid credentials
23:05 - another is called is active another is
23:09 - called is anonymous and the last one is
23:11 - a method called get ID now we could add
23:15 - all of these ourself but this is so
23:17 - common that the extension provides us
23:20 - with a simple class that we can inherit
23:22 - from that we'll add all of these
23:24 - required attributes and methods for us
23:26 - so we can simply import this class from
23:29 - flask login and this class is called
23:31 - user mixin so I'll say from flask
23:34 - underscore login import user mix in and
23:39 - spell that correctly and save that and
23:42 - then in our user model we can simply
23:44 - import from this user mix in a class so
23:48 - I will just pass that in as a class that
23:50 - we inherit from now be sure that you're
23:52 - still inheriting from both DB model and
23:56 - user mixin you don't want to overwrite
23:58 - the DB model okay so that should be all
24:01 - we need to do with our extension in
24:03 - order for it to manage our sessions for
24:05 - us
24:05 - so now let's modify the login route so
24:08 - that we can see how this works so let's
24:11 - pull up our routes again and go to our
24:13 - login route so before we were simply
24:17 - checking a hard-coded username and
24:20 - password here but now we're going to be
24:22 - actually checking our database if the
24:25 - username and password is valid so
24:28 - I'm going to delete what we have within
24:30 - our form validate on submit conditional
24:33 - here and I'm only going to leave this
24:36 - flash login unsuccessful part so I'll
24:39 - get rid of the current conditionals that
24:42 - we have and now let's put in our logic
24:44 - for logging in a user so first of all
24:47 - they'll be logging in with their email
24:50 - so let's query our database to make sure
24:52 - that the user exists so I can say user
24:55 - is equal to user dot query dot filter by
25:00 - spell that right and we want to check if
25:05 - the their email is equal to form email
25:09 - dot data so the data that the user
25:13 - entered into the email form we want to
25:15 - filter if there are any emails in our
25:17 - database with that same email address
25:19 - and if so we just want to get the first
25:23 - user back with that email and if there
25:26 - isn't one then it will just return none
25:27 - and now I'm going to create a
25:29 - conditional that simultaneously checks
25:31 - that the user exists and that their
25:34 - password verifies with what they have in
25:37 - the database so I will say if user which
25:41 - will make sure that the user that we
25:42 - just filter by exists and bcrypt
25:46 - dot check password hash and now we want
25:52 - to compare their database password with
25:54 - the password that they entered into the
25:56 - form so first we pass in the hash
25:59 - password to this check password hash
26:01 - method so we can just pass in user dot
26:04 - password and that'll be what comes from
26:06 - the database since this is the database
26:08 - query here and the second value is the
26:11 - password that they entered into the form
26:13 - so form dot password dot data and save
26:17 - that now we also need the colon here at
26:20 - the end of our conditional so if the
26:23 - user exists and the password that they
26:25 - entered is valid with what's in the
26:27 - database then we want to log that user
26:30 - in so to log them in using our flask
26:33 - login extension we need to import the
26:36 - login user function so I'll go up here
26:38 - to the top and we can simply say
26:41 - from flask underscore login import we
26:46 - want to import this login user function
26:48 - so let's copy this go back down to our
26:51 - conditional and now we'll simply use
26:53 - this function to log the user in so we
26:56 - can paste this in here and what we want
27:00 - to login this user and also remember
27:04 - that we have a remember me form and this
27:06 - login user function takes a remember
27:09 - argument as well so we can just say
27:11 - remember is equal to form dot remember
27:14 - dot data and that's just going to be a
27:17 - true/false value if they check it then
27:20 - that'll be true if it's unchecked it'll
27:22 - be false okay so that will login the
27:24 - user and after they're logged in let's
27:26 - now redirect them to the home page so
27:29 - we'll just say return redirect which
27:32 - we've seen before
27:33 - URL for and we want the URL for the home
27:38 - page okay and if they submitted the form
27:40 - and it doesn't meet our conditional here
27:43 - of being a valid email or password then
27:47 - let's just keep this flashed message
27:49 - here from before that says that the
27:52 - login is unsuccessful and the check the
27:53 - username and password and actually just
27:56 - realize that or not logging in by
27:57 - username or logging in by email so that
27:59 - should be check email and password so if
28:03 - we don't hit this conditional here then
28:05 - we just want to flash this message so
28:07 - we'll put in and else and then indent
28:11 - that flash message into the else block
28:14 - there so if it wasn't a successful login
28:17 - then they'll never hit this return
28:19 - statement here and they'll just end up
28:21 - down here at the bottom where we're
28:23 - simply returning the login page okay so
28:26 - let's try this out so let's bring up the
28:28 - site in the browser and I'll try to log
28:30 - in with the user that we created just a
28:32 - bit ago so if we check our site our
28:37 - server is not running so I will run that
28:39 - and then pull up the site in the browser
28:42 - and now let's go to the login page and
28:45 - first let me give it some bad
28:46 - credentials so I'll just say C at demo
28:49 - dot-com and pass in a random password so
28:53 - we can see that if I log in with a bad
28:54 - email
28:55 - or password then we can see that we just
28:57 - get kicked back to the login page with
28:59 - our flashed message that says login
29:01 - unsuccessful please check email and
29:03 - password okay so now let me login with
29:06 - the password that I chose with the
29:08 - username and password that I chose
29:09 - before so I'll do kori M Schaefer at
29:12 - gmail.com and that password of testing
29:17 - so let's login so we can see that when I
29:19 - put in the email and password that's
29:20 - actually in the database then I get
29:22 - redirected to the home page that seemed
29:24 - to have worked ok so that's good so
29:27 - we're actually logging in users who
29:29 - exist in our database now there's only a
29:32 - couple of other things that we need to
29:33 - set up here and we'll be finished up
29:35 - with this part so one thing that's a
29:37 - little strange here is that we're logged
29:40 - in but we can still see our login and
29:42 - register routes in our navigation bar so
29:45 - if we click on one of those routes that
29:47 - we can see that we can get back to the
29:49 - login page even though we're already
29:51 - logged in so really if the user is
29:53 - already logged in and they try to go to
29:56 - the login or register page then we
29:58 - should probably just redirect them back
29:59 - to the home page because they don't need
30:01 - to be on those pages if they're already
30:03 - logged in to their account so in order
30:05 - to tell if the user is currently logged
30:07 - in then we can use the current user
30:10 - variable from the flask login extension
30:13 - so let's go back to our routes and
30:15 - import that so I will open up our routes
30:17 - go up to the top of our import here and
30:20 - where we're importing from this flask
30:24 - login let's also import current
30:27 - underscore user and now at the top of
30:30 - both of our login and register routes so
30:32 - I'll do the register route first at the
30:35 - very top here I will just say if the
30:38 - current user is authenticated then we
30:45 - want to return a redirect for the home
30:50 - page so I will do a redirect URL for and
30:53 - we will send them back to the home page
30:57 - and I will just copy this and paste this
30:59 - into the top of the login route as well
31:02 - so now let's see what happens when we
31:04 - try to go to the login or register page
31:06 - if we're already logged in so our web
31:08 - server still
31:09 - so now if I go to the home page and then
31:12 - try to go back to the login page then we
31:14 - can see we just get redirected to this
31:16 - home page if I click on the register
31:18 - page then again we just get redirected
31:20 - back to the home page so that's good
31:22 - that conditional and that redirect that
31:23 - we put in there is working now it's a
31:26 - little strange that we even see those
31:27 - links in our navigation if we're logged
31:29 - in most websites will replace those with
31:32 - a logout link if you're logged in so
31:34 - let's create a logout route to logout
31:37 - our user and then we'll display in our
31:39 - navigation when the user is logged in a
31:42 - logout route so to do this I will go
31:45 - back to our routes and go to the bottom
31:47 - here and now we'll create a logout route
31:49 - that's going to be pretty short so I'm
31:52 - gonna just grab another route as a
31:54 - starting point here and get rid of these
31:57 - methods we don't want posts to this
31:59 - route and I will call this route logout
32:02 - and just like we use the login user
32:05 - function to log the user in we're going
32:07 - to need to use the logout user function
32:09 - to log the user out
32:11 - so first let's import that so at the
32:13 - very top here where we imported login
32:16 - user
32:16 - let's also import logout user and go
32:20 - back down to our logout route and now
32:22 - within this route we can simply just log
32:24 - the user out and this doesn't take any
32:26 - arguments because it already knows what
32:28 - user is logged in so we can just say log
32:31 - out underscore user and run that
32:34 - function and once the user is logged out
32:36 - let's redirect them back to the home
32:38 - page so I will just grab the redirect
32:41 - link for the home page here and paste
32:44 - that in below our logout user ok and we
32:47 - also want to actually see this logout
32:49 - link in the navigation if the user is
32:51 - logged in so in this case we'll have to
32:53 - change our layout template where the
32:55 - navigation is created so I will open up
32:58 - our templates folder here and open up
33:00 - our layout template where those
33:02 - navigation links are which are right
33:04 - here here are the login and register
33:07 - routes so right where we're creating
33:09 - these two anchor tags for our login and
33:12 - register routes I'm going to put in a
33:13 - Jinja to conditional and use that same
33:16 - current user dot is authenticated check
33:19 - that we used before so I will open up
33:23 - codeblocks here with some curly braces
33:25 - and percent signs and then we can say if
33:28 - current underscore user dot is
33:33 - authenticated then that means that the
33:36 - user is logged in and we want to add the
33:39 - logout route and we'll do that in just a
33:41 - second but for now I'm going to put in
33:44 - our else block and in the else block if
33:47 - they are not authenticated then we want
33:49 - to show the login and register routes so
33:51 - I will end it those into that code block
33:53 - and now we need to close out this if
33:58 - statement so curly braces and percent
34:01 - signs and end if okay so now let's copy
34:05 - one of these links here and paste this
34:08 - into the is authenticated section and
34:11 - this is where we want to display the
34:12 - logout route so I will change the URL
34:15 - for from login to log out and change the
34:18 - text from login to log out okay so now
34:22 - let's save this and let's test all of
34:23 - this out so if we open up the terminal
34:27 - then we had an error for a second there
34:31 - whenever I saved so let's rerun our
34:33 - server make sure we're not getting any
34:35 - errors okay so our server is running if
34:37 - I pull up our page here then I'm already
34:41 - logged in and whenever I reloaded the
34:43 - page we can see that now we get this
34:45 - logout link so let me click on that
34:47 - logout link and as soon as I did we can
34:49 - see that these change to log in and
34:51 - register so that seems to be logging me
34:53 - in and logging me out let's just make
34:55 - sure that that login functionality still
34:58 - works as well so I will type in the
35:01 - credentials of the user I created yep
35:04 - and we can see that now the logout link
35:06 - is displayed in the top right okay so
35:08 - the last thing that we're going to be
35:09 - learning in this video is how to put a
35:11 - restriction on certain routes so that
35:13 - you can only go to those routes if you
35:15 - are logged in so you'll see this on
35:18 - certain sites all the time so say that I
35:20 - click on a link to edit my Twitter
35:22 - profile or something like that if I'm
35:24 - not logged in then it will take me to
35:27 - the login page and say hey you have to
35:29 - log in first before you can view this
35:31 - page so let's do something like this on
35:34 - our site so let's create a
35:36 - route for the users account that they
35:38 - can access after they've logged in so
35:41 - first we have to create this route so I
35:43 - will open our project back up and open
35:47 - up our routes that py file and go down
35:51 - to add another route here and now I'll
35:53 - create an account route so I'll copy
35:55 - this section here and paste this in and
35:58 - instead of log out we want this to be
36:00 - account be sure that you change the
36:02 - function name as well and we're also
36:04 - going to need a template for this route
36:05 - so we'll create a template called
36:07 - account HTML and we'll create that a
36:10 - template right now but first let's go
36:12 - ahead and return the template for our
36:16 - route that we're about to create so I'm
36:18 - just going to copy where we are
36:19 - returning a template up here and then
36:22 - paste this in and modify it so we want
36:26 - to return an account dot HTML template
36:30 - that we're going to create in just a
36:31 - second and the title of that page will
36:33 - be account ok and now let's create that
36:36 - template so within our templates
36:38 - directory I will create a new file and I
36:41 - will call this account dot HTML now I
36:45 - want a starting point for this template
36:47 - so I'm just going to open up our about
36:49 - template and copy this code here where
36:51 - we're extending from our layout and
36:53 - opening our block content section and
36:55 - I'll paste that into our account
36:57 - template but within our content section
37:00 - of our account template we'll make this
37:02 - super simple for now and just display
37:04 - the current users username so in this h1
37:07 - tag here instead of saying about page I
37:10 - I'm going to use these double curly
37:12 - braces and print out the current user
37:15 - dot user name and now let's add a link
37:19 - to this route within our navigation if
37:22 - the user is logged in and our navigation
37:25 - is located in our layout template we
37:27 - just saw this so this is going to be
37:29 - visible if the user is logged in so
37:32 - right above our logout link we will copy
37:35 - that and we will paste in this account
37:38 - link so instead of logged out I'll say
37:40 - account and the URL here is going to be
37:43 - the URL for account so I'll save that so
37:46 - now if we check our servers still
37:48 - running we need to reach
37:49 - start that so I would do that now so
37:52 - restart our server and now if we go back
37:54 - to our page we can see that now we have
37:57 - this account link here in our navigation
37:59 - and if we click on this account link
38:02 - then we can see that it displays the
38:04 - current logged in users username but if
38:08 - we go back and log out and then try to
38:13 - go to this account page then we can see
38:16 - that we don't get anything on this
38:18 - screen and we don't get anything on this
38:20 - screen because it doesn't have a current
38:22 - user and doesn't know what user name to
38:24 - display so we want to put a check in
38:27 - place that makes a user login before
38:29 - they can access this account page so to
38:32 - do that this is extremely easy to do we
38:35 - can use the log-in required decorator
38:37 - from the flask login extension so if we
38:40 - go back to our routes so I open up our
38:44 - routes file let's go up here to our
38:46 - imports and from our flask login
38:49 - extension we want to add another import
38:52 - here and this is going to be login
38:54 - underscore required okay and now I'm
38:59 - going to copy this login required here
39:02 - and now we can simply add this decorator
39:04 - to our account route so if I go down to
39:07 - our account route here at the bottom
39:10 - then I'm gonna simply add another
39:12 - decorator here and that decorator is
39:14 - going to be this login required that we
39:17 - just imported so now our extension knows
39:20 - that we need to login to access that
39:22 - route but we also need to tell the
39:24 - extension where our login route is
39:25 - located so to do this we need to go back
39:28 - to our an it dot PI file where we first
39:32 - initialize this application and right
39:35 - under where we created our instance of
39:37 - the login manager we can set the login
39:40 - round by saying login manager dot login
39:45 - view and set that equal to our login
39:48 - view and this will just be login and the
39:51 - view that we pass in here is the
39:52 - function name of our route so it's the
39:55 - same thing that we would pass in to the
39:58 - URL for function okay so now let's try
40:01 - this again in our browser so
40:03 - I have saved all of these files that
40:06 - we've changed so I'll pull up our
40:07 - terminal and our web server is still
40:09 - running so that's good pull up our site
40:12 - and go back to our home page so now I'm
40:14 - not currently logged in so we can't see
40:17 - the account link up here but I can still
40:19 - type that in manually and go to that
40:22 - route and if I type that in then we can
40:25 - see that it redirects us to our logout
40:27 - or login route and it says please log in
40:30 - to access this page so now if I was to
40:32 - log in with the account I've been using
40:36 - and then submit that then it sends us
40:40 - back to the home page and now if I try
40:43 - to access that account page again then
40:46 - we can see that we do access that
40:47 - account route and it displays the
40:49 - current users username okay so there are
40:51 - just two more things that I'd like to do
40:53 - to clean this up a bit so first of all
40:55 - the flashed message telling us to log in
40:58 - it was pretty ugly you may have noticed
41:00 - that in our video so far we've been
41:02 - using the flash categories to add a
41:04 - class to those Flash alerts now to do
41:08 - this within the log in message then we
41:11 - can go back to our an it file here and
41:14 - then we can just add another line here
41:16 - so I'm going to copy what we have here
41:18 - and this is going to be login manager
41:20 - dot login underscore message underscore
41:25 - category and now we're going to set that
41:27 - equal to the category that we want that
41:29 - to be which in our case is what we're
41:31 - using for the bootstrap classes so I'm
41:33 - just going to set this equal to info for
41:35 - the info class which in bootstrap is
41:37 - just this nicely colored blue
41:39 - information alert okay now the last
41:41 - thing that I want to do to improve this
41:43 - is when we tried to access the account
41:46 - page and we were logged out it directed
41:48 - us to the login which is good but after
41:51 - we logged in it first redirected us back
41:54 - to the home page and we had to access
41:56 - the account page from there so it would
41:59 - be nice if it would just redirect us
42:01 - back to the page that we were trying to
42:03 - access before it told us that we had to
42:05 - login and this is easy to do as well now
42:08 - I don't know if you notice this but when
42:10 - we tried to access the account page and
42:12 - it directed us to the login first it
42:14 - added a query parameter to the you
42:17 - our L of the page that we are trying to
42:19 - access so let me show what this looked
42:22 - like
42:22 - so our server is still running so that's
42:25 - good so let me log out and then try to
42:28 - access this account page so first of all
42:31 - we can see that our flashed message
42:33 - looks better now with that info style
42:35 - but also if we look here in the URL then
42:39 - we have a query parameter here called
42:42 - next and it is equal to the route that
42:46 - we were trying to log into before we got
42:48 - redirected so in our login route let's
42:51 - access that query parameter and if it
42:54 - exists then we will direct the user
42:56 - there after they login so I'm going to
42:58 - open up our routes here and let's see
43:02 - open up our routes top py file and go to
43:04 - our login route and actually first thing
43:07 - we're going to be accessing query
43:09 - parameters and we will need to import
43:11 - the request object from flask so first
43:14 - let's go to the top and import that and
43:16 - this is going to be from flask so we've
43:18 - already got some imports from flask here
43:20 - so I'm just going to add on to this and
43:22 - I will import this request object here
43:26 - and then go back down to our login route
43:28 - so now we want to get this after the
43:30 - user logs in so this login user line
43:33 - here is where we logged in at the user
43:35 - so then we can get the next parameter
43:38 - from the URL if it exists by saying
43:41 - something like next page is equal to
43:44 - request dot args dot get and we want to
43:50 - get that next parameter now args is a
43:54 - dictionary but you don't want to access
43:57 - next using the square brackets and key
44:00 - name because that would throw an error
44:02 - if the key doesn't exist and the next
44:04 - parameter is going to be optional
44:07 - so if we use the get method then it will
44:10 - simply return none if the next key
44:12 - doesn't exist so be sure that you are
44:14 - using the get method and not the square
44:16 - brackets with the key like you might be
44:18 - used to so now if that next parameter
44:20 - exists the next page will be equal to
44:24 - that route but if it doesn't exist the
44:27 - next page is going to be none so
44:29 - now and the return statement we can do
44:32 - something like this so I will say return
44:36 - redirect and I'll do a redirect to that
44:39 - next page route if next page which
44:45 - basically means if it is not none and
44:47 - then we can put in and else here and say
44:50 - else redirect for the URL for home now
44:54 - some of you might not be familiar with
44:56 - this and Python but this is called a
44:58 - ternary conditional basically we're just
45:01 - saying redirect to the next page if next
45:04 - page exists but if it is none or false
45:07 - then just return the redirect to this
45:10 - home page okay so that should do it for
45:12 - our changes so now let's be sure that we
45:14 - save all of these changes and then pull
45:17 - up our browser so first I'll check my
45:20 - terminal and we have to restart our web
45:22 - server here and pull up our browser okay
45:26 - so now we are currently logged out so if
45:29 - we try to access our account page then
45:32 - it should redirect us to the login page
45:34 - which which it did and now if we log in
45:38 - with the account that I created before
45:43 - then we can see that when we login it
45:46 - redirected us to the account page so
45:49 - that's good that's what we wanted now we
45:51 - also probably want to make sure that it
45:52 - still directs us to the home page if the
45:54 - next parameter doesn't exist in the URL
45:57 - so let's log out and simply go to the
46:01 - login page and since we went there
46:03 - directly
46:03 - this next parameter doesn't exist in the
46:05 - URL because we didn't try to access a
46:08 - page that required a login so now let's
46:11 - log in again and we can see that that
46:15 - logs us in and directs us to the home
46:16 - page so all of that seems to be working
46:19 - well okay so I think that is going to do
46:21 - it for this video I hope that now you
46:22 - have a good idea for how you can
46:24 - implement an authorization system like
46:26 - this on your website and in the next
46:28 - video we'll update the user account page
46:31 - and make it so that users can update
46:33 - their information and also add an image
46:36 - for their profile picture but if anyone
46:38 - has any questions about what we covered
46:40 - in this video then feel free to ask in
46:41 - the comment section below
46:43 - I'll do my best to answer those and if
46:44 - you enjoy these tutorials and would like
46:46 - to support them then there are several
46:47 - ways you can do that these ways to
46:49 - simply like the video and give it a
46:50 - thumbs up and also it's a huge help to
46:52 - share these videos with anyone who you
46:53 - think would find them useful and if you
46:55 - have the means you can contribute
46:56 - through patreon and there's a link to
46:57 - that page in the description section
46:58 - below be sure to subscribe for future
47:00 - videos and thank you all for watching
47:13 - you