00:00 - hey there how's it going everybody in
00:01 - this video we're going to go over the
00:02 - basics of filtering data from data
00:04 - frames and series objects so for example
00:07 - if we wanted to look at our survey data
00:09 - and only look at people who know Python
00:10 - then we can filter that data out or
00:13 - maybe we only want to see results from a
00:15 - specific country or people that have a
00:17 - specific salary range anything like that
00:19 - we can do all of that by filtering out
00:21 - data from our series and data frame
00:24 - objects and we'll learn how to do that
00:25 - in this video so filtering is one of the
00:28 - main things to learn with pandas because
00:30 - it's basically how we begin every
00:32 - project by filtering the data that we
00:34 - want from the data that we don't now I'd
00:36 - also like to mention that we do have a
00:38 - sponsor for this video and that is
00:40 - brilliant org so I'd really like to
00:42 - thank brilliant for sponsoring this
00:43 - series and it would be great if you all
00:45 - could check them out using the link in
00:46 - the description section below and
00:47 - support the sponsors and I'll talk more
00:49 - about their services in just a bit so
00:51 - with that said let's go ahead and get
00:53 - started ok so first of all let me show
00:55 - you something that's going to be the
00:56 - basis for our filters if we perform some
00:59 - basic comparisons using our data frames
01:02 - then we'll get back some interesting
01:04 - results so let's see what this looks
01:06 - like so right now I have my snippets
01:08 - notebook open that we've seen a couple
01:10 - of times throughout the series and at
01:12 - the bottom here I'm going to make a
01:13 - basic comparison and see what the result
01:15 - looks like so let's say that I wanted
01:18 - everyone that has the last name of DOE
01:20 - from our data frame there should be two
01:22 - since we have a Jane Doe and a John Doe
01:26 - here in our data frame so in our bottom
01:28 - cell here I'm going to put a comparison
01:30 - that says DF and then we want to access
01:33 - that last name column and now we can
01:36 - just say if that last name equals equals
01:40 - doe so if I run this then what we get
01:44 - back is a series object and this might
01:47 - not be what you expected so maybe you
01:49 - thought we would just get a data frame
01:51 - back with all of the values that met our
01:53 - criteria but what we got back is a
01:56 - series with a bunch of true/false values
01:59 - now these true/false values actually
02:01 - correspond to our original data frame
02:04 - and the true values are the rows that
02:06 - met our filter criteria and the false
02:09 - values are the rows that didn't meet our
02:11 - filter criteria so you can basically
02:13 - think of
02:13 - like a mask so we can see here up here
02:16 - in our simple data frame the last name
02:18 - of Schaefer is false and these two last
02:20 - names here with Doe are true so this is
02:24 - a filter mask when and when you apply it
02:27 - to a data frame it will give you all of
02:29 - the rows that meet that filter criteria
02:31 - so now let's apply this filter to our
02:34 - data frame so first I'm going to assign
02:36 - this this return a series here to a
02:39 - variable and I'm just going to call this
02:41 - variable filt so I'll say filt is equal
02:44 - to and then this comparison here now
02:47 - filter is a built-in Python keyword so
02:50 - be sure to use something else anytime I
02:53 - assign these two variables I usually
02:56 - just use this filt keyword here
03:00 - we're not keyword by variable name now I
03:02 - also usually like to wrap my entire
03:04 - filter in parentheses because I find it
03:07 - easier to read so this isn't going to
03:10 - change anything but I'm just going to
03:11 - put this entire thing here within
03:13 - parentheses so that I can see that this
03:15 - assignment here is separate from this
03:18 - equal sign okay so now we have this
03:20 - filter here and remember that this this
03:24 - filt variable here is equal to this
03:26 - series here of true and false values and
03:29 - now let's apply this filter to our data
03:32 - frame and we can do this in a couple of
03:34 - ways so you might see some people do it
03:36 - like this we can just pass that directly
03:38 - in like we are searching for a column we
03:42 - can pass in a filter there and if I run
03:44 - this whoops and I got an error there
03:46 - because I did not run this cell to set
03:49 - that variable so I'll rerun that and now
03:52 - if I run this then now we can see that
03:55 - we get a data frame back where it
03:57 - returned all of the rows that have the
04:00 - last name of doh now we only assigned
04:03 - the filter on a different line because I
04:05 - think that's easier to read but you
04:07 - might see some people put these
04:09 - comparisons directly in the brackets for
04:11 - the data frame so you might see
04:13 - something like this so I'm just going to
04:16 - comment that out right now and just grab
04:19 - this entire filter here you might see
04:22 - some people do it like this and just
04:24 - paste it or put it directly in there and
04:27 - we can see that that works
04:28 - now I think that that's a little more
04:31 - difficult to read than just assigning
04:32 - this to a variable so I'm just going to
04:35 - use that as a variable but you should
04:38 - know that it is a possibility since you
04:41 - will see some people put the filter
04:43 - directly in there okay so that's one way
04:45 - of narrowing down those rows now another
04:47 - way that you can do this and the way
04:49 - that I prefer to do it is to use the dot
04:51 - Lok indexer that we've seen a few times
04:53 - now and I'll talk a bit about why I
04:56 - prefer this in a second but if we pass
04:59 - in that series of boolean x' and - dot
05:01 - lok then it should give us the same
05:03 - results that we currently have so if I
05:05 - say D F dot Lok and pass in that same
05:09 - filter then we can see that we get the
05:11 - exact same thing this here gave us the
05:14 - same results as our dot Lok down here so
05:17 - this is one reason why pandas can be a
05:19 - bit confusing to people because there
05:21 - are multiple things that you can pass
05:23 - into these different brackets to get
05:25 - different results so like I said before
05:27 - dot lok is used to look up rows and
05:30 - columns by label but if you pass in a
05:32 - series of boolean x' like we did here
05:35 - then you can also filter data out now
05:38 - the reason that I like using dot lok for
05:40 - this is because we can still grab these
05:42 - specific columns that we want as well so
05:44 - for example if I wanted the email column
05:47 - then I could simply say pass in a second
05:50 - value here and 2 dot loke and just say
05:53 - that we want that email column if I run
05:55 - that then we can see that we get the
05:57 - emails that match those last names so
06:00 - remember the first value to dot lok are
06:02 - the rows that we want and the second
06:05 - value here are the columns that we want
06:08 - so since I wanted the email column it
06:10 - gives me a series of those emails where
06:13 - the last name is equal to dou okay so
06:16 - real quick let's go over some other ways
06:18 - to filter data out here so first let's
06:21 - go over the and and or operators now we
06:25 - can't use the Python built-in + 1 + or
06:28 - keywords for our filters so we're going
06:31 - to be using some other symbols and the
06:33 - syllables that we're going to use here
06:34 - are the ampersand for and let me write
06:37 - these out here the ampersand for an and
06:40 - and this vertical bar for an or so these
06:43 - symbols carry over from other
06:45 - programming conventions so you may have
06:47 - seen them before so for example let's
06:49 - say that we wanted our filter to get all
06:51 - of the rows where the last name is Doe
06:54 - and the first name is John which should
06:57 - only return this one result so in order
07:01 - to do this we can go back up to our
07:03 - filter here and I'm just going to get
07:05 - rid of this cell here because I'm just
07:09 - going to be using dot lokrum now on so
07:12 - now with our filter here let's say that
07:15 - we want a lastname equal to dough and
07:19 - which we're going to use the ampersand
07:21 - and we want the first name equal to John
07:27 - so I will put that in here and I also
07:31 - let me actually separate these out as
07:34 - well I like to have each one wrapped in
07:36 - parentheses I think it makes it a bit
07:38 - easier to read
07:39 - so now if I rerun that filter and then
07:42 - rerun our dot loke then we could see
07:45 - that now we're just getting that single
07:47 - email address and that email again is
07:50 - where all of the last names were equal
07:52 - to dough and the first things were equal
07:54 - to John so in this case it's just one
07:56 - result so now let's look at an example
07:58 - using the or operator now for this we
08:01 - can use the vertical bar character so
08:03 - let's say that I wanted a filter where
08:05 - the last name is equal to Schaefer or
08:07 - the first name is equal to John okay so
08:11 - if I wanted the last name to be equal to
08:14 - Schaefer or the first name is equal to
08:17 - John for the or we're gonna do a
08:19 - vertical bar character there so now if I
08:23 - rerun this then we can see that we get
08:25 - back all of the rows or all the email
08:27 - addresses where the last name is equal
08:29 - to Schaefer or the first name is equal
08:32 - to John so in this case it was these two
08:34 - rows here now we can also get the
08:36 - opposite of a filter so let's say that I
08:39 - wanted to get the complete opposite of
08:41 - this filter where we want all of the
08:44 - rows where the last name isn't Schaefer
08:46 - and the first name isn't John now I
08:49 - could go in here and fiddle around with
08:51 - this query that I currently have
08:53 - trying to get everything right or I
08:55 - could simply add in a tilde at the
08:58 - beginning of this filter and it will
09:00 - give me everything that didn't match
09:02 - that filter so if I just come in here
09:05 - and put a tilde there then that is going
09:08 - to negate that filter and give me the
09:10 - opposite of those results so we can see
09:14 - here that we get Jane Doe because that
09:16 - our that is all the results where the
09:19 - last name was not Schaefer or the first
09:23 - name wasn't John so this goes back to
09:25 - truth tables that some of us may have
09:27 - studied in school now if anyone is
09:29 - unfamiliar with truth tables then let me
09:31 - know and maybe I can make a future video
09:33 - on that subject but it's more
09:35 - mathematical related than programming
09:36 - related although the two do overlap very
09:40 - frequently okay so that kind of covers
09:42 - the basics of filtering on a small data
09:44 - frame but now let's go back to our
09:46 - larger data set of survey data and look
09:49 - at some real world examples of some
09:51 - filters that we might want to take a
09:52 - look at so I'm gonna bring up my other
09:54 - notebook here and here we have the
09:56 - stackoverflow survey data that we've
09:59 - been using throughout the series and
10:00 - again if you'd like to follow along then
10:03 - you can find a link to this code and the
10:05 - data in the description section below
10:07 - okay so now that we've learned about
10:09 - some basic filtering let's see if we can
10:12 - run some filters on our survey data here
10:14 - so for example let's say that we wanted
10:17 - to look at the data for people who are
10:19 - making a salary over a certain amount
10:21 - now maybe we want to want to take a look
10:23 - at what languages are earning the higher
10:26 - salaries or something like that so in
10:28 - order to do that I'm going to first
10:30 - create a filter now if you don't know
10:32 - which column and the data frame it gives
10:34 - the salary then you can always find that
10:36 - using the schema data frame that we've
10:39 - seen throughout the series that tells us
10:41 - with what each of these columns here
10:44 - means but for the sake of time here I'll
10:46 - just tell you that the column for salary
10:49 - if I go over here I think I can find it
10:52 - here pretty quick it is this converted
10:55 - comp right here so if we scroll down
10:58 - through some of these survey results we
11:00 - can see that this person says that they
11:01 - make about 9000 this person makes sixty
11:04 - one thousand and these are converted to
11:07 - USD and real quick let me reload this
11:09 - page here just to make sure that I have
11:11 - run all of these cells and that I'm that
11:15 - all of these variables here have been
11:18 - initialized okay so if we wanted to get
11:21 - a filter with all of the high salaries
11:24 - then let me come over here and again I
11:27 - will copy this column name here and now
11:31 - let's make a filter and I'll call this
11:32 - filter high salary and I'll set this
11:36 - equal to a conditional here where we're
11:39 - saying that we want the DF of this
11:42 - converted comp column of our data frame
11:45 - we want that to be over let's say a high
11:48 - salary is over 70,000 you know this is
11:51 - kind of subjective but we'll do that as
11:54 - a filter here and now let's apply that
11:56 - filter to our data frame so just like we
11:59 - saw before I can say DF loke and I can
12:02 - pass in that high salary filter there
12:05 - and now we can see that we get some
12:09 - results here and this isn't all of our
12:11 - respondents we can see that now it's
12:12 - respondent 6 and 9 and 13 so if I scroll
12:16 - over to our to our converted comp then
12:20 - all of these salaries here should be
12:22 - over 70,000 and it looks like they are
12:25 - now in order to narrow these columns
12:27 - down a bit let's just grab a certain
12:29 - number of columns so I'll grab the
12:32 - country the programming languages and
12:34 - the salary so to do this remember we can
12:37 - just pass these into dot Lok so up here
12:41 - where we're doing dot Lok I'll put in a
12:43 - comma here and now I'll put in a list
12:45 - for the columns that we want and let's
12:48 - say that we want to get the country we
12:50 - also want to get the programming
12:52 - languages that they that the these
12:54 - people have worked with and this here
12:58 - and like I said you can look all of
12:59 - these up in the schema but this is under
13:02 - languages worked with we can see that
13:05 - this person knows Java our SQL and so on
13:08 - so I'll paste that in as one of the
13:10 - columns that we want and also I will get
13:13 - the converted comp so I will paste that
13:17 - in as well and now let's run that
13:20 - now we can see that we get not only the
13:23 - people who meet this high salary
13:26 - standard filter that we set but also
13:29 - we're getting the we're only getting the
13:31 - country the languages that they know and
13:34 - their salary so our filter does seem
13:36 - like it is being applied correctly and
13:39 - that this is working nice so now that
13:41 - I'm actually seeing the countries here
13:44 - that reminds me that we might want to do
13:46 - some filtering with multiple values so
13:48 - for example you know my YouTube audience
13:51 - comes mainly from the United States
13:53 - India the United Kingdom Germany and
13:57 - Canada well that's where the largest
14:00 - percentages of the audience of people
14:03 - who are watching the videos come from so
14:05 - let's say that I wanted to filter out
14:06 - the survey results here so that I only
14:09 - see the results from those five
14:11 - countries that I mentioned now I could
14:13 - create a super-long filter up here where
14:17 - I say you know if the country is equal
14:19 - to the United States or if the country
14:21 - is equal to India or if the country is
14:24 - equal to the United Kingdom but that
14:25 - would take up a lot of space instead
14:28 - let's just create a list of those
14:30 - countries and then I'll show you a neat
14:32 - trick that we can do to filter those out
14:34 - so now up here instead of using this
14:37 - high salary filter here I'm just going
14:40 - to call make a list of countries here
14:43 - and I'll set this equal to I'm kind of a
14:45 - slow typer here so let me type these out
14:48 - really quick
14:51 - okay so now if we want all of these
14:53 - survey results where the respondents
14:57 - said that they were from one of these
14:59 - five countries then I can simply say
15:02 - I'll set a new filter here actually let
15:05 - me do that up here I'll set a new filter
15:08 - and I'll set this equal to DF of country
15:13 - so where the country dot is in and we
15:19 - want the country to be in this list of
15:22 - countries here so I'm going to run that
15:25 - cell and now let's apply that filter to
15:29 - our data frame so if I run this and just
15:33 - to narrow down these results to make
15:34 - sure to where we can see the country
15:37 - right off the bat I'm just going to only
15:39 - grab the country there so if I run this
15:42 - then we can see okay we get United
15:44 - Kingdom United States Canada India so it
15:47 - looks like that applied correctly as
15:50 - well now let me show you one more common
15:52 - filter operation that you'll probably
15:54 - use a lot so we can actually use string
15:57 - methods within pandas as well to do some
15:59 - alterations to our data frame or in this
16:02 - case to help with a conditional so let
16:06 - me show you what I mean so let's say
16:08 - that we only want to look at people who
16:10 - answered that they knew Python as a
16:12 - programming language so let's see how we
16:14 - do this so first of all the column that
16:17 - lists the programming languages that
16:19 - each person said that they know is that
16:22 - language worked with column so let's see
16:25 - what this looks like
16:26 - so in this here I'm just going to grab
16:29 - that language worked with column oops
16:34 - and I spelled language wrong so language
16:38 - worked with is that right yep okay so we
16:40 - can see that we get some programming
16:42 - languages here and each different
16:44 - language is separated by a semicolon so
16:48 - we can't just do a query where we say
16:49 - you know if the language worked with
16:52 - equals Python because the actual value
16:55 - of that column will be any combination
16:57 - of the languages listed on the survey so
17:00 - one way that we could do this is to
17:02 - instead use a string method
17:05 - and see if python is within this string
17:09 - of these languages that they know so to
17:12 - do this I'm going to rewrite my filter
17:16 - here and I'm just going to say that my
17:18 - filter is going to be equal to and we
17:21 - want to grab the languages worked with
17:24 - for each person and then we're going to
17:26 - use some string methods so I'm going to
17:29 - say dot STR dot
17:31 - contains and then I will pass in Python
17:35 - now also we can see that we have some na
17:38 - n values here but not a number now we
17:42 - need to also set a fill value for those
17:44 - or else we're going to probably get an
17:46 - error so that is part of the contains
17:50 - method here I can just say na is equal
17:52 - to false we're just not going to do
17:55 - anything with those so let me explain
17:58 - this one more time here so this filter
18:00 - that we're putting in place here it's
18:02 - saying OK for this column here the
18:05 - languages worked with which are all of
18:07 - these results here we are saying the
18:10 - string in that column does it contain
18:13 - Python so that's my filter I'm going to
18:15 - run that cell and now let's apply that
18:19 - filter to our data frame by saying dot
18:23 - Lok and I will pass in that filter and
18:27 - now let's also just grab the languages
18:30 - worked with column to make sure that
18:32 - that worked correctly so if I run that
18:34 - then all of these results here are all
18:37 - of these rows that it gave us back
18:38 - should I have Python in their language
18:41 - is known so we can see that we have
18:42 - Python there they're there so yes it
18:45 - does seem to be in all of these results
18:47 - now this one here number eight we can't
18:50 - actually see it here but we have these
18:53 - ellipses here so it's probably just
18:56 - being truncated here now in my last
18:58 - video I kept saying that these were
19:01 - being concatenated I meant truncated a
19:03 - few people pointed that out in the
19:04 - comments so yeah these are being
19:06 - truncated here so we just can't see the
19:08 - Python value there but they are there
19:10 - and I'll probably do a complete video on
19:13 - string methods here in the future since
19:16 - there's so much more that we can do with
19:19 - we can use them to replace text to split
19:22 - values and all kinds of different stuff
19:23 - so it's very these string methods are
19:25 - extremely useful in pandas so that's a
19:28 - basic overview of doing some filters
19:30 - with our data frames again the key
19:33 - takeaways are that we can do these
19:35 - conditionals here and have them as a
19:38 - filter and again let me print out just
19:42 - the filter without applying it to data
19:43 - frame we can see that the filters return
19:46 - a series of true/false values and when
19:50 - we apply that to our data frame those
19:53 - true/false values basically apply a mask
19:57 - to our data frames where we get all of
19:59 - the true values back and not the false
20:01 - so if I look down here we have
20:04 - respondent one two four and five as true
20:08 - and three was false so if I look at my
20:11 - data frame here we can see that we get 1
20:13 - 2 4 & 5 & 3 is not there because that
20:17 - value was false so that's how filters
20:19 - work and again it's an essential part of
20:22 - pandas because this is what the one of
20:25 - the first things that we do with our
20:26 - data whenever we are loading it into
20:28 - pandas okay so before we end here I
20:31 - would like to mention that we do have a
20:33 - sponsor for this video and that is
20:35 - brilliant org brilliant is a
20:38 - problem-solving website that helps you
20:39 - understand underlying concepts by
20:41 - actively working through guided lessons
20:43 - and brilliant would be an excellent way
20:44 - to supplement what you learn here with
20:46 - their hands-on courses they have some
20:48 - excellent courses and lessons on data
20:50 - science that do a deep dive on how to
20:52 - think about and analyze data correctly
20:54 - so if you're watching my panda series
20:56 - because you're getting into the data
20:57 - science field then I would highly
20:59 - recommend also checking out brilliant
21:01 - and seeing what other data science
21:02 - skills you can learn they even use
21:04 - Python in their statistics course and
21:06 - will quiz you on how to correctly
21:08 - analyze the data within the language
21:09 - they're guided lessons will challenge
21:11 - you but you'll also have the ability to
21:13 - get hints or even solutions if you need
21:15 - them it's really tailored towards
21:16 - understanding the material so to support
21:18 - my channel and learn more about
21:19 - brilliant you can go to brilliant org
21:22 - forge slash cm/s to sign up for free and
21:25 - also the first 200 people to go to that
21:27 - link will get 20% off the annual premium
21:30 - subscription and you can find that link
21:32 - in the
21:32 - description section below again that's
21:34 - brilliant dot org Forge /c M s okay so I
21:39 - think that's going to do it for this
21:40 - pandas video I hope you feel like you
21:42 - got a good idea for how to filter the
21:44 - data within our data frames to find the
21:46 - information that you're looking for like
21:48 - I said this is a fundamental skill and
21:50 - pandas which is usually one of the first
21:52 - things that we do with our data in the
21:55 - next video we'll be learning how to
21:56 - alter the data in our data frames and
21:59 - make changes so we'll learn how to make
22:01 - changes to specific values and also how
22:04 - to make multiple changes at once across
22:06 - the entire data frame so for example
22:08 - maybe you want to make it so that email
22:10 - addresses are all cast to lowercase so
22:13 - that they're easier to search or maybe
22:15 - you want to take out any spaces of your
22:17 - column names and replace them with
22:19 - underscores so all of that will be
22:21 - covered in the next video so be sure to
22:24 - stick around for that
22:25 - but if anyone has any questions about
22:26 - what we covered in this video then feel
22:28 - free to ask in the comment section below
22:30 - and I'll do my best to answer those and
22:32 - if you enjoy these tutorials and would
22:33 - like to support them then there are
22:35 - several ways you can do that the easiest
22:36 - ways to simply like the video and give
22:38 - it a thumbs up and also it's a huge help
22:40 - to share these videos with anyone who
22:41 - you think would find them useful and if
22:43 - you have the means you can contribute
22:44 - through patreon and there's a link to
22:46 - that page in the description section
22:47 - below be sure to subscribe for future
22:49 - videos and thank you all for watching
23:01 - you