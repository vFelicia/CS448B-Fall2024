00:00 - hey how's it going everybody in this
00:01 - programming terms video we're gonna look
00:03 - at the term memoization so let's go
00:06 - ahead and take a look at the definition
00:07 - of memoization and then we'll look at a
00:09 - code example to see exactly what this
00:11 - means
00:12 - so according to Wikipedia memoization is
00:15 - an optimization technique used primarily
00:18 - to speed up computer programs by storing
00:20 - the results of expensive function calls
00:23 - and returning the cached result when the
00:25 - same input occurs again so that may be a
00:29 - little confusing just by the definition
00:31 - alone so let's go ahead and look at a
00:33 - code example now my code example here is
00:36 - going to be in Python but just like my
00:38 - other programming term videos it's not
00:40 - really the language that I want you to
00:42 - take away from it it is the concept of
00:45 - the term itself so this will apply to
00:47 - several other programming languages as
00:49 - well so the first part of the
00:51 - memoization is this expensive function
00:54 - here and I made a function call it
00:55 - expensive func and what it does is it
00:57 - just comes in here and prints out that
01:00 - it is computing the value that we pass
01:02 - in then it sleeps for one second and
01:04 - then it just returns the square of the
01:06 - number so the time that sleep isn't
01:08 - actually computing anything but this is
01:11 - just kind of an artificial expensive
01:12 - function call so then if you look down
01:14 - here we're actually running this
01:15 - function four different times so we've
01:18 - run the function with a four with a ten
01:20 - and then a four again and then a ten
01:22 - again so since it sleeps for one second
01:25 - for every function call then this entire
01:28 - program should take about four seconds
01:30 - so if I run this you can see that it
01:33 - prints out that it's computing four and
01:35 - then prints the square then computing
01:37 - ten and prints out the square and so on
01:39 - and so on so the reason behind
01:41 - memoization is that if you saw here it
01:44 - computed four and ten the first time
01:47 - with the sleep and that's our artificial
01:49 - computing time and that's fine because
01:51 - the first time that it sees it it has to
01:53 - do that but then when we got to the
01:55 - second one we've already run those
01:58 - values once and so instead of computing
02:02 - those values again it would be nice if
02:04 - we just remembered that answer and
02:06 - remembering the answer is what
02:08 - memoization is all about we are saving
02:10 - that result to a cash
02:13 - that whenever we see that expensive
02:14 - function call again with the same values
02:17 - passed in that instead of actually
02:19 - computing the values again we can just
02:21 - return the result that we've already
02:23 - computed from that cache so the way that
02:26 - I'm going to do this in Python here is
02:28 - I'm going to create a dictionary up here
02:31 - and I'm just going to call this EF
02:33 - underscore cash and the EF is just for
02:37 - expensive function so now what I'm going
02:39 - to do here is write at the top of the
02:41 - function I'm gonna say if num which is
02:45 - the parameter that we're passing in is
02:46 - in the EF cache then I just want to
02:51 - return the value from that dictionary
02:55 - and also what I'm gonna do down here is
02:58 - if it misses this conditional if the
03:01 - number is not in the cache already then
03:04 - I want to go ahead and do the artificial
03:06 - computation here and then before I
03:09 - return the result I just want to add
03:12 - that result to the cache so actually a
03:18 - more clean way that I'm going to do this
03:20 - here is I'm just going to say result
03:22 - equals num time not num times num and
03:25 - then I'm going to copy this result here
03:27 - and put that in the cache and then I'm
03:29 - going to return the result there and
03:32 - save that so now if I run this code
03:34 - again you can see here that it finished
03:37 - in two seconds and the output here it
03:40 - only computed the for one time and gave
03:43 - us our answer of 16 then it computed 10
03:47 - one time and gave us the answer of a
03:49 - hundred and then the second time through
03:51 - you can see that it never hit this
03:53 - computation step so it just
03:55 - automatically spit out 16 and
03:57 - automatically spit out a hundred now let
03:59 - me walk through exactly what happened
04:00 - here so we did this result equals
04:03 - expensive function and passed in r4 so
04:06 - whenever we passed whenever we ran this
04:09 - function the first time it came in and
04:11 - it said is 4 in our cache and it wasn't
04:15 - so then it skipped over this conditional
04:17 - and it printed the computing for it
04:20 - slept for a second and then returned the
04:23 - result after it added the result to the
04:26 - cache
04:26 - and then it did the exact same thing for
04:28 - the tin now the second time through when
04:31 - we ran these functions they came in here
04:33 - and right off the bat it said is our
04:35 - number in our cache and yes it was so we
04:38 - immediately returned the result that we
04:41 - saved right here from earlier so in the
04:44 - case of this simple program the
04:46 - memoization cut our computation time
04:49 - down from four seconds to two seconds
04:52 - now for more complicated problems than
04:54 - obviously this can be more or less
04:56 - drastic now there are some more advanced
04:58 - things that you can do with memoization
04:59 - you can set up ways to where it does
05:03 - memoization automatically and things
05:05 - like that but really the point of this
05:07 - video was to just let you know exactly
05:09 - what memorization means if you ever see
05:11 - that in the workplace and also maybe you
05:14 - can start thinking about ways that it
05:17 - can benefit you in the language of your
05:19 - choice so that about does it for this
05:21 - video I would recommend going out and
05:24 - seeing different techniques for using
05:26 - memoization within your programming
05:28 - language of choice and it's definitely a
05:30 - nice skill to have in your tool belt so
05:33 - I hope this video is useful for you all
05:34 - if you have any questions just ask in
05:36 - the comment section below
05:37 - be sure to subscribe for future videos
05:39 - and thank you all for watching