00:00 - hey there how's it going everybody in
00:01 - this video we're going to be learning
00:02 - about how to sort our data in pandas so
00:05 - we'll look at ways to sort our columns
00:07 - how to sort multiple columns and
00:09 - grabbing the largest and smallest values
00:11 - from different rows now as usual we'll
00:13 - look at how to do this on a small data
00:15 - set first and then we'll see how this
00:17 - applies to a larger data set like our
00:19 - stack overflow survey data that we've
00:21 - been using throughout the series now
00:22 - I've been reading your all's comments
00:24 - and suggestions for the series and I'm
00:26 - trying to take your suggestions to heart
00:27 - a lot of people have said that they'd
00:29 - like shorter videos so I'm going to do
00:30 - my best to have shorter videos that
00:32 - don't sacrifice on any of the details
00:34 - that I think are important now I'd also
00:36 - like to mention that we do have a
00:37 - sponsor for the series of videos and
00:38 - that is brilliant so I really want to
00:40 - thank brilliant for sponsoring the
00:42 - series and it would be great if you all
00:43 - can check them out using the link in the
00:45 - description section below and support
00:46 - the sponsors and I'll talk more about
00:48 - their services in just a bit
00:49 - so with that said let's go ahead and get
00:51 - started okay so I have my snippets
00:53 - notebook open that we've seen throughout
00:55 - the series now again if anyone would
00:57 - like to follow along then I do have
00:59 - links to this code and the data in the
01:01 - description section below
01:02 - so let's say that we want to sort this
01:04 - small data frame that we have here
01:06 - so first let's decide how we want to
01:08 - sort this now one way that might make
01:10 - sense is to sort this by last name so in
01:14 - order to do this we can use these sort
01:16 - values method so in order to sort this
01:18 - by last name I can simply say DF dot
01:23 - sort underscore values and then we'll
01:26 - say that we want to sort that by and set
01:29 - the by argument equal to the column name
01:31 - in this case it's the last so if I run
01:34 - this then we can see that we get a data
01:36 - frame return where those last names are
01:38 - sorted alphabetically and if though
01:41 - these were numbers then those would be
01:42 - sorted as small as the highest and we'll
01:44 - see that when we look at our stack
01:46 - overflow data now if we wanted to sort
01:48 - these in descending order then we can
01:50 - pass in an argument and just say that we
01:54 - want the ascending order to be equal to
01:58 - false so if I run this now we can see
02:02 - that those are sorted in descending
02:04 - order now sometimes your sorts can get a
02:07 - little complicated maybe you want to
02:08 - sort on multiple columns now you do this
02:11 - when the first value
02:13 - that you soared on has identical values
02:15 - and then you want to sort on a second
02:18 - value so in order to do this we can just
02:20 - pass in a list for these columns that we
02:22 - want to sort on so let's say that we
02:24 - want the first column that we want to
02:26 - sort on is the last names in ascending
02:28 - order and then if there are duplicate
02:31 - last names then we want to sort the
02:34 - first name after that so in order to do
02:36 - this we can just pass in a list of
02:38 - columns to sort by so I'm actually going
02:41 - to go to a new line here and now instead
02:45 - of just sorting by last I can pass in a
02:48 - list here so let's say that we want to
02:50 - sort on the last name first but then we
02:54 - want to sort on the first name so if I
02:56 - run this then we can see that this is
02:58 - sorted in descending order on the last
03:01 - name just like we saw up here before but
03:03 - it's also sorting in the first name in
03:07 - descending order as well if there are
03:09 - identical last names so we can see that
03:12 - Jane was first up here and now it's John
03:14 - because this is in descending order and
03:16 - sometimes you might run into a situation
03:18 - where you want to sort on multiple
03:19 - columns but you might want to have one
03:22 - in descending order and another in
03:24 - ascending order so let me add one more
03:26 - name to our data frame here so that it's
03:29 - more clear whenever I do this so I'm
03:31 - gonna add one more name here at the top
03:34 - to our dictionary so I'm just going to
03:37 - call this atom and we'll keep a do plan
03:43 - on a dot email com so now let me go
03:47 - ahead and rerun all of these cells
03:50 - so I'll just say cell run all and now
03:54 - down here at the bottom we can see that
03:57 - we have our last names and then all of
03:59 - these in descending order but let's say
04:01 - that we want to sort this data frame by
04:03 - last name in descending order like we
04:05 - have here then we want the first names
04:08 - to be in ascending order so to do this
04:10 - we can simply pass in a list of boolean
04:13 - values to the ascending argument so let
04:16 - me copy what we have here and show the
04:18 - differences of what this looks like so
04:21 - instead of just saying ascending is
04:23 - equal to false let's instead pass in a
04:25 - list
04:26 - and these will correspond to our columns
04:29 - so if I say that I want the last name in
04:31 - descending order then we can keep that
04:33 - as false but then if I want the first
04:35 - name to be in ascending order then I can
04:38 - just pass in a true for that second
04:39 - value so now if I run this then we can
04:42 - see that our last names are still in
04:44 - descending order but our first names
04:46 - here are now in ascending order with
04:48 - Adam coming before these two here and as
04:51 - we've seen several times throughout the
04:53 - series if we want to save this data
04:54 - frame and make this sort permanent then
04:57 - we can set the in place value equal to
04:59 - true so if I do this I'm just going to
05:02 - add an in place equal to true here at
05:04 - the end if I run this and now I look at
05:08 - our data frame that now our data frame
05:10 - has been modified in an order where we
05:13 - can see that these values are sorted how
05:15 - we specified now if you want to set this
05:16 - back to how it was before and have those
05:19 - indexes be sorted then we can do that by
05:21 - sorting the index so to do this instead
05:24 - of using the sort values method we'll
05:26 - use the sort index method so I can just
05:29 - say DF dot sort underscore index and run
05:33 - that and we can see that now our index
05:36 - is sorted over here on the far left in
05:39 - the order that we added those now I also
05:42 - want to point out that if you're simply
05:43 - wanting to sort a single column then we
05:45 - can easily just sort that single series
05:48 - as well series objects also have that
05:51 - sort value method so if we want to
05:53 - simply see the sorted last names and not
05:56 - the entire data frame then I can simply
05:58 - access that column by passing in the
06:02 - last name column there in those brackets
06:05 - and then I can just say sort underscore
06:07 - values I'm just going to leave all of
06:09 - the arguments as defaults here and run
06:12 - this and now we can see that these are
06:14 - sorted in ascending order okay so that's
06:16 - a brief overview so now let's go over to
06:19 - our survey data and see what this looks
06:21 - like on a larger data set and we'll also
06:23 - see some simple ways to view the largest
06:25 - and smallest results from our data okay
06:28 - so I have our stack overflow developer
06:30 - survey open here that we've seen
06:32 - throughout the series and again if you'd
06:33 - like to download this data to follow
06:35 - along then I have links in the
06:37 - description section below ok so one way
06:39 - that we might
06:40 - to sort sort these survey results is by
06:43 - country name we can see over here that
06:46 - we have a country column where the
06:48 - respondent answered which country they
06:50 - were from so maybe you're doing some
06:52 - analysis on information from different
06:53 - countries and it's just easier seeing
06:56 - them all sorted so for example let's say
06:58 - that we want to look at countries and
07:00 - salary so to sort these survey results
07:02 - by country then we can simply come down
07:06 - here to the bottom and say DF dot sort
07:09 - underscore values and I want to sort
07:12 - that by and set that equal to country
07:15 - and now I'm also going to make this in
07:18 - place so that it changes our data frame
07:21 - so now let's take a look at the country
07:24 - column for the first 50 results or so
07:27 - from this data frame so I'm going to
07:29 - access that country column of the first
07:32 - and I'll just get the first 50 of those
07:35 - by using the head method so if I run
07:37 - this then we can see that these are in
07:41 - alphabetical order so we have results
07:43 - from developers from Afghanistan and at
07:46 - the bottom here the results go into
07:48 - Albania now we only have the top 50
07:51 - results here but if we were to look
07:52 - through all of these then we'd see that
07:54 - all of these countries are listed in
07:57 - alphabetical order okay so now let's
07:59 - look at let's take a look at the
08:01 - salaries reported from these countries
08:04 - so let me add that to our output here
08:06 - and I'll just do that by accessing the
08:09 - converted comp column so that is
08:14 - converted comp now remember here this is
08:18 - a mistake that some people make whenever
08:20 - we're accessing multiple columns here we
08:22 - have to put this inside of a list within
08:25 - our brackets so we're going to have two
08:27 - sets of brackets here okay so now let's
08:30 - run this and we're going to have these
08:33 - salaries here for each respondent listed
08:35 - on the right we can see that we have a
08:38 - lot of not a number objects here which
08:40 - just means that they skipped over the
08:42 - question but if we wanted a general idea
08:44 - of the higher salaries then we can sort
08:47 - these in descending order so like we saw
08:49 - in our earlier example if we want to
08:51 - sort the countries and ascend
08:53 - order and the salaries in descending
08:56 - order then we can do that just by going
08:59 - up here and passing in multiple columns
09:03 - that we want to sort on so we want to
09:05 - sort on country and we also want to sort
09:07 - on this converted comp column here and
09:11 - also I'm going to pass in an ascending
09:15 - argument here and I'm going to set this
09:17 - equal to a list and this will correspond
09:20 - to our column names whether we want
09:22 - these in ascending order so for the
09:24 - country
09:25 - I will pass in true that we do want
09:27 - those in ascending order but I want to
09:29 - see the highest salaries first which
09:31 - means that we want this to be false so
09:33 - that the salaries are in descending
09:35 - order so if I run this sort and then we
09:39 - take a look at this head again then we
09:42 - can see that now we have Afghanistan
09:45 - here and all the highest salaries are
09:48 - listed at the top for what people said
09:51 - they made and if we scroll down here we
09:53 - can see that we get to 0 and then not a
09:55 - number as the lower salaries and then
09:58 - once we get down to Albania
09:59 - then it restarts with those high
10:01 - salaries from that country now we can
10:04 - see that there are some big outliers
10:05 - here this is a lot larger salary than
10:08 - what other people said they made now
10:11 - there are some techniques that we can
10:12 - use in order to account for outlier data
10:14 - and we'll focus on that in the next
10:16 - video where we cover aggregating data
10:19 - and grouping data now before we end I'd
10:22 - also like to take a look at some other
10:24 - useful methods for seeing the largest
10:26 - and smallest values so maybe you're
10:28 - sorting results just so you can grab the
10:30 - largest or smallest values from a
10:33 - specific data frame well if you're doing
10:35 - that then there's actually a much
10:37 - simpler way to do this so maybe we want
10:39 - to see the 10 highest salaries from our
10:41 - survey so in order to do this we could
10:44 - simply use the n largest method so first
10:47 - I'm just going to run this on a series
10:50 - so let's say that I want to grab that
10:54 - converted comp column which is the
10:57 - salaries and I will grab the in largest
11:00 - and I want to grab the ten largest
11:02 - salaries so if I run this then we can
11:05 - see that we get the ten largest
11:07 - salaries reported so these salaries are
11:10 - all the same here at 2 million so I'm
11:12 - assuming that the survey capped their
11:14 - salaries at 2 million for this
11:16 - particular survey so you know I think
11:18 - that's pretty high so I'm curious to see
11:21 - what type of developers these people are
11:23 - and if they're in management roles or or
11:26 - not and again we'll see how to further
11:28 - analyze these results in the next video
11:30 - but you know if any of you all are
11:33 - making 2 million dollars a year as a
11:34 - developer and are hiring then let me
11:37 - know because you know I'm not looking
11:38 - for additional work at the moment but I
11:40 - do think I would make an exception here
11:42 - for 2 million bucks a year now you can
11:45 - see here when we grab the tenth largest
11:46 - values from this series here from this
11:49 - column it only gives us the 10 largest
11:52 - values from that column but what if we
11:54 - wanted to see the other survey results
11:57 - from these rows well in order to do that
12:00 - then we can simply run this method on
12:02 - the entire data frame and pass in the
12:04 - column for which we want the largest
12:06 - results so I could say D F dot in
12:10 - largest and then I want the 10 largest
12:13 - from the converted comp column so if I
12:18 - run this then these will give me those
12:21 - same rows but now we have all of their
12:24 - survey results instead of just the
12:26 - salary so if I go up here to their index
12:29 - so this is 25 9 8 3 then we can see the
12:33 - first one here is 25 9 8 3 so this is
12:36 - the same result if I scroll over here to
12:39 - converted comp we can see that these are
12:41 - all 2 million dollars here and if we
12:44 - wanted to see these smallest values
12:45 - instead of the largest then instead of
12:48 - using in largest here then we can simply
12:51 - say in smallest so if I look at the
12:54 - smallest salaries here then this will
12:57 - give us the smallest salary values from
12:59 - our survey now I'm assuming this is
13:01 - probably just 0 for people who aren't
13:03 - currently working and yes this is a 0
13:06 - here
13:07 - okay so that's a brief overview of how
13:09 - to sort our data and how to sort on
13:12 - multiple columns and get the largest and
13:14 - smallest values now before we end here I
13:16 - would like to mention that the sponsor
13:18 - of this video and that it is brilliant
13:20 - brilliant is a problem-solving website
13:23 - that helps you understand underlying
13:24 - concepts by actively working through
13:26 - guided lessons and brilliant would be an
13:28 - excellent way to supplement what you
13:29 - learn here with their hands-on courses
13:31 - they have some excellent courses and
13:33 - lessons on data science that do a deep
13:35 - dive on how to think about and analyze
13:37 - data correctly so if you're watching my
13:39 - Panda series because you're getting into
13:41 - the data science field then I would
13:42 - highly recommend also checking out
13:44 - brilliant and seeing what other data
13:46 - science skills you can learn they even
13:48 - use Python in their statistics course
13:49 - and will quiz you on how to correctly
13:51 - analyze the data within the language
13:53 - they're guided lessons will challenge
13:55 - you but you'll also have the ability to
13:56 - get hints or even solutions if you need
13:58 - them it's really tailored towards
14:00 - understanding the material so to support
14:02 - my channel and learn more about
14:03 - brilliant you can go to brilliant org
14:05 - forge slash CMS to sign up for free and
14:09 - also the first 200 people to go to that
14:11 - link will get 20% off the annual premium
14:14 - subscription and you can find that link
14:15 - in the description section below again
14:18 - that's brilliant dot org forge slash C
14:21 - m/s okay so I think that's going to do
14:24 - it for this pandas video I hope you feel
14:26 - like you got a good overview for how we
14:27 - can sort our data frames in the next
14:30 - video we'll be learning about
14:31 - aggregating and grouping data now this
14:34 - will be the video that a lot of people
14:35 - have been waiting for because this is
14:37 - what most people think of when they
14:39 - think of data analysis so for example
14:42 - we'll see how we can group our survey
14:43 - data by country and then get the median
14:46 - salaries for each country and things
14:48 - like that that also would take care of
14:51 - some of that outlier data that we just
14:53 - saw before it's definitely a good skill
14:55 - to know in pandas and we'll be you know
14:57 - open up a lot of possibilities for
14:59 - exploring your data further but if
15:01 - anyone has any questions about will be
15:03 - covered in this video then feel free to
15:04 - ask in the comment section below and
15:06 - I'll do my best to answer those and if
15:08 - you enjoy these tutorials and would like
15:09 - to support them then there are several
15:10 - ways you can do that the easiest ways to
15:12 - simply LIKE the video and give it a
15:14 - thumbs up and also it's a huge help to
15:16 - share these videos with anyone who you
15:17 - think would find them useful and if you
15:19 - have the means you can contribute
15:20 - you're on and there's a link to that
15:21 - page in to description section below be
15:24 - sure to subscribe for future videos and
15:25 - thank you all for watching
15:37 - you