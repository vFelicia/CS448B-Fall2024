00:00 - hey there how's it going everybody in
00:01 - this video we're going to be learning
00:02 - how to call external commands using
00:04 - Python with the sub process module so
00:06 - there are many scenarios where you might
00:08 - want to call an external program using
00:10 - Python and if you need to then you can
00:12 - also capture the output of those
00:13 - commands or even pipe the output from
00:15 - one command into another so that's what
00:17 - we're going to be learning to do in this
00:19 - video using the sub process module so
00:21 - let's go ahead and get started
00:23 - so I have a blank Python module open
00:25 - here and first we're going to want to
00:26 - import the sub process module so let's
00:29 - just say import sub process okay so now
00:33 - in order to run an external command this
00:36 - is extremely simple we'll look at how to
00:38 - do some more complicated stuff in a bit
00:40 - but to simply run a command we can just
00:42 - say sub process dot run and then run the
00:46 - command that we run a run so I'll do LS
00:49 - now just that heads up I'm on a Mac so
00:52 - I'm going to be using Linux commands in
00:53 - this video but you can use these same
00:55 - processes to run Windows commands as
00:58 - well so LS the command that I just ran
01:00 - here it will list the files and folders
01:03 - in the current directory and again
01:05 - that's a Linux command on Windows you
01:08 - have to use Windows commands so the LS
01:10 - equivalent on Windows is derp so di are
01:13 - whoops sorry
01:14 - dir so if I save this and run it then we
01:19 - can see that the LS command printed out
01:22 - everything in the current directory now
01:24 - if you're on Windows and tried to run
01:26 - the dir command or something similar
01:28 - then you might have got an error at this
01:30 - point that the system could not find the
01:32 - file specified so the reason is because
01:35 - the dir command is built into the shell
01:38 - so we'd have to pass in an argument of
01:40 - shell equals true so if you're on
01:42 - Windows then you could say pass in an
01:45 - extra argument here of shell is equal to
01:48 - true and if we run that you can we can
01:50 - see here at that on Mac we get the same
01:52 - result but on Windows that should
01:55 - prevent you from getting that error and
01:56 - also if we set the show argument to true
01:58 - then we can just pass in an entire
02:00 - command as a string so if I wanted to
02:03 - add more arguments to my external
02:05 - command then I could say so for example
02:07 - some arguments I could add to LS would
02:10 - be - L a so if
02:13 - I run this then now we can see that runs
02:16 - that LS command with those additional
02:18 - arguments and those additional arguments
02:20 - just provide more information here now
02:22 - if you are using this shell equals true
02:25 - then that can be a security hazard if
02:27 - you're using untrusted input so only use
02:30 - that if you're passing in the arguments
02:32 - yourself and be sure you're not running
02:34 - it with user input or anything like that
02:36 - but if you're not using the shell
02:38 - argument then we actually can't pass in
02:40 - the entire command as a string like we
02:43 - did here instead we need to pass in
02:45 - everything as a list of arguments so if
02:47 - we wanted to run this same command
02:49 - without the shell arguments set to true
02:51 - then we would have to say so let me get
02:53 - rid of the shell argument here so I
02:56 - could just pass this in as a list and
02:59 - I'm gonna have to do this as a list so
03:03 - our first item here is going to be the
03:05 - command LS the second item here is the
03:08 - arguments so now if I run that then we
03:10 - can see that we get the same thing okay
03:12 - so we can see that all we're doing right
03:14 - now is running this sub process dot run
03:17 - method and it's printing out the results
03:19 - just like we'd print something in a
03:21 - Python script now the reason is that
03:24 - we're not capturing that standard out
03:26 - the standard out just goes wherever the
03:28 - standard out of the script normally goes
03:30 - which is in the console here so let's
03:33 - try to capture this into a variable
03:35 - instead now you might try to do this
03:37 - just by saying something like p1 is
03:40 - equal to sub process dot run but if I
03:43 - run that then we can see that it's still
03:46 - printing the standard out here to the
03:48 - console but also let's see if we get
03:50 - anything within that p1 variable so if I
03:53 - print out p1 and run that then we can
03:57 - see that after our LS output here down
04:00 - here where we printed that p1 variable
04:02 - that comes out as a completed process
04:05 - object now if you want to see what all
04:08 - we can do with a completed process
04:09 - object then you can run help on that but
04:12 - let's just go over a few of those really
04:14 - quick so first we can check the
04:16 - arguments that were passed into the
04:18 - original command and we can do that by
04:20 - printing out p1 dot orgs so if I save
04:24 - that and run it then we can see that we
04:26 - have the arguments that we
04:27 - passed into that original command here
04:29 - we can also check the return code and
04:31 - the return code will show us whether we
04:34 - got any errors or not so if I print out
04:39 - P 1 dot return code if I run that then
04:42 - we can see that we got a return code of
04:44 - 0 and that means that it ran
04:46 - successfully now a way that I like to
04:48 - remember that is to think of that as
04:49 - meaning zero errors now we can also grab
04:53 - the standard out as well so let's grab
04:56 - that if I print out p1 dot STD out and
05:01 - run that okay so when we print it out
05:04 - that standard out we can see that we got
05:06 - none and that might be a little
05:08 - surprising to some people so we got a
05:10 - result of none but really what we want
05:13 - is the output from the external command
05:15 - that we ran so the reason that it's
05:17 - printing none is because like I said
05:19 - before it's just sending the standard
05:22 - out to the console all of this stuff
05:23 - here so we want to capture that instead
05:27 - so to capture that we can just pass in
05:29 - another argument here and we can pass in
05:31 - an argument of capture underscore output
05:34 - is equal to true and if I spell that
05:38 - correctly if I save that and run it and
05:41 - actually first we can see that we did
05:43 - get something here first let me comment
05:45 - out the print statement we're printing
05:47 - the p1 standard out and if I save that
05:49 - and run it then you can see that now
05:51 - we're not getting anything in the Python
05:53 - console here so it's no longer
05:55 - outputting that just by running this sub
05:58 - process dot run command so now it
06:00 - actually is capturing it in this p1
06:02 - variable so now when we actually print
06:05 - out p1 dot standard out if I run that
06:09 - then we can see now it's captured there
06:12 - now one thing to notice here is that the
06:14 - standard out was captured as bytes so it
06:17 - doesn't look like it did before with all
06:19 - those new lines so if we want the new
06:22 - lines to actually be spaced out then
06:24 - we'll have to convert this to a string
06:25 - now there are a couple different ways
06:27 - that we could do this first we could
06:29 - just decode those bytes by saying p1 dot
06:33 - standard out dot decode run the decode
06:37 - method on that if I run that then we can
06:39 - see that it looks like it did
06:41 - before now I've never done a video on
06:43 - Unicode and bytes versus strings and
06:46 - encoding and decoding and all of that
06:48 - that's a tutorial that I'd like to put
06:50 - together in the near future but in this
06:52 - case when we decode those bytes it's
06:54 - converting it into a string now if we
06:57 - don't want to use decode then we can
06:59 - just get rid of that and pass in an
07:02 - argument to the run method saying that
07:06 - we want text instead so I'm going to
07:09 - remove the decode method there and I'm
07:11 - just going to pass in an additional
07:12 - argument of text equals true so now if I
07:16 - run that we can see that we're not
07:18 - decoding the standard out but it comes
07:20 - in as a string anyway so that's good
07:22 - okay so when we set that argument of
07:25 - capture output equal to true what that's
07:28 - actually doing in the background is
07:29 - setting the standard out and the
07:31 - standard error to the sub process pipe
07:34 - and that allows us to capture those
07:36 - values so let me show you what it would
07:38 - look like to set that standard out
07:40 - argument directly so instead of saying
07:42 - capture output is equal to true here
07:45 - instead I'm going to say STD out is
07:49 - equal to and that is sub process dot
07:52 - pipe and again that's actually what
07:55 - setting capture output equal to true
07:57 - does in the background but it also
07:59 - redirects the standard error to that
08:01 - pipe as well but just setting the
08:03 - standard out equal to that sub process
08:06 - pipe we should be able to run what we
08:08 - have here and get the same result so if
08:10 - I run this then we can see we got the
08:12 - same results that we did before now we
08:14 - can also redirect the standardout to
08:16 - other places as well so for example
08:18 - let's say that we wanted to redirect
08:20 - that to a file instead that could be
08:23 - used for logging or anything like that
08:25 - now in order to do that we could simply
08:28 - just open up a file and redirect it to
08:31 - there so I can say with open and I will
08:35 - just open a file here called output dot
08:37 - txt and I want to open that in write
08:42 - mode and I'll just open that as F now
08:45 - let me indent this so that's within our
08:48 - context manager there and now for our
08:50 - standard route instead of redirecting to
08:53 - this sub process
08:54 - pipe and said I'm just going to redirect
08:56 - that to F our file and I'm going to
08:59 - remove our print statement there because
09:02 - we don't need that because we're not
09:04 - capturing that using that sub process
09:07 - pipe anymore so now if I run this it
09:10 - doesn't look like we got anything but if
09:12 - I open up my sidebar here we can see
09:15 - that now I have this output txt if I
09:18 - open that up then we can see that we got
09:20 - the results from that command in our
09:23 - output txt file so that did work okay so
09:26 - I wanted to show how we could redirect
09:27 - that to a file but now let's go back to
09:30 - what we had before where we're just
09:31 - capturing that output in a variable so
09:33 - I'm just going to get rid of all that
09:35 - file stuff and instead I'm just going to
09:38 - set this back equal to capture
09:40 - underscore output and set this equal to
09:44 - true okay so now let's take a look at a
09:46 - couple of different things that can
09:47 - happen if our command isn't successful
09:50 - so let's see what happens when we get an
09:51 - error so I'm going to change my command
09:54 - here to instead try to list the contents
09:56 - of a directory that doesn't exist so I'm
09:59 - just going to add a another argument
10:02 - here and I'm just going to add this to a
10:03 - bonus directory I'll just say dne for
10:06 - does not exist and this argument that LS
10:10 - command is going to try to list the
10:11 - contents of this that doesn't exist so
10:14 - if I run this then we can see that we
10:16 - don't get any output and that's because
10:19 - we captured it here now one thing that
10:22 - might surprise some people is that we
10:23 - don't get an error within Python some
10:26 - people might expect Python to throw an
10:28 - exception if the external command fails
10:30 - but it doesn't do that instead it just
10:32 - returns a nonzero error code so again we
10:36 - can check that just by printing out p1
10:39 - dot return code and we saw this before
10:42 - so if I run that then before that was 0
10:47 - but now it is 1 which means we got an
10:49 - error and if we want to see that error
10:51 - then we can print that out as well by
10:53 - saying stderr for standard error if I
10:57 - run that we can see that the error that
10:59 - that command got was LS DNA no such file
11:03 - or directory because that directory
11:04 - doesn't exist so within your script if
11:07 - you only wanted to proceed
11:08 - if that command was successful then you
11:10 - could put in a conditional if you wanted
11:12 - to so something like if p1 dot
11:15 - return code is not equal to zero then
11:19 - that would be your error case or equal
11:22 - equals zero for it not having any errors
11:25 - now if you did want Python to throw an
11:27 - exception if the external command fails
11:29 - then we can just pass in an argument of
11:32 - check equals to true so if I add in an
11:37 - additional argument here I'm going to
11:38 - say check is equal to true and now if I
11:43 - run this then we can see that now Python
11:46 - throws an exception here and we got a
11:47 - trace back and it says that our command
11:50 - returned a non zero exit status of one
11:54 - so that might be useful depending on
11:56 - whether or not you actually want Python
11:58 - to throw an exception if your command
11:59 - actually fails or returns a non zero
12:02 - status code now another common thing to
12:05 - do with errors is to just ignore them by
12:08 - redirecting them to something called dev
12:10 - null and redirecting them to dev null
12:12 - just means that you are ignoring those
12:14 - so we can do this with the sub process
12:16 - similar to how we've redirected standard
12:18 - out using the pipe so we can replace our
12:21 - capture output here and instead before
12:24 - we did STD out this time I'm going to do
12:27 - stderr for standard error and we're
12:30 - going to redirect that to sub process
12:33 - dot de Vie in you ll Dev null and that's
12:37 - all caps so now if we save that and run
12:41 - it oops and I'm actually getting a trace
12:44 - back here still because we still have
12:46 - check is equal to true so I'm just gonna
12:48 - get rid of check also I don't need text
12:50 - either so I'm just going to delete both
12:52 - of those okay so now we're redirecting
12:53 - that to dev null if I save that and run
12:56 - it we can see that it just redirected
12:59 - our error so we don't have a standard
13:01 - error here it just says none okay so so
13:03 - far we've been looking at how to capture
13:05 - output and errors but we can actually
13:07 - change the input that different commands
13:09 - receive as well so for example let's say
13:12 - that we wanted to take the output from
13:13 - one command and have that be the input
13:16 - to another so let's look at an example
13:18 - of this so for the first command I'm
13:21 - just gonna run a cat on a file which is
13:24 - a linux command that will just print the
13:26 - contents of a file if it just has one
13:28 - file as the input and for the second
13:30 - command I'm going to use the output of
13:32 - that first command to grab that file and
13:35 - grep can be used to search the file for
13:38 - certain contents and again these are
13:40 - Linux commands since I'm on a Mac but
13:41 - you should be able to do something
13:43 - similar to this using different windows
13:45 - commands as well
13:47 - okay so first I'm going to run the cat
13:49 - command on a file that I have in the
13:52 - same directory here called test dot txt
13:55 - and I actually have test exe open here
13:58 - and sublime so let's take a quick look
14:00 - at this so we can see that this is just
14:02 - a very simple file with seven lines that
14:04 - says this is a test with seven lines
14:07 - okay so in order to run the cat command
14:10 - on that file I'm going to change this up
14:13 - a bit
14:14 - so instead of LS I'm going to run cat
14:16 - and I want to run cat on that test dot
14:21 - txt file in the same directory I don't
14:25 - have any more arguments after that and I
14:27 - don't want to redirect standard error to
14:30 - Dev null instead I'm just going to set
14:32 - capture output equal to true so that we
14:36 - can get that output and any errors okay
14:39 - so to see if that worked then I'm just
14:42 - going to print out our standard out so
14:44 - if I save that and run it then we can
14:48 - see that we got the contents of that
14:50 - file it's in bytes right now so I forgot
14:53 - to add text is equal to true to make
14:56 - that a string so I'll save that and run
14:59 - it and now we can see that we got the
15:02 - same contents of that file okay so now
15:05 - in order to use that output as the input
15:08 - of the grep command I'm going to copy
15:10 - what we have here previously and I'm
15:14 - just going to change this a little bit
15:15 - so let me paste this and now I'm going
15:18 - to change this to be p2 as our variable
15:20 - and now I want to run grep and I am
15:24 - going to do a couple of different
15:27 - arguments here so I'm going to also pass
15:29 - in an argument of - in which gives us
15:32 - the line number that it finds a
15:34 - match just so we can test this and let's
15:37 - look back at our test txt I will search
15:40 - for the text of test and that's on line
15:43 - four so I will pass in a test for the
15:47 - word that we are searching for okay so
15:49 - I'm also going to keep capture output
15:50 - equal to true and text equal to true but
15:53 - I'm also going to add one last argument
15:56 - here and I'm going to say input is equal
15:59 - to and I want this input to be equal to
16:01 - p1 dot
16:03 - standard out so if I save that I'm going
16:07 - to comment out the print statement on
16:11 - the p1 standard out there so we're just
16:13 - passing that in as the input for that
16:16 - grep command and if I print out P 2 dot
16:20 - standard out and run this then we can
16:23 - see that grep says that it found test on
16:26 - line four of that output from the first
16:29 - command now that's a bit of a contrived
16:31 - example because you can just grab files
16:34 - directly but it might be useful if you
16:37 - want to capture the output of this
16:39 - command first and do some type of
16:41 - processing on it and then pass that into
16:43 - the grep command so it's definitely
16:46 - useful to know how to do this at times
16:47 - because it's nice being able to grab
16:50 - that output from step to step but if
16:52 - you're not doing anything with the
16:54 - output between the steps then you can
16:57 - definitely just use that shell argument
16:59 - that we saw earlier and just write out
17:02 - the whole command using pipes and Linux
17:04 - if you're comfortable doing that instead
17:06 - so what I mean by that is that you could
17:09 - you know instead of doing this whole
17:12 - process here we could just say shell is
17:17 - equal to true and then instead of
17:21 - passing this in as a list of arguments
17:26 - we could just say cat test
17:28 - oops I got to get rid of that square
17:30 - bracket as well we could just pass all
17:32 - of this in as a string and then do a
17:34 - grep - in test and if I print out the
17:40 - standard out of that then we can see
17:41 - that we got the same result but like I
17:44 - was saying it's definitely useful to
17:45 - know how to pass in the input to
17:47 - different
17:48 - external commands because you know if
17:50 - you are doing step-by-step processing
17:52 - and doing some string parsing or
17:54 - something like that using Python then
17:57 - you can pass in those results into a
17:59 - different command so that's definitely
18:00 - useful okay so I think that's going to
18:02 - do it for this video I hope that you
18:04 - found it useful learning how you can
18:06 - call external commands using Python and
18:08 - also how to redirect those outputs and
18:12 - inputs and things like that it's
18:14 - definitely useful especially when I'm
18:16 - writing scripts on a web server or
18:17 - something like that
18:18 - it makes it possible to run some
18:20 - background commands within the Python
18:22 - script itself and process that that
18:24 - output further if need be but if anyone
18:26 - has any questions about what we covered
18:27 - in this video then feel free to ask in
18:29 - the comment section below and I'll do my
18:31 - best to answer those and if you enjoy
18:32 - these tutorials and would like to
18:33 - support them then there are several ways
18:35 - you can do that the easiest way is to
18:36 - simply like the video and give it a
18:38 - thumbs up and also it's a huge help to
18:39 - share these videos with anyone who you
18:41 - think would find them useful and if you
18:42 - have the means you can contribute
18:43 - through patreon and there's a link to
18:45 - that page in a description section below
18:46 - be sure to subscribe for future videos
18:48 - and thank you all for watching