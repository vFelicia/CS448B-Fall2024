00:00 - hey there how's it going everybody in
00:01 - this video we're going to be taking a
00:02 - look at a real world problem that I ran
00:04 - into and we'll walk through how to write
00:06 - a python script to solve this so I've
00:07 - done videos like this before and
00:09 - everyone seemed to find them useful now
00:11 - the difference between these videos and
00:12 - my normal videos is that I'm not going
00:14 - to go into as much uh stepbystep detail
00:16 - of every little step I'm just going to
00:18 - walk through how I came up with a
00:20 - solution and you can follow along so
00:22 - here's what I want to write a script to
00:24 - do so some of you may not know this but
00:26 - for anyone who contributes to this
00:28 - channel through patreon I list everyone
00:30 - on my website's uh contributors page as
00:33 - a small way of saying thanks well the
00:35 - problem that I'm running into and it's a
00:37 - great problem to have is that the
00:38 - contributors are getting up into the
00:40 - numbers where it's hard to keep track of
00:42 - who I've added to the site and who I
00:44 - haven't so I want to automate this
00:46 - process with python so that I don't ever
00:48 - Miss anyone and luckily patreon provides
00:50 - a downloadable CSV file of all the
00:52 - contributors which will make it easy to
00:55 - automate this process so if you don't
00:57 - know what CSV files are it stands for
00:59 - comma separated values and basically CSV
01:01 - files allow us to put data into a plain
01:04 - text file and use some type of delimiter
01:06 - which is usually a comma to separate the
01:08 - different fields so in this video we'll
01:10 - be learning how to use the CSV module to
01:13 - parse the CSV file count the
01:15 - contributors and then put their names
01:17 - into an HTML unordered list that I can
01:20 - drop into my website so let's go ahead
01:22 - and get started now first of all I don't
01:24 - want to expose anyone's information here
01:26 - so the CSV file I'm going to be using
01:28 - for this video uh takes out all of
01:31 - everyone's personal information and it
01:33 - just has fake names instead of the real
01:36 - names but other than the names being
01:38 - fake this is almost identical to the
01:40 - file that I downloaded from patreon so
01:42 - I'm going to open up this file it's
01:44 - called patron. CSV and when I first open
01:47 - up this file there are a couple of
01:48 - things that pop out to me when I first
01:50 - see this so first of all our first row
01:53 - is our headers and so we can see that it
01:56 - says that the information in this file
01:58 - is going to be first name last name
01:59 - email pledge lifetime status country and
02:03 - start now I really don't know what all
02:05 - those fields mean but basically I'm only
02:07 - concerned with the first name and last
02:09 - name so that's okay um also I noticed
02:11 - that there are a couple of lines here
02:13 - after the header that aren't actual data
02:16 - it's just a line explaining uh the
02:18 - people below this line are the ones
02:20 - who've said that they don't mind being
02:21 - listed on the website as a contributor
02:23 - and then it looks like the actual people
02:25 - start on line five here now on patreon
02:28 - you can also opt out rewards so there's
02:31 - likely a line in this CSV file that is a
02:33 - cut off for people who said that they
02:35 - only want to contribute but don't want
02:37 - to be listed on the website and actually
02:40 - if we look down here at line 35 uh we
02:43 - can see that cutoff point where it says
02:45 - that the people uh listed below this
02:47 - point do not want the reward and don't
02:50 - want to be listed on the website okay so
02:52 - now we have a basic idea of the data
02:54 - that we want to capture so now let's go
02:56 - ahead and start coding this so in the
02:57 - same directory I have a blank file file
03:00 - here called parse CSV dopy and I'm going
03:02 - to open that up now first thing I'm
03:03 - going to do is import the CSV module and
03:07 - you may have looked at that CSV file and
03:09 - thought that hey that doesn't look
03:12 - difficult to parse so why not just use
03:14 - the split method on each line of the
03:16 - file to get that information and it's
03:18 - true that you could do that but the CSV
03:21 - module just makes parsing these files so
03:23 - much easier so for example if someone
03:25 - put a comma or something in their name
03:27 - for some reason then we wouldn't want to
03:28 - split on that and also the CSV uh module
03:32 - will handle new lines and everything
03:34 - like that and it just takes all the
03:35 - guesswork out of working with things
03:37 - like this so we're going to use the CSV
03:39 - module okay now I know that my end goal
03:42 - is to Output an HTML unordered list so
03:45 - I'm going to create an HTML output
03:48 - variable and set this to an empty string
03:51 - for now and we'll populate that as we go
03:53 - and I also know that I want to capture
03:55 - all the names of everyone that I want to
03:56 - add to that output so I'm going to
03:58 - create an empty list of the names okay
04:01 - so now let's open up our CSV file just
04:03 - like we would open up any other file so
04:06 - we're going to use a context manager
04:07 - here and we're going to say with open
04:09 - and this is called patron. CSV and we
04:13 - want to read this file so we're going to
04:15 - pass in an R there and we'll just call
04:17 - this a data file now I'm going to show
04:20 - you two different ways to parse the CSV
04:22 - file first I'll show you the most common
04:24 - and then I'll show you my preferred
04:26 - method so the first way we'll do this is
04:28 - with a CSV V reader um so I will say CSV
04:33 - data equals
04:35 - csvreader and now we're going to pass in
04:38 - that data file and actually let me make
04:41 - this text a little bit bigger here just
04:42 - so everyone can see as we're going along
04:44 - I think that's better so that reader
04:46 - method should have parsed the CSV file
04:49 - and put the data into our CSV data
04:51 - variable so let's print out what we have
04:54 - so far to make sure that it looks right
04:56 - so I'm going to come down a couple of
04:58 - lines here and just print out CSV data
05:00 - and run that okay so right now we just
05:03 - get this CSV reader object now you may
05:06 - have been expecting all of our CSV data
05:08 - now the data is there but this object is
05:10 - in iterable and behaves like a generator
05:13 - and what that means is that we have to
05:14 - Loop over it to get each line so you can
05:17 - either do that line by line or you can
05:19 - just convert it to a list and get all
05:22 - that data at once so if we converted
05:24 - this to a list and printed it out then
05:27 - we can see that it prints out a lot of
05:29 - information here in list form now it's
05:32 - not the easiest to read but it looks
05:34 - like our data so it's a good start so
05:36 - now let's actually print it out line by
05:38 - line so we can see this a little bit
05:40 - better so to do this we can say for line
05:43 - in CSV data and now we're just going to
05:46 - print out each line and run that and
05:50 - when we run that we can see that it is a
05:51 - lot easier to read so if we scroll up to
05:54 - the top and look at the first two lines
05:57 - we can see that the first line has the
06:00 - headers and we really don't need those
06:02 - other than to know which index each
06:04 - field is located so the first name is at
06:07 - index zero and the last name is at index
06:10 - one and it looks like the second line is
06:13 - the line uh telling us that these names
06:17 - uh we want to put on the website and
06:19 - then the third line is the first person
06:22 - uh with the name John do so we really
06:24 - don't need these first two lines here we
06:27 - just want to get the names of the people
06:29 - so if anyone has seen my video on
06:31 - generators we can actually step over
06:34 - values and an iterable by calling next
06:36 - so let's call next on our CSV data twice
06:40 - before printing out this Loop so we'll
06:43 - just say next CSV data then we will copy
06:47 - that and paste it in again now we don't
06:49 - need to capture the output from these
06:51 - and any variables we just want to throw
06:53 - them away so now if we run this and
06:56 - scroll back up to the top then we can
06:58 - see that now our first line is the first
07:00 - person of John Doe um okay so great now
07:04 - let's remove our print statement well
07:06 - actually before we do that um it's not
07:09 - obvious why we're running next twice on
07:11 - the CSV data here so it's important to
07:14 - comment non-obvious stuff like this uh
07:16 - while we're going along um not only for
07:18 - other people but for yourself also so
07:20 - you could come back to this code in a
07:22 - few weeks and have no idea why we ran
07:24 - these two lines here so let's just go
07:26 - ahead and make a comment that says uh we
07:28 - don't want headers or first line of bad
07:33 - data okay so within our Loop here We're
07:37 - looping over every person in the CSV
07:39 - file now remember that the first name is
07:42 - index zero and the last name is index
07:44 - one so let's go ahead and add each name
07:47 - to our list of names that we created at
07:49 - the top now to do this we'll say names.
07:52 - append now we want to append the a
07:55 - string of the first name space last name
07:58 - and to do this I'm I'm just going to use
08:00 - an F string and then these uh braces for
08:04 - a placeholder and we'll say line and
08:06 - then index of zero for the first name
08:08 - then a space then another uh bracket for
08:11 - the placeholder and then index of one
08:13 - for the last name now like I've said if
08:15 - you've never seen a string with an F in
08:17 - the front like this this is called an F
08:19 - string and they're new to python 3.6 so
08:22 - if you're not using 3.6 or later then
08:25 - this isn't going to work for you you'll
08:26 - have to use a regular uh string. format
08:29 - now I'm really liking these F strings so
08:31 - far and basically a it's a much simpler
08:33 - way of doing string formatting so if
08:35 - you'd like to see more about them then
08:37 - you can watch my video on strings where
08:38 - I go more in depth into all the
08:40 - different ways to format strings but
08:42 - basically all we're saying here is that
08:44 - we want a string uh with the value at
08:47 - index zero of the line which is the
08:49 - first name and then a space and then the
08:52 - value at index one of the line which is
08:54 - the last name okay and now that we've
08:56 - appended those let's print out all the
08:58 - names that were appended to that list uh
09:01 - since that's a global variable we can
09:03 - print that outside of our context
09:05 - manager all the way down here at the
09:07 - bottom so we're going to go down to the
09:08 - bottom and we'll say for name and names
09:12 - and then we will just print out the name
09:15 - okay so this is looking good it looks
09:16 - like we have the first names and the
09:18 - last names now if we scroll through our
09:21 - names here then we can see that one kind
09:22 - of sticks out and this is that no reward
09:25 - value so if you remember there are names
09:27 - in this list who it out and didn't want
09:30 - to be included so every name after this
09:33 - no reward value here uh shouldn't be
09:35 - added to our list well if we look back
09:38 - at our original CSV file here we can see
09:41 - that this no reward line has a comma
09:44 - after no reward so this should get
09:47 - parsed as a first name so let's add in a
09:50 - check for a first name of no reward and
09:54 - then we will break out of our loop as
09:55 - soon as we see that value So within our
09:58 - Loop here uh we will say if the index
10:03 - zero which should be the first name is
10:05 - equal to no
10:08 - reward then we are just going to break
10:11 - out of that Loop now before I run this
10:14 - uh we should note that the name before
10:16 - no reward over here in our file is
10:19 - Maggie Jefferson so when we rerun this
10:22 - uh this will hopefully be the last name
10:25 - in our list of names so I'll go ahead
10:27 - and rerun this and and when we rerun
10:29 - that we can see that this fake name down
10:31 - here of Maggie Jefferson is the last
10:34 - name in the list so that works okay so
10:36 - now that we've tested to make sure that
10:38 - our names are right we can go ahead and
10:40 - just remove that list where we're
10:41 - printing or that Loop where we're
10:43 - printing out all the names now we're
10:45 - pretty close to being done here so the
10:46 - hard part is over now we just need to
10:48 - get these names into an HTML unordered
10:51 - list so that I can drop them into the
10:53 - site so first on the site I'd like to
10:56 - list how many supporters there are so
10:59 - we'll first add that to our HTML output
11:02 - with paragraph tags and to count how
11:04 - many there are uh we can just use the
11:07 - length of our names list so I'm going to
11:09 - say HTML output uh plus equals because
11:13 - we want to append to this then I'm just
11:15 - going to use another format string here
11:18 - um to put in these
11:27 - values
11:32 - okay so like I said I used another F
11:34 - string here and we're using uh these
11:37 - HTML paragraph tags here that we're
11:39 - adding in now the only python data that
11:41 - I'm adding in is um the length of the
11:44 - names of that names list so when this
11:47 - gets printed out it should substitute
11:49 - the actual number there so just to make
11:51 - sure let's go ahead and print out this
11:54 - HTML output so print HTML output and
11:57 - I'll run that okay so apparently there
11:59 - are 30 people in that nam's list so now
12:02 - let's create our HTML unordered list
12:04 - with each name so we'll add an unordered
12:08 - list to our HTML output and I'll do this
12:11 - above where we're printing that output
12:13 - so I'll say HTML output plus equals and
12:16 - then an unordered list in Python now I'm
12:19 - going to put a new line there first an
12:21 - unordered list is uh this UL tag now
12:25 - that new line that I added in will just
12:27 - make it a lot easier to read when we
12:29 - actually print this out so now let's
12:31 - Loop through all of our names and add
12:33 - each one to an HTML list item um so if
12:36 - you aren't familiar with HTML then don't
12:39 - worry about it too much uh it's more
12:41 - about the process of just automating
12:43 - this process that we're after here so uh
12:46 - right here we'll say for name and names
12:50 - and now we want to add each one to that
12:52 - HTML output so we'll say HTML output
12:55 - plus
12:57 - equals
13:01 - okay and this is another FST string here
13:04 - so first we're putting in a new line
13:06 - with a back sln and then we're putting
13:09 - in a tab with the back SLT and then the
13:13 - list item is this Li tag here and then
13:16 - we're putting the name this is the
13:18 - python um variable that we're using it's
13:21 - going to substitute this out and then in
13:23 - HTML these Ford slashes close out an
13:26 - HTML element so we're closing out that
13:28 - list item
13:29 - okay and now after we have all those
13:31 - list items there outside our loop we're
13:33 - going to have to close off the entire
13:35 - list alog togethere so we'll say HTML
13:37 - output plus equals and we'll close off
13:41 - that list item with a forge slul and
13:45 - let's not forget to put in a new line
13:47 - there at the beginning just to clean up
13:49 - how this prints out okay so now let's
13:51 - print this out and see what everything
13:54 - looks like so I will raise our uh output
13:58 - here okay so this is looking good so at
14:01 - this point I think that this is the
14:02 - exact output that we wanted so at this
14:05 - point we could be done but I wanted to
14:07 - show you one more thing um I told you
14:10 - that I'd show you one more way to parse
14:12 - the CSV file that I prefer more than
14:14 - using the reader method and what I
14:17 - prefer is to use the dictionary reader
14:20 - and we can use this by saying dict
14:23 - reader now the difference between the
14:25 - reader and the dictionary reader is that
14:27 - the dictionary reader turns each line
14:29 - into a dictionary instead of a list and
14:32 - the dictionary has each field as a key
14:35 - and then the data as the values so let
14:37 - me just Loop through and print out these
14:39 - values so you can see what this looks
14:41 - like so first let me just comment out
14:43 - these lines where we're doing all of our
14:45 - looping and everything and I'm also
14:47 - going to comment out the HTML output for
14:49 - now and we're going to see what the
14:52 - output of this dictionary reader looks
14:54 - like and to do this we'll say for item
14:56 - in CSV
15:00 - data and then we will just print out
15:03 - each item so let's run that okay now at
15:05 - first glance this looks a little messy
15:08 - uh especially since my text is so large
15:10 - here but each of these lines is an
15:12 - ordered dictionary so the first line
15:15 - with the field names is no longer here
15:18 - now those are being used as keys for the
15:20 - dictionaries so the first uh throwaway
15:23 - value is still here as far as this being
15:26 - the description of the reward line so
15:28 - this first order dictionary here is our
15:30 - first line and if we look at our second
15:33 - item now this is our first person
15:35 - because we can see this is that uh John
15:37 - do person so now instead of accessing
15:41 - index zero for the first name and index
15:43 - one for the last name now we can access
15:46 - those directly through the first name
15:49 - and last name keys and I think that that
15:51 - is a lot more readable for anyone
15:53 - looking at your code so now to get this
15:55 - working again uh we're going to get rid
15:57 - of this Loop where we just printed
15:59 - everything out and now we'll uncommon
16:02 - out all of the uh logic here okay and
16:05 - now that the headers are no longer
16:07 - included in the output uh we only want
16:09 - to skip over that one first value and
16:13 - let's see and we can fix our comment
16:15 - here and just say we don't want first
16:17 - line of bad data and now instead of
16:19 - using index where we access the items we
16:22 - can now use the keys of first name and
16:25 - last name so now we're going to say if
16:27 - the first name is equal to no reward and
16:31 - then we want to append the first name
16:36 - and
16:37 - append the last
16:41 - name okay and now let's go down here and
16:43 - uncommon out this HTML output and see if
16:46 - this works so now I'll go ahead and
16:48 - rerun this and if we scroll up we have
16:50 - Maggie Jefferson here at the bottom and
16:53 - if we scroll up we can see that there's
16:54 - still 30 contributors and John do is our
16:57 - first one so that that seems to be
16:59 - correct okay so it looks like our
17:02 - results are good uh so it took a little
17:05 - while to write the script but now it's
17:07 - going to save a lot a ton of time by
17:10 - automating this in the future and will
17:12 - also prevent me from making any mistakes
17:14 - so one reason that I like to show you
17:15 - all these quick scripts that can
17:17 - automate a repetitive task is just to
17:19 - show how you can save a lot of time by
17:21 - writing a very simple script I mean this
17:23 - script here is only 26 lines and it's
17:26 - going to save us a lot of time and I
17:27 - also want to show that you don't need to
17:29 - overthink these oneoff scripts too much
17:31 - uh so I could probably come into the
17:33 - script and add error checking and also
17:36 - some kind of objectoriented approach to
17:38 - this but for what I want to use the
17:39 - script for I really don't need it to be
17:42 - overly complicated so if you have some
17:44 - problems that you think that you can
17:45 - automate then just give it a shot and
17:47 - don't think too much about how
17:48 - performant or clean everything is um
17:50 - it's just a great way to learn is uh
17:52 - just by doing and experimenting now if
17:54 - any of you are uh interested in a more
17:56 - detailed look at parsing CSV file files
17:58 - and writing CSV files then I am putting
18:01 - together a video specifically on reading
18:03 - and writing CSV files that I'm going to
18:05 - record very soon so be on the lookout
18:07 - for that okay so I think that is going
18:09 - to do it for this video I hope that you
18:10 - all found it useful and if anyone has
18:12 - any questions about what we covered in
18:13 - this video then feel free to ask in the
18:15 - comment section below and I'll do my
18:16 - best to answer those and if you enjoy
18:18 - these tutorials and would like to
18:19 - support them then there are several ways
18:20 - you can do that the easiest way is to
18:22 - Simply like the video and give it a
18:23 - thumbs up and also it's a huge help to
18:25 - share these videos with anyone who you
18:26 - think would find them useful and if if
18:28 - you have the means you can contribute
18:29 - through patreon and there's a link to
18:31 - that page in the description section
18:32 - below be sure to subscribe for future
18:34 - videos and thank you all for
18:46 - watching