00:00 - hey there how's it going everybody in
00:01 - this video we're going to be learning
00:02 - how to create graphical user interfaces
00:05 - in Python using tkinter and tkinter is a
00:08 - popular package used for creating goys
00:10 - in Python and it's actually part of the
00:12 - standard Library so there shouldn't be
00:14 - anything additional that we need to
00:15 - install in order to start working with
00:17 - this now there are some other popular
00:19 - packages for creating user interfaces in
00:22 - Python and we'll take a look at some of
00:24 - those in the future and see why we might
00:26 - choose one over the other but in this
00:28 - video we're going to be getting started
00:30 - using tenter to create a basic
00:32 - application uh but first let me show you
00:34 - a quick example of something that we can
00:36 - build using tenter so I'm currently
00:39 - working on a personal application here
00:41 - let me pull this up and I built this
00:44 - using uh tenter and some databases in
00:46 - the background and what this is is it's
00:48 - something to help me categorize uh
00:50 - credit card transactions and this is
00:52 - just a first version of this so there's
00:54 - a lot of uh changes that need to be made
00:57 - um but we can see here that it has
00:58 - everything that you'd expect from a
01:00 - typical guey application so we have text
01:03 - input Fields here uh radio buttons
01:06 - checkboxes um buttons for saving data we
01:09 - can even switch menus up here uh that
01:12 - shows me a list view of all of the
01:14 - categories that I currently have saved
01:16 - and things like that um so that's just a
01:19 - quick overview of something that we can
01:21 - build uh using tkinter and I'll actually
01:23 - do a separate video on writing those
01:26 - other applications from scratch uh start
01:28 - to finish uh but in this video I wanted
01:31 - to cover getting started with tkinter so
01:33 - we're just going to learn how to create
01:35 - a window uh learn about the basics of
01:37 - adding different widgets like buttons
01:39 - labels text fields and other common
01:42 - elements that are used in these types of
01:44 - application and we'll also learn about
01:47 - the different ways of positioning in
01:49 - order to lay out our widgets within the
01:51 - application exactly how we want and
01:53 - we'll also learn how to handle events
01:55 - like clicking buttons pressing on the
01:57 - keyboard and things like that so with
02:00 - that said let's go ahead and get started
02:02 - now I had mentioned that this is part of
02:03 - the standard library with python so
02:05 - there shouldn't be anything that we need
02:07 - to install uh using pip uh but in my
02:10 - case I'm using home brw version of
02:12 - python and it didn't connect everything
02:15 - in the background that needs to be
02:16 - connected so I actually had to go and
02:19 - install this additional Library through
02:21 - Homebrew then that is Brew install
02:24 - python dtk so even though it is in the
02:27 - standard library and there's nothing
02:29 - additional to install through pip uh on
02:31 - my specific system system on Mac through
02:33 - Homebrew I did have to install this one
02:36 - additional package but now I'm going to
02:38 - go ahead and close that and bring this
02:40 - up so now let's jump in and start
02:42 - writing our first guey application now
02:45 - first let's run a basic test to make
02:47 - sure that everything is working as it
02:49 - should so to do this they have this uh
02:52 - helper function here to where we can
02:54 - just say import tenter as TK and then
02:58 - run tk. underscore test and if we run
03:02 - this then we can see that we get this
03:04 - popup window here and it gives us the
03:07 - latest version of tkinter uh or it tells
03:10 - us what version we're using and adds a
03:12 - button here that has some functionality
03:14 - to it and also a button to quit out of
03:17 - this now I'm going to be starting this
03:19 - tutorial with the assumption that what
03:21 - we did there works for you and that we
03:23 - can get started using tenter now if that
03:26 - test doesn't work for you then there are
03:28 - several things that could be going wrong
03:30 - uh in the background that are beyond the
03:32 - scope of this video so that I'm just not
03:34 - going to dive into here so again I'm
03:36 - going to start from the assumption that
03:39 - this script works for you so far up to
03:41 - this point okay so now we're ready to
03:43 - get started by writing a simple
03:45 - application so to do this we can
03:47 - initialize our main window and we will
03:49 - call this root so I'll say root is equal
03:52 - to and this is just
03:54 - tk.
03:56 - TK so if I was to run this now
04:00 - then we don't get any errors or anything
04:02 - like that down here but nothing actually
04:05 - popped up now something does actually
04:07 - happen here but it's just opening and
04:09 - closing the application too quickly for
04:11 - us to notice so in order for us to keep
04:13 - the window open we have to start the
04:15 - application's main Loop and this is also
04:18 - what allows us to listen for events like
04:21 - Mouse clicks and keyboard presses and
04:23 - things like that uh so we can start this
04:25 - Loop just by saying root Dot main Loop
04:32 - and if we run this then we can see that
04:35 - now we get this blank window with
04:37 - nothing in it uh which is what we should
04:39 - expect since we hadn't haven't added
04:41 - anything to our application yet so let's
04:43 - go ahead and do that now and add a
04:46 - simple button uh but first one simple
04:48 - addition that every guey should probably
04:50 - have is a simple title for the window
04:52 - that pops up so to set this right under
04:56 - where we're creating our root uh root we
04:59 - want to do above where we're starting
05:01 - that main Loop we can just say root.
05:04 - tile and I'll just send this uh title to
05:07 - Simple app now if I run this then we can
05:11 - see here that we have a title of simple
05:14 - app on our window here now so that's
05:17 - good so now let's add some widgets and
05:19 - we'll start with a button now since
05:21 - tenter has evolved over the years there
05:23 - are a lot of different ways to do things
05:25 - now the goal in this video isn't to see
05:27 - how everything has evolved over time but
05:30 - to use the current best practices to get
05:32 - up and running so you may see other
05:34 - tutorials do something differently than
05:36 - how we're doing it here but that's okay
05:38 - uh all I can do is show you the most
05:40 - recent way of how I've learned to do
05:42 - things and if you do see someone doing
05:45 - it differently in the future then you
05:47 - can investigate that down the road when
05:48 - you come across it so let's go ahead and
05:51 - create our button so to add a button
05:53 - here I'm just going to say uh button is
05:55 - equal to
05:57 - tk. button and and now we're going to
06:02 - pass in our root and we're passing in
06:04 - root here because this is going to be
06:07 - the parent window where our widget will
06:09 - be added and we don't have any others
06:11 - right now so let's go ahead and pass in
06:13 - root and we'll see some examples of some
06:16 - uh different parent Windows here in a
06:17 - little bit and now let's go ahead and
06:19 - give our button some text as well so
06:21 - I'll say text is equal to and we'll just
06:24 - say button one and now that this button
06:27 - is created we can add it to our window
06:29 - window and we can do that using one of
06:31 - the geometry managers to specify how we
06:34 - want to add it to our window now we're
06:36 - mainly going to be using the grid layout
06:38 - in this series of videos since that
06:40 - seems to be the most flexible with most
06:42 - applications and it's also the layout
06:44 - mentioned in the tenter documentation as
06:47 - the more modern layout system so to add
06:50 - this button we can simply call the grid
06:53 - method on the button now you have to do
06:56 - this in order to get the button to show
06:58 - up in our window it can be an easy
07:00 - mistake to create a widget like we did
07:02 - here uh and wonder why it's not showing
07:04 - up only to later realize that we didn't
07:07 - use one of these geometry managers to
07:09 - explicitly add it to our window so to do
07:12 - this I'm just going to say button. grid
07:15 - and that will add it to our window if I
07:17 - save that and run it then we can see
07:19 - that now we have a very simple
07:22 - application here with a button that
07:24 - doesn't currently do anything now we're
07:26 - using the grid layout here and as you
07:28 - can probably guess from the name uh we
07:30 - can use this to lay out things in a grid
07:32 - with rows and columns so let's see what
07:35 - this looks like uh by adding a label
07:38 - before our button so to do this I'm
07:40 - going to close down what we have for now
07:43 - above our button here I'm going to
07:45 - create a new label and this is going to
07:48 - be
07:49 - tk. label and again we're going to pass
07:53 - in this root parent here and then let's
07:59 - go ahead and add some text to this as
08:01 - well I'll just call this label one now
08:04 - again I'll show you what this looks like
08:06 - if I don't add this using our uh grid
08:10 - system then we can see that we don't
08:12 - have a label here in our application so
08:16 - you always have to remember if you want
08:18 - something added then we can say uh label
08:21 - one. grid it uses that grid layout and
08:26 - now we have a label here above our
08:29 - button but one so by default it's
08:31 - stacking these on top of each other into
08:33 - a single column now we can specify
08:36 - exactly how we want these to be laid out
08:38 - by setting the rows and columns so let
08:41 - me close this and now where we're adding
08:44 - it to our grid here let's specifically
08:47 - say that we want this to be in row zero
08:51 - which this is a zero based index so that
08:53 - would be the first row and we'll also
08:55 - set the column to zero so the First
08:58 - Column as well and now let's also do
09:00 - this with our button so instead of row 0
09:06 - column 0 I'm going to make this column
09:08 - one so now that should be in the second
09:11 - column now if I run this then we can see
09:14 - that now we only have a single row here
09:17 - and the label is in the First Column and
09:19 - the button is in the second column now I
09:21 - know that this beginning stuff can be a
09:23 - bit boring uh but we just have to build
09:25 - up this small stuff step by step in
09:27 - order to build our larger application
09:30 - okay so now that we've added a couple of
09:31 - widgets let's now add in some event
09:34 - handling so for example let's say that
09:36 - when our button is clicked we wanted to
09:38 - run a function within python so to do
09:41 - this let's first create a simple
09:46 - function here and I'll just call this
09:49 - oneclick and it's not going to take any
09:51 - parameters for now and I'm just going to
09:53 - have it print out testing and now to add
09:57 - this functionality to our button we can
09:59 - set the command parameter uh to this
10:02 - function So within our button here when
10:05 - we are creating it I'm going to set the
10:07 - command equal to this onclick function
10:12 - now you want to be sure that you're
10:13 - setting it equal to the function itself
10:16 - and not the executed version of that
10:19 - function so we do not want uh the
10:22 - parenthesis here we want to pass this in
10:24 - uh without running it so now let's go
10:26 - ahead and run this and now now if I
10:30 - click on our little button over here
10:32 - then we can see that down in our python
10:35 - script that it is printing out testing
10:38 - in our console so that is running that
10:41 - function as we'd expect now we can also
10:44 - use these functions to change values
10:46 - within the guey window itself so instead
10:48 - of printing something out within our
10:50 - python terminal uh what if instead we
10:52 - wanted to change our label when I
10:54 - clicked on the button so to do this
10:56 - instead of printing out testing uh all I
10:59 - want to do is I want to say
11:02 - label. config and we want to config the
11:06 - text of that label and we'll just say
11:09 - something like button clicked so now if
11:13 - I save this and run it make this a
11:16 - little larger here if I click on our
11:18 - button then we can see that now our
11:20 - label has changed to button clicked
11:23 - instead of label one so that worked now
11:25 - there's all kinds of different things
11:27 - that we can change with the config
11:29 - configuration of different widgets if
11:31 - you wanted to see what's available then
11:33 - you could either look these up online uh
11:35 - but for a quick print out we can simply
11:37 - call the config method within our script
11:40 - and print that out and this will return
11:42 - a dictionary with keys um so let's go
11:46 - ahead and see what keys are available uh
11:48 - with this label so after I create this
11:51 - label down here I'm just going to print
11:53 - out
11:55 - label. config and what we want to do
11:58 - here
12:00 - is just grab these keys so if I save
12:04 - this and I run it then we can see that
12:06 - we get some dictionary keys back here uh
12:09 - so we have active background active
12:11 - foreground um where is the text the text
12:14 - is down here so that's what we set when
12:16 - we clicked our function so there's all
12:18 - kinds of things that we can change here
12:20 - so for any widget if you want to see the
12:22 - possibilities uh then you can just run
12:24 - that there to get a list of all the keys
12:26 - that are available to you okay so now
12:28 - that we have have the very basics down
12:30 - let's make a super simple form where we
12:33 - can uh have a place to insert text and
12:36 - we'll have a button that will add that
12:38 - text value to a list and also a list to
12:41 - hold all those values so connecting all
12:44 - that together will show us a bit more of
12:46 - how to handle certain events so to do
12:48 - this we'll add a couple of widgets that
12:50 - we haven't seen yet uh but the process
12:52 - is very similar to what we've already
12:54 - seen so first I'm going to go ahead and
12:56 - get uh rid of everything that we have
12:59 - here so far uh all except for our title
13:03 - uh rout and Main Loop so first let's
13:05 - keep everything a bit more organized by
13:07 - using a frame now a frame is basically
13:11 - just a container that allows us to hold
13:14 - different widgets and allows us to more
13:16 - easily organize our layout um let's
13:19 - create one of these now and then we'll
13:20 - look at why they're useful in just a bit
13:22 - so to create one I'm just going to say
13:24 - frame is equal to tk. frame and now
13:28 - we're going to pass in this root as the
13:31 - parent window and now we need to add
13:34 - this to our application as well so I'll
13:38 - just set this equal to row zero and
13:41 - column zero like we saw before let me
13:43 - fix this typo here and again like I said
13:46 - a frame is just a container for other
13:48 - widgets so if I was to run this now then
13:51 - we're not going to see anything uh we're
13:53 - not actually um adding anything to our
13:55 - window yet it's just a container so now
13:58 - that we have this frame added to our
14:00 - root window uh now we're actually going
14:02 - to add our widgets to this Frame instead
14:05 - of the root window itself and like I
14:07 - said before this will allow us to better
14:10 - organize our widgets in more complicated
14:12 - layouts and we'll see that in action and
14:14 - just a bit so now let's create uh a text
14:19 - entry within our frame so I'm just going
14:21 - to call this entry and this is going to
14:24 - be equal to text or tk. entry sorry and
14:28 - now now instead of passing in root as
14:31 - our parent window we're going to pass in
14:33 - this Frame as our parent window so now
14:36 - it's going to be included in this Frame
14:38 - and this Frame is included in the root
14:40 - application and this Frame is going to
14:43 - have its own layout so even though we
14:45 - set this Frame equal to row zero and
14:48 - column zero within the root we're going
14:50 - to be starting over at zero when we add
14:52 - widgets to this Frame and if that
14:54 - doesn't make sense now then I think
14:56 - it'll make sense in just a second when
14:58 - we see how all this comes together so
15:00 - now that we've added this entry to our
15:02 - frame we can specify that within that
15:06 - frame we want it to be on row zero and
15:09 - column zero of that frame so I'm just
15:12 - going to say entry. grid and we'll say
15:15 - the same thing here row zero column zero
15:19 - okay so now we have a text entry added
15:22 - to our frame and now let's put a button
15:25 - beside this text area that will add text
15:28 - from that field to a list so to do this
15:31 - I'm just going to call this entry button
15:33 - we'll set this equal to TK do button and
15:38 - the parent window that we want to use is
15:40 - the frame and the text I'm just going to
15:44 - put as ADD and again we're going to want
15:47 - to add this using the grid layout so I'm
15:51 - going to say entry button. grid row zero
15:55 - and instead of column zero I'll put this
15:57 - in column one so now we have our text
16:00 - entry and we have our button now let's
16:03 - put a list box below these that will
16:05 - hold all of the values that we add uh so
16:08 - to do this I'm just going to say
16:11 - textor list is equal to TK Dot and this
16:16 - will be a list box and again we're going
16:19 - to want to pass in that frame as our
16:21 - parent window and we're not going to add
16:23 - any more arguments there and for our
16:26 - grid layout on our text list
16:29 - let's put this on the second row so that
16:32 - would be Row one and column zero so now
16:36 - we've added a couple of things let me go
16:37 - ahead and save this and run it really
16:40 - quick and it looks like I possibly
16:42 - forgot to close down our last
16:46 - application sometimes you'll run into
16:48 - that when uh doing these gooey
16:50 - applications if you actually
16:51 - accidentally run one and then don't
16:53 - close it down then it could prevent you
16:55 - from uh running other ones in the future
16:57 - so let's make sure that that's closed
16:59 - down now I'll rerun it and we can see
17:02 - here that we have our text entry our add
17:05 - button and our text list so we can see
17:08 - that this isn't the best looking guy
17:10 - application um it's very basic and when
17:13 - I resize the window here it's not
17:15 - responsive when we resize our window uh
17:17 - but we'll fix all of that once we get
17:19 - the functionality working so what we
17:21 - want to be able to do is type something
17:24 - here into this text entry click on the
17:27 - add button and have it add it to this
17:29 - list box so to do this going to be sure
17:31 - to close out of our window here uh I'm
17:34 - going to add a function at the top of
17:36 - our script here uh called add to list so
17:40 - I'll just add that right up here so
17:43 - we'll call this add the list and it's
17:46 - not going to take in any arguments so
17:48 - first when we click this add button here
17:52 - uh when we click this button here uh
17:54 - what we're going to want to do is grab
17:56 - the text of this text entry so to do
18:01 - that we can say
18:03 - entry
18:04 - doget and we're going to want to set
18:07 - that equal to a variable so that we have
18:09 - that saved uh and now before we add the
18:13 - text value to the list let's make sure
18:16 - uh something was actually typed in uh we
18:19 - don't want it to add a bunch of blank
18:20 - lines if someone clicks the button
18:22 - multiple times so below here I can
18:26 - simply say if text
18:29 - and if there was text then we can add
18:31 - that to the end of our current list so
18:34 - to do this we can say text list and text
18:38 - list is down here it's what we called
18:40 - our list box we can say text list.
18:44 - insert and now we're going to use a uh
18:47 - special tenter constant that represents
18:50 - the end of the current content and a
18:53 - widget and that is
18:57 - tk. and then we can add in that text so
19:01 - again basically all we're saying here is
19:04 - when we run this add to list function we
19:06 - are uh getting the text that is in that
19:10 - entry uh if there is text there and it's
19:13 - not just a blank line then we can say
19:16 - text. insert insert at the end of the
19:19 - content of that widget and what we want
19:21 - to insert is that text and lastly uh in
19:25 - forms like this uh usually when they
19:27 - they are submitted then it erases the
19:30 - original input from the field so that
19:33 - the user can continue entering
19:36 - additional values without manually
19:37 - clearing the form themselves so to do
19:40 - this we can simply just say
19:44 - entry.
19:45 - delete and we want to delete this from
19:49 - the beginning all the way to the end and
19:52 - again we're going to use this
19:54 - tk. as that special constant okay so
19:57 - this is all the functionality that want
19:59 - for when we click our button but
20:01 - remember we need to tell our script to
20:03 - run this function when the button is
20:04 - clicked we saw this earlier and we can
20:06 - do this just by passing in this function
20:08 - as an argument to the command parameter
20:11 - so down here where we are creating our
20:14 - button I'm going to say that the command
20:16 - oops sorry I'm going to say that the
20:19 - command is equal to and we want it to be
20:21 - equal to this add list function and
20:25 - again make sure that this function isn't
20:27 - isn't executed you're just passing in
20:29 - the function name okay so let's see if
20:31 - we have the functionality that we're
20:32 - looking for I'll save this and run it
20:35 - and now let's test this out I'll say
20:38 - this click add is add
20:43 - a test and we can see that each time it
20:46 - added a new element to our list view
20:50 - here and each time it also um cleared
20:54 - out everything that we had in that text
20:57 - input area there
20:59 - okay so now another common thing that we
21:01 - might see in an application like this is
21:03 - keyboard events so we might might want
21:05 - to uh make it so that the user can
21:08 - simply hit the inner key to add that
21:10 - text to our list instead of needing to
21:12 - manually click that button so to do this
21:15 - we can use the bind method on our entry
21:18 - widget and this will uh show us
21:21 - something about event handling that we
21:23 - haven't seen yet so let's go ahead and
21:25 - take a look so right below where we
21:27 - added our uh entry to our frame now I'm
21:32 - going to uh bind this entry and I'm
21:36 - going to bind this to a keyboard event
21:40 - and the first argument that we're going
21:41 - to uh add here is going to be the type
21:45 - of event that we want to act upon so for
21:48 - example we could be listening for button
21:50 - clicks a specific key pressed and things
21:52 - like that in this case we want to handle
21:55 - when the return key is pressed and the
21:57 - Syntax for that is simply Within These
22:02 - brackets here return and now that we
22:05 - have this uh return binded to an event
22:08 - now we need to specify what we want to
22:10 - happen when that event takes place now
22:13 - we already have a function that we've
22:14 - written for this uh but there is a
22:16 - caveat here um these bound events will
22:20 - automatically pass an event object as an
22:23 - argument to our call back function but
22:26 - our current function does not take any
22:28 - arguments so if we just pass that in as
22:31 - is then we're going to get an error so
22:35 - let me go ahead and do this really quick
22:37 - so I'll pass that in and let me quickly
22:40 - show you what this looks like if I run
22:42 - this then we can see everything works so
22:44 - far but if I add this in and hit enter
22:48 - then we're going to see here that we
22:49 - have an error because it passed an event
22:52 - argument to our function that does not
22:55 - currently take any arguments so there
22:57 - are a couple of different ways that we
22:58 - can handle this uh first we could simply
23:01 - change our function to accept an
23:03 - optional event object uh to do that we
23:06 - could just simply say event is equal to
23:09 - none by default and that would work now
23:14 - another thing that you'll see a lot of
23:15 - people using are Lambda functions for
23:18 - these callbacks a Lambda function is an
23:21 - anonymous function that doesn't have a
23:23 - name and is usually used for very short
23:26 - oneline functions so if I were to use a
23:29 - Lambda function then the Syntax for this
23:32 - uh would be Lambda and then the
23:36 - arguments that it's going to accept so
23:38 - I'll accept that event and now what we
23:41 - want to happen when this Anonymous
23:43 - function is ran um what we want to
23:46 - happen is we want to call this add to
23:51 - list function so that's another way you
23:54 - might see people do it um but I think it
23:56 - looks better the other way that we had
23:58 - it so I'm going to go ahead and put that
24:01 - back uh to the way it was so now if I
24:06 - save this and run it now in our
24:09 - application here uh we should have this
24:13 - uh keyboard functionality working so you
24:15 - can see I'm not clicking on the button
24:17 - so I'm just saying uh this is a test
24:20 - little out of order uh from how I typed
24:22 - it in but that's okay so there we go it
24:25 - it says that uh all that is working so
24:27 - I'm going to go ahead and close set down
24:29 - okay so now that we've looked at
24:30 - handling different events and how to
24:32 - have different widgets interact with
24:34 - each other uh let's now take a look at
24:37 - some ways we can clean up our layout and
24:40 - make our applications look a bit better
24:43 - so first our application currently
24:45 - doesn't respond in any way when the
24:47 - window is resized and different elements
24:49 - aren't really lining up with each other
24:52 - uh within the window and this is because
24:54 - by default things that are added only
24:57 - take up the space that they need and
24:59 - that's it so let's make this look a
25:01 - little better by having these widgets
25:04 - line up properly and also resize
25:06 - accordingly with our window so first if
25:10 - we uh look at our text entry area here
25:15 - or sorry not our text entry but our text
25:17 - list uh we can see that it only takes up
25:19 - one column which uh looks a little weird
25:22 - and that's because we have both the
25:25 - entry and the button widgets in the
25:28 - first row uh but only this one widget in
25:32 - the second row uh so to make this look
25:35 - better I'm going to tell this widget
25:37 - that it should expand two columns since
25:40 - there's only one element in this second
25:42 - row and that it should take up both of
25:44 - these columns so to do that I'm going to
25:46 - close down our window and down here
25:49 - where we have uh our adding this using
25:52 - our grid I'm just going to say column
25:55 - span is equal to two and now if I save
25:58 - this and run it then it should take up
26:01 - two columns but we can see that it's
26:03 - still a little strange here because uh
26:05 - now it's taking up two columns but uh
26:08 - it's centering it within those two
26:10 - columns so in order to get these widgets
26:12 - to take up the available space we can
26:15 - tell the widget to stick to certain
26:17 - sides of the window so to do this I'm
26:20 - going to close that down uh here I'm
26:23 - going to say sticky and for sticky I'm
26:27 - going to pass in ew and that stands for
26:30 - East and West so since we wanted this uh
26:34 - to stick to the sides the left and the
26:36 - right sides we're going to use East and
26:38 - West here so now if I save this and run
26:40 - it then we can see that this looks a lot
26:43 - better it's now taking up um all of the
26:45 - width that it needs to take up but it's
26:47 - still not responsive if we resize our
26:50 - window here so we can fix that next so
26:54 - in order to get this to be responsive
26:56 - we're going to need to configure the
26:58 - rows and Columns of our root window and
27:01 - our frame so to do this uh above the
27:05 - frame here let's go ahead and configure
27:10 - our row columns and our row rows I'm
27:14 - sorry our uh root columns and our root
27:17 - rows so what I'm going to say here is
27:20 - column
27:22 - configure and this is going to be for
27:24 - the First Column so an index of zero and
27:27 - I'm going to set an equ uh weight equal
27:29 - to 1 and I'm going to do the same thing
27:32 - for the row here as well so instead of
27:34 - column configure I'm going to have this
27:36 - be row configure and I'll have this be
27:40 - the first row weight equal to one so
27:43 - having the first row in column with a
27:44 - weight equal to one uh this makes it
27:47 - take up all the available space when
27:49 - it's resized and we'll look at different
27:51 - weights in just a bit but for now let's
27:54 - also configure our frame um now since
27:57 - our root window is able to expand we
28:00 - should now tell our frame to stick to
28:02 - all sides of that window when it's
28:04 - expanded so we're going to use that
28:06 - sticky parameter again but instead of
28:08 - just horizontal with East and West uh we
28:11 - want it to also be vertical with North
28:13 - and South so that it grows on all sides
28:16 - so frame here we're going to set the
28:19 - sticky here and we're going to have this
28:22 - be north south east and west and now
28:25 - we're just about done here uh what we
28:27 - want want to do now is we want our frame
28:30 - to be able to expand as well so we have
28:32 - to configure those rows and columns just
28:35 - like we did with our root window but
28:37 - remember our frame has two rows of
28:39 - widgets and two columns uh we don't want
28:42 - all of these to expand evenly so for
28:45 - example it would look weird if our
28:47 - button expanded to be really big so our
28:51 - text entry and our list box are both in
28:54 - that uh first row uh so let's all ow
28:58 - those to expand uh only horizontally so
29:02 - I'll say frame do column
29:06 - configure and I'll set the First Column
29:11 - here with a weight equal to one so again
29:15 - our text entry is in that First Column
29:18 - uh our button is in the second column
29:20 - and our text list is in that First
29:22 - Column so the First Column is going to
29:23 - be able to expand and uh the second
29:26 - column is not so let me go ahead and run
29:29 - this now and if I resize this then we
29:32 - can see that this text input here is
29:36 - expanding to take up the additional
29:38 - space it's not sticking to the S yet our
29:40 - button is not expanding and our uh list
29:44 - box here is expanding horizontally for
29:47 - now so let me close that so first let's
29:50 - fix our list box so that it's uh growing
29:53 - vertically North and South as well so to
29:56 - do this I'll say a frame and we will do
30:01 - a row configure and that text list is in
30:07 - the second row which is index of one and
30:11 - now instead of just expanding East and
30:13 - West let's also do north and south here
30:17 - as well and for our entry here it was
30:20 - expanding to take up the space but it
30:23 - wasn't sticking to the sides so let's
30:26 - also set a sticky here
30:28 - and we only want this to grow East and
30:30 - West we don't want it to grow vertically
30:33 - so now if we run this then let's take a
30:35 - look at what we did here so we can see
30:38 - that when we expand now that our text
30:41 - list is growing north south east and
30:44 - west and our text input entry here is
30:48 - only growing east and west and our
30:50 - button is staying um there to the side
30:53 - so everything is growing just as we
30:56 - specified and I think that that looks uh
30:59 - a lot better than it did before so now
31:01 - let me go ahead and close this out okay
31:03 - so now we're going to take a look at one
31:05 - more thing uh before we finish up so
31:08 - just to show why using a frame is
31:11 - beneficial let's say that everything
31:13 - that we uh have currently is something
31:16 - that we would like replicated in
31:17 - different parts of our application or
31:20 - even in a new project since we added
31:22 - this to a frame it makes it easier to
31:25 - organize and reuse this set of widgets
31:28 - so for a contrived example let's just
31:31 - say that we wanted two different forms
31:33 - like this in our application that span
31:36 - two different columns in the main window
31:38 - so to do this let's make a copy and uh
31:42 - paste what we had before so what I'm
31:44 - going to do is I'm going to copy this
31:46 - Frame and all of the widgets that we
31:48 - have included here and I will paste
31:51 - these uh down below here and now this
31:55 - Frame instead of uh just calling frame
31:58 - I'm going to call this Frame two so I'm
32:01 - going to uh grab all of these here and I
32:06 - will rename these to frame
32:10 - two and I'm just going to leave these
32:13 - the same uh I should probably change
32:15 - those but really I just want to uh show
32:18 - the layout and kind of ignore the
32:20 - functionality for now so now we have
32:22 - this Frame two and we're creating a new
32:25 - entry and adding that to frame two a new
32:27 - butt button adding that to frame two and
32:29 - a new text list and adding that to frame
32:31 - two as well so now that we've added this
32:34 - second frame since this frame has its
32:37 - own rows and columns we don't need to
32:39 - change anything about the layout of the
32:41 - widgets within the frame if we didn't
32:44 - have this in a frame and we wanted to
32:46 - add more widgets then we would have to
32:48 - come up here and say you know okay well
32:51 - this entry is in row one column one uh
32:54 - so I want this one to be in uh Row one
32:57 - one column two and we'd have to do all
32:59 - this math that we just don't have to do
33:02 - uh now that we have this in a separate
33:04 - frame the only thing that we should need
33:07 - to do is uh specify where we want this
33:11 - new frame to be added so our old frame
33:14 - is up here on uh row 0o column zero and
33:18 - our new frame I'll just have this be in
33:20 - the second column so index of one now if
33:24 - I run this how we have it now then we
33:25 - can see that now we have uh two
33:28 - identical forms uh one in the first
33:30 - column one in the second column now if I
33:33 - resize this then we can see that these
33:36 - don't take up the same width when we
33:38 - resize now this is because of how we set
33:41 - up the weights earlier so let's change
33:43 - these to see exactly how these weights
33:46 - work so let me go back up here to the
33:48 - top where we set the uh weights on our
33:52 - root window so the reason our first
33:55 - column expands is because we set the
33:58 - column with a weight of one uh the
34:00 - second column doesn't have a weight by
34:03 - default so it only takes up the space
34:05 - that it needs and nothing more but if we
34:08 - wanted this to take up the same space as
34:10 - our other column then we could set this
34:13 - to one also uh by saying root column
34:18 - configure and we can set that column
34:21 - with a weight as one as well so now if I
34:24 - save this and run it then the should
34:27 - take up
34:28 - equal sizes on the left and the right
34:31 - since both of these columns are weighted
34:34 - the same so let me close this out so
34:37 - these weights are proportional to the
34:39 - weights of the other columns so for
34:41 - example let's say uh that the column on
34:43 - the left is meant to be more of a
34:45 - sidebar uh but we wanted to expand a
34:47 - little bit but not at the same rate as
34:49 - the column on the right uh so for that I
34:52 - could set the weight of the right column
34:54 - to be uh let's set it to three
34:58 - and then it would take up 75% of that
35:02 - additional space uh than the column on
35:04 - the left so if I run this then we can
35:07 - see that now the column on the right has
35:10 - a much larger weight now you might
35:12 - notice that this doesn't look like it
35:14 - takes up 75% of the window and that's
35:17 - because it's taking up 75% of the
35:20 - additional space in this example uh so
35:23 - their original sizes don't factor into
35:25 - that size uh but this is a nice way to
35:27 - get our Windows to expand relative to
35:30 - the importance of what we're trying to
35:31 - highlight most within our uh gooey
35:34 - application so let me close that down
35:38 - now another extremely common thing that
35:39 - we might want to do for the layout uh is
35:42 - adding padding to our elements and this
35:44 - is super simple uh let's add padding to
35:47 - both of our frames to give it a bit more
35:48 - space between the edges of the main
35:50 - window so to do this on frame one here
35:54 - where we're adding it to our grid I'm
35:56 - simply going to add in a pad x equal to
36:00 - 5 and I'll add a pad y equal to 5 as
36:04 - well and we will put this onto our frame
36:08 - two also so let me go ahead and paste
36:11 - that in and now if I run this then we
36:13 - can see that we have a little bit of
36:14 - padding here between our main windows so
36:18 - it kind of gives a little bit of a
36:20 - visual separation okay and really quick
36:23 - before we finish this tutorial I want to
36:25 - show you a couple more tricks for
36:26 - helping our application look better
36:29 - among different platforms so one of
36:31 - those tips is to use themed widgets uh
36:34 - when they're available these are updated
36:36 - widgets that give a more native look
36:38 - across different platforms but not every
36:40 - widget has a themed version so for
36:43 - example in the code that we have here um
36:46 - the only widget that we're using that
36:48 - doesn't have a themed counterpart is the
36:51 - list box widget but let's use themed
36:54 - widgets on one of our frames to see if
36:57 - we can see a visual difference so to do
37:00 - this I'm going to import ttk which
37:03 - stands for themed tenter and this is
37:06 - also built into python so here at the
37:09 - top I'm going to say from tkinter import
37:13 - ttk and now let's use this on our first
37:16 - frame uh where it's applicable so
37:20 - instead of TK here for our frame I'm
37:23 - going to say ttk DF frame so hardly any
37:27 - change are made all we're doing is using
37:29 - theme keyer instead of the built-in one
37:33 - so I'm going to use this for our frame
37:35 - our entry our entry Button as well and
37:39 - remember I said that this list box does
37:41 - not have a themed version so I'm only
37:44 - going to change those three so if I save
37:47 - that and run it then we can see that
37:49 - this doesn't look much different but
37:51 - these buttons should now look and behave
37:53 - more natively to the environment that
37:55 - we're on so we can see I'm on a Mac so
37:59 - we can see that the button here on our
38:01 - left frame is a bit different than the
38:04 - button here on the right and so as our
38:06 - text input it looks a little different
38:07 - as well I think they might even have
38:09 - different interactions for um how they
38:12 - look when you click on them and things
38:14 - like that we can see that this one it's
38:15 - a little bit more obvious than what it
38:17 - is over here so what theme tenter is
38:20 - trying to do here is just make this look
38:21 - a bit more native to the Mac that I'm
38:23 - currently running on uh so that's just a
38:25 - quick way to make our ations look a bit
38:28 - better across different platforms okay
38:31 - so what we've learned here so far should
38:32 - be enough of the basics to get you up
38:34 - and running with building your own guey
38:37 - applications but there's still a lot
38:39 - that we haven't covered so in future
38:40 - tutorials we'll take a look at more
38:42 - topics that we haven't touched here so
38:45 - we'll learn how to create these using
38:47 - classes how to have multiple windows
38:49 - adding images saving and opening files
38:53 - adding animations um showing or removing
38:56 - widgets based on want to condition and
38:58 - things like that there's a lot more that
38:59 - we can cover and like I mentioned at the
39:01 - beginning of the video I'll also show
39:03 - you how I built some of uh my personal
39:05 - guey apps that um I use on a regular
39:08 - basis like the uh credit card
39:10 - transaction one that I showed um also I
39:13 - built another one for game nights that
39:15 - simulates rolling Dice and tracks the
39:17 - roles I also have a guey application
39:20 - that I wrote for my father that reads in
39:23 - Excel files and uses Google Maps API to
39:26 - analyze specific coordinates from
39:29 - different columns and then Reaves those
39:31 - Excel files with that analyzed data uh
39:33 - so things like that are really good for
39:36 - guey applications and you can pass those
39:38 - off to people um who might not
39:41 - necessarily know how to run python but
39:43 - will know how to run your guey
39:44 - application so be on the lookout for
39:46 - those videos in the future but these
39:49 - fundamentals that we learned here should
39:50 - be enough to get you started with your
39:52 - own applications and experimenting with
39:54 - different widgets and layouts in order
39:56 - to solve particular problems that you
39:58 - might have um also in the future I would
40:00 - like to take all of the tenter content
40:03 - and show how we can create these exact
40:06 - same applications using other goey
40:08 - Frameworks like pqt and Ki uh so be sure
40:12 - you're subscribe to keep up with those
40:14 - future releases but with that said I
40:16 - think that's going to do it for this
40:17 - video hopefully now you have a pretty
40:19 - good idea for how you can create some
40:21 - simple applications using tenter and how
40:23 - we can lay out our widgets and get them
40:26 - to interact with one another but if
40:28 - anyone has any questions about what we
40:29 - covered in this video then feel free to
40:31 - ask in the comment section below and
40:33 - I'll do my best to answer those and if
40:34 - you enjoy these tutorials and would like
40:36 - to support them then there are several
40:38 - ways you can do that the easiest way is
40:39 - to Simply like the video and give it a
40:41 - thumbs up also it's a huge help to share
40:43 - these videos with anyone who you think
40:44 - would find them useful and if you have
40:46 - the means you can contribute through
40:47 - patreon or YouTube and there are links
40:49 - to those pages in the description
40:51 - section below be sure to subscribe for
40:53 - future videos and thank you all for
40:54 - watching
40:57 - w