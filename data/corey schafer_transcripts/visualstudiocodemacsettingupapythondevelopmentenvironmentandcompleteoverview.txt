00:00 - hey there how's it going everybody in
00:01 - this video we're going to be learning
00:02 - how to install Visual Studio code and
00:04 - setup a Python development environment
00:06 - we're also going to go over the
00:07 - different features of this editor to see
00:08 - why so many people were switching over
00:10 - to this so we'll cover how to switch
00:12 - between python interpreters how to debug
00:14 - applications learn how git integration
00:16 - works look at unit testing capabilities
00:18 - and a few other things so I've had a ton
00:21 - of comments and requests to cover vs
00:23 - code and it just seems like so many
00:24 - people have switched over I don't know
00:26 - how many of you all listen to talk
00:28 - Python podcasts with Michael Kennedy but
00:30 - at the end of every show he always asks
00:32 - his guests which editor or IDE that they
00:34 - prefer to use and I feel like it used to
00:36 - be pretty mixed but now I hear vs code
00:38 - so often on there that I figured I had
00:41 - to take some time to try this out and
00:42 - I've got to say I'm really impressed
00:44 - with it so far I wouldn't doubt if you
00:46 - all see me using this from here on out
00:48 - in my videos so with that said let's go
00:50 - ahead and get started and see how to get
00:51 - this set up and I'll show you what I
00:53 - like so much about this now I did run
00:55 - into some differences between how this
00:57 - works on Mac and Windows so I decided to
00:59 - just make one video specifically for Mac
01:01 - and one specifically for Windows now in
01:04 - this video we're going to be covering
01:05 - how to use vs code on Mac but if you're
01:07 - using Windows then I'll be sure to leave
01:09 - a link to that video in the description
01:10 - section below so first of all let's
01:12 - install Visual Studio code so I've got
01:14 - their website pulled up here and my
01:16 - browser and that is that code Visual
01:19 - Studio com now Visual Studio code is
01:22 - different from Visual Studio which is a
01:24 - full IDE vs code is a lighter-weight
01:27 - editor that can be extended with plugins
01:29 - for whatever you need so be sure that
01:31 - you search for Visual Studio code and
01:33 - not just Visual Studio now I'll also
01:36 - have a link to this page in description
01:37 - section below to avoid any confusion
01:39 - there now vyas code is free so we don't
01:42 - need to buy anything we just need to
01:43 - download it and install it now for
01:45 - anyone who has watched my home brew
01:47 - tutorial then you can also download vs
01:49 - code through your terminal which with
01:51 - home brew cask if you find that easier
01:53 - but I'm going to download this from at
01:55 - their website so I'm just going to click
01:57 - download up here and now it's going to
01:58 - ask me to choose my operating system and
02:00 - I'm just going to choose the Mac and now
02:03 - it should download this here and this
02:07 - downloads into a zip file so I'm just
02:10 - going to unzip this
02:12 - then I can put this here in my
02:15 - applications so I'm going to happen open
02:16 - my applications in a new tab and I will
02:19 - just drop Visual Studio code into my
02:22 - applications there so now let's open
02:25 - that up so I will open up visual studio
02:28 - code here for the first time and it'll
02:31 - ask me if I'm sure I want to open it
02:32 - I'll say yes and now I will just go
02:35 - ahead and maximize this so at first when
02:38 - we first open this it opens up there
02:40 - getting started page here in your
02:41 - browser so I'm just going to ignore that
02:43 - but they do have a lot of nice
02:45 - information on there so let's open up
02:48 - the S code here now well enlarge this
02:51 - year so here we're greeted with their
02:53 - welcome screen and there's a lot of
02:55 - great information on here we can see
02:57 - that they have a printable keyboard
02:58 - cheat sheet here introductory videos
03:00 - tips and tricks how to can't change your
03:03 - color schemes and all kinds of stuff now
03:05 - we're going to cover a lot of this in
03:06 - the video so I'm not going to click on
03:08 - any of these right now so I'm just going
03:11 - to enlarge this a little bit so that we
03:13 - can see this a little bit easier and I'm
03:15 - also going to close this welcome page
03:16 - since we're going to go over this a lot
03:18 - of this stuff ourselves so we can see
03:20 - that this has a very simple design which
03:22 - is definitely nice once you get used to
03:24 - it because you don't have a lot of stuff
03:26 - in your way but when you're new it might
03:28 - be hard to remember your way around
03:30 - because we just mostly have icons
03:32 - instead of descriptions so this bar over
03:35 - here on the left is the activity bar and
03:37 - this is our main navigation for the
03:39 - editor so if you hover over any of these
03:41 - for any amount of time then it should
03:44 - pop up after a second or two with a
03:46 - short description so this says that it
03:48 - is the Explorer so if I click on this
03:51 - then this is where we can see our open
03:54 - directories and files now we don't have
03:56 - anything open right now but we have the
03:58 - option to open a project folder here now
04:01 - the second icon on the activity bar
04:03 - allows us to search through all of our
04:06 - files and so that's where we can do
04:09 - searches finds and replace within
04:11 - multiple files now the third icon here
04:14 - on the activity bar is our git
04:16 - integration and we'll take a look at
04:18 - this here in a bit and see how to push
04:20 - some code up the github but we are going
04:23 - to skip it for now
04:23 - now the next icon here
04:26 - the debugging icon now this is one very
04:28 - nice feature that vs code has over other
04:31 - simple editors I find the debugging
04:33 - pretty intuitive and easy within vs code
04:36 - and we'll take a look at that here in a
04:38 - bit as well when we debug some code okay
04:41 - so lastly the last icon on the activity
04:44 - bar is one that we're going to be using
04:46 - right now and this is for managing
04:48 - extensions and if we make this a little
04:50 - bit wider here then it should so show us
04:52 - some icons here okay so there those are
04:55 - okay so right off the bat it shows us
04:57 - some recommended extensions here at the
04:59 - top and then it shows us some popular
05:01 - extensions right below that now you
05:03 - might not have these recommended
05:05 - extensions if you do then they might not
05:07 - be the same ones so for example we can
05:09 - see that this is recommending Heroku CLI
05:12 - to me and that's because I have the
05:13 - Heroku CLI installed and if I actually
05:16 - click on one of these recommended
05:18 - extensions then at the top of the
05:20 - description here we can see that it says
05:22 - this extension is recommended because
05:24 - you have Heroku CLI installed so this
05:27 - will look in your system here and find a
05:30 - couple of other things that you already
05:31 - have installed and recommend plug-ins
05:34 - for you that they think you might like
05:35 - now it's kind of strange I would have
05:37 - thought that they would recommend that
05:38 - the sublime text plug-in here they
05:40 - usually do they did on my laptop but
05:43 - they're not here but usually it
05:45 - recommends this as well sublime text key
05:47 - mapping extension and what and it does
05:50 - say that this is recommended here so I'm
05:51 - not sure why it wasn't popping up in the
05:53 - recommended but what this does is they
05:56 - have a lot of different key mappings and
05:58 - Settings plug-ins for those where if you
06:02 - want to import your key mappings or
06:04 - settings from another program like
06:06 - sublime or maybe them or something like
06:09 - that then you could just install the
06:11 - plug-in and it'll do its best to match
06:13 - those settings to what you already have
06:15 - set there so I'm going to clear this out
06:18 - and now let's look at these popular
06:20 - extensions here now the extension that
06:23 - we're really after right now is the
06:24 - Python extension and this is the most
06:26 - popular extension on vs code by far so
06:29 - we can see here this is now sorted by
06:33 - popularity if I want to be sure that
06:35 - it's sorted by popularity then I could
06:37 - click up here
06:39 - and these three dots here and get this
06:41 - drop down and now we can see that we can
06:43 - sort these in some way so I can show the
06:46 - extensions by certain criteria so either
06:50 - recommended or popular so if I do show
06:53 - popular extensions then I can sort
06:55 - either by install count rating or name
06:58 - so right now it's sorted by rating and
07:01 - we can see that Python is here at the
07:02 - top with nearly 41 million installs and
07:05 - the next one below that doesn't even
07:07 - have half of that so this extension is
07:09 - definitely the most popular right now so
07:12 - we can see in the description here that
07:13 - it says that this extension adds support
07:15 - for linting debugging formatting unit
07:19 - testing and intellisense and
07:20 - intellisense is what shows us what
07:22 - attributes and methods we can use while
07:25 - we're typing and it also gives us
07:27 - information about those as well
07:28 - and we'll see that in action in just a
07:30 - bit so I'm going to install this python
07:33 - extension so I'll just click install
07:35 - here now this might take a second since
07:38 - this is a larger extension but it
07:40 - shouldn't take too long
07:41 - okay so that just now finished okay so
07:43 - now I'm going to open up some existing
07:45 - Python code that I have in a folder here
07:48 - on my desktop so let me open this up
07:52 - here and now I'm going to go to open
07:55 - folder and then I will go to my desktop
07:58 - here and open up this folder called my
08:01 - project and I have a script I file in
08:03 - here called script PI now if you don't
08:06 - have any Python code to work with right
08:07 - now then you can simply create a project
08:09 - for yourself and just add a dot py
08:12 - module in there to follow along now you
08:14 - do need to have a dot py extension so
08:16 - that it knows that it's a Python module
08:18 - and gives you some nice syntax
08:20 - highlighting so let me open up the
08:22 - script that I have here and I'm just
08:26 - going to close down a couple of these
08:28 - warnings here for now and we will look
08:30 - at those later let me make this just a
08:33 - little bit larger again so that we can
08:36 - be sure we can see everything here okay
08:38 - so here I've got a simple Python script
08:40 - so first I'm importing sis and I'm
08:43 - printing out sis top version and sis not
08:45 - executable now this will let me know
08:48 - what version of python i'm using and
08:49 - where it's located on my computer and
08:52 - I just have a simple function that
08:54 - creates a greeting and then I'm printing
08:56 - out a couple of greetings here at the
08:58 - bottom I just want some sample codes so
09:00 - that we can see what some of this syntax
09:03 - coloring looks like okay so first let's
09:06 - see how we can run at this Python code
09:07 - so by default our Python extension is
09:10 - going to use the first Python
09:12 - interpreter that it finds on our system
09:14 - path now if you don't have Python 3
09:16 - installed then this might be using
09:18 - Python 2 and if it is and I'll show you
09:21 - how to change that in just a bit
09:23 - but for now let's just try to run this
09:25 - so to do this we can just right click
09:27 - whoops we can just right-click anywhere
09:29 - here in our module and towards the
09:32 - bottom we'll see a couple of run lines
09:34 - here so run current test file run python
09:36 - interpreter in terminal run selection
09:39 - line and python terminal we want this
09:41 - one here run python file in terminal so
09:44 - i'm going to click on that and that
09:46 - should run the python file that we have
09:50 - here in our terminal now we're gonna
09:52 - look at how to use keyboard shortcuts to
09:54 - run a code here in just a bit so if you
09:56 - don't like right clicking to run your
09:57 - code then don't worry we'll see how to
09:59 - make it more simple in just a second but
10:01 - for now if we look at my output then it
10:04 - looks like i'm using python 3.7 and it
10:07 - prints out the location to where that
10:09 - python is located on my machine and then
10:12 - it prints out our - greetings here hello
10:14 - world and hello quarry now what if we
10:17 - wanted to change our Python interpreter
10:19 - for how this runs our code now there are
10:22 - a couple of different ways that we can
10:23 - do this so first if we look at the blue
10:26 - bar here at the bottom of the page then
10:29 - in the bottom left it shows us which
10:31 - Python interpreter it is currently using
10:34 - so we can see here it says python 3.7
10:36 - and if i click on that then we can
10:39 - change our interpreter so if we wanted
10:41 - to change to Python 2 we can see that
10:44 - this brings up a lot of options here
10:46 - because I have a few different versions
10:49 - of Python installed on my system here
10:51 - and also a couple of virtual
10:52 - environments here with Conda but if I
10:55 - wanted to do Python 2 then it's the one
10:57 - at the top here within user bin Python
11:00 - so I'm going to click on that and again
11:03 - I'm going to ignore the
11:05 - warnings there for now and we'll take a
11:07 - look at those in a bit and I will just
11:09 - clear my terminal down here and now I'm
11:12 - going to right-click and run Python file
11:14 - in terminal again now we can see this is
11:16 - using Python 2 7 and also the location
11:20 - of that Python executable changed as
11:23 - well now if this text is still a little
11:25 - bit too small here let me make it just a
11:27 - little bit larger I'm gonna change show
11:29 - you how to change the settings here in
11:30 - just a bit to where I can get this text
11:32 - looking exactly how I like it ok so that
11:35 - is using Python at - 7 but I want to go
11:38 - back to using Python 3 so again I'm just
11:41 - going to click down here in the bottom
11:42 - left and go and find a python @ 3 7 that
11:47 - I want to use so I'll click on that and
11:49 - now we are using python 3 7 again now if
11:52 - you don't have Python 3 installed then I
11:54 - definitely recommend installing it if
11:56 - you'd like to see how to install that on
11:58 - both Mac and Windows then I do have a
12:00 - separate video where I show how to do
12:01 - that for both operating systems so I'll
12:04 - be sure to put a link to that video in
12:05 - the description section below if anyone
12:07 - in needs to see how to install that and
12:09 - in that installation video I show how
12:11 - you can and get it in your path and
12:12 - everything like that so once it's in
12:14 - your path then vs code should
12:16 - automatically pick that up and allow you
12:18 - to use that by clicking down here in the
12:21 - bottom left and it should just
12:22 - automatically show up there now when I
12:24 - changed my interpreter you may or may
12:27 - not have noticed that vs code created a
12:30 - folder inside of my project directory
12:32 - here called dot vs code and that
12:35 - directory within it has a settings file
12:38 - settings dot JSON so these are settings
12:41 - specific to our current workspace or
12:44 - this current project folder so I'm going
12:47 - to open that up over here and we can see
12:49 - that right now it's setting that Python
12:51 - interpreter that we just set but what if
12:53 - we wanted to use a certain Python
12:55 - interpreter by default for every single
12:58 - project so to do that we're going to
13:00 - need to set it in our global user
13:02 - settings and while we're talking about
13:04 - our user settings let's also make some
13:06 - other global changes as well so let's
13:09 - look at how to change our color theme of
13:11 - our file icons and things like that so
13:14 - we can kind of personalize this editor a
13:16 - bit so first let's change our color
13:19 - now there are several built-in color
13:21 - themes that we can use so to change your
13:24 - color theme let's open up our command
13:26 - palette so this is the first time that
13:28 - we've opened the command palette but it
13:29 - is extremely useful you can basically
13:31 - access everything within vs code through
13:34 - the command palette so we can access
13:36 - that by pressing command shift P and
13:39 - it's going to open up the command
13:41 - palette here to where we can type in a
13:43 - command
13:44 - so now if we wanted to change some color
13:46 - themes then I'll just type in color and
13:49 - we can see that it starts Auto filling
13:52 - some results here so we can see that
13:55 - color theme is right down here
13:57 - so I'm going to open that up and now it
14:00 - gives us our options here and if I just
14:02 - hit up and down on the arrow keys here
14:04 - then this is automatically going to show
14:06 - us what this looks like as I'm going up
14:09 - and down here on the keyboard so that's
14:11 - a nice feature now if I have this
14:14 - maximized a lot so that you guys can
14:16 - read but usually this is a smaller
14:19 - window here to where we can actually see
14:21 - the syntax in the background and make
14:23 - our choice based on how that looks with
14:27 - our syntax highlighting now they do have
14:29 - some nice themes here by default but I
14:32 - actually want to go down here at the
14:34 - bottom to install additional color
14:36 - themes now if any of you have followed
14:39 - along with my videos before then you
14:42 - probably know that within sublime text
14:44 - my other editor that I use I really like
14:46 - a theme called pre-dawn and there
14:48 - actually is a port of this over on vs
14:52 - code as well so if we look at this the
14:56 - one that looks the same as the one in
14:59 - sublime is this pre-dawn theme kit this
15:02 - pre-dawn Twilight doesn't quite look the
15:04 - same so there's pre-dawn theme kit here
15:06 - if I install that it's also the one that
15:09 - has the most installs so I'm just going
15:12 - to choose the basic pre-dawn there and
15:14 - now if I go back to my script then we
15:17 - can see that these syntax highlighting
15:19 - changes to something that probably looks
15:21 - more familiar if you've seen my videos
15:23 - before and there's plenty of other
15:25 - popular color schemes out there so
15:26 - definitely look around and see what you
15:28 - like
15:28 - so as programmers you know we're in our
15:31 - editors a lot so you should
15:32 - definitely have something that is
15:33 - pleasant to your specific taste now we
15:36 - can also change how the file icons look
15:38 - over here in the sidebar and to do that
15:42 - we're going to install something called
15:45 - file icons so to install file icons we
15:48 - can open back up the command pilot by
15:50 - pressing command shift P and I will type
15:52 - in file icons choose a file icon theme
15:55 - now again we have a couple of defaults
15:58 - here but I am going to click on install
16:01 - additional file icon themes here and
16:03 - again if you ever want to sort these you
16:05 - can just click on this drop-down right
16:07 - here and we can sort by Install count
16:09 - rating and name so I'm going to sort by
16:12 - install count and it looks like it
16:14 - already was sorted by install count now
16:16 - the one that I like here is called a why
16:20 - you so I'm going to install that and
16:23 - that's going to be the one that I use so
16:26 - once we get that then I'm just going to
16:29 - choose that now that also changed our
16:32 - color theme so I'm just going to change
16:34 - our color theme back to pre Don really
16:38 - quick so I'll click on pre-dawn there so
16:40 - now I'm going to close down those two
16:42 - items there go back to my file explorer
16:45 - and now we can see that this still looks
16:47 - the same but now I'm going to open up
16:49 - that command palette again and we can
16:51 - see that it has my recently used
16:52 - commands here for color theme and file
16:54 - icon theme now I'm going to click on
16:56 - that file icon theme and change the file
16:58 - icon theme to that a Y you and I like
17:02 - that one we can see that it changed the
17:03 - icons over here and gives us a different
17:06 - icon here for open folders and stuff
17:09 - like that ok so I think that this looks
17:11 - pretty good so right now when we made
17:13 - those changes we're actually implicitly
17:15 - changing our user settings by changing
17:18 - our color themes and all of that but
17:20 - there are tons of other settings that we
17:21 - can change that we haven't seen yet so
17:24 - if we want to see all of the settings
17:25 - that we can change then we can open our
17:27 - settings by going down to the bottom
17:29 - left of our activity bar and clicking on
17:32 - this gear icon so I'm going to click on
17:35 - this gear icon and the other settings
17:37 - here there are command pilot or command
17:41 - palette settings extensions keyboard
17:43 - shortcuts color theme so we can also
17:45 - change those
17:46 - from here but I'm gonna click here on
17:48 - settings and open these and here we have
17:51 - our user settings now they used to have
17:53 - this set up to where it opened up the
17:55 - default settings and your user settings
17:57 - side by side in JSON format and I kind
17:59 - of liked that a bit better but now they
18:02 - have it opened up in this UI version
18:03 - instead so you can change your user
18:06 - settings using this user interface but
18:09 - honestly I hardly ever use this maybe
18:11 - it's because I'm coming from sublime
18:13 - text but I'd like to use the JSON
18:15 - settings a lot more than this and I feel
18:18 - like it just gives you a better overview
18:19 - of what you're changing but we can still
18:22 - get the JSON version of our user
18:23 - settings by clicking on this little
18:26 - bracket symbol here in the top right so
18:28 - I'm going to click on that and now it's
18:30 - going to open our user settings in JSON
18:32 - format so since these are our user
18:34 - settings this is only going to show us
18:36 - the settings that we have changed from
18:38 - the default so I've changed the zoom
18:41 - level here by zooming in and making the
18:43 - text larger now we have also changed the
18:47 - color theme here to pre don and the icon
18:49 - theme to a Y you and I have some other
18:51 - preferred settings that I'm gonna show
18:53 - in just a bit now I do wish that they
18:55 - still showed the default settings side
18:58 - by side by default because I feel like
19:00 - someone who's new to v/s code might not
19:03 - know what settings they can change or
19:05 - how to see the default settings so I'm
19:07 - gonna change my settings so that it does
19:09 - show my user settings and default
19:11 - settings side by side so to do this I'm
19:14 - first going to open up the default
19:16 - settings and I can do that using the
19:18 - command palette so I'm gonna press
19:20 - command shift P and now I'm going to
19:22 - type in default settings and we can see
19:26 - it says open default settings in JSON so
19:29 - I'm gonna click on that so now I'm going
19:31 - to change a few settings here that will
19:33 - show me the default settings while I'm
19:34 - modifying my user settings now you don't
19:37 - have to do what I'm doing here but I
19:39 - personally find it so much easier to
19:41 - modify my settings this way so I'm gonna
19:43 - search for work bench settings so up
19:46 - here in the top I'm going to press
19:49 - command F to do a search here and I'm
19:51 - going to search for work bench -
19:55 - settings so now we can see our work
19:57 - bench
19:58 - settings here so we
19:59 - have our editor and things like that so
20:02 - that is going to be the first one that I
20:04 - change so we can see that currently the
20:07 - workbench setting is set up to use the
20:09 - UI editor by default I'm going to change
20:12 - that to use JSON by default so I'm going
20:15 - to copy that and paste that into my user
20:19 - settings and I'm going to change that to
20:21 - JSON now a quick tip here and when
20:24 - you're within a settings if you click
20:25 - this little pencil icon over here to
20:27 - edit then it'll show you a drop-down of
20:30 - all the valid choices and I think that's
20:31 - extremely useful so we can choose UI
20:34 - there and this is telling me that I
20:36 - would have to save this first in order
20:37 - to do that so I could either choose UI
20:40 - or I could choose JSON okay so a couple
20:43 - of other settings that I wanted to
20:45 - change here down here this workbench
20:48 - settings not open default settings
20:51 - I want my default settings to open so
20:54 - that I can see all of those so I'm going
20:57 - to change that from false to true so I
21:02 - will save and try that again so now that
21:04 - is true and lastly I'm going to come
21:07 - down here and this workbench settings
21:10 - not use split JSON this is what's going
21:13 - to split my default settings from my
21:17 - user settings and this used to be the
21:21 - default with vs code but they changed it
21:23 - along the way so now that I've got that
21:25 - set to true I'm going to close down both
21:27 - of my settings tabs here and now I'm
21:31 - going to reopen those so I'm gonna click
21:33 - down here on the gear icon click on
21:35 - settings and now let me close my sidebar
21:38 - here so that we can see this a little
21:40 - bit better now we can see that it opens
21:42 - up my settings in JSON mode and also it
21:44 - shows me the default settings over here
21:46 - on the left with a comment of what each
21:49 - of these do and my user settings over
21:52 - here on the right so with these comments
21:54 - I now know exactly what each setting
21:57 - change actually means instead of just
21:59 - guessing over here and these are also
22:02 - split up into different categories so if
22:05 - I collapse commonly-used
22:06 - then we can see that if I want to change
22:08 - editor settings then I can look in here
22:11 - if I want to
22:13 - change Python settings I can scroll all
22:16 - the way down here to Python and there's
22:18 - a bunch of Python specific settings here
22:20 - so I think this is just much easier to
22:22 - see what is available to you now we
22:24 - started looking at these settings
22:26 - because I wanted to change my Python
22:27 - path by default to where it uses a
22:30 - certain version of Python for every file
22:32 - by default so I want to change that
22:35 - Python path so to do that I can come up
22:38 - here into search settings and now if I
22:40 - search for Python dot P then we can see
22:44 - we get a few matches here but one of
22:46 - these is Python dot path on a path and
22:50 - right now it's set to use just this
22:52 - basic Python command now instead of
22:54 - copying and pasting this over into my
22:56 - user settings when we have it set up
22:58 - this way we can just click on this
23:00 - little pencil icon over here to the left
23:02 - and if I do that then I can go to copy
23:05 - to settings and it automatically puts
23:06 - that over here in my user settings so
23:09 - now I want to put the full path to the
23:12 - version of Python that I want to use by
23:13 - default so I have my integrated terminal
23:16 - open down here at the bottom I want to
23:19 - get my path for python at 3 so to do
23:22 - that I'm just going to type in which
23:24 - python 3 and we can see that that prints
23:27 - out my path to Python 3 yours might be
23:29 - different than this so I'm going to copy
23:32 - that and I'm gonna paste that in here to
23:35 - my Python path so that it uses that for
23:38 - every file that we open so now anytime
23:40 - we're working with a Python file it
23:42 - should use that version of Python by
23:44 - default without us needing to change any
23:46 - Python interpreters now while we're in
23:49 - our settings you can also make other
23:51 - changes to your editor that you'd like
23:52 - to make so I'm going to copy and paste a
23:54 - few settings here into mine now you
23:57 - don't have to do this again they're just
23:58 - my personal preferences but let me grab
24:01 - these and I'll explain what some of
24:03 - these do so I'm going to copy these here
24:07 - and I will paste these in to my settings
24:11 - so within my user settings here I'm just
24:14 - going to paste these in below and save
24:18 - that so now ok the text is a little bit
24:21 - large here let me close down some of
24:23 - this stuff so that we can see a little
24:25 - bit better now the text is
24:27 - definitely too large here because I have
24:29 - this set on a zoom level of four so let
24:33 - me zoom out just a little bit and now so
24:36 - the zoom level will allow us to see
24:38 - things like the sidebar a little bit
24:40 - better but now our text is still a
24:42 - little bit too large so let me change
24:44 - this to a size of 20 actually let me do
24:49 - an 18 and I know that looks larger than
24:51 - an 18 font size but you have to remember
24:54 - we're also zoomed in to the editor so
24:57 - that's why it looks that large okay so I
24:59 - think an 18 font size with a zoom level
25:01 - of 3 allows us to see this text pretty
25:03 - well and also allows us to see the
25:05 - sidebar over here pretty well so I'm
25:07 - going to leave it like that now these
25:09 - other changes here I'm just also
25:11 - changing the font weight I'm changing
25:14 - the font family to be source code pro I
25:18 - like the source code pro from google
25:20 - fonts you can download that I'll leave a
25:22 - link to that in the description section
25:24 - below as well and we can also change the
25:26 - font size and the font family of our
25:28 - debug console and also the font size of
25:31 - our integrated terminal so that is what
25:33 - those setting changes are doing it there
25:36 - that I just pasted in so now I'm going
25:38 - to close down these settings and go back
25:40 - here to my script dot pie
25:42 - so now the s code should be using that
25:44 - version of Python that we set in our
25:46 - settings by default unless we change our
25:49 - interpreter specifically for our project
25:51 - now why would you want to change your
25:53 - specifically your interpreter
25:55 - specifically for one project well the
25:57 - most common reason is because it's
25:59 - usually a good idea to create a virtual
26:01 - environment for your projects so let's
26:04 - see how to create a virtual environment
26:05 - and then we'll set that as our
26:07 - interpreter for this specific project so
26:10 - I'll create one for the current project
26:12 - that we currently have open so to do
26:15 - this I'm going to open up my integrated
26:17 - terminal I think that's the easiest way
26:19 - to create these virtual environments so
26:20 - I'm going to open that up you can either
26:22 - drag here from the bottom or you can
26:24 - press control tilde and that'll open up
26:27 - the integrated terminal for you so I'm
26:29 - going to clear the terminal there and
26:31 - when you open up your integrated
26:33 - terminal it should already be navigated
26:35 - to our current project directory and
26:37 - that's where I'm going to create a
26:39 - virtual environment if you want to check
26:40 - your
26:41 - exact directory then you could always
26:42 - type in PWD and it will show you the
26:45 - directory that you're in so we can see
26:47 - that I am in that project folder on my
26:50 - desktop so I'm going to clear that
26:52 - output there so like I said I'm already
26:54 - within my project folder so now I'm
26:56 - going to create a new virtual
26:57 - environment using the VNV module from
26:59 - the standard library now if you don't
27:01 - know how to create virtual environments
27:02 - using V&V then I do have a separate
27:05 - video that goes into more detail about
27:06 - how to do that so I'll be sure to leave
27:08 - a link to that video in the description
27:10 - section below as well if anyone is
27:12 - interested but basically to do this we
27:15 - can simply say Python 3 or Python if you
27:18 - have it set up that way sometimes we
27:20 - have to use Python 3 so python 3 - m ve
27:24 - + V which is the module we're going to
27:26 - run and now the name of our virtual
27:28 - environment I'm also just going to call
27:30 - my virtual environment the env
27:32 - so I'm going to run that and that
27:35 - creates a virtual environment within our
27:37 - project folder now to use that for our
27:40 - project we just need to change the
27:42 - interpreter like we did earlier so I can
27:44 - click down here in the bottom left and
27:47 - when I do that if I look down here at
27:50 - the very bottom we can see that we have
27:52 - a Python 3 7 version and then this ve
27:55 - and V is within quotations here and we
27:59 - can see the path to this is in the
28:01 - current directory /v E and V so that is
28:05 - the virtual environment that we just
28:06 - created so I'm going to choose that as
28:08 - our Python interpreter for this specific
28:11 - project and again if we open up those vs
28:14 - code settings then that was set right
28:17 - there our Python path for this specific
28:19 - project uses this virtual environment
28:21 - forward slash bin bin forward slash
28:24 - Python so now I can close those so vs
28:27 - code automatically picked up that
28:28 - virtual environment because it picks up
28:31 - virtual environments within at the base
28:32 - of our project like we created here but
28:35 - it'll also pick up things like Khandava
28:38 - environments as well like we saw before
28:40 - now if you're using a virtual
28:42 - environment that's located elsewhere on
28:44 - your machine then to do that you can
28:47 - just you know open up the settings dot
28:49 - JSON file that we saw earlier and drop
28:52 - in the path into that settings dot JSON
28:55 - file to whatever virtual environment you
28:57 - want to use now you might keep getting
28:59 - these linter Python not installed down
29:01 - here and I just keep exiting these it's
29:04 - because it wants us to install a linter
29:06 - but the reason I keep exiting this is
29:08 - because we're gonna look at this in just
29:09 - a bit but I'm going to keep exiting that
29:11 - for now now when we have a virtual
29:14 - environment activated it will actually
29:16 - activate that virtual environment in all
29:18 - new terminal sessions that we open as
29:20 - well which is a really nice feature so
29:22 - let me delete the current terminal that
29:25 - I have open right now by selecting that
29:27 - trashcan and now I'm going to reopen a
29:29 - new one so I can just press control
29:32 - tilde like we did before and when we did
29:34 - that we can see that it automatically
29:36 - sourced and activated that environment
29:39 - and that V E and V environment is
29:41 - activated we can see it here within
29:43 - these brackets so now if we wanted to
29:45 - install some packages in this virtual
29:47 - environment then we should just be able
29:49 - to do this with a pip command so we
29:51 - don't even need to activate that I can
29:53 - just say pip install requests and once
29:56 - that's installed we should be able to
29:59 - just import that into our scripts with
30:01 - no problem so underneath this here I'm
30:04 - going to import requests so I'll import
30:07 - that and let me clear my terminal here
30:11 - so that we don't have so much text in
30:12 - the way I'll make this a little smaller
30:13 - as well so I'm gonna make sure that
30:15 - request is working by coming down here
30:17 - towards the bottom of this script and
30:19 - I'm gonna remove these current print
30:21 - statements with those greetings and
30:22 - instead I'm gonna replace those with a
30:25 - request so I can say R is equal to
30:28 - requests now as I'm typing here
30:31 - let's also pay attention to the
30:33 - intellisense that's built into vs code
30:35 - and see how this shows us the attributes
30:37 - and methods that we can use for
30:39 - different objects so I can choose
30:41 - requests here and now whenever I put in
30:44 - request dot it should recommend
30:46 - different things to us here so if I
30:49 - scroll down we can see that these
30:51 - methods are these little boxes here so
30:54 - we have git head options post things
30:57 - like that and we have all of this
30:59 - different documentation here as well so
31:01 - let's say I hovered over if I do request
31:05 - that git we can see that we also have
31:08 - the
31:08 - little information box over here so if I
31:11 - click on that then it'll show us over
31:14 - here what this expects so it expects a
31:17 - URL and also some of these parameters
31:19 - and a description of what this method
31:21 - does so that's a nice neat little trick
31:25 - there also if I click on that then I can
31:29 - right click on that method and we can
31:31 - see that we have a couple of options
31:32 - here we have go to definition we have
31:35 - peek definition so let me go to go to
31:37 - definition so what this did is it
31:40 - actually opened up where that method is
31:43 - defined within the request library so
31:47 - we're in our Python site packages here
31:49 - actually within that request code and we
31:52 - can actually see that get method or
31:54 - written out here now if we didn't want
31:56 - to totally open up that file then I can
31:59 - also right click that and go to peak
32:01 - definition and that's just gonna let us
32:03 - peek at that definition of where that
32:04 - function is defined so if I click that X
32:07 - over there then we go right back to our
32:09 - file so I think that's extremely useful
32:12 - the intellisense here is really smart
32:14 - and it really knows how to show us
32:15 - exactly what we're looking for so now
32:18 - let me actually request a URL here so
32:22 - I'm gonna go to let's see HTTP I'll just
32:25 - go to my personal website at Quarry MS
32:27 - com so over up here at the top I'm going
32:31 - to I'm just going to comment out the
32:33 - cyst on version that we're using I'm
32:35 - gonna you keep the sis not executable
32:38 - there so that I'm sure we're using our
32:39 - virtual environment but to test this I'm
32:43 - going to just do a print and I'm gonna
32:45 - print out our dot status code so the
32:49 - status code will just be the status code
32:51 - that we get back from that request so
32:53 - I'm going to save that and I'm going to
32:55 - run it so I'll right click run Python
32:57 - file in terminal and whenever we run
33:00 - that we can see that it did use that
33:03 - virtual environment and we got a status
33:04 - code of 200 ok so now that we've seen
33:07 - how to use these virtual environments
33:08 - now let's see how we can auto format our
33:10 - Python code so right now we don't have a
33:13 - formatter installed so we have seen
33:15 - those pop ups those pop-up notifications
33:17 - saying that we don't have formatters
33:19 - installed so I'm actually going to
33:21 - listen to
33:22 - pop up this time and actually use a
33:24 - formatter so to try to try to format our
33:27 - code manually we can use a keyboard
33:30 - shortcut so to do this
33:32 - it is shift option F so or shift alt F
33:36 - so I'm gonna use shift option F to try
33:39 - to format the code and now it's saying
33:41 - hey you don't have a formatter installed
33:44 - do you want to use auto pepp 8so auto
33:47 - Pepe is very popular and it's what they
33:49 - use by default I've actually heard some
33:51 - good things about black here and it also
33:53 - recommends black so I'm actually gonna
33:55 - click on that but it's just personal
33:58 - preference if you want to use auto Pepe
33:59 - then you can do that I'm going to
34:01 - install black and use that I actually
34:03 - don't even really know the differences
34:05 - between Auto Pepe and black but I did
34:07 - see a blog post on Kenneth writes his
34:10 - blog and he said that he uses black so I
34:13 - kind of want to give it a shot and see
34:14 - if I notice any differences okay so with
34:17 - that formatter installed we can go back
34:20 - up here to our code and now if I press
34:22 - shift option F then it will auto format
34:25 - that code for us now it might not have
34:28 - looked like it changed all that much
34:29 - because our code was already formatted
34:32 - kind of properly but let me just mess
34:34 - this up a bit so let's say that I just
34:36 - have really badly written code here and
34:39 - I didn't put any spaces between anything
34:41 - so I'm going to format this I'm gonna
34:44 - press shift option F and when I auto
34:48 - format that we can see that it now puts
34:50 - all those spaces in place where they
34:51 - should be and makes our clone our code a
34:54 - lot cleaner now sometimes when we change
34:56 - settings in our project sometimes it
34:59 - might actually only make those changes
35:01 - in our workplace settings and not in our
35:04 - actual global user settings so I'm going
35:07 - to open up the settings here real quick
35:09 - real quick and check this so within my
35:12 - workspace settings we can see that it
35:15 - changed our Python formatting provider
35:18 - to use black I don't think it put that
35:21 - in my user settings so let me check if
35:23 - it did it doesn't look like it did so
35:25 - I'm going to add that in there as well
35:28 - and if you ever want to see this a
35:30 - little bit better you can always close
35:32 - your sidebar there to see a little bit
35:34 - better
35:35 - while I'm in here my settings I'm also
35:37 - going to change my settings so that my
35:39 - code automatically formats any time I
35:42 - save a file so I could search for the
35:44 - settings that I need to change but let
35:47 - me show you a nice tip that I use a lot
35:49 - so if we start typing and press control
35:53 - space then it'll actually show us our
35:55 - options while we type so right
35:58 - underneath where I set my formatting
36:01 - provider there I'm also going to let's
36:04 - see if I press control space then we
36:07 - have all of our settings here so now I'm
36:10 - just going to type in format and we can
36:14 - see here that this fills in editor not
36:17 - format unsaved so that's another way
36:19 - that you can discover settings by doing
36:22 - that so right now it's set the false I
36:24 - want to set that equal to true so that
36:26 - our code is automatically formatted any
36:28 - time we save a file okay so now I'm just
36:30 - going to close down those settings now
36:33 - the auto formatting in vs code really is
36:36 - great it has auto auto formatting for
36:38 - JSON and other languages as well and
36:41 - those are all things that require
36:43 - additional packages with editors like
36:44 - sublime text and those can also be you
36:47 - know sometimes hard to get set up
36:48 - properly in those other editors so it's
36:51 - nice that this stuff just works so
36:53 - easily within vs code and I don't think
36:55 - that this is part of the formatter but
36:57 - we can also use vs code to sort our
36:59 - imports too so first let me add a couple
37:02 - of other imports up here so we can see
37:04 - what this looks like so I'm going to
37:06 - also import OS and I'm also going to
37:08 - import math now if I open up my command
37:13 - palette here then I'm going to search
37:16 - for sort imports and we can see it says
37:19 - Python refactor so work imports I'm
37:21 - going to click on that then we can see
37:24 - that it sorted those imports now I think
37:26 - that it separated out requests here
37:28 - since that's a third party package so it
37:31 - probably has all the third party
37:32 - packages and the standard library
37:34 - modules split up like that and if you
37:36 - have any from imports then it would put
37:40 - those closer to the bottom just because
37:42 - it looks better so for example if I was
37:44 - to come up here and say you know from OS
37:47 - import well
37:49 - import rename then I did a sort of
37:55 - imports again
37:56 - so sort imports then we can see that it
37:59 - moves that from import there to the
38:01 - bottom okay so now that we've done code
38:03 - formatting now let's also enable linting
38:06 - so we've been getting these linting
38:07 - warnings here this whole time so now
38:10 - we're actually going to use this so
38:11 - linting will look at our code and tell
38:15 - us if it thinks something is off and
38:17 - it's nice because you can you know this
38:20 - can keep you from making mistakes that
38:21 - you might not notice on your own so we
38:24 - could install this from the command
38:26 - palette I could install it here but if
38:28 - that pop-up doesn't pop up for you then
38:31 - you can also use the command palette so
38:33 - if I open up the command palette and
38:34 - type in linting then I'm just going to
38:37 - click here on run linting and when I do
38:40 - that that will trigger that pop-up for
38:43 - you so this might tell you that you
38:45 - don't have a linter of pilant installed
38:48 - so it uses pilot by default and I
38:51 - actually like pilot a lot so I'm going
38:52 - to keep that one and so if I want to
38:55 - install that we can just click install
38:57 - and it's going to run through that here
38:59 - within our terminal and now I'm going to
39:03 - put something in here that is going to
39:06 - trigger a linting error and a warning so
39:09 - let me comment out here or let me
39:12 - actually uncomment it where I'm printing
39:14 - out this system and instead let me
39:17 - accidentally use a print statement like
39:20 - I'm using Python 2 so if I save that
39:24 - then you can see that we get an
39:26 - underline here and if I hover over that
39:28 - then we can see that it says missing
39:31 - parentheses oops
39:32 - missing parentheses and call to print
39:35 - did you mean and then it has this long
39:37 - thing here now if we want to see that
39:39 - within our terminal we can click on this
39:41 - little problems section here and that
39:44 - way we can see that message there in the
39:46 - problem section as well so it says did
39:48 - you mean a print sis top version so then
39:51 - I can just go up here and I can fix that
39:55 - syntax mistake there now this is also
39:57 - going to give you hints about things
39:59 - that aren't specific errors either so
40:02 - for
40:02 - and boy if I was to go down here into my
40:04 - Greek function and I was to put a
40:06 - variable inside my function that I
40:08 - actually never use so let's say I create
40:10 - a variable called test set that equal to
40:13 - test and save that then after a second
40:16 - we can see that this gets a little green
40:18 - underlined here and if I hover over that
40:21 - then it'll say unused variable test and
40:24 - then it also says that down here in our
40:26 - problems gives us a little warning
40:27 - unused variable test so that's a nice
40:30 - way of getting those types of things
40:31 - pointed out usually things like you know
40:34 - unused variables are mistakes something
40:37 - that we actually didn't intend so I'm
40:40 - going to remove that and now says no
40:42 - problems have been detected in your
40:44 - workspace so far okay so now let me show
40:46 - you another extension that I like that I
40:48 - used to make running Python code a bit
40:51 - easier so so far we've been
40:54 - right-clicking and selecting run code in
40:56 - terminal and I'm not the biggest fan of
40:59 - that so I'd rather just have an easy
41:00 - keyboard shortcut that does this for us
41:03 - and also it doesn't show as much other
41:05 - stuff in the terminal so the extension
41:08 - that I'm going to install here is called
41:10 - code runner so I'm going to search for
41:12 - that in the extensions so I'm going to
41:14 - click on extensions here and I will
41:17 - clear our current output make this a
41:20 - little bit larger here so I'm going to
41:22 - search for an extension called code
41:24 - runner that's here at the top and I'm
41:27 - going to install that and once that's
41:30 - installed we'll see a little run icon
41:34 - here at the top right of the editor so
41:37 - there are a few other changes that I
41:39 - like to make to the settings of this
41:40 - extension but let's see what it does for
41:43 - us right out of the box so I'm going to
41:46 - close that extension there and also I'm
41:49 - going to make those a little bit smaller
41:51 - go back to my file explorer here so
41:53 - right out of the box if I click this
41:56 - Ronnie code up here at the top then we
41:59 - can see this actually didn't work it
42:02 - says import error no module named
42:05 - request and the reason it didn't work is
42:07 - because it's using the default Python
42:09 - command on my machine we can see that
42:11 - here it's just using Python so since
42:15 - just using that Python command it means
42:17 - that it's using Python 2 as well because
42:21 - usually on Mac the default Python
42:23 - command defaults to Python 2 so that's
42:28 - what we why we need to change the
42:30 - settings for this extension so let's set
42:33 - it to use the current Python interpreter
42:35 - that vs code is currently using so to do
42:38 - this I'm going to open up my settings so
42:42 - I'm going to close the sidebar so that
42:44 - we have some room here I'm gonna open up
42:46 - my settings here I'm gonna make these
42:48 - default settings a little smaller and
42:50 - there are a couple of settings that I'm
42:52 - going to change here at the bottom of my
42:55 - file now I looked up what settings I'm
42:58 - gonna change before I started this video
43:00 - and I have these written down here in
43:02 - front of me now you could search through
43:04 - and find these settings yourself but I'm
43:06 - just going to go ahead and write these
43:07 - out so first we have one that is code -
43:13 - runner and we want to change code runner
43:17 - executors map so I will type that out
43:22 - executors map and this is going to be
43:25 - equal to a JSON itself so within this
43:30 - JSON I can set what I want to run when
43:34 - we run Python scripts so for Python I
43:38 - want this to use so we're gonna add in a
43:41 - few things here so I'm going to use this
43:43 - dollar sign and say Python path and make
43:47 - sure that that's capitalized correctly
43:49 - with the uppercase P there Python path
43:53 - so that will use the Python path that V
43:56 - s code is using so if V s code is using
43:59 - your virtual environment it'll use your
44:01 - virtual environment if it's using the
44:02 - default Python path up here then it will
44:05 - use the default Python path here so now
44:08 - so we'll do Python path - U and then we
44:12 - want another dollar sign there full file
44:16 - name with the capitalization just like
44:20 - that okay now I should actually say
44:23 - where I found this this is actually in
44:26 - the code runner documentation if I open
44:28 - this
44:29 - cup and we scrolled down here to the
44:32 - bottom these are just things that you
44:34 - kind of have to look for and figure out
44:36 - on your own I figured this out before
44:38 - the video but if you want to make your
44:41 - own customizations then you'll have to
44:43 - read through documentation like this
44:45 - but we can see here in their
44:47 - documentation they say you know if you
44:49 - want to make certain changes these are
44:51 - the customized parameters so here we
44:53 - have that pythonpath
44:54 - with that dollar sign and it tells us
44:56 - what that does the path at the Python
44:57 - interpreter that is from the Select
45:01 - interpreter command and also our full
45:04 - file name the full name of the code of
45:07 - the file being run ok so that is how I
45:11 - find found those just as a side note
45:13 - okay so there are a couple of other
45:15 - changes I want to make here as well
45:17 - so I don't know about you all but
45:18 - whenever I run Python code I want the
45:21 - output just to be what the output is of
45:23 - the of the command that I'm running I
45:26 - don't really like having you know other
45:28 - stuff in the way like the terminal
45:30 - location and you know command took
45:32 - however long to run anything like that
45:34 - so first of all I'm going to change I'm
45:38 - going to do a code - runner of show
45:43 - execution message and I'm going to set
45:45 - that equal to false because that is what
45:48 - comes up with all this extra information
45:51 - of you know the Python path and the file
45:53 - path and stuff like that I just want the
45:56 - Python output okay so lastly I'm going
46:00 - to change code runner dot and I'm going
46:04 - to turn off clear previous output I'm
46:07 - going to set that equal to true actually
46:09 - because I don't want the old output
46:13 - showing up I only want the newest output
46:15 - okay so now let's go back to our script
46:18 - and see if this works now and we'll also
46:21 - be able to see the difference of what
46:22 - this does here so I'm going to comment
46:26 - out that sis top version again I'm going
46:28 - to leave that sis not executable so now
46:30 - that we have those changes in place I'm
46:33 - going to save our file and now if I
46:35 - click run here then we can see that this
46:38 - output is so much cleaner so it is now
46:41 - using our virtual environment so
46:43 - that's great so now it's using you know
46:46 - our virtual environments version of
46:48 - requests and then it just prints out our
46:50 - 200 status code there and there's no
46:52 - other you know stuff here getting in the
46:54 - way like file paths and stuff like that
46:56 - it is just our output now if you don't
46:59 - like clicking this run command up here
47:01 - then this does come with a keyboard
47:03 - shortcut as well so if I right click it
47:06 - says run code here we can see that that
47:09 - is control option and in so if I press
47:12 - control option in then we can see that
47:15 - our code runs like that as well and you
47:17 - can change that keyboard shortcut if
47:19 - you'd like okay so moving on one thing
47:23 - about sublime text that people always
47:25 - asked me about was how to do input and
47:28 - input was actually really hard to do
47:30 - within sublime there was a confusing
47:33 - package that you could add on it to do
47:34 - it but I never use that because it was
47:36 - just easier to use the terminal and
47:38 - that's what I would tell other people
47:39 - just open up your terminal and run your
47:41 - code that way if you have input but if
47:44 - we use vs code and we have input
47:46 - let me just add some in here so I'm just
47:49 - going to remove everything below my
47:52 - imports and now I'm just going to say
47:54 - name is equal to input and for the input
47:58 - I'll just say your name and then I will
48:03 - print out a greeting that says hello
48:06 - comma and then print out I don't need a
48:10 - space there and then print out name so
48:14 - we're not actually going to be able to
48:16 - run this using the code runner that we
48:18 - just installed because that output is
48:21 - only read-only and that was our problem
48:24 - with in sublime text as well but to run
48:27 - this in vs code we can simply do what we
48:30 - did earlier by right-clicking and
48:32 - running this within our terminal so if I
48:34 - do that then we can see that we have
48:37 - this running here within our terminal
48:38 - and now it's asking us for our input so
48:40 - I'll put in my name here and then it
48:43 - runs our script just fine so that worked
48:46 - it printed out hello Cori so that's just
48:49 - a little side note there that I wanted
48:50 - to show if you want to do input then
48:52 - input will work but you will have to use
48:55 - the terminal
48:56 - now I'm going to undo a couple of
48:59 - changes to go back to what we had before
49:02 - before that input okay all right so now
49:06 - let's take a look at the built-in git
49:08 - integration within vs code so let's say
49:11 - that I wanted to track this project with
49:14 - git and then upload this to github so to
49:17 - track our current project with git we
49:19 - can click on the source control tab over
49:22 - here on our activity bar so I'm going to
49:25 - click on that and when I do that so
49:29 - right now we're not tracking this
49:31 - project with git so I could do all of
49:33 - this here within the terminal but we can
49:36 - also do it here through the interface as
49:38 - well so to track this project I can just
49:41 - click on this get symbol here at the top
49:43 - of our tab right here beside the text of
49:47 - source control so if I click on that it
49:49 - says initialize repository so I'm going
49:52 - to do that and now it's asking us which
49:54 - project we want to track and I'm going
49:56 - to click the one that I have open there
49:58 - and now it is going to track this with
50:02 - git so the files that just popped up
50:04 - here are files that it wants to stage to
50:07 - be committed now it looks like we have a
50:09 - lot of extra files in our project right
50:11 - now but these were actually already
50:14 - there these are from our virtual
50:16 - environment and vs code is telling us
50:18 - that they're on stage now normally you
50:21 - don't want to track virtual environments
50:22 - so to ignore that we just need to create
50:25 - a dot git ignore file and add that to
50:28 - our repository so I'm going to go back
50:30 - to our project here and we can see that
50:33 - the get also adds in color coding here
50:36 - to tell us what's on stage and what's
50:38 - not so right now it's wanting to track
50:40 - our virtual environment we don't want
50:42 - that
50:43 - so right here by our project let's click
50:47 - on this file to create a new file or
50:49 - click on this icon to create a new file
50:51 - and I'm gonna create a new file called
50:53 - dot get ignore and we can see that it
50:56 - automatically fills in that get symbol
50:59 - there beside our file and now within not
51:02 - get ignore we want to ignore the V and V
51:06 - module and we also want to ignore I'm
51:09 - also going to put
51:10 - the vs code directory in there as well
51:13 - because I don't think we want to upload
51:15 - our settings and things like that those
51:17 - are more personal so now that we've
51:20 - saved those we can see that it's no
51:22 - longer color coding our vs code or our V
51:25 - E and V directory because it's not going
51:28 - to try to stage those anymore now you'll
51:30 - notice that it doesn't actually show us
51:32 - the dot get directory that got created
51:34 - when we initialize our directory vs code
51:37 - filters out what files are seen by
51:40 - default and ones that you normally don't
51:43 - want to see are filtered out so there's
51:45 - normally no reason to go into certain
51:47 - folders or files such as dot git so I
51:51 - think it's nice that it filters those
51:52 - out but if you ever want to make changes
51:54 - to what's shown or hidden then you can
51:56 - always update your settings and change
51:58 - the hidden files so now I'm going to go
52:00 - back to my git section here in my
52:03 - activity folder so now we can see that
52:05 - the only change is that it wants to
52:07 - stage our the got get ignore file and
52:10 - our script op py so to stage those
52:13 - changes I could hover over these one at
52:16 - a time and click the plus icon here
52:20 - beside each file so if I click that
52:22 - beside git ignore then we can see that
52:24 - now that went up into our stage changes
52:27 - or if we want to stage all of the
52:29 - changes then we can click on the extra
52:31 - options here at the top right with these
52:33 - three little dots and then I could just
52:35 - come down here to stage all changes and
52:39 - that'll add all of those to our stage
52:41 - section here so now that we have those
52:43 - files staged in order to commit those we
52:46 - can simply click here on this check mark
52:48 - so I'm gonna do that and it's going to
52:50 - ask us for a commit message so I'm just
52:53 - going to type in a commit message of
52:55 - initial commit and hit enter and now it
52:58 - has committed that code so we have our
53:01 - code committed to get so now it's only
53:04 - going to show us changes that we've made
53:05 - since then so if I go to my scripts and
53:08 - take out a lot of this stuff that we've
53:10 - put in here so let's say that I only
53:12 - wanted my module to contain the request
53:15 - code from now on so I'm going to take
53:17 - out the greet function I'm going to
53:19 - remove our print statements here I'm not
53:23 - using
53:24 - you know cysts or math or anything like
53:27 - that so I'm gonna remove those as well
53:29 - if I save that at auto formats that code
53:32 - for us so that's nice now this also
53:33 - gives us some indicators over here of
53:35 - what has changed for our git commit so
53:38 - if we click that then we can see that we
53:41 - can take a little peek at what's
53:42 - different so these red outlines here
53:45 - means that code has been removed so
53:47 - that's a nice touch there now if we go
53:49 - back to the git section and click on
53:53 - this then we can see the diff
53:55 - side-by-side and you can also change
53:57 - exactly how the diff is seen you can
54:01 - also layer them on top of each other but
54:03 - I really like the side-by-side look so
54:06 - we have our current file that is
54:08 - committed over here and then how our
54:10 - file looks right now and it's telling us
54:12 - hey we had all of this code here before
54:14 - and now it's gone so those are actually
54:16 - deletions that I wanted to make so
54:18 - that's fine so now I'm going to click on
54:21 - the plus icon to stage that file and now
54:24 - I'm going to commit that and when I
54:26 - commit that I'm just gonna leave a
54:28 - commit message that says removed some
54:31 - code okay and now that is committed okay
54:35 - so now let's say that we wanted to
54:36 - commit this code in this project up to
54:39 - github now this is pretty simple to do
54:41 - also all we have to do is create a
54:44 - repository within the browser and then
54:47 - we can set that up to push to that repo
54:49 - so I have my github open here within my
54:53 - browser so let me reload the page and
54:56 - make sure that I'm still logged in here
54:57 - and it looks like I am so that's good
54:59 - okay so now all I have to do is create a
55:03 - new repository I think I created one the
55:06 - other day called let's see demo
55:08 - repository sample repository I'm just
55:10 - gonna create a new one here and call it
55:12 - test
55:14 - - repo so I'm not going to do a
55:17 - description or anything like that so I
55:20 - can just create that repository and now
55:24 - whenever you create a new repository
55:26 - github will show you this quick setup
55:29 - page here so the commands that it shows
55:31 - us here are commands to create a new
55:33 - repository on the command line or we
55:36 - want if we want
55:37 - to push an existing repository from the
55:39 - command line now we already have an
55:41 - existing repository that we just created
55:43 - within ves code so this is the section
55:46 - that I am interested in here so I'm
55:49 - going to copy this get remote add origin
55:52 - here and that's what we're going to use
55:54 - to connect our local repository to this
55:57 - remote repository that we just created
56:00 - so I'm going to copy that and I'm going
56:02 - to go back to visual studio code and now
56:05 - I want to use my terminal to paste that
56:08 - in so if I first I want to shut down
56:11 - that this diff here so to open up my
56:14 - turmeric terminal that is control tilde
56:16 - and I'm going to clear the output there
56:19 - now I'm going to paste in the command
56:21 - that I got from github and I am here
56:24 - within my project so if I run that then
56:29 - that should now connect our git project
56:32 - in our local folder here to our remote
56:34 - repository so now if I go back to our
56:38 - git section here then I'm going to click
56:41 - here at the top right of our source
56:44 - control page and now I'm going to go
56:46 - down here to the bottom and actually
56:49 - it's up here too close to the top it is
56:51 - push - so I'm going to push - and now
56:54 - I'm going to push to origin and that the
56:57 - reason that we have origin there is
56:59 - because we pasted it in that git remote
57:02 - add origin command that we got from
57:03 - github so I'm going to push to that and
57:06 - that might take a second and it asks us
57:10 - here if we want to periodically run git
57:12 - fetch you can say yes or no I'm just
57:14 - going to say ask me later for now so now
57:17 - if I go back to the browser I'm going to
57:20 - look at my repository and we can see
57:23 - that we have a repository with two
57:25 - commits here and this is our code that
57:29 - we have within vs code so now that you
57:31 - have this connected to github any you
57:35 - can always come in here to visual studio
57:37 - code and make your updates and staging
57:41 - commit those like we saw before and then
57:43 - simply come up here and push those and
57:45 - it'll push those to github so that's how
57:48 - you can work with git and github and vs
57:50 - code
57:51 - and I think it's a pretty intuitive how
57:52 - they set that up and it's really nice to
57:54 - use now if you'd like to learn more
57:57 - about git then I do have a more detailed
57:59 - video on that and I'll leave a link to
58:01 - that video in the description section
58:03 - below if anyone is interested I also
58:05 - plan on doing a detailed video on github
58:07 - in the future but I haven't got around
58:09 - to doing that just yet
58:11 - but I just wanted to cover the basics in
58:13 - this video to get you started ok so now
58:16 - let's look at how to do some basic
58:17 - debugging in Python now this is a nice
58:20 - feature in vs code that doesn't come
58:23 - built in with some other minimalist
58:25 - editors like this so back in our script
58:28 - here let's put in I'm going to close
58:30 - that getting Noir file let's put in a
58:33 - breakpoint after we make our web request
58:37 - sorry so in order to put a breakpoint in
58:40 - we can just come over here into our
58:42 - gutter and whenever this red dot shows
58:44 - up we can just click there and that will
58:47 - add a breakpoint now I'll click on the
58:50 - debug tab of the activity bar over here
58:52 - and that's where we can start our
58:55 - debugger so first we're going to need to
58:57 - select a debug configuration so there
59:00 - are some more advanced to bug
59:01 - configurations that you can use for
59:03 - debugging applications like flask and
59:05 - Django but in this video let's just look
59:08 - at the debugging basics so we can click
59:12 - on add configuration and I just want to
59:15 - do a Python file and that'll create some
59:19 - configurations for us here let me make
59:21 - this a little bit larger here so now
59:23 - within our debug configuration we can
59:26 - see that we have this selection here for
59:29 - Python current file so in order to debug
59:33 - this I can simply click on this green
59:36 - button and it's going to debug this here
59:38 - within my terminal so what that does is
59:41 - it runs our code and it stops at our
59:43 - breakpoint that we added here on line 5
59:46 - so now we can interact with our code as
59:49 - it is at the moment of that breakpoint
59:51 - so if you look here in the top left then
59:54 - it'll show you the current local values
59:57 - in our code and you can drill down into
59:59 - those to see the current values that we
60:02 - have set so we have this response up
60:04 - here we can look at all the values of
60:06 - that we can look at our request library
60:09 - and all kinds of different things there
60:12 - now underneath that variable section we
60:14 - have a watch section and within here we
60:17 - can add a variable there that we'd like
60:19 - to watch and monitor the current value
60:22 - so if I add a watch statement then let's
60:26 - say that I wanted to watch our dot
60:29 - status underscore code so if I watch
60:32 - that then we can see that the current
60:34 - value of that is 200 now if we were
60:37 - watching a value in a loop or something
60:39 - like that then we'd actually be able to
60:42 - see that increment each time through the
60:44 - loop if we had a breakpoint within the
60:47 - loop so that's a nice feature there now
60:50 - if you want something more interactive
60:51 - then you can open up the debug console
60:54 - down here within the terminal so let me
60:58 - open that and now we can use this debug
61:01 - console here to inspect anything that
61:04 - we'd like so let's say that I wanted to
61:06 - look at R for example so we can see that
61:09 - that is a response object of 200 and we
61:12 - can dig down into that here let's say I
61:16 - wanted to get more specific and look at
61:18 - the value of okay so if i run r dot okay
61:22 - we can see that that's equal to true if
61:24 - i look at our dot URL then it shows us
61:27 - the URL that we originally requested so
61:31 - being able to jump into the code at a
61:32 - specific location and see the current
61:34 - values can be extremely useful in a lot
61:37 - of situations so it's so much better
61:39 - than dropping down print statements or
61:42 - log statements all throughout your code
61:44 - and running your code over and over
61:46 - having this debug capability is so much
61:49 - better than that so this allows you to
61:51 - keep your code clean and avoid those
61:52 - print statements and log statements and
61:54 - also see all of the information that you
61:57 - need in order to make sure that your
61:58 - code is working how you expect and if
62:00 - it's not working then hopefully it'll
62:03 - help show you exactly how you can fix it
62:06 - so once we're at a breakpoint then we
62:08 - have several other options here so we
62:11 - can continue on or we can step over the
62:15 - current breakpoint step into the code
62:17 - further
62:18 - step out we can restart the debugger or
62:21 - we can stop so if I click on continue
62:24 - then there are no more breakpoints so
62:26 - that is just going to run through and
62:28 - complete our script okay so now I'm
62:31 - going to remove that debug breakpoint so
62:34 - I'm just going to click there and when
62:35 - we click there it removes that
62:37 - breakpoint okay so the last thing that
62:39 - we're going to take a look at in this
62:40 - video for Python specifically is the
62:43 - unit testing support that they have
62:45 - built in to vs code now I'm really
62:47 - loving their attention to detail and how
62:49 - they covered so many different aspects
62:51 - of helping us manage our code easily as
62:53 - easily as possible
62:54 - so having built in support for all this
62:57 - stuff is definitely a nice addition that
62:59 - you won't find in most other editors so
63:01 - to show you some unit testing I'm going
63:03 - to close down my current project and I'm
63:06 - going to open up a different project
63:08 - that has some sample unit tests so I
63:11 - close down
63:12 - vs code there and now I'm just going to
63:15 - open up my terminal here and now I'm
63:20 - going to navigate to my desktop because
63:22 - that is where I have my sample unit
63:25 - testing code now we could open this
63:26 - project like we did last time from
63:28 - within vs code but if you want to open a
63:31 - directory or file from the command-line
63:33 - then you can do that with the code
63:35 - command that should have been installed
63:37 - when we installed vs code so if I want
63:40 - to open that unit testing directory on
63:43 - my desktop then I could simply say code
63:46 - and then the name of that directory and
63:49 - that directory name is unit test demo so
63:52 - if I run that okay so this is saying a
63:54 - code command not found so sometimes it
63:58 - will automatically install that command
64:00 - for you and sometimes it won't so if I
64:03 - open up visual studio code let me show
64:06 - you how to install this if you run into
64:08 - that problem so if I open up the command
64:12 - palette command shift P if I type in
64:15 - shell then we can see here that we have
64:18 - one command that says install code
64:20 - command and path I'm going to click on
64:22 - that it says that that was successful so
64:25 - I'm going to open a new terminal here
64:28 - now
64:29 - I'll see you D to my desktop and i'll
64:31 - say code
64:32 - unit-tests demo and now it opens that up
64:35 - within Visual Studio code so that's a
64:40 - nice way within your command line to
64:42 - open up directories or files from your
64:45 - command line okay so I'm going to close
64:47 - that and also I'm going to close my
64:50 - other window of es code here and just
64:54 - use my unit testing code here okay so
64:57 - within my sample project here I have a
65:00 - couple of sample unit tests so I have
65:03 - test underscore calc and I have let me
65:07 - close these pop-ups there and I have
65:10 - test underscore employee so the first
65:14 - thing that we want to do here is we want
65:16 - to open up our command palette so I'll
65:18 - hit command shift P and I will type in
65:22 - discover and it's already auto completed
65:24 - this for me it is Python discover test
65:27 - so I'm going to click on that and this
65:31 - will come up with a pop-up here that
65:33 - will ask us to enable and configure the
65:36 - test framework so I'm going to click on
65:38 - that and now it's asking us what unit
65:42 - test framework we want to use now I'm
65:44 - using the unit test module from the
65:46 - standard library for these tests but if
65:48 - you're using PI test or nose then you
65:51 - can use those so select whichever one
65:54 - you are using here but I am selecting
65:56 - unit tests since that's what these tests
65:58 - are written in so I'm going to click on
66:00 - that and then click on the root
66:02 - directory because that's the directory
66:04 - containing the unit test and now we want
66:06 - to select the pattern to identify our
66:09 - test files so if we can see that we have
66:12 - a few different options here now my test
66:15 - files are written as test underscore and
66:18 - then the module name so that would be
66:21 - this option here so test underscore
66:23 - wildcard but however your tests are
66:26 - written you want to select your naming
66:28 - pattern so I'm going to select that one
66:30 - and now that is going to discover my
66:33 - test now I'm giving this pilot is not
66:36 - installed over here I'm just gonna click
66:38 - on do not show that again for now okay
66:40 - so now let me close down our test
66:42 - because we didn't
66:45 - cover those at first now let me reopen
66:47 - those now that those have been
66:49 - discovered and if I look here within
66:52 - test underscore calc we can see that
66:55 - since it's discovered our test it's
66:57 - added in some lines to our test file
67:00 - here where we can either run this entire
67:02 - test class here or we can even run a
67:06 - single test at a time so for example if
67:09 - I wanted to only run our test ad
67:12 - function here then I can just click on
67:15 - run test for that specific test so if I
67:19 - click on that then we can see that the
67:22 - check mark lets us know that the tests
67:25 - passed and I can run all of the tests if
67:28 - I run the test for this entire class so
67:30 - if I click on that then we can see that
67:32 - now all of these have a check mark here
67:34 - and also if I look down here in the
67:36 - status bar at the bottom then it says
67:40 - that all four of our tests have passed
67:42 - so that's a nice indicator there so now
67:46 - let me change one of these tests so that
67:48 - it fails so that we can see what this
67:50 - looks like so I'm gonna change one of
67:52 - the assertions and my test ad function
67:55 - to where this is going to fail so I'll
67:57 - say that if we add ten and five then it
67:59 - should equal ten but so if I save that
68:04 - and now rerun these tests here then now
68:08 - we can see that we get an X here so
68:10 - these have check marks this one has an X
68:12 - and we can see down here at the bottom
68:15 - that we have three check marks and one
68:17 - warning so if I click on that then it
68:19 - gives us a few options here so we can
68:22 - either rerun our tests or I can only run
68:25 - the failed tests or I can view the unit
68:28 - test output so let me take a look at
68:30 - that unit test output and that is what
68:33 - will show me where we have our failing
68:37 - tests so we can see it ran all of these
68:39 - and that we had a fail on test ad it'll
68:42 - also show us exactly what failed so it
68:45 - says that this assertion failed here
68:47 - fifteen is not equal to ten so that's
68:49 - why that failed so now that we have that
68:52 - information there then we can go in and
68:54 - either fix our code or fix our test so
68:57 - I'm going to fix the test
68:58 - then I will just rerun all of these and
69:02 - now we can see that all of those are
69:04 - passing now lastly we get an additional
69:08 - tab over here oops let me close down
69:11 - that terminal there now we also get an
69:14 - additional tab over here in our activity
69:16 - bar and this is a testing tab so let me
69:20 - click on that to check this out so it
69:24 - might still be telling us that our test
69:27 - is failing here if you hadn't actually
69:30 - manually come over here and rerun that
69:32 - test after it was failing but since we
69:34 - did rerun that test then we can see that
69:37 - all of those are now passing so just to
69:39 - see what this looks like let me make
69:41 - this failing again here so that we can
69:44 - see what a failing test looks like over
69:46 - here okay so now we can see we have our
69:49 - failing test so and all of these were
69:52 - passing so now if I come over here and
69:55 - fix that rerun that then we can see that
69:59 - let me rerun that again then we can see
70:01 - that now we get all of those green
70:03 - checkmarks now if we want to run all of
70:05 - the tests that we discovered then we can
70:08 - simply come up here to the top of our
70:11 - file here and click this button with the
70:13 - green checkmark here at the top and run
70:16 - them all so if I click on that then
70:20 - it'll run all of the tests and we can
70:22 - see that all of those passed again so I
70:24 - really think that this is an awesome
70:26 - interface for seeing all of our tests in
70:28 - one place and if something is failing
70:29 - then we can easily come in here and just
70:32 - rerun a specific test by running it
70:34 - individually instead of rerunning our
70:36 - entire test suite so I think that's an
70:39 - awesome feature built into vs code okay
70:42 - now there's one last thing that I want
70:44 - to show you in this video and it's only
70:46 - going to take a second so I have some
70:49 - other preferred settings that I haven't
70:51 - shown in this video and most of them are
70:53 - settings for changing how the editor
70:56 - looks in their fullscreen Zen mode and
70:59 - will allow me to run code without too
71:01 - much other stuff getting in the way so I
71:03 - just want to show these additional
71:05 - settings so that you can see exactly how
71:07 - I'll have my code vs code setup if you
71:10 - see me using this in
71:12 - teacher videos so I have those settings
71:14 - pulled up here in my browser and these
71:16 - are also available on my github page so
71:20 - this is just the raw version of what's
71:22 - available on my github so I'm going to
71:24 - grab those now I'm going to go back to
71:27 - the s code and I'm going to open up my
71:30 - settings here and I'm just going to
71:33 - replace all of my settings with what I
71:35 - grabbed from my github there now there's
71:39 - only a few additional changes here so
71:42 - that made the font size a little smaller
71:44 - because these are my personal settings
71:45 - let me change that back to B let's see
71:48 - what was that 18 I think for now so I
71:52 - will change that back to 18 while I'm
71:55 - recording the video actually that's
71:57 - still a little bit too small and that is
71:59 - because my zoom level is different for
72:01 - my personal preferences as well so I'll
72:04 - change that back up to what was that 3 I
72:06 - think okay yes so that is good for a
72:09 - while we're recording this so like I was
72:11 - saying these settings are mostly the
72:13 - same from what we just saw in this video
72:15 - but there are a couple of changes in
72:17 - here to how the Zen mode looks so we can
72:20 - see here the Zen mode I've got the
72:22 - center layout turned off the fullscreen
72:24 - turned off hide line numbers turned off
72:26 - stuff like that and if you didn't know
72:28 - there's in mode is just there
72:30 - distraction-free mode that allows you to
72:32 - focus more on your code and hides lots
72:35 - of the menus and things that you might
72:38 - find it distracting so let me open up
72:40 - one of my files here and let me actually
72:42 - open up Zen mode so to do that I'm just
72:45 - going to open up my command palette here
72:46 - and type in Zen and I will toggle Zen
72:49 - mode so I have these change to where my
72:52 - Zen mode now looks like this so we can
72:54 - see that we have a lot less distractions
72:56 - and it's basically just the code so if I
72:59 - run this I'm gonna run this using this
73:01 - over here and now we can see that our
73:04 - output is nice and clean too so if I do
73:07 - use vs code in future tutorials then
73:09 - this is likely how you're going to see
73:11 - me using it now the editor that I
73:13 - normally use for videos is sublime text
73:15 - and I really like sublime text for its
73:17 - minimalist look so that we can just
73:19 - focus on the code and the output but
73:22 - with Zimmy or with a Zen mode setup like
73:24 - this we
73:25 - have a nice minimalist setup in V s code
73:28 - as well so you might see me using this
73:30 - if I completely make the switch over to
73:32 - V s code okay so that's all I wanted to
73:34 - cover for the Python features that I
73:36 - wanted to show you in vs code now
73:38 - there's a ton more to learn about visual
73:40 - studio code itself but I might save that
73:42 - for another video since this one is
73:44 - getting really long so if anyone is
73:47 - interested then the additional things
73:49 - that I'd like to cover in a future video
73:51 - would just be some of the editor
73:53 - features so learning how to use the
73:55 - multi cursor functionality some of my
73:58 - favorite keyboard shortcuts and things
74:00 - like that but if you'd like to see some
74:02 - of these sheep keyboard shortcuts for
74:04 - yourself then they make it easy to learn
74:06 - these we can open our command palette
74:08 - and if we just search for keyboard
74:12 - shortcuts so let me search that then we
74:16 - can see here that one of the options is
74:18 - to open this keyboard shortcuts
74:21 - reference here and this opens up a PDF
74:24 - online that we can zoom into here and we
74:29 - can see all the keyboard shortcuts
74:30 - available to us here but like I said I'd
74:33 - like to do a video in the near future
74:34 - showing you some of my other favorite vs
74:38 - code features like the multi cursor
74:41 - functionality and also how to use some
74:43 - of those keyboard shortcuts that are
74:45 - listed on that reference page okay so I
74:47 - think that is going to do it for this
74:48 - video I hope you found this video
74:50 - helpful especially if you're trying to
74:51 - switch over to vs code for your Python
74:53 - development so personally I think they
74:55 - really knocked it out of the park with
74:56 - this editor so as you saw they have so
74:59 - many features that are built-in and the
75:01 - features that aren't built-in are really
75:03 - easy to set up and get installed and
75:05 - also get configured but if anyone has
75:07 - any questions about will be covered in
75:08 - this video then feel free to ask in the
75:10 - comment section below and I'll do my
75:11 - best to answer those and if you enjoy
75:13 - these tutorials and would like to
75:14 - support them then there are several ways
75:16 - you can do that these hiest ways to
75:17 - simply like the video and give it a
75:18 - thumbs up and also it's a huge help to
75:20 - share these videos with anyone who you
75:22 - think would find them useful and if you
75:23 - have the means you can contribute
75:24 - through patreon and there's a link to
75:26 - that page in the description section
75:27 - below be sure to subscribe for future
75:29 - videos and thank you all for watching
75:32 - you
75:41 - you