00:00 - hey there how's it going everybody in
00:01 - this video I'm going to try to explain
00:02 - the solution to a problem that I see a
00:04 - lot and also a common question that I
00:06 - get on my videos and the problem that
00:08 - I'm talking about can take a few
00:10 - different forms so maybe you've
00:12 - installed Python but when you type
00:13 - Python in the command line it either
00:15 - says that it doesn't recognize the
00:17 - Python command or maybe it gives you a
00:19 - different version than you thought
00:21 - you've installed or maybe you're trying
00:23 - to use a feature that's only available
00:25 - in a later version of Python
00:27 - you know like f strings and python 3.6
00:29 - and that's just not working so maybe
00:32 - that means that you're not using the
00:33 - version of Python that you think you're
00:35 - using you know also maybe you're trying
00:37 - to import something that you thought
00:39 - you've installed through pip but it
00:41 - keeps giving you an import error and
00:43 - telling you that it can't find the
00:45 - module so all of these problems are
00:46 - likely caused by your machine not using
00:48 - the correct Python interpreter so in
00:50 - this video we'll be learning how to find
00:52 - out which Python interpreter you're
00:54 - using and where it's located on your
00:55 - machine and we'll also see how to switch
00:57 - between different Python versions and
00:59 - environments and also how to
01:01 - troubleshoot imports if they aren't
01:03 - working correctly so in this video we're
01:05 - going to be seeing how to do all of this
01:06 - on the Mac and Linux operating systems
01:08 - but I also have a video on how to do
01:10 - this on Windows as well so if you're on
01:12 - Windows then I'll have a link to that
01:14 - video in the description section below
01:16 - ok so with that said let's go ahead and
01:18 - get started so I have my terminal opened
01:20 - up here so first of all maybe you've
01:22 - installed a newer version of Python but
01:24 - you're still getting the old version of
01:26 - Python when you type that into your
01:28 - machine so I have Python 2 and Python 3
01:31 - installed on my Mac but when I open up
01:34 - my command line and I run the Python
01:37 - command then you can see that we are
01:39 - using Python 2 so let me exit out of
01:43 - that now on Mac & Linux you should
01:45 - always have some version of Python
01:46 - because they ship with Python 2 ready to
01:49 - go but even if that command didn't work
01:51 - then we should be able to figure that
01:53 - out so don't worry if that didn't work
01:55 - right now
01:56 - okay so I've installed Python 3 on this
01:59 - machine but when I type Python I keep
02:01 - getting python 2 so what's the deal here
02:04 - well on Mac and Linux a lot of the times
02:06 - when you install Python 3 it will
02:09 - actually install that with the command
02:11 - of python 3 instead of
02:13 - Python so if I want to run a Python 3
02:16 - then I can try that Python 3 command and
02:19 - we can see that on my machine that works
02:21 - and that we're using Python 3 7 here so
02:24 - now let me exit out of that again so
02:27 - when we ran that Python 3 command that
02:29 - may or may not have worked for you now
02:32 - if it does work then it means that it
02:33 - found the Python 3 command on our path
02:36 - and if it doesn't work then it means
02:38 - that it couldn't find at that Python 3
02:40 - command on our path and we'll discuss
02:42 - what the path is here in just one second
02:44 - so this worked for me so let me find out
02:47 - where this is actually located on my
02:49 - machine so one way to see where the
02:52 - actual location of this program is on
02:54 - Mac or Linux is to use the witch
02:56 - command so I can say which python 3 and
03:00 - hit enter and you can see that this
03:02 - command is located at user local bin and
03:05 - then the command is Python 3 now I use
03:08 - the witch command a lot but it's not
03:10 - very useful if you use aliases and I use
03:12 - a lot of aliases so we'll see some
03:15 - examples of aliases in just a second but
03:17 - in order for this to work with both
03:20 - commands and the aliases I've started
03:22 - using the type command so if I say type
03:25 - Python 3 then we can see that it says
03:28 - python 3 is hashed and it's at this
03:31 - location now yours could just say python
03:33 - 3 is and then have the location there
03:36 - without the hashed part ok so the Python
03:39 - 3 command inside of this user local bin
03:42 - directory that is actually what is being
03:45 - run when we run Python 3 and the only
03:48 - reason that works is because that user
03:50 - local bin directory is on our path and
03:53 - by path I mean that it's on our path
03:56 - environment variable that is where your
03:58 - machine looks for all of its commands in
04:00 - a specific order and we can actually
04:02 - view this path if I say echo and then do
04:05 - a dollar sign and all uppercase path if
04:09 - I run this then this gives us our
04:12 - current path here now your output here
04:14 - might be a little different than mine
04:16 - but these are the directories where your
04:18 - machine is looking for commands so each
04:20 - directory is separated by a colon so let
04:23 - me split this up on the multiple lines
04:25 - so that we can read this a little
04:27 - a bit better so I'm going to copy this
04:29 - and open this up in sublime text and I
04:33 - will split these up on a colon here so
04:38 - that we can see this a little better
04:39 - okay so this is where our machine is
04:41 - going to look for commands and it looks
04:43 - in this order so on my machine when I
04:46 - type a command like Python 3 into the
04:49 - command line then and it will go in this
04:51 - order and say ok do I have a Python 3
04:53 - and use your local bin and that's where
04:55 - it was located but if it wasn't then it
04:57 - would have looked in user bin and then
04:59 - bin and then user s been then s been and
05:02 - then user local get bin so like I said
05:05 - these might be different on your machine
05:06 - than mine but this is my current path so
05:09 - if the directory to the command that
05:11 - you're trying to run isn't on this path
05:13 - environment variable then it's not going
05:15 - to work or if it finds a different
05:17 - version of the command that you want
05:18 - before it finds the one that you wanted
05:20 - to use then it will use the first one
05:22 - that it found so if we had a Python here
05:26 - and user bin but it found one and user
05:28 - local bin then it's going to use that
05:30 - one and use your local bin first now we
05:32 - can run these commands by using the full
05:34 - path to these programs also so for
05:36 - example another way for me to run Python
05:39 - 3 is just to use the full path of user
05:42 - local bin Python 3 so let me do that so
05:46 - I'll copy that directory location
05:48 - let me bring back up my terminal here
05:50 - and I will clear this out so now if I
05:53 - say user local bin then ford slash
05:55 - Python 3 and run that then we can see
05:59 - that that works it opens up Python 3 7
06:02 - so now I'm going to exit out of there so
06:05 - if your command isn't in a directory in
06:07 - that path environment variable then you
06:09 - can still run it but you'll just need to
06:11 - provide the full path to whatever you
06:12 - want to run just like we did here so for
06:15 - example I have an anaconda version of
06:17 - Python that currently isn't on my path
06:20 - it's not in my path environment variable
06:22 - but I know where it's installed on my
06:25 - machine and I can still run that version
06:27 - of Python if I provide the full path to
06:29 - that so let me do this so this won't
06:32 - work on your machine unless you've
06:33 - installed this in the same location but
06:35 - mine is in a directory in my home
06:38 - directory called anaconda
06:40 - so if I do an LS in that location so I'm
06:43 - going to say LS and that's in a
06:45 - directory called anaconda and it's in
06:47 - the bin folder within anaconda so if I
06:50 - do an LS there you can see that we have
06:52 - a lot of stuff but if I scroll up here a
06:55 - little bit then you can see that we have
06:58 - a few different commands we have Python
06:59 - 3 Python 3 6 if I scroll down here to
07:03 - the bottom you can see that we also have
07:04 - a Python command so if I run this python
07:07 - using the full path then that should run
07:11 - that version of python so let me try
07:12 - that so that was in anaconda ford slash
07:15 - bin ford slash python so if i run that
07:18 - then you can see that it's running
07:20 - Python 3 6 but it's running the anaconda
07:23 - version of that so now let me exit out
07:27 - of that
07:28 - now that Python command was a command
07:30 - that wasn't on my path so I had to
07:32 - specify the entire path to where it was
07:35 - located in order to get that to run if I
07:38 - was just to type Python then it would
07:40 - run that Python 2 version that we saw
07:42 - earlier that is on my path so if I
07:45 - wanted that Python command to be used
07:47 - instead of my current Python command
07:49 - that points to Python 2 then I need to
07:51 - add that directory on my path so that it
07:54 - sees that directory before the others so
07:57 - again I would just add that anaconda bin
08:00 - directory to my path and we'll see what
08:02 - it looks like to add a directory to the
08:04 - path in just a second but let me clear
08:07 - my screen here now if your Python 3
08:09 - command didn't wrk earlier or if it's
08:11 - not using the latest version that you
08:13 - think it should be then you should go
08:14 - back to the python website and
08:16 - redownload python 3 and pay attention to
08:19 - where it installs python on your machine
08:22 - so usually installations will
08:24 - automatically add directories to your
08:26 - path for you but if it's not working
08:27 - then you might have to do that manually
08:29 - so let's see how to manually add a
08:31 - directory to this path so I'm currently
08:34 - within my home folder here on my
08:36 - terminal now if you're not sure if
08:38 - you're in your home directory then you
08:40 - can simply do a CD and hit enter and it
08:42 - should take you back to your home folder
08:44 - and within your home folder you might
08:46 - have a file called dot Bash underscore
08:50 - profile now if you're on a Linux desktop
08:52 - then
08:53 - that might be a dot bash RC file now if
08:57 - you don't have either of these then you
08:58 - can simply create one so let's open this
09:01 - up in the Nano editor and see what this
09:04 - looks like now Nano isn't the best
09:06 - looking editor but it's easy for most
09:07 - people to use so let's go ahead and use
09:09 - that in this video so I'll say Nano then
09:12 - dot bash underscore profile and again on
09:15 - a Linux desktop that would be dot bash
09:18 - RC now I'm gonna have more in this file
09:20 - than you do yours could be completely
09:22 - empty if it is then don't worry about
09:24 - that okay so I'm going to scroll down to
09:28 - the bottom of my file here and we can
09:30 - see that I have a few things commented
09:32 - out here at the bottom where it says
09:34 - setting paths for Python 3 7 so this is
09:37 - how we actually add a directory to our
09:39 - path environment variable so I'm going
09:42 - to uncomment out these lines here and
09:44 - then we will walk through this ok so
09:48 - first we are saying that we want to set
09:50 - the path equal to and then this big
09:53 - string value here so first of all our
09:56 - path is an all uppercase the second
09:59 - thing to notice here is that there's no
10:00 - spaces between the variable name and the
10:03 - value it's just variable equal to value
10:06 - with no spaces in between that's just
10:08 - how Bash works and then the value that
10:10 - we're setting here is this long string
10:13 - and this contains the directory that we
10:16 - want to add to our path here so this is
10:18 - kind of long but this is where Python
10:21 - installed my version of Python 37
10:23 - whenever I downloaded it online so this
10:26 - big directory here forged slash library
10:27 - frameworks Python framework versions 3 7
10:31 - bin directory that whole thing I'm
10:33 - adding to my path and then we have a
10:37 - colon here because remember that
10:39 - directories are separated by a colon and
10:41 - then we have this dollar sign and then
10:44 - curly braces path now what this does is
10:47 - it adds the current value of the path to
10:51 - the end of this string so what would
10:54 - happen if I was to leave this off was
10:56 - that this would just reset the entire
10:59 - path variable just to this one single
11:02 - directory and that's not what we want we
11:04 - want to add this directory on to our
11:06 - current path
11:07 - and specifically I want this to come
11:09 - before the other directories in the path
11:12 - because if I type in Python 3 I want it
11:15 - to be seen from this directory first
11:17 - before any of the other directories and
11:19 - my current path so I hope that that
11:21 - makes sense it's kind of hard to explain
11:23 - I think that'll make more sense once we
11:25 - echo this back out in the terminal again
11:28 - compared to what it was before so also
11:31 - we have a line down here that just says
11:33 - export path and that just says a you
11:36 - know set path to this new variable ok so
11:41 - now that we've uncommented out those
11:42 - lines now let's save these changes by
11:44 - pressing since we're in nano control X
11:47 - and then just hit Y for yes to save and
11:51 - then the name is just bash underscore
11:53 - profile we can just hit enter and it
11:54 - should have saved those and now you
11:56 - actually need to restart the terminal
11:58 - before those changes take effect but
12:00 - before we do let's go ahead and see what
12:03 - this is going to do so one more time let
12:05 - me just run that type Python 3 command
12:08 - or you can use which and you can see
12:11 - that it says that python 3 is currently
12:13 - at this location and now if we echo out
12:17 - our path then it says that it's at that
12:21 - location because it found that Python 3
12:25 - command in this user local bin directory
12:28 - which is the first directory on our path
12:31 - so now if we restart our terminal so let
12:34 - me re start this and make this large
12:39 - again so now that I've restarted our
12:41 - terminal the changes that we made to our
12:43 - bash profile should now take effect so
12:47 - now if I type type of python 3 and hit
12:51 - enter now we can see that it says python
12:53 - 3 is at this location and that's the
12:56 - location that we added to our path so
12:59 - now if I go to echo and then dollar sign
13:01 - all uppercase path then we can see that
13:05 - we have this big long directory here at
13:07 - the beginning of our path and then what
13:10 - our path was before last time we looked
13:12 - at it so this big long section that I
13:14 - have highlighted here that is what I
13:17 - meant whenever I said that it adds the
13:19 - current value of the path
13:21 - onto the end of that string now that
13:23 - Python three command is within this
13:26 - directory and also within this user
13:28 - local bin directory but since it found
13:31 - it in this directory first and its first
13:33 - on our path then that is the one that is
13:35 - going to use so if you've been having
13:37 - trouble getting the correct Python
13:39 - version or environment to run then
13:41 - hopefully that clears that up a bit in
13:43 - terms of how you'd add those directories
13:45 - to your path environment variable in
13:46 - order to specify which commands you want
13:49 - to prioritize first now a lot of people
13:51 - want to have it set up so that you can
13:55 - use the Python command to open up Python
13:57 - 3 instead of using the Python 3 command
14:00 - and to make that work we can simply use
14:02 - an alias and I mentioned this earlier so
14:05 - to create an alias we can simply say
14:07 - alias Python is equal to Python 3 and
14:12 - again you want to make sure that you
14:13 - don't have any spaces between the
14:15 - variable and the values there so if I
14:18 - hit enter then now if I type Python then
14:22 - we can see that instead of python 2 7
14:24 - like it was using before now it's using
14:26 - this python 3.7 and the reason for that
14:30 - is because the Python command is now
14:32 - pointing to the Python 3 command so we
14:35 - can see this if I type exit and then let
14:38 - me clear the screen here now if I use
14:40 - that type command again so if I say type
14:42 - Python then we can see that it prints
14:45 - out Python is alias to Python 3 so then
14:49 - if you see that it's an alias if you
14:51 - want to find the location then you can
14:53 - just say type of python 3 just like we
14:56 - did before and then get the full
14:58 - location to that now the way that we've
15:00 - set this alias right now that will go
15:02 - away as soon as we restart our terminal
15:04 - so in order to make the alias permanent
15:07 - we're going to need to add that to our
15:08 - Bash underscore profile as well which is
15:11 - the same place that we just edited our
15:13 - path environment variable so I'm going
15:15 - to open that back up so that was nano
15:18 - dot Bash underscore profile and you have
15:21 - to be in your home directory then I'll
15:24 - just do this at the bottom so I'll go to
15:25 - the bottom and I will say alias Python
15:28 - is equal to Python 3 now if you install
15:33 - python 3 and it actually and
15:34 - stalled this as the command Python three
15:37 - then most likely it's using pip three
15:40 - for pip as well so we're also going to
15:43 - want to alias pip here also now if
15:46 - you're on a linux instead of a Mac then
15:48 - it may not have installed Pip with
15:50 - Python at all and you might have to
15:51 - install that through either the apt or
15:54 - YUM package manager depending on which
15:56 - version of Linux you're running but once
15:58 - you're sure that you have pip installed
16:00 - if it installed it as pip 3 then you can
16:03 - simply create an alias to that as well
16:05 - by saying alias pip is equal to pip 3 ok
16:10 - so now we can save these changes again
16:12 - by hitting ctrl X and then a Y for yes
16:15 - and then just an inner to keep the same
16:17 - file name and again we'll need to
16:19 - restart the terminal for those changes
16:21 - to take effect so I will restart that
16:25 - and maximize it there ok so first let's
16:27 - make sure pip is working so I will say
16:30 - type of pip we can see that it's alias
16:33 - to pip 3 so type of pip 3 and it's in
16:37 - this location here which is the same
16:40 - location as my Python 3 command but that
16:43 - might not always be the case so you
16:45 - definitely want to watch out for that
16:46 - but now if we type in pip list then we
16:50 - can see that that works fine ok so now
16:53 - let's look at a couple more tips so
16:55 - let's say that your Python command is
16:57 - working but you have no idea which
16:59 - Python executable you're using or where
17:03 - it's located on your machine now this
17:05 - can definitely happen if you're using
17:06 - virtual environments or you have a lot
17:08 - of different versions of Python
17:09 - installed so let's say you type in
17:12 - Python and it says that you are running
17:16 - Python 3 7 now that doesn't really do
17:19 - you much good if you have 10 different
17:20 - virtual environments that are all using
17:22 - Python 3 7 so how can we actually see
17:26 - exactly which Python we're running so to
17:28 - find this out we can use the system the
17:32 - standard library so if we import sis now
17:36 - like I said that's a built-in module so
17:38 - you don't need to install anything so
17:40 - now we can simply look at sis dot
17:43 - executable and we can see there where
17:45 - our current executable is located
17:49 - so if that value is what you expect it
17:51 - to be then that's great but if it's not
17:53 - then using the value returned from sis
17:56 - not executable can help you to bug
17:58 - what's going on if it's not the
17:59 - directory that you think it should be so
18:01 - if you think it should be something else
18:03 - then you'll have to check your path and
18:05 - try to figure out why that executable is
18:08 - being seen before the executable that
18:10 - you think it should be so there might
18:12 - need to be some rearrangement with the
18:13 - path variable like we saw a second ago
18:15 - and again if you want to view your
18:17 - entire path from within the command line
18:19 - then you can simply do that with the
18:22 - echo command so again I will exit that
18:24 - and say echo dollar sign uppercase path
18:28 - then you could compare this executable
18:30 - location here with your path and if
18:34 - you're having any issues with that then
18:35 - echoing that out might make it obvious
18:37 - why it's running one Python command
18:39 - instead of another okay so now let me
18:42 - clear my screen out here so I also get a
18:46 - lot of questions from people who tell me
18:48 - that they've and pip installed a package
18:50 - but when they try to import that package
18:52 - it doesn't work so this can also be a
18:55 - path issue so Python and pip are two
18:57 - separate commands and therefore it could
19:00 - be located in two different places so if
19:02 - your path is messed up then it's
19:04 - entirely possible that what you're
19:06 - installing with pip isn't installing
19:08 - that package for the version of python
19:10 - that you think it's installing it for so
19:13 - for example let's say that I wanted to
19:15 - install Jango so I could just simply say
19:18 - pip install Jango and when I run that we
19:21 - can see that we already have this
19:23 - installed and it also gives me the
19:25 - location where Jango is installed it
19:27 - says that it's already satisfied and
19:29 - it's in this location here so that is in
19:33 - the cite packages folder of that Python
19:35 - 3 location that we saw before now
19:38 - another way to get this location of a
19:39 - package it's use the pip show command so
19:42 - if I do
19:43 - pip show Django and run that then it
19:47 - gives us a lot of information here but
19:49 - one of these is the location so we can
19:51 - see here it's in this site packages
19:54 - directory so if you're trying to import
19:56 - a package that you've installed and it
19:58 - says that it can't find the package then
20:00 - make sure that the location of
20:02 - the package is actually in that site
20:04 - packages directory of the version of
20:06 - Python that you're using so if I open up
20:09 - Python here and I do you know import
20:13 - Django then we can see that that works
20:16 - now if that didn't work then you might
20:18 - be confused because maybe you did a pip
20:20 - install and it looked like everything
20:22 - went fine but in that case you want to
20:25 - do that pip show of the package and make
20:27 - sure that this location here matches
20:30 - what you get from that sis not
20:33 - executable so I'll say import sis then
20:36 - pronounce sis not executable and we can
20:39 - see that we have this location here and
20:43 - that's also where it's looking for our
20:46 - Django package in our site packages
20:48 - directory so we know that that's going
20:50 - to work if those are in two different
20:52 - locations then that gives you your
20:54 - answer to why your package isn't
20:57 - importing correctly because that would
20:58 - mean that your pip is actually
21:00 - installing that package to a different
21:02 - version of Python and again just like
21:05 - with the other problems that we've
21:06 - talked about in this video so far that
21:08 - would be a path environment variable
21:10 - issue and you would have to debug that
21:13 - and figure out you know why those
21:15 - commands are not running like you think
21:17 - they should and you might need to
21:18 - rearrange those directories in your path
21:20 - environment variable ok so now let me
21:22 - exit this and clear the screen now I
21:26 - think that that's everything I wanted to
21:27 - cover in terms of figuring out how to
21:29 - set your Python path and see which
21:31 - executable you're using but another
21:33 - thing that I should mention is that we
21:36 - mainly covered the command line in this
21:38 - video but sometimes I get questions from
21:40 - people who are using an editor like
21:42 - sublime text or something similar and
21:44 - they tell me that their command line is
21:46 - using the correct version of Python but
21:48 - that their editor is not so for example
21:51 - sometimes people will tell me that F
21:54 - strings aren't working for them and that
21:56 - they have Python 3.6 installed well most
22:00 - likely that means that your editor just
22:02 - isn't using Python at 3:6 even though
22:04 - you installed it and a good way to
22:06 - determine that would be to compare that
22:08 - sis not executable value that we saw
22:11 - before
22:12 - so some editors might have a different
22:14 - way of determining which version
22:15 - a Python that they're using instead of
22:17 - just looking at your path now in sublime
22:19 - text they use something called build
22:21 - systems and I have a completely separate
22:23 - video on how to set up sublime text
22:25 - build systems but understanding what we
22:27 - covered in this video here should help
22:29 - you better figure out which directories
22:31 - you'll need to add to those built
22:32 - systems in order to get them properly
22:34 - set up and you may need to do something
22:37 - similar with other editors or IDs as
22:39 - well depending on what you're using but
22:42 - really quick let me show you a fast
22:44 - example using sublime text so I'm going
22:47 - to pull up my sublime text here where I
22:49 - just have a simple file now I'm not
22:52 - gonna go into too much detail here since
22:54 - this isn't exactly a sublime text
22:56 - tutorial but you know this is something
22:59 - that you could use to debug other
23:00 - editors and IDs as well if it's not
23:03 - using the version of Python that you
23:05 - think it should be using so really quick
23:07 - I'll just show you how I've set this up
23:09 - on mine to switch between Python 2 and
23:11 - Python 3 so I have a demo file here
23:14 - where I'm just printing out the system
23:17 - and the Cystic you table so if I run
23:22 - this right now then you can see that
23:24 - right now it's running Python 3 7 and
23:27 - it's using the executable that we saw
23:30 - before from that library frameworks 3.7
23:34 - bin folder but what if instead I wanted
23:37 - to use a different version of Python or
23:39 - I wanted to use a Python from a virtual
23:42 - environment so to do that I would need
23:45 - to create a new build system so if I
23:47 - come up here in sublime text and go to
23:50 - tools and then build system then at the
23:53 - bottom here we can see that I can go to
23:55 - new build system now if you create a new
23:58 - build system then it's basically just
23:59 - going to give you a JSON document where
24:02 - there are a couple of things that you
24:03 - need to set now one of those will be
24:05 - which Python executable that you want to
24:08 - use so I am NOT going to do a new build
24:11 - system now I already have one created
24:12 - here you can say I have a Python a27
24:15 - here so let's say I wanted to use Python
24:17 - 2 7 well I have that build system opened
24:20 - up and we can see that I have a couple
24:22 - of different things set here now again
24:23 - I'm not gonna go into this fully since I
24:26 - have a completely different video on
24:27 - this but you can see
24:29 - here that within my command I there is a
24:32 - place here where I'm passing in the full
24:35 - path to my Python 2:7 command here and
24:39 - the user bin directory and that is what
24:42 - runs Python at 2.7 so now if I go back
24:45 - to that same file that gave us Python 3
24:47 - 7 before and I changed this build system
24:51 - to be Python 2 7 instead if I run that
24:54 - then you can see that now our version
24:56 - says 2 7 and our executable says user
25:00 - bin Python and technically we should
25:02 - change the syntax of that print
25:04 - statement to be Python 2 7 at this point
25:06 - but that's ok as is for now it's just a
25:08 - demonstration so in this example we set
25:10 - this up to where the executable points
25:13 - to you know Python 2 but you could also
25:15 - set that up to set to you know a virtual
25:18 - environment or anything like that
25:20 - speaking of which lastly I would also
25:22 - briefly like to talk about virtual
25:24 - environments now if you've never used a
25:26 - virtual environment it's basically a way
25:28 - to have separate Python environments per
25:31 - project and that also includes separate
25:34 - Python executables and packages now you
25:36 - might be wondering if you'd have to go
25:38 - through this whole path process every
25:40 - time you activate and deactivate a
25:42 - virtual environment but in the command
25:44 - line you won't have to do that when you
25:47 - activate and deactivate a virtual
25:48 - environment and the command line there
25:50 - is usually code included that
25:52 - automatically adds and removes those
25:54 - directories to the beginning of your
25:56 - path for you so you shouldn't have to
25:58 - worry about it so for example let me
26:00 - pull back up my command line here and
26:03 - let me activate one of my virtual
26:05 - environments this is a condo virtual
26:07 - environment and this is what I used in
26:09 - my flask
26:09 - series so to activate this environment I
26:12 - can do source anaconda and that is with
26:15 - within a bin - activate and the name of
26:18 - that of that environment was flask blog
26:21 - so if I run that then we can see that
26:25 - now we get this blast blog in
26:26 - parentheses so we can kind of tell we're
26:28 - in a virtual environment but now if I
26:31 - say which Python then you can see that
26:34 - my Python command is now pointed to this
26:38 - directory here - this executable it's
26:40 - within this anaconda and var
26:43 - mence flask blog bin directory so that
26:45 - means that that directory was
26:47 - automatically added to my path so just
26:50 - to test that let me echo out my path so
26:51 - I'll do echo path and we can see that
26:55 - that bin directory for that flask blog
26:58 - environment is at the beginning of my
27:00 - path now so that is the Python command
27:02 - that it sees now actually my Python
27:05 - command should still be aliased to
27:07 - Python 3 and it is but that directory
27:10 - also here in this virtual environment
27:13 - also has a Python 3 command so that is
27:16 - why that is working for both of those
27:18 - now again if I wanted to be absolutely
27:20 - sure that it was using the correct
27:21 - executable then I could run Python and
27:24 - then import sis and look at that sis not
27:27 - executable like we saw before now when
27:30 - it comes to using virtual environments
27:31 - with different IDs or different editors
27:34 - so for example using an editor like
27:36 - sublime text or anything else then
27:38 - you'll just have to do a search online
27:40 - and see exactly how to set those up in
27:43 - order to use the environment within that
27:45 - editor so in sublime text
27:47 - it's the build systems that we saw here
27:49 - so you just have to go in and create a
27:51 - build system using the Python executable
27:53 - for that environment but I'm sure that
27:55 - it's different within other editors and
27:58 - in the next couple of weeks I'm going to
28:00 - be doing a video on the newest official
28:03 - way to handle virtual environments using
28:04 - pip env so if you're interested in
28:07 - learning more about virtual environments
28:09 - then be on the lookout for that video ok
28:11 - so let me clear out my screen here ok so
28:14 - in this video we've gone over one of the
28:17 - most common forms of questions that I
28:19 - get among people who are just getting
28:20 - started out with Python so it's common
28:23 - when people are first getting started
28:24 - out to occasionally get stuck in these
28:26 - same places now when it comes to getting
28:28 - started out in computer science in
28:30 - general that same concept applies the
28:33 - most common questions I see there have
28:35 - to do with the fundamentals such as data
28:37 - structures or algorithms now a great
28:40 - resource for learning and practicing
28:41 - those common fundamentals would be our
28:43 - sponsor for this video
28:45 - brilliant org brilliant is a
28:47 - problem-solving website that helps you
28:49 - understand underlying concepts by
28:50 - actively working through guided lessons
28:52 - they have computer science courses
28:54 - ranging from algorithms and data
28:55 - structures to
28:56 - learning and neural networks they even
28:58 - have a coding environment built into
29:00 - their website so that you can run code
29:02 - directly in the browser and that's a
29:03 - great way to complement watching my
29:05 - tutorials because you can apply what
29:06 - you've learned in their active
29:07 - problem-solving environment and that
29:09 - helps to solidify that knowledge there
29:11 - are guided lessons will challenge you
29:12 - but you also have the ability to get
29:14 - hints or even solutions if you need them
29:16 - it's really tailored towards
29:17 - understanding that material so they're
29:19 - computer science material is fantastic
29:21 - and I really like what they're doing
29:22 - they also have plenty of courses
29:24 - depending on what you're most interested
29:25 - in so they have courses in different
29:28 - fields of mathematics or astronomy solar
29:31 - energy computational biology and all
29:33 - kinds of other great content so to
29:35 - support my channel and learn more about
29:36 - brilliant you can go to brilliant org
29:39 - ford slash CMS to sign up for free and
29:42 - also the first 200 people that go to
29:44 - that link will get 20% off the annual
29:47 - premium subscription and you can find
29:49 - that link in the description section
29:50 - below and again that's brilliant org /c
29:54 - m/s okay so I think that is going to do
29:57 - it for this video hopefully now you have
29:59 - a good idea for how you can manually set
30:01 - the Python path if you need to and also
30:04 - how you can switch between different
30:05 - versions and executables but if you do
30:08 - have any questions about what we covered
30:09 - in this video then feel free to ask in
30:11 - the comment section below and I'll do my
30:12 - best to answer those and if you enjoy
30:14 - these tutorials and would like to
30:15 - support them
30:15 - then there are several ways you can do
30:17 - that the easiest ways to simply like the
30:18 - video and give it a thumbs up and also
30:20 - it's a huge help to share these videos
30:21 - with anyone who you think would find
30:23 - them useful
30:23 - and if you have the means you can
30:25 - contribute through patreon and there's a
30:26 - link to that page in a description
30:27 - section below be sure to subscribe for
30:29 - future videos and thank you all for
30:30 - watching
30:33 - you
30:42 - you