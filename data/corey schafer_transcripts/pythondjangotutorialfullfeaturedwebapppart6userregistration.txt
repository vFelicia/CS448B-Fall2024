00:00 - hey there how's it going everybody in
00:01 - this video we're gonna continue our
00:02 - django series by learning how to use
00:04 - forums and also how to validate user
00:06 - input to create a user registration page
00:09 - so the application that we're creating
00:10 - is going to have the ability for users
00:12 - to create an account login make posts
00:15 - and things like that and the first part
00:17 - of that process is to create the
00:19 - registration page where a user can
00:21 - create an account on the website and
00:23 - then be able to log in and log out now
00:25 - the admin page that we've seen in
00:26 - previous videos might be good enough if
00:28 - you're the only person using your site
00:30 - but if you're making an application that
00:31 - anyone else can sign up to or will be
00:34 - using you know something like a Twitter
00:35 - or YouTube or something like that then
00:37 - you'll have to have another way for
00:40 - people to create an account and log in
00:41 - to your page other than the admin page
00:44 - because none of those sites I just
00:46 - mentioned give you access to their admin
00:48 - sites when you're ready to make an
00:50 - account or write post you know they
00:52 - provide front-end forms for you to do
00:53 - that kind of stuff
00:54 - so that's what we're going to be doing
00:56 - in this video so let's go ahead and get
00:58 - started now the first thing that we
00:59 - should do is to think about how the user
01:01 - logic will relate to our project as a
01:03 - whole so the user account portion of our
01:05 - project is going to have its own forms
01:07 - and templates and routes and things like
01:10 - that and that is logically going to be
01:12 - separate from the blog itself so the
01:15 - best thing to do here would probably be
01:16 - to create a new app inside of our
01:19 - project where all of that is going to be
01:21 - contained in its own section that way we
01:24 - know when we want to update something
01:26 - with our user accounts then we'll know
01:28 - exactly where to look we can just look
01:29 - in a users and a user app so first of
01:33 - all let's go ahead and create a new app
01:34 - and we've already seen how to do this
01:36 - when we created our blog app so in our
01:38 - command line we need to be navigated to
01:40 - our project directory so this is going
01:42 - to be where that manage py file is
01:44 - located and to create our users app we
01:47 - can simply say whoops let me click on
01:49 - here we can simply say Python manage py
01:52 - start app and now the name of our app
01:55 - and we'll just name this app users and
01:57 - so that will create the app that will
01:59 - handle all of the user logic for us so
02:01 - now if we open our project in an editor
02:03 - then we should be able to see our new
02:06 - users app within our project ok so now
02:08 - we can see that it did create that new
02:10 - users app so now we have our blog and we
02:13 - have
02:13 - our users apps and then we have our
02:15 - Django project main project folder okay
02:18 - so now we can see that we have that
02:20 - users app and now we want to create a
02:23 - user registration page where users can
02:25 - sign up and create accounts from the
02:27 - front end of our website now first of
02:29 - all remember what I said when we created
02:32 - our blog app when we first create a new
02:34 - app let's go ahead and immediately add
02:36 - it to our installed apps list in our
02:38 - project settings and that will save us a
02:40 - lot of headache and debugging if we
02:42 - forget to do that so I'm going to open
02:43 - up our project settings py file and then
02:46 - I'll scroll down here to our installed
02:48 - apps now we can see that we added the
02:51 - blog dot apps dot blog config now you
02:53 - can probably guess what this will be
02:55 - it'll probably be users dot apps dot
02:58 - users config but just to make sure if
03:00 - you always if you want to check that you
03:02 - can just open up your app so I'll open
03:05 - up the users app here and go to that
03:07 - apps dot py file within there and then
03:10 - that is where your user config class is
03:12 - going to live so this is what we want to
03:15 - add to our installed apps so I'll go
03:18 - back to our installed apps here and
03:19 - remember this is a string so there's
03:22 - going to be users dot apps dot users
03:26 - config and don't forget to put a comma
03:28 - after that because that installed apps
03:29 - is a list ok so now first things first
03:32 - let's start with the view that will
03:34 - handle the logic for this register route
03:36 - so we won't create the URL pattern just
03:40 - yet so first let's open up our views dot
03:44 - py module within our users app and we
03:47 - can see that this is a fresh views file
03:49 - and now let's create a register view so
03:52 - right here where it says create your
03:53 - views we'll create a register view and
03:56 - that's just a function and remember that
03:59 - this has to use the request so we will
04:03 - pass that in and now we need to create a
04:05 - form that is going to be passed to the
04:07 - template that we will create for this
04:09 - view now if you were to create forms
04:11 - from scratch then it can get pretty
04:13 - complicated pretty fast so you'd have to
04:15 - put in different kinds of validation
04:17 - checks to make sure that the user was
04:19 - inserting information correctly make
04:21 - sure that they're hashed passwords
04:23 - matched you might have to write some
04:24 - regular expressions to make sure that
04:26 - there
04:26 - that they entered a valid email and all
04:29 - kinds of things that can be extremely
04:30 - complicated but luckily this process is
04:33 - so common that we don't have to reinvent
04:35 - the wheel here so Django takes care of a
04:37 - lot of this stuff for us on the backend
04:39 - so this is kind of similar to the
04:40 - database models in the sense that we can
04:43 - create Python classes and these classes
04:45 - generate HTML forms for us and some
04:48 - classes already exist so for example we
04:51 - want a registration form so users can
04:54 - sign up for our site now in this case we
04:56 - can simply use the user creation form
04:58 - that already exists in Django so like I
05:01 - said these forms will be classes that
05:03 - will get converted into HTML so we can
05:06 - create our own forms and we'll do that
05:08 - in just a bit
05:09 - but for now if we want a form to create
05:12 - a new user then Django already provides
05:15 - that kind of form for us we just need to
05:17 - import it so we can import this up here
05:20 - at the top simply by saying from Django
05:23 - dot contrib dot auth dot forms import
05:29 - user creation form and it's easy to mess
05:33 - these up make sure all of this is
05:34 - spelled correctly ok that looks good ok
05:37 - so now let's use this form and our
05:38 - register view now to do that we just
05:41 - need to simply create an instance of the
05:42 - form so I can just say form is equal to
05:45 - user creation form and put the
05:47 - parentheses there to create a new
05:49 - instance and now let's render a template
05:51 - that uses this form now this template
05:53 - doesn't exist yet but we'll create it in
05:56 - just a second so let's go ahead and
05:58 - render this so I'll just say return
06:00 - render and remember the first argument
06:04 - to render is the request object and now
06:07 - our template so we haven't created this
06:09 - template yet but we will in just a
06:11 - second so I will create this in users
06:13 - forge slash register dot HTML and now
06:17 - let's pass in our form as the context to
06:20 - that template so that we can access the
06:22 - form from within the template and
06:24 - remember to do that we can just simply
06:26 - pass in a dictionary and we want to
06:29 - access that from a variable of form and
06:32 - the value that we want that to have is
06:34 - the new instance of our user creation
06:37 - form that we just created there ok so
06:39 - now we just need to
06:40 - the template that uses this form
06:42 - variable that we just passed in so to
06:44 - create this we can create a templates
06:48 - directory within our users app just like
06:50 - we did with our blog app so I'll say new
06:53 - folder and I'll call this templates and
06:56 - then remember within templates it's the
07:00 - Django Convention to now create another
07:02 - subdirectory with the name of the app so
07:05 - this we are in the users app so I'm
07:07 - going to create another new folder and
07:09 - call this users and now within this
07:12 - users subdirectory and templates we can
07:15 - create our template and we want this to
07:17 - be register dot HTML and just like we
07:21 - saw in our templates video we're going
07:23 - to want to extend the base template and
07:25 - then a fill in our content block so just
07:28 - to get us started let me go ahead and
07:30 - grab a template that already exists that
07:33 - has some of this information filled in
07:35 - so I'm just gonna use the about template
07:37 - from our blog app so I'm going to copy
07:39 - all of that and paste this into our
07:41 - register template so we can see here
07:44 - that we're extending the blog base HTML
07:46 - template so even within our users app we
07:50 - can reference templates from our blog
07:52 - app which is really nice and now we want
07:54 - to put our form in a div with a class of
07:57 - content section so I'm going to create a
08:00 - new div here and let's give this a class
08:04 - and this is just a custom class that is
08:06 - within our CSS file that we've already
08:08 - added and I'm gonna call this content
08:11 - section and that part's just for styling
08:13 - the important part here is the form so
08:15 - now within this div we're going to
08:17 - create a new form and our form let's
08:21 - give this a method equal to post and if
08:25 - you don't know what that post method
08:26 - means then don't worry about it quite
08:27 - yet we'll talk about that here in just a
08:29 - second but now let's go ahead and
08:31 - continue with our form so within our
08:33 - form we need to add something called a
08:35 - CSRF token now this is a hidden tag and
08:39 - it is something that you need to add
08:40 - here but don't worry too much about what
08:42 - it does it's adding something called a
08:45 - CSRF token or a cross-site request
08:48 - forgery token and this will protect our
08:50 - form against certain attacks so it's
08:53 - just some added
08:54 - security that Django requires so we're
08:56 - gonna need to add this to every form but
08:58 - don't worry too much about the
08:59 - underlying details now if you don't have
09:02 - it then your form won't work so we have
09:04 - to put it in so at the top of our form
09:06 - here inside of our form are going to put
09:08 - a code block there and we'll say CSRF
09:12 - underscore token and once we have that
09:15 - token in place now we can simply access
09:17 - the form variable that we passed in to
09:20 - the context of this template but first
09:22 - I'll put in a fieldset tag which is used
09:25 - to group related elements in a form and
09:27 - I'll also add a legend for our form as
09:30 - well so I will say field set and within
09:34 - fields set I will give this a class
09:37 - equal to form
09:39 - - group this is just a bootstrap class
09:42 - and now I'll give this form a legend and
09:45 - this will just give our form a little
09:48 - bit more detail all right so I'm going
09:50 - to give this some bootstrap classes as
09:51 - well so I'm going to give this a class
09:53 - of border - bottom and also MB which is
09:59 - margin bottom of 4 so we'll save that
10:01 - and we will give the form a legend of
10:06 - join today okay so with those in place
10:09 - now let's just print out our form so we
10:12 - can simply just access that form
10:15 - variable that we passed into the context
10:17 - just like this and that should print out
10:20 - our entire form so just specifying that
10:22 - form variable will display all of the
10:24 - form labels and fields that we need but
10:26 - we also need a submit button for our
10:29 - form as well and that's not going to be
10:30 - included in the form so we'll add this
10:32 - after the field set and we'll add some
10:35 - styles to this as well just to make it
10:37 - look a little nicer so I will give this
10:40 - put this in a div and this div I will
10:44 - give a class of form - group and within
10:48 - this div let's create a button and this
10:50 - is going to be our submit button so we
10:53 - can just have this button say sign up
10:55 - and now let's also give this button some
10:58 - bootstrap classes as well so it looks a
11:00 - little nicer so I'll give this a
11:01 - bootstrap class of VT n which is button
11:04 - then BTN - outline
11:07 - info and we also have to specify the
11:10 - type of this button so this type of
11:12 - button is a submit button so that's all
11:15 - lowercase there so this is a submit
11:18 - button with sign up text okay and lastly
11:21 - let's add one more thing here so
11:22 - remember that we're creating a register
11:25 - page where new users are going to create
11:27 - accounts now in a lot of websites you'll
11:30 - see where they have a link on the
11:32 - register page that says do you already
11:34 - have an account if you already have an
11:36 - account then just go sign in instead of
11:38 - creating a new account so let's put
11:40 - something like that here as well so
11:41 - let's put this under our form so
11:44 - underneath our form I'm going to put
11:46 - another div and let's give this some
11:49 - classes as well just to separate this
11:51 - out a little bit I'll give this a class
11:53 - of border - top and then also I'll give
11:58 - it a padding top of three so PT - 3 and
12:03 - now let's just put some small text here
12:04 - at the bottom that says do you already
12:06 - have an account well if so then just go
12:07 - ahead and go sign in so we'll have this
12:09 - be small text and we'll also give this a
12:12 - class equal to text muted which in
12:16 - bootstrap is just some kind of you know
12:19 - dull text that doesn't stand out a lot
12:21 - so the text here will say already have
12:25 - an account question mark and let's
12:29 - actually spread this out on two lines
12:31 - here so we can see everything so after
12:36 - the question mark here then we'll just
12:38 - say already have an account and then put
12:40 - a link to the signup page or to the
12:42 - sign-in page so I'll create an anchor
12:43 - tag here and that anchor tag will just
12:46 - have that go nowhere for now so I'll put
12:48 - that hashtag or pound sign there and I'm
12:51 - also going to give this a class here
12:53 - with a margin left so I'll say ml - 2
12:57 - which is a margin left with a value of 2
12:59 - that way it's just split up from this
13:01 - text a little bit so now within this
13:04 - link we'll just have this link say sign
13:07 - in so I think this is a good template
13:09 - for our register page right now we'll
13:11 - add some additional validation feedback
13:13 - to this form later on okay so our
13:16 - register page is almost ready to go we
13:18 - only need to do one more
13:20 - we need to create a URL pattern that
13:22 - uses our register view so that we can
13:26 - navigate to this page in the browser so
13:28 - in our blog app we created our own urls
13:31 - module for the blog and we could do the
13:34 - same thing here but I'm going to hold
13:36 - off on that for now and just import our
13:38 - view directly within our projects URL
13:41 - spy module and create a URL pattern for
13:43 - it there so let me show you what I mean
13:45 - so let's open up our actual projects
13:50 - URLs module and this is the one that has
13:53 - the path to our admin page and the empty
13:56 - path to our blog URLs so like I was
13:58 - saying we could have created a URLs
14:00 - module inside of our users app like we
14:02 - did with our blog and then included it
14:04 - within a pattern here but instead I'm
14:07 - just going to use the view directly by
14:09 - importing it so I'll say from users
14:12 - import views and we'll import that as
14:16 - user underscore views because it's
14:19 - possible to import multiple views so you
14:22 - want to you know change this to whatever
14:24 - app it is with the underscore views
14:26 - there okay so now let's create a URL
14:28 - pattern that uses our register view so
14:32 - underneath admin here I will create
14:34 - another path and the path that we want
14:38 - to use will say if they go to ford slash
14:41 - register then we want to send them to
14:46 - the register view that we just created
14:47 - so that would be user views dot register
14:51 - and let's also give this a name as well
14:53 - so I'll say name is equal to and we'll
14:56 - just set that name equal to register and
14:59 - also at the end here just like with our
15:02 - other URL patterns this is a list so
15:04 - don't forget the comma there it's easy
15:05 - to forget the commas within these lists
15:08 - okay so now let's view our application
15:10 - in the browser and make sure that
15:12 - everything that we've done so far is
15:13 - working so let's save all of this and
15:16 - all of this looks to be saved now I'll
15:18 - bring up my terminal and make sure that
15:21 - our development server is running and
15:24 - it's not right now so say python managed
15:26 - up UI run server and run that we didn't
15:29 - get any errors so that's good and now
15:31 - let's pull this up in
15:33 - our browser so we'll go to localhost
15:35 - port 8000 and now let's go to that
15:38 - register route and see if everything
15:40 - works I'll go to forge slash register
15:43 - and run that and we can see that it did
15:45 - work we have a page here with a legend
15:48 - of join today and we have a user
15:50 - registration form here now even with the
15:52 - styles that we added in this isn't very
15:53 - pretty but we'll fix this with better
15:56 - styles in just a minute but for now
15:58 - there's one small change that we can
16:00 - make to make this look slightly better
16:02 - and that is to use a form method call
16:05 - called as underscore P which will render
16:09 - our form and paragraph tags and at least
16:11 - that will split this up into a few more
16:14 - lines than it is now so let's go back to
16:17 - our register template and make that
16:18 - small change so for now notice here how
16:21 - password
16:23 - you know flows onto this next line here
16:26 - and it just doesn't look very good at
16:27 - all so let me go back to our register
16:31 - template which we have open here and
16:33 - where we printed out that form we're
16:35 - gonna use this as p method so i'll say
16:38 - dot as underscore p and that will render
16:42 - our form in paragraph tags so now if we
16:45 - go back and reload this page then now
16:48 - that split up a little bit so now this
16:51 - password is on its own line it still
16:53 - doesn't look great
16:54 - but we'll improve this with better
16:56 - styles in just a second but that's a
16:57 - small improvement okay but we can see
16:59 - that how by using that user creation
17:02 - form it gave us all of this out of the
17:04 - box it has a username a password field
17:07 - and a password confirmation field and
17:09 - it's also printing out all of the
17:11 - validation stuff that the user needs so
17:14 - it is showing us the character limits
17:16 - here it's telling us that the password
17:18 - you know has to contain at least 8
17:20 - characters can't be commonly used
17:21 - passwords and stuff like that so it's
17:24 - really nice that we get all of that
17:25 - stuff out of the box without even
17:26 - needing to write a form for ourselves
17:28 - now what happens if we fill this out
17:31 - right now so if I fill this out with
17:33 - some info here so I'll try to create a
17:36 - new user called new user set the
17:39 - password to testing 3 2 1 testing 3 2 1
17:42 - and
17:43 - sign up so when we submit that we can
17:46 - see that it just redirects us back to
17:47 - the current page and wipes out all of
17:49 - the information that we just entered
17:51 - it's not really doing anything with that
17:53 - information right now so if we were to
17:55 - open our admin page right now then we
17:57 - would see that there were no new users
17:59 - that were being created whenever we just
18:01 - submitted that and the reason it's not
18:03 - doing that is because this is performing
18:06 - a post request on our register route
18:08 - with the form information that we
18:10 - submitted but we're not doing anything
18:12 - with that information yet so if we go
18:15 - back to our register view so we'll open
18:17 - this up and close these down and just
18:21 - look at our register view here then we
18:23 - can see that any requests that comes
18:25 - into this route
18:26 - we're simply creating a blank form and
18:29 - rendering it out to the template so for
18:32 - those of you who know about HTTP
18:35 - requests there are different types of
18:37 - requests that way you can have the most
18:39 - basic kind are get requests and that's
18:41 - what you send when you just navigate to
18:43 - the page and normally and there are also
18:45 - post requests and when we created our
18:48 - form we said that the method that we
18:50 - wanted to use for that form was post and
18:53 - since we didn't specify where to post
18:56 - that form data it actually just posts it
18:58 - right back to this route so we can put
19:02 - in a conditional and specify that if we
19:04 - get a post request then we can try to
19:06 - validate our form data because that post
19:09 - request is going to contain that data in
19:12 - the message body so we'll put in a
19:14 - conditional to specify that if we get a
19:16 - post request then we'll try to validate
19:18 - that form data and if it's a get request
19:20 - then we'll just simply do what we're
19:22 - doing now by displaying a blank form so
19:24 - let's put a check in place so to do this
19:27 - we can at the top here just say if
19:30 - request dot method is double equal to
19:35 - which checks for equality string of
19:37 - uppercase post then we want to let me
19:42 - copy this form creation here then what
19:44 - we want to create a form that has the
19:47 - request dot post data and then we can
19:51 - put in our else so anything that is not
19:54 - a post request we will just create
19:57 - a blank form okay so again at this point
20:00 - if we get a post request then it
20:02 - instantiate a user creation form with
20:04 - that post data but with any other
20:07 - requests it just instantiate SAN empty
20:09 - form and that post data will most likely
20:12 - be the data from our form but really it
20:14 - could be anything so we're going to need
20:16 - to validate it so that we know that
20:18 - we're getting the fields and data that
20:20 - we expect and to do this we can use
20:22 - another conditional within you know
20:25 - after we instantiated with the post data
20:27 - we can say ok well is our form valid so
20:31 - we can say if form dot is underscore
20:35 - valid and as you can tell by the name
20:37 - this will tell us if our form is valid
20:40 - when it is submitted and if that data is
20:43 - valid then let's go ahead and grab the
20:45 - username that was submitted for now so
20:48 - to do this we can simply say username is
20:51 - equal to form dot cleaned underscore
20:55 - data dot get and we want to get that
20:59 - username so the validated form data will
21:02 - be in this form dot cleaned data
21:05 - dictionary and this will have been
21:08 - nicely converted into Python taught
21:10 - types for us from the form so now I'm
21:14 - going to use something called a flash
21:15 - message to show that we've received
21:17 - valid data a flash message is an easy
21:20 - way for us to send one-time alerts to a
21:22 - template that will only just be
21:24 - displayed at once and will disappear on
21:26 - the next request so first we have to
21:28 - import this so at the top here I can say
21:32 - from Django dot country import messages
21:37 - and now we can add a message by
21:39 - specifying what kind of message we'd
21:41 - like to add so there are different types
21:43 - of messages here so just let me type all
21:45 - of these out so there is message dot
21:48 - debug and I will copy this there is also
21:52 - message dot info there is message dot
21:56 - success
21:57 - there's message dot warning and there is
22:00 - message dot error so since we're going
22:04 - to display a message if our form data is
22:06 - valid let's use this message dot success
22:09 - since our data was valid
22:11 - so I'm going to just copy that one and
22:13 - I'll get rid of the other ones here I
22:14 - just wanted to show you the options that
22:16 - we have and within our form is valid
22:19 - conditional I'm gonna say message and
22:22 - this should be message is sorry messages
22:24 - dot success because messages is what we
22:27 - imported messages dot success and the
22:29 - first argument here is the request so
22:32 - we'll pass in that request and now we'll
22:35 - pass in our message so I'm going to use
22:37 - an F string here and F strings are only
22:39 - available in Python 3 6 or above if
22:42 - you're not using Python 3 6 or above
22:44 - then you could use formatted strings so
22:46 - we'll say account created 4 and then we
22:50 - will just pass in that username in the
22:54 - placeholder ok so now that we've got our
22:56 - flashed message now let's redirect the
22:58 - user to a different page because you
23:00 - don't want to fill out a form and then
23:02 - just get redirected back to the same
23:04 - form after you submit it because that
23:06 - would be a little confusing depending on
23:08 - what the form is so instead let's
23:10 - redirect the user back to the home page
23:12 - now to do this we're going to need to
23:14 - import the redirect function and that is
23:17 - in the same shortcuts module as the
23:19 - render function so we can just come up
23:21 - here to the top and after render we can
23:23 - say import redirect as well and now
23:27 - after our added message we can just say
23:31 - that we want to return a redirect
23:34 - spelled that wrong there return a
23:36 - redirect to blog dash home and again
23:40 - we've seen this before but this blog -
23:42 - home is the name that we gave to our URL
23:45 - pattern for the blog home page okay so
23:48 - this should all work except for one
23:51 - thing we haven't added or we haven't
23:53 - updated our template to actually show
23:55 - the flashed messages yet so I'm going to
23:58 - put this within our base template so
24:00 - that any flash messages pop up on any
24:03 - page so let's open that up so our base
24:06 - template is within our blog app so
24:09 - within our blog app we'll open up our
24:11 - templates then there's a blog
24:13 - subdirectory in there and then we want
24:15 - to look in that base template and again
24:17 - the reason that I'm putting the messages
24:18 - here is because this is the template
24:20 - that gets displayed on every page with
24:22 - our navigation bar and things like that
24:24 - so putting the messages here will make
24:26 - sure that any message that we flash will
24:28 - show up on any page so I think a good
24:30 - place for our messages would be to
24:32 - display them right above our content
24:34 - block so I'm gonna scroll down until we
24:36 - see our content block here which we can
24:38 - see is in this div with the column of
24:42 - eight so right above our content block
24:44 - this is where we'll put our messages so
24:47 - to do this we can use a code block here
24:50 - so the curly braces with the two percent
24:54 - signs and let me get rid of that one
24:56 - there and within here we can put a
24:59 - conditional that says if messages and
25:02 - then we need to end that if statement as
25:06 - well so we'll say end if and now within
25:09 - this conditional if Django sees that we
25:13 - have flashed messages that we have sent
25:15 - into our template then now we can loop
25:18 - over those so I will put in another code
25:20 - block here and say for message in
25:24 - messages and again we will end this for
25:29 - loop by saying end for and now within
25:33 - this for loop now we can print out each
25:37 - flashed message so I will put this in a
25:39 - div and I will give this some bootstrap
25:43 - classes blue strap has some nice classes
25:46 - for alerts so I'll say class is equal to
25:49 - alert and we also want to specify what
25:53 - kind of alert this is now bootstrap has
25:55 - a class called alert - success and that
25:59 - is just this kind of nice green alert
26:01 - that they pop up now one nice thing
26:03 - about bootstrap and Django is that the
26:07 - messages are the same as the bootstrap
26:10 - alerts so for example we're using a
26:12 - success message here so if we just use
26:15 - that tag and say you know alert - and
26:20 - then pass in the message tag then it
26:22 - should you know say either success or
26:25 - info or danger or anything like that
26:28 - whatever type of message that is so to
26:30 - grab that message tag we can actually
26:32 - just get that by doing our double curly
26:35 - braces and saying message dot
26:37 - tags so for a success message this will
26:40 - be alert - success for an info message
26:43 - it'll be alert - info and things like
26:45 - that
26:46 - okay so now within our message div here
26:49 - now let's just print out the message so
26:52 - we will just access that with the double
26:54 - curly braces and specify that we want to
26:57 - see the message okay so now that we have
26:58 - that in place that should display our
27:00 - messages properly and now let's make
27:03 - sure that all of this works together and
27:04 - see if our forum validates properly so
27:07 - let's save every all the changes that we
27:09 - made and make sure that our dev server
27:12 - is still running and it is and now let's
27:15 - try to reload our page and see if our
27:18 - form submits successfully so I will try
27:21 - to create a new user I'll do a password
27:25 - of testing three to one testing three to
27:27 - one and signup so now we can see that we
27:30 - get directed back to our home page with
27:32 - a flash message that our account for new
27:35 - user has been created now we didn't
27:37 - actually create an account for that user
27:39 - we'll do that in just a second but now
27:41 - we know that our forms are at least
27:44 - validating correctly and giving us some
27:46 - kind of feedback now these flash
27:48 - messages are nice because like I said
27:50 - they are only one time alert so if I was
27:53 - to reload the homepage here then that
27:55 - alert goes away it was just a one-time
27:57 - thing
27:57 - now that current registration form that
27:59 - we have already does have some built-in
28:01 - validation so if I go back to that
28:03 - register route and if I was to fill this
28:07 - out incorrectly so if I was to you know
28:09 - try to create a user that already exists
28:11 - so we'll use that query MS user and I'll
28:14 - also put in passwords that just don't
28:17 - match so if we click sign up then we got
28:19 - some validation errors now these
28:21 - validation errors might be hard to see
28:22 - with our current styles but we can see
28:24 - right here it says a user with that
28:26 - username already exists and down here it
28:29 - says the two password fields didn't
28:31 - match and we can see that when that form
28:33 - was invalid it still gives us our
28:36 - username that we tried to input so it
28:38 - didn't just create a completely new form
28:41 - from scratch it still has the values
28:43 - that we had inputted there now the
28:45 - reason for that is because of how we set
28:48 - up our views so let's go back to our
28:49 - views and see exactly what this
28:51 - did so I'll go back to our view spy file
28:53 - so now let's walk through this process
28:55 - of an invalid form so when we submitted
28:59 - our form then it's submitted as a post
29:01 - request so it comes into this
29:03 - conditional here and it says was the
29:05 - request a post request and it was so
29:08 - then it comes in here and says okay well
29:10 - I want to create a new form and I want
29:13 - to create a form that has the data that
29:16 - was within request that post so then it
29:18 - has a new form with our username data
29:20 - and our two password fields and then it
29:23 - says okay is our form valid and that is
29:26 - whenever Django does the backend checks
29:28 - with our user creation form and the user
29:30 - creation form handles all of that for us
29:32 - and it says well no it's not valid
29:34 - because you already have a user name
29:35 - with this user name and also your
29:38 - passwords don't match so it never
29:40 - reaches this conditional here to return
29:43 - that success page instead it falls down
29:46 - to this return statement here and it
29:50 - just says you know render our registered
29:53 - HTML template with our form but remember
29:55 - our form was the one that was
29:57 - instantiated with our request data so
30:00 - it's still going to have those form
30:02 - fields filled in with the value that we
30:05 - had submitted and whenever it's all that
30:06 - our form was not valid it also added
30:08 - some error messages that it would pass
30:10 - along to that template as well so that's
30:12 - why those error messages also showed up
30:14 - okay so there are a few more changes
30:16 - that I'd like to make to our form so
30:18 - first let's set this up so that it's
30:20 - actually saving the user when our form
30:23 - validates and after we get that working
30:25 - then I'd like to add an additional field
30:27 - and have the user enter their email
30:29 - address as well because right now it's
30:31 - just their user name and lastly I would
30:34 - also like to get our form looking a lot
30:36 - nicer and also to display our validation
30:39 - feedback to our end users in a better
30:41 - format so that they know exactly what's
30:43 - wrong so that they can fix it quickly
30:45 - so first let's get this set up so that
30:48 - the user is actually created if the form
30:50 - is valid and this is pretty simple so if
30:53 - we go into our conditional where we
30:54 - check to make sure that the form data
30:56 - was valid then saving the user is just
31:00 - as simple as saying form dot save and
31:04 - that's it that's all we have
31:05 - so it couldn't be any easier than that
31:07 - now that will automatically hash the
31:09 - password to make that secure and
31:11 - everything else that it needs to do in
31:12 - the background so we don't need to do
31:14 - anything other than just run that save
31:16 - method so now with that in place if we
31:19 - go back to our browser and try to create
31:21 - a new user again so again let me make
31:24 - sure that our dev server is still
31:25 - running it is so now if I reload this
31:28 - register page and create a new user and
31:31 - testing three two one
31:34 - testing three two one and signup then
31:37 - now let's see if that user was actually
31:39 - created so I'm going to go to the admin
31:41 - page and I'm going to log in as my admin
31:43 - user which is core DMS testing three two
31:47 - one login and go to users and if I make
31:52 - this a little larger we can see that we
31:54 - have a new user here so our form was
31:56 - able to actually create that new user
31:58 - from the front end of our website but if
32:01 - we look at the email addresses form here
32:02 - we can see that our other two users have
32:04 - an email address but our new user
32:06 - doesn't now we don't want to have to you
32:09 - know go into the admin panel and add an
32:11 - email address for everybody after
32:13 - they've created an account we'd really
32:15 - just like that to be on our register
32:17 - form so let's add some more fields to
32:20 - our registration form so I'm going to go
32:24 - back to our site here and now let's pull
32:26 - up our register template so within our
32:31 - user templates I'm going to open up
32:34 - register HTML so we can see here in our
32:36 - register template that we're not
32:38 - printing out any of these fields
32:40 - individually all we're doing is printing
32:41 - out this single form and it's printing
32:44 - out all of the form all of the fields
32:45 - forests so in order to add a new field
32:48 - we actually have to add that to the form
32:51 - itself so how do we add a field to our
32:55 - user creation form so to do this we're
32:58 - going to actually need to create a new
32:59 - form that inherits from our user
33:01 - creation form so to do this we need to
33:04 - first create a file where we can put
33:05 - these new forms so I'll create another
33:08 - file in our users application directory
33:11 - and I'll call this forms dot py so
33:13 - within our root directory of our users
33:16 - app I'm going to create a new file
33:19 - and I'm gonna call this forms dot py
33:21 - okay so within this file we're going to
33:24 - create our first form that inherits from
33:26 - the user creation form so first we need
33:29 - to do a few imports so we need to import
33:32 - forms from Jango so we'll say from Jango
33:35 - import forms and then on the next line
33:38 - we need to import our user model so I'll
33:42 - say from Jango dot country dot auth dot
33:47 - models import user and lastly we will do
33:52 - an import on that user creation form so
33:55 - that is from Jango country birth dot
33:59 - forms import user creation form and now
34:05 - we'll create a new form that inherits
34:07 - from the user creation form so I'm going
34:09 - to create a new class a new form that
34:12 - inherits from that user creation form
34:14 - and I'm just going to type all this out
34:16 - for now and we'll go over this after I
34:18 - get this typed out so I'm going to call
34:20 - this user register form and then we want
34:23 - to inherit from that user creation form
34:26 - and now we want to add the fields
34:30 - additional fields that we want to this
34:32 - user creation form so I want the email
34:34 - so I'll say email is equal to forms dot
34:38 - email field now that can take an
34:41 - argument that is called required so we
34:42 - can set required equal to false if we
34:45 - don't want them to you know if it's
34:47 - optional for them to provide their email
34:48 - but the default is required is equal to
34:51 - true and I'm just going to leave the
34:53 - default so I'm not going to put anything
34:54 - there so now I'm going to do something
34:57 - here that might look a little strange I
34:58 - want to say class Mehta and within meta
35:01 - we're going to specify the model that we
35:04 - want this form to interact with so the
35:06 - model is going to be user because
35:09 - whenever this form validates it's going
35:11 - to create a new user and now we can say
35:15 - fields is equal to and this these are
35:19 - the fields that are going to be shown on
35:22 - our form so the fields that we want to
35:24 - be shown and end in what order also so
35:27 - we want to display the user name and
35:29 - then we want to them to fill out their
35:30 - email and then they need
35:32 - matching passwords so that field is
35:35 - going to be called a password one and
35:37 - then the password confirmation is going
35:39 - to be password to okay so let me talk a
35:42 - little bit more about this class Mehta
35:43 - here now this class Mehta gives us a
35:47 - nested namespace for configurations and
35:49 - keeps the configurations in one place
35:52 - and within the configuration we're
35:54 - saying that the model that will be
35:56 - affected is the user model so for
35:58 - example when we do a form dot save it's
36:00 - going to save it to this user model and
36:03 - the fields that we have here in this
36:05 - list are the fields that we want in the
36:07 - form and in what order okay so this is
36:11 - now our completed form so now we have a
36:14 - completed form that inherits from the
36:16 - user creation form and adds this email
36:19 - field and now we can just use this form
36:23 - in our view instead of the user creation
36:25 - form and then that should make it good
36:27 - to go so let's go back to our views here
36:30 - and at the top let's inherit the form
36:33 - that we just created so I will say from
36:36 - dot forms import and remember we called
36:40 - that user register form was a user
36:43 - register form or user registration yes
36:46 - user register form and now we can use
36:48 - this user register form with that email
36:51 - field instead of the user creation form
36:53 - and we need to replace this in both
36:56 - locations so we see that we have one
36:58 - instantiation here inside of the post
37:01 - request and we have one instantiation
37:03 - inside the get request so you want to
37:05 - save or you want to replace both of
37:07 - those so I'll replace both of those
37:08 - creation forms with user register form
37:11 - and now we're not using our user
37:13 - creation form anymore so we can just get
37:15 - rid of that and now I'll save my file so
37:18 - with those changes in place now let's
37:20 - make sure that we don't have any errors
37:22 - in our web server and we don't
37:24 - so now let's reload this in our browser
37:26 - so I'm gonna go to word slash register
37:29 - whoops spelled that wrong ford slash
37:31 - register and we should now see that
37:33 - there is a field for the email here so
37:37 - now if we create another user so now let
37:39 - me create a new user to and I will set
37:42 - their email equal to nu to
37:44 - at company.com and then put in a
37:48 - password of testing three two one
37:50 - testing three two one and sign up so now
37:54 - let's look at this new user to inside of
37:56 - our admin page so if I navigate to the
37:58 - admin page make this a little larger
38:00 - here and go to users then we can see
38:03 - that now we have a new user - and this
38:06 - new user - has an email address listed
38:08 - so it did work and it did submit that
38:11 - email address with that form and save it
38:13 - to the database okay so now we have a
38:15 - nice working form but one thing is that
38:18 - we really need to overhaul the style on
38:21 - this a bit so if I go to Ford / register
38:23 - we can see that this still isn't looking
38:25 - very good so right now it doesn't have
38:28 - the bootstrap styles that match the rest
38:30 - of our site and also we don't need all
38:33 - of this validation information displayed
38:35 - so large it can be a lot smarter a lot
38:38 - smaller and a lot more muted and also if
38:42 - there are any validation problems when
38:44 - we submit then we can display them in
38:46 - red so that they pop out a little bit so
38:49 - that it's more clear what the user needs
38:51 - to change in order to get the form to
38:53 - validate now in terms of adding classes
38:55 - to our form fields there are ways that
38:57 - we can set classes on our form fields in
38:59 - the form stop pie file that we just
39:01 - created but that's actually not a great
39:04 - place for them because I think that that
39:06 - mixes our presentation with our back-end
39:08 - logic and it would be better if we could
39:10 - do all of that
39:12 - styling within our template so instead
39:15 - to do this we're going to use a
39:16 - third-party Django application that
39:18 - makes working with forms a lot easier
39:20 - and this application is called crispy
39:23 - forms and it's a very popular way to do
39:25 - this on Django so crispy forms will
39:27 - allow us to put some simple tags in our
39:29 - template that will style our forms in a
39:32 - bootstrap fashion and there are other
39:34 - CSS frameworks that you can use with
39:36 - crispy forms as well so first we need to
39:39 - install crispy forms so to do this I'm
39:42 - going to bring up our terminal here
39:44 - where our dev server is running and I'm
39:46 - going to stop that for now and clear the
39:48 - screen and now we want to install crispy
39:51 - forms so to do this we can say pip
39:53 - install and this is Django - crispy -
39:58 - forms so let's install that and that
40:01 - installed successfully so once that is
40:02 - installed we need to tell Jango that
40:05 - this is an installed app and if we
40:07 - remember we can do this within our
40:09 - projects settings module so let's open
40:11 - up our project settings module
40:15 - so within Django project open up
40:17 - settings let's go down to installed apps
40:20 - and right underneath our users config
40:23 - I'm gonna add in that crispy forms so
40:26 - I'll say crispy underscore forms and
40:30 - then don't forget the comma since this
40:32 - is a list and while we're here in our
40:34 - settings let's also tell crispy forms
40:37 - which CSS framework we want to use so it
40:40 - defaults to bootstrap too but bootstrap
40:43 - 2 is pretty old and outdated at this
40:44 - point so instead let's use bootstrap 4
40:47 - so let's go to the very bottom of our
40:50 - settings file and add that here so the
40:53 - setting that we need to change is
40:55 - something called crispy underscore
40:58 - template underscore PAC so crispy
41:02 - template pack and we will set that equal
41:04 - to bootstrap for now if you want to
41:08 - change this to anything else then you
41:10 - can go to the Krispy documentation
41:12 - online and it shows you how to change
41:14 - these settings to anything that you want
41:16 - but I think bootstrap 4 is our best bet
41:18 - ok so once we have said that we want to
41:20 - use bootstrap 4 for our CSS template
41:22 - then we can simply load this into our
41:24 - template and use it so I'm going to open
41:26 - up our register dot HTML template where
41:29 - our form lives and at the top right
41:32 - under where we extend our base template
41:34 - let's load in these crispy form tags so
41:37 - we can do this simply by creating a code
41:40 - block here and then say load and we want
41:44 - to load Krispy underscore forms
41:47 - underscore tags so let's save that and
41:50 - that will actually allow us to use the
41:52 - krispies filter on any of our forms so
41:56 - if we go down here to our form now we no
41:58 - longer need this as P method on the form
42:01 - since krispies forms will take care of
42:03 - all of that formatting for us so I'm
42:05 - just going to remove that where we only
42:07 - have our form and now we can use the
42:09 - vertical bar character just
42:11 - safai that we want to use a filter so we
42:14 - saw this in an earlier video when we use
42:16 - the date filter to format our post dates
42:18 - so after the vertical bar we can simply
42:21 - say that we want to use the crispy
42:23 - filter so we can just say crispy and
42:25 - save that and that's really all it takes
42:27 - that will do all of the styling for us
42:29 - now there are ways that we can customize
42:32 - this styling further but I think that
42:34 - krispies does a good job out of the box
42:35 - of styling our forms and also give us
42:38 - giving us some good validation
42:39 - feedback so now let's run our web server
42:43 - and see how this looks compared to what
42:46 - it did so I'm going to run our dev
42:49 - server by saying Python manage py run
42:52 - server no errors so that's good now
42:54 - let's open our page back up and now this
42:57 - is what our register page looks like now
43:00 - so now let's rerun this and see how it
43:02 - looks so when we reload that we can see
43:04 - that these forms look a lot better and
43:06 - if we look at the source code here so
43:09 - I'll go to view source and make this a
43:12 - little larger and then scroll down here
43:15 - to our fields then you can see that we
43:18 - got a lot of added styles and everything
43:20 - in here for free and you don't have to
43:22 - be familiar with bootstrap to use this
43:24 - but if you are then you can see that we
43:26 - have some bootstrap classes in here so
43:28 - we have these form groups we have an
43:31 - asterisks for the required fields so
43:33 - that's nice this is a column form
43:35 - labeled here so all kinds of different
43:38 - things that we just get out of the box
43:39 - with that default krispy tag so that's
43:42 - really nice so now let me close down of
43:45 - the out of the view source here and go
43:47 - back to our field and resize that back
43:49 - to the normal size now not only does our
43:51 - form look better but the errors will
43:54 - also look much better and give us some
43:56 - better feedback so let's fill out our
43:58 - form with some errors and see what this
44:01 - looks like so I'm going to fill in a
44:03 - user name that already exists us all
44:04 - Duke or EMS I'll do just fill in a
44:07 - password of khorium Schafer at gmail.com
44:11 - for the password I'll put in passwords
44:13 - that do not match so just some gibberish
44:16 - there sign up okay so we can see that
44:18 - added classes to our form fields so that
44:21 - it highlights the fields with problems
44:22 - in red and then puts the air attack
44:25 - underneath in red so that we know
44:27 - exactly what's wrong and that's a lot
44:29 - better than the feedback that we had
44:31 - before where it was really hard to even
44:33 - see what was going on so we can see here
44:35 - that it obviously says a user with that
44:38 - username already exists and we can
44:40 - definitely tell the error here is the
44:42 - two password fields didn't match okay so
44:44 - now we have a nicely styled functional
44:46 - form here that can actually create users
44:49 - on the front end and also gives us a
44:50 - nice validation feedback on the front
44:53 - end as well okay so I think that is
44:55 - going to do it for this video I hope
44:57 - that you've got a pretty good idea for
44:58 - how you can create a user registration
45:00 - page for our django application and in
45:03 - the next video we'll be learning how to
45:05 - expand on this and create a user
45:07 - authentication system so that users can
45:09 - log in and log out through the front-end
45:11 - of the website as well and we'll also
45:13 - learn how to create pages that can only
45:16 - be accessed by users who are logged into
45:18 - the website but if anyone has any
45:20 - questions about what we covered in this
45:22 - video then feel free to ask in the
45:23 - comment section below and I'll do my
45:24 - best to answer those and if you enjoyed
45:26 - these tutorials and would like to
45:27 - support them then there are several ways
45:28 - you can do that the easiest ways is
45:30 - simply like the video and give it a
45:31 - thumbs up and also to huge help to share
45:33 - these videos with anyone who you think
45:34 - would find them useful and if you have
45:36 - the means you can contribute through
45:37 - patreon and there's a link to that page
45:38 - in a description section below be sure
45:40 - to subscribe for future videos and thank
45:42 - you all for watching
45:53 - you