00:00 - hey everybody how's it going in this
00:02 - video we'll go over a couple of aspects
00:04 - of being pythonic now if you've never
00:06 - heard the term pythonic before basically
00:09 - in short what that means is that you're
00:11 - following conventions and coding styles
00:13 - of the Python language in order to write
00:15 - clean and readable code so in this video
00:17 - we'll specifically be looking at two
00:19 - aspects of being pythonic and those are
00:22 - duck typing and the concept that it is
00:25 - easier to ask forgiveness than
00:27 - permission and sometimes you'll see
00:29 - people abbreviate this online as ei F P
00:33 - now these two concepts are very closely
00:35 - related so that's why I'm putting them
00:37 - in the same video so first let's take a
00:39 - look at duck typing now the reason it's
00:41 - called duck typing is because with this
00:43 - concept you assume that if an object
00:46 - walks like a duck and quacks like a duck
00:49 - then it's a duck so what does that mean
00:52 - exactly that means that we simply don't
00:55 - care what type of object we're working
00:57 - with we only care if our object can do
01:00 - what we asked it to do but I think this
01:03 - will be more clear if we take a look at
01:05 - an easy example here to see exactly what
01:07 - this means
01:08 - so in this easy example I have two very
01:11 - simple classes here I have a class duck
01:13 - and it has two methods quack and fly and
01:16 - then I have a class person and it also
01:20 - has two methods quack and fly and both
01:22 - of these methods do different things
01:25 - depending on the class now I also have a
01:27 - function here called quack and fly and
01:30 - the purpose of this function is that
01:32 - we're going to try to pass in this
01:34 - object thing and we're going to try to
01:36 - run the quack method and the fly method
01:39 - on it and you can see down here at the
01:41 - bottom I'm making an instance of the
01:44 - class duck and I'm passing that into our
01:46 - function and then I'm also making an
01:49 - instance of the class person and I'm
01:51 - passing that into our function also so
01:54 - first let's take a look at something
01:55 - that is not duck type so this is non
01:59 - pythonic so in a non duck typed example
02:02 - we will specifically check if the object
02:05 - that we're working with is an instance
02:07 - of a duck now this will ensure that we
02:10 - can use all of the methods and
02:11 - attributes that we want to use
02:13 - you can see here right at the top as
02:15 - soon as we enter the function it's
02:17 - saying is this thing an instance of duck
02:21 - if so then run these two methods and if
02:23 - it's not then print that it has to be a
02:26 - duck and you can see here that we're
02:28 - running this on a duck and on a person
02:30 - so if I run this code you can see that
02:33 - when we pass in the duck to this
02:37 - function that we get what if we expect
02:39 - it runs those two methods but whenever
02:41 - we pass the person into this function it
02:44 - comes back and it didn't meet that
02:46 - conditional of being an instance of a
02:48 - duck and instead it printed out this has
02:51 - to be a duck but if we remember at the
02:53 - beginning of the video I said that in
02:55 - duck typing we don't care if this object
02:58 - is actually a duck or not we only care
03:01 - if it behaves like a duck when asked to
03:03 - do so so again you'll see that
03:05 - definition online that if it walks like
03:07 - a duck and quacks like a duck then treat
03:09 - it like a duck so our person class does
03:12 - have the quack method and the fly method
03:15 - so there's no reason that it shouldn't
03:17 - work in this function also so let's just
03:20 - go ahead and take out these checks and
03:22 - just try to run it so I'm going to take
03:25 - out all of this code and just leave
03:27 - where it tries to and I'm going to leave
03:30 - that print statement in there to get a
03:32 - little space here between these two so
03:34 - now I'm just passing in an object and
03:36 - I'm just trying to run these methods and
03:38 - if it works then great so now you can
03:41 - see that if we run this now it doesn't
03:43 - care what object we're passing in and it
03:46 - just comes in and it runs both of these
03:48 - methods regardless of what the object is
03:51 - and that's what duck typing is we don't
03:53 - care if it's a certain type of object we
03:56 - only care if it can do what we ask so
03:59 - now you might be thinking like well
04:01 - isn't this dangerous so can't we pass in
04:03 - just any object that will potentially
04:06 - throw an error and that's true so you
04:08 - might be tempted to say okay well all we
04:11 - care about in this example is not what
04:14 - type of object it is but whether it can
04:16 - quack and fly so how about we put some
04:19 - checks in place to make sure that those
04:21 - methods exist so this is where that
04:23 - second concept comes in that it's easier
04:26 - to ask
04:27 - forgiveness than permission so first
04:30 - let's take a look at the non pythonic
04:32 - way to do this and this is usually
04:34 - called look before you leap so let me
04:38 - get the snippet out here and I'm just
04:41 - going to go ahead and copy this code
04:44 - example and paste it into my function
04:48 - here so in this example we might be
04:50 - tempted to make a check for each method
04:53 - that we want to call so first we want to
04:56 - run the quack method so you might first
05:00 - want to check if that attribute actually
05:02 - exists within our object and that's what
05:04 - this line does here does this thing have
05:07 - the attribute of quack then second we
05:11 - might want to run a check that says okay
05:13 - if it does then is it colorful and if
05:16 - it's callable then we finally run it and
05:18 - then we'd have to do the same thing for
05:20 - the fly method also we'd say okay does
05:23 - this thing have a an attribute fly okay
05:26 - it does is it callable if it's callable
05:29 - then run the fly method so you can see
05:31 - how something like this would be pretty
05:33 - cumbersome after a while so we're asking
05:35 - for permission at every step of the way
05:37 - we're saying can we do this can we do
05:40 - this and then finally if we pass all the
05:42 - permissions then we actually do what we
05:44 - want so that concept that I was talking
05:46 - about that pythonic concept that it's
05:48 - easier to ask for forgiveness than
05:50 - permission
05:51 - frowns upon this instead with that
05:53 - concept we just want to say let's try to
05:55 - do something and if it doesn't work then
05:58 - we'll handle it so instead of doing this
06:00 - non pythonic way then let me go over
06:02 - here and grab the easier to ask
06:06 - forgiveness than permission example and
06:09 - let's look at the difference so let me
06:11 - uncomment out this code so right off the
06:14 - bat you can see that this is a lot more
06:15 - readable and what we're saying here is
06:18 - we're saying hey try to run these
06:20 - methods and if you get an attribute
06:22 - error then print out that error so now
06:24 - if I rerun this code then you can see
06:27 - that it still works so it tried to come
06:30 - in and run both of these methods and it
06:32 - worked now what if we add in a method
06:35 - that doesn't exist so I wouldn't add in
06:37 - a method here that is bark now if I run
06:40 - this
06:41 - now you can see that it came in and it
06:43 - tried to run these first two methods
06:45 - which work but then whenever it ran this
06:47 - one that doesn't exist it through this
06:50 - attribute error and printing it out
06:52 - through the screen so it's saying that
06:53 - the duck object has no attribute bark
06:56 - and it also said down here that the
06:58 - person object has no attribute bark so
07:01 - if you see people talking about that
07:03 - it's easier to ask forgiveness than
07:05 - permission
07:05 - then this is what it means it means try
07:08 - to do something and if it works then
07:10 - great and if not then just handle that
07:12 - error now this concept actually extends
07:15 - to other use cases outside of the use
07:18 - case that we're using it for here so I'm
07:21 - just going to go ahead and delete all of
07:23 - this code here and I'm going to hop over
07:25 - to our code snippets here and I'm going
07:28 - to grab all of this code here and paste
07:32 - it in and let me uncomment out this and
07:36 - let me recommend these two lines here so
07:40 - this is another small example where we
07:43 - have a dictionary and I'm going to
07:45 - comment out this section here for now so
07:48 - we have a dictionary that has a name and
07:51 - age and a job and what we want to do is
07:54 - we want to just print out the name the
07:56 - age and the job in this sentence here
07:59 - and if any of these keys don't exist and
08:01 - we just want to print out through the
08:02 - screen that we're missing some of these
08:04 - keys so you might be tempted to do it
08:07 - like this which is the look before you
08:09 - leap or the asking permission which is
08:11 - the non pythonic way we might be tempted
08:14 - to say do we have this name key in this
08:18 - person do we have this age key do we
08:20 - have this job key if all those exist
08:23 - then print out the sentence that prints
08:25 - out the name the age and the job and if
08:28 - I run that you can see that it works now
08:30 - if I take this same example and I use a
08:33 - dictionary that is missing this job key
08:36 - and run that now you can see that it
08:38 - still worked it said that we're missing
08:40 - some keys now let's compare this example
08:42 - to the concept that it's easier to ask
08:46 - forgiveness than permission so I'm going
08:49 - to comment out the look before you leap
08:51 - code here and I'm going to uncomment out
08:53 - this code
08:55 - here now what we're saying we're not
08:56 - making any checks at all
08:58 - we're just saying hey try to print out
09:00 - this sentence that accesses all these
09:03 - different keys if it doesn't work throw
09:05 - a key error and say that we're missing a
09:07 - key so first I'm going to run this with
09:09 - the dictionary that has all of the keys
09:12 - available and if I run it you can see
09:14 - that it worked fine and now if I run it
09:17 - with the example that is missing the job
09:20 - key then you can see that it printed out
09:22 - here that we're missing the job key so
09:25 - you can see the big difference here
09:26 - we're not making all of these checks
09:28 - saying can we do this can we do this and
09:30 - can we do this we're just trying to do
09:32 - it and if it works then that's great
09:35 - and if it doesn't work then we print out
09:37 - the error or handle it in any way that
09:38 - we want to handle it now just another
09:40 - small example here if I grab another
09:43 - snippet from the list we can also do
09:45 - this with lists so if I paste this in
09:49 - here then let me uncomment out this code
09:52 - and actually I forgot to actually grab
09:54 - the list here so let me grab that and
09:57 - paste it here up top okay so what if you
10:01 - had the need to grab a certain index
10:04 - from a list within your code so you
10:06 - might be tempted to and this is should
10:08 - actually be an equal sign here you don't
10:11 - want to throw an index error so what you
10:14 - might be tempted to do is check the
10:16 - length of the list you might say if my
10:18 - length of my list is greater than or
10:21 - equal to 6 then I know that I can access
10:24 - this 5th index here and if it's not
10:28 - greater than that then I need to print
10:30 - that this index doesn't exist so you can
10:33 - see that if I run this then we did print
10:36 - out that 5th index of the list and if I
10:40 - was to take one of these values out and
10:42 - try to rerun it then it doesn't pass
10:45 - this conditional and it's saying that
10:47 - that index doesn't exist
10:49 - so but you can see that we're making
10:51 - this check here and it's kind of ugly so
10:54 - that's the asking permission example
10:57 - which is non pythonic now now let's just
11:01 - try to do this so if we just do try to
11:06 - print this index
11:08 - and then just throw the exception index
11:11 - error if it's an index error and print
11:13 - that that index doesn't exist so now if
11:16 - I run this you can see that we printed
11:18 - out the index of that list but if we
11:22 - were to take this six out of here and
11:24 - try to run it then we just throw this
11:27 - index error in print that the index does
11:29 - not exist so again this goes back to
11:31 - that concept we're not asking for
11:33 - permission that we can do something
11:35 - we're just trying to do it and if we
11:37 - can't then we'll handle it the way that
11:38 - we want to handle it now I also want to
11:40 - point out that this isn't an end-all
11:43 - be-all approach there have been some
11:45 - situations online where people have
11:47 - pointed out where you might want to make
11:48 - certain checks in certain situations but
11:51 - why is this easier to ask forgiveness
11:54 - than permission
11:55 - why is that even considered a good thing
11:57 - to do in most cases well first of all
12:00 - it's slightly faster in situations where
12:03 - you don't expect a lot of exceptions
12:05 - because whenever you ask for permission
12:08 - you have to access your objects multiple
12:12 - times but here we just try to access it
12:15 - one time and if it works then it works
12:18 - so we're only accessing that object once
12:20 - now another reason is that some people
12:23 - make the argument that it is more
12:25 - readable now I think this is debatable
12:27 - sometimes but I agree with that a lot of
12:30 - the time so I think that this is more
12:32 - readable than the last example we looked
12:34 - at we're just saying try to do this and
12:36 - throw an index error if we need to also
12:40 - that example that we saw with our
12:41 - dictionary we don't have all of those
12:43 - checks in place saying does this key
12:45 - exists does this key exist we just tried
12:48 - to do it and then it was fairly obvious
12:50 - that if we get a key error then throw
12:52 - the key error now one good reason that I
12:54 - solved for writing your code this way
12:56 - was to avoid race conditions in certain
12:59 - situations so there's actually an
13:02 - example here on the Python Docs on the
13:05 - website so let me grab this code here
13:08 - and paste it in to our file here and now
13:12 - let me uncomment out this code so that
13:14 - we can see exactly what's going on okay
13:18 - so what we're trying to do here in this
13:19 - example that I grabbed straight from the
13:21 - Python document
13:22 - nation online is we're trying to access
13:25 - this file and then just print the
13:27 - contents out to the screen now you might
13:30 - be tempted to make this check here first
13:33 - to see if we can actually access the
13:35 - file and if we can then we'll open it
13:38 - and then print it out to the screen and
13:40 - if we can't access the file then we'll
13:42 - hit this conditional here which will say
13:45 - that the file cannot be accessed now the
13:47 - problem with this the reason that this
13:49 - is a race condition is because when we
13:52 - make this check here to see if we can
13:54 - access the file by the time we get down
13:57 - here in that short amount of time maybe
14:00 - we can't access the file anymore so then
14:02 - when we try to open it then we're going
14:04 - to throw an error and we're likely not
14:07 - going to catch that error because we
14:08 - thought that we could access the file so
14:11 - really the way to do this which uses
14:14 - that same concept of asking forgiveness
14:16 - and not permission so let me comment out
14:20 - this code here so in this example we're
14:23 - just trying to open the file and if we
14:25 - can't do it then we just throw an IO
14:27 - error and say that well the file cannot
14:30 - be accessed and then if we can then we
14:33 - take the file and print it out to the
14:35 - screen so you can see that it's just
14:37 - continuing that theme so instead of
14:39 - asking if we can do something we're just
14:41 - trying to do it and if it works then
14:44 - great and if not then we catch that
14:46 - error and handle it as we want so I
14:49 - think that's going to do it for this
14:50 - video I hope that it gave you a better
14:51 - understanding of duck typing and the
14:54 - concept that it's easier to ask
14:56 - forgiveness than permission
14:57 - so these are two very common examples
15:00 - that I see online when someone points
15:01 - out that someone's code isn't pythonic
15:04 - so I wanted you to be aware of what
15:06 - those concepts meant exactly but if you
15:08 - do have any questions just feel free to
15:10 - ask in the comment section below
15:12 - be sure to subscribe for future videos
15:13 - and thank you all for watching
15:17 - you