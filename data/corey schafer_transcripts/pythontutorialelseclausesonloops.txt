00:00 - hey how's it going everybody in this
00:02 - video we're going to take a look at the
00:04 - else statement and what it means
00:06 - whenever you have an else statement
00:07 - after a loop whether that's a for loop
00:11 - or a while loop now this is confusing to
00:14 - a lot of people who are new to Python
00:16 - because it's not as obvious what's going
00:19 - to happen in this situation as it is say
00:22 - if you have an if statement like I have
00:24 - a little sample file over here with an
00:26 - if statement and this is pretty
00:28 - straightforward and we've seen this
00:29 - especially if you're coming from other
00:30 - languages you've seen this stuff before
00:33 - you have so in this example we have num
00:35 - equal three if num is less than two and
00:38 - print this else print this and if I run
00:42 - this code then you can kind of tell
00:43 - what's going to happen num is not less
00:45 - than two now that's not as obvious in
00:50 - this example so we have this for loop
00:53 - and then we have this else so what is it
00:55 - that could trigger this else statement
00:57 - whenever I first started python
01:00 - programming I thought that had something
01:02 - to do with whether you passed it an
01:04 - empty list or something like that then
01:06 - the else would execute but that's not
01:08 - the case you see I have a list here that
01:11 - is 1 2 3 4 5 and I have a for loop that
01:14 - loops through all of those items in the
01:17 - list and prints off that item then I
01:19 - have an else de mayor that just prints
01:21 - whether or not we hit that else
01:23 - statement so if I run this code you can
01:26 - see that my for loop did run so it
01:28 - printed off 1 2 3 4 5 all separately but
01:31 - then it also hit the else statement here
01:33 - now that's pretty weird especially if
01:35 - you compare it to an F else statement
01:37 - because in an F else statement it's
01:39 - always one or the other either this
01:41 - block of code is going to get executed
01:43 - or this block of code is going to get
01:45 - executed but here we can see that both
01:48 - got executed now to better understand
01:51 - what's going on here one of the Python
01:54 - core developers at PyCon one year was
01:57 - given and talked and he said that in
01:58 - situations like this he really thinks
02:01 - that the else statement should have been
02:04 - named no break and if you think about it
02:06 - as being called no break then it makes a
02:09 - lot more sense so what do I mean by
02:10 - thinking of it as being called No
02:13 - break well if you're familiar with the
02:15 - break statement what it does is whenever
02:18 - you're within a loop and your code runs
02:21 - into one of those break statements then
02:23 - it will break out of the loop so for
02:26 - example if within this for loop here if
02:28 - I put if I is equal to three then break
02:34 - now when I do this and then I run the
02:37 - code you can see that it printed out one
02:39 - two three but it did not print the code
02:41 - from this else statement now the reason
02:44 - it didn't print this code from the else
02:45 - statement is because it hit this break
02:47 - here so if you think about this as being
02:50 - called no break then it makes more sense
02:52 - because it's saying if no break was hit
02:56 - then execute this code so for example if
03:01 - I was to put a six here instead now it's
03:05 - not going to hit this break so if I run
03:08 - this then you can see it went through
03:10 - all the items in the list it didn't hit
03:13 - this break statement so it bring it off
03:15 - the else or print it off what was within
03:18 - the else I mean so this is also true for
03:20 - wild statements here so I have a while
03:24 - loop here so while I is less than five
03:27 - print I and then incrementing I by one
03:30 - every time and then else print that I
03:33 - hit the else statement so if I run this
03:36 - code as is it prints off one two three
03:39 - four five and then the while no longer
03:43 - meets that condition and then it also
03:45 - prints the else because there was no
03:47 - break that was executed to break out of
03:51 - this loop now I've got this commented
03:54 - out here if I put this in and then you
03:58 - can see once I equals to three it's
04:00 - going to hit this break and then it
04:02 - shouldn't execute this else so if I run
04:05 - that code then you can see it printed
04:08 - one two once it got the three it broke
04:10 - out and didn't execute anything else so
04:14 - hopefully now you better understand that
04:16 - control flow whenever you see an else
04:18 - statement after a loop now if we want to
04:21 - see this in a practical example so like
04:23 - when would you use something like this
04:25 - well we have this little sample file
04:27 - here where I have this function called a
04:30 - find index and so with in this function
04:33 - I'm just going to pass in a list to
04:35 - search and then I'm going to have a
04:37 - target and within the function I'm going
04:40 - to loop through all the indexes and
04:42 - values and if the value within this list
04:46 - equals the target that I'm searching for
04:48 - then I'm going to break out and then I'm
04:51 - going to have an else statement here
04:52 - which you can think of as a no break if
04:54 - it doesn't hit this break then I'll
04:57 - return a negative one and then if it
05:00 - gets to the end here then it will return
05:03 - I which will be the index so now let's
05:07 - take a look at an example of this
05:08 - function so I have a list here with
05:10 - three names Korie Rick and John and then
05:13 - index location I set equal to this
05:16 - function find index I pass in the list
05:18 - of these three three names and then I
05:20 - search for the name Rick and then this
05:23 - little print statement down here just
05:24 - prints out the index that we found
05:27 - running our function so let's go ahead
05:29 - and run this now you can see it says
05:31 - location of target is index 1 so 0 1 so
05:36 - it found it right there so let's go
05:38 - ahead and and kind of walk through this
05:39 - so we passed in this list and this
05:42 - target and you can see that it went
05:44 - through the loop and as soon as it found
05:47 - the value was equal to the target it
05:50 - broke out and because it broke out it
05:53 - didn't execute this else statement which
05:55 - would have returned negative 1 and since
05:57 - it didn't return negative 1 then it got
05:59 - down here to return I which was the
06:02 - index of 1 now if I search for something
06:05 - that's not in that list and I run that
06:08 - then you can see it returned negative 1
06:10 - because it went through this entire list
06:13 - and it never met this conditional of if
06:17 - the value is equal to the target it
06:19 - never met that because Steve isn't in
06:22 - the list so it never hit this break
06:24 - statement so then it executed this else
06:27 - which you can think of as a no break and
06:29 - it returned a negative 1 so that's just
06:32 - one small example of where you would use
06:34 - something like this but as you keep
06:36 - programming in Python you're going to
06:38 - find a lot more use cases where this
06:41 - really comes in handy and it's a it's a
06:43 - good thing to know so hopefully I
06:45 - cleared up any confusion that you had
06:46 - about the else statement whenever you
06:48 - see it after a loop but if you have any
06:51 - questions just ask in the comment
06:53 - section below
06:54 - be sure to subscribe for future videos
06:57 - and thank you guys for watching