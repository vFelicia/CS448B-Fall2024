00:00 - hey there how's it going everybody in
00:01 - this video we'll be learning how to use
00:02 - templates to return more complex HTML
00:05 - code than we did in the last video and
00:06 - we'll also see how to pass variables to
00:08 - our templates as well so let's go ahead
00:10 - and get started so I'm starting with in
00:12 - the views module of the blog app that we
00:15 - created in the last video where we were
00:17 - returning HTTP responses from our home
00:20 - route and our about route so we can see
00:23 - in our two routes that we are returning
00:25 - these two headings but most HTML files
00:28 - have a lot more HTML than this they
00:31 - usually contain an entire structure with
00:32 - a head tag a body tag and all of that
00:35 - now there's nothing stopping us from
00:37 - returning all of that HTML here in this
00:40 - response so you know we could do
00:42 - something like doctype and then type out
00:46 - the entire HTML document here but we
00:49 - would have to do that for every single
00:50 - one of our views and we can already see
00:52 - how that would get extremely ugly so
00:55 - we'd have to create a ton of repeated
00:57 - HTML like this for every single view
00:59 - that we have so the best way to do this
01:01 - is to use templates so to use templates
01:03 - we first need to create a templates
01:05 - directory within our blog app directory
01:08 - and I'll just do that here within
01:10 - sublime text so within the blog app
01:12 - directory I'm going to create a new
01:15 - folder and within that blog app I'm
01:17 - going to create a directory called
01:20 - templates so by default django looks for
01:23 - a templates subdirectory and each of our
01:25 - installed apps now we haven't gone over
01:27 - installed apps just yet but we'll look
01:29 - at those right after we make these
01:30 - templates so since django is possibly
01:33 - going to be looking in other locations
01:35 - for additional templates we're going to
01:37 - want to create another subdirectory
01:38 - within our templates directory with the
01:41 - same name as our app so that we know
01:43 - that these are the templates specific to
01:45 - this blog application now that may sound
01:48 - a bit redundant to make another
01:50 - directory and here with the same name as
01:52 - our current app but that's just the
01:54 - django convention so i'll do that by
01:56 - going into our templates directory here
01:58 - and within our templates directory we're
02:00 - going to create a new folder and called
02:02 - this blog so the way that this should
02:03 - currently look is we have our blog app
02:07 - and within our blog app we have a
02:09 - templates directory and within that
02:11 - templates directory we have another
02:13 - factory called blog and this is where
02:15 - our templates dot HTML files are going
02:19 - to live so let me get rid of that so now
02:23 - within the blog directory inside of the
02:26 - templates directory let's create both of
02:28 - our templates so I'll create a template
02:30 - for our home page and for our about page
02:32 - so I'll say new file and we'll say home
02:35 - dot HTML for the first one and I will
02:39 - also create another file called about
02:42 - dot HTML for the second one
02:44 - okay so first let's do our home route
02:46 - and our home template so I'll put all of
02:48 - the HTML that we'd like within our home
02:50 - page within this template so in sublime
02:53 - text if I type HTML and then hit tab
02:56 - then it creates a minimal HTML page
02:59 - structure for us now if your editor
03:01 - doesn't create a structure like this
03:03 - then you can find these pages on my
03:05 - github code and I'll having a link to
03:06 - that in the description section below if
03:07 - you'd like to copy and paste from there
03:09 - so now that we have a basic HTML
03:11 - structure let's add the heading tag that
03:13 - we had in our Python script into this
03:15 - home template so within the body I'll
03:18 - create an h1 tag and just say let's say
03:21 - we called this blog home and I'll put an
03:23 - exclamation point there as well ok so
03:25 - now that we have this template ready we
03:27 - have to add our blog application to our
03:29 - list of installed apps so that Jango
03:32 - knows to look there for a templates
03:33 - directory now to add our application to
03:36 - that list it's recommended that we add
03:38 - our app configuration to our projects
03:40 - settings dot PI module now our app
03:42 - configuration is located inside of our
03:44 - apps py module within our application so
03:48 - within our blog application we should
03:51 - have an Apps py module so I'll open that
03:54 - up and we can see here that we have a
03:56 - blog config and that inherits from this
04:00 - app config class here so I'm going to
04:02 - copy this blog config name and copy that
04:06 - and now let's open up our projects
04:08 - settings dot py file where we need to
04:11 - add the path to this class within the
04:14 - installed apps list so within our
04:16 - project mine is called Django project
04:18 - let's open the settings top py file and
04:21 - now let's scroll down until we see
04:23 - installed apps and here at the top is
04:26 - where I want to add a path to that app
04:29 - configuration and this is going to be a
04:31 - string so let's create a string and then
04:33 - this is going to be blog dot apps dot
04:37 - and then pasted in at that blog config
04:40 - so blog app stop blog config and let's
04:43 - not forget the comma afterwards here
04:45 - since this installed apps is a list and
04:48 - you should just get used to adding
04:49 - applications to this list any time you
04:51 - create a new application because it's
04:53 - something that's easy to forget but
04:55 - you'll need to do that in order for
04:56 - Django to correctly search your
04:58 - templates and also when we start working
05:00 - with databases soon it's also where
05:03 - Django looks for our models ok so now
05:05 - let's use that template that we created
05:06 - so that it renders that whenever we
05:09 - navigate to our home page so in order to
05:11 - do that we have to point our blog views
05:14 - to use those templates so I'm going to
05:16 - open up our blog views so within blog I
05:20 - will open up our views now there are a
05:22 - couple different ways of loading in a
05:23 - template now one way would be to load
05:26 - the template in and then render it and
05:28 - pass that to our HTTP response but that
05:32 - way is a few more steps than what it
05:34 - needs to be and Django actually provides
05:36 - a shortcut that does all of this in just
05:39 - one piece of code and that shortcut is
05:41 - in the Django shortcuts module and this
05:44 - is so commonly used that Django actually
05:46 - already added this import for us when we
05:49 - created our app so we can see the very
05:51 - first line here was already here when we
05:54 - first looked in this file and it's from
05:57 - Django shortcuts import render now if
05:59 - you don't have that import in your views
06:01 - or if you removed it for any reason then
06:03 - you can just type that back in as it
06:05 - looks here and now we can return a
06:08 - rendered template instead of our HTTP
06:10 - response so after our return statement
06:13 - here right within our home view I will
06:16 - say return render and the render
06:19 - function takes the request object as its
06:22 - first argument so we'll pass in request
06:24 - and the second argument it takes is the
06:28 - template name that we want to render now
06:30 - the way we reference our templates is by
06:33 - first specifying the subdirectory within
06:35 - our templates directory in this case
06:37 - it's below
06:38 - and this is going to be a string so
06:40 - we'll say a string of blog ford slash
06:43 - and then followed by the name of our
06:45 - template and we want to render our home
06:47 - dot HTML template for this home view so
06:51 - we'll say blog ford slash home dot HTML
06:55 - and save that and there's also a third
06:57 - optional argument that we can pass in
06:58 - that we'll look at here in just a second
07:00 - and that's the context so basically it's
07:03 - a way for us to pass information into
07:06 - our template and we'll take a look at
07:07 - passing information into our template in
07:09 - just a second but for now let's make
07:11 - sure that this works so far now this
07:13 - render function still returns an HTTP
07:16 - response in the background so that is
07:19 - still what our view is returning our
07:20 - views always need to return either an
07:22 - HTTP response or an exception okay so
07:25 - let's make sure this works so I'm going
07:27 - to pull up my terminal and make sure
07:29 - that our dev server is running and it's
07:31 - not so I'll say python managed dot py
07:34 - run server and now let's open that up in
07:39 - our browser and now we can see that this
07:41 - says blog home here so it still looks
07:43 - about the same as it did before but if I
07:46 - view view the source code of this web
07:48 - page and let me make this a little
07:50 - larger here then we can see that now we
07:52 - have our entire HTML structure that we
07:54 - put inside of our template so that is
07:56 - using that new home template that we
07:58 - just created ok so now let's do this
08:01 - same thing for our about page so let's
08:03 - go into our blog application and open
08:06 - our templates so I'll open this back up
08:08 - here and we want to open up the template
08:10 - for that about page so it's in our blog
08:12 - app templates directory blog
08:14 - subdirectory within templates and then
08:16 - about and within here let's copy most of
08:19 - the structure from our home that HTML
08:21 - template and then paste it into our
08:22 - about page so I'm going to copy
08:25 - everything from our home template and
08:27 - paste that in to our about template and
08:30 - instead of blog home we'll just say blog
08:32 - about actually let me just change that
08:35 - to say about page so that'll work okay
08:38 - so at this point we don't need to add
08:39 - our application to the installed apps
08:41 - again like we did last time because
08:43 - that's already been done for our whole
08:45 - blog app so now we just need to update
08:47 - our about view to render this new
08:49 - template so let's open back up
08:52 - our views and instead of returning this
08:54 - simple HTTP response let's instead
08:57 - render our about template so I'll just
08:59 - copy this from our home view and paste
09:02 - it in here to our about view and instead
09:04 - of rendering that home dot HTML we will
09:06 - render the about dot HTML and now if we
09:09 - look at our views they're both now
09:11 - returning these rendered templates
09:12 - instead of using our HTTP response so we
09:15 - can just remove that import since it's
09:17 - no longer being used so I'm just going
09:18 - to get rid of that okay so now let's
09:21 - test that our about template is working
09:23 - well so let's open that up in the
09:25 - browser here and go to our home page
09:29 - ford slash about we can see that now we
09:32 - have this about page if we look at the
09:33 - page source then we can see that we have
09:36 - that whole HTML structure so at this
09:38 - point if you're just using django to
09:39 - create static HTML pages then that's
09:42 - basically what we've created here all
09:44 - you need to do is add in more detail at
09:46 - HTML and CSS and you'd be good to go but
09:49 - pretty much every web application these
09:51 - days doesn't just contain static
09:53 - information you normally have posts and
09:55 - updates and all kinds of different
09:56 - information that's continuously being
09:58 - added to the site so for example if
10:00 - remembered the application that I showed
10:02 - in the first video that I said would be
10:03 - our final application at the end of this
10:05 - series it had a lot of different posts
10:07 - by different authors and those could be
10:09 - blog post or pictures or whatever it is
10:12 - that you're making with this application
10:13 - so let's say that we have some post like
10:16 - this that we wanted to display in our
10:18 - templates so how would we do that
10:20 - so let's open back up our application
10:22 - and add some dummy data so that we can
10:25 - see how this is done so I'm going to add
10:28 - this dummy data into our blog views and
10:31 - then we'll see how to pass that into our
10:33 - templates and I'll just add this dummy
10:35 - data here to the top of our views file
10:38 - and we will just create some fake post
10:40 - so I'll call this post and this is going
10:43 - to be a list and this list is going to
10:46 - be a list of dictionaries and each
10:50 - dictionary will be information
10:51 - associated with one post so this will be
10:55 - our first post so we'll have an author
10:57 - and I'll say that the author is Corrie
11:00 - m/s the title will have a title to a
11:03 - post so we'll have the title be
11:05 - the blog post one and we will have some
11:10 - content so I'll put in a Content key
11:13 - here and for the content of this post
11:15 - we'll just say first post content and
11:18 - then lastly we have a date posted now
11:22 - this is normally going to be a date/time
11:24 - object but we'll just pass in a string
11:26 - so I'll just say August 27th of 2018 so
11:33 - now let's copy this so that's enough
11:35 - information for one dummy post there now
11:39 - I'll put in a comma here and paste in
11:41 - another dictionary and this will be like
11:43 - a another post here so for the second
11:46 - post for the author I'll just say Jane
11:48 - Doe and then we'll have the title be
11:50 - blog post to the content can be second
11:54 - post content and for the date posted
11:55 - we'll do August 28th for this one so
11:58 - let's just pretend for now that we made
12:00 - a database call and got back this list
12:02 - of posts and we want to display these
12:04 - post on our blog homepage so we can pass
12:07 - these posts into our template just by
12:09 - passing an argument with our data and
12:12 - we'll put our data into a dictionary so
12:15 - within our home page view here let's
12:19 - create a dictionary and we'll call this
12:21 - dictionary context and I will set that
12:24 - equal to a dictionary and now within
12:27 - this context dictionary I'm going to
12:28 - create a key and that key is going to be
12:31 - called post and the value that I'm going
12:34 - to assign to our post key is our list of
12:37 - posts that we created at the top of the
12:39 - file so I will pass in that post
12:42 - dictionary that we created at the top
12:44 - and now we can pass that context in as
12:46 - our third argument to our render
12:48 - function and so if I come down here then
12:51 - we can pass in context as our third
12:54 - argument and by doing that it will pass
12:56 - that data into our template and let us
12:58 - access it there within the template so
13:00 - now whatever key name that we use in
13:03 - this dictionary that we passed in will
13:05 - be accessible from within the template
13:07 - and it will be equal to that value so we
13:10 - will have access to this post variable
13:13 - here and it will be equal to this post
13:16 - data which is a list of dictionaries can
13:19 - information of each post so now let's
13:22 - switch over to our home dot HTML
13:24 - template so we can see how to use this
13:26 - and now in our home template we need to
13:28 - loop through those posts in order to
13:30 - display them on our home page so the
13:32 - templating engine that django uses is
13:34 - very similar to Jinja - if any of you
13:36 - have used that and the templating engine
13:39 - allows us to write code here within our
13:41 - templates so to write a for loop we can
13:44 - open up a code block so I'm just going
13:46 - to get rid of this h1 tag here and we
13:49 - can open up a code block by doing these
13:51 - curly braces and then these percent
13:54 - signs and now we can say for post in
13:57 - posts and this post variable that we are
14:00 - looping over here is the key of the
14:04 - context dictionary that we passed in so
14:06 - now we always need to end our loops
14:10 - within our templates so we can say end
14:12 - for so it's kind of similar to writing
14:15 - Python in our templates but it's not
14:17 - exactly the same because we have to tell
14:19 - our template whenever certain loops in
14:22 - so for you know each in if statement you
14:25 - have to have an end if for for loops you
14:27 - have to have in for and so on so now
14:29 - within this for loop now we can print
14:32 - out our post information one post at a
14:34 - time so we can say I will just have an
14:37 - h1 here for the post title and now if we
14:41 - want to access a variable then we can
14:44 - use a double curly brace like this and
14:47 - then if we say post dot title then that
14:51 - will put the title of the post inside of
14:53 - this h1 tag so again this is similar to
14:56 - Python but it's not exactly the same
14:58 - because we can actually use a dot syntax
15:01 - here on a dictionary and that's how we
15:03 - actually get the title so it's not like
15:05 - Python where we would do a dot get or
15:07 - something like that we can just say post
15:09 - dot title and again to access a variable
15:12 - we use these double curly braces and to
15:14 - do more logic like if statements in for
15:17 - loop for loops we use this kind of code
15:19 - block here which is curly braces and
15:21 - percent signs and if this confuses you
15:22 - for now then you're definitely going to
15:24 - be able to get this by the end of the
15:25 - series because we're going to be using
15:26 - logic like this a lot okay so now let's
15:29 - do a paragraph tag
15:31 - and here we'll print out the post author
15:34 - and also the date that it was posted so
15:36 - I'll say bye and then our double curly
15:39 - braces to access a variable post dot
15:41 - author and then we'll say on and then do
15:45 - the post date so we'll say post dot and
15:49 - I believe I called that date underscore
15:51 - posted let me be sure it's right there
15:55 - okay yeah date underscore posted and now
15:57 - let's go to another paragraph tag and
15:59 - now we will just print out the content
16:02 - of the post so within these double curly
16:05 - braces we can say post dot content and
16:08 - save that okay so now if we save that
16:10 - and reload the page in our browser first
16:13 - let me make sure that our development
16:15 - server is still running and that we
16:16 - don't have any errors and if it says
16:17 - that it's running then like you you
16:19 - don't have any syntax errors so that's
16:20 - good now let's reload this page in our
16:23 - browser so I'll close down the source
16:24 - code there and then reload our home page
16:28 - and we can see now on our home page that
16:30 - it looped over our dummy data and
16:32 - displayed that information that we
16:34 - specified within the HTML so if we view
16:37 - this source code here oops I
16:39 - accidentally hit inspect if I go to view
16:42 - page source let me make this a little
16:44 - larger here then we can see that both of
16:46 - those sections that were created within
16:48 - the for loop are both printed out here
16:51 - now let's go over that one more time
16:53 - just so it's a hundred percent clear so
16:55 - just a quick recap in our blog views we
17:00 - created some dummy data here at the top
17:02 - which is a list of dictionaries that has
17:05 - two dummy posts with that information
17:07 - within our home view we have this
17:11 - context which it which is a dictionary
17:13 - and the keys of this context is what is
17:18 - going to be accessible from within our
17:20 - template so this post variable is going
17:22 - to be accessible inside our template
17:24 - with this value equal to post which is a
17:27 - list of dictionaries so once we pass
17:30 - that into our template then we'll have
17:32 - access to that so within our home
17:34 - template we can loop over those posts
17:36 - that we have access to and then print
17:39 - them all out one by one so even though
17:41 - we only have one section here since
17:43 - there are two posts it
17:45 - out this section twice and that is why
17:47 - in our actual application in the browser
17:50 - we get two blog posts here with
17:53 - different content and whenever we
17:55 - actually look at our page then it comes
17:57 - out like this okay so now let's add some
18:00 - more to our templates so I'm going to
18:02 - bring back up our home dot HTML template
18:04 - now we sell how to do a for loop but we
18:07 - can also do if and else conditionals so
18:10 - let's say that we wanted to be able to
18:12 - pass a title to our web pages but if we
18:14 - didn't pass a title then we would just
18:16 - use a default of Django blog or
18:19 - something like that so we could come up
18:21 - here into the title section or the head
18:24 - section where we're printing the title
18:26 - and to do an if-else statement we can
18:28 - put in our curly braces with percent
18:31 - signs here and say if title so if we
18:36 - have a specific title then we will put
18:38 - that there and if we don't have a title
18:40 - then we'll put in these curly braces and
18:43 - percent signs and say else and then put
18:47 - a nother title here if we don't have a
18:49 - title and then at the end here let me
18:51 - remove that curly brace and then at the
18:54 - end here we need to end our if statement
18:58 - so we'll say end if okay so if we have a
19:00 - title passed in to our context data into
19:03 - this template then we will call this
19:05 - Django blog then - and then print out
19:10 - that title so to access that title
19:12 - variable then we use the double curly
19:15 - braces and just print out title now if
19:17 - we don't have a title then we'll just
19:20 - print out Django blog without anything
19:23 - else and let's also do this and are
19:25 - about template also so I'm going to copy
19:28 - this top section here with the if-else
19:30 - statement and within our about template
19:33 - up in our head I'm going to replace our
19:35 - title with this conditional and now
19:37 - let's go back to our views and give one
19:40 - of our views a title and not provide one
19:43 - for the other
19:44 - so let's not pass in a title for our
19:46 - home page and just let that use the
19:48 - default but for our about page let's
19:50 - pass in a title of about now we don't
19:53 - actually have to create the context by
19:56 - itself here if
19:57 - it's shirred enough then we can just
19:59 - simply pass in a dictionary directly in
20:02 - as this argument so we can just say
20:04 - title and then the value for that title
20:07 - will say about and save that so now with
20:10 - that saved if we reload our browser now
20:13 - this might be a little small for you to
20:14 - see but up here in the tab we have a
20:17 - title of Django blog and that is because
20:19 - we didn't pass in a title and it uses
20:21 - the default from that conditional now if
20:24 - we go to the about page so forward slash
20:26 - about now up here in the top it's still
20:28 - it's kind of small but it says Django
20:31 - blog - about so it's actually using that
20:33 - title from the conditional okay so we're
20:36 - almost finished up with this tutorial
20:37 - but there is one thing about our
20:39 - templates that isn't very good design
20:41 - right now so if you notice our home page
20:44 - template and our about page template
20:45 - have a lot of similar repeated code and
20:48 - that is never good in programming
20:50 - because it means if we want to update
20:52 - one of those sections then we would need
20:54 - to update it in every location so for
20:56 - example if we wanted to change our
20:58 - default title for our website then we
21:00 - would have to make that change in both
21:02 - the home and about templates and the
21:04 - more pages that we have with repeated
21:06 - code the worse that problem would be so
21:09 - it would be better to have everything
21:11 - that is repeated in a single place so
21:13 - that there is only one place to make
21:15 - changes and our home template and about
21:18 - template only contains the information
21:19 - that is unique to those pages so to
21:22 - accomplish this we can use something
21:24 - called template inheritance so let's see
21:26 - what this looks like so let me create a
21:28 - new template in our templates directory
21:30 - so let me open up our project here and
21:32 - within our blog templates let's create a
21:35 - new template so I'll say new file and
21:37 - we'll call this base dot HTML and within
21:40 - based on HTML we want to pick out all of
21:43 - the repeated sections between our home
21:45 - and our about templates so if we compare
21:49 - these so I'll switch back and forth
21:50 - between the home and about templates
21:53 - here so we can see there's a lot of
21:55 - repeated code the only thing that isn't
21:57 - repeated is this little section down
21:59 - here in our body so as a starting place
22:01 - for our base template I'm going to grab
22:04 - the code from our about template here
22:06 - and copy that and let's paste that into
22:09 - our base template and now let's delete
22:11 - the part that is unique to the about
22:13 - page and that is just this h1 tag in
22:16 - here so if I delete that now all we're
22:19 - left with here is the HTML that is
22:22 - shared between both of our views our
22:24 - home view and our about for you so now
22:26 - in this location I'm going to create a
22:28 - block and a block is a section that
22:30 - child templates can override and we'll
22:33 - see this in action in just one second so
22:35 - I'll create a block within our body tag
22:37 - and I'll just call this content and we
22:40 - create blocks with those curly braces
22:42 - and the percent signs and I'll call this
22:45 - block content and then right on the
22:49 - other side of this block we will create
22:51 - another section that says IND
22:54 - block and save that so now within our
22:56 - home and about templates will inherit
22:58 - this base template and get all of this
23:00 - information and then we'll just override
23:02 - the content section with the stuff that
23:05 - is unique to each page so first let me
23:08 - switch over to the home view and in this
23:10 - home template we want to use that base
23:12 - template as the parent so we can get rid
23:15 - of all the information that is in that
23:17 - base template so first let me remove all
23:19 - of the information that is in our base
23:21 - template so that would be everything up
23:23 - here at the top and also the bottom
23:26 - being body tag here and the ending HTML
23:28 - tag so this for loop is the only thing
23:31 - that was unique to our home template and
23:33 - now at the top of this template we can
23:35 - use the base template by extending it so
23:39 - up here at the top we'll put in curly
23:41 - braces and percent signs and we'll say
23:44 - extends and then within a string here we
23:47 - want to extend the base template within
23:51 - this blog directory so that is blog ford
23:56 - slash based on HTML now remember in our
23:58 - base template we have this block here
24:01 - called content and we want our for loop
24:04 - in our home template to override that
24:07 - content section so to do that we can
24:09 - wrap it in a Content block by saying
24:12 - double curly braces here or I'm sorry
24:15 - curly braces with % and say block
24:18 - content and then indent that whole for
24:21 - loop inside of that block content and
24:23 - then after
24:25 - the content block we can close that out
24:27 - curly-braces percent signs and say end
24:30 - block and I will put content after there
24:33 - so we know that we're ending that
24:35 - content block now you could simply just
24:37 - use in block there instead of saying end
24:39 - block content but I like doing it that
24:41 - way because if you have multiple blocks
24:43 - then it can be easy to lose track of
24:45 - what blocks you're closing so I just
24:47 - like to be explicit and specify exactly
24:50 - what block is ending there okay so now
24:52 - let's do this exact same thing and our
24:54 - about template so I'm just going to copy
24:56 - everything here from the home template
24:58 - and then I will paste it in to our about
25:01 - page but I will leave the information
25:03 - that's currently there in our about page
25:05 - but just space down a couple lines okay
25:08 - so on our about page instead of our
25:10 - content being this for loop here it's
25:13 - just this h1 tag with the text of about
25:17 - page so let's copy that and let's paste
25:19 - that in to the content block up here at
25:23 - the top and now we can just remove what
25:27 - our old about template was so I can get
25:30 - rid of that and now we can see that this
25:32 - is all that we're left with so we can
25:33 - see that we have a lot less code in both
25:35 - our home template and our about template
25:38 - and both of them are using this based on
25:41 - HTML template so if you wanted to now
25:43 - change the default title up here then we
25:47 - could change that to whatever we wanted
25:49 - and the home and the about template
25:51 - should both pick those up so now with
25:53 - those changes let's make sure this is
25:54 - still working in the browser and after
25:57 - we save this then we should be able to
25:58 - reload it in the browser and still have
26:00 - the same pages that we had before so if
26:03 - this so this is saved and I'm going to
26:05 - go back to our home page here we can see
26:08 - that the home page is still working so
26:10 - that's good and we can go to the about
26:12 - page and that's still working as well so
26:14 - both of these pages are still working
26:16 - but now we're using template inheritance
26:18 - so let me show you why this is so
26:20 - powerful so let's say that we wanted to
26:22 - now update our entire website to use
26:24 - bootstrap now if you don't know what
26:26 - bootstrap is basically an exit it's an
26:29 - extremely popular library that makes it
26:30 - easy to add some nice styles to your
26:32 - website and i'll be using bootstrap in
26:35 - this series since it will allow us to
26:37 - add
26:38 - nice styles easily without taking
26:40 - anything any of the focus away from
26:42 - Django so to add bootstrap to our
26:44 - website I'm going to open up the start
26:46 - template from the bootstrap
26:48 - documentation to see how they say to do
26:51 - this and I've already got this open up
26:52 - in my browser here and I'll have a link
26:55 - to this page in the description section
26:56 - below
26:57 - so this is the bootstrap starter
26:59 - template that we can use in order to get
27:02 - bootstrap into our website so this is an
27:05 - entire HTML document here and we can see
27:08 - that we need to add a few things so we
27:10 - have some required meta tags here in the
27:12 - head there is some CSS here in the head
27:16 - that links to the bootstrap CSS and also
27:19 - down here before the closing body tag
27:20 - there are three JavaScript scripts now
27:23 - the CSS and the JavaScript that this is
27:26 - using are all served from a content
27:28 - delivery network and basically that just
27:31 - means that there's nothing that we
27:32 - actually need to download so we should
27:34 - just be able to drop this starter
27:35 - template into our site and we'll be good
27:38 - to go now there are actually some
27:39 - third-party packages that some people
27:41 - use an order to use bootstrap and Django
27:43 - together and I won't be using anything
27:45 - like that in this series because I feel
27:47 - like it's something additional to learn
27:49 - and if you're already familiar with
27:50 - bootstrap classes then there's really no
27:52 - reason you can't just use it directly
27:55 - it just takes adding these few lines
27:57 - here to our base template and we should
27:59 - be good to go and I also feel like it
28:02 - gives us a little bit more control with
28:03 - the design just to do it manually like
28:05 - this now if we weren't using template
28:07 - inheritance then we'd have to make these
28:08 - changes to every template in our
28:10 - application and not only would that be
28:12 - easy to screw up but it would be almost
28:14 - impossible to maintain once the number
28:17 - of pages on our website grew but now
28:20 - that we have that base template we just
28:21 - need to make these changes to that
28:23 - single template that our other templates
28:25 - and Herot from so first let's copy these
28:28 - meta tags and the CSS that needs to be
28:30 - added to the head of our page so I'm
28:33 - just going to everything within the head
28:35 - here I'm just going to copy from there
28:37 - down so from the beginning head tag down
28:41 - to the end everything inside there I
28:42 - will copy that and let's go to our base
28:46 - template and let's paste this into the
28:50 - head of our
28:52 - current base template and I'm going to
28:54 - paste all of that above the title so now
28:57 - we have those meta tags and the link to
28:59 - the CSS and it looks like I copied their
29:02 - title tag too so let's actually just get
29:04 - rid of that and use our title tag so now
29:07 - we just have the meta tags in the CSS
29:10 - and now let's go back to that starter
29:13 - template and let's grab the JavaScript
29:16 - here before the closing body tag so I
29:19 - will copy all of that go back to our
29:22 - base template and right before the
29:24 - closing body tag and our template I will
29:28 - paste those scripts in and just for
29:30 - those couple of changes we should now be
29:32 - able to use bootstrap specific CSS
29:34 - classes so to use one of those I'm going
29:37 - to wrap our content in a div with the
29:39 - class of container which will give the
29:42 - content some good padding and spacing so
29:45 - before the content block I will make a
29:48 - div here actually let me move this
29:51 - content block into this div so I'll
29:55 - paste that in there and we want this div
29:57 - to have a bootstrap class and that
30:00 - bootstrap class is going to be called
30:02 - container and again that will just give
30:04 - our content some good padding and
30:05 - spacing so simply adding in that CSS and
30:08 - JavaScript should be enough for our web
30:10 - application to now be using bootstrap
30:12 - so now let's make sure all of this is
30:14 - still working so if I look at the
30:16 - terminal then it looks like our server
30:18 - is still running so that's good we don't
30:20 - have any errors now if I pull this up in
30:22 - the browser and reload our home page
30:26 - then we can see that now we have some
30:28 - padding and some margin changes so the
30:30 - content used to be really far over here
30:32 - to the left and now it's more towards
30:34 - the center of the page and if we go to
30:36 - the about page then we can see that
30:39 - bootstrap is working on that page too
30:41 - and it works on both of those pages
30:42 - because both templates are inheriting
30:45 - that single base template okay so I know
30:47 - that that was probably a lot to take in
30:48 - so let's do a quick recap before moving
30:51 - on to the next topic so what we did here
30:53 - is we created a base template called
30:58 - base HTML and this is our parent
31:00 - template that other templates will
31:02 - inherit from and this is the main
31:04 - structure of our
31:05 - EML that is going to be included on
31:07 - every single page now you can have
31:10 - multiple blocks but right now we only
31:12 - have a single block called content and
31:15 - that content block is what our other
31:17 - templates can override and when they
31:19 - override that content block with data it
31:22 - will place that data at this location in
31:25 - the HTML so it will place it within this
31:28 - container div here so now if we open our
31:32 - home template then we can see that we
31:34 - are extending that base template and
31:36 - then we are specifying that we want to
31:38 - put some information in to that content
31:41 - block and the information that we are
31:43 - putting there is that dummy post data
31:45 - that we've seen before so when it's all
31:47 - said and done if we go back to the home
31:50 - page and look at our page source here
31:55 - and let me make this larger so everyone
31:58 - can see then we can see that we have all
32:00 - of that information from the base
32:02 - template including the bootstrap CSS and
32:04 - JavaScript and then we have our two
32:07 - dummy blog post here where that content
32:10 - block is located inside of that div with
32:13 - the class of container ok so now that we
32:15 - have this base layout template in place
32:17 - let's add a navigation bar and some
32:19 - global styles to our website so that it
32:22 - looks a lot nicer and similar to our
32:24 - final product now this is a good bit of
32:27 - HTML so I'm going to grab this code from
32:29 - some code snippets so you don't have to
32:31 - watch me type all of this out but the
32:33 - link to these code snippets will be in
32:35 - the description section below so you can
32:37 - grab these snippets as well now really
32:39 - you can follow along with the series
32:40 - just fine without styling the website
32:42 - but having these in place will give a
32:44 - better idea for how this might actually
32:46 - look in a real application so the first
32:48 - snippet I'm going to grab is in my
32:51 - snippets folder and I have my snippets
32:54 - folder open here in finder so and this
32:57 - is within navigation HTML so I'm going
33:00 - to open this in sublime text so this is
33:02 - the first snippet that I'm going to grab
33:04 - so let's copy all of this and then go
33:07 - back to our base HTML template and we
33:10 - are going to paste this to the very top
33:12 - of our body because this is a navigation
33:16 - bar so I will paste that in
33:19 - then fix the indentations there and save
33:22 - that so what we added here is a
33:24 - navigation bar with some bootstrap CSS
33:26 - classes that will make this look nice
33:29 - and I'm also going to put in a new main
33:31 - section that contains our content block
33:33 - and this snippet is in our snippets
33:36 - folder and it is called main HTML so I'm
33:39 - going to open up the snippets folder and
33:41 - open up main HTML and copy this whole
33:46 - section that I have here and then go
33:48 - back to our base template and within our
33:51 - base template I'm going to scroll down
33:52 - to our old container div that contained
33:55 - our content block and this is going to
33:58 - be a replacement for that so let's get
34:00 - rid of that old div that contained our
34:03 - content block and then paste in our new
34:07 - main section here and let me clean up
34:09 - the indentation there as well now if
34:11 - you're following along with pacing in
34:13 - these snippets then don't forget to
34:15 - remove that old container div that hold
34:17 - that had our old block content because
34:20 - our snippet that we just pasted it in
34:22 - has block content listed right here okay
34:24 - and I also have a few custom styles that
34:27 - aren't bootstrap specific and those are
34:29 - going to be in a file called main CSS
34:32 - now since this will be a CSS file and
34:35 - our actual project we need to actually
34:37 - put it somewhere and in Django static
34:40 - files like CSS and JavaScript need to be
34:43 - located in a static directory within our
34:46 - app so let's create a directory in our
34:49 - project called static so within our blog
34:52 - app I'm going to right click on that
34:55 - blog directory and create a new folder
34:59 - and I'm going to call that folder static
35:02 - so that static directory lives in the
35:05 - root directory of our blog app now just
35:08 - like with our templates we'll want to
35:11 - create another subdirectory with the
35:13 - same name of our app inside of our
35:15 - static directory so I'll create another
35:17 - directory inside the static directory
35:20 - called blog so I'll right click on the
35:22 - static directory say new folder and we
35:25 - will call this blog and then within that
35:28 - blog directory inside of our static
35:30 - directory I'll create a CSS file
35:32 - and I will call this main dot C SS and
35:36 - within main.css I'm going to grab
35:38 - another snippet of code in my snippets
35:40 - folder so let me open that and this
35:43 - snippets file is called main CSS so I
35:46 - will open that and I will copy all of
35:50 - that and then paste this into our blog
35:52 - main CSS that we just created so I will
35:56 - paste all of that in there and save that
35:58 - okay so now we have a CSS file and in
36:01 - order to include that in our base
36:03 - template we're going to need to include
36:05 - a couple of lines so let's go back to
36:08 - our base template and we want to put our
36:12 - main CSS file in this template so
36:14 - probably right above this title here is
36:17 - where we'll include that main CSS file
36:20 - that's within that static folder but
36:24 - first we have to load our static files
36:26 - so to do this we need to open up a code
36:29 - block and I will do this at the very top
36:31 - of our template so right above the
36:34 - doctype here at the top I'll put in a
36:36 - code block with the curly braces and
36:39 - percent signs and we'll say load static
36:42 - and that will make it so that we can
36:44 - load in that CSS file from our static
36:47 - directory and now we can add our CSS
36:49 - file and again I'm going to do it right
36:51 - here above this title so I'll get a few
36:54 - lines there and we can load this by
36:57 - opening up a link tag here and within
37:00 - sublime text this autocompletes for me
37:03 - but basically we're saying that we want
37:04 - a link with that is a stylesheet with a
37:07 - type that is CSS and then the href is
37:10 - going to be where this CSS file is
37:13 - located so to load a static file in
37:15 - Django we can open up a code block so
37:17 - again curly braces percent signs and now
37:20 - we can say static and then quotes and
37:25 - within those quotes I'll say that that
37:27 - is within blog and then main dot CSS so
37:32 - I'll save that so what this static
37:34 - statement does here is it generates an
37:36 - absolute URL of the static files and
37:39 - then accesses that blog main CSS now at
37:43 - this point we should be pretty close to
37:45 - being done if we reload
37:47 - our page in the browser first let me
37:49 - make sure that we don't have any errors
37:51 - in our dev server and we don't so that's
37:53 - good so now let me reload our homepage
37:55 - in the browser so I will reload this
37:58 - okay so that's not really what I was
38:01 - expecting there let me try to let's try
38:04 - to restart our web server since we
38:08 - haven't restarted that in a while so I'm
38:09 - going to kill that and clear the page
38:12 - and then let's rerun Python managed PI
38:17 - runs server again and now let's try to
38:20 - reload this page okay so we can see that
38:22 - that looks a lot nicer sometimes in
38:24 - order to get it to load that stuff up
38:26 - you just have to kill the web server and
38:28 - then reload sometimes you also have to
38:31 - reset your browser cache to get CSS
38:33 - changes and stuff like that now if you
38:35 - ever want to do a hard refresh on your
38:36 - page and clear the cache then on Mac
38:39 - that is command shift R and on Windows I
38:42 - believe that is ctrl f5 okay so this
38:44 - looks nice with the CSS snippets that
38:46 - we've added in but there are a few more
38:48 - touches that I'd like to add so it would
38:50 - be nice to visually split up our blog
38:52 - posts here a bit and the CSS that we
38:55 - already added has some Styles for that
38:57 - we just need to put in the correct HTML
39:00 - so again within the snippets folder let
39:03 - me open up our sublime here and now
39:07 - within the snippets I have a file called
39:11 - article dot HTML so let me open that in
39:14 - sublime and now let me copy all of this
39:18 - and this is going to be the HTML and CSS
39:20 - for a specific blog so I'm going to put
39:23 - this within our for loop for our blog
39:26 - post which currently is in the home
39:28 - template so we want to open up our home
39:32 - template and within the for loop let's
39:35 - get rid of the current HTML that we have
39:37 - there now just with that h1 and two
39:40 - paragraph tags and instead let's paste
39:42 - in that snippet from the snippets folder
39:45 - and I'll correct that indentation so now
39:47 - we have some more modern html5 HTML
39:50 - within here and you can see that we have
39:52 - a lot more CSS classes to make this
39:54 - stuff look a little nicer and we have
39:56 - the post author the date posted the post
39:59 - title and the post
40:00 - contents so all of that information
40:02 - should still be there so now let's go
40:05 - back to our browser and reload this then
40:08 - we can see that now this is all coming
40:09 - together and looking a lot nicer and if
40:11 - we go back to our about page then we can
40:15 - see that our about page is working with
40:17 - all of these new styles also now our
40:20 - other links and our navigation bar don't
40:22 - work just yet because we haven't yet
40:24 - created these pages but we'll be
40:26 - creating these in future videos now
40:28 - there is one last little change that I
40:31 - want to show you that will make our
40:33 - templates better and more flexible so if
40:36 - we pull up our base HTML template right
40:39 - now so let me go to that base HTML
40:43 - template if we go to our navigation bar
40:46 - so that's in the opening body tag in
40:49 - this header tag here so this is the
40:52 - navigation bar for our website here from
40:55 - this opening nav tag all the way down to
40:57 - this closing nav tag now we can see that
40:59 - we have some links here and our
41:00 - navigation bar so we have an href here
41:03 - for the Django blog that goes to our
41:05 - home page we have a home link that goes
41:07 - to our home page about that goes to
41:09 - forward slash about and login and
41:11 - register are just these hash tags here
41:14 - or pound signs which just means that
41:16 - they're dead links so right now this
41:18 - home link and this about link are
41:21 - hard-coded to these locations now we saw
41:23 - in the last video how easy it is for us
41:26 - to change the routes to these pages
41:27 - maybe in the future I will want our blog
41:31 - home page to be at Ford slash blog
41:33 - instead of the root of our website so if
41:36 - we were to hard-code the routes here in
41:38 - our templates then anytime we wanted to
41:40 - change those routes then we would also
41:42 - have to change the H reps here and our
41:45 - templates now anytime you have to change
41:46 - things in multiple locations like that
41:48 - then it should be firing off some alarm
41:50 - bells in your head that there's probably
41:53 - a better way to do this and in this case
41:55 - we can use the Django URL tag in order
41:58 - to get the absolute path to a given URL
42:01 - pattern so let me show you what I mean
42:03 - here so for our blog home page within
42:05 - the href attribute we can come in here
42:09 - and open up a code block so that's going
42:12 - to be the curly braces with the percent
42:13 - signs
42:14 - and now we will say URL and then a some
42:18 - quotes there and then pass in blog -
42:21 - home and that blog - home will be the
42:24 - name that we gave to our URL pattern so
42:27 - if we go back to our blog URLs so let me
42:32 - open these up here then this blog - home
42:37 - is the name for our home URL pattern so
42:42 - that's why it's important that these
42:43 - names are unique because anytime we've
42:46 - referenced that it will reference this
42:48 - home path that goes to this home view so
42:51 - anytime we reference a URL in a template
42:53 - it's probably best to use the URL tag
42:56 - and then the name of the route instead
42:59 - of actually hard coding those in like
43:01 - this because if those URLs change then
43:05 - this URL tag will change with them but
43:07 - if they're hard coded then it means we
43:09 - have to change it in multiple locations
43:10 - so the links here that are hard coded in
43:13 - the navigation bar I'm going to change
43:15 - all of these to use this URL tag so this
43:18 - will be blog - about and then we have
43:21 - one more up here that goes to our home
43:25 - route as well so I'll paste that in so
43:27 - now if we click on Gengo blog it goes to
43:29 - our blog home if we click on home it
43:31 - goes to blog home and about goes to blog
43:34 - about and again those are the names that
43:37 - we gave to our URL patterns here now
43:42 - again if I go back to my base template
43:44 - these this login and this register out
43:47 - here we haven't created those routes yet
43:50 - so we can't use the URL tag with those
43:52 - yet because if we try to use the URL tag
43:55 - with a URL that doesn't exist then we'll
43:58 - receive an error so when we create those
44:00 - login and register routes in a future
44:02 - video then we'll be sure to update these
44:04 - and the navigation bar as well but with
44:06 - the URL tags in place for our home and
44:08 - our about routes we should be able to
44:10 - reload our website and those should
44:12 - still work so let's reload our website
44:16 - so I'll reload the homepage here so now
44:18 - if we click around here in the
44:20 - navigation bar then all of these should
44:21 - still work so yet that still links to
44:24 - the about page and these two still link
44:26 - to the home page so the
44:27 - good so even if those routes are changed
44:29 - in the future our navigation should work
44:32 - no matter what no matter where those
44:34 - routes are because that URL tag will
44:36 - always get that location correct so we
44:38 - should use that URL tag anytime we can
44:41 - to keep our code easy to maintain okay
44:43 - so I think that is going to do it for
44:45 - this video I hope that now you have a
44:46 - good understanding of templates and how
44:48 - we can pass data into those templates
44:50 - and also the benefits of creating parent
44:52 - templates so that we can update every
44:54 - page on our site in a single location
44:56 - and the next video we'll be learning how
44:58 - to log in to our admin page that we saw
45:00 - earlier in the series and the admin page
45:02 - is a great way to see some back-end data
45:04 - and also where we can make changes and a
45:08 - nice easy to use GUI but if anyone has
45:10 - any questions about what we covered in
45:11 - this video then feel free to ask in the
45:13 - comment section below and I'll do my
45:14 - best to answer those and if you enjoyed
45:16 - these tutorials and would like to
45:17 - support them then there are several ways
45:18 - you can do that these ways to simply
45:20 - like the video and give it a thumbs up
45:21 - and also it's a huge help to share these
45:23 - videos with anyone who you think would
45:24 - find them useful and if you have the
45:26 - means you can contribute through patreon
45:27 - and there's a link to that page and it's
45:28 - scripts in section below be sure to
45:30 - subscribe for future videos and thank
45:31 - you all for watching
45:43 - you