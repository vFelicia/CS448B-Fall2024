00:00 - hey there how's it going everybody in
00:01 - this video we'll be adding the ability
00:03 - for users to add posts that will then
00:05 - show up on the home page will also look
00:07 - at using class-based views in order to
00:09 - work with our post model and see how
00:11 - these class-based views can be useful so
00:13 - let's go ahead and get started so now
00:15 - that we'll be working with our blog post
00:17 - we're going to be going back to our blog
00:19 - app that we created earlier in this
00:21 - series so first things first I'm going
00:23 - to open up the blog views and we're
00:25 - going to look at using class-based views
00:27 - in order to display update and delete
00:30 - new post so within our blog app let's
00:34 - open up views dot pi and this is where
00:37 - we have our current home and about views
00:39 - so so far in this series we've been
00:42 - using function based views and we should
00:44 - be fairly familiar with these by now
00:46 - so our URL patterns are directed to a
00:48 - certain view which are these functions
00:51 - and the views then handle the logic for
00:54 - the routes and then render our templates
00:56 - so now there are these things called
00:58 - class-based views and those have a lot
01:01 - more built-in functionality that we'll
01:03 - try to handle a lot of the backend logic
01:05 - for us so I'm going to create a
01:07 - class-based view for our home page so
01:09 - that we can see what this looks like
01:11 - compared to a function view so first of
01:13 - all there are different kinds of
01:15 - class-based views
01:16 - there are list views detail views create
01:19 - views update views and delete views and
01:22 - a couple more so if we think about it a
01:24 - lot of websites have very similar
01:27 - functionality so take a blog for example
01:29 - so you're going to have a web page where
01:31 - it lists all of your blog posts so this
01:34 - would be a list view or if you think
01:36 - about a site like YouTube for example
01:38 - then there's going to be a subscriptions
01:40 - page where it lists all of your video
01:42 - subscriptions so that is also a list
01:44 - view now what would happen if we clicked
01:46 - on one of those blogs or on one of those
01:48 - videos from the list well then it would
01:51 - take us directly to that blog or to that
01:53 - video and give us more details and it
01:56 - would show us all of the content the
01:58 - descriptions comments and all of that so
02:00 - those details that would be a detail
02:03 - view and then we also have the ability
02:05 - to update and delete blogs or videos and
02:08 - those would be update and delete views
02:11 - so Gengo tries to predict
02:13 - this common behavior and give us these
02:15 - generic views that do a lot of the
02:17 - background work for us
02:19 - so right now we have a homepage that
02:22 - gets all of our post objects and passes
02:24 - them to our home dot HTML template to
02:27 - display all of them there so that would
02:29 - be a good candidate for a list view
02:31 - since our home page is listing all of
02:34 - our blog posts so I'm going to rewrite
02:36 - this as a list view so that you can see
02:39 - the difference between that and the
02:41 - current function that we have right now
02:43 - so first I'll import list view up here
02:46 - at the top by saying from Django dot
02:51 - views let me spell that right from
02:53 - Django dot views dot generic import list
02:58 - view and now I'm going to create a new
03:01 - class because remember these are
03:02 - class-based views and I'm going to call
03:05 - this so I'll create it right below our
03:06 - home function so that we can see the
03:09 - differences here so I will call this
03:10 - class post list view and I will inherit
03:15 - from that list view and within our list
03:18 - view we need to create a variable called
03:20 - model and this will tell our list view
03:22 - what model to query in order to create
03:25 - the list and in this case we want it to
03:27 - be all of our posts so we'll set that
03:29 - model equal to post now technically this
03:33 - is all that we need to do in order to
03:35 - create a list view but we're going to
03:37 - need to add a little bit more to do this
03:39 - but first let me show you what this does
03:41 - if we try to use this list view like it
03:43 - is now
03:44 - and why we need to add a little bit more
03:46 - so in order to use this list view we can
03:49 - open up our blog URLs dot pi module and
03:52 - say that we want to use this post list
03:54 - view instead of our current home
03:56 - function so within our blog app let's
03:59 - open up those URLs and instead of using
04:02 - this views dot home we're instead going
04:05 - to use our post list view so let me
04:07 - actually import that directly so I'll
04:08 - keep the view import that we have now
04:11 - but I'll also add a direct import so
04:14 - I'll say from dot views import post list
04:18 - view and now instead of using our home
04:21 - view I'm going to replace this here with
04:24 - this post list view
04:26 - now when we use class-based views we
04:29 - can't just pass in the class like this
04:31 - it has to be converted into an actual
04:33 - view and they have a method available
04:36 - that does this
04:37 - that's called as view so we need to add
04:39 - that on so I'll say dot as underscore
04:42 - view and then we need to actually
04:45 - execute that okay so now let's load this
04:47 - in our browser and see what this does
04:49 - now it's not going to work right now but
04:51 - let's look at the error that we get so
04:53 - first of all it looks like our test the
04:55 - server is running so now let me reload
04:58 - our home page here so we can see that it
05:00 - says that a template doesn't exist so by
05:03 - default class-based views look for
05:05 - templates of a certain naming pattern so
05:08 - we can see here that it is looking for
05:10 - blog ford slash
05:12 - post underscore list dot HTML so let me
05:17 - write this out so that you can see this
05:20 - a little bit better so this is looking
05:23 - for a template with the naming
05:26 - convention of the app and then Forge
05:29 - slash the model and then underscore and
05:33 - then the view type dot HTML so in this
05:37 - case since our app is blog it was
05:40 - looking in blog and then post is the
05:42 - model so it was looking in post
05:45 - underscore and then the view type is
05:47 - list so altogether it was looking for
05:50 - blog forged slash post underscore list
05:53 - dot HTML so we could create a template
05:56 - with this naming convention and it would
05:58 - see that template but we can also change
06:01 - which template that we want this view to
06:03 - use and since we already have a template
06:05 - for our home view let's go ahead and
06:07 - just do that and change the template
06:09 - that it's looking for so we can do that
06:11 - within the view spy so I'm going to copy
06:13 - this just as a reference go back to our
06:16 - view spy and I will paste this in and
06:21 - now let's set a new template so that we
06:26 - can use our existing template for our
06:28 - home page so I will say template
06:30 - underscore name is equal to blog forge
06:35 - slash home dot HTML and I'll just put
06:39 - this convention on the
06:40 - of the line there so that we have that
06:42 - as a reference okay and lastly even with
06:45 - this change in place this isn't going to
06:47 - work for us just yet
06:48 - because it doesn't know what we want the
06:51 - variable to be named in our template
06:53 - that we're going to be looping over so
06:55 - for example if we look up here in our
06:57 - home view function we called all of our
07:00 - post objects post in our context but by
07:04 - default our list view is going to call
07:07 - that variable object list instead of
07:09 - post so we can either go into our
07:12 - template and change it so that it's
07:14 - looping over object list or we can set
07:17 - one more variable in our list view and
07:19 - let the class know that we want that
07:21 - variable to be called post instead so
07:24 - since we already have the template
07:25 - created let's just go ahead and set this
07:28 - variable here within our list view so to
07:31 - change that we can set an attribute here
07:34 - and this will be called context
07:36 - underscore object underscore name and we
07:40 - will set that equal to post since that's
07:43 - what it is up here in our home template
07:45 - and just setting those three attributes
07:47 - should do it so now if we save those
07:49 - changes and then reload this in our
07:51 - browser so reload our home page then now
07:54 - we can see that we got the same thing as
07:56 - when we were using our function view now
07:59 - one thing that isn't really right about
08:00 - our blog right now is the ordering of
08:03 - our post so our first blog post at the
08:05 - top is actually our oldest one and our
08:08 - latest post that we created is at the
08:11 - bottom now that's probably not what we
08:13 - want so if you're looking at someone's
08:15 - tweets or updates then you probably want
08:18 - to see their latest ones at the top
08:19 - instead of needing to scroll all the way
08:21 - to the bottom to see their latest so
08:24 - let's fix this so in order to do this
08:26 - we're going to need to change the order
08:28 - our query is making to the database so
08:31 - let's open up our view spy and go into
08:34 - our list and inside of our list view in
08:37 - order to change the order it's as simple
08:40 - as adding an ordering attribute with the
08:42 - field that we want to order on so I will
08:45 - say I will create a new attribute here
08:48 - called ordering and set this equal to
08:50 - and we want to set this equal to date
08:54 - hosted now this will order our posts
08:57 - from oldest to newest like it's doing
08:59 - right now now if we want to go from
09:00 - newest to oldest then we can just put a
09:03 - minus sign here at the front so now with
09:06 - that one small change if we save that
09:08 - and then go back to our browser and
09:10 - reload this then we can see that our
09:13 - newest post is at the top and that blog
09:15 - one which is our oldest post is at the
09:17 - bottom ok so now we are using this list
09:19 - view instead of our older function view
09:22 - so now let's look at the differences
09:24 - between those views that we have here so
09:27 - here was our home function and here is
09:30 - our home
09:30 - list view so we can see that we're not
09:32 - really saving any lines of code in this
09:34 - example compared to the function view
09:36 - but in our class base view we are
09:39 - basically just setting some variables
09:41 - and in our function view we had to
09:43 - actually render a function and
09:44 - explicitly pass in that information now
09:47 - we could have saved some lines of code
09:49 - if we had used generic view defaults so
09:52 - if I had created a template with the
09:54 - naming convention that our list view was
09:56 - looking for and used the variable name
09:59 - of object list inside of our template as
10:01 - opposed to post like we're using here
10:03 - then really the only line of code that
10:06 - we would have needed to set is the model
10:09 - and also the ordering if we wanted the
10:10 - ordering to be correct so really you can
10:12 - actually get a working class based view
10:15 - with just a single line of code if you
10:17 - stick to the conventions perfectly so
10:19 - let's actually do this with our next
10:21 - class base view and stick to the
10:23 - conventions so that we can see how this
10:25 - cuts down on code ok so to do this let's
10:27 - create a view for individual posts now
10:30 - when we look at an individual post this
10:33 - is going to be a detail view since we're
10:35 - going to be looking at the details of a
10:37 - single post object so to create a detail
10:40 - view let's first import it so up here at
10:43 - the top where we imported ListView it's
10:45 - also import detail view and now down
10:50 - here underneath my post ListView
10:52 - let's actually copy this and paste
10:55 - another class beneath here and now let's
10:58 - change a couple of things so instead of
11:00 - this being post ListView will call this
11:02 - post detail view we're going to import
11:05 - from detail view instead of
11:07 - ListView and now I'm also going to get
11:10 - rid of the ordering the context object
11:12 - name and the template name and I'm only
11:15 - going to leave the line with the model
11:17 - set to post okay so with that model set
11:20 - the post let's go create the URL pattern
11:22 - so let's open up our URLs now first
11:26 - we'll need to import that post detail
11:28 - view so up here at the top let's import
11:31 - post detail view and now we need to
11:34 - create a route that takes us to a
11:36 - specific post and to do this we're going
11:39 - to use something that we haven't seen
11:40 - yet so we have to create a URL pattern
11:43 - that contains a variable so for example
11:45 - let's say that we wanted to view the
11:47 - page for blog one then that URL would be
11:50 - something like post ford slash one and
11:53 - to go to blog two it would be something
11:56 - like post ford slash two and django
11:59 - gives us the ability to add variables
12:01 - within our actual routes so if we wanted
12:04 - to create a route where the ID of a post
12:07 - is actually part of the route then we
12:10 - can create a route that looks like this
12:13 - so I'm going to copy this home route as
12:15 - a starting point and paste this in and
12:18 - now we can create a route with a
12:20 - variable just by saying okay post forged
12:24 - slash and then these angle brackets here
12:27 - and then we can say PK and that is going
12:31 - to be the primary key of the post that
12:33 - we want to view so if we go to post
12:35 - forged slash one then we will go to the
12:38 - blog with the ID of one or with the
12:40 - primary key of one now we can also set
12:43 - what kind of variable this is so if we
12:46 - know that this is going to be an integer
12:47 - then we can tell Django that we only
12:50 - expect to see integers after post so
12:53 - that will prevent you know put somebody
12:55 - putting in strings or anything like that
12:56 - now remember we want to end all of our
12:59 - routes with a trailing slash and now
13:02 - instead of going to post list view the
13:04 - post detail view is what is going to
13:07 - handle this route and instead of this
13:10 - being blog home we will make this post -
13:13 - detail so again by specifying that PK
13:16 - variable in the URL that allows us to
13:20 - grab that value from the you
13:21 - and use it in our view function and in
13:24 - this case we're using a class-based view
13:26 - so that will be passed to the
13:28 - class-based view and remember how I said
13:30 - we're going to stick to conventions so
13:32 - that we can save some lines of code well
13:34 - the reason that I called this variable
13:36 - PK is because that's what the detailed
13:39 - view expects it to be in order to go
13:41 - grab that specific object so we could
13:44 - change that by adding an attribute to
13:46 - our class but if we leave it as PK then
13:48 - we can just leave it as is okay so
13:50 - lastly we need to create a template that
13:53 - will display our post details now if I
13:56 - go back to my views here then we can see
14:00 - that by default our generic class-based
14:03 - view are going to be looking for a
14:05 - template with this naming convention so
14:08 - it's going to be looking in the
14:09 - directory of the app name which in this
14:11 - case is going to be blog and then a
14:13 - template with the model name which is
14:16 - going to be post then an underscore and
14:18 - then the template type or and then the
14:21 - view type so in this case it's going to
14:23 - be detail so this is going to be looking
14:25 - for a template called blog forged slash
14:28 - post underscore detail HTML so let's
14:31 - create a template with that name so that
14:33 - it finds it automatically without us
14:35 - needing to specify a template name like
14:38 - we did in the post list view so within
14:41 - our templates I'm going to open the
14:43 - subdirectory of blog and within blog
14:46 - let's create a new template and I will
14:48 - call this post underscore detail dot
14:51 - HTML and this is going to be very
14:53 - similar to home dot HTML except we're
14:56 - just gonna have a single post so let me
14:59 - copy home dot HTML and paste this in to
15:03 - post detail but the difference here is
15:05 - that we don't need to loop over posts
15:07 - since there's only going to be one so
15:09 - I'm going to remove our for loop here
15:11 - and remember there is an end to the for
15:13 - loop down here and now I will uninvent
15:16 - this and fix this let me fix the
15:20 - indentation here and there are just a
15:23 - couple more changes here so for example
15:25 - we don't need the title of our post to
15:28 - be a link anymore because that link on
15:31 - the home page is what takes us to the
15:33 - detailed view so now we can just leave
15:35 - it
15:35 - as an h2 tag but I still want this
15:37 - article title class here so I'm going to
15:40 - copy that article title class but now we
15:43 - can just remove the anchor tag so I'm
15:45 - gonna remove the closing anchor tag
15:47 - there and remove this whole opening
15:49 - anchor tag here and then I'm going to
15:52 - paste that class into our h2 tag there
15:55 - instead okay and just one more change
15:57 - that we need to make so when we're
15:59 - dealing with detail views it expects the
16:01 - context of this template to be called
16:04 - object so right now we are calling this
16:07 - post now we can change this to post by
16:10 - changing an attribute in our class but
16:12 - like I said we're gonna try to keep to
16:14 - all of the defaults that it expects so
16:16 - let's instead change all of these post
16:19 - variables here to use object instead so
16:23 - where we are printing out the image URL
16:26 - here I'm going to say object dot author
16:29 - and for the author I'm gonna say object
16:32 - author for the date posted we'll do
16:34 - object date posted for the title we will
16:38 - say object dot title and for the content
16:41 - object dot content and I think that is
16:44 - the last one okay so now let's save this
16:47 - and open a post in our browser and see
16:49 - if this is working so first I will check
16:53 - the dev server and that is running and
16:55 - now let's go to a URL for a specific
16:59 - post so I will do ford slash post forge
17:03 - slash one and we can see that that
17:05 - displays our blog one so now we can see
17:08 - that we've got pages specifically for
17:10 - these individual posts now remember in
17:13 - our views all we needed was to specify
17:15 - that model on our detail view and it
17:18 - handled the rest of that functionality
17:19 - for us okay so now that we actually have
17:21 - these individual pages let's add links
17:24 - to these routes for the individual posts
17:26 - on our home page so right now those are
17:29 - just dead links because I was waiting
17:31 - until we got the detail routes working
17:33 - so if we go to the home page right now
17:35 - we can see that these actually go
17:37 - nowhere so let's update these links to
17:40 - where they actually go to the page for
17:42 - that individual post so those are within
17:45 - the home dot HTML template because that
17:48 - is where we are looping
17:49 - for these posts so I will open up home
17:51 - dot HTML and here is the post title that
17:57 - is where we have this link and currently
17:59 - it is a dead link so in order to link to
18:02 - that individual post we can use the URL
18:05 - tag that we've seen before so I'll say
18:07 - URL and the name of that route was post
18:10 - detail and now we also had a parameter
18:15 - in that URL so remember it's the ID for
18:19 - the individual post so we can pass that
18:21 - into the route just by adding this on to
18:24 - the URL tag here so I'll say post dot ID
18:27 - and that'll make sure that that gets
18:29 - passed in if I go to our URLs
18:31 - that'll get passed in as the primary key
18:33 - here in the URL so now let's go back to
18:36 - our browser and reload our homepage and
18:39 - now if I hover over these this is hard
18:42 - to see but in the bottom left it's
18:44 - telling me that the link is going to
18:46 - take me to post - this one will take me
18:48 - to post one and this one will go to post
18:49 - three so if we test some of these then
18:52 - we can see that those are now working
18:55 - now if I try to go to a post that
18:57 - doesn't exist then I should get a 404
18:59 - error that means that the post with that
19:01 - ID doesn't exist so if I go up and try
19:05 - to go to let's see instead I'll go to
19:07 - post 10 instead of post 1 now we don't
19:10 - have a post 10 so we can see here that
19:12 - this says page not found 404 and that's
19:15 - good that we get that error because that
19:17 - route wouldn't exist unless we had a
19:19 - post with that ID ok so now we've seen a
19:23 - list view to list our posts and a detail
19:26 - view to get a specific post now let's
19:29 - create a create update and delete view
19:32 - so that we can do all of those things
19:34 - with posts on the front end so first
19:36 - let's see how users can create new post
19:39 - so let's open back up our views here so
19:43 - I have the views open here I'll scroll
19:46 - up to the top because we need to import
19:48 - our create view so right after a detail
19:51 - view I will import create view now we
19:55 - can see that our import line here is
19:56 - starting to get a little long if you
19:58 - ever want to break up an import line
20:00 - then you can just put these within paren
20:03 - here and put these on different lines so
20:07 - I will move all of those and then in the
20:11 - parenthesis okay so now for this create
20:13 - view I'm just going to copy the detail
20:15 - view and modify it a bit so I will copy
20:18 - the detail view and right underneath I
20:21 - will paste another class and instead
20:23 - we'll call this post create view and we
20:26 - will inherit from create view okay so
20:30 - this is going to be a view with a form
20:32 - where we create a new post so the only
20:35 - other thing that we need to provide are
20:37 - the fields that we want to be in that
20:40 - form so let's say that we want to fill
20:42 - in the title and the content for a new
20:45 - post now the date posted will be filled
20:47 - in automatically and we'll see how to
20:49 - set the author in just a second but for
20:53 - now we need to set the fields that we
20:55 - want in that form so I'll say fields are
20:57 - equal to and we just want the title and
21:00 - the content and save that okay so with
21:04 - that in place let's update our URLs with
21:06 - this new create view so within our URLs
21:09 - I will import post create view and just
21:14 - like in our views I'm going to split
21:17 - these up on multiple lines because this
21:19 - is getting a little long now don't
21:22 - forget the parentheses around those okay
21:24 - and now we'll create the URL pattern for
21:26 - creating a new post so I'm just going to
21:29 - copy this line here and then change this
21:33 - around a little bit so to create a new
21:35 - post we'll go to post forge slash new
21:38 - and the posts are and the view to handle
21:41 - that will be our post create view and
21:43 - instead of post detail we will call this
21:46 - post create okay so at this point we
21:49 - know that we need a template for this
21:51 - view but it might not be named what you
21:53 - think it's going to be named so for
21:55 - example for the detailed view it was
21:58 - post underscore detail so you might
22:00 - think that for this one it should be
22:01 - post underscore create but this one will
22:04 - actually share a template with the
22:07 - update view that we're going to be
22:08 - creating and a little bit so they
22:10 - actually expect this template to be the
22:12 - name of the model followed by underscore
22:16 - form so in this example we're going to
22:18 - create a template called post underscore
22:21 - form so up in my blog templates I'm
22:24 - going to create a new file and let's
22:26 - create this called post underscore form
22:28 - dot HTML and this form template is going
22:31 - to be really similar to the other
22:33 - templates that contain forms that we've
22:35 - created in this series so far so
22:37 - actually it would save us time
22:38 - just to grab our register template
22:41 - because there will only be a few changes
22:43 - that we need to make from that so within
22:45 - our users app I'm going to go to those
22:48 - templates and I'm gonna open the
22:50 - register template and copy that as a
22:52 - starting point and paste that in to our
22:54 - post form template okay so our create
22:57 - view actually expects the form to be
22:59 - called form so we can just leave that as
23:01 - is and we'll be printing that form out
23:04 - using the krispy forms like we've done
23:06 - before
23:06 - so all we need to do is change the
23:08 - legend and the submit button and we can
23:11 - also remove this link down here at the
23:13 - bottom so first I'll change the legend
23:16 - so I'll change this to blog posts and
23:19 - still be creating a blog post for the
23:22 - submit button I will change this to post
23:24 - and this link contained in this div
23:28 - right here that says already have an
23:29 - account we don't need that link there so
23:31 - we can just remove this entire div
23:34 - underneath our form so now we only have
23:37 - the form on this page so let's save that
23:39 - okay so with that template created let's
23:41 - see how this actually looks in the
23:43 - browser so I will open this up and go
23:46 - back to our home page and now I'm going
23:50 - to go to the route of ford slash post
23:52 - ford slash
23:53 - new and we can see that it is a form to
23:56 - create a new blog post ok so this is
23:59 - looking really good so this is why
24:00 - class-based views are so powerful
24:03 - because we didn't have to actually
24:04 - create a forms module to create this
24:07 - form or anything like that all we did
24:09 - was tell our create view that we wanted
24:12 - to work with the post model and also
24:14 - that we wanted to have the title and the
24:17 - content fields within that form now it's
24:20 - not a hundred percent perfect because
24:22 - there are still some changes that we
24:23 - need to make so for example if we try to
24:26 - create a new post right now then it's
24:28 - not going to work
24:30 - so if I come in here and say I title of
24:32 - blog 4 and then my fourth vlog post and
24:36 - if we submit that then we can see that
24:38 - we're getting an error here and it says
24:40 - that this is an integrity error not null
24:43 - constraint failed it has no blog post
24:46 - our ID and the reason that we're getting
24:49 - an integrity err is because we're trying
24:51 - to create a post but it's saying that
24:53 - our author is null and that's not
24:56 - allowed so every post needs to have an
24:58 - author now we want the author of the
25:00 - post to be the current logged in user
25:02 - but it doesn't know that so we have to
25:04 - tell it in some way so the way that we
25:07 - can do that is to override the forum
25:09 - valid method for our create view and
25:12 - that will allow us to add the author
25:14 - before the form is submitted so let's do
25:17 - that now so back in our views so I'm
25:20 - going to go to our blog views here and
25:23 - down to our post create view and within
25:26 - this create view we need to override the
25:28 - forum valid method so I will create a
25:32 - method here that is forum valid and this
25:36 - takes in self and form as arguments and
25:40 - within here we can simply set the author
25:42 - on the forum by saying forum dot
25:45 - instance dot author is equal to self dot
25:51 - request dot user so basically this is
25:55 - saying hey that forum that you are
25:56 - trying to submit before you do that take
26:00 - that instance and set the author equal
26:03 - to the current logged end user and once
26:05 - we do that then we can validate the
26:08 - forum so we will return super dot form
26:13 - underscore valid and then pass in that
26:16 - form as an argument so basically this
26:18 - line here is just running that form
26:21 - valid method on our parent class and
26:24 - that would have been run anyway but
26:26 - whenever we over ride it right here we
26:28 - are just setting the author before that
26:30 - gets ran okay so that should do it for
26:33 - setting the author so now let's try to
26:35 - create a new post and a browser and see
26:38 - what we get now I'm going to let you
26:39 - know that this still isn't going to work
26:41 - but let's look at the air and see
26:43 - if it is helpful so we'll go back to the
26:46 - post ford / new and try to create
26:50 - another post so fourth post and submit
26:55 - okay so we're no longer getting the
26:57 - integrity err about the author so that's
26:59 - good
26:59 - now we're getting an error that says
27:01 - that we don't have a redirect URL it
27:04 - says in the error message I know this is
27:06 - a little small here it says either
27:08 - provide a URL to redirect to or define a
27:12 - get absolute URL method on the model so
27:15 - basically it's telling us that it
27:16 - created the post successively but it
27:19 - doesn't know where we want to be
27:20 - redirected to now so if we go back to
27:23 - the home page then we can see that our
27:26 - post was actually created here so that's
27:28 - good so now to get this working 100% we
27:31 - just need to let the view know where we
27:33 - want to redirect once we've created the
27:36 - post now ideally we would just redirect
27:39 - to the detail page of the post that we
27:41 - just created and that's actually what it
27:43 - tries to do but it just doesn't know how
27:45 - to get there so we have to tell it and
27:47 - it said this on the error page but the
27:50 - way to tell Gengo how to find the URL of
27:53 - a model object is to create a get
27:55 - absolute URL method in our model that
27:59 - returns the path to any specific
28:00 - instance so let's open up our blog
28:03 - models and I'll show you what I mean by
28:05 - this so let's open up our blog models so
28:09 - in our blog app I'm going to open up
28:11 - models dot py and within our post model
28:15 - we need to create that get absolute URL
28:17 - method so that Django knows how to find
28:20 - the location to a specific post so first
28:23 - we're going to be getting the URL of a
28:25 - particular route and in order to do this
28:28 - we need to use the reverse function now
28:31 - you might be wondering why we're not
28:32 - using the redirect function that we've
28:34 - seen earlier in this series but redirect
28:37 - and reverse are a little different so
28:39 - redirect will actually redirect you to a
28:42 - specific route but reverse will simply
28:45 - return the full URL to that route as a
28:48 - string so that is the difference between
28:50 - those and in this case we simply want to
28:52 - return the URL as a string and let the
28:55 - view handle the
28:56 - redirect for us so first we have to
28:59 - import the reverse function so up here
29:02 - at the top I'm going to say from Django
29:05 - dot URLs import reverse and now down in
29:10 - our post model now we'll create that get
29:13 - absolute URL method to tell Django how
29:16 - to find the URL to any specific instance
29:18 - of a post so to do this we can say get
29:22 - absolute underscore URL and this will
29:26 - take self as an argument and now we can
29:29 - return the path to a specific post so
29:32 - we're going to return reverse so like I
29:34 - said reverse will return the full path
29:36 - as a string so the full full path that
29:39 - we want to get is the path to the post -
29:43 - detail route and it remember it needs a
29:48 - specific post with a primary key so we
29:51 - will set our Korg's equal to and
29:54 - remember that URL parameter is called pk
29:56 - for primary key and the value for that
30:00 - is going to be self dot pk
30:03 - so the instance of a specific post
30:06 - primary key okay so now if we save that
30:08 - then now let's try to create one more
30:11 - post and hopefully with these changes
30:13 - this will be working fully so let's open
30:15 - up the browser here and I'm going to go
30:18 - to forge / post Ford / new and I will
30:21 - create blog 5 and then my fifth post and
30:27 - I will submit that and we can see that
30:30 - it created our post and redirected us
30:32 - right to the detail page for the post
30:34 - that we just created so that's great now
30:36 - if you just want that to go to the home
30:39 - page instead of the specific post then
30:41 - you could set an attribute in the create
30:43 - view called success URL and just set
30:46 - that to the home page instead but in our
30:48 - case I think it's better to redirect to
30:51 - this detailed view okay so that is a lot
30:53 - of functionality that Django gives us
30:55 - after filling in just a few different
30:57 - attributes and that would have taken a
30:59 - lot more work and other frameworks now
31:01 - that would have also taken a lot more
31:03 - code if we'd done that with regular
31:05 - function views instead so we would have
31:07 - needed to create forms and handle
31:09 - post requests and save the information
31:12 - and all of that but with these
31:14 - class-based views we can do a lot of
31:16 - this just by knowing what attributes
31:19 - need to be set so you can definitely
31:21 - save yourself a lot of lines of code
31:23 - once you get familiar with this kind of
31:24 - stuff okay now there's actually one more
31:26 - thing that we need to do with this
31:28 - create view so we shouldn't be able to
31:30 - create a post unless we're logged in as
31:32 - some user so we need to make it so that
31:34 - if we try to access this route and we're
31:36 - not logged in then we'll just be
31:38 - redirected to the login page now we saw
31:40 - how to do this with function based views
31:42 - when we created our user profile page so
31:45 - for function based views we use that
31:46 - log-in required decorator well we can't
31:49 - use decorators on classes so what we are
31:51 - going to use here is something called a
31:53 - login mixin and that's basically just a
31:56 - class that we inherit from that will add
31:58 - that login functionality to the view so
32:01 - let's go ahead and add this in so I'm
32:03 - going to go back to our views here and
32:07 - go up to the top because we need to
32:08 - import this and here at the top I will
32:11 - import this by saying from Django dot
32:14 - country birth mix-ins import and this is
32:20 - kind of long login required mix in and
32:24 - now we just want to add this to the
32:25 - classes that we are inheriting from and
32:28 - we'll want to add this to the very first
32:29 - one on the far left so I'm going to copy
32:32 - this and go down to our post create view
32:35 - and we want to add this to the far left
32:36 - so we want to inherit from the login
32:39 - required mixin and then the create view
32:42 - so now if we save that and go back to
32:44 - our browser and log out and then try to
32:47 - add a new post
32:49 - so I'll log out and then I will go to
32:51 - post ford slash new and then you can see
32:55 - that we are redirected to the login page
32:57 - so that's good okay so now let's create
33:00 - an update view so that we can update
33:02 - posts on the front end so we should kind
33:05 - of be getting used to this by now so
33:06 - let's go back to the views here and at
33:09 - the top we will add to our list of
33:11 - imports so I will import an update view
33:14 - and now down here under our create view
33:17 - I'm just going to copy our create view
33:19 - because the update view is going to be
33:21 - very similar so I will paste that
33:23 - and I will let's see make all this post
33:28 - update view here and we want to import
33:30 - from update view and now we can actually
33:33 - leave this exactly the same in terms of
33:35 - the model and fields and the form save
33:38 - method so let's add a path now to our
33:41 - URL patterns so let's go to our urls dot
33:45 - pi and we can just copy our actually let
33:50 - me copy the post detail view here well
33:53 - and let's also not forget to import the
33:56 - view that we just created so we created
33:58 - that post update view so now let's do
34:01 - the route for this so i copied the post
34:05 - detail view and pasted that and here now
34:07 - to update a post we're going to need to
34:09 - include that primary key with that route
34:12 - as well because we have to know what
34:14 - post that we are updating so we will do
34:17 - post forged slash this primary key and
34:21 - then after that we will do ford slash
34:23 - update and we will let the post update
34:27 - view handle that route and for the name
34:30 - here we will do post - update ok and
34:34 - since we are providing that primary key
34:36 - in the URL to the post that we want to
34:39 - update then Gengo the Django update view
34:42 - will take care of everything else
34:44 - with the information that we've already
34:46 - provided and even for the template it's
34:48 - just going to use that same post form
34:50 - template that we created for the create
34:52 - view so if we don't even need to add
34:54 - another template and so now this should
34:57 - be working so if I open up the browser
34:59 - and I try to update a post so let's up
35:02 - go to the browser here and login so I'll
35:05 - log in as a user and now let's try to
35:09 - update our one of our posts so I'll go
35:11 - to this blog 5 and then go to forge /
35:14 - update after post 5 then we can see that
35:17 - we get a forum and this is already
35:19 - filled in with the current title and
35:21 - content so let's try to update this so
35:24 - I'll say blog 5 updated my fifth updated
35:27 - post and submit that so we can see that
35:30 - that updates our post so that was pretty
35:32 - easy to put together now when you're
35:34 - building an application like this you
35:36 - kind of need to be thinking about
35:38 - the different ways that people could use
35:39 - your app or try to abuse it and always
35:42 - try to plan for that so for example
35:45 - right now we have a login check on being
35:48 - able to update a post and to be able to
35:50 - create a post but we aren't checking if
35:52 - the author of the post is the person
35:55 - trying to access this update page and
35:58 - that's important because we only want
36:00 - the people who wrote the post to be able
36:02 - to edit it so let me show you what I
36:04 - mean if I go to the home page and then I
36:07 - click on a blog written by another user
36:09 - so this test user here as blog 3 if I go
36:12 - to that and then type an update after
36:16 - post 3 then we can see that we can also
36:19 - update this blog entry so that's not
36:22 - good so that would be like if someone
36:24 - could edit your tweets or something like
36:26 - that
36:26 - so we want to put a check in place so
36:29 - that only the author of the post can
36:31 - actually update it so to do this we're
36:33 - going to use another mix in and first we
36:35 - have to import it so let's go back to
36:38 - our views and go up to the top here to
36:41 - our imports and I'm going to import a
36:44 - mixin called user passes test mixin and
36:49 - now let's add this to our update view
36:52 - inheritance so I will copy that and go
36:55 - down to our update view here and I will
36:57 - add this to our inheritance so it still
37:00 - needs to be to the left of the update
37:02 - view so I'll just put it right after the
37:04 - login required mix in there and once we
37:06 - have that in place we can create a
37:08 - method called test funk and that is a
37:11 - function that our user passes test mixin
37:14 - will run in order to see if our user
37:16 - passes a certain test condition so I'll
37:19 - just create this underneath the form
37:21 - valid method that we have already
37:23 - created so I will say def test
37:26 - underscore funk is what we need to call
37:29 - that and it takes self as the argument
37:32 - there and now we want to get the exact
37:34 - post that we're currently updating the
37:36 - way that we can get this is using a
37:38 - method of the update view called get
37:41 - object so we can get the post by saying
37:43 - post is equal to self get object and
37:48 - that will get the post that we are
37:49 - currently trying to
37:51 - update and that's actually a method so
37:53 - we need to put the parentheses on there
37:55 - and now we can check to make sure that
37:57 - the current user is the author of the
37:59 - post so I'll say if self dot request dot
38:04 - user is equal to post dot author so this
38:10 - gets the current logged end user and
38:12 - it's checking if this is equal to the
38:15 - author of the post that we are trying to
38:17 - update so if that is true then we want
38:21 - to allow them to update the post so we
38:23 - can just return true and otherwise if
38:26 - that conditional is not met then we will
38:28 - just return false now we could just
38:31 - return that conditional as one line
38:33 - right there but I think this is a little
38:35 - bit more readable how we have it now
38:37 - okay so with that test function in place
38:39 - that should prevent any users from
38:41 - trying to update other people's posts so
38:44 - let's go back to our browser and reload
38:46 - the page where we were trying to update
38:48 - someone else's post so this is currently
38:51 - test users post so if I reload this then
38:54 - we can see that we get a 404 or 403
38:57 - response that says that this is
38:59 - forbidden and that is the exact response
39:01 - that we want so that is good okay so
39:04 - that does it for the update view so
39:07 - lastly we're also going to want to
39:09 - create a delete view for deleting posts
39:12 - and the delete view is very similar to
39:14 - our detail view so I'm going to go back
39:16 - to our views and import our delete view
39:19 - so let's go back to our views here and
39:22 - let's import the delete view from here
39:24 - at the top so we'll add that in and like
39:28 - I said this will be very similar to the
39:30 - detail view so let's just reuse that so
39:33 - I will grab the post detail view and
39:35 - I'll put this underneath our update view
39:38 - here so now we just want to change this
39:41 - to say post delete view and we want to
39:45 - inherit from delete view now unlike our
39:48 - detail view we want to require a user to
39:51 - be logged in here and also require that
39:53 - the user is the author of the post in
39:55 - order to see the delete view so we'll
39:58 - just copy those inherited mix-ins from
40:00 - our update view so I will go up to our
40:03 - update view here just grab now
40:05 - login required mixin and the user passes
40:07 - test mix in and paste those in there and
40:10 - just a reminder those have to be to the
40:12 - left of the delete view inheritance and
40:15 - now will also copy the test function
40:17 - from our update view since that will be
40:20 - exactly the same we're going to be
40:21 - running that same test of making sure
40:23 - that that current post has the author of
40:26 - the current logged in at user okay so
40:28 - now all we need to do is add a path to
40:30 - our URL patterns so I'll open up our
40:32 - urls go up here and import that post to
40:36 - leave you so import post delete view and
40:40 - now let's create a delete path so I'll
40:44 - copy our update view here so we want
40:47 - this to be the post forged slash primary
40:50 - key forged slash delete and we want to
40:53 - send this to the delete view and the
40:59 - name that we want here is going to be
41:00 - post delete okay so now all this needs
41:04 - is a template and the template that this
41:07 - expects is just a form that asks if
41:09 - we're sure that we want to delete the
41:11 - post and if we submit the form then the
41:13 - post will be deleted so let's create
41:15 - this so this template is going to be
41:17 - similar to the others except it's going
41:19 - to be called post underscore confirm
41:22 - underscore delete dot HTML so within our
41:25 - blog templates I'm going to create a new
41:28 - file and this is called post underscore
41:31 - confirm underscore delete dot HTML and
41:35 - I'm just going to copy from our post
41:37 - form template that was used for our
41:39 - create and update templates so I am
41:42 - going to copy from here and paste that
41:45 - into our post confirm delete template
41:48 - and now we'll make a couple of changes
41:50 - here so the legend instead of this being
41:52 - blog post I'm going to change this to
41:55 - delete post as the legend now this
41:58 - doesn't actually pass in a forum for us
42:00 - so we can actually remove the crispy
42:02 - forms and they form line here so I will
42:05 - remove where we are loading in crispy
42:07 - forms and I will also remove our form
42:09 - line so really this is just going to be
42:12 - a page that asked us if we really want
42:14 - to delete the post and if we hit the
42:16 - submit button then the post requests
42:18 - we'll simply delete the post so we just
42:21 - have to ask the user so underneath the
42:23 - legend here I'm just going to put in an
42:26 - h2 tag and I'm just going to say our
42:28 - whoops are you sure you want to delete
42:34 - the post and then we will actually just
42:37 - put in the title for the post so they
42:40 - know which post they are about to delete
42:42 - so remember the context here is called
42:46 - object just like the detail view so we
42:49 - can say object dot title and now for our
42:52 - buttons at the bottom we currently have
42:55 - one that says post so this is the submit
42:58 - button this is what will confirm the
43:00 - deletion so let's be sure that the user
43:02 - knows this so in this button we will say
43:05 - yes delete and let's also give this a
43:09 - class of outline danger instead of info
43:12 - because deletions should have a visual
43:14 - warning since its permanent so instead
43:17 - of this being outline info I will say
43:20 - outline danger and now let's also put a
43:23 - cancel link that takes them back to the
43:25 - post detail view
43:26 - just in case they didn't mean to delete
43:28 - this post or change their mind so I'm
43:30 - going to copy our button here but after
43:34 - I copy this so let me paste another
43:37 - button underneath here but now I'm going
43:39 - to change this to an anchor tag so
43:41 - instead of a button that will submit we
43:45 - will change this to an anchor tag and
43:47 - also remove this type equals submit
43:50 - there now like I said we want this to be
43:52 - a cancel button so I will change the
43:56 - text in here to be canceled and we want
43:59 - to set an href that just takes us back
44:02 - to the detailed view of this exact post
44:06 - so to do that within our href we can put
44:09 - in a code block here and say URL and we
44:13 - want to go to the URL of post detail and
44:17 - to pass in the primary key of this post
44:20 - we can just say object dot ID so that
44:23 - will create a URL of the post detail
44:27 - page for this post ID and then lastly
44:31 - instead of
44:32 - outlining this in danger we only want
44:35 - the danger one to be the confirmation of
44:38 - the deletion for the cancel we'll just
44:40 - make this more muted so a good bootstrap
44:42 - style for this is secondary
44:44 - so we'll say button outline at -
44:47 - secondary okay so that should do it so
44:49 - let's bring up our browser and see if
44:51 - this works so if we go to our browser
44:54 - then I can go back to our home page here
44:59 - and find a post that we have written and
45:03 - now I will try to go to forge / delete
45:06 - and it says are you sure that you want
45:08 - to delete the post blog 5 updated so if
45:11 - we say cancel then it should take us
45:13 - back to that post page which it did so
45:16 - now let's go back to the delete route
45:18 - but now if we say yes that we want to
45:21 - delete this post and click on that then
45:24 - we can see that we get an error and we
45:26 - get an error because it's saying that it
45:28 - doesn't know where to redirect us now if
45:30 - we read the error then it actually tells
45:32 - us exactly what we need to do it says
45:34 - that we need to provide a success URL so
45:37 - we'll go do that now when we get a
45:40 - failure on deletion it actually doesn't
45:42 - do the deletion just in case so that
45:44 - post will still be there so if I go back
45:47 - to the home page then we can see that
45:50 - that post still exists so now I'm going
45:53 - to go back to our delete view and add a
45:55 - success URL so that our deletion knows
45:58 - where to redirect us if that works so
46:00 - let's go back to our blog views so I
46:03 - will open up our views dot PI and go
46:06 - down to our delete view and in our
46:09 - delete view all we need to do is add a
46:10 - success URL attribute and we'll just set
46:13 - this to the home page so it can't go to
46:16 - the page of that post like our create
46:18 - and update views did because that post
46:20 - is deleted and no longer there so the
46:23 - home page sounds like a good place to
46:24 - send them so we will just say success
46:29 - underscore URL is equal to and we'll
46:32 - just send them to the home page ok so
46:35 - now let's open that post and try to
46:36 - delete that again so I am going to go
46:39 - back to the home page here let's click
46:41 - on blog 5 and I will go to vlog 5 forge
46:46 - slash delete and it says are you sure
46:48 - you want to delete this post will click
46:50 - yes and we can see that that post was
46:52 - now deleted okay so that works so that
46:55 - is great so in this one video we've
46:57 - added the ability to list view create
47:01 - update and delete posts using these new
47:04 - class-based views so that is a lot of
47:07 - functionality that we were able to add
47:08 - in here during the short time of this
47:11 - video so now that we have all of this
47:13 - working let's make a few changes to our
47:15 - site just to get everything working
47:17 - together a bit better so right now all
47:20 - of this functionality is working but we
47:22 - don't have any links in place to
47:24 - actually get to any of these routes that
47:26 - we just created so let's create those so
47:29 - first of all let's put a link in our
47:30 - navigation bar to create a new post
47:33 - so our navigation bar is in the base
47:35 - HTML template of our blog so let's open
47:39 - that up so I will go to our blog
47:41 - templates and open up base HTML and if
47:44 - we scroll down to our navigation which
47:47 - is right here then I'm gonna add this to
47:50 - the part of our navigation that the user
47:51 - can only see if they are logged in so
47:54 - that is this section right here so I'm
47:57 - just going to copy this profile link and
47:59 - paste this in and then change this so
48:03 - instead I want this to be a URL for post
48:07 - - create and we want the link text just
48:12 - to say new post ok so now we have a link
48:15 - to create a new post so now let's add
48:17 - links to update and delete our post so I
48:19 - think a good place for these would be
48:21 - within the post detail page and if the
48:24 - user is the user who wrote the post then
48:26 - they'll see links to update and delete
48:28 - the post if they'd like so that will be
48:31 - in the post detail template so within
48:33 - our blog templates let's open up the
48:36 - post detail template and let's just put
48:38 - these buttons right after the author and
48:40 - the date so right after the author and
48:43 - date here we can put in a conditional so
48:46 - we will say if object dot author is
48:50 - equal to user which is the current
48:54 - logged in user then we can add in the
48:57 - buttons for the update and delete
48:59 - so first I'm going to end this if
49:02 - statement so end if and now within this
49:06 - conditional if the author is the current
49:09 - logged in user then we can add these
49:11 - links to update and delete so I'll add
49:13 - an href here and we want this to be a
49:16 - URL so we'll say URL and this will be a
49:20 - URL to the post - update route and we
49:26 - need to tell which object we want to
49:29 - update so this will be object dot ID and
49:33 - it'll pass that in to the URL correctly
49:36 - and for the link text here we will just
49:38 - say update now let's also give this some
49:41 - classes so we'll say class is equal to B
49:45 - TN which is a bootstrap button and we
49:47 - also say BTN - secondary that's kind of
49:51 - a more muted button for update and let's
49:54 - also give this a class of BTN - SM which
49:57 - is a smaller button and also I want a
50:00 - margin top of one so MT - one and a
50:04 - margin bottom of one as well so MB - one
50:08 - in case you guys were wondering I've
50:09 - kind of played around with these styles
50:10 - before I recorded this video so that's
50:12 - how I know what how I want these to look
50:15 - so now I'm going to copy this anchor tag
50:18 - here and now let's make the delete
50:21 - button so right underneath the update
50:22 - button I will paste in a new link here
50:25 - and we will have this be a delete button
50:28 - and we want this to go to post delete
50:32 - for the URL and for the class here
50:35 - instead of this being button secondary
50:37 - let's make this button danger so that
50:40 - they know that this is a delete button
50:42 - okay so with those changes in place we
50:44 - should have links to all of the routes
50:46 - that we created in the video so let's
50:48 - give this one last look in the browser
50:50 - so we will save all of those and open
50:53 - this up in the browser so we can see
50:56 - that since I'm logged in we now have a
50:57 - new post link up here so if I click on
50:59 - that then it takes us to the route where
51:01 - we can create a new post so if I go back
51:05 - to the home page and click on a post
51:07 - that I have created then we can see that
51:10 - we have an update and delete link here
51:12 - if I
51:13 - like on update then we can see it takes
51:15 - us to the update route if I click on the
51:18 - delete link then it takes us to the
51:21 - delete route now there's one more thing
51:23 - with this post detail template here I
51:25 - actually wanted these to be on a new
51:27 - line so I think I forgot to wrap those
51:29 - in a div so let me open that back up
51:32 - luckily that was the last thing we were
51:34 - just looking at so these two buttons
51:36 - here inside this conditional and our
51:38 - post detail template let's actually wrap
51:40 - those in a div so I will create a div
51:45 - there and now let's just put those
51:48 - inside of there and fix that indentation
51:54 - now let's reload this okay now we can
51:57 - see that those buttons are underneath
51:58 - there and I think that looks a lot
52:00 - better now let's also make sure that
52:02 - that conditional is working by going to
52:05 - a post that someone else has written and
52:07 - when we go to that post detail we can
52:10 - see that the update and delete links
52:12 - aren't there so that conditional is
52:14 - working okay so I think that is going to
52:16 - do it for this video hopefully now you
52:17 - have a pretty good idea for how you can
52:19 - use class-based views to list out
52:21 - different objects from our database and
52:23 - also how to view update and delete those
52:26 - objects using these views now in the
52:29 - next video we'll learn how to paginate
52:30 - our site so that our posts are broken up
52:33 - into different pages and we'll also see
52:35 - how to create a page for specific users
52:38 - posts but if you have any questions
52:39 - about what we covered in this video then
52:41 - feel free to ask in the comment section
52:42 - below and I'll do my best to answer
52:44 - those and if you enjoy these tutorials
52:45 - and would like to support them then
52:47 - there are several ways you can do that
52:48 - the easiest ways to simply LIKE the
52:49 - video and give it a thumbs up and also
52:51 - it's a huge help to share these videos
52:52 - with anyone who you think would find
52:53 - them useful and if you have the means
52:55 - you can contribute through patreon and
52:56 - there's a link to that page in the
52:57 - description section below
52:58 - be sure to subscribe for future videos
53:00 - and thank you all for watching
53:03 - you
53:12 - you