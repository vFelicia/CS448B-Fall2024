00:00 - hey what's going on everybody how's it
00:01 - going in this video I wanted to talk to
00:04 - you about virtual a and B so what is
00:07 - virtually NV virtual we and B is a way
00:10 - that you can separate different Python
00:14 - environments for different projects so
00:17 - why would you want to do something like
00:18 - this for example say that you have
00:21 - multiple projects and they all rely on a
00:26 - single package say it's flask or Django
00:29 - or something like that each one of these
00:31 - projects may be using a different
00:34 - version of Django or a different version
00:36 - of flask now if you go and upgrade that
00:41 - package and your global sites packages
00:44 - then it could break a couple of your
00:46 - websites that might not be what you want
00:48 - to do it would be better if each of
00:51 - those projects had an isolated
00:54 - environment where they had only the
00:56 - dependencies and the packages that they
00:58 - need and the specific version so that
01:01 - they needed and that's what virtual env
01:03 - allows us to do it allows us to make
01:05 - those different Python environments so
01:08 - let's go ahead and get started and I'll
01:10 - kind of show you how this works
01:11 - now I already have virtual env installed
01:14 - on my machine if you don't have it
01:15 - installed on your machine just do it pip
01:17 - install virtual env now the first thing
01:20 - I'm going to do here is I'm going to do
01:21 - a pip list and you can see in my global
01:25 - site packages I have all these different
01:27 - packages all at a specific version now
01:31 - let's use virtually env to make a few
01:34 - different Python environments first I
01:36 - like to make a directory that is called
01:40 - environments to keep all these in one
01:42 - place and I'll go ahead and CD to that
01:46 - directory now if I do an LS here you can
01:49 - see that this directory is currently
01:51 - empty so to make our first virtual
01:53 - environment let's just type in virtual
01:56 - env and I'm just going to call this one
01:59 - project one underscore env hit enter and
02:03 - you can see what this said here is that
02:06 - it was it went ahead and installed set
02:08 - up tools and pip for you so as soon as
02:10 - you go into that environment then you
02:13 - can use those to start installing
02:15 - packages so in order to activate this
02:18 - this new Python environment all you have
02:21 - to do is type in source and then the
02:23 - name of the environment we chose project
02:27 - one underscore env then go into bin and
02:30 - then activate hit enter and now we're in
02:34 - our new Python environment the way that
02:36 - you can tell this is it will now add
02:40 - this to your prompt even in when I clear
02:42 - out my prompt it still says project 1 e
02:45 - and V here at the top and that's one
02:47 - indicator that we are currently in that
02:50 - environment we can also type in which
02:53 - Python and if we type in which Python
02:55 - you can see that the path to the Python
02:59 - that we're using is within our
03:01 - environments and project 1 env slash bin
03:04 - slash Python I can do the same thing
03:06 - with pit and you can see that the pit
03:09 - that we're using is inside of our
03:11 - project 1 environment so now if I do a
03:15 - tip list here then you can see we only
03:20 - have pip and setup tools we don't have
03:23 - all those global packed site packages
03:26 - that were listed earlier whenever we are
03:29 - outside of this environment so let's go
03:31 - ahead and install a few packages into
03:34 - this new Python environment so there we
03:38 - have numpy installed and now I'll go
03:41 - ahead and install pi TZ and let me
03:44 - install one more just so that we have a
03:46 - few packages to work with I'll do PS
03:49 - util so now let's go ahead and do a clip
03:53 - list and you can see all the packages
03:57 - that was just installed in this
03:58 - environment now let's say I wanted to
04:02 - export all these packages and they're
04:04 - version numbers to use in another
04:06 - project with that I can just do pip
04:09 - freeze and let's do this tack tack local
04:13 - here and what this does is you can also
04:17 - use your global site packages within a
04:21 - virtual Python environment we didn't
04:24 - choose to do that but if we had then
04:27 - you have all those global sight packages
04:29 - available to us if you do a get freeze
04:31 - local then what that does is it takes
04:34 - only the local dependencies that you had
04:37 - in your Python environment let's go
04:40 - ahead and output this to a requirements
04:43 - txt file and let me do an LS to make
04:47 - sure we got that if we do it cat on the
04:50 - requirements file you can see that we
04:52 - have all of our packages and version
04:54 - numbers there and now say that you
04:56 - wanted to get out of your Python
04:59 - environment you want to go back to being
05:01 - in the global environment all you have
05:03 - to do to get out of your virtual
05:05 - environment is to type in the activate
05:08 - and now you can see that our prompt no
05:12 - longer shows up if I type in which
05:15 - Python then this is the Python that I'm
05:18 - using in my global environment also if I
05:22 - do a fit list then you can see that it
05:26 - goes back to all my global site packages
05:28 - so now you can see if I do an LS here we
05:32 - still have this project one environment
05:34 - what if I wanted to get rid of that all
05:35 - together I just wanted to play around in
05:38 - a Python environment for a little while
05:40 - to test something out and now I want to
05:42 - get rid of it well we already
05:44 - deactivated it and after you deactivate
05:46 - it all you have to do is delete it so I
05:49 - can just do an RM RF type in project one
05:53 - environment there I do an LS then it's
05:56 - gone and that's it that's all it takes
05:58 - to get rid of a virtual environment so
06:03 - now we still have this requirements txt
06:05 - file here let's go ahead and make a
06:08 - nether or virtual environment but
06:11 - instead of just typing in the project
06:12 - name here let's do a pack P and what we
06:16 - can do here is we can specify a specific
06:19 - version of Python to use so let's do
06:23 - user bin and I'll do Python 2.60 and it
06:30 - looks like I did that path wrong let me
06:33 - go back here and put that in and that
06:36 - should do it
06:36 - oh sorry about that and that time I
06:39 - forgot to do the prod
06:40 - name so anyways yeah we have so we can
06:43 - specify the person Python that we want
06:46 - to use and now I have to put in a
06:48 - project name here so I'll just call this
06:50 - pipe to six underscore env so now if I
06:55 - do an LS you can see that we have our PI
06:59 - Q six underscore env and just like
07:02 - before we can do source and the name of
07:05 - our environment then and activate and
07:10 - now you can see that our prompt has
07:13 - changed and we have this pi to six
07:17 - underscore env up here in parenthesis if
07:19 - I do which Python then you can see that
07:23 - we are currently in this Python
07:26 - environment if I do a Python - - version
07:31 - and now you can see that we are in fact
07:34 - using this Python two point six point
07:37 - nine
07:37 - so with that requirements dot text file
07:42 - that we had earlier if we want to
07:44 - install those packages within this
07:48 - virtual environment we can just do a pip
07:50 - install tac are then requirements txt
07:54 - and it should go out and grab all of
07:56 - those for us and now you can see if I do
07:59 - a pip list after those are installed
08:02 - then you can see that we have all of our
08:04 - packages here and all of the correct
08:07 - versions so at this point you could
08:10 - begin working on your project and
08:12 - whatever environment that you want and
08:15 - as soon as you are done working on that
08:17 - project or you want to switch projects
08:19 - you can just go to the activate and now
08:22 - you can see that our prompt has
08:24 - disappeared and we're back
08:25 - using our global installation of Python
08:28 - and all of our global packages I do want
08:32 - to point one thing out that I probably
08:33 - should have pointed out earlier if I do
08:35 - it an LS here our PI - 6 underscore env
08:39 - what these these virtual environments
08:41 - they are they're meant to be
08:44 - environments for your dependencies and
08:47 - your packages and things like that for
08:50 - your project but they're not actually
08:52 - for your project files you
08:54 - wouldn't want to go in and start
08:56 - building your project files within your
09:00 - within your virtual environment because
09:02 - you know you want to be able to pass
09:05 - these along and throw them away whenever
09:07 - you want so you don't want to have all
09:09 - of your project files in these virtual
09:11 - environments they're really just
09:13 - intended to separate out the packages
09:17 - dependencies and the versions that
09:19 - you're going to use from project project
09:21 - so with that said that pretty much
09:23 - touches on the basics of virtual
09:26 - environments and Python you know if you
09:29 - have any questions or if I left anything
09:31 - out feel free to ask in the comment
09:33 - section below
09:35 - be sure to subscribe for future tips and
09:37 - tutorials and thank you guys for
09:39 - watching