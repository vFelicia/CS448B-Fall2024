00:00 - hey there how's it going everybody in
00:01 - this video we're going to be learning
00:02 - more about indexes so we've seen basic
00:05 - default indexes and previous videos but
00:08 - in this video we'll learn how to set
00:09 - custom indexes and the benefits of doing
00:12 - this now I'd also like to mention that
00:14 - we do have a sponsor for this series of
00:15 - videos and that is brilliant org so I
00:18 - really want to thank brilliant for
00:19 - sponsoring this series and it would be
00:21 - great if you all can check them out
00:22 - using the link in the description
00:23 - section below and support the sponsors
00:25 - and I'll talk more about their services
00:26 - in just a bit so with that said let's go
00:29 - ahead and get started okay so I have my
00:31 - snippets file open here or my snippets
00:33 - notebook open here so that we can look
00:35 - at indexes using a simple data frame
00:37 - with a little bit of data and then we'll
00:40 - see how to use these with our larger
00:41 - survey data set that we've been using so
00:43 - far in the series so in these snippets
00:45 - we have the same small data frame that
00:48 - we saw in the last video where we just
00:50 - have three people with their first name
00:52 - last name and email address and I have
00:54 - this data frame displayed down here at
00:57 - the bottom right here so like I said in
01:00 - previous videos our data frames have
01:02 - this thing on the far left over here
01:05 - that looks like a column without a name
01:07 - and this is an index so since we've just
01:12 - seen these default and set indexes so
01:14 - far this is currently just a range of
01:16 - numbers that's basically an integer
01:18 - identifier for the rows so this is a 0 a
01:22 - 1 and a 2 now sometimes it may might
01:25 - make more sense to have a different
01:26 - identifier for each row and that will
01:29 - basically be the label for that row so
01:31 - it's usually unique now pandas doesn't
01:34 - actually enforce indexes being unique
01:36 - and sometimes it won't be but most of
01:38 - the time these will be unique values so
01:40 - what might be a better index for our
01:42 - sample data here
01:43 - well maybe the email address would be a
01:45 - good index for this data since that's
01:48 - usually a unique value for most people
01:50 - so right now if I wanted to view all of
01:53 - the email addresses then we could say DF
01:57 - and access the email column and we saw
02:00 - this in the last video but we can see
02:02 - that it displays all of these email
02:04 - addresses now what if we wanted to set
02:07 - these email addresses as the index for
02:10 - this data frame well to do that we could
02:12 - just say DF
02:13 - dot set underscore index and then we can
02:17 - just pass in the name of the column that
02:20 - we want for the index so if I run this
02:22 - then now we can see that the email is on
02:25 - the far left and it's bold and it
02:27 - actually does kind of look like a normal
02:29 - column because this index has a name it
02:32 - has the same name as our column when we
02:35 - set it so I want to show you something
02:37 - here we can just set this index in this
02:40 - cell but if I look at my data frame
02:43 - again so underneath here if I say DF to
02:47 - print out this data frame then we can
02:49 - see that our data frame didn't actually
02:50 - change it still has the default index
02:53 - over here on the left and that's because
02:56 - pandas doesn't do a lot of these changes
02:59 - in place unless we specifically tell it
03:02 - to do so and this is actually nice
03:04 - because it allows us to experiment
03:06 - without worrying about modifying our
03:08 - data frame in unexpected ways
03:09 - so let's say that we actually did want
03:12 - to set our index to the email column and
03:14 - have those changes carry over into these
03:16 - future cells so to do this back up here
03:19 - where we said set index we can just add
03:22 - in another argument here and say in
03:24 - place is equal to true now if I run that
03:28 - and then rerun the data frame again then
03:34 - now we can see that it actually dead did
03:36 - set that index and modified that data
03:39 - frame and we can actually look
03:41 - specifically at that index just by
03:44 - saying DF dot index and if I run that
03:47 - then we can see that we have an index
03:50 - here and it has the values as a list of
03:53 - what all the index values are and it
03:56 - also tells us that the name is equal to
03:57 - email okay so why would this actually be
04:01 - useful well like I said before the email
04:04 - address as the index gives us a nice
04:06 - unique identifier for our row and
04:09 - remember in the previous video that we
04:11 - used dot loke to search our data frame
04:14 - by label well these indexes are the
04:17 - labels for these rows so before we just
04:20 - use the default ranged index but now we
04:23 - can find a specific row by passing
04:27 - that label so if I say D F dot Lok this
04:30 - will be easier if we actually just look
04:31 - at an example here if I say D F dot Lok
04:34 - before we were passing in a zero as the
04:38 - label but now I can say okay I want to
04:42 - see the information for Cory M Schafer
04:45 - at gmail.com and then it'll come back
04:47 - and say okay that person has a first
04:50 - name of Cory last name of Schaefer and
04:52 - so on so now we get the row for that
04:55 - specific email index and like we saw in
04:58 - the last video we can still pass in
05:00 - values for the specific columns as well
05:02 - so if we wanted the last name then I
05:05 - could just pass that in as the second
05:08 - value so I'll just say I want the last
05:09 - name and we can see that there we get
05:12 - Schaefer now we actually no longer have
05:14 - those default integers as our index
05:16 - because now it's using the email so if I
05:19 - try to use those integers that we use
05:21 - before so if I say if I want Rho of zero
05:24 - using Lok then we're going to get a type
05:27 - error and I get an error because it no
05:30 - longer has an index with that label if
05:32 - you want to use integer location instead
05:35 - of labels then you still have the eye
05:37 - loking index are available to you and we
05:40 - saw that in the last video as well so if
05:42 - I change this to be eye Lok instead of
05:45 - Lok then it'll still give us that first
05:47 - row so that still works now if you
05:49 - accidentally set the index and want to
05:51 - reset it then we can do that with the
05:53 - reset index method so down here I will
05:57 - just say D F dot reset underscore index
06:01 - and I will do an in-place equal to true
06:04 - so that those changes carry over and
06:06 - then I'll go ahead and print out that
06:08 - data frame so if I run this then we can
06:10 - see that now we're back to having that
06:11 - email as a column and the default range
06:15 - index now if you actually know what you
06:17 - want the index to be when you're
06:19 - creating your data frame then you can
06:21 - simply set it there instead of setting
06:23 - it later using the set index method and
06:26 - we can do that as we're loading in data
06:29 - from a CSV or other source as well so
06:32 - let me switch over to our other notebook
06:35 - here with the stack overflow data that
06:38 - we've been using so far throughout the
06:39 - series and
06:40 - we'll take a look at some real-world
06:42 - examples of why using indexes is useful
06:45 - now again for those of you have been
06:47 - following along with the series so far
06:49 - this should look familiar to you but if
06:52 - you haven't been following along and
06:54 - this is the first video you've watched I
06:56 - here's a brief overview of what's going
06:59 - on we are loading in pandas here we are
07:02 - loading in some CSV files here as well
07:05 - and I have a link in the description
07:06 - section below to the data that we are
07:09 - using for these CSV files and then we're
07:12 - also setting some options here in pandas
07:14 - to display max columns to where we can
07:16 - see all the columns and max rows to
07:18 - where we can see a lot of these rows and
07:21 - then this is what our data frame looks
07:23 - like these are just survey results from
07:25 - Stack Overflow
07:26 - so so far if we look at our data frame
07:29 - here in the series so far we've been
07:32 - using this default index and we can look
07:36 - over here and see that it's just this
07:38 - range from zero one two and three now if
07:41 - we look at the survey response data then
07:44 - it looks like they actually have a
07:46 - unique value per row within the data
07:48 - itself so if we look at this respondent
07:51 - column here this respondent column is
07:54 - actually a unique ID so its respondent
07:57 - one respondent two and three and so on
07:59 - so really we should probably clean this
08:01 - up a bit and just use that respondent ID
08:03 - as our data frame index now we could do
08:06 - this just like we saw before by coming
08:09 - down here and saying D F dot set index
08:12 - and do it that way or we can do this
08:16 - while we're actually reading in the data
08:18 - by passing in an additional argument to
08:21 - the read CSV method so up here where we
08:24 - loaded in the data let's just add
08:28 - another argument here and we will call
08:31 - this index underscore call is equal to
08:34 - and now the name of the column that we
08:37 - want to be the index and in this case I
08:39 - want it to be this respondent unique ID
08:42 - here so I'm going to say our index call
08:44 - is equal to respondent I will rerun that
08:47 - cell now I'll come back down here and
08:50 - rerun our data frame head and now we can
08:53 - see that this is cleaned up
08:54 - because now we have this respondent as
08:57 - our actual index so now these are the
09:00 - labels so if you wanted the first
09:02 - respondent then we could just say DF Lok
09:07 - and that is one so this is the first
09:11 - respondent there okay let me delete that
09:14 - cell okay so now let me show you a real
09:16 - world example of where I would use this
09:18 - so if you remember from earlier in the
09:20 - series we have our survey data that we
09:23 - can see here but we also have another
09:26 - data frame that tells us what each of
09:28 - these columns actually means in the
09:31 - survey data so let me display that data
09:34 - frame real quick so for example if I
09:36 - wanted to know what hobbiest meant then
09:39 - we can look at our schema data frame
09:42 - here and we can see that the answer that
09:46 - they are the answer on the survey or the
09:48 - question on the survey for hobbiest was
09:50 - do you code as a hobby so when we see
09:53 - yes and no questions up here for
09:55 - hobbyist they were answering the
09:57 - question do you code as a hobby so
09:59 - here's a question what if I wanted to
10:01 - locate what a specific column meant
10:04 - without needing to search through this
10:06 - entire data frame manually well in this
10:09 - case we can simply set the column name
10:12 - as the index and use the dot Lok indexer
10:15 - so I'll set this index up here where we
10:19 - loaded in the schema data frame so let
10:21 - me go back up here to the top and the
10:24 - column we want this here to be the index
10:27 - because these are all unique values so
10:30 - I'm gonna grab the name of this column
10:31 - which just so happens to be column and
10:33 - then up here I will say that I want the
10:36 - index to be equal to this column of
10:40 - actually let me get that within the
10:43 - string there okay
10:44 - index call is equal to column run that
10:47 - and now let's rerun our schema data
10:50 - frame and now we can see that that
10:52 - column is bold so that is our index so
10:55 - now we can use dot Lok to search for
10:57 - those columns directly so if I wanted to
11:00 - see what the information for the
11:02 - hobbiest column was then I could just
11:05 - say let me scroll down here I could say
11:07 - schema data frame dot Lok and then we
11:12 - can just pass in the label of the index
11:14 - that we want so if I wanted to see what
11:17 - hobbyist was then we can see oh okay
11:19 - hobbyist has the question text of the
11:22 - you code as a hobby so let's go back to
11:24 - our survey data here and see if we can
11:26 - find a column that doesn't make much
11:29 - sense to us so if I scroll through these
11:33 - here okay like what would this one mean
11:36 - MGR idiot okay
11:39 - MGR idiot so let me scroll down here and
11:42 - now I'll paste that in to the schema D F
11:46 - dot Lok and rerun that now we can see
11:49 - that we get the information for that
11:51 - column now the text is actually
11:54 - truncated in Jupiter notebooks by
11:56 - default but we can we can change that
12:00 - setting if we'd like to see this entire
12:01 - question text but I kind of want it on
12:04 - since we have so much data to display
12:06 - but instead if you want to see the full
12:09 - text for that question then you can just
12:12 - access the data in that row and column
12:14 - directly by also passing in the column
12:18 - name into dot Lok as well so just like
12:22 - we've seen before when we're using dot
12:23 - Lok this is the row we want
12:25 - so what column do we want so we want to
12:28 - read that question text so I'll paste
12:31 - that in and now if I run this again now
12:35 - we can see that the full question text
12:37 - for what MGR idiot means is how
12:41 - confident are you that your manager
12:43 - knows what they're doing so this is one
12:45 - nice example here of when setting these
12:48 - indexes is useful because it allows us
12:51 - to make the Search Search these rows by
12:55 - labels very easily just like we did here
12:57 - with the schema now let me show you one
12:59 - more thing before we finish up here so
13:01 - we can see that we were able to set our
13:03 - indexes and all of that looks good
13:06 - but it might make it a bit easier to
13:07 - read this schema data frame if the ink
13:10 - indexes were sorted alphabetically so to
13:13 - do that it's just as easy as saying
13:16 - schema DF dot sort
13:20 - underscore in
13:21 - and let's run this let me scroll down
13:24 - here a little bit and we can see that
13:26 - now these indexes are sorted
13:28 - alphabetically so if we knew that we
13:31 - wanted to you know get to employment or
13:34 - something it's going to be in the ease
13:36 - so that just makes it a little bit
13:38 - easier to find what you're looking for
13:40 - and if you wanted to sort this in
13:43 - descending order instead then we could
13:45 - just say ascending is equal to false and
13:49 - now we can see that it is in reverse
13:51 - order here instead so depending on your
13:53 - data that might make it easier to read
13:55 - so we're going to go over a lot more
13:58 - advanced sorting in a future video but
14:01 - these are just some basics on getting
14:03 - our indexes in order now as usual with
14:06 - our data frame if you wanted to the sort
14:09 - to be permanent and carry over into
14:11 - future selves then you should set in
14:13 - place equal to true and we'll see that a
14:16 - lot throughout the series because doing
14:19 - it this way kind of allows us to you
14:22 - know see what things would look like
14:24 - without actually affecting the data
14:26 - frame itself so down here the data frame
14:29 - is still unsorted but if I come up here
14:33 - and say sort index in place equal to
14:36 - true rerun that and then rerun our
14:39 - schema data frame then now our schema
14:42 - data frame is permanently sorted so
14:45 - depending on your data learning about
14:47 - these indexes will be really useful
14:50 - especially whenever using dot Lok
14:53 - because it allows you to search by label
14:55 - there which is extremely useful
14:57 - depending on what type of data you are
15:00 - searching through okay so before we end
15:02 - here I'd like to mention the sponsor of
15:04 - this video and that is brilliant org so
15:08 - in this series we've been learning about
15:09 - pandas and how to analyze data and
15:12 - python and brilliant would be an
15:13 - excellent way to supplement what you
15:15 - learn here with their hands-on courses
15:17 - they have some excellent courses and
15:18 - lessons that do a deep dive on how to
15:20 - think about and analyze data correctly
15:22 - for data analysis fundamentals I would
15:24 - really recommend checking out their
15:26 - statistics course which shows you how to
15:27 - analyze graphs and determine
15:29 - significance in the data and I would
15:31 - also recommend their machine learning
15:32 - course which takes data analysis to a
15:34 - new level
15:35 - well you learn about the techniques
15:37 - being used that allow machines to make
15:38 - decisions where there's just too many
15:40 - variables for a human to consider so to
15:43 - support my channel and learn more about
15:44 - brilliant you can go to brilliant org
15:46 - Forge slash CMS to sign up for free and
15:49 - also the first 200 people they go to
15:51 - that link will get 20% off the annual
15:53 - premium subscription and you can find
15:56 - that link in the description section
15:57 - below
15:57 - again that's brilliant org forge slash
16:01 - CMS okay so I think that is going to do
16:04 - it for this pandas video I hope you feel
16:06 - like you got a good idea for how to use
16:08 - indexes and why these might be useful
16:11 - and like I said you don't have to use
16:13 - indexes but sometimes it just makes
16:15 - sense depending on your data so for
16:17 - example in this video setting the schema
16:20 - data frame index made it very simple for
16:22 - us to look up column names easily so in
16:26 - the next video we're gonna start
16:27 - learning how to filter data frames and
16:29 - grab data that meets specific criteria
16:32 - so maybe we only want to see data where
16:34 - you know the salary is above a certain
16:36 - amount or maybe we only want to see data
16:39 - for people who said that they use Python
16:41 - in this survey so we'll take a look at
16:45 - being able to filter data frames on that
16:47 - type of criteria in the next video but
16:49 - if anyone has any questions about what
16:51 - we covered here then feel free to ask in
16:53 - the comment section below and I'll do my
16:54 - best to answer those and if you enjoy
16:56 - these tutorials and would like to
16:57 - support them then there are some ways
16:58 - you can do that the easiest way is to
17:00 - simply like the video and give it a
17:01 - thumbs up and also it's a huge help to
17:03 - share these videos with anyone who you
17:05 - think would find them useful and if you
17:06 - have the means you can contribute
17:07 - through patreon and there's a link to
17:09 - that page and the description section
17:10 - below be sure to subscribe for future
17:12 - videos and thank you all for watching
17:15 - you
17:24 - you