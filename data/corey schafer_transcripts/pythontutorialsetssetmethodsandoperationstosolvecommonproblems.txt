00:00 - hey there how's it going everybody in
00:01 - this quick video we're going to talk
00:03 - about Python sets so I recently saw an
00:05 - article on Python sets and some
00:07 - different use cases for them and I
00:09 - thought it would be a great topic to do
00:10 - a video on so sets are one of those data
00:13 - types that people often forget about but
00:15 - they're extremely useful for solving
00:16 - certain types of problems it's also a
00:19 - popular datatype for solving certain job
00:21 - interview questions efficiently so in
00:23 - this video we'll look at some examples
00:25 - and some good use cases for sets so
00:27 - first of all what is a set so a set is
00:30 - kind of like a list but it removes all
00:32 - of the duplicate values now there are
00:34 - also some extra useful methods that we
00:36 - can use with sets that we can't use with
00:39 - other data types so for example we can
00:41 - use the intersection to get all of the
00:43 - elements that are the same in multiple
00:45 - sets or we can use the difference method
00:48 - to get all of the elements that are in
00:49 - one set but not others so anytime you're
00:52 - doing comparisons where you're creating
00:55 - lists of values that are in one list and
00:57 - not another list or anything like that
00:59 - then sets are usually a great way to go
01:02 - so first of all let's just look at some
01:03 - simple examples so to create a set we
01:06 - can simply pass in a list of values to
01:09 - the set function so I have a set here
01:12 - that just takes in a list of numbers one
01:14 - through five and then I'm printing that
01:16 - out so if I save this and run it then we
01:19 - can see that prints out this set and it
01:21 - looks like a list but it has these curly
01:24 - brackets instead of square back brackets
01:26 - so we can create a set that way as well
01:29 - so I could take the same values and just
01:32 - replace the set function with these
01:34 - numbers inside the curly braces so I
01:37 - will just replace where we're creating
01:39 - this set and instead you can just create
01:41 - a set this way like a list but with the
01:44 - curly braces so if I save that and run
01:45 - it then you can see that we get the same
01:47 - result now one thing that you have to
01:49 - remember when doing it this way is that
01:50 - if you want to create an empty set then
01:52 - you can't simply just get rid of all
01:55 - these values and use an empty set of the
01:59 - curly braces because this will actually
02:01 - create an empty dictionary so to create
02:04 - an empty set you actually have to use
02:07 - that set function and just pass in no
02:10 - arguments so that will create an empty
02:12 - set
02:13 - the empty curly braces will create an
02:16 - empty dictionary so just be on the
02:18 - lookout for that if you want to create
02:20 - an empty set okay so I also said that
02:22 - sets remove duplicate values so if I add
02:25 - in some of the same numbers here to the
02:27 - end of our set so I'll just add in a 1 2
02:30 - & 3 if I save that and run it then you
02:33 - can see that in our set we still just
02:35 - get 1 through 5 and it removed those
02:37 - duplicate values ok so now I'm going to
02:40 - remove those duplicates and just get
02:41 - back to where we were okay so just like
02:45 - with a list we can also add and remove
02:48 - values from a set so let's say that we
02:52 - wanted to add some more values to the
02:54 - set so to add a new value we can simply
02:56 - come to the next line and say s dot add
02:59 - and we can add a 6 so if we save that
03:02 - and run it then you can see that the 6
03:04 - was added to our set now if this kind of
03:06 - stuff doesn't seem useful yet then we
03:08 - will be seeing some practical examples
03:09 - of using sets in just a minute okay so
03:12 - now what if you wanted to add multiple
03:14 - values to your set then you could use
03:17 - the update method and pass in a list or
03:20 - another set so if we wanted to add the
03:22 - values of 6 7 8 then instead of just
03:25 - doing add which will add one value I
03:27 - could say s1 dot update and now we'll
03:31 - pass in a list of values that we want to
03:34 - add so now if we run that then we can
03:36 - see that using that update of 6 7 & 8
03:38 - added 6 7 & 8 into our set and we can
03:42 - update with another set as well so if I
03:45 - made another set here called s2 and I'm
03:48 - gonna also add some duplicate values to
03:50 - this as well so I'll do 7 8 9 in that
03:54 - set and then within our update let's
03:57 - update with this list of 6 7 8 and then
04:00 - also add in s2 to that update so it's
04:04 - going to add the values from both this
04:06 - list and from this set so if I save that
04:09 - and run it then we can see that the
04:11 - values from both that list and that set
04:14 - were added to s1 and as usual the
04:16 - duplicate values were removed since this
04:18 - is a set ok so now what if we wanted to
04:21 - remove some values then we can either
04:23 - use the remove or discard methods so
04:26 - let's look at the difference
04:27 - between the two of these so if we wanted
04:29 - to remove the value of five then I'm
04:32 - just going to get rid of these lines
04:34 - here if we wanted to get rid of the
04:36 - value of five from s1 then I could
04:38 - simply say s1 dot remove five and if I
04:42 - save that and run it then we can see
04:43 - that that value was removed and if we
04:46 - use the discard method here then that
04:48 - would give us this exact same result the
04:51 - difference between remove and discard is
04:53 - if we try to remove a value that doesn't
04:55 - currently exist in our set so if I try
04:58 - to remove a value of six here which
05:01 - isn't in our s1 set if I save that and
05:05 - run it then you can see that we get a
05:07 - key error and it says the key error we
05:09 - don't have a value of 6 and that is
05:12 - whenever we try to remove a value that
05:14 - doesn't exist but using discard won't
05:17 - throw a key error if a value doesn't
05:18 - exist so if I go up here to remove and
05:21 - change this to discard and save that and
05:24 - run it then you can see that it just
05:25 - prints out our set with no values
05:27 - removed so that's the difference between
05:29 - remove and discard ok so now let's look
05:32 - at some more useful things that we can
05:34 - do with sets so everything we've seen so
05:36 - far is pretty basic and similar to lists
05:38 - but now let's look at operations like
05:40 - intersection and difference and Union
05:43 - and things like that so let me grab some
05:45 - different sets from my snippets here so
05:47 - that we can see some of the useful
05:49 - operations that we can do with these so
05:51 - within my snippets I'm just going to
05:53 - grab this first part here and paste this
05:57 - in to my module ok so we can see that we
06:01 - have three different sets here of 1 2 3
06:03 - 2 3 4 and 3 4 5 so they have some
06:08 - overlapping values and they have some
06:11 - unique values so let's say that we
06:13 - wanted to get a set of values that are
06:15 - in all of these sets
06:17 - now if these were lists then you could
06:19 - probably come up with a function or a
06:21 - list comprehension that could do this
06:23 - but with sets this is as simple as
06:26 - running the intersection method so to do
06:29 - this I can come down here and I can say
06:31 - I'll create a new set and call this s4
06:33 - and our new set we'll just be s 1 dot
06:37 - intersection and we will get the
06:40 - intersection for
06:41 - we'll get the intersection of s 2 so
06:44 - this will give me all of the values that
06:46 - are in s 2 that are also in s 1 so if I
06:51 - uncomment out that print statement there
06:53 - and save that and run it then we can see
06:55 - that we get a set of two and three and
06:58 - the reason we got 2 & 3 is because 2 & 3
07:01 - are in both s 1 and s 2 so it didn't get
07:05 - the 1 or the 4 okay so now what if I add
07:08 - s 3 as an argument to our intersection
07:12 - here so this is going to give us all of
07:15 - the values in s 2 and s 3 that are also
07:18 - in s 1 so before we even run this most
07:23 - likely we can tell that this is going to
07:25 - return a 3 because we can see that there
07:28 - is a 3 and s 2 and a 3 and s 3 and that
07:32 - is the only value in those two sets that
07:35 - is also in s 1 up here at the top so if
07:38 - I save that and run it then you can see
07:40 - we got what we expect the value of 3 so
07:42 - these are operations that we can kind of
07:44 - do in our head with these small sets
07:46 - like this but if these sets were much
07:48 - much larger you know thousands of values
07:51 - then these operations save us a lot of
07:54 - time and efficiency by doing this
07:56 - quickly okay so we got our value that
07:58 - intersects with all three sets now what
08:01 - if we want the values that are different
08:03 - so to do that we can use the difference
08:05 - method so if I want to see what values
08:08 - are in s 1 that are not in s 2 then I
08:11 - could come down here and say s 1 dot
08:15 - difference and then pass in s 2 as a
08:19 - value so most likely we are going to get
08:22 - a 1 for this since 1 is in s 1 and it is
08:27 - not in s 2 2 & 3 are with in s 2 so we
08:31 - shouldn't get that as a result so if I
08:33 - save that and run it then you can see
08:35 - that we do get that result of 1 now you
08:37 - might be wondering why it didn't also
08:39 - return a 4 here since 4 is in s 2 but
08:43 - not in s 1 but that is because we're
08:46 - running the difference method on s 1 if
08:48 - we wanted the values that were in s 2
08:50 - but not in s 1 then we could simply flip
08:53 - these so I
08:54 - say s 2 dot difference and then pass in
08:58 - s 1 as my argument if I save that and
09:01 - run it then we get the value of 4
09:03 - because 4 is in s 2 but not in s 1 now
09:08 - if we wanted the values that were
09:10 - different between both of those sets so
09:12 - we wanted to return a set of 1 and 4
09:14 - that is called a symmetric difference
09:16 - and we'll look at that in just a second
09:18 - but for now let's keep looking at this
09:20 - difference method so we can pass in
09:22 - multiple sets as arguments here as well
09:24 - so if I want the values that are in s 2
09:27 - but not in set 1 or set 3 then I could
09:32 - say s 2 dot difference and then pass in
09:35 - s 1 as an argument and s 3 as an
09:38 - argument so if I save that and run it
09:40 - then you can see that we get an empty
09:42 - set and that's because if we look at our
09:44 - examples then s 2 doesn't have any
09:48 - values that aren't in either s 1 or s 3
09:51 - so we can see the first two values here
09:53 - 2 & 3 we have a 2 3 and s 1 and also a 3
09:57 - and s 3 & 4 this four we have that four
10:00 - value in s 3 as well so there are no
10:02 - values and s two that aren't in either
10:04 - of those lists now if I was to change
10:06 - this around and say that I want the
10:09 - values the S 3 difference of s 1 and s 2
10:14 - then this is saying it give me the
10:17 - values that are in s 3 that are not in
10:20 - either s1 or s2 so if we look at this
10:23 - example then it should return a 5
10:25 - because that's the only value that is
10:27 - not in either of these other two lists
10:29 - so if I save that and run it then you
10:31 - can see that we get a set of 5 ok so I
10:34 - said we'd also look at the symmetric
10:36 - difference now the symmetric difference
10:37 - allows you to compare two sets and get
10:41 - all of the differences between both sets
10:43 - so if I go back to my original example
10:46 - here of s 1 dot difference with s 2
10:51 - remember if I ran this then we just got
10:53 - a 1 but it didn't include this 4 which
10:56 - is an s2 but not in s 1 so if we wanted
10:59 - all of the values that were different
11:01 - between those two sets then I could
11:03 - simply just say symmetric underscore
11:07 - difference
11:08 - make sure I type that right think I did
11:10 - so I'll save that and run it and now you
11:12 - can see that we get one and four and in
11:15 - this case it shouldn't matter if we have
11:16 - s two dot symmetric difference of s1 or
11:20 - which order those are in because it's
11:22 - going to give us the differences from
11:23 - both sets all together so the one here
11:26 - is unique to set one and the four is
11:29 - unique to set two okay so now let's look
11:33 - at some more practical examples of where
11:34 - we use some sets or some of these
11:37 - techniques so first of all like we said
11:39 - before this is a great way to remove
11:42 - duplicate values from a list so let's
11:44 - say that we have a list that has some
11:47 - duplicates so I will just create a list
11:50 - here called l1 and I will fill this in
11:53 - with one two three one two three and
11:57 - save that and we want a list that is
11:59 - equal to this one but with the
12:01 - duplicates removed so we might be
12:03 - tempted to write a small function that
12:05 - keeps appending the values to a new list
12:07 - one at a time and skips the values that
12:10 - have already been added but that's a lot
12:12 - more complicated than and needs to be so
12:15 - first of all we could simply say l2 is
12:19 - equal to a set of l1 and what that will
12:23 - do will cast our list to a set and
12:25 - remove the duplicates but we're still
12:27 - left with a set so now we can simply
12:31 - cast this set to a list again by
12:33 - wrapping that result within a list so if
12:38 - we save this and run it whoops and I did
12:41 - not print that out so let me do a print
12:44 - of l2 so if I save that and run it then
12:47 - you can see that we have a list of 1 2 3
12:50 - which is our original list with the
12:52 - duplicates removed so the inner function
12:54 - here cast this to a set and removes the
12:57 - duplicates and the outer function here
13:00 - cast it back to a list and we can see
13:03 - that we got the result that we were
13:04 - looking for and the set approach is also
13:06 - much faster than any function that you
13:08 - could write with the same functionality
13:10 - so it's more efficient as well ok so now
13:13 - let me grab some more code from my
13:14 - snippets here and we'll look at some
13:16 - more examples of the operations that we
13:18 - can do so I'm going to grab these lists
13:22 - and paste them in to my file here and
13:26 - let me make this just a little smaller
13:27 - so that it all fits on the same line
13:30 - okay so I've got three different lists
13:33 - here one is a list of employees another
13:36 - is a list of employees who have gym
13:38 - memberships and the last list is a list
13:41 - of employees who are developers now this
13:44 - is just an example but you can imagine
13:46 - situations where you'd have lists and
13:48 - sub lists like this that are much larger
13:51 - maybe something that comes from a
13:52 - database or something like that so let's
13:55 - imagine that these lists could be much
13:56 - larger and that we want to gather some
13:58 - information from these so first of all
14:00 - let's see which employees have both a
14:03 - gym membership and are also developers
14:06 - so to do this we can simply intersect
14:09 - the gym members with the developers so
14:12 - let's try this out so I'll say result is
14:15 - equal to and we will get a set of the
14:19 - gym members and we will do an
14:21 - intersection so intersection and we will
14:24 - intersect that with the developers and
14:27 - then right underneath here I am going to
14:29 - print our result now you could also cast
14:34 - developers to a set here also if you'd
14:36 - like but it's okay to pass it in as a
14:39 - list as well so we have to cast the
14:42 - first one to a set though because this
14:44 - intersection is a method of a set so we
14:47 - had to cast that so if I save that and
14:50 - run it and I meant to pass in developers
14:52 - not just developer so I'll save that
14:54 - again and run it and you can see that we
14:57 - get a result of April and quarry and if
14:59 - we were to go up here and compare these
15:01 - two lists then you would find that these
15:03 - are the two employees who are in both
15:04 - the developers list and the gym members
15:07 - list and you could also cast that back
15:10 - to a list if you'd like if you wanted a
15:12 - list as a result here okay so now what
15:14 - if we wanted to get all of the employees
15:16 - who are neither gym members or
15:18 - developers so to do this we could use
15:21 - the difference method on our employees
15:24 - and then compare that to our other two
15:26 - lists so to do that I could simply say
15:29 - so I'll cast employees to a set and then
15:33 - I'll say I that I want the
15:36 - the difference and I want the difference
15:39 - of people who are not gym members or
15:43 - developers so again what we're doing
15:45 - here is that we're getting back all of
15:48 - the employees who are neither gym
15:50 - members or developers so that is why we
15:52 - have employees in this first part here
15:54 - and then passing in gym members and
15:57 - developers into this difference method
15:59 - here so if I save that and run it then
16:02 - if we were to go up here and actually
16:03 - compare these lists then we could see
16:06 - that this is the result that we get back
16:07 - of the two employees who are not in the
16:10 - gym member list or in the list of
16:12 - developers so shame on those two for not
16:15 - having an awesome job or staying in
16:17 - shape okay so that is just a couple of
16:19 - examples of how you can solve some of
16:21 - these problems with sets so there are a
16:23 - lot of problems that you'll run into
16:25 - like this so definitely keep sets in
16:27 - mind if you're trying to solve a problem
16:29 - that involves comparing values between
16:31 - lists now one more thing I think I
16:34 - should mention about sets is that
16:36 - they're very performant when it comes to
16:37 - doing membership tests now if you don't
16:39 - know what I mean by membership tests
16:41 - basically I mean that if you're doing
16:43 - let's see let me replace this line here
16:46 - if you're doing a lot of stuff like this
16:48 - so if cauri in developers then you know
16:53 - print found so this is actually a
16:58 - membership test here where you're
17:00 - looking for this value in our list then
17:03 - it's actually more performant to do
17:05 - those membership tests on sets rather
17:07 - than lists so if your lists are huge and
17:10 - you're doing a lot of comparisons like
17:11 - this then it should speed you up a good
17:13 - bit if you're able to convert those
17:15 - lists into sets and check that way so
17:18 - for those of you who know big o-notation
17:20 - stuff it's Big O of n to check if a
17:24 - value is in a list so let me write that
17:26 - down
17:27 - that is Big O of n for a list and it is
17:32 - o of 1 which is constant for a set and
17:38 - the reason it's Big O of n for a list is
17:41 - because it has to scan the whole list
17:43 - until it finds the value and for sets
17:46 - it's just constant time okay so I think
17:48 - that is going to do it
17:50 - for this video I hope that after you
17:52 - this video you have a better idea for
17:53 - how you can use sets to solve different
17:55 - problems in your daily workflow but if
17:57 - you do have any questions about what we
17:59 - covered then feel free to ask in the
18:00 - comment section below and I'll do my
18:02 - best to answer those and if you enjoy
18:03 - these tutorials and would like to
18:04 - support them then there are several ways
18:06 - you can do that the easiest ways to
18:07 - simply like the video and give it a
18:09 - thumbs up and also it's a huge help to
18:11 - share these videos with anyone who you
18:12 - think would find them useful and if you
18:13 - have the means you can contribute
18:15 - through patreon and there's a link to
18:16 - that page in the description section
18:17 - below be sure to subscribe for future
18:19 - videos and thank you all for watching
18:31 - you