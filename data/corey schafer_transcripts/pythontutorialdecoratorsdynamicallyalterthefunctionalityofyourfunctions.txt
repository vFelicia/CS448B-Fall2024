00:00 - boom boom
00:00 -  
00:01 -  
00:01 - Hey, everybody. How's it going? In this video, we're going to be learning about Python decorators.
00:04 - We're going to be learning how decorators work,
00:06 - and also when you would want to use them.
00:08 - Ah, so, decorators are a slightly more advanced topic,
00:11 - but we're going to walk through a few different
00:13 - examples so that we can understand exactly what's going on.
00:16 - Now, if you haven't watched my
00:17 - videos on closures or first-class functions,
00:20 - then you should probably give those videos a watch,
00:23 - because they will explain a lot of the underlying concepts that I'm not going to spend a lot of time on here.
00:28 - And I'll put a link to those videos in the comments section below.
00:31 - But if you haven't seen those videos,
00:33 - then let me just give a really quick summary.
00:35 - Ah, so, first-class functions.
00:37 - First-class functions allow us to
00:39 - treat functions like any other object.
00:42 - So, for example,
00:43 - we can pass functions as arguments
00:45 - to another function.
00:46 - We can return functions.
00:48 - And we can assign functions to variables.
00:51 - Now, closures allow us to take advantage of first-class functions,
00:55 - and return an inner function
00:57 - that remembers and has access to
00:59 - variables local to the scope in which they were created.
01:03 - Now, if both of those definitions sound a little confusing,
01:06 - then let's go ahead and take a look at a quick example here.
01:08 - And again, I'm not going to go as in-depth
01:11 - as I do in those
01:12 - videos.
01:13 - Ah, but let's just do a quick recap.
01:15 -  
01:16 - So, we have an  outer function here that doesn't take any parameters.
01:19 - And within our outer function,
01:21 - we have a local variable called "message".
01:24 - Ah, then we are creating an inner function
01:27 - within the outer function.
01:29 - Now, the "message" variable
01:30 - wasn't created within the inner function,
01:33 - but the inner function does
01:34 - have access to it,
01:35 - and this is what we call a free variable.
01:38 - Now, all our inner function does
01:39 - is print this message.
01:41 - Then we are executing our inner function
01:44 - and returning the result.
01:46 - So now, if I execute this
01:47 - outer function, here, and run this code,
01:50 - what it does, is it comes in here
01:51 - to this outer function,
01:53 - sets this message variable,
01:55 - ah, creates this inner function
02:01 - so we can  see any outer function is
02:17 - we can do that by taking
02:20 - So now we