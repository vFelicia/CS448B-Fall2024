00:00 - hey there how's it going everybody in
00:01 - this video we're going to continue
00:02 - learning about logging and python now if
00:04 - you haven't seen my previous video on
00:06 - basic logging then you're definitely
00:07 - going to want to make sure that you
00:09 - watch and understand that video before
00:10 - jumping into this one now in this video
00:13 - we'll be learning about loggers
00:14 - different handlers and a couple of other
00:16 - things so let's go ahead and get started
00:18 - okay so if you watch my first video then
00:21 - you'll see that I have the same two
00:22 - files here that I used in that video I
00:24 - have this super simple application with
00:28 - some short functions here and it's
00:30 - basically where we left off in the
00:32 - previous logging video so just to recap
00:34 - we imported logging and we set some
00:37 - basic configuration here the
00:38 - configuration is that we're logging to
00:40 - this sample log file we're setting the
00:43 - log level equal to debug and our format
00:46 - we have a custom format here where we're
00:48 - using the time the name of the logger
00:51 - and the message and then here at the
00:53 - bottom we are logging out some
00:55 - statements using our logging debug now
00:58 - we have another module here in this
01:00 - employee class where we pretty much did
01:03 - the same thing we're importing logging
01:04 - we're setting up our logging with a file
01:07 - equal to employee log our log level here
01:11 - is set to info and our format for this
01:14 - log file is our level name the name of
01:17 - the logger and the message and then
01:19 - we're doing a logging info here every
01:22 - time we create an employee so that is
01:25 - where we left off at the last video so
01:27 - let me go ahead and run this employee
01:29 - module here and when I run that it
01:31 - creates this employee log I'm going to
01:34 - open that up now in our employee log
01:36 - based on the formatting that we have set
01:38 - this logs our log level this route here
01:42 - and then we have the message that we
01:44 - passed in so now I'm going to go back to
01:46 - my simple application here and I'm going
01:49 - to run this and here we had this set to
01:52 - sample log and we can see that that
01:54 - sample dot log got created I'm going to
01:57 - open that up now the formatting here we
01:59 - had set a little bit differently here
02:01 - we're using the time so we have the time
02:03 - this route and then the message that we
02:06 - passed in so I said in the last video
02:08 - that we've discussed what this route
02:10 - message right here means and basically
02:13 - what this
02:13 - means is that since we haven't specified
02:16 - a specific logger we're working with the
02:19 - root logger and this isn't necessarily a
02:21 - bad thing when working with smaller
02:23 - applications and specific files but it's
02:26 - best to get into the habit of logging to
02:28 - specific loggers that can all be
02:30 - configured separately now we're going to
02:32 - take a look in just a second of how to
02:34 - get a specific logger but real quick let
02:37 - me show you why working with this root
02:39 - logger isn't the best idea so first let
02:42 - me delete these employee and sample logs
02:45 - here so I'll delete that employee log
02:47 - I'll delete that sample log then close
02:50 - these down I don't want to save those
02:54 - now from within my simple module with
02:57 - these calculator functions let me import
03:00 - the employee module so I'm just going to
03:03 - do that right under logging here I'll do
03:04 - import employee now I'm not sure if
03:07 - everyone knows this but when you import
03:09 - a module it actually runs the code from
03:12 - that module when it's imported so when I
03:14 - import my employee module it should come
03:17 - in here and create these employees and
03:20 - log those so now from this module or I'm
03:23 - importing employee I'm going to go ahead
03:25 - and run this module now we can see in
03:27 - our file system that it created this
03:29 - employee log file but our sample log
03:33 - file that we specified here isn't there
03:36 - and if I open up my employee log file we
03:39 - can see that it only logged out our
03:41 - created employees so what happened here
03:44 - why didn't this file create its log its
03:47 - sample log and or execute these log
03:50 - statements down here at the bottom now
03:52 - the reason it didn't do that is because
03:54 - when we set up this logger here within
03:56 - this employee class it configures the
03:59 - root logger here with this file name
04:02 - this log level and this format now all
04:06 - that got set up first because we
04:08 - imported employee and this module is
04:11 - sharing that same root logger in this
04:14 - script so by the time we get to
04:16 - configuring our logging within this
04:18 - script the root logger is already
04:20 - configured with those other values so
04:22 - this doesn't actually do anything it
04:24 - doesn't overwrite those initial
04:26 - configurations
04:27 - now the only reason our log statements
04:29 - aren't logging down here at the bottom
04:31 - is because the root logger got set to
04:34 - that info level within the employee
04:36 - module so debug doesn't hit that level
04:39 - now if we were to change these here to
04:42 - info statements and I was to rerun that
04:45 - now if I pull up this employee log file
04:48 - then you can see that it did log the
04:51 - information from that script that has
04:54 - the calculation functions but still even
04:57 - though we did get those two logs
04:58 - somewhere this is still kind of a mess
05:00 - that we're sharing this root logger
05:03 - we're not getting the log file that we
05:05 - want we're not getting the log levels
05:07 - that we want and we're not getting the
05:08 - formatting that we want so let's get a
05:10 - new logger for each of our modules so
05:12 - that we can configure both of them
05:14 - separately so I'm going to go ahead and
05:16 - close this log file down and within the
05:19 - employee module here I'm going to create
05:21 - a logger variable and I'll just do this
05:24 - both our configuration here so I'll say
05:27 - logger
05:28 - equals now to get a new logger I'm going
05:30 - to say logging dot get logger now we
05:34 - need to specify a name here now I could
05:37 - hard code any name here that I want but
05:39 - a convention when naming loggers is to
05:41 - use this special double underscore name
05:44 - method or variable I'm sorry now if you
05:47 - don't know about this name variable then
05:48 - I do have a video that explains that and
05:50 - I'll link that in the description
05:52 - section below but basically when we
05:54 - execute this module directly this name
05:57 - variable will be equal to double
05:59 - underscore main and when this code is
06:01 - executed from an import its name will be
06:05 - equal to the modules name so I'll call
06:08 - this double underscore name right here
06:11 - and we'll see exactly what this equals
06:13 - in a second so now we're getting a new
06:15 - logger here and if this logger doesn't
06:17 - exist then it'll be created so now I've
06:20 - got a new logger and this is a step that
06:23 - some people forget so now that I have
06:25 - this longer variable and we're working
06:27 - with a specific logger we should now use
06:30 - this to run the log methods so down here
06:34 - where I'm saying logging that info
06:37 - instead now I want to use that variable
06:39 - that we just created somewhere
06:41 - logger info now one nice thing about
06:43 - these loggers is that they are within a
06:45 - hierarchy so if this employee logger
06:48 - doesn't have something set then it will
06:51 - fall back to the root logger so for
06:53 - example this logging basic config is
06:56 - still configuring that root logger so
06:58 - even though I'm using this new logger
07:02 - here to run this info method if I run
07:05 - this code then it still doesn't print to
07:08 - the console it still will create you
07:10 - know an employee log file and log the
07:12 - messages to that employee log file now
07:15 - we can see here that I ran our info logs
07:17 - now one thing to notice here is that now
07:19 - it's telling us that we're using this
07:21 - double underscore main logger and not
07:24 - the root vulgar like it was before these
07:27 - log messages are from previous runs ok
07:30 - now let's switch back over here to
07:31 - employee real quick ok so we're still
07:34 - configuring this root logger with this
07:36 - file name log level and format let's
07:39 - instead configure our specific logger
07:42 - here with those values and leave our
07:45 - root logger alone so first to specify
07:48 - the employee log file that we want to
07:50 - log to we have to add a file handler and
07:53 - to do this I'll make a new variable and
07:56 - I'm just going to call this file
07:58 - underscore handler and I'm going to set
08:00 - this equal to logging dot file handler
08:04 - it looks like I spelled that wrong there
08:07 - okay and what we're going to pass in to
08:10 - that is just the name of our log file so
08:12 - we just want to pass in employee dot log
08:15 - so now we have this file handler but it
08:17 - needs to be added to our logger so to do
08:20 - that we can say logger dot add Handler
08:24 - and then we'll just say to add that file
08:28 - underscore handler now I know that this
08:31 - seems like more sets of our basic
08:32 - configuration but just bear with me here
08:34 - and we'll see how this has a lot of
08:36 - advantages ok so now with this file
08:39 - handler we want be formatting to be the
08:41 - same as what we specified in our basic
08:43 - configuration now I think the code that
08:46 - I have here is just the default
08:47 - configuration anyways so let's go ahead
08:49 - and add that formatting to our file
08:52 - handler now we're going to be adding
08:54 - this for
08:55 - adding to the file handler and not a
08:56 - logger so keep that in mind so to do
08:59 - this we can first create a formatter and
09:02 - I'm going to do that here at the top I'm
09:05 - just going to say formatter is equal to
09:07 - logging dot formatter and then what
09:11 - we're going to pass into that is our
09:14 - format string here so I'm going to copy
09:16 - that and paste that in and then we're
09:19 - going to add this formatter to our file
09:21 - handler and to do that I'm just going to
09:24 - go right underneath our file handler
09:26 - here and say file handler dot add
09:29 - formatter oh sorry about that that's not
09:32 - add formatter that is set formatter and
09:35 - then we are just going to pass in that
09:38 - formatter that we just created okay and
09:41 - lastly let's set the log level on this
09:43 - employee logger and to do this we can
09:46 - just come up here to the top after we
09:48 - create this logger I'm going to say
09:50 - logger dot set level and I'm just going
09:54 - to set that to the same level that we
09:55 - had in our basic configuration so I'm
09:57 - just going to say logging info so at
09:59 - this point we should be able to delete
10:01 - our basic configuration we have all
10:03 - these set on our specific logger
10:06 - so I'm going to go ahead and delete this
10:08 - basic configuration here and just to
10:11 - make sure that this is working let's
10:12 - also go ahead and delete this employee
10:14 - log file and start from scratch and I
10:18 - can already see I have a typo here let
10:20 - me fix that and save it okay so now let
10:23 - me go ahead and rerun our code here not
10:25 - created our employee dot log core so I'm
10:28 - going to go ahead and open that and you
10:29 - can see that within here and log all the
10:31 - lines that we specified with the correct
10:33 - format so now let's jump back over to
10:37 - our other scripts where we employed or
10:39 - where we imported the employee module
10:41 - let's go back up here to the top now
10:44 - remember that before this gave us
10:46 - problems because we were sharing that
10:48 - root logger but if I rerun this now and
10:52 - we can see that this time it did create
10:54 - this sample log file now if I open up
10:57 - that sample log then we can see that we
10:59 - have that different formatting with the
11:00 - time set first
11:02 - so we're logging the time and then the
11:05 - logger and in this case it's still the
11:07 - root logger
11:08 - and also we are logging out our message
11:10 - and now let me open up the employee log
11:14 - file and we can see and hear that it
11:16 - logged the values correctly and it gave
11:19 - the name of employee for the logger this
11:22 - time and that's because this module was
11:24 - imported and if we run that directly
11:26 - then it would be equal to this double
11:28 - underscore main up here but since we
11:30 - imported that it got set to employee
11:33 - which is the name of the module okay so
11:35 - real quick let's go ahead and setup a
11:38 - logger for this other script that we're
11:41 - currently in so that we're not using the
11:44 - root logger within here either
11:46 - now I'm going to copy a lot of this code
11:48 - from the employee class so I'm going to
11:51 - grab all of that and paste that in here
11:54 - and now we can set up this logger any
11:57 - way that we want so I want the logging
11:59 - level I set that to debug basically
12:01 - everything that we have down here and
12:03 - our basic config so this file handler
12:06 - here instead of employee log I'm going
12:09 - to set that to sample that log and for
12:12 - the format I'm going to use the format
12:14 - that we have here that has our time
12:16 - included so I'm going to switch that out
12:18 - and that does it for configuring this
12:20 - specific logger so now we can delete
12:23 - this basic configuration and before we
12:27 - run this remember this is one thing that
12:29 - a lot of people forget when we call our
12:32 - log methods now we need to use our
12:34 - specific logger
12:35 - instead of the logging module so I'm
12:38 - going to grab our logger here log of
12:40 - variable that we created down here at
12:42 - the bottom instead of doing logging not
12:46 - info I want to do logger info and
12:48 - actually instead of got info I'm going
12:51 - to do dot debug okay so now with all
12:54 - those changes in place I'm going to go
12:56 - ahead and rerun that and look at both of
12:59 - my log files here so we can see that it
13:01 - logged those values and that's not using
13:03 - that root logger anymore so that's good
13:05 - and the employee log file should be the
13:07 - same since we didn't change anything
13:08 - there and yeah we can see that it's
13:10 - still adding logs for that file as well
13:13 - too so now let me go ahead and delete
13:15 - these files one more time here and let
13:21 - me delete this
13:22 - sample log file okay now one good thing
13:24 - about setting your logging up like this
13:27 - is that now you've got a lot more
13:29 - flexibility it's nice how this hierarchy
13:32 - works so for example let's say that we
13:34 - wanted our logger level and this module
13:36 - here set to debug which it currently
13:39 - already is but now let's say that we
13:41 - only wanted our errors or worse to get
13:44 - logged to the sample log file now to do
13:47 - that we can set levels on the file
13:50 - handlers themselves so if I wanted to
13:52 - keep my logger level set the debug but
13:55 - wanted to only capture error statements
13:57 - and above in this specific file handler
14:00 - then what I could do is take this file
14:03 - handler here and just say file handler
14:06 - dot set level and I'll set that equal to
14:11 - logging dot error so now if I rerun this
14:16 - code then it created our log files I'm
14:18 - going to open up our log file and
14:19 - there's nothing in our sample dot log we
14:22 - can see that it didn't log those debug
14:24 - statements because the levels didn't
14:26 - match so let's log something that's an
14:28 - error so that we can see something get
14:30 - added to our file handler here so within
14:33 - my divide function I'll put in a try
14:37 - except block that makes sure that we
14:39 - catch a division by zero error so to do
14:42 - that I'll just do a try
14:44 - I'll say result equals x divided by Y
14:48 - and then for an accept we're going to
14:52 - attach a zero division error and within
14:57 - that zero division error that's where
14:59 - we'll do a logger and we want this to be
15:01 - an error log so I'll do logging it not
15:03 - error and for the message here I'll just
15:06 - say try to divide by zero and now let's
15:10 - put in an else statement for our try
15:13 - except block and for that else I'll just
15:16 - say return result and get rid of this
15:19 - outside return statement there so now
15:21 - with that code in place I can rerun this
15:25 - and we can see that it still works but
15:28 - now let's change our second number here
15:30 - to a zero which will make us divide by
15:33 - zero and throw that air
15:35 - so now if I run
15:36 - at now it looks like nothing happens but
15:39 - if I go to our sample dot log file here
15:41 - now we can see that we had a log put in
15:45 - here where it said tried to divide by
15:46 - zero now a personal preference of mine
15:48 - is that anytime that I'm logging an
15:50 - error I usually like to include the
15:52 - trace back so that I can get more
15:54 - information about what exactly happened
15:57 - and the logging module allows us to do
15:59 - this very easily we can just do that by
16:02 - changing this logging dot err instead
16:05 - make that logging dot exception so now
16:08 - let me rerun that code again and switch
16:11 - back to our sample log file and you can
16:13 - see that now included in our log we got
16:16 - that we tried to divide by zero but it
16:19 - also included the trace back here with
16:20 - some more information ok so let me go
16:23 - back to our script here so another good
16:27 - thing about this being modularized is
16:29 - that it's easy to add multiple handlers
16:32 - to a longer so for example let's say
16:35 - that we did want to see the debug
16:37 - statements that were executing down here
16:39 - at the bottom but we only wanted to
16:42 - display those to the console so what we
16:44 - could do here is create another handler
16:47 - but instead of a file handler what we're
16:51 - going to do is create a stream handler
16:53 - so let me show you how this works here
16:54 - so we can just come down here and create
16:57 - a another handler will call this stream
16:59 - underscore handler I'll set that equal
17:01 - to logging dot stream handler and that's
17:06 - not going to take in any arguments and
17:08 - now we don't need to set a log level on
17:11 - this because our logger already has a
17:13 - logging level of debug so now let's go
17:16 - ahead and add this new stream handler to
17:18 - our logger and all we have to do is do
17:21 - the same thing that we did when we added
17:23 - the file handler is logger add handler
17:26 - but now we're going to also add on a
17:28 - stream handler so now that you now you
17:31 - can see that we have both the file
17:33 - handler and the stream handler added to
17:35 - this single logger so now if I run this
17:38 - code then you can see that it logged our
17:41 - debug statements in the console and also
17:44 - these errors show up here too but those
17:46 - are also getting sent specifically to
17:48 - the log file with the error logs
17:50 - now one thing to notice here is that the
17:52 - formatting to the console isn't the same
17:54 - that we had in our file but setting this
17:57 - is just as easy as it was for the file
17:59 - handler so what we'll do here is where
18:01 - we set this formatter
18:03 - on the file handler I'm just going to
18:05 - come underneath and paste that for the
18:07 - stream handler and do the same thing
18:10 - stream handler dot set formatter
18:12 - equal to that formatter that we have at
18:15 - the top or we could create a completely
18:17 - new format for the console which we
18:19 - wanted but I'm just going to leave it
18:21 - the same so let's go ahead and rerun
18:22 - that and now you can see in the console
18:24 - that it has the format that we specified
18:27 - okay so I think that it's going to do it
18:29 - for this video hopefully after these
18:31 - videos you have a good idea for how you
18:32 - can begin to add logging to your
18:34 - projects this is something that almost
18:36 - every project needs and production at
18:38 - some point and good logs can save you a
18:41 - lot of headaches when trying to debug
18:43 - problems you know if you are interested
18:45 - in going even more advanced in this then
18:47 - I would suggest getting on the Python
18:49 - documentation and looking up all the
18:51 - different handlers that they have
18:53 - because you know you can set it up to
18:55 - where if you get an error then it sends
18:57 - you an email or gets added to a queue or
19:00 - something like that they also have
19:02 - rotating logs so that one log file
19:05 - doesn't build up too much all kinds of
19:06 - functionality built in here to the log
19:08 - module and if anyone has any questions
19:10 - about what we covered in this video then
19:12 - feel free to ask in the comment section
19:14 - below and I'll do my best to answer
19:15 - those now if you enjoy these tutorials
19:18 - and would like to support them then
19:19 - there are several ways you can do that
19:20 - the easiest way is to simply like the
19:22 - video and give it a thumbs up and it's
19:23 - also very helpful to share these videos
19:25 - with anyone who you think would find
19:27 - them useful and if you have the means
19:28 - then you can contribute through patreon
19:30 - and there's a link to that page in the
19:32 - description section below be sure to
19:33 - subscribe for future videos and big
19:35 - y'all for watching
19:39 - you