00:00 - hey what's going on everybody uh today i
00:02 - wanted to take a look at the python
00:04 - package manager
00:06 - pip and also go over some of the most
00:09 - frequent commands that you're going to
00:10 - use whenever
00:12 - you start the usb
00:14 - so with that let's go ahead and get
00:16 - started
00:17 - so first things first one of the best
00:19 - resources is if you just type in pip
00:21 - help then it will bring up all the
00:24 - commands and options that you can use
00:26 - so you can see here there's not a whole
00:27 - lot but it shows you
00:29 - install uninstall freeze and also
00:32 - some of the options that you can use um
00:35 - also uh with that we can also do
00:39 - a pip
00:40 - help and then we can type in a specific
00:42 - command so if i type in pip help install
00:45 - now it's going to bring up the options
00:47 - for install so you can see here
00:50 - that we have
00:52 - attack r for a requirements file
00:55 - you can do
00:56 - an upgrade and also install things per
00:59 - user basis and things like that
01:02 - so with the help files out of the way
01:04 - let's go ahead and take a look at how
01:06 - we'll actually use this
01:08 - so say you want to find a package
01:11 - if you're looking for a package and you
01:13 - don't know exactly what it's called you
01:14 - can just do a pip search
01:16 - so let's say i do a pip search on this
01:19 - package
01:20 - and it is going to return to me the
01:22 - package name and also a description of
01:25 - the package here
01:27 - so once you find the package name then
01:30 - you can go ahead and install it so i'll
01:32 - do a pip install and choose the package
01:36 - that we searched for
01:38 - and now you can see that it says that
01:40 - this was successfully installed
01:42 - so if we want to take a look at our
01:44 - install packages we can do a pip list
01:47 - and it will show us all the packages
01:49 - that we currently have installed
01:51 - so you can see here this is the package
01:53 - that we just installed
01:55 - if we don't want that package we can do
01:57 - a pip
01:58 - uninstall
02:00 - and
02:00 - choose that package
02:03 - and then it's going to ask us if we want
02:05 - to continue
02:07 - hit yes now you can see that it's
02:09 - successfully
02:10 - uninstalled and now let's do another tip
02:13 - list
02:14 - and you can see that that package that
02:16 - we just uninstalled is no longer listed
02:18 - another thing you'll notice whenever it
02:20 - lists packages it lists the package and
02:22 - it lists the version number
02:24 - so how do you know if this version is
02:27 - the latest version of this package
02:29 - well with
02:30 - pip list we can do
02:32 - a
02:34 - tactac outdated
02:36 - or we can just do a single dash with an
02:39 - o hit enter
02:41 - and now you can see one of our packages
02:44 - isn't running the latest version of the
02:45 - package the setup tools the current
02:48 - version that we have installed is 12 and
02:50 - the latest is 15.
02:52 - so to update this package what we'll do
02:56 - is a pip install
02:57 - and then an uppercase u for upgrade
03:01 - and then we can type in the package
03:06 - now you can see that was successfully
03:07 - installed if i do a pip list of the
03:10 - packages now you can see that our setup
03:12 - tools is at the latest version
03:17 - now for demonstration purposes uh let me
03:20 - go ahead and reinstall the package that
03:23 - we uninstalled a little bit ago
03:25 - and now if i do a pip list
03:29 - now let's say that you're working on a
03:31 - project
03:32 - and
03:33 - you want to
03:34 - provide maybe somebody else who wants to
03:37 - work on the project you want to provide
03:38 - them with a list of all the packages
03:41 - that they need
03:42 - for that project
03:44 - now one thing you could do is just type
03:47 - out pip list and then they could
03:50 - manually copy down all of those packages
03:52 - and version numbers and install them
03:54 - that way but if you have a really long
03:56 - list of packages then this
03:58 - definitely isn't the best way to do it
04:00 - for this we're going to use something
04:02 - called uh freeze command if we type in
04:05 - pip
04:06 - freeze
04:08 - and what this does is it outputs all of
04:10 - our packages and version numbers in a
04:13 - requirements format
04:15 - so
04:16 - if we wanted to
04:17 - uh send this to somebody then what we
04:20 - could do is pipe this
04:22 - or actually output this
04:24 - to a requirements file so i could type
04:26 - in requirements requirements.txt
04:29 - and
04:30 - hit enter now if i do
04:32 - cat
04:33 - requirements.txt
04:35 - you can see that it lists our package
04:38 - and version number
04:39 - so if you were to send this requirements
04:41 - text file to somebody
04:43 - how would they install all those
04:44 - packages using pip
04:47 - well i have a sample file here that i'm
04:49 - going to use this
04:51 - rtest.txt and you can see i have a
04:55 - few packages listed here so let's say i
04:57 - wanted to install all of these packages
05:00 - now the way you would do this is you
05:01 - would type in pip
05:03 - install
05:04 - and then attack r and what the r is is
05:07 - it's saying hey we're going to use a
05:08 - requirements file and the name of this
05:11 - file is our underscore test.txt hit
05:14 - enter and it's going to go through and
05:16 - it's going to install all those packages
05:18 - and that version of that package
05:22 - now that those are finished installing
05:24 - if i do a
05:25 - pip list then you can see it has
05:28 - installed all those packages at the
05:31 - exact same version number that was in
05:32 - the requirements file
05:34 - now those simple basics are pretty much
05:37 - what you're going to use pip for most of
05:39 - the time
05:40 - but i do want to show you one last trick
05:42 - here
05:44 - these
05:45 - packages that i just installed if i do a
05:47 - pip list outdated
05:50 - now you can see i have multiple packages
05:52 - here that are out of date now i could go
05:55 - through and do
05:56 - it currently doesn't have a way to
05:58 - upgrade all packages that need upgraded
06:01 - you could go through and do each one of
06:03 - these manually but if you have a lot of
06:05 - packages then you know that could be
06:08 - a lot of time to waste
06:11 - so on stack overflow there
06:15 - is an answer here by
06:17 - rbp
06:18 - and he gives this good command here that
06:22 - will go through and do this for you
06:26 - so let me paste this in and walk through
06:28 - exactly what it does okay so first we
06:30 - have pip freeze which outputs all of the
06:34 - requirements uh for the packages that we
06:36 - currently have and this tactac local
06:39 - here
06:40 - if you're in a virtual environment that
06:42 - has access to your global packages then
06:44 - it'll only print out local packages
06:47 - and then you pipe that output to this
06:49 - grep command here and actually i'm not
06:52 - entirely sure what the scrap command
06:53 - does i think he has it
06:56 - listed on his answer over here
06:58 - so this
07:00 - skips
07:01 - dash e package definitions um i've never
07:04 - run into that but um
07:06 - maybe it's uh useful for some cases so
07:09 - then after it runs to that grep command
07:11 - then it gets piped in to this uh cut
07:14 - command here and what this cut command
07:16 - does is it sets the delimiter to an
07:19 - equal sign
07:20 - and
07:21 - then it only returns the first
07:24 - argument back
07:25 - of that result
07:28 - so let's see exactly what that would
07:29 - look like here so
07:31 - if i go all the way back here to
07:34 - this grep command and hit enter then you
07:36 - can see it outputs all of these
07:38 - requirements files with these equals
07:40 - equals and then the version number
07:42 - and whenever you add in that cut command
07:45 - all it does is it will
07:49 - cut out
07:50 - after
07:51 - or before the equal sign there and only
07:54 - return the package name so now we have a
07:57 - list of all of our packages
07:59 - and then lastly the last part of this
08:01 - command
08:03 - takes
08:04 - this output as arguments one at a time
08:07 - and runs that to the command pip install
08:10 - tac u which we went over earlier which
08:13 - is upgrade and that will go through and
08:15 - upgrade every one of the packages that
08:18 - we had outputted so if i hit enter there
08:20 - now you can see that it's going through
08:22 - each package that needed upgraded and is
08:25 - doing so
08:27 - now after that's finished updating if i
08:29 - do
08:30 - a
08:31 - pip list you can see the list of all our
08:33 - packages and
08:35 - version numbers if i do a pip list
08:37 - outdated then we shouldn't have any
08:39 - listed yep and it returned
08:42 - with no packages that need an upgrade
08:46 - so that about does it i hope that this
08:48 - quick overview of pip was useful for you
08:51 - guys
08:52 - if you do have any questions just feel
08:54 - free to leave those in the comment
08:55 - section below
08:56 - be sure to subscribe for future tips and
08:58 - tutorials and thank you for watching