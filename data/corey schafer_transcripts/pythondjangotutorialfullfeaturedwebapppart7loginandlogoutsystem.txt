00:00 - hey there how's it going everybody in
00:01 - this video we're going to be learning
00:02 - how to create an authentication system
00:04 - for our django application so that users
00:06 - can log in log out and we'll also set it
00:09 - up so that users need to be logged in in
00:11 - order to access certain pages so let's
00:13 - go ahead and get started so in the last
00:16 - video we saw had to create this
00:17 - registration page where users could
00:19 - create new accounts but they're not able
00:21 - to log in using those accounts yet so
00:23 - the admin page that we've seen in
00:25 - previous videos is only for users with
00:27 - admin access but by default our new
00:30 - users aren't going to have that so we
00:31 - need to have a login page for them on
00:33 - the front end and Django has a lot of
00:35 - this functionality taken care of for us
00:37 - on the back end already now I'm going to
00:40 - go ahead and get started by using their
00:41 - default login views so first of all I'm
00:45 - going to import these login and logout
00:47 - views within our projects URLs module so
00:51 - within our project let's go open up our
00:54 - projects main URLs module and this is
00:57 - where we have our admin and register
00:59 - route and also our default route that
01:01 - goes to our blog URLs so within this
01:03 - URLs module I'm going to import some
01:06 - views now these are views that Django
01:08 - provides for us for logins and logout so
01:11 - to import these we can come up here and
01:15 - say from Django dot contribute those
01:22 - views and we want to import those as
01:24 - auth underscore views now I mentioned
01:27 - this in one of the previous videos but
01:29 - any time you import views we're
01:31 - importing multiple views here into these
01:34 - URLs so you always want to say as and
01:37 - then call it something else so when we
01:38 - imported views from users we called
01:40 - those user views when we import them
01:42 - from auth we call them off views that
01:44 - way those names don't collide okay so
01:46 - once we have that imported then we can
01:49 - create paths for those views so I'm
01:51 - going to copy our register path here as
01:53 - a starting point and paste this in and
01:57 - actually let me just do one of these at
01:59 - a time so let me remove that okay so now
02:01 - let's create a login view so I'm going
02:03 - to create a login view here so the path
02:06 - will just be to login and now we're
02:09 - going to use these auth views that we
02:12 - got from Django
02:13 - and this is going to be off views dot
02:15 - login view and look at the casing there
02:18 - that is camel case with that capitalized
02:21 - and now we want to say dot as underscore
02:24 - view and then for the name here we will
02:26 - set this name equal to login so now I'm
02:29 - going to copy this and do the same thing
02:31 - for a log out view and I'll explain this
02:33 - more in just a second after we get these
02:35 - in here so I'll call that log out the
02:38 - view is going to be log out view as view
02:42 - and then the name will be log out so
02:45 - this log in and log out view here these
02:47 - are class-based views now we haven't
02:49 - seen class-based views yet but we'll
02:51 - make some of our own later in the series
02:53 - so the built in views for log in and log
02:56 - out that Django gave us will handle the
02:58 - forms and the logic and all of that
02:59 - stuff for us but it's not going to
03:01 - handle the templates which is good
03:03 - because we want to make the templates
03:05 - anyway so we want them to match the look
03:06 - and style of our current web site so let
03:09 - me show you what I mean by this so if we
03:12 - run our dev server and then go to our
03:15 - web site so our dev server is still
03:17 - running up and it looks like we have an
03:18 - error I misspelled Django on one of
03:21 - these imports so fix that save it see if
03:24 - our server is now running it is okay so
03:27 - now let's go to that login route that we
03:30 - just created then we can see that when
03:33 - we go to that route we get this template
03:35 - does not exist error and these Django
03:37 - errors are extremely useful when we're
03:39 - in debug mode because they can point us
03:41 - in the direction of what changes we need
03:43 - to make in order to get things working
03:45 - so the error that is showing us here is
03:48 - that it's looking for a template and you
03:51 - can see here this is a little small but
03:53 - it says that it's looking for the
03:54 - template at registration ford slash
03:57 - login dot HTML so that's where that
03:59 - Django login view looks for that
04:01 - template by default now we could create
04:04 - a registration directory inside of our
04:06 - templates and create a login dot HTML
04:08 - template there but I think it would make
04:10 - more sense just to have our login
04:12 - template inside of our user templates
04:15 - alongside our register page that we've
04:17 - already created and we can tell Django
04:19 - that we would just like to look there
04:20 - instead so let's do that okay so to do
04:23 - this I'm going to open back up our URLs
04:26 - here
04:27 - at the end we can tell Django where to
04:30 - look for a template and we're actually
04:31 - going to pass this in as an argument to
04:34 - the as View Function so within here
04:36 - within this as View Function I'm going
04:39 - to say template underscore name is equal
04:42 - to and then a string I want to say that
04:45 - this is in users ford slash login dot
04:48 - HTML now we haven't created this yet but
04:50 - we will in just a second but for now
04:52 - let's go ahead and do the same thing
04:54 - with logout so I'll say template name is
04:56 - equal to and then we'll change this to
04:59 - logout HTML so now if we save that if we
05:02 - go back to our browser and reload this
05:05 - then we should still get an error but
05:07 - now it's telling us that it's looking
05:10 - for this template in users forge slash
05:12 - login dot HTML so let's create that
05:15 - login template inside of our users
05:17 - templates so let's open up our users app
05:20 - and navigate to those templates and
05:22 - within our users templates let's create
05:26 - a new template here and I'll call this
05:28 - login dot HTML and that's in the same
05:31 - location that our current register
05:33 - template is located as well and within
05:35 - this login dot HTML template we're gonna
05:37 - make this very similar to our other outs
05:39 - where we're extending the base template
05:41 - and we also need to display the form
05:43 - that the login view will be passing to
05:45 - this template now this will be very
05:47 - similar to the register template that we
05:48 - created in the last video so I'm just
05:50 - going to use that as a starting point so
05:52 - I'll open that up and copy it and then
05:55 - paste it into our login template so I
05:59 - copied the register template there and
06:01 - paste that in to the login template so
06:03 - in this template we're simply creating
06:05 - our form and our form has a field set
06:08 - and a legend and then we are displaying
06:10 - the form with those crispy form tags
06:12 - that like we saw in the last video and
06:14 - also we have a submit button down here
06:16 - that says sign up so we're actually
06:19 - going to want to change some of this
06:20 - stuff around so we're gonna want to
06:22 - change the legend this is now the login
06:24 - page so we'll change the legend to say
06:26 - log in and we will change the submit
06:30 - button to say login and also we see a
06:33 - link down here at the bottom that we had
06:34 - on our register page that says you know
06:37 - do you already have an account well if
06:38 - you do then you can sign in here so just
06:40 - like
06:41 - we did on that register page you also
06:43 - see a lot of websites where they'll have
06:45 - a link on the login page that says do
06:47 - you need an account before you log in
06:49 - and if you need an account then you can
06:51 - sign up here so instead of asking the
06:53 - user if they already have an account and
06:55 - to log in we will say need an account
06:58 - and then we will send them to the
07:01 - register page so sign up now now
07:04 - currently this link here is dead because
07:07 - for our register page we didn't put an
07:09 - actual link to our login page because
07:11 - our login page didn't exist yet but it
07:14 - exists now so we can actually feel in
07:16 - these eight reps so that these links are
07:18 - active so let's fill this in with URLs
07:21 - to our register and login pages so I'm
07:23 - currently in the login page and we'll
07:25 - link to the register page if they need
07:27 - an account and we saw how to do this in
07:29 - the templates video but if you forgot we
07:32 - can simply open a code block here in the
07:35 - href and just use this URL tag and then
07:38 - we want this to be a URL for the
07:41 - register route and within the register
07:43 - page we want to link to the login route
07:46 - so I'm just going to copy that go back
07:48 - to our register template and now that
07:50 - our login page is going to exist we can
07:53 - fill in that href and say that we want
07:56 - this to be the URL for login and save
08:00 - that so now let's go back to our login
08:02 - page okay so now we have our login
08:04 - template done but even with this done
08:06 - this probably still isn't going to work
08:08 - in the browser so let me save everything
08:10 - and then reload this and the browser
08:13 - okay so we can see that we're at least
08:14 - getting a login page here now this login
08:17 - page should be somewhat functional right
08:19 - now so if I enter a username and a
08:21 - password that doesn't match any users in
08:23 - our system then it should be invalid so
08:26 - if I just say bad user name and then
08:28 - some gibberish password and then try to
08:30 - login then it says please enter a
08:32 - correct username and password so we can
08:34 - see that we do have some functionality
08:36 - here so that's good now I say that it's
08:38 - only somewhat functional because if we
08:40 - try to log in with a correct username
08:42 - and password then we're going to see
08:43 - another error so let me do that so I'm
08:46 - trying to try to rely in with that core
08:48 - EMS user that I created in the earlier
08:51 - videos and if I log in with that
08:53 - then we can see that we get a 404 error
08:56 - which means that it's looking for a
08:58 - route that doesn't exist now this isn't
09:00 - just a template that doesn't exist but
09:02 - it's trying to access a URL that doesn't
09:05 - have a view attached to it and the URL
09:08 - that it's trying to access is this ford
09:10 - slash accounts ford slash profile now
09:13 - we're gonna add a profile route to our
09:15 - site soon but right now we don't have
09:17 - one and even if we did I don't think I
09:20 - want our blog to redirect users to their
09:22 - user page when exactly when they login I
09:26 - think would be better if they got
09:27 - redirected to the home page when they
09:29 - logged in so the reason that this is
09:31 - trying to direct us to the accounts
09:32 - profile page is because Jango set it up
09:35 - so that when the login is successful it
09:38 - tries to navigate to that location but
09:40 - we can modify that location using our
09:42 - settings so I'm going to open up our
09:45 - project settings so let's go to our
09:48 - project and open up the settings dot py
09:51 - file and let's just go all the way to
09:52 - the very bottom here to create a new
09:55 - setting so here at the very bottom I'm
09:58 - just going to create a new setting that
10:01 - is login underscore redirect let me
10:04 - spell that right redirect underscore URL
10:07 - and we'll set that equal to blog dash
10:10 - home and that is the name of the path
10:13 - that we gave to our blog homepage so now
10:15 - with that in place if we go back to our
10:18 - browser and try to log in using a
10:20 - correct username and password so I'll go
10:24 - to the login page and log in with a
10:26 - username and password that is in our
10:28 - database then we can see that now we get
10:30 - redirected to our blog home page so that
10:32 - worked now this is actually logging in
10:35 - our user into our website so there isn't
10:37 - much visual feedback right now that
10:39 - tells us that we're logged in but we'll
10:41 - fix that in just a second but we can
10:43 - tell that we're currently logged in
10:44 - because I logged in with the account
10:46 - that has access to the site's
10:48 - administration page so if I go to ford
10:51 - slash admin then we can see that we're
10:54 - already logged in so now let's try to
10:57 - log out and then log back in so now if I
11:01 - log out and go to this admin page then
11:04 - it's asking us for a login so we can't
11:06 - access
11:07 - this page until we login again so let me
11:11 - go back to the login page that we just
11:13 - created I will log in with those
11:15 - credentials and then go back to our
11:20 - admin page and I'm logged in again so
11:22 - that login page that we've created is
11:24 - working even though it's not giving us
11:26 - much visual feedback at the moment so
11:28 - now that we have our login page working
11:30 - let's change our register route so that
11:33 - users are redirected to the login page
11:35 - after they login now currently if we
11:38 - look at our register views so let me
11:41 - pull up our user views here then we can
11:45 - see here that after they have
11:46 - successfully registered the user that we
11:50 - are giving them this success message and
11:52 - then redirecting them back to the home
11:54 - page but it would make a lot more sense
11:55 - right here to redirect them to the login
11:57 - page now that we have this working so
12:00 - that they can log in with their new
12:01 - account and make sure that their account
12:03 - is working so let's go ahead and change
12:05 - this so for the message I'm just going
12:08 - to get rid of our current message and
12:10 - say your account has been created you
12:15 - are now able to log in and now instead
12:19 - of redirecting them to the blog home
12:21 - page let's direct them to the login page
12:25 - so I'll save that ok and before we view
12:27 - this back in our browser let's quickly
12:29 - get our logout page working as well so
12:32 - let me pull up our projects URLs module
12:35 - here real quick so pull up our projects
12:38 - URLs where we added the login and logout
12:41 - routes now for our logout view I also
12:43 - set a template name of users and logout
12:47 - dot HTML but actually let's remove that
12:49 - just for a second so that I can show you
12:52 - what it looks like without that set so
12:54 - let's just look at the default logout
12:57 - view so now let's open our browser and
13:00 - try to navigate to our logout route so
13:04 - I'll go back to our homepage here and we
13:06 - are currently logged in so I will go to
13:07 - forge slash logout so this is kind of
13:10 - weird so we can see that it says that we
13:12 - were logged out but it looks like the
13:15 - Django admin page so it says that we are
13:18 - logged out and then it gives us a link
13:20 - to log back in
13:21 - and if we click on that login again then
13:23 - it takes us back to the admin login now
13:26 - that's not what we want since we want an
13:28 - authentication system that works for
13:30 - everyone on the front end of the website
13:32 - and doesn't expose them to our admins
13:34 - section so all we need to do here is
13:36 - create a logout template in our users
13:39 - templates directory where we just
13:41 - created our login template and then tell
13:43 - our logout view to use that template
13:45 - just like we did with login so first
13:48 - let's tell the logout view that we want
13:50 - to use a different template just like we
13:52 - had set up before so I will paste that
13:54 - back in and so that will look for a
13:57 - logout template at users logout HTML so
14:01 - in our users templates directory right
14:03 - alongside our login and register
14:05 - templates let's create a new file and
14:07 - we'll call this logout dot HTML and now
14:10 - let's copy one of our other templates so
14:12 - that we have a starting point here so
14:14 - I'm going to copy the registered HTML
14:17 - template and let's paste this into our
14:19 - logout template and now we're not gonna
14:22 - have any forms on this page so we can
14:24 - get rid of this loading krispy form tags
14:27 - here and we can also get rid of our
14:30 - entire form here and actually I'm just
14:32 - going to remove everything inside of our
14:34 - content block here except for this
14:37 - bottom div here that has our login link
14:40 - so I'm going to keep that but I'm going
14:41 - to get rid of this content section div
14:44 - so I will fix this tab tabbing here and
14:49 - now above our link I'm just going to
14:51 - simply put an h2 tag that says that
14:53 - we've been logged out so I'll put an h2
14:55 - tag and then just say you have been
14:58 - logged out and then I'll just change our
15:02 - link text here for the login page and
15:04 - just say login again so I'll remove the
15:07 - text that says already have an account
15:09 - and then just make the login text here
15:13 - log in again so with this in place let's
15:17 - try to log in and log out of our website
15:19 - within the browser so let's pull up the
15:22 - browser here and go back to our homepage
15:25 - and now let's go to forge / login and
15:29 - let's log in with a user that exists on
15:32 - our site
15:34 - and now that we're logged in let's try
15:36 - to log out so now let's go to Forge
15:38 - slash logout and we can see that we have
15:41 - a message here that says you have been
15:42 - logged out log in again and really small
15:45 - change here it doesn't matter but I can
15:47 - tell that this has a little margin here
15:48 - to the left and that's because I left a
15:50 - class on there so you can see that our
15:53 - anchor tag here has a class of ml - -
15:56 - let's just get rid of that because we no
15:58 - longer have any text to the left so save
16:01 - that and whoops save that and reload
16:04 - that logout page and our browser and now
16:06 - that's pushed against the left side
16:08 - there okay so we can see that now our
16:09 - site is using our logout page that we
16:12 - created in our templates instead of that
16:14 - default that had kind of the admin style
16:17 - so now it looks like the rest of our
16:19 - website so that's good and if we go to
16:21 - the admin page then that logout
16:24 - functionality should have still worked
16:26 - so it should tell me I need to log in
16:28 - and it does so that's good okay so now
16:30 - let's just go back to our home page okay
16:34 - so now that we have a registration page
16:35 - and our logins and log outs working
16:38 - let's change our navigation bar so that
16:40 - it changes based on whether someone is
16:43 - logged in or logged out because if
16:45 - someone isn't logged in yet then they
16:47 - should have a login link available
16:48 - somewhere on the page but if they're
16:51 - logged in then they should see a logout
16:54 - link instead of a login link so to do
16:57 - this we can open up our base template
16:59 - that contains the navigation and then
17:01 - put in a conditional that checks whether
17:03 - the user is logged in or locked out so I
17:06 - will go down and open up our project
17:08 - here and within our project our base
17:11 - template is within our blog app and that
17:14 - is in our blog templates and then blog
17:16 - subdirectory and then I'll open up the
17:18 - base template here now I'm going to
17:20 - scroll down until I see the navigation
17:23 - so the navigation is here from this
17:25 - opening knife tag to this closing nav
17:27 - tag okay so first of all here are our
17:30 - login and register routes right now now
17:33 - currently our navigation links to the
17:34 - register and login pages don't actually
17:37 - go anywhere they're just these dead
17:38 - links and that's because those pages
17:40 - didn't exist when we created this base
17:42 - template and trying to use the URL tag
17:46 - for a route that doesn't exist will
17:48 - throw
17:48 - and air so now we can actually fill
17:50 - these in so I will put in a code block
17:54 - for each of these and we will say that
17:56 - we want this one to be the URL for the
17:59 - login and then we can copy that and
18:02 - paste this in and say that we want this
18:05 - one to be the URL for the register route
18:08 - okay so now we only want to see the
18:11 - login and register links if the user
18:13 - isn't logged in because if they are
18:16 - logged in then we know that they don't
18:18 - need to log in or create an account and
18:20 - Jango makes this easy for us by
18:22 - providing us with a user variable that
18:24 - contains the current user and it has an
18:27 - attribute called
18:28 - is authenticated that allows us to check
18:30 - if the user is currently logged in or
18:32 - not so here in our navigation bar we can
18:36 - just put in a conditional so right here
18:38 - is where our current login and register
18:40 - routes are located so I'm going to put
18:42 - that conditional right here so I'm going
18:44 - to open up a code block and I'm gonna
18:47 - say if user dot is underscore
18:51 - authenticated then if they are
18:53 - authenticated then it means that they
18:55 - are currently logged in and we will want
18:57 - to display the logout route which we
18:59 - don't have in our navigation yet but
19:02 - we'll add it in just a second so now
19:04 - we'll put in an else statement here and
19:06 - say else which means that they wouldn't
19:09 - be authenticated which means that they
19:11 - would be logged out and if they are not
19:13 - authenticated then we want to display
19:15 - the login and register routes here so
19:18 - we'll put that inside the else block and
19:21 - now we can simply end that if
19:23 - conditional by saying end if down here
19:27 - at the bottom and now all we need is a
19:29 - link for our logout route so I will copy
19:31 - the login route here and paste that and
19:35 - change this to the logout and change the
19:39 - route for that to be logout so one more
19:42 - time let's go through this we're saying
19:44 - if the user is authenticated then put a
19:47 - link to the logout page in the
19:50 - navigation
19:51 - else/if which means if they are not
19:54 - authenticated and means that they're
19:55 - logged out then show links for the login
19:58 - page and a link for the register page in
20:01 - the navigation so now
20:02 - let's go to our website and try logging
20:03 - in and then see how this affects our
20:06 - navigation bar so all of this is saved
20:09 - so let's go back to our website and
20:10 - reload this so now let's see if our
20:13 - login link works up here so we can click
20:15 - on that and it takes us to our login
20:17 - page so now if we log in now if we look
20:22 - up here in the navigation now it's
20:24 - showing us a link to the logout route
20:26 - and that is because our user is
20:28 - authenticated so it shows that link
20:30 - instead of the other two and now if we
20:32 - click on logout now we've successfully
20:34 - logged out and now we can see the login
20:37 - and register routes up here in the
20:38 - navigation instead so it's always a good
20:40 - idea to give your users some visual
20:43 - feedback like that letting them know
20:44 - whether they're logged in or logged out
20:46 - because if they're logged in and they
20:47 - see a log in register route at the top
20:50 - then it's going to kind of confuse them
20:51 - and make them think that they're not
20:52 - currently logged in so this is a good
20:55 - way to do it okay so the last thing that
20:56 - we're going to be learning in this video
20:58 - is how to put a restriction on certain
21:00 - routes so that you can only go to those
21:02 - routes if you are currently logged in
21:04 - now you'll see this on certain sites all
21:07 - the time so say that I click on a link
21:09 - to edit my Twitter profile or something
21:11 - like that now if I'm not logged in then
21:13 - it'll first take me to the login page
21:15 - and say hey you have to log in first
21:17 - before you can view this page which is
21:19 - definitely a good thing because you just
21:20 - don't want anybody to be able to you
21:23 - know go in and edit our profiles so
21:25 - let's do something like that on our site
21:27 - so we'll create a route for the users
21:29 - profile that they can access after
21:32 - they've logged in so first let's create
21:34 - this route to their profile so I will
21:36 - open up our user routes so let's open
21:39 - back up our project let me close down
21:41 - some of the tabs that I have here since
21:44 - we've got a lot built up just get this
21:46 - cleaned up a bit okay so we want to
21:48 - create a page for a user's profile so
21:51 - first let's create that view so that is
21:53 - going to be within our users views so
21:56 - I'm going to open up our users app
21:58 - directory here and then open up our
22:00 - views py from within there currently we
22:03 - just have our register view so we can
22:05 - just add this below our register view so
22:08 - down here at the bottom I'll say def and
22:11 - I'll call this profile and remember that
22:13 - we have to accept the request
22:16 - and right now we'll keep this extremely
22:17 - simple and just render a template that
22:20 - we haven't created yet so we will just
22:22 - say return render and we will render out
22:25 - remember that the first argument has to
22:27 - be the request and we will render out a
22:30 - template called users Forge slash
22:32 - profile dot HTML and we haven't created
22:35 - this yet but we will in just a second ok
22:37 - so now let's go ahead and create that
22:38 - template so within our users templates
22:41 - let's open these up so this is right
22:44 - alongside the log in log out and
22:46 - register templates will create a new
22:48 - template in here called profile dot HTML
22:51 - and now as usual let's open up another
22:53 - template to grab as a starting point so
22:56 - I'm just going to grab the login
22:58 - template here and copy that and paste it
23:01 - into our profile template and now I'm
23:04 - just going to delete everything here in
23:06 - our content block and simply print out
23:08 - the current users user name so I will
23:11 - delete all of this and we will just
23:14 - print out the current users user name
23:16 - when they navigate to this page so we'll
23:18 - just put an h1 block here and then to
23:22 - access that user variable we can put in
23:24 - the double curly braces and then say
23:25 - user dot user name and remember that
23:29 - user is not something that we actually
23:30 - have to pass in to the context that is
23:33 - something that is built into Django that
23:35 - represents the current logged in user ok
23:38 - so now that we've got the view and the
23:40 - template created for this profile page
23:42 - let's create the route and our URL
23:44 - patterns that will use this view so to
23:47 - do this we'll just put this inside of
23:49 - our projects URLs dot pi alongside our
23:52 - registered login and logout routes and
23:55 - I'm just going to copy this register
23:57 - route here as a starting point and paste
23:59 - that underneath and now we can change
24:01 - this to profile so I'll say when we
24:03 - navigate to ford slash
24:05 - profile we want that to be handled by
24:08 - the user views profile view and we will
24:12 - name that profile ok so those changes
24:15 - should make that route accessible on our
24:17 - site so let's also add a link to this
24:20 - page on the navigation bar if the user
24:22 - is logged in so I'm going to go back to
24:25 - our blogs based on HTML template where
24:27 - the navigation bar lives
24:29 - so that was within vlog templates and
24:32 - then based EML scroll down to our
24:35 - navigation bar again where we were
24:37 - checking if the user is authenticated
24:39 - and we want to display a link to their
24:41 - profile when they are logged in so we
24:44 - can display this right above the logout
24:46 - link so I will copy that and paste that
24:50 - in to the is authenticated section of
24:53 - this conditional and we want this to go
24:55 - to their profile so we'll say URL
24:58 - profile and we'll just say profile there
25:01 - now before we restrict this route to
25:03 - only be accessible to users who are
25:05 - logged in let's first make sure that
25:06 - this is working with all of our changes
25:08 - so far so let's save all of our files
25:11 - and all these are saved and now let's
25:13 - open this up in our browser and see how
25:16 - this looked so I will go to log in and
25:18 - log in with a user that exists and once
25:22 - we're logged in now we can see we have a
25:24 - profile and a logout link up here so if
25:26 - I click on profile then we can see it
25:28 - goes to a page that lists out our logged
25:31 - in users username so that is working so
25:33 - far but let me show you what the problem
25:35 - is here so if I log out then nothing is
25:39 - preventing me from going back and just
25:42 - manually going to that profile page so
25:44 - if I go up here into the URL bar and go
25:46 - to forward slash profile then we can see
25:48 - that we don't get anything on the screen
25:50 - and we don't get anything on the screen
25:52 - because it doesn't have a current user
25:54 - and doesn't know what user name to
25:56 - display so we want to put a check in
25:58 - place that makes a user login before
26:01 - they can access this page so let's do
26:03 - that now and this is extremely easy to
26:06 - do to do this we can just use a log in
26:08 - required decorator that Gengo provides
26:11 - for us so let's go back to our views our
26:15 - user views so within our users app I'm
26:18 - going to open up our views dot py and
26:21 - now we want to require that a user is
26:23 - logged in before they view this profile
26:25 - view here so to do this let's import the
26:28 - log-in required decorator so up here at
26:31 - the top we can say from Django dot
26:35 - country
26:37 - not auth dot decorators kind of long
26:40 - then we can import
26:42 - log-in underscore required and save that
26:47 - and now down here by our profile view we
26:52 - can simply add that decorator above our
26:54 - profile view so let me copy that and
26:57 - this is going to be a decorator so we'll
26:59 - say at login required now if you don't
27:03 - know what decorators are then it's not a
27:04 - big deal
27:05 - basically it adds functionality to an
27:08 - existing function and in this case it
27:10 - adds functionality to our profile view
27:12 - where the user must be logged in to view
27:14 - this page now I do want to mention that
27:17 - if you're using class-based views then
27:19 - the process of making the view require a
27:21 - login as a little bit different we
27:23 - haven't covered class-based views yet
27:25 - but we will in a future video
27:27 - but for now we can go back to our
27:29 - browser and try to reload that same
27:31 - profile page so now if I try to reload
27:34 - this while I'm not logged in then we can
27:36 - see that we get an error and it's
27:38 - telling us that the page it's looking
27:40 - for doesn't exist and it's looking for
27:42 - this page at forge slash accounts ford
27:45 - slash login and that's the default
27:47 - location that django looks for login
27:49 - routes but we decided to simply put our
27:52 - login route at ford slash login so we
27:55 - need to tell Django where it can find
27:57 - our login route and we can easily do
28:00 - that just by adding a login URL variable
28:03 - to the settings py file in our project
28:06 - so let's open our projects
28:08 - settings dot py file so within Django
28:12 - project settings dot py and we'll just
28:14 - go down here to the bottom and right at
28:18 - the bottom here right underneath this
28:20 - login redirect URL I will set one called
28:23 - login underscore URL set this equal to
28:26 - log in and log in is the name that we
28:30 - gave to our URL pattern for the login
28:32 - route so now if we go back to our
28:35 - browser and try to access our profile
28:39 - page then you can see that now we're
28:42 - redirected to our login route now
28:44 - there's one really nice thing that I
28:45 - want to show you here that's built into
28:47 - the Django login view now if you look at
28:50 - the URL then we were trying to access
28:52 - the profile page and it redirected us
28:55 - and told us that we had
28:56 - in first but if we look at the URL then
28:59 - we can see that there is a parameter in
29:01 - our URL that says next is equal to ford
29:04 - slash profile so it's keeping track of
29:07 - the page that we were trying to access
29:09 - and it will direct us to that page after
29:11 - the login and that's a feature that most
29:14 - people expect on web apps these days
29:16 - because remember our default redirect
29:18 - URL after we log in is the home page of
29:21 - the blog so imagine how annoying it
29:23 - would be if you clicked on a page and it
29:26 - told you that you needed to log in and
29:27 - after you logged in as since you
29:29 - somewhere completely different so this
29:31 - is a nice feature built in with the log
29:33 - in view so if I log in here then we
29:36 - should be redirected to that profile
29:38 - page since that is the page that we were
29:40 - trying to access so let me log in here
29:44 - so I'll log in with a user that I know
29:46 - exists and we can see that after we
29:49 - successfully logged in it sent us to the
29:51 - profile page so that will take us to the
29:53 - page specified in the next parameter if
29:56 - that parameter is in the URL but if it's
29:59 - not in the URL then it just redirects us
30:01 - back to the blog home page like we've
30:03 - seen before so now this profile page
30:05 - that we have here this is a route that
30:07 - is only accessible by people who have
30:09 - logged in and if they haven't logged in
30:11 - then it'll redirect them to the login
30:12 - page and force them to login first so
30:16 - this is working real nice okay so I
30:18 - think that is going to do it for this
30:19 - video hope that now you have a pretty
30:21 - good idea for how you can implement an
30:23 - authorization system in Django so we
30:25 - learned how to get the login and logout
30:27 - pages working and also learned how we
30:29 - could require a login in order to reach
30:31 - a certain route now in the next video
30:33 - we'll update this user profile page and
30:36 - make it so that our users can upload an
30:38 - image for their profile picture but if
30:40 - anyone has any questions about what we
30:42 - covered in this video then feel free to
30:43 - ask in the comment section below and
30:45 - I'll do my best to answer those and if
30:46 - you enjoy these tutorials and would like
30:48 - to support them then there are some ways
30:49 - you can do that these are sways to
30:51 - simply like the video and give it a
30:52 - thumbs up and also it's a huge help to
30:54 - share these videos with anyone who you
30:55 - think would find them useful and if you
30:56 - have the means you can contribute your
30:58 - patreon and there's a link to that page
30:59 - in the description section below be sure
31:01 - to subscribe for future videos and thank
31:03 - you all for watching
31:05 - you
31:14 - you