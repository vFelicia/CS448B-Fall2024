00:00 - hey there how's it going everybody in
00:01 - this video I'm going to try to explain
00:02 - the solution to a problem that I see a
00:04 - lot and also a common question that I
00:06 - get on my videos and the problem that
00:08 - I'm talking about can take a few
00:09 - different forms so maybe you've
00:11 - installed Python but when you type
00:13 - Python in the command line it either
00:15 - says that it doesn't recognize the
00:16 - Python command or maybe it gives you a
00:18 - different version than what you thought
00:20 - that you'd installed or maybe you're
00:22 - trying to use a feature that's only
00:24 - available in later versions of Python
00:26 - like f strings and Python 3 6 and it's
00:29 - just not working for you so that likely
00:31 - means that you're not using the version
00:33 - of Python that you think that you're
00:34 - using or maybe you're trying to import
00:37 - something that you thought that you
00:38 - installed through pip but it keeps
00:39 - giving you an import error and telling
00:41 - you that it can't find the module so all
00:43 - of these problems are likely caused by
00:45 - your machine not using the correct
00:47 - Python interpreter so in this video
00:48 - we'll be learning how to find out which
00:50 - Python interpreter you're using and
00:52 - where it's located on your machine we'll
00:55 - also see how to switch between different
00:57 - Python versions and environments and
00:58 - also how to troubleshoot imports if they
01:01 - aren't working correctly so in this
01:02 - video we're gonna be seeing how to do
01:04 - all of this on the Windows operating
01:05 - system but also have a video on how to
01:07 - do this on Mac and Linux as well so if
01:10 - you're on one of those operating systems
01:11 - then I'll have a link to that video in
01:13 - the description section below
01:14 - ok so with that said let's go ahead and
01:16 - get started so first of all maybe you've
01:18 - tried installing Python but it still
01:21 - isn't working on your machine so I've
01:23 - installed Python 2 and Python 3 on my
01:25 - Windows machine here but when I open up
01:27 - my command line and run the Python
01:30 - command then we can see that it says
01:32 - python is not recognized as an internal
01:35 - or external command now the reason that
01:37 - this isn't working is because our
01:38 - machine is only looking in certain
01:40 - places for commands if it doesn't find
01:42 - the command in those locations then it
01:44 - will give us this response that it's not
01:46 - recognized as an internal or external
01:47 - command now we could just run Python by
01:50 - putting the exact location of the
01:52 - executable so when I installed Python 2
01:55 - and python 3 on this machine I installed
01:57 - them in two different locations so let
01:59 - me bring those up so python 2 is
02:02 - installed here i'm not sure if you can
02:04 - see this but it's in my c drive in a
02:06 - directory called python a27
02:09 - and and for Python 3 it's a bit more of
02:12 - an obscure location it's in users Corre
02:15 - app data local programs Python Python 37
02:19 - so let me go back to where I installed
02:21 - Python at - in that Python 2:7 directory
02:24 - so within this directory we have a
02:27 - Python exe executable so this is what
02:30 - runs Python so if I use this entire path
02:33 - to this executable then I should be able
02:36 - to run Python in our command line so
02:38 - let's go ahead and try that so I'm going
02:40 - to grab part of this path up here from
02:43 - the bar and go back to our command line
02:45 - and now I will paste that in and within
02:48 - that directory I will just run Python so
02:51 - you can do python exe or just python i'm
02:54 - just going to use the python command and
02:56 - run that and you can see that it runs
02:57 - python 2 7.15 ok so now I'm going to
03:01 - exit out of that and clear the screen
03:04 - here and now let's go to that Python 3
03:09 - directory so I'll pull that up now like
03:11 - I said this is in a bit more of an
03:13 - obscure location so this is where it
03:15 - automatically installed when I
03:16 - downloaded python online now if you
03:19 - don't know where python was installed on
03:20 - your machine then i would suggest going
03:22 - back to the python download page and
03:26 - when you download Python it allows you
03:29 - to install it in the default directory
03:30 - which in my case was that long path that
03:33 - we just saw but if you don't want to
03:35 - install it there then you can use a
03:37 - custom location and you have that option
03:39 - as well so now let's go back to our file
03:43 - explorer here so you can see in this
03:45 - directory I have a Python exe as well so
03:49 - just like with python 2 if I use the
03:51 - full path to this Python 3 executable
03:54 - then I can run that in my command line
03:56 - as well so I'm going to copy this entire
03:58 - path here and pull up my command line
04:01 - and paste that in sorry it's wrapping to
04:04 - another line here and within that
04:06 - directory I'm going to run the Python
04:08 - command so by running the full path to
04:10 - that command we can see that it's
04:12 - running Python 3 7 ok so now I will exit
04:16 - out of there ok so that's good but it's
04:19 - probably not why you're watching this
04:21 - video so it would be nice to simply
04:23 - be able to use the Python command like I
04:25 - tried to at the beginning of the video
04:26 - and have it run the version of Python
04:28 - that we want so like we saw before if we
04:31 - run Python and run that then it says
04:33 - python is not recognized as a command
04:36 - and again the reason that this isn't
04:38 - working is because our machine is only
04:40 - looking in certain places for that
04:41 - Python command or executable and if it
04:44 - doesn't find it in those locations then
04:46 - it will give us this response that it's
04:47 - not recognized now we can add
04:49 - directories to the locations that our
04:51 - machine will look and we can do that by
04:54 - adding these directories to the path
04:55 - environment variable so on Windows we
04:58 - can get to the path environment variable
05:00 - by opening our Start menu so I'm going
05:03 - to do that down here at the bottom and
05:04 - we can search for system and we'll click
05:08 - here with within system within the
05:10 - control panel so click on that and
05:12 - within here click on advanced system
05:15 - settings and then go to environment
05:17 - variables so within here we have our
05:20 - user variables and our system variables
05:22 - now we can simply add to our path under
05:24 - our user variables so I'm going to click
05:27 - on the path up here and then I'm going
05:30 - to click on edit and now we can add
05:32 - directories to that path environment
05:34 - variable so to do that we can just
05:36 - simply click new and now we can add the
05:39 - path so now we can just paste in our
05:42 - directory that contains our python
05:44 - executable so i'm going to paste in that
05:46 - python the three directory that I copied
05:48 - it just a bit ago so I'll paste that in
05:51 - and I'm also going to add the directory
05:53 - that contains our Python 2 executable so
05:56 - I'm going to click new here then go back
05:58 - to our file explorer and open up that
06:01 - location and copy that go back to our
06:04 - environment variables and paste that in
06:07 - now notice here that we're pacing in the
06:09 - directories not the full path to the
06:12 - executable so we left off the Python Det
06:15 - exe on the end of those just the
06:17 - directories now the directories higher
06:19 - on the path have higher precedence so
06:21 - rearrange these so that your preferred
06:23 - version of Python is higher in the path
06:26 - so for example if I have the Python 2
06:29 - directory at the top so if I click on
06:31 - this and click on move up and then I'll
06:34 - put python 3 here
06:36 - second so I'll move that up one so I
06:38 - have Python two than Python three then
06:40 - now let's save all of this I'm going to
06:42 - click OK down here at the bottom and
06:44 - okay down here and okay here and now
06:47 - let's restart our command line so I'm
06:49 - going to quit out of what we had before
06:51 - and open that back up and maximize this
06:55 - again okay so now let's see what happens
06:57 - when we type in Python this time so if I
07:00 - type in Python and hit enter then you
07:02 - can see that we actually get python two
07:04 - seven here and the reason for that is
07:06 - because we had python two above the
07:09 - Python three directory in our path
07:11 - environment variable now if I go back to
07:13 - those environment variables so I'm going
07:15 - to reopen our system settings here click
07:17 - on advanced system settings go down here
07:20 - to environment variables at the bottom
07:22 - and click up here on our path and go to
07:25 - edit now I'm going to click on python 3
07:28 - and move that above python 2 and then to
07:31 - save this I'm just going to click OK on
07:33 - all of these settings here and then
07:36 - restart our terminal again so restart
07:39 - our terminal maximize that and now if we
07:42 - type in Python then we can see that now
07:44 - we're running Python 3.7 and that's
07:48 - simply because it finds that Python 3
07:50 - executable in the path before the Python
07:53 - 2 executable now python now gives you
07:56 - the option when you download Python to
07:58 - automatically add the installation
08:00 - directly directory to the path
08:02 - automatically so you might not have to
08:04 - do this manually but it's still good to
08:06 - know how the path works and to be able
08:09 - to change this manually if you need to
08:10 - now one more tip when it comes to the
08:13 - path is that you'll likely want to also
08:15 - add pip to the path as well so pip is
08:18 - what allows you to install packages so
08:21 - you want that command to work on the
08:22 - command line as well now it's not in the
08:25 - same directory as Python it's in the
08:27 - same general location as the python
08:29 - executable but it's inside of a scripts
08:32 - directory so let's add this really quick
08:35 - so first of all just to see this if I
08:37 - pull up the Python 2 location here then
08:40 - we can see that we have a scripts
08:41 - directory and if I open that then you
08:43 - can see that our pip executable is
08:45 - inside of that folder and if I open up
08:49 - our PI
08:50 - on three directory then we have a
08:51 - scripts directory and here as well so if
08:54 - I open that then we can see that we have
08:55 - pip inside that scripts directory as
08:58 - well so now let me go back here and
09:01 - let's add that to our path so I am going
09:05 - to open up that scripts directory and
09:07 - copy that and go back to our system
09:11 - settings advanced system settings
09:12 - environment variables click on our path
09:15 - and edit and now we want to go to new
09:18 - and paste that scripts directory in and
09:21 - then I'm going to move that up
09:23 - underneath our Python 3 directory and
09:27 - I'm going to do the same thing for this
09:29 - Python 2 directory as well so I'll click
09:31 - on new and paste that in and I'll just
09:34 - manually type this in so that is scripts
09:37 - inside that Python 2 7 directory and I'm
09:40 - going to move that up underneath the
09:42 - Python 2 7 directory and like I said
09:44 - doing that is going to allow you to use
09:46 - the pip command with those Python at
09:49 - versions so just to show this I haven't
09:51 - saved that yet so if I go back here to
09:53 - the command line and exit that and run
09:55 - pip then we can see that it says pip is
09:58 - not a recognized command just like it
10:00 - did with Python and before but now we
10:03 - can close down our command line and we
10:06 - can just click OK to save these
10:08 - environment variables so I will save all
10:10 - of those reopen our command line again
10:14 - and now if we type pip then we can see
10:17 - that that works but it's looking for a
10:19 - pip command so I'm just going to go
10:21 - ahead and clear the screen there and
10:23 - again like I said before if you told
10:25 - python to add everything to your path
10:26 - when you first installed it then that
10:29 - should have already been taken care of
10:30 - in terms of adding the scripts directory
10:32 - and your python directory to your path
10:35 - environment variable but it's still good
10:36 - to know how to add it if you need to ok
10:39 - so now let's look at a couple more tips
10:41 - so let's say that your python command is
10:43 - working but you have no idea which
10:46 - python executable you're using or where
10:48 - it's located
10:49 - now this can definitely happen if you're
10:51 - using virtual environments or have a lot
10:53 - of different versions of Python
10:54 - installed so let's say that you type in
10:57 - Python and it says that you're running
10:59 - Python 3 7 but that doesn't really do
11:03 - you much good
11:04 - if you have ten different virtual
11:05 - environments that are all using Python
11:07 - three seven so how can we actually see
11:10 - exactly which Python we're running so to
11:13 - find this out we can use the SIS model
11:15 - and this is a built-in module so within
11:19 - Python we can say import sis and like I
11:22 - said that's a built-in module so we
11:23 - don't need to install anything and now
11:26 - we can simply look at sis not executable
11:29 - to see what executable we're currently
11:31 - using so that is sis not executable and
11:35 - if I run that and we can see that we get
11:38 - this long path here to this Python
11:41 - executable and we can see that that long
11:42 - path is what we added to our path
11:44 - environment variable before that Python
11:46 - 3:7 directory so if that value is what
11:50 - you expect it to be then that's great
11:52 - but if it's not then using the value
11:55 - returned from sis not executable can
11:57 - help you debug what's going on if it's
12:00 - not the directory that you think it
12:01 - should be so if you think it should be
12:03 - something else then you'll have to check
12:05 - your path environment variable again and
12:07 - try to figure out why that executable is
12:09 - being seen before the executable that
12:12 - you think it should be so there might
12:14 - need to be some rearrangement like we
12:15 - saw a second ago so if you ever want to
12:18 - view your entire path from within the
12:20 - command line then let me exit out of
12:22 - Python here and let's echo our entire
12:26 - path to see what we should be getting so
12:30 - to do this on Windows it is echo and
12:32 - then parentheses or percent signs path
12:35 - percent signs so I will run that now
12:38 - there's going to be a lot more here than
12:39 - what we actually added in but our
12:41 - additions are going to be at here at the
12:43 - very end so if we look here then I can
12:46 - highlight this okay so our additions
12:48 - start right here and we can see that we
12:51 - have our Python three directory and then
12:53 - after that we have our Python three
12:55 - scripts directory and then after that we
12:57 - have our Python two seven directory and
12:59 - then our Python two seven scripts
13:02 - directory so if you ever run Python and
13:04 - you import sis and then run sis not
13:07 - executable and it gives you a location
13:10 - that you weren't expecting then you can
13:13 - echo out your path and do a little
13:15 - debugging there to see why it's
13:17 - that version of Python above another
13:20 - version that you may have expected and
13:22 - you might need to do some rearranging
13:23 - there in order to get it set up how
13:25 - you'd like so for example if I wanted
13:27 - Python at 2/7 to be the default Python
13:31 - then I could come in here to advanced
13:33 - system settings environment variables
13:35 - edit our path and then I could move
13:37 - Python to seven up to the top which
13:41 - would make that the default Python but
13:43 - I'm not going to do that now I'm just
13:44 - gonna leave that where it was and cancel
13:47 - out of those and go back here to my
13:49 - command line so now let me clear this
13:52 - out here okay so I also get a lot of
13:55 - questions from people who tell me that
13:57 - they've PIP installed a package but when
13:59 - they try to import it it doesn't work so
14:01 - this can also be a path issue so Python
14:05 - and pip are two separate commands and
14:07 - therefore could be located in two
14:09 - different places and we've already seen
14:11 - that because Python was in our Python
14:13 - directory and the PIP command was in
14:15 - that scripts directory so if your path
14:18 - is messed up then it's entirely possible
14:20 - that what you're installing with pip
14:23 - isn't installing that package for the
14:25 - version of Python that you think it's
14:27 - installing it for so for example let's
14:30 - say that I wanted to install Django so
14:33 - to do that I could just say pip install
14:35 - Django and if I run that then it says
14:38 - that the requirement is already
14:40 - satisfied so we already had that
14:41 - installed but it also gives us the
14:43 - location where it tried to install this
14:46 - install this and it tried to install
14:48 - this in that Python 3 7 directory in
14:51 - this Lib site packages directory now
14:54 - another way to get the location of a
14:56 - package is to use pip show so let me
14:58 - clear the screen here real quick and now
15:01 - let's use pip show so I'll say pip show
15:04 - Django and if I run that then it gives
15:07 - us a lot of information about the
15:09 - installed package but also one of those
15:11 - is a location variable down here and it
15:14 - says that the location is in this Lib
15:17 - site packages directory of that Python 3
15:20 - 7 folder that we saw before ok so that's
15:23 - important because if you're trying to
15:25 - import a package that you've installed
15:27 - and it says that it can't find the
15:29 - package then make sure that the location
15:31 - of that package is actually in the lib
15:34 - cite packages directory of the version
15:37 - of Python that you're using so again if
15:39 - I was to open Python here and import sis
15:43 - and then check check sis not executable
15:47 - then the location that it shows us here
15:50 - needs to be the same as the location
15:53 - where it's telling us that that package
15:55 - is installed now since those are the
15:57 - same right now then it means that I
15:59 - should be able to import django with no
16:02 - problems and if i import that then we
16:04 - can see that i don't get any problems
16:05 - but if that was telling me that it can't
16:07 - find a package called django or that
16:10 - there's no module named Jango then I
16:12 - might want to check those locations to
16:14 - see if those are off and if they are
16:16 - then that's your problem it means that
16:18 - your pip command is installing django
16:20 - for python in a different location than
16:24 - the python that you're actually using so
16:26 - if those locations didn't match then
16:28 - that would be your problem and you would
16:30 - need to fix your path in the ways that
16:32 - we talked about before by rearranging
16:34 - those ok so now let me exit out of here
16:37 - and clear my screen now I think that's
16:40 - everything that I wanted to cover in
16:41 - terms of figuring out how to set your
16:43 - Python path and see what's executable
16:46 - you're using but another thing I should
16:47 - mention is that we mainly covered the
16:50 - command line in this video but sometimes
16:52 - I get questions from people who are
16:54 - using an editor like sublime text or
16:56 - something similar and they tell me that
16:58 - their command line is using the correct
17:00 - version of Python but that their editor
17:03 - isn't so for example sometimes well
17:05 - people will tell me that you know f
17:07 - strings aren't working for them but they
17:10 - have Python 3 6 installed and it's
17:12 - working on their command line well in
17:14 - that case you know most likely that
17:16 - means that your editor just isn't using
17:18 - Python 3 6 even though you've installed
17:21 - it and a good way to determine that
17:23 - would be to compare that sis not
17:25 - executable value that we saw before
17:27 - so some editors might have a different
17:29 - way of determining which version of
17:32 - Python they're using instead of just
17:33 - looking at the path so in sublime text
17:36 - they use something called build systems
17:38 - and I have a completely separate video
17:40 - on how to set up sublime text build
17:42 - systems but understanding what we
17:44 - covered in this video
17:45 - here should help you better figure out
17:47 - which directories you know you'll need
17:49 - to add to those build systems in order
17:51 - to get those set up properly and you may
17:54 - need to do something similar with other
17:55 - editors and IDs as well depending on
17:58 - what you're using but really quick let
18:00 - me show you a fast sublime text example
18:03 - just to show you what this looks like
18:05 - now I'm not gonna go into too much
18:06 - detail here since this isn't exactly a
18:09 - sublime text tutorial but I'll just show
18:11 - you how I've set this up for me so that
18:13 - I can switch between Python 2 and Python
18:16 - 3 so I have a demo file here where I'm
18:19 - just printing out the sis not version
18:21 - and sis not executable so if I run this
18:25 - right now then we can see that this is
18:27 - running Python 3 7 and the executable is
18:31 - what we saw before it is in that long
18:33 - directory and that Python 3 7 directory
18:36 - ok so that might be what you want but
18:38 - what if you wanted to use a different
18:40 - version of Python or what if you wanted
18:42 - to use the environment from a virtual
18:44 - environment so to do that we would have
18:47 - to create a new build system so if you
18:50 - come up here to tools and then go to
18:52 - build system then at the bottom you have
18:55 - the option to create a new build system
18:57 - now if you were to create a new build
18:59 - system then it would basically give you
19:01 - an empty JSON file and you would have to
19:03 - fill in certain values so let me show
19:06 - you what this looks like so we can see
19:08 - here I've created a build system called
19:10 - Python 2 7 now let me show you what mine
19:13 - looks like so I've got that pulled up
19:15 - here I'm going to close down that output
19:18 - for now so this is what I've filled in
19:20 - for my Python 2 7 build system now again
19:23 - I'm not going to go into this fully
19:24 - since I have a completely different
19:26 - video on this but you can see here that
19:28 - I'm passing in the full path to my
19:31 - Python 2:7 directory that we saw before
19:34 - and also the Python executable there and
19:37 - also on Windows you can see that we need
19:39 - to escape our back slashes here within
19:42 - the string but you can kind of see the
19:44 - concept now if this was a Python 3 build
19:48 - system then I would have the path to the
19:50 - Python 3 executable there if this was a
19:53 - virtual environment then I would have
19:55 - the executable for the virtual
19:57 - environment here so whatever
19:59 - the path to that - whichever executable
20:01 - you on use goes here okay so that's the
20:03 - Python to seven build system so let me
20:06 - open up my sample file here again and I
20:09 - will go to tools build system and I'll
20:12 - actually select that Python to seven
20:14 - build system so if I select that and
20:16 - rerun this then we can see that now when
20:19 - we print out that system and sis not
20:21 - executable now it's printing out Python
20:24 - to seven and the executable is that
20:27 - Python to seven directory that we've
20:29 - seen throughout the video now
20:31 - technically since we're using Python 2
20:33 - we should probably change these print
20:35 - statements so that they the syntax
20:36 - matches Python 2 syntax but that's ok as
20:40 - is for now it's just a demo ok and
20:43 - lastly I also briefly mentioned virtual
20:45 - environments now if you've never used a
20:47 - virtual environment it's basically a way
20:49 - to have a separate Python environment
20:52 - per project and that also includes
20:55 - separate Python executables and packages
20:57 - now you might be wondering if you'd have
20:59 - to go through that whole process every
21:02 - time you activate and deactivate a
21:04 - virtual environment but in the
21:06 - command-line you won't have to do that
21:07 - so when you activate and deactivate a
21:10 - virtual environment there is code
21:11 - included that automatically adds and
21:13 - removes those directories to the
21:15 - beginning of your path for you so you
21:18 - shouldn't have to worry about that but
21:20 - when you're using an editor like sublime
21:21 - text or anything else then you'll just
21:24 - have to do an online search to see
21:26 - exactly how to use that environment
21:28 - within that editor so in sublime text
21:30 - it's the build systems that we saw here
21:32 - in this video but I'm sure it's
21:34 - different in other editors and in the
21:36 - next couple of weeks I'm going to be
21:38 - doing a video on the newest official way
21:40 - to handle virtual environments using pip
21:42 - env
21:43 - so if you're interested in learning more
21:44 - about virtual environments then be on
21:46 - the lookout for that video ok so in this
21:48 - video we went over one of the most
21:50 - common questions that I get among people
21:52 - who are just getting started out with
21:53 - Python so it's common when people are
21:56 - first getting started out to
21:57 - occasionally get stuck in the same
21:59 - places now when it comes to getting
22:01 - started out in computer science in
22:03 - general that same concept applies now
22:05 - the most common questions that I see
22:07 - there have to do with the fundamentals
22:09 - you know such as data structures or
22:11 - algorithms now
22:12 - great resource for learning and
22:14 - practicing those common fundamentals
22:15 - would be our sponsor for this video
22:18 - brilliant org brilliant is a
22:20 - problem-solving website that helps you
22:22 - understand underlying concepts by
22:24 - actively working through guided lessons
22:25 - they have computer science courses
22:27 - ranging from algorithms and data
22:28 - structures to machine learning and
22:30 - neural networks they even have a coding
22:32 - environment built into their website so
22:34 - that you can run code directly in the
22:36 - browser and that's a great way to
22:37 - compliment watching my tutorials because
22:39 - you can apply what you've learned in
22:40 - their active problem-solving environment
22:42 - and that helps to solidify that
22:43 - knowledge they're guided lessons will
22:45 - challenge you but you also have the
22:47 - ability to get hints or even solutions
22:48 - if you need them it's really tailored
22:50 - towards understanding that material so
22:52 - they're computer science material is
22:54 - fantastic and I really like what they're
22:55 - doing they also have plenty of courses
22:57 - depending on what you're most interested
22:59 - in so they have courses in different
23:01 - fields of mathematics or astronomy solar
23:04 - energy computational biology and all
23:06 - kinds of other great content so to
23:08 - support my channel and learn more about
23:10 - brilliant you can go to brilliant org
23:12 - ford slash CMS to sign up for free and
23:16 - also the first 200 people that go to
23:17 - that link will get 20% off the annual
23:20 - premium subscription and you can find
23:22 - that link in the description section
23:23 - below and again that's brilliant dot org
23:26 - /c m/s okay so I think that is going to
23:30 - do it for this video hopefully now you
23:32 - have a good idea for how you can
23:33 - manually set the Python path if you need
23:36 - to and also how you can switch between
23:38 - different executables but if you do have
23:40 - any questions about what we covered in
23:41 - this video then feel free to ask in the
23:43 - comment section below and I'll do my
23:45 - best to answer those and if you enjoy
23:46 - these tutorials and would like to
23:48 - support them then there are several ways
23:49 - you can do that the easiest ways to
23:51 - simply like the video and give it a
23:52 - thumbs up and also it's a huge help to
23:54 - share these videos with anyone who you
23:55 - think would find them useful and if you
23:57 - have the means you can contribute
23:58 - through patreon and there's a link to
23:59 - that page in its description section
24:01 - below be sure to subscribe for future
24:02 - videos and thank you all for watching
24:06 - you
24:15 - you