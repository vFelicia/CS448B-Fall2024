00:00 - hey there how's it going everybody in
00:01 - this video we're going to be doing
00:02 - something a little different from my
00:04 - normal tutorials we're going to be
00:05 - seeing a real world example of a problem
00:07 - that I solved using a python script that
00:09 - saves me a bit of time and hassle now I
00:11 - like showing these real world examples
00:13 - because it takes a lot of the topics
00:14 - that I've done separate videos on and
00:16 - combines them all into a single script
00:18 - to accomplish something uh for me that's
00:20 - useful so in this script you'll see me
00:23 - using uh an automated web browser dot
00:26 - files for secret credentials logging uh
00:28 - sending email and text notifications and
00:31 - a few other things that we've learned
00:32 - separately in other videos now unlike my
00:35 - other tutorials I'm not going to go
00:36 - super in-depth on every single step uh
00:39 - that's what those individual videos on
00:41 - each of those topics is for instead this
00:43 - is more about showing how to take a
00:45 - variety of different skills to
00:47 - accomplish a single goal also this
00:49 - script is going to contain private
00:51 - information that's specific to myself uh
00:53 - so you're not really going to be able to
00:55 - follow along by writing the code
00:56 - yourself since I'm going to hide a lot
00:58 - of my private credentials uh it's more
01:00 - meant to just show you how it's done
01:03 - rather than following along step by step
01:05 - uh in the code yourself so with that
01:07 - said let's discuss the problem that I'm
01:09 - trying to solve and see the solution
01:11 - that I came up with so I'm the type of
01:13 - person that hates manually paying bills
01:15 - uh I have just about every single Bill
01:17 - set up to use autopay and most companies
01:20 - these days offer that capability but one
01:22 - of my local utilities doesn't have an
01:24 - autopay solution so I have to remember
01:26 - to manually go in to this site each
01:28 - month just to pay a single Le bill so
01:31 - instead of doing this manually each
01:32 - month I'm going to write a script that
01:34 - does this for me automatically so it's
01:36 - going to go out to the local utilities
01:38 - website that I have pulled up here it's
01:39 - going to fill in my account information
01:42 - uh my last name navigate through a few
01:44 - different pages and finally submit the
01:46 - payment information now I'm going to be
01:48 - keeping logs of the activities and send
01:51 - an email and a text message to myself
01:53 - each time that this script is run so
01:55 - that I know when the bill was paid and
01:57 - how much it was so with that said let's
01:58 - go ahead and get started so first things
02:01 - first we need to navigate a web browser
02:03 - using python so to do this I'm going to
02:06 - be using selenium now selenium allows us
02:08 - to navigate different browsers using
02:11 - Python and also has a headless mode that
02:13 - allows our script to navigate websites
02:16 - without actually opening a browser
02:17 - window for us visually and since
02:19 - headless mode allows us to work within
02:21 - browsers without an actual window being
02:23 - open uh that allows us to run this in
02:25 - the background or even where a guey
02:27 - might not be available like on a server
02:30 - uh so while I'm writing the script I'm
02:32 - going to have selenium actually opening
02:34 - my browser so that we can see what's
02:36 - going on and debug any problems uh but
02:38 - once we're finished I'm going to set
02:40 - this to headless mode so that it can do
02:42 - all of this in the background without
02:44 - opening any windows so the first thing
02:46 - that we're going to need to do is
02:47 - install selenium and we can just do that
02:50 - with Pip so that's pip install and this
02:53 - is s e l e n i u m and now that we have
02:59 - have selenium installed and needs to
03:01 - know how to work with our browser so
03:03 - each browser is different and also each
03:05 - browser has different versions that can
03:07 - change how selenium needs to interact
03:09 - with it so to do this we're going to be
03:11 - installing a driver uh for the browser
03:14 - inversion that I plan to use so this
03:17 - will act as a bridge between selenium
03:19 - and our web browser so I'm going to be
03:21 - using Chrome on a Mac operating system
03:24 - so I'm going to download the driver that
03:26 - works with my version of Chrome and my
03:28 - operating system but if you're using a
03:30 - different browser or operating system
03:33 - then you're going to need to do a web
03:34 - search to find the browser that or the
03:36 - driver that is compatible with your
03:38 - setup so for Chrome we can grab the
03:41 - drivers at this website and I already
03:43 - have it pulled up here and like I said
03:45 - I'll have links to all of these in the
03:47 - description section below now on this
03:49 - page right here at the top it says if
03:51 - you're using Chrome version 115 or newer
03:54 - uh then to go to this dashboard here I'm
03:56 - using version 125 currently and uh so
04:00 - I'm going to go ahead and click on this
04:02 - and we can see here that at the top it
04:04 - says that the latest stable version is
04:07 - 1250 uh 6
04:09 - 42278 I just updated my Chrome so that
04:11 - should be what mine is so I'm going to
04:14 - click here that I want the latest stable
04:16 - one and now we have the drivers here now
04:20 - these are uh Chrome here this is
04:23 - actually a browser to test with uh we're
04:25 - going to want the Chrome drivers now
04:27 - like I said I am on a Mac and I have the
04:30 - app Apple silicon chips so I'm going to
04:32 - use the Mac arm 64 here um but if you
04:36 - have an Intel processor you'll use x
04:40 - x64 uh and things like that so just be
04:42 - sure to get the uh browser and the
04:44 - operating system that you're using so
04:47 - I'm going to copy that URL and now I'm
04:49 - going to paste that in and it should go
04:52 - ahead and do my download for me we can
04:54 - see that that finished I'm going to open
04:57 - this up now I already have a uh project
05:01 - created here on my desktop so I'm just
05:05 - going to unzip this and then I will
05:08 - place this within my project directory
05:11 - and let me go ahead and clean this up a
05:15 - bit I'll go ahead and sort this by name
05:18 - uh now these drivers you can have
05:20 - located anywhere that you'd like but
05:22 - they're pretty lightweight so I usually
05:24 - just put them within my project
05:26 - directory anytime I need a new one so we
05:28 - can see here that it's in this chrome
05:30 - driver uh Mac
05:32 - arm64 folder so I'm going to open this
05:36 - and we can see the Chrome driver within
05:38 - here now on Mac sometimes you can't run
05:41 - applications that you've downloaded
05:42 - online unless you give it explicit
05:44 - permission now there are a couple ways
05:46 - to do this but uh one way is to just
05:49 - rightclick and go to open with terminal
05:51 - and usually this works for me when I do
05:53 - this it says are you sure that you want
05:55 - to open this if I say open then it will
05:58 - essentially give it the permissions that
05:59 - it needs now I have forgot to do that
06:01 - step before uh and like I said if you're
06:04 - on a Mac you'll likely run into
06:05 - permission issues whenever you go to uh
06:07 - execute your code so if you are having
06:09 - permission issues uh then that could be
06:12 - what it was so now I'm going to close
06:13 - that down okay and now I'm going to uh
06:17 - open up VSS code here and now we should
06:20 - have everything that we need in place in
06:22 - order to automate our browser
06:24 - interactions so let's test this by
06:26 - opening a website so first we need uh to
06:29 - import selenium and specifically we're
06:32 - going to want to import web driver so
06:35 - this is from selenium import web
06:39 - driver and now we're going to connect
06:41 - selenium to our driver so I have the
06:43 - driver located in my project directory
06:46 - here we can see on the far left what the
06:48 - directory structure looks like now I'm
06:50 - going to show you uh how to dynamically
06:53 - get this path location in order to tell
06:55 - selenium where to find this web driver
06:58 - so we're going to do this with the path
06:59 - path lib module so I will say from
07:02 - pathlib import path and sorry if you see
07:06 - these Imports jumping around sometimes
07:08 - here I have it uh set up to
07:10 - automatically sort these whenever I save
07:11 - it um and we're just getting some
07:13 - warnings here because I haven't used
07:15 - these Imports yet now I haven't done a
07:18 - tutorial on the path lib module yet uh
07:21 - but basically this is an object-oriented
07:23 - way of working with paths instead of
07:25 - using os. paath like we've seen in
07:28 - previous tutorials and I will have a
07:30 - video on path lib coming out in the near
07:32 - future uh so we can see how to work with
07:35 - this in more detail but to give you a
07:37 - quick example of what we can do we can
07:40 - uh get an absolute path to our project
07:43 - directory um right from our script so I
07:46 - will just call this script directory and
07:49 - this is going to be equal to path and we
07:53 - want the path of the current file and
07:56 - then if we do a DOT resolve then that
07:59 - will give us an absolute path to that
08:02 - file and now we want the project
08:04 - directory so now we have the absolute
08:07 - path of that file to get the directory I
08:09 - can just call its parent and that will
08:11 - give me the project directory and since
08:13 - we know that the driver is within that
08:15 - directory that we just saved a second
08:17 - ago uh we can get that by saying driver
08:21 - path is equal to now there are a couple
08:24 - ways we can do this uh with the pathlib
08:26 - module you can actually do uh this uh
08:29 - kind of syntax here where we do a forge
08:32 - slash so I could say script directory
08:34 - Forge slash Chrome driver Mac arm64 and
08:39 - that kind of makes it look like uh how
08:41 - you would see it in you know a file
08:44 - system or something like that I need to
08:46 - put this here within quotes and we
08:49 - called this uh Chrome driver so I can
08:53 - say Chrome driver so that's one way to
08:57 - do it uh now if you're just changing
08:59 - over to using pathlib uh then you can
09:01 - still you might be used to uh os. path.
09:05 - jooin um the pathlib module has
09:08 - something like that uh we could simply
09:11 - just say script directory and instead of
09:14 - join we can say join path and then pass
09:19 - in the
09:21 - directory and then pass in the file name
09:27 - and then I'll get rid of that on the end
09:29 - and here so whichever one you're most
09:32 - familiar with I'll just go ahead and
09:33 - keep that as join path and let me expand
09:36 - this out here a little bit to make sure
09:37 - that I got this right actually I missed
09:39 - a Ford slash here or just a regular
09:41 - slash sorry so I'll add that in and now
09:46 - let's test and make sure uh that we have
09:48 - all of our correct path locations here
09:51 - so now to use this driver we need to
09:53 - import this service object from selenium
09:57 - so to do this I will come up here and
09:59 - say from
10:02 - selenium web
10:04 - driver.
10:06 - chrome. service import service and now
10:12 - down here we can simply say service is
10:15 - equal to use that service object and
10:18 - then pass in our driver path and now to
10:21 - tie all this together uh let's go ahead
10:24 - and create a driver that will navigate
10:27 - our browser so I can say driver is equal
10:31 - to web
10:32 - driver. Chrome and this is going to be
10:35 - service is equal to that service object
10:38 - that we just created and now we have our
10:41 - web driver here so let's navigate to a
10:44 - URL so for now let's just do something
10:47 - like Google so I'll say
10:50 - https
10:52 - uhfor
10:54 - www.google.com and when we're done doing
10:57 - everything that we want to do with our
10:59 - driver uh it's a good practice to always
11:01 - close this connection so to do this we
11:04 - can just say
11:05 - driver. quit and save that so now to
11:09 - make sure that we have all of this uh
11:11 - correct so far let's go ahead and run
11:13 - this and see if it navigates to
11:15 - google.com so I'll go ahead and run this
11:18 - okay it looks like we have an error here
11:21 - um if I scroll up okay so it looks like
11:23 - I made a typo typo here uh this is
11:26 - Chrome driver so let me save that and
11:29 - rerun it and now we can see there that
11:33 - it opened up our web browser very
11:35 - quickly and then closed it back down and
11:38 - that's just because it didn't have
11:39 - anything to do it opened up the website
11:42 - and then closed it immediately now for
11:44 - debugging purposes I'm going to want to
11:46 - keep the browser open so I can see
11:48 - what's going on and inspect some
11:50 - elements so to do this I'm going to add
11:52 - some Chrome options that will keep the
11:54 - browser open and also set a debug
11:56 - variable that we can change from True to
11:58 - false in order to uh switch back and
12:00 - forth between that debug mode so let's
12:03 - clean up the code here a little bit and
12:06 - put all of this stuff together and now
12:10 - below our Imports here I'll just say
12:12 - debugging is equal to true for now and
12:16 - now I'm going to want to import those
12:17 - Chrome options so to do this I can say
12:20 - from uh selenium and I'm actually just
12:23 - going to copy and paste this here so
12:25 - from selenium web driver. chrome. op
12:29 - options import options so now before we
12:34 - create our driver here this is where I'm
12:36 - going to create some options so I'll
12:39 - just say Chrome options is equal
12:44 - to options and we won't add anything
12:47 - there just yet uh because I'm going to
12:49 - want to test if I am debugging so I'll
12:52 - say if debugging then I want to say
12:57 - Chrome options.
12:59 - addore experimental underscore option
13:04 - and then we're going to pass in detach
13:08 - set this equal to True uh now I know
13:12 - this might look a little bit weird here
13:14 - uh but this is one way to keep your
13:16 - browser open if you're using Chrome and
13:18 - I'm going to be using this because this
13:20 - is kind of the official way that I saw
13:21 - to do it online but if you're using
13:24 - another browser and don't have that
13:26 - available or you just want to keep it
13:28 - simple then one one thing that I've seen
13:29 - people use is simple input statements so
13:32 - we could just say input and then say you
13:35 - know press enter and what that'll do is
13:38 - it'll just pause your script in a
13:40 - certain spot after your uh driver opens
13:43 - up a website and um then it'll keep your
13:47 - uh browser open for you okay so if we
13:49 - are debugging then this is what will
13:51 - keep our browser open uh if we are not
13:54 - debugging then I'm going to add some
13:58 - more option here I'll say Chrome
14:01 - options.
14:02 - addore argument and we're going to add
14:05 - this argument
14:07 - of-- headless and let me spell that
14:11 - correctly and that will basically tell
14:13 - Chrome that we want to run this in
14:14 - headless mode like I was talking about
14:16 - before uh where it doesn't open up a
14:18 - window at all and now we need to
14:20 - actually pass in these options whenever
14:22 - we create our driver and we can do that
14:26 - just by passing this in as an argument
14:29 - when we create that object so I'll say
14:31 - options is equal to Chrome options that
14:35 - we created there and also let's go ahead
14:38 - and check uh if we are debugging or not
14:41 - to determine whether we want the driver
14:42 - to quit at the end of our script so I'm
14:45 - going to say if not debugging then
14:49 - driver. quit uh but if we are debugging
14:52 - um then it will not hit that statement
14:55 - so now if I run this then we can see
14:58 - that now it opens up up our browser and
15:00 - it stays open for us so now we can see
15:03 - that it navigated to google.com so
15:05 - keeping the browser open uh allows us to
15:08 - investigate the pages and find the
15:09 - elements that we need to find um so now
15:12 - let's La navigate to the login of the
15:14 - utility page um where I pay my bills so
15:18 - that I can show you how we can
15:19 - automatically fill out those forms and
15:21 - submit the payment now since this is a
15:24 - real world example of a script that I
15:26 - actually use I'm going to uh use the
15:29 - real local utility website and my actual
15:31 - credentials but for obvious reasons I'm
15:34 - going to uh hide a lot of this
15:36 - information so that people don't have my
15:38 - login and payment information now I've
15:40 - done videos in the past on keeping
15:42 - sensitive information within environment
15:44 - variables and how that's useful in this
15:46 - video I'm going to be using uh the
15:49 - python. package to help with this and
15:52 - it'll make it super simple for hiding
15:54 - sensitive information and loading it
15:56 - into your scripts and I actually just
15:58 - released a video on this recently um so
16:01 - let's see how this works so first we
16:03 - need to install the package so I'm going
16:05 - to close my browser here for now uh open
16:08 - back my terminal and this is PIP
16:12 - install and this is python
16:16 - d.v let's install that and like I said I
16:19 - just released a video on this and I'll
16:21 - be sure to leave a link to that video in
16:23 - the description section below so now
16:25 - that we have that installed uh we want
16:27 - to create a DOT file Within our project
16:30 - that will hold our sensitive information
16:33 - and this file will be called EnV now
16:36 - I've actually already created this file
16:38 - for myself and it's just an empty file
16:40 - here and within this file we can put the
16:42 - information that we don't want to be
16:43 - visible from within our script so let me
16:46 - write in a couple of values here so that
16:48 - we can see how this looks uh so for
16:50 - example I know the form will ask me for
16:52 - an account number and my last name so if
16:54 - I were to add those to this EnV file it
16:57 - might look something like um account
17:00 - number and I meant to make this
17:03 - uppercase and for now let's just say
17:05 - this is equal to one 12 3 4 5 6 um and
17:09 - then I can say last name is equal to
17:13 - Schaffer so you can see that there's no
17:15 - spaces and also no quotes around the
17:17 - numbers and strings or anything like
17:19 - that um so now I'm going to fill in uh
17:23 - all of the information that I know that
17:24 - I'm going to need for this script and
17:26 - then we'll see how to load it into uh
17:29 - our script using the EnV module so I'm
17:32 - going to fast forward this a bit just as
17:34 - I insert my login and payment
17:37 - information and keep those private but
17:39 - I'll pick right back up after I get all
17:41 - of those values typed in okay so I added
17:44 - all of those credentials to the EnV file
17:46 - that I'm going to need for this script
17:48 - and now let's see how we can use the EnV
17:51 - module to load those in so first to
17:54 - import uh what we need here uh we need
17:57 - to import load CV from the EnV module so
18:03 - I'll say from Dov import
18:08 - load. EnV and now all we need to do is
18:11 - run this uh method at the top of our
18:15 - script so here underneath the bugging
18:17 - I'll just go ahead and run that load.
18:21 - EnV function and what that's going to do
18:23 - is it's going to take everything that's
18:24 - in ourv file and turn it into an
18:27 - environment variable that we can access
18:29 - now to access an environment variable
18:31 - let's use the OS module so here at the
18:34 - top I just import OS so for example if I
18:39 - wanted to grab my account number then
18:44 - what I could do is say account number is
18:46 - equal to os.
18:49 - GV and then whatever we called this in
18:52 - thatv file and I called this uh the same
18:56 - thing here I just called it account
18:57 - number and that's how we're going to be
18:59 - able to fetch all of that private
19:01 - information um let me close down thatv
19:04 - file so I don't accidentally open it up
19:06 - now I have a bunch of these that I'm
19:07 - going to need for this script uh so
19:10 - instead of having you watch me type all
19:11 - these in manually let me just skip ahead
19:13 - a bit after I grab all of these okay so
19:16 - I've got all of the information that I
19:18 - added to myv file uh we can see here
19:21 - that I have the login page uh the
19:23 - account number the last name then I have
19:26 - my card information here uh my phone
19:28 - number and then an app password now the
19:30 - app password is something that I'm going
19:32 - to use uh to send an email later now one
19:34 - thing that I want to point out is that
19:36 - I'm actually currently using an
19:38 - incorrect credit card number and I'm
19:40 - doing that on purpose because I'd rather
19:43 - the payment fail on purpose while I'm
19:45 - testing and debug and debugging instead
19:48 - of accidentally submitting a payment uh
19:50 - that could be incorrect so once I feel
19:53 - comfortable with the script and I think
19:55 - that it everything should run smoothly
19:57 - then I will change this to my actual
19:59 - credit card number okay so you can see
20:00 - that one of the things that I listed in
20:02 - my credentials here uh is the URL for
20:05 - the login page to the utility website
20:07 - and again since I'm using a real world
20:09 - example uh I'm going to keep the URL to
20:12 - this website hidden because a lot of
20:14 - small local utility websites like this
20:16 - are a bit outdated and aren't set up to
20:18 - handle a lot of traffic uh if anyone
20:21 - wanted to look up this site then I'm
20:23 - sure that plenty of you could easily
20:24 - find it uh but I'm just going to leave
20:26 - it out of the code so that they don't
20:27 - get hammered too hard with a bunch of
20:29 - Python scripts from this tutorial um but
20:32 - with that said let's replace google.com
20:35 - down here uh with my login to my uh
20:39 - local utility and see the information
20:42 - that I need to provide in order to
20:44 - automate this process so I'm going to uh
20:48 - copy this login page here and we will
20:51 - open that um instead of Google now I'll
20:55 - save that and run it and it opens up the
20:58 - website here and I'm just going to
21:01 - scroll in a bit okay and here we can see
21:05 - the web page and the information that I
21:06 - need to fill in in order to find my
21:08 - account and how much I owe now this will
21:11 - be different for every website and form
21:13 - that you fill in uh but you'll need to
21:15 - find a way that we can find and select
21:17 - certain elements within a web page so
21:20 - that we can fill them out automatically
21:22 - so to do this we can inspect the
21:24 - elements within the browser and find if
21:26 - they have any identifying attributes
21:29 - uh the best case scenario is if the
21:30 - element that we want to find has an ID
21:32 - since those are supposed to be unique on
21:34 - a web page uh so let's go ahead and do
21:38 - this for the account number and the last
21:40 - name and we'll see if these have IDs so
21:43 - I'm going to go to inspect to where we
21:46 - can look at the HTML for this now I know
21:49 - that this is a little bit small here let
21:51 - me see if I can make this larger I
21:55 - can and now scroll down and here is that
22:00 - account information and we can see that
22:02 - that does have an ID of account uh and
22:05 - down here is the name and we can see
22:07 - that that has an ID of name so that's
22:10 - good those web elements having those IDs
22:13 - makes it a lot easier for us uh to find
22:15 - and select those within our script so
22:18 - now let's close this down and go back to
22:20 - our script and now let's uh see how we
22:23 - can use selenium to fill out the form
22:26 - values with these IDs so first let's see
22:29 - how we can get selenium to actually find
22:31 - these elements so to do this we can use
22:33 - the driver's find element method so
22:36 - above where we are uh testing if we
22:39 - debugging for the quit there I'm just
22:41 - going to say account input is equal to
22:45 - driver.
22:47 - findor element and there are different
22:51 - ways that we can use this find element
22:53 - method to find elements on the page
22:56 - first we're going to need to tell it
22:57 - what we're looking for in this case
22:59 - we're looking for an ID so to do this we
23:02 - are going to need to import the buy
23:05 - object from selenium so towards the top
23:08 - I'll import this so we can say from
23:13 - selenium do web
23:15 - driver.
23:17 - common. by
23:20 - import by by and now down here at the
23:23 - bottom within this find element method
23:26 - here we can say driver. find element and
23:31 - use that bu object that we imported do
23:36 - ID and now pass in the ID of what we
23:39 - want to find and that was account so
23:42 - again just a quick look at this this is
23:44 - saying account input is equal to driver.
23:48 - findelement by ID account ID now if I
23:52 - were to run this now then we wouldn't
23:54 - really notice anything because right now
23:56 - it's only finding that element to to
23:58 - test if it's found it let's put in a
24:00 - conditional and then add some text to
24:02 - that field so I can say if account input
24:08 - and that will tell us whether or not it
24:10 - found it then we can now send some keys
24:14 - to that text field so I can say sendor
24:18 - keys and for now let's just say 1 2 3 4
24:21 - 5 so now let me run this code and if I
24:25 - run this we can see that it opens up our
24:27 - website here and within the account
24:30 - number it automatically put 1 2 3 4 5
24:33 - there for us so now we actually have
24:36 - this doing some useful Automation in our
24:38 - web browser so now if I simply plug in
24:41 - my actual account number into the code
24:43 - instead of this sample account number
24:46 - then it should fill that in correctly
24:48 - but we can also see that this
24:50 - information isn't blurred out within the
24:51 - browser uh now bear with me here I'm
24:54 - writing a bit um of additional code that
24:57 - I wouldn't be writing if I wasn't
24:59 - sharing this tutorial online for
25:01 - everybody to see uh but some of these
25:03 - videos or some of these fields I mean I
25:05 - don't want to be visible when shown in
25:07 - the browser and I could just blur these
25:09 - out uh later on while editing the video
25:12 - but just in case I miss anything uh I'm
25:14 - going to go ahead and write a function
25:16 - here that blurs out uh the information
25:19 - here within this field so what I'm going
25:21 - to do is set this to a password type and
25:24 - whenever you set this to a password type
25:26 - instead of being able to see the
25:28 - information that I've typed in here uh 1
25:30 - 2 3 4 5 it'll just be a bunch of dots um
25:34 - now this might actually be useful for
25:37 - some of you if some of you uh need to be
25:39 - able to run some JavaScript while
25:41 - automating web browsing or something
25:43 - like that so that's another reason that
25:45 - I wanted to add this in is because
25:47 - changing the attributes of some elements
25:50 - with selenium uh might be something that
25:52 - a lot of us find useful so to do this
25:55 - what I'm going to do is I'm going to
25:56 - write a function that EX some JavaScript
25:59 - code that gives uh these fields a
26:02 - password type and that password uh will
26:04 - black out the text like I said now I'm
26:07 - going to be using JavaScript because
26:09 - selenium itself is designed more for
26:12 - interacting with web elements based on
26:14 - their existing state uh rather than
26:16 - altering the HTML directly but I can
26:19 - have it execute some JavaScript for me
26:21 - that will do this so let's create this
26:24 - function and we'll see how this is done
26:26 - so I'm going to close this down
26:28 - and now underneath uh debugging here at
26:32 - the top let's create a function actually
26:35 - let me put this below uh our constants
26:38 - here so I'm going to create a new
26:40 - function here and let's call this um set
26:43 - field
26:45 - to password and the arguments that this
26:48 - function is going to take is going to be
26:49 - driver and then the element ID uh that
26:54 - we want to change so now within here all
26:57 - we have have to do to execute this dver
27:00 - uh JavaScript is to say
27:03 - driver. execute uncore script let me
27:07 - spell that right execute unor script and
27:11 - now the script that we want to execute
27:14 - so this is going to be some very short
27:16 - and sweet JavaScript here we're just
27:18 - going to say
27:19 - document. element by ID and then let's
27:23 - pass in um that element ID from our
27:29 - parameters there and now once it gets
27:32 - that then we can set the type of that
27:37 - equal to
27:39 - password whoops and this is an F string
27:41 - here I forgot to include this within
27:44 - braces so let me put that in and now
27:47 - we're not getting that warning anymore
27:49 - okay so again this is super simple we
27:51 - just have this python function here
27:53 - takes in our driver our element ID uh
27:55 - driver. execute script run some
27:57 - JavaScript here to grab uh that element
28:00 - with that ID and set the type equal to a
28:03 - password so now let's run this uh before
28:08 - uh we set that uh account or before we
28:11 - send those keys and see if this hides
28:14 - those keys and actually I'll do this
28:16 - here within uh the conditional so that
28:19 - we're sure that it finds that um so I'll
28:22 - say set field to password pass in our
28:25 - driver and the ID
28:28 - that we want is account so now if I save
28:32 - this and run it then we can see now um
28:35 - that it actually did set this to a
28:38 - password field so we can't actually see
28:41 - that 1 2 3 4 5 uh that's all just
28:43 - blurred out there so now that'll help me
28:46 - in um keeping my information uh private
28:50 - and also uh hopefully it helped you
28:53 - learn something more about selenium and
28:55 - how we can uh change around some of
28:57 - these fields or or run a script now
28:59 - normally I would uh clean this up a bit
29:02 - and do some error handling to make sure
29:04 - that there were no errors in the
29:05 - JavaScript code but I just decided to
29:08 - add this one last second in order to
29:09 - keep that information hidden so I'm just
29:11 - going to keep that nice and simple and
29:13 - keep it like it is um but we'll see what
29:16 - it looks like to catch some errors here
29:18 - in just a second okay so now that we are
29:21 - setting that to a password now let me
29:24 - put my real account number in there so
29:26 - I'm going to uh grab this from my
29:30 - constants up here and instead of sending
29:32 - in these dummy Keys we'll actually send
29:34 - in that account number and now if you
29:36 - remember uh all we need to do now is
29:39 - have selenium fill in my last name and
29:42 - then submit the form in order def find
29:44 - my account so for the last name this is
29:47 - going to be the same thing that we did
29:48 - for the account number uh except using
29:51 - the name ID so I'm just going to copy
29:54 - this line here and instead of count
29:57 - input this is is going to be name input
30:00 - and instead of account ID this is going
30:02 - to be Name ID and now since we're going
30:04 - to need both of those uh in order to
30:07 - submit the information I'll just add
30:08 - that to my conditional so I'm going to
30:10 - say if account input and name input
30:13 - because we're going to need both of
30:14 - those and now I'll go ahead and set both
30:18 - of those to password
30:21 - fields and we will send the keys to both
30:26 - of those as well and this is going to be
30:28 - name input. send keys and what we're
30:31 - going to want to send is my last name
30:34 - which isn't much of a secret I have it
30:37 - in mymv file anyway uh but everybody
30:40 - already knows that if you're watching
30:41 - this video okay so now let's run that
30:44 - and make sure that everything is still
30:45 - looking good okay so we can see that it
30:48 - has the account number filled in our
30:50 - last name filled in here and now in
30:53 - order to submit this form all we would
30:55 - need to do here is click this search
30:57 - button and what this search button does
30:59 - is it actually submits that form uh to
31:02 - find my account so we're going to want
31:05 - to be able to click on this but first
31:07 - we're going to want to see how a
31:09 - selenium can find this before it can
31:11 - click on it now in this case I want to
31:13 - show you how you can find something with
31:15 - selenium that doesn't have an ID like we
31:19 - saw before uh for example let's inspect
31:22 - that element with our HTML and we can
31:25 - see what this looks like so let me in
31:27 - insect this and let me make this larger
31:31 - so everyone can hopefully see I'll make
31:36 - the entire thing larger here and blow
31:39 - this up okay so we can see here that
31:43 - this is an input type uh equal to submit
31:47 - uh the name is equal to submit and the
31:49 - value is search but there is no ID here
31:52 - um this other one has an ID of reset but
31:55 - for some reason this one doesn't have an
31:56 - ID so we don't have an ID to go off of
31:59 - so if we want to do more advanced
32:02 - searches with selenium we can use
32:04 - something called X paath now I don't
32:06 - know XPath very well myself but it's a
32:10 - language used for navigating through XML
32:13 - which is also applicable to HTML so let
32:16 - me type in what I need to find uh the
32:19 - submit button here using XPath and then
32:22 - I'll explain step by step uh exactly
32:24 - what it's doing so I'm going to go back
32:26 - to my script here here and again first
32:29 - let me type this out and then I will
32:31 - explain what it's doing so I'm going to
32:34 - say submit button is equal to
32:37 - driver. findor element and now instead
32:41 - of buy ID it's going to be by X path and
32:46 - now for the X path here I will type this
32:51 - out and then um explain exactly what
32:54 - this is doing
32:58 - okay so let me explain what this x path
33:01 - code is doing here um so this Forge SL
33:03 - Forge slash here at the beginning uh
33:06 - tells it to look across the entire HTML
33:09 - document and input right here whoops I
33:12 - didn't mean to move that around input
33:15 - says that the element being searched for
33:17 - is an input element now this entire part
33:20 - here um at type equals submit is a
33:24 - condition that the input element must
33:27 - have an attrib type with the value of
33:29 - submit and this typically identifies a
33:32 - submit button in a form and then we have
33:34 - another conditional here um with uh a
33:38 - name equal to submit so now that should
33:40 - be all of the information that we are
33:43 - able to gather when we inspected that
33:45 - HTML so now it should be able to find
33:47 - that submit button now if it does then
33:50 - let's have selenium click on that button
33:53 - for us so to do this I can come down
33:56 - here and say if
33:58 - submit button then submit
34:02 - button doclick it should be as simple as
34:07 - that and by clicking on that button if
34:09 - we typed in the correct credentials then
34:11 - it should take us to the next page where
34:13 - we can enter our payment information so
34:16 - let's see if this works so far so I'm
34:18 - going to save that and run it we can see
34:21 - it feels in our information and then
34:23 - immediately submits that form and now we
34:26 - are here at the payment processing page
34:28 - so we can see that that worked we were
34:29 - taken to the next page with my account
34:31 - information and where I can submit a
34:33 - payment so now that we're navigating to
34:36 - a new page uh this actually brings up
34:38 - something that you might run into when
34:40 - using selenium and uh something that
34:42 - we're going to want to check for uh so
34:45 - when we go to new pages Pages take time
34:48 - to load and depending on how long they
34:50 - take to load the elements that we're
34:52 - trying to find might not be loaded by
34:55 - the time our script searches for those
34:57 - elements which could cause problems so
34:59 - instead let's refactor our code here a
35:01 - bit and add some selenium code that will
35:05 - wait for elements to load before we
35:07 - search for them so to do this I'm going
35:09 - to close down our browser here and go
35:12 - back to our script so to do this we're
35:14 - going to need to make a couple of
35:16 - imports so I'm going to come up here to
35:18 - the top and we are going to say uh from
35:22 - selenium do web
35:24 - driver. support import expected
35:28 - underscore conditions that's expected
35:32 - underscore uh conditions and we'll just
35:35 - import that as EC so that we don't have
35:37 - to type that in every time and now
35:41 - underneath here I'll say from selenium
35:44 - web driver. support. UI import web
35:50 - driver weight oops and we can see that
35:53 - we have an error here because I didn't
35:55 - spell conditions correctly let me
35:57 - correct that okay and lastly we're also
36:00 - going to uh import a something to check
36:05 - for a timeout eror here so I'll say from
36:07 - selenium do common.
36:12 - exceptions import and that's going to be
36:15 - timeout
36:17 - exception and again sorry that those
36:19 - jump around a bit whenever I save those
36:21 - uh it's just um sorting those Imports
36:23 - but we can see that we have the uh
36:25 - timeout exception imported uh right
36:28 - there so now I'm going to create a new
36:30 - function that will wait for an element
36:32 - to be present before we try to locate it
36:35 - and if it times out then that means that
36:37 - the element never loaded on the page so
36:40 - we'll call this function wait for
36:42 - element so I'm going to go down below
36:44 - our set field the password function that
36:46 - we created here and I will call this one
36:50 - uh
36:51 - wait4 element and we're going to want to
36:55 - pass in several different arguments here
36:57 - so we're going to want the driver and
36:59 - then we're going to want the uh buy
37:02 - conditional which is the um whether it's
37:04 - an ID or uh something like that then
37:08 - we're going to want an element
37:10 - identifier and what this will be will be
37:14 - the name or how we're going to identify
37:17 - uh what's out there so if it's by ID
37:20 - then this would be account or last name
37:23 - or something like that uh and now let's
37:25 - set a timeout equal to we'll just say
37:28 - five for now um now if all of this is a
37:32 - bit confusing right now uh just hold on
37:34 - and this will all make sense uh once we
37:37 - uh look through this so I'm going to put
37:39 - in a try accept block here and the
37:42 - accept is going to be that uh timeout
37:45 - exception and for now I'll just put in a
37:48 - uh simple print statement where we say
37:51 - uh make this an FST string timed out uh
37:54 - waiting for and then we will pass in
37:58 - that element identifier and just return
38:02 - none okay so now within our triblock
38:05 - here uh we're going to use those
38:07 - expected conditions that we imported
38:10 - from selenium to check for the presence
38:12 - of our element and we can do this by
38:15 - saying um I'll just call this element
38:18 - present is equal to and expected
38:22 - conditions which we imported as EC and
38:25 - the name of this method is presence of
38:30 - element and underscore located so
38:33 - presence of element located and all we
38:36 - need to pass in here is that bu and then
38:40 - our element identifier so that will
38:43 - check for the presence of an analment uh
38:46 - so now we just want our driver to wait
38:49 - until that presence is detected before
38:51 - we try to find it uh and do anything
38:54 - with it so to do this oops and real
38:57 - quick we can see that we're getting a an
38:59 - error here um let me scroll over this
39:01 - and see oh this is actually takes in a
39:04 - tupal um and not those as individual
39:08 - elements there okay so that's good okay
39:10 - so like I was saying uh now we just want
39:11 - to wait for our driver uh to wait until
39:14 - the presence is detected before we try
39:16 - to do anything with it so to do this I
39:19 - can simply just say uh web driver weight
39:23 - that we imported just a second ago pass
39:26 - in the driver and pass in the timeout
39:29 - dot
39:30 - until
39:33 - Elementor present and that is what we
39:36 - just created there so everything here
39:39 - within this Tri block will wait until
39:42 - the presence of an element is detected
39:44 - uh if it times out then it will throw a
39:47 - timeout exception and returns none um
39:50 - now if it doesn't throw an exception uh
39:53 - then I'm just going to return what we
39:55 - had before where we just grab that
39:58 - element using the find element method so
40:01 - down here under the tri accept block I'm
40:04 - just going to return and that was
40:07 - driver. uh find
40:10 - element and we'll do buy and then the
40:14 - element
40:15 - identifier which we've already done uh
40:19 - down here that's the same thing here by
40:21 - ID account um except here we are using
40:25 - our parameters of the function instead
40:28 - so now everywhere that we were simply
40:30 - just finding that element before I'm
40:33 - going to replace this uh with the weight
40:36 - for element function so let me come down
40:40 - here to where we were just finding these
40:42 - elements and this is going to be wait
40:45 - for element now we also passed in uh the
40:49 - driver here so let me add that and for
40:52 - name input we
40:55 - will do the same
40:57 - so we can see here it's waiting for
40:59 - element passing in the driver that buy
41:02 - conditional and then the element
41:04 - identifier and let's see what else do we
41:06 - have there nothing we just had a timeout
41:09 - that we can set but I'm just going to
41:10 - leave that at 5 oh and let's not forget
41:13 - our submit button down here so where we
41:15 - were finding that we can do the same
41:17 - thing we can wait for that submit button
41:20 - going to pass in the driver as well buy
41:22 - X path and then that X paath um text
41:26 - there and lastly since we're already
41:28 - refactoring our code a bit here let's
41:31 - also split what we currently have into
41:33 - functions where each page that we
41:35 - navigate is a different function uh that
41:38 - way if we decide to write unit test for
41:40 - this later then it will allow us to
41:42 - pinpoint exactly where problems are
41:44 - occurring um so right here where we are
41:49 - going to the login page I'm just going
41:51 - to put all of this within a function so
41:54 - I'll call this um login in to account
41:59 - and we will take in a driver as an
42:03 - argument and now all of this is going to
42:05 - remain the same but we're just going to
42:07 - indent this to where it is within that
42:11 - function and now let's create a main
42:13 - function that handles the overall flow
42:15 - of this script and we'll add some
42:17 - exception handling here as well um So
42:20 - within our main function so I'll just go
42:22 - down here and create a main function and
42:27 - within here this is where I will um add
42:30 - all of these things here starting from
42:32 - let's say the service so now within our
42:35 - main function here we'll say We'll
42:39 - create that service uh create our Chrome
42:41 - options create our driver uh we will put
42:44 - our uh debugging statement in here as
42:47 - well and actually I'm going to put these
42:49 - uh Chrome options uh up here towards the
42:51 - top with our um debugging here sorry
42:56 - just need to move a couple of things
42:58 - around we had one more thing here yep
43:01 - script directory and the driver path uh
43:04 - we'll put up here okay so just a little
43:08 - justification what I'm doing here and an
43:09 - explanation um uh this is kind of
43:12 - personal preference but I like to keep
43:13 - you know my debugging here and loading
43:16 - the environment variables and um the
43:18 - constants script directory things like
43:20 - that all the options uh outside and
43:22 - towards the top uh and then keep the
43:25 - main flow of the ACT application down
43:28 - here uh where we can have our functions
43:30 - and then our main function here so now
43:34 - let's add in uh just a little bit of
43:37 - exception handling and this is going to
43:38 - be pretty generic so all we're going to
43:40 - do here is we are going to uh try to use
43:44 - that um log account uh function here and
43:50 - we'll pass in that
43:52 - driver and then we'll have an exception
43:56 - and this accept is just going to be web
44:00 - driver exception as e and let me spell
44:04 - that
44:05 - correctly and now I'll just print out
44:08 - that this was a uh general error so make
44:11 - this an FC screen and say
44:14 - General web driver error and then we
44:19 - will uh just pass in that error there
44:22 - now we always want this to be checked so
44:24 - we will um put this in our finally block
44:28 - and we'll say
44:30 - finally if not debugging driver. quit
44:33 - and
44:34 - lastly let's
44:36 - do our if double uncore name is equal to
44:42 - double uncore
44:44 - main then we want to run that main
44:48 - function now we can see that this is
44:50 - getting underlined here and that is
44:52 - because we have not imported this journ
44:55 - web driver exception so I'll come up
44:57 - here to where we were uh importing these
45:00 - exceptions and instead of just timed out
45:02 - exceptions we also want that one as well
45:05 - uh so now we shouldn't have any errors
45:07 - in our script okay so I know that we
45:09 - just did a lot here um but like I said
45:12 - at the beginning of the video the
45:13 - concept of this video is basically
45:15 - showing how we can take a lot of topics
45:18 - that we've learned about in other videos
45:20 - and apply it to a real world situation
45:23 - and using a script that I actually use
45:25 - in my day-to-day life uh but what I will
45:27 - do is for anything that I have done a
45:30 - video on in the past I will leave a
45:32 - description to those videos in the
45:34 - description section below or I'm sorry a
45:36 - link to those videos in the description
45:38 - section below uh so that you can view
45:41 - those if you don't uh understand
45:43 - anything that we're doing here so for
45:45 - example I have a video on exception
45:47 - handling I have a video on if name
45:51 - equals Main and what that does uh so I'm
45:54 - just kind of combining all of this into
45:56 - one real World application here uh so
45:58 - that we can see how all this comes
46:00 - together okay so we made a lot of
46:02 - changes there just doing a little bit of
46:04 - refactoring so now let me save this and
46:07 - run it and make sure that we're still
46:09 - getting to that payment page and we are
46:12 - that all looks good so I'm going to
46:14 - close this down for now oh and actually
46:16 - let me go ahead and open that back up
46:18 - and I'll show what we have left to do so
46:22 - now that we're on this payment page
46:24 - we're just about finished up here so my
46:27 - utility company automatically puts the
46:29 - amount that I owe each month into uh
46:32 - this payment amount field here now all
46:35 - we have to do is do what we did before
46:38 - where we search the page source for the
46:40 - IDS on uh of the field elements that we
46:43 - want selenium to fill out for the credit
46:45 - card information and first since we're
46:48 - on a new page um I'll split this up into
46:52 - a new function called submit payment and
46:54 - we'll do all of that logic there so over
46:57 - here underneath login to account since
47:01 - we're on a new page here I'm going to
47:02 - make a new function called submit
47:06 - payment and let me go ahead and close
47:08 - down our Google Chrome here you can see
47:12 - that we actually have uh several of
47:15 - these so I'm going to close all these
47:16 - down I might fast forward the video just
47:18 - a second okay so now that we are on that
47:20 - new page all we need to do is submit my
47:23 - payment information uh now I'm going to
47:26 - go ahead and type uh everything out and
47:29 - just skip forward a little bit because
47:31 - this is not going to be anything new
47:33 - here I'll go ahead and uh type one out
47:36 - uh just so we can see it um but this is
47:39 - basically going to be the same things
47:40 - that we've seen before um so we're going
47:43 - to wait for an element pass in the
47:45 - driver and I've already written down
47:47 - these IDs uh from The Source uh just so
47:51 - that we can speed this up a bit so the
47:53 - ID for the card number field is Buy
47:57 - ID and this was going to
48:01 - be card number was the ID for that one
48:05 - and there's also an input field for um
48:09 - the card month the card year uh the CVV
48:13 - on the back the payment amount and
48:15 - things like that so really quick I'm
48:17 - going to go ahead and put in all this
48:18 - information I'm going to skip forward
48:20 - just a bit okay so I've fast fored here
48:23 - to where I've uh inserted all of this
48:25 - information uh this looks like a lot but
48:28 - it's nothing that we haven't seen before
48:30 - so all I'm doing here is I'm waiting for
48:33 - these elements to load on the new page
48:35 - uh we're waiting for the card number and
48:39 - then we're getting the month input the
48:40 - year input the CVV input the payment
48:43 - amount the confirm checkbox and the
48:45 - submit button we're getting all of those
48:47 - and then we're checking if all of those
48:50 - uh loaded and exist so numb input month
48:53 - year CVV confirm submit you can see that
48:56 - we left out the payment amount because
48:58 - that's for something else and if all
49:00 - those exist there then we want to send
49:02 - keys of the card number the card month
49:05 - the card year and the CVV so basically
49:09 - this is just a lot of code here to fill
49:11 - out uh to find the elements of that
49:14 - field for us and then to fill out that
49:15 - field for us now like I said you can
49:18 - also see that I uh grabbed the payment
49:20 - amount here now I want to check this
49:23 - amount to make sure that uh there's
49:25 - actually a payment due and I'll also add
49:28 - in a check to make sure that the payment
49:30 - isn't unusually high so I've had an
49:32 - issue uh with this utility before where
49:34 - I was charged for something that I
49:36 - wasn't supposed to be charged for and it
49:38 - was a very large amount uh so if the
49:39 - amount is over a certain threshold then
49:42 - I'll just have the script not submit the
49:43 - payment and send myself a message uh to
49:45 - check with them manually so to do this
49:49 - I'm just going to uh put in another
49:51 - conditional here and say uh if that
49:54 - payment amount exists then let let's try
49:57 - to uh get that as a string so I'll say
50:01 - uh payment amount string is equal to
50:05 - payment amount and we can use this get
50:08 - attribute method and the attribute that
50:11 - we want is the value of that field
50:13 - because it's already um already filled
50:16 - out with the amount that I owe so now
50:18 - I'm going to try to convert that to a
50:20 - float um and if it doesn't convert to a
50:22 - float then I'll have it uh HD an
50:24 - exception so I'll say try and we'll just
50:27 - create a new value here called payment
50:30 - amount is equal to and we're going to
50:33 - try to get a
50:36 - float of that payment amount string and
50:41 - now we'll also check here if this float
50:45 - if it is less than or equal to zero
50:50 - because if it's less than or equal to
50:52 - zero then there is no payment due so
50:55 - I'll just return false also I want to
50:57 - see if that amount due is excessively
50:59 - High um so I will also say let's see
51:04 - here L if payment amount is greater than
51:09 - let's say something like $300 um I could
51:12 - also do some analysis here to where I
51:14 - see if it's um above a certain standard
51:17 - deviation from the Rolling average or
51:19 - something like that I'm just going to
51:20 - keep it simple and say if it's over $300
51:24 - which I consider a large amount for this
51:26 - utility
51:27 - then I will also return false and now we
51:30 - will throw an exception here uh if it
51:34 - can't do any of this within here we'll
51:37 - throw a value error and we'll just
51:39 - return false there as well so all of
51:43 - this here will return false and break
51:45 - out of our function if anything seems
51:48 - off with the payment amount but if it
51:50 - makes it through that code and
51:51 - everything looks good then we can
51:54 - continue on with submitting our payment
51:57 - so now that we've filled in all of these
51:59 - forms here and sent in our keys for all
52:02 - the card numbers all that's left to do
52:05 - is to uh click this confirm check boox
52:09 - and uh click the submit button so we can
52:13 - come down here oh and I actually want to
52:16 - uh be inside of this conditional here uh
52:19 - where it check to make sure that those
52:22 - actually um exist and all I want to do
52:25 - here is is there's nothing fancy that we
52:28 - haven't seen here yet I just want to um
52:32 - run the click method on both the
52:36 - confirmed checkbox and the submit button
52:39 - and like we saw before when I looked up
52:41 - my account information clicking the
52:43 - submit button will take us to a new page
52:46 - and in this case it's either going to
52:48 - take us to a page that our payment was
52:50 - successful or that the payment failed
52:52 - now when you're writing scripts like
52:54 - this you're going to tailor this to your
52:56 - own needs um we don't always get a nice
52:59 - tidy way to know if something was a
53:02 - success or not um sometimes we might
53:04 - have to Simply check the page for a uh
53:07 - specific text to know whether our
53:09 - payment went through or not now that's
53:11 - what we're going to need to do in this
53:12 - situation so for example I know that
53:15 - when a payment is successful whenever I
53:17 - submit a payment to this website it
53:19 - sends me to a page where the text thank
53:21 - you for your payment is visible um if
53:24 - you do something like this then you'll
53:26 - need to either uh know what to look for
53:28 - to determine a success or determine
53:31 - whether something is a failure but like
53:33 - I said in this specific case I know that
53:36 - it takes me to a page where it just has
53:38 - the text thank you for your payment so
53:40 - what I'm going to do after submitting my
53:42 - payment is use that same web driver weit
53:47 - function that we saw before to just wait
53:49 - a few seconds to see if that thank you
53:52 - for your payment text appears on the
53:54 - next page so to do this we don't
53:57 - actually have to uh navigate to that
53:59 - page because it's going to do it on its
54:01 - own so I will just throw in a try here
54:06 - and we're going to use that uh web
54:09 - driver weight that we saw before and
54:13 - pass in that driver and pass in a
54:16 - Timeout and we're going to wait until
54:19 - and let me make this a couple of lines
54:21 - here so we'll use that expected
54:24 - condition again that we imported as EC
54:28 - and this has a method uh this expected
54:31 - condition of text to be present
54:37 - underscore in element it's a long one so
54:41 - that's text to be present in
54:43 - element and the text that we are going
54:46 - to be looking for here first we have to
54:49 - pass in a tuple to find the element that
54:51 - we are uh looking for um so we're going
54:55 - to have a by conditional and again I'm
54:57 - just going to use x path here and for
55:00 - this x path uh I'm just going to look
55:03 - inside the entire body of the
55:07 - HTML and within the body of the HTML if
55:11 - I see that text thank you for your
55:15 - payment then I know that that payment
55:18 - was successful so if that is successful
55:21 - then I'm just going to come down here
55:22 - and return true and if it's not
55:26 - successful then we're going to uh then
55:29 - that's just going if it doesn't see that
55:31 - text thank you for your payment in the
55:33 - body of that HTML then what it's going
55:36 - to do is it's going to throw this
55:37 - timeout exception um so we can handle
55:41 - this timeout exception here and we'll
55:44 - just say uh print payment
55:47 - failed and then instead of returning
55:49 - true we're going to want to return false
55:53 - so now I'll save that so now that I have
55:55 - all this place it should work if we
55:58 - enter the correct uh credit card
56:00 - information like I said way earlier in
56:03 - the video I currently have the incorrect
56:05 - card information in my credentials for
56:07 - now so that we can check to make sure
56:10 - that this fails first so let's run this
56:13 - submit payment function uh and then run
56:16 - the script to see what we get so in
56:18 - order to run this function let's see
56:21 - that was called submit payment so down
56:23 - here in our main function first what we
56:26 - do here is log into the account and then
56:29 - we can submit payment again we need to
56:32 - pass in that driver now remember we're
56:35 - returning true or false whether this
56:37 - payment was successful so I'll just say
56:39 - payment success is equal to the return
56:43 - value of that function if it returns
56:45 - true then pay payment success will be
56:48 - true um if it's false then it'll be
56:50 - false um so I can say if payment success
56:54 - then I'll just print out here
56:57 - um successful
56:58 - payment and if it's not a success then
57:02 - we'll have an else and I will just copy
57:06 - that paste it in and say failed payment
57:09 - okay so it's been a while since we've
57:11 - tested this here um hopefully I don't
57:14 - have any uh typos or anything but in
57:17 - order to know let's just run this with
57:20 - my fake credit card credentials and
57:23 - we'll see what it does so it logs me in
57:26 - tries to submit that payment uh we can
57:28 - see here that the website's still open
57:30 - it says we're sorry but we're currently
57:32 - unable to process your payment if I go
57:34 - back here to the output then we can see
57:37 - payment failed failed payment so that is
57:41 - failed payment there and that is payment
57:44 - failed from the so the first one here is
57:46 - from the timeout exception uh the second
57:48 - one here is from our conditional if the
57:51 - payment was successful okay so that is
57:54 - working as expected uh even though it
57:56 - was a failure um because I have the
57:58 - incorrect uh credit card information um
58:01 - so we're getting extremely close here so
58:03 - everything that we've done so far uh you
58:06 - know we've navigated defined my account
58:08 - we have automated uh the credit card
58:11 - information and then we've submitted the
58:12 - payment now everything has worked uh
58:16 - automatically so far so we're doing this
58:18 - automation correctly and it looks like
58:21 - if I was to set my credit card
58:23 - credentials uh to the correct
58:24 - credentials then that would have worked
58:27 - but one thing that I want to do before
58:29 - entering my correct credentials is I
58:31 - want to have a way to message myself
58:33 - each month and tell myself that this
58:36 - payment was attempted uh if the payment
58:38 - was successful and how much the amount
58:41 - was for so I'm going to have this
58:43 - automatically send me an email and a
58:45 - text message with this information so
58:48 - first of all let's add some logging to
58:50 - our application so that we're keeping
58:52 - track of all the project of our script
58:54 - as we go and and then I can include that
58:58 - in my messages so first to do this I'm
59:00 - going to uh import the logging module
59:05 - now instead of actually keeping a log
59:08 - file for this script uh I'm just going
59:10 - to have the log sent to me in an email
59:13 - so instead of saving it to a file I'm
59:16 - just going to have it right to a text
59:17 - stream uh to do that we're going to use
59:20 - the string IO class from the io module
59:23 - so I'm going to import that as well so
59:26 - import IO and now I'm going to format my
59:29 - logs here towards the top of the script
59:32 - um so we'll do that uh right here below
59:37 - uh debugging so I'm going to create a
59:40 - log stream like I said instead of having
59:42 - this in a file so I'm just going to use
59:45 - a string IO text string and now I'm
59:49 - going to set the log format and the log
59:52 - format I'm going to have as and I'll
59:55 - explain this uh right after I get it
59:58 - typed out here so in formatting logs
60:02 - it's still common to use Python's old
60:04 - style string formatting uh the percent
60:07 - sign uh message is a placeholder for the
60:11 - log message uh so here I'm saying that I
60:15 - uh want the log message and no other
60:17 - information so I don't want the time or
60:19 - the logging level or anything like that
60:21 - I just want the messages here um so the
60:24 - way that I have it set up here is almost
60:26 - most have it have it uh behave more like
60:28 - a print statement than anything else uh
60:30 - except it'll keep all of them in one
60:32 - place and allow me to send them all at
60:35 - once um now after that uh the S here uh
60:39 - indicates that the log message should be
60:41 - formatted as a string so now using both
60:45 - of those I can say logging do basic
60:49 - config to set up our log here and I'm
60:52 - going to set this up as a stream and we
60:55 - will have that stream equal to log
60:57 - stream I will set the level equal to
61:01 - logging
61:02 - doino and for the format I'll set this
61:06 - equal to that log format that we created
61:10 - before okay so now I'm going to go
61:12 - through the script here and I'm going to
61:15 - add some logging statements and I also
61:17 - want to replace any print statements
61:19 - that I currently have with logging now
61:22 - since I'm mainly just replacing print
61:24 - statements here I'll show you one one
61:26 - replacement and then I'll skip uh skip
61:28 - forward after I've replaced all the
61:29 - others uh just to save us some time so
61:33 - let's find one here so we can see here
61:36 - uh where we have a print statement so
61:38 - instead of having this as a print
61:39 - statement let's just turn this to a
61:41 - logging statement so I'll say uh loging
61:45 - doino and we'll have that as a logging
61:48 - statement instead of a print statement
61:50 - and that's basically all we have to do
61:52 - is add these logging dotinfo uh anywhere
61:55 - that we want to save that information
61:57 - and now I'm just going to go through the
61:58 - script and I'm going to place these in a
62:01 - few other locations um but I'm going to
62:03 - fast forward just a bit as I place some
62:06 - of these around okay so I went through
62:09 - and uh changed out my uh print
62:11 - statements with these logging doino
62:13 - statements uh there are a couple of
62:15 - other additions uh that I made only with
62:18 - logging I didn't add anything else um
62:21 - but just little things here and there um
62:23 - like up here I'm logging the payment
62:26 - amount uh whenever we get to the payment
62:29 - screen um if the payment is less than
62:32 - zero then I'm just saying exactly why
62:35 - this failed here so uh logging that no
62:37 - payment was due or that the payment
62:39 - amount was high or that there was an
62:41 - invalid payment amount like it was a
62:42 - string or something weird like that um
62:45 - but those are the only additions I made
62:47 - it was just adding some logging
62:48 - statements to different parts of our
62:50 - script okay so down here within our uh
62:54 - payment success if it's true or false
62:57 - this is where I'm going to have it send
62:58 - me an email and a text message uh
63:01 - telling me that it was either successful
63:04 - or it failed so now that we have the
63:05 - logging set up let's see exactly how we
63:08 - can do this uh by adding that
63:11 - functionality that will send me some
63:13 - emails and send me some text messages of
63:15 - these results so that I can stay
63:17 - informed uh when this script runs and if
63:20 - there were any issues now again I've
63:22 - done a detailed video in the past on how
63:24 - to send emails using Python and I'll be
63:27 - sure to put a link to that video in the
63:28 - description section below uh so that you
63:30 - can see the details of what I'm doing
63:32 - here uh but I'm just going to do this
63:34 - fairly quickly here so to do this I'm
63:37 - going to make a couple of imports so up
63:39 - here at the top uh I'm going to say from
63:44 - email. message we're going to want to
63:47 - import email message and now I'm going
63:50 - to create a separate function to send
63:53 - this email so I'll just go down here uh
63:56 - to the very bottom here uh create a new
63:59 - function and we'll call this
64:02 - sendor message uh since it's going to do
64:05 - emails and text messages um so first
64:07 - we're going to do a subject here and
64:11 - then we're also going to want to send in
64:14 - a receiver so for the sender I'm just
64:16 - going to uh send this from myself so
64:21 - this is going to be Corey M shaer
64:24 - gmail.com
64:25 - is my email address and now let's create
64:28 - our message so first of all we're going
64:31 - to set this equal to that email message
64:34 - object that we imported and now we're
64:37 - going to set a couple of things for this
64:40 - message so first we're going to have a
64:43 - from value we're going to set that equal
64:45 - to the sender then we are going to have
64:49 - a two value we're going to send that
64:53 - equal to set that equal to to the
64:56 - receiver then we're going to have a
64:59 - subject and that subject we will set
65:03 - equal to the subject here that we're
65:06 - passing into the function and now
65:09 - message.
65:11 - setor content oops and this needs to be
65:15 - message spelled that incorrectly so this
65:17 - is going to be the content of the
65:19 - message and what I'm going to do here is
65:21 - I'm just going to dump everything from
65:24 - our log stream so so I'm just going to
65:26 - say logstream
65:27 - doget value and since I've added all
65:31 - this logging throughout the script that
65:33 - should be all the information that I
65:35 - will need to know exactly what happened
65:38 - um or at least enough to go off of in
65:40 - order to investigate uh whenever I get
65:42 - the email message okay so now let's go
65:45 - ahead and send this so I'll say with
65:49 - SMTP lib oh and actually as I'm typing
65:52 - that out I'm realizing that I didn't
65:55 - import that so let's be sure to import
65:59 - SMTP lib okay now let's go back down
66:02 - here and where are we at here we are so
66:06 - with SMTP lib do
66:11 - SMTP SSL again I have videos on exactly
66:16 - what we're doing here uh but right now
66:18 - we're just uh connecting to uh the
66:21 - server that we can use to send messages
66:25 - and the ports and all of that we're
66:27 - going to have that as an SMTP connection
66:30 - and now I'm going to uh log in so I'm
66:34 - going to log in with my email address
66:38 - corium shaer gmail.com and that is just
66:41 - the sender and I'm also going to need my
66:45 - app password now
66:47 - remember uh this is uh pulled in from
66:52 - myv file that we saw here at the very
66:55 - beginning so I'm using my login
66:57 - information here for uh my email you
67:00 - would have to do um different okay so
67:03 - now we can just use SMTP do
67:07 - sendor message with the message that we
67:11 - created oops and I accidentally have a
67:14 - colon there that I don't want and there
67:18 - we go and let's see I'm getting an error
67:21 - there did I not spell that correctly
67:23 - nope I did not smt TP lib and now if I
67:29 - go back down here then that is good so
67:33 - now that we have this send message
67:35 - function this is what I'm going to use
67:37 - if the payment either fails or succeeds
67:40 - so I'm going to go down to our main
67:41 - function and add this in So within our
67:44 - payment success here uh we can send a
67:49 - message actually let me just create a
67:52 - message here equal to successful payment
67:56 - and I will pass this in as the logging
68:01 - info I will also pass that in as the uh
68:06 - subject for the email and the receiver
68:09 - of this email I'm sending it from myself
68:12 - but I also want myself to receive it and
68:16 - we're going to do the same thing here if
68:18 - the payment was a failure but instead of
68:22 - a successful payment we will do failed
68:25 - payment pass in that message as our
68:29 - logging message and then we will send
68:33 - that message to my email okay so that
68:35 - should send me an email with the results
68:38 - of this script but since this involves a
68:40 - payment I kind of also want this texted
68:43 - to me uh when the script is run now a
68:46 - lot of people don't know this but a lot
68:48 - of phone numbers actually have an email
68:51 - address associated with them that will
68:54 - send a text message to to the number
68:56 - when you send a message to that email
68:58 - address now this depends on your cell
69:00 - phone provider but most of the major
69:02 - ones have email gateways available for
69:06 - the numbers so for example let me open
69:08 - up my browser here I actually have this
69:10 - open up here in the browser so for
69:13 - example I have AT&T if I wanted to send
69:16 - a text message to myself I could just
69:19 - put in my phone number um at
69:23 - mms.att.net and in the description
69:25 - section below I'll add a link to this
69:27 - page that has these gateways listed for
69:29 - a lot of the providers now I don't know
69:32 - if this works internationally I know
69:34 - that works here in the United States but
69:36 - this is just something that I use a lot
69:38 - because it's an easy free version to
69:40 - send myself text notifications through
69:42 - python but if you're at all interested
69:44 - then I can also show uh some paid
69:47 - versions in the near future you know
69:48 - using things like twio and services like
69:52 - that to send text messages so let me
69:54 - know if that's something that you would
69:55 - be interested in but for this video I'm
69:58 - going to use this simple easy paid route
70:00 - of just uh sending this uh to my phone
70:05 - number email address and that's actually
70:07 - going to text me and this is why I like
70:09 - this method so much because it makes it
70:11 - so easy so in order to do this all I
70:14 - have to do is send another message here
70:18 - but instead of
70:21 - gmail.com uh like I said this ismms
70:25 - .
70:27 - att.net for my specific Network for AT&T
70:32 - and what I need to do here is all I need
70:34 - to do this is going to be an FST string
70:37 - all I need to do is come up here and put
70:40 - in my phone
70:41 - number in front
70:44 - of that email address and what that will
70:47 - do is it will send me a text message so
70:52 - I will save that now I'm also going to
70:54 - have this s me an email if it runs into
70:57 - this uh General uh web driver exception
71:00 - here uh so I'm just going to save these
71:05 - and down here for the message I'm just
71:09 - going to have let's say failed to run
71:14 - script this is a bit more General here
71:16 - that would probably mean that you know
71:19 - something is wrong with the web driver
71:21 - or something like that okay so very last
71:23 - thing here down here at the bottom if I
71:26 - have debugging turned on then it likely
71:29 - means that I'm sitting here at my
71:31 - computer working on this script uh so
71:34 - I'm going to change this so that it
71:36 - prints out our log stream so that I can
71:39 - see it there if we're debugging so I'm
71:41 - going to change this to say if debugging
71:45 - then what I want to do here is I just
71:48 - want to print out my logstream so that
71:51 - was logstream
71:53 - doget Val
71:55 - value and then we'll say else driver.
72:00 - quit Okay so that's it I'm not going to
72:02 - write any more code I promise I think
72:04 - we're done here um but uh let's make
72:07 - sure all this works so we added a lot of
72:09 - different code here so first of all I'm
72:11 - going to run this script one more time
72:14 - with my incorrect credentials to make
72:16 - sure that this is working as expected
72:18 - and that I get my text message and my
72:20 - email so I'm going to run this and it
72:25 - goes through everything here let me
72:28 - close this down okay so we can see here
72:32 - that uh since we have debugging turned
72:34 - on that it printed out this log stream
72:37 - here of get value um and so it's saying
72:40 - the payment amount of 4338 failed
72:43 - payment now tutorial is getting a little
72:45 - long already so I'm not going to show
72:47 - myself logging in uh to my email and
72:50 - showing you that those came through but
72:52 - I'm looking at my phone right now and I
72:54 - can confirm that I did just receive that
72:56 - email that said that the payment failed
72:58 - and I also received a text message that
73:01 - the payment was attempted and that it
73:02 - failed with the incorrect credentials so
73:05 - now to wrap all this up uh let me put in
73:08 - the correct credentials and then I'll
73:10 - turn off the buing so that it runs the
73:12 - browser in headless mode which means
73:14 - that it doesn't even actually open the
73:16 - browser user interface to navigate to do
73:19 - everything that it needs to do uh it
73:21 - just does it all in the background so
73:23 - let me make those changes so first I'm
73:26 - going to set uh debugging to false so
73:30 - that was up here at the top set that
73:33 - equal to false and really quick I'm
73:36 - going to open up myv file here and set
73:39 - this to my correct credit card
73:41 - information and I'll just fast forward
73:43 - to when that's done okay so I just
73:46 - changed all of that around to where it
73:48 - should be my correct credit card
73:50 - information uh so now the moment of
73:53 - truth so I should be able to run this
73:54 - script and have it pay my bill
73:56 - automatically hopefully I didn't make
73:58 - any typing mistakes or anything like
73:59 - that and I hope it all works uh but if
74:02 - it doesn't then I should get an email
74:04 - and a text telling me exactly what
74:06 - happened but let me go ahead and run
74:10 - this and again it's going to run in
74:12 - headless mode so I'm not going to get
74:14 - any output here I'm only going to get a
74:17 - text message and I'm only going to get
74:19 - an email okay so I did just get those
74:22 - and I'll go ahead and put the email that
74:23 - I received on the screen
74:25 - uh now so that we all have some sense of
74:28 - accomplishment instead of just uh
74:30 - staring here at a blank screen um so you
74:32 - can see that it actually did go through
74:34 - um and I also paused the video and took
74:37 - a second to uh check the utility company
74:39 - website and I did see that the payment
74:42 - went through in the amount that they
74:44 - expected as well so that all did work um
74:47 - exactly how we wanted it to work so now
74:50 - the script is working as intended uh all
74:53 - there is to do now is to schedule this
74:56 - uh in some way to run however often that
74:59 - we want this to run so I'm going to set
75:01 - this up as a Cron job on my system to
75:03 - run once a month um I still need to uh
75:06 - check with the utility company to figure
75:07 - out exactly when when they put the
75:10 - payment due amounts on the website but
75:12 - once I get that information I'll just
75:13 - have this uh run automatically uh once a
75:16 - month to pay my bills for me and if you
75:19 - want to see how to run chome jobs on a
75:21 - certain schedule then I do have a video
75:23 - on that as well that's for mac and Linux
75:26 - uh I know that Windows has the ability
75:28 - to run a bash shell now but I'm not sure
75:31 - if Chron tab is included in that or not
75:34 - if you know let me know in the comments
75:36 - below uh but if you're on a Windows
75:37 - machine and that's not available to you
75:39 - then I'm sure that they have uh their
75:41 - own schedulers as well I just don't know
75:43 - much about uh windows schedulers for
75:45 - running scripts on a certain time frame
75:49 - but if anyone's interested then let me
75:50 - know and I can look more into that uh to
75:52 - show exactly how to uh run schedule jobs
75:55 - on Windows and I can put something
75:56 - together now as for this script I think
75:59 - it would be a great script to use in an
76:01 - advanced unit testing video uh that I'll
76:04 - be putting together in the near future
76:07 - because this script has a lot of more
76:09 - advanced concepts that can be difficult
76:11 - for people who are new to unit testing
76:13 - to know exactly how to test so for
76:16 - example since we're going out to
76:18 - websites and sending emails and things
76:20 - like that those are things that we want
76:22 - to mock in our unit tests so so that
76:25 - we're not relying on things outside of
76:27 - our control that can break our script so
76:30 - showing how to mock these calls and test
76:33 - this appropriately would be a good
76:35 - addition to the unit testing tutorial
76:37 - that we already have out there but with
76:39 - that said I think that's going to do it
76:40 - for this video I know that this was a
76:42 - long one but hopefully you found this
76:44 - walkthrough helpful uh I know I didn't
76:46 - go as in depth as I normally do when
76:48 - focusing on a certain topic but I wanted
76:51 - to show how we can take a lot of these
76:53 - individual Concepts that we've Ted
76:54 - talked about before combine them all
76:57 - into something useful that perhaps you
76:59 - can use to solve a similar problem that
77:01 - you may have uh like I said I hate
77:04 - paying bills manually so having it do
77:06 - this for me automatically and send me
77:08 - updates is a huge help for me so I'd
77:11 - like to continue uh doing videos of
77:13 - scripts like this uh that I've created
77:15 - for myself in real world situations one
77:18 - that I'm almost done with is a financial
77:21 - Hub that I've created for myself where I
77:24 - parse my PDF bank statements and I
77:27 - created a tter goey uh to categorize
77:30 - those transactions and then use pandas
77:32 - to visualize and analyze my spending
77:35 - habits um that's a pretty large project
77:38 - uh that I've been working on and once
77:39 - it's all done I'll release several
77:41 - videos covering how to do everything
77:43 - that I did for that so be on the lookout
77:46 - for that uh but if anyone has any
77:48 - questions about what we covered in this
77:50 - video then feel free to ask in the
77:52 - comment section below and I'll do my
77:53 - best to answer those and if you enjoy
77:55 - these tutorials and would like to
77:57 - support them then there are several ways
77:58 - you can do that the easiest way is to
78:00 - Simply like the video and give it a
78:02 - thumbs up and also it's a huge help to
78:03 - share these videos with anyone who you
78:05 - think would find them useful and if you
78:07 - have the means you can contribute
78:08 - through patreon or YouTube and there are
78:10 - links to those pages in the description
78:12 - section below be sure to subscribe for
78:14 - future videos and thank you all for
78:16 - watching