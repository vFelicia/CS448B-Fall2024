programming is tough thanks for tuning in at braies hello everyone and welcome to this video on making a multiplayer FPS in unity today we're going to be creating a server browser that will list all of the currently available rooms along with the name of the room and the amount of players currently in that game so that's going to be really fun also thank you so much for helping us reach level one on the patreon page the first goal has been met and that means that I can now guarantee two videos every single week that I'm going to be uploading at least for now Sundays and Wednesdays and of course this schedule might change in the future but two videos a week uh should be it so that's going to be really really exciting also if you want to get over there the patreon page is of course Very Much still running and uh I hope to get a lot further the next goal is uh live streams where we can do some exciting uh Q&A stuff I can help you out with your games and answer questions and uh also we can do some live development that would be really fun uh also in that goal is maybe a game um math Series so kind of math Essentials for game developers that's another thing I really want to create so uh if you want to see those things head on over to the patreon page and yeah without further Ado let's get started so you can see I'm here in unity and basically what we did in the last video was we set up this Host Game UI and what we we can do now is simply duplicate this object and then we'll rename this to join game and we can take this join game object and simply move it over by clicking and dragging and holding down shift to only move it in one axis and uh we can now uh open this up and go and rename this to join game title and then uh change the text as well so this is going to be join game and we can uh remove the input field here but we can also reuse the create room Buton button so this is now going to be our refresh button and it's simply of course going to refresh our server list and uh we can maybe uh disable our on click event for now and change the preferred height to something like 40 just to make it a bit uh Less in your face and then we can change the text itself here to say refresh perfect and in between the join game title and the button is where I want a scroll View view that will uh contain all of the different room uh list items so uh let's right click on the join game here go in the UI and then scroll View and we can now now drag this out and drag it back in to uh position it correctly and we want it to be there under the uh joint game title and then we can go in here and add a component and this is going to be a layout element and we want to go and do preferred uh height and set this to something like 400 and and the great thing about a preferred height is that it's going to try and remain at 400 no M matter what we do unless it runs out of space and then it will shrink itself uh to fit so that's a a really uh great way to think about these preferred values instead of just setting a minimum in which case it will just uh go without the confines of the screen and look super weird so it will just get cut off cool so uh inside of this scroll view we of course going to have a bunch of different uh uh server list item uh objects sitting there and we want the uh scroll view to take care of stuff like fitting everything uh in here and uh allowing us to scroll down if we need to uh for so that's going to do all of that but scroll views can be a bit funky and a bit confusing at time so I'll try and explain this carefully so we have a scroll scroll view itself here and this is going to be our server list or maybe we should call it our room list and then scroll View and under this scroll view we basically have three different things we have two scroll bars a horizontal and a vertical and a viewport which uh contains uh all of our stuff so this contains our actual content and the content object is all of the things that we want to display within our scroll View and uh we basically want to parent all of our list items to this content uh object and what I want to do is I want to have this content object resize itself to fit the size of all of our list items combined and we'll do that in just a second but first what we can do is we can disable our hor horizontal scrolling on the scroll W component and that means we can also simply remove our horizontal scroll bar and that just cleans up uh this uh scroll view just a bit then what we can do is we can find our content object and we can add a new component to this called a vertical layout group uh I'm really a big fan of vertical layout groups as you can see and that means that we can just right click our content go under UI and make a new button and then maybe just drag this out and drag it back in and you can see that our button has now been positioned automatically however I don't want this button to just scale up to be some kind of huge size I want this to have a fixed size and I want our content to scale to that size so what I'll do is go under button add component layout element choose a preferred height of let's say uh 30 is good I think and we'll also go under the content and disable child Force expand on the height uh so that now has uh fixed that problem however our content is not yet resized so all we need to do here is add a component called content SI size fitter and that will if we choose vertical fit preferred size scale it to the preferred size of our elements uh that are parented to this content object so if I duplicate this button to make another one you can see that our content now resizes to fit that button as well and I can go ahead and do this a bunch of times and you can see that we now get this a nice scroll bar uh feature uh enabled and if I hit play here everything will resize to look nice however this scroll bar sometimes can add a bit act a bit funky and all we need to do now is go ahead and find our vertical scroll bar and we you can see it's for some reason it's set our height to zero so we'll just uh bump up our height here and then we can take this object and we can move it to the top and then we can drag it all the way down to size it there and then we want it to scale uh with the height here so I'm going to select scaling on the heart uh this is uh this is the one here so uh now we should be able to hit play and you can see that I can now drag down here to see all of the different buttons and I can also drag on the object itself and I'm just going to go ahead and get rid of this uh uh network manager uh network manager Hut there so just disable the runtime for now so you can see that now that just works now and it's even it even has this nice elasticity to it it's it's kind of nice to use great so uh let's delete some of these buttons here and just focus on the first one and I'm going to rename this to our um room list item this is going to be a single room item and uh it's going to have the name of our room the amount of players in that room and some kind of way of telling the player to click it if he wants to join it so uh the first thing that I want to do is kind of Center our text to the left here and then just bring it out just a tad from the side and this is going to be the room name and then it's going to say like this maybe uh two out of uh six and that's going to be of course the amount of players you're going to have that as a separate text object I'm just going to have it in one uh and then I'm going to rename let's just keep that as text that's fine and then we can duplicate this text object and we can call this one the uh click to join text and all I want to do here is simply move it over uh something like uh here and then I want to uh have this snap to the right there we go and move it out just a bit and this is the click uh and I'm going to put this in parenthesis actually click to join and uh we want to make this a lot smaller something like maybe 12 and I want to make this italic as well so that looks pretty nice uh then it should shows that on all of the buttons so that the player is sure that he just needs to click the uh the thing to get in there so that's great and uh we can now take this here and turn it into a prefab by dragging it into uh our project panel I'm just going to drag it out here as long as I'm working with it and then we'll sort it into the prefabs folder later good so that was actually the essential UI we need except one small thing and that is something that is kind of optional but that I would really like to have so we can now delete this room list item and that is some kind of status text object that shows us well we are currently loading all of this stuff or uh we currently joining a game whatever so when we're not displaying all of the servers that the user can choose I want to have some kind of feedback for the user showing what is currently going on so to do this what I want to do is uh go under our um actually let's just do this from without the scroll view or maybe we can put it inside of the scroll view but uh not inside of the content uh so just something like here and we can put a UI object here and it's just going to be a plain text object and I want to snap this to the uh left uh corner here upper left corner and have it sit somewhere around here U with a font size of 16 a color of completely white and this is going to say maybe maybe uh loading dot dot dot or something like that so uh that's really easy to use and I'm just going to remove the text here so it's nothing by default unless something is happening and this is going to be our status text so that's perfect and uh now we can go ahead and hook some of these up uh to a script so the first thing that I kind of want to do is have a join game a central script for joining a single game and uh we could have this sit on on the uh network manager but we are not going to need the join game um script in other scenes and uh that's why I thought that I would maybe just have it sit either on the join game UI object or maybe on a separate object in the hierarchy so let's go ahead and create an empty here and reset the transform on this and we can go ahead and call this one uh let's just call this one join game and it's going to have a uh script that as well says join game um so that all looks fine and dandy and what we can then do is maybe open up this script in visual studio and this is going to be a fairly long one I can see by the timing that I might have to split this video up into two uh but uh we'll just go ahead and get started with this uh anyway so we are here in visual studio all right and uh first off we're going to be needing a bunch of Nam spaces we're going to be uh using uh Unity engine of course and then unityengine.ui because we want to be messing around with uh some text objects then we want to use system uh. collections. generic because we're going to be using generic lists then we want to be using um Unity engine. networking we are going to be using some networking functions and then finally Unity engine. networking. match because we are going to be using match info or match description is what it's called um to be more specific so that's perfect and what we want to do is first of all set up some kind of reference to our network manager so this is just going to be a private network manager called network manager and we're going to set this uh in the start method where we're going to say network manager equals Network manager. Singleton and uh then we want to check if Network manager. Matchmaker is equal to uh null well then we want to say network manager do uh is it create match or uh it's start Matchmaker so start Matchmaker uh there we go just so to make sure that the matchmaker is actually set up before using it so we did this in the host game script as well right here so you can just duplicate that code if you want to uh then next up we are going to um well the very first thing that we want to do is basically just refresh our list and this is also the very Central uh function that we're going to have is some kind of refresh uh room list or you could simply just call it refresh whatever you want to do here I'm going to call this refresh room list just to be as specific uh when naming My Method as um possible and of course we need a list of rooms to refresh so I'm going to have a list here and it's going to store a series of game objects um you could also make these transforms but I'm just going to do game object and this is going to be a room list and it's going to be equal to a new list of Game objects uh there we go okay and uh that's the first thing that we want to create here and we're going to have more variables but we'll do them those in a second and we're going to have a PO a public void and we want this to be public called refresh room list we want this to be public because we want to call it from a UI button so uh that's um therefore we need it to be public because when we drag it into the on click event uh we need to be able to see it good so uh the actual refreshing here is actually fairly simple we are going to uh go to our network manager so find our network manager here go under the Matchmaker and then we want to list some matches and uh this takes in a series of arguments we are going to have the start page number and this is if you have multiple Pages I'm just going to say uh zero then we want the page size and in our case this is going to be 20 so we'll just list the first 20 elements uh and then we'll have a match name filter this is for searching we don't want to do that and uh then we want a call back back method and this is a method that will be called as soon as it's found a list of matches uh and we are going to make one called on Match list we're going to make this ourselves and then we want our status text so uh we need a reference to our status object so we'll go up here and we'll make a public actually let's make this a serialized field so a serialized field private uh text object and we'll call this one our status and uh we'll go down here and we'll say status. text uh equals and we are now loading some uh elements in here and then in the unmatch list we can set this back to nothing because then we have indeed succeeded in loading these and are now displaying them so we'll create a void and I actually believe this is this has to be public uh so unmatch list and this is going to take in a list match response and we're going to call this the match list and what can we do with this well first off we want to set status. text equal to nothing and then we want to say if match list is equal to null well uh then we haven't found any matches whatsoever it's not that only that we haven't found any matches it's that we weren't successful in retrieving a match list and then there's definitely something wrong here so maybe we should in that case set our status text to um couldn't get matches something like that uh or couldn't get room list something like that would be fine and then we can go ahead and simply return because then we we basically can't do anything so this is only uh this is probably only going to happen when you have some kind of connectivity issue and then it's something that the user should resolve so uh next up we're going to uh clear all of the rooms that are currently in our list so we want to call some kind of clear uh room uh list method and let's just go down and make this right away and this can be private so we're going to make a clear room list and it's not going to take in any arguments whatsoever and what we want to do here is Loop through all of the elements in our room list so for in i i is less than room list. count uh and then we want to uh of course destroy that object so we want to destroy room list I and that's already a game object so we don't need to do anything here so we'll just remove that object uh from our uh uh we'll have all of the objects objects sit under your content and in our case we'll just remove that uh object right away and uh then we want to clear our list so then we can go room list. clear because uh just because we remove the object that uh is referenced in that list does does doesn't mean that the reference is removed from the list we need to do that separately and we do that by calling uh this function here so uh just remember to do that great so now that we've looped through all of that and removed all of the elements uh we can go ahead and now add in some new ones uh and in this case we are going to Loop through this match list response and what is the match list match list respond well it's a uh Json response for list match request and that makes that that means that it's basically just pure data uh containing stuff like uh the name of the matches how many matches and all of that stuff so it's just a list of pure data that we can convert into something that we can use inside of c and in our case we're going to convert uh some of this stuff uh into actual objects uh and I'm I'm going to show you how to do that so uh basically what we'll do here is we'll say for each match description because this match list actually just has a series of match descriptions uh just single match info objects uh and we're going to call each of these match in match list. matches there we go and uh then we can say so for each match that we found uh we can go ahead and make make a new object so we'll make a game object here and we'll call this the room list um item game object and set that equal to a new object that we will instantiate here and in order to do that we need a prefab to instantiate so what do we want to instantiate well we want to have up here another serialized field and this is going to be a private uh game object and this is going to be called um the room list item prefab and there we go so that's what we want to instantiate here and we don't need to set any position because we'll uh have our content or our scroll view set that for us so that's fine and uh all we want to do is simply parented to that scroll view so we'll have to have a reference to the scroll view itself so we'll have a serialized field here and that's going to be a private transform and uh this is going to be uh called Maybe room uh list parent and uh all we want to do uh down here is now that we've created this on list item we want to parent it to our room list parent so we'll simply go room list item go. transform. parent to our room list parent there we go and uh next up I think we'll just skip this next Next Step just for now I think because what we want to do here is now uh have a component sit on the game object that will take care of setting up the name slash amount of users uh as well as setting up a callback function hang in here um that will join the game okay so uh basically what this means is we need to have uh some kind of uh way of setting uh the name equal to the match name setting the amount of users that are in uh the room and we also need a way to know that if we press that button it's going to join the correct room so we need a way of knowing what room to connect to when a button is pressed and we do that using a call back function and we'll create all of that uh in a second so the video got kind of long and I had to split it up into two parts we covered a bunch of stuff in the second one so click the screen now to be taken there as soon as it's ready and I'll see you there so I'm going to start mentioning patreon supporters the following month after they donate so that there won't be any difference from donating at the beginning of the month to the end of the month this way everyone will get a full month of mentions and yeah everyone will be happy so um just wait for uh the next month and you will see your name here so thanks for watching and I'll see you soon