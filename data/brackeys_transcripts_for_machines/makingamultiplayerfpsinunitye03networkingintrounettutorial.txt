thanks for tuning in at braies hello everyone and welcome to the third video on making a multiplayer FPS in unity in this video we're going to be putting aside making the character for a bit to focus on networking so we'll finally add some networking functionality to our game that means that we'll set up a network manager and instantiate a player prefab into a network scene and we'll also talk a bit about local player Authority and those kind of Concepts and I'll make be making a short presentation on how unet actually works in terms of programming and uh how clients connect to a server and all that kind of stuff so uh before we get started I quickly want to mention that I've now added the multiplayer FPS tutorial project to GitHub so if you want to uh download any of um the files or the entire project you can go here links is links are in the description and if you want to uh have the exact version that I'm currently on or a previous uh version you can go under commits here and I'll try and name the these according uh to the video so uh there should be a version saying uh video 3 video 4 and and so on and uh the there's also a test branch that you can use if you want to see what I'm working on for future videos also I've gone ahead and completely redone uh the Donate system I thought it was really bad before and a lot of you guys have said that you wanted a better way uh to kind of support the videos so you can go to bre.com donate and fill out the forms here if you want to make a donation it truly helps me out a lot and uh yeah so thanks a lot and uh let's dive into today's video so let me start by explaining a bit about how unit actually works so I've made this model here that displays uh kind of how unet is split up into two apis application programming inter inter faes the first one is the highlevel API and this is what we are going to be using uh this provides a bunch of classes and methods that we are going to be using to apply networking to our game the high level API HL API is built on top of what is called the transport layer this is this is much more Bare Bones and lowlevel and this takes care of a bunch of stuff behind the scenes so the transport layer can be directly accessed but that's not something we are going to be doing and basically this takes care uh the high level API uh connects to the transport layer and takes care of stuff like distributed object management and state state synchronization along with a lot of other stuff like message cues and all that so if that sounds very technical to you well then you're in luck because that's not something we need to care about uh in our instance so the trans Port layer gives great control uh but it's also very technical and therefore uh we'll be fine of uh by using the HL API so on top of the HL API Unity has gone ahead and made some components for us uh for example we have the network manager the network identity the network transform component and uh a bunch of others and these are basically Suggestions by unity of how you could implement the HL API in your game so these do a lot of of stuff for us and uh they are going to be need to uh be customized uh in some kind of way so um basically what we're going to be doing later not in this video is we're going to override or extend these components to create our own custom scripts uh that has exactly the functionality that we going to be needing we might add on to these components or uh decide to do stuff in a different way that makes more sense uh but basically these don't need to be used at all you can create a game uh a multiplayer game by only scripting uh or making your own components that communicate with the HLA API so uh that's kind of how uh the uh unet programming functions and uh basically uh if we take a look at how the uh networking in unity actually works well unit is based off of the principle that one of the clients meaning one of the players is the host so uh you you have seen this in a lot of games for example uh Call of Duty uses this principle of naming one of the clients the hosts and if that clients client then leaves another client becomes the host uh so this uh is a pretty neat way of doing things because basically we have this uh client here called the local client because that's part of the host and we have also the server sitting on the same machine and this machine then has an IP address and here have just used a sample IP address this is what an IP address could look like and then all of the clients or all of the other players that want to connect to this host well they basically connect to that IP address to the server which then connects locally to that client if needed so let's say that this client wants to shoot this client well he connects to the IP address to the server and the server connects back to that client so if this client needed to connect to this client will he maybe shoot that client by going to the IP address going through the server and then the server will talk to the client here so everything goes through the server which sits on the host's machine cool so now that you have this understanding I might present to you a problems because uh well a lot of modern games don't use this kind of IP address you don't want to be uh typing in an IP address every time you want to connect to a player I mean if you want to play over the Internet uh you want some kind of U matchmaking system and when using this kind of setup uh we have some issues with firewall pre preventing connections and all that so to solve this Unity has created uh a matchmaking service is uh which is called the unity relay server and here all of the clients connect to a server that is hosted by unity which then communicates to the host and that means that Unity takes care of Ip matching and it solves issues with firewall and net configurations and uh you don't need to know exactly what this uh means and how it's solved but just know that we won't have any issues with connecting that will have to be solved uh by the clients they can just connect and this is not something we are going to be integrating today it is something I hope to integrate in a later video uh but basically Unity hasn't uh released uh or announced what the prices on using this will be a a very common thing to do is have a limit on the number of concurrent users that uh you can have on this system uh before you need to pay but Unity hasn't released any uh information on this so I won't go ahead and and and say anything yet about what this will cost uh and uh how many uses you can have for free if any so we'll see about that but for now let's focus on setting up some networking locally on this machine so the first thing that we are going to be doing here is adding the central networking component uh by unity so let's create an empty game object over here and let's uh call this uh the network manager and uh that's without a t let's reset the transform on this and just drag it to the top of the hierarchy there let's go ahead and hit an add component here and let's add the network manager that's the one and this basically is a component made by unity that can do a bunch of different stuff well it sets up the scene here uh to do networking and you you have a bunch of different info here on how you want this set up and for now we can ignore this uh and you also have the ability to use this component for spawning in players so you can add a player prefab here which is what we are going to be doing so we have this a network manager and we also have a network manager HUD and what this does is right now when we hit play we see that well nothing has really happened and we just have this player and he's not on a network in any way so let's just go ahead and drag this player into a prefab and then delete him from the scene and uh now let's look at the network manager well basically we need some way of interfacing with the network manager script and unity has created this component that we can use while testing called the network manager HUD so this creates a head head up display uh and you can enable it and disable it here and you can also play with the offset if you want it uh some places on the screen and this will just give us uh some uh some uh a UI uh that will allow us to uh connect uh using the network manager but we need to add a camera here uh which will show the scene when we are not playing so uh when we don't have a player yet and we are in kind of the lobby where we want to choose what we want to uh connect to well then we want to have some kind of camera that just uh views our level so let's right click here and hit create camera let's reset the transform on this and uh let's uh rename this to maybe scene camera let's also make this the default camera so this let's tag this as main camera and uh let's drag it up and out uh maybe up some more and let's rotate it down to view our scene and I'll just switch to Global up here and uh that looks okay whoops I screwed up the rotation here so that's 0 0 0 and then rotate it down on the X something like that and you can see in the game view here how that looks and I think that's going to be fine uh for now I might drag it up a bit more and then rotate it along the Y and I think that looks just fine and you can see here that I Skyped box looks very boring here so let's change this from Skybox to solid color and let's just make this some kind of gray or uh deep blue here just temporarily at least we'll make it look some like uh that it's going to be fine and this looks a bit washed out but we'll have a look at at creating some uh more awesome Graphics later and uh we want an audio listener and all of that on this component so now that we have that here uh and uh we save the scene here and hit play you can see that uh this um the network manager HUD is now displayed here and we can choose to either uh create an a host here or join as a client and then we specify an e IP address and local local host here is just um the name of a certain IP address meaning on the local uh system and uh you can also choose server only only uh which we are not going to be messing with uh right now so and you can see here we can enable the Matchmaker we'll get into all of that stuff so now that we have that we can uh create select land host here but it says that we have to add a player prefab so let's go ahead and do that so inside of our network manager we have this spawn info Tab and uh we have this player prefab slot so let's go ahead and drag in our player and it will give us an error here it will say that the player prefab must have a network identity so this is another component created by unity and uh the network identity is a component that we add to all networked objects in our scene so stuff that we want to communicate on the network in any way are going to need a network identity component so we add that and it has two uh toggles here the first one is server only we don't want that because we're going to control this player so we want it to sit on the uh local client and then we have local player Authority and this makes sense for us because we are uh controlling the player locally on our system and then we're sending the movement information and other stuff out through the server to the other clients so they can updated on their systems and therefore we want to check this local player Authority because we have the authority of the movement locally and then we send it out through the network cool so we can clear the console there and that's basically all that we need to add in order to add it to the network manager slot so we'll just drag it in there under the player prefab and we'll uh have Auto uh create player prefab and um we have the ability to specify where we want the uh player to be created because right now it's just going to be created on this 0 mic uh so in the middle of our scene so let's instead add a few objects or at least two uh for where our player will be spawned so let's uh create an empty object here and uh let's name this spawn point and uh let's just uh add a component to this and uh if we search Network here we find the network start position and that's just the only that's the only component that we need to add and let's also create a gizmo for this so let's just select an icon con here and maybe make that blue and you can see now that it says spawn point here so uh we'll just have it sit on uh 00 Z then uh set the Y to one because we want him to spawn a bit up in the air and um let's the uh blue arrow here is probably the way that the player is going to be facing so let's uh give this an x amount or I'm sorry a z amount of5 duplicate this rename this to spawn point two and let's rename this to spawn point one and maybe just drag this down so they're right by each other and we can maybe actually make them a child of the network manager so spawn point2 here we're going to set the Z to five and we going to rotate him 180° inre on the Y oops and if we change this to local you can see how that uh worked so now these two uh objects are facing each other uh and they are 10 units um they have a distance of 10 units so this way um we can go into our network manager and we can change the player spawn method to round robin and this will basically uh first choose one of the spawn points and then uh the next player that creates uh will just uh choose the next spawn point and the next one and then Loop uh so when we only have two this will make sure that we will switch between the two uh which is pretty uh cool because then we will also always spawn opposite of each other cool uh so now that we have this in place uh we can go ahead and hit play on this and we can select land host and we are spawned into the scene but uh we get a a small warning here is saying that there are two audio listeners in the scene and that's because our scene camera is still active and if we were to go ahead and try and uh build this and uh let's actually do that now uh there will be a couple of issues so uh if we go to a file build settings and just add in our main level into the uh builds list here and one second my phone is going off so I'll just uh turn that off so we add this to the list and uh now basically we have to select the target platform I'm going to build for Windows uh 86 and development build is fine and uh then we can hit build and run and we can choose some place to build it you can see I've made a test build here already but basically I've gone into my project folder created a folder called builds and just named this one build one now hit save on that hit yes to replace it and uh it's just going to build here and it should go pretty quickly and uh once it's done it's going to open up uh the window here I'm just going to select windowed and maybe a bit smaller of a client here and then hit play and we get this window and uh now we can hit play in the Z in the unity here and these basically represent each uh or two different players or two different comp computers or clients that want to play with each each other so on the first one here in unity we can select host and we get dropped into the scene and here we can select client and you can see now that we are facing each other and this actually was rotated wrongly but we are standing opposite of each other and uh staring down each other's barrel and uh that's awesome however uh you can see in unity right now it's complaining that there are three audio listeners in the scene and that's because we have on on this local client here uh we have both a uh a camera on the one player a camera on the other player and the scene camera and there's another issue with this and that is that the player motor and controller is enabled for both the players on both the systems so when I go ahead and move here you can see that the other player is moving too so both players are responding to input and uh that's of course something we need to take care of but there's one more issue because if we go in here neither of the players have moved so what is going wrong here well basically we need to uh kind of disable the components that uh sit on the other objects meaning uh the ones that are not controlled by the system uh so that we don't affect other clients uh when with our input and also we need to kind of network uh how the movement should go so we need to add some kind of component that will uh transmit our position and rotation uh over the network so there's a bunch of stuff we need to do here and in order to kind of set this up we create a script uh let's call this the player setup script so under the player here we'll add the uh player setup new script and let's just make that of type c and in this script if we double click it to open it up in visual studio um basically we are going to be creating uh some lists for objects and components that we want to disable uh when uh there uh for all other um players in the scene uh than the one that we control so um I hope that you can follow me on this so let's just uh remove the using system collections namespace we're not going to be needing that and then uh let's just uh remove uh these two methods for now so let's start by creating a list of components that we want to disable so uh let's make this an array so all components in unity are derived from Behavior so if we want to kind of make this very general we could make the uh a reference to the player motor the play play a controller in each their variable and then disable them uh but I'm just going to create this array so we can just add in any kind of component and don't need to add anything to the script each time so let's make a behavior here and that's going to be an array and let's uh call this our um components to disable and uh let's close that off and then in our start method basically what we want to do here uh is we want to check if we are in the network uh or if we are the local player so in order to do this we need to access Unity networking so first off we need to include the namespace up here we need to uh be using Unity engine. networking and all of the high level API sits within this namespace but we also need to derive from net n work Behavior so this will allow us uh this script to act as an object that is networked and we'll have the API up here so now basically all we need to do is check if we are not is local player so if if is local player is equal to false so if we are not the uh player or if if this object isn't controlled by the system well then we want to go ahead and disable all of these components so we'll just Loop through that array so we'll say uh for in I equals z i is less than components to disable do length i++ and then we want to say components to disabled. enabled oops do enabled uh whoops we want to take the I and set that equal to false so um basically what we're doing here is we're saying in the start method when the player spawned we want to check if we are controlling the player and if not well then we want to disable all of these components so um we basically Loop through the list and Set uh the uh the uh component that we're currently looking at enable state to false cool so that's basically all uh we need to do uh in uh scripting here uh we could also start uh disabling the camera but let's do that in a sec so let's minimize that and you can say that there's a warning here uh saying that it will never be assigned to and that's because we need to mark this as a serialized field so that will allow us to access it in the inspector here and assign stuff to it so now the player setup when uh multiobject editing is not supported there we go so that just needed to update you can see that we have this network channel and network send interval information and that comes when deriving from Network behavior that can just be ignored but we also have this array and let's just increase the size on this we want to disable a bunch of things so if we are not controlling on this object well then we don't want to have a motor and we don't want to have a controller and we do not want to have some kind of camera or uh so we want to disable the camera component or an audio listener so those are the components that we need to disable but these components sit on as another object so we need some kind of way of dragging them in here and for the camera that's pretty simple you can simply drag uh the object in here or add him to uh back into the scene and then uh browse here and simply drag the camera in and that will uh simply drag the first component that sits on the object into the slot but how do we access the audio listener well that's actually pretty simple we can go ahead and lock this inspector so now that we set uh select another object it's just going to stay on that object and then we can create a new inspector so we hit add tab inspector and uh let's just drag it over here and uh that is going to change unless you log it so now we can go on the camera here and we can take the audio listener and drag it in there so you can just keep the inspector here or you can just uh close it here I don't think we're going to be needing it again in this tutorial and then we can unlock this so uh now that we have these components uh to uh disable added uh we can hit apply and we can uh Delete the player and uh we can try this out but I assure you this should be working uh so let's just go ahead and add some functionality for disabling this scene camera well basically when do we want to disable the scene camera well we only want to disable the camera if we are the local player so uh we don't want to uh disable or enable the camera each time another another player joins we want to disable this local camera uh when we join so therefore we can simply add an L statement here where we disable the camera and because we marked it as a main camera we remember we added the tag there we can simply say uh camera. main. game object do set active and set this to false uh so that that's all we need to do and uh in the future we're not going to be doing this under the player setup because the camera uh the scene camera doesn't really have anything to do with the player but for now we can just add this fun functionality here um so that's basically all we have to do uh but we also have to reenable it once we disconnect uh so in order to do that uh let's make a reference to this camera first of all so let's make a camera variable here and that's just going to be private and let's call this uh seam camera and then here in the start will uh set whoops we okay I'm just going to write this again we'll set C camera equal to camera. Main and then down here we'll say that if seen camera so if it's actually found a camera it's not equal it's not going to be equal to null and then we can simply say scene camera. Game object. set active and then we can disable it so this will make sure that even though it doesn't find the camera we don't get any errors and then if we want to reenable this we can use the handy function provided by unity uh called on disable and this is also called when the object is destroyed and in here we can simply say that if scene camera is not equal to null well then we want to say scene camera. game object. setactive and then true so then we enable uh the object again and uh this of course uses set active we could also just enable the component U which might be something that we want to do but on enabling and disabling the whole object we don't need need to do anything with the uh audio listeners so uh this is going to work just fine so uh that was all for the player setup script now let's save this and build this and building the player here and by the way the shortcut that I'm using is contrl B let's hit play on this and U play in the game and let's select host and select client and we need to turn here you can see now that we are not getting any errors in the console and if we inspect in the hierarchy here the scene camera is disabled and uh the player that we own has both its player motor and the player controller and its camera but the other player here doesn't have any of these components enabled so this means that when we now move in the game we are the only one moving however it still doesn't update so we need some kind of way of sending this information over in the network and that's what we're going to be looking at in the next video so that was basically all for this video I hope you enjoyed it a lot and were able to follow along with the concepts uh if not you're going to get the hang of this uh don't worry um networking is very different from other kinds of programming and can be pretty hard to uh get a grasp on because you have to kind of think of so many different players connecting and interacting with each other so I hope that this made some kind of sense and uh if you couldn't get the programming site to work of course check out the GitHub page uh it's called multiplayer FPS tutorial and there should be a link in the description and if you enjoy this series a lot and want to support me of course you can go to bre.com donate and um yeah make a donation it helps out a lot so I hope to go fulltime in the near future and uh this is the kind of stuff that helps me do that so thanks a lot for watching this video and I'm looking forward to seeing you in the next one all