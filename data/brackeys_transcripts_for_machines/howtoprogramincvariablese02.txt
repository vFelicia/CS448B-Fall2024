in this video we are going to lay the foundation for pretty much every program you're ever going to write we're going to be talking about one of your most essential tools as the programmer variables variables allow us to hold information this means that we can create programs that react to what the user is telling them a good example of this is a calculator it takes some input does something to it and spits out a result so that's exactly what we're going to be making in this video but first this video is sponsored by Miller node Miller node is a free tool for organizing your creative projects into freeform visual boards it can be used for any creative project but it's particularly wellsuited for the early stages of game development which we all know can get pretty overwhelming at times besides just updating their whole template workflow milla node is now also available for both Android and iOS having an organizational tool at your disposal at all times can be so useful as you never know when the next idea for a project might strike that's it I'm genius there are some parties that everything is synchronized with your desktop version so no matter where you are you can make sure that those great ideas aren't lost if you want to have a look at Miller node in action go check out our video where we used it to plan a turnbased battle system and finally Miller node is free so get organized now by simply clicking the link in the description now you can think of a variable like a container variables essentially allow us to hold information in other words we can put stuff inside of that container and at any point during our program we can open the container and access the information and we can do this to either change it or use it to do something with a simple example of this would be if we want to write a program that takes in the name of our user here we would use a variable to store that name then later we can access this information and displayed in the program whenever we want however one thing about variables that we need to understand is that they can have different types the variable type indicates what type of information we want the variable to hold if we go back to our container example we can imagine the variable type as the shape of the container if for example we have a round container we can only put round information inside now variables can have all kinds of types but in csharp we work with four fundamental data types number one the integer or just int this type can store a whole number it can be positive or negative as long as it's a whole number number to the float this can store a decimal number again it can be positive or negative but this allows us to have decimals this can of course also store whole numbers but the integer is faster so we use that unless we really need the decimals also sometimes you want a very precise number and the float can only hold up to seven digits in this case we would use a double instead it's just like the float but it can hold up to sixteen digits number three the string this can store it text if for example we wanted to store the name of our user we would do so using a string whenever we write quotation marks in our code like we've done so far every time we've dealt with text we're telling the program that this is a string one thing to note is that we can fit both letters and numbers and all kinds of signs inside of a string but it will always read it as text it's not meant to store numbers like an integer or a float and number for the boolean or just pull this can be either true or false that's it it's either one or the other this is the simplest of the data types so when we want to make a variable the syntax is actually quite simple we write the type of the variable for example int followed by the name let's call it user age followed by an equal sign and then whatever value we wanted to have and of course a semicolon now csharp actually allows us to cheat here and just write var instead of the data type you'll sometimes see this when the programmer doesn't know beforehand what type the variable is going to be or if just being lazy in general it's better practice to write the actual type this is called being explicit and it helps us avoid making mistakes but enough talking about it let's try using variables to create something cool let's start out with the example we talked about where our program takes in the name of our user to do this we first need to have the program as the user to input a name so let's go console dot write line what is your name and then we create a variable so on a new line here I'm gonna type a string because a name is made up of text and strings are made to store text we then follow that by the name of our variable let's just call it user the standard naming convention is to have the variable start with a noncapital letter and then have individual words separated with the capital one so user name and we can go ahead and set this equal to some name and again whenever we're working with strings we want to put this inside of quotation marks so we could just put in John here and then end it with the semicolon however we don't know the name beforehand so instead of assigning our variable to John we want to put here console dot read line in other words we're saying that we're creating a variable called username of type string and we're setting it equal to whatever the user types in what we can then do is use this variable however we'd like so underneath here for example we could go console dot write line and have the program respond and we'd have it say something like hello and then here I'm going to go outside of the quotation marks and I'm going to add another word to this so I'm going to use the plus sign to append a word and I'm gonna put in the username and then we can actually keep doing this so we can add on more strings here so we can add on a plus again that goes comma nice to meet you there we go so you can see how we've constructed a sentence here where we first use a string called hello we then input another string which is our username which is going to be equal to what is typed in and then we add comma nice to meet you so if we run this program now let's go run start debugging the program asks us to put in a name I'm gonna put in Dwayne Johnson and indeed it says hello Dwayne Johnson nice to meet you awesome so this is probably the most simple example of gathering some input from the user and then using it afterwards in our program however just displaying a name isn't very exciting let's instead try having the user input two numbers and then multiplying them and showing the result so to do that I'm gonna go ahead and get rid of this code and I'm actually going to start out by creating some variables now I'm gonna make an integer here that means a whole number and I'm gonna call it number one it's okay to have a numerix inside of a variable name as long as you start with a letter so this is totally fine so number one and we could go ahead and set this equal to some numbers five however we want the user to input this so what we're going to do instead is actually not set it equal to anything just put a semicolon here this is called declaring a variable because we're creating a variable but we are not assigning it a value yet and I'm actually going to do that for our second number as well so let's create an INT again let's call it num2 and just put a semicolon as you can see we're currently getting a yellow underline on these two variables and that's because if we hover over them it says that they're declared but they're never used so let's go ahead and use them to do that let's first prompt the user to input a number so let's go consul start right and I'm actually just going to type right here instead of right line this way we can input a number on the same line that we're asking the user to do so this looks a bit cleaner we'll see that in a sec so console dot right and I'm going to tell the user to input a number and I'm gonna put a space here so that's the space between this line and the number that we're inputting and semicolon for that and then we can set our number one so num one variable we set that equal to console dot read line just as we did with our name however as you can see this is giving us a red line and if we hover over it it says that it cannot implicitly convert type string to int what this means is that whenever we read a line from the user these two could really input anything on the keyboard it could be signs text or numbers and so by default when we read a line it's of type string and our number one variable is of type int so we want to go ahead and convert from a string to an integer and we can do that using the convert class so before this line I'm gonna write convert and as you can see we can convert to a bunch of different types here I'm gonna use the to end and again there are some different versions here and that's just because we can have integers of different bit lengths so the standard sort of say is the 32bit integer and the only difference between these is how much memory they're taking up and in other words how large a number can they actually store so in our case we don't need to store incredibly large numbers so 32 is going to be just fine so I'm going to use 2 in 32 and then because this is a function we need to open a parenthesis and we don't actually want to close it here instead we want to input into this parenthesis here console dot readline because that's what we want to convert and then we're going to close it over here so in other words what we're doing here is we're asking the user to type in a number we're then saying well we want our number 1 to be equal to whatever we pass in and then we make sure to use a convert function to convert that to an integer so that it fits with our variable type I completely understand if that's a bit overwhelming it was for me when I started out but don't worry you'll get the hang of it very soon and before we move on to the second number let's just try this out so I'm gonna hit f5 to start the program as we can see it asked me to input a number I'm just gonna put in 12 here and nothing visually happens but we know that we are now storing this variable this number 12 here in our number 1 variable so let's go ahead and close this and let's do that for the second number as well so that we can multiply them together so let's do console dot right we're gonna say input a second number and then we're gonna set num2 equal to convert dot two and 32 and the thing that we want to convert is console dot read line and as you can see we're doing the exact same thing here and here I'm just changing the variable number and so to multiply these two numbers let's go down here and let's create a third variable again int and this is going to store it the result and we can simply set it equal to number one our first variable x number two our second variable and that's it the computer is now going to multiply these two values and we can show it just as easily by going console dot write line and saying the result is and then again we use the plus here to add the result on to this string and if we run this now we can type in a number I'm gonna put in 12 let's type in a second number I'm gonna put in five and indeed the result is 60 really really cool so we've actually now created a simple calculator but kearney this only works with whole numbers if I were to run this program again and inputs a 1.5 it's going to throw us an error because 1.5 is not a whole number and we are using integers so let's stop this program from running and to fix this we can simply change the type of our variables from int to say float to store a decimal number or if you wanted to be really precise we can use the double actually in our case let's just do that so let's change these two variable types to double instead of converting to an int 32 we want to convert to a double here so we simply change this to convert to a double and let's do that here as well so to double and then finally the result as well we also want that to be a double and indeed if we now run our program again let's input a number let's do 4.5 and a second normal let's do 2.5 and indeed the result is 11 point two five awesome so now we can actually do really accurate calculations with decimal numbers and if you want to change this to say divide instead of multiply we simply go into where we calculate the result here and instead of inputting a multiply sign here we use a slash for division and again if we run that we can say divide five by two and the result is two point five awesome now I of course want to give you a challenge to complete before the next video this challenge is going to be to take the average of three numbers see if you can do this in code by having the user input three different numbers then the program can calculate the average and write it in the console remember that to find the average of three numbers we first add them together so number one plus number two plus number three and then we take the result of this sum here and divide it by three so we take the result of that and divide by three that gives us the average of course I'll make sure to post my answer to the challenge on the practice firm in case you want to have a look at how this can be done that's of course anything for that in the description but I recommend you try it out yourself first so good luck and have fun that's pretty much it for this video if you enjoyed it make sure to subscribe and bring that notification Pelzer don't miss the next one also don't forget to check out Miller node again it's free and a great way to organize your projects exhibiting in the description to get started on that thanks for watching and I will see you in the next video thanks to all of the awesome patreon supporters who donated in May and especially thanks to face Samara fire lost to violence love forever replicas studios Navi ninja SRT Mike Jason arretez COO Luna said P&O satin black donut in Cascone tanta Sam Jacob Sanford no Kiawah sake mug Antoine Gerard Gregory Pierce Michael Cobb of the mighty Stu's Owen Cooper as in the Pierce Erasmus and serious warning you guys Rock