I think it's pretty common among game developers to be fond of particle effects and I am personally no exception that's just something inherently satisfying about watching these tiny particles float around the screen especially when you start to increase the number of particles and so it doesn't take long before you start to wonder how many particles can I actually get so let's put it to the test but before we get testing this video is sponsored by Jason Wyman he's the creator of the amazing unity 3d master class which takes you all the way from the very fundamentals of game dev to using unity on a professional level it will teach you the principles of solid code architecture and how to build a variety of game types he even offers an amazing the eye course that will teach you how to make your very own VR game throughout these courses you will get familiar with packages like cinema Sheen timeline and Pro builder but what's really awesome about these courses is that all students get oneonone help from Jason himself throughout the course and you even get to customize share and showcase your work with other students sign up now and the first 50 people will get a free tshirt from our merchandise shop line of code as well as a big discount and other bonuses on both courses simply click the link in the description and get started but we aren't completely done yet because right now we are launching a completely new limited edition design created by our own inhouse artist Thea that will only be available for a week so if you're getting ready for your next crunch session at work or at home make sure to grab it while you can so unity will you blend at I mean break anyways I started by setting up a quick testing using lightweight and downloaded graph II which is a really solid asset store plugin for measuring performance I also made sure to turn off vsync to avoid my framerate getting capped at 60 and with that it was particle time so I started with shuriken unities cpubased particle system and as I expected it handled 10,000 particles without breaking a sweat of course all these tests are going to depend on the hardware you're running my build is on the screen now next up I tried with 20,000 then 40,000 still the average FPS was above 200 now just to clarify the particle system here is using the standard billboard rendering settings with no forces applied other than a start speed I also noticed that I was getting a huge performance increase when playing the simulation with the game view maximized probably because unity is removing a lot of engine overhead in this case so I continue doing this throughout testing next I doubled the number to 80,000 then 200,000 at this point the simulation was finally starting to slow down and at 400,000 my FPS had dropped to 25 so I decided that 400,000 particles might be enough so that's pretty much it for this week oh you want more well so did I so after putting together a quick graph to show the decrease in fps based on particle count I was ready for round 2 the visual effect graph or you need is GPU based particle system first I installed the package and set up a quick graph based on the default swarm template as you can see here it uses simple quad rendering and the particles are moving using a vector field force block so here is 400 thousand particles running using the effects graph no problem the same thing can be set for 1 million and two million and 5 million allhail modeling graphics cards in fact the biggest problem was to get my screen recorded to capture all the detail without slowing down the computer too much at 10 million particles my framerate finally dipped below 25 at first I thought we have reached the end 10 million is the highest we'll get but then again maybe we could do something to optimize it so I started by simplifying the movement of the particles I tried making them completely static and just spawning them randomly within a sphere however to my surprise this had pretty much zero impact on the FPS at 2 million particles my frame rate increased from 117 to 118 not ideal next are tried spawning all the particles from a point and then applying a spherical velocity again no difference at this point I concluded that movement wasn't the thing slowing everything down so instead I moved on to rendering here mr. round with a bunch of settings like soft particles ways of setting color and different blend modes all with no significant change not until I tried making the particles opaque this immediately doubled my frame rate of course rendering opaque sprites at this size just makes everything look like tiny dots so I changed the renderer from quad twopoint and all the sudden I could run ten million particles at a hundred and fifty fps this might be the time I've been most excited about optimization like ever of course discerning individual particles from each other is really hard with point rendering currently it just looks like one big black dot so to solve this I added a combination of vector field forces and turbulence and changed their color based on noise I think that definitely looks a lot better and as we discovered earlier these factors don't really impact framerate all that much so I increased the amount of particles yet again to 20 million and then 50 million and here it seemed like we'd squeezed out all the particles my computer could handle I also tried lowering the graphics settings disabling lights as well as postprocessing all of which had no impact at all I even tried changing to HD RP which only made it worse finally I had the idea to try and create a build which would allow me to close the unity editor and run the simulation as a standalone with that and all the other performance enhancing settings I could think of I managed to squeeze out 80 million particles at around 20 fps it isn't pretty but I can tu they are they're so feeling pretty satisfied I showed all of this to andreas who slowly turned to me and said well that's all fine and dandy but can you make it rain we shared a telepathic moment I slightly raised my eyebrows and with a smug smile I replied yes yes I can and that's pretty much it for this video if you enjoyed it make sure to subscribe and ring that notification bell so you don't miss the next one also make sure to check out Jason's courses simply click the link in the description and get big discounts along with a free tshirt from line of code this of course also includes the new limited crunch time design but be quick because at the time we have reached next week's video it won't be available and that thanks for watching and I will see you in the next video thanks of the awesome patreon supporters who donated in May and especially thanks to to cencon of Sookie Daniel de Sonic Nokia Vaisakhi Shane Cleveland Chris Sullivan Constantinus Carranza's in Finley PBR face on Murphy Leela set Ronan Gregory Pierce Tim of holder Park curiously the ski and Erasmus you guys Rock