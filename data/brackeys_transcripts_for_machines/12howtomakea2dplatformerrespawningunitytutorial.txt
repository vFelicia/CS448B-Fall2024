thanks for tuning in at brakus hello everyone welcome to video number 12 in the how to make a 2d platformer course in today's video we are going to be expanding on the subject of last time and now creating a respawn method that will of course be triggered whenever our player dies so let's just head right into unity and as usual if you have any questions whatsoever please go to forum practice comm where I among many other developers just waiting to answer your questions cool so first thing we are going to do here is we are going to head into our TM object under the game master script so double click that to open it up in monodevelop and we can see the right now this this only has one method called the kill player so let's expand a bit on this let's go ahead and make kind of a improvised single to singleton pattern I'm not going to show you how to do a full singleton but I will show you how to make sure that we have an instance of game master running that we can access so if you don't know what a single person pattern is it's basically basically a way to make sure that we only have one instance of a class in any given scene so the way we are going to do this here is we are going to make a public static game master and we're going to call this let's say GM we could also call it instance and then in our start function so void start we are going to say if GM is equal to null then we want to set GM to game object dot find I don't remember that we put a tag on GM let's just do a tag here so add tag game master or GM I'm going to do GM I think just GM or we need to remember to assign it also like this and we've actually not made this intro prefab so let's just go ahead and do that to drag it down here and now cool we can head back into the game master script and I'll say find that find game object with tag make sure that this is singular and then we're going to write GM so what this does is basically we have with a static variable called GM and we set it to the instance of the game master class if it's not already set so this is just a way for us to always have both a reference to static stuff like this by just doing game master kill player but now we also have a reference to the instance of the class so we can do stuff with with the unity inspector we can drag things in and change things in there and this is super cool because now we can whenever we want to access such those we can just use TM so to show you what this means since in in practice let's go ahead and write a respawn method so let's do public void respawn player and I don't think we're going to be taking any arguments and now what we can do inside of this is we can let's say first off spawn our player so let's create a public transform that is going to be the player prefab and yeah we're just going to start off with that so we can say instantiate player prefab and now we need to the position and here we could just make a reference to a spawn point so let's do public transform spawn point and then we'll do spawn point dot position here and then spawn point that rotation over here this way we can simply assign a spawn point in the inspector and drag it around if you want to change it we could also randomize this later and make an array of spawn points so we can spawn multiple places but for now we're just going to stick with one let me know in the comments if you want to see the random version cool so now that we have that in there what we can also do which maybe we could in a future video also add some particles on to this so I'm just going to debug that lock to do add spawn particles and this would be a great place to do it you would simply create a transform with a reference to the particles and instantiate them here just like we instantiated the player so now that we want to call this respawn player function in the kill player method all we have to do is simply say GM dot respawn player and now we've called the method so if we save this now and head over into unity we'll see if we have any errors cannot implicit the convert type Unity game object to game masters let's see what's going on here oh yeah we have to do game object I'd find game object with tag so we could here to dot get component and then game master to make sure that we are getting the game master component and not a game object we could also just change this to game object but I think it makes more sense that this is of type game masters of type the class here cool so now we head back into unity and let's see if this is working so we play and oops we of course also have to assign our player prefab and our spawn point so now head into the project and let's first off find our player prefab make sure that you apply all changes and if I remember correctly we actually didn't drag him out of the sample assets even though we've changed him so much so go into there on the 2d and the prefabs and here he is so let's just drag him into the root folder into our assets folder and now we can select the TM object and drag him onto the player prefab position now the spawn point let's go ahead and make an empty game object so just do command shift N or control if you're on a Windows let's reset the transform so we know where we have it let's call this spawn point and maybe just drag it up a bit so he won't spawn inside of the ground so let's just put it there looks fine so okay that it it's on top of the place where he's he starts and now we can actually label this just like we have labeled the ceiling check and the ground check let's label the spawn point so we can easily find spawn points throughout our scene so to do this simply click on the box here and we can now select an icon we could also import an image as an icon but we can just use one default one so let's do the purple one here and you can see that it will name it spawn point you could also do one of the one of the shapes it's it's completely up to you I just like having the name on there so now that we have that available let's go ahead and maybe drag this under the GM object it makes sense to have it there and now let's hit apply oh yeah we also have to drag it under the spawn point slot and now let's hit apply to apply all changes to a GM object now when we hit play and jump down you can see that our player instantly reappears but that might not be what we're interested in many many games have this delay to kind of punish whenever you die so in order to do this we could maybe or punish the player by simply reloading the level and therefore every progress he's made is just going to be gone but instead what I want to do at least for now is just create a timer that will count down a couple of seconds before we respawn the player so in order to do this we need to use the or we could use the yield return new waitforseconds and now we can put a time in there let's make a public variable for that so public integer spawn delay and then inside of the wait for seconds we're just going to put the spawn delay and let's default this to let's say 2 so this will wait a certain amount of seconds in this case 2 before it goes ahead and instantiates the player also it would be a great place to put some kind of audio that will play or tell us that our our players responding we could also do some DUI I don't have too much time for in this video to do all of the particles and audio and gooey stuff but that might be for future video again if it's something you're interested in please leave it as a comment and I'll make sure to create a video for it but here we can just for now leave a to do that we should add waiting for a spawn sound cool and this looks pretty good but it won't actually compile and the reason why is whenever we do a yield return new waitforseconds where whenever we use the yield here we have to make this not a type void but the return type I in numerator again I've talked about this in other videos if if you're very confused by this please go ahead and look up coroutines in unity and things will make a lot more sense but for now just know that this is something we have to do and whenever we recall an eye enumerator we we can't just do GM that respawn we actually have to write a DM because we're calling it on the GM object dot start corroding and then put in the GM dot respawn player and make sure you have GM in front of both the stacker routine and the respawn player or it's not going to work cool so now when we save this this should be working just perfectly so we hit play we jump down wait a couple of seconds one two and there he is cool so you will notice that right now we are indeed spawning and we can jump around and we can do this as many times as as needed but our camera isn't really following anymore and the reason why is right now in our camera script if we open that up the camera 2d follow actually I just want to quickly drag this out from the assemble assets to into the assets folder there it's just been annoying me that it was inside of that folder when we are actually using it so much in a game now let's open it up and you will notice that the reason why we are sorry our camera just disconnects is that we've put this if Tiger this equal to null then return and the target stays null we we need to implement some kind of functionality that will check or search for the player when he when we don't have a reference to him so what we could do is have something in the game master function that's that sends over a reference to the player whenever he's instantiated or we could just inside of the camera 2d follow script make a function that searches for the player and when he finds it sets the target target equal to the player so I think we are going to go with the second method but if you would like to do the other one please experiment cool so again we are going to check if our target is equal to null but we are going to do more than one thing so let's just open up some brackets here and the first thing we're going to do is now we are going to find player yeah just find player or we search for player whatever you want to do so we're going to call this find player method that we're going to be making in a sec and then we want to return now we can go ahead and make this method and it's just going to be a normal return type of word which means we won't return anything and we're going to call it find player and inside of this what we want to do is we want to use game object that find game object with tag on the player but this operation is actually pretty taxing on the computer and not something you should be doing every frame so instead let's go ahead and make a kind of a delay that will make sure that we only search for the player let's say two times a second so to do this what we want to do is we want to first make a private variable up here of type float and we're going to call this next time to search and we're going to default this to zero and this is going to star the point in time that we want to do on its next search for the player and now inside of define player we can simply say if next time to search it's less than or equal to time time so if the point in time that we want to search has passed or is equal to right now then we want to find our player and we do this using a game object dot find game object with tag again make sure this is singular and the tag is going to be player and remember whenever we search for a tag we need to also check that our player has the player tag so if he doesn't make it now and let's just store this in a temporary variable so let's do game objects and let's just call this search result because if we don't find the player this is just going to be equal to null and if we find him this is of course going to be equal to the player so what we can do now is we can check if search result is equal to null then we can or is not equal to null as what I meant to say if it's not equal to null then we can set our target to be equal to our search result dot transform because if we just said that directly we will get an error whenever we try to access the transform because we can't access the transform of null so we want to make sure that it's not null and then set the target to the search results transform and then down here what we want to say is that our next time to search is going to be equal to time time and then plus whatever delay that you want in between searches so I'm just going to do let's say it's 0.5 so we will search 2 times each on each second so if that makes sense to you now let's head back into unity and let's see here we can implicitly convert a double to a float so where are we here oh yeah of course we need to change this to an F so now inside of unity we are errorfree and under our GM objects everything should be looking just the same but now when we go ahead and hit play and we jump down our camera to search for our player and it's going to snap right back to him and it's even going to do so smoothly because of the way we've done movement with the camera so that's it for responding our player I think this looks pretty pretty awesome actually and next time we might have a look at doing something with some audio or some particles or something but that's completely up to you if you want to see it leave it in a comment or in general if there's something else you want to see just leave it in as a suggestion below so again thanks for watching and I'll see you in the next video