thanks for tuning in at brakus hello everyone and welcome to video number nine in the how to program in C sharp course in today's video we're going to have a look at storing multiple pieces of data at once using a container so there are many different types of containers that allows you to do this and the most basic one the one we are going to be looking at first is what is called an array so arrays I basically lists of items where you know beforehand how many elements are going to be in the list so cannot change the amount of elements then there's another type of container called lists and yeah it's weird that arrays basically are lists in real life and lists are also lists but bear with me here and lists is it's basically something we use when we don't know how many elements we are going to need so you can add and remove to the list as you go and when we're done with all that hopefully we'll have time to look into twodimensional arrays or jagged arrays and their else as they're also called but those are just a bit different okay so let's dig right into it as always if you have any questions or you'll find something confusing head over to farmed or brackish to come where I am among many others are ready to answer your questions and it's it's very fun awesome so let's open up summer in studios and we're going to have a look at arrays so first off we're going to type the type of element and the variable type the data type of the elements that are going to be stored in the array so let's start out by making an array of integers and to make sure that the machine knows we are going to be creating an array we type an open square bracket and a closed square bracket these are pretty much symbolic of a race in csharp then we type the name of the array just like any other variable and we're going to simply do numbers then we set it equal to something and what we are going to equal it to is a new int array and then a semicolon this new keyword here is something we use each time we spawn or create a data let a piece of data and that's what we're doing here but however when we're creating arrays it needs to know how large it should be how many numbers can this array hold so we give it just that information by typing in the number inside these two square brackets and we are going to type in let's say we want five numbers cool so how do we access these numbers and how do we set them equal to something well it's actually really easy we simply do numbers sub let's see zero they arrays are zero based so if you want to access the first element you type in 0 1 for the second two for the third and that and then you just go so we're going to set the first element in the numbers array equal to let's say 12 then we're going to have numbers array 1 sub 1 be equal to 3 numbers sub 2 equal to 5 and we can just go on here but I'm just going to leave the rest of them and they will default to 0 so if you want to write out a piece of data to the screen from this array we simply do console.writeline and then we can access it very easily by doing numbers and then let's say we want to pick the second element so we're going to do one and then close off the square brackets there so numbers sub one and that's going to write out 3 so now when we hit play what it's basically doing behind the scenes is it's creating a new array that can host up to or that will host five numbers and then it's setting the first one to 12 the second one to three and the third one to five and then it's printing out the second which is three awesome so but let's say we want to write out all of the numbers we have in our array so now we've looked at creating arrays at getting a setting values but now we need to loop through our array and that's actually really easily done using a for loop so we'll just write for int I equals 0 is less than and then what we're going to do here before we've just written a fixed number let's say 210 we want to loop through something 10 times and we could just write 5 here but even better we can access the length of our array so we can do numbers dot length like this and then do I plus plus because we want to increment it each time I'm going to try and force summer in studio to do this because I think it's easier for you to read cool so one thing I quickly want to mention also is we could have an integer up here called let's say amount of numbers and set that equal to 5 and then in here we could put amount of numbers that's totally legitimate if you want to do that just so now cool so inside of this for loop will now write console dot right and inside of this we'll do numbers and then I so basically what is going on here is we are creating this array and populating it then we are doing a for loop that will set creating a variable called I set it equal to 0 then it will loop through and increment I each time and it will cou keep doing that until we reach the end of our array and then what we are actually doing is we are writing out the number at the ice precision so the cool thing about this is if we just make this easier to read by doing comma space like that is that it will automatically print out the different numbers in our array which is 12 3 5 and then to default zeros awesome another way to do through an array is with what is called a for each loop and this is very popular especially among beginners because it's much easier to remember syntax wise there are some some differences performancewise between a for and a for each loop but I don't think at this level that it's something you need to worry about yet because it's not as simple as for it's always faster or for each it it really depends on what you're doing with your for loop but you simply do for each and then you say int number in numbers and then open up the addi brackets I'm going to put them down here and then in here we can write out console dot right and then we simply say number + and then fill the same here like that so this looks much easier and and really it is basically what we are saying is that for each integer in our numbers array will create an INT called number and we can then use that number down here so we're basically making a variable here that is that element so that's super cool and one thing you will notice is that if we change number in here so let's say we said number equal to 5 this will set all of the elements equal to 5 and then we print out console dot write line we'll just make one empty line and then below it will ride out and that's same numbers sub let's say 1 or 2 let's do 1 and if we hit play here it will say that we cannot assign to number because it is a for each iteration variable and what does that mean I mean this has confused me from the beginning and a lot of other beginners too and basically what is wrong here is that inside of this for each statement we are basically creating a clone of each element and calling it number so when we try to change number we are not actually changing the elements in the array but we are trying to change this forest variable and that cannot happen so we're basically doing something we cannot so for each statements are awesome if we don't need to change things in the array using them you can do so using some trickery but but really they're awesome for just accessing stuff cool so now that you know that we are going to comment that out and have a look at the next thing in our reign yeah before we move on to lists I quickly want to show you that instead of writing this out each time you want to set a number you can do this much easier and now we're going to create a string array you can use strings or introduce of floats or any data type for the array so we're going to create a string array and we're going to say we want three strings and we're going to call it names and instead of doing a names sub 0 equals and so on what we can do is instead of that semicolon we can open up some brackets and in here we can type first name which is going to be Tom then we're going to have a mark and a Matt like that and then remember at the end here after the second curly bracket the closing bracket you will put in a semicolon or it will not work so the cool thing about this is that it's very very easy to populate array and if we just want to print this out we can use our for each statement again just change this to string change this to name change this to names and that term name and now when we hit play it's going to print out tom mark and Matt so that's super cool great so now we're going to move on to lists so we're going to comment out for each once again and we're going to delete this and we're going to delete the arrays for who because now we are at do any lists awesome so lists are basically function as basically the same as a race just within a tiny bit of different syntax and really you should only use lists when you don't know beforehand how many elements are going to be in them because if you can use an array an array is generally going to be faster and they can be quite a bit faster so now that you know that we're gonna I'm gonna show you how to use them so firstly in order to use a list you're going to have up here to include it so we're going to type using system dot collections dot generic don't ask me why we have to type exactly this yet but basically what we're doing is we are saying we want to import a bunch of functionality that is in this collection a generic namespace so we are basically are importing a bunch of stuff that is really common and really useful now we can then type list and then we're going to do these less than and or and greater than signs and inside of them will give it the data type so that's going to be of type integer whoops and we're going to call this again just numbers and we're going to say get set it equal to a new list again of type int here and then remember eight open open parentheses and a close one that's the syntax for creating a new list so it's a bit different but the cool thing here is that we can then go numbers this is going to be empty by default by the way we and then go numbers dot add and then we can just give it an item here so we're going to add let's say 13 numbers dot add we can add maybe it 4 and you can do this as long as you want to so we're going to add three numbers here and then we're going to do an 8 then if you want to access it just like a normal array you would do console dot write line and basically by the way a easier way to do console dot write line if your tab typing really quickly is just to do CV and then tap tap I just wanted to show you that it's pretty cool then we can write out numbers and then access by doing this up again here so we are accessing let's say the second element and now when we hit play here or run it's going to print out four so you can do that so when actually dealing with a list it's it's the same syntax as an array so that's kind of nice okay so now that we know that how to remove from how do we remove from an array well it's actually pretty easy again so let's add three numbers let's loop through using our for statement and remember when you are using lists don't use that length now use dot count it's a pitfall so many people fall into and get annoyed by this in my code running and all that it's you need to change it don't ask me why cool then what we can do down here is we can do console dot write line just make an empty line there and then we can remove or do numbers dot remove at and then you're given an index so you give it a location you want to remove from and let's say we want to remove the second so we're going to be remove at I'm pretty sure that's not zero based but we'll find out here so we'll do four and I and then print it all out again so that's hit play here and it's going to print out thirteen four and eight and is actually zerobased so we're going to remove at one there we go so we've we've removed the middle number so we print out thirteen four and eight we add those print them out create a new line remove at the one position which is two four and then print them print them out again cool you can also see here dot remove you can also remove by inserting kind of what element it should sort for so if we want to remove the four by typing in four here it will do so just remember that it will removed the first element that matches its search parameter and then just leave the rest so that's kind of yeah just keep that in mind generally it's it's much better if you know the index awesome so that was lists and how to use them at last we're going to look at something pretty cool which is the twodimensional or multidimensional array so multidimensional arrays these are very awesome for a bunch of things you use them quite a lot when constructing games for it for a certain so let's create a new function here and we're going to call this kraid grid let's say we want to make a grid of numbers and that could be used for a map it could be used for some data modeling it could be used for all kinds of stuff and we want to print out this grid when we've created it so let's call the create grid function here and yeah awesome so first off we need to declare the multidimensional array and it's actually really easy you just go into open square bracket and then comma close square bracket now it knows that we want a two dimensional for three dimensional you cama cama and so on then we can type on say let's just call this grid and we're going to equal it to a new multidimensional array and of course we need to give it a size so we're going to do a 5x5 grid then down here we can of course populated with data if we want to I'm going to do so using a we could do so using a for statement but instead let's just try and print it out because of course if you want to publish a number here we can do one quickly let's say we want to change and the second row and the third position we could do like that and then simply equal it to let's say five or three maybe and that's up to you and then we can print it out using two for loops so let's first create for int and then we could do x equals zero because we're going to have an X and the y here as long as X is less than grid dot and in here if you don't want to do just length because that's going to get you the total number of elements in all of the the arrays dimensions instead you can do get length and then you can give it the dimension that you want to search for or you could just and this is what you're going to be doing most of the time create two variables up here one called int with we're going to set that equal to five and another one called int height which we are also going to equal to five and then instead of five here we are type with and whoops and height and then down here as long as X is less than with X plus plus to increment it open up the brackets it's so annoying that xamarin studio does that and then for int I know you can change it by the way I'm just too lazy so zero y is less than height y plus plus and oops my keyboard spacing out here but we'll get it working so I think this is the first time that we've done a for loop within a for loop and basically for each iteration of X it's going to do y iterations here so for each element in in one direction it's going to one direction it's going to loop through the height amount and then we can simply access each parameter by doing console dot write and we are going to write out the grid at the X comma Y position and then we're going to do a space between them also so nicely done now we can hit play and whoops of course we need to also create a new line for each time we've looped through one iteration on the X so we're going to do console dot rewrite line down here and now we should see a grid created indeed we are we have and this is basically the foundation of creating maps and such in games you're going to use it all the time so that's super super cool and this is the kind of the easy way to make a minecraft clone it all starts with this call and of course we can now increase this to whatever magnets here that we would like we could do a 20 by 20 and I think I'm going to remove the space here and we could also delete this that's no reason for that to be there and we can play and you can see it will create these huge grids for us and we can of course also assign to it as we go along so we can say grid here is going to be grid X comma Y is going to be equal to x times y for example and you can see what that does whoops so now we are starting to need spaces maybe we should just do X plus y and then do a space in here it's a fun way to play around with mathematics because you can get these coollooking shapes like this awesome so and that was an introduction to kind of arrays and what you can do with them two dimensional arrays how to construct grids lists all that the kind of very accessible containers that you might encounter and the last thing I want to remove just mention is there's something there's another way of creating multidimensional arrays which is called jagged arrays and the syntax is just a bit different instead of doing int one think I'm another thing you just do two brackets and this is basically an array of an array and you can of course call this grid also and equal to a new int array of array and then do with color height and everything from here is pretty selfexplanatory I just wanted to mention that this is another way of writing the code and again when when you should use one another really depends on the situation it's not going to make a big difference for the kind of applications that we are writing here but you can of course look it up and read about it if you are very interested in making your your application very performant so I just really wanted to show you that that's another way cool so that was basically all four containers for arrays and lists in csharp and yeah thanks for watching I hope you enjoyed it and I'll see you in the next video