thanks for tuning in at brakus hello and welcome to video number 10 on making a multiplayer FPS in unity in today's video we're going to have a look at creating three different things so first up will be disabling the graphics for our look local player so that they want going through front of the camera and be annoying so that's kind of an important fix to make second we are going to be adding our first player GUI element which is going to be a crosshair and third we are going to be removing the warn warnings that has been displaying in the console since we last updated unity so the version of unity that I'm going to be using today is five point three point one and at the end of this tutorial we should be warning free so that's awesome another thing that's awesome is that this is already video number ten I'm really enjoying making this series I hope you're enjoying watching it too if you are you know what to do so let's jump right into today's video cool so you can see here that I've already opened up unity five point three point one and pretty much everything is as we left at last and you can see that we have these annoying console warnings so I just don't bother look to look at them right now what we are going to bring our attention to at first is the disabling of this annoying graphic here so when we go and host this you can see that our player graphics are in the game which is great but we can also see them for our local player which is kind of not so great so we want to kind of disable these and the method that I want to be using in order to do this is by using the building culling mask functionality of the unity camera so if we go onto our player here and go to the camera object you can see that there's a property here called culling mask and it's currently set to everything what this allows us to do is we can add a layer and add certain game objects to that layer and then uncheck that layer from this list and then it won't be drawn simply none of the shadows will be drawn on none of the graphics or particles anything on that layer won't be drawn so that's really really easy to do and it's going to function quite well so let's start by adding a new layer so let me go to add layer here and the layer that we want to add we're simply going to call it don't draw it's very easy make sure you spell this correctly throughout the tutorial that's very important of course then we can go to the camera go into the culling mask and simply disable don't draw and now everything is going to draw except what is on the don't draw layer you can of course also disable up this stuff here too ah great so what we then need to do is you might think well let's go into the graphics and change the layer here to don't draw no because then when we spawn in the player fall of the difference are clients that are connected none of the graphics are going to draw because it's going to spawn with the don't draw layer associated to it so what we're going to do instead is we're going to set this through script only if we are the local player and a pretty relevant and place to do that would be in the player setup script so let's double click that to open it up in visual studio and we'll just add a few lines of codes to this and so show you a pretty nifty way to do it then we add a serialize field here and this is going to be a string and that's of course going to store the name of our layer you could just hard code this in but I'm going to stick to the convention that we've made here where we have the layer names available in the inspector so this is going to be the don't draw layer name and that's simply going to default to don't draw there we go and next up I simply want a slot here serialized field which is going to be a game object and this is going to be a reference to our player graphic so player graphics there we go then in the start method you can see that we check if we are not the local player well then we want to disable some components that we only want to the local player to have enabled such as movement but this is quite the opposite so we go down into the else statement here where we disabled our scene camera and just below that we can arm disabled player graphics for local player and the way that we do this is by making a method ourselves which is going to be the arm set layer recursively so we're going to add this in recursively I think that's how you spell it and it's going to beg oh we're going to pass in our player graphics and the layer but we're going to pass in the layer as an integer so to convert it we go to layer mask dot name to layer that will take in the string and find it and return the index as an integer so we simply pass in here the don't draw layer name and close that off and a semicolon so we haven't actually created this method yet but it's very very easy and handy so this is the first recursive function that we've made and what is a recursive method I don't want to go into too much technical 'ti with this but basically we're making a method that is calling itself so we are making itself referring our method and that sounds very scary and you definitely have to be careful because if you you can very easily get into an infinite loop and if you do that inside let's say the update method or then the next frame is never going to be reached and therefore your game is going to crash so recursive methods are definitely dangerous but just think about them very hard before you actually implement them in the game or at least test them out so we're going to make a void method here and it's simply going to be called set layer recursively there we go and it's going to take in the game object objects and then the layer which is going to be an integer and that's going to be the new layer here so what this method will do is it will of course change the layer of the object that we've set here but it will also change the layer of all of the child objects because unity doesn't actually have a good way of doing this and that's why we are making this method so what we first wanted to do is change the object layer here so simply say oh btw eight that layer equals new layer then we want to loop through all of the different child objects and do the same for those so we're going to say for each and then we're going to say transform we're going to call it child in obj transform so that's going to go through all of our different child objects and refer to them as child and you might be thinking well then we simply say child dot game object dot layer equals new layer and that's fine if you only want to loop through all of the different child children and set them equal to a new layer this is not a recursive method and the problem with this is that it won't affect children of children or our children further down the hierarchy so this will only go through the first children that it finds and that's a problem because we wanted to change all of the stuff under our graphics object so what we do instead and some of you might have figured this out is we call the set layer recursively function so we call the method inside the method and we pass in child dot game object and again just the new layer so the first time that and we go through this it takes the player graphics call set an object sets it equal to the layer that we've passed in here then it goes through all of the children off the player graphics object and it calls the same method here so for the first children child it's going to set the layer it's going to look at all of those children and do the same and you can see it very quickly branches out through the hierarchy so if you have a lot of different nested objects this is going to require a lot of processing so it might not be the cheapest method but it's going to work just fine for our purposes because we're only doing this in the start method and frankly we don't have that many game objects so that's going to be just fine and that's basically all we needed to do I think so let's jump back into unity here you can see that I'm getting some weird errors here and I think you can just ignore those and those are errors from unity so now if we simply hit play I think we should be able to try this out so let's go into land host and no of course we forgot to reference on the player graphics here so expand that prefab go on the camera and drag that in there excuse me I'm just going to have a sip of water here and we can keep going good so make sure you reference the camera and that this layer name is correct and let's try this again so I play LAN host and something is not working let's go through here and see okay so these aren't actually being set for some recent unities throwing a bunch of errors here and I'm kind of afraid that that's the reason that this is not working so you know what I'm going to do I'm just going to quickly restart unity here and I will be right back with you so just give me one second and I'll be back okay so I've looked at bit around here and also done some searching on the internet and I actually found out what was wrong with our game so the reason for these errors is something that I has been wrong with the unity editor for a little while now concerning certain particle systems that are set up and the behavior is really weird and only happens on some systems and I'm definitely going to write out a back report but it's not something that actually breaks the game so I think we're just going to be continuing here and the reason why the other stuff wasn't working it's because I forgot that it's not the camera that we need to drag in here it's the graphics object there we go so now it works and the last thing that I decided to do here was that I was messing around with ways to get these are warnings to disappear and I found out that of course was the particle systems under the thrusters that we're causing the problem and then I had a look at this this model once again and I actually decided that I liked it better without the thrusters I kind of liked the way it looks here just as this round bowl thing so that's what I'm going to be going for for now at least until unity fixes this error if you want me to look into this more I can of course do so and then I suggest you leave a comment or go to the forums and they'll definitely help you out but it's not something that we have time for on to look more into in this video and frankly not something that I might be able to solve it if it's a deep problem within unity so I'm just going to be disabling those now and you can disable the particle system so we try and mess around with them there's plenty of information on this on the phone if you are getting the same warnings or errors cool so I'm just going to hit apply on this guy now and delete him and we should be seeing this working so we go under then host you can see and then of course it doesn't so wait I must have screwed something up if we go into the camera here yeah of course I uncheck the don't draw there I believe I check that back on when experimenting so now you can see that everything is drawing in this scene and this is how it will appear to other players but inside of the local view here you see nothing nothing is obstructing the camera and you can see that the shadow is also gone which I kind of like so that was actually fairly easy at some point we might make a separate method for drawing the gun if say you don't want the shadow down here or two in order to fix our clipping issues like these it's not too bad with this gun but it might get worse with others and will maybe have a look at that at some other point but that's going to be fine for now so onto point two of this we which was making the cross here so let's start by actually making the asset I'm going to be using Photoshop for this I'm going to of course include it in both the github project which you can download and in the assets pack which you will find on the practice website under this project of course and you can also find your own on the internet it's very easy to make this kind of stuff or find it and there's much of lots of royaltyfree on the cross hairs on the internet so I'm just going to call this crosshair and there are a bunch of ways to design a crosshair first off double click on the background rename this BT and let's fill that out with a gray color and yeah let's just quickly add something in here so let's go and do the ellipse tool here and let's set the radius here to something like 10 pixels the color is going to be white and let's try and drag something out here um I'm also going to whoops I want that to still be there but drag down some guidelines so we can find the center of our canvas and that looks actually kind of decent might need to move that in a bit or some be scale that in here so that we have room for a stroke around it later it's actually too much scaling there we go I'm simply going to duplicate this and move it over here also select these to duplicate them again I'm using ctrl J to duplicate them and simply rotate them around here and in order to rotate them I'm using shift or first off I press ctrl T and to bring up the transform controls and then shift and rotate so that's kind of how I was doing that and this looks very decent except that we have a off by one pixel here so I think that we are going to give this canvas one more pixel to work with I know that this is kind of forbidden but it's going to be good don't worry so there we go and that kind of introduce some artifacting so let's do that let's find the different pieces here that's that one we're going to move that one over and these have course not correct anymore so that's the center there and that's the center there and this is already looking better so now we can take the bottom one and move that down and for some wheat reason this is still looking kind of wrong can't quite put a finger on what it is something is still off here so it might be the bottom crosshair that we need to move up actually yeah that was was that was what was wrong and we can take yeah so this whole thing is not going to be exactly centered on the image but that's alright because now we're going to be adding a stroke so let's just add a group for these just call this crosshair add all of these to the crosshair group and double click on that go on this stroke and I'm just going to add a simple black stroke here that's going to be fine and this already looks kind of decent so that's cool and we can of course just crop this image to fit there we go so hide the guidelines pressing ctrl H hide the background and let's save this so I'm just going to save mine under projects multiplayer FPS multiplayer FPS assets and then make a folder called GUI and it's save it just as a crosshair you remember you can save Photoshop files directly into unity and it's going to work just fine so we have the crosshair here that's changed the texture type to sprite and UI and let's hit true color bilinear apply cool so now we can go inside of the hierarchy right click go on the UI then select image go into the canvas make sure you select pixel perfect go back to the image we set that you can focus in on this change the 2d mode so we've reset that you can also Center it by holding down alt and clicking here and then we want to set the native size after we've dragged in the crosshair there so dragging the crosshair hit select native size and you might be thinking that this is a bit too big and so what we can do is simply scale this down so we can go and do the image size and we can bump this down to whatever you would like to so I'm trying 24 something like that hit set native size and I actually think this looks pretty damn good so let's try and hit play here going to land host and you can see just how that looks this might actually be a bit too large for me so what we can do instead is we can take some of these simply scale them down a bit so there we go there we go and I'm not going to be spending forever on this you might want to correct it so that this is actually a complete square with equal sides and all that it's not something that I'm too worried about right now at least I think this is going to be fine and you can see this and this one for some reason looks a bit off compared to the others so this is the kind of stuff that you should definitely sit down and get working when you make this so okay so I'm actually kind of satisfied with this we could try just point filtering it doesn't make it a huge difference so I'm just going to stick with bilinear for now good so let's rename this to crosshair and the canvas here to play you I and what we can do is we can add a small few or a few lines to the setup script that will spawn this in once the player spawns and again remove it once he disconnects so let's go under our player setup script double click that open it up in Visual Studio once again and this is very easy so what we're going to do here is add a new field serialize field and this is going to be a game object and it's going to store the player UI prefab then we are going to have a private game object which is going to be the player UI instance there we go then in the start method if we are the local player down here after we disable the player graphics well then we want to us create player UI we do that by simply instantiating it so instantiate and we want to instantiate the player UI prefab there we go and it's just going to be 0 0 0 position scale and all that our scale is going to be vector 3 that one of course and then we can set the player UI instance equal to that instantiation so that's going to work just fine and if we want we can also say that player UI that instance dot name should be equal to player UI prefab dot name that way we get rid of the clone pattern that's not something that looks very pretty in the hierarchy and then down here on disable when we are cleaning up we enabling the scene camera and unregistering the player we can also of course destroy the player UI again so we're simply going to say player or destroy player UI in since pain and that's all we need to do so let's try and hit play here we are not going to be seeing oops we are not going to be seen any crosshair when we begin because we need to remove this I always give a few steps apparently so I'm just going to remove the clip play that so let's make a prefab out of this do we have a prefabs folder we do not yet and delete it then we are going to go into the player and that's going to be a new field under the player setup where we can drag in our player UI now we have play and there's no crosshair we join a game and there it is it's that easy and when we hit stop again the crosshair disappears so that's kind of dynamic and nice and we're just going to stick with that we can drag this player UI under the GUI folder for now we might have it in a prefab folder actually I want to create a prefabs folder I think that's a better idea so that let's just do that right there going to GUI get that bag in there and then into the prefabs folder that's much much nicer stay organized cool so now that we have all this functionality working all we need to do is clear up the console well now right now the console isn't exactly appearing so that's just quickly and this is a bit of a hacky way of doing things create an error here remove that error let unity recompile things and there we go the console warnings are back so on the first now once that you can see here on the ones that we have actually our cost and that's on to the player controller and that's because it used to use this kind of stupid thing called the join drive mode what this can actually just be deleted now so we are just going to completely remove that and also down here remove that mode it's save and boom all of those warnings disappear next up we actually have some warnings for the standard acids which for some reason iron appearing right now I can go ahead and just quickly restart the project here if some of you know a nicer way to get the warnings to appear I know you can be important but that takes a while I just like resetting the project if that actually would cause them ok for some reason there aren't displaying at the moment that might because because of some recent update but anyways some of these are actually also casting causing errors and I remember all warnings I remember which one of them it is so the event system checker and that's something that I want to get rid of let's just read out that and close that there we go oh here they are okay so here we can see all of them so we have the touch input okay so this is on the scripts mobile that's crossplatform we have a bunch under the utility here so we have the forced reset let's just find that forced reset there I'm just going to delete them I'm simply deleting these files because we aren't actually using them and then we have the time object activator that's this one not the destructor we also have recorded the console we also have the particle system destroyer there we go of course if you are using these you should go in there and clean up the code but since we aren't or I am not using these I'm simply going to delete them because they're just using space anyways you can always always reemployed these and therefore just want them out of my project it was annoying enough to have them there when they weren't causing errors and then we can go under our standard assets particle systems scripts and we should find the water hose particle script let's delete that and finally if we go under crossplatform scripts and then find the mobile control rig and let's delete that too so now we have a working project we have project where we can see our own player model which is great we don't get any warnings and we have introduced the first player UI element so that was basically all I had to show for this tutorial I hope you liked it and I'll see you in the next one