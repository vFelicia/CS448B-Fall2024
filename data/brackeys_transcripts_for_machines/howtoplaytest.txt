♪ I have a gaming ♪ ♪ I have game dev ♪ ♪ Uh ♪ ♪ Playtesting ♪ (men laughing) Not long ago, we made a video on how to game jam. And in that video, we talked about how important it is to playtest. And a lot of you asked about more information. So in this video, we will dive deeper into the playtesting. So playtesting is a crucial part of game development. No matter how good your idea and design is, you can never totally predict how your game will feel in the player's hands. So you will have to play test a lot. And in many stages of development. I also think that playtesting is super fun. After all, it's the moment where you get to see all your hard work come to life. Exciting and nerveracking. Also, as most of you probably know at this point, I love game jams. And part of the reason why is that it's a way for you to test out a bunch of ideas really quickly. It's a constant cycle of prototyping and playtesting, and honestly, it's a philosophy I've applied to all of my other game projects. So with that said, let's jump into the playing and testing. But first, this video is sponsored by Unity and the tool, Unity Game Simulation. Unity Game Simulation allows you to automate different aspects of playtesting that focuses on game experience, like game balancing, economy balancing, and level progression. While human play testers are great for feedback on fun factor and feel, this tool is especially great for exploit hunting, which we will talk more about later in this video. With Unity Game Simulation, you can run through multiple levels of gameplay within hours while automatically keeping track of the desired game metrics. Take, for example, the Canadian game studio, Furion. they were able to balance their whole weapon system in just three days. They condensed the equivalent of 165 million playthroughs into just 10 efficient simulations, saving them around 600 hours of development time. So if this sounds interesting to you, check out the links in the description to read more and get started. So before we get into the playtesting itself, we first have to figure out when to playtest our game. And I would say, start as soon as you have a working prototype, you really cannot test too early, because you don't want to spend a lot of time just to figure out that your current gameplay isn't fun. I made this mistake with my jam game, "Farm Alarm", I waited until the last minute before playtesting, which was a super bad idea. I was lucky though, because the game worked as intended and I only needed to tweak a few parameters, but it could just as easily have been a total disaster and way too late to fix. So as soon as you have a cube moving around in a level, and maybe some enemies or puzzles, go for it. Have someone test it or try it out yourself. This also plays into my philosophy of basics first. This is something I've learned from all the game jams I've participated in. I always try to boil my games down to the most essential parts and focus on that first. This allows you to quick to get an idea of how the game is working before focusing on all the details. Plus it makes it way easier to change direction without it hurting too much, because you haven't spent a lot of time yet, but who should you pick to try out your game? This is actually something that I wouldn't worry too much about because pretty much anyone can play your game and provide valuable feedback. If they can handle the basic controls of your game, they can play test it. And it's a good idea to get as broad of a crowd as possible. Everything from experienced players, who are good at the genre you're making, to more casual ones. Good candidates, depending on the game of course, are kids, they are both very brutally honest and more immediate in their reactions. But you will, of course also have to playtest the game a bunch yourself. Keep in mind though, that if you think the difficulty is just right when you're playing it, it's probably way too hard. Remember that you made the game and know how everything works. So you know all the tips and tricks that other players have to learn first. But of course, playtesting isn't just playtesting. You can play a game in different ways, focusing on different aspects. Here's some of the playtests that I have used in the past that should work on most genres. Number one, playtest with focus. Here, you are playtesting a specific part of your game. Stuff like movement, difficulty, enemies, and so on. If you want to know how jumping feels in your game, you could make a level that completely isolates that mechanic to figure out how it feels with as few distractions as possible. Number two, blind playtesting. Here, just observe the player doing whatever they want. This is a great way to playtest because you might find stuff that you would have never thought of, like gamebreaking tactics and exploits, or new mechanics. While testing my jam game, "Soul Surge", I found out that you could ignore all enemies if you simply ran from one room to another, which of course wasn't intentional. So I made sure that the doors were locked until the player defeated all enemies in the room. And number three, exploit hunting. Here, the playtester tries to break your game and discover clearly superior tactics. Here, you'll find out if your walls and doors actually work. And if you have physics in your game, this is a particularly important step because they probably won't. In fact, I have a few examples of exploits that I didn't manage to fix myself. Two almost identical ones, actually, because I never learn. In my jam game, "Shrinking Planet", players quickly figured out that just driving straight was the superior tactic, because what are the chances that a meteor will spawn directly in your path? (cricket chirping) This makes for some very boring gameplay, both to watch and play, and it could have been easily fixed by just throwing a meteor in front of the player if he kept driving in the same direction. The other example is from another jam game, "Sugar Warrior", in this game, the enemies spawn in a circle around the player, this, together with how the AI was handled, led to the clearly superior and equally boring strategy of just driving in one direction and shooting backwards. This could have easily been fixed in numerous ways, like adding level boundaries or obstacles, or just shifting the spawn circle in the direction of travel. And painfully, I was actually aware of these issues before the deadline, but it was too late to fix, which of course could have been avoided with more thorough playtesting earlier on. And remember, most of the time when people are playing your game, it's a good idea to just step back and observe. You'll probably have an urge to step in to help or to defend your work, because it's not done yet and, "Oh, that door will work in a later build." And, "If you just press E instead of D," but try to contain yourself. Every time you intervene, the player is taken out of the experience. And in the real world, they won't have you there as a guide to help them. You get the best results by simply having the players figure it out by themselves, even though it might mean that they get stuck for a very long time. And if you have to help, maybe try making the players come up with the answer themselves, instead of giving it to them directly. Asking questions like, "So what are you trying to achieve?" Or, "What does that spell do?" is often enough for the player to figure it out. And it gives you a good idea of what their thought process is. And of course, make sure to write everything down with timestamps. When does the player get stuck? How fast were they on this section? Did they do something that wasn't intended? Do they understand the mechanics? You really cannot get too much data here. And perhaps take a bit of time afterwards to interview them. "What was your favourite part?" (mumbles) "Did you find something interesting?" (mumbles) What was your favourite part and what was hard? Yes. You might not be able to use everything that you gathered, but sometimes there's this one thing that just changes everything. Yes. Another way to take notes would be to programme it into your game. In fact, with modern tools, you can add all kinds of analytics. Time spent per level, aim precision, variety of weapons used, deaths, hidden treasures found, and so much more. If you're using Unity, there's a tool built in for this, called Unity Analytics, that sets up a lot of it for you. This, however, shouldn't substitute manual testing, because subjective feedback is just as important. Now, sometimes, testers might make comments or suggestions that completely oppose what you originally intended. This happened to me while designing "Detective Truth". People around the office kept telling me that it was really frustrating (man grunting) that they had to start all over every time they died. But my initial idea was to make kind of a rage game that was hard and that kind of played into the frustration. So I just kind of brushed it off. But of course, after submitting, almost all the feedback I got said that the game was too frustrating. (man grunting) So I should have probably just listened to the feedback and found some kind of middle ground. I could, for example, have made it so that you have three lives that lead to a checkpoint before having to start all over again. There are many ways that I could have kept the original intention and still taken some of the feedback into consideration, but mostly, I just had to stop being so stubborn. Playtesters can also sometimes discover new mechanics that you can reiterate on. Many cool features in my games have come from me or someone else stumbling upon a cool bug that then ended up as a feature. I mean, just look at bhopping and surfing in CounterStrike. A guy who makes a weird custom map with a slanted rooftop, and suddenly, a game dedicated to surfing is being developed. Disclaimer, I know that this is a bug that predates the source engine and Valve itself because it is based on Goldsource, which is a heavily modified version of the old Quake engine, but more people know about bhopping in Counterstrike than a 20 yearold shooter, so it makes for a good example. Yes. While playtesting Date Night, for example, I quickly discovered that many of the levels could be solved in ways that I hadn't intended. Maybe you could reach a platform that I hadn't considered, or just solve the puzzle in a way that I hadn't thought of. And that really left me with two options, force or embrace. Force, meaning that I would force my original idea by going back and changing levels, making walls higher and moving obstacles out of the way so that you could no longer reach them. The other way is to embrace it and try to fit it into the game in some way. This is the, "It's not a bug, it's a feature" approach. In my case, this would mean keeping the levels as they were, with multiple solutions, or making new levels that took these alternate routes into account. What I ended up doing was a bit of both. Some of the puzzles were tweaked so that only my original solution worked, while alternate routes ended up as new levels. I see this as a winwin, original idea intact and more levels. [Both] Nice. So playtesting can save you a bunch of time when developing your game. Even though it sounds counterintuitive, spending time will save you time in the long run. Design flaws catched early in development will always be easier to fix, because levels and systems haven't been built around them yet. Imagine changing the size and jump height of Mario, just before release. That's a lot of levels to change. I mean, AAA studios even have entire QA teams dedicated just to playtesting. And it's also getting common to see beta and even alpha tests of games long before they're released, because playtesting is just that important. And that's pretty much it for this video. If you enjoyed it, make sure to subscribe and ring that notification bell so you don't miss the next one. Also, don't forget to check out Unity Game Simulation. Save hours of development time by integrating game simulation into a design flow by simply clicking the link in the description. On that, thanks for watching and I will see you in the next video. Oh, and don't forget to playtest. Thanks to all of the awesome patron supporters who donated in May, and a special thanks to faisal marafie, Lost to Violence, Loved Forever, Replica Studios, Nubby Ninja, SRT Mike, Jason Uritescu, Leo Lesetre, Piano Sathornlak, Donatien Gascoin, Dante Sam, Jacob Sanford, Naoki Iwasaki, MarcAntoine Girard, Gregory Pierce, Michail Korobov, TheMightyZeus, Owen Cooper, Alison the Fierce, Erasmus, and SiriusWolf. You guys rock.