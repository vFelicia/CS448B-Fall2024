thanks for tuning in at braies hello everyone welcome to video number 20 in the how to make a 2d platformer course in today's video we're going to be touching on a lot of different subjects but overall we are going to finally make our enemy uh damage our player and when he hits him we're also going to make the enemy explode so that means that we will need to also uh make the battle status indicator actually work with our player um to display his current health and his max health and uh yeah so we'll set that up cool but before we get started I quickly want to mention that I've int uh just uploaded a huge update to UPA toolkit if you don't know what it is it's a pixel art editor of made so you can create pixel art inside of the unity engine and uh uh a new version has just been introduced uh which uh comes with blend mode modes a bunch of uh layer controls you can see here you can now log layers there's an opacity slider you can uh duplicated merge layers and all that uh kind of cool stuff so uh if you want to quickly make some uh Sprites for your game I suggest you download that cool so uh without further Ado let's head into unity and you can see that the scenus is exactly as we left it off uh the last time and uh the first thing we'll be doing here is uh jumping into the player script so uh let's go ahead on and go under uh scripts let's find the player script here and this uh script of course sits on the player himself and uh let's just zoom in a bit on this and uh I basically just want to expand a bit on this player stats uh class so the first uh thing we're going to be doing here is uh much like when we uh introduced the status indicator to enemy will be changing this idea of a health to uh instead include a Max health and a current health so we'll say that Max Health equals uh 100 and then we'll make a private integer and if this is new to you you can just go back and watch the latest video or the last video and uh then we'll have a private end a storing our current health and we'll also have an accessor for that a getter and a set which is a public in uh current health without the underscore and um that's not going to have a default value instead we're going to if I can format this correctly give it a getter and whenever we get this value we simply want to return the current health private variable and a Setter whenever we set this we simply want to say that uh current Health should equal math. clamp and the value that we want to clamp is uh the uh value that is passed or that um is passed in uh that it's set equal to uh and uh then the minimum which is zero and the maximum which is going to be our maximum health so this this will just ensure that whenever we set our health equal to something that it doesn't go below zero or above our maximum health amount cool and then we want to quickly make a uh public method uh called init and that will simply uh set our current health um current health equal to our Max Health it's that simple and you can either set the private variable here or the uh nonprivate uh the accessor I suggest using the access accessor so that if we've messed something up with the max Health uh it'll let us know cool uh and you can see if we just open up our enemy script here that this is an pretty much an exact duplicate so far of the enemy stats class so uh now that that's done I simply want to rename this player stats to Stats because it sits under the player object and I think that uh the naming is clear enough already and whoops that's from when I was testing some stuff out Simply ignore that and then down here in our damage player we want to change uh player stats. Health to stats. uh current health and we want to do the same here stats. current health and uh yeah now that should actually be working uh next up we want to integrate our uh status indicator so remember we created this status indicator script uh that basically allows us to uh set the health uh on some uh gooey objects and it's pretty easy to expand upon so basically what we'll do here is we'll create this could be a public because we want to change it inside of the unity editor but actually I want to keep this private and then just make it accessible by marking it as a serialized field so uh this needs to be a private status indicator and we'll just call it status indicator with a small s and uh inside of our start function we make a start method here we'll just check if status indicator whoops status indicator is equal to null and if it is we'll just throw an error here uh on our enemy we did the exact same thing except we made the status indicator optional and I think uh we force it uh to be on the player so if it's not we'll just print out an error message that says um um no status indicator referenced on player cool and uh inside of the stat method we want to do one more thing and that is init our stats so we'll just call the init method there cool then inside of our damage player um oh actually uh we have to do one more thing if it's not equal to null then we want to set uh our so we'll call the Set uh status indicator. set health and that takes in our current health amount so that's stats. current health and our maximum health so that's stats. Max Health awesome and we simply want to copy this and do the same every time we uh have damaged the player cool so that should actually integrate any St is indicator uh into our player object and uh now all we have to do is uh go under our player here and actually make the gooey for that and for now I think we should simply copy the status indicator from our enemy into our player object and reset the transform whoops wow that made it huge I simply wanted to uh reset the position there we go and then uh move it up a bit on the Y something like that so it just floats above the players something like 0.7 cool and now we can simply select the player and drag in our status indicator uh and that should update everything so now when I uh we we play the game we should see our status indicator updating to our current health and our Max health and we can test this by going onto our player stats and changing our Max health to something like 120 and just see if that updates and indeed it says 120 if you don't believe me I'll just uh full screen this maximize on play there you go it says 120 there but currently our enemy isn't damaging us um and we simply are able able to kill him so let's make that a bit harder also I want to go into the enemy here and Sim the I disable that debug.log under the weapon I mean uh I find that kind of annoying cool so um how do we change this well basically we have this uh Central enemy uh component and uh all I want to do here is uh now we are going to make our enemy damage our player on impact so let's double click on the enemy and let's go under do the um and let's just check out the script and uh basically I want to create a method void uh called on Collis enter 2D and I know that we've used the on trigger enter before I don't know if we've used the on Collis enter uh basically Unity will make sure that if you spell this exactly as I've done it uh that every time we collide with another object this method will be called so um basically we we can collect information about what we've collided with by saying that we it should pass in an a parameter call Collis 2D uh and we can uh simply name this collider info or call info and uh what we can then do is we can uh grab the player component of that collider info and then we can check if that uh if the player component is equal to null if that simply isn't uh a player component well then we probably haven't hit a player and therefore we don't need to do anything but if there is a player component then we can call the damage player method so first uh let's just call this player component _ player and set it equal to collider info. collider doget component of type player then we check if there is a player component so if uh underscore player is not equal to null then we can say player Dot and then we can say damage player and we can input a damage amount so but in order to input an an amount we need to have a variable and uh let's add that into our enemy stats so let's just make a public integer called damage and we don't really need to get set for that uh we will have we will give it a default amount of let's say um 40 cool so now down here all we need to do is simply say stats. damage and it'll pass in the damage that this enemy does awesome uh and that's basically as far as I can see that's all we need to do uh so far in order to damage our player so if we hit the maximize on play and stop playing here we should see that the moment our enemy collides with us our health should go down and indeed it did so let's try that again there you see cool but currently uh nothing happens to our enemy it would just stay there and maybe move a little bit and maybe hit the player a few more times uh but the effect isn't really that epic so what we need to do here is uh we need to simply kill off our enemy the second that it has killed our player so if it is our player we've hit we damage the player and we then simply damage the Enemy by like a very big number just typ in a bunch of nines here we could also just call the kill enemy uh if that's what you wanted to do on the game master object but I like go doing it through the damage enemy method because then we can um add uh sounds or whatever custom logic in here without having to do it uh separately cool so we simply damage our enemy uh so now whenever he hits our player he will selfdestruct cool so that's basically the foundation of what I wanted to do today uh but I also really would like if our player or if our enemy uh self exploded in a by spawning a particle system and also if our camera uh if we we applied a camera Shake every time that happened so in order to do this all we need to do is go into our scripts oops scripts and find our game master object because this is responsible for killing off both the player and the enemy so this is kind of the place we need to be in order to add this function functionality and you can see that currently we are simply using this public static void called kill enemy which just destroys our enemy object but I would like a local uh method a a nonstatic method uh that sits on the GM object uh so that we can use some uh variables such as uh using some uh particles of reference to those and uh also of reference to our camera Shake uh so in order to do this we basically need to call a local method uh an instance method uh through the static method so uh first off let's add some variables the first one is going to be a public and uh that when we're going to add a transform and we're going to call this um enemy death particles we also need a public camera Shake remember we created that in an earlier video and we'll simply call this camera shake and I think I'll bring this up because we might use this in in several contexts so I'll just bring it up here because it doesn't necessarily have anything to do with our any dying and uh basically all we need to do here is create that local uh method and I think I'll just create it under the static one and it's just going to be a uh public void and I'll do underscore kill enemy to really signify that this is local and not static and then we simply want to pass in the enemy as a parameter and I like uh I've introduced this naming Convention of using an underscore when youever you're passing passing in an argument and so we can move this destroy enemy game object down here and then here we simply want to say GM do uh kill enemy oops GM doore kill enemy there we go and uh if we want to stick with the same naming convention here let's do an underscore on the respawn player two there we go and uh of course when we calling this we need to pass in the enemy and down here we need this to to beore enemy so now we've set up this system where we have this static method that we can easily call and that calls the local method that will be able to access these instance parameters awesome so basically now what we can do is we can instantiate our enemy death particles at the position of our enemy so Enemy doore enemy do transform do position and just with a zero rotation so we'll just do querian do identity awesome and uh also we can apply some camera shake so we'll just do camera Shake do shake and we want to shake uh a certain amount depending on the enemy I think it could be cool if like big enemies died in this huge explosion and smaller enemies died in another another one uh actually we should make sepal uh separate death particles depending on the enemy that would be way cooler so let's just remove that and um just keep the camera Shake here uh and then let's go into the enemy here and uh let's give him a death particle you could do this under enemy stats or you could just do it here I think I'll just uh do it here instead of going through the stats uh but we simply need to add a public uh transform Called Death particles like this and uh do the same in and inside the enemy stats we need to add a public float with uh the shake amount and will default that to 0.1 and a public float with the shake length we also default that to 0.1 put in an F there and uh that should be all we need then ins inside the start method we'll simply check if our death particles is equal to null then debug.log error no death particle is referenced on enemy cool so now inside of our game master all we need to do is call camera shake. shake and we'll input uh the underscore enemy. oops enemy. stats actually I don't want this inside of the stats I think this should be inside of the of the just enemy class so let's go back here enemy. Shake amount and the enemy. shake length and here instead of the enemy death particles we'll simply make that specific by calling it through the enemy so we'll just get the uh death particles there so now we can have separate Shake amounts Shake lengths and death particles for every enemy that we create now the only uh thing I want to do here lastly is just a check where we say void start and I just want to check if camera Shake is equal to null then we want to complain that no camera Shake referenced in game master cool that should be every uh all the code that we need to uh do for now at least let's look at the alien uh spaceship and see that we now have an a spot for the death particles a shake amount and a shake length so now I want to go ahead and create a particle system uh that we can spawn whenever we die so in order to do this uh let's right click in the hierarchy let's go under and uh let's just select particle system let's focus in on this on the scene let's reset the transform and let's move it up a bit so we have some space where we can play around with it let's set the uh duration to two and the start lifetime to two let's go and do emission and change the rate to zero let's go under shape change the type uh or the shape to sphere and uh let's uh change the radius to something like 0.2 and we want to emit in a random Direction Let's now add a burst here of about 30 particles and you can see that currently they are just go out in this very huge sphere like formation so let's change the start Speed to be uh random between two constants that's going to be between uh 10 and 20 and you can see that's kind of aot right now but what we also want to do is we want to limit the velocity over lifetime we want to Damen it by 0.1 and we want to set the speed to be equal to a curve that starts at one and then whoops and then goes down to like about 0.5 and you can see that this gives a pretty cool explosion look where everything just very quickly slows down you can of of course adjust how much you want it to slow down uh this might be better actually cool so now that we have that in place uh we could actually I want to damp this a lot more let's do 0.2 that looks pretty nice and this is all about just adjusting the values to what you want want to see this looks fine for now we can then add a gravity modifier so if we give this a gravity scale of one I think that's a bit too much let's try something like 0.3 still a bit too much for my taste I think 0.15 might be good yeah that looks pretty awesome cool then next up we can gohe go ahead and create a cool looking material for this so let's right click in the project go into material and rename this to additive and we'll change the Shader from standard to particles additive and as the texture will'll select the default particle for now you can of course uh use any kind of texture and uh be nerdy about this there also a lot of cool looking free particles on the Internet or a lot of of good assets at the unity asset store if you wanted to uh really get serious with your particle systems uh but then uh we want to drag this into the uh renderer material to actually apply that and you can see that already looks it makes it look a lot cooler then we can go under the size over Lifetime and just um make this shrink down not too much just shrink a little bit that looks pretty good uh let's also randomize the start size so make that random between two between two constants and I want that to be between uh maybe 1.5 and 1 which looks pretty good and uh next up I want to go under the color of a lifetime and make sure that they very quickly fade in and slowly Fade Out that looks much better also we can maybe change the start color here to a very yellowish color very bright and then the end color to something more red so it will like fade like spar that looks actually pretty nice uh we might uh limit the uh the velocity even more let's try 0.3 0.2 I don't know you can play around with this as much as you want I mean uh it's really just about messing around with the values until so you get something that looks right you can play around with how uh many you want to actually emit uh but I think we are just going to use this for now and we'll call these alien spaceship uh death particles and we'll drag them under the prefabs folder there we go delete them from our scene and also make sure to select the prefab and uncheck looping and uh then we can simply select our alien spaceship and drag in the particles there and also I just remember that if we go under our GM object we want to tell it to actually kill this off after a certain amount of uh time so let's just quickly do that let's uh store this firstly in a as a game object and we'll just call this clone equals inate blah blah blah as a game object and uh then we simply want to call destroy clone after 5 Seconds see if that works cool and uh now that we are actually ready to hit play whoops no camera Shake referenced in game master it's very nice that we actually made it uh give us uh error messages like that uh because they are very important once your game uh gets bigger so we'll simply find our um find our camera shake you and drag it in and let's try that again and you can see our enemy explodes and our camera shakes and this will also work if we kill him by shooting him so that looks very nice so now we finally have a game where our opponents can damage us and where we can kill off our opponents and it doesn't look horrible so let's hit apply on the GM object apply on the spaceship and apply on the player and uh just for fun let's drag around some spaceships duplicate these and see them in action responding 3 two one cool so that was the ending of this video I hope you enjoyed it and I'll see you in the next one n