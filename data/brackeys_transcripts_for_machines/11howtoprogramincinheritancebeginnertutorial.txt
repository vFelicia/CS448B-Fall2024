thanks for tuning in at braies hello everyone and welcome to video number 11 in the how to program in C course today's video we are going to take a look at inheritance basically deriving classes from other classes and uh what inheritance means uh we'll get into in a second but first of all I just want to explain that inheritance is an extremely important subject and it's considered one of the three pillars or uh primary characteristics of the an objectoriented programming language because basically what inheritance allows us to do and I've made this horrible looking graphic here but it will do for now is it will allow us to share code between classes uh basically if you have a base class imagine uh that we are making an RPG and uh we have this Base Class called our hero and he has different properties um that are general for all Heroes uh such as um a uh a health amount a um maybe a strength amount a amount of intelligence and all of that and uh then we have some derived classes that basically share all of those properties uh but also add on uh some new ones so uh a derived derived class could be a shaman and he might have some abilities and another one could be a warrior he might be able to yield a specific kind of of weapon all those kind of things uh can be derived from the same base class and then basically what we do is we instance the derived class so um when we then change this instance um it's not going to be uh the base uh Val values are not going to be changed for all of the instances uh that's not the point the point is just reusing uh the code so uh let's try this out so let's open up uh sumar and Studio and I've started with a clean slate here and uh we're going to start out by creating our Base Class and we do that just as with any uh other class and we are going to call this animal stick to the same uh the kind of idea that we've been using so far uh this concept of an animal that then has some different properties and that's going to be a public string which will be the name we're not going to default it to anything uh a public public integer which is going to be the a and a public float which is going to be the happiness I think these values will be pretty General and will pretty much apply to any kind of animal uh so other than that we can also give it a method so we're going to do a public void and uh this um method is going to Simply print the base uh values so this could also be something that alters maybe we could call this um age uh to to make it actually uh age so simply just add one onto the uh age value uh we could call it um um be happy and we could add on to the happiness value we could print out only the name we could do a bunch of things with this but for now we are simply going to print all of the base values and uh in here we're simply going to do uh console do right line uh name and then plus the name we're going to do console. right line H oops H and then the H and finally we're going to write out the happiness cool so this is going to be our Base Class and you will notice that we don't uh give this a keyword to say that this is our Base Class and the reason why is we don't really need to specify that um classes can derive from other classes that derive from other classes so the term with a a base and a derived class is relative so um next up we're going to create our derived class and uh this is going to be called uh dog and it's going to derive from and therefore we do a colon animal like this now the uh dark class will uh share all of uh the um basee values here or the base Fields with the animal class so inside of this we could maybe do a um public integer and this is just what we want to add onto it and this could be uh the spot count the number of spots that it has uh on its body and uh also we could do maybe a method in here just to show that that will work too and we're simply going to call this bark and uh what this will do is it will simply print out a wolf awesome and we can simply just copy this change this to a to a cat which is also going to derive from animal and this is going to have a different property here or the point wouldn't be so this could maybe be a float of cuteness and I know that dogs to can be cute but uh stick with me here uh and this is going to have a meow method and then in here we simply do print out yeah cool so basically this is kind of the base of inheritance uh what we can do now is simply use this so it's it's very easy to use I mean it doesn't require that much more syntax but it can really help organize uh your program make it easier to read uh minimize errors and uh definitely minimize redundancy uh you don't want to do the same thing over and over and inheritance will definitely help you on that I mean this is Central to many different kinds of programs you can write an entire program without using inheritance though that would normally uh be not a very good idea I mean if you're making an RPD you cannot get through that without using inheritance so um now inside of our main method um we can start instantiating these derived classes so now we have if we go back to our graphic we have a base class called animal we have a derived class called cat and another one called Dog and now we'll instance these and uh we'll see what we can do with that so let's start out by making a dark and we're going to call this one Spidey and we're going to set him to a new dark and and uh first off let's set his name whoops spotty do name equal to spotty we'll set his age equal to um what are we going to do uh we going to say 4 years old we're going to set his uh happiness to 0.8 and uh next up we can access the values that are specific to this derived instance so the spot count and you will notice that we of course can't access the cuteness because that's um specific to the cat but we can access the spot count and we're going to set that equal to 25 hence his name and uh finally we're going to say spotty dot oops spoty uh Dot and uh we are going to print his base and uh then we can maybe uh make him B so if we just test this and uh hit play here whoops uh of course we need and it's just going to say that this is going to always have a defa value of zero because we're not using it and that's only a warning so we can just ignore it for now we're going to be using it in a sec uh so for now we can just do console. re key here um so it won't quit immediately so let's try that again and you can see that it prints out the name spdy he's 4 years old he has happiness of 0.8 and he can say w great so uh let's see let's say that inside of this derived class we want to access one of the parameters inside of the animal class so basically we can do this by simply typing and this is very easy by simply typing happiness and now we've accessed that parameter so it's simply going to do that for us but let's say we had a a value of Happiness here and a value of Happiness here I don't know why you would do this uh but sometimes you need to do this um if especially uh this can be custom if you're uh passing in some um arguments and you want to set the Base Class through the derived class uh then this can be a normal thing but basically if you have uh happiness here and happiness here uh you can make sure that this is the one you're accessing uh by doing base. happiness and some people like to do this even though it's not necessary to be um very um to be very thorough and and show that uh the uh value that we accessing is not actually a member of this class but of the uh Base Class so if we uh say that we want our happiness to uh go up with 0.1 every time we woof uh then uh we can simply do that there and then we can uh print out down here um we can print out uh his new happiness and that's going to be equal to spy. happiness now that we've backed so let's try that again and you can see that his happiness goes up with uh 0.1 so we've accessed and changed a value in the um Base Class so let's just for uh uh just to show you this uh let's make an instance of the cat also and we simply going to call this uh Heisenberg and we equal going to equal him to a new cat we are then going to say Heisenberg name equals Heisenberg uh Heisenberg do AG equals and we are going to make him old so we're going to do 13 uh his happiness is unfortunately uh not too high it's an old Grumpy Cat and uh his acuteness uh is not too high either so that's maybe why he's grumpy and uh then we're going to print out the base and uh we're going to make him do a meow cool and uh in uh in between these I simply want to make some space here so let's just make an empty line there awesome and and this Arrow should go away when we run and you can see now that it first prints out all the data about the U the dog and then it goes on to print out data about the cat so that was basically it for this tutorial it was kind of a quick one compared to some of the others but I thought that I would really just encapsulate this in uh one single video I mean there's much more to talk about when it comes to inheritance and how it can be used uh especially when it comes to um kind of protection levels um but I think that this is what we're going to stick for uh stick to for now I I don't think U we're going to need to kind of delve into more until we get a little more advanced um with uh C so um that's basically it for this video I will just quickly uh go through exactly what happen what is happening here if you haven't got it uh if if you feel like you've got this covered uh you can just skip this so basically what we're doing is we're creating the Base Class called animal we are giving him some different properties and we are making sure that these are public so that we can access them we also making a method called print base that will just print all of the values in our base class then we are creating a class called Dark that derives from the animal based class this basically takes all of these parameters and copies them in at the top here including our method and what this will allow us to do is simply add on to these values a spot count and a method for backing and we do the same with the cad it basically deres from this class meaning that all of these are just copied in here and uh then we add on acuteness level and a method for saying meow then down here here we creating an instance of the dog we are naming this spoty we're filling out a bunch of different parameters for spotty we then printing out his space we are backing and then we are uh checking our new happiness so when we run this uh uh you can see the result of that and that's basically all there is to it so that was it for today's video I hope you enjoyed it and I'll see you in the next one