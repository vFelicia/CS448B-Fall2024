thanks for tuning in at brakus no one will come to video number eleven in the how to make a 2d platformer course in today's video we're going to be taking a look at what will happen and when our player falls to the ground because right now it doesn't look too good I mean the background sprites are revealed and he just Falls to infinity and all that so that's what we're going to take care of today and we're also going to implement some it like a cool framework some systems that we're going to be using for future functionality so awesome video today also I just quickly want to say that if you have any questions throughout this video please go ahead and visit forum Pacis calm where i among many other developers are ready to answer your questions it's amazing we just hit a thousand members and we have an average reply per thread of just about 6 so that means for every third thread there is an average of just about 6 replies so it's a really great place to go for answers cool so that intro out of the way let's just go ahead and get started so first off let's clamp the camera you can see I've created its do list here and the first thing we want to do is make sure that the camera doesn't reveal all of the different stuff going on here we just wanted to stop simply so we can do that by clamping it and what I mean by that is we are going to select our main camera we're going to double click on the camera to the fellow script to open it up in monodevelop then we're just going to zoom in on this a bit and then down here right before we apply the new position that we've created here and done all the calculations to right before we apply that to the transform position of the actual camera we want to do what is called clamming it so we want to create a arrow we want to set this new position a new vector3 which we are then going to give a new position data X we want the X to remain the same no reason not to be able to move on the x axis then we want to do all of the clamping here so we're going to do that in the sec and then we want the seed to be just new position dot Z and just close that off so by clamping what I mean is we are going to use the math dot clamp function and what this does math that clamp is it takes in three values all of them floats the first one is the value that we want to clamp and then a minimum and a maximum value and it will simply make sure that the value that we put in which is going to be our new position that Y doesn't exceed or go below the minimum and maximum value so if the the position is more than what we want it to be is simply going to set it to the max value that we give it so first off we are going to say new position dot y the system this is the value that we want to clamp comma then the minimum value and in here we can do maybe a variable that's sets it but I'm just going to hardcode it 21 just for a second and then the maximum which we don't really want to put anything any restrictions on so let's just do math dot infinity and then close it off remember to close off the parenthesis there or it's going to throw an error so what we can do now is we can simply scroll up here make another public float public float and simply call this maybe why pause restriction or boundary or whatever you want to do and we can simply set this to maybe minus one to start out with so we can simply put that down here so Y position restriction and that's basically it so now when we save this heading to unity you see that we have a new float here that we can adjust and when we now it play and try to jump down you can see that our camera simply locks in place so that's super awesome and it's really cool because our guy falls behind the foreground and so he almost like disappears cool so next thing we're going to do we are going to take a look at the todo list is what is creating a player script and this plane script is going to do it can host all that kinds of different functionality today it's just going to take care of him falling and dying but we could do large lots lots of stuff in the future with this so let's make a new script of types csharp put it on the player and let's just call this player now we can double click this to open it up in monodevelop and let's go ahead and first off to lead the to default functions we are not going to be needing those right now at least and the first thing that we want to do inside of this player script is create a player stats class because what we could do inside of this is make a variable a public float called health and d fold it to let's say 100 and then we could do all kinds of different stuff with this health we could have functions that maybe subtracts or adds to it or whatever you want to do just like we normally do but since this public class player is so diverse and can do so many things I mean our player is going to do all kinds of stuff maybe in the future then having just a health value here can be confusing when it's maybe bundled in with all kinds of other different functionality so what we are going to do instead is we are going to use a class within a class to kind of group functionality together so let's just keep this public float health for now and then let's make a public class us inside of the player class and let's call this player stats so this class is going to hold everything that has to do with the player stats so just make again this is a player stats class so we can simply open and close the brackets and inside of here is where we are then going to put our health just like this then we want to actually stored an instance of this player stats class in a variable because right now if we would say in the start function whoops I just wrote some JavaScript so let's say if we in the for example start function we're to now let's say subtract the health with ten then this would not work because we have to access the health within the player stats class so you might think well then let's just write player stats dot health but this will not work either because this class that we've made here is like the definition of a class we have to also create an instance for it so what we do is we use we create a public and now we treat the player stats class as a type so we simply say we want to create a public player stats variable and we're just going to call this maybe player stats with a non capital P just to know that this let let people know that this is an instance and we equal it to a new player stats like this and remember the parentheses to for initializing it and then in here we then you say player stats but with a non capital P so now we are taking this definition of how the class should look and creating it in a variable we are instantiating it creating an instance of it of the new player stats class and we're changing the health value so but we don't want to just start out subtracting health instead we want to create a damage player method that we can call whenever we want to damage the player in any way this can be called for example from an enemy or from the player script itself and it's really up to you whether or not you want to do this inside of the player stats class or out here but just for making this a bit easier to understand maybe I'm going to do it within the player class so we're going to write public void we want this to be a public method because we're going to call it from other scripts we don't want it to be static because we still want a reference to the player I'm getting very programmatically correct now because we are so fine in the series if there are some things you don't quite catch up on yet that's completely fine this class and instances of classes and all that can be really difficult for people to understand in the beginning but just bear with me so we're going to create a public void and we are going to call this damaged player and yes this is a single m2 those of you who've been with with me from the beginning and now we are going to simply take in an argument we've talked about arguments before which is going to be a float and actually let's make the health an integer there's no reason for that being a float so let's just do health as an integer and here we'll do an int as well so we'll do an integer and we're going to call this damage you could also call it amount whatever you want to do and inside of this we are going to take the player stats with a noncapital P and we gonna say dot health minus equals damage and what we can do now is we can then check if our health player stats dot health is less than or equal to zero and if it is we are going to kill the player oops and that's basically all we're going to do inside of the player class right now so now we can create a game master script with a kill player method so to do this what we do is we we head inside of unity and we find our GM object hit add component new script and to create a csharp script called game master we could be killing the player from the player object itself from the player script but let's say we want to do stuff like respawning or maybe creating some particles or adding delays or animations whatever we want to do it's great to do this outside of the game object that we're destroying so therefore I like to have a game master class that takes care of stuff like instantiating and removing players or enemies or whatever so let's hit create an ADD let's double click this to open it up in monodevelop let's delete the two standard functions and inside of this game a master class we simply want to start out by creating a public void and we're going to call this kill player and all of all this function is going to do for now is simply destroy the player but we need a a reference to the player that we want to destroy so what we can do is we can put in an argument here just like we've done so many times before and we could give it a type of game object or a transform calling it players here and then simply putting in the player here but instead what we could pass it is the player player class as a a type we simply pass it in this player type because then we can start to change its maybe change it health its health or do different things in here now we have access to all of this stuff so we're just going to pass it the the player here and then we're going the inside the destroy we're going to do player game object because the destroy expects a game object to destroy so if that didn't make too much sense again just ignore it you can also put in the game object for now it's going to wake just as fine but with this we are more futureproof now we want to actually call this kill player and we can do that here so now we just want to say game master dot kill whoops forgot we want this to be a public static void because we don't want a reference to the game master every time we want to kill a player we simply make it static so we can kill it from everywhere and then we pass the reference to our player in here so now it's a static we can simply write game master dot kill player and pass it simply type in this this is the crib equivalent of writing game object if that was one you wanted to pass or transform if that was what you wanted to send over instead we are just going to send it with the player so we simply type this and now everything is actually working just fine you can see that we have no errors but nothing will actually happen because we have no method of checking whether not with we fell down so that's the the next thing we are going to do almost the final point is we kill the player if he falls down so to do this we are going to make an update function inside of the player class here so we're going to do right before the damage player you're going to say Perez no this is just going to be avoided and we're going to call it update and inside of the update function all we want to check for it is if let's say if the transform dot position dot Y is less than or equal to and then we could do maybe minus 20 we can try with that maybe maybe let's even yeah let's even add a variable that that will store this number so but if it's less than or equal to minus 20 we are simply going to damage our player and we are going to damage him with math dot infinity so that's going to make sure to kill him just going to turn up the brightness on my display here cool so if it's if we fell down to this point or under we are going to damage our player with infinity which is then going to call the game master kill player which is going to destroy the player object this is a very complex way of doing something pretty simple but now we can add all kinds of stuff to this I mean we can maybe make death animations or create certain music and a respawn timer and all that stuff now becomes very easy to do so now that we've set this up let's just quickly make a variable called let's do player is to fall Y position or fall boundary and we can call this or equal this to let's do negative 20 and it's of course going to be of type em and then we can simply instead of writing negative 20 here no hardcoding we can simply put in the fall boundary so now we have access to it inside of unity and everything should now be working so if we select our player you whoops we have an error okay so I'm back I don't know what I was thinking there of course math that infinity doesn't is not able to be cast into a a integer so what we're going to do instead is we're simply going to put in a very high number it's it's it's that basic so let's just do nine nine nine nine nine nine and we're going to make sure that our player is killed this way and now when we go into unity should see no errors and indeed our fault boundary appears and what is wrong here our health is not appearing and this is a trap that many many new unity users fall into they say I created this class I've I've make sure that it's we've create an instance of the class but I can't see the variables in the inspector even though I've made sure that the health is public and the reason why is we need to tell unity that this is a serializable class so to do this right before the player stats class we're going to create these two brackets and inside of them right system dot serializable so this will make sure that when we save this and head into unity we can now see the class and it's even collapsible and the health and we can just change it in here so now when we hit play and jump down we are going to get an error but everything is going to work other than that so you can see that our player was removed but now our main camera is throwing us an error and that's the reason why is it it no longer has a target to follow and so we get a missing reference exception so let's just open up the camera to the follow script and the update function before we do anything else we simply want to type in if target is equal to null then return this will make sure that this code will only get called when it has a target to follow so now when we hit play and that was the last thing on our list now everything should work we followed seven steps and now when we jump down our player gets deleted and our main camera stands still so that was it for handling what happens when we fall it down I think we're going to have to wait with respawning the player until the next video so thanks for watching I hope you enjoyed it and that you were able to follow along with all of this coding but once you understand these methods of building systems inside of of csharp you can suddenly do much more powerful things and things later on when your project get more complex will get more much much easier so again thanks for watching and I'll see you in the next video you