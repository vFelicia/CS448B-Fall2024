thanks for tuning in at brakus hello and welcome to this video on creating a multiplayer face in unity today we are going to be expanding on a user account system when specifically we are going to be tying our login scene with the registration and user login together with our lobby scene with our actual game so when the user successfully locks in he will be taking over to the lobby scene where he can either choose to create or our host or join a game or he can unlock back out in which case he will be taken back into the unlocking registration scene and we will also have a look at starting you the username of the player and displaying that on the screen so that's what we are going to be doing today and without further ado let's delve right into it so you can see them here in unity and what I want to do is just begin by going on the canvas background here and removing this source image just to get rid of those corners there I didn't notice them when first creating the UI so if we take a look at our menu control object here this video is going to be super script heavy because we're going to be editing this and creating another script at the same time so hang in there so what I want to do is I want to kind of rename this to something like a login menu and I want to edit this script quite a bit actually what I want to do is I want to edit it so much that I think it would be a good idea for us to make a copy of it just to preserve the original to use as reference so let's go down here and find the DC demo menu ctrl C sharp script and let's press ctrl D or command D if you're on the Mac and let's rename this one to our login menu and you should put that in one word let's drag it out from that folder oh not the entire not the entire data folder here the login menu there we go let's just see on the data resources here I dragged that out as well on that needs to be I believe under the database control there I think that will be fine okay so now we need to double click on this login menu to open it up in Visual Studio and we're going to be editing this quite a lot we're going to be extracting some of the code into another script and we're also going to be removing some code and adding a tiny bit of coding here as well so the first thing that we want to do is edit the class name to match the name that we just made for our script which is login menu like that and then basically I want to take anything that has to do with the locked in object here and completely remove that because we are not going to have a logged in screen as soon as we are logged in we're going to transition to the lobby menu and we're going to show any GUI there so I'm just going to disable that from the scene in here and I'm going to keep it because we'll be using it in a moment to copy it over to the lobby ah lobby scene but I want to take anything here related to the data object here which is when we are logged in and simply remove it and so we'll remove that we will remove all those are fine this is fine we will move on all of the possibilities to send and receive data we're going to have that in a separate script and a whole other way so let's remove that input field there let's remove the send data error input text object and let's um also logged in user name and data text let's remove these as well because they are used to UM change the UI when we are logged in the part will leave in here and the logged in user name and password we are going to copy into another script and I actually want to start creating that script right away so we can start moving things over to that so my idea is that we have our login menu in the larkin scene and that controls all of you the UI and the actual logging in and then we'll have some kind of script called user account manager which will simply have a in and logout feature and that will just keep track of whether or not we logged in what the username and password of the user logged in is and then it will be in charge of sending and receiving a data for that user so and we'll have on that be part of every scene or at least we will have it be part of a login scene and then not destroy when we transition to other scenes so that they can use it as well so let's go ahead and create that right away so let's create an empty game object reset the transform and rename this to our user account manager and we'll just drag that to the top of the screen here add a component called user account manager and hit create an ad on that doubleclick to open it up in visual studio and we'll be using system dark elections we'll also be using a database control remember to import that namespace whenever you want to communicate with database control and we can go ahead and delete these two functions and instead what we will do is we will turn this into a singleton so we'll have that kind of single instance of this running and then other arm scripts can access it access it using that instance so let's just go ahead and create that pattern right away so we'll create a public static user account manager and we call this instance and then we'll have an awake function where we set instance equal to this and we'll also make sure to flag this s don't destroy onload so we don't want to destroy this on object here onload and that means that when we transition to a new scene it will be transferred into that new scene cool so now that we have that setup all I want to do is just make sure that if we transition back to a scene or to another scene that also has a user account manager we won't get to we will have this on the first instance transferred over and then we will remove of the instance that was already in the scene so to do this we simply check if instance it's not equal to null well in that case we want to destroy this object so we want to call destroy on the game object and because destroyed takes a bit of time to actually process we want to return to make sure that none of this code is called before the game object is removed so now we've created a kind of very simple singleton pattern and next up we can add some elements to this and what I wanted to add was the logged in user name and the login password so let's go ahead and and cut out these two fields by hitting ctrl X and paste them in here control V and we'll have this be a public static string and it will automatically default to an empty string so what we will do instead is we will have this be a get and then a protected set and this means that we are able to get this value from all other scripts but we are only able to set it from within instances of on this class from within this class or when it comes to protected it means that you can also set it from classes derived from this class so that includes inheritance so on the other one here is going to be a public static string as well and I think we can go ahead and rename that to use a big L just to indicate that this is a public static variable and this is of course going to be a get protected set as well there we go cool so now that we have those two in there we can use them we want to preserve this instead of setting all these we're just going to call the method that is set up for the for that called blank errors and we want to simply remove this because that is no longer an object that exists then undo PI to here what we're going to do is simply do nothing in this case we are locked in we have already transitioned and to a new scene hopefully and yeah you can ofcourse remove the if statement if you want I just like and like it being there for the cleanest and we want to delete all the instances where we set data object to are either active or inactive and also here we are referencing the data username text which is no no longer thing so we can go ahead and delete that that is just yeah that's not important and here again if we blank the receive data text if login or register UI is being displayed and and this is no longer thing so we can just remove that entire if statement and we can remove the send data error text clearing and we are slowly getting through this so if we call the data logout button it goes back to showing the login you eye and it resets our username and password and I think this is something that we should edit from within our user account manager so what we will do here is that we will go into a user account manager and we will create a public void called lock out and what this will do is it will say set our locked in username to be MTR logged in password to be empty as well and we will have another variable in here which is also of course going to be a public static and this is going to be a boolean and I actually don't think I want the password to be public I think we don't need to really get it anywhere from outside the script so let's just give it a private static string and then let's not have this access you I change my mind about that so let's just have it be like that and then the public static pool here which is the is locked in we definitely want that to be an access is so good and protected set here so protected set there we go and under lockdown or a lockout we can set is locked into force so we have are locked out and we are no longer like in coal and then instead of doing these two lines we can simply call user account manager dot instance don't log out and you can of course cash this should you want to so I'm just going to do it the quick and easy way which is like this so cool now that we have that done we can scroll further down and here we set the lockedin username and password to the username and password variables and this is under the send login request and basically what we want to do here instead if we reach this point in code we had a successful login so that means that we can go into our user account manager and create a method that is very similar to this called log in and we're going to take in a string username and a string password and we're going to set lock locked in username equal to whoops equal to username and logged in password equal to password and then we can set is logged in equal to true so that will make sure to set all the data up for us and then we no longer need to do this instead of course we can just put our user account manager dot unlock that instance dot log in and then we can put our username and our password as function arguments cool so that will make sure that we keep track on that data so we can continue here and look for the errors and if you are quick you have noticed that visual studio actually mics any compiler errors over here so we can just scroll down to that point and here and this is under the send register request it locks in the user as soon as the register requests rent or went through so what we're going to do here is simply also call user account manager instance that log in so that we log automatically log in after creating a user and again we need to input our username and password and they are accessible to us just like before and then down here we have two methods we have data sent data button and we have data get data button and then we have two private method to I and numerators which is kuroh teams that take care of actually doing that on the server and we are actually going to take all of this these are four functions in total and move them into our user account manager and this is because our user account manager will persist on to the next scene and so when we need to load our username in the lobby or say when we are playing the game and we shoot someone and we need to set some user data that we've actually actually shot someone we need that to be accessible so we don't want this to be stuck inside the login menu we want that to be part of the user account manager so let's take all of these four functions all the way down to the bottom let's cut those out control X or command X and let's save that and then move over here and paste those in and we just need to edit them a tiny bit so first off I kind of want to change the name here I want this to be a send data and I don't want to check if the database is set up instead I want to check if is locked in and I don't like the syntax I'm just going to remove that we don't need to set the part number here because that's not really a thing and we don't want to put in locked in user name we want to put in the same thing but with a large L their capital L and we don't want to pass it the input data send data text instead we want to have some kind of string up here containing the data that we want to send so we'll have that be dictated by whatever other script decides to call this function so it will look like this so we can pass in some data and it will send that over to the AI numerator and I think this call is not needed that seems redundant so let's just remove that whole if statement there and let's move this back by selecting all of the code and hitting shift tab we can move it back one tap space and then we can remove both of these down here they are not needed and everything else looks just fine we could go ahead and add a debug deadlock statement here if you want to show in the console that something happened but I don't think that's needed for us at the moment we might add that later we also have a public void get data button here and we're just going to rename that to get data and the way that we are going to use this is we're going to go up here and add a nother static field and this is going to be a public static string as well and this is going to be the lockedin data and this is also going to be a get protected set that just makes it very easy for us to use and I'm actually going to move it up here there we go by the way if you select the line or if you move the cursor to some kind of line and you hold down alt and you used ER up and down arrows you will be able to just move that line without copying it or rewriting it or anything it's ever a handy shortcut and then if we go down here again we want to check if is lock in and just remove that seems unnecessary let's remove the pide pide Han let's send over our login username and password with capital letters cool and again we can remove that entire thing and that means that we can remove leave it's this one as well let's remove the part and we can select all of this code here and again move it back by using shift tab and I want to edit this method just a bit what I want to do is I want to create a temporary data string here and we want to start this off by saying error and then I will remove all of the places where we set the data to be error because it's it's an error from the beginning unless we are successful in which case I want the data to be equal to the received data and then at the very end of the method here after all of the if and else statements we can then write that are locked in data should be equal to that data variable so in case we are unsuccessful it's going to see error with capital letters in case we are successful it's going to be equal to whatever data was received from the service or whatever we have stored on that user cool and it will throw out debug log statements along the way should something go wrong I believe that that was all we needed to do in order for this system to work behind the scenes so let's see and yes we indeed we get no errors whatsoever you might get a warning that one of the variables are not being used or something but we are going to use all of it at a later point that's fine and and now we can actually remove this variable or on this component but what I would recommend you to do is bring in your login menu script and then use this to just quickly find all of the objects and then move them into this slot because as soon as you click on one here it will highlight it in scene just make sure you don't use the data object or we skip to the loading objects here drag that in then we have the input login username we definitely want that the input login password put goes there register user name the register password the confirm password and then we have a login error and a register error and that is all we need and then we of course need to hook all of these buttons here up to this new login menu script because the moment that we remove this component that connection is last so we need to make sure that that is preserved by going and finding the buttons here that's begin right with the login button now you can see that the onclick event is now missing an object so we want to find our login menu drag it in there find the function under the login menu and that is going to be the login login button the register button will do the same thing drag in the login menu find the function and that is going to be the log in register button then we can go under our register object find the buttons here we'll begin with the back button drag in login menu go on your login menu and then should choose register back button and finally the register button is going to be login menu register register button ok cool so we made it through that and I'm gonna have a sip of water to celebrate and I believe that was all of the buttons that we need to hook up here in order for our UI to work there's nothing under loading and everything under logged in will not be used in this scene cool so now that that is working what we will actually be able to do is go in there under our user account manager and have something happen when we log in as well as when we log out because this will actually be working now and I can prove this to you by throwing some debug log statements we are only going to be able to test whether or not the bargain is working yet but you will see the logout working in a second so user locked out something like that no reason for these to be cable letters and we'll have a debug deadlock statement down here as well user and then we can give it the username actually let's just see say are logged in as and then username there we go and that should be called now so when we hit play and it brings up for us the larger menu and I use a test user that we created on the database in the last video you could of course also register a new one and hit login it will load for a moment and then it will say live in AZ test one two three and that means that now on our if we gonna don't destroy and load scene you can see that unity actually moves it to a separate scene that is always unloaded on top of the other ones on under our user account manager we're not able to actually actually inspect this but um this actually now has our username and password stored as well as the ability to our send and receive data from that user so all we really need to do now is transition to the new scene and we do this by using up here unity engine dot our scene management and that means that we can simply find our lock in method here and call scene manager dot load scene and then giving this is either a building decks or a string in my case I'm going to give it a string and I'm going to make this available for inspection so let's actually put it down here let's make this a public string and we're going to call this um we're going to call it lobby scene name or maybe a lock locked in seen and named and that is going to be lobby for now just to fold it to that and let's just duplicate this and have it be the locked out cname and that is going to be our login menu believe that is what it's called here and let me just actually call this the user account menu the user menu let's actually just do login menu like that just to make it very clear that this is not login but login menu as it looked a bit weird there cool so have that be login menu and then down here this scene that we want to load is our user on or is our what tip we call it I forgot I locked in scene so I locked in scene name and we can duplicate that this and reuse it up here to transition to a locked out scene name there we go and if we view our user account manager here we should see two fields pop up here the lobby and login menu also make sure if you go to edit or file build settings let you have all of your three scenes in here and you definitely want to put the login menu first then add the lobby and then have whatever a level that you have you're working on on if you have multiple have them appear after all of the other ones cool so now when we hit play we should see this working so let's do test one two three test one two three and hit login and it should transition us to our logged or our lobby scene you can see that our user account manager is indeed still here so now let's just very quickly have a look at how to display some of this information on the lobby so let's create on your canvas here that's bring in some of the UI from alarcon so let's take our Larkin object here again cut that out so let's copy it delete it save that move to the lobby scene going to canvas paste it in there or drag it in here if it doesn't paste and let's reenable it focus in on it let's delete all of the stuff that we have disabled let's actually make a new empty game object and put it down here in the corner and make sure it's anchored to the corner and let's um drag that out a bit make it a bit larger and let's take all of make sure it's not parented to the locked in object let's take all of these elements move them under game object and let's delete the old logged in object and let's now rename this to something like user and we can take all of these now and Center them by going up here hitting alt and hitting Center on that user object here actually I might want them to be centered to the top here so let's do that instead and let's go in here and actually drag down I or find out log out button here and drag that down a bit let's also select our on user name text and change the font size here to something like 14 have our locked in text be a font size of maybe 12 and let's just move these over to position them correctly here so let's move that over there that over there let's resize them and make sure that this is centered on the Horace oh yeah the vertical axis and now let's just create a bit of a gap between the two and that should actually look look fairly decent here so if we check pixel perfect here that will just make the text look a bit more crisp cool and in the scene view actually I want to bring up this sign out button just a bit something like that is pretty cool and now we can just take this and move it down something like there and just have it be well right at the edge of our screen here in the corner and I think that looks pretty cool and then we will have this be populated using our user account manager so let's create a script that will manage this area down here so this is going to be our and we can call this our user account and then lobby on the scroll lobby so make it clear that this is what handles our user account when we are in the lobby scene and you could actually do the same with a login menu here you could call that user account underscore login or whatever you want to do I like to name in this way just make sure you're consistent maybe a bit more than I am being here but change that on your own if you feel like that I don't think our login menu is that bad especially because it's the entire magnitude of that scene and that is what we have called the scene so that's all right okay so we are going to not be using systems or collections but we are however going to be using Unity engine WI we are going to be referencing a text object and let's make that reference right away so this is going to be a public text and we're going to call it our username text and then when we load the scene which means in the start method or right away we will call the start method and we will set user name text dot text equal to user account manager dot and then we will go use a locked in user name however we only want to do this in the case that we are actually locked in because you can imagine that we go directly in here and now we will get an error of course we go directly in here and hit play just when testing the user is never going to do this but we might do this a bunch of times we don't want this to throw an error or be weird or anything we just want nothing to happen so let's just put in an if statement here saying that we only want to do this if our YouTube account manager has a lockedin variable that is true so we only want to do that if we are locked in cool and in this in our case it went through an error anything it would just have the username text display whatever the user logged in user name defaults which is just nothing so it would just make the text object disappear in the screen and that is fine however I think this is a lot cleaner way of doing it it just makes more sense putting in a check like this to only display our username if we are logged in cool and on the other thing that we want to do is put in a public function here that we can call from the button in order to sign up so let's have a sign out here and let's um and we should maybe call this logout just to be consistent with our terminology and what we will do here is we will go user account manager instance log out and again we only want to do this if user account manager that is locked in and that is super important here or it might let's see what we're doing here actually want through an error at all but again it's cleaner I like it so let's do that cool and that is pretty much it now we can go ahead and hit play and we should see or of course we need to reference this with the button so of course we need to drag in our username text and we need to also go to a logout button add an onclick event dragging our user object and go user account lobby and go logout there we go so now when we have played here nothing should happen you can see dark tennis user name sign out doesn't work however if we were to go and begin at our login menu hit play and actually log in here just like the user would hit login we transferred over to be seen it says logged in as test123 and we are able to sign back out by simply hitting that button and we're taking back to the logon screen so that was pretty much all I wanted to show you in this video I hope you think it's as exciting as I do I think we we've gotten really far in a fairly short amount of time I know that this video was probably fairly crazy and and things it's always hard to edit other people scripts but I think it was a bit too much code for us to ride on our own and I really like some of the things that he's done with this database control so yeah that's pretty much it I don't have anything more to add so thanks for watching if you want to see more of this stuff go and find me on my patreon page and donate that really helps out a lot we are aiming to get more videos out and maybe some live streams that would be so cool so without further ado thanks for watching and I'll see you in the next video thank you so much to all of the awesome patreon supporters who donated in July and a special thanks to vixen famous own Andrew K and locks game TV these videos wouldn't be possible without you