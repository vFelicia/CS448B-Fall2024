this video is brought to you by sutan Al Sharif thank you so much for donating if you want to support Brees yourself you can go to patreon.com/crashcourse just a canvas with two buttons that will hover over any selected turret the first one is the upgrade button which we will make actually do something today and then in the next video we can do something with the sell button so um yeah before we get started with this I just want to fix a very quick uh little bug that I uh discovered when turning off the recording uh from the last video and that is if we currently have Play and play some turrets at the very top of our map here so let's just place some right here you can see if we try and place these at the very top of some of these nodes it's not going to give a hover animation and nothing happens when we presses it when we press it and also if we try to select one of these you can see that sometimes doesn't work it does if we click down here but not at the top so what is happening here well it's actually our top canvas that is currently overlaying our map a bit and because that has a graphic raycaster that will sometimes block uh any information about uh having clicked on an object so what we want to do is simply disable this graphic raycaster I believe you can just remove the component as well I'm just going to keep it there and that should actually fix that box so now if we go in here we should see that um everything if we select the chart everything highlights properly and that we can correctly shift between the different turrets much better awesome so what I want to begin with here is is our node script that sits on every node object in the game oops that's our enemy script our node script here and you can see quite a lot is going on in here and I actually want to add more stuff to this um because I think the current way that we are building turrets can be made made a lot more logical so if we have a look here we have a function called on Mouse down so whenever we press uh the node we check are we over any goey if we are we don't want to do anything do we really want to select this node in uh in that case then we want to do that uh can we build there if we can't then we skip out and if we pass through all of these if statement well then we're ready to build a turret and we do that by calling build turret on and then passing in the node and that uh function sits on the build manager I think it would be a lot more sensical to have this function sit on the Node itself because we have building on the Node so we might as well have the function on the Node also we're passing in an instance of uh of or a reference to this instance of the class and then we're changing stuff inside of our build manager if we go into our build manager here you can see that we are accessing turret under the node and changing that and there's no reason to do that using a reference when we can just do all of it locally so let's change this so let's go in here and create a separate function and we're just going to call this one build turret and instead of uh taking in a node we are going to take in a blueprint so we're going to take in here a turret blueprint containing the information about the turret that we want to build and let's just call this one blueprint whoops let me not mess up the parentheses there awesome so this is what we want to call down here so we want to go build turret and then we want to pass in some kind of blueprint and we will talk about where we get this from in a moment then inside of our build manager we can take all of this code copy it and delete it and delete the entire function save that and go into our node and paste that here so now we can use our blueprint instead of the turd to build so in here we go blueprint. cost um we go blueprint. cost there there as well we go instantiate blueprint. prefab and we want to use get build position but we don't need to reference it through a node now so you can see we are removing a lot of unnecessary references here so again we don't want to go node. turret and uh currently these are both called turret our turret up here and the temporary turret right here so let's just go ahead and rename this to underscore turret and do that there as well so we can distinguish between the turret we just instantiated and our local field variable up there then we have the effect here and we want to uh instantiate a build effect and we could either have this sit on the blueprint as well that would make sense because then you would be able to have different effects for different turrets when building them but since we don't want to create that let's just have this still sit on the game um on on the build manager so in that case we could simply go build manager. build effect and because this is a public variable that's totally accessible and again we our gu get build position here is just a local uh function so we don't need a reference and everything else looks fine I also want to remove this money left thing because we now have a money this counter so we can just display turet build cool so this function should actually work just fine now however we still need to pass in the correct blueprint and this of course sits on the build manager our build manager is responsible for figuring out what to build next so he has a variable called turn to build and instead of making this public which means that we could then also change it from outside of the script let's just have a function called um get tur to build so we simply go down here just like we have a select turr to build and again this is why we don't want to make it public publicly accessible that means that we would be able to change it without also deselecting nodes and we don't want to do that we want to always deselect our notes when we change the tur to bill so let's just make another public void here and actually it's not going to be a public void it's going to be a public turret blueprint called get turret to build and this is simply going to return the turret to build there we go it's that easy so inside of our node now we go build turret and then we go build manager. get turet to build cool so now things should be working and we can definitely try this out so let's just hit play and let's try building some turrets and you can see that works just fine so now that we have our code grouped a little more logically we can also go ahead and add a functionality as well so we have our build turret let's also make a public and this time I want it to be public because we want this to be called from without the class and this is going to be a public void called upgrade actually let's do upgrade turret just to be very specific on what's going on and in here we are essentially want to do a lot of the same stuff so let's just take off this code and then edit it a tiny bit so if player stats. money is less than blue print Dot and then we want to have an upgrade cost and uh if it's not well then we want to say not enough money to upgrade that and then return we also want to subtract our upgrade cost and we're going to be making this variable in a second and the thing that we want to build is no longer blueprint. prefab we want to instead build blueprint. um upgraded prefab and the same build position and everything we can also have a separate effect right now we're just using build manager. build effect we could also have a build manager. upgrade effect if you want that to look different but I think the build effect looks really cool and I think it would work fine for upgrades so far but you can definitely go in and change this and then we want to say debug.log turret upgraded however remember we currently have a turret there already so we can't just instance the upgraded turret then we are going to have two turrets sitting there we also need to get rid of the previous version so in order to do that we use the fact that we have a reference to that turret right up here and what I also want to do is I want to go in here and uh instead of having this as an optional uh optional variable I actually want to make this noneditable I want to hide this in the inspector and remember you can use this whenever you need a public variable that you can access from anywhere but that you don't want people to edit inside of the inspector and this is one of those and we're going to have multiple we're also going to have a public uh turd blueprint which is going to be our current turet blueprint and we also going to have an a third one which is going to be a public Boolean whoops public Boolean um saying whether or not the turret is upgraded so we're going to default that TOA and then we're going to switch it down here so let's first of all set is upgraded to True whoops this is inside of the build tet we want to do that down here we want to set is upgraded to True whenever we are done upgrading and okay so all of that is great and then let's see here we also want to get rid of the old turret and currently blueprint here um is actually called turret blueprint so let's just go ahead and change that so this is going to be turret blueprint there we go there we go and there we go and uh here before instantiating the new turret let's get rid of the old run so we just go destroy turret and it's already a game object so we can simply go like that so get rid of the old turret and here we are building a new one awesome so all we really need to do now is have some way of calling this function because it should totally work however we don't call it from anywhere and one thing we of course we run into is the fact that we haven't up uh added the upgrade cost added the upgrade cost and the upgraded prefa um variables to our turd blueprint so let's do that first so let's go and find find our third blueprint script and let's just add two new variables just the exact same way that we have our two previous one we are going to have a public game object which is going to be the upgraded upgraded prefab and we are going to have a public in with the uh upgrade cost there we go and you could essentially make a system for upgrading turrets infinitely by simply uh adding on to their um variables so we could just increase their damage by a fixed amount and the range by a fixed amount but I think that we're going to limit ourselves to have uh every turret have like two versions a nonupgraded and an upgraded you could also create an array or a list of turrets uh that you cycle through so first step you have the Second Step third step and um every and you can adjust the uh cost and uh edit every game object for each step and that would of course mean a fixed amount of upgrades but it would meaning uh mean that you have more than one I think we're going to stick to the simple approach because well we've done that all the way through and I think it's worked out just fine but that is something that you should definitely experiment on your own I believe with the tools that you've gotten from the series so far that you should be able to do that so um of course if you run into problems doing something like that you can always visit the um breis Forum at forum. bre.com uh where people really want to help you with that kind of stuff so uh yeah so now we can save this and uh we should get rid of those errors in here and we have so that's awesome so again we just need to call this upgrade tet function and when do we want to do that well we want to do that whenever we press the upgrade button so in case we've instantiated a turret we've selected it and we' pressed the upgrade button that is when we want this stuff to happen so let's uh create some functionality for this so let's find our node UI and let's um uh double click that to open it up in monu develop in Visual Studio I'm sorry and in here whenever we set the target we don't want to do anything we want to create a public void here called upgrade and we want to hook this up to our button so that whenever we press our button it will call this function right here and this is simply going to go Target do upgrade Target boom that's all we need to do while we can also do in here is hide the menu right after we do that so we simply go build manager. instance do um deselect node so that whenever we upgrade something the menu doesn't stay open it's just going to uh close it and we're good to go you could also just call the height function directly but that will actually mess uh things up a bit um because the node will still be selected but the UI will just be hidden so this is the way uh you want to do it uh yeah cool I believe that's all we need to do so now we just need to hook things up our node UI is fine but we need to go into our shop which is under the overlay Canvas Shop here and we need to find the place where we are uh setting up these different turret Blueprints and of course we need to add an upgraded prefab and an upgrade cost so um the upgrade cost here I'm just going to set to something like 60 and of course you should definitely try this out turny and balance it do some math on it what makes sense here um uh compared to just buying new turrets and stuff like that but I'm just pulling this uh number out of uh out of the eror and then we can see um what happens with it and then we have an upgraded prefab and we need to go in and create this so let's find our um standard turd preat let's duplicate this and let's call this standard turret uncore upgraded and uh we can just drag this into the inspector so we can have a look at it so I want to bump up the range to 20 I want to change the fire rate to something like 1.5 and I definitely also want to edit the bullet prefab so let's create a separate prefab here uh for the bullet here so this is going to be be the bullet upgraded and we can go in here and drag our bullet in there and uh hit apply on that we can find our bullet upgraded and I want to just bump up the damage on this a bit to something like 70 and bump up the speed to something like 80 cool and U what we can then actually I don't want to bump up the speed I think that's fine at 70 um cool and then we can create some separate materials to make this actually pop so let's uh draging our bullet here so we can see what's going on with it and where is it it's it's down there so let's just pull it over here so we can see what's going on awesome so let's go under our materials and let's find our bullet material again we want to duplicate this control D or command D and do bullet uncore upgraded drag that onto the bullet and then let's make this red to really make it pop it's awesome and we can delete that then we can uh edit the materials for our standard turet upgraded as well you can bring in a new model here no one's saying that you shouldn't do that you can also just have it look the exact same but I think you should make something different about it you could display the upgrade level using some kind of UI but we're just going to be modifying the material and making it a bit bigger so the scale here I want to do 1.2. 2.2 H apply on that and I also want to edit the material so let's go and find our Imports find the standard turd go new materials and you can see I've already created a folder here called materials upgraded and I just want to take all of these duplicate them and drag them in there awesome so this is going to be the uh turd uncore upgraded uncore barrels this is going to be the turd uh underscore upgraded uncore Main and finally we are going to have the turret underscore um upgraded uncore secondary cool and then we can edit these so uh of course we need to drag them in so let's select our standard tet upgraded here uh let's find our uh base no our pot to rotate find our head here and let's drag this in so we're going to have our upgraded barrels our upgraded Main and I upgraded secondary and hit apply and you can actually go in and edit the base as well but I think I want the base to stay the same and all I really want to do here is find our secondary color and make this red so just to know uh just to show the user that there isn't a variation on this turret I think this combined uh with the scale of the turret is going to make it very clear which turrets are upgraded and which turrets are not while still keeping the overall look and feel of the turret so you can see that this is just another version of that turret cool so uh now we can select our shop and we can drag our upgraded prefab in there so that's fine our standard turret underscore upgraded and drag it in there and we should be able to play the missile launcher and the laser Beamer will do in the next video I think um this one is already fairly long and U we're not completely done yet so in the next video we'll uh definitely hook those up so uh let's try and hit play and uh let's spawn in some turs here and you can see currently that our upgrade cost doesn't update um but it should be the appropriate cost here you can see we're currently on this much money and when hit I hit upgrade oh of course we need to hook up our buttons as well so uh we need to go and find our node UI find our buttons and then the upgrade button and uh we are just going to add an onclick event onto this so let's hit uh plus there and let's um drag in our node UI and go on node UI and then upgrade in order to actually call that method that we created uh whenever we uh we upgrade stuff so let's try that again so now we're going to go in here create some turrets and I'm going to hit upgrade and we have another reference exception so that's awesome let's find out what's going on all right so I figured out what the mistake was and that's just me being stupid so of course inside of our node whenever we are building the turret we also need to make sure that we are setting the Tet blueprint equal to the um blueprint that was passed in there we go so we're passing in the blueprint of the turret that we want to build and we need to also make sure to save that on the Node now it's done we made the variable accessible but we didn't actually change it in any way and that was why we were getting that no reference exception so let's try this one more time so let's uh build three turrets let's try upgrading and boom there we go awesome so that's working and it's looking super super cool cool and you can see the second time here I can actually keep upgrading these and that's a problem and also our UI is currently not updating uh to show um the actual cost of that so that's what we're going to be editing now and that's the last thing we're going to be doing in this video so let's very quickly have a look at how we can change this so if we go under a node UI let's begin by looking at how we can make the um upgrade cost actually update so let's enable our canvas and let's also so remove the rotation here while we edit it and let's go into 2D mode so you can see under our upgrade button we have a text variable and this is containing both the upgrade uh title and the uh cost let's split this up into two different variable so let's have this one be our text and duplicate that and this is what this one is going to be the actual uh cost or amount and uh let's rename that to cost then we you can simply take the text here drag that up to something like 30.25 is going to be fine and drag our cost down so we split it in half and then we take our cost here and angle our text to the top and we take our text and angle that to the bottom there we go so we have the exact same thing but now it's split up into two different objects and that just makes it easier to handle uh inside of um visual studio so uh what we're going to do is take our text here change that to upgrade without the um bold tags and we can simply go in here and now change this to robotto bold from the very beginning and uh everything else looks good of course we want to update this on the sell Button as well so what we'll do is simply go in here remove the sell button duplicate the upgrade button and we simply go in here and change the text to sell change the cost to I don't know let's just do 50 here and let's change the uh button name to cell cool and of course we want to remove the on click event there we go so what we then do is go under our node UI double click that and we create a reference to our text object containing the cost so we go under uh up here and include Unity engine. UI so we can make a reference to a text object so we're going to make a public text here which is going to be the upgrade upgrade cost and then when we set a new Target meaning that well we've selected a turret we're going to move it and we're going to set the UI to active and we're also going to go upgrade cost. text is now equal to Target do turret blueprint do cost and of course we want to add onto this the dollar sign there we go that's all we need to do there and um yeah so that should actually update so if we just make sure to drag in the UI element so we drag in our um and we need to find that so let's select our node UI let's drag in not the text but the cost there and we disabled the canvas we should see this working already so if we go in here and create a tur and this should say 60 now and it doesn't it says a 100 so why does it do that let's find out so let's go on our shop overl Canvas Shop and let's let's see the upgrade cost is currently 60 and that's why so we using cost and not upgrade cost awesome so now we should see this working and we can also go under the canvas and rotate this on 35° again just rotate it back to where it was before and now we should this see this update here so there we go and if we were to spawn in a missile launcher which currently has an a default upgrade cost of zero you can see that it says that as well so it does update depending on the turn awesome so uh the final thing that I wanted to do was just make it so that we can't upgrade um when multiple times so we have upgraded one uh time and otherwise it's just going to disable that button and all we really need to do here is go in and use the fact that we now have a variable under a Target called is upgraded so in case we already upgraded then we want to disable this button uh and we only want to uh change the upgrade text here in case we're not so we're going to go in here create an uh if statement saying if target. is not upgraded then we want to set the upgrade cost. text and all of that and if it is so if it's already upgraded then we want to do upgrade uh cost. text and set that equal to um done or upgraded or maxed out or whatever and what we also want to do is create a reference to the button itself so that we can make it noninteractable so let's have a button here and we'll just call this upgrade button and all we need to do is go down here and say button no upgrade button upgrade button there we go do interactable equals false or true in this case and false in the other case there we go and that will just kind of fade the button out a little bit and make uh remove any hover animations and also make sure that it doesn't call this function down here um in case it's already upgraded so now let's try actually doing that so let's try and going in here and uh dragging in our upgrade button and that should be it are you ready I'm ready let's try it let's hit uh maximize and if my system doesn't freeze here there we go wow nerves I have haven't saved there we go it'sit maximize let's hit play and let's try this out so let's create three turrets let's select one of them let's hit upgrade it upgrades we can select it again it says upgrade done you can see it's a bit faded out and we can't click it we can still click the sell but we can click the upgrade and it changes for the other one so you can see now that we have a really really nice upgrade system in here U and that makes it very clear on what's going on how it how much it's going to cost and allows you to change a bunch of different parameters from uh Graphics to um effects to uh damage range and all that kind of stuff on the different turrets so I hope you enjoyed this video I'm looking forward to implementing the next turrets along with some selling of stuff in the next one so I guess there's only one thing left to say which is upgrade complete and I will see you in the next video thanks to all the awesome patreon supporters who donated in October and a special thanks to Sultan elff F marifi and James Kell Hound become a supporter at patreon.com Brees