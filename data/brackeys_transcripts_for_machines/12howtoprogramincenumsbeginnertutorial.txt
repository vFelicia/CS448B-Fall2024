thanks for tuning in at braies hello everyone and welcome to video number 12 in the how to program in C course this video is going to be about enims so I excuse that it's been such a while since the last video but as you can see I've been really busy and also I got sick right after my vacation so uh if my voice sounds kind of weird uh that might be why but uh without uh further Ado I quickly want to mention that uh The brackus Forum is the place to be if you have any questions or the code is not working or something and uh also for you the those of you who are using uh Unity uh I've just released a new version of UPA toolkit on the store that introduces uh blend modes and a bunch of new layer functionality so that's super cool I might make a video about that too uh we'll see cool so let's open up SU studio and get started so enums uh are fairly easy to understand once you know why they are useful so let me just line up a case here where enums would be great so the formal definition of an enum is basically um a uh a type that we create uh consisting of a bunch of constants that we associate with the name uh so an example of an en uh if I just make one up here uh is if we type in enum uh that's just like we type in class or anything else that's a keyword and uh then we give it a name and uh this name could be uh for example uh Direction this is a very common example and uh then we open and close some square brackets and we close it up with a semicolon uh not square brackets Cly brackets and then in here we could do uh north west east and south and they don't need to be in any particular order uh and uh this way down here if we wanted to access this we could uh make a new Direction so we could say uh Direction and Call this uh maybe deer or whatever you want to call this and we could then set it equal to Direction Dot and then it will show the different options that we've given given it so it's basically a uh way to uh Define a bunch of types that are very easily readable uh instead of just uh using an integer to represent uh different things or a string so uh a a good example of when you would use this is uh again we have this idea of a base class called animal and then we derive from that uh into a dog class so this do dark class is derived from animal and so it will inherit all of these uh members and the dark class adds on a public void that will print out uh everything we know about the dark to our console uh so that includes currently the name age and happiness and uh if we should add onto this let's say we wanted to add a dark breed so I found this useful uh list of all dark breeds uh so I wouldn't run out and uh that's one of the weirder searches made today and uh uh basically if we wanted to Define uh a a breed for our dog we could make this a uh public integer called breed and uh then uh let's create a Constructor also here so again all of this with inheritance and Constructors that's covered in an earlier video so let's just quickly make a public doc Constructor here um like this and this will take in a name so we're going to do string name an uh integer for the age and a float for the happiness and then down here uh we'll simply Set uh name equal to the name that we've passed in uh do the same with the age and the heaviness Okay cool so now we have this Constructor set up and uh if we wanted to pass in a breed here uh we could simply go uh in breed and uh set the breed down here and then when we wanted to print this out uh we of course don't want to print a number but then we could uh make a switch statement for example that would check for uh the index of the breed um so we could do a switch for the breed and then we can define a bunch of different uh cases so uh we could Define that if this was uh equal to zero we would print out that the breed was a bulldog and uh and you can just keep on doing that and we we would probably be forced to do a default one also because we uh there are a bunch of breeds uh in the world of dogs and we would probably not be able to write out all of them here so you can see that that's a very cusome way and also it's hard to remember uh which index is associated with what so you would have to constantly check when using this so a better way to do this would maybe to uh turn this into a a string and this could of course be done um so you just change this to string and now we would simply write out the the uh oops write out the breed as we've done with anything else so simply write out the breed here to the console and then down here when we make a a new dog we'll simply say dog and we'll call this one uh Hulk and we'll make it a new dog called Hulk with a uh an age of six and a happiness of 0.7 and uh we could then make the breed a um what do we want to do this time a boxer like this uh but this way when we print out Hulk we will notice that it actually looks fine we can see that it says the breed is a boxer but let's imagine that we have a bit of a bigger program and uh we actually want to do something uh with the knowledge of the breed we don't want to just print it out we actually want to have some logic that depends on what breed it is again we could go in and make a switch statement but this way uh we don't uh we have to actually support all of the different types of breeds and that's maybe not something uh we want I mean there are so many here and uh we don't want to sit in sit there and type in all of them and so our code could be easily broken so what we do instead is we simply limit our possibilities and uh this is especially great if you're working multiple people people because it makes the code very readable and and easy um to uh not up so to say and uh we basically do this by up here creating an enum and uh this will be our uh breed and we do a cap capital B here because we're defining a type and uh we uh simply use the same syntax here to then type in a bulldog a boxer we could do a Chihuahua and uh you could just keep going here Bri and uh you can do as many as you want uh by the way some people like to type it out like this uh and that's completely valid even some people do it like this um and again that's just fine uh but when we are not talking about uh a lot of of of types um of values uh I I like to just to on one one line there so uh now we have all of our different options and you will notice that uh spaces uh cannot be used here um but basically now we have defined this we simply need to turn our type here instead of string into breed and this way down here uh it will simply print out the breed so when we pass in here uh what breed we want we simply do Capital breed dot oops and then you can select whatever one you want so if we want this to be a CH chihuaha called Hulk uh we simply do that and uh we save this and hit play and it's going to say that we can add implicitly convert oh that's because we need to change the type there also we try this again you can see that it prints out that our breed is of type chiawa and you can see that when uh printing out uh an enum uh the uh conversion to a string actually happens automatically if you wanted to uh be specific in telling uh whoever is reading this that it is actually not a string you can of course call the two string uh method um that's a bit more explicit but uh really uh unnecessary cool so that's basically enumerations for you uh one last thing you can Define values for each of these and when I say values I mean integer values um but uh that's not really needed in most cases so I think we'll just uh stay away from that uh but that's enum's uh a basic introduction to enums and and how they can be used so that's basically all for this video I uh hope you enjoyed it and I'll see you in the next one oh