in this video we're going to have a look at shooting in unity using raycasts I love you guys said that my previous video on the subject was getting old I just rewatched it and yeah so we'll have a look at creating a gun script where you can configure stuff like damage range and fire rate we also added muscle Flash and impact effect and even add an impact Force to the objects that we hit so let's get started so as you can see I'm using a few assets here I'm using the medieval Arena a crate from the Western props pack and the gun is from the SciFi weapons pack if you want to get any of these models for yourself you can go to devassets.com and I'm just going to click on the SciFi weapons pack here you can check out the page and when you're ready you can select the price and hit the blue button it is then going to download as a zip file that contains a Unity package which is going to set everything up for you so if you go ahead and hit play you can actually see that we can move around the scene to do this I simply went into the project panel hit import package then characters and I went under the standard assets characters first person character and I dragged in the rigid body FPS controller I simply renamed it to player under that we have the main camera and as a child of the main camera we have our gun object and it's totally optional whether or not you want to have a Graphic here you could just disable this and have all of your logic sit on the main camera but I think it looks a lot cooler if we can actually see the gun also when you put a gun graphic make sure to select the main camera and decrease the clipping planes normally these are set to a much higher value which will cut off the gun and we don't want that now that you've set up your gun graphic like you wanted we can go ahead and add a new script let's call it the gun script that's a new script select C sharp and hit create an ad it's double click it to open it up in visual studio and the first thing that we want to do is delete the two using tags at the top and the start method we're going to need a few variables for our gun first off we want to be able to adjust the amount of damage that our gun will inflict to our opponent so we'll create a public float called damage and set it equal to 10 by default we'll also want a range and let's default that to a hundred so in order to be able to shoot we need to get some input from the player we'll do that in the update method here we'll add an if statement that checks if the player has pressed the fire button so we'll go if input dot get button down and the button we want to check for is fire one remember fire one is one of the default buttons set up by unity and on this you change it it's going to map to the left Mouse button let's open up some curly brackets and in here we want to place all of our shooting code I'm actually going to go ahead and wrap this in a separate function let's call that one shoot and let's go down here and create it so we'll write void shoot open close parentheses and the curly brackets now we can put all of our shooting code in here in order to shoot we'll be using raycasting this means that we will be shooting out an invisible Ray starting at the position of our camera and then in the forward direction we are facing if the ray hits something we can gather information about what we hid and if we hit a Target we can damage it and if we don't hit anything we know that we've shot Into Thin Air and so we can just do nothing but in order to shoot a raid from our camera we need a reference to it let's go up here let's create a public camera and let's call it FPS cam then in our shoot method we'll go ahead and create a new raycast hit and this is a variable that we use to store some information about what we hid with array and we'll just call this one hit info or hit for short close that off with a semicolon then to shoot out array we'll go physics Dot raycast and there's a million different ways to shoot out array as you can see here we can take in a bunch of different parameters our case is fairly simple we want to shoot out array starting at the position of our camera so we'll put in fps cam dot transform dot position we want to shoot it in the direction we are facing so we'll put in fps cam dot transform dot forward we want to gather some information and put it inside of the hit variable so we'll write out hit this means that Unity will automatically put all the information we need into this variable and then finally and this is totally optional we can input our range so that if objects are further away than 100 units we aren't going to be able to hit them now this should shoot out array in the way that we want it and now we need to check whether or not we hit something this is extremely easy in unity all we do is simply use this inside an if statement because this function will return true if we hit something and false if we don't so we write if and then we wrap this entire statement in an extra pair of parentheses and then of course the curly brackets so now everything in here only occurs if we've actually hit something with our Ray let's begin by just displaying the name of the object that we hit in the console so let's go debug Dot Lock and the information we need is inside the hit variable then dot we want to get the transform of the object that we hid and we want to get the name so we go dot name now if we save this head into unity and make sure to reference our FPS cam in my case that's going to be the main camera under the player we should be able to hit play if we now hit the wooden crate it sets wooden crate and if we hit any of the other objects it's going to display their names as well say the floor or the podium now this of course requires you to have colliders on the objects that you want to raycast against on the wooden crate here I've gone ahead and added a box collider so we actually already have the core shooting in place but there are a bunch of things that we can add on top let's begin by making it a bit easier to aim by creating a Crosshair to do that we'll right click in the hardware key go UI and then image as the source image I'm just going to go ahead and select the knob but you can use any image you'd like and for the width and height I'm going to input 10 and 10. I'm also going to decrease the alpha a little bit and you can of course make this black if you like that better I think I do now by default this should be in the exact center of our screen if it's Offset you can always click here hold down alt and click in the center that should snap it right in place we'll then rename this to Crosshair and that should be all we need to do there now it's time to have a look at how we can apply damage to an object in order to do that we need to create a script for the Target if you're creating an enemy you should call the script enemy but in our case we just have a wooden crate so let's select that add a new component and call it Target let's go new script create an ad and double click to open it in Visual Studio let's again delete the two using tags and both the update and the start method now this is going to be a really simple script we of course need a health variable I'll make that a public float and I'll default it to something like 50. we also need a function that will damage our Target we'll call this function from our gun script whenever we hit the target because we need to call it from another class we have to mark it as public so we'll write public void take damage and this time we don't want to leave our parentheses empty instead we want to give our function an argument an argument is a way to feed data into a function in our case we want to be able to specify a certain amount of damage so we'll create a float and call it amount we then just finish our function and in here we're going to subtract our amount from our health so Health minus equals amount and the amount is going to be equal to the damage of our gun in the case that our health reaches zero so if health is less than or equal to zero or enemy dies on our case I'll create shatters and that of course happens in here so let's just go ahead and create a separate function for that and we can put this into a separate function let's just call it die and down here we'll make it we don't need to be able to call this from another class so we'll just right void die and for now we'll just go ahead and destroy the object so let's call destroy game object if we save that we shouldn't actually get any errors but of course we aren't calling this function yet and so nothing is going to happen when we shoot we need to go into the gun script go down into our shoot function inside our if statement where we actually hit something and we need to access that script to do that we use hit.transform which is the object that we hit dot get component we can then find the target component on the object that we hit and we can store this in a variable the variable is going to be of type Target and let's just call it Target as well of course not all objects that we hit are going to have a Target script sitting on them we might hit environment pieces vehicles or items we don't want to shatter so we want to check if we found the target component to do that we write if Target is not equal to null meaning that we only want to do this if we've actually found a component if we have we can go Target dot take damage remember we can only do this because we made the take damage function public and as the amount of damage we're going to send our damage variable so so now when we save this head into Unity we shouldn't see any errors and under our Target script we now have a health variable it's currently set to 50 and our guns damage is set to 10 so when we play we should have to hit or create five times in order for it to disappear we'll go one two three four five and it's gone now there's about a billion ways that we can spice this up let's begin by creating a muscle flash for our gun in unity as with everything else there are many ways you can go about creating a muscle flash what I've done is gone ahead and created a particle system that sits on our gun I'm just going to go ahead and simulate it here so you can see what it looks like it's just some really simple particles they're set to nonlooping a very small duration and Lifetime and make sure to take off play on and wake I've also gone ahead and added a point light that is controlled by the particle system just to give it a bit of extra oomph once you've created a particle system that you like we can go ahead and play it through code to do that we need a reference to the particle system let's go to the top here and add a public particle system and let's call it muscle flash then in the beginning of our shoot method all right muscle Flash dot play when we now save and go back into Unity select our gun and drag in the muzzle flash let's hit play and now every time we click the mouse it's going to play our particle and the muscle flash is going to appear next up we can create a hit effect at the point of impact to do that we use another particle system I went ahead and imported the default particle systems by unity if you then go under standard assets particle systems and prefabs there's a flare particle that you can easily tweak to make a really good impact effect here's what I came up with after playing with it a little bit so now that we have an impact effect prefab we can go into Visual Studio add a reference to this as well and this time we want to reference it as a game object that we can instantiate it into a scene and we'll call this one impact effect of course we only want this to occur if we hit something so we can go ahead and create this at the bottom of our if statement let's write instantiate let's give it the impact effect and the point that we want to instantiate it at is going to be hit dot point which is the point of impact we also want to give it a rotation and the normal thing to do here is have the particles point out from the surface Network we hit to do that we use the surface normal this is a threedimensional Vector that is perpendicular to the surface which means that it points straight out of course our instantiate method doesn't take a direction to look in it takes a quaternion so to give it a quaternion rotation we go quaternion dot look rotation this is going to take a direction and turn it into a quaternion and the direction is going to be hit dot normal let's then close everything off with a semicolon if we save this go back into Unity select our gun and drag in our impact effect we should see that when we hit play we have this cool looking impact and it always orients itself nicely to the surface that we shoot the only problem with this is that we are currently instantiating a lot of objects and doing a game our hierarchy is really going to clutter up so let's just make sure to quickly destroy these after use to do that we need a reference to the object that we just spawned and we'll store that as a game object we'll call it something like impact game object and set it equal to the instantiated object then beneath that line we can go destroy and the object that we want to destroy is our impact game object and we want to destroy it after say two seconds now our objects should clean themselves up we can also add a bit of force to a wooden crate when we hit it to do that we need to have a rigid body on our crate then in our script just like we get the target we can simply add a line saying hit dot rigid body and we have now accessed that rigid body component so first up we need to check if the object has one so we go if hit that rigid body is not equal to null then we go hit dot rigidbody dot add Force this allows us to add a force in a given Direction now we could both use the direction we're currently looking in or the normal of the surface both are totally standard I'm just going to use hit.normal and then make sure that the direction is going to go backwards and we can multiply this with some kind of force let's go up here and create a variable for that let's make it a public float impact force and let's default it to say 30 and down here we'll multiply with impact Force let's save that go into unity and we should now be able to hit our crate you can of course bump up this Force to make it more visible currently we are able to shoot as fast as we we can click the mouse normally you want to have a limit on how quickly you can shoot a gun and maybe you want your gun to be automatic in that case we need to define a fire rate let's go into our script create another public float and this one is going to be the fire rate let's just default it to something like 15. then what we do is down here create a private float and this is going to be the next time to Fire and we'll default that to zero so we can fire right off the bat we then check here if the player presses the fire button and our current time so time.time is greater than or equal to the next time to fire if it is we want to shoot and we also want to set the next time to fire equal to our current time plus 1 divided by the fire rate this means that if our fire rate is 4 we are going to add 1 divided by 4 which is 0.25 on to our current time and so we're going to shoot in intervals of 0.25 seconds the greater the fire rate the less time between shots let's close that off with a semicolon let's also remove the down here that means that we can just hold down our Mouse button in order to automatically fire let's say that go into unity and when I now press and hold down Mouse 1 we can Auto fire awesome so the final thing that I did for the demo scene here was make the crate destructible I covered that in a separate video so if you want to do that for yourself definitely check it out it's actually really really simple so now we have everything that we need to create awesome looking shooting mechanics that's pretty much it for this video I'll have a video coming out this Sunday on weapon switching so if that's something you're interested in definitely make sure to subscribe on that thanks for watching and I will see you in the next video thanks to all the awesome patreon supporters who donated in March and especially thanks to Derek himskirk FaceTime verify James kellhound and Jason the Tito if you want to support the channel and become a patreon yourself you can do so at patreon.com thanks a lot guys