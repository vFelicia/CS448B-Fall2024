thanks for tuning in at brakus hello and welcome to this video and creating a tower defense game in unity today we are going to be creating a camera controller that will allow us to move around our camera in the scene in kind of an RTS inspired way so if you ever played Warcraft or Starcraft you know how the camera feels and that's what we're going to be emulating today so if you use the WASD Keys you can pan around or you can simply move your mouse to the edges of the screen and the camera will follow in that direction or you can use the scroll view to zoom in and out so that's what we're going to be making today and without further ado let's jump into unity make sure you have the camera selected hit add component and add a new camera controller script so this is of course going to be C sharp and you can just go ahead and woops open this up in Visual Studio and let's delete the system data collections namespace we're not going to be needing it and let's just keep the update method in here we'll be needing that in a second so the first variable that we're going to be are using is a pan speed and panning is when you move around on the flat plane so that means in our x and c axis so we're going to be making a public float pan speed and set that to something like 30 I think that's going to be a good amount then we can jump into the update method and again we want to check for input in two ways first we want to check for a key press so which we go if input dot get key down or actually we're just going to be using gate key because we want to move every frame every frame that we hold down a certain key and for that we use K key not only when we press it get key down or release it kakie up but every frame so and the key that we want to be checking for is the W key and then we can go ahead and add some functionality to the safe statement and what we will do is use what is called transform dot translate and transform that translate is the easiest way of moving an object because we are not using the physics system to do any collision checks or anything like that we simply move in a direction with the certain distance and that is specified specified by our translation vector three variable and in our case we are going to be using vector three dot forward so when we press the W key we will move forward and let me just quickly explain what this means so vector three dot forward is basically the same as writing new vector 3 where we specify coordinates 0 0 1 that is all that vector 3 forward is then if we want to add on a speed the pan speed instead of 1 here we would write pan speed and to do that what we do is we just multiply by pan speed and that will insert pan speed in here because 0 multiplied by pan speed is 0 0 again multiplied pipe and speed is again 0 and 1 multiplied by pan speed is pan speed so that is the exact same so we can just multiply and it will put the variable in here and that's what we're going to do here so we'll take vector 3 dot forward and multiply that with pan speed and then we will multiply it with another variable so we get this effect here time.deltatime and the reason again why we multiply with time that the time is because we want our the speed at which we move our camera to be completely independent of our current frame rate so if you are one computer that is faster than another or if that's happening a lot of stuff at once you won't see a change in movement speed so we'll multiply that with time delta time the amount of time the passed since the last frame was drawn so this should actually work already and we could go in here and hit play and you will notice a slight flaw with this and that is if we now travel you it looks like we assuming in and the reason why is we're not using this forward axis right here we instead using the local axis of a camera so because our camera is rotated 65 degrees we've rotated the forward axis as well so we want to switch to the global space and we do that by writing comma space dot world and now it will be relative to the world coordinates and therefore ignore the rotation of our camera so that should work now and now we can add another input to this if statement so we both want this to happen if we get the key w or and or is represented by two vertical bars or if our mouse is at the top of the screen and how do we check for this well we use the fact so when our mouse is at the top of the screen here now we want to check for the mouse position and we have a variable in here called input dot mouse position which is basically a vector3 storing the current coordinates of our mouse and these coordinates are relative to this bottom left corner so when the mouse is down here it's zero zero and then from now on it depends on the resolution of your display so if I move it up here and let's say that this is something like 400 pixels tall well then if I move it up here it might go to 10 20 30 40 and then when I reach the top here it will be at 400 so what we can do is we can say that if our mouse position is greater than and then use the current height of our display in our case maybe 400 subtract say 10 from that so that will be 390 and then say if our mouse is greater than or our mouse position Y is greater than those 390 that means that we are somewhere up here that means that we are only 10 pixels from the edge of the screen and therefore we want to move so we can use input done Mouse position dot Y and say if that is greater than or equal to the current height of our screen screen dot height and then some kind of a buffer there and we are going to put this into a variable and this is going to be another public float called pan border thickness and let's set that equal to 10 so if our if we get the key W or our mouse dot Y is greater than or equal to screen dot height pan border thickness that will make sure to check if we are within 10 pixels of the top of our screen cool and then we can simply duplicate this and add three more the first one is going to be in the s direction so that means that we want to move or translate backwards and we want to do that when we are at the bottom of our screen and again up and down is on the Y so we want to use input Mouse position Y and we want to check if that is less than or equal to pan border thickness so down here it will be 0 when we move it up it will be 10 20 30 and we only want this to happen when it's between 0 and 10 so down here cool and then we don't want to move forward we want to move back and we can do that as well by simply putting a minus in front of the forward or we could use vector 3 back which I'm going to do then we want to move to the right so I'm going to be using the D key for that and now we are checking on the xaxis not the Y and we want to check if we are greater than or equal to screen dot with now because again we are now moving over here and then minus pan border thickness so we will get this distance here good and then we want to move to the right so vector 3 right and finally the left which is going to be the a key it's also going to be on the X it's going to be smaller than or equal to and it's going to be just equal to can4t thickness and we want to move to the left okay so that should actually be all and don't worry if you get a bit confused in this I totally get why it's a new way of thinking if you've never done this before it kind of seems a little bit crazy but it's necessary and its really rocksolid so that's nothing wrong with the code it's just a bit weird to understand at first so this should be on working and we can now go ahead and hit play and we should see that when I use the W yes D and a that works and if we go ahead and use the borders here to pan so I think this feels super natural and you will all just also notice that if we go beyond the kind of confines of our screen it still keeps going and that's fine for your game maybe but I think we should just have a quick way of disabling that or disabling the movement so we can adjust things over here without the camera going crazy um so we'll just leave that in here and what we're going to do here is simply have some kind of private variable up here and this is just going to be a bowl cold um I don't know do movement something like that and we'll just default that to true and then we can say that if do movement is equal to false so if we won't do movement well then we simply return then we don't call any of this code down here and then we can change this variable using some key that we know let's just use escape so if input get key down and then we do key code key code dot escape well then we want to set do movement equal to the opposite of do movement so we want to toggle that so if it's true we said it false if it's false we set it true so that should be it and this will allow us to simply hit play here notice how we can move around then I hit escape and it's disabled and then I hit escape again and we are back to MU moving so just an easy way and that's going to be really really great haha later when we do testing and want to change stuff while the game is running cool so the next thing is scrolling and when it comes to zooming in and out there are a bunch of different ways of doing it we are going to be doing it the most simple way at all which is just moving our camera up and down on the y axis and then constraining that movement so it doesn't go below the floor or go crazy high up into the sky however some really cool effect is if you rotate the camera depending on the height of it so that when you view the world from above it will or when you are a great distance from the ground you will be viewing it from above and then as you scroll down you rotate your camera sideways so that it gives the impression that you're now standing on the ground and that you're now viewing more of your world than just whatever you sumed in on it's a super cool effect and if this is something that you want for your game and along with a bunch of other customization and stuff like that I have a super cool foreign thread thread that I will link to in the description so if you want to be more nerdy about your camera controller go there you won't be disappointed ok so but for now let's just implement the most basic of functionality here so let's make some more room and let's get our scroll view and when it comes to scrolling it's a bit more difficult than using get key or say checking for whether or not the mouse position is within some range this is discrete I mean this is a boolean state it's either true or false either we got a key or we didn't get a key press however when we use the scroll view we'll have the scroll wheel just like when we do a joystick movement we are able to control the speed we're able to scroll quickly or slowly or not at all and that is where we use input get access so if we go into unity here they've made a super easy way for us to utilize this fact and that will allow us to very simply when you have a numpad or when you have some kind of trackpad on your your laptop you're able to control the speed at which you want to scroll and some mice does is does it up as well mine Scrolls at a fixed rate but some some doesn't do it as well and what you're able to do then is implement this as a float numbers so that when you scroll quickly it will be a greater number than if you scroll slowly and if you scroll in the opposite direction it will be a negative number so we have some kind of number representation and if you go to edit project settings input and find the mouse scroll wheel here and this is the what unity has called that number so if we simply use this mouse scroll wheel here and we get that by using input get axis and then inputting that name in a string and we can store this in a float and we'll just call this scroll and set that equal to that and then we can maybe just debug log this out so I can show you how this works so again my scroll scroll wheel is kind of boring in that it Scrolls in the intervals so it won't look super cool here but you can see that if I scroll up we get point one even point two sometimes if I scroll really quickly we should be able to get some point threes in there and then scroll down we get some negative numbers so we can control how quickly and in watch Direction we're scrolling cool then we can use this variable and let's use it in such a way that we begin by starring our current position so we'll do a vector3 and call this pause for precision and make that equal to transform that position our current position and let's go in here and find position dot y and set and add on to that actually let's subtract that I think that would be better for the direction of scrolling so subtract from that our scroll multiplied with our scroll speed and we'll have to go up here and create a public float with us scroll speed and set that to something like five I believe scroll speed multiplied with time to Delta time so you can see here now that we are using this variable here that will in my case be something like between minus point three and point three multiplying with our speed I'm multiplying it with time two Delta time and you are going to go in here and add some kind of a larger factor like a thousand because the scroll wheel will values are quite small so I'm just going to throw up thousand in there and that will probably take care of that and then we can go down here and apply the position back in so we can go in and say transform position equals position Y or not position that why but just position and we should see that this is working now so if I clear on the console hit play I am able to scroll up and down the only problem is this is not clamped so what this means is if I scroll further we can scroll through the ground and things start looking super weird and we can also scroll crazy high up in them in the air here in such a way that well it looks super weird with the ground and everything so to fix this we'll simply clamp this number so we'll go up here and add another public float and this is going to be our minimum Y and this is going to be equal to something like 10 and another public float called our maximum Y which is equal to 80 then we go down here we say position dot y equals math clamp and the value that we want to restrict is Y and we want to make sure that it is between our minimum Y and our maximum Y so this will restrict position that Y to be between minimum and maximum which means that it will be between 10 and 80 so if we'd play here now we should be able to move around all that we should be able to scroll down but not further than this and this is definitely also as far as I want us to be able to go and then if we scroll up we won't be able to scroll up higher than this here and you can do the same or use the same technique to control the panning so that we can pan crazy to the right or back and forwards or something like that and I definitely recommend that you go under the forum thread if you want to make your camera control movement thing super finetuned and feature packed but for now this is going to work for a game and I want to focus on some of the more important gameplay elements so that will be coming in the next video so thanks for watching and I'll see you soon thank you so much to all of the awesome patreon supporters who donated in July and a special thanks to vixen famous ode and UK and Locke's game TV these videos wouldn't be possible without you