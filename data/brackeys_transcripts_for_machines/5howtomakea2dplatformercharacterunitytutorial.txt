thanks for tuning in at braies hello everyone and welcome to video number five in the how to make a 2d platformer course today we're going to be taking a look at something really awesome which is importing and setting up our 2D character sprite so um today we're going to be both importing the graphics and setting up the import settings um and we're also going to be rotating the arm to always Point towards the mouse cursor so later we can um do some cool shooting mechanics we are not going to be setting up the animations today that's for a future video cool so throughout this video we're going to be using the 2D assets pack which is of course available at bra.com so if I just load up the 2D course here which you can access from the projects or from the homepage uh then there's a download button uh that says download Tod assets and it's completely free it just downloads a zip file uh so it should be easy to open and it's ready to use basically cool so let's get started with today's video I've already opened up unity and uh there's nothing changed here um everything is like before so let's just start importing so open up the 2D assets pack open up the 2D platform uh folder and in here we have two new files and these uh cool uh this cool astronaut is made by a guy called aramid and I'm probably going to pronounce his last name wrong so it's on the screen and also you should check out his Facebook page which is in the description he's a really cool artist so uh check him out uh also to all of you who uh are currently working on a character or would still like to submit something to the series um please go ahead and just sent me over stuff and I might include it in the 2D assets pack still even though I'm going to be using the astronaut player um for this course other people might choose another one so it's always great to have more in here so cool so let's um actually let me just explain we have a Photoshop file here uh for those of you working in Photoshop if there's something you want to edit here it's split up into different layers and should be pretty easy to access and then we have a PNG which we just going to be using you can import the Photoshop directly into unity and it will take care of everything uh but for Simplicity sake and in case you don't have Photoshop installed we're just going to be using the PNG so let's take this and then simply drag it into unity and release it over the project Pane and now let's select it and uh change the Sprite mode to multiple and change the pixels to units to let's try 15 and then change the filter mode to point hit apply now we can go into the Sprite editor and in here we can uh select the different Sprites we'll do what's called slicing up the uh Sprite sheet into multiple Sprites I've set up the Sprite sheet to make automatic slicing pretty easy to do so let's head up in the left hand corner and click slice and select the type automatic and now we actually ready to slice this so you can see it sets it up perfectly by the way if you see these green circles around the screen uh I'm trying out a new piece of recording software and it likes to do that for some reason so now we can have a look at how our Sprites are set up so now we can see that it's actually set up everything perfectly and if we want to check this uh we can go up here in the right hand corner and change from RGB mode to Alpha mode so now we are just seeing the alpha Channel and we can see that everything is actually uh selected just fine so let's head back into RGB mode and let's just select the arm here and let's first off rename this to arm and let's change the pivot to left this way we can simply rotate around this pivot whenever we want the arm to rotate awesome uh you could go ahead and name each of these Sprites uh I'm just going to go ahead and rename the astronaut Idol and the astronaut jump and then I'm going to rename the weapons this up here is a full walk walk cycle which we're going to be using when the character uh needs to walk around so let's select the gun here let's select uh let's call this um machine gun and let's call this one for pistol I just quickly added that just so we had a smaller weapon to work with awesome uh now let's hit apply and let's close this window and we are actually ready to uh start importing this into uh our scene so let's open this up simply click the arrow here to open up the individual Sprite and we can select each one of them and what we want right now is we want to find the idle one here the astronaut whoops I spelled that incorrectly let's head back into the Sprite editor as Dron not idle like so cool so select the astronaut Idol and let's drag this into the scene so simply click and drag and release and this looks pretty nice in scale um it might be just a bit too large I want the pl to be pretty small and then I want to fill up the space with plenty of explosions uh so let's actually go under the import settings here and change this to let's try 18 and it'll apply and this is much nicer it's just a bit smaller than um the player from before which is fine for me cool so now that we have this guy here uh let's go ahead and drag him under the player so first select the player and disable the Sprite renderer so we can get rid of the uh robot and let's have the graphics be a separate object uh just a child of the player this way we have more control over the positioning of the graphics and we can flip them when we change direction um individually so we don't have to constantly follow the player so let's just direct the astronaut Idol under the player object and let's just reset the um position uh and you can do this by right clicking on the transform and hitting reset position so that will just zero out the position and now let's simply drag him down a bit on the y axis here and again if you are dragging something uh click to drag and then hold down shift to constrain it to one axis and uh that actually doesn't look too bad let's try and hit play just see how this functions and it already looks pretty awesome cool so what we want to do now is we want to add in our arm and to do this uh all we really need to do is to select our arm and then drag it into the inspector or I the Hier I mean and let's just drag this under our player object also and let's just reset the position here like so cool now we can take our arm and we can try and position it uh in the center of our player so that when we rotate it it can rotate the whole way around without uh being weirdly placed this looks pretty nice and now let's select both the arm and the as astronut Idle and let's change the Sorting layer to player and let's also to make sure that the arm will always render on top of the player let's change uh the ordering layer to one actually let's change it to two because later when we add weapons we might want them to be below the arm but above the player so let's change this to two that's that just makes sure that even though they're in the same sorting layer uh it will still be on top cool uh so what we can can do now is we can place a script on the arm here that will rotate it towards the mouse cursor but what we also want to do is uh do uh fiddle around with how the arm is uh rotated when we equip weapons and such that's something we're going to look at later because right now you can see that the arm is automatically um is automatically scaled with the character that's not really something we want so actually let's just go ahead and change that first that will make uh debugging easier later so let's go ahead and make sure that the arm is independent of the rest of the graphics because right now it scales with them and that's not something we want we want it to Simply Point towards the mouse cursor so in order to do this all we need to do is we want to select the player and let's find the platformer character 2D script so let's double click this and this was the script script that we imported in the very first tutorial also I might want to mention this uh you can see right now that I have a theme on mono develop which I just think is a bit more relaxing on the eye if you want the same uh cool thing in uh cool theme instead of the uh black text on white background you can simply go under um I think it's uh where are the options it's tools options and then you can go down on uh text editor then syntax uh syntax highlighting and change to Oblivion you will have to click okay before it updates um so simply change it from default to Oblivion and you can get the same color scheme cool so first thing we want to do is we want to establish a connection to our uh Graphics because instead of changing the whole player we simply want to change the a uh the uh the Graphics down here so let's uh rename this to graphics and let's simply store these Graphics in a variable and then simply change the scale of those instead of the scale of the whole player because right now when we uh move all the way down to the button uh we can see that we have a function called flip and what this function does it's uh is it will flip the character to always face the direction it's walking in and it basically does this by creating a vector 3 with the transform. local scale and it then modifies the x value of that uh Vector 3 simply flips it by multiplying with minus one and then it feeds it back in but instead of transform. local scale uh we want the child here being the graphics. local scale so in order to do this let's make a new variable and we're going to do a public um actually let's not let's just make this private because we're not going to be assigning it ourselves we're going to be assigning it in the uh awake function so let's just do um transform and let's call this player graphics and then a semicolon so this will be a reference to the graphics so we can change direction then in the awake function where we are setting up the references we want to do player Graphics equals transform. find child so the transform um uh class has a pretty cool um function that will allow us to find the child of an object and this is better than doing a game object. find because it doesn't have nearly as many game objects to look uh through so we will find the child and we search uh by name so let's open up some parentheses here and inside of these two signs we will type Graphics simply type in the name there and uh we should actually be good to go so now let's move uh what we can also do actually is we can say that if our player Graphics is equal to null meaning that that if it couldn't find oops if it couldn't find the graphics object we are going to give it a uh warning here so we're going to do debug.log uh let's do debug.log error and let's say let's freak out there is is no graphic uh Graphics objects um as a child of the player this way later when we get some bugs and try to change things around we have clever error messages telling us what's going wrong cool so now let's move all the way to the button instead of doing transform. local scale we're going to do player graphics. local scale and the same down here so player graphics. local scale now let's save this out and when we hit uh head back into Unity here and hit play you can see that it's only our Graphics that will change direction the arm will just point the same way now let's make the arm Point towards the mouse cursor and in order to do this uh we're going to have to do a few calculations so let me just show you uh the basics of those here so right now you can see uh I'll just bring over the layers panel here also so I can enable and disable some layers cool so as you can see here we have a uh X and A Y AIS this right here is the Aron so that's 0 comma Z and we have a player who's standing at 1 comma 1 and then we have the mouse cursor which is currently at 3A 3 so what we need to do is first off we need to subtract the uh position of the player from the position of the mouse cursor so 3A 3 minus 1A 1 = 2a2 so that gets us the point right here then what we need to do is we need to uh use a function called atan 2 that will go ahead and find a line that goes from 0 comma 0 up to the point 2 comma 2 and then it will return the um the angle between the xaxis and that line and that's the angle that we want to add to our arm so if that makes any sense uh then great if not then I'm going to show you how to code it right now and you can just skip over it and it might make more sense when you see it in code so let's try this out cool so let's just move this over and let's open up the mono develop oh no we need to add a script so let's select the arm let's hit add component new script and let's call this sorry let's call this arm rotation so I create an ad and let's double click this to open it up in mono develop so here we go it's open it up and uh what we want to do is uh is actually pretty simple uh Unity has a builtin function for this called transform. look at but this will allow us to give uh will give us more control uh the the method we're going to be using now will give us more control than transform that look at and also we it will allow us to constrain the uh movement to just uh one single axis which is the zaxis that's what we're going to be rotating around cool so in order to actually do this this let's this uh just remove the start function and then inside the function update we're going to be writing uh some different stuff let's start out by writing Vector 3 and let's call this difference equals camera main do screen to worldpoint and we're going to feed it our Mouse position so inpoint do mouse position let me just full screen this input. mouse position and then we're going to subtract it with transform.position so this is the first part of everything we are simply uh making a vector 3 called difference and uh this is just going to be the difference between uh the position of our Mouse in 3D space and the position of our character then what we doing after is we are normalizing this so we are taking the difference and we're doing Dot normalize this is something you can do to 3D vectors in unity and uh what this does is uh it sounds really complicated but it's really not uh what we're doing is we are um claming all these values to be uh all equal to one so when we take the sum of the vector meaning that we say x + y + z we will uh that will be equal to 1 so normalizing means that we still remain uh we we still keep the same proportions between the different numbers but we are just making all of them smaller so that they when they are added together they will equal one so this will still give us uh the correct point and it will allow us to give us the right direction but it's just doing smaller numbers so here we are normalizing the vector this means meaning uh that all the that the sum of the vector will be will be be equal to one and that's basically it so uh the importance of this I'm not going to go into here and above this we are simply subtracting the position of the player uh from the mouse position cool then next next up we are going to let me just move this up to a line above let's just go like this so we can see everything cool um then in the next line we're going to tie make a new float and let's call this a roation uh let's just do Rod Z for rotation on the Z axis and we're going to equal this to math Dot a turn two and then we're going to input the difference doy and the difference dox and we are going to multiply it by math do R to degree so what we're doing here is we are finding that um we are finding here let me just get this over here we're finding this angle so we are making the V Vector between uh at this point so we are finding the vector that goes from 0 comma 0 and then up to 2 comma 2 and then we are finding the angle between the x axis and that vector and then we're converting that angle from radians over to degrees because they're much easier to deal with so that's all we are doing here we are making a variable stored in here we are finding the angle and here we converting it to degrees cool uh so let's just comment this out we are simply find the angle in degrees as simple as that and uh then at last we're simply going to apply this rotation so we're going to do transform. rotation equals Quan Ula and that means that we will uh pass it uh degrees and not radians and then we are going to do0 f comma 0 f comma rotation set and uh here we might need to add on 90 let's just do Plus 90 and see if this works if it's rotated weirdly maybe pointing in the opposite direction we need to do negative 90 uh this is where you can correct that if you have some offset cool so let's save this out and let's hit back into Unity actually let's just store the offset in a variable that's just good practice so let's open it up here let's make a variable and call this uh public float let's just do an integer that should be plenty so public in um rotation offset and we're going to default this to 90 and then here here instead of 90 we're going to do rotation offset awesome so now when we head back into Unity we should see a variable here and we do and when we hit play you can see that the arm actually follows the cursor but we have the wrong siding side pointing towards it so that's why we have the rotation offset let's try and just zero this out and then it's actually working cool so this if again if you're using the arm I am uh then just set that value to zero but if you're using some other acid it might be really useful cool so now we actually have an arm that will Point towards the mouse cursor so that's really great uh we've come a long way already um let me just check the time here so yeah we've been going for a long time I think we're just going to conclude uh with this and then in the next video we can take a look at stuff like um animations adding some weapons uh there's plenty of stuff to do you can see there's also some already some uh weapons inside of the Sprite ADL uh so they're ready to being applied so that's going to be really awesome so thanks for watching and I'll see you in the next video