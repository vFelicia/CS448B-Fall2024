thanks for tuning in at brakus hello everyone and welcome to the second video on creating a tower defense game in unity me today we are actually going to be making an enemy and making him move around the scene the graphics for this enemy is going to be very simple at least for now but we are going to program waypoint behavior and enemy movement so that's going to be very fun so let's take right into today's video so you can see that I'm here in unity and this is where we left off with creating a start and ending point and there are lots of different ways to do enemy AI in our case it's very simple we want to move from point A to point B along a prespecified path and when doing it this way the easiest way is really to set up a set of waypoints in our case just empty game objects that the enemies will use to guide them along the path so they will move towards one Waypoint find the next one and move towards that and it will do that until it reaches the end and then in our game we want that to destroy the enemy and we want to lose some health so how can we really set this up well I think before we go ahead and do anything we should just move our camera into some kind of some position that makes a little more sense than this and then maybe create some kind of ground plane just so we have a game that makes a lot more sense to look at so if we go ahead and take our camera here find our main camera and at the moment it's moved back a bit let's start by moving this up a lot and then are rotating it a bit let's move it over here actually so moving it over like this moving it back and then moving it up some more then rotating it on the I think that's the X we need to rotate it and we need to rotate it about maybe 45 degrees maybe even more something like 60 degrees and then move it up even further so that we have a clear overview of what's going on with our map and you can of course adjust your camera's position to change it's going to depend on the map that you've created and I actually want the to be um to be even more at an angle I want it to be almost entirely viewed from above so right now this is going to be ah that's a bit too much so let's do 65 and let's bring it back a bit bring it down a bit something like this is going to work just fine for now at least then we can always change stuff like this later we might also add the a possibility for the player to move the camera around on his own so without further ado what we want to do here is create some kind of a ground plane so let's rightclick go to 3d object and then select cube let's reset this and call this the ground plane not to be mistake with staying with our path objects which we just called our ground and what we can do with this is move it into the environment and have it sit at the top here so we can easily find it and we want to take this scale here and bump that up to something crazy like a thousand and by 1 by a thousand something like this and then take some kind of very matte material so let's create a new material and call this the ground plane and drag that on there and then we can go in and change the albedo here to something very dark something like that bump the smoothness all the way down and then the metallic nests are the bit something like this looks pretty nice and then what we need to do is of course move this ground plane down so if we find a ground plane here and then move it down by using ctrl we should be able to get our platforms to just stand on top of this plane and what this does instead of just changing the skybox to a solid color is it gives us a bit of shadowing from our platforms onto the ground and I think that's going to look very sweet at a later State if you don't want this you could of course just go into the main camera change from skybox to solid color and then choose a color similar to this one and what I want to do is I want to change the material of the ground plane to something it blueish just to give it a kind of a tint so that the game looks a tiny bit more interesting just from the background color so it's not just a boring grey so this is a bit better and of course we will be adding more graphics to the game as we proceed so this is fine it's give us it gives us an overview of our map for sure so now we can go ahead and collapse that environment there and we can go ahead and create an enemy so if you rightclick here and go on the 3d object and then select sphere reset the transform and call this our enemy and then we can drag this guy up and over and put him somewhere along our path let's do that so that's moving up here and move him over and put him near our path just so we can see what it will look like when he's walking down it and he's going to float about at this height and I think that looks fine and then what we can do maybe just move him over and then scale him up a bit so let's do at least a scale of 2 by 2 by 2 I think that just made him a bit easier to see and let's go ahead and create a material that stands out a bit from the rest here so let's create a new material and call this the enemy material and drag that onto our enemy again changing the albedo and the smoothness all the way down on this one they'll be toe to some kind of light blue almost sign color and I think something like this actually looks pretty great we want it to be very bright and pretty saturated so I think that looks pretty nice and you will notice right now that the light is coming from the same angle as our camera is so if that's something you want to change you can of course rotate around the light here until it looks more like something that you would like so I would like it not to come from the right here but maybe from the left something like this and you can even play around with the intensity of the light so that it will suit you better right now it's kind of tinted and we maybe go ahead and unten that at least just a bit something like that okay so that that was basically our scene set up for now so we can take this enemy here and we can turn him in to a prefab by simply dragging him down into the project panel and we can now save our scene and now it's time to create some waypoints for our enemy to walk along so in order to do this that's rightclick go under create empty and let's reset the transform on this and call this one a waypoint and for this we are going to just move it over here and move it up to so it will be right around the path here and what we will do with this is we will add a icon up here so click this button right here and you can select an icon and I'm going to select on this Ruby shape here which I kind of like and I'm going to scale up the 3d icons here quite a bit so it's easy to see in the game and this is of course not visible in the game itself but only in our scene view and the enemies are going to be walking about here so that's going to be fine and we don't need to specify a waypoint right at the beginning because this is where we will spawn them in and then they will seek towards the first Waypoint so our first Waypoint will be over here but again because we're going to be creating many waypoints let's make an empty game object called waypoints that and make sure that this is at position 0 0 0 and then we can take our Waypoint make a prefab out of it and drag it under the Waypoint let's also make a folder in the project panel one cold way how not waypoints but prefabs and we can take our enemy our node and our Waypoint and drag them under there and one cold materials and take our many materials and drag them under there by the way if you want to get the same project old project setup that I have here the old project viewer instead of the large icons what you can do is simply go up here and select one column layout instead of the two column layout I just find this a bit easier because it doesn't take up as much space but it's completely a preference so now we can take this Waypoint here and move him over to that location right there I believe is that correct let's see is he in the center it looks like it and then we can duplicate him and move him down something like there duplicate move over and we're just going to keep doing this every time that is a corner we are going to move it over until it fits there move it down to there and if you want this to be easier to see what you can do is you can press on the Y here to view it from above and then you can press on the center of this up here to turn it into isometric view and that makes it a bit easier because there's no longer perspective involved which makes it easier to line up these arrows so if I select the other ones you can see that's right in the center that's right in the center that's perfect so let's duplicate this one move it down here make sure this arrow is right in the center then I'm just going to keep doing this until I filled out the entire board and finally we are going to also place a waypoint at the end point and that's because we might spawn at the start point but the enemies won't know to go to the end point unless we actually place a waypoint there or add some kind of reference to that place so this is now our map layout and we can go ahead and collapse the waypoints here so what I want to do is basically add a script that has a static reference to all of these different way points so that we can very easily reference them through an enemy script so if we go on our way points here and add a script and this is going to be called waypoints how creative I am and let's double click this to open it up in visual studio and if what I explained doesn't make sense to you it hopefully will in a second or you can of course just write after me and maybe you will get it when we actually implement this in the enemy script so you can see that I've I'm here in visual studio and I'm going to delete this namespace because we are not going to be using it and I'm going to delete both the start and the update method for now and what I want here is basically a public static and we want to make this static so that we don't need a reference to the script we can just access this field from anywhere whatsoever so a public static and then this is going to be a transform array and an array is basically just a list of items and we use transform whenever we want a list of game objects in our scene so that's perfect then we can call this one um maybe points or waypoints whatever you want to call it and then we are going to recreate the start method here and then inside of this stuff as actually let's do this in awake there we go and inside of the awake function we basically want to find all of the different objects that are a child of this object that is parented to this waypoints object and then we want to load them into our points array so in order to do this we make we set points equal to a new transform array and the length of this is going to be our transform dot child count and that's the number of children that is currently on the waypoints and that is in our case going to be it starts at zero so that's in our case going to be 13 Cole so we are going to make an array of 13 points and then we are going to say 4 and then we are going to do int I as long as I is less than and then points dot length we are going to say transform dot get child with the index of I so here we are iterating through every child of the waypoints object and then we are setting or we are pushing that into our array with at the ithe slot so basically we are saying there are 13 children on this object create 13 spaces in the array then loop through them so that I is equal to 0 1 2 3 on all the way up to 12 and then set points I that means the zeroth placed in the first place then the second place and so on in the array equal to that child so now we have a list of all of the children that is static at them we can easily access so what we can do now and why this is smart is because when we then spawn in an enemy it does need to be aware of any waypoints it don't it doesn't need to find them or order them we've already done that what we can then do is simply have our enemy prefab here and I'm just going to drag this into the scene and I'm going to have it start at the start position here just for now later what we can do is we can add some kind of wave spawner that will take care of spawning these in what I'm going to add it there and then I'm going to add a script that we call enemy and this is in charge of moving the enemy from one place to another and actually we might even want to call this the movement maybe split that up in some way because we're also going to have health and stuff like that now let's just keep it in one script because I don't think it's going to be that large but if you are planning on adding a lot of functionality you could definitely split this up so but for now we'll keep it in here we might split it up at a later point so what we will do is first off at some kind of speed variable and that is going to be a public float so that we can have decimal places and we are going to set that equal to may be 10 at the moment that numbers of course complete the arbitrary you can adjust it inside of the editor then what we want to do is we want to have some kind of target and I am going to make this private because we are only going to be setting this inside of our enemy script so we are going to have a pipe private and our target is going to be a transform target and also have a private integer which is the wave point index and that is going to be defaulted to 0 and this is going to be the current waypoint index we are pursuing so first the 0th then the fro first then the second all the way up to 12 okay and then inside of our start method we are going to set target equal to and then we are going to use this waypoints dot points array that we just created so now we are referencing the points array inside of the Waypoint script by simply doing this because it's static and then we want the first one which is of course the 0 with the index of zero and now we are pursuing that target with the Waypoint index of 0 so that's perfect and then what we want to do is we want to every every frame that is called so inside of the update method we want to move a little closer to that target and the way we do this is we get some kind of direction in which we have to move in order to get there so the and this is basically the direction have to point in order to get to the Waypoint so we get a vector which is three numbers that represent the X and the y and the Z movement that we need to do in order to point towards the target so in order to do this we make a vector three direction and set that equal to and the way you get a direction vector from one point to another point is that you simply subtract them so this in our case we want to point from our current position to towards the target position so that's going to be target that position minus transform that position and this is going to give us a direction vector what we can then do is um move with this direction vector so we do that use using our whoops transform dot translate and translate basically means moves the transform in the direction and distance of translation and the translation is given by guess what a vector so our vector here is going to be our direction but we also want a speed to move so I'm going to normalize this so I'm going to use direction that normalized to make sure that this is always going to have the same length the same fixed speed so that the only thing controlling our speed will be our speed so if you don't know about vector maths this is just something that you know that you have to do and then you can go ahead and watch some of my other videos maybe explaining more about what this means so let's multiply this with our speed in order to get the actual speed that we want to move at and let's also multiply this with time.deltatime and time that delta time is something we multiply with that will make sure that the speed that we move at is not dependent on the frame rate because the M it's not all computers who run the game at the same frame rate and one computer might even vary depending on what is happening in the background or whatever how much stuff is on the screen and therefore if we moved every frame with the same amount no matter how many frames were drawn then we would suddenly move very fast or very slow so to kind of solve this issue we have the time that Delta time with this which is the time passed since the last frame so if a lot of time passes meaning not a lot of frames are drawn we move more each frame than if a lot of frames are drawn and not so much time passes okay so that's what we're doing here and then we want to simply say that the space that we want to move relative to is the world space and now we are done with this part of the code so on this site and the last thing that we kind of need to implement is some sort of way for us to switch waypoints but I think that before we actually do that we want to jump back into the game and maybe just try this out so I'm going to switch back into perspective mode here and lets us see that this wave point index is a sign but its value is never used that's because we haven't implemented this yet so let's try and hit play and see if this works so you can see that ball starts moving towards the Waypoint and then it stops and that's because we don't have any Waypoint switching but everything is actually happening as we want it to so let's switch white right back here and then we say if we are if we have reached the Waypoint that means that we are within a very small distance to the Waypoint in an ideal world we would be exactly at the wave points position but because this is a computer and it might sometimes do some smaller mathematical uncertainties we are going to say that if we are within maybe point two units of the Waypoint so if our distance from the our current position to the wave point is less than point two we've reached the Ray point so that's what we're going to say here and we're going to check for the distance by using vector three distance and then we give it the first point with this our position so transform the position and the second one which is the target that position if that is less than or equal to point two units well then we've reached I our our Waypoint and then we want to get next Waypoint like this and then we can make that method down here get next Waypoint and we simply do this by saying that we want our on our wave point index to increase by one so that we just say plus plus and then we want our target to be equal to waypoints dot points to the wave point index so the first time that whoops the first time that this code runs through its going to set the target equal to the first wave point it's going to move towards it until it reaches the wave point then it's going to get the next wave point it's going to say that the next wave point we are going to get is this one plus one so the second time this is going to say one and the third time it's going to say two and so on and then it's going to get the wave point at that index and to set it as the target and then it's going to go back move distance check and when that passes it's going to do it again and so keep on going until there are no more wave point and let's just set that in so we can just say that if wave point index is equal to or is larger than or equal to I should say the waypoints dot points dot length so the total amount of waypoints minus one I believe yeah well then we want to destroy this object so we want to destroy our game object here our enemy is dead so let's try and do this and just to speed things up I'm going to increase the speed of our n me so we can see whether or not it works when he gets to the end here so already there that's an era and that was an example of when I need to loosen the requirements here so let's do point four and that's going to depend on on your speed here but I'm just going to say point four now that's going to work just fine and you can see that little guy races through and when he gets to the end oh it's going to say index out of range so it seems that the reason this wasn't working is that the destroy operation sometimes take a bit of time before cleans up the entire object and that means that the code might run further down here before the object is destroyed and in that case we will of course get an error so what we want to do is simply hit return on this so that we are sure that it won't go down here before the object is destroyed so that should fix everything and when you hit play now and I'm even going to show you something really cool about this if we add a lot of enemies in here so I'm just going to add a bunch of enemies here we go just one two three and I'm just going to distance these just a bit it doesn't matter where they start they will seek the first point whenever that is you can see that it works with multiple enemies and for some reason now it's not doing anything at all that's because I forgot to add the enemy script and apply that as a prefab now it's working so if we add these three enemies we can see that they are indeed going down the path and then if I select one of them and change the speed it does this at runtime so I can change the speed of these individually and have them go through the path and you can see that when they reach the end destination they are indeed destroyed so that is the path finding system that we are going to be using that is the very basis of our enemies and I hope that you have enjoyed this tutorial as much as I have without further ado thanks for watching and I'll see you in the next video thanks to all of the awesome patreon supporters who have donated so far and a special thanks to Lux game TV with the real name Jeff sacred