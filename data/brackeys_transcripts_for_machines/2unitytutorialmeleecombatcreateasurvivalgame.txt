hello everyone and welcome to the second tutorial in our Survival game series um done by brais I'm the CEO of braies and uh today we are going to take a look on how to create a me system I know that in the last tutorial I promised you we would take care of some shooting but I just thought that the melee system would be a little bit more interesting and also there are lots of lots of tutorials on how to do shoot out there so um I guess we'll just cover that later for now on we'll do the M system okay so let's get ready um I've opened up uh Unity my Unity project and um as you can see uh it looks just like before I haven't made any changes um one thing though I have saved the scene by going to file um save scene or save scene as and I've called it the main scene 01 okay so if you experience that when you start up the project um your scene view is just empty and your game view is just blue um it means that you have to double click on this main scene it's because it haven't loaded the scene yet all right so uh first things first let's just go ahead and rename the first person uh controller by right clicking and hitting rename to player and let's go ahead and make a new game op object called an empty so go to game object create empty or just press contrl shift n and uh this is pretty much just an object that is entirely invisible in the scene it can't be seen anywhere um so you can store scripts and stuff like that just to get a position in the scene but we'll talk about that later um so for now we can just name this m and we can go ahead and drag this onto the player this will parent it to the player and then drag it again onto our main camera and um you can see that if we just zero out the transform on the right hand side to 0000 0 um that it will be directly in the center of the camera and then drag it out a little bit so that it's right in front um one thing that you should notice is that uh right now our position is 0 point 55 or something um but if I drag this mely out again re unparented look the position has changed and this is because when an object is parented to another object It Center meaning the zero values is set to that object but we'll talk about that later now you can just reparent it so um all right now that we have this we can go ahead and add an a new component by clicking add component and new script and call this melee system something like that whatever you want um and we can go ahead and double click this to open it up in mono develop and this script that we're going to create is a little bit more advanced than I would like it to be but um I don't expect you to understand everything if you're a complete beginner and I won't explain everything in complete detail but something I do want to explain you is what is called a raycast function but we'll get to this later for now you can just go ahead and delete the function start and the function update so first of all in this script we want to create a new variable and if variables are completely new to it it's basically a box where I can store things in so it can change it can be um if we type VAR this is a variable that we can access in unity so if I make um a variable and call it something and say this is going to be a number we can go into unity and just without any scripting change the number so in this script we can say if I make a variable called health and then later say that our health is 100 we can do that in unity and just play around with it we you don't have to go back in the script and change it all the time this is really cool so variables is something you need all the time when scripting so VAR this means that we're declaring a variable and now the name of the variable and the name of this variable is going to be the damage or just damage whatever you want um the damage because this is going to be how much damage that will do to an object when we hit it so um simply weet type the damage and then make a colon and then type int and uh this is short for integer and means um a whole number a number without decimals so um it is going to be a number without decimals and just by default it's going to be let's say that we'll do 50 damage if if if the opponent's health is about 100 we'll do 50 so we need to hit it two times and then as always when we declare a variable or call something we'll end up with a semicolon this is very important okay so um that's basically it for this start um we're going to need another variable though and uh this variable is going to be called distance and it's going to be a type float and I want going into too much detail but basically this is going to be the variable that we'll access later to see how far away our opponent is from us so we can't hit him if he's 50 m away um he needs to be in a certain distance from us okay so uh now let's go ahead and create the function updates and the function updates is um everything that is in the function update will be called every time the computer draws a frame so um this might sound confusing it's really not um it's just a function that you call if you want to check if the user has pressed a button or if you want something to happen constantly so it's what you you type when you want something to happen or the computer to check for something all the time so oh I just made a mistake there so um function update um and then the bracket keys and now in this function update we're going to type V hit and then colon raycast hit and um this I want to go I won't go into detail with um it's pretty hard to understand just like this but basically what we're going to do is we want we are going to um draw a line from our um player to what the player is pointing at so let me just open up paint here so I can explain this to you um excuse me for looking over here this is where I have pretyped the script just so I won't make any mistakes or anything so okay um so basically if we have our player this is our character controller this is our player I can go ahead and type this if you want so um this is our player and um we have an opponent so I'll just quickly draw our oppon opponent and what we want the computer to do using what's called a ray cast is simply measure the distance from the player to the opponent and this is done by telling the computer to draw a line from our player and directly out so from the center of our camera and just just for it it needs to draw a line and whenever that this line hits something it says oh we've hit an object and then what we can do is we can ask okay what have you hit and how long how great of a distance is there to that object so basically what we want to do is we want to use this Ray cast and we want to ask how far away how far is the uh um the object and is it an opponent and if it's um just like half a meter away and it is an opponent then we want it to lose health so that's why we type um this if because it's if the um opponent is closed not not just all the time so just type after me physics that raycast and then open up a parenthesis transform transform with no capital. position comma transform come on do uh transform Direction because we want it to we want to know where it is looking and the transform direction is called is going to be called a vector three and a vector 3 sounds so complicated it's it's really not it's just the X the Y and the C it's just it just means that it's going to be with three axes basically so um do forward so this just means that in these three axes we just wanted to look for it so what this piece of code is going to do just type comma hit and then close parentheses close parentheses um what does code is going to do it is going to cast a line out from the point of this empty object that we created and just forward and when it hits something give us some information so um now that we have typed this out uh let's open up some brackets so uh curly bracket curly bracket close and in this if statement we're going to type distance equals hit. distance so basically what we do here is we say that our variable the distance is going to be equal to how far away the game object is so basically we can see how far it is in in unity when we trying to test this out um I hope I'm not losing you if I am it's completely fine much of the code that we are going to be writing is much easier than this and then um oh what did I do what did I do so hit. transform do send message um and then we're going to send the message to the game object that we hit that it should apply damage and just close this up comma the damage and um um then we're going to tell it that it does not need an a receiver so and then close this and end with a semicolon okay that is it for the code um I know that it's really really confusing um it it's not that bad really um what we're doing here is we're casting out uh the line checking the distance and um then we're sensing we're sending out um a message to the object that we hit that we should apply damage and then the um damage part will do in a script that sits on the object so okay but um right now we have made a mistake because this is going to be called every frame every single frame and that's sometime 30 to 60 times per um second so um we're going to want to do this only when the player presses a certain button presses the um the fire button or whatever so um we'll go up here and we'll create a new if statement and this time we'll say that if input. get uh get button down yes input. get button down so if the computer um gets if the player presses this button then all this stuff will happen so if input. get button down and we are going to check for fire one and fire one is pretty uh is just the preset button that Unity has set up for shooting so this means that instead of saying that if they press P we just say fire one and this means that it it will convert to both both the computer this is the mouse button and the Xbox if you're coding for the Xbox or the PlayStation and all this so um but then just make in a open cly bracket and then make yet another close cly bracket we can just go ahead and hit and make some tab so we get all this in order okay so now go ahead and save this pressing contrl s and go uh go back to Unity and I can see that we have some errors let me just check out on this okay um hit. transform send message the damage Sy don't require receiver um what did we do wrong oh so um there is a parentheses too much there so we can just go ahead and delete this and what is this if input get button down fire one I think that is correct F input forget um so the best overload for the method unity in is not compatible with the argument list string um oh it's get mouse button down we just want get button down okay so now this should be fixed if we go ahead and save this and clear this out yes um Okay cool so now if we select our Mele you can see um that we have the iable damage and that we can change this I'll just leave it at 50 and the variable distance so if we go ahead and press press play and then uh press our Mouse button you can see that depending on what we're looking at the distance um changes when we pressing the mouse button so it is requiring the data correctly so this is perfect okay um I know that's that this was um a lot to take in um we'll continue in the next video um with the damaging parts and just making some animation and making it look really cool this was a lot of of coding I know that but I swear it'll get better so um thank you for watching