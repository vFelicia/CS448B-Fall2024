hello everyone and welcome to the third tutorial in our Survival game series done by bra keys I am the CEO of Brack keys and um today we continue on with the m system hopefully we uh finish that off so uh let's go ahead and open up unity and uh the project is just like uh last time and uh we can go ahead and double click on our mely system script to open it up in mono develop and um yes okay so right now if we run this script in unity um it's going to send out this message that our enemy needs to lose damage um but it won't just send this out if we are in a certain distance it will send this out if we just point at him so um it won't matter how far away he is from uh from us so we need to make a new if statement so go to the line on the distance equal hit. distance and make an if statement and in this type if distance is under and now we need to make a new variable so go up to the top and under the variable distance make a new line type VAR and type max distance so this is the variable that we will be declaring in unity and uh I'm sorry setting in unity and uh it's basically how far away the object can be from us um before we can still hit it so um it's going to be a type float and if I did not mention this the difference between an in and a float an integer is just um a whole number a number without decimals but a float has decimals so it's going to be a type float and it's going to be equal let's say about 1.5 um that's a pretty good number I think and then ended up with a semicolon okay so go back to the code we were writing so if distance is under max distance so if the distance from us to the opponent is under the max distance that we want it to be um then we want to send out the message telling our enemy to lose damage so start curly bracket and end the curly bracket after the sent message and we can just go ahead and tap this out to make it a little bit more clear so um go ahead and save this by hitting contrl s and now go back to Unity and if we um go on the player main camera and select our Mele you can see that a new variable has popped up called the max distance so if we go ahead and hit play and now go into unity and and click the mouse you can see that something should happen when the distance is below 1.5 and we can set this to something else so you can finetune this play around with it but right now nothing is really happening so we need to create a very very simple opponent and right now our opponent doesn't need to do anything else than Lo lose health I know that's pretty boring but um that's what we'll need him to do so we'll make a new opponent this time we're just going to make a capsu going to game object create other capsu and then saring out the transform to get him in the center of the scene and then hitting F in the scene view to Center on him and then draging him up just above the ground plane and you can position him uh position him wherever you like just so you can reach him with our player and now we can go ahead and rename this game object to enemy and on this game object we want a script so go to add component new scripts and it's going to be a JavaScript um like everything else and we're going to call this enemy logic just for now um and then create um and go ahead and double click the script and this one is going to be really really simple so um going to mon develop and um for now you can just go ahead and delete the two functions and um we're going to start out by creating a variable so VAR and this variable is going to be called health and this is basically how much health does the player have so by default um I'm going to set this to 100 um and that's because in our melee system script we set the damage to be 50 and I would like him to die in just two hits so uh end this up with a semicolon and now make some more lines and type function because we want something to happen in the script and call it apply damage and uh right now all your bills should be ringing ringing because remember we called this function in our Mele system so this this is really what we're doing here we checking the distance and then we're sending a message to this new script that we want to call the function apply damage so I could call this anything I could call this um hit it or anything like that um as long it's uh it's the same right here so okay but we're doing more than just saying that it should apply damage oh um I typed in either so um we're doing more than just that we also giving it a variable that says how much damage that's what we are going to type in these parentheses so um if we go back we can remember we can see what it was called it was called the damage so it's going to be the damage and just to clarify it we're going to say that it's an integer just so Unity won't get confused on with what kind of variable it is just so it knows so what we basically can do here is that we can um type out the curly brackets so we can do something in this function and we can say that Health minus equals the damage so we can refer to the damage even though that the damage is from another script so this is really cool and uh basically what this minus equals means uh it means that health is equal equal to health minus the damage so these two piece of pieces of code is exactly the same it's just easier to type it out this way so Health minus equals the damage all right so now if we we um save this and go back to Unity and if we hit play and we uh try to Center the capsule in our view and press our Mouse button nothing happens with the health this is the variable you should be looking at but if we try to um get a little closer and then presses our Mouse button you see the health just went down 50 points and if we press again it's zero so our um our mechanics are now working and we continue to click minus zus 100 and so forth on and so forth so um but the the dying and all this will create that in just a second um actually just let's just take out this now so um we could create a whole function for it um but first of all we want to check whether or not our health is above 100 or is equal to zero because um this way we'll know whether or not our enemy is De so go into the enemy logic script and type function and um then type um update with um a capital letter and then parentheses and nothing in them and then make the two curly brackets and now we are going to check how much life we have so if Health um and we want this to check if we are on zero or below so if health is under or equal to zero then we want something to happen so curly brackets and then we want to call a function um called de and we'll just type it out this way so de parenthesis and a semicolon this little piece of code is going to try to call a function so what we can then do is go down here and create our function called de and then the parentheses and then um we'll make the the curly brackets and in this we could type something like yeah let's destroy the game object so let's destroy the pl the uh enemy when it's um when it's dead so uh in this function dead we just type um destroy and then in the parenthesis we type game object with a smaller letter and then a capital and then close off and a semicolon so okay let's go through what the script is doing um so when our melee system decides that okay we are close enough and we are hitting the fire one um send the message that we want this amount of damage to be applied um to this script and this script then says okay something needs to happen and um what needs to happen happen is that our health gets um subtracted by this amount and um then in our update we check if our health is equal to or below zero and if it is then we want uh to instant we want to initiate the death the death so um we type death and then uh in our de function we then just destroy the game object so that's what the computer is going to do for us when we hit play so let's try this oh we can just go ahead and clear this error um so let's play and now hit it once and hit it twice and there you go the game object disappears so um that's pretty much it for the scripting part of this tutorial uh now let's do some exciting um animation and um some simple modeling in unity so let's go ahead and make a weapon and you can pretty much make any weapon you want I'm going to make a maze type weapon um and as I've mentioned before please do this in other applications Unity is not meant to model but um just for demon demonstrative purposes I am going to show you how to do this so um create other create a sphere and this is going to be the tip of our maze I'm going go just go ahead and drag this up and even zero out the transforms if you want uh actually I think I'm going to do that so s it out and then drag this up and then I'm going to go ahead and create another game object this is going to be a cylinder and um I'm going to go ahead and make this a child of the sphere because this way we can just zero out the transform and it will be directly in the center of the sphere as we talked about in earlier tutorials and now we're going to uh scale this down and make it longer in the Y AIS and then just drag it down so now we have a grip to hold on to and maybe make this um going to I'm going to just dra it out so I can scale the sphere without scaling anything else and make that a little bit smaller so all right a pretty horrible maze but it will do for now um and oh maybe the grip should be a little small L too so okay let's try that for a beginning so I'm going to rename this cylinder to grip and the sphere to Maze and collapse this and collapse this and I'm going to just drag it over to our player and try to position it in front of the camera um somewhere where it looks all right this is not exactly the easiest thing to do um all right so this will do for now I think um yeah okay that's fine um I'm going to delete this V collider and this is what makes this object collide with other objects in the scene so if we delete this it will simply just pass through them and uh this is only for graphics so we want to uh Delete the colliders and both both the Maze and the grip object okay so now we can go ahead and and play our game and when we play it you see that um our maze is not attached to the players so we need to uh drag it onto the player and then onto the main camera and this way it will follow us around and uh in the scene view this looks pretty silly but in the game view it looks all right and um what we are going to do now is we're going to create an animation that will um make it look like we are attacking uh someone so uh go to window and then animation or press control 6 and I'm going to drag this down to where the console is so now I have the three tabs here and I can drag this up a little bit to get a view out of what I'm doing and now let's select the Maze and let's press this little red button this will ask me to create a new animation and we are going to call this attack and save it and um okay so now we are going to create some key frames so add key on the position y by pressing this little um button and add a key on the rotation to so this will add key frames on both the position values and the rotations and this allow us to go scroll further into our timeline let's try out with about 0.10 and by the way um this is a whole second and this is just milliseconds so Ser on 10 and um we can go ahead and rotate it a bit rotate it down and maybe even sideways and in order to rotate this sideways now um you see if I try to do it now it rotation gets all kinds of weird because it rotates based on earlier rotations so what I want to do is I want to click this Global button and you can see now it says local and I want to uh enable and disable this um when when animating so I can rotate in different ways so this is based on the scene and this is based on um the the object rotation but just play around with it if you can't get it to look quite right uh okay so wanted to hit something like that and then I want to move it down a bit and over like this so if we just take a look at the animation you can see it looks like he's hitting down there and now we just want it to go back to the position that we were in before and uh you can do this but just copying the values so in the position I selected this contrl C or command C if you're on a Mac go to 0.20 contrl V and then and just keep doing this with all the values that change and um this way we'll go back to exactly the same position that we were in before and notice that the rotation was just zero on all axes so we can just go to this 0.20 and type zero in all the rotation axis so now we should have a game object that oh something went wrong here okay so control C to get back we can see okay what did we do wrong so um so 20 and zero out the rotation and well now it's working it's just Unity plane trick resour okay so we need to um take care of the position once again um just remember that you can always go a step back with uh contrl C or command C if you're on a Mac um this animation system really needs some debuging um okay so you can see now that we uh have a smooth animation going on and you can go ahead and select all of this and right click on one of the starts and then select flat and this will just make the animation a little bit more smooth and cool looking so if we play this you can see looping and um it's not perfect but it will do for now and uh you can go ahead and click this red button which will take us out of the animation mode and go back to project and uh now that you can see that our mace has an animation component applied to it and there's one animation in here and that's the attack so if we go ahead and disable the play automatically button um it uh it should be all right so what we need to do now is we need to call this animation we need it to uh play whenever we press the attack button so going back to the melee system by double clicking it and opening up in mono develop I'm sorry if I'm going a little quick here but I don't want this to get too long um we can go say that um this we want to happen no matter how far away we are from the opponent the animation should always play a least so if input. get button down then we want to play the animation so animation with a smaller letter dot play with a capital and then in the parentheses we're going to call the attack this should be pretty selfexplain anator if we get the button down then play the animation it's that simple so let's go ahead and open up in unity oh I can see that we have an error so it doesn't know the attack oh I see um you have to create these so okay now go ahead and clear this error up and yes no errors and let's play it in unity and now when we press oh something is going wrong here um un just went hawi um I'm sorry I'll be back in just one second no um okay so we have Unity working but it's not playing um so if we go back oh there's no animation attached to this object okay and this is because we have the script on this meele object but we want the animation to play from this maze object and by simply saying animation. playay it is trying to play off of this object so we want to tell it that this maze needs to play an animation so we can go and ahead and just for um just to get a system to it we can go ahead and drag this under our M and so now it lies there and doing this we can have different kinds of weapon and in our M uh script we're going to uh open up the me system we're going to make a new variable and we're going to call this um the uh the Maze and we're going to make this a type transform and I wanton explain this in this video else it will get too long but um we'll cover the transform later it is used so much um so what we'll then do in this code is we're going to type the maze do animation. playay and this way when we go back to Unity um we'll get a new variable and we can just drag our maze selecting this in the hierarchy into this variable so now what we're doing is we're saying that this object needs to play an animation and this object we can just change in unity this is really cool and this is a very simple way of uh finding objects and doing stuff off of them instead of having to go and search for inside the script um using functions like game object. find okay so now if we go ahead and play Unity you can see the animation playing and it is a little Bucky I can see that um the start position and the end position isn't exactly the same but we can just go ahead and change this in a moment and our uh kill function is still working this is really basic Mechanics for doing the um Mele stuff um all right so um what we can simply do now now is we can take our uh position values for this and copy them into the first key frame here so it's it's really because our first key frames values are different from um our uh our values over here in the scene and this is probably because of the fact that we draged it in under a and that way we changed it's um its zero values so um if you haven't done it already just make sure that you notice this um and now we should just fix the last key frame um I really hate animating in unity I hate creating models in unity um do this in other applications please I I beg you so um now when we just finish this all right and then hit the stop record button and we go into Unity it looks perfect so okay that's is pretty much it for this tutorial we can go ahead and save out the scene by going to file save scene and um yes um thank you for watching you can go ahead and hit us up on Facebook and Twitter um yeah um I'm really uh I'm out of Weights so thanks for watching and have a nice day