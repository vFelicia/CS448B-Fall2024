thanks for tuning in at braies hello everyone and welcome to the third video in the how to make a 2d platformer course today we're going to be taking a look at how to uh achieve the parallaxing effect that you see in most modern 2D games so parallaxing basically means that the foreground and the background will scroll at different speeds which will uh allow us to create depth in our game and when when I say depth uh many people get confused because they say well it's a 2d game how can you have depth and it's true that we aren't actually creating depth because we using an autographic camera which before it renders stuff will align everything on the uh on the same point on an axis um but it will allow us to cheat a bit when we see them scroll at different speeds in relation to the cameras so please bear with me uh once you see it working it shouldn't be that uh difficult to comprehend awesome before I get started I just want to quickly say that I'm looking for someone to do the character design because I'm not that great with drawing uh I mean the environment in itself was was challenging enough so if you are good with a pen in any way or just up for a challenge please write to me uh the email and subject line is on the screen or reach out to me at Twitter at brai twet or on my personal Facebook which is in the description cool so that was the longest intro yet I think let's now get started so as always I've opened up unity and right now when we hit play you will notice that everything moves in the same speed and this is not really something that we would like so let's go ahead and change this with a script so this is going to be our first script in this series and please note that this is not the easiest script if you have never coded before maybe check out the mega game course or the going 2D one so we're going to go ahead and create a new game object it's going to be an empty game object so let's press contrl shift n and let's rename this to underscore GM the underscore will make sure that it's always at the top of the hierarchy and then GM for a game master I like to censor this just so we know where it is and uh now let's hit add component new script and then change the type to C and let's rename this to um parallaxing yeah so now hit create an ad and now we can double click it to open it up in mono develop so mono develop is unit's builtin um script editor but I feel free to use anything you want whoops let's try and open this up again there we go it's unity spild in script editor uh man develop does a lot of all the stuff uh it's great for c i find uh especially with the new version it's also gotten a lot prettier with unity 4 um but you can also use stuff like notepad++ uh or Visual Studio um yeah so feel free to choose whatever you need cool so now let's go ahead and first off uh declare some variables so and uh we're going to keep the start and the update functions because we're going to need them in just a sec so first let's create a an array that will store all of the elements that we need to apply parallaxing to so we're not going to apply parallaxing to the uh middle where our platforms are going to be and where we're going to have all the gameplay stuff that would be way too complicated we're only going to apply um parallaxing to um the background and the foreground so now let's create a public transform and to make an array meaning a list of objects instead of just one single object we're going to do uh an uh open and close um square brackets and now we can name it so now we can just do let's just do backgrounds for short and close it with a semicolon this is also going to store foregrounds but else we we would have to do elements and yeah backgrounds is just simpler so this is our array meaning a list of all the back and foregrounds to be parallel next awesome now let's create a private float and this is also going to be an array that are going to store all of the parallx scales meaning the value the proportion of the camera's movement to move the background spy and we're going to automate this so that we don't have to apply a a uh value for each one of these elements but we can simply just move them back and fourth and uh on the zaxis and then the script will take care of everything for us so we don't have to like guess how far it's going to back it's going to be we can simply move it on the Z axis so to do this we are going to have a an a list of the object uh object scales so let's call this Parallax scales you could also call it um amount of parallaxing or whatever you want I'm going to call it scales and this is again the proportion of the cameras movement to move the backgrounds by awesome just under this we're going to do public float and this is just a symbol float value not an array uh and we're going to call this smoothing you could also call call it parallaxing amount because it's pretty much what is it does in reality um but in theory what it does is is smooth it so this is how smooth The Parallax is going to be uh make sure to to set this above zero or The Parallax in effect will not work so by default uh let's set this to maybe uh one just to make the effect really apparent cool so uh that was it for our top variable uh declaration now let's do a private transform and we're going to call this Cam and this is simply just a reference to the main cameras transform uh this uh it's it's General good practice to store this in an a variable because it will um it will first of all be faster and also it's just easier uh in writing to just read through it when you when you have a short name for it cool and then we're going to do a private Vector 3 meaning a uh tuplet meaning uh you know a x y and a Z value and we call going to call this previous cam position and uh this is going to store the position of the camera in the previous frame and this is what we're going to use to do uh the calculation of parallaxing and the calculation itself is not need something you need to understand uh it can be hard to wrap your head around uh but please just write this uh after me and and we'll look into understanding it further later um or you can always look up the effect um cool so now let's create a void a wake function whoops awake and let's open up some square brackets here oh not some square brackets curly brackets I mean there cool and uh the reason why we have both an a wake and a start function is because I wanted to explain to you the difference of the two so the awake is called before start and uh what it does is um is it will uh call all the logic before the start function but after all the game objects are set up this means that it's great for assigning uh variables like the camera here so just assigning references between scripts and between objects so uh grade for references awesome uh I try to comment out a lot of the code I write both so you can read it afterwards and also just so you can quickly look back if if you don't get my my uh verbal explanation um so I hope that's okay now we're going to set up the reference uh the camera reference reference set up camera reference and uh we do this by writing cam equals camera. main. transform we could of course just uh make this a public transform and then drag in the camera inside of unity but this way we just select the main camera uh much more easily and we make sure that we always remember to do this because we don't have Z awesome so the start is used for initialization and that's what we're going to do we're going to initialize our different variables so first off we're going to say um we're going to store the previous frame so the previous oops previous frame had the current frames C camera position so we're going to do previous campus equals cam. position so this way we assign the cam uh previous cam position to the position of the camera uh just uh when starting out and uh again please just ignore this that's just something we have to do and then what we're going to do now is we're going to Loop through meaning that we're going to uh take the uh backgrounds list here it's technically an array but I will call it list um and we will take every element in it we'll say hey you're an element and then we will uh assign that element a parallx scale so um basically what we'll do is we'll say um that the parallx scales list is going to be just as long as the backgrounds and then we're going to Loop through all of the backgrounds and assign their Z value to the The Parallax scales so uh we're going to do this in the start function um and what we're going to do is we're going to type Parallax uh Parx scales why is this not working let's try this again parallx uh scales equals H have I written yeah I forgot to write this with two L's so let's try try this again you were probably thinking this all along parallx scales equals new float and remember the two square brackets uh and then assume my colon and inside these square brackets we can declare a length so what we're doing here is we're simply saying that the parallx scales uh should be an array of this length and the length is just going to be backgrounds. length awesome so whatever we we set the backgrounds uh to be we are going to uh get the length here and then we're going to Loop through them so four in I equals z i is less than backgrounds. length i++ and then open up the square brackets or I keep on saying square brackets I of course mean the curly brackets cool so what we're doing here is we are using a for statement to iterate through and what we do is we make a variable called I and we set this equal to zero and we say that as long as I is less than the length of the backgrounds we're going to keep on going and every time we have looped through this we are going to set uh I um we're going to increment I by One so this will allow so this will be called as many times as the background. length is long and what we can do in here is we can set the Parallax Parallax scales and then inside the curly brackets we're going to do I equals backgrounds and then inside the colur brackets we're going to do I again position do Z and then we're going to do time minus one just because that's something we need to do don't you don't need to worry about that just make sure that the times minus one is in here or we're going to get the opposite effect of what we want so what we're doing here again in summarize to summarize it is we are um making sure that our parala scales list is just as long as the backgrounds then we are going through each background and we are assigning uh that um background set position to the corresponding parallx scale awesome so that was basically it and again um you don't need to get all of it right away uh but I'll just say here that what we're doing is we are assigning corresponding uh parallx scales cool then in the update function we're going to get to write the actual logic here so what we're going to do is we're going to write uh another four statement so for each background we're going to do this so for I I'm sorry in I equals zero I is less than backgrounds. length I Plus plus so that's the exact same statement as up here we're simply loing through the backgrounds and then the curly brackets and in here we're going to first offset uh say that the Parallax is the opposite of the camera movement because the previous um the previous frame multiplied by the scale so we saying float Parallax equals previous cam position. x minus cam. position do x times The Parallax scales I and close it off so what we're doing here is we are saying that the Parallax in effect should be the difference between what our camera's position is now and what it was before meaning how much is moved and then we are going to uh time this by the uh amount we want the parallaxing to be so the Z value of the background that's basically all we're doing we're taking the movement and we are applying it uh to a v value um and multiplying it by the scale awesome so what we can do now is we can uh here we can set a Target X position which is uh the current position plus The Parallax multiplied uh let's just forget that plus The Parallax awesome so we're going to do float background Target position X so we're making a new variable here equals backgrounds of Y of I do position X Plus parall X so we are just saying that the new uh we are taking the parallaxing and we're applying it to a actual position so we are storing uh the background Target position um X um in this uh variable we are storing the position of the background plus the parallaxing that's all we are doing and then uh next up we can create a a Target position um with uh the actual X position and the actual y position so we can create uh a vector 3 here so let's do create a Target position um which is the backgrounds current position with its Target X position so we're doing Vector 3 background uh Target position equals new Vector 3 background Target position X for the x value and then we're just setting it to the Y and Z of the backgrounds So backgrounds I Doos doy and backgrounds i. position do Z so basically all we're doing here is first off we are making a variable for the x value and then we are adding this to the uh Target position uh which is just a vector three um so it's just going to assign the background Target position on the X and then take the same Y and the same Z as it had before we could also do this on the Y but since we are not going to be moving too much up and down I think that we will leave this out uh so far and then maybe add it in later that's a challenge for you if you can figure this out on yourself um please go ahead and and try it out um but it's not something that we're going to add right now I think this is more than plenty and uh I know know that this is maybe too difficult for some of you but please not that that you can of course get this uh script from bra.com um should you be lost and definitely not all of the coding that we're doing is going to be this hard this is pretty much uh the peak I hope cool so then we are simply going to lurp meaning fate between the backgrounds position uh and the new Target position so fate between current position and the target position using what is called lurp and we do this by saying backgrounds of I do position equals Vector 3 do lope so Vector 3 has an automat has a l function build in allowing us to fade between positions and that's really awesome so inside of this we're going to fade between the backgrounds uh I do position so our current position and the background Target position and we're going to do this using the uh smoothing effect times time. Delta time and time. Delta time is hard for some to understand but basically all you need to know is it Con converts uh frames to seconds so instead of doing this uh by frames meaning that if your comp computer was running this uh really well the background effect would be all kinds of crazy uh that we're doing this in seconds instead so we're going to round this off and uh yeah cool then at last when we get out of this for statement we're going to set the previous cam position to the C uh camera position at the end of the frame so we're going to set the previous uh campus to the cameras position at the end of the frame and we can do this by previous cam position equals cam. position just as we did in the start function that was all okay so if anyone still watching that was basically it so now we're going to hit save and we're going to take care of all the errors this I this might be the first time in tutorial history that anyone has done parallaxing without errors something has got to be wrong but let's try this out so what we can do do now is we can actually set this up and if you've downloaded the script this is where you should uh tune in because now we're going to actually achieve this effect so let me just check how long we've been recording here wow okay so this sure was a long one might need to split this up cool so now uh on this parallaxing script you can see that we have a an array here uh which we can uh adjust the size of we're going to set this to three because we want both the background mountains blue and purple and the foreground dirt uh so now we have three elements in here and please note that whenever you're setting the uh background size Unity will sometimes not allow you to do this if you put in a number and then click out it will just cancel so write three and then press enter uh the smoothing we're going to just leave this at one for now to just see how the effect works and then we're going to tune it down a bit later here because it this is going to be a bit too crazy I believe um awesome so now let's just add the different elements and it doesn't really matter which order they're in so just drag in the background mountains purple the background mountains blue and the foreground dirt and uh we're going to hit play and you're going to notice that this is not at all working and that's because we have to also adjust the that position and this is the really cool thing about doing it this way uh with all the arrays and stuff is that we can actually just select the different uh elements and then move them back in relation to each other so we're going to Mo move this almost as far back as the blue background just in front of that and we're going to take the purple one and we're going to move it also pretty far back but a little less so something like this I believe would look pretty nice and then we're going to take the foreground dirt and let's just see where is our camera it's there you can of course view this from the left side if needed uh I'm going to do that and we're going to just move this over uh if you click on this Cube we're going to change wh That's not going to work never mind okay so let's just move this over so it's not behind the camera it will not appear but just in front and let's H hit play and see how it works so now when we move the layers will move accordingly and this actually looks really cool I think this gives it a really nice effect uh you can see that our foreground is moving faster than the uh middle here and the background is of course moving slower so that's awesome and and we still have a little bit of parallaxing occurring between the two background layers which is pretty awesome so uh I might go ahead and bump this effect down a bit and might even see if we select the camera here how far we can push this n this is as f as it's going to get that's that's of course the only thing that might uh be annoying about this technique but uh is that you you have to still be inside the range of the camera but in order uh to change this you can just change the smoothing and then uh simply adjust them afterwards so let's try setting the smoothing to 10 just to see how it looks and this is going to be pretty extreme you can see this is what paradoxing does when it's way too high uh that justes look doesn't look nice at all but maybe something like let's try 0.5 Ah that's too subtle let's actually try maybe two and again just play around with this until you find something that works this is two extreme I think I'm just going to do uh go with one for now and then we can always change it later uh but that just added some real nice depth to the game so I hoped uh I hope that you're pleased with the results uh we still have some things to take care of for example the looping of the ground here right now it's it's cutting off uh when you get too far to the right we have to adjust some colliders there's the whole Player thing plenty of stuff to do it's all going to be much easier than this hopefully and uh yeah thank you for watching and I'll see you in the next video