thanks for tuning in at braies hello everyone and welcome to this um video this is a live stream um on creating a um kind of uh Bubble Trouble bubble struggle uh replica inside of unity what we're going to be making is this and if we just hit play here I'm just going to show you how it works um we have U some character Movement we have a ball jumping around and when we hit that ball using this uh uh chain arrow shooty thing you can see that the ball splits into two and it will keep doing that until we get to the final stage which which is these little green ones and once we uh hit those and you can see if the ball hit us uh the level restarts and uh so the goal of the game is of course to clear out all of the balls without getting hit yourself and I'm really really bad at that that especially when uh streaming I just tend to crumble in terms of gameplay I would never be able to make it as a professional gamer so um but that's what we're going to be doing today so really exciting stuff and um yeah let's just go ahead and get started so let's begin by creating a new project inside of unity so let's go file new project and um I'm just going to be naming this something like bubble struggle uh replica and we can go and save it under my projects that's fine and we'll select 2D as a standard doesn't really matter and let's also create a project there and unity is just going to go ahead and create all of the necessary files um in order to um make the project run in the background and I'll have a sip of water while we wait for that and again I can see in the chat uh this will be on YouTube so don't worry about that and later we'll do a Q&A so that's super uh that's going to be super fun so we have this clear Unity Pro uh project here and what I want to do is Begin by just creating ourselves a level so let's start by saving the scene control s or command s if you're on the Mac let's just save this as main level and let's also kind of sketch out what we need to have in here we need a player we need some balls jumping around and we need some walls to kind of encapsulate our level and maybe some kind of background as well so in terms of uh creating the player and the walls and the background I want to use very very simple Sprites for this actually just want to use squares which are white so that we can tint them inside of unity and we could just go inside of Photoshop go on Google search for white square there's so much there but I've prepared some here um just in case so we have a square here and again it's just a 2X two wide rectangle really really easy um and in case it's too hard for you to create a 2X two rectangle you can always get this off GitHub later so let's drag this inside of the project panel and then directly inside of the hierarchy and we now have it in our scene and this is going to act as our wall so let's just go ahead and rename this to wall let's also give this a um box collider 2D and um we don't want that to be trigger but I do actually want to U mark it as a rigid body 2D which is going to be kinematic and the reason for that is uh later when we handle Collision detection it's going to be really nice to have these marked as rigid body Tod because then we don't need to do it on our chain and it will make things easier but we'll talk about that later for now just add this component and follow along with me and uh the next thing is of course uh scaling this so I want to give it a y position of negative let's say 4.5 something like that just make sure it's in within the confines of our screen and I also want to scale this up so we can scale it up to maybe something like 75 is going to look quite okay I think think yeah I think that looks just fine so we can take this wall here and we can turn it into a preab down here and that means that we can just easily duplicate it and we can uh move this one up so we're just going to do p positive 4.5 and we can um maybe rename these so this first one is going to be wallor bottom could also call it ground if you wanted to we're going to have wallor top and we can duplicate this wall wallor top and we can rotate it by 90Â° on the Z AIS so just flip it over so uh make it into a sidew wall and we want to zero the Y and we can drag it over on the X and I don't know exactly how much we're going to need this um to be but I think something like negative six is going to look fine yeah that looks just fine and then we can uh change the scale a bit here so maybe bump it down to I don't know exactly how much I think uh 57 might be good actually not totally so we might need to do .5 that's too much that's kind of annoying uh we can do 57 on that and we can uh take the other ones here the top and the bottom and we can maybe adjust those let's see um if we just need to drag those over there so that's 76 for those and that's a whole number that's a lot better something like that that looks perfect cool so we can take this side wall now and we can rename that to wall left we can duplicate it rename it to wall right and then uh flip that exp position so we're just going to make this from a 6 to a positive 6 so now you can see we have the frame for a level and let's just see how the chat is doing you guys are being immature again I'm just going to ignore that and then um we can maybe drag in a background here as well so let's take our Square drag it in as a new thing um we don't want to have this with any ciers or anything like that this just needs to be a Sprite renderer and we can go ahead and add a sorting layer here uh so that we will draw it behind everything else and that means that the layer needs to be drawn or placed on top because then it will be drawn first and then everything else will be placed on top of that so on the background that's awesome and then we can um Mark that as a background we can also change the color we'll do that in a sec first let's scale this up so let's just have a look at it in here see we can bump up the X whoops that's too much what was it I believe it was 76 awesome that looks good and on the Y here it was 65 what was it it was 6 57 Jesus all right 57 uh there awesome and now when we change the color of this of course it's not going to blend together so that's perfect so we can do just make it kind of a darker gray and we can take our walls as well and change the color of those and I'm just going to change the color on the prefab to affect all of them directly uh so I wanted to do kind of a greenish uh feel for this one because we haven't done much with green maybe even bluish actually I want it to be kind of green and um we can take our main camera and change the background to something that looks like it so let's just first off color pick this one and you can totally use this I mean that looks just fine but I want it to be a bit darker and less saturated just to make the uh actual level part stand out and give it this nice Edge so that already looks quite decent and I mean uh currently we don't have any gameplay in here but that is really our environment sort to say we've pretty much done everything we need to do for that so let's just rename this one to background let's also clean it up by creating a new mty object and that's just control shift n or command shift n to create a new empty object let's reset the transform and let's call this one walls and we can take all of our four walls and drag those uh to be a child of the walls object just to clean things up in the hierarchy just simply looks nicer awesome uh everything else yes this is a 2d game and um I am going to be using the unity physics engine definitely and uh yeah awesome we can just go ahead and continue so the next thing that we need in here is of course some player controls so let's just go in here and I actually want to duplicate this Square to create a new one and you might ask why don't we just drag in the Square here and use that to create our player and the reason why is I want this Square to have a pivot in the very center I want it to be anchored in the center of the square however for a player who's going to be standing on the ground I would like him to have a pivot at the very foot of the character so that when we zero him out or at least Place him on here that's what the coordinate system is going to be oriented towards and that's going to help us later so let's just go ahead and rename this one to player as player square or something let's just do player and um in here we simply want to change the perod from Center to bottom that's bottom cender and we can hit apply and that should pretty much be it so now when we go in here you can see that our anchor is indeed down there so that's perfect and we definitely want to scale him up he's very tiny so let's do something like four on the Y and two on the X that's going to look just fine we can rename him player and we can also definitely drag him down on the Y here we want to place him just on top something like that and he has is actually going to have gravity so we can place him with a bit of um distance here and then he will fall onto the ground once we have played so let's now go in here add a box collider 2D and that is just going to Auto scale to fit I believe Yep looks good it might be hard to see on the live stream but I can definitely see a green box there and um we shouldn't need to edit that might need to strink it a little bit but that shouldn't be too much maybe let's just do that right away so15 on the X five on the Y I just think that Unity tends to exaggerate their collisions and it looks better if you shrink the colliders a tiny bit and uh next up we need a rigid body so let's do a rigid body 2D and someone asked what the difficulty rating of this tutorial is I would say it's somewhere between a beginner and intermediate mostly beginner really um we are going to be doing some C scripting of course so if that really scares you um you'll just have to of follow along and and take my explanation for what it is and then you can copy my code and get it to work that way but what we are going to be programming isn't super Advanced we're going to be instantiating we're going to be uh changing some positions adding a bit of force uh doing a bit with triggers and that's pretty much it so yeah so now we have our rigid uh body 2D on here and uh let's see we can pretty much leave all of the different values exactly as is and we do actually want it to be dynamic as well sometimes with player characters uh you want them to use kinematic so you have full control over their movement but we wanted to react to our colliders on the side walls and therefore I'll just leave it as Dynamic one thing that we do want to do is add some constraints because we don't want to be able to rotate on the Z in that case our player would be able to fall over which would look super weird and uh you can also freeze the position on the y axis but I'm not going to be doing that because you might want to have your player on different levels I mean you can have say platforms where he's able to move as well and from where he can shoot his Arrow thingy and that should work just fine and I know that the bubble strule games that I played utilize that in order to create smaller distances where the uh balls jump um to give the impression that the balls jump faster because there's not as much room and you you get scared and it's it's a whole crazy thing so yeah so U we'll put a constraint on only the rot so now when we hit play we should see that our play Just falls to the ground Awesome everything looks good but we can't move him in any way so let's go in here and add a tiny bit of movement to our player in order to do that let's select our player hit add component and let's create a new script called let's just call it player actually and some of you guys requested some cat action and the reason for my typo there was that one of them just laid his head upon the keyboard because he fell asleep so I just moved in over here and maybe when he wakes up we can get him on camera so um awesome so we have our player here and um let's double click on the player script and let's have that open up in visual studio and I can see that I currently have two instances that's something that happens um when you create a new project sometimes Visual Studio won't open that it's going to open it in a new instance so just yeah remove the other one there and we're not going to be using system. collections or collections. generic so we can just remove those we're actually only going to be using Unity engine and the first thing that I want to do is create a v uh variable of type float that is going to store our players speed so let's just do a speed here and defold it to something like four in the original games that I played the speed of the player was actually quite low and that definitely made the games more difficult because you had to time it better because you weren't able to escape out of really tricky situations you simply weren't fast enough but I think the game just feels in place nicer when you have a higher speed I thought the old speed limit was a bit frustrating so I'm just going to put it at four which is a bit higher but you can definitely go in and edit that uh to suit your needs um cool so I don't think we need to do anything in the start method really but we do need a reference to a rigid body and we can just uh do that by making a public rigid body 2D variable and calling it something like RB and then when we save that head into Unity here um that gives us a slot where we can then drag in that rig body TD so that now means that we have a reference to this component that allows us to change things on this component and utilize its functions by simply referencing the RB name that we just declared and we could call this anything just don't call it rigid body with non capital letters because that is a Unity shortcut that means something else and then you're going to have a conflict and it's going to throw a weird warning and just stay away from that and call it something like RB or anything really and uh yeah cool and I'm just going to check chat here to make sure that I'm not going totally um off on a tangent or anything um yeah everything looks good cool so uh now inside of the update method what we will do is we will uh gather some input and again we've done this before in previous live streams uh Unity has a really really easy way of getting some input and that's using input.getaxis raw and this basically allows us to specify whether or not we want to get input for the horizontal or the vertical axis and uh if we just write horizontal here and it needs to be in quotes this here if we just write this it's basically going to give us a value between Min 1 and 1 and if it's zero that's if the user hasn't pressed any buttons If it's minus one that is if the user has pressed to the left and that means either the a key if you're using vast the left Arrow key or using a controller that he points to the left and it's going to be one if he points to the right so if you press this D right arrow or a controller where he points to the right so this here is a value that represents in which direction our player wants to move so all we need to do is now store this in some variable and then we can use it to add forces or move that player so let's store it in a private float variable and let's call this one movement and we can set it equal to Zer by default then in here we simply set movement equal to input. get access raw but again this is going to be always between minus one and 1 so if we want to control the speed at which our player moves we're going to have to multiply that with our speed value so now if we U multiply this and uh the user wants to go to the left it's going to be minus 4 if it wants to go to the right it's going to be four because that speed value is four and 1 * 4 is four cool then in the separate Loop here and this is um why okay so we need to write fixed update here and the reason why we're not doing the actual movement inside of the update I mean the logic is fine every frame we want to move a little bit so let's just move the player inside the update is that unity's physics system really likes if movement is done in fixed update because the physics system itself uses that to do all of its calculations so that's why we gather all of our input inside of the update so that it feels really responsive and then we do the actual movement the actual moving of our character inside of the fixed update because that's where Unity wants to calculate physics so in here here uh we're going to say something like RB which is our rigid body do move position and this is a function again that moves the rigid body to a certain position and the position is given by two values which means a vector two that has an xaxis and a y AIS an X position and a y position so the two values that we want to give aren't just Zer and two we want to give our current position plus our movement so in that case what we'll do um is kind of there's several ways that you can do this actually I just want to go rb. position and then we can add onto that our um Vector 2 do WR multiplied with movement so basically what we're doing here and this is the exact same as actually I should maybe be a bit more clear here this is the exact same thing as saying rb. position plus vector two and then as the first coordinate we specify movement and then zero so what we're saying is we want to move to a new position and the position that we want to move to is our current position plus a bit of movement on the X and no movement on the Y so that's currently what we're doing and um if you think this is a bit confusing that's because this is about vectors and um vectors are a whole mathematical concept that you kind of had to have to get in order to fully understand what's going on here so if you want to learn more about that I actually have a video uh in the game math Theory course on vectors I believe it was the first video actually so if you just go to the YouTube channel youtube.com/ Brees you can go in there find the video gamean Theory forces and learn a lot more about how this actually works but for now you can just copy after me and the final thing that we need to do is actually not use movement but multipli it with time. fix Delta time as well and that's because this um fixed update here runs at a fixed interval and we just multiply with that interval in order to um have it be consistent on different systems so no matter the rate that this uh function runs at we're going to have the same amount of movement so it's just something that you're going to have to do and you do that all the time if you want to do movement over time awesome I believe that was pretty much all we needed to do for movement so now we should be able to go into Unity here and we should be able to uh hit play and let's just move to the left here you can see that works and to the right that's awesome and I can both use a and d and left and right on the arrow keys and when we hit a wall you can see we bump into it and it doesn't work so we do actually have Collision here but it's in a very controlled uh way and you can see just how Snappy the movement is I think that feels really really good cool so that was play movement and I'm going to take a SI of water here and I'm also just going to have a look in uh the chat let's see here um yeah someone says if um we want this to be smooth instead of really really Snappy Movement we can go in here and remove the raw part so just get axis will um also give you a value between minus one and one but it will smooth it out so that when you press a key you can see that it slowly starts and um in interpolates as it's called Uh to the desired Direction that's also uh super nice for a lot of games but I am an old school guy and I like the raw motion uh so we're just going to do that uh for this game at least but again you're totally fine just changing that and then continuing with the uh tutorial um so yeah cool so the next thing that we want to look at is having some bouncy balls in here so let's go ahead and create those so again I'm going to be using a very very simple Sprite that I just created in Photoshop I basically just took the circle tool created a circle exported it and that's it and if we um go out to my desktop here you can see that I've prepared it here it's just a circle don't mind that it's in Photoshop format it could be U PNG as well just make sure that it has transparency and um all we want to do here is maybe change the pixels per unit to something higher just to make it a bit smaller and I also want to change the max size to 64 I believe I exported at a 128 and that's just too high we don't need it so let's now drag this inside of our game and we can see that that already looks uh really good in terms of size for kind of a mediumsized ball so we'll call this one ball and we'll go in here and um maybe play around with this a bit so I want the color of this ball to be yellow this variation can be uh can be yellow I think it's going to look good inside the game yeah that looks just fine and um we want to of course add some properties to this so the first thing is a collider and I think we want to use a circle collider 2D and if we focus on it you can see that the radius fits exactly the way that it should but I do actually want to decrease this a tiny bit again again I think it just produces better results so let's just try that and if it looks like it's clipping through the ground um of of course we'll just bump that back up so um now that we have our Circle collider we also want a rigid body component again rigid body 2D of course and uh all we really need to do here is nothing I believe this should work just fine at least for now I'll show you a glitch with this so if we just go ahead and hit the uh hit play now you can see that it's already working however it's not really bouncing anywhere so what we need to do is add bounciness to the ball and we do that by adding a physics material that defines how um the collider and the rigid body acts in physics space that has two properties um it has bounciness and friction so let's go and create that create a new physics material 2D let's just call this one ball we'll select the ball and drag in our new physics 2D material there we go and that sits under the collider not under the rigid actually you can do it under the rigid body as well I didn't know that I believe that's a new thing doesn't really matter this works fine and then we can select the ball we can pump down the friction to zero we don't want any kind of forces acting there and then we can bump the bounciness all the way up to one so now we can just hit play and we should see that the ball jumps so that's awesome one problem with this is that I tested it and I just left it there jumping around and actually it was increasing ing in height and you might be able to see this on stream or it might not be happening because we are not applying forces actually it looks like it is and for some reason when our bouncing this is one it should bounce to the exact same height you can see it is actually jumping Higher and Higher and the moment it's going to hit the ceiling we have the B Sy s at one why is it gaining momentum that shouldn't be possible for this ball to jump higher and higher we're defying all laws of physics right now and just creating new Force out of nothing but yeah it's really interesting Behavior and the reason for this really is that if we just go ahead and pause it we might be able to see it happen even go frame by frame you can see just how far the ball actually goes into the ground I mean it's not because of the collider adjustment that I made you can see it goes way below the wall and it's actually going into the wall and it's bouncing a bit there and it's creating this negative forth that shoots it right back and that allows it to gain momentum so in order to fix that what we need to do is Select our ball and change the Collision detection from discreete to continuous and this just means that when it's going to collide against other uh static colliders or things that don't move which our walls do not it's going to do it in a much more precise way and I could of course leave this running for a long time just show you that it won't do it again but just trust me the dynamic Collision actually works or at least I haven't had any problems with it whatsoever it's something that not a lot of people know but it's a really really handy trick so what we need to do now is add some start Force to our ball in order to actually make it kind of move across our level because it's not really U that exciting that it's just bouncing up and down in one place so to do this let's go ahead and create a new script and we'll call this one the Bal C script and we'll double click it to open it up in visual studio and um we can delete all the system. collection things and uh let's go ahead and create a new variable and this is going to be a public Vector 2 and this is going to be our start Force so basically what this allows us to do is now inside of unity and this is one of the really nicer things that Unity does is allowing us to edit Vector twos and Vector 3 inside of our scripts inside of the inspector so in here we can now say that we want this to start with a force of positive2 on the X and zero on the Y and then of course we need to also script this so uh that means that we want to apply this Force inside of the start method so when we start we want to do um of course when we're applying a force we need a reference to a rigid body and again we can just do that by creating a public rigid body to the RB saving that going into Unity here and dragging in the appropriate rigid body and that should work fine there we go whoops back into visal studio now we just go rb. add force and the force that we want to add is our start Force which currently is two on the X and zero on the Y and when it comes to forces it can be a bit confusing as to how big does the force need to be u in order to gain uh this much um movement and stuff stuff like that because it's not really using any units we don't have any units on this it's not using Newtons or anything like that uh but really just play around with it one thing that I will say is we need to go in here and specify the Force Mode 2D to be Force Mode 2D to be uh not force but impulse and this U basically means that it uh the values will need to be much much smaller um in order to actually move the ball you use impulse for One Time Force adds such as in the start method say uh in an explosion stuff like that you want to use the impulse mode and you use Force if you want to use a continuous Force application such as for a Thruster on a plane or stuff like that so we can save that now and we should see that when we just head in here hit play the ball should actually be yeah it's it just shoots over and it keeps going until something stops it such just our player and you can see that it can even interact with our player without any issue so I'm just going to move this over here so we won't get hit by it right away but it's going to do a bit of bouncing first but it is coming to get us cool so um that was kind of the um basic functionality for a ball next up we need to do something in order to be able to shoot out some uh kind of grappling hook or a harpoon uh that chain that you saw me shoot uh straight up in the air uh earlier when I was demonstrating the game and uh before we go ahead and do that I'm just again going to have a quick look in the chat to see how everyone is doing are you fine um everything looks good um let's see here everything looks good cool yeah so let's just continue so um what we need to do is of course create some graphics for this so let's start by creating a new uh mty game object again control shift n and let's call this one uh chain and I want this to be the parent object just sit in the middle at the moment and for this chain we can drag in a square which is going to be the graphics of our chain and I want the scale heat here to be something like3 on the X I think it's it should just be really really thin and basically what I wanted to do was move our chain here down to kind of the same level as our players so just let's imagine that it's sitting on top just on top of our ground here and let's move it over and basically why I've nested these object is so that we can have the chain uh we can give the chain a pivot point down here and then we can have the square here move that up and extend all the way up and you can see the chain still has a pivot down here so make sure you're viewing that in pivot and not Center and that just allows us to now if we uh say scale this um up a bit here so just scale it up here to Simply change the Y scale of our chain in order to edit that graphic and if we then go onto a square here and even add a box collider 2D uh that should automatically snap onto it here that's going to scale with it and that might be to see in the video uh or on the stream but I can actually see that we have the screen wrap around so that's awesome so now we can take our Square here and basically I want when this has a y value of one I would like this to be uh go from the bottom of our screen to the top just to kind of give ourselves an impression of what how um the sizes our values need to be in order to reach the top of our level so I'm just going to uh drag this up here and you need to be careful when doing this that you don't mess whoops mess things up I was just saying it here and of course this doesn't need to be perfect uh because the way that we're going to be uh checking if our wave should be pulled back is not by saying if our chain is at one but instead by checking for Collision um collisions with either the balls or on the top wall here the ceiling cool so this is going to be our uh I don't know we can do this chain uh what do we need to call this chain Graphics but it also has a collider so that's not really fitting let's just call this one chain pivot and then we can just call that one chain I think that's actually best I don't like it let's call this one chain and let's call this one chain Graphics there we go that's how we're going to do it and yes it has a collider so it's not only graphics and it's also going to have a script for quite dumb people I don't know what to call it awesome so um what we can do now is of course add a script onto this chain in order to actually make it interactable inside the game so let's go ahead and add a new C component um and let's call it chain let's keep it simple and we can double click this to open it up in Visual Studio as well and uh what I want to do is um start by creating a public static ban called is fired or is firing is um doing something whatever is active something to indicate whether or not we fired our chain or if it's waiting to be fired and we want to default that to false and because this is a static bullion meaning that it can be accessed from all other places without needing a reference to the instance of the class but only the type that's very technical explanation I'm going to show you what that means in a second but because it's marked as static it's going to move or keep its value when we change scene so when we reload our level and if this is true it's also going to be true in the next one so what we need to do is inside of our start set is fired to false to force it to be false even though we've changed levels and uh we can therefore remove that one up there that's a necessary so in our start we're just always going to set it to false cool then in our update we can say that if the chain is fired well then we want to do one thing and if it's not then we want to do another thing and let's have a look at what we want to do in these two cases so if it's fired we want it to stay still and slowly animate upwards which means that we want to animate our wire scale and if it um is if it isn't fired we want it to just snap to the position and follow the position of our character so let's start by doing exactly that so um in order to follow around our player we'll need a reference to our player and that means we need a public transform and let's just call this one player then inside of our update if we aren't firing or if it isn't fired we can go here and say player or we could say um our current position so transform. position equals player. position and because we've gone in and solved all of the problems with our pivot Points because the chain here has a pivot at the very bottom and because our player also because we went in and created a separate object has a pivot on at the bottom center we can just say transform.position equals player. position and we don't need to differentiate between all of the coordinates we can just have all the coordinates be the same and that just makes everything so much easier awesome so when we aren't firing we just wanted to snap to the position of our player and let's just see if that works so I'm just going to leave it at one the chain here and that's fine and we can drag in our player and we can hit play and it should snap over awesome so I don't know what's going on with a player here okay so the reason why our player just went crazy there I want I'm not holding down anything and you can see it's still just goes crazy is the is because we currently have a collision between our chain and our player and we don't want that and in general this game depends a lot on collision so we are going to take a look at at the Collision Matrix I believe that's worth taking a waterf Yeah so basically the Collision Matrix is a way to control what layers and you can assign layers to an object by simply going up here and selecting a layer and you can add new ones what layers which meaning what groups of objects can collide with other layers and the thing uh that this is really handy for is that you can do stuff like disable internal collisions so if you have a lot of balls which are all in the layer ball well then you can disable balls collision with other balls and that means that they can just move around freely without any weird Behavior the same way we can go in here and assign a layer to our player we can also let's just create one for our chain and create one for the wall and let's create one for ball and we can go into a player assign the player go into our chain assign the chain and yes we do do want to change the children not that it really matters um actually here it does because our children is the one with the collider so that's really important and in our ball we'll change that to ball and our walls here I want to change all of them except the bottom one and the reason for that uh to wall so we'll just go in there change all of them to wall um actually I want to go into this one and then change this one back to theault I think that's cleaner cool so the reason why I don't want to change the bottom one to wall is because I want to enable collisions between the play player and the walls um but actually what was my reasoning I think i' I I I know we know to why to do this but I can't really figure out why yet okay so we'll just leave that at default for now and we'll find out why it was that I knew that we should do that at a later point this is the good thing about doing things over and over is that at some point you just do them and you don't really know why but you don't really care so it just works okay so uh what we're going to do now is go under edit project settings and then physics 2D and I reveal to you the layer Collision Matrix and it looks scary really scary and it is because you always are going to mess this up if you're anything like me um but it's it's just so handy so the first thing here is you can see we have our ball here and we also have our ball here so this is our ball with ball collision and we're going to dis that because we don't want those to bump each into each other we also have our wall with wall Collision we don't want our walls to collide we want our ball to collide with walls that's totally fine we don't want our chain um we want our chain to collide with balls that's totally fine as well we uh want our chain to collide with walls and this is why this is why that I uh I don't did not Mark the bottom wall um as a wall and that's because we don't want our chain to collide with that part we don't want that because that would mean that it would sometimes trigger as soon as it's sent out and that would mean that it would return even though we don't see it and things would look super weird so we don't want our chain uh to collide with that particular wall but all other walls um but we do want it to yeah collide with uh objects tagged as or in the wall layer and we don't want the chain to collide with itself we don't want the player to collide with the chain and we don't want the player to collide with the player so you can just go through here and do all kinds of things we don't want our ball to collide with default yes we do uh we don't want our wall to collide with default objects we don't want our chain to collide with default objects but we do want our player to do that so this is how your um layer Collision Matrix should be set up it's super confusing and you can see why it's so easy to mess this up uh but really it's also really really easy to change and this is just an awesome part of unity I really like this because it allows you to do so much with physics without needing to C code all of this functionality in and change it in the code if you just change around some layers you can just go in here have a visual representation of what's going on even though it might be a bit confusing and uh yeah it's just really really nice so um we should be able to now hit play and not explode and we uh we we are able to do that and you can see I can hit the ball here with the um with our chain and one thing I want to do is go under a chain and change this to a trigger I don't think there's any reason why this should be applying forces or anything like that we just want this to be uh to notice whenever it's hit so that we can reset and do stuff like that uh cool so that was the initial part of our chain that was um what is going to happen when we aren't firing and one thing that we want to do here as well is just set our local scale on the y equal to zero so we can say transform. local scale equals a new Vector 3 um with 1 Zer and one so one on the X Zer on the Y and one on the Z and this is also a handy part um when nesting these is that we can set this x to one and still remain the uh the fact that we have 3 on the X of the graphics good uh so that should mean that when we now play this down sizes and we can't actually see it you can see here that it is down here but it's so tiny that we cannot see it it's scaled to zero isn't it y scale y 55 oh it's this one cool yeah I'm confusing myself already so what we can do now is go under our um visual studio and we can have a look at what's going to happen when we do actually fire but first let's actually create some user input that allows us to do that so let's go in here create an if statement say if input dot input. getet bottom down and if we get a button called fire one then we want to um say is fired equals true that's all we still want to pass through to handle all of the rest and um the cooler thing cool thing about this input. getet button fire one is that it allows us currently to use on the mouse for clicking but we can go in here and go edit project settings and then input we can find the fire one and we can add alternative buttons on here as well you can see it has a positive button here called Mouse zero which is our left click uh and you can also do it using the control I want to change that to space so now when we go in here we should be able to and you can really see this click and use space but again not visible so let's actually go in and make this visible so if we are firing what we want to do is um add a bit onto the Y scale of our object each frame so we just want to slowly increase this number and the way that we do that is by going transform do local scale is equal to our current transform. local scale scale and then plus Vector 3. op multiplied with time dot um Delta time. fix Delta time here yeah cool so basically what we're saying here is that we want to have the same one uh or the same x coordinate as we've already always had we want to have the same ycoordinate but the coordinate but our ycoordinate should slow slowly increase and the rate at which it should do that is from 0 to 1 at 1 second so one unit a second and if you want to speed this up what we could do is add a speed up here public float um speed for the chain and set that equal to say two and that means now that when we go down here and multiply that in so multiply with speed we uh will now shoot a lot faster so let me just show you that this is actually working so we can go in here we should be able to hit play and when I now click you can see that our chain goes up we can set the speed to one instead and we should see it go half the speed and it does and we can of course also go below one here if you want some really slow chain awesome so that's working and also you can see that we can move away from the chain once it's fired so that's a really important part of the script you will also notice that the chain doesn't reset when it hits the ceiling it just keeps going or whenever a ball bounces centered that simply nothing happens and that's because of course we marked it as trigger but also we haven't implemented any code for actually resetting this is fired variable that's just going to remain true so what we go uh and do now is add a bit of collision detection or trigger detection on our chain Graphics object and then we simply reset that variable so that's the next part of this whole thing and we are getting closer to actually having a game here the next thing that we're going to be doing after that is actually splitting the balls in two and spawning that and that's actually the most uh fun part if you ask me so don't worry we're getting to it just in a moment so again water and um you guys are being awesome in chat really awesome to see so many people in here um and people are still talking about a lud Dar that's awesome and uh yeah I think we're just going to go ahead and continue cool so uh yeah the next part is of course uh registering when some object enters this uh TR chain trigger and to do that let's add a new component let's call this something like chain Collision or chain trigger chain event ah we can do a lot of stuff this with this let's just call it chain coll let's double click it again to open it up in Vis studio and uh now we can go in here and we can have just a single function here the function that we want and we can delete this as well there we go the function that we want is a void ont trigger enter 2D there we go and you need to write this out the exact same way that I've done it here no improvising on capital letters or anything like that because this is a Unity call back back just like start awake update fixed update this is called by unity when Unity Unity decides to do so in our case this function is going to call whenever a um collider so that means our ball for example or our walls hit the trigger collider on our chain then this method is going to call but only once only when it's actually hit when another collider enters the trigger so this basically allows us to uh just throw out a debug.log statement when this happens so something hit the chain there you go and this should actually work right away um we don't do any checking on what uh what hit it but you can see right off the bat it says something hit the chain and I'm not totally sure what hit the chain but something did and we can we can go ahead and hit um and fire it here and you can see when it hits the wall it says something hit the chain it should also do so when our um yeah does so when our ball does it as well so you can see that that is working and it shouldn't be a problem that something hits it in the very beginning I don't quite know what it is that it's colliding with because it shouldn't be able to oh it might be the top here before we reset the position that could be it if we just go in here and set the Y scale to zero just to test this just to test this out you can see that disappears so that's why it it triggered right off the bat so what we can do now is go in here and and every time something hits this trigger um we're simply going to reset our chain and we don't need to check if it was a ball or wall because that's the only things that our chain is able to collide with because of our physics uh trigger our physics layer physics Collision Matrix thing cool so what we can do is simply say chain dot is fired equals false and that's it and that's the awesome part about using a static bullion is because we only have one player in here one chain we can use this static one to control this instance here without any issues I mean if if we had multiple people we couldn't do it this way because U that would reset the chain for all of the players but it just allows us to say chain do is fired and we don't need to reference this particular object so that's really cool and also I actually want to change the I here to Capital I not a not a capital s and uh just to make things uh make it clear that this is a static variable that's a naming convention that I like to use and the way that I quickly rename everything here and it's also going to rename in the other script is by using control R control R so you need to do that twice and that forces uh Unity forces Vis Visual Studio to do refracturing so can also right click I believe you can go something like rename here you can see there it's called refracturing awesome so that should actually reset our chain when we go in and hit play now um we should see that working so if I just let's try hitting the wall awesome resets it and the same thing when we hit a ball of course nothing is currently happening to our bow so um before we make that happen I'm just going to go in here and change the color of on this chain here I don't think it's too pretty just want to tint it the same color actually as um our border I think that looks good so I just used the color piger to do that and uh I'm pretty pleased with that so we can change that back to zero and uh yeah good so the next thing is of course we need to check if what we've hit is actually a ball because we are both colliding with walls and balls and so we need to check if it's the one it's if it's one or the other and the way to do this is we gather information about what we hit by creating a variable up here collider 2D and we're just going to call this uh call for collider and what we can can then do is say no matter what we want to set chain that this F to false but we can then check if call do say tag is equal to ball or wall in which case we want to uh do some stuff um with the ball we want to split it so debug. log split ball in two there we go and all we need to do in order to trigger this is now go into our ball object and change the tag here to a new one that we're going to be making called you guested ball cool so we'll just tag that as ball we can also drag this down to make a prefab out of it that's going to be yeah it's just good practice and now we should see that when we hit play when we hit our uh roof here nothing happens when we hit our ball it says split ball into two and that is the next thing that we will be doing so let me just see everything is going on well uh a lot of discussion about visual studio and mono develop I mean it's really about what you're comfortable with but um I will say if you're on Windows and have free access to visual Studios I don't see a lot of reasons to use mono develop maybe the Simplicity and that's of course a good reason if you're starting out but visual studio just has so many nice features it's so ex extendable and um it's just really solid mono develop has a lot of issues in terms of crashing and stuff like that but then to be fair I haven't been using model developed for a year now so I don't really know what the current state of the software is but yeah just wanted to comment on that cool so um yeah the next thing is splitting the ball in two and what we want to do here is create a script actually we already have a script um but we want to modify our ball script a bit what I want to do is create a public function a public void which means that we will be able to call it from in within our chain Collision script whenever this happened we'll be able to grab the ball and call the function this function on it and it's going to be called something like split and U what we need to do here is of course destroy the current object so we want to destroy our ball and uh we do that by simply calling destroy and then giving it game object with a non capital G which refers to this game object that the script is sitting on which is our ball U but we of course we don't want to do this first because then the rest of the code won't be called so we want to do some stuff and then destroy the ball and what we want to do is instantiate some new ones in case there are any more uh to instantiate at least so let's create up here a public game object and this is going to be a reference to the next ball preat so let's just call that next ball and that allows us now to go in here and you can see there's an empty slot where we can drag in the prefab of the next ball that we we want to spawn we can even drag in our own prefab which means that each time this ball gets hit it's just going to spawn two copies of itself and that's already pretty fun so let's just actually try that now it's going to be an infinite game but and hit apply on the prefab and that's an important part it's going to be an infinite game but it's going to be fun so what we can do then is um if our next ball is not equal to null so if we've actually dragged something in there if we haven't that means that it's the last ball or we forgot but uh it should be mean that it's the last ball and therefore we simply want to destroy it so that we can continue on to the next level uh but if we have something in there we want to instantiate next ball and we want to instantiate it at our current position which means rb. position and the reason why I'm using rb. position and not transform. position here is because rb. position gives us our position in X and Y and ignores the Z component so as a vector 2 but transformed opposition always gives a vector three which is annoying so we'll just use RB position and then um we can use Quan do identity because we don't want any rotation on this and uh we can go ahead and duplicate uh this entire thing and um I want them to be spawned at slightly different positions I don't want them to be spawned totally on top of each other you can do that and it's going to look look fine but I think in the original games that they offset them a bit so that they start a bit to the right and a bit to the left and to do that we simply add on to here Vector 2. right and then we can maybe divide by say four so that we don't uh offset them by a full unit by only a fourth of a unit and we can uh do the same thing here so plus Vector 3 and then left divided by four so just offsetting them a tiny tiny bit and this should already work um if we go in here and hit play we should see that when we hit this ball it destroys itself whoops of course we also need to call the method so now we need to go into our chain collision and we need to go in here and use the fact that we have a reference to the collider so our ball is currently called coal and then we need to get the um ball script on that object so this here this ball object is called coal here it's the collider and we need need to get this particular script so we can call a function in that script and we do that by going call. getet component of type ball and then we do dot in order to access all the things on in that ball script and we then uh go um split the the split method and we call that particular method so again when something enters our chain we're going to collect a bit of information about what entered we're going to say that we're no longer firing we're going to check if the the thing that enters um had a tag of ball and if it does we're going to get the ball script off or component of that object and call the split method on that which is going to go in here or not in here um and actually check if we have another ball to spawn if we do it's going to spawn too and destroy the current one cool so now we should be able to play here and things should work so let's see there you can see it's instantiates two new balls but you can see our forces here are acting really weird I mean they're going all over the place and we do not want that what we want instead is of course reset our start first down here we want that to be zero and then on this particular ball here that we placed in the level we want that to be two so from now on we want all of the balls in the project to have zero and then we can change them for the individual instances but without hitting apply then uh what we can do is control the start force of the balls that spawn inside the script and we do that by first getting a reference to the objects that we've instantiated themselves so the entire game objects and we do that by first saying game object and then creating kind of a temporary variable to store it in and this is going to be B uh one actually I'm just going to do one like that and we are going to set that equal to what we just instantiated what we just spawned we're going to create a second one here called Ball 2 and set that equal to the second ball that we just spawned what we can then do is use get component on both of these so ball one. get component of type ball just in the same way that we did our chain Collis here we want to do get component ball and um what we can then do is set the start force on these B so we can set start Force here equal to a new Vector 2 and the first coordinate needs to be something like two is going to be fine and I also want to give them a bit of force on the Y AIS and this allows them to kind of get that nice bouncing TR um tra trajectory whatever how you say that um where they kind of Bounce upwards and over so they apply a bit of upwards momentum each time we split them in half and that just gives a bit of liveliness to the game and I want to set that to something like five on the Y so we can now duplicate this entire thing and we can change the uh this to be bold two and here we want to apply 2 on the X so that this will go in the opposite direction and uh that should actually work so I believe that's pretty much all of the core functionality that we need in here now it's just a matter of setting it up in unity and maybe also adding an in condition so if we we hit play here we should see that when we hit the ball awesome it splits in two and it's just going to keep doing this infinitely so this is another example of what how you can take this same concept and these same mechanics to create a fun little mini game kind of a spinoff to the original series and you can see that I currently cannot die so this is just happy times where we can keep doing this until the computer gets really TI fired and maybe crashes but it is definitely fun so we won't worry about that and you can see here how important it is that we used our layer Collision Matrix to make the balls not collide with each other but yeah that was uh kind of the base of what we need um to do so before we continue on and actually make this into a playable game let me just have again a quick look look in the uh in the chat here um let's see no need to get component because I'm already in the ball script that's not totally true because uh this ball script here refers to the ball that is currently being split in half and that's a separate object from the two balls that we want to create so what we do is actually uh spawn two balls from this um this ball from the current ball being split in half and then we have references to each each individual ball and we get their individual versions of the ball script and change their start force not the start Force for all of them but they particular start Force so that's why we need to use get component and that's kind of the base of understanding the difference between a type which is our class up here which is our ball type and the fact that we can have multiple balls in there different instances of that type so yeah I can see why you get confused because the naming is the same but now we are not talking about a type we are talking about a particular instance a particular creation a particular ball um so yeah that's the difference there really good question though all right so um where to go from here I think uh we need to link up all the balls and then we need to do an uh a game over condition so the first thing is is really really easy and it's really something that you should just go nuts with in terms of imagination and just um figuring out exactly what what you want to do I'm just going to create a ball let's make this ball four and I'm going to do ball 04 here and um we can duplicate this inside of the inspector here and we can um so this is ball five and we can see how Unity automatically names it it names it it's totally awesome um and we can take our ball four and drag it into the next ball of our ball five and that means that when not ball five splits in half it's going to split into ball four and yeah you get the drill and we can change the color of this bow and actually let's just get it inside the inspector so we can see what's going on so this is bow five we can change the color of this to Something red to indicate that this is really large and dangerous let's also bump up the size to say 1.5 and uh that looks just just fine actually uh the ball four is fine we can duplicate that and we can rename this one to ball three because we want them to get increasingly smaller now and uh we can make this one uh say blue I believe I made it blue in the video so let's do the same thing here and we can bump down the scale to say 6 on all the axes and that's going to look fine and notice how the collider follows our scaling so that's really really nice we don't have to worry about scaling that um separately and I changed that inside of the uh game itself I want to change it in here instead so 6 on all the axes there we go but really we could just hit apply makes no difference awesome and we want to not drag in ball three here we want to have our ball four reference the ball three and we want to have our ball three reference ball two which we're going to be creating now so let's create a new ball here ball uh two and we can just keep going with this to create as many stages of these balls that we want to so I'm just going to have B two in here and um this one again let's drag it into the scene this one I would like to be uh green so let's make it green here and we're going to make it even smaller something like3 I think is good that might be too small because we want one to be even smaller than this so maybe 045 is going to be good and we can make that green that's cool and we want to reference that under the ball three of course something like that again I'm creating One More Level than or level one more ball type than uh what I did for the video but I just thought that I would show you how easy this is to do we can create ball one now as well I drag that inside the inspector have this be uh some other maybe even just gray could be fine because it needs to be so small but still it's really dangerous when they they're this small because they are really hard to hit but we can make this say 2 on all the axes I think that's kind of fun to have a really small devil in there um and I actually want them to maybe be yeah let's just make it gray and U we need to reference that in ball two so ball two references ball one and ball one doesn't reference anything so that will actually Pop um and that should work just fine so you can see how that is set up hit apply on that um we apply this we apply that the ball four here we don't want to apply the start Force we want that to be zero apply that we delete all of them except for the biggest one which is our ball five move that somewhere over here for example and now we should see that this is working so let's hit play and try the game out so okay so we need a start force on that so ball five here we can set two on the X for the start force and we should be able to see them splitting and that's awesome so you can see how that looks and again when we kill off the gray ones uh they are indeed going to disappear so this is actually quite difficult luckily I'm not able to die yet we haven't implemented that yet but it's still woo not totally easy but I feel that this is already a pretty nice spinoff game and it's actually a lot more fastpac in action pack because um everything moves a lot quicker and the player does as well so yeah it's a lot of fun so the last thing that I wanted to do was just implement the um the game over and in order to do this we just have to look uh uh we just have to have a look at our player we can double click on our player we can create a new on trigger actually this is going to be uh this is going to be an on collider enter Because this is a collider so on collider uh enter 2D again this is not a trigger so we are have a collision that's not a trigger enter and um we don't want to use collider 2D because we actually get more information we get Collision 2D and this is the same as collider 2D but instead of just having a reference to what we collided with we also get some information about how the Collision uh went so the force at which they collided and the point at which they hid and stuff like that so we simply get some Physics information that you don't get when using a trigger um and whoops what we do I turned on insert there we go so what we do here is simply go call as well and then we say if uh call. tag. collider do tag is equal to uh ball well then we want to restart so we can just throw a debug.log here saying game let's do a more dramatic one game over and in order to restart our current level we simply going into Unity uh we import Unity engine Unity engine. sort. scene management there we go and down here we simply go scene manager. load scene and the scene that we want to load is the currently active scene so we go scene manager. get active scene and then we need to do either name or build index because we can't feed the actual scene we need to feed it either a build index or a name that's the exact same thing and that should actually be it I believe that's all all um we needed to do on not on collider enter it needs to be on Collis enter like that yes good that wouldn't have worked thank you to the chat for the people to skyex with just saying that and I would totally have been stuck at that on that for a long time it's the worst so um yeah we should see now that when we get hit by a ball it's a game over and just quits the game and you can easily add a slow motion effect or something cool in here uh to make the game over look better you can add some UI and then delay so that it doesn't just restart immediately check out the Dodge the blocks uh tutorial it's on the YouTube channel that was also recorded live live stream again dodg the blocks if you want to see that kind of um bullet time slowmo uh when you get hit by something and and then it restarts so I think that was all one thing that I just noticed is that our chain is in front of our player but all we need to do here is simply change the order and layer to something smaller than our player so we could just do minus two there and that is now fixed so that's the entire game everyone I hope you enjoyed it um I really don't have anything more to add I'm just going to attempt a playr here now that we are finally done with the game and then we can go ahead and do some Q&A so prepare your questions actually just Spam them in the chat CH already and we can kind of transition to that part I really hope that you enjoyed this again if you missed out on something if there's something that you find difficult um right after the stream this is going to be available in the um twitch archive I'm also going to upload it to YouTube as soon as possible and um I'm also going to be uploading the project to GitHub at the same time that I upload to Youtube so you can get your hands on all of the code all of the really super high Advanced graphics and um uh the full Unity project so I'm just going to hit play here and let's have a play through and let's see how this goes so I'm just going to attempt attempt to beat the game and it's not going to happen I can promise you that I think we need to start with some of the smaller ones instead of splitting up some of the others uh immediately or else we're just going to have a lot of things flying around this is actually going a lot better than I expected and I know that right after saying that oh I shouldn't have done that no no no no this is where the decision making crumbles uh it's actually going whoa Jesus all right so these live game plays are Al always really scary I cannot believe people who yeah I messed it up I'm sorry we didn't get to the end of the game ah I will never ever do a separate gaming channel don't worry uh it's just embarrassing cool so let's change to some uh questions and answers and for this part I'm going to change over to the chat twitch layout so you can see the chat on YouTube as well and uh yeah give me some questions so um why don't I use autocomplete I do use autocomplete uh I don't know if it's just turned off on V visual studio right now sometimes it bugs out no no it's here I use that all the time uh sometimes I just write it out if too lazy to actually select it on the list but I do that a lot um is it easy to get the line uh to go to the mouse position so um do you mean that the line should just follow around the mouse you can definitely do that quite easily you just need to use input. getet Mouse position and then you can do some things on the camera uh to turn turn that into a from a screen coordinate thing into a world de ision thing and there's a lot of stuff on that on both the breus Forum the unity Forum um there's a lot of tutorials on that it should be relatively uh simple um I will not stream at ludum Dar uh unfortunately I will be participating but I cannot really say how much I'm time I'm able to dedicate yet and so setting up streams and all of that it's both really time consuming and frankly quite taxing especially if you need to uh uh to stream for so long so I'm I'm really sorry but I'm not going to be streaming it on this time I am however going to be recording my progress on the game and unless it turns out really really bad I'm going to make a postmortem uh video the same way that I did where it's kind of behind the scenes and I show the creation of it that was just really really fun I think it's one of the best videos uh on the channel if I if I may say so myself I think it's uh it's just a lot of fun because it combines a lot of subjects and and shows kind of the full process of game development at least the fun process cool so um um yeah so um someone asks keywords like rigid body are being called obsolete by unity I know it's for downwards comp uh compatibility but how old is this why don't they just remove them they also change networking stuff so old projects don't work anymore why keep this old not working stuff I think um yeah that one is a tiny bit silly I mean what they do is they have this automatic Patcher that just takes all of your code and makes it use modern Unity standards and that worked a lot when they did a big um API change in the beginning of five um Unity 5 um I think really what they did to the API is a lot better and so I don't use those OBS obsolete things anymore it is for backwards compatibility and some people are just too used to it and need some time uh but yeah I mean it's not really helping me but again if I had a huge Unity project that would be kind of annoyed if they didn't support it for at least um some months or a year so but I'm sure they'll remove it at some point uh it's also really nice for tutorial channels like my own that they keep stuff like that working just so that when people watch a tutorial that might be a a tiny bit dated um they can actually use the code it's not just going to break and they get and they say well F this I'm out this I don't want to do game development it's just a warning saying that you're not using it totally optimally uh but frankly beginners don't care about what's optimal so I I I actually kind of like that they support that stuff um in terms of being able to follow along with um with tutorials um all you guys are giving me compliments that's so that's so thank I'm so thankful for that um what kind of pro products do I use for my beard I have a I actually use nothing um I don't use any kind of products I I use soap uh and I trim it a bit and that's it if it looks like I'm using product I don't know if I need to take that as a compliment but I'm sorry I don't really use anything and uh Sophia is laughing over here she's having a blast um so uh let let me see what else we have um do I still need a model designer I'm actually it's kind of an ongoing project and I'm always looking for 3D artists and it's something that I wanted to talk about here I don't want to say what it is that I'm doing just yet but if you are a 3D artist and have some experience especially if you I mean U modeling texturing exper experience is pretty much required uh it's really nice if you can do concept art if you know how to do character design and riging an animation but all of those are just plus uh extra things that are really nice to have but if you know how to do 3D models and have some experience feel free to just throw me an email at apply bra.com again apply brais I'm just going to put that in the chat apply bra.com and um yeah it would be super awesome to work with you guys we already have a lot of people working uh on the project and it's just it's so much fun so feel free to uh throw me an email right away after the uh stream ends um with a link and make sure you include a link to your portfolio or previous works I'm not going to um consider you unless you actually show me some of your work because this is an artistic thing and I need to see uh some some work so that I know we're kind of in line in terms of uh yeah you know um cool so what else are is going on here how much knowledge in C++ do I have um limited amount I know my way around C++ I can read uh a lot of C++ I don't feel fluent um but I I feel like I know the language pretty well but then again C++ is such a huge language so it's just really something that I feel that I know the surface of uh but I I can code a bit in C++ but don't hire me as a proficient C++ coder just just saying don't do that cool um do I watch The Walking Dead um I have watched it I don't anymore I watched I believe three or four Seasons um fun show uh really in a decline of quality I think I think the first season was really exciting then the second one was n and then it just got worse so I kind of lost interest but yeah fun show um let's see what's else what else is going on here um am I planning on starting a bit more advanced series on YouTube and RTS would be amazing again I I would say that an itts would be really fun as well it's just one of the most heavy things that you can do um at all and I would like to do some more advanced stuff um but it really depends on kind of what most of my audience want to see if you guys a lot of you guys want to see some advanced stuff that's awesome but in terms of Engagement I feel like most of you or most of my subscribers at least maybe not all the ones who are here but you guys are probably more hardcore uh than the average subscriber but most of of the subscribers I feel want to see more beginner related stuff but I of course want to do some advanced stuff and of course we're going to do that at uh some point also want to do maybe not quite as long series but more tailored towards a specific subject for a long time I really wanted to do like realistic car movement uh for like racing games and stuff like that that could be so fun so I want to create some miniseries of Standalone tutorials as well and though uh one of those might be really Advanced I mean uh we could look into that do I have any advice for young game developers um I'm 14 years old yeah just keep at it man just keep making stuff um try and um Set uh realistic goals for yourself so don't try to create these huge projects where you get burn out and um really what you learn most doing is just small finished projects even though it's maybe just something like this just getting some core um mechanics in there trying to make it fun and trying to make it work tuning the colors even though it feels really simple and might not have AAA Graphics or uh a huge networking system or anything like that just try and make something that you know that you can complete because finishing a game and getting the experience of putting it out there and getting your friends to play it is one of the most important parts I mean it's something that you're are going to need experience in if you decide to do a uh project that's larger and will require multiple years of development so that you don't make a mistakes takes on the later stages of development and also kind of just to put fuel on the fire so that you don't lose interest I mean that would just be really really not cool so yeah just practice man it's it's a lot of fun find some friends who who want to do it with you and and make some games with them that's sometimes the most fun part um what is programming H Jesus programming is getting to do computers to do stuff that you want them to do it's pretty much my best explanation I think um and you often have to do that by telling them really obvious and stupid things um so let me see uh um how cost this uh to call the component of an object I assume you mean finding a component using get component or calling a function on the component that's two separate things it's not too costly Unity has really optimized finding game objects and finding components uh a lot since they started of course it does require tiny bit of time but really if you want to see how costly it is and it totally depends on the uh scale of the game object if it's a huge game object with 20000 components it's going to be really slow uh so they do optimize it in that way um but really you can just open the profile and have a look at how long it takes um see um am I planning to do a 2d terrain generation series like the terrain in the 2D physics based card game um that wasn't actually generated that was just um me jumping in Photoshop and creating a ridiculously large um path and then just filling it out with color it's only cuz I never showed you kind of the confines of the level that you would think that that was actually generated I mean if enough guys uh enough of you guys suggested I definitely could look into that it's kind of advanced um but it could also be really really fun so again I I pretty much want to do anything guys um as long as enough of you guys want to see it um I'm up for it I mean programming is fun and and trying to do stuff that I maybe hadn't thought of myself as always a challenge so that's awesome um let's see uh next episode of Game man Theory when what is about an aquatan explanation um yeah next episode of uh game man theory is going to come don't worry it's not over when I don't know when I when I get time uh the side project that I haven't told you about yet which is the reason why I'm looking for artist has taken up a lot of time I'm sorry um but um I definitely want to do more game ma Theory I think it's probably some of the videos I have the most fun creating but they are also hugely time uh um huge time swallowers I mean it took me about five to six seven times as long to do just one of those videos as a normal video so it's it's really a lot but and what is it about I have some ideas querian might be in there that could be pretty fun I've seen a lot of you guys suggested but also curnan is a more difficult subject than what some of the other uh videos entail and it kind of requires some understanding of some fields that I don't feel like I've covered yet so I might want to do other videos first and then we can always look into quas later but I'm still figuring that out it depends on how much I can feel like I can squeeze into a video without having it be like too much to to follow along with um let's see uh can I make a multiplayer RPG again I'm sorry I'm not going to be making a multiplayer RPG it's simply too heavy both when it comes to code when it comes to Art sound everything in a multiplayer RPG is oh it just requires a lot I mean maybe not a massively online multi player RPG that's for sure maybe an RPG maybe multiplayer I don't know I don't want to say never I mean if all of you guys just suddenly started saying Mega multiplayer RPG you would have one tomorrow I'm kidding I I wouldn't be able to do that but I would definitely do my best to to kind of cram everything I could into a tutorial uh what was my first programming language my first um non visual programming language was on Visual Basic uh didn't like it not one bit um I also tried to kind of read some python because I played around with the uh blend new game engine and that had some visual scripting but also also python U but yeah the first programming language that I really fell in love with was uh was JavaScript and then C is is now my I feel like my main main language um make a m in the next live stream yeah no um in the project do I need animators and rigers um yeah I mean not as many as I need modelers and and people who can texture uh but if you feel like you want to be part and uh if you're I mean it would have to be combined so you would have to know both rigging and the animation I wouldn't include just an animator just a rigger unfortunately because um we work in smaller teams and so yeah uh we would have to you would have to know both um do I need low poly or detail 3D models I actually need um both so yeah you can just submit and show me your work and I will let you know if if it works um any advice on starting a YouTube channel that's interesting this is not the sort of thing that you guys normally ask me um yeah do I have any advice I think the greatest advice is kind of figuring out your Niche is figuring out who is actually going to be interested in these videos and once you have that who how are they actually going to discover it I mean it's it's to core question and it it might sound obvious but I I think a lot of people find uh make some really really interesting videos and I follow a lot of uh YouTubers who make awesome content but the problem is that no one is discovering it and that's the whole thing with tutorials is uh you could go ahead and make a how to make a multiplayer FPS series or you could go me in how to make a cyberpunk RPG FPS um for uh beginners only and uh that targets a certain am you want it to be as spec or as general as possible but while without being well annoying you still want to answer the questions that you say in the title but not use clickbait I don't do that at least uh I don't think so uh but yeah you want to kind of figure out something that people will actually be searching for especially if you do tutorials you want people to discover it through search so yeah but again I'm not the one to give YouTube advice I mean I'm a tutorial maker more than I feel like I'm a YouTuber so yeah um yeah so how would you find multiple game objects with a specific tag in a r yeah uh game game object. find game objects with tag will give you an array of all of the game objects with a specific tag then you need to sort through that array so Loop through it um with a four or four each Loop and then you want to check the distance from your current object to that object and uh if it's greater than your range discarded if it's less than the range well then you can use that so that's that's how you do it it's not performant but it's hard to get that stuff really uh really fast um uh oh I'm try having a really hard time keeping up with all the questions here uh let's see uh advice for turnbased fighting system I've never created a turnbased fighting system I'm sorry that's not something I have experienced in so I wouldn't really know um any specific advice for this genre uh yeah um RPG game Basics will be awesome I mean that could be really fun I mean we can definitely do something with um some RPG basic mechanics that's totally possible again it quickly becomes very feature heavy these RPGs and very content heavy especially uh but we could stick to the basics and just get something working on there that's totally possible even make it multiplayer but that adds some development time um yeah do I understand shaders depends on the uh Shader Shader language but I feel like I know most of what it requires to um write and understand shaders uh but really it's really nice that uh Unity standard Shader does so much now I feel like it does really 90 maybe even 90 5% of what I need when when creating graphics for um for a game for 3D game um that's just so many texture Maps so many settings I mean it's PBR so that's awesome um if you don't know PBR stands for physically based rendering and it basically means that you calculate how the light um actually interacts with the object based on properties that you would find in real light like roughness roughness metallic um and stuff like that color emission uh and uh the really cool thing about that is when you have PBR rendered materials and textures um you can take one object make it look awesome in one scene and one lighting condition and then take it into another scene in another lighting condition and it will still look great because we're actually calculating it based on real values and not just B based on some madeup hacky way so yeah uh looks a lot better um yeah so I think we're kind of getting to the end of the stream now I am my voice is almost giving up and um also I feel like um we've covered a lot so if you have any final questions ask away now we'll just take a few more minutes I had so much fun guys really um I think uh the result of the game it turned out awesome and again this will be on the YouTube Channel it will be immediately available as a twitch archive and um it will also um yeah the project will also be uploaded to GitHub so that's um yeah you have all of it there accessible afterwards in case you miss something so let me just see the final questions here um can you add player teams to your multiplayer PS Pro modes like CTF and Team Deathmatch um that would be interesting it also requires a lot of code changing so I might not do that uh right now just thinking about what it would require at least I have some things that I want to do first I want to do weapon switching it's a really important one also kind of wanted to do a sniper with scope and stuff like that um also wanted to add some more weapons so yeah uh I have some other things that I want to do first how about NPCs in the multiplayer FPS I think if I'm going to do something with NPCs and AI should be for a separate video because uh NPCs and pathfinding and stuff like that is really um is really quite I mean if you're just going to have someone uh follow the player just have an enemy follow the player and use pathfinding it's really a general thing you can you can reuse th those sorts of scripts in a lot of different places and I don't think it's too specific for the multiplay FPS especially because you know all you need to do to make a network is put a transform component on it or Network transform and it will synchronize or you could have them move independently so yeah I think that uh that's not work uh it's not highest on the priority list but again just suggest it I'll write it down I keep track of what you guys suggest and I'll figure out what we should do next um breus would you consider doing a new AARP algorithm series that's more adjustable I know there are a few but they all have some flaws totally true uh I would definitely consider that if a lot of you guys want to see um that was just what I was touching on as well I mean AAR path pathf finding is is awesome and it's really easy um to use I also know that um Sebastian leg has some awesome uh videos on scripting uh pathf finding and stuff like that uh yourself I think he both has using a library like AAR and also from scratch but you can check that out Sebastian leg so yeah shout out to him he makes awesome content um yeah so so I guess we will uh wrap up the stream right here thank you so much to all of the U people who were here and to those of you viewing afterwards I had so much fun really successful stream and thank you to all the guys asking questions and stuff like that if you have a burning question you don't feel like was answered you can go to forum. breast.com make a post there um there are a lot of awesome you guys some of them in here uh who um is ready to answer your questions and uh I'm also on there once in a while I'm sorry if I don't spend too much there but um I do have a YouTube channel to make videos for or you guys will get really mad so yeah later tonight um I think I'm uh going to have a new video up so that's awesome and also I just wanted to mention that I am on a fixed video schedule now so that means that Wednesdays and Sundays is when I upload new videos so if you don't see a video on Wednesday on Sunday ping me let me know what's going on or ask what's going on because then there's something wrong so yeah that's pretty much it thank you so much for watching this stream I had a blast if you want to support the streams and uh support the videos and all that you can go to patreon.com slra that what's makes what makes this whole thing possible you can donate a monthly amount so recurring donations and you can cancel them at any time and get some rewards as well it's so awesome that you guys are donating on there thank you so much to all the people who are already donating and to the people who might donate when we're done here so yeah that's totally optional and uh thanks guys I'll see you soon bye thanks to all the awesome Patron supporters who donated in November and a special thanks to Sultan Al Sheriff fil Mari James Kell hound and Robert bonam become a patreon yourself at patreon.com braies