Now loops allow us to repeat code, now loops allow us to repeat code, see what I did there? This means that we can repeat certain parts of our programme. This is extremely handy as we often want things to happen over and over again, depending on the situation. This allows us to do anything from printing the numbers one through 10, to creating a guessing game where the player has to guess a number. Here, we could have the computer pick a random number between one and five. Then the player could type in a number. If the player types in the wrong number, we can simply allow them to guess again. We could then repeat this process until the player guesses the right number and we print out correct. So loops are extremely important and really cool because they allow us to take advantage of the computer in a way we haven't done before. But before we get into it, this video is sponsored by Jason Weimann. Jason is an industry professional, and he just created an amazing course on game architecture. The course teaches you how to structure your game and code in a professional manner to avoid all the headaches you might run into when creating a bigger game. You'll learn everything from writing testable code, project structure management, advanced state machine development, and the list goes on. The most awesome part is that you get to learn everything while building your own unique RPG, where you get to build quest systems, learn about inventory management, and interfaces, and even branching dialogue systems. New content is constantly being added, and you get access to live Q&A sessions with Jason himself, along with email support and a Discord channel where you can chat with your fellow students. So for those of you who are looking to take your coding to the next level, simply sign up now using the link in the description. And the first 50 people will get a free hoodie from Lines of Code. Isn't it pretty? Now in general, there are two types of loops, for loop and while loop. Let's start by having a look at the for loop. For loops are used when we want to repeat code a certain number of times, let's say we want to print out the numbers one through 10. Now you could just write Console.WriteLine 10 times, but that quickly gets pretty cumbersome. Instead, we would simply use a for loop that runs 10 times. We say that the for loop runs for 10 iterations. The good thing about a for loop is that it gives us a variable that tells us what iteration we're currently at. We often just called this i. We normally start this at zero. So the first time the loop runs, i is zero, then one, then two, then three, and so on. And we can use this in our code. If we want to print out the numbers one through 10, we just put Console.WriteLine inside of our for loop and have it write out i plus one. So when we run our programme, i starts at zero, and so zero plus one is one. The second time it prints one plus one, which is two, and so on. Of course we still need some code that tells it how many times it should repeat. We do this inside the parentheses. Now the syntax for this is a bit weird, but don't worry, you will get the hang of it. So first off we write what should happen before the loop starts. Here we write int i equals zero and then a semicolon. In other words, we create the i variable and set it equal to zero. We then write the condition that needs to be met for our loop to keep running. In this case, we want the loop to run as long as i is less than 10. Again, we end this with a semicolon. Then finally, we need to tell the computer what happens after each loop. In our case, each time we've gone through the loop, we want to increase i by one, the short hand notation for this is i plus plus. So we are creating a variable called i, we're telling it to increment by one after each iteration, and we want to keep running the loop as long as i is less than 10. And that's it. If we run our programme now, it prints out all the right numbers. But this is just counting to 10. We can do much cooler stuff by just changing the code inside of our for loop. Let try it out. All right, so to create a for loop, we write for, and we could actually create this by hand, or we could go down to this option that says for loop and simply hit Tab. And as you can see, this is going to auto complete a for loop for us. And the cool thing is that first here we can go ahead and specify the variable name. We could set this to x or j or just the standard i, and if we hit Tab again, we can choose a length or how many times we want the for loop to run. So in our case, we can just set that to say 10. If we then hit Tab again, it's going to complete the for loop, and we can now write some code inside. So a handy little trick there. Now to print out the numbers one through 10, we Console.WriteLine, and then we simply feed it i plus one. Again, because i start at zero and we want to go one, two, three, and zero, one, two. And indeed, if we run this programme, we can see that it shows the numbers one through 10. However, there's actually another way to do this. Instead of adding one onto i every time, we could go up here and simply start our i variable, add one, so it doesn't start at zero, it starts at one, and it will keep going as long as i is less than or equal to 10. So this way, we're actually just setting our i variable to what we want it to be from the beginning. And if we run our programme, we can see that it does the exact same thing. So what this means is that we can easily change the parameters of our for loop in order to have it do different things. Say, for example, we wanted to count down from 10, instead of up to 10, here we could just set i equal to 10 from the beginning. Then every time the loop is done, instead of incrementing by one, we want to decrement by one. So i is going to be reduced by one here, and we want to keep doing this for as long as i is greater than zero. So i starts at 10, we're going to subtract one for every time we've gone through the loop and we're going to keep doing this as long as i is greater than zero. And if we now run the programme, as we can see, it gives us the numbers 10, nine, eight, all the way down to one, really, really cool. But just printing out i isn't very exciting. Let's instead have it calculate some cool numbers for us. I'm going to set i here back to one. I'm going to change the condition to less than or equal to 10. And again, I'm going to change it to i plus plus. So we are back to counting from one to 10. Then instead of just writing out i, let's go ahead and calculate something cooler. So something that I really like are the numbers that you get, if you take two and raise it to the power of x. This is going to give some cool numbers because two to the power of one is two, two to the power of two is two times two, which is four, two to the power of three is two times two times two, which is eight, and then 16, then 32, 64, and so on. So it gives us these really cool even numbers that are doubled every time. And if we imagine that instead of x here, we just use our i variable, we can create this series of numbers really easily. So to calculate this, let's first create a variable that is going to hold the result. Let's make this an integer, let's call it result, and let's write an equal sign. And now to calculate two to the power of i, we actually need a mathematical function. So far, all of the math we've done has been addition or subtraction, multiplication, or division, which has these very simple operators. But now we need to raise two to the power of another number. To do this, we use the Math class. This has a bunch of mathematical functions that do all kinds of things. So if we write dot here, we can actually see these different functions, we have sine and tangent, we have the square root, we can round a number or truncate it, we can do all kinds of things here. And what we want to look for is the power function, or raising a number to the power of another number. Here, we open some parentheses, and first we write in the numbers that we want to raise to a power. So in our case, that's two, then we write comma, and then the number that specifies the power. In our case, we want to raise two to the power of i. Let's close this off. And as you can see, this is giving us a red line. It saying, cannot implicitly convert type double to int. The reason for this is that our math function returns a double and our variable is currently of type int. So we could either convert this number to an integer, or we could simply change our variable type to double. Let's just do that. Then instead of writing out i, let's simply write out the result. And if we now run this programme, as we can see, it gives us the right series of numbers. We have two, four, eight, 16, 32, 64, and it keeps going until the number gets very big. And indeed, there are 10 of these. But currently, our programme does the same thing every time. It would be cool if we could allow the user to determine how many numbers we should print. To do that, let's go to the top here. And let's write Console.Write, how many cool numbers do you want? And then give them some space to write that in. Then we can gather the result into some kind of variable, I'm going to write int, let's call it count and set it equal to Console.ReadLine. And of course, remember, we need to convert this to an integer. So we'll go Convert.ToInt32, and wrap that around. There we go, so we're asking the user to input a number, they input a number, and we call it count. And now right now our for loop is going from one to 10, instead of just going to 10 every time, we can actually go in here and have it continue as long as i is less than or equal to count. And so our for loop will repeat a number of times determined by what the user has put in. And if we run this now, our programme asks how many cool numbers do you want, we can put in, say 15. And as you can see, it prints out 15 of the numbers in this two to the power of i series. Awesome! So that's how you can get started repeating code using for loops. but one of the most common ways to use for loops and where they really start to shine is when we have a look at lists and arrays. And we will do that in the next video. So just know that for loops are about to get even cooler. Now the second type of loop is the while loop. This is used when we want to repeat code for as long as a certain condition is met. Here, we often don't know beforehand how many times the loop is going to run. Say we're creating a programme to simulate dice rolls, and we want to see how many attempts it takes to roll a six. In this case, a while loop is perfect, because we can keep repeating the code that rolls the die until we hit a six. And the syntax is actually much simpler than a for loop. In fact, it's completely identical to an if statement. We write while, then parentheses, followed by some curly brackets. And inside the parentheses, we put the condition that needs to be met in order for a while loop to run. In this case, we probably have some kind of roll variable that is some number between one and six, depending on what we rolled. So in our condition, we just need to say that we want our loop to keep running as long as roll is not equal to six. Then inside of our curly brackets, we can simply roll the die by setting our roll variable to some number between one and six. And so this will keep repeating until we roll the right number. Now this is also where we have to be careful with while loops, because if we don't write them correctly, we might accidentally put in a condition that will always be true. So if we accidentally check if a roll is not equal to seven, our roll will always have a value between one and six. And so this loop will keep running infinitely and crash our programme. Don't panic if this happens, it just means that our while loop doesn't know when to stop. And trust me, you will make this mistake at some point, every programmer has. Now let's try it out in VS Code. Now for this programme, we want to have the ability to create random numbers. And to do that, we first have to kind of define a number generator. So we're going to type in a Random here, we're then going to type in the name of our number generator, I'm just going to call it numberGen. And we can set it equal to a new Random, followed by two parentheses and a semicolon. I know the syntax for this is currently very weird. It looks kind of like a variable and kind of like a function, and then there's this new word, just ignore it for now, we'll get into why this is written this way later when we learn about classes. But for now, just write after me. Just know that what this allows us to do is go numberGen., and then right Next, and this is a function that is going to give us a random number between a minimum and maximum value. So we can put in two values here, and it's going to give us a random number between the two. And we'll use that in a second. But first, we probably want to create some variables. We want an integer that is going to store what we rolled, and let's just default that to zero. We're also going to create another integer. And this is going to keep track of how many attempts we've used in order to roll that six. So let's just call it attempts, and also default this to zero. And now we can create our while loop. So we want to create a while, open and close some parentheses, open and close some curly brackets. And inside of the parentheses here we want to put our condition. In our case, we want to keep rolling as long as our roll is not equal to six, in which case we've rolled a six and we want to exit out of this while loop. Then inside of the loop, we can go ahead and set roll equal to a random value between one and six. And this is where we use a number generator. So we go numberGen.Next, just like I showed you, this is a function that will give us a random number. And first we input our minimum number that is going to be one, this is what we call inclusive, which means that the number that we write is going to be included in the numbers that are possible. So we can roll one, two, so comma here, and then the second value, which is going to be the maximum number that we can roll. And this is exclusive. So this number is not included in what it's possible. So in other words, we need to write seven here. So we can go from one, two, three, four, five, six and then the seven is exclusive. I know you might be thinking now, why have the first number be inclusive, and the second number be exclusive, that's just very counterintuitive. But there is actually a good reason for this, and you will see it later. For now, we can just close this with a semicolon. And that should give us a random number between one and six. Then we can maybe write out what we rolled, so we can do Console.WriteLine, you rolled, and then put in our roll. And finally, after each attempt, we want to go ahead and increase attempts by one. So we're going to increment attempts here, by just writing attempts plus plus. And if we just run this programme now, we can see that I rolled a two, a four, a five, then a one, and it keeps going until I rolled a six. Awesome! Now of course, after we roll the six, we want to write out how many attempts that took, and we do that by adding some code down here. And the reason for this is that our code is read from the top here, so we create a random number generator, we create two integers, we then enter into this while loop, and this is going to keep repeating until we roll that six. And only once we do that is the code going to continue down and run whatever we put down here. So think of it like our computer is getting stuck on this loop, and it won't get to whatever we write down here until after it's finished. And once it is, we can write Console.WriteLine, it took you, then we can write out how many attempts, and then another string here, attempts to roll a six. There we go. And indeed, if we run this programme again, we can see that I rolled a bunch of times, and it took me 10 attempts to roll a six. Awesome! And a cool thing about looping is that we can actually make it a tiny bit interactive because right now it just prints all the numbers at once, which is a bit overwhelming. So let's instead have the user press a key before we continue to the next roll. So at the top here, we can just say Console.WriteLine, press enter to roll the die. Then inside of our while loop, before we actually roll, we want to go ahead and put in some kind of Console.ReadKey, so this is just going to wait for the user to press any key. Right now we're not checking if the user presses the Enter key or anything else, but I think that's fine for this example. So what we're doing is we're running out press enter to roll the die, and then inside of our while loop, before we do each roll every time this loop goes through, we're going to wait for the user to press a key. So if we now run the programme, it says Press Enter to roll the die. I'm going to press Enter here, we will do three, I'm going to press again, another three. And I'm going to keep going like this until we roll a six. And then it says it took you four attempts to roll the six. Very, very cool. Now for this week's challenge, I want you to expand this idea of rolling a die. In fact, I want you to create a programme that rolls two dies at once. You can then check how many attempts it takes before you roll two a kind. So here's an example of how that might look. As you can see, it says press enter to roll the dice. I'm going to press Enter here, and it's going to roll both dice one and two. On the first one, I rolled a three, and the second one I rolled one. And I can keep doing this until a roll two of a kind. As you can see, for my last roll, I roll two threes, and it took me nine attempts to roll to of a kind. Now to do this, you need to create a nother roll variable, then change the condition of the while loop so that it will run as long as the two rolls are different. Then inside the while loops, make sure that you're assigning random numbers to both roll variables. And finally, you want to print out the number of attempts. So have fun with it. And remember that as always, I've posted my solution to this week's challenge on the Brackeys forum. So check that out using the link in the description if you get stuck. That's pretty much it for this video. If you enjoyed it, make sure you subscribe and ring that notification bell so you don't miss the next one. Also, don't forget to check out Jason's course on game architecture. Learn how to properly make big games by simply clicking the link in the description and get a free hoodie included. On that, thanks for watching. And I will see you in the next video. Thanks to all the awesome patron supporters who donated in June, and especially thanks to Nubby Ninja, Faisal Marafie, Lost to Violence, Loved Forever, STR Mike, Piano Sathornlak, Replica Studios, Jason Uritescu, Leo Lisetre, Alison the Fierce, Michail Korobov, Owen Cooper, Gregory Pierce, Naoki Iwasaki, Dante_Sam, Donatien Gascoin, SiriusWolf, TheMighyZeus, Jacob Sanford, MarcAntoine Girard, and Erasmus. You guys rock!