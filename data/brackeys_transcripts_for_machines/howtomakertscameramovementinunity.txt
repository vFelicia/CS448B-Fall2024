in this video we're going to have a look at creating a symbol IPS like camera in unity we create functionality for panning around the world using both the keyboard and the mouse we also have a look at scrolling to zoom in and out we also have a look at how you can put boundaries on your camera and so at the end of the video we'll talk about how you can get more advanced functionality let's get started so in this video we're going to be using the FPS density environment as an example scene if you want to get this for yourself you can go to dev assets calm click on the FPS environment and you can see some of the images read a bit about it and when you're ready you can choose a price and hit the blue button once you download it simply unzip it and double click on the unity package and it's going to open everything up for you you can then just open the example scene and you should be good to go now what I've done for my camera is I've put it pretty much in the center of the scene I've pulled it back a bit on the Z and I've pulled it up on the Y mine is currently sitting at about 60 units I've given it a rotation of around 60 some people like to do a completely flat view meaning 90 degrees other people like an angle it's going to totally depend on your game now I've left the projection add perspective but you can always change it to other graphic to get a completely different look I'm just going to leave it at perspective though and then set the field of view around 40 now we can go and add a new component let's call it the camera controller that's it new script it create an ADD let's open this up in visual studio now there are a bunch of different ways of going about creating a camera controller that's because both input and movement in unity can be handled in a thousand different ways we're just going to have a look at creating something really simple that works and then I'll talk about how you can expand upon this later let's begin by removing our two using text at the very top let's also remove our start method let's instead add a new public float we call this one pan speed this is going to specify the speed at which we will move our camera across the world and will default this to something like 20 and so our camera will move at a speed of 20 units per second we'll then go down into the update method and first off we want to be able to move using the keyboard and so we'll create an if statement here to check if input get key and the key that we want to check for is going to depend on your game I just want to move using the WASD keys so I'm going to check for W and each time we press this key we want to move a little bit forward and we click going here and use transform to translate this will allow us to move our game object in the specified direction but we probably want to be able to move in multiple directions so if we're holding down both W and D we want to move both up and to the right and if we also scrolling we want to be able to zoom in and out at the same time of course we could just call transform that translate multiple times during the update but I think a cleaner way is to up here get the current position of our camera will store this as a vector3 we call it pause and set it equal to transform dub position so now we have the XY and z coordinates stored in this path variable and then edit these position coordinates and then once we know our new position how much we need to move in the different directions and how much we need to zoom in or out then we'll update our position so for now we'll just be changing the variable we do that by saying pause dot and then we can change the different coordinates we want to move forward and so we need to modify the Z component we'll add on to that so we'll say plus equals panspeed multiplied with time.deltatime we want to add panspeed because the amount of units we want to move is going to depend on our speed and then we multiply with time delta time to make sure that no matter what framerate we're currently running at we're going to move the same distance time that delta time is simply the amount of time elapsed since we lost your frame and so if we draw a lot of frames per second this number is going to be small therefore we're not going to move that much each frame call and if you only draw a few frames a second time that delta time is going to be larger and therefore we're going to move a greater amount each frame and so we make sure that we move relative to time and not to frame rate of course we also need to apply our new position so we will transform the position and feedback in our position variable so what we're doing is we're storing our current position in a temporary path variable we check if we press the W key if so we want to move forward and so we increase our Z value and then we set our composition equal to our new position so let's save this head back into unity and when we now hit play we should be able to press the W key and then move forward awesome but we can't move in any of the other directions and we can't use our cursor to move so in order to use our cursor to move we want to create a new variable this is also going to be a public float and this is going to specify how close we need to get to the edge of our screen before the camera moves in that direction we'll call this one the pan border thickness and we'll set that equal to ten then down here in our if statement we need to say that we want to move forward if we press the W key and these two vertical bars mean or so that the if statement will be true if this is true or the next condition is true and here we want to get the current position of our mouth sublet go input dot mouth position and this is the current mouth position in pixel coordinates and it records pixel coordinates from the bottom left corner of our screen so what we need to check for is whether or not our mouth position on the yaxis is greater than the height of our screen our border thickness so we'll do that in here so we'll say if our mouth position dot Y is greater than or equal to our screen height and this is our screen height in pixels and then the pan border thickness so if we now save this and head into unity again and hit play we can see that we can move using W and by moving our cursor to the top of our screen and you can see that we don't need to touch the edge as long as we get within 10 pixels awesome so now we simply need to add this to the other directions as well to do that we simply duplicate this if statement paste it three more times and for the second one here we want to check if we want to move back so we'll press s and we're going to do this if our mouth position is less than or equal to the pan border thickness now remember that because our origin is at the bottom we no longer need to use screen dot height if our Y position is less than 10 pixels and if it is we now want to subtract the pan speed multiplied with time.deltatime so we just want to move in the opposite direction if you want to move to the right that means if we press the D key we want to check if mouth position dot X is greater than or equal to screen dot with panforte thickness and we still want to move in the positive direction but we now want to do it on the x axis and to the left here that means a we want to check if mouth position X it's less than or equal to the pan border thickness and again we want to move along the xaxis but in a negative direction and notice how we can make all these changes to our variable and only update our actual position once so let's save that into unity and hit play and you should now see that we can use the vast keys to move and the mouse cursor as well and we can even combine the two if we want to however we have one more problem and that is that we are currently able to move really really far in any given direction and most games probably want to limit how far they can move away from the map of course this limit is going to depend on your map size so let's make a few variables to adjust it will go inside the visual studio we'll make a few lines after we change our petition we do this one axis at a time let's begin with position X we want to set this equal to math clamp and clamp simply allows us to limit a number between a minimum and a maximum value well first off write the value that we want to limit in our case that's position X then we want to write the minimum value and of course we could hard code this in but instead let's go up here and create a few variables we could go ahead and create to public floats one called X limit and one called Z limit but something I find a bit cleaner is simply using a vector which of course stores both an X and a y value then we can simply map the Y value onto the Z component so in that case we'll go ahead and call it something like pan limit and let's close it off and set it in the inspector down here is the minimum value will have negative pan limit X and that's the positive value we'll have positive pan limit X and close that up with the semicolon and we'll do the same thing on the Z we'll have passed dudley equals master clamp and the value we want to clamp is passed at Z and we want to clamp it between negative pan limit and here we write dot Y but it maps to the Z comma pan limit dot Y so now if we save this and head back into unity we'll get two values that we can adjust one for the X and I want to be able to go 40 units on the x axis in either direction and 50 on the Z let's try and hit play and as you can now see we can only move to negative 40 on the X and negative 50 on the Z cool so the final thing that we'll be adding to our script is a way to scroll and here we want to use something that unity has set up in the input manager force if we go edit project settings and then input we can see the different axes unity set up one of them is the mouse scroll wheel this simply detects when we scroll the wheel how fast and in what direction let's copy the name mouse scroll wheel let's go into visual studio and let's get the value of the scroll wheel on this particular update call do that by going input get access and then in quotation marks inserting the mouse scroll wheel axis will round it off with a semicolon and we want to store this in a variable so we'll create a float call it scroll and set it equal to input duck get axis mouse scroll wheel then let's go to the top and add a variable for controlling the scroll speed we'll create a public float scroll speed and set it equal to something like 2 and then right after we get this variable let's change our Y position so we go positioned at y plus equals scroll multiplied with scroll speed multiplied with time.deltatime and we probably need to flip the direction on this but let's just try and hit save and see if it works so if we now hit play in unity we should be able to scroll in and out but we're scrolling really really slowly so what I like to do is go in here and hardcode 100 on top of this and then go option add a 0 just so our pan speed and scroll speed around the same value then we can also go into unity select our main camera and make sure to update the scroll speed there as well let's hit play and now we're able to scroll in and out but it is definitely reversed for me so I'm just going to go in here and change this to negative finally we can also clamp our Y position so we can scroll inside of buildings to do that we simply go up here and we had two new variables a public float minimum Y and a public float maximum Y I'm going to set the first one equal to 20 and the second one equal to something like a hundred and twenty let's scroll down and here we simply add another line we go plus y equals math clamp the value we want to clamp is positive Y we want to clamp it between minimum Y and maximum Y and let's close that off with a semicolon so now we've added all of the code that we need to add we can pan with both the keyboard and the mouse we can scroll using the scroll wheel we can control the speed at which we pan and the speed at which we scroll the thickness of the board is around the window limit both our position and assume let's now go back into unity and travel this out you can fly around we can scroll but not too far we can use both the keyboard in the mouse and of course there's the limit to what we can do awesome so this was a pretty basic overview of how you can create an RTS like camera controller however there's still a lot of features that modern games often use on their camera controllers so searched around a bit and actually found it very good as it's stored plugin called RTS camera that makes it easy to do all the stuff we already have added like keyboard input screen edge input scrolling and movement limiting but it can also do stuff like panning when holding down the mouse following a target rotating based on the keyboard and even automatically adjusting height depending on the height of what you're currently viewing it also adds a bit of smoothing on the camera so everything looks a bit better so of course have a link to this in the description let's pretty much it for this video if you are making an OTS or some other game that requires a I definitely subscribe because I'll be creating a video on the new unity AI slash navmesh system as soon as the high level components get released other than that thanks for watching and I will see you in the next video thanks of the awesome patreon supporters who donated in March and a special thanks to Derek Eames Kirk faithful Merrifield james calhoun and jason Lotito if you want to support the channel and become a picture in yourself you will do so a page in the concise brackets thanks a lot guys