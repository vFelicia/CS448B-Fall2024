thanks for tuning in at braies hello everyone and welcome to this video on making a 2d platformer course today we're going to be expanding Upon Our upgrade menu we're going to be adding in the idea of money and a way to kind of spend that money I don't know how far we'll go with implementing the actual stat upgrades uh but we should definitely have a more interactive upgrade menu when we are done so that's going to be super fun also I of course want to apologize that it's taking me so long to put out a new video but I've uh been sick I caught the flu and I actually still am a little bit so if you see me coughing uh it's nothing serious but it's not completely gone either so let's just uh dig right into today's video and forget all about uh flu and uh yeah so you can see I've left the project exactly as it was uh in the last video and uh the first thing that I noticed when I turned off the camera is that when we maximize the game here you can see that the astronaut snaps to the left and that looks super dumb really so let's um start out by anchoring him to the center and by the way the shortcut that I'm using to maximize a game or a window is just shift space it's super useful you can maximize any window in Unity by just um pressing shift space while hovering the mouse over it a shortcut that many people don't know so now under the UI uh overlay and then under the upgrade menu we can find our astronaut and we simply want to change this anchor here from the left to the center there there we go so now when we maximize the game everything looks much better cool so the first thing that I want to do here is just go ahead and disable this upgrade menu this way we can uh choose whether or not it needs to be enabled by simply pressing some kind of upgrade button and in our case I want that to be you and just to make sure that the user knows what button to press let's just add a simple text instruction down here so in order to get some text let's just duplicate this uh lives counter it has the Style with the little putut steps in the shadow and we can just just remove that script then we can uh maybe change the position of this whoops I selected the wrong one uh this is going to be um upgrade menu uh notice tool tip press U for upgrade menu there we go uh and we can simply move that down here and we can Center that text and we want it to be a lot bigger actually and we want this to say um press and then we can use some uh ITF Rich text format uh in here as you've maybe seen in HTML programming or stuff like that and uh the I here stands for you can see here the I stands for italic and that will just kind of um tilt our text a bit and that's cool when doing stuff like uh this this here so when we want to notify the user that it's the U button instead of using quotes or something else you can also do B for bold if you think that's cooler it's just fine but I like the uh italic style so press U to open the upgrade menu there we go and uh we actually need these to this to be even larger and we can drag this down here so it's at the very bottom and uh we could maybe uh yeah make sure that's centered everywhere and anchored to the bottom there we go and you can see what that looks like in the game and currently it looks horrible I also want to size down uh this text and uh yeah maybe we should do something like 14 I think that's fine just a very tiny notice down here uh that that is something you can indeed do uh we might want to yeah anchor that to the top here there we go and I think that looks just fine what you can do is make this text flash sometimes or maybe disable it when uh once the user has actually upgraded something you can just put an animation here I'm not going to bother with this since we have a lot to do so yeah I'm just going to skip over it and just leave it there it's not like it's abstracting the screen in any kind of way so uh that's just fine and uh then let's go inside of our game uh Master script double click to open it this up in uh Visual Studio manual develop whatever you're using and in here we will simply add some kind of method for enabling and disabling the uh update menu so uh first off we need a reference just like we have a reference to our game over UI and this is going to be a serialized field and it's going to store a private game object and it's going to be called upgrade menu then all we need is some kind of method on here and uh I think we're going to check for this in the update method here so you can simply say if input. getet key down and the key we want to check for in my case at least here is the U button you can choose any key that you want and you can also add it as a variable that might be better uh but since we have a lot on our plate let's just hard code it for now you know the good practices and you should definitely be doing then I'm just here to show you some new stuff so um and what we can do in here is maybe call some kind of method or we could just TDE code it in here I'm just going to make a quick private void uh which is going to toggle the upgrade menu something like that and that's all we are going to call right here uh awesome so what we then want to say is we want to say that our upgrade menu do set active so we can enable a disable here false is disabled and true is of course enabled and uh we don't want to give it either false or true instead we want to set it to the opposite of what is it currently is therefore the tle and uh we can get its current active state by using upgrad menu. active self you need to use active self because active is uh currently deprecated so and uh in order to make it the opposite of that we simply put a um what's this T this sign here an exclamation mark that right so that will inverse whatever operation we have going cool uh and uh what we can then do um is maybe we need some kind of way to notify other scripts that the upgrade menu is now active because we don't want to pause the game because we have animations going and we want the UI to update and all that but we definitely want some things to stop Happ happening for example we don't want to shoot while the upgrade menus is up we don't want to be able to move we don't want our enemies to chase us and uh there can be more stuff coming maybe you don't want the uh spawner to spawn anything you can think about these things on your own it's definitely up to you how uh how much of this stuff you want to change you can also just leave the game running uh that's completely fine a lot of games do that I just want to disable a few things I want to disable player movement uh player shooting and the fact that enemies chase us I think if we disable those three things uh it's going to be just fine good so in order to do that excuse me uh all we need to do is create what is called a delegate and I don't think we've discussed delegates in this series before so here we go so first off I want to write private delicate void and I'm going to call this um upgrade menu callback and it's not going to take actually we're going to tag in a bullion which is the active state so that's going to be called active so what is a delegate a delegate is basic basically a a way for us to create a um uh a type here that will store a bunch of references to functions so that we can call this delegate or invoked and it will call all of the different functions that are registered to that delegate so basically it allows us to uh without having knowing anything about any functions call some kind of event that will trigger a bunch of things in other scripts that have is uh subscribed to that event and there are a bunch of ways to do this one is using delegates another is using actions a third one is using what is called events uh but I'm just going to go with the old school dedicate here and this is the syntax so here we kind of create uh our type we create a delicate void it doesn't return anything and all of the methods that are subscribed to this will have a Boolean say saying whether or not it's active as an argument and then we create this specific uh instance of this delegate I am going to make this public actually and that's going to be of course a public upgrade menu call back just as when we create an enom class we first decare uh create the type and then we create the instance here and this is uh going to be called on upgrade menu on tacle upgrade menu maybe yeah that's better on toggle upgrade menu and uh we simply close that off so the cool thing about this here is that down here when we Tuggle this we can then say that we want on toggle upgrade menu to invoke all of the methods that have subscribed to this event and uh I will show you how you can register or subscribe to this event in a second but for now we need to pass in whether or not the our upgrade menu is actually active and we do this by simply uh putting in maybe the upgrade menu. active self so if our upgrade menu is active we put that in as an argument this will go go up here and tell this variable here to call all of the methods that have subscribed themselves to this delegate now let's take a look at actually subscribing methods to the delegate because uh this will currently not do a thing uh so what we can do is we can go ahead and find our um uh player maybe this is a good place to start here let's double click on our player and you can see here that I've typed beforehand require component type of plat form to the user control and this is because I want to uh simply Set uh or disable this uh component because it's what allows us to control the player and therefore I want to be able to disable it and uh what we can then do is uh we can create some kind of U method that should be called whenever the upgrade menu tole uh is um or whenever the upgrade menu is tackled uh so we are going to create maybe a a void here called on upgrade menu toggle you can call this whatever you want as long as you tag in as an argument the poll active State and uh all we need to do here is um yeah well we can do a few things here so here we will handle what happens when the upgrade menu is toggled but we need to sync or link this this uh method here subscribe this method to the delegate we just created in the game master which is this one so what do we do we simply go up here under the start method this is a good place to do it you only need to do this once then we go game master. GM to get the instance of our game master dot and then we find the on Tuggle upgrade menu and then we add onto that we use plus equals on upgrade menu toggle now this method down here will be called when this delegate is invoked so that it's that easy and it's super cool because we can we can add as many methods on here as we want to uh so we can do that from other scripts and we will be doing that from other scripts excuse me good so what we can do here is simply uh say that we want to uh get a reference uh to this platform 2D user control so we will say get component platform 2D user control do enabled equals active so if the or actually we want this to be the opposite of active so if our um our update menu is active we don't want our platform to to use the control to be active uh if it if it isn't active if we've closed it down again then we want to be able to move so we want this to be uh to be true good so that's perfect and we also want uh to do the same to our weapon we don't want to be able to shoot while the men menu is up so uh therefore we can maybe uh store this in a temporary variable we'll call this the weapon and we'll find this uh in uh the children hierarchy so get component in children and we'll find the weapon and uh we simply want to check if it's null because we don't have any way of knowing if it's null or not so if it's if weapon is not equal to null well then we simply want to set weapon. enabled equal to the opposite of active there we go so that should work just fine and we can now go ahead and actually test this out just to make the testing clearer I'm going to go ahead and just uh change the alpha on the background here so we can see what's going on in the background so let's go ahead and hit play and uh I'm now going to you can see I can shoot and move I'm going to bring up the update menu uh whoops there's an unassigned uh variable and that's in our GM that's because we haven't actually directag in the upgrade menu there we go that should hopefully do that and uh now we can try again here so again I can shoot and move I press U I can't move and I cannot shoot you can see my arm still moves but that's fine with me we could go ahead and disable that too and that's maybe something you want to do for your game but I don't think it uh really matters here and uh you can see here that we have free to press the different buttons so uh that's perfect however our enemies are still moving so uh just to make sure that we won't be killed while in the upgrade menu I'm going to stop that from happening so uh let's find our uh enemy pre or actually just let's just find our enemy uh script here and uh in this I simply want to require the component type of enemy AI because this sits on the enemy object I just want to make sure that it sits on the enemy object and uh we are going to do the exact same thing here so we can just copy from the player we have this on upgrade menu toggle here where we Define what happens when the upgrade menu is toggled and uh instead of all of this we can simply say that get component enemy AI do enabled is the opposite of active and that's perfect and now we of course need to subscribe or add this to our delegate and we do that by saying gam master. gm. um on toggle upgrade menu plus equals on upgrade menu togle there we go uh and this means that again from one single place we are now invoking uh SE two different methods and we can add as many as we want so now when I hit you and I'm just going to wait for a few enemies you can see that they slowly stop so that's perfect again you can be um more uh detailed about this and make them stop in an instant you can make the uh countdown stop too that won't stop at the moment and you can do all of that stuff I'm just showing you the basic idea of how to implement this stuff so uh that's perfect then we can now bring up the background again uh because we don't uh want to uh see anything but the upgrade menu uh at least not in this game good so let me just check the time here see how far we are we're actually pretty far ahead already but I did promise you that we would Implement some kind of money so let's go ahead and do that uh just very quickly so first off uh I want to find our game master here open that up and I want to add a new static variable so we're going to have here a public static integer which is going to be our money and uh I also want to make a serialized field and this is going to be a private integer uh which is our starting money so I want us to be able to um uh change this in the hierarchy and therefore we need to find our start method and we write where we set our remaining lives equal to Max lives we can also set our uh money to the start in money there we go open uh up the script in uh Visual Studio come on come on Unity work with me here there we go and we can just duplicate the other script in here and we of course want to change the uh class name to money cter UI and we want to change this variable name here to money uh money count money amount I don't know maybe we should just do a money text like that and uh we want this to be money and it should just take instead of the remaining lives it's going to take game master. money. twring there we go so it's it will simply pull that in the update method and it's not going to take uh require too much performance or or anything as long as you on the desktop or in the web browser if you're on mobile you might want to make that into some kind of co routine that will check at a fixed rate or maybe you can use a delicate to update it whatever you want to do so now when we hit play we should see this changing to not zero we should see it changing to 100 um let's find our game master object oh our starting money is actually zero so that's perfect things are working we can apply this prefab and now we should see it changing to 100 here there we go so that's perfect and uh uh the very last thing that I want to do is just begin uh the upgrade menu script maybe actually new I think it's a good idea to wait with your upgrade menu script uh to the next video so what we have here is um a working idea of money we have some kind of dis way of displaying our money we have a way of uh opening and closing our upgrade menu and uh this is now uh working while we want to do in the next video is have a way of loading in our stats updating the stats and spending money actually one last thing that I want to do is I want to also add some kind of uh money display here so we'll take our money counter and paste it in here just above the background would be nice and we can move it over here and make some room for it Center it and scale it up something like that I actually want this to be a bit smaller 30 maybe uh looks just fine yeah oh and we of course want to Anchor this to the top probably yeah now we go so now we have our money displayed in the upgrade menu as well that's pretty important if you want to keep track of kind of how much money youve got while purchasing stuff so that is perfect and we can close that and minimize that I'm going to maximize the game here and just uh see if everything is working and if it is that is going to conclude this video so we can see we can jump around the money has updated uh I'm now going to press U here and we can press the different upgrade buttons uh and we can press U again and it's going to close that off so that is just perfect you will notice that a um uh enemy actually died when while I had the upgrade menu open and that's because his physics didn't uh stop uh him from hitting me while the upgrade menu was open so if that's something you want to fix you can definitely just uh disable the rigid body along with the Enemy uh AI I definitely recommend you do that or maybe temporarily turn him kinematic or something like that um and uh we actually have another error here so what we simply want to do is yeah it's been destroyed then we simply want to check if get component enemy AI uh oh I see so if this is not equal to null the objetive type enemy has destroyed but you're still trying to access it um your script should either check if it is null or you should not destroy the object I see there we go so we can maybe check if this is equal to null this is kind of weird let's try this can it be null and then called through a delegate this is some kind of edge case let's try it yeah that's weird okay I know what's going on we want to stop subscrib in whenever we kill this object yeah that's what we want to do so we want to remove this uh from from the delegate when we die yeah perfect okay so we'll simply say that void on Destroy think that is something I I know that on dis on enabled is definitely implemented so let's just try this and then we want to uh remove move it from here so minus equals it's a good thing I noticed this in the video don't have to clean it up in the next one I've been trying to wrap this up like three times it's embarrassing let's keep going um let's see here so when we kill an enemy no it's still doing it let's find out if uh this is even being called here so uh let's just throw a debug statement there we go I'm sure we'll notice that if this doesn't work I'm just going to have to take a minute to figure out what's going on here so okay so that is actually being called and I can see that oh no it's working that is weird Behavior maybe I didn't save it properly before if I delete this now I might not have saved this let's try this out one last time just to see I might have been too impatient I didn't understand why it wasn't working so hopefully it does now so now there are no errors if I destroy those guys yeah so that's perfect let's just um for good uh order sake uh do that under the uh player as well so if this player is destroyed we also want to uh remove that from the delegate so uh gm.on toggle upgrade menu minus equal that good save that clear that things are working now I can do my outro so thanks for watching guys uh we'll fix the rest of the uh upgrade menu in the next video I'm looking forward to that so yeah that that was all I'll see you guys guys in the next video