actual shooting uh function so let's go ahead and do vo shoot and uh we're going to open up the curly brackets here and inside of the shoot function um we're going to be doing a bunch of stuff with Ray casting and uh bear with me uh you might be a bit confused along the way with all of the calculations and uh there are some longer lines um but it's it's actually not too difficult and uh it's something that you can just memorize and then do uh but I'll do my best to explain it uh for you so um first off let's just go ahead and check if if everything is working let's not get oure ahead of ourselves let's just uh make a test debug. log statement here to see if our fire rate is working so when we hit play now we should get a uh debug.log saying test when we click and indeed we do so you can see here that we are getting some test locks uh let's go ahead and change the fire rate to five now and see uh if we hold this down oops let's bring it up here we are getting uh the uh five tests per second cool so uh let's go ahead and make that zero again and uh now we can go ahead and put some actual code in here so let's do uh Vector 2 and let's call this mouse position so here we're going to store our Mouse position as a uh uh Vector 2 and we're going to set this equal to a new Vector 2 and uh just make sure to open up some uh parentheses and inside of these we're going to type camera main do screen to worldo and we are going to give it the input do mouse position and then we're going to do X outside of the uh uh parenthesis there oops we are missing a parenthesis and then we're going to do comma and then we're going to do camera. main do screen whoops screen to worldpoint and again input do mouse position close it off and then doy so that's the whole line it's a long one but basically what we're doing is we're creating a new V 2 called mouse mouse position and we are assigning it the uh screen to World point of our M Mouse positions X and the screen to well point of our Mouse position y this way we will get uh we will translate the position of the mouse from screen coordinates into the position in the world and therefore we can actually use it to do a ray cast we wouldn't be able to do this with screen coordinates because they are very different from the system that we use in the actual world for the transform that's what we're doing there whoops let's bring it back up here okay so what we're going to do now is uh we're going to go ahead and make another variable and we again going to uh make a vector 2 and let's call this Fire Point position we're going to set this to be equal to a new Vector 2 and inside of the parenthesis we're going to say firepoint do positionx comma fireo doosy so here we're simply taking the uh Fire Point uh which is uh the point on the tip of our gun here and uh we are uh storing that position as a vector 2 then next up we are going to go ahead and uh actually make the ray cast so we're going to say raycast hit 2D and we're going to call it hit and we're going to equal it to physics 2D do raycast so now we are casting out the Ray and uh this is going to take some arguments so let's let's do firepoint position is the first one that's the beginning position that's where we're going to cast The Ray from uh which is our firepoint position and then we're going to give it a Direction so what you don't want to do here is just type Mouse position because it's not from and to it's from and direction as you can see here uh the uh the static uh public static r r raycast hit function called raycast takes two arguments the first one is the origin and the second one is the direction so how do we turn the mouse position uh into a direction well we do this by taking point a or point B and subtracting it with point a so this is point a so now we're going to take Mouse position and subtract Fire Point position from that and now we actually have the direction and then we can do comma and here we have the ability to either make a distance so you can input a a float here to say how long out is the ray going to stretch if you want some weapons to only uh hit inside a certain distance we could go ahead and set this to something reasonable maybe 100 or it's just going to continue uh infinitely let's actually go ahead and do that um so let's do 100 and then also we can give it a layer mask so remember we created a layer mask up here with what not to hit well we are simply going to input that here so we're just going to say not to hit there so uh that was it for the actual Ray casting uh we are pretty much done with the hard part here now we can just go ahead and show it because none of this is visible so for now we're just going to be using debug. draw line which will not actually appear in game but we're going to be do a a bit of triggery to make it appear while we're testing so now we can go ahead and do debug. drawline and this is super useful uh and then we're going to give it the starting point unlike the uh the ray cast this just takes a start and an end not a origin and a Direction so we are just going to give it the starting point which is our Fire Point position and then we're going to give it uh we we could just put our Mouse position here but instead let's just make it stretch out infinitely so we can really get a sense of of uh the direction I mean you could just go ahead and do this and now hit back in game and uh we should see oh yeah we need to enable gizmos this was the uh triggery I was talking about so up in the right hand corner you need to select gizmos in order for this to work and you can see now that when I click the mouse it actually draws array out to the mouse point and actually while we are testing this let's go ahead and uh make it just shoot all the time so in the top of the update function we're just going to type shoot uh so we can really see the line here now it's just going to shoot all the time to my mouse and you can see that this is actually working uh but uh what I want to do is I just want to uh make sure that this just continues on infinitely and to do this uh we take the direction uh we find the direction vector and we just multiply it with a value so uh so we're going to say mouse position minus Fire Point position position just like up here now we get the direction vector and then we can just multiply it by multiply it by let's say a 100 to just make it go on really long you could do 200 or whatever so now when we hit play We simply multiplying the direction to make the line continue on so there's a bit of a delay but that's not to worry about yet cool uh and what we can also do is we can give it a pretty color so we can do a comma and then say uh let's do color dot uh sign it's pretty one and uh then we can go ahead and actually check uh if we hit something so we can say if hit. collider is not equal to null then let's open up some brackets so if we actually hit something uh then we can do another debug. draw line that we're just going to put on top of the other one we're going to but we're going to make this one red and only extend on to what we hit that's going to make uh sense in a second so we're just going to put this between the firepoint position and the hit. point and we're going to make this red so this is actually going to show us uh what it's hitting so when we hit something over here you can see whoops no it's not something is not working here uh let's see if hit. collider is not equal to null which it shouldn't be because it was just hitting something firepoint position hit. Point color red hm this should be working is this even being called so let's do a debug.log test is this being called Hit play oops we have an error a passing error uh what is going on here we are not oh oh I missed I see I missed a uh a curly bracket up here stupid okay so we can go ahead and delete the debug log again there you were probably shaking your head all along okay so now you can see that once we hit this it's still not working okay so I'm just going to go ahead and pause the video here and uh see uh if I can get this working and then I'll come back in a sec okay so I'm back so I figured out the problem and it was actually pretty Elementary so what I I did wrong here was I thought of the layer mask uh the wrong way um I remember that as being um what you have selected will uh is what the ray will not hit uh but actually it's what you have selected is the only thing that the Ray would will hit so let's just rename this to what to hit instead of What Not to hit and let's put it down there also save it and hit back into unity and now under the what to hit we're going to select everything and then we're going to exclude the player and the ignore raycast sorry for lying there and now we can go ahead and hit play and you can see once we hit something that the part of the line that stretches from the hit point to uh our fire um our fire point is now red just to see where it hits and and what it's doing behind the scenes cool so uh that was a bit on on graphics and some useful ways of thinking of of these lines and and and how you can extend them and directions and starting and ending points uh and the last thing we can go ahead and do is uh of course remove this shoot up here so we're not constantly shooting and then we can make a debug.log statement that will say what we hit and uh how much damage we did and then later when we add enemies we can actually add that damage and make it do something so let's do debug.log and we're going to say we hit and then we're going to do plus hit. collider do name plus and did plus damage plus damage like this so uh sounded weird but there it is uh that's going to write out a pretty normal sentence I think so if we hit play here and we uh let's say point towards the um platform 4 over here and and click you can see that it says we hit platform 4 and did 10 damage and you can see that it also draws array and uh we can of course go ahead and play around with the fire rate if we bump this up we can get lots of rays oh it's spaming and yeah so that's how you make um shooting and the cool thing about this here is that the weapon script we can put on pretty much any weapon that we are going to need so far uh so we can just tweak the damage and the fire rate and we have all kinds of weapons available to us already so what I'm going to go ahead and do is I'm going to drag down the pistol into the project pane to make out uh to make a prefab out of it and I'm just going to keep it on the player for now because shooting is always fun to see so that's pretty much it for today's video thanks for watching and of course if you want to support brais or just generally be a bigger part of the brais Comm Community uh you should totally head over to the forum. bra.com and uh become a member it's really easy you can sign it up with both uh both Twitter Facebook or just normal filling out some boxes and hitting join and uh there are lots of useful resources or uh places to get answers here uh you don't even have to to make threats or be active or make an account you can just sit here and read or find cool assets which I've certainly done so uh thanks again for watching and I'll see you in the next video