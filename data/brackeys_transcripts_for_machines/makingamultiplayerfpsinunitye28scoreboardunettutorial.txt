this video is brought to you by our own Metta thank you so much for donating if you want to support breakage yourself you can go to patreon.com/scishow cheese thanks for tuning in at brac ease hello everyone and welcome to this video and creating a multiplayer face in unity today we will be creating a scoreboard for our players so that you can just hold down tab and that some kind of UI will pop up we will have a list of players with their usernames their kill accounts and their death counts so you can quickly get an overview of who is winning and who is not and we'll be creating it in such a way that you can just press a key and you will bring up the scoreboard but you could just as easily add this to the end of your game and so that the users know how they did in comparison to the others so yeah without further ado let's just jump right into it so you can see that I'm here in unity and what I want to begin with is just kind of shaping out the UI so let's begin by finding our main level one scene here and opening that up and let's find our prefab called player UI and drag that into the scene so now we can start shaping this on the UI just as we did with our past menu I want to have a separate object that we can enable and disable so let's right click on this go to UI and then find the panel and let's see go to scene view here shift to 2d and focus in on this so we can have a good look at what we're doing and let's start by scaling this down quite a bit I would say I'm holding down alt here to scale on from the center and I think something like this looks pretty good I don't want this to be too big but you can of course go with whatever you want and I'm going to make this black and a bit transparent but still very easy to see something like that looks pretty good of course again I say this every time spend more time on it than I do and let's rename this one to scoreboard awesome so we're going to have all of our objects related to the scoreboard sit as child objects under this one and let's go and create our first one which is going to be a UI text element and that will just say scoreboard and let's position this in our scene here so let's anchor it to the top holding down on all the to move it as well and by the way we need to do that to our scoreboard as well just to make sure that that is anchored to the center so it won't scale with the screen have a fixed size so the text object here we can just maybe scale this up a bit something like that just so we have plenty of space for it and let's Center that and we still want it at the top I think and then I'll bring up the size here to maybe something like 26 looks pretty good let's bring that down and let's bring that in let's make this a bold element and let's make it completely wide as well so it will really stand out and you can add stuff like shadows and all that kind of stuff if you want to but I'm just gonna keep it simple here so it's a scoreboard there and let's just call this one a scoreboard title cool so what I want to do next is create an empty object that was will kind of act as the canvas for all of our or as the surrounding element for all of our players so let's scale this up and position it where we want to see it in our UI here and I think actually something like this doesn't look too bad I want plenty of space on the edges because frankly we're not going to have that many players in the scene and we don't have that mudding much information to show so might as well make it really big and obvious what's going on and let's call this one the player our list and we can go to add component and then choose vertical layout group and this will make sure that any objects that we drag under here will of course be automatically vertically aligned cool or actually they will be horizontally aligned and then they will be stacked vertically cold so what we can do here is go UI and then choose some kind of panel and we might not be using the image here but I just want to get a few panels in here and in fact what I want to do is kind of turn this into a prefab but we'll do that in a second so you can see right now that the player list vertical layer group is currently making this panel stretch and that's definitely not something that we want you see so instead what we do is go and disable child force expand on the height and then we give our panel a fixed height by adding a layout element and choosing preferred height of let's say 30 I think that's fine and then we can position our different text elements inside of this one so this one is going to be called something like player scoreboard item so it's just a single item in the list and we can turn that into a prefab in a second and let's go and make some child objects for this so we'll have a text element here and we'll drag that all the way to the side and we'll make sure to send you that on our yaxis on a vertical axis and let's make this totally white and let's size it up to something like 21 and we can just put in a user name here or this is just going to be the player name we'll just put that in there and I think this looks fine actually and what we can do let's see here is we can now disable the image because I don't think we want that in there frankly I think it looks better without and we can duplicate this text element move it over and the first one we want to be anchored to the left so we'll anchor it to the left there and you can hold down alt so snap it as well and we'll just rename that one to our user name then we'll have a text element here for our kills and we want to snap this to the right instead and we'll just put in here something that kills and then colon and we'll do 999 kills it's going to be the default there and we'll put another one here so duplicate that as well and I actually want them kind of close so we'll snap this one to the right and snap this one to the right as well and we can now position this over here I think that looks pretty awesome and then we can of course instead of writing kills here we'll write deaths and you can see here we need more space so we'll just give it that something like that looks pretty cool you can also take both of and instead of horizontal overflow rap will just put overflow just in case that we get get some insane amount of kills or deaths we will still be able to show it on the board all right so I think this looks really nice actually and I think we can definitely use that and you can style these elements differently you have different colors for kills and deaths that makes it easy to see or you could put like the naming up here so have kills and deaths and then just numbers but I'm just doing it the easy way here because I don't want to spend too much time on the UI but we could maybe make all of the usernames or maybe all of the numbers here italic or something actually don't like that so we're not going to do that but we could make the username bold so I just did that and I think that looks good good so let's continue so that's I call this one deaths and let's be done with this element here and I also kind of want to bring it down because I think it's a bit too far up to the top here so let's just bring it down a tiny bit something like that looks nice that might even be too much there we go so now if we make multiple of these you can see that looks fairly good and we can maybe also increase this the spacing between them to some something like 10 might be a bit too much maybe 7 and I really like that so let's just stick with that cool so let's now take our player scoreboard item and drag it out from this prefab and let's drag it in to the prefabs folder to make a separate prefab out of this and we'll have a look at using that in a second and we'll also make sure to disable the scoreboard here and hit apply on the prefab okay so let's make this interactive the first thing that we want to do is have the scoreboard only be brought up whenever we press a key and we do that the exact same way that we did with our past menu by simply adding a reference to the game object inside of our Player UI and then having some kind of input checking in the update loop so let's double click the P player UI here to open it up in visual studio now we can just drag it over and what I thought we would do here if it will load there we go and it's remove that there to give some more space it's just have an update function here where we say if input that get key down so if we just press the tab key we want to enable our menu so key code tab here is what we're going to use and if we just got that we are going to enable it and if we didn't so else if in case we got input get key up key code dot tab well then we want to disable it of course so let's just add a reference up here just as we did with our past menu so a civilised field oops serialize Jesus serialize field there we go of type game object and we'll call this one our scoreboard cool and then we can just go down here and we could say if we get the key we said scoreboard to active and then that means that we have to put in true and if not we we do scoreboard said active and then we put in false awesome all right and so what more can we do here and that's pretty much all we need to add inside of this script and that should already kind of be applied in the game we just have to make sure that we link our scoreboard here and hit apply on the prefab and we cannot remove that prefab and we should be able to now just jump inside of our lobby hit play and try and host a test game here so hit play come on unity there we go test great room and now when we hold down tab it brings up our scoreboard so that is awesome it's super easy to add now comes the hard a part though because we actually have to display some stuff on this scoreboard and we do that by first of all finding or again I'll play a UI script and finding our scoreboard and just as with our pause menu we had this I'm past manuscripts sitting there that did stuff once it was activated we'll have one with with the scoreboard as well so we'll just create a dedicated scoreboard script create an ad let's double click that to open it up in Visual Studio and we're not going to be using either start or update instead we're going to be using void on enable so whenever the I mean this game objects is going to start off disabled and whenever it's enabled through the play UI this is going to be called and in here is where we can kind of set up all of our UI elements to actually be equal to the user names and to the kills and all of that and where we can also find all of the players that are currently in the scene and loop through them so this is going to be done in in a few steps first off we are going to get a an array of players so we have all of our players accessible then we're going to loop through and set up a list item for each one so we're going to loop through our array of players and then we are going to maybe set up the when I say set up the list item this includes setting the UI elements equal to the relevant data all right so that is what we'll do inside of this statement here and then we'll also have another call which is going to be on void on disable and this is of course called whenever the game object is disabled again so when we stop holding tab and in here we're just going to clean up our list of items awesome so we'll remove all of the players once again and the reason why we don't do this in the start method is because people might join and leave the game while it is running so we actually need to do this while the game is running and not only what so that's why we're doing it in here so let's first take a look at getting an array of players when one way would be to just do like game object that find objects of type or and then putting in the player but one better way would be utilizing the fact that we actually have a game manager that sits in the scene with us and it's found somewhere around here so let's find the script for that scripts game manager here that actually has a dictionary a dictionary here containing all of the different players so why don't we just add a quick utility method here for not only getting a player but getting all of the players so let's do a public static player array called get all players I would just call it get players but I like to be very clear about the naming and what we want to we actually don't want to put anything in here and all we want to do is take this players dictionary and return so we want to return players dot and then we can get all of the values inside of that dictionary remember all of our keys are the strings which are our player IDs and each player ID is associated with a player component so that is all of our values so we have key values and those together make a key value pair in our case we don't want to do anything with the ID we just want a reference to the player so we simply say player's dot values and then we need to turn this into an array by going to array and this is currently not available to us so what we'll do so we'll go up here and include using so we'll say using system dot link and that has some awesome utility functions for doing exactly what we're doing here such as pasting in erase or converting to erase here so to array and close that off there we go so that should return all of our players and then we can use that inside of our scoreboard so here we'll create a player array call players and set that equal to game manager and this is a static method so we can simply go dot get all players boom now we have a list or an array of all of our players and now we can loop through this players to rate so we can say for each player which we are going to call player in players so for each player we are going to then create some kind of UI for now we can just debug some of their information so we'll say debug dialog and we can debug out here say we'll debug the player dot name for now we don't have a way to keep track of user names we'll add that in a second and then plus and then we can put some kind of separator in here and this really doesn't matter this is just for our own sake and this is the vertical bar in case you're interested so player kills plus and then we'll do this one more time and then plus player dot deaths there we go so just displaying all of the information in a quick debug log statement here and this will allow us to kind of check whether or not we're doing things correctly because we have to change some things for kills and and deaths and we also have to add the ability to get our current username so we have to kind of keep track of that so now when we go in here and we should see that if we host the game here just very quickly host the game we should be able to hold down tab and it's going to show down here in the debug deadlock or in the console player one zero zero and that's totally accurate so why what do we need to change here well the first thing is we're currently we currently have a variable called kills and one called deaths and those sit under our player scripts so if we go into scripts here and find the player you will see that we have a variable called kills and one called deaths but these are aren't actually the amount of kills and deaths that we've got in this game remember if you followed along in our user account system these are actually only the amount of kills and the amount of deaths that we've gotten since the last time that we transmitted that data to the server so these are only our new kills and deaths so what we need to do is make these actually represent our total amount of kills and deaths this game and then we need to add a way of keeping track of how new kills we've gotten inside of the actual function that should handle that stuff so in the first place we can just have a look at how we're setting these and I believe we do that down here so when we take damage and die we see here that we set source player kills we add some kills on to that and we also have a way of adding on to the death so that is actually fine but what we need to do instead is we need to find the script that is that takes care of sinking or play your score here so play your score and you can see in here that we have a sink score loop that is called every 5 seconds where we sink our score and if we actually receive time data and everything goes well we end up here and this is where we get the amount of kills in tests we have on our player and we add that onto the total amount of kills and death so that user has and then we sink sink that to the server and then we see here we reset player that kills and player that deaths so what we need to do instead is jump in here and add two private variables last kills and we said that to CL 0 by default and the last deaths also 0 by default then we can go up here and we can calculate the amount of kills and deaths that we've gotten since the last time so our integer here kills since last or something like that equals player dot kills that kills what we had last so last kills and we'll do the same with test here so deaths since last equals player deaths last deaths there we go so this is our new amount of kills and deaths and then we'll simply use them for from here on out so we'll say kill since last and death since last if there aren't equal to no we can continue if they're just equal to 0 there's no reason to think anything and we kind of also have to make sure that we only do anything if player dot kills let's see here so our last kills could be equal to something and then played kids if player kills is greater than last kills and or and and player dot deaths is greater than last death so we only want to do this if we've actually gotten more kills since the last time and that actually makes that useless there we go and then we want to return so that's kind of the same thing but I just wanted to add it up here and kind of worded a bit differently this will make sure that we only sink while it's necessary and that we won't sink just in case a number has changed because we can imagine if we want to reset our kills then our player kills will certainly suddenly be less than our last amount of kills and then we could actually end up subtracting kills from our scores and that would just be a mess so just make sure to add this statement in there and then instead of using player kills and deaths down here we now use kill since last + kills and death since last + deaths we sink some stuff and we don't want to reset down here what we want to do instead is say kills since last equals player not kill since last last kills there we go equals player kills and last deaths last deaths equals player dot deaths whew that was mess but it's going to work so I'm happy so I just noticed a huge mistake that we have to take care of and that is in here we're under a player score where we say if player kills is greater than last kills and player to deaths is greater than last deaths then we return that's the opposite of what we want to do we only want to do all of this stuff if this is in fact true or at least if one of them has changed of what we want to change this to is less than or equal to and less than an equal or equal to over here so that in case a player that kills haven't changed or at least of their fewer and the same with our deaths then we just want to return and if not then we want to update all this stuff down here super important change or else our players score it's not going to work and you can see that I noticed it because I have a lot of sinking holes down here so that should actually have fixed that bug so just want to let you know cool so that should actually make sure to sync things properly and we could go ahead and make a quick build here just to test it out which don't think that will do let's add some functionality for keeping track of our username and then let's try and make a test build before we build out the last of you our UI here so that is all for a player score and what I want to do this is basically I want to go to a player here and add a variable and this is just going to be a public string and we're going to call it something I think we're going to call it just use the name username will definitely work I will set that equal to loading dot dot by default and I think we need to mark this as a sync var but that depends on how we end up implementing it but for now we'll mark it as a sync variable and then we need to find all player setup script so we'll go on player setup under scripts here player setup there we go and we have a place here where we we so we start up the client here we find a player component we find our net ID and we register it with our game manager and after that we have the start method that does all of the this logic it sets up the player and I think it's in here that I want to add a command to kind of set up the user name on the server so we create a command down here we'll mark it as command remember commands are only executed on the server I will do void C the prefix any command with CMD and we'll call this our set user name and we'll need to pass in a string with for the player ID for the player that we want to set the username to and also the user name sorry about that the user name that we want to set and then we can get that player by going game manager get player and we'll just go and put in our player ID here there we go and then we've maybe store that so a player is equal to that and then what we can do is we can say player dot and maybe we need to check if our players in 0 here so if player is not equal to null then we want to say player dot user name equals the username that we have passed in awesome and we can also throw out a debug that log statement here saying something like username + and then has joined there we go just to let us know what's going on and this will of course again only show up on the host because the host is the server and so it won't show up on all the clients but that's fine this is only for our knowledge and the reason why that we can get away with doing this only on the server is again because we marked the variable as a sync var so whenever we change it change it on the server it's going to sink get synced out to all the different clients so it will update on all the machines code and then we can simply call this by saying command set username and we need to input our player ID which is currently our name so transform the name and then we can put in our username and our username I want that to kind of depend on a few things so in case our user account manager is logged on so if that's locked on then I want to set username so let's create a temporary variable here called underscore username and default that to something like again loading dot dot so if if we are logged in I want to set username equal to user account manager dot user logged in user name and if not then I just want to set username equal to transform that name so in case we are just testing this without logging into a user account manager of course you would never do that in the final build but in case that's happening we'll just set the username equal to our transform that name which is going to be player 1 player 2 play 3 just so it doesn't say loading when really it it's not and let's put our user name in there cool so that's awesome so now we should actually be able to test this out that was actually quicker than I expected or maybe it's just a lot of fun doing this series maybe it's just time going by quickly actually there I've been recording for a long time alright so this let's get this along let's see how the build works here um so of course for the build I'm gonna make or jump into the login menu here hit play go test one two three test one two three login and I'll do this on the other one as well whoops that was a mistake so let's do that again test one two three four test one two three four and hit login on that let's create a room here called the test room and let's jump in here as well and hit test there and we should be able to see right now when I hold this down it says player 1 0 0 and actually it says play 1 here and it says player 2 as well but it doesn't it doesn't actually use the user name so that is something that we'll have to find out kind of why that is happening but you can see that it's syncing the score for both of us and if I go ahead and let's say kill player 1 here and wait for us to respawn hold down this one you can see that it's updated the scores so that's awesome so player 1 now has a death and a kill and play 2 has a kill and if I go ahead and kill play 2 you can see that that updates as well so now both players have a kill and a death awesome so let's see here let me close down that client and this is not something to worry about it's just when cleaning up the thing when we interrupt the game it shouldn't be a problem you can go in and add an if statement just to check if it's null if you want to do that but that shouldn't really be necessary so let's just have a look at what's going on with the code here so in case we are locked in we want to set username equal to a user account manager locked in username if not we want to set username equal to transform that name so it appears that our user account manager isn't locked in and the reason for this it's actually somewhat unknown to me so I'll just have a look around the code to see what's going on and I will be back in a second all right so I found two stupid things that I've done that was causing this error so the first one was pretty obvious that was under scoreboard here that I had forgot to change it from player name which is just using the name of the transform so player dot username that's why I didn't call the name but user name is because I would we would need to differentiate between the two here so just change that and that should work just fine but we need to change one more thing and that is inside of our player setup I some recent road if player is equal to null well we only want to do that if he's not equal to null so that should actually make it work so if we try and build this out one more time and it's just going to take a second here it's we don't have that many assets that we need to compile and that should open up that window there we can hit play and we can log in so test one two three test one two three hit login on that do the same year test one two three four not five and test one two three four hit login there create a room just some room and you can see down here it says on text our test one two three has joined and that right now I am in there as well and if we join with the other guy here as well and we'll have a look at that error there in a moment so have a look at this here so we join here's what test 1 2 3 4 s join and now when I look at the scoreboard it correctly sinks so that's awesome and if I shoot one of course the score updates as well so that is freaking awesome so let's just have a look at this a little error message here it's just an old reference exception so the object of type text has been destroyed but you're still trying to access it so that is if we get unlucky with the sinking here and the text here so what we'll do is simply say if kill account is equal to null or death count is equal to null then we just want to return there we go all right so that should get rid of that and I'm glad to see it working so now we need to implement this into our UI and that is kind of the easy part of the tutorial so we can get rid of our player stats we can get rid of the player setup the player game manager the player UI we just need to focus on the scoreboard here and what I thought we would do is have on the prefab that we made here the prefabs and then play your scoreboard item had it oh it's own little script here its own little class cold maybe actually that's just called player scoreboard item that is responsible for setting up the different UI elements that are under each item so we'll kind of group it into each class being responsible for doing a little bit of work and that is in generally good practice don't have these huge classes with which I've been guilty for in this series but that is because grouping together your networking code can sometimes be a lot easier than having many classes because you need to well frankly we already have a lot of components on the play here so play a scoreboard item here we'll just have a reference to first of all the and we of course we need to import using unity engine dot UI here so we can get some text references and we'll just remove system data collections so um we'll be using a text here and this is going to be our username text will also have one this is another serialize field this is also text called kills text and finally you guessed it we're going to have third text element with our deaths text there we go and then we'll have a public method void here call it something like set up and this is going to take in a string with our username an integer with our kills and an integer with our deaths and then down here we'll simply say username dot or username text text equals username you kills text dot text equals and then we can prefix it with kills here kills only one one space that kills plus kills and deaths text dot text equals deaths and then adding the deaths on there as well awesome so what we can do now inside of a scoreboard is simply get first of all a reference to the player scoreboard item prefab so we'll make this as your last field as well and this is just going to be of type game object and we're going to call it player scoreboard item prefab you could do prefab I'm just gonna go item here and I will simply instantiate that down here so we'll go for um actually we're already looping through here and we'll just remove this comment now so for each player in players will go in stand instantiate one of these so we'll say instantiate and we'll put in the player scoreboard item and we'll parent that to our and we need another reference for this we'll parent that to our serialize field and this is going to be a transform and it's going to be our player list there we go maybe we should put players scoreboard list player item with something like this play scoreboard list and we'll close that off so what we're essentially doing here is if we have a look at our player UI is and we'll just drag this into the scene so we can see what's going on so we have our scoreboard here and that has a reference to our player scoreboard item and to the player list and for each player that we find in our scene we're just going to instantiate a player scoreboard item into the player list and then we are going to call a function so if we go back into our visual studio here we're going to call a function for each of these to set it up using the information we have about that player so we're going to first of all get a reference to the game object that we just instantiate it which is going to be item geo and we want to cast that into a game object we've done this multiple times then we need to get a component on that game object and the component we need to get is of course player scoreboard item and we can call this one item and set it equal to get component of type player scoreboard item there we go and then we can say in case that isn't zero so if that's not equal to null just do a check there because we don't have any reassurance that it not it it won't be equal to null so if that's not equal to no we go item dot setup and then we pass in player dot user named player dot kills and player dot deaths there we go so we've now passed all of this information on to player scored a scoreboard item and the last thing that we need to do is just loop through all of these when we disabled the object to remove all of the objects again so we'll simply go for each and this is an easy way to loop through all of the children of an object now see here we'll go for each transform because all objects have a transform and we'll call this one child in emblica trance no not our transform you go player scoreboard list so and we don't need to do dot anything here because that in itself is to transform so we've just said for each transform child in score player score bird list that means for every child object of this object we want to just destroy that so we want to destroy child and we of course need to do dot game object to make sure that we destroy the entire game object and we can save that now and close that and that should actually be it if I remember to do everything correctly the variable item go is assigned but its value is never used that's because we need to do that there we go so we don't want to get the game up and get the component on the scoreboard we want to get it on the item there we go it's pretty important and if we set all of this up as well we need to do that as well so we need to drag in our username text our kills text and our deaths text there we go and let's try and just build this and see what happens and hopefully it's going to work right away so I hope I didn't make any big mistakes in the code like before so let's boot boot this up here and do one just one two three just one two three I will do the same over here so test one two three four test one two three four there we go and I might even manage to squeeze all of this into one video it's going to be one heck of a video but I think that is totally deserved because I haven't been giving too much love to the series of late so there we go it's working and let's join with the other client as well and it looks awesome so let's refresh our room here join it we'll have to wait five seconds that's enough time for me to sip some water there we go and we can see here that we have a scoreboard for each player that's freaking awesome and we can go in here and let me kill this guy and see what happens and you can see the scoreboard updating and we can do the same over here let's kill this one and the scoreboard updates once again so that is pretty much all that I wanted to show you in this video I hope you think that it's as exciting as I do it definitely helps with the competitive feel of the game that you can keep track of who is winning and everything so score is always nice and again if you want to add this to the end of your game you can do that right away and that's really nothing stopping you it's just as easy as enabling the UI component and then it will do everything for you so awesome thanks for watching this video hope you enjoyed it and I will see you in the next one thank you so much to all of the awesome people who donated in September and a special thanks to our own Metta Robert Roach James Calhoun Kim Rose cuccos Bao and Antoine and vixen pea thank you so much for donating you guys are awesome if you want to support practice yourself you could go to patreon.com/scishow