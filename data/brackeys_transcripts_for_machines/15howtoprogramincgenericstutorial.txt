thanks for tuning in at brakus hello and welcome to video number 15 in the how to program in csharp course in today's video we're going to take a look at generics first off we'll talk about what generics are creating generic classes and methods and using some of the stuff inside the system that collections that generic namespace so generics might sound really frightening but they are extremely useful for a bunch of things when programming so I'm kind of excited to show you this and also I want to mention that the reason why it's been so long since the last video is because I've started a new series that I'm really enjoying and it's called making a multiplayer FPS in unity so if you have ever used unity or been wanting to make a multiplayer game or an FPS of course well then I definitely suggest to check that out by clicking the screen now and if I if not we'll then enjoy today's video so the very concept of generic classes and methods is actually fairly simple but it can sound complex at times so the idea is that when we don't know the type of our object we use generics so it allows us to handle objects of an unknown datatype so if we start here by Anik making an example out of a generic class so let's start by making a class giving it a name and I'm going to call this a key value pair and the reason why is in programming it's often useful to group together two pieces of data I mean this can be used for a number of different things for example if we wanted to create this idea of a library that its associated a name of a book with a certain book well then we will create a key value pair where the key was the name of the book and the value was the actual book we could also have this idea of a price list for example where we had the name of the product associated with the price of the product so we can do many things and store them in these tuples so now that we know what a key your Paris let's try using generics to model this sounding code so normally when making a class we would go in here and we would open and close some curly brackets that's also what we want to do but right after the name we want to add on a bit of code and then we start by open and closing some of these lessthan and greaterthan signs and in here we want to give it give the computer a name for the types that we are going to be using in the class so we often start by calling these t sometimes you will see in programming that it's only called T but I like to kind of infer some kind of usage so we'll call this one the T key and this one the T value so these are now the types so whatever we pass in let's say that we wanted to have the the name of the product and the price well then we would pass in the a string here and T key would now be a string and T value would be an integer because we are a float value if you wanted to have decimal places in your price so these are now types not values then what we can do in here is we can basically treat these as any other data type so we can make a public T key and we can call this key and this is now just a variable of type T key meaning whatever we passed in and the value we are going to assign it in a second and then we'll have a T value which we are going to call value so I know this maybe feels a bit abstract but just how useful it is you are going to realize in a moment so now we can go ahead and create a constructor for this key value pair class and we do this as we would with any other class so we make a public whoops key value pair and let's give it some arguments so we can maybe get a T key and we'll call this key and a T value and we'll call this underscore value and then we will simply assign key or ET key to key and set value equal to underscore value there we go so this looks like any other class except the types that we are using either general or generic types up here okay so now that we have this idea of a key value pair and this is able to store data already we need to kind of visualize this in some way so let's create a method that will print out the data in at this class so let's simply make a print method and in order to do this we just make a public void I'm going to call this print and it is simply going to say a console dot write line and then it will do key I are not underscore key but key dot to string and we can maybe just say that this is the key plus and copy that down here and this is now the value and this is the value dot to string so this will print out the key and the value all right so now that we've modeled out this class let's try using it so we could go ahead and create a new key value pair and for this we of course just give it the type and then the name and I want to call this a meaning and I want to set it oh yeah of course this is a generic so we have to put in and the data type that we want to be using and here first one to give it a string and then an integer so this is kind of the syntax for doing that we are saying that T key should be the string type and T value should be the integer type then we name the variable as with any other and we'll name this meaning and we'll set it equal to a new key value pair and again we have to pass in string and integer nothing's changed and then we want to pass in the key and the value into the constructor here so the key is going to be life and the value is going to be 42 so now that we cuz when we've closed that off we should be able to run the program but of course we want to print this out let's do meaning dot print and now when we run this hit play you can see it prints out that the key was life and the value was 42 and this is all stored in one very one variable called meaning so now we've created a data type that's much more complex than a sim single standard data type like stringer int we've actually paired these two together and created a way for us to print them out so that's a fairly simple use of a generic type but something that is used all the time I mean if we go up here and say using system dot collections dot generic will then include included in the csharp language is this collections just dot generic name space and this hosts a bunch of kind of utility classes and methods for handling on generic things and one of these is the list that's basically a resizable array as we've seen but it also has another class called the dictionary and the dictionary is basically a list of key value pairs I mean if we have this idea of a dictionary where we have a whole book where we associate a word with the description of the word well then you can see that we have in a list of a bunch of key value pairs so that's basically what a dictionary is and if we wanted to go ahead and use this you can see just how similarity it is to what we just created I mean we can go ahead and the new dictionary here and we can say that we want this to be a string and integer again and we can call this prices set it equal to a new dictionary and we would again give it a string and an integer and in here we would give it the capacity how many elements are in can be in the dictionary so we would maybe set this equal to five and then we can simply go ahead and say prices dot add and we could add a key value pair so we give it the key here and that could maybe be a watermelon pretty sure that's in one word right and then the value could maybe be a five we could also add a car and this is pretty much any car apparently and the value for this is going to be one hundred thousand and we could of course just go on here we could remove elements and all that and we can print them out so you can see that this has exactly the same principle applied here so now we can go ahead and maybe print out prices and then we'll take the first element here so I think we are able to just say console dot write line and then input prices at zero index fairly sure so nope we have to maybe do that to string still doesn't work so I'll just check for the way to do this okay so I was being stupid there it's apparently too late for me to do a video so the whole idea with the dictionary is of course you don't put in the index of the value but instead we give it the key so we would put in watermelon here and we should get the value five so that's kind of the whole point so if we remove that and go like that we should be able to get the value of five then you can see that we indeed we indeed did and we could put in the value car and we get the value of 100,000 there and so you can see just how useful that actually is good so let's now remove this system data collection stud generic namespace and let's take a look at the generic method so if we wanted to go ahead and create a generic method inside a nongeneric class we could make a nongeneric class here called maybe our utility and this is something I do for a lot of the applications that I write is I create some kind of utility class that hosts a bunch of generic methods for doing things that I often do especially because sometimes I like to model out the way of handling handling this data myself instead of using the collections just that generic namespace because that can sometimes act funny and it's better if you know exactly what it's doing so inside of this on utility class let's create a method called compare values and that will basically check if two values of unknown types are equal so let's create a public void and the method here or a pool of course public static bold let's make that static and we'll call this compare values and the first type is just going to be type one and the second one we're going to call T two just like that and we're going to take use these two types as arguments so in here we're going to have an argument of type t1 and we're going to call this value one and an argument of T type 2 or t2 and we're going to call this value two so now we can pass in two values with different or the same data types and then we can compare them so we can simply return and then we can check so we can say value 1 dot cause value too and we don't need to cast these objects in any way we don't need to generalize them into an object or anything like that we simply say that we this could be an integer a string it could be a custom class it could be anything and it will check its value up against this one so and it will be stored in these two variables so it will simply then take the value 1 use the equals method to see if it's equal to value 2 if it is it will return true if not it will return false so let's try that so console dot write line and inside of this will simply call utility dot compare value or maybe compare values there we go and you would think that you needed to go ahead and put in string and int here or whatever but actually you can exclude this and it will infer the types upon the usage so if we could actually just go ahead ahead and write 10 and 3 here and it will work you can see that it gives us no errors and when we play here it says false if I change this to 10 it is going to say true and you can see I can put in the a boolean value there and it's of course going to say false I could also put in a string here and it's still going to say false but it doesn't give me an error if I then put in another string here that is different it's still going to say false until it is exactly the same so we have hello and hello here and now if it says true and we could of course expand upon this create another method that will compare types so we could make a public static pool here that instead of comparing the value simply check if the two values we put in are of the same data type so we have the t1 and t2 here and it's going to take a little call these type 1 and type 2 and it's going to return and now we can simply take the tie off type one could go ahead and do it like that or we could simply use the t1 and t2 so we don't actually need to do any values in here if we don't want to we can simply use those but I'm going to go ahead and say type of type 1 just to make this very explicit dot equals and then type of type 2 so it will simply take the type of type 1 which is of course t1 and see if it is the same as t2 so I think that should do it nope already define some Emma code compare values okay that's because we need to rename this to compare types and let's see if we are errorfree we are not the terminate could not be found are you missing a I oh of course we need to put in t1 there and t2 there I think what is going on t1 2 2 like this okay so this is the way and then we do console dot write line utility and dot compare types yeah there we go and then we simply check if let's say hello it's the same as 10 so that's the string and an integer and now when we hit play here it's expecting a parenthesis of course and it has it now you can see it of course says false but if I go in and write hello here it's going to say true and the cool thing is that if I now change the value here it's still going to say true because it's no longer comparing the value it's simply comparing the type so that is kind of a way to think about generics and some pretty useful use cases both for the generic class and the generic method and if you want to not maybe not jump right into modeling your own classes and methods using generics you should definitely get familiar with a lot of the stuff inside of the system tech collections that generic namespace I mean there are a bunch of useful things in there I mean if we just take a look at it here and we can simply do generic OOP collections so we have the dictionary we have the list we have the maybe I should just do this so you can see that it's actually there so we have the list we also have the stack and a bunch of others so definitely play around with that look them up try and use this them in your program and maybe even try adding your own so that was kind of it for this video I hope you enjoyed it and I'll see you in the next one