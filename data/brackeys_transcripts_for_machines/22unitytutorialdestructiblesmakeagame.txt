thanks for tuning in at braies hello everyone and welcome to video number 22 in make a game a cool series on making a video game in unity in today's video we're going to take a look at something really awesome which is destructible objects so objects that will fracture into multiple pieces and then uh have physics applied once uh we interact with them in a certain way and uh how we're going to be implementing this today is by make making our uh player destruct whenever he's killed uh killed by an enemy we're also going to fix a a tiny bug uh which U makes it possible for us to um kind of get multiple game overs uh which is kind of annoying awesome so that's the schedule for today and uh without further Ado let's just get right into it you will note however that at some point we're going to be using blender in this tutorial that's not because you're going to need blender in any way I will of course be providing the model but I thought it would be uh pretty quick and easy to show you how you can actually do this uh yourself cool so uh first off let's fix this multiple game over par and I'll just see if I can uh kind of uh get it uh to do it as we speak here so I'm just going to turn on the volume on my monitors and hopefully that won't be too disturbing here but okay okay oh there you go we got two game overs and it loads the scene uh two times so in order to fix this we actually already have um all of the logic in place we simply need to do an if statement uh inside of our kill on hit script so double click that to open it up in mono develop and uh also we'll also open up the uh game master script just so we can have a look at what's going on so remember we made this static variable called is restarting and uh we kind of managed this inside of our restart level method well now it's time to put it to use so inside of our kill on hit we'll only call the game master. restart level if game master and remember this needs to be capital letters because we accessing a static variable and not the instance D is restarting is equal to false so if we are not currently restarting well then we can just go ahead and restart the level cool so and basically we can just save that out uh remove these and a close down Mano develop and uh now when we hit play and roll over and I'll just turn on the sound here game over it will only do it once we can we can go ahead and move on to the exciting part of today's tutorial which is destructing the player on impact so in order to do this I actually want to uh kind of redo our ball object because currently we are just using the default Unity sphere instead I want to construct this sphere very easily in a blender and then I want to kind of uh fracture it into multiple different pieces and uh then inside of unity we can spawn these pieces give them some Physics and you won't be able to see that we are actually swapping out the original sphere with a new one hopefully at least that's the dream so I hope that this is going to be looking really cool so what we uh actually going to do is simply opening up blender so blender is a free modeling uh piece of modeling software oh yeah I forgot to mention if you have any questions go to from. breast.com but blender is a free modeling software uh and uh it's uh completely open source uh so if you want to be a part of it it's called the blender Foundation but if we just go to blender.org uh you can download the version that I'm using here uh which is version 2.74 that's the most recent stable uh stable build and you can download and install it here and it's of course also for mac and Linux so it's it's very multiplatform and it's actually the really great Tool uh it's it's definitely capable of much more than we're going to be using it today so uh let's just open up blender and you will be met by this starting screen and once you get in here we are going to right click on the camera here and on the sun and finally on the cube while holding down shift to select all of them and uh then we're going to hit X and then click delete in order to remove those objects uh when you're just starting out in blender you will notice that if you uh hold down your middle Mouse button you can pan uh you can uh kind of pivot around the uh Center Point if you then hold down alt while doing or shift while doing so you can um you can drag and you can just scroll to zoom or control and middle Mouse so that's kind of the basics of navigating and we're not going to be doing any of that basically so uh in order to get started here we're just going to H hit shift a that will allow you to add a mesh object and we're going to add the UV sphere then we can uh Zoom closer in on this and uh the number of segments that you want this sphere to be simply how many subdivisions uh is up to you you can just choose the one that uh you want whoops and I'm just going to go with the default of uh 32 segments also uh we want to change the shading on this from Flat to smooth in order for this to look like a proper sphere so that's just going to round out the surface then up in the right hand panel here we have basically the hierarchy uh and inside of this I believe in blender is called the graph view uh but uh no uh it's probably not the outliner is what it's called I'm not a very rapid uh blender user excuse me so we're simply going to re rename this to ball and uh what we going to do now is we're going to uh kind of UV unwrap this and basically what that means is that we're going to take all of these uh faces and points called vertices uh inside of the 3D View and we're going to lay it out on a flat plane so we can put a texture onto that and uh that's kind of a whole science and some people find it really difficult including myself uh but we are just going to do a very simple automatic uh unwrap and it's going to look pretty great so um in order to do this what you want to do is you want to go up here where it says default and change to UV editing then we can hit tab to go into edit mode or you can change it down here then we're going to hit u in order to unwrap this but we're going to CH uh select the automatic sphere projection and this is going to give us a fairly bad unwrap I'm not going to lie there are so many ways to unwrap a sphere and uh some probably most are much better than this one but in order to just get on with the tutorial this is going to be just fine especially because we are only going to be viewing this um sphere from one angle and it's only going to rotate along one axis so that's going to be just fine and now we can actually add a texture to it uh when we're back in unity if you don't do this you'll probably just get a single color um because all of the points just maps to one point on that texture and that's going to equal only one color now this will actually overlay a texture cool so uh just hit tab again to go out of edit mode and we can go back into the default view now we want to uh do uh you kind of do a fracture on this object and that uses a plugin that can be enabled uh from the user preferences so press control alt U or go to file user preferences and in here you can change all uh kinds of things in blender uh we're going to be using the cell fracture so you can either search for cell or fracture and simply enable enable it here make sure that you have the uh version that I'm using or a more current one in order to get this plugin cool so what we're going to uh do now is go over here uh in the left hand side and just hover over it and a new button will appear called the self fracture button now in here we can simply click that and it's going to open up a whole other panel with a bunch of settings basically we want to limit uh the amount of objects we get to 15 because that's going to be plenty you can do more but remember that we're going to have uh rigid body objects with mesh colliders on each of these uh so the more you do the more taxing on the computer that should be pretty selfexplanatory also we're going to bump up the noise to one uh just to get some Randomness in there and uh other than that we can just leave the settings as is and hit okay now basically you it will look like nothing has changed except for in the outliner where we can now see uh 15 cell oh okay it only did 12 uh but we can see 12 cell objects but um we can really uh see them uh if we click on them inside of our um perspective view here so what we inside the viewport so what we're going to do is we're going to change over to the layer that these are on because if you uh look down here you can see that we have objects on two layers so this is the first layer and that's just our ball and this is the second layer where all of our fractured bits are and if we just right click on one of these and drag it out you can see that we now have the solid pieces that the cube has split been split into so that's awesome that's basically all we need to do inside of blender the W the rest we can manage in uh Unity so now let's go to file let's save this and the real cool thing about blender is that it integrates extremely well with unity because we can just save the blend file we don't even need to export to um any fbx or anything like that we can simply save it as a do blend so I'm just going to navigate to my Unity uh F folder here my Unity project which is make a game go to assets let's put it under models and let's rename this to um player or ball. blend that's pretty much up to you I'm just going to do player. blend and let's save as a blender file now we can simply minimize this go back into Unity come on Unity there we go and unity is probably going to recognize that it has a new model and uh there it actually imported really quickly what I want to do you can see that it automatically creates this materials folder uh I actually want to go into the import settings and just remove that I don't want to import any materials um all of these settings you should pretty much be able to leave except we're going to change the scale factor to 0.55 uh that's a magic number but when I was playing around that seemed to look pretty close to uh the object that we have here now let's hit apply on that go on the rig select none hit apply and do the same thing with animations oh okay that's disabled with the Rick that makes sense so now we can simply remove this materials folder because well it's unnecessary to have it there and you will notice now that if we close down blender you can simply double click this at any moment and it will open up in blender and you can make changes save and it will update inside of unity so it's really really easy to do that cool so let's drag this player object into our uh scene and uh it actually looks like it's a bit too small now uh but what I want to do is simply uh find the ball object here because that has a bit different scale uh so if we drag it on the ball object uh it actually looks a bit too big so let's try 0.5 instead I like to change all of my scaling in here uh I think it makes it easier yeah and that that's actually pretty on point cool so on the ball object itself we're going to disable its mesh renderer so we can f focus on the player object here and I'm going to go ahead and rename that to Graphics uh then under the graphics we're going to have this ball object but I also want to add an empty object and uh we're going to reset the transform on this and this is just going to store all of the uh ball uh pieces so we're just going to say ball pieces or fragments or whatever you want to call that and drag the ball cell onto that and yes we want to just lose the connection we can get that back at any point so now that we have all the Bol pieces here we can see all the cells and uh first off let's just uh disable the ball pieces and select the ball here and find the proper material so we'll just get the ball wood one and you can see that the unwrap is quite decent I mean it it gets really uh tied up here but uh from the side here it looks kind of all right so inside of our Graphics if we want to kind of um change this we can but I think if we seed from out here it's going to look just the same basically so I think we're pretty satisfied with that you can of course just do a quick Google search on um a sphere UV mapping in blender um but this is going to work for now so the ball here uh is simply going to store a m renderer and um I was thinking that we maybe want to uh move all of our rigid by we're going to keep our rigid body LC here and the same with this sphere collider then we're just going to disable that and uh disable this uh graphic here and then enable the Bold pieces so once we have that in place we can disable that and enable the Bold pieces instead and you can see that they also need a material to be applied so we're simply going to select all of the pieces and you can multiedit like this and now select the Ballwood material and it's going to look just like the nonfractured one but with all of these pieces then in here uh we can simply add a rigid body component and uh we're going to set it to use gravity and all the default settings there and a mesh collider however we however we want these mesh colliders to interact with other M colliders we want them to interact with each other and in order to make them do that we need to check the conve and that's simply uh a a simplified version of the mesh collider uh but they will now interact with each other and you can see this is only 12 pieces if we had a 100 pieces here the calculations would be crazy and uh fairly unnecessary so now that we have those uh I think it's fair that if we just if we just test this out so I'm simply going to click is kinematic on the rigid body so that it stays on in place and uh disable this SPH collider on that and we should be able to just see what this looks like in game and you can see how cool that effect is when it fractures and uh all these pieces uh go flying uh you can of course add some Force to these but I kind of like the uh just calm fracture there where they just fall to the ground awesome uh so let's reenable uh or uncheck is kinematic on the rigid body and reenable this fider there then let's disable the ball pieces and enable the ball and let's Now update this prefab cool so now we're going to be creating a script that will actually trigger this Logic on the bow and uh the question is where we want to kind of sit this script uh so if we find the um the script that currently uh kills us the kill line hit here uh you can see that it has this restart level functionality which is has a short delay well I think that uh we should just use this and then maybe find a reference uh to our ball um is kind of what I've thinking I'm thinking here so if uh we go into here and in the function we can type uh collider uh and we're just going to call this call info for Collis info or collider info and then we can say uh if Co info and for some reason the auto completion in mono develop is is being really annoying with me today that's kind of uh so I'll just hope that I can Wing this uh but uh let's see we have the ball tagged as player so we can say if uh coll info. tag is equal to player then we want to uh find some stuff on the player um the the question here is basically we can handle all of the logic in here or we could have a script that sits on the ball here that basically handles everything for us and then we can simply call the destruct method on that script and I think that's what we are going to do so we simply going to uh keep this for now simply comment this out and say um get the destruct uh component call the destruct destruct method cool so now we know what to implement here and then we can go ahead and simply create a c script on the ball and we're simply going to call this self destruct or is destructible is that better that's probably better so destructible uh but uh this is going to be pretty specific to the player right now but I think you should be able to tweak this in order to make other objects destructible I mean this is just the kind of logic that will trigger the destruction we've kind of already made the destruction itself so we can delete the uh using system. collections namespace that's not something we're going to be using and uh then we can make a public void uh that will do stuff for us here so we're going to make a public void and uh we're just going to call this destruct and uh or not public void I am so used to uh C uh for some reason I created a c script here I'm sorry um that's just kind of automatic from now on my the series I in C okay so we're going to do selfdestruct and this is going to be of type JavaScript and again we want this to be destructible in JavaScript there we go I'm so sorry cool so let's load this up and uh yeah so in here we simply going to make a function and we're going to call this distrct for some reason I just can't spell that correctly and uh inside of this uh we basically want to uh disable the rigid body we want to disable the collider we want to enable the uh pieces and we want to disable the uh whole ball model so that's kind of a lot of references that we need first off we need a rigid body and we're simply going to call this yeah we we're just going to call this rigid body like this we need a reference to uh oops again the C that's crazy okay we we need a v rigid body of type rigid body like this and uh we also need a VAR um and this is going to be the reference to our collider and currently we are using a sphere collider so we need a VAR sphere or VAR collider of type sphere Collider we also need a um I think is rigid body just with a non Capital yes it is uh we also need a reference to our pieces so a VAR pieces of type transform and VAR um and a whole ball of type transform cool hopefully I got that right now in the destruct method we need to do rigid body Dot and I believe it's just is kinematic and uh we're going to set that to false or to true I mean then in here we're going to say collider uh dot um enabled equals false we're going to say pieces. set active and we're going to set them as false or as true now and we're going to set whole ball do set active to false okay that's there are definitely some errors in that also we have an unexpected token that's because again I WR wrote this as C so this is going to be our collider info and it's going to be of type collider there we go so let's check this so we have an ambiguous reference rigid body destructible so why is this ambiguous let's see rigid body that is kinematic uh that should be all oh that's because it automatically declares the rigid body so this is just going to be a ball rigid body and uh it's going to be the same with the collider so ball collider and uh the set active is not a member of transform then it's a member of game object let's see how we went with that and we have no errors so that's amazing sometimes when autoc completion doesn't work you just question everything you do cool so let's see if this actually works and of course we're going to have to set up a bunch of references so on our ball here we'll simply drag in the rigid body we'll drag in the sphere collider we drag in the ball pieces and the whole ball okay so now let's actually implement this into our kill on hit um script so first we want to get the destruct uh destructible component and uh in order to do this we'll make a new variable we'll call this destructible uh but with uh a small D and uh then we'll uh simply say that it's going to be of type destructible and uh we're going to set it equal to get component or uh call info. get component and uh we're going to get the uh component destructible and simply cover it in here because it's um it's not going to tell you if it's wrong until you run it and uh then we're going to cast this as a destructible so we are basically going to tell it that the component that we want to get is of type destructible uh so that's kind of a clumsy way to do it uh but it works and uh then in here uh we simply want to tell it that we uh that the method that we want to call is uh called destruct so we are simply going to call the destruct method so we get a reference and we call the method uh that's a very normal way of uh calling public uh functions cool so now that we've kind of saved that out we should be able to head back into Unity now and uh this is going to uh work a um pretty uh nicely actually it's going to work just fine just until we respawn so have a look if we hit play here and we roll over we should dissolve and we do but when we respawn we respawn in a bunch of pieces so that's kind of not what we are looking for so basically what we want to do here uh is um we want to kind of we or UND distruct ourselves and uh in order to do this uh there are a bunch of things that we can actually do uh we want a method that will uh kind of enable all of these components again and uh we also want a way of kind of resetting up ball pieces so instead of keep keeping track of their positions and resetting them uh what I want to do is I simply want to make the ball pieces a separate object that we can then uh spawn in so uh we are simply going to uh reenable this and uh we are going to uh kind of drag it out here and we are going to lose the prefab connection then I want to apply this ball and uh then I want to make the ball pieces into a separate prefab and I'm just going to drag that into the prefabs folder and I want to reset the position on uh those so now that we have that going for us um we can just delete the ball pieces and uh we want them to scale uh with our ball here so we'll see if they do that when we instantiate them in so what we can do here uh is we can um find our ball we can go into our destructible SC script and uh in here we want to uh instead of um setting active some pieces we want to spawn them in so first off we want a reference to the place that we are going to spawn them in and that's going to be of type transform and we're simply going going to call this the pieces parent then next up we want a v pieces prefab and that's also going to be of type transform this way we can simply instantiate and what we want to instantiate are the uh pieces prefab and where is the pieces parent. position and pieces parent. rotation and then we can parent the pieces onto that so we're going to set the pieces uhe uh okay we want the reference first first here so we are going to make a VAR and this is going to be the Clone that's kind of standard calling it The Clone in unity and uh then we want to do clone do and uh we're going to set parent equal to uh the pieces parent and this is probably going to uh complain about a uh that we need some casting no it actually does that for us in JavaScript so Hallelujah cool so the pieces parent here uh we want to just drag in the graphics and the pieces prefab we want to find that in our prefabs do so simply uh navigate in there and uh drag in the ball pieces prefab now we can apply this ball and uh we should see this working uh just as we did before uh so it's not going to fix the bug there and uh indeed they do actually scale down uh so what we can do in order to kind of fix that is uh we can just fix the way that we have scaling set up at the moment so if we find our models find our player object and just drag it up here uh we can simply we should simply be able to take the scale factor here and find a a um scale factor that reminds a lot of um oops of course want to set the scale here to one one and one and uh that actually looks pretty good I think uh so let's just make sure that our sphere collider uh is actually good on that so 0.7 is what we're going to go with I think so um now that we have that set up we can simply uh Delete off the player here and uh now that should be uh completely synced now we don't have this weird scaling issue and that's why I like taking care of any scaling inside of the scale factor uh so now when we play here bump into him uh you can see that it smooth the transitions uh on that uh so the next thing that we are going to do is we need to reset uh the Bol so we need to remove uh the pieces or we could keep the pieces there and never actually parent it now that's that's interesting so let's just not parent this at all but we want to keep the uh position and all that so it's not going to go back with our player uh so if we try this and hit him the piece pieces will stay there and they are independent uh of the rest here and they can actually be there for as long as we want uh so I think we're going to destroy them after a certain amount of seconds but it's pretty fun that they are there for uh kind of for a little bit so let's destroy the Clone here and we might need to do do game object on that one not sure we're going to find out and we're going to destroy them after let's say 10 seconds let's just give it a while so if we uh hit play here uh we'll find out if a game object will do game over and yeah indeed so in 10 seconds these will disappear um cool so oops nope uh destroying the transform component is not allowed so we actually need to do do game object oops game object on that one so let's a play here and this is going to be a pretty long video uh I might need to cut it up uh we'll see over so there and uh we should uh actually see these destroying now I'm just going to make sure so we'll just wait the 10 seconds and yeah indeed they do disappear cool so what we want to do on the bowl uh is we want to re enable this rigid body uh and we want to reenable uh the um or re uh kind of set the is kinematic to false again and rename build the uh sphere collider and the ball here um so I suggest that inside the game Mastery where we already have a reference to a ball we can simply call a method so we'll just do uh function D destroy or destruct and uh then in here we'll uh just basically reverse this code so we're going to set rigid body. isomatic to false we going to enable the collider we are not going to do anything with uh this uh prefab and uh we're going to set the whole ball. setactive to true and uh now inside of our game master object and excuse me if I'm going a bit fast here but the video is getting kind of long uh inside of this what we can do uh is we can simply find the player here when we are uh restarting the level uh down here when we have setting the position to the latest latest checkpoint we can just do player uh or again we're just going to do basically the same that we did in here so we can just copy this if we want to be really effective so we can just get the destructible component and uh whoops we are going to get it from we're going to get it from the player here and and then we're going to call the not the destruct but the D destruct so I think this should uh actually work and uh if we go ahead and uh bump into this guy we fall into pieces a ball will appear and again it's the same ball we didn't have to spawn in a separate preap and now there are these uh fun pieces to play around with it then they will disappear so it's not unreasonable um the amount of pieces but they're there and of course if if you're not satisfied with the pieces here I made them kind of quickly you can just go back in uh to blender and tweak them I mean uh it's a symbol AS double clicking the file so excuse uh I excuse the video being so long but I think that uh it was a pretty uh fun thing to do and uh yeah just play around with it I hope you enjoyed the video and I'll see you in the next one game over