thanks for tuning in at brakus hello and welcome to this video on creating a multiplayer FPS in unity today we are going to take a look at creating a weapon manager script that will kind of take some different finality from the weapon shoot and move it into a separate script and this script is going to do stuff like weapon switching in the future for now we're just going to be equipping a single weapon at the beginning of the game so and it's also going to make it a lot easier for us to do weapon specific stuff like have different graphics for different weapons definitely we want different models but maybe also some shooting graphics stuff like bullet trails and muscle flashes and particle effects and stuff like that it's something that I want to implement in maybe the next video and this is going to make it a lot easier and more stable to do that kind of stuff so that yeah that's that's the central part of this video I also want to create rapidfiring so that we can have machinegun like weapons in the game good so let's just jump right into it so you can see here that I'm in the project and nothing has changed since the last video and I want to go in and select our player here and then find our player shoot script and double click that to open it up in monodevelop so we can kind of have a look at how we currently have things set up and of course it's visual studio that I want to open this in not monodevelop and you can see here that we have this idea of the player weapon which has some very simple information and then a player shoot which has the current weapon that we we have it has a reference to some weapon graphics which sits on the prefab and right at the beginning so it's part of the prefab and we have a weapon layer name and all of these things are something that I want to move out of this script and into a separate one and I think that we should actually just go ahead and create that script right away so let's take our player here and move him into the scene there we go so that we can kind of be configure how things are done first of all I want to go down camera under a weapon holder and take the scifi automatic and simply drag it maybe into a prefabs folder first drag it out of the prefab so we're sure that it loses its connection there take the scifi automatic and drag it in there then delete it from the scene and then reapply on the player here so that way we can simply spawn that into the weapon holder and that's going to work just fine next up that's why it's so important to have a weapon holder that acts as the base for all of our weapons so that we can simply spawn them in and we don't need to do it much repositioning and at least so we might have some kind of offset variable in the future we'll see how things pan out so we have this very empty player hierarchy here and that's definitely something that we want and let's just hit apply on that you can see we've lost our weapon T affects our connection there then I want to go and hit add component and type in weapon manager new script and hit create an ADD and now let's open this up in mondo in Visual Studio as well and this is going to be using during the engine networking and it's going to derive from a network behavior and this is because we want to check in the script whether or not we on the local client and we're going to be doing that later so the first functionality I want to create here is just in the start method I want to call some kind of function that will equip any kind of weapon so I'm going to add this idea of there may be a primary weapon or a start weapon a current weapon and yeah let's try and sketch this out so we have a serialized field meaning that this is not accessible we just we just want to be able to change this in the inspector and this is going to be a private player weapon and this is going to be our let's say primary weapon for now this could also be weapon one you can call it whatever you want and then we are going to have a private player weapon and this is not going to be a civilized field because don't want this to be visible or changeable in the inspector we only want this to be stored within the weapon manager clash class and this is going to be called our current weapon and I'm actually going to make that a noncapital C and a noncapital P as well good and in the start method I want to have a call another method which we are going to be making now which is a void equip weapon and it's going to take in a player weapon and we're just going to call this weapon you could call it new weapon or next weapon or whatever and it's simply going to say that current weapon equals weapon there we go so it's going to put whatever weapon we give it into the current weapon slot and up here I simply want to call equip weapon and I want to input our primary weapon so when we spawn we equip our primary weapon that makes kind of great sense and in here we of course going to be spawning some graphics but let's just wait with that second the first thing I want to do is kind of implement this into our player shoot script so here we can go ahead and delete this weapon reference here and actually that's just delete the serialized field and then still have a private player weapon and let's call this the current weapon because we want some kind of we want to play a shoot script to also know what our current weapon is and we could definitely change this using some kind of cold back but instead just to keep things a bit symbol and since this player weapon isn't exactly a huge class we're simply going to store it here and then set it in the update method that's going to be just fine and we can go ahead and delete our weapon graphics weapons and we can also take this a weapon layer name and move that into our weapon manager so above everything else we are going to have the weapon layer name and then back in our shoot scripts we now delete this and yeah that all looks just fine and good so in our update method we now simply want to say that our current weapon should be equal to and then we want a reference to our weapon manager so what we'll do here is we'll create a public void and this is going to be called get current weapon and of course it's not going to be a public void it's going to be a public player weapon and it's simply going to return our current weapon so this is simply a kind of utility method that will allow other scripts with the reference to this script to get the current weapon and this way we can in here if we just make sure to require the components will require the weapon manager so we'll make sure that it's always there on the object with this one and then in the start method we said or we create a reference so we need a variable here private weapon manager weapon manager this is all stuff we've done before just in a slightly different manner so weapon manager equals getcomponent weapon manager there we go and again we know it's here because we are requiring it up there and then here we can say current weapon equals weapon manager dot get current weapon there we go and it's going to retrieve that and that's perfect so this way we are always making sure to update on this variable up here and that's definitely something that is very important and I'm just going to put that there so we kind of yeah so it makes sense and then we can take our current weapon here and instead of weapon that range we do current weapon range and current weapon damage and this script should actually be working now with the other type of weapon here and we can actually test this out so if we go in here under the weapon manager and we have a private field here the weapon layer name that isn't assigned that's correct but that's okay because we're currently not instantiating any graphics so if we try this out now we should see that things are actually working however we won't see anything worth seeing so a primary weapon here we could maybe call this one simply a blaster we could give it a damage of maybe 20 and a range of 100 is going to be just fine let's give it a damage of five actually because we are going to make this fire pretty fast so we have the primary weapon there we can then we can hit apply on that we can delete the player here in go and hit play we can select land host and you can see we don't have any graphics but we have no error errors either and we can actually shoot even though it's it's not really showing in any kind of way and if we go and our player one and change the mode here to debug we can inspect our current weapon and you can see that it's set to blaster with the damage of five and a range of a hundred so that is actually working just as we wanted to good so next up let's actually spawn our weapon in and in order to do this we go under our weapon manager here where we say equip weapon and we want to fill in a different some different things here first off I think we should give our player weapon some kind of graphics so in here we'll make a public game object oops game object and we'll call this um yeah we'll call this the weapon graphics or maybe just just graphics and we'll also I'm just repositioning my mic here so there we go cool so we'll also need a public let's do that up here a public float and this is going to be the fire rate so we're going to be needing that in a second for now I'm going to default it to zero this way we can make sure that if it's zero it's a single fire weapon so you have to tap it every time and if it's above that that means it's automatic and therefore we can both just hold in the button and it will shoot at this rate of fire so that's all we need to do within the player weapon script today so now that we have this weapon graphics we can just go ahead and actually spawn the same so we are going to instantiate the weapon dot graphics and we are going to do this at the weapon holder the location so kind of the weapon slot and we want of course again a reference to this so I'm going to go serialized field and let's do private transform let's call this weapon holder then down here we say weapon holder that position and add weapon holder dot rotation there we go we also want a reference to this object so we are going to do game object and let's just call this weapon Ince intz for instance and set that equal to that and we'll also cast it into a game object of course then we can say weapon ins dot transform dot set parent we want to parent it to our weapon holder object so that it will follow our movement around and this is something that we want to do for all of the different clients however there are some clients that we want to or should I the local player we need to set his version of the weapon to a specific layer as we did in the player shoot so if we are if is local player well then we want to say weapon let's say weapon ins dot on layer equals layer mask dot name to layer and then the weapon layer name there we go so we change the layer correctly there only for the local player so I believe that this should be working now yeah everything looks correct over here and over here and there and we just need to make sure that we fill in all of the correct information so let's take our player drag it over here let's take the weapon holder go into camera weapon holder and drag that in that's very important and also under a primary weapon you can see we now have a fire rate we'll mess with that in a second but we also have some graphics and under there we want to drag our prefab so down on the graphics we want to drag in scifi automatic and let's hit apply on that let's delete this player object and see if it works so let's hit play land host and you can see that it spawns in on the object just as we wanted it to and if you think that the the object looks a bit weirdly positions that because we had a very wide angle no actually it does look a bit weird let's just see if that is working as we want it to so let's take our scifi oops let's hit play here let's go under land host let's find our player one camera weapon holder scifi automatic it's correct attacked as weapon but I actually don't really yeah so it's tagged correctly but I actually think that we should do something about this camera because the the gun seems very far away at the moment so let's just fix this very easily what we do is we take our player we find his camera then weapon camera inspected in the scene and instead of further changing the field of view I'm just going to move this camera forward a bit simply like yeah something like point two seven seven or we could take and and move the weapon hold it back a bit too so you can do that here let's try and hit apply on that let's try and delete our player let's see if it looks better that looks much much better if you ask me at least I think it makes the game feel a lot more like you're actually holding the gun and the gun has a proper distance to our player if so that's good and you can of course go ahead and move the camera further but I actually like this quite a lot so let's just stick with that setup for now and you can see that it's probably properly spawning things in and layering them correctly cool so the last actually let's go ahead and try this out on the network before we continue so I'm just going to build this to super client and it's building and it's building hopefully this works on the network I haven't tested it yet so let's see there we go and let's jump back into unity as well wait for it to rebuild the lining there there we go let's hit play on this and this client will act as our host then over here we'll hit land client and yes indeed it is working you can see both our players have guns and they can move around and it's syncing proper properly and yeah that actually looks super duper awesome so on that part of the video is kind of done that's all I wanted to do for the actual and weapon manager script now we can move on to the rapidfire so let's pop that back in there and maybe drag this down good so if we go back into Visual Studio under our player shoot rapid fire is something that you can do in many different ways some people like going into the update loop and then using time to time to determine when the next time to shoot is I much rather prefer to use kind of a button down to start a method that repeats with a certain interval and then using get button up to cancel that method from repeating and yeah that's kind of how I like to manage it I think it's a bit more stable but whatever you want to do so let's find our update loop here it is right here and you can see that we are currently just checking if we get a the button down called fire one well that's something we want to do if our rate of fire is equal to zero then that's all we want to do so we can go in here and say that if current weapon dot fire rate is equal to or let's say less than or equal to zero then all we want to do is take all of this code just this if statement here and put it in there so that's kind of all we want to happen there if it is not meaning if it's greater than zero what we want to do instead is we want to first of all again check if input get buttondown and we put in fire one we use the exact same button well then we want to invoke repeating good see whoops invoke repeating it's right here and the method we want to invoke is shoot and it doesn't matter that it's marked as client down here I believe that it should still work just fine then we give it a time to wait in seconds and that's just going to be zero we want to it to fire immediately and then we give it a repeat rate and that is of course going to be our current weapon dot fire rate and it's not just going to be the fire rate because this is kind of the number of seconds it waits until it repeats so if we want it to be a fire rate and not a fire delay we want to do 1 divided by the fire rate in order to get it not to be an actual rate and then we say if else if we didn't or else if we didn't get the buttondown fire one well then we want to check if we got buttonup fire 1 so meaning that when we have let go of the fire 1 button we want to say invoke cancel or cancel invoke it is and the invoke that we want to cancel is shoot and again make sure that you spell this correctly it won't throw an error at least not until this part of the code is cold so that should pretty much work and yeah should call the shoot method and in order for us to test whether or not this actually work we're going to go in and call a debug lock simply saying test let's let's let's say shoot shoot good exclamation mark and let's say that make sure you've saved all the scripts let's head back into unity here let's go under our player and start by checking if things still work if we leave the fire rate at 0 so that means that we should only be able to tap fire so let's go under host click and it says shoot and if I hold it in it only sets shoot once so I can click this as many times as I want and it's going to work fine now let's try and change this fire rate to let's say maybe 10 shots a second let's go in here host and if I only click once it only sets it once if I hold it down you can see it goes crazy and as soon as I let go it stops counting so this way I can shoot quickly by tapping or I can simply hold down the gun and it is going to fire like crazy so that is exactly what we wanted it to do in the next video we're going to make this look a lot more impressive by adding some cool gun effects I've messed around with enabling and disabling some particle systems in order to create a cool muscle flash with some smoke I have also I'm also looking into a cool way to do bullet trails and we're definitely also going to have some impact particles so everything is going to be really awesome I hope that you enjoyed this video and I'll see you in the next one