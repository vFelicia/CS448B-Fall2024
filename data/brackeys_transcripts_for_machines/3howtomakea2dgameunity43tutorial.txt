thanks for tuning in at brakus hello everyone welcome to the third video in going to d today we are going to be taking a look at making some code that will automatically adjust boundaries port colliders to fit the screen size of our users so aspect ratio and all of that we're going to take care of it and also we're gonna make our players spawn with a certain distance from the edges so as always I've opened up unity and we can just go ahead and get started so first off let's actually create an empty game object so go to game object create empty or press control shift and that's of course command shift and if you're on a Mac now let's rename this to underscore G and that's for a game master and I like to create a empty game object to handle all of the game setup all of the score like when when the player scores a point restarting and going to menus all that through AGM game object which is just empty that's just preference of mine and the reason why I've put an underscore here is so that it will stay on top of the other objects in the hierarchy so first off let's zero out the position that's just general good practice and let's hit new scripts and let's call this game set up so we can handle all of our set up logic in here and let's hit create an ADD doubleclick it and it will open up in mono develop so let's go ahead and get started here let me zoom in so you can see this a little better and actually want we want this code for performance reason to only be run in the start function but just to show you how cool this actually is the calculations we're doing here I'm just gonna do it in the function update and then change it later you can do the same we could detect our camera we're gonna need our camera we could detect that once in the function start by searching for it but instead let's just create a variable that's better on the computer so let's call this not seen kam actually that's just called this main cam and it's gonna be a type of camera then down here we're gonna type var top wall and this is gonna store our top box Collider which we want to access later and also we're gonna store the bottom wall which is also gonna be a type box Collider 2d and the left wall let's do that one and of course you can exclude any of these if you want if you don't want it in your game it really depends on the game you're making so here right wall and then box Collider 2d ok great and now let's also make some variables for the two players when we want to access those so play one of type transform and player 2 also of type trance form great so in the function update let's make some space here first thing we want to do is we want to move each wall to its edge location so we're just gonna go ahead and do that now first off let's access the top wall dot size so we can change the size of the collider and one thing you should notice is that I will just do the top wall because there's a lot of typing and random numbers and such so I'll just do the top wall and then I'll copy pasted the other walls and I'll of course leave them on the screen so you can fill in the numbers yourself but you can also download the script from Brett he's calm that's way easier and I will of course explain everything so Tomball dot size equals new vector2 which is basically just storage to float numbers the first of which is going to be our screen to world point and basically what this means is actually let me just fill this out first so it's gonna have something here it's gonna have something there and then it's gonna be comma 1 F and then round it off but and we if we just say okay we want this to be basically as long as the width of the screen you would normally think let's just do a screen that with then so it will be the size of the screen that width and then 1f but the problem is that screened out with returns the width in pixels and we want this to be in unit so basically we would have a Collider that all the sudden was 1920 of you on Full HD units long so it would scale all the way out here and that's not really something we want so an an easy workaround is to use screen to world point and we can do this by accessing our camera and that will automatically do this calculation for us so let's type main can touch screen to world point I don't know why monodevelop didn't suggested there but it's completely fine to do it and then we're gonna open up a bracket and inside this one we're gonna type new vector3 and then open up another bracket and here we're gonna type screen that with just as we would did before and then we're gonna time it by 2 to f4 float and then we're just gonna do comma null F and 0 F against so basically we only need this number but it needs to be a vector 3 because that's how screen to world point works but we only need this number so that's the x value so we are just gonna do dot X and that also means that the 0 F is here they don't really matter the amount of the hosts own really so I just saw I was missing a parenthesis there so just close up the parentheses and then do dot X and then comma 1f cool and then we're gonna do the center so top wall dead center equals new vector to open up a parenthesis and we want this to be 0 F comma because we want this to be centered in the width and then on the height we again want to access the screen height so men cam touch screen to world points and this is going to be again a new vector3 and it's gonna be 0 f comma screen oops screen dud height comma 0 F close up the parentheses dude why because we only want the the screen dot height and it's X Y and then Z so dud Y and then plus it by 0.5 F so right now you might be thinking okay what's going on here what is what and it can be really hard to keep track off but basically we are setting the center to be 0 on the xaxis so sorrell horizontally and vertically we are setting it to be just by the edge but the reason why we are saying plus 0.5 is that it will be at the edge but from the center of the collider so we're just plussing with 0.5 because that's half the width of the Collider or the height of the collider and so it will only just be outside the screen so now that this is working let's just see if it is so save it out and hopefully we don't get any errors so we don't and let's drag in the main camera and now it's time to drag in the walls and we need to create those first so let's just do ctrl shift and to create an empty game object again command shift and if you're on a Mac and let's call this top wall there hit the zero zero zero and the position that's important make sure all of your objects doing this are at zero zero zero drag it under the GM so if something's not working that's probably why and then let's hit add component physics 2d box Collider 2d and there we go and you don't need to send said any of these values because the script will do that for us but just make sure that it's trigger is not enabled now we can go ahead and duplicate this and rename it to bottom wall duplicate it again whoops that didn't register bottom wall duplicate it again that's ctrl D command D on Mac left wall and at last the right wall there now select the GM object and we can drag in first off the top wall then the bottom wall we could also store these in an array which is basically just a list but as long as it's a stationary number like this I wouldn't worry about it and then a right wall cool so now when we go ahead and play our game we can see I've turned on gizmos here just so you can see what's going on these are the ones that are not set up yet so this is the left wall right wall and bottom wall but up here we can just see barely see a line that is green so that's the collider and if we go into the scene view we can see that it's up here once we have the GM selected we can see it up here and if we then control click on the main camera we can see that it aligns just with the edge of the camera and basically you have to watch out a little bit when checking if it's working this way because if you just switch between the scene and game view it mice unity might confuse things especially with the left and right wall so what you want to do is you just want drag the game out so untuck it then hit play and now and then hopefully it will show correctly yeah see now it's it's all the sudden much longer and the main camera is only here so the unity doesn't know exactly how to display this but I promise you it does work I've tested aloud in many resolutions and the collider always snaps the math is right so cold this is working and the yeah let's just go in and add the other parts to this so that's go ahead and add the bottom wall the left wall and the wide wall and I'm just gonna copy this in here because it's this is a lot of values it's the exact same code just with by switching around on a few numbers and and it works for them all so go ahead and take a look at this now pause the video and write it down or go to Broca's calm and there you can download it as part of the assets pack so cool let's continue I'm just gonna assume you've written all of this down unless rounded off by making the code for our player so let me just quickly find my reference script here so there okay cool so I have it on my on the money to announce just so I don't make any errors awesome so let's first off access all player one and say dot position because it's his position we want to change and it's basically only the xaxis so just say dot X now we're gonna say that this is going to be equal to the main cam and then again our favorite functions green point to screen to world point there it is and we're gonna do new vector3 and we want this to be you can you can basically make a variable for this but I'm just gonna set it to a fixed number I'd say 75 is pretty good and this is just the amount of pixels you want the the player to be from the the edge so I would say 75 pixels is just enough and then come as 0f come as 0f and round off the two parentheses and say dot X because that's the value we want and now we can just round it off with a semicolon and let's just make the other player two so player zero two dot that x equals main kam dot screen to world point and open up new vector3 and in here we're gonna do screen dot width minus 75 F so basically if we imagine that the the anchor crunch starts out here over here on the left hand side we are moving it with the screened up with over to the other side and then subtracting 75 so it will be about here so now that we have subtracted the 75 we can just say 0 F 0 F close off the 2 and say dot X because that's the value we want and rounded off so now when we hit save everything should be working we can head into unity and we have errors yay let's see what does s have I'd said oh I think I've typed something wrong yeah these are seen cam I want to change these two main cam that's just I called them seen came for some reason the last time I desist so main campaign campaign cam minkum there we go now we can go ahead and hit play and some more errors okay yeah we need to assign the players of course so now we can head over and select our GM object we can drag in our player that's renamed this guide to player zero one and we can go ahead and duplicate him rename him to zero two and let's just drag him over here just to position him about where he's gonna be I mean our script is gonna do this for us but just so we know like how it would would go and then let's change his controls from move up on W to the right to using the arrow key so let's see if we can find the arrow key so up arrow for up and move down that's gonna be down arrow let's see if we can find it here that is down arrow so now they have different key bindings what would have actually been a good idea was to make a prefab out of those yeah okay what the hell let's just do it so let's drag this guy down player one duplicate him move him over player two and change the change the key bindings here yeah I'm sorry it's a great idea to make prefab out of these kind of things because it's just gonna save you trouble later on when you've made a modification and all the sudden you realize that you are you're the players still way back so move down and now we are ready to assign them to the GM so player one drag that in there play it to dragging them there hit play and now when we go into the scene we can see the beautiful green lines here we can select it and we can see it's made a triangle around and also you will notice that our player has now snapped to the position and the cool thing is that if we now resize the game view it will change in real time and adjust itself accordingly and mmm and this is just a fancy feature too how it's working we can still move up and down moving out up and down with the other player so all of this is moving or working and what we can do now is we can simply go back to the script and change this to function stats so that the code will only be called once because there's really no reason to to update this unless you know the screen size would change and I don't know why it would do that so that was basically it for this video thank you for watching and I'll see you in the next one