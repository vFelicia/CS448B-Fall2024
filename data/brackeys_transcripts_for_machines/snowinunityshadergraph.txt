in this video we'll have a look at how to create a symbol snow shader in unity using shaded graph first we'll look at applying snow to a single object and then expand the shader to work well when applied to an entire environment and then you should have something that looks like this the assets that we're going to be using today are from the deficits Mayan temple pack they'll of course be a link to where you can get them in the description but before things get too cold this video is sponsored by XML layout XML layout is a really cool unity plugin that allows you to develop professional fully functional user interfaces and UI elements using XML it is awesome for very easily creating great UIs in a very smart and structured way it supports all standard unity UI elements as well as allowing you to add custom elements attributes and animations also it supports most platforms and is in general very well documented with a lot of examples which makes it very easy to get started with and of course XML in general is just very fun and easy to work with so before making the UI for your next game I definitely recommend you check out xml layout you can of course do so by clicking the link in the description alright put on your beanies and gloves and let's make some snow so first of all you want to make sure that you're using unity 2019 point 1.2 or later and that your project is set up to use the lightweight render pipeline however this effect should also work for HDR P so as you can see I have a very simple scene here with a skull pile object that is currently just using a default lit shader let's go ahead and change that by creating our own so let's go to the project hit create let's go shader let's go to PBR graph and let's create a snow shader let's doubleclick on the shader to open it up in shader graph now the first thing that we want to add to our shader is a texture because as most objects ossicles is of course using a base texture so let's go to a black board here let's add a new texture 2d and let's just call it our base map let's take this and drag it in and in order to hook this up to the albedo channel of our PBR master node we first need to connect it to a sample texture node which is going to convert it from a texture type to our TPA which we can then plug into our albedo as you can see not much happens in preview that's because we still need to choose a texture in fact let's go ahead and change from this default sphere here to a custom mesh and I'm just gonna search for our skull pile here this way we can see what everything looks like from within shader graph pretty cool so now I'm gonna go over here and choose a texture and a skull pile is part of a larger texture ant list but it is there even though it looks a bit confusing so I'm gonna select that one and as you can see our skulls now look much nicer I'm also just gonna set the smoothness to zero and that's pretty much it for our base setup of course encourage you to add properties for metallic smoothness normal Maps and so on to fit your needs but for now this should be fine so to create our snow effect we first need to understand what a normal vector is a normal vector is a vector that is perpendicular to the tangent plane of the surface at a certain point now this might sound really scary but it basically just means that it's a vector that points away from the surface so say we have a sphere where we only want to apply a snow to the top well this sphere has a bunch of normal vectors that all point away from the model that we can use to do this we first define a snow direction this is a vector that points in the direction we want our snow to come from in this case it's just pointing straight up we then use the dot product between the direction and the normal vector to figure out how much snow we should place on different parts of the object take for example the normal vector at the top of the model this is parallel with the direction vector and because the dot product of two parallel vectors is 1 we know that we should place lots of snow here in the case of the normal vector to the right however this is perpendicular to the direction vector and because the dot product of two perpendicular vectors is zero we know that we shouldn't place any snow here in fact all the normal vectors in between these two are going to give us values between zero and one based on how close they are to the direction vector which is exactly what we need now it's time to create some snow so let's go ahead and create a normal vector node again this is going to get the normal vectors which we can then dot together so we'll add it into a dot product node with the direction of our snow in my case I just wanted to fall from the top as snow normally does so I'm going to go ahead and create a vector3 over here in our blackboard I'm gonna call it snow direction I'm just gonna default the Y here to 1 I'm gonna drag it in and plug that into an Todd product node we then want to make sure that we are clamping our dot product so that it doesn't go below 0 or above 1 so let's drag that into a clamp node here to go between 0 and 1 and now this should make sure that our snow will only fall from the top however we of course still need to create our snow so let's just move this down and for a nice and simple snow effect let's use the simple noise node as you can see this creates a bunch of tiny grains which I think definitely looks like snow I'm just gonna set this to a hundred for now on this scale and I'm also going to plug it into a remap node and this is just going to allow me to change this from going from 0 to 1 to go from something like 0.5 to 1 just so that our snow doesn't get as dark as the default simple noise I think this looks quite a bit like snow and from here we can simply multiply it together with the result of our dot product calculation here and this should give us our snow layer which we can simply add on top of our default texture so if we just go ahead and move all this stuff over and do the same thing here we can simply drag down here into an add node and take the output of our snow and plug that in as well and then take the result of that into the albedo channel and voila right away you can see that we now have snow on our skull pile I'm gonna go ahead and increase the scale quite a bit here and as you can see we can now see the grains of the noise as well and if we try and save this asset and if we go back into unity we can find the material for our skull pile here as you can see it's just a simple litter with a base map input and that's pretty much it so let's just and change the shader here to shaded graphs snow and that might be a bit too much on this snow so let's go into our snow shader and it's at an opacity slider that will allow us to control the transparency of our snow so doing that is super simple we just want to take the output of our dot product calculation and multiplied so we'll drag in here and create a multiply node together with some kind of value so here we can control the intensity if I output this here you can see that we can now control the intensity of our snow and let's just create a value for this so that's create a vector one let's call it snow opacity and it's actually make this a slider that goes between zero and one and let's just default it to something like point five now let's take this and hook it up to a multiply node and that's pretty much all we needed to do I'm just gonna organize notes a bit here and now if we save this asset jump back into unity and like a skull pile we can now adjust the opacity of our snow which I think looks really cool in fact we can also adjust this no direction in any way that we'd like if we want it to come from the side here I think that definitely gives a pretty cool look in fact we can even go ahead and increase these direction values above one to give another look you can see that it gives us more snow and it also hardens up the edge from the snow so you can definitely adjust that to your liking and that's pretty much how you can get snow working really really simply on a prairie object basis however one thing that is really cool is that we can modify this shader to really easily be a pliable on an entire environment of course if you have a bunch of single objects like this one you could go ahead and change the shader for each and every one of them however it for something like the Mayan temple pack we have a huge amount of objects in here now in this case they only use a few materials because a lot of them are packed into the same texture atlas and so they can share the same material however you could have hundreds if not thousands of materials here so it would be really annoying to go in and having to adjust a bunch of settings for each one having to go into the shady here and create a parameter for the scale of the symbol noise because that's going to depend on the UV maps of your object and so on so let's go ahead and add a bit on to the shader in order for the snow to be relative to our word position instead of the UVs of our object so to do this we of course want to start with a position node in fact we want to start with our vertices position in world space we can then take this position and split it up into its different coordinates so we have the X the Y and the Z and we just want to focus on the X and the Z here because if we have a look in unity we want us node to be falling from the top so if we want to overlay a huge snow texture that is shared by all of the objects we want to do it from a topdown view in other words we want to create a UV plane that uses our X and our Z and completely ignore our Y so let's go ahead and take our X here let's plug it into a vector tube and we'll also take our Z and plug that into the other part of our vector and this is now our UVs so from here we can go into our symbol noise and by now we probably want to reduce the scale of this a bit because that scale is pretty crazy let's do something like 500 and as you can see it doesn't change much in our preview but our snow is now relative to a world position instead of the UVs of our object and if we save this and go into unity and select some of the materials that are making up our environment here I'm gonna select all the ones that are non transparent we'll talk about transparency in a bit then for this shader that's changed this two shaded graphs snow and as you can see right away we have a snowy level that definitely thinks that we can do to make this look better but we're pretty much halfway there we have snow on all of the surfaces pointing up in fact we have that on all of the tiny services and something like the wall here as well and we have this coal grain overlay that is shared by all of the objects so I think overall that is looking pretty great already you can adjust stuff like the opacity or thus no direction but I'm actually pretty happy with it as is however one thing that is a bit unrealistic with the way that our snow is set up right now is the fact that everything is covered equally in the snow and that doesn't really happen snow gets thrown around by wind and just as a rule of thumb whenever you're working with something organic that Nature has created the eye expects to see some variance so let's go ahead and make sure that our snow isn't distributed completely equally in fact we can do this really easily by going into our snow shader and instead of just overlaying a simple noise let's go ahead and create another noise function here we'll use a gradient noise and this one we want to scale down quite a lot I'm gonna scale it down to something like 0.5 I'm gonna use these same UVs for this because we want it to be overlaid in the same way and I'm then going to take the output of this and multiply together with the result of our snow so instead of just going directly down to a multiply node here let's go ahead and move this thing out a bit let's plug this into a multiply node and multiply that together with the result of our symbol noise and then take the result of that into our multiply node down here and what this should do this won't really be visible in the preview but what this should do if we save this asset and go into unity is based on this gradient noise create areas that are more snowy than others and I think right away that gives a much more realistic look I think this effect is a bit too exaggerated at the moment and you can definitely try and play around with the scale of the gradient noise to make this more refined but if we just go ahead and plug this right through a remap node just in order to control how much of an impact this effect has so let's change it from going from 0 to 1 to go to something like 0.3 to 1 and plug that into our multiply and maybe change the scale to something like point 3 if we then say that asset and go back into unity I think we have a really nice looking organic snow effect super super cool one thing that I also want to do is make sure that if we go out and change or snow direction here say we make it come kinda from the side that completely vertical faces aren't affected we still want to be able to kind of control the direction of our snow but because of the way that we've set up our snow this doesn't look very good in fact that's created so that the more angle as surface has the less it's affected by snow that should give a fairly realistic look so to do this let's just head back into shader graph and now with a new knowledge of the dot product you can in fact just go from the normal vector into a dot product and we want to dot this with a vector going straight up so zero one zero and we can just use that to multiply together with our snow so let's just go ahead and multiply that I'm just gonna collapse these with the output of our snow and take the result of that and multiply it with our other dot product here and that should now result if we save this asset in an effect where the more of an angle the surface has the less its affected by snow and as you can see the vertical faces here are completely unaffected really really cool now I'm just gonna go in here and set this no Direction back in this case I just wanted to come from the top but now this should be safe and they're pretty good no matter what you want to do with this no direction and that's pretty much it for this effect here's the graph in it's entirely again I definitely encourage you to add stuff for normal Maps metallic Ness smoothness and all that stuff and of course one thing that this shaded currently doesn't support is transparent surfaces but if you want to create a variant on the shader that supports that all we need to do is simply duplicate it call this one snow transparent double click it and in our PBR master node we want to change the surface type to transparent I mean then simply take the Alpha of our sample texture node and plug that into the Alpha of our PBR master if we save that go into unity and select this material here this is for the trees and all the different kinds of foliage that are using transparent surfaces we then change this over to our shader graphs no transparent for the base map here I'm going to change to the correct one and as you can see we now have snow on the leaves of the tree here and transparency is working just fine so it's actually that easy really cool of course I also encourage you to change around some settings for your environment in order to make it look more snow like in my case yeah I'm gonna go to the main camera and make the background brighter that definitely seems more like a snow landscape I'm also going to go to lighting and just bump up the ambient intensity and there are of course a million different tricks like this that you can do to make your environment feel more like a winter scene but I think for just a single shader this is a really cool and easy to use effect and I really like the fact that we now just have a slider for no snow and lots of snow yay that's pretty much it for this video if you enjoyed it make sure to subscribe and bring that notification bell so you don't miss the next one also don't forget to check out xml layout before creating your next you I simply get started by clicking the link in the description and that thanks for watching and I will see you in the next video also special thing hey do you wanna do it yeah you should do it alright thanks all of the patreon supporters who donated in April and a special thanks to infinity PBR Sybok mommy Dennis Sullivan Kris Shane Cleveland by basil basil Python Faisal Merrifield Lincoln Chang Luna set Ronin Daniel sanic Constantinus clintus Naoki Misaki Gregory Pierce Rob fern dr. poon moon Erasmus Kiril Swedish ki Tim I've hauled the bark and Tyson Knopf ski you guys know you know what I can't I'm not authorized for that you have to do that you guys Rock