lately unity has been making some huge improvements in terms of performance and writing optimized multithreaded code and at the center of these changes is the new entity component system but before we get into what ECS is we need to know why it's useful also this video is sponsored by unity so using ECS has a lot of benefits it allows us to write extremely performing code we can code in a way that is easier to read it makes it easier to reuse code and with ECS we can take advantage of the new burst compiler for high performance csharp plus it's integrated nicely with the csharp job system so using easy s not only allows us to write extremely performing code but it's also a much better way to structure our data now that sounds great but what is easy s easy s is basically a new way of writing code in unity with easy as we are moving from traditional objectoriented programming to something called data oriented design so far when using unity pretty much everything has been based around game objects and mono behaviors say for example we wanted to create a player we would make a game object and name it player and on this object we would place monobehaviour components to give the player functionality these components would take care of stuff like rendering physics and movement with ECS we are taking a different approach by splitting our game into three parts entities components and systems entities are used to group together components they're much like traditional game objects but way lighter components are just containers for data unlike traditional amount of behaviors these components don't have any logic in them instead we use systems systems define component based behavior what this means is that a system is responsible for operating on all entities with a specific set of components these are the only objects that actually contain any logic so now if we wanted to create a player we would make an entity and on this entity we would place components however the only job of these components is to store data about a player so currently it wouldn't do anything to change this we create systems we could for example create a render system to render all in with the render component and a physics system to apply physics to all entities with the physics component of course the ECS package already has several of these basic systems ready to use so that is the general explanation let's see how we can apply this in praxis first we need to install EC s ec s is currently available as a preview package to get it we first need to install you in the 2018 point 1 or later we can then create a new project once it's up and running we can go to edit project settings player open up the other settings tab and under configuration will change the scripting runtime version to.net for X this will require a quick restart after that we can open our project folder navigate to packages and open the manifest.json file here we need to add a few lines I'll make sure to include a link to a text file in the description that you can copy from we can then save the file and unity should start loading in the ECS package when it's done we can go to window and open up the package manager and we should now see the entities package installed here now say we want to rotate an object over time first let's create a cube and let's create a new script on this cube called rotator if we open up the script we can see that as expected this automatically creates a rotated class that derives from monobehaviour with the old system we could then use an update method to change the rotation of the transform component and maybe create a variable to control the speed by running this code all objects with this script attached will rotate according to our speed variable and if we take a second to analyze the code we can actually see that the monobehaviour contains both the data which in this case is our speed variable and the behavior where we update the rotation now this might look fine on the surface but it's actually not a very performant way of doing things and it also makes it a bit hard to distinguish what is going on to avoid this with ECS we separate the data from the behavior and there are currently two ways to do this the first is using pure ECS this system is completely separate from the old way of coding with pure yes we stopped using game objects and mana behaviors all together the second way is using hybrid ecs to make it easier to transition from the old system to ecs unity has created a way to combine the two now this won't unlock the full performance benefits of pure ECS but it's great way to start converting your scripts to easy s and learning this new way of thinking the cool thing is that by using hybrid ecs we can continue using mana behaviors for storing data so currently we have some scripts sitting on different objects each script has some data and some behavior now with hybrid ECS we still keep a script on each object that has the data we need but we use a system to handle the behavior in other words we can use a class called the component system to update the rotation of all our objects now if this all sounds a bit overwhelming that's totally fine but let's try to take it from the top like before we first create a class deriving from monobehaviour but this time we only put our variable here then for our behavior we create a new class and derive it from component system we can name this class anything we want here we'll just name it rotator system also whenever we're working with ECS we need to include the unity entities namespace so now we've separated our behavior and data into two different classes but our behavior class is currently empty the next step is to tell our component system what components it should operate on here we're filtering all of our objects to look for those with a certain set of components in our case that is our rotator because we need the speed variable as well as the transform component so that we can change its rotation to do this we create a struct let's name it components and in here we create two public variables one for the rotator and one for the transform and now we're ready to make the object rotate for that we'll need an update method note that when using update inside of a component system we use the override and protected keywords and the name of the function must be on update instead of just update just like the regular update function on update will run on the component system every frame now we need to search for all the objects that we want to rotate to do this we use the get entities function and at this point you might be thinking I thought entities and game objects with two different things and they are but unity has made a handy component that can be used to convert a game object into an entity if we go to the editor and open up the entity debugger window we can see that the entity manager currently has no entities however if we then add a game object entity component to our cube it immediately shows up in our update method we can then use get entities to search for all entities with a matching set of components in our case we want to search for entities that have both a rotator and transform component we've already defined this with a struct and so we can simply feed that in we can then iterate over all the entities using a for each loop we'll call each entity efore short and now inside our loop we can update the rotation to access the transform of each entity we use edit transform and to access the rotator we use a rotator and that should actually work just fine if we run the game our objects rotate accordingly and we can easily adjust the rotation speed just like before and that's already an optimization that we can make because our Delta time variable is the same for all the objects we can move this out of our for each loop and keep it in a local variable to get better performance if you run the game once more everything is still working and if we go to the entity debugger we can actually see our rotators system and even cooler we can see the components it operates on as well as the entities in it awesome so that is how you can get started using ECS in unity again what we're using here is hybrid ECS if you want to learn more about pure ACS and the performance benefits that come with it I'll make sure to include a link for that in the description on that thanks for watching and I will see you in the next video thanks to all the awesome patreon supporters who donated in May and a special thanks to Michael Neely twins infants giver token ed Murphy Oh infinity PPR cheetah 3d Alex and the player Sybok mummy dark Eames Kirk Fresnel Murphy Daniel Sullivan thanks a long Superman great John Burkhart Lila set tennis sullivan jayson the Tito car Jackson for Brizzy Alex akatsuki Bruins cat Matthew Knight cool sweater ski James P Gregory Pierce James Rogers Naoki Misaki Robert pond now a tweet Tim of Hoda Park Jimin Adrienne has Nina and Erasmus you guys Rock