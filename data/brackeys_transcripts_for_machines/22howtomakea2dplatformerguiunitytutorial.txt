you can see that now we've reached the final Point uh which is doing the actual programming so let's hit add component and uh let's crave a wave UI script let's H create an ad and we could implement this directly into the wave spawner but I like the idea of uh keeping these separate so let's double click that to open it up in uh Visual Studio and uh I'm simply going to removing the uh using system. collections namespace and in instead be using uh Unity engine. UI and uh the first thing that we want to be creating here is a uh serialized field because this is going to be private and uh we want a reference to the wave spawner because uh the wave spawner keeps track of its current state uh the countdown timer and all that and we want to have access to those so we need a reference to the wave spawner and we're just going to name this uh spawner and we also need some kind serialized field we also need to uh have a reference to our animator so this is going to be the of type animator and uh let's just call this wave animator and uh in the start method we can check if uh these are actually referenced actually we need some more so let's just do a serialized field we need a text object that stores our uh wave countdown text and a serialized field that stores or a text object that stores a wave count text or a wave number text so cool that's all of the references that we're going to be needing I think and now in the method we can simply uh add some checks to make sure that uh these are actually uh filled in so if spawner is equal to null then we want to throw an error saying that uh no spawner referenced and then we can simply disable the component and we want to do this for all of the variables so let's just copy that if statement a bunch of times and first for the wave animator wave animator wave animator then for the uh wave countdown text and finally the wave count text cool and uh then in the update method uh we want to have some kind of logic that will um that will kind of do things depending on what state the wave spawner is in and therefore we need uh to have access to the state of the wave spawner but with if we go ahead and look at the wave spawner as is you can see that the spawn state is currently private we have this enum that uh can go uh between spawning waiting and Counting uh and that's stored in in state but it's private so instead of just making this public and available uh fully available to the script I want to create a getter for this because I don't want us to be able to change the spawn State that's something that uh the wave spawner should have full authority over uh but I want us to actually access the spawn state so in order to do this uh I simply want to keep that private and then create a public spawn State and uh we'll just name this state with a capital S and uh then open up some curly brackets and create a getter that will return the state and that's all we need to do also I want to maybe move this PO no let's just keep that in here that's fine never mind good so uh now that we have that I want to do the same with the wave countdown because that's also something that we want access to later uh when we change we're changing the uh text so I want to create a a public float wave countdown with a capital W and uh this is going to have a getter that returns wave countdown and finally for the uh next wave uh let's just wait with that I think uh because I don't remember the index of this um okay let's just create the getter now and then we'll change it so for now we'll simply say that public float or public integer uh next wave is going to get next or return next wave we might need to do some kind of subtraction here or addition I don't know so we'll find out so for now we can then go into uh wave UI and we can create a switch statement that will do different stuff depending on the state so switch depending on uh the spawn state so that means that we can get the uh spawner do state and uh the different cases that we want to have is case uh case one where uh spawner do state is equal to wave spawner dos spawn state. counting so we are currently counting in which case we will do the following so then we will call some kind of method that will say that we are counting so let's make that method and it's going to be a void and then it's going to be called update countdown UI and in here for now we're simply going to be saying debug.log counting and uh we can then call this method in here and break because we don't want to fall through to the other layers then case wave spawner do spawn state do spawning and in here we want to update the um incoming UI and break or maybe we should call this despawning UI yeah we should probably do that and maybe we should yeah let's rename this to update counting UI I think that's better cool and let's create this method now so let's just duplicate this rename it to update spawning UI and this should should say spawning so we're calling different methods depending on the state and uh that's all we are going to do for now let's just see if that is indeed working so let's go into Unity we have no errors but we should have a bunch of slots and let's just fill these in so the animator is going to go there the GM object is going to go there because that has the wave spawner the wave countdown text is going to go there and the wave count text is going to go there cool so now when we hit play we should see down here that it says counting Counting counting Counting and when we're done it should say spawning spawning spawning and it does so that's perfect and uh now we need to kind of trigger uh the animation so inside our update counting UI we are going to check if uh this we basically we're only going to trigger uh the counting animation once and therefore we need to check if we've just switched to this state so we'll do that that by storing the previous state and comparing it to the current state so let's create a private variable and this is going to be a uh wave spawner do spawn State and uh we are just going to call this previous state and we don't want to default it to anything and then in the update method after we do our switch statement we want to set previous state equal to uh uh spawner do state and then in here we can simply say that if previous state state is not equal to spawner dot uh or if if the previous state is not equal to spawn state. Counting so wave spawner spawn state. counting so meaning that we've just switched to this state well uh then we want to debug.log that we are counting and uh we want to do the same down here but now with the spawning State and we want to debug.log spawning instead cool so if we were to save that and state is not a method there we go we can now hit play and we should see that uh the state only shows Once so that's only called once and now we're spawning so that's only called once and we can of course go ahead and uh kill off these opponents and you can see that it goes back to Counting there so that's super awesome uh and what we can can do with this is we can trigger the animation correctly so now we can go in here and we can say that we want our wave spawner or our wave animator uh to trigger the animation by setting the bull uh with the name and I remember yeah wave countdown to true because we're currently counting down and uh we want to set wave animator do setp we want to set the uh wave incoming to false because we can have multiple States at once so we'll just disable that and enable this and uh we want to do the same thing uh down here but reversed we'll just duplicate those change uh the order change that to true and this to false perfect so I think that will trigger the animation correctly and uh let's check if it will we're counting down and it goes and says What wave is currently incoming and we can kill off the opponents here responding two one and uh the system will keep going even though we are respawning and you can see that that's working so so now all we need to do is simply update the text so in here we'll simply uh say depending no matter if we've uh just gone to the state or we've um if this is not the first time uh well we're still going to be updating the text so we want to say that uh wave countdown text. text equals and then we want to get the uh spawner Dot and uh the it is wave countdown yep and uh we can't just set it equal to this first of all this is a float so it's going to have decimal points which is not something we want to display and also uh we need to convert it into a string so first off we can simply trunk Cate this uh by converting it into an integer which means that we will just get rid of any decimals it's not going to round it up it's just going to delete the decimals and then we can convert it into a string by uh simply enclosing these in some paren es and hitting do to string and calling this as a method so that will uh make it into a string and down here and we don't want to uh and we only want to do this once so we can do it in here we want to uh set the wave count text. text equal to uh spawner do wave next wave let's close that off and uh why is this okay we need to of course convert this into a string also do two string let's save that and uh now we might see again that the uh wave that we spawning is off but you can see that the countdown is fine and then it says wave zero incoming and we probably want to increment that by uh one that makes most sense to users I think so now it says wave one incoming and that's perfect so we simply need to increase that by one and uh we can do that in the return statement or in here but i s I think that since this is a get only uh we'll have we'll increment it uh by one in here that makes sense so we'll return uh next wave + one and uh if we now hit play and let's do this in full screen because I'm fairly certain that this is going to be working and also let's uh simply comment out the d. log statement there and there and uh let's go into Unity maximize on play and hit play and uh there we go it's counting down it's saying that wave one is incoming and there the enemies are and we can go ahead and just shoot them it's going to start counting down again and waving coming so that's perfect that's exactly what we wanted to do and uh one thing that you will notice here is that the countdown and uh the text up here are not following each other and the reason why is we simply need to go under the UI overlay uh wave UI here and find the wave countdown text and set the Anchor Point to the top here so that will make sure that these will uh follow each other I'm fairly certain at least so let's just check that that and that that needs to be right there and I think that is all and you can see that now they're following cool so that was basically all we had to do let's disable that disable that and let's just enjoy this at final time shall we so clear the console open up the game in full screen H play and now you can see that they're in the same place perfect so that was basically all for this video I hope you enjoyed it I think our uh game is finally starting to come together here and uh be playable and now you can go ahead and play around with uh tweaking stats on the different enemies making some bigger and some smaller enemies uh so that they get harder and harder um changing their uh damage amount and their speed uh there's a lot of stuff you can do with this of course also the hills the mount so I will definitely I would definitely recommend that you play around with these mechanics see what you can get out of them maybe create multiple enemies and uh yeah that's basically all I hope you enjoyed it and I'll see you in the next video