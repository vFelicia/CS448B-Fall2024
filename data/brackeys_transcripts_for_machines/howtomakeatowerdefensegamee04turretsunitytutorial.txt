thanks for tuning in at brakus hello everyone and welcome to video number four on creating a tower defense game in unity today we are going to be adding some cool turrets to our game we're going to be importing a nice charred model we are going to be adding a script that will search for the nearest enemy and then lock onto that target so that's basically the plan for today and then in the next video we can focus on shooting so the first thing that you want to do is go ahead and download the tower defense assets pack I'm going to have a link in the description and it's completely free for you to download of course and you can also use your your own model and there's both the blender version and an FBX but you can see that I have two different models in here and that's basically because I wanted you to be able to choose the one that you like so the first one here is just a very simple turret and the second one is the same turret but but with on some front panels and you can either choose one over the other or you can choose to include both of them and then have them in some kind of upgrade system so that one can be upgraded to with the other basically if you have blender installed I recommend using the blender files this way you can easily edit them within unity if not then I recommend using the FBX files I'm going to be using the FBX file so I'm just just going to take the turret here drag that into unity and it's a good idea here to make some kind of imports folder I've already gone ahead and done that so simply rightclick create a mem folder and then simply drag the model into that unity we'll quickly import it and we're going to set up some settings so the first thing here is I want to change my scale factor to 3 I want to calculate um I want to calculate normals and I want to do that with a smoothing angle of about 38 that should look fine and then we are going to make sure that we import the materials then go apply go on the rig and select none' so when all that is set up you can see that you have the chart and then you have a materials folder and in here we have three different materials we're going to set this up now so to preview these we should take our turd here and drag it into a hierarchy let then let's hit F to focus in on it and reset the transform if it isn't already and then we can boost this up by 0.5 and you will see that the pivot point is correctly set at the bottom of this turret make sure up here that you're set to pivot and to local this way we can make sure that everything is oriented correctly let's expand the start now and you can see it split up into two parts the first one here which we are going to call the head and the second one here which we are going to call the base and the pivot for these two aren't exactly well placed so we are going to go in and change that in just a second you can see that it has three materials on it and one of it has only two so let's go ahead and rename these materials so this right here is going to be the turret underscore barrels the other one is going to be the turret underscore our main because that's going to be the main colored material and then our maybe a complementary or a secondary color here and first off if we select the chart main go ahead and change the albedo to something a bit darker and also I want to make this a bit metallic and out just a tiny bit smooth actually a lot metallic and a bit of smoothness in there and then let's ah dial this down to make it kind of dark I think this here is actually pretty good I want it to be somewhat grey and you can also preview what it looks like down here okay so I kind of like the look of this material so we're just going to continue with that for now and then let's take the secondary one and adjust the albedo Channel here as well and for for us because we don't have a texture channel or a texture to input the albedo is just going to be the color so our color here is going to be a bit darker so let's bump up the metallic Ness let's dial down the smoothness a bit and let's adjust the albedo Channel here I just want it to be a bit darker great just so we can get that on I shift in color there just adds a bit of detail and then finally we'll take the barrels and I thought because this is going to be our turret let's make it very threatening and make it a some kind of bright red here with a lot more metallic Ness and some smoothness something like that looks pretty nice and of course as always spend more time on this than I do but for the sake of the tutorial I'm just going to continue here so now that we are happy with this let's take this and make it into prefabs so let's drag it down here under our prefabs folder and there we go and let's go ahead and right click create empty to make empty game object and this is going to act as the base which our head will rotate around because right now our problem is that if we rotate our head it looks very silly and we need to rotate our head when we want to log on to a target so instead we are going to create here a part to rotate that we will position if we hit on the Y here then go in to isometric view by clicking the square here switch from orthographic and perspective here and then we can go up here and select wireframe and we can position this in the exact center and you can see that mine is already there then we can switch to this side here and then drag it up to be right there where it switches from the base to the head and now that we have done that we can shift out of this mode and go back to shaded so we unshaded perspective now great now we can take our head here and drag it under the pot to rotate to make it a child of that object and now you can see that we can simply rotate our pot to rotate and the toad will rotate with us this is about great for rotating correctly but also for offsetting the head if that's something we need to do which I think it is but we'll take that in a second so now we can go ahead and hit apply on this prefab again to relink the prefab and that is basically all that we wanted to do graphically and with the empty game objects over here now we can go ahead and actually create a script for this so let's take our turret and just move it over here to someplace that makes a bit more sense for it to stand and I'm just going to position it right there and just make sure again I'm holding down ctrl to snap it that is position correctly and that looks nice and then we can go ahead and hit add component and it's going to be called turret and let's make it a csharp script and now we can double click this to open it up in Visual Studio so basically this is a twopart process the first one is finding a target and it should be within a range and it should be the nearest target and the second part is rotating to our aim at that target so the first thing that we're going to be doing is the actual finding the target so to do this we need some kind of way to store our current target in a private variable so I'm going to make a private transform here called target and maybe just while we're creating this we should make this public so we can see if whether or not it works then on next up what we need is on a range so we're going to make a public ha float and this is going to be the range of our turret and I'm just going to default this to something like 15 units and I'm just going to show you something really cool here so basically what we can do is we can have a unity display the range of our turret using gizmos in the scene and this way it's much easier to get a grip or a grasp on what kind of range this chart actually has so if we go in here and type a new function called board on draw gizmos selected and you need to type it exactly like that because it's a unity callback function just like start and update so on drunk is most selected and this will make sure that the range is only drawn if we have the chart selected if you want it to always be drawn you can just delete the selected there then we want to go in here and say gizmos dot our draw wire sphere and that's of course going going to draw a sphere with only the on wire arts are shown so it's not going to be filled out and the position here is going to be transformed a position our current position and the radius is going to be well range and that is basically all and then we can maybe change the color here to something like gizmo stood color equals color dot red just to make it a bit cooler to look at so if we head back into unity now we should already see this working and indeed we can so this is now our range and if we look at this from above you can see just how easy it is to get an idea of what the range of a turd is so that's perfect and it will of course update in real time if we change the value over here and if I deselect the turd it's gone okay cool so let's go ahead and use this range and basically we are going to have a method I'm going to make it down here called it's going to be a void and it's going to be called update target and this is going to do a renewed search for it target and it's basically going to search through all of the objects marked as an enemy we are going to use it be using the tacking system it's going to find the closest one it's going to check if the closest one is within range and if they even is a target and if there is we are going to set our target equal to that object however we don't want to do this every frame because both finding all of our enemies is a pretty comprehensive task and also when you're doing distance checks that take some computer power so instead of doing this every frame inside of the update method I think we should just make a method that will run say two times a second and which is a lot better than 60 or maybe 200 and we'll just have it check on a fixed basis but not as often so another thing you can do is only search for a target if you don't have one already but I think that just quickly becomes a bit too complicated for our case that's really no reason to but it's definitely possible so but for now this is what we're going to be doing so let's make sure that this update target is called two times a second so to do this we going to a start method because this is where we want to invoke this repeating function and we do that by calling invoke repeating and we give it the method name and this needs to be correct so I'm just going to copy it it there because I am not great with typos and then we're going to do this after zero seconds we want it to search for a target right at the beginning and then we want a repeat rate to be 0.5 seconds and you can of course just adjust that to fit your game but I think a few times a second is fine so now we can go into our update target and we can go in here and say that if ah we already know we're not going to be doing that okay great so we're basically going to be looping through all of the different our enemies in our scene and we are going to be using a for each statement but in order to do this we first need to get an array of all of the enemies and to do this we use we store this in a game object array and we're going to call this enemies and we set that equal to and then we use game object dot find game objects with tag and make sure that it's plural here and then we can input a tag and I'm just going to make a public tag here here's our public string and this is going to be the enemy tag and I'm just going to default that to enemy and then we're going to be using that down there just so we don't hardcode this stuffing it's better to have it in the inspector great so we are going to find all the enemies that attacked as enemy and store them in this array then we are going to loop through them using a for each statement so for each game object enemy in enemies what we are going to be doing is we are going to get the distance to that enemy and so we are going to be using a float here distance to enemy equals vector 3 dot distance between our position and the enemy position so that's going to be enemy transform dot position so that is going to return the distance in units and you and then it's going to be stored in this flow then basically what we want to do above this for each statement is we want to create a temporary variable and what this variable will do we're going to have a float here it's going to be a float it will store the arm shortest distance to an enemy that we've found so far so this is going to be the shortest distance and it by default we want this to be math dot infinity because when we haven't found any enemy well then we have an infinite distance to that enemy if that makes sense just to make sure that our shortage the shortest distance doesn't get within our range when we don't have an enemy we are just using math that infinity there and also we want to store as a game object the nearest enemy that we found so far and we are going to default this too and no so basically what we can now do enough for each statement is we can say if our shortest distance R is less than or equal to or actually just less than if our shortest distance I'm sorry if our distance to enemy is less than our shortest distance that means that we've now found an enemy that was closer than any we have found previously and if that's the case well then we want to set our shortest distance equal to our distance to our enemy and we want to set our nearest enemy equal to that current enemy that we are iterating over so if this makes sense basically what we're doing is we are finding all of our enemies and then we are saying for each enemy that we found we want to get the distance to that enemy we want to see if that distance is shorter than any distance we found before and if it is we want to set the shortest distance equal to this distance and so so the computer that the nearest enemy that we found so far is this enemy great and then what we can do is we can beneath this for each statement we can go ahead and check if nearest enemy it's not equal to null meaning if we found some kind of me and sure this distance is within our range so it's less than or equal to our range that means that we've we found an enemy and he's within our range well then we can safely go ahead and set our target equal to our nearest enemy dot transform and there we go we found the closest target so that's basically what we're going to be doing here then in our update method we want to make sure that we aren't doing anything unless we actually have a target so we're going to say if targets target is equal to null well then we simply want to return then we don't want to do anything in this update method because we're going to be using the target for everything are going to be using it to log onto to shoot at all that so if we don't have a target let's not do a thing great so that's basically all there is to updating the target and we should now be able to go in here and see this target update as soon as of course we mark our enemy prefab with this tag so let's go in here find our enemy prefab hit add tag add a new tag to the list which is going to be enemy go back and find our enemy prefab and change the tag to enemy now we can play we can select our chart and we should see that when an enemy gets within our range the target updates and you might need to click in the inspector in order for it to update you can also see then it doesn't lose the connection to the enemy if it's not within so we just need to add a quick il statement here that says else target is equal to no so now we need to hit play here and we should see that it will always lock on to the nearest enemy so you can see here it locks on to it there and then it's gone and the next one here it locks on to that one and then it locks on to the second one and then they are both gone so this logic now works now we can go ahead and use this to actually rotate our chart so in order to do this let's first make this into a private variable just so it want clutter up the inspector and people one thing that they shall need to input something here and then what we can do is we can go down into our update method and the here we are going to rotate some stuff and whenever we rotate stuff we're dealing with katooni ins whenever we're dealing with catch aliens people get confused and sometimes so do i but fear not i will try and explain this as best as i can just know it took me so long to finally understand kind of how to work with cooter nians and how rotations really work you really don't need to learn this overnight you don't need to understand everything that is happening here I'm just going to show you kind of my thought process and try and explain this as best as possible and then yeah you will get it at some point don't worry about it so basically what we want to do is we don't want to rotate the actual base of our turret here or this object right here because that rotates our base as well so instead what we want to rotate is only the part to rotate so we just quickly need to set up a reference to that and for that we're just going to be using a public transform oops not attract reference a public transform which is going to be our pot to rotate and we can set that in the inspector right now just so we don't forget drag in the pot to rotate there hit apply boom great now we can go on to our update method and basically what I want to do first is I want to get a vector which is basically just an arrow that will point in the direction of our enemy so to get this I'm going to store this as a vector 3 which is just three coordinates coordinates that will show in which direction we need to point and I'm going to call this tier for a direction and set this equal to and whenever you want to go from point A to point B or get the direction from point A to point B you take the end destination which is B minus point A so in our case this is going to be want to find the direction from our position to the target position so that's going to be target push dot position transform.position cool so this is our direction and what we can then do is we can go in here and make a new catonian and a catonian is just unities way of dealing with rotation and on this catonian is going to be our look rotation and it's basically going to say how do we need to rotate ourselves in order to look in that direction so we know what direction it is now we just need to know what how to turn in order to look that way and all we need to do here is just use catonian that look rotation and input our direction then we are going to convert this from a quaternion which is this complicated mathematical way of dealing with rotation into what is called Euler angles what we are using in unity here with the XYZ rotation that's Euler angles that is an X and a Y and a C where we rotate around each axis so we just want to convert our quaternion into that and we do that by using vector three or we are going to store it in a vector three and this is going to be our actual rotation the rotation that we want to have and that is going to be equal to quaternion or I mean this is going to be equal to our look rotation so the rotation we need to look dot Euler angles and now it's an Euler angles it's it's really that symbol and then the final thing that we want to do here is we want to set our part to rotate dot rotation equal to the rotation that we just made so this shouldn't in fact rotate our turret to make it lock on to and something's wrong here oh yeah and that's because we don't just want to set our entire rotation equal to this rotation we only want to rotate around the y axis and that's why we convert this into Euler angles we could just have gone like look rotation there and everything would have been fine except we would rotate our body in all directions and we don't want that we only want to rotate around the Y is and to make sure that this happens we first store these user angles and then we do quaternion dot R Euler and we input a zero rotation around the X and then our Y rotation is going to be our rotation dot Y and the rotation we just calculated and then only the Y component and then a zero and a one around the z axis as well so this is going to work it's going to not be very smooth because when it locks onto a target it's it's there like that but it is going to work so if we try this out now oops go into unity and wait for it to load the script here and hit play and hopefully this will work and I do fear however that it will do this yeah so you can see that it actually works it locks on to the target and it rotates however it's offset by a 90degree angle and this is why this object is so amazingly handy so basically you could sit there and mess around with quaternions and make an offset angle and all that but instead it's just so much more graphical to change it in here so what we are going to do is simply take our head move it out of our pot to rotate take our pot to rotate here that you can see it's currently pointing in this direction and then rotate it by negative 90 degrees to make it point in the same direction with the blue arrow as our barrel and that means that when we turn this back in and then hit apply the pot to rotate will now be oriented with the front facing the barrel so that's perfect and now we can hit play and it should already be fixed we didn't need to do any math or whatever we just needed to move that so this is actually working the only thing that I want to do now is just have it smooth out a bit because when it finds a new target in particular like right now it just jumps there and that is pretty ugly behavior so to do this we use a unity method called loop and loping is basically just smooth transitions from one state to another and you can do this with rotation and position and just numbers and general colors everything we are going to be doing this with rotation and unity of course has a function building for this so I'll look rotation we're going to be looping this and that's going to be equal to let me see you're actually we could do this multiple ways so we have a look rotation which is our desired rotation so let's take that and then instead of just you are getting our look rotation that Euler angles we are going to get quaternion dot lope and then we are going to loop from our our current rotation width which is our part to rotate to our look rotation and we are going to do this as time passes by so we're going to be using time.deltatime so yeah that should be fine and this is going to be part to rotate dot rotation of course and then we need to multiply with some kind of speed variable here so we can adjust how quickly this turret will move to get to a new rotation so let's just add a speed parameter up here which is going to be public float and this is going to be our arm turn speed and we're going to set that to a default of 10 which is pretty quick but I think it should be a snappy definitely just not that snappy and let's multiply this with our turn speed and that might be confusing basically what we're saying is we want to rotate or we want to smooth the transition from our current rotation to the new rotation over time determined the quickness to tournament by our turn speed and then convert it into Euler angles so ok we did it so this is our target lock on great so let's hit play here and hopefully we should see this working now so see there and you can see it's way smoother now when it's it finds a new target and locks onto that as well and basically what you can do now because this is a prefab is you can just duplicate this and we'll duplicate this and move it around your map and you should see these charts functioning just the way that we want them to so basically the next thing that we're going to be doing is we're going to be adding in some bullets that will actually damage our enemies hopefully and then we need some kind of way of spawning these tarts in some kind of way of purchasing them selecting a location for them to be built and yeah so I think this series is moving on nicely and yeah I'm excited about it so thanks for watching today's video and I'll see you in the next one so I'm going to start mentioning patreon supporters the following month after they donate so that there won't be any difference from donating at the beginning of the month to the end of the month this way everyone will get a full month of mentions and yeah everyone will be happy so just wait for the next month and you will see your name here so thanks for watching and I'll see you soon