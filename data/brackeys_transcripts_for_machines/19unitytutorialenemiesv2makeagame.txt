thanks for tuning in at braies hello everyone and welcome to video number 19 in make a game a cool series on making a video game in unity so in today's video we're going to continue where we left off last time uh by making uh some enemies and uh I've made a list of what we're going to go over today I hope that we can do most of this stuff um we might not be able to do all of it so I might have to split this up into several episodes but we'll have to see with that we'll just um go as quickly as we can so first off we are going to add some velocity to our player whenever we jump on the enemy's head so just like in Mario we will uh jump uh back up again uh then we're going to add some particles whenever the enemy dies we're going to be uh doing a bit of restructuring uh in the way that we have things set up right now for example I would like the game manager to um manage the level restarting and all that instead of having uh that function inside of the ball Health script then we also going to kill the player whenever he doesn't manage uh to jump on top of the enemy so when he collides with the sides and we're going to fix some bugs uh most prominently the we're going to do something with moving our camera update script into a late update function instead and I'm going to show you what that does cool so uh that is the uh list of things that we are going to do today and then in a future video we are going to add a cool model again samine iban is going to take care of uh making that and we're also going to add some animations to that model cool so let's get started with the first point here adding velocity to our player as always if you have any questions throughout this video uh or something that just won't work you can just head over to forum. bra.com and I among many other developers are just ready to answer your questions there I mean I very rarely see a a threat go unanswered cool so let's move into Unity as you can see the scene is exactly as we lefted off the last time I've just gone ahead and moved the checkpoint over a bit because uh before it was right above our enemy and so when I died I kept falling on top of the enemy uh so I'm simply going to move it over here uh just to where we start in the beginning cool uh so what I'm going to do here is uh first off we need to have a look at how our enemies is currently set up so we have these uh this trigger box down here which takes care of the uh the uh killing of our player and we have this trigger box up here which takes care of the enemy dying so that's called the hit box and the other one is called the killbox and as you can see the hitbox currently has a a script called d hit and if we open that up it simply calls a function on the enemy called die and that takes care of the enemy dying but what we want to do here is whenever our enemy dies we want to also have some kind of access to our player so so that we can apply some kind of upwards Force to him because right now if we have a look at our enemy script right here that is on the enemy Center then you can see that we are currently just destroying the game object we don't have any reference to our actual player inside of this so what we can do uh is we can simply make a variable for that so we can make a VAR uh player and uh we can make it of type transform or game object that's up to you I'm simply going to make it of type transform and uh then in side of of this function we can simply type player dot um rdet body actually let's make this variable up here of type rigid body so we don't even have to access the rigid body down here because the way we apply forces in unity is using the rigid body component which if you remember is what makes this act um as a physics object in game and then we can access access different functions and Par meters inside of this rigid Body by doing the dot and uh you can see that we can add some Force we can uh uh and and that uh Force you can tweak quite a bit we can add torque for rotational Force um and then we have a bunch of different parameters we could add a force here but what adding a force means is that you are um applying basically a push in a Direction but if if you're already traveling with a certain velocity in the opposite direction the force won't be too visible and that's basically what we're doing here because the ball is going to be falling down so it's going to be falling with a certain velocity on the Y AIS and uh once we add the force we basically have to compete with that already ongoing velocity so we have to tweak our force or um we have to um kind of tweak our Force uh to such a degree that we can kind of predict with what force we're coming in and then apply maybe double that in the other direction but if we then fall from a a very high point and we come in with a lot of force it might not uh act as we wanted to so what we're going to do instead is we're simply going to directly change the velocity that our ball is um moving at so to do that we do rigid body do velocity and then we access the Y component doy and and you can just do it like this in JavaScript it's a little bit more tricky in C but it's really not not that hard either and we can equal this to whatever value we want and let's store this value um as a variable too so we can tweak it however we want so we're going to do a VAR and this is going to be called um maybe what are we going to call this uh bounce amount maybe and we can equal this uh to let's say 10 F by default I don't really have an understanding of how much this is going to be um but we're simply going to do that and equal it to bounce amount and now we can save this we can uh head back into uh unity and select the enemy center now you can see that we can drag a player onto here so that's what we're going to do we're going to drag our ball onto that and uh you can see now that once we jump on top of this this is hopefully going to work please work oops I hit it wrong there as you can see I still have to tweak the colliders a bit oops this is definitely not working so we are uh apparently getting some kind of error and I don't really know why this is causing us to crash it looks like my version of unity simply closed down there so I'm just going to going to check up on this and uh and I'll see you in one sec okay so I'm back it looks like the uh crashing of unity wasn't actually because of our script um but I can see now that I had apparently forgot to turn Dropbox syncing off and if you're using Dropbox to sync your projects you should really remember to do so because it can mess with the temporary files that that Unity creates along the way however we did have an error in our script and you can see that it throws one here and it's because if we open up um the script here you can see that we are trying to access access a rigid body on the enemy Sentry we of course need to do player. R body. velocity uh for this to work so now when we hit play again remember to assign the player it's very important um you can see that if I jump here and I really need to learn how to time these I'm going to try that one more time so if I jump on top of the box here you can see that we jump up in the air so we have that kind of Bounce effect that is so cool in the Mario games and of course you can tweak how much you want the ball to jump uh as a as an effect of that cool so that was the first thing on our list that was uh adding velocity to our player one thing I do want to check however is that we uh can maintain this connection to the player even though our player dies for some reason so if we restart here you can see that it's very important that our ball is still is still connected here and uh that brings us to the next era it's one that I I I found here when messing around with the script here if we just jump off the edge here right away you can see that we fall down and I think the uh the reason why is if we go into our checkpoint script simply double click it here um you can see that we are making this reached point and then we are first setting it to something new whenever we actually collide with a checkpoint so and by default when making a variable up here this is going to be equal to 0 comma 0 comma 0 so Vector 3 is in initiate with a default value of 0.0.0 and if we make an empty object and set the position to 0 Comm 0 Comm 0 you can see that it puts this right here which is where we then respawn so a solution to this is um to find your checkpoint like I did here and just move it over and that's the easiest way uh which I showed you before is I just kind of wanted to show you that um but one thing you can also do is you can set this to a default value of some kind so we can say that this should equal vector 3 and inside of this we can then put maybe um Z comma 2 comma 0 and that's going to just put us uh with two units up in the air pretty sure see game over yes indeed it is so that's completely up to you if that's something you want to do I'm simply going to put our checkpoint over here and also just leave this as a security measure cool so now that we have our jumping uh added here we can remove that from the list and we can go on to maybe the most uh fun part I think uh which is adding particles whenever our enemy dies so to make this look more cool uh we can also add some sounds in the future uh but I think that comes with a model and animation and all that so for now we're simply going to do some graphics and uh this particle system here uh we are going to create from scratch so let's go under game object particle system you can see that adds one right in let's drag this under enemy Center then reset the transform just so we can see how this looks over here and then uh drag it out again because we don't want it to be a uh child of the enemy Center and then what we can do is we can maybe move this up a bit so uh actually let's not rotate this let's uh instead change the emission in here uh and the shape in here so I don't want this to emit in a cone uh currently it's you can see it's going out in this cone kind of shape instead let's H try out with a sphere so it just goes in all directions or you can maybe do a hemisphere uh as you can see it's just like this half circle that we've extended out uh now we can rotate this so it goes upwards looks better and um actually I'm just going to go with the sphere I think that's going to be just fine and uh what we're going to do is you can make this emit from Shell but I think that this emitting from any direction is fine I'm however going to make this a smaller point something like that and uh then we can have you couldn't put on random Direction I think this is going to look just fine we are however we going to change the emission rate so we're going to put that to zero and then instead do a a bursting system so we're going to add a burst here and we're going to bump up the amount of particles to maybe something like 60 and uh I'm going to bump down the duration that this lasts for it to Loop uh faster so we can see it so I'm going to BP that bump that down to three uh actually I'm going to do two and uh then we want to change the lifetime of these particles to something like maybe one or two I'm just going to do one you can see this already looks much better uh then what we can do is we can change the speed from constant to a random between two constants and uh we can maybe do between I don't know one and eight let's try that so that it isn't um so it's a bit more randomly scattered is what I'm trying to say and uh then we can maybe bump down the size a bit and maybe even make that random as well so we're going to do a random between two constants and we can do 0.2 and actually I'm just going to do one here looks pretty nice we can see it from the game view also how it looks currently uh looks a bit random maybe this is a bit too small we can do 0.5 instead I like that much better um then we can maybe add a bit of gravity this is up to you if you want the particles to travel down I'm actually not too fond of this um when whenever you're doing particle systems like this it's just a bunch of tweaking you just need to try out all the different uh parameters see what works for you in your particular situation there's really no rule for making these particle systems looks awesome it's always just a lot of messing around so and I of course expect you to go through this um much more thoroughly than I do I just very quickly try to show you what the different parameters does and then uh do and then um you can you can make something cool out of that so what we're also going to do is we're going to do color over Lifetime and size over lifetime so first on the size matter here we are going to make them shrink down over their lifetime by some amount this is this looks pretty good I think and then color over lifetime we want the alpha value which is this up here to simply just fade out and only want that to happen in the last percentage here so I'm gonna put an extra node here so that it only has this short fade out time uh then what we can do is we can change these particles from the their current look to an additive look uh and that that's pretty nice so we can make a material for them actually we already have this glow particle so I can just duplicate that and make this into maybe enemy death particle and uh uh then we can select the particle system again we can go under render and we can drag the enemy death particle in here and then we can change the color a bit maybe we can make this more red actually let's just make this a a solid white color U maybe with a bit of of Alpha transparency and then inside of the color over lifetime is where we want to really change this so we can maybe make it start out red and then we can uh give it maybe a more yellow color over here we want it to look pretty cool kind of like we just collected something that we really want so just give this rewarding feel to the player and again this is not going to be pretty in this video because I have a lot of stuff that I want to show you so uh the last thing we could do over here is uh limit velocity over Lifetime and what this is going to do is really give us that explosion kind of look where it's going to move really fast in the beginning and then damp and slowly slow down um so we get this uh sense of it emitting from one point and then just slowing down into space uh and to do this we're going to change the dam in amount down or what I think I'm going to leave that at something like 0.24 and then maybe bump up the speed a bit I think that looks pretty cool actually we can do a uh curve when it comes to the speed here to make them kind of slow down as you can see and I think that is act ex actually exactly what we want and then maybe we can change the start speed up here instead of doing eight I want to do maybe 20 so we really get this explosion kind of look I actually think that looks pretty awesome and I think we're just going to go with this uh for now we can also uh head back later and and change it if we don't like it so we are simply going to call these enemy death particles and uh we'll make them into a prefab by dragging them into the prefabs folder so we have them here and uh remember to turn off looping that's really important because El it's just going to do several bursts and and look really stupid excuse me there cool so let's delete that from the scene and instead let's do some instantiation through the script so let's open up the enemy script and in the die function we want to first off have a variable for uh the particles so I'm going to do VAR death particles and uh these are just going to be of type transform so we can easily instantiate them and then right before we destroy the game object we're simply going to do instantiate and in here we're going to do death particles comma and then the position which is just going to be our transform.position comma transform. rotation save that out head back into Unity you can see that we have a slot for our death particles let's find them in our U prefabs folder drag them in and now when we hit play if I can manage to jump on this guy's head try and time this awesome we have some cool looking particles and it's really that easy and you can just go into this object and tweak it however you want cool so now that we have that in place uh we can go ahead and move on to the next part on uh or the next uh bullet point on our list which is some restructuring So currently what I want to do is I want to kill the player through a script but currently if we go into the ball and look at the ball Health script we can see that this is actually where we do our level restarting and I think it's a little weird to have the restarting of the level all happening in happening uh inside of the ball so what we are going to do instead is we are going to follow me here whoops that was not on purpose we're going to go into our game object or game master script is what I mean and have a function in here for restarting the level so inside of our ball Health script we can take our restart level function just delete that with crl X and copy it over here with crl v uh then we can go in and find our um the place where we restart our level and then instead of Simply doing restart level we're going to do game master. restart level but in order for us to access it in here we need this to be a static function and that's not really what we interested in so what we are going to do instead in here is simply use a game object. fine statement and this is going to work just fine you could also make actually let's just do that we'll do a a variable up here so we can call this game master but do that with a small G A nonc Capal G do restart level because what we can then do up here is we can make a variable called game master of type transform so now we have a a reference to that actually let's do a type game object like that no no let's do a type game master sorry if I if I'm uh confusing you here because then we can drag in the script directly cool then we can copy over the audio clip over here so we can play some audio from this point uh and uh down here we don't want the transform. position instead we want to change the position of our player but I'm going to show you how that's done in a sec then what we also going to do is delete this is restarting uh from the function there go back into our player Health script and say that if we are restarting uh or if we are not restarting we then going to set is restarting to true and then down here we're going to set it to false again is restarting equals false this is not by means necessary but it's it's good practice and um cool so what we basically have here is a setup where if we hit back into Unity it's hopefully not going to complain no and if we then select our ball you can see that under our ball help we have a reference to our game master so we simply want to drag our GM object into that one and we are sure that the GM object is always going to be in the scene and what this will do is it will call the restart level function on the GM object then we go back in here this function is called this is going to play a sound which we have right here it's going to wait for a certain amount of seconds for the sound to finish and then we want to change the position of our player but currently we are TR changing the position of our game master script and that's not really something we're interested in so instead let's establish some kind of connection to our player and a way to do this is simply create a variable where we then reference the player so let's start out by doing that so we're going to uh make a variable and I actually want to do that up here because I think it's quite important and we're going to call this player and we're going to do of type transform now when we save this head back into the GM object you can see that we have a player slot up here so we want to drag our ball in there and we want to drag our game over sound which I can find over here on the audio want to drag that under the game over sound then what we can do in here is instead of saying transform. position we're simply going to say player position now when we hit play and uh we jump over here uh actually we're not calling the restart function in here but if we jump down you can see that our restarting whoops there's no audio s source of course we need to add an audio Source on the game master object here so um what we can do is simply go under audio audio source and uh we're going to disable play on awake make sure Loop is disabled we can check out maybe the sound setting here so volume is is just set to one so we're just going to do the same over here and we can even set the game over clip uh just so we know what this audio source is for we're also doing that inside of the script but now we have it so now let's try to play jump down and see if our reset start level function is working it is but wow it freaked out there um for some reason it it went totally crazy uh I think it might be because we are trying to restart the game multiple uh times so to fix this we're going to have a global variable here static VAR and this is going to be a a a Boolean and we're going to call this um is restarting uh and we're going to set this to false by default and this then in here we can going to say is restarting equals true and then down here we're going to set it back to false I know I just deleted this but I wanted to show you that we need to make it a static variable because then inside of the bald Hil script we can get rid of all of this we can get rid of the variable up here and then instead of saying is restarting we simply do game master. is restarting uh you could also do with a non capital G here because we actually have a reference to the game master but because this is a static variable we can also reference it uh without having a a variable for that that's kind of a a a hard distinction just follow me right now I know some of this uh restructuring can be a bit confusing uh also because I'm I'm always doing these um um very clear definitions of the static variable and the public variable and those things are very separate uh but can be very nicely intertwined if you if you know how they work so if if those still confuse you just follow me if not then well done you you now understand a lot more about uh the scope of these scripts and and what can be accessed and what cannot so let's uh try and hit play here again let's jump down let's see if this works and indeed it does you will however see that the camera does a little bit of twitching and that is also on the list here so you can see that I have this camera laid update that I want to change uh we can kill off the restructuring here I think I think we're done with that uh but right now what happens is inside of our camera if I open that up we have a script called camera control and if we open that up in mono develop you will see that in our update function we are sitting ouros but if for uh instance uh we go into our game master script and change the player position through script like this this might not get to update before the um the uh the ball is is um positioned on the screen in its new position so what happens is that we get this kind of weird twitching effect so we need to make sure that we update this position here after anything else so after we've done the ball calculations and all that then we want to uh change the position of the camera and then we want to draw the frame if we change the position of our camera first then change the position of our ball and then draw the frame our ball was will not be in the center of the screen so to do this uh Unity has already made a convenience function for us called late update and this is exactly the same as the update function only it is called right after all the other game objects update functions so once we change that and jump down here you will see that our weird twitching effect has disappeared and this will become more apparent when we kill off the ball uh using the head box so now let's remove that let's remove fix box because I think we've done that too and now it's time for killing off the player so if we head into the enemy Center here go on the kill box you can see that we currently have no script attached so let's hit add component new script we new script and uh let's call this kill on hit and uh let's double click that to open it up in mono develop and what we're going to do is we're going to delete these two functions and instead make a function on trigger enter as we've done before open this up with uh some brackets and what we want to do in here is basically uh to uh to call the restart function or uh I'm sorry yeah to call the restart function whenever uh something hits this so what we we do maybe we should call this restart on enter that's up to you you can always refract to that uh any way you want to but what we want to do in here is simply uh get a reference to the game master script and then call the uh the respond function so let's make a reference call this VAR and name it game master just like we did in the last script and this is also going to be of type game object and then we simply do game master. restart level like that and uh if restart level is not okay what did we call it uh okay of course this can't be game object this should be uh game master like that and then we can restart the level please yes awesome so under the game master variable that we now have here we simply drag in the GM object and we should be able to hit play so let's try it out play go over here try to hit this box and indeed we restart it's really that simple I'm simply going to turn back on my audio here so I can have a listen and see if if the audio is playing here the music is playing we roll into our enemy game over it says game over and we respawn so that is basically for uh everything we can we can um have a fit into one tutorial today uh let's see how long this has been running yeah might need need to split this up but uh thanks so much for watching it's it's amazing if you made it all the way to the end here so congrats if you have and uh yeah that's basically all I have to show you I can't wait till we can uh do some uh model implementation and really get some cool looking Graphics in here that's going to be so much fun so thanks for watching and I'll see you in the next video oh