thanks for tuning in at braies hello everyone and welcome to this video on creating a tower defense game in unity today we are going to be fading between scenes something a lot of you guys have been requesting me to do and so finally we're going to do it so let's just jump right into Unity here and I basically just want to create start by creating some very very simple UI that we can uh animate on and off whenever we want to fade so let's just go in here and right click go under UI and select canvas let's drag this to the top of our level and we already have a lot of different canvases in here but it's going to make it a lot easier if we just have this sit on a separate one let's right click on this canvas go UI and select image and basically what I want to do is just stretch this image to fit the entire screen so we'll go over here we'll hold on down alts and we'll click in the bottom right corner to make sure it will always stretch to fit the screen so this is our source image and this is basically what will'll be animating on and off in order to create this fading behavior in our case I want this to be black so I'll just set the color to Black here and I'll set the alpha to zero but what you can do is choose any kind of color and you can even go in here and specify an image preferably something that fits the entire screen if we go in here and select our laser Beamer that looks kind of weird but we could essentially animate that on and off in case you want to create kind of a loading graphic but in our case again we'll just go with this standard Fade to Black so what we'll do now is go to our canvas and remove the graphic raycaster this will just make sure that whenever we play the game and try and select other UI elements it will not block our Rays so that we actually still able to interact with UI that would just be really annoying that if some invisible image was blocking our ability to interact with the UI um and yeah everything else looks pretty good one thing I will do is just rename this to something like um maybe just black actually or fade image or whatever awesome so now let's go ahead and create a script that will control the alpha channel for our black image and we could just put this on the game master and that would definitely make sense but I want to go ahead and create it uh on a separate object so that we can turn this object into a prefab that we can just drag into any scene that we want to have fading in so let's just uh create an empty object reset the transform and let's name this something like um scene fader let's also add a component called scene fader of type c sh we're can then drag this object to the top here and drag our canvas as a child of that scene fader object now let's double click to uh on the scene fader to open it up in visual studio and let's have a look at actually scripting this out so the base of what we're going to be doing today is actually fairly simple I mean we are just going to animate a single number which is the alpha channel on our image over time but because we are dealing with kind of doing things uh after a certain amount of seconds say fading out and then loading in a new scene and having those kind of timings in there it's much easier if you use coroutines and cortines are a bit weird uh syntax wise so just stick with me here and try and absorb everything you can and some things remember you just have to loar by doing and try and uh get it in there and see if it works and then you can always uh get caught up on how everything is actually working behind the scenes at a later point so up here we're going to be using a lot of Nam space of course we are going to be using Unity engine we're also going to be using system. collections for allowing us to do Coes the iron numerator stuff we'll also be using Unity engine. UI because we want a reference to our image and unity engine do scene management because we want to be able to change scenes so the base of what we want here is is just a reference to our image so let's create a public uh variable of Type image and let's call this one just image let's just save this right away and jump into unity and reference it so let's just select our scene fader and let's find our black image and drag it into this slot this way we won't forget we'll also want some kind of function that will uh fade in and another one for fading out and we want these to be of type I enumerator so instead of writing void here we write I enumerator which is a scary word and then we write something like fade in and everything else is just like a normal function then what we do is we uh think a bit about what do we actually want to happen well when we fade in that means we want to go from black to seeing our scene and means that we'll have to animate our image from being having an alpha of one and then slowly down to zero which means that it slowly disappears and underneath our scene is revealed and so it's fading in so when we fade in we actually want to make a number smaller and the way that we do this is by first having an idea of time so let's create a v variable here of type float which we call T and we set that equal to we can set it equal to Zer by default or we could set it equal to 1 because we want to animate from 1 to zero so let's just do that and um then we say while T is greater than Zer then we want to do something so we want to keep on animating until our T value here our time value reaches zero and so every time we actually go through this we want to decrease our time value so we'll do T minus equals time. Delta time and right now you might think well why are we using time. Delta time when we're not inside of the update method and that's a totally valid question to ask because um if we just looked at this like a normal function we would think that this would T would just decrease on in like a single frame and we wouldn't notice a thing but this is the power of using an i numerator we can go in here and we can control exact when we wanted to actually skip a frame or wait a frame or wait a certain amount of seconds and that's what we'll do so every time we decrease our T Val variable we also want to go in here and say yield return zero and what yield return zero means is basically just skip to the next frame so just wait a frame and then continue so basically what we have here now is a function that when we call it creates a variable called T and set it sets it equal to the value one then we say that while T is larger than zero with which it definitely is in the beginning we want to decrease it by a tiny bit of time and then we want to wait until the next frame and it's still not less than or it's still bigger than zero so we want to decrease it again wait a single frame and we keep on going until it be to zero and then we go then we get down here okay so we we have this Loop that will animate slowly over time um in the uh at the same rate as our update Loop would um until it reaches a certain point at which point we can then well say load is seen or do something else but in our case we're fading in so we don't want to load anything basically we don't want anything to happen here so um yeah that's awesome but we are displaying our T value anywhere what we want to do is of course have this be displayed on the alpha Channel and we could very easily just go in here and say that image. color. Alpha should be equal to r t value and um actually we can't do that directly because we can't modify Alpha on its own we can only modify the entire color which means that we have to input both red green blue and the alpha at once so what we can do instead is we can create a new color and we can give it a value of 0 0 0 if you want it to be black like me and then U I'm not black but I want it to be black that was a weird sentence and we can continue so uh and then we can input our Alpha here which is going to be our value T so in this case it's going to just animate from 0 to 1 over 1 second so uh and you could of course multiply a speed onto this if you wanted to we could just go in here and decrease with time. Delta time multiply with some speed value that could be one if you want to it to be um from 0 to 1 in 1 second two if you want it to be from 0 to 1 in a half a second or 0.5 if you want there to go 2 seconds so you can of course add that in there but I'm going to show you something much cooler so this is of course going to work except of course we have to call the function so let's now create a start method so as soon as we start the game we want to call this fade in function and remember again when we have to do with corot team we of course don't just call the function that would be way too easy what we do instead is we go start Co routine and then we input the function into that start cotin method so that's how we call a cotin uh instead of an ordinary function so uh let's save that and we should see now that if we just pause the game hit play and then um and you can see something is wrong with the way we're drawing things here we'll fix that in just moment but you can see here that if I now uh unpause it it's going to animate slowly unfade in so that's awesome so let me just fix that small uh error there and uh that is because I messed up the sword order for some reason did I change it on something else I have no idea what I did maybe it just didn't save so let's just go in here and bump up the sword order there we go and now you should see my point that we are able to yeah it influences all UI elements so we already have fading in but one thing that we could do that's a lot cooler is give ourselves ultimate control over how the fade in occurs because what a lot of movies and also games do is they don't have a linear Fad in they have kind of a curve with different kind of properties to it they might have like a a positive swing on the Curve they might have a negative swing on the curve I'm just going to show you what you can do with this stuff and unity has a really really cool way of easily implementing these kind of Curves it's called the animation curve so let's just create a new public animation curve here and let's call this our fade curve or maybe just curve we can save that and we can just head into unity and see what that looks like and you might have seen this before when it com to doing animation so this gives us this curve and they have some presets here so you can see the linear one would be the exact same as we just had if we use this it's just going to slowly go linearly from 0 to one we could also use this one which gives it a kind of a negative curve here you can see that it slowly increases and then it goes faster and faster we can also use this one where it very quickly increases and then it kind of slows down until the very end a lot of movies actually use this some use this and of course some use linear transitions or you could go completely crazy and make your own Curves in here which I'm going to show you how it looks in a second this this will actually kind of fade it in and then faded out and then faded back in so let's use this curve so um basically in order to apply the curve what we do is we instead of just inputting our TV value here we apply an extra step so let's create a float a for the alpha value and we set that equal to and then we use the T value here the time value as the input for our curve so basically this down here will be our T value so say our T value is 0.3 in our case the curve would give us a value of about 0.1 if it was 0.6 it would give us a value of around um I believe that's something like 0.35 and and you get the idea so basically what we'll do is just go in here and say that we want uh a to be equal to curve. evaluate and then we give it the T time awesome so in our case of course because we're going from 1 to zero it's going to animate from the top here and then all the way down so that would look something like this it looks really nice and just to show you that this is actually different than before let me just try to give you a really weird looking curve and just just to show you and you wouldn't probably have this in your game what you can actually do with this so let me just whoops let me show you what that looks like so say play here and you can ah that wasn't too apparent let's try that one more time I believe it should work now so let's H play here and oh I know why we need to input the a here awesome so now we have uh we should have it actually working of course we need to input the alpha and not the T so now you should see this crazy curve working so here and you can see it fades back so we can actually totally control how the fading occurs I just thought that was a really really neat detail awesome so basically what we need to do now is just create a um another version of this function that Fades out and then we need to of course actually play these functions at appropriate times so let's just duplicate this entire method and then uh let's paste it down here and we'll call this one Fade Out we'll have our T start at zero and we'll have it animate until it's no longer less than one and instead of decreasing it every time every frame we want to increase it so now we need to of course call this method and instead of just calling it directly from all these scripts let's create kind of a hel method that's easier to call than a corot so let's just create a public void up here public void and let's call this something like fade 2 and we also want to be able to specify what scene we wanted to actually Fade to I mean uh currently we're just fading to Black and fading back in but we also want to actually change scenes so let's just specify as a string here the um scene that we should transition to and what we do then is just call fade out as a cortin so start coroutine start cotin and uh te and the cotin we want to start is Fade Out and of course we need to pass this scene onto our Fade Out coroutine so what we'll do is just add this as a parameter down here as well so string scene and we'll pass this scene onto there so it goes down here and we can use it at the very bottom so when we're done fading we faded to Black and we're done with our animation we reach this part of our code and then we can go scene manager. load scene and we can just input the scene that we just specified awesome so that should pretty much be all we need to do in code so what we can do now is of course call this because well we do need to call it from somewhere but um what I want to do is just package up the scene fader object into a prefabs so let's just expand our prefabs folder let's drag it in there and now we should be able to easily add it to our main menu as well so let's jump into our main menu let's drag our scene fader back in and now when we make a change in one place it's very easy to update uh in all of the other places by simply hitting apply so let me just demonstrate how this works let's say use our main menu so inside of our main menu we currently have a play button and if we press this button it calls a load scene on the scene manager with the level to load in our case we want a reference to a scene fader instead and you could very easily just go in here and say find object of type scene fader and then you could do something like do Fade 2 and input arm level to load and this would work just fine but of course find object of type does require a bit of computation so what we'll instead is just add a direct reference to our scene fader which we'll call scene fader and then instead of finding it we'll simply use that reference so C fader do Fade 2 level to load and then of course we just need to remember that we have to drag in our scene fader into the slot in order for that to work but that should actually mean that now when we play it fades in we play it fades out and it fades into the next scene and it looks awesome so all we need need to really do now is just add this to our retry button as well you can see it always always fades in but we also have to make it fade out to our menu we haven't really done that transition yet and to our game over screen so let's just very quickly go through it and in case you on using this for the Tower Defense course you can just go and add it to the places that you would want it to fade in your game so let's now go through our main level here and let's find first of all our overlay canvas where we have our pause menu and um our pause menu of course uses a script on the game master called pause menu let's just double click this so we have a function called retry where you can see we currently use our scene manager to reload our currently active scene well instead let's first off create let's create a public um scene fader let's just call this scene fader much in the same way we did before and then we just go scene fader do Fade to and we input our scene which is going to be the currently active scene so in this case we use scene manager. getet active scene. name and we don't use build index because we've only implemented it with the name but you could just as easily create a version of the function that use the build index instead and of course we also want to transition to our menu so here we just want to go scene fader do Fade 2 and then we input something like main menu but instead of coding this in it's always better to create a variable for it so we'll do that as well so we'll create a public string um main or something like menu scene name and we'll set that equal to main menu by default and we'll put that down there instead so save that as well and then inside of our uh main menu that is fine at last we have our game over screen which is right here and we have a few things that we want to edit about this as well so let's open our game over menu and just before I forget under our pass menu we also want to toggle we also want to toggle our pass menu if we go to the main menu or else um the game is still going to be hung up and it's going to look weird with the fading and all that we always want to disable that so just make sure to call tle on there as well but inside of our game over we should now be able to uh do the same to our retry so we'll go up here create a reference pop um f scene fader scene fader and we'll go down here we'll say scene fader do fate 2 it's the exact same pie piece of code we want to uh um we want to fade to the same existing scene so get active scene. name there we go you can just copy this code even and uh inside of our menu we go scene fader do Fade 2 and then we want some variable for our main menu again you can just hardcode it or you can create a public string called the menu scene name which we call main menu by default and then boom I believe we're done awesome so just save all of that it's just inserting this code a few places is uh a few places in order to get this to work and I believe now that things should actually be working so one thing I'll just very quickly do is take our enemy prefab here and just bump up the SP uh the start Speed so that we can quickly uh more quickly run through our level here so now when I hit uh escape and the pause menu comes up I hit retry we get a no reference of course we need to set all the references up inside of unity as well so let's go under overlay canvas let's find our game over menu we need to drag in our scene fader we need to do the same thing for our game master under the pause script we need to drag in our scene fader and again uh you won't get that problem if you use something like um uh game object. find or find object of type uh but this way is faster so if you just remember to do that on and are able to do that uh definitely do so it's just it's just better on the computer it's going to be your end user a lot more happy so now we can hit Escape retry Fades out fades in looks awesome we can hit menu Fades out fades in the menu hit play goes back to the original scene let's just try running out of time here as well or running out of lives so our guy goes through here completes the level and rerun out of lives it says game over and we can hit menu for example it's going to work just fine and the same thing with the retry button so that was basically all I wanted to show you for this video I'm just going to reset our enemy while I still remember to do so I hope you enjoyed this kind of um very specific uh UI fading thing uh I definitely think that uh using the curves here really give you a lot of control over exactly how you want stuff to uh happen and uh yeah I just thought it was a pretty cool fairly unexplored approach so uh yeah hope you enjoyed it thanks for watching and I will see you in the next video thanks to all the awesome Patron supporters who donated in October and a special thanks to Sultan elative faal marifi and James Kell Hound become a supporter at patreon.com Brees