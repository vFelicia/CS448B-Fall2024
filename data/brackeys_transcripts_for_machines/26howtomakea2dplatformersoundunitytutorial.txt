thanks for tuning in at brakus hello everyone and welcome to video number 26 in the how to make a 2d platformer course in today's video we're going to have a look at adding some audio for our game so we'll expand on the audio manager just a bit and we'll be adding a bunch of different sounds and music to make the game a lot more awesome so let's just go ahead and get started so you can see on my desktop here I have the 2d assets pack you can download that from the break keys website break is calm under any of the 2d courses that should be a free download link and under the audio folder here I've gone ahead and added a bunch of different sounds all of these are freely used you can use them both commercially or non commercially and share them any way you want credit to me is of course wonderful I didn't make these sounds I just gathered them so you can see them here actually some of them I made and we also have a folder for music we have this chill music which is from the make game course you can go ahead and add that if you want and we also have these two awesome tracks and these are made by a very good friend of my mind called I kill Box Dean Johnson and link to him is in the description or his name or whatever and you can see here we have if I just expand on the name here we have the percussion space music and I think we should just go ahead and have a listen to that so just double click it here so it's this very laidback and chill grew and it has this very ambient feel which I really like for the game and we also have the relaxed space music also a very ambient field but this is with the out the groove so if you want this could be fine for a menu or maybe when the action isn't occurring so you can of course choose between these choose the one that you like the best and yeah cool so some of the audio sounds or some of the sound clips here you hear as we use them so I'm not going to play all of those right now so let's still right into unity here and you can see I haven't changed anything since the last time I think I've reversed everything back to normal because I tried to record this last week and that was the reason why you didn't get a video last week is because I recorded like an hour of material and well the sound wasn't working and that is not really good when you're making an episode about audio so that was a real bummer and I it took me like five hours of wasted work or something so but it's hopefully working now and everything should be reversed back to normal so what I basically want to begin with here is create a bit more of an awesome audio manager because right now this is fine for a foundation but what I want to do is I want to create this into a instance that will just transition or don't destroy whenever we know load a new scene so that we can have audio playing from the main menu directly over to the scene or other ways around so if we change a scene no matter where we begin it will spawn in an audio manager and when we then transition to a new scene that audio manager will persist so that's something that I wanted to do for a while with to show you how to do for a while with some other stuff too so I think we'll just begin with the audio manager here so let's double click this to open it up in Visual Studio and I'll show you want you what I mean so the basic idea here is that so far we have had kind of the idea of a Audio Manager instance and that's all fine and dandy and we'll keep that however what we want to do is have an audio manager sit in every scene that we want to have audio in and then we in the awake method we check if instance is not equal to null meaning that if there's already something there well then we want to check if the instance that is there is equal to this and if it is not well then what we want to do is simply destroy this object so we're simply going to say destroy game object so this will you will need to have this um Audio Manager sit on a separate object or you're going to destroy all the scripts with the I'm just going to make this very apparent but you could of course just go ahead and disable it or something like that I'm just going to completely remove the object so that you won't get confused and then else now we set the instance equal to this and we want to flag this as a don't destroy load so we simply call the don't destroy load method and we input this and don't think that needs to be of type game object and what this will basically do is it will tell unity whatever went well whenever we change to a new scene don't destroy this object just well take it into the new scene as is cool so that was kind of the first thing that I wanted to change here and this will allow us to take this component copy it then remove it and let's create a new object controlshiftn let's make name this as an audio manager and just drag it up here reset the transform and we're going to paste the component as new here and what we can then do is take this make it into a prefab hop into our main menu and then drag the audio manager up there so now we have a prefab instance in both cases and if you will notice here if we start in the main menu scene the audio manager is here when we then hit play and it transitions to the new scene well for some reason there's also an audio manager there now so it looks like I've made some kind of error here let's go back into the awake if instance is not equal to I know so if that's already something there and if instance is equal to this that should be if it's not equal to this and there we go so if we hit play again and play there you can see that there is now only one audio manager in here and that is the audio manager from the first scene the other one notice that there was a new audio manager from the older scene and therefore just destroyed itself it was needed good so that is kind of the good way to do it and some frankly something we should have done from the very beginning next up I think we should begin by adding in a music track because if that's something that really makes your game feel a lot more awesome and add some audio depth to the game well it's music and also it's it's nice to kind of theme some of your sounds around the music that you're playing so let's go into the music folder and I'm going to take the percussion space music and drag it into the audio folder in unity come on drag please first some reason that isn't dragging so let's just import a new asset and then find it here Dropbox to the assets pack audio music and take the percussion space music there I don't know why that didn't want to drag and drop that shouldn't be a reason for that okay cool and notice that all of the audio files in this pack are decomp or compressed already meaning that they are ready to play in your game I mean I've tried and set up the settings so that we get good quality but the files are ridiculously large or anything good so we can hear it in here yeah and that sounds awesome and we're just going to leave all of these settings then we can find our audio manager and expand this array so we already have the respawn here and I want to change this to simply music for now we might need a separate system for blending between different music tracks at a later point but for now we're just going to drag this in as a sound to drag in the clip there change the volume to something like I don't know point four maybe and the pitch at one and we don't want any randomness on this whatsoever then we can double click on our audio manager and in the start method we can simply call the play sound music there we go so if we go ahead and try this out hit play we can hear the music plane in the background now so that's perfect another thing that we want to do with this music track is have it loop and that's actually an option for the audio source so if we go up here where we kind of had have this class called sound where we define some different properties that we want to be able to change for a sound well we can make a new property here let's make this below everything else and this is simply going to be a public Bowl whether or not we should loop the sound so we're just going to call it loop and default it to false and then down here when we set the source because this is not going to change when we play the sound but it's something that's going to be constant for sound we can set it down here and we are simply going to say source dot loop equals loop and it should be that easy actually so that's awesome another thing that I want to do is have our us have the ability to actually stop Essam from playing so on we're going to make a new public void here called stop sound it's going to take in the name and instead of sounds either play we're going to say sounds I stopped and then we can simply scroll up here and add that method up here so instead of public void play we're going to have a public void stop and it's simply going to call that on the source later we can maybe add some kind of fadeout method here or whatever that could be a parameter you could add a fadeout time something like that and new track to transition to the possibilities are endless but for now this is what we're going to do so now that we've added that in let's just test this by let's say making a quick test update loop here and we're simply going to say that if time that time is greater than five seconds then we are going to say stop sound music so we should hear our music stop after exactly five seconds so oh and we also want to check looping here so just going to quit that so click loop on that and hit play and it should stop right about now good so that's perfect and you can see here that if we inspect our sound one music here you can see that it's set to loop now so that is all very perfect cool and that's kind of all I wanted to do with our audio manager today at least so next sound that we want to add and well I think we should go ahead and add some kind of hover sound to the plane quit button so let's go under our menu manager and let's add some method here one called public void maybe on mouseover and this is simply going to play a sound so therefore we need a reference to our audio manager so you're going to have a void start here whoops where we cache that reference so we're going to have an audio manager we're just going to call this on your manager and in our start method we're going to say Audio Manager equals audio manager dot instance and if on your manager is equal to null but then something else went terribly wrong and you're just going to go ahead and throw an error here so T backlog era no audio manager found good and we're going to be using this piece of code a lot so I'm just going to copy it to my clipboard and then I'm probably going to paste later so what we want to do here is simply say Audio Manager dud what do we want to say dot play sound and then we want to give it the name of the sound that we want to play and this is simply going to be a hover animation or a hover your sound and I have some pretty cool sound clips for that but I think to make it easily exchangeable we are going to go in here and add a public let's make this a serialize field actually so serialize field string and it's simply going to stay store the hover over sapped there we go and that is going to be hover button hover by default and then here we put the hover over sound something like that cool so let's minimize that we should see the field appearing here now there we go the hover over sound button hover and then in our Audio Manager we're going to add in a new sound and this is going to be the button hover we're going to drag in a sound from our sound library and this is going to be the button hover simply and again this is not working I'm just going to go ahead and import a bunch of sounds here I think we should have the button hover in the button press really okay we can only go one at a time that's going to be annoying so you can hear it here just this very very short sound and simply add that to the on your manager there drag that in the volume seems fine the pitch at one random volume of one point one and a random pitch of point one and no looping and that looks good then in our menu manager that's set up correctly good what we can then do is go into our canvas select the play button and down here under the event trigger you can see that I've added this component earlier so basically we want to simply hit add component here event trigger then we add a new event type this is going to be the pointer enter and that's going be then going to add an event we are going to add the menu manager to that event and call the function on the menu menu manager called on mouseover then we're also going to have another one in a minute for whenever we press a button so that's all we wanted to do with that and we need to remember to copy that over to the quit button as well but we can just have a lesson so we have this very subtle hover over sound and I think that's actually really really nice I want to just make this a bit more clear so something like point five five will be better let's also make another sound for actually pressing the button let's call this button press we're going to import you get another live sound and this is going to be the button press sound then under on the audio manager we drag that in there the volume is probably going to be the same you can just have a listen to the sound here oh cool actually it's a bit louder so I'm going to have that at this at like 0.45 the pitch at one and I don't actually want any randomness on this and remember to have an odd loop let's apply that go into our menu manager go into the script here and we're going to make another public void here which is going to be the actually we could just call this through the start game and quit game which I think we're just going to do we could make a separate method that we call but that's really no reason to so let's just have another serialize field this is going to be the press button sound and this is going to be button press there we go and we're simply going to call maybe before we do that so audio manager dot play sound and it's going to be the pressed button sound that we want to play and we're going to do the same here cool so let's say that head back into unity and we are already calling these events so we don't actually need to to do anything except copy this component over to the quit button as well so you can see I have the event trigger there we'll just delete that and paste component as new good so save that apply that prefab hit play and we should hear hover over sounds for both of them and a press sound and you can hear how all of the audio transitions to the new scene without any glitching cool so next up is probably some shooting some explosion sounds maybe some footsteps when we land or something let's just go ahead and continue into the next scene so let's open up our main level and let's add a shooting sound so on our player under our arm and then pistol we have a weapon script let's go ahead and double click this to open it up and you can see in here and then alright down here we have a method called effect where we spawn all the fire effects and right after we shake the camera I basically want to play some audio so here play shoot sound and this basically happens as with any of the other stuff we could have different sounds for different weapons and therefore I think we should have a variable up here with the name of the sound of this weapon uses so let's go ahead and just make that burn quickly we are going to first have a civilized field actually we've just made everything else poppin let's just do the same here so public string and this is going to be the weapon shoot sound and it's going to default to our Glock or default shot let's just make that so we have this for now and we can always add to this just default shot will do and then we are going to have a reference of course to the audio manager now we should actually go ahead and just say caching and here we're going to add the audio manager audio manager and in the start method down here we say audio manager equals audio manager dot instance if audio manager is equal to null then we have done something wrong so debug that lock error freaked out no audio manager found in C cool and then down here we can simply say audio manager dot play sound weapon shoot sound good let's say that say back into unity let's see what we have here right now this is set to default shot that's perfect let's make a sound with that name under the Audio Manager you can see how all of the settings have updated in here because we made it into a prefab let's change that to 5 make a default shot let's actually import the audio so import new asset let's find the one called shot let's just listen to it this very short pop sound we then go into the audio manager drag in the shot the volume is going to be I don't know point seven maybe a random volume of 0.1 and a random pitch of point one is going to be fine and let's try and apply that so let's hit play that is perfect so now we can actually shoot our enemies and see what's going on next up is an explosion sound so I'm just going to conclude these there and let's make the explosion so six and this is going to be simply explosion and always make more let's drag in some audio import new asset find the one called explosion and I really like this one kind of very oldschool a bit pixelated explosion sound but it sounds so satisfying when we apply that to enemies good so let's drag then under the on your manager explosion the volume is fine maybe even point eight on this one ah we're just going to keep it and yeah all of the settings are just fine too and then we can go out and find the place in our code where we kill off an enemy and I believe that's in the GM script actually so if we go into our game master here we can find the place where we kill the enemy so kill player kill enemy right here so you can see that we instantiate some death particles we shake the camera we should actually go ahead and just add some comments here add particles go camera shake let's play some sounds good and this sound is again going to be depending on dependent on the enemy so let's go ahead and add that variable to the enemy that we have passed in as an argument up here so let's just go enemy dot let's say audio manager and we have that reference set up for from earlier videos so audio manager the play sound and then we're going to say enemy death sound name and that's going to work just fine as long as we remember to find our enemy under prefabs here let's just take the alien spaceship we have our enemy script here we are going to go in and create a new variable we have the all of the stats it's not what we want we want one down here which is going to be a public string enemy death sound or death make button I call this enemy sound name death name game master death sound name that's fine we're just going to go with that death sound name and default that to explosion and that was basically all we needed to do there I think so that is working that looks good you can see here that explosion appears there it is let's try it so play let's get some enemies to shoot that's perfect and notice it also plays the sound if the enemies hit us without us killing them so first okay so this is weird for some reason it waited a bit before spawning something that okay that's a bug we might need to check out later doesn't look game breaking but it definitely annoying so you can see it also spawns in smashing they're three oh yeah and the response the works good so the next thing that I want to do is add some kind of audio feedback for whenever our player takes damage or dies so let's go ahead and import two new audio files now we're going to import new asset and first off we are going to have the death voice and also import the runt voice too so the death voice here is something I want to play whenever a player dies and the grunt voice oh it's something I want to play whenever our player takes damage you could of course since there are two grunt voice two's play one at random but I'm just going to play this it's it's very similar to do that kind of randomness and frankly I think you know how to do that by now so that's completely up to you so let's find our Audio Manager and let's a make room for two new sounds first off we have the death voice and then we have the grunt voice or let's just call this grunt whine grunt let's just call it grunt there we go dragged in the death voice and drag in the grunt and the volume here things should be like 0.5 and this one like 0.4 maybe and don't want any randomness to these whatsoever a bit of random volume on the grunt maybe there we go so let's apply that we then go under rgm again because that's also where we are kill a player no no no no let's do this in our actual a script I would like to have it sit here because what we can then do is play the sound dependent on whether or not we die because that's handled right here in damage player method so let's just mix set up some references here we're going to have a Oh see there I didn't remember to delete these we have the public string death sound name and I default that to death voice and a public string damage sound name and I'd fold that to damage voice so let's just use that and that's fine instead of damage voice here we have grunt good good good and then we want to set up a reference to the audio manager so we're going to have a private audio manager Audio Manager and again in the start method we said on your manager equal to audio manager done instance if audio manager is equal to null debug.error unknown manager in c good and then under the damage player we say if stats that current health is less than or equal to null meaning if we've died well then we kill the player and we also play the play death sound we call audio manager dot play sound death sound name and down here if that did not happen so else we play damage sound and it will play this no matter what has damaged you and no matter yeah well no matter what and so either if we take fall damage if we implement that at some point that's going to apply here if we died from our own missiles in the future that's also going to work and that's fine with me so let's do on your manager play sound and this is going to be the damage sound name good and let's just inspect our player here and make sure that those two variables up here and they do but we have to change this to grunt so let's apply that prefab collapse the scripts there just get rid of all warnings we can ignore them we will fix them in a a future video probably and I think all else should be working out so let's try to play wait to someone something damages us perfect and then in a moment we will die and hopefully here's something else that is perfect you good one and you will notice that also if I jump down we hear the same damn siren that's perfect the next thing that I want to add is a sound point where ever we spawn again because we have the respawn countdown but we don't really have any sound to kind of follow it up so that's the next thing that I want to add also we should have something from for the pause menu or the game over menu and we should probably have some kind of game over sound but I'm pretty sure that I've actually already have something in here that the noise game over game over that's perfect so we'll add that to the game over screen we have a bunch of different things still to add so first up let's add the spawn sound so if we find our TM object go ahead and open up the game master script you can see that we have this respawn player we play the sound respawn countdown then wait for the spawn delay and then we instantiate the player well I want to change this just a bit so instead of having just a spawn sound name here I want to kind of change the terminology here this going to be the respawn countdown sound name yeah that way we don't get confused and then down here we're going to have the spawn sound name and that's going to be a separate variable up here spawn sound name and this is going to default to spawn and this is going to default to respawn countdown alright so now that we have set that up we can just go ahead and add that to the actual audio managers just make sure that everything looks correct here respawn countdown and the spawn sound name should just be spawn so let's apply land find our audio manager and in a new sound here and also under respawn we not want this now to just be our this to be respawn countdown yep and this just to be spawn and again we want to take our audio folder import a new asset the asset that we want to import is spawn cool and let's just drag that into the correct slot the volume is going to be something like point six the pitch is fine no random volume and no random pitch so let's apply that hit play and see if it works honey 3 2 1 that's perfect okay just so we get some kind of feedback that our player has actually spawned so that sounds super awesome the next thing that I want to create is some awesome sounds 4d came over menu so let's find our UI overlay let's find our game over here and let's see where we actually spawn the same so we have the game over UI this simply has again two methods what one for each button we're going to make a new one here this is going to be a public void and it's going to be called on on hover on mouse over there we go and in here we're simply going to play a sound so again we want to create a reference to an audio manager and I'm just going to steal that from up here so that here cool so we have an audio manager called audio manager and we have a void start method where we do that good then down under the on mouse over and again we want to probably create some kind of field for this so serialised field this is going to be a string mouse hover sound name if you want to and that's just going to be equal to button hover and down here we call audio manager top play sound Mouse hover sound then undo quit and retry we want to play another sound that's going to be another serialize field and this is going to be the string button press sound that's going to be equal to button press there we go we add that here button press sound and we add that here perfect and now we go under our game over find our retry button or or our quit button add a new component which is going to be the event trigger add a new event type of type pointer enter hit the plus sign drag in the game of your objects go under game / UI and hit the on mouse over there we go and let's just copy this component and paste it over here good and we can just go out and hit and this is not a prefab so that must basically all we needed to do for that let's just hit play here actually let's test this out when we have also got the game over sound working so under our TM object here we need to add another sound and if we go into the kill player here we can see that destroy remaining lives if remainings lives remaining lives are below or equal to zero then we want to end the game so we should have a method here called end game indeed we have where it simply says came over and we get the game over UI well I want to add the game over sound here so again up here let's make a short variable here this is going to be the game over sound name and that's going to be game over and we simply want to say Audio Manager top play sound game over sound name there we go then we go into our Audio Manager we have the spawn sound there but now we want to add the game over sound so let's hit 10 going to audio imput new asset game over Audio Manager drag it in you get the idea by now hopefully game over a volume of I don't know point seven and everything else is good so let's try that play just gonna jump down a few times here to 193 to you and it should happen now over there we go and we get the correct sounds here and if we do quit we can hear that and also if we hit retry perfect and we're back in the game so that was exactly how I wanted it to work and I think that and the game feels a lot more interactive now the very last sound that I want to add is a sample whenever we land after having jumped because currently there are no sounds attached to the player other than the fact that we sometimes shoot and sometimes it can feel nice if you have sounds when you collide with different things just a few sounds around the environment so I'm going to add some kind of landing sound just some footsteps whenever we hit the ground so let's go ahead and import that sound import new asset let's find the landing footsteps and you can listen here I really like the sound then we go into the audio manager and that one too this is going to be the landing foot steps drag the sound in and I think point six is probably correct maybe a bit less you should really be more careful with the mixing than I am here I'm just trying to get all the sounds in here this video is all really ridiculous and probably split into two parts anyways so we're going to have a random volume of like point one or two maybe even and a random pitch of 0.1 and we can just apply that and that's basically all we need to do with the audio manager then on to our player we should have our platformer character to the script this is what controls our movement and this is a very long and confusing script but I'm going to show you exactly where we need to go in and change things first off we need to add a serialized field up here and this is simply going to be a string against knowing the name of our lining footsteps you could just hard code this in if you wanted to so landing or yeah landing sound name it's going to be equal to landing today Kevin lies that landing foot steps I've been programming for too long yeah so that was capitalized let's just do that close it off and then in our fixed update will click the store a boolean called was grounded and set that equal to grounded and then down here we're going to say if once grounded it's not equal to grounded meaning that our state has changed and grounded it's equal to true meaning that our state changed from not on the ground to being on the ground well then we want to play a sound and again we want a reference to Audio Manager for that I don't know if I want to go in and actually catch this just for good orders sake we'll do it so let's have an on your manager god I've done this many times today on you manager and then in the void start method see if our Audio Manager equals audio manager turned instance if on your manager is equal to null debug era this is why we write error messages go no audio audio manager found this way I will be so thankful if this actually throws an error good and why is with a an H there we go and then we down here say audio manager got play sound and the sound we want to play is the landing sound name good save save save save jump into unity close that close that clear that and now ladies and gentlemen hopefully yes we hear some landing footsteps whenever we hit the ground nothing loud fairly subtle they might actually be too loud already so change them down to 0.5 and then we'll call this a day that is it we've successfully added sound to our game made it sync between scenes transition beautifully all of that it's a very easy workflow for adding sounds to your game I mean just look at how much we were able to accomplish at this fairly low of amount of time so thanks a lot for watching I will just mess around with this for a second and then I'll see you in the next video funny three two one