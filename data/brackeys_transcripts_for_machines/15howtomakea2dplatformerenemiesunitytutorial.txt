thanks for tuning in at braies hello everyone and welcome to video number 15 in the how to make a 2d platformer course in today's video we're going to make our enemy search for our player whenever he dies so that it will continue chasing him when he spawns back in we're also going to make on the first part at least of the central enemy component which is going to store health and uh other stats and functionality for uh destroying this enemy and maybe making it spawn or something we'll see about that I've planned some of this to tal out completely in my head but I've also left some of it uh for us to figure out together because I think that it's it's good for you to see how uh to kind of figure some of these things out as we go instead of just knowing it already so um without further Ado I'll just do one quick plug here uh because I've just released UPA tool kit uh version two and uh this new version uh is not backwards compatible because it's features a lot and lot of changes uh it's much better now i' I've used a a new method for serialization of your images um it introduces a layer system it's just generally much better uh structured uh so really check it out it's it's totally awesome if you want to make pixel art in unity for free cool so uh as always if you have any questions go to the forums and uh let's just stick right into it so as you can see I have done nothing since we left our scene last time here you can see we have our enemy AI script and our alien spaceship right here and what I want to do with this is just drag it under the prefabs folder so we can spawn multiple enemies later like that and uh you can see when I hit play it will chase after us um and uh if you enable gizmos up here and select the spaceship uh we should also be able to see if we open up the Seeker script here we should be able to see the path that it draws to our player so that's just a bit useful when debugging cool but the issue as is is that when we jump down and we die 2 1 and we hear this spawning sound I'm just going to disable my monitors here you can see that the enemy doesn't chase us it just uh has this point that goes down here but it's stationary so the way to fix this is sticking into the enemy AI script so double click that to open it up in monod develop here I'm just going to zoom in a bit on this maximize it so it's easier for you to read and you can see that we have a few checks here checking if our Target is equal to null and currently we just Panic uh we do the same in the fixed update function and in the update path enumerator method so what we do here is instead of just returning each time we want to now start looking for the player so let's first off make a private Boolean that is going to tell us whether we are looking for the player or not so searching for player it's good to give uh keep these long descriptive names you're going to thank yourself later if your scripts gets uh script gets really long uh and we're just going to default that to false then inside of our start function uh here we can write out uh kind of what we want to happen if our Target equals nor we don't want to panic instead what we want to do is we want to check if we are searching for the the player uh because if we already doing that then we don't want to do anything in here so we're going to say if we are not searching for the player and then we can do some functionality inside of this like this and uh what we then want to do is we first off want to uh set searching for player to true and then we want to actually search and uh in doing this what I want to do is basically call a method more specifically an i enumerator method uh that we can then uh do all our uh searching L logic in and then it's going to call itself uh with some delay if uh we haven't found what we were looking for so it's going to search maybe each second or two times a second or something like that so we don't do our searching every frame because looking through uh a bunch of game objects especially if you have a large scene can be pretty taxing there's no reason to do such a large search every frame so in order to do this uh what I want to do is I want to say start Co routine and in here we can call the method that is going to do our searching and we're just going to call this search for player and remember the open and close parenthesis there so I think this should be good we're going to say that we are starting to search for our player and we going going to call the uh search for player method then down here maybe above the uh update path I enumerator you can put it whever you want we're going to type I enumerator search for player and this should stop being read in a second and then uh open and close our parentheses and then put in some brackets and now you can see that it stops being read up there because now it can find and the method inside of the script uh then what we do inside of this method is um first off we um we want to uh do a game object. find so we uh do game object whoops game object. find game object with tag and make sure this is singular and then in here we can put whatever tag you want I'm just going to put in player uh if you want uh the different enemies to search for different things you can of course make this a variable just a simple string and uh then you can input it in the hierarchy or in the inspector I mean uh I'm just going to hardcoded here um but you might be better off doing something else cool but we want to store this in a temporary rary variable uh called game object of type game object I mean and we're going to call this uh s result for search result the reason why we don't just directly equal Target to this variable or to this value here is that this is going to return a game object so in order for this to be valid we would have to do dot transform and we can't access the trans form parameter if this doesn't find anything so first we store it in a variable then we check if that variable has is is equal to null or not and then we can assign it to the Target so now we say if search result uh is equal to null then we can stop searching so if we if this uh or or then we can uh I'm sorry then we can continue searching and we do this by uh calling again the search for player method but with a short delay so let's type in in yield return new wait 4 seconds remember we've done this down here and then we're going to put in and you could do an update rate again I'm just going to hard code this to 0.5f seconds that's how much is going to to be between each update and then uh down here we can then start a code routine and this is going to be the same code routine that we're currently in so search for player and that way we simply going to Loop so what we have uh yet is that if our Target is equal to null and we are not searching for the player we're going to start searching for the player and make sure that we store this in a variable then it's going to jump down here it's going to find uh the results for uh game object with tag player it's going to store it in a temporary variable we're going to check if it's found something and if it hasn't we're going to wait for half a second and then we're going to repeat uh the searching if it has found something so else if it has found something what we want to do is we want to first off say that we have found what we were looking for so we don't want to uh S search anymore so searching for player equals false we also want to set our Target equal to S result. transform and we also want to return and remember whenever you're inside an iron numerator in order to return we need to put in some kind of bullan value I'm just going to put in false and then lastly we want to start updating our path again because down here what we do when our Target is equal to null is we return and whenever you return out of an i enumerator or any other method that isn't called again uh it's going to stop going so our update path here is simply going to stop stop updating so we want it to or we want to tell it that it should start updating again so we're going to type in start Cod routine update path remember the parenthesis and a semicolon and this way we loop back into the update path method now we can take this uh checking um uh this if statement block up here and we can simply uh copy this and we can replace this one with that and we can replace this one with that now when we hit save hopefully we don't get any errors we do let's see here an object of type convertible to Bull is required for the return statement have has we um have we forgot anything here so here we're going to return false again this is an ion numerator and uh down here we simply going to return so that should fix it indeed it did let's try this out so hit the play button it's going to look for us and it's going to work just fine then when we jump down it's going to stop doing anything when we spawn back in it's going to search for us again and you see the delay there of half a second is not something that you would ever notice uh you might even bump that down to 1 second if you are uh really optimizing your game um maybe if you're doing mobile or or anything like that cool so that was the first and most important part of this tutorial sort to say this fixed the most apparent bar uh and I'm just going to close down this enemy AI here and move it into the scripts folder because it's no longer needed and now we can continue on to the stuff that I haven't quite planned out but which should be pretty fun which is uh actually writing out an enemy component uh that is going to be Central for any enemy that we have so let's hit add compon component new script and you can see I've already typed it there enemy and it's going to be of uh type c then we hit create an ad double click it to open it up in mono develop here and uh what I want to do here is basically copy uh a lot of the functionality that we have within our player script because they they're going to be fairly similar so we can simply take all of the stuff inside of the class here copy it in here then we can simply rename player stats to enemy stats U we still going to have a health then we can uh rename this here also to fit enemy stats here and it's going to be a new enemy stats there and then I actually don't want to do player stats I think stats is is quite okay and then down here simply do stats rename that to Stats we can delete the update State function and the fault boundary and uh down here if we don't want this method uh to be called damage player we want this to be called damage enemy and uh then in here we don't want to kill the player whenever our health goes below zero we want it to kill an enemy so we need to go into the game master script and uh do a kill enemy uh method so we're going to do game master. kill enemy and we're going to give it this and uh then we're going to put in a semicolon save that now we can go back into um or into can find the game master script double click that and you can see here whoops that we have a bunch of convenience methods sort of say that handle all of the respawning of the player and the killing of the player uh um separately from the player itself and I want to do the same here with the Enemy because it's just better to have this um Central uh game master that does all of the respawning and all that uh so you don't have to uh reference yourself and uh do weird things when you want to do things after the uh object has been destroyed such as um doing a sound or whatever so what we want to do in here is first of all just kill off the agent spaceship we simp they want to call a destroyer method and uh we do this by making a new method here we're going to call it a public static um void and we're going to call it kill enemy we're going to take in an enemy which we're going to call enemy and uh then inside of the U curly brackets here we simply going to uh call a destroy method and give it as the input the enemy. game object this is very simply similar to The Kill player method up there so let's see if this works we're going to save this out our errors disappear and uh this looks like it looks like it's working but currently we have no way of damaging our spaceship because we actually have a um damage enemy method available but we're not calling it anywhere so as you can see right now when we hit play and click there oops lots of paths here uh it's quite annoying I know you can disable these but first off I just want to see here we hit alien Spa spaceship and did 10 damage we call out these debug.log statements but we are not actually doing any damage so if we double click that it'll take us right to the point in our weapon. CS script which sits on our player somewhere on our player on the arm on the pistol here you can see this script sits right here and inside of this we are not currently doing any damage we simply are calling a debug.log so what we want to do in here is uh maybe we can keep the debug. log for now um it's it's nice to have but we can also check if hit dot actually let's do it this way we're going to store an enemy component call this enemy uh and we're going to equal that to hit. get component whoops hit. game objects for some reason this is not really doing what I wanted to hit. collider do game object or get component yeah we can do a get component directly on that and uh we're going to get the component type of of enemy and uh we're going to Simply close that off and then we're going to check if enemy uh is not equal to null so if we have actually hit an enemy we're going to damage it so we're going to say enemy dot um damage enemy and we're going to give it the damage amount of damage so save that and then in here uh we can make this debug.log statement um exclusive to the enemies so we're only going to call that whenever we actually damage something so now let's close that down clear out the logs here and we can see we have some kind of error I'm going to bring the console log down here so it's easier to read um it has some invalid arguments are we for some reason doing a damage um variable of type float here yes indeed we are so let's make that into an integer let's see if that gives us another error no that just clears it out and let's hit play so now you can see I'm just going to pause here so now you can see that whoops actually I want to maximize this so now you can see that when we are hitting our enemy enough times that it healths its Health goes down it will just destroy itself so that's super cool uh currently we have our alien over here and it stats is set to a 100 health and our pistol is set to do 10 damage so let's see if if that is that is indeed correct uh currently we are shooting really really quickly I'm just going to set that fire rate back down to zero so we only so we need to click each time and I'm going to click 1 2 3 4 5 6 7 8 9 10 and then it goes down so it's uh this is a really cool system because we have the stats isolated we have the weapon isolated we have the destroying isolated in the game master script and uh so this is really flexible and allows us to easily add components such as a enemy health bar which I would very much like to do um soon so that was pretty much all I had to show for this tutorial I hope that you were able to follow uh even though I haven't uh I had not quite planned out everything uh step by step but I just thought it was really important to sometime show you the actual process of figuring these things out so again thanks for watching I hope you enjoyed it and I'll see you in the next video oh