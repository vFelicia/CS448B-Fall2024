thanks for tuning in at brakus hello and welcome to video number six in creating a tower defense game in unity today we're going to be focusing on something very essential to the game which is building turrets so without further ado let's just dig right into it you can see that I'm here in unity and what I want to focus on is each of these individual nodes so if we go ahead and find our prefab node prefab here under the prefabs folder let's go ahead and add a component to this cold node and let's go ahead and open this up in Visual Studio so the node script here is going to be responsible for groups let's do that one more time it's going to be responsible for keeping track of whether or not we have something built on top of that node it will also handle some user input so it will make sure to kind of highlight the node when we hover over it to give the user some visual feedback that he can actually press it and something will happen it will also be responsible for checking whether or not the player has pressed that particular node and then building something on top of it if not if something isn't there already so that's what we are going to be using this script for let's begin by making it clear to the user that he can build something here by creating a hover animation and the way we are going to do this is using void on Mouse enter and this is a callback function used by unity just like start or update or on collision and it's basically cold every time the mouse enters the confines of the collider of this object so every time the mouse just passes by or enters the collider this is going to be cold and it's only going to be cold once when you do that so it's not going to call continuously when you hover over and this makes it a great place to change the color of an object and the way we do this is by calling getcomponent and finding the renderer component that sits on our object that's this one right here and that's of course responsible for keeping track of our material so we can go ahead and our current material which is just the first one in the list here and because we only have one that's our default material and then that material has a color that we can set so we're going to set that equal to some color and let's go ahead and make that color defined in the inspector so let's make a public color up here which is going to be our hover color and simply close that off and we can then put our hover color down here and this is going to work just fine however I really want to optimize this just a bit so instead of finding the renderer each time our mouse enters to Collider let's only find it once at the very beginning of the game and then cache it which means storage in a kind of in a private variable which only purpose is storing this information so we don't have to get it all the time so let's make a private renderer and let's just call this our rent and the reason why I don't call it renderer is that renderer is a keyword used by unity and then we have to go and make a private new or we write it and that kind of stuff so use rent or R or whatever and then in this side method here I'm going to create a start method we're going to set rent equal to that get component renderer and now we can instead of using this entire piece of code we can just put rent down here and that's going to work fine and it's going to be more optimized great so on this is going to work however we also want to set the color back to the start color the default color when the mouse exits the collider so down here we're going to make a void on Mouse exit and this does exactly what you would think it does it's again a Unity callback that is called when the mouse now exits the collider and here we can set rent dot material dot color and because our game object here our nodes are wide we could just set it equal to color dot wide however that would look weird if we later decide to change the color of our nodes so instead what we're going to do is we're going to store our start color at the beginning of the game and then we can set it back down here whoo excuse me so we're going to go ahead and make a private color variable and this is going to be our start color and in our stat method we can set start color equal to Rend material dot color and now we've stored that as well and we can put that down there so when our mouse enters we're going to set our current object color to hover color and when it exits we're going to set it back to the start color which we make sure to get at the very start of the game so if I save this now and set our hover color to something that maybe would look a bit better than completely black just some kind of gray here we should see this working so make sure you're hovering over inside the game view and you can see very clearly now that this animation is there and you really want to start pressing these nodes now great so make sure you always leave these small visual cues to let the user know where to press and yeah good so without further ado let's jump back into our node script and that was the visual part what we want to do now is we want to have this node store some information and the first piece of information and maybe the most important piece is the turret that is currently built on top of this node and if there is no chart build we are simply going to have this variable be null so we'll keep track of this using a private game object variable and this is just going to be the current the current toreador I'm just going to call it turret and then we will have a Noddy method down here that is called only when we click that node so as just like we have mouse enter and mouse act exit we also have on Mouse down and this is called when we press down the mouse button while hovering over that object and here we want to say that if our turret is not equal to null meaning that we've already built something here well then we want to throw out some kind of to the user saying well we can't build here because that's already something there lady we might have something like selecting the turret and then selling it for less money than what you bought it for maybe upgrading it and we should definitely also have this message here this can't build their message we should display that on the screen so that the user know why nothing is happening but for now we'll just display this in the debug lock so and I mean in the console so we can maybe put in here to do display on screen just to let us know and then we will return out of this method great so if our chart is equal to null meaning that if we don't have anything built here we want to go ahead and build a turret and this is super easy we've done this a million times you reference some kind of prefab you instantiate the prefab at a position and a rotation and then you can do some stuff with it like destroyed later or something like that but that is the very basics however we might want to have we definitely want to have more than one turret currently we only have one turn type just to standard turret it with a standard range and damage and all that currently does a lot of damage but later this will be kind of the beginning turret and then you want stuff like maybe a missile launcher you want something that slows the opponent you could have something like a something with fire or whatever you want to do and you want the user to be able to select what turn to build and there are multiple ways of doing this my idea is that we create some kind of build manager that will have some kind of UI with different turrets that you will press and after having selected one you can then press on the nodes to build them so that's what we are going to do and therefore instead of just referencing this toward in here let's go ahead and create that build manager right away just so we have a kind of a skeleton kind of a rig to build on top of so I will just draw this out here so let's find our game master script or game master object let's add a new component here called build manager and this build manager is going to be very empty at the moment don't know why it does that let's try that again it's going to be very barebones but what we essentially need is some kind of private armed game object and this is going to be our turret to build and by default this is not going to be equal to anything it's not going to be equal to anything until we tell it what turret we need to build and then we want some kind of way of getting this turret to build and therefore let's make a public void or actually a public game object called get chart to build and we'll be able to call this from other scripts and it will return the turret to build so this is just a nice way of calling a method and then getting what turd we want to currently build um excuse me however we still need a reference to our build manager and you can see inside of our node here and that we could go up here and add a public build manager and then say that and go in here and reference it but then we would have all of these notes storing their own reference to the build manager and that would very quickly become well frankly really annoying to deal with so what we're going to do instead so we're going to delete that and then we are going to go into the build manager and make this available without a reference and the way we do this is by using kind of a very simplified version of what is called a singleton pattern and a singleton pattern is basically a way to get the carnot or to make sure that there's only one instance of the build manager in the scene that's only one build manager and making it easy to access that instance so we will go ahead and create a public static variable public because we want to access and access it from without the class and static because we want this to be shared by all build managers we only want this to be one build manager one that is central to the build manager type and we will call make this a build manager and we will call this instance so this variable is a build manager inside the build management it stores the build manager and it basically just stores a reference to itself and that quickly becomes confusing but if we now go into the and create a awake method which is called right before start we can go in here and set instance equal to this so what we're doing is basically every time we start the game that's only going to be one build manager which is this one and it's going to call the awake method I'm just going to say that this build manager right here the one that we are writing the script in here this build manager is going to be put into this instance variable and this instance variable can be accessed from anywhere so now we have a reference to that build manager you can also see that a problem occurs if we then have multiple build managers inside of our scene if we were to go in here and add another build manager here go in and add another build manager now we have a problem because now they will both call this awake method and the first one will set the instance equal to this and then the second one will set the instance equal to the second and then instance can only be equal to one of them at a time and then one of them will mulch just sit idle and not be used at all so this is a really great way of doing it if you know that you only have one instance in there and you can even make an error check we could go in and say if we should put this above the current piece of code here so if instance is not equal to null before we set it well that means that it's been set before and then we can debug that log error that more than one build manager inseam and that's a problem so we're going to return and just let ourselves know okay and this final thing that we want to do here is make a let's do that down here to keep our singleton stuff up there let's make a reference to our standard turret so we're going to make a public game object and this is going to be our standard turret prefab and it will just allow us to drag the turret in there from the inspector and then what we will do is we will have the turret to build default to that standard turd so we will say that turn to build equals standard turd pea prefab right off the bat and then later we can go in and change it by clicking on some other turrets and add a whole piece of UI to go with that so our turn to build will just be our standard prefab and when we then get the turd to build it's going to return that so in here what we can say is we can simply say and that we want to store a turret to build in a temporary variable and we want that to be equal to build manager dot instance again we get the current build manager active dot and now we can say get chart to build and it's going to go in here call this and return the turret to build which which is currently equal to the standard turret prefab and then we can instantiate this as we've done many times before we can go in here and say instantiate the turret to build at our current position transform that position with a car in rotation transform rotation something like that and then we want to set our turret up here equal to that instantiated object so we set turd equal to that and whenever we do this we need to remember to cast this into a game object again it's just something you have to do so if you find some of this code here with the instancing and the singleton patterns and stuff to be confusing I completely get it I was very confused by this in the beginning singleton patterns or at least these very similar ones there's something that you can't really avoid when when programming at least if you want to get a bit more advanced with it but what you can do is now for now just just memorize how this works and then later you can try and understand why it is exactly that we do it this way so for now just try and see if you can remember and then don't worry about understanding it too much so cool now we have instantiated this turret and everything should be working so now we can jump back into unity we can clear the console we can see that our build manager now has a standard chart prefab slot and I'm going to go in here and rename our turret to the standard turret and then we can have multiple different turret versions in the future let's find our game master and drag our standard turn in there and again I just deleted the three turrets that we currently have in the scene and now when I hit play we should be able to actually build the turret and you can see that we are however it kind of sits inside of our node object so what we want to do is simply take this and offset it by 0.5 on the Y so let's go in here and create a offset and we can make this a variable in here just like on the hover color so we are going to have a vector 3 and this is going to be the position offset and we can set that inside the inspector and then down here we take our current position and we simply add onto that our precision offset it's really that easy so now we can go in and find our node prefab and we can find our position off it off set and set that to 0.5 on the Y and now when we play everything should actually be working so if I go in here and I press this you can see that our turn sits nicely on top of the node and you can see that no matter how many charts are placed here they are all working and if I try and place a turret on top of another turret so you can see it press here it says can't build there to do display this on the screen so now we're able to build turrets inside of the game and they will just immediately work and we have a nice hover animation and we have a centralized way of dealing with what turrets we want to build called the build manager so that was all for this video I hope you enjoy and most of it and if you were able to understand all of it great job if not don't worry about it and without further ado thanks for watching and I'll see you in the next video thank you so much to all of the awesome patreon supporters who donated in July and a special thanks to Vic's infamous own and UK and Locke's game TV these videos wouldn't be possible without you