hello everyone and welcome to the 15th video in our create a survival game series done by bra keys I am the CEO of bra keys and today we are going to be taking a look at Advanced AI so scripting more advanced enemy functionality it's going to be awesome and it's going to be difficult um so if this is uh too much for you at any point you can always just go ahead and download the script from our website or uh simply go with the AI Syle uh version which is also available for download and which I have made an a video on earlier but that's it for the intro as always I have opened up unity and let me just quickly clean up from the last tutorial I did which was actually not uh title as a part of the series it was more like a standalone video where I showed how to create a gun and create some shooting mechanics and there we made this script this rast shooting so I'm just going to go ahead and drag that under the scripts and this bullet hit uh which was a particle with some Sparks emitting and I'm just going to drag that under the prefabs except that nothing has changed um if we go under the player the main camera the Mele you can see that there is now a gun object which is just just an empty game object with the Rea shooting script um so that's pretty much it now let's go ahead and get started so select the enemy which I have dragged over to the town so we can test uh some stuff with him without having to run a whole lot let's go ahead and disable the AI symbol I'll just keep it for now and let's hit the add component and new script and call this um you could do AI you could do Advanced AI I'm going to type Advanced AI so Advanced AI it's going to be a type JavaScript as always and there we go um one thing to keep in mind though with the script we are not going to be using the capsule collider we are going to be using some more advanced movement where we can apply gravity and some forces so that our enemy will actually be able to uh fall to the ground fall down uh different uh places and collide with wall walls and such instead of just going through them so we'll disable the capsule collider by right clicking remove component and hit the add component button go to physics and now changed it to the character controller um this gives us a whole lot more different uh possibilities and settings and scripting functionality that we can can play around with now let's go ahead and actually create the advanced AI script and the way I want to do this is simply use what we made in the last tutorial with the simple Ai and uh modify it a bit so let's go ahead and double click the advanced AI to open it up in mono develop and there it is and we can just go ahead in under the simple AI under the scripts folder and open that as well there it is and let's just go ahead for now and copy all of this over to our Advanced Ai and delete the prma strict and so now they look also very uh similar and uh all right let's go ahead and adding some stuff now first of all I want to create a bunch of variables because currently we have a set up so whenever our object chases something uh it is done in the function called attack I would want to change this name to Chase and so also when we called it in the if distance we want this to be changed Chase and we are going to change the name of this attack range to chase range and add yet another variable up here called Chase range which is going to be 15 and the attack range is now going to be a whole lot less we could try something like 1.5 because our um our melee distance is uh about 1.5 five that's what I have set it up to be and so um that's it for changing the change r range just to make it everything a little more clear now we can go ahead and add some more stuff let's add a um a actual attack function so function attack the parenthesis and uh so we just type that in there and then in a second we'll add some logic too but first I want to change how the um how the enemy actually behaves and moves because at the uh moment the enemy behaves through a transform position so it simply draws a line and moves in the direction of that line and that line will always Point towards the player um but that doesn't enable stuff like collision and gravity uh so we actually want to use the building function in the uh cure controller to take care of the movement so this is done by uh making some new variables so let's make a new variable and let's call this let me see let's call this the controller so just actually let's just call the controller and it's going to be a type character controller like that and let's also make a another variable called gravity just making some space variable gravity and uh so gravity and let's set this to a type float and it's going to be equal to by default I would say 20 is a very good amount um so just type 20 then we are going to make a private variable called move Direction move Direction and it's going to be a type Vector 3 and it's going to be equal to Vector 3 equals uh no Vector 3 do Z so um this is simply a 3D coordinate and uh it's just going to be 0 0 0 and uh we have the gravity um it's pretty much selfexplanatory and the variable controller is just so we can actually call the movement through the controllers look let's go ahead into unity and see the controller now appearing and what you're going to do here is You're simply going to grab this uh component and drag it under the character controller also let's remember to assign the player to a Target and uh these two things can always be done through scripting in the start function for example uh or if you have the player is spawning uh during the game you can have a function assigning the two variables using the game object. find and the uh get component so let's go ahead and uh open up the script again and uh let's now start uh implementing some stuff so uh under the Chase let me see where do we have it there uh under our Chase we now want to write some different things so first of all I would like the render outmaterial docolor to go down under the actual Chase function so I'll just quickly move that down here I just like it better that way oops and delete the spaces and we could go ahead and do the same with the uh look distance I don't know um here the look at we'll just move that under the actual look at function so and in the chase here it's this line we want to change because as you can see it it is translating it is moving in the forward position with a certain speed and we want this to be done through the character controller and I I won't explain exactly how it works but just know that you can create realistic movement this way so let's type move Direction equals transform. forward new line move Direction time equals move speed and new section move Direction actually I'll also make a section between the renderer and the move Direction stuff move Direction doy minus equals gravity times time do Delta time and if you uh can't remember time. Delta time simply um handles the uh time scaling and frame rate problems that you might have and uh right below this line we're going to write controller the variable starring the controller move in the move Direction time time time. Delta time all right so this pretty much takes care of the New Movement functionality let's take a look at what's actually happening here so first off we want the move direction to be equal to the forward movement so we want the direction that it should move to be forward then we want the move speed to in influence the move Direction so that we can tell it how fast it should move then we want the move direction to doy meaning the up and down to uh be influenced by the gravity variable and then at last we want to actually move the controller so let's go into our game and see if this works so I've opened up Unity here and uh let's go ahead and hit play and you can see the character control the character is now looking at us and then it indeed it starts moving once we get close enough and um I don't know if you can see this but it actually stays on the ground and we should also be able um to show that it collides with walls so if I drag it on into the town and hit play it actually stops on the other side of the wall so um that's it for making it collide and move more realistically now we have a few more things to add because we also want this to attack and we want it to rotate a bit different um or um maybe no we'll save that for another tutorial for now we just want to create create the attacking also so to do this let's create some functionality in the attack function and let's also make sure that the attack function is being called let's first make sure that it's being called so here under the if distance is uh is less than the TR Chase range then it should Chase I want to create a new if state statement right above that so if distance is less than attack range then we wanted to open up the brackets attack soal the attack function now if I just do it like this then our enemy won't actually stop whenever it's attacking so now if I hit play it will just keep on chasing me and uh it can Buck out in the positioning and push me uh which is not something we want even though it's trying to attack me so we want it to stop in a somewhat uh Fair uh range and then start attacking and if I then get out of its attack range we want it to start changing chasing again and this is done by making this if statement into an else if so this if St statement says if the distance is like less than attack range so if the enemy is able to attack then it should attack but then it should also stop chasing so if that is not the case else so if these requirements isn't met then we wanted to check if the distance is is under the chase range and then chases so if we do it this way and hit play even though we don't have any logic inside of a attack function once it gets inside of that range it stops and we can easily increase the range uh by going into our enemy uh by selecting our enemy and going under the advanced AI script and taking the attack range and bumping it up so let's say uh let's try out with a three and uh wait it maximized the wrong window there we go so now it should actually attack and there you go in the distance of three units it stops so uh let's just change that back to 1. five and uh make some attack functionality so go under the function attack and inside of this we want to do uh quite a few things we want to type the debug do log attack and the debug.log is useful for many things I like to use it uh for bug fixing if I am not sure what is being called or if it's just simply telling myself that I need to place some logic here so for now we won't actually be scripting the damaging of the player and the dying of the player but we will be scripting everything except that so we will be making everything that handles when the player should lose damage and maybe even how much but we won't be scripting what actually happens so this this could be I could name this insert attack here so that could be an animation or some other logic so let's see what actually happens here a deall dolog will be will be shown inside of the console window so when I hit play and the enemy goes near and starts attacking you can see a whole lot of debug. logs start appear appear inside of the console window and this is of course way too much uh at as is the uh the enemy is attacking us every frame so that's really not what we want we wanted to be attacking with a um interval of about 1 to 2 seconds so let's script that now this can be a little hard to understand but let's start out by making some variables in the top so under the damping we want to type VAR attack repeat time equals 1 make some more space private VAR attack time is going to be a type float I'm going to explain all of this in one second now let's just write it out another variable called attack now is going to be equal to true and uh you could make this private I'm going to go ahead and do that all right so I just got interrupted but we'll continue where we left off I'm sorry about this um one thing I noticed is that we don't actually need the the attack now since we are calling the attack through a function and not an if statement so uh we'll just leave that uh or or we'll just delete that and uh let me go ahead and quickly explain what these two variables are going to do for us the variable attack repeat time is the amount of seconds that will uh pass by between every attack so the enemy hits us and the attack attack repeat time is the interval between every hit uh the private VAR attack time is going to store the time. time and uh time. time can be a little difficult to understand but let's just quickly go ahead and store it so function start we want to store it in the start function because uh time. time cannot be stored inside of the variable declaration we have to do this when the game actually start so we're going to type function start and inside of the function start we're going to type attack time equals time. time and I S my colon all right so uh this will help us in counting out the interval so now let's uh go down to the function attack and actually create the code so in the function attack we're going to type if if time. time is greater than attack time and open up the brackets we want the debug lock statement to be inside of these brackets like that and under the attacking itself under the insert attack here we want to type attack time equals time do time plus attack repeat time tag repeat time and so what we are doing here is we are basically checking if we can attack again use the current time and the uh which we are storing in a variable and uh then adding up with the attack repeat time which is the intervals so uh that's basically it for the uh spacing out of the attacking so uh let's go ahead and try to hit play go under the console so we can see what happens so our enemy gets near it attacks it attacks and you can slowly see the different attack locks start appearing in the console just like they should so um and uh this variable can of course be tweaked inside of the enemy so you can just go ahead and re uh increase or reduce the attack repeat time depending on which kind of weapon um the enemy is wielding and how strong he is and different factors so that's it for that now let's go back into the script because I want to create one more thing to make our enemy a little more realistic and this is uh a function that simply uh makes it so that uh whenever we uh hit the enemy the enemy gets more mad at us and therefore will change chase us longer we'll move faster because now he's running after us he's Furious and uh also he will look more after us so they look at distance will also be increased and because we have already made a um a system where we send out a uh function or send out a message to whatever we hit that the function apply damage should be called we can just make a function called apply damage and open up the brackets and inside of here write whatever we want to happen when the enemy gets hit and in this case I want the change Chase range to be increased by 30 I also want the move speed to be increased by two and I want the look at distance to be increased by 40 and therefore whenever we go into Unity again and hit play and select our enemy in the heart key and take a look at the right hand side at the different variables here so we hit play you can see that right now the look at distance is at 25 the chase range is at 15 and the move speed is at five when I hit it everything goes up and now it's harder to escape the Rage of the enemy so uh that is it for the advanced part of this AI to tutorial I hope you enjoyed it and uh I know that some things I did not explain all the way through but that's because this is mostly a beginner's tutorial and therefore I don't expect you to understand everything at the moment um but there you go now you have some pretty damn decent um enemy AI which you can Implement into pretty much any game of this type and uh thank you for watching I'll see you in the next video