thanks for tuning in at braies hello everyone and welcome to the second video on making a quiz game in unity in this video we're going to start programming the game in C and today we're only going to be programming the back end some of the actual functionality and then in the next video we'll have a look at showing this on the UI so today we'll only be using uh Visual Studio to program in uh you can of course use mono develop that comes with unity it doesn't matter that's just the uh script editor and uh then we'll be using the unity console to display what we're making so that's all so without further do let's jump right into Unity here and you can see the project is exactly as we left it the last time uh and if I go into the material UI you can see that we uh used the starter scene here I now want to uh rename this to our main level and I want to take this and drag it under the assets folder just so we have our main level scene here on you could also just call it main or whatever actually I'm just going to call it main since the idea of levels is not something we're working with in this game now let's go ahead and create an empty object by right clicking in the higher key and select create empty let's drag this to the top let's reset the transform and rename this to uh game manager and this is going to host the central script containing all of the logic that our game needs and one second let me just move wire out the way here uh so the game manager containing all of the uh game logic it will uh load in questions it will choose a random question it will check whether or not it's true or false and it will uh load the next question so that's what that will do and then we also going to add a separate script down here so right click create C script and we're going to call this one question because this is going to be storing uh what information we want to have for each question and now we we can go ahead and double click this and you can see again mine is opening in visual studio uh if yours is opening in Mano develop that's just fine it's not going to make any actual difference it's just going to look a tiny bit different here so you can see here uh that uh we can first off delete these two using tags because we are not going to uh be using either Unity engine or uh system. collections we can delete the derived from mono behavior and we can delete these two starter methods so we just have an empty class and C is of course an objectoriented programming language and that means that we have the ability to sketch out and describe different objects in our game and the first object we're creating here is a question and that's not only the um question itself I mean that could be um is their water on Mars uh that's just a simple string we also need to have some kind of understanding of an answer so that could be one example or multiple answer options should also be within this question class so whatever information is associated with a single question is something we are going to store in here and uh the first thing I want to do here is I want to tag this as a system. serializable and all this means is that it will notify unity and the system that this class uh can be saved and store information and the cool thing uh that this will allow us to do is edit it in the inspector when we implemented later so we can uh make all of our different questions not in here but inside of unity and that's going to be true luxury so the first thing that we want to do here is make a public string this is this of course being some kind of text and uh this string is going to be called fact because in my game I want um uh to display a series of facts that are either true or false and then the user can guess whether or not they are true or false so the question here is going to be the fact it could also be the uh actual question you can't do question here and then simply Call It by Say question. question but I'm going to call this fact and then we're going to have a public Boolean that is either true or false and this is going to store whether or not the fact is true so this is just going to be called is true and notice that I'm not setting any defaults for this I'm not setting them to any particular values I'm just saying that this is what needs to be inside of the question class now we can move on to uh the other script we created which is the game manager script and uh here we can uh keep both Unity engine and system. collections we are going to be needing them both and uh derived from mono behavior however we are going to remove these two methods and the first first thing that we want to create here is uh some kind of list of questions more specifically we're going to be using an array remember in C we have two different ways uh that primarily two different ways of storing a series of data and uh those are called arrays and lists and they both list just a bunch of data that are associated with a number in the list but the array is used when we don't need to resize the list and the list is used when we do need to resize it at runtime so you can see here because we are always going to have a fixed set of questions uh that we specify beforehand before running the game we can use an array and to declare an array we do a public question so uh we don't want this to be a single question we want this to be an array so we go like that and uh then we call this questions so this is this is a list of uh questions uh specified by the question class then inside of our start method and this is called whenever we start the game or we reload the scene well we want to have some kind of uh uh well right now we have a list that stores all of the different uh questions we've created and if we go ahead and minimize visual studio and go back into unity and select the game manager you can see here that it's already appeared in the inspector again you need to make sure that you've tagged the questing class as system that's serializable or it's not going to appear but if we go over here now we have this array and we can make this a size of three and we now have three different element three different questions in here that we can configure so the first fact could be um I am a genius and I apparently don't seem to be because I can't spell genius so I am super cool and this of course just happens to be true uh we have another fact which is violets are red and that's not uh that's not true and then we have uh the final uh statement or fact and that is that 2 + 2 equal 4 and that happens to be true also so now we have created three different questions and uh We've specified whether or not they are true we can simply collapse these and now we know they are there so that is what is stored inside of this questions array however when running the game we want to keep track of which questions we have already answered and uh the way that I want to pick questions is I want to pick a random question but I don't want to be able to pick the same one twice and therefore we need a private and now we don't need an array we need a list because I want this list to contain all of the different questions in the beginning and then and as we answer more and more questions I want to remove them from the list so this is going to be a private and then it's going to be a static and the reason why I'm making this uh a static question uh is because I want uh this um question list to persist between scene so when we reload the scene to load in the next question on this uh um it's going to remember what is stored so I want to make a private static and in order to use a list we're going to go up here and say using system. collections. generic and now we have access to lists so a private static list and the syntax is a bit different here and then we're going to put in the question like that and then close it off uh or of course we need a name U so the name here should be uh unanswered unanswered this is not correct there we go unanswered questions and uh simply close that off then in the start method when we start our game we want to load in all of the different questions into the unanswered question so that when we begin our game for the first time all of the questions that we have available will be unanswered but we only want to do this when starting up the game we don't want this when changing scenes and start is loaded every time we change a scene or re reload a scene and therefore we need some kind of method for checking whether or not we've already done this when we haven't done this meaning by default before we load these questions in there's nothing in this list therefore it is marked as null so what we can simply do is check if unanswered questions is equal to null meaning there's nothing in the unanswered questions list well then we can go ahead and say that unanswered questions equals questions however there's a tiny problem with this uh and I'll show you that in a second the first thing that I want to point out is it is actually possible for there to be whoops looks like I hit a button there for there to be um zero elements in the list but for it to not be marked as null and that is if we have have answered all of the questions uh meaning that we've done this step and then gone through all of the questions then the amount of questions in the list will be zero but it has still been declared so it's not equal to null and therefore we need to also check uh if um if on answered questions do count meaning the elements and the number of elements in the list is equal to zero then we just want to start over and this is of course the or so we'll do this step if this is true or if this is true then down here we can't directly set a list equal to an array we simply want to take all of the things in the array and load it into the list and in order to do that easily we can go up here and say using system. link and uh what this does is it offers a bunch of methods to make stuff like this very easy so we we have now uh have the ability to say questions. to list and it's going to be a questions list and top that off and that will do that step four so um to wrap up what we've done here is we've created a an array of questions that we fill in in the inspector then when we begin the game for the very first time here uh we make sure to load those questions into a list of unanswered questions so the next task would be to get some kind of a random question and uh the current question that we uh the user can answer is something that we are going to store in a private variable so we're going to have a private uh question and this is singular because it's only one question at a time that the user can answer and uh this uh private uh question is going to be um call current question there we go and then down here we simply say um pick random question choose random question get random question whatever you want to do I'm just going to say get random question is what we want to do here and now we need to specify what that means so we'll say void get random questionis we're going to make a function here that does this for us so uh in here what we need to do is we need to choose a random number between zero and the number of elements in the unanswered questions list this way we get an index a random index that points to a random element in the list and we'll store this as an integer so this is going to be the random question index and it's going to be equal to random. range this will give us random dot do range there we go this will give us a random integer between zero and the number of elements in the unanswered questions list with which is unanswered questions. count there we go and round that off and what we can do now is we can temporarily uh we can set current question equal to and then unanswered questions and then we want the element at index random question index there we go so uh let's say right now we have uh three elements in the list this will get a um either uh zero one or two to access that element let's say we get a a one here this is going to be now one then it's going to take element number one out of the list and put it into current question so we can access it up here uh or from where we want inside the script the cool thing now is that we can simply go ahead and remove that same question so from the list now it's already answered actually it's just loaded in but we'll just U pretend like we've already answered it it's going to be basically the same thing the only Edge case would be if we went to a menu of some sorts um when right when this was happening before we actually answered it um but um that's some weird behavior that we are not going to um be uh thinking about so uh the next thing we want to do here we want to say and unanswer questions. remove add and this means that we specify an index uh of an element that we want to remove and that's of course going to be the random question index and now it's gone from the list it's simp simply like it was never there and uh we can uh make sure this way that we don't pick the same question twice good so now that we've gotten a random question let's just try and print this out in the cont so we can see that this is actually working so let's say debug.log and again we going to be displaying this in the UI in in a later video right now I simply want to see if this is working so we're going to print out uh current question. fact and then plus uh and I'm just going to make a space and then say is space plus current question do is true so we're going to print out the fact and whether or not it's true let's try that for a second and we are going to do this every time we uh hit uh play so if we go to the console here it should show one of these and the corresponding bullan value so we can see here it says violets are red is false and if we go there you can see it's marked as false we can now uh simply restart the game here it uh picked the same one we can try that again now it says I am super cool is true and indeed we said that to true however true it might actually be and now you can see that actually chose the last one here so it says 2 + 2 = 4 and that is true so you can see that it's now correctly choosing a random question it's not it uh does uh sometimes change uh the same qu or choose the same question over and over but that's because we are actually right now restarting the game and not just reloading the level when we get to the actual level reloading you will see this working so uh that was basically it for uh this video in the next one we'll have a look at uh implementing this with the UI to make it more responsive we'll uh Implement what is going to happen whenever we choose whether or not it's true or false and maybe even displayed um in some way so uh we'll have a look at that yeah so I hope you enjoyed this video If you like this format uh please let let me know in the comments and also I have a lot more coming don't worry so thanks for watching and I'll see you in the next video