when it comes to graphics there are a lot of opinions and I think that's mostly because of how vague the term graphics really is I remember while back watching a video from extra credits talking about the difference between graphics and aesthetics but graphics define the visual fidelity of a game or in other words the amount of detail and aesthetics is the actual visual style of the game now I will argue any day that aesthetics is hugely more important than graphics and I think there are countless examples of games that manage to look beautiful with very similar graphics however it's definitely useful to know what rendering techniques or graphics help define a certain look Unreal Engine is an example of an engine that for a long time has been praised for its amazing graphics something that unity has often been critiqued on but unity ants undergone a lot of changes recently in terms of rendering capability and I love the stuff that makes Unreal look like unreal it's now available inside the unity editor so here's a short guide on how you can configure unity to give more that realistic unreal look we'll be taking this graphically symbol scene and turning it into this let's get started so the first thing that we want to do is go to edit project settings and player and here under the desktop version we want to go to other settings and this option is fairly hidden but we can actually change the color space from gamma to linear now this is probably the one option that has the biggest impact on the visual look of your game the Col space determines the maths used by unity when mixing colors in lighting calculations or reading values from textures a big advantage of using linear color space is that the cult's applied to shaders will brighten linearly as light intensity increases with the alternative gamma caused face brightness will often begin to turn to white as the values go up this often leads to a very washed out learn next up we can go window lighting and then settings and in here want to make sure that we have a skybox selected if we have an outdoor scene and if we do we can go under environment lighting and change our source to skybox now this is going to add in some ambient light based on our skybox you can see it helps everything feel more part of the scene now this scene is completely rendered in real time however a lot of the detail lighting you see in triplea games it's actually baked into the scene I want going to light my baking in this video but I'll have a link in the description if you want to learn more next we can go and adjust our quality settings to that we go edit project settings quality we want to set this to ultra we leave the pixel account at team make sure to select full wrist and forced on for the textures and we actually want to get rid of the antialiasing that's because we'll apply this later as a postprocessing effect we make sure to check all of these check boxes under shadows will select very high resolution and I'm actually going to increase the shadow distance quite a bit now this is very far for a shadow distance but I think it works well for this scene we then go select our camera here we want to change the rendering path to deferred in for rendering each object is rendered in a pass for each light that effects it therefore each object might be rendered multiple times depending on how many lights are within range with deferred rendering however the render cost of lighting is proportional to the number of pixels the light illuminates instead of the number of lights themselves as a result you're no longer bound by the amount of lights that you wish to render on screen however deferred rendering actually has a much bigger upfront performance cost so what solution is best for you completely depends on your game in general if you're building a desktop application and plan to have lots of light in your scene go with deferred if you're building for mobile or VR and plan to have fewer lights in your scene go with forward I'll have a link in the description to where you can learn more we then enable allow HDR and disable MSAA dynamic range defines how very bright or dark colors are captured by cameras in your scene HDR stands for high dynamic range and can be used to capture colors with much greater precision than the standard LDR or low dynamic range this means that we don't lose detail in over or underexposed areas but we still have to define how all of this color data maps to the much lower range on our display this is done with a postprocessing effect called tone mapping so you can see the visual appearance of our scene has already changed quite a bit but the very big difference between a default scene in unreal and one in unity is post processing because by default unreal applies a lot of postprocessing effects to get these in unity we go window asset store here we'll search for the post processing stack this is a series of postprocessing effects made by Unity themselves let's hit download and import of course have a link for this in the description let's hit import again you should now see a post processing folder appear in your project panel we then select our main camera hit add component and search for post processing and here we'll select the post processing behavior takes in a profile to create a profile will right click in the project go create postprocessing profile we'll just call this CC for color correction we then select our main camera and drag that in now if we select our CC profile you can see all of the different effects that we now have available to us the first one we want to enable is color grading under here we have the possibility of adjusting or tone matter tone mapping is where we decide how our HDR color data would be displayed on screen in unity we can either configure this ourselves or use a preset provided to us called filmic this uses the Asus filmic tone mapping curve which is also the default term mapping curve in Unreal Engine 4 if you want to learn more about the math behind this curve I will have a link in the description and by default we can choose from two profiles neutral where we can adjust everything ourselves or filmic and you can see right away our scene just pops so much more next we can enable eye adaptation while playing this will mimic the effect of your eye adjusting to a certain brightness level by automatically changing the exposure of the camera based on the brightness of the scene after enabling the tone mapper and iadapt ation you often have to go in and adjust some of your brightness levels I'm gonna go to lighting and bump up the ambient light to two as well as select my directional light and change the intensity from four to seven let's then go back to a postprocessing and the rest of the effects are fairly small changes we of course want to add in some motion blur you can control how much motion blur you want using this slider the bigger the number the more the motion blur unreal also includes a vignette by default let's enable this and maybe bump down the intensity a bit if you don't have the possibility of baking your lighting you'll often also see ambient occlusion applied as approach processing effect let's enable it and you can see the shadowing that now gets applied to objects that are close to each other I mean of course adjust stuff like the radius and the intensity we can also add in a bit of bloom I want this effect to be very subtle I'll bump down the radius a bit and the intensity as well finally we can get rid of these ragged edges by applying antialiasing by default this is going to use a fairly light technique called fast approximate antialiasing let's just scale up our game view here and hit play so you can see how that looks now this definitely gets rid of the ragged edges but you will see a lot of flickering on the screen this is something that I often see people complaining about in unity but now with the new postprocessing stack we have the possibility to fix this the same way that unreal does by using another method called temporal antialiasing you see this gets rid of almost all of the jitter and makes the movement of the camera feels so much more smooth and one thing that I also want to do with a quick is good to color grading and bump up the post exposure a bit that definitely looks a lot better if you want to learn more about postprocessing I have a dedicated video on the subject now that's about all the quick to apply graphics settings I can think of now of course a million other things that you can do to amp up the graphical quality of your game some that come to mind are using reflection probes for realtime reflections and emission maps combined with bloom to get nice glowing surfaces also most people primarily use the standard shader that comes with unity now this is a really good shader because it allows you to very easily get PPR materials in your game but it does have a few limitations when it comes to highend rendering if you want stuff like refraction translucency and dynamic weather if things get a lot more tricky luckily there's a great plugin available on the unity asset store called the upper shader it works in much the same way as the standard shader but on steroids now this acid is not free but I do recommend it for anyone who's going for a super realistic look that's pretty much it for this video remember that you can make super beautiful game with even the simplest of technology as long as you remember to have fun and get creative also remember to subscribe for more tutorial can tent and other than that thanks for watching and I will see you in the next video thanks to all the awesome patreon supporters who donated in August and a special thanks to hats off yes pamekasan Thomas Wally stone gamer Sybok Nami chase nate'd Oh Derek heaps Kirk face Samara Phi who some casa kudamon aaron robert pond and peter lock if your name's not on the list I'll make sure to include it in videos later this month and the next month as well you guys Rock