thanks for tuning in at braies hello everyone welcome to this video on making a multiplayer FPS in unity today we will be improving our flying mechanic by first off adding a fuel Thruster amount or a Thruster fuel amount so that we can run out of fuel when flying and then it will replenish when we are not flying we will also be fixing the uh bug where when we fly on top of obstacles or just stuff uh higher than the actual ground plane um it will kind of collide with the ground instead of uh using that as a new base to hover over so that's something that we will fix also on to display the fuel amount will have a cool graphic uh so that's something we're also going to add so today's video is going to be super fun and super important so let's just dig right into it and you can see here that I'm in my web browser and that's because I want to mention that all of the different uh models we are using right now for the environment are placeholder they're only temporary and I'm working together with a cool friend of mine to um um U make this environment look a lot more awesome and uh if you get impatient or just want to do some of this stuff on your own maybe create uh weapons on your own a player on your own or different environment props you should check out this tutorial that the same friend of mine has made it's called introduction to 3D modeling it's a blended tutorial and it uh gives a very practical introduction on how to model some of this stuff out on your own and you can see here that he modeled a tactical grip for a weapon so it's very relevant for our tutorial you should definitely check that out so without further do let's jump back into unity and get started with today's uh subject so you can see here that currently on our player we have this idea of a player controller uh which has a speed a look sensitivity and a Thruster Force what I want to do is kind of expand onto this to create a limit uh for or kind of create a fuel variable that will decrease whenever we are using uh our thrusters and increase when we are not using them so to do this let's double click on the player controller to open it up in visual studio and we'll have a go at this I also want to create some UI to display this stuff so um you can see here that I've opened up the player controller and I think that we should maybe um start by just implementing this limit and then uh in a moment actually let's start with the UI so just keep this open we can close the player shoot and the actual player script will also be editing the player setup script so I have these two open here good so let's start by modeling out the UI so we'll find our uh prefabs player UI remember this is the prefab that spawns in with our player to display UI only for that local player and it currently only has a Crosshair let's right click on the player UI go on UI and let's go down to find the uh image here and as the Sprite we'll just go in and select UI Sprite this is a standard Sprite that is included with uh the UI system and uh we can go ahead and maybe anchor this to the button left B bottom left corner and uh we can go ahead and maybe drag this out like this make it a bit uh smaller position it there somehow I think this looks um pretty good uh we can of course always edit this later I might want it looking a bit smaller something like that looks pretty good to work of as as a base uh what we can then do is we can make this uh black and we can then uh change the alpha here so this is going to be the background of our um Thruster fill so U this is going to be the uh fuel or Thruster Fuel and here we're going to duplicate that and drag that under using controll D and then just dragging and we are going to have this as the Thruster fuel fill and this is going to be uh a much brighter color still a bit transparent uh and let's make it like a light blue I think that could look fairly cool something like that maybe a San color and maybe a bit less transparent there we go so it it looks like something that we definit itely want to have a lot of and you can see what we can do now now we can take this and we can scale it down and you can see kind of what effect that gives us so that is super cool but instead of using the uh height here to scale down uh what we want to do is use the scale here because that goes between Zer and one and this way we don't have to manage any kind of start height and uh minimum height or anything we can just scale this on the Y and uh to make this even easier on ourselves we should change the pivot point so uh we want it to be halfway over on the X and we want it to be zero on the Y this way we can simply scale here and it will scale downwards like we wanted to so you can see just how easy it is to regulate this using this variable cool you could also do a custom image type uh and use fil here uh but uh the way that this Sprite is set up with the uh borders that's going to look super weird so we're going to keep that at sliced and simply use the scale factor uh cool so next up I just want to uh add an icon here to display that this is some kind of uh fuel amount something that controls whenever we can fly and I found that Unity had a pretty cool icon actually that we can use so let's right click here go into UI and choose image and you can of course make this yourself in Photoshop if that's what you want to do then let's go under uh Sprite here and select the button accelerator up Sprite this is part of the standard assets cross platform input which you can of course just right uh click and go under import package and select crossplatform input to import if it's not already in your project uh so we can take this here we can uh drag it down here scale it down something like that and we'll make sure to Anchor this to the bottom so if we want to change the way this looks it's going to scale just fine I think that looks super cool uh I do want the Thruster fuel here to be a bit bit brighter maybe and maybe change the Hue just a tad I think something like this looks super cool and we're going to stick with this for now I also want to not anchor this to the uh left but instead anchor it uh so that it scales with the entire object something like this cool that looks good and we can just make sure that it this snaps to the sides all right uh so now when we go into the game you can see that we have this cool looking bar but we still need to animate this so we need this to be controlled by the fuel amount that we'll introduce in a second and to do that I'm going to add a separate new component you can see here it's going to be called player UI and we're going to go new script C create an ad now let's double click this to open it up in mono develop what we want to do here is first off import actually we don't need to import anything because we're just going to be using a r transform um to do the scaling and that's included under Unity engine so first off let's add a reference whoops serialized field add a reference to the um the fill fuel fill amount so uh the actual object that we just created that's going to be it's going to be this one Thruster fuel fill and this is just going to be the Thruster oops Thruster uh fuel amount or fill or whatever uh that's going to be let's do fill and uh then we want to add a um public or just a void let's just do a void which is going to set fuel amount on the UI here and uh that's going to take in a float which is going to be the actual amount and what we can then do is simply say that Thruster uh fuel fill. local scale equals a new Vector 3 where on the X we want a one on the Y we want uh the amount and on the Z we want a one two you can also UT uh the current local scale here instead of just the ones but since I don't think we're going to be changing that uh this is going to work just fine it's going to run a tiny bit faster good so now that we have this um we should be able to just call this this method whenever we want however we don't currently know what the current fuel amount is is both because we don't have a reference to our player controller but also because we kind of haven't made the variable yet so let's go ahead and do that so in our player controller let's go up here where it says uh thrusted force and let's add another serialized field this one is going to store a private float which is going to be the uh Thruster fuel uh region speed something like that actually let's uh start off by uh doing the um Burn Speed how fast we been through it I don't know this is going to be fine and we're going to default that to something like 0.9 F or 1 if or whatever you want to do so that means that it will be gone uh after 1 second of flying then we can make another uh serialized field private oops private float uh Thruster Fuel and this is going to be the replenish speed I'm going to call this regen speed and it's going to be set to something like like 0.3 F so we will uh gain back the fuel a lot slower then we will uh burn it and uh then we can have a private float and this is going to be the ACT actual Thruster fuel amount and that's going to be default that's going to default to one that means the maximum amount then we can go down into our update method scroll down to where we handle some of the thruster Force you can see here calculate the Thruster Force based on player input well what we want to do here is we want to uh also and I'm just going to do this up here whoops we're going to want to say that Thruster amount Thruster fuel amount minus equals uh Thruster fuel burn speed time time. Delta time so how much the fuel amount decreases when we are actually flying depends on the Thruster fuel burn speed and of course um we want to make that frame rate frame rate frame rate independent good I apologize for my English there uh so we can take an uh and do the same down here so uh we simply want to say Thruster fuel amount plus equals thrust region speed time time. Delta time so here we will gain back thrust uh Thruster fuel at the uh rate of the Thruster fuel region speed and of course again frame rate independent so that's kind of how we do this and you can see of course this means that we are flying and this means that we are not flying so that should work just fine and uh we don't all only want to uh kind of limit this we also want this uh or I mean we don't only want to control this variable we also want to actually make this limit whenever we can fly so we need to add an and here so we don't only want to fly if we get the button down jump we also want to say that thrust the fuel amount needs to be larger than zero so we need to have some kind of some amount of thrusted fuel in order to fly this Frame good so that's perfect and the last thing that we want to do here is we make want to make sure that we SL this value between 0 and 1 because right now when we are not flying this is just going to uh increase and increase and then when we actually decide to fly we can maybe fly for hours and that's not something we want also it can go below zero so if we keep flying uh can it actually it might be able to go just under this zero but then we will be stopped so but still we want to clamp this so uh we want to say that our Thruster fuel amount equals math. clamp and the number that we want to limit is the actual Thruster fuel amount and we want to limit it between Z and 1 there we go so this should work just fine now and we can actually start to tie this together with uh the actual player UI so we have this system working we have this system working uh now we just need to tie them together and we do that by kind of creating a um link from the uh player UI to the player controller so we can call a method here that checks what the current fuel amount is in the player controller so let's start by adding a getter here getter method so public uh float get Thruster fuel am and this is simply going to return Thruster fuel amount there we go and again the reason why we don't just make this public is to make it more protected so that the only thing controlling this is the actual player controller it just makes more sense doing this uh doing it this way uh then in the U player setup or in the player UI I should say we want to have another public uh method we want here a public uh void and this is going to be a set player controller or it just maybe set controller and this is the reference to our actual controller so uh we want a private player controller and this is just going to be the controller and then here we can uh use this as an argument so it's going to take in a player controller underscore controller and we're going to set controller equal to controller perfect and now we can use player setup to link these together so in the player setup here Down Under the start method where we create this player UI instance and uh remember this requires that we are the local player so we make sure that way that this is only happening for the local player that we want this uh UI to be displayed on and uh what we can do here is first we create player UI then we configure player UI and we do this by saying player um we create a temporal temporary uh variable called player UI and this is just going to be the UI component uh on that player UI object and uh we set that equal to player UI instance do get component of type player UI and of course we aren't certain that there is going to be a player UI component on that instance so we want to say that if UI is equal to null well then something uh has gone terribly wrong so we want to say debug.log error no player UI component on player UI prefab there we go and if that doesn't happen what we want to uh do is we want to say UI do set control controller and we want to set that equal to the uh current controller Uh current player controller that sits on the same object as um this player setup script they always going to sit on the same object in our game if they aren't in yours you should create a reference uh just a variable here that you drag in uh the inspector but here we're just going to require it as a component that a player setup requires a player controller there we go it's that easy and this way we don't need to do any error checking and that was it for this I think then in the player UI we can go ahead and make an update method and I'm doing it this way because we could actually go ahead and make some kind of method call uh that makees sure it only updates whenever the fuel amount actually changes but since this is a very easy check and since the fuel amount is going to uh be changing a lot of times uh because it's almost always going to be either regenerating or um uh or Burning uh therefore we really don't need to do that so in the update method here we're simply going to say that controller do um get Thruster force or Thruster fuel amount there we go so this is our current fuel amount and we can simply say that we want this to set fuel amount to that using our meth it down there so we can simply wrap that in as an argument and now things should actually be working at least if we remember to fill out the correct variable so in our player UI we want to drag in the Thruster fuel fill we want to then hit apply and forget about this object for now then under our player we want to uh yeah these variables look just fine and uh nothing new Under the player setup so now everything should be working working and if we go in and hit play land host and try and thrust here you can see that it's actually working so that is just perfect the only problem that we currently have here is that when we reach as uh zero amount of fuel we can still kind of hang in the air because every frame it replenishes just a bit of fuel and then we spended the next frame and that kind of kind of gives this weird looking Behavior here which which is not really desirable so an easy fix for this is if we go under our player controller go down to where we check uh or where we decrease uh this fuel Thruster fuel amount we want to do that regardless if it's over zero we want to always always do this however we only want to add Thruster Force if Thruster fuel amount is uh greater than or equal to to a very tiny amount something like 0.01 and that's just going to give a tiny margin um that will make sure that we don't uh apply our thrusters unless we have just a bid of fuel in the bank so when we now go go ahead and hit play you can see that we just fall down if we don't have enough fuel so that's just perfect so now our fuel engine s to say should be working good um so the other thing that I wanted to fix is right now when we uh fly on top of an obstacle here I'm just going to fly on top of this one you can see that we collide with the ground if I go into the scene view here find our player he sits on top of that thing which he shouldn't he should be floating actually he is floating just a bit but but that's because of the collider is just a tad bigger than the actual player model you can see that we are colliding with the ground here and that's not what we want so we kind of want to offset uh the uh level at which our spring will try to reach so in order to do this if we just actually let's just hit play here and I'll demonstrate uh when we spawn our player in we spawn him at a y position of one then what we can do is we can kind of uh move him around on the Y which we we do and then it will try to reach this one position again and you can see it gets very very close however whenever we were standing on top of an obstacle we want to um we want to keep kind of change this ground level so we don't want them to strive to be at one we want him to strive to be at that obstacles top position plus one and uh if we go under our configurable joint we have something called a Target position and that is that exact uh offset so let's say that we jump on top of a one one Cube well then we just T type in one here or I'm sorry negative 1 and you can see that offsets his new ground level this way what we can do is we can simply fire down some rays so we can use Ray casting to check how far far above any obstacle or ground we are and then set that position uh in negative down here so that's what we're going to do if that was very complicated don't worry it's very easy to do in code and you can just uh write after me and you'll see just how cool it looks when we are actually done so let's find our um our update method here we can just do it at the very top and this is something that we want to be doing every frame so uh in here here we can first off do a rast hit and this is just going to store information about what we hit where we hit it and stuff like that then we can say if physics. raycast and then we want this to to give this a bunch of variables the first off you can see many different versions of this the first off is going to be the origin so we're going to be using transform. position then we're going to give it a direction which is going to be Vector 3 do down it's always is going to shoot directly down uh then we are going to give it a um out hit so we want to fill information about what we've hit into this variable here that's going to feed that in there then we are going to give a maximum distance that's going to be a 100 and finally we can do a layer mask uh which we'll do in a second so if we actually hit something this is going to return true and therefore this code down here is going to be called and if it has well then what we want to do is we want to say joint. Target position here is going to be equal to a new Vector 3 and it's going to be zero because we don't want any offset on the X then we want something on the Y and uh it's going to be zero on the Z as well and what we want on the Y here is going to Simply Be the point that we hit so the very surface that we hit that exact point doy and then of course we need to inverse this because it's a negative offset and that's all that's all we need to do and if we haven't hid anything we're simply going to set uh this uh Target position equal to the ground plane so that's going to be 0 0 0 there we go that's all uh I hope and uh if we go in and try this now maybe we should just comment what we're doing here so we are setting uh Target position for spring this makes the physics uh act right when it comes to applying gravity when flying over objects good so that should be working and we can now jump back into unity and if we just try this out everything should be just fine because we don't have a problem with the raycast hitting our actual objects or that at least we shouldn't have and the first thing that you will notice here is that this works just fine and uh if we go over to this object fly on top of it you can see that we are hovering over it and the physics feel a lot nicer you can see here we are actually hovering there so that's just perfect then if we go uh jump off the ledge here you can see just the same thing happen so that's just perfect and the last thing I want to do is just to make sure that this um is a bit more configurable add in the layer mask anyways just so we can have uh objects with colliders that we don't that we aren't actually able to stand on top of so um a cool idea for this would be a player so you can just make like a player Tower uh or anything like that you can if you want to but I don't want to so let's go up here and under maybe just here we could put this on Spring settings but I don't really think it should be on Spring settings uh and this is just going to be a serialized field it's going to be a private layer mask and it's going to be uh called environment mask that will make sure we only collide with the actual environment and we can just add add this here as the last argument in this crazy row uh of parameters and uh then we are going to go and do our player and you can see here we can now select any layer that we want so I'm going to make a new layer here I'm going to add a layer and this is going to be a collidable environment let's do that uh that's going to be stuff like uh obstacles ground planes stuff like that then let's go under environment and select all of our cubes not the directional light and let's change them to collidable environment uh cool save that uh select our player and then choose as the environment mask remember to choose collidable environment and you can check off any other thing that you want this to be able to uh collide with on the y axis um or I should say able to hover on top of um it will still be able to collide with everything else also now you need to of course make sure to uh change the layer of any objects that you want this to be able to hover on top of um but that should be just fine if you remember to do that the system is going to work so great so now uh when we play we should see absolutely no difference things should be working but it's more stable now and we have more control there you go so that was basically it for this video I hope you enjoyed it a lot and I'm definitely looking forward to the next one so thanks for watching and I'll see you in the next video