thanks for tuning in at braies hello everyone and welcome to this video on creating a multiplayer Fs in unity today we're going to be creating some UI for our game more specifically we'll be creating a health bar and some kind of way to display ammunition that's what most of you guys said you wanted to see in the last video I also have plans for some weapon switching and a lot of you guys suggested some kind of sniper with a scoping in mechanic I think that sounds really fun but uh I won't be doing it today today it's going to be UI but definitely want to do it uh soon so without further Ado let's just jump right into it so as you can see I'm here in unity and what I want to begin with is just taking our kill feed and kill feed item scripts and dragging them under the scripts folder to organize things a bit better now let's go under our prefabs folder and find the prefab called player UI and drag that into our hierarchy as you can see I'm in our main level one scene so that we can see our player UI working on top of our regular level let's now switch into 2D mode and focus on this element right here called thruster remember we created this in a previous video and basically it's just a black image with with a bit of transparency and on top of that we have a Thruster fuel fill which is a tinted image that we then scale up and down depending on our Thruster amount and then we have this image here which is basically just an icon which we're going to rename it to so what I thought we would do is maybe just uh scale this up a bit so let's change the width to something like 45 and then actually use that to create our uh health bar so in case you want to duplicate all the settings you can go back and watch the previous video where we implemented it um or you could just have a look at how things are set up here here and here and you can just pause the video to uh duplicate everything so now let's uh duplicate this by hitting control D or command D if you're on the Mac move it over a tiny bit and we only have a few things that we need to change on this object first of all of course we need to rename it to something like health bar and we can just leave the background image then we want this to not be thust a fuel fill but health bar fill and let's definitely tint this in a reddish color something like that and let's also swap out the icon so the icon that we using right now is what uh the icon called button accelerator op Sprite and we got this from the standard assets if you import the crossplatform input on the Sprites you can see they have some default icons but I thought most people probably or at least some people aren't using the standard assets so I thought I would provide this for you in an easy download so if you go in the description there's a link to where you can download the multiplayer FPS assets and if you double click the folder that you get when you download that and go under GUI you can see I've put in three icons here the normal Thruster fuel icon from the standard assets and also a health icon and an ammo icon in case you want to use those we'll be implementing those in just a second but let's just take these three icons so select all of them and drag those into the kui folder that we have inside of unity now let's select those three inside of unity and change the texture type to Sprite and let's also change the format to true color to make sure that Unity doesn't do any weird compression on us now let's find our Thruster fuel icon and let's just change that to the Thruster fuel icon that we just uh that we just imported into Unity it's not going to change anything in the scene but it is going to make it neater because it's better to get it from there than in some R sub folder under the standard assets let's also find our health bar icon here and drag in the health icon we just imported so that should really make things look quite decent and uh the only thing that's left to do with this health bar now is hook it up via script to the actual he Health amount that we have so if we find our player UI object you can see we also have a player UI script let's double click that to open it up in visual studio and have a look at how we do things using the Thruster fuel because we're going to be doing things almost the exact same way so I can see I have a bunch of things open here and I'm just going to close all of it uh except for whoa and we even have two versions of the player UI let's try that one more time there we go so as you can see we have a reference to our Thruster fuel fill object and we want to create one for a health bar as well so let's create a serialized field of type Rec transform because we're going to be scaling it and let's call this one our health bar fill and um if we scroll down a bit you can see that we are changing this inside of the update method and that's because we want to do this every frame so that we can update our UI as soon as something happens and we using the function called set fuel amount which we declare down here so let's just create a new function that is just a symbol uh whoops not void called set Health amount and it's going to take in a value between zero and one representing our total amount of or our current amount of Health compared to our total so if we just input one here that's going to be 100% health and if we scroll down we can now implement this function so let's go void set Health amount it's going to take in a float with the amount just like we do up here and it's going to set health bar fill. local scale equal to a new Vector 3 with uh a scale of 1 on the X the amount that we passed in on the Y and one on the Z so that's going to make sure that we scale it correctly so now all we need to do is get a reference to our current amount of health and pass it in here except in order to do that we need a reference to our player um component sitting on the player object and currently we only have a reference to a player controller the way we get this reference is by implementing this function called set controller that we then call through the player setup script so when the player is set up it's going to call the set controller pass in the player controller and we're going to store it in this uh private variable I want to change how this works a little bit let's begin by creating a private player here and calling it player then instead of having this be set controller let's have this be set player and it's going to be uh pass in a player which is going to be called underscore player and then we can set player equal toore player so the uh the private player component or the P private player variable is going to be equal to the player that is passed in then we can get a reference to the controller by simply saying controller equals player. getet component because remember all of these components are sitting on the same object and so we can just do do get component of one of them to get one of the others and we'll get the one called player controller you could just have easily have kept the controller thing and then just have gotten the player component the same way but I think this is cleaner because the player component is kind of Central and the get the player controller is one of those spinoff components that do a tiny thing the play player itself is where we handle stuff like Health killing dying uh that that sort of essential stuff so what we can do now is simply make sure that we also change the name of this and the uh that we press in the right component um in the player setup script so if we go into Unity now it's going to throw an error for the player setup that we can then just double click on and it will take us to the right line which is line 51 so in here we want to say set player instead of set player controller and we want to use get component player instead of player controller and that should actually be everything so um now that we have that working we should be able to go into our player UI and go down here and reference the player and the health variable does sit under the player but it's currently private so we can't just do health and we don't want to because our health is a currently a value between zero and 100 and we want a value between 0 and one and we want to have that even though we change our maximum health say we set our maximum health to 250 so we can't just divide by 100 we need to divide by our maximum health in order to get a value between 0 and one so inside of our player let's create a little helper method for doing exactly that so let's uh find our script here called player and let's just jump in here and create a tiny little method and this is just going to be a public float because it's going to return a float and we're going to call it get health percentage and of course um this is not percentage this is a between Z what you get what I'm saying and what we'll do is just return current health divided by maximum health and we'll need to um of course cast this into a float so that we don't get some weird integer we want to have all the decimal places that we can get so inside of player UI we can now go player. getet um get health percentage and there we go now our health bar should actually be working of course we can't really test this on the uh computer unless we make a build and damage the player or Implement some kind of test function so what I think we should do is just continue on create the ammunition as well and then we can see it all working at the end so now what we want to do is uh Implement a tiny bit of UI in order to get the ammunition working and I want to begin by going under the health bar and thrust of fuel selecting both icons and kind of scaling them up so let's set our width to 25 and do the same thing with our height just to make them a tiny bit bigger which looks a lot better so what I want to do now is right click on our player UI go under UI and then select um panel in order to create s kind of a faded background for uh for displaying our ammunition let's also make sure that this is anchored to the bottom left corner and let's drag it over here somewhere around there I think that looks pretty good let's drag this down a bit to say there and let's also change the color here to a black and we can maybe fade it out a tiny bit more something like that looks fine inside the game view actually I want it to be more clear something like that what we want to do here is of course change the name to ammunition and we'll definitely want to throw in an icon so let's just duplicate one of the icons from over here drag it under the ammunition object and simply move this over on the X something like that looks pretty good I think we can also maybe scale this down a tiny bit there we go and let's snap this to the left and not to the bottom whoops there we go awesome so I think that already looks quite decent of course we need to change the icon over here so let's go under and drag in the ammo icon instead looks just fine and um maybe even move this down a tiny bit more U maybe move this up a bit something like that I think uh that looks just fine and then what we can do is just rename this to Icon remove the one there let's also go UI and then text and we want this to be anchored to the right hand side we want definitely scale it up let's also move it over here let's make it white so we can actually see it on the background change the font size to something like 24 and change the text to just say 20 and then what we'll do is we'll snap the text to the right and we'll Center it on the vertical axis and then we'll just move it over here to create a tiny bit of padding uh around it and in the game view you can see that looking just fine and then we can take our ammunition and maybe just move it in there's no reason uh for it to be that wide and we'll rename this one to ammo text so we can easily see what what it's about when we reference it in the inspector so I think the UI looks good so let's jump inside of our player UI and actually update this through script as well so in order to do that we need to create a new function so we'll do set our ammo amount and we'll pass in let's just pass in 204 now let's implement the function that's going to be void set ammo amount and it's going to be an integer and we'll do underscore amount the other ones were floats but this is going to be just a whole number uh uh showing the amount of bullets that we have left and all we want to do is go uh and add a reference of course to our text object so we'll do a serialized field um of type text and whenever we do something with text we need to be using unityengine.ui so we'll do a text here and we'll call this one I'll say ammo text then down here we do ammo text. text equals the amount and we need to do two string here uh because we are converting this into a string for our text awesome and then all we need to do up here is of course get a reference to a current amount of ammunition and we in order to do that we need a reference to our current gun which sits or which our weapon manager knows what is so let's do up here another private variable for our weapon manager not weapon Graphics weapon manager and we'll just call this one weapon manager and we'll set weapon manager equal to player. getet component weapon manager not weapon Graphics weapon manager there we go the exact same way that we uh set the controller and then here we can go weapon manager dot current weapon get current weapon there we go Dot and then bullets and you can also easily display the maximum amount of bullets but just using that instead but for now we're going to be displaying only the amount of bullets that we actually have left if you want to have multiple magazines that could be swapped out and then you can run out uh you can display that here as well it's super easy to extend and uh it should be working right away so what we can do now is just reference our UI element so let's drag in our health bar fill let's drag in our ammo text and let's hit apply on this and remove the player UI from the scene and what we do then is go and hit not hit play Let's just jump into the lobby here see if it works on the local client and if everything is looking good there we can make a build so let's do a test room and as you can see we won't see the health updating but we can see that when I now shoot our ammunition does update one small issue with this and this is something that is not wrong with our UI but with the way we implemented reloading is if I now press three times 1 2 3 you can see it says zero but it doesn't reload until we then press again that's really annoying so to fix this all we need to do is find the uh script for reloading and we do that under our player shoot script so let's double click that go under our update method and let's find the not uh the update method no let's find the shoot method here and you can see that we do check if the current amount of bullets is less than or equal to zero but we do that before we shoot and that means that if we have say uh one bullet remaining and shoot it's not going to reload it's just going to shoot until you then press again and this function is called and now it's going to call the reload method so in order to fix this what we want to do is simply uh do a small if statement down here as well saying if um if current weapon do bullets is less than or equal to zero well then we want to call weapon manager weapon manager. reload awesome and we can't just uh take this down here because then you would be able to shoot while reloading or if you uh it were to start reloading here and you then cancel the animation uh if if you're able to do that some some point we can't currently do that and then go back you would be able to shoot again read stuff so uh we need to check both places and uh that should actually fix that error but I am going to show you another one that I encountered right after uh recording the last video so let's create a room here and you can see now that if we hold this down and then click click click and then click it's just going to reload automatically so that's awesome and um the issue I encountered is if we just hold down our Mouse here it's going to work just fine you can see that it stops to reload uh but if I then force a Reload by hitting R we can actually shoot while it's reloading and that's a big big issue so all we need to do here is change a little thing that I completely messed up in the last video I'm so sorry if this has caused you headaches I don't normally do bugs in the videos but this one was a bad one so I don't even know what I was thinking so you can see here that we are checking uh if we're not the local player and if we are not then we want to return and then I put an ants symbol here so we if we're not the local player and we're not currently reloading then we want to return out of the function that doesn't make sense on any logical level whatsoever what this needs to say is if we're not the local player then we want to return or if we are reloading then we also want to return okay so that should make everything work much better so now when we hit play and create a room you can see that if I force the reload I'm not able to shoot until it comes back awesome so now things are working just the way that we want them to and we should now be able to uh create a build here and see this working uh inside of the build so let's check if our health is working as well and I do need to have a sip of water once in a while uh so that was nice um so what would do is just jump into the login menu here and we'll do a full uh play testing uh session here so we'll be logged in and everything we'll do the same thing here test 1 2 3 4 and in here we're going to just create a test room everything's working in here we're going to join that test room and that takes uh 5 Seconds normally so we should see that join now awesome and you can see both the health bar for the currently active player down here and the health bar for the other player over here and now what I can do is shoot this guy and you can see the health bar over there going down and when it reaches zero of course he's going to explode uh in a big fire awesome and you can see the same thing working here so we'll shoot this player and you can see the health is going down until he reaches zero in which which case he will die there we go awesome so that is everything working you can also see that when the player dies the UI does disappear so that looks really nice and our ammunition and everything is working just perfectly cool so that was pretty much all I wanted to show you in this video I hope you enjoyed it let me know what you want to see next if it's not something I've already mentioned that I want to do and yeah without further Ado thanks for watching and I will see you in the next video thanks to all the awesome patreon supporters who donated in October and ESP special thanks to Sultan elative fa of marifi and James Kell Hound become a supporter at