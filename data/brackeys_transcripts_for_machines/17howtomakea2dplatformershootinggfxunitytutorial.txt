thanks for tuning in at brakus hello everyone and welcome to video number 17 in how to make it to the platform a course in today's video we're gonna have a look at making our shooting mechanic look a lot more awesome so we're gonna really gonna tie it together with graphics that means that we are gonna make our shooting trail a bullet trail actually stop at the point of impact and we're also gonna add some hit particles so that's gonna make it look a lot better so as always if you have any questions go to front of wreckage to come you can also just open up a discussion about any subject whatever and yeah let's just dig right into it so unity is just where we left it last time I haven't made any changes except one since the last video I've switched from monodevelop to actually using Visual Studio and it's awesome so I've always been a great fan of Visual Studio I think it's one of the best things to have ever come out of Microsoft and if you're on a Microsoft computer on a Windows computer please go ahead and and use it it's it's really really awesome don't get me wrong monodevelop what you just do just find for most of the work that you're going to be doing but Visual Studio is a much more complete and featurerich development environment so I really recommend it and now it's beautifully integrated with unity and so if you want me to do kind of a video where I show how to set up with Visual Studio Tools and and all that please leave it in a comment and I'll definitely think about it so then I just wanna want it to mention that that's what I'm using now awesome so let's get started with today's subject so first off let's select the player and take onto him and go on your arm and select the pistol and you'll see that on the player here we have a weapon script so if we double click this it will open up in Visual Studio you can of course follow along in monodevelop and I'm just gonna click it again to make it actually open up the script and not only the solution assuming a bit here so you can see what's going on and you can see that we have a shoot method and an effect method and we want to make a few changes to both of these but first off let me explain what we're doing because right now when we hit play it will spawn in whoops what's going on here oh yeah I made a change when I was testing some things out here I was just quickly revert that change so it was just the move trail component I just deleted that for some testing purposes we're gonna delete it again in a sec but where we left off last will have this move trail that spawns in a prefab that then very very quickly travels through our scene and it looks fine it does but it doesn't stop when we hit an enemy or a platform or something and we can go through and add some kind of distance check or collision to this trail to make it stop on its own but I think that that would just be not very intuitive and actually require more work than necessary so instead we're going to change the way that we do these bullet rate trails a little bit and that is from moving the trail to simply changing the Precision's the stun and end position and then just having it display for a single frame and that way the eye will not notice that it's not moving and it will look like an actual bullet trail and this is how so many twodimensional bullet trails are done in a lot of very beautiful games so it's it's not that this is in any way a bad solution it's just much easier so I think we're gonna go with that one code so the first thing that we'll want to do is of course to need the move trail script and then let's drag it into the scene and make a few changes to this so first off we want to disable cast shadows and receive shadows don't know where they were enabled in the first place and you can of course go into the material here and change around with this I'm just gonna leave it for now and then we are going to go under parametres and bump up the transparency or we are going to remove the transparency from the start color so that's again visible and I'm gonna make it a cool orange color here you can cover my RGB values if you would like and we're gonna do the same with the end color and then most importantly we're gonna check it to use world space that means it will jump down here because now it's no longer affected by its position in 3d space but only sticks to the positions given here and that makes it very easy for us to tell it so kind of give it give it a start an end point through code because we don't have to kind of orient ourselves in the hierarchy we can just give it a position and we know that's a global one and then also I'm gonna bump up this time with an end with to something like zero point zero seven just so it's gonna be a bit clearer to see now we can reset the position that it matters a lot and then we can hit apply on the prefab and delete it from our scene and of course make sure that it's still assigned onto the weapon prefab to spawn cool then let's hit back into our script and what we're going to be doing here is first off we want to store a reference to the trail that we just spawned so we're gonna make this a type transform and we're gonna call the trail and equal it to the newly instantiated prefab and we're gonna cask it cast it to a type transform then on that trail we can grab the line renderer so we're gonna go line renderer and call it LR and we're gonna equal it to trail dot getcomponent and then our line renderer there and then just to make sure that the line renderer is actually assigned we're gonna say if LR is not equal to null just so our code will work in all instances and then in here we'll say we'll set some positions but in order for us to do that we'll have to have both our starting position and our ending position and currently we only have our fire point at position and not whatever we've hit and if we don't hit something we just want to make a point very far in space but in the general direction that we are shooting so that it wants the camera cannot see that the the trail is ending and so that it follows the projectory of the bullet so in order for us to do that I think we're going to restructure a bit here so first off we'll move the effect handling below are actually collision code I just think that makes a bit more sense then also we're going to pass in an argument here and it's going to be of type vector 3 and it's going to be the hip position and then here we want to pass in that hit position when we're calling the method and we've first off want to make a hit position variable but we don't want to to assign it just let just yet instead what we initialize it just want to declare it and then down here what we want to do is we want to check if we've hit something so if hit dot Collider it's equal to null if we have not hit anything then we want to actually let's just not use these braces then we want to set hit pass equal to and then a point far off in the distance but continue in the same direction and we can do this just like we did with the draw line up here by simply subtracting two vectors will get a direction and by then multiplying it will make it go farther off into space and I'm not going to multiply with a hundred I'm just gonna multiply with something like 30 maybe I think that's gonna be plenty so if we don't hit anything just continue into space else if we do hit anything then we're gonna do hit past equals hit dot point so remember we collect some information about our raycast that's stored in the hit variable and hit that point will return a vector3 position of the point that the raycast I had an impact and then we'll just feed in the head pass feed the head pass into the effect method which will be called here and now we can use it down here to set some positions so in order to do this we'll do LR that set position and first off you want to give it an index which is going to be the number let me find it here and pull the trail the number in the array of positions so it's going to be the element number that we want to set so first off we want to set the starting position which is going to be element 0 so we'll type in 0 and then the vector 3 which is going to be fire point that position this way will look like it's appearing from our gun then we'll do lr that set position and then pass in 1 for an ending point and here we simply want to type hit pause and close that off so now when we hit save go back into unity hopefully we have no errors indeed we don't that's amazing always love when that happens not that it's it's actually pretty rare so let's hit play here and let's cross our fingers and indeed it's working you will notice that it doesn't disappear at the moment but you can see that it starts and stops at the correct position and it looks like it's failing here with the plaid forms but that's actually because they are using symbol box colliders which was something that I actually wanted to kind of straighten out let's see if we have the time yeah this is not my first take it doesn't look like it so we're gonna continue on maybe we'll do it in another video maybe it will have time let's see I just want to we'll do it very quickly change my mind again so delete the box colliders instead add we go under physics 2d some polygon Collider some will just make it fit on its own for it for now I think and then lady we can maybe go in and and do it ourselves actually I'm not too satisfied with this we should really go in and edit this Collider manually to get it looking nicely let's see if we play this it's better but it's not really ideal I think it will have to do for now so we'll just leave that and then come back don't worry this is not their final state cool so now that that's working all we need to do oops go back into Visual Studio all we need to do is to remove this prefab after short wah and we're doing the same down here with the muzzle flash so we simply put in destroy and then a cloned out game object but trail that game object after 0.02 seconds now let's hit play and we should see this working as intended and indeed it does but it does seem to destroy rather quickly some frames so we'll maybe just bump this up to 0.04 let's see yeah I like that better cool so you can see that working now and then we can continue on to some hit particles yeah that went pretty quickly awesome so in order to respond some hit particles we need of course a position but we also need a rotation because they need to be facing the opposite direction of our impact so if you follow along a line let's say we hit our enemy here so we fall along this path then we want them to be facing towards our player and there are so many ways to do this but a very easy way is by using the hit normal and that won't always make it face our player and I'll show you just what it will do but it will make it look pretty calm and some like this and do it intentionally and others just do it because they are lazy I actually like this effect but I'll show you what I'm talking about in a second let's just try and implementing this so first off I want to explain that whenever we are casting out a ray let's say that our player is up here and he's casting a ray down towards our platform what the hid dot normal will return is the rotation in Euler angles that or it's actually I should say it's actually a vector three with a direction from where the normal here is facing and the normal will be when you see this collision face here will be pointing exactly upwards from this place so if we hit over here it will point to the left if we hit down here it will point in this direction so it will always be perpendicular to whatever line you have going through and that's kind of what a normal is it's perpendicular to a tangent cool so now that we know that we can use normals to our advantage and let's do that now cool so in order to implement this what we are going to do is we're going to pass in a normal just like we did with the position so in here we're gonna pass in the normal so we're gonna do Carmo vector three oh I'm sorry we're gonna simply do you hit stunt normal I think just put it in there and because we want to check whether or not we've hit something in order to instantiate these so I think what we'll do is set the the normal equal to something crazy if we don't hit anything or we could do that with the hit pass yeah we'll do that with the hit force now if no that's not gonna work okay I've decided now what we're gonna do here is we're gonna make it vector three called hit normal and we're gonna default it to nothing and then down here we want to put in the hit normal and what we can then do is in here now we're actually going to need the braces in there if our collider is equal to zero we're gonna set the hit normal equal to a new vector3 and we're gonna equal it to nine nine nine nine comma nine nine nine nine comma nine nine nine all right there we go and this way we'll be able to check if it's equal to this and if it is we'll know that we shouldn't be using it we could also do this by a separate argument with the pool or within all value type there plenty of use cases but for now we're gonna do it like this and then we're gonna say hit normal equals hit dot normal then down here what we can do is we can say if hit normal oops need to declare up here so comma back to three hit normal and then down here we can say if hit normal is equal to vector three nine nine nine nine common nine nine nine nine comma nine nine nine there we go this is not working it's equal to new vector3 there we go and then we open up this and what we're saying here is now that we know we've hit something because our our hit normal is going crazy what we can do is we can simply say instantiate and then we need a prefab to instantiate instantiate yeah cool and we can declare that up here so we're gonna make a public transform and we're gonna call this hit hit prefab simple as that and then down here will instantiate hit prefab as the position we'll take in the hit position and as the rotation will do quaternion dot from two rotation and then we'll pass in and we'll just try try with I think this is gonna be victor three dot right I believe if it is turned like 90 degrees to to the left or something then just try and mess around with this try up instead or left this is how you can adjust kind of its its rotation on the hit I'll show you than second actually let's do it wrong by purpose sir just so you can see what's going on so it will do a vector3 up and then we input the head normal cool quaternions and rotation can be quite difficult just know that this is the standard way to do it for now I don't really have time to go into that cool so let's find a pistol let's make sure we have a hit prefab assigned maybe we should also make a warning if we don't we don't have that for the others let's just ignore that make sure to remember it and let's put in a a prefab of some sorts for now I'll just use the muscle flash prefab so we can clearly see if this is working or not and then we'll create one in a sec so now when we hit stuff it's definitely not working because it's not instantiating so that means that we the code is not being called this is this should be if it's not equal to now it should be working so if we hit up here we don't instantiate anything and then here we do and you can see that the prefab is turned 90 degrees and that's why we are using this vector three got rights instead to make sure that it's turned correctly that's kind of how it Orient's itself let's see and now it's actually using the normal and of course this looks plenty kinds of stupid so in order to make this look a little better let's quickly make a particle system so let's go on the game object particle system focus on it in the scene here and we'll make some spiky looking things can maybe put it over here and first off we'll set looping okay we'll set the duration to one so we can see how this looks every every second and then down here we'll set the rate to zero but instead add a burst you can see what that does and loop and burst once again every one second and the amount of particles I think 30 is gonna be a fine starting point here I of course want to bring down the life time to about maybe 0.5 seconds I think that's okay maybe that's even too long 0.4 will make it go out quite a bit faster so 10 looks pretty okay but we want to vary the speed so let's make that a random between two constants and we'll make that between two and ten that looks much better and the start life time should definitely be brought down here and also I'll just turn this particle system sideways so that we can see what will happen if we turn on some gravity so we'll add a gravity modifier let's try one I kind of like that effect then what we can also do is make it change its color over lifetime and we'll start out by making it fade on the Alpha fade out like that also we'll make it fade in just very very quickly yeah like that and then we can make the color maybe make it kind of actually I want to add some additive particles instead of these default ones so let's drag in our article additive material oops that doesn't work with that so let's make another one we have the particle glow we could use that one let's tried see how it looks it's being annoying so let's drag in the particle glow here yeah actually like that quite a bit and then we can change the color in here so we'll do something orangey will do very orange in the beginning and then fade to white I think that looks fairly decent this is not going to be perfect you should really mess around with this a lot more than then I'm doing here but I just want to get something that is alright at least then when it comes to the shape I want this to emit from basically one point very small angle or very small radius I should say maybe we could change it to a different shape I think we're gonna do a hemisphere that kind of looks a lot more light it's emitting from this single point and then just out in a random direction and I think we can add a bit more gravity so let's do 1.5 it's starting to look like something then we can change the size of the particles to be random between two constants between 0 and 1 and maybe we'll bump down the speed a bit again yeah that's better and I think 0 and 0.5 is maybe better yeah it definitely is then we can also vary the lifetime to be random between two constants and now we are we are starting to get something that looks pretty damn cool so I'm just gonna keep that for now at least and we'll try and see if that's working so let's rename this to impact particles or hit particles whatever you want and let's drag it under the prefabs let's delete it from the scene let's select our pistol drag it under the hid prefab and let's try so you can kind of see what that does and I think it looks really really awesome actually however you will see that it's it's currently looping so that's just selected down here and make sure to turn off loop so let's try this again let's actually do that in fullscreen because I think we have something that we can be pretty proud of now and yeah that's indeed working and I think it looks really really awesome great and just to make sure that they are facing correctly not that it really matters if it looks great but if we just click on the platform here click on impact particles and then select the tool you can see that they are pointing upwards so that's working like it should and also inside of our weapon code it's a good idea for us to delete these after a little while so what we can do is you can of course delete make them autodelete in the particle system but I like to have control over that so we are simply going to collect them I call these hit particle and we can gonna cast it as a transform transform and then we will destroy hit particle dot game object in about a second awesome so now when we play we should seen them disappearing from the hierarchy when they are done playing and indeed they do so now we have tied our shooting mechanics together and it really gives this awesome feel when you hit something next up is some particles when we destroy stuff and we kind of need to make this game actually into a game because currently it's very much only for testing so there's plenty of stuff to do yeah that was pretty much it for hit today's video that was quite a long one I hope and I'll see you in the next one