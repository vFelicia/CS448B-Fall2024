this video is brought to you by our own Metta thank you so much for donating if you want to support breakage yourself you can go to patreon.com/scishow cheese thanks for tuning in at brac ease hello everyone and welcome to this video in creating a multiplayer fist in unity today we'll be finishing off a user account slash data synchronization system and we'll do that by finishing off the player stats in the last video we took a look at getting the player stats from the database on the server and displaying that on the UI and today we'll have a look at sending that data so once we're in the game playing and killing people and dying then we'll make sure to update both the kill count and the death count as we go along so that's going to be super fun I also want to say that now that we're done with this kind of part of this series I have a lot of other cool stuff to show and we'll definitely begin by fixing some bucks we have a small bug when spawning in the game that is kind of annoying we have another bug when trying to re host the game so if you've disconnected and then try and host a game that will not work and I also want to do stuff like lock the cursor and maybe implement some larger stuff as well so don't worry there's plenty of stuff to be shown still so without further ado let's just jump right into it so you can see that I'm here in unity and what I want to begin with is the user account manager I don't want to change anything I just want to highlight a single thing and that is this public board send data method and this is the very method that we are going to be using for sending data to the server it simply takes in some data as a string but first I want to put some code around this because one thing that we could do is just every time we get a kill or a death we could send some data to the server but I don't think that's very efficient and most games probably wouldn't do this at least not if they had on the reliability of our servers so what we'll do instead is we'll have will have a sync var or basically two sync VARs keeping track of the amount of kills we have an amount of deaths we have in the game that just sits on the computer and then on a fixed timer and also when we leave the game we will then sync that data to the database on the server so let's say every 20 seconds it's going to update our notes no stats or when we leave the game it's going to update them as well so that's what we're going to be doing and I think it's kind of exciting and what we basically want to start with is creating these two sync variables so if we find our scripts folder here and go under player and then double click that I think the play is a pretty irrelevant place to add these so you could have them sit on a separate component and we will make a separate component for syncing these but for now we'll just have the variables themselves sit on the player so we'll create a sync VAR here and remember sync Y var is just a way of marking a variable that unit will then synchronize across all clients so if it changes on one it will be applied to all of the other clients as well and this is going to be a public integer and it's going to store the amount of kills we have and we'll also have a sync bar with on the amount of deaths we have there we go and also on the player if we scroll down here is a method called RPC take damage and this is called every time you get shot by a player that gives an amount of damage and that we then subtract from our current health and if our current health is below or equal to zero we die so this is the method that we are going to be using as the central point of of changing these variables so you can see inside of our die method here right on the is dead would be a pretty relevant place to change these because we are dying on the player here we are setting is that to true and we're disabling all of these components and starting the respawn method so let's just go in here and say deaths plus plus or plus equals 1 we just want to increase it by 1 then what we can do is also maybe increase the kill count of whoever shot us however we don't actually in here have any information as to who was the one who shot the bullet so let's actually pass this on to this function and we'll also have to pass it into the RPC take damage so let's retrace our steps a bit to find out kind of how these methods are called so in order to do this we want to go in and find the player shoot script so this is the script responsible for shooting bullets and we want to find the place where we fire and call the shoot method so we find the shoot method and this is called on the client and it basically says that if we hit a player or something tagged as a player we want to call command players shot and this is a command meaning it's called on the server and this basically takes in a player ID this is the ID or the name of the player that we shot with an integer that is the amount of damage that we want to apply and then we find the player component of this player using the player ID and using get player on our game manager but we might as well pass the ID of the player who shot the bullet in as an argument as well and then inside of the RPC take damage method we can use game manager Duquette player just as we are here to forget the player component of that player so in order to do that all we need to do here is pass in our car name which is transformed name so we are the one who's shot so we'll pass in our name here and we'll allow ourselves to do this and we call it the source player ID actually let's just call it the source ID so this is the name of whoever shot and then we'll pass this along into the RPC take damage as well so we'll pass on source ID into that we go into the player here and we'll add this as an argument so we'll go string source ID and then what we can do down here if our current health is less than or equal to serial is that we will go ahead and find this component using the game manager so we can say player and this is going to be our source player and we'll set that equal to something like gamemanager get player and then passing in this source ID so we've now found the player and we've gotten the actual component that we can use and I think I actually want to do this inside of the die method because there's no reason to pass on an entire player when you can just pass on a string here so we'll just put in this source ID here as well and then down put here as an argument string source ID and then we can go if source player it's not equal to null because of course if the player wasn't found we won't try and change the kill account of that player and this might be a thing that you want to happen that the player isn't found say if you take damage from falling there's no player in here and then there's no kill account to increase but you still want to increase the death count so this might be a legitimate thing and this is a great thing to wrap in an if statement just to make sure that your code doesn't break and then what we can do in here is we can say source player dot kill a dot kills plus plus so we've increased the amount of kills and that is my cat of course are stepping on the keyboard I should really lock the door when doing these tutorials all right so you can see that we have now increased on the amount of kills here and let's remove the insert key there great so the next thing is to maybe just test this out so we'll just make a window spilled and I had I used this before but let's go ahead and make a new one just pressing ctrl B or command B if you're on a Mac here and all we really want to do is just I we actually don't even need to start at the login menu here we can go straight to the lobby and go in here and hit play and create a room and I'm just gonna call this one test and then on the other client here we do have to login so let's just do test one two three test one two three and hit login and we'll wait for it to login and then we will find the here and click on it to join it and once we are in we should be able to now track these variables so you can see that we're here in the game and we're here as well and basically what I want to do is just go under the main level here and then find player 1 under the player script and you can see the amount of kills and the amount of deaths and for both players that is currently serum so if we go ahead and find our other player here and that is the bug that I was talking about where we spawned in the air and it's kind of weird we will definitely change that if we go ahead and kill him you can see that the kills changes to 1 and on the other player the deaths change this to 1 and we can go ahead and do this with the other guy here as well so we can go ahead and kill our first player here I'm going to have a look and now the they are both even in kills and deaths so that is kinda great so what we can now do with this is start to sync it on the network so um one thing I just want to do is that you'll notice maybe the level was a bit dark and looked a bit weird that is because we have to go into our main level here find our lining here if you haven't set this to auto you could go ahead and set it to auto but that might cause it to be a little weird when joining the game from the editor because then the lining might not be calculated so what I like to do is I want to turn off auto and then just hit hit build a single time I'm just going to go ahead and do that for you and that should make sure that it works both in the editor and in the art client that you built and then you just want to make sure that you set it back to auto whenever you want to do any changes to the level of course so that you can see your changes happening on the lighting system as well good so now that that is fixed we can go in and close this client and let's take a look at synching so what I thought we would do here is we would find the player object and we would create a new component because I think this is going to be too much to have all in the player script and we'll call this one the player's score and we can just create this essence csharp script and it create an ADD let's double click this to open it up in Visual Studio and what we want to do here is first off get a reference to our players so we'll go on board start and we'll require that component up here just to make sure that we have a player component sitting on the object and we'll then create a private reference so we'll have a a player here let's just call that one player and we'll set player equal to get component of type player right at the beginning of the game and then what we can do is we can create some kind of method for synchronizing the killer and death count so we'll create a void on something like sink sink score and yeah let's just call this one sink scored and you can see now that we have access to our the amount of kills and deaths that we've gotten so far in the game by simply going player kills or player deaths however we want this to be added on to the total amount of kills and total amount of deaths because our player stats is of course the total and we can't just go ahead and say something like user user account manager dot us instance dot set data or sent data and then going in here and then sending our kills and and deaths because we want to actually first get the data so we know how many kills and death we currently have and then add on this new amount of kills and deaths so in order to do this we want to begin by using of course get data and the way that we do this is that we add an on data received and we only want to do this remember if user account manager Todd is logged in so if we're not locked in this wouldn't make much sense much sense to do so we'll go ahead and call the get data method and we'll delete this as well and then we'll add a new method down here that will be something like on data received and someone called out that I spelled received wrong in the previous video I hope is right and I will close that off there and that is the data that we want to be called and then we put in a string here with the data so what we can now do here is that when we decide to sync the score we request to get the data when we actually receive the data we will then process it we'll add on the new the amount of kills and deaths and we'll send that total amount back to the server so the way that we do this is using of course our translator class so we have the data translator here and someone also commented that it would be a good idea to make this into a just a normal class not a mono behavior and then use the constructor to do all of the parsing of the string and then have the kills and deaths stored as field variables and I think that would be a great way to do it I just thought this would be a bit clearer to people who weren't maybe very used to working with constructors and I thought it would be a bit much to show in one video this is a very simple setup but if you want to go ahead and do that it will definitely be better because you only have to parse the string once and things might make a bit more sense so you are very free to go ahead and actually do that just wanted to mention that so we have the public static in data two kills and data two deaths so let's go ahead and use that so under our player score here we now have the data here so we'll get an integer with our kills and we'll set that equal to our data translator dot data two kills and we'll pass in the data here and we'll do the same with death so int deaths equals data translator dot data two deaths and we'll put in the data there as well and one thing that we maybe do want to note is that we only want to do any of this in case we actually have gotten some kills and some deaths so in case our score is just zero and nothing has changed there's really no reason to sync the score so all the way up here before doing anything else we can go in and say if player daaad our kills is equal to zero and and player dodd deaths is equal to zero well then we can just go ahead and hit return there's really no reason to sync and update these variables if they haven't changed at all and I'll have a sip of water there we go that's better for the voice and now we can continue so something has changed we get the data and we get the amount of kills and deaths from that data and then we want to add on our new kills and new deaths so we'll go int new death count or something like that or new kill count new kills we'll just say here is then equal to player kills so the amount of kills that we've gotten plus our total kill count and int new deaths is equal to player deaths plus our toad death count there we go and then we can actually convert this back into some data because we then want to use of course user account manager dot instance dot set that or send data I keep saying set data and we want to post put in some data here some new some new data however however language is so broken today however we need to convert these two integers into some data that we can use we need to embed them into the string as we've done before so how do we parse them into a string well we create of course another helper method for this so we go into our data translator here and we create a new method and this is just going to be a public static string and it's going to be called values to data and it's going to take in an integer with the kills and an integer with the deaths and then it's simply going to wrap that into our string so it's going to format it in a way so we have our kills symbol first and then we have the amount of kills here and then we add the separator the data separator then we add the death symbol and then we add the amount of deaths and that is all we need to do so it will just throw that right back so we get it in a correct format and this is going to be our new data and it's going to be equal to them data translator dot values to data and the values here are going to be new kills and new deaths cold so that all seems to be fine and then we can maybe put in a debug that lock statement here just saying something like syncing and then we'll put in data actually of course we want to put in new data so we will just it will just a debug that lock what our new total kill account and our new total death count is in the way that we form chosen to format it here before sending it off cool so this should all be working however we currently don't call sync score anyway so what we really want to do here is put it on a timer that is my suggestion ously at least you can of course if you have very specific points in your code where you are going to get a kill or death or you'll want to change this on this data just put a sink in there right away now that might be on level up so I really think that if you level up it's something that it's just synchronized right away however kills and deaths might come very quickly you might get two kills very quickly in a row and then if it starts to send one piece of data and then you send the other piece right after things might start getting a bit weird so instead we're going to put this on a fixed timer so the way that we do this is just using a KO routine so we'll turn this into an ayah numerator and we'll call this the sync score our loop just to be very clear about what this is it's just a loop that will be that will um reiterate every time some amount of seconds has passed so we'll just go ahead and start the coroutine cold sync score loop there we go and the way that you do a loop like this is simply go while true and that means always so it's always going to do this and then you can either have the code cold or do something before all of this happens or you can or you can either have all of this happen before you wait or you could wait before this happens so in our case I don't think it makes much sense to synchronize our killed and death count right when we join the game I think it makes more sense to wait a bit until we've gotten some kills and therefore we're going to put in here return yield return new yield return new wait for seconds and we're going to put in something like 20 maybe but now right now when we're testing I'm just going to put in five so that's fine and of course now we can't put in return here so this might be quite kind of annoying so what we'll do instead is we'll just put it down here and it's going to make absolutely no different difference it I mean we are still getting the data but I don't think it's it's not very important so I think this is going to be fine well so we're just going to skip a frame and that's going to be weird just put it down here that's going to be just fine cool so what we can do now is we can actually test this however one thing that is kind of dangerous with the code that we've written here is that we need to make sure to reset our kills and deaths so we have these two local variables that are just increased and then at some point we choose to sync them over however when we do that we of course want to reset them and start counting again because if we don't do that we'll have a case where each 5 seconds it will just add our kills and deaths on to our score and it might just go crazy so if you have 5 kills each 5 seconds it's going to add those 5 kills and that's not something we want so let's just make sure that we reset this afterwards and we do that by maybe going down here and saying player dart kills equals zero I'm player dot deaths equals zero as well so I believe that should work and then the last thing that you might want to add in here is that you might want to change this to something like sync now so we'll just put that into a separate function and we'll do then call sync now from here and then what we can do is we can add a void on destroy that is called when the game object is clean from the scene when it's removed when it's destroyed and we can just call sync now so whenever we quit the game or disconnect from the lobby or something like that ondestroy is going to be called and we want to sync the variables right away just to make sure that we don't leave leave the game and we we lose our scores that would be annoying but one thing that we do have to add in here is an if and then we want to say that we only want to do this if player is not equal to no and the reason why is we want to disable this on all clients except the local player and when you disable a component that doesn't disable on destroy that will run regardless because the component has been active at some point and we don't want that so if we haven't gotten our player that means that the component has been disabled and then we don't want to run this on destroy method if that makes sense great if not great let's just continue here and so what we can then do is we can find our player and we can go under our player setup and we can drag our player score script under the components to disable and this is important because we only want to do this locally cool so I believe that was all kind of scary let's try and see if that worked all right so I was just setting up these two test users that would have serial kills and serial deaths that we could use to see whether or not the system was working and had this sudden realization that I had been a and had a huge brain fart and that is when we created the public integer kills and deaths under the player object unlike that those a sync variable and that might magically make sense because we might want to sink however if we take a look at where we are setting them down here under the RPC tech damage this is an RPC that means is it it calls it's called on all clients and so when we die in increase and decrease the kill and death count we do that on all clients and then try and sink it out and that will just lead to a bunch of problems so instead of marking those as sync variables we can just leave them as normal public integers so make sure to delete those two tags before continuing or you will get some weird behavior so you can see there I've set up tests one two three four and test one two three and I'm just going to create a test room one test one two three here and you can see that the lighting Park has now been fixed so that is nice we can refresh the list here and go on the test room and we should see that joining and the lighting working here as well so you can see that we when we get in the room what I want to do is I want to shift over to our unity player here and he is player one and you can see currently his kills and deaths are zero but if we go ahead and shoot this guy we should see our kills go up by one and then in a second here we should go see it go back to serum there we go and down here it says sinking kills one death zero and that's because of course these variables are reset whenever we sync that information over to the database so if I now go ahead and kill this guy once more we should see it going back up to one and then back down to zero not so syncing kills two deaths zero and if we go over to the other player here and try and kill our unity player when we kill this guy here and go back to unity we should see it say kills two deaths one so we can see that if not it has now synced that over and if I go and hit leave room here and go back we should see player stats here say two one and it's it's loading there so two kills one deaths and on the other guy here it says one kill two deaths so now our player stats are working so that was pretty much all I wanted to show you in this video I know it was kind of crazy and we're definitely going to be doing something else for the next one but I hope you enjoyed it nonetheless um and also of course the disclaimer on this is not a very stable way to do it it is not a very safe way to do it but it's an easy way and it's a way that I thought would help you understand how these sort of things work again if you want to explore more of this you can look into database control Pro or you could look into doing it on your own with MySQL and then some kind of hosting provider or making your own server but yeah I just wanted to show you how it works and I hope you enjoyed it and without further ado I will see you in the next video thank you so much to all of the awesome patreon supporters who donated in August and the special thanks to our and Metta Robert Roach James Calhoun Mixon P and Andrew K