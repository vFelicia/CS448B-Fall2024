thanks for tuning in at brakus everyone and welcome to video number eight in the how to make a 2d platformer course I know it's been quite a while since the last one but I've been I've been working on some pretty awesome stuff first off some of you might know that I've started a new course where I teach csharp so if you want to become really sharp on that please go ahead and visit the course and have fun so it's on the screen and also it's gonna disappear from the screen now because here is the all new brackets developer forum I showed it off in the last video also in the csharp course but I just quickly want to show you what's going on so if you go to forum da Braccio calm you can join now and and become a part of this quickly expanding community there's an answer section so if you find anything difficult please just go ahead and ask your question there's plenty of discussions there are possibilities for showcasing your work and getting feedback and collaboration also just recently launched a resources section so there's plenty of cool assets and place to go to learn and use in your game and also the tutorial ideas category if there's something you want to suggest to me so instead of writing me an email this is much better because both I and of the other users can answer you and other people can see the answer too cool so let's just get started with today's video as always I've opened up unity and today we are gonna be looking at shooting finally we're gonna do some shooting so to go ahead and get started let's go ahead and look at the player here so right now you can see that he has some different objects attached to him and we can be focusing on the arm here and we're gonna put a weapon on so that we're going to be doing some ray casting to to actually fire some bullets which we're not going to get really graphical with with yet but we can delay the foundation so yeah let's just go ahead and get started so to do this first off we want to get a cool sprite so go to the astronaut sprite Atlas and let's expand this let's find the pistol and let's just drag it into the hierarchy so that it is the pistol let's Center the transform here if it isn't already and you can see it's lying right here now we can put that on to the arm and we can drag it over and position it on the arm here something like there looks pretty good I think we can live with that maybe just pull it down a tiny bit there looks pretty much perfect and it's of course up to you whether or not you want to want to have it in front of the arm or behind the arm in front of the player and all that you can see if we select our arm it's on the player sorting layer and it's all in layers and the players is zero so we've made room for weapons actually so we can go ahead and select the player here and just type in one and so it will be between the arm and the player which I find it took pretty great for weapons cool so now it will follow when we hit play you can see that our gun is following our arm around and that's just what we want but what we also want to do is create an empty object from where we will draw out the raycast we will draw the line the sort of the place where we are going to spawn particles in a later video to make cool graphics it's basically just the place that we're going to shoot from so let's just go ahead and hit create a game object create empty or you can just do ctrl shift and and let's rename this to let's do fire point and let's drag this under the pistol let's reset the transform and now let's drag it up here let's try 0.05 we're gonna need a little more so let's do cero 5 8 it's too much 6 0.056 book works pretty great and now let's just drag it over you don't have to be all that accurate I just wanted to type it in so you could follow along and and this will will do just fine great so always make sure that it's the value is 0 cool so now that we have done that we can go ahead and create our weapon script and that will do stuff like amid the raycast it will probably also do some graphics work it will handle handle the fire rate and then later apply damage to the enemy so let's go ahead and click on the pistol here hit add component and you can see I've already made one here so let's just go ahead and delete that and that was just for testing purposes so let's go ahead and click on the pistol hit add component new script of course of type C sharp and let's call this weapon and now when we double click this to open it up in monodevelop we can go ahead and create our weapon script so first off let's declare some variables what are we going to need here well first off we are going to need a fire rate so we're gonna make a public float so we can edit it inside of unity called fire rate and we're gonna set this equal to 0 by default because we both want the player to be able to hold down the mouse button and then it will fire in intervals but we also want the player to just or we want some weapons to be just a single burst meaning that you have to click for each time for the weapon to fire and instead of making a boolean that we check for called single burst we will just check that if the fire rate is complete zero then it's going to be a single burst weapon so this right here is going to be single burst then we have a public float which is going to be the damage that our weapon is going to do and we're just gonna set 210 then we have it's actually yeah let's make that a capital D and then we want our last public variable which is going to be our layer mask and you're going to see what we will need this for later later let's call this not to hit and it's basically gonna do it's basically gonna tell us what we want to hit so we when we make this variable actually let me just go ahead and show you so when we save this layer mask it's probably not a type that you've seen before you can see just like we have a fire rate and damage appear we also have this layer mask variable appear and it's basically just a list of all the different layers inside of unity where we can check off if there's something we don't want our laser to head and that definitely is we don't want the laser and when I say later I mean the raycast to hit our own player we only wanted to hit everything else so I'm gonna go ahead and select the player and also we don't want it to hit the ignore ray cast layer where we might put something late later it's an automatically generated layer where you put all of the stuff that you don't want to be head of course when we do this we also may need to make sure that when we go into the player and look at the layer that the player layer is actually selected so you can go ahead and change this for children also I'm not going to do that because we only have colliders attached to the the player object and not all of the child objects so if you don't have this layer already you can just of course go ahead and add a layer and write it in here and then go back and change it cool so heading back into the script we are gonna need some private variables also you're gonna need a float that is clinically called time to fire equals zero so we're going to you fold that to zero and then we are gonna go ahead and create a transform that will store our fire point like this so in the start function here actually let's make that the awake function which is also sometimes used for initialization we are going to go ahead and type fire point equals transform dot find child so we're simply going to search for the fire point as a child of this object you can see that our fire point is a child of pistols so we can simply just search for the child and the children of pistol and just instead of using get game object which will search for everything so find child and then just input the name which is in our cases fire point and then we're going to go ahead and just do something that is great to do whenever you're creating larger scripts are working multiple people together or I mean it's just generally good practice and we're gonna go ahead and do what is called a null check and that is making an if statement like this and then we're gonna check if the fire point variable is equal to null and when is it equal equal to null whether it's going to be equal to null if it didn't find a fire point and then we're gonna go ahead and make ourselves a little error message so we know so we we know what's going on if if we get this error instead something might just not work in the script and we don't know what's going on or it could give us some weird error message that we don't quite understand instead we're going to go ahead and to make sure that we we we get good errors here so you're gonna type debug dot lock error and inside of this we are gonna type no fire point what like this so freaked out basically they're cool and now we know what's wrong so in the let's go ahead and make B start with the update function here yeah so update is called once per frame we know this so what we can use the update function for here is to handle all of this stuff with the fire rate so first off let's make the logic if our gun is burst fire or just was a what's it called single fire so if our gun is single fire meaning that if we press the mouse button it will only fire once we are going to check for this to say by saying if fire rate is equal to zero meaning it's single burst we will then check if we get a button down down cold fire so we going to check if we actually are pressing a button so input that get button down and the button we're gonna be using is fire one if this is not set up on your unity instance sometimes it's just not set up it should be by default but things happen so if it's not you could either go ahead and set it up in the input manager or you could just do input that get key down and then use key code and then dot whatever you want to fire with that's something I often do just to make sure that things will work but it is generally better to use to get button down because you can have multiple layouts and it's more flexible so we're gonna do fire one and then we're gonna open up some curly brackets and inside of those we're simply gonna call a shoot function which we're going to do in a second so we are just going to call our shoot there then we're gonna have another for an elf statement so if our fire rate is not equal to zero then we want to check for a button input and then shoot with intervals so that's what we're going to do so if it's not single burst its automatic and we do this by first checking if we are holding down the button so we're checking get button and not get button down and we're gonna do the same button so fire one but we are also going to check if time that time it's larger than the time to fire okay so this might be a little bit hard to understand but I will explain it in a sec let's just first write out the code and then I will explain it so the time to fire is going to be equal to time that time plus 1 divided by fire rate and then we're gonna shoot cool oops space too much there awesome so that said okay so what are we doing here well we are first checking is it a single fire weapon if it's single burst we're just going to check if we get a button down and then simply shoot if it's not single burst we're gonna check if we are holding down the button so we're gonna check for the button call and then we're gonna also check if the time the time is speaker than time to fire so the time to fire variable we are using as basically the place in time where we are going to have our next shot and we are setting this by doing this so we are setting the time too fire to be equal to the current time plus the fire rate or 1 divided by fire rate but that's so we can make it a rate and not a delay mmm it's that you don't even need to think about that just know that this is how it's done so that's what we're doing we're saying that the next time you're going to fire is going to be the time plus the rate or plus the delay and then we're gonna wait and when the time is past that delay meaning the next time so fire we're gonna shoot so that's basically it for that and now we can go ahead and make our actual shooting function you