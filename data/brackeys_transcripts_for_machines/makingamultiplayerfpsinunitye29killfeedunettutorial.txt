this video is brought to you by Aron meta thank you so much for donating if you want to support Brees yourself you can go to patreon.com Brees thanks for tuning in at braies hello everyone and welcome to this video on creating a multiplayer PSN Unity today we'll be making a kill feed which basically means that whenever a player kills another player that will display in the top right corner of uh all of the different clients connected so that you will be notified whenever um something happens in the game you can also uh easily turn this into a more generic notification system uh that also says whenever a player dies joins disconnects and even add chat functionality but for now we'll just keep it simple with a kill feed so we'll be building a simple UI for doing that um for uh spawning in these um UI pieces and then deleting them after a certain amount of seconds and we'll also be uh doing a bit of backend integration so that we have an easy way of keeping track of whenever a player is killed and sending on a username of the player and a username of whoever killed him so uh without further Ado let's just jump right into it so you can see I'm here in unity and what I want to begin with is just navigating over to our main level so we have something to build our UI on top of and I want of course to integrate this into our preab called the player UI which is spawned into the game automatically for us so um inside of this we can go ahead and create a UI panel that there we go the panel there and let's make this anchor to the top right and let's definitely size this down something like that and I also want to drag it out a bit uh from the corner something like that looks pretty decent and actually don't want the background here in the game but for now I'll just keep it so we can easily see what's going on and I'm going to rename this one to our kill feed you could also do notifications chat whatever for now this is going to be our kill feed and um what I want to do is add a separate component to this called kill feed and this is going to be a script that we'll create in a second but I just want to go ahead and add it for now and uh under this object is where we will have our UI elements uh for the actual little pieces of information so in here we will have a well a kill or a death or some kind of notification so we'll have a separate panel for that because I want to give that a background and now you can see that the panel here is overlaid on top of the background of our kill feed and I don't want that I want this to first of all be black there we go and I also want this panel here uh to uh have its own height so I want it to definitely uh size on the width here um a stretch on the width but I want it to have a separate height so let's uh go in here and create a uh vertical layout group and we've done this before and and uh you can see we don't want this to expand on the height instead we want to go into our panel here and Define a layout layout element with a preferred height of say 35 so uh this is going to be one kill and we can duplicate these along and I definitely want to uh up the spacing to something like five and apple is being annoying so let's remove that and um yeah that looks pretty good so let's delete the other ones again and this one here is going to be our our kill feed item so this is going to be a single item on the kill feed and uh under this we can create a UI text object as well which is going to display some information about that item so in our place we can say uh in our case we can say something like player one uh killed uh player two and I'll show you something really cool you can do with styling this in a second so let's make this totally white uh let's make it normal let's bump up the F size to something like 18 at least and let's also make sure that this text object is stretched to fit our kill feed item so let's just go up here hold down alt and press in the bottom right corner there we go let's also Center this on the uh vertical axis at least and you can also Center it here but I would actually like to snap it to the right I believe uh I don't know you can also just make it totally centered actually on the left might not be too bad and then what we can do is just move in the text a tiny bit here I actually kind of like that so if we create another item here just to see how what it looks like and maybe um just shorten this a bit I actually really like the look of that so uh that's what we're going to go with cool but again spend more time on the UI than I do as always um so now we can go ahead and remove the background image here you can remove the component I'd like to keep it there I just disable it and um you can see this already looks pretty decent but one thing that a lot of games uh do is um either substitute this killed uh uh name here or string or text U with some kind of Icon U maybe uh say a skull or U maybe an icon for the weapon uh that killed the player and you can definitely throw that in there what you would do is just create another uh layout group but this time a horizontal one and just have a text object here the first one then next you'll have an icon which is just an image and then a third text object as well that's super easy to do uh but since I don't have an icon we won't be doing that uh today and really it's not not necessary it's just one of those um UI things that you can have fun with on your own um and another thing that a lot of games uh do is that they highlight uh the player that killed the other player or um um maybe uh throw different colors in there to make it easier to uh see so what I want to show you now is that you can actually inside of this text component you can use some basic HTML tags so if you've done a bit of HTML or um or whatever you can see that if we write a b like this for bold and then close it off that is indeed going to be marked as bold and you can also do italic with an i here so let's make the last player there italic or you could even do color so let's make this a color equals then we can just do red or you could do some hex heximal color like that but we're just going to do red and then slash color down here and you can see that we've now made that player red so that is something that you can very easily add if you don't want to split this up into several ones and if you want it to be depending on the player so you can associate a color to each player or whatever so uh this is just what we're going to be doing for now I want to highlight the player that killed the other player and I want to make him uh italic so slash I there we go cool so I think that looks pretty good so what we can do now is actually uh add a separate script to the kill feed item as well the same way that we had a separate script for uh the room list and then a room list item so let's find here our room list item there we go and we have a separate SC script I don't remember what it's called now uh for listing those items so we have a kill feed and we have a kill feed item so let's go ahead and separate this out the kill feed item is going to be its own separate prefab just like we have a room list item down here let's drag that into our prefabs folder and now now remove it and uh let's uh also save these changes to our player UI so let's go to player UI and hit apply awesome so how do we want to do this well what I thought we would do is utilize the fact that in all games we have a a game object that is shared by all the objects who join called the game manager it sits right here so what we could do with this game manager is simply add a uh call back method some kind of delegate uh for whenever a player dies so in here we'll add in here we'll add a um public delegate void called on player killed um callback and uh this is going to take in a string with the player killed and a string with the source of the damage and this might be a player or it might be um say fall damage or whatever you could put anything in there and we could even put in an action we could make it something else like instead of on player kill we can just do on event or something and then we could put in an action here um so that it would be um Source did action on player and then you can put a sentence very easily together but for now we'll just do this and then we'll have a public um on player killed call back because uh this here is defining the type the type on player killed call back and then we want to actually create that in a variable we want to uh also just call that on player killed call back but now with a non capital O there and just close that off so again remember what we use callbacks for is whenever we want uh to call multiple methods uh from one place so basically what we are able to do here is have different um objects subscribe to this call back so they say uh whenever this event happens you should call this function and you should call this fun function and all of our different objects can do that that as they join more specifically when our player joins the room we want his uh UI to subscribe to this call back saying that whenever this happens uh you should display something on this UI using this function and then uh what we can do is not worry about all of the different UI elements when we actually calling it so we know that they've subscribed to this method themselves and so when we actually um when a player dies and we want to call this calling uh it it's called invoking the methods um we don't have to have a reference to them we only need a reference to this so that's U the cool thing about this so what this allows us to do is now head into our head into our um player code here where we have a function called die and this is called through an RPC so we we have a function called die here and you can see we said is that to true we increase the uh kills of our source player the one that kills us and we increase our deaths uh well in here we could just as well do game manager do instance and we do need an instance here because this is not static uh I don't know about static voids we won't get into that um so do instance and um then we do uh dot uh what did we call it we call it on player killed call back and then we do do invoke so this is going to call all of the functions subscribe to that and then we pass in our username so our username um is just the one uh that we have declared uh somewhere up here there is the username so that is loaded in and we also feed it the source so the source here is Source player. username and because we're using Source player I only want to do this in case Source player is not equal to null again the reason why we have this if statement is to be a a bit uh safe or secure and that's a good idea and it's also um to um make sure that we allow for other ways to damage players in case there wasn't a source player maybe it was just fall damage well then you can just instead of uh sending over the source player. username then you could do uh down here an L statement saying that the source was well gravity that's a very normal thing to do in these kind of kill feed situations so but for now we'll just leave this in here uh because we don't have any fall damage the only way to die is from other players and um that should indeed invoke the method so now all we need to do is subscribe to that uh event um so in order to do this let's actually build out our kill feed so our kill feed here what this is going to do is in the start method it's going to uh call something on the game manager it's going to go game manager do instance and Dot um um on player kill call back and it's going to add onto that another function that we'll create now so on kill and we can go ahead and create this method right away and we need it to be public because it's going to be called from the game manager whenever you're doing these call back things just make everything public it's much easier that way uh so public void on kill and we need the uh appropriate um parameters here so that is going to be a or arguments it's going to be a string with our player username the player and a string with the source and um then all we do is well for now we could just throw out a debug.log statement uh but yeah let's just do that so we throw our debug.log and then we can say um Source plus killed plus um the player there we go so it's that simple to do um and this should in fact work right away I mean it's not going to display on the UI it should just throw out a debug the log statement but we can see in here that uh whenever um the player spawns whenever the player spawns he also creates a prefab called the player UI and part of the player UI is the kill feed that has this script that means that we are going to register with the game manager that whenever on player kill call back is invoked we want that to call this function using the correct information and then inside of our player whenever we die we want to call that in F that that function we invoke all of them and that is going to point back over here and this is going to be called so uh this should in fact work right away and we should be able to test it out so let's just do a very quick test here um before we build the last thing which is just uh properly integrating it with the UI and then we're uh then we're done so let's just build out the player here and there we go whoops it's a tall player there that's better and uh let me just dog that over here while we uh log in and of course we want to log in using our login menu here let's do things the proper way so test 1 2 3 test 1 2 3 log in let's do the same here test 1 2 3 4 test 1 2 3 4 log in there we go so this one is logged in let's create a test room and there we go we're inside and let's do the same thing here and it's just going to wait to join here we've done this a million times and whenever it's joined there we go we should be able to Now kill this player and see that it says test 1 2 3 4 kill test 1 2 3 and if we go the other way around to kill test 1 2 3 4 it says test 1 2 3 killed test 1 2 3 4 so it flipped correctly and it's reporting it on all of the clients and in fact I have a cool way to show you how to see this inside inside and look who who is joining us here so it's our everyone's favorite cat at least she's mine except for the other one they're equally favorite it's not politically correct to favorite one and I don't anyways uh so you can see here um that we can't see debug me messages inside of our Standalone build so uh what we'll do instead is just uh close down this build here so leave the room and close out there and we'll close this one down as well to check whether or not these uh console messages actually appeared what we can do is find the place that we built uh the client to and in our case that's under our projects then multiplayer FPS tutorial multiplayer FPS builds windows and inside of here if we go into the data folder and under the output log and I know this is quite a pain to go through I'm just going to edit this with the notepad here and scroll down scroll down uh you will see that we have all of our debug.log messages here and if we go down to where the player two has zero Health we can see that test one two 3 kill test 1 2 3 4 awesome so it's it's actually reporting it back here as well so that's awesome so um what we can do now is just integrate this into the UI so in order to do this we take our kill feed and actually we let's build out our kill feed item so uh what we want here is just a reference to our uh text so we want a serialized field and we want to also be using Unity engine. UI and this is going to be a ref again to our text so a text here and we'll just call this one text and then we can do uh a public public void setup and it's going to take in a player and a string Source just passing along the information and then here we said text. text equal to and then we can format this correctly so we'll do um a beginning bold Sign Plus player plus um actually this is the source of course Source plus and then end bold sign and these are called taxs HTML TX and then we do plus killed plus and then a beginning italic Sign Plus the uh player plus the end italic sign all right I believe that was it it's kind of confusing to look at but if I just skim through this everything looks correct so let's try that out and then inside of our kill feed what we do in here is we instantiate that object so let's create a reference to it so let's again make this a calized field and this is just going to be a game object and we'll call this one our kill feed item preap there we go and then down here we instantiate we instantiate a kill feed item prefab and we set this as a parent so this do transform and this is not necessary I'm just stressing it and uh we have a game object here and uh we call that go so we make a temporary variable containing the object that we just uh instantiated which was a kill feed item prefab and then we of course get a component so go.get component in order to get our kill feed item component and then what we can do is just do dot setup and we put in here the player and the source boom there we go I believe that was all so let's make sure to set everything up here so if we find our prefab we find our player UI pre prefab going to the kill feed we need to drag in our kill feed item prefab so that's find that as well kill feed item drag that in there and also select the kill feed item and drag in our text there we go so that should be it so if we now hit save on this and hit build as well uh to build this into a standalone and first let's test this with just U two uh players in the scene and then we'll open up a third one as well just to see if it's working so uh you can see that we have our multiplayer FPS here it's loading up there we go let's boot this up as well let's do test 1 2 3 test 1 2 3 log in do the same here test 1 2 3 4 test 1 2 3 4 log in and we can create a test room and we can join that test room over here and we'll wait for it to join we can see nothing appears right away because um we don't have any UI elements to show but as soon as I kill this guy you can see that it appears up here and even with the bold and nalic formatting and you can see it appears over here as well so if we now now kill the other guy here we should see that working too and you can see it disappears while you're in the scene view because the player UI is not active there but if you really want it to be active there you can make it carry over but actually I don't really want it to be there I think it should only be uh inside uh when you're really playing but again you don't necessarily need to make this uh that integrated into the player UI uh you can uh do that however uh you wanted to U be so the only thing that you will notice right now and don't worry about this area that's because I just go out of the editor here it's not going to be an issue whatsoever uh the only reason uh problem here is that our UI doesn't um disappear again so uh this is a very easy fix all we need to do is go into our kill feed item create a start method actually no we don't need to do that uh either we can just do kill feed ah we can do it in here or we could do it inside of a start method under the kill feed item you could in here you could go destroy after actually I want this to be inside of the kill feed so let's do destroy here and we can do that uh what we want to destroy is the game object and we want to do that after say 4 seconds there we go and that should actually take care of it um what you could also do and then in that case I would recommend doing it in here is have some kind of code rtin or some kind of timer um that you use and then after a certain amount of seconds um you are going to play an animation that makes it fade out and when it's done doing that animation uh you can remove it that's just going to make it look a bit more pretty but really there's no difference to the two so uh because there's no difference we're just going to do it uh this way uh so I believe uh that was all we needed to do so um what we can do now is just uh build this one last time to see it working and we should be able to get it up and running here so let's run that and run this and I will show you one last uh kind of UI specific thing that uh you can of course um change if you want to so test 1 2 3 4 test 1 2 3 4 H log in here so let's create a room test and create join the that room over here uh the thing that I want to show you is the order in which uh these uh um these notifications appear so uh normally when you do a kill feed uh the newest piece of information will be pushed to the very top and the on at the bottom will disappear first however I believe with the way that we've set it up right now uh it's going to be the opposite way around so new kill feed uh things will appear at the bottom so what you can do to uh change this is just force your object higher up in the hierarchy you you could do that by renaming and I actually think that Unity has a buildin function for reordering that as well if you want that functionality inside of your game you can easily just Google for um uh changing object order in unity in the hierarchy and you will definitely be good to go or changing order uh uh uh for items in list using unit uh or using yugu uh and uh there's plenty of information on that kind of stuff but it's just one of those again one of those UI specific things that I don't want to spend too much time on so now we can uh kill this player it's going to appear up there and after just a few seconds here you can see that it disappears from both clients so now let's just for fun again find our projects folder uh find our multiplayer FPS there we go under builds windows and we can actually go ahead and create uh or open up another version of this client uh just so we can see this working with three players I think that could be kind of exciting so I'll just pause that and I've actually set up a test player here test 1 2 35 test 1 2 35 hit log in there and I shouldn't have chosen uh this similar names when they appear in the kill feed but that's all right so uh we can see now that he's joining and once he's joined let's try killing two uh two players very quickly here so you can see that that indeed shows up and we can do the same thing over here and everything is working so there we go we killed on test 1 2 3 4 and we kill test 1 2 3 and you can see that I was correct in assuming that the order would be a little off but again you can definitely uh fix that very quickly and you can see that they are on top of the same spawn point here uh so let's just go ahead and kill those these spawns are even worse than Call of Duty and I can't believe I just said that so U those are definitely going to uh need to be worked on at some point all right so uh that was pretty much all for this video I hope you enjoyed it I thought it was uh really a fun little thing to do something that's pretty essential for any kind of shooter because it's well it's in pretty much all of them these days and uh people are going to be asking for them if they're not there so that was pretty much it I hope you enjoyed it and I will see you in the next video thank you so much to all of the awesome people who donated in September and a special thanks to Aron meta Robert Rose James Kell Hound Kim Ros B andand dang and Vixen P thank you so much for donating you guys are awesome if you want to support breis yourself you can go to patreon.com breis