in this video we'll have a look at making our camera follow the movement of our player not really much to say about that let's just jump into it so as with everything else in game development making the camera follow the player can be done in multiple ways the first and most obvious one is probably just parenting the camera to the player Unity allows us to Nest game objects that means that we can take our camera here selected and drag it under our player we have now parented our main camera to our player and the main camera is now a child of that player this means that whenever we go and move our player the camera is going to move with him however the problem with this is that if we go ahead and rotate our player the camera also rotates with them and that's going to look very weird when we collide with something and the cube starts spinning then the camera is going to spin with it and everything's going to be confusing so what we do instead is we take our camera and unparent it and we make it follow only the position of a player using a script so let's go and hit add component we'll call it something like follow player select C and hit create an ad let's double click it to open it up in Visual Studio and let's clean up the script a bit so let's delete the two using tags up here and let's also delete the start method now just like when we wanted to move our player where we wanted to move him a tiny bit each frame we also want to have our camera snap to the position of our player each frame so we'll put our code inside of the update method however in order to set our camera's position to that of the player we need a reference to the player the easiest way to do this is by making a variable that stores the reference to our player so when we create a variable we write public and so far we've only looked at the basic data types stuff like float integer and string that stores numbers and text but variables can actually also store way more complicated stuff if we go ahead and write transform here we can basically get a link to our player with information about his position rotation and scale remember the component responsible for these things are indeed called a transform so that's what we're getting a reference to then of course we need to name it something but we'll just name it player let's close that with a semicolon and if we just try and hit save now and head back into Unity we see that an empty slot called player now appears all we need to do now to make this player variable point to our specific player is to take the player and drag him into that slot so now every time we write player in our code it refers to that object to test this we can go inside of our update and we can try displaying the position of our player in the console to do that we write debug.log to write a message to the console inside of the parenthesis we then write player do position and we close it off with a semicolon now every frame we should display a message in the console with the position of a player let's save that head back into unity and hit play and if we go and select our console we can now see that position updating if we select our player the two numbers should correspond so we can see here that our player is currently falling and so his y value is rapidly decreasing and it does the same thing in the console we can also see that he's moving a bit forward on the Z again he's also moving forward in the console so now that we have this link between our script and the player we can take the position of our player and feed it to the camera so that stop playing head back into visual studio and instead of writing the position of our player we'll go transform and when whenever we write this with a non capital T it refers to the transform of our current object that means the object that this script is sitting on it also says so here the transform attached to this game object so by writing transform and then do position we're referring to the position of our camera because our follow player script is sitting on that object and just like we were able to display a position we can also set it equal to something else so now we could move our camera anywhere in the world but we want to move it to a very specific place and that's the position of our player so set it equal to player. position and again we'll close this off with a semicolon so now our camera's position this game object position is going to be set equal to the player position every frame so let's save that head back into unity and technically our code doesn't have any errors but there's a main problem with this let's try zooming out in the scene view so we can see what's going on and hitting play we can see that indeed our camera is following the player but it's following the center of our player and that means that right when we start the game our main camera snaps to be inside the player object you can see that the effect here is that we're getting kind of a firstperson view of course this might be something that you want for your game but in our case I think it would be better if we move our camera a bit back from the player and a tiny bit up to do that we'll create another variable so again we'll write public and I'm going to introduce you to another data type this one is called Vector 3 and a vector 3 is actually really really simple all this does is store three numbers a float stores one number with decimal places a vector three stor fores three floats and that makes it really easy to use when it comes to position of data because we have an x a y and a z so if we go ahead and name this one offset save it and go into Unity we should now be able to specify an offset on the X Y and Z value so in our case we wanted to remain centered on the X so we'll leave that at zero but we do want it to lift it a bit on the Y here so we'll set that to something like one and we definitely also want to pull it back so we'll set the Z here to something like 5 so now that we have this offset on the different axes all we need to do is add it onto our player's position so to do that we'll go in here and say player. position and then plus offset and we are very used to seeing the plus here being used between two numbers but unless you have experience with college level math you probably haven't seen it between two vectors how do we add three numbers onto other three numbers it's kind of weird if you want to learn more about what's going on here I have a video on vectors that you should definitely check out basically what's happening is we're taking the exposition of a player which is current is zero and we're adding zero onto that so that's still zero then we're taking the Y which is 1.16 in this case and we're adding one onto that and then finally on our Z this is currently zero as well and we're adding ne5 onto that so that's ne5 on the Z and we keep doing that as the player moves forward so in this case our X would still be zero our y would be 1.16 + 1 which is 2.16 and our Z would be this number 5 which is equal to 1.63 so make sure you save your script and hit play and our camera should now follow all player with the knife's offset position and this is much better than parenting because if we tilt off the ground here you can see the cube rotating but the camera is staying in place so that was pretty much it for this video if you liked it make sure to subscribe so you don't miss a future episode also a lot of you guys have been saying that you aren't notified when I upload a new video so make sure that doesn't happen click the little bell icon next to the Subscribe button and hit send all notifications Why YouTube why do you have to do that oh uh we don't know other than that I will see you in the next video thanks to all the awesome people who donated in January and a special thanks to Derek heemskirk facel marifi James Kell Hound Robert bonam Peter lock and Jason dto if you want to become a patron yourself you can do so at patreon.com Brees thanks a lot guys