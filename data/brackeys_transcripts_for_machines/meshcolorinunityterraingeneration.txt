in this video we'll have a look at adding textures to a mesh as well as how you can generate custom colors to fit the layout of your terrain but first this video is sponsored by Jason Wyman he's the creator of the amazing unity 3d master class which takes you all the way from the very fundamentals of game dev to using unity on a professional level it will teach you the principles of solid game architecture and how to build a variety of game types on top of that you will also get familiar with packages like cinema Sheen timeline and Pro builder what makes this course unique is that you get to work along with other students and get live oneonone help from Jason himself it's also possible to extend the course to learn vr development and he even offers one full year moneyback guarantee and then you will have made three games and have the opportunity to customize and show off your work to the class so if you want to become a pro unity developer I definitely recommend you click the link in the description and get started also special thanks to make a game and your kiln in Co Harmon true VR systems extended Blair and infinity PPR for their support on patreon now at the end of the last video we talked about adding multiple layers of noise to make it terrain more interesting I've gone ahead and added two more layers of noise on top of the one we created in the last video and as you can see the result is already so much nicer in fact it's such a common technique to use that it has a named octaves definitely let us know if you want to learn more about how octaves work and how to apply them to your terrain until then you can check out the links in the description to learn more for now let's add some color to a terrain so let's start by adding a custom material to our mesh to do this let's select our mesh generator and here you can see that there's a slot for a material so under a project we can go create material and let's call it something like terrain material I mean then select Amish generator and drag that right in and now when we hit play we should be able to control our terrain using this material we can for example tinned it to add color or control the metallic Ness and smoothness of the surface pretty cool we can also try and add a texture so I've gone ahead and imported the practice logo and if we drag this into the albedo Channel we can see that something weird is happening here the logo itself is nowhere to be seen but the environment does take on this blue color from the texture the reason why this is happening is that we haven't our terrain how to display textures in other words in order to show a texture we first need to define the UVs uvs is a set of data that tells our object how to display textures the job of UVs is to map point on our object two points on a 2d image for 3d objects like a cube we refer to the process of making the UVs as unwrapping because we essentially unwrapping our object laid out on a 2d plane however in our case this process is super easy since our grid is already created flat so all we need to do is go through each of our vertices and map it to our image since UV coordinates go between 0 and 1 we can't just use the position of the vertex directly we need to first take the X and divide it by the X size and then take the Z and divide it by the Z size the result is a value between 0 and 1 for the coordinates that's all you v's so to do this in code we can open up our mesh generator script and at the top here we now need another array so this is going to be an array of vector twos which is going to store our UVs we can then scroll down to where we create our shape and in here you can see first we create our vertices then we create our triangles and then down here we can define our UVs now since we are going to have a UV for each vertex we can go ahead and set our UVs array equal to a new vector to array and then simply give it the same size as our vertex array so we'll use vertices dot length and because it has the same size we can also use the same for loop so let's just copy the for loop for our vertices and paste it down here and of course we need to remove the code regarding our vertices and now we have two for loops that will go through every UV in our array and with this we can simply go UVs and then I equals a new vector and instead of just inputting X and Z here this is where we're going to do the calculation we talked about so we're going to go X divided by X size comma Z divided by Z size and since of these variables are currently integers we need to explicitly say that we want this calculation to use decimal points so at the beginning of each calculation here we'll write float in parentheses in order to specify that we want to cast this value into a float and that is actually all we need to do to define our UVs now we just need to assign them to our mesh so in our update mesh method let go mesh dot UV equals R UVs array and if we save that and go into unity and play voila right away we can see that the brackets logo is indeed showing up awesome and we can of course go in and play around with all the material settings and it's gonna work just fine or we can change the texture to something else the possibilities are pretty much endless however this is fine if you want to overlay some kind of image on top of your mesh but most of the time when doing stuff like procedural terrain you probably want to create colors that vary depending on the layout of your terrain luckily we can do this fairly easily using vertex colors just like we can define UVs for each of our vertices we can also define a color the cool thing about this is that we basically loop over all of our vertices and depending on the height we assign it a color to define what colors to display at what Heights we can use a gradient gradients in unity are super handy they allow us to input a number between 0 & 1 and it will then return the color at that point the color data is then stored in the mesh and can be displayed using a vertex shader so to do this in our code will go into our script let's go to the top and instead of defining a vector 2 for the UVs let's define a color array for all of our vertex colors then if we go into our create shape method we're currently setting the UVs to be equal to the same length as the vertex array and in fact we want to do the same thing for colors again this is because we have one color for each vertex of course we need to change the type from vector to 2 color but that's pretty much it now to loop over all the colors we can use the same two for loops we just need to get rid of this piece of code and we can then set colors I equal to and this is where we want to specify our gradient so let's go to the top and let's create a public gradient and let's just call it gradient then back in our for loop we can simply set the color equal to gradient dot evaluate and this then takes in the high of the terrain at this point and we can of course get that from the vertex erase let's create a float height let's set it equal to vertices and we'll go i dot y that's the height of this particular vertices so we can simply pass in this height to our gradient function and that should in theory work however there's one issue with this and I'm gonna show you that in a sec for now we can just go down here and just like we set our UV so we can go mesh dot colors and set it equal to our colors array so if we now save this code and go into unity we can see that we now have this gradient and if we click on it it brings up the gradient editor here we can define all bunch of colors along the height of our terrain I'm just gonna make it go from black to white for now and if we were to hit play right now you can see that there are definitely a few problems the first one is that we are not currently using a shade a that is able to display these vertex colors this is just a standard shader that is meant to use with textures the other problem is the height of our terrain if we go in and look at our terrain here first of all it's floating above our grid and second of all it's really really large so the height of our terrain here might vary between say 3 and 20 and this is not really good when working with gradients because when inputting a value on a gradient it needs to go between 0 and 1 so how do we take this height variable that is currently all over the place and normalize it to make it only go between 0 and 1 well we can actually do that fairly easily but we need to know the minimum and maximum height of our terrain so let's go to the top here and let's create two private variables the first one is going to be a float with the minimum terrain height and the second one is going to be another float with the maximum terrain height then when we loop over all of our vertices we can add a few lines first we'll say if the ycoordinate is greater than or maximum terrain height well then we want to set our maximum terrain height equal to that ycoordinate and similarly if Y is less than or minimum terrain height well then we can set minimum terrain height equal to Y so this will make sure that as we go over our terrain and generate all the various it's gonna also update on max and minimum terrain height and so when we generate our colors we can now normalize this height to do this we'll use something called math dot inverse loop and this first takes in our minimum height then our maximum height and then finally it takes in the height of the terrain at this point so vertices i dot y and this is in fact going to give us a value between zero and one pretty cool so we can now save that and go into unity however when we play it's still not going to look very cool because again our shader isn't displaying these vertex colors so now we're basically left with three options we'd either go online and find a vertex shader to use we could also write one ourselves but shady writing can be a bit confusing so luckily there's a third option and that is using shader graph so those of you who haven't used that shader graph is a visual tool for creating shaders and we can really really really easily use it to set up a vertex shader so do you share the graph we need to set up our project to use the lightweight render pipeline to do this we'll go window and select package manager will then go undo all and somewhere in here we can find the lightweight render pipeline make sure to install it if it isn't already once that's done we can go to our project and create a rendering lightweight pipeline asset and we'll just hit enter here there's some settings here you can adjust for the graphics of your game however I'm just going to leave mine as default we then go edit project settings graphics and drag in this lightweight asset and now our project is using the lightweight render pipeline it's that simple we can now go window package manager and if you don't already see shader graph here you can find it under all and simply install it and that's it we can now go under our project and hit create go onto a shader and let's select PBR graph let's name it the terrain shader and let's double click it to open it up in shader graph and we don't need this to be full screen so I'm just gonna dark it here by the scene view and as you can see we currently have one node here that's the PBR master node and this is where we can change properties for our material and one of these properties is the albedo in other words the basic color of an object so all we need to do is add a node that will get our vertex color and then link it to the albedo let's hit space let's search for vertex color and here we go that's a vertex color node it's simply going to get the color of the current vertex when then take the color of that vertex and drag it into the albedo and that's pretty much it I'm not kidding that's all we need to do we can now hit save acid go to our terrain material and make sure to select this shaders that we'll go and select our terrain shader and now when we play foam a gradient is now showing on our mesh in fact because I'm currently updating the terrain every frame I can adjust it in real time so I'm gonna go into the gradient here and we could try and make it look a bit like a real terrain so at the bottom here we'll add some water so some kind of light blue here then we'll add some grass so some kind of a bit darker green we can maybe add some mountain like rock formation so we'll add a darker gray and we can add some more dark gray something like that and then we can have snow on top there we go and it kind of already looks like a terrain of course you can play around with this as much as you'd like in order to create different looking landscapes but you can see just how easy it is to start doing this on your own and if you find something you like we can simply rightclick on the mesh generator hit copy component stop playing and hit paste component values and now we've saved it in our gradient amazing that's pretty much it for this video if you enjoyed it make sure to subscribe and bring that notification post so you don't miss the next one also don't forget to check out the unity3d master class simply click the link in the description to get started on that thanks for watching and I will see you in the next video thanks to the awesome patreon supporters who donated in October and especially thanks to Andrew Carnegie art Arman true VR systems simmer IO extended player cheetah 3d Jeff Johnson infinity PBR Sybok mommy Dennis Sullivan Chris Sheriff Abdullah pizza Murphy thanks along clear the set Vincent and skewer shreya ste turkeys Kirk Ronan Tim a polar bear Bruins cat Noah Kiyosaki Gregory Pierce Larry tweed James Rogers Rathbun pecan Vania Erasmus Robert pond Kerr Jackson James P Anthony patio Swedish key and a breeze see you guys rock