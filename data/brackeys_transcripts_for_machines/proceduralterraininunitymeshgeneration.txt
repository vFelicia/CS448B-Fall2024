so in the last video we talked about how to get started generating your own meshes through a code in this video we'll expand on that to try and make something a bit cooler like this piece of procedural terrain to make something like this we basically create a grid of vertices we then fill in the grid with a bunch of triangles and adjust the height of all the vertices in order to create coollooking shapes so without further ado let's generate some terrain but first this video is sponsored by Skillshare Skillshare is an online learning community with more than 24,000 quality classes on game development tech and more if for example you want to learn how to create characters or sprites for a game you're making I recommend you check out this really cool course on how to create pixel art this course teaches you everything you need to know about making pixel art for video games and at the end you will be able to design characters items backgrounds and even make animations a premium Skillshare membership gives you unlimited access to all classes for less than $10 a month so to get started simply click the link in the description and the first 500 people will receive their first two months for free all right let's get to it so to generate a grid we can use the exact same structure as in our previous video we still have an object with a mesh filter and a mesh renderer and then of course a script to generate our mesh and inside the script we have two basic methods one for creating the shape itself and then one for updating the mesh in unity and we really only need to modify this shape function to make it generate a grid instead of a symbol quad so inside of our create shape let's just remove all the code that is currently there and the first thing we need to do is to figure out how many vertices we're going to need for our grid this is of course going to depend on the grid size so let's go to the top here and let's add two public variables a public integer which we're going to call X size and let's set this equal to something like 20 and another public integer called Z size let's also default this to 20 now if we look at this graphic we can see that if we have three squares on the X we actually need four vertices and if our grid is for example two squares tall we need three vertices so the total number of vertices in our grid is equal to our excise plus 1 multiplied by our z size plus 1 so in our code here we can go to a create shape method and we need to set up where sees equal to a new vector3 array and the length of this array is going to be X size plus 1 multiplied with these size plus 1 awesome so we've now created all the vertices that we're going to need we then need to loop over each of the vertices and assign them a position on the grid I would like to do this going from left to right like you see here so to do that let's start by creating a for loop and the variable will call Z and we'll keep going as long as Z is less than this the size however remember it's not only the Z size it's actually the Z size plus 1 so we'll keep going as long as it's less than or equal to the Z size then inside this for loop we're going to need another loop that is going to loop over all of our squares on the X so we create 4 in X equal 0 we keep going as long as X is less than X size and again we want it to be less than or equal to the X eyes so now we're looping over all of the vertices but in order to actually access a vertice and change it we need an index let's go to the top here and create an integer called I and set it equal to 0 then inside of our faux loop we can set vertices and take the eyes vertice and we'll set this equal to a new vector3 and it will feed it the konnex as the x position just zero on the Y because we want it to be a flat plane and then the Z as the Z position and of course after this we'll need to make sure to increment I by 1 and this is going to work just fine this is going to create a grid with all of our vertices however that's actually a neat little trick that we can do to make this a bit prettier and that is we don't actually need to create our integer I up here instead we can delete this and move it into the for loop itself so here when creating the Z we can also set I equal to 0 and then just use a comma and this is going to create both a variable called I set it equal to 0 and one called Z that is also equal to 0 and the good thing about this is that I is now local to this for loop so it can only be used within the for loop and also it saves a bit of space pretty cool and that's pretty much it for our vertices of course we can't really see them at the moment because we haven't defined the triangles that make up our mesh but if you want we can actually use skismo to display the vertices in the to do this that's go to the bottom here let's create a void on drunk isthmus and in here we can loop over all the vertices so we'll create a for loop we'll keep going as long as I is less than vertices darling and for each word you see we'll go ahead and draw a sphere so gizmos that draw sphere will draw it at the vertex position so vertices of I and we'll give it a radius of say point 1 we also need to make sure that we don't do this when we don't have any vertices generated so we'll just add an if statement here is saying that if vertices see equal to null well then chicken out all right so if we save this code now and go into unity let's hit play to generate our vertices then inside of a scene view we can actually see a really nice grid of a bunch of spheres each one representing a vertex and we can of course change the x and z size over here awesome now the next step is to define the triangles that make up our grid let's start by making the first triangle this triangle is going to go from 0 and then up one point but since our vertices are ordered from left to right we can't just add one instead we add the X size plus one to go up one row from there we simply go back down to one so to do this in code we first need to set a length for our triangles array so we'll go triangles equals a new in the Ray and so far we're going to need three points we then set each of the points so the first point triangles 0 is going to be equal to 0 the second one triangles one is going to be equal to X size plus 1 as we just talked about and the triangles 2 is going to be equal to 1 if we save this and go into unity and hit play voila we can now see that a single triangle appears for the second triangle we want to go from 1 then up to excise plus 1 to move up one row and then to exercise plus 2 to stay in the same row but go one to the right this can definitely be a bit confusing at first but don't worry it gets much easier with time so first we of course need to increase the number of triangles in our Ray to 6 and now again we can simply add the points so triangles 3 is going to be equal to 1 triangles 4 is going to be equal to exercise plus 1 and triangles 5 is going to be equal to excise plus 2 again if we save and run we can see that we've now created a perfect quad now to fill out the rest of the grid we basically repeat the code for the first two triangles and offset them each time to do this will first create a loop that is going to iterate over all the squares on the X so we'll create a four in x equals zero we keep going as long as X is less than the excise we'll take all of our triangle code and put it inside of this for loop we also need to create two variables one to keep track of the vertex we're currently looking at let's call that vert so int vert equals zero I will make sure to increase this by one every time we go through the loop so varis plus we also need one to keep track of the triangles let's call that int tries and set it equal to zero as well and every time we go through and have added six points to our triangles array will increase tries by six we then take our word variable which is going to increase by one each time and add it to each of the points so that as we loop through these squares the triangles will shift by one each time in other words we'll simply covert +0 vert plus excise varied plus one another word plus one very plus X is plus 1 and third plus x is plus two so for the first square vert is going to be zero and it's simply going to be zero X is plus 1 1 1 X s plus 2 and so on the second time we go through vert is going to be 1 so it's going to shift everything one to the right so this is going to be one this is going to be x i's plus two that's going to be two that's going to be two and so on and it'll keep doing this until we've gone over all the squares we also need to add the tribes to the triangle index so that we don't keep updating the first six points over and over but we actually shift to the next triangle so in our list so that we don't keep updating the first six points over and over so we'll that tries plus zero tries plus one tries plus two and tries possibly trust us for and tries plus five awesome of course we don't want to create a new triangles array every time inside of this for loop we need to move this out of the for loop there we go so now we're creating a triangles array and then we're updating over the points and this time it's not going to have a fixed amount of six points instead we're basically using six points for each quad and our excise and the size define the amount of quads in our grid so we can simply say X is multiplied by the sighs the amount of quartz x o6 that's the amount of triangle points that we're going to need so if we now save this and go into indy and hit play we can see that we are generating the entire bottom part of our grid if you want we can actually add a bit of code to delay each step of adding the triangles this is pretty cool because it allows us to see how the triangles are gradually being generated to do this we need to change the function here into a corrode team so we'll change it from void to eye enumerator if you've never heard about coroutines before I'll have a link for that in the description for now we can just follow me and then every time we've updated a triangle we can put yield return new waitforseconds and I'm just gonna wait for let's say 0.1 second also we're currently only updating our mesh in the start method this is of course the most effective way of doing things but if you want to see these changes happen over time we need to move this into an update method so we'll create void update and simply paste our update mesh method in there and finally to call a quarantine we can't just call it like a normal function we need to add start corroding there we go so now if we play that we can actually see the triangles gradually being generated pretty cool now to fill out the rest of the rows we simply wrap everything in another loop that will go over each square on the z so in our code here will create another for loop here we'll set Z equal to zero and keep going as long as Z is less than this the size just like with our x loop here and we then take our entire for loop and put it inside of this new loop now if you run this it is going to work however it's not going to look quite right as you can see the triangles are generating but we're getting these weird lighting effects also you can see this orange line that's connecting in a pretty weird way the reason for this is that every time it wraps around to create a new road the script is creating a triangle between the previous square and the next one it results in this weird behavior this is of course not something we want each Square should only be connected to the ones next to it not like it's doing now while you can see it's creating weird connections underneath our plane to get rid of this we go into our script and every time we finished looping over a row we need to increment vert by one this will make sure the script skips generating a triangle that goes from one row to another and simply move on to the next points so after our first four statement finishes we want to write vert plus plus it should not be working we see as it wraps around there's no weird lighting effects or anything like that finally the last and definitely coolest thing is that we can adjust the height of all these vertices for example if we want to make it look like terrain we can add some symbol per than noise if you have no idea what pertinent noise is we have a video on that that I definitely recommend you check out so inside of a script this is actually really simple we just want to go to where we generate all of our vertices instead of just setting the wine to zero we'll create a float called Y we'll set it equal to math per the noise will input our X and Z and let's multiply everything by say two just to make it more clear also we can multiply our X by 0.3 and our Z by 0.3 just to zoom out of our noise a bit again all the stuff is explained in the Perlin noise video and we can then simply use this Y value for our vertices I'll also just make this go a bit quicker by reducing the delay and now when we run it we can see that we're creating this really cool uneven terrain like surface now this is only by adding a single line of code I really recommend you experiment with combining multiple layers of noise to create more interesting results or maybe try to use the sine function to create wavelike behavior well of course have some things to where you can learn about that in the description finally we can of course go in here and remove the delay will turn into our normal function we'll put the update mesh at the top here to make it more efficient also we don't need to start it as a kuroh teen and let's also get rid of all the gizmos and now when we play voila we've created this super cool terrain yay that's pretty much it for this video if you enjoyed it make sure to subscribe and bring that notification bell so you don't miss the next one also don't forget to check out Skillshare simply click link in description to get started and if you'd like these videos consider supporting us on patreon patron is an awesome way to help us make these videos by donating a monthly amount you can choose how much and cancel at any time we really appreciate all the support on that thanks watching and I will see you in the next video thanks to the awesome patreon supporters who donated in October and especially thanks to Andrew kerning Co art Arman true VR systems simmer IO X and a player cheetah 3d Jeff Johnson infinity PBR Sybok mami Dennis Sullivan Chris Sheriff Abdullah prism fi thanks so long clear the set Fintan pan skewer where's the turkeys Kirk Ronan Tim Apple debauch burns cat now Kiyosaki Gregory Pierce Larry tweet James Rogers rock Baron pecan Vania Erasmus Robert bond car Jackson James P Anthony patent Q Swedish key and a breeze see you guys Rock