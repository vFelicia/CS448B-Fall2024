everyone and welcome to this video ooh well this is new anyway something that I personally really think is fun to do is topdown shooting it's actually quite different from regular topdown movement like we showed how to do in a recent video because the player always needs to point towards the mouse so in this video we'll set up a topdown player complete with movement aiming and shooting but first this video is sponsored by Jason Wyman if you haven't already heard about him he's the creator of the amazing unity 3d master class which takes you all the way from the very fundamentals of game dev to using unity on a professional level it will teach you the principles of solid coat architecture and how to build a variety of game types what's so cool about this course is that you get to work alongside other students and get live oneonone help from Jason himself he also has an amazing VR course which will teach you how to work with VR and even make a game and then you will have made multiple finished games and even have the opportunity to customize and show off your unique work to the class sign up now and the first 50 people will get a free tshirt from line of code as well as a big discount and other bonuses on both courses simply click the link in the description to get started also I'm really excited to announce that we will be attending unite Copenhagen later this month if you've never been to unite it's a huge game developer conference hosted by unity and I hear this one is going to be particularly big of course it's in Copenhagen which is also our home city and the event will be taking place from the 23rd to the 26th of September tickets up for grabs now and since we are also going we talked to unity and they agreed to give everyone a 20% discount simply click the link in description and use this coupon code note that this doesn't work for training day passes but I really hope to see a lot of you there alright with that said let's get shooting so as you can see I've set up a quick exam scene here these rights that I'm using for the environment is from the tiny RPG forest pack and for the player I'm going to be using a soldier from the armored soldiers 2d pack that links in the description for both if you want to use them and they're of course 100% free so from the armored soldiers pack I've gone ahead and taking this sprite right here from the PSD file it's just a simple red soldier sprite you can use any sprite that you'd like I'm just going to go ahead and set the order in layer 210 here to make sure that he appears on top of it thing else and are we ready to start setting up our player so the first thing that he needs is a rigidbody I'm gonna hit add component and search for a rigid body 2d I'm gonna set the gravity scale to zero to make sure that he doesn't fall down and I'm also going to freeze his rotation on the Z this is not because we don't want him to rotate we definitely want him to do that but we want to be able to control that rotation ourselves this way we can make sure that he always points toward the mouse and that he won't go of course if he collides with something and with that we can add our player movement script the play movement script is of course going to be responsible for moving around our player but it's also going to take care of aiming so let's go ahead and hit add component here let's write player movement let's say create an ad let's double click to open it up in visual studio so first of all we can go ahead and delete the start method here and we of course going to need a few variables the first of which is a float to control our movement speed let's call it move speed and set it equal to five by default we also need a reference to our rigidbody component because this is the one that's going to be moving around our player so let's create a public rigidbody 2d and let's call it RB now of course whenever we're doing movement in unity we want to split it up into two functions we want to use our update function for getting the input for our movement so this is where we will trigger our movement and then we'll use a void fixed update function for actually moving our player based on this input so let's start by gathering some input in our update function here we're going to be using input get access raw and first of all we want the horizontal axis and we of course want to store this in a variable so that we can access it inside of our fixed update let's go ahead and create a vector let's call it movement and then inside of our update we can set movement on our x equal to input that get access raw horizontal we then do the same thing for our Y so movement at y equals input that get access raw and this time we'll of course use vertical so we're now gathering our input on the X and the y and we can then use that to actually move around our player inside of the fixedupdate so he will write RB to access the body will use a function called move position and this will simply move our object to the position that we input in our case we want to move it to our current position so our bdub position plus our movement vector and we can then multiply this with our move speed to be able to control the speed of this movement as well as time that fixed Delta time in order to make sure that the speed of a movement will not depend on how many times a fixed update is called so this should give us a nice smooth uniform movement in fact if we just save this we can jump into unity select our soldier drag in our rigidbody 2d component to the RB slot and then hit play and as you can see I can now move around the player using the WASD keys or the arrow keys really cool so now that our movement is in place we can start to look at aiming and the idea of this is exactly the same we find some input inside of our update method and we aim inside of the fixed update so first of all to get some input will be using input dot Mouse position and this is simply the current position of our mouse in pixel coordinates and this is exactly what we want however our game doesn't exist in pixel coordinates it exists in ingame units so we need to convert this position from a screen point to a world point and we do this using a simple function on our camera of course that means we need a reference to our camera so that's going here and create a public camera and let's just call it cat we can then access this camera by going cab dot and then use the function called screen to world point so this will convert our mouse position from pixel coordinates to world units there we go and we then store this in another variable so let's create another vector let's call it Mouse position or just Mouse pause for short and it said Mouse pause equal to our cam that screen to world point where we input our mouse position so now that we know exactly where our mouse is all we need to do is rotate our plate to face that point and we do this in two steps so the first thing that we need to do is get the direction to our mouse position from where we are currently standing to do this we simply subtract the two vectors so we'll create a vector tool this is going to be the direction that we want to look in and it's going to simply be equal to our mouse position minus our current position if you're never dealt with vector math before this might be completely new to you but if you take two vectors and subtract them you're going to get a vector that points from one to the other so in this case if we have our player position right here and we have our mouse position up here we're simply going to subtract the two vectors and get a victory the points from a player to a mouse position however in order to actually rotate our player we don't just need a direction instead we need an angle in other words we need to know what to set or the rotation of our player to in order to point in that direction to do this we use a function called a tan 2 so we'll create a float call it angle and this is the zrotation and we'll set it equal to math F dot add 10 to and here we're going to input a few things so what is at 10 well at n 2 is a function it's a mathematical function that returns the angle between the xaxis and a 2d vector starting at 0 and terminating at X comma Y so that might sound really complicated but in reality it's actually fairly graphically simple so here's a graph explaining at 10 if we imagine our player is standing at the center here and we imagine that this black dot here is our mouse position at this time well then we can simply use the attend to function where we input the x and y position of our mouse and it's then going to find the angle from our x axis to this directional vector and that's exactly what we need because we already have this directional vector here pointing from our player to the mouse it's what we created just here so we're simply going to take our x and y of a look to your vector and this is a tiny weird quirk with the attend to function is that it takes in the Y first and then the X so we're going to put in look dude y and then look dear dot X that's all we need of course attend to returns the angle in radians so we need to change that to degrees and so we'll multiply with math if rad to degree and this is simply a constant it's 57 point two nine five seven eight you can see it here and it's just a conversion from radians to degrees it's it's that simple and finally I found by testing this that in order to get my plate to point in the right direction I need to offset this with ninety degrees so if your player is actually following the mouse but always pointing at a ninety degree angle then you can always subtract or add 90 degrees to suit your needs here and finally we can apply this to our players so we'll simply go our P dot rotation equals the angle that we just calculated so if we now save that and go into unity and here we need to reference our camera some sim you're going to drag in our main cam here and let's then hit play as you can see our player is now looking in the direction of my mouse at all times really really cool and we can of course move him around at the same time awesome so at this point we are moving around and we are aiming and so we are ready to start shooting some stuff and the first thing that we're going to do here is add a fire point this is just an empty object that we'll specify from where we want to instantiate our bullets so in my case for the soldier here I'm gonna right click hit create empty and I'm gonna press W to switch to the move tool here and I'm simply going to take this object here and move it to the end of the soldiers barrel you can move this to anywhere you want your bullet to fire from I'm simply going to call this the fire point and that's pretty much it for that we of course also need to create a bullet now I've taken another sprite from the armored soldiers pack you can of course use any sprite that you'd like I'm simply going to click and drag this in and here is what I'm going to be using as a bullet of course in order to make this into an actual bullet we need to give it a rigidbody 2d again we'll set the gravity scale to zero and we'll just leave all the other properties as is I'm also going to add a Collider to this bullet so that we can lady register whenever it hits something I'm just going to use a symbol box Collider 2d I'm gonna hit edit Collider here and just place it around the bullet so now that we've set up our bullet we can go ahead and drag it into our project panel and this is going to make a prefab out of it so then we can remove it from our scene and we then create a script that is going to spawn in this bullet whenever we need it so on our soldier here that's go ahead and create another script now and it's called this one shooting let's hit new script create an ad again I'm gonna delete the start method here and instead I'm gonna add in a few variables I'm gonna create a public transform and this is simply going to be a reference to our fire point object I'm also going to create a public game object and this is going to reference all pullet prefab that we just created and finally let's create a public float which is going to control the bullet force and let's just default that to something like 20 now inside of our update we can check whenever we want to fire so we'll go if input that get button down and the button that we want to check for here is fire one file one is one of those default input bindings in unity if you haven't changed it it's going to be bound to Mouse one now remember that unity is currently working the entire input system I cannot imagine this not working for quite a while but if it is giving you issues definitely check out our dedicated video on the new input system you should be able to just slap that right into this script alright so whenever we press this button we want to go ahead and shoot so let's create a dedicated function for that let's just call it shoot and let's go ahead and make it down here so we'll write avoid shoot problem close some parentheses and curly brackets and this function is actually going to be fairly simple we want to do two things in here first of all we want to create a bullet at our fire point and second of all we want to apply a lot of force to this bullet to make it fly out of the gun so let's start by creating the bullet we do this using the instantiate function here we feed it the prefab that we want to create so we want to make a bullet prefab we also give it a position so we want to spawn it at fire point position as well as a rotation we want to use fire point rotation there we go that creates our however we also need to be able to reference this bullet in order to modified afterwards in our case we want to add a force to it so to retain a connection to the bullet we're going to write game object fold it and set it equal to the instantiated bullet this way we can now use this bullet variable so in order to access the rigidbody 2d we'll use bullet dot getcomponent rigidbody 2d there we go and we then store this in another variable so we'll create a rigidbody 2d call it RB and set it equal to the rigid 2d of the bullet and finally we can then access this RB and use the function add force and so we can add a force in the direction of a fire point dot up vector multiplied with a bullet force and the force mode here force mode to D is going to be impulse because we want to add an instant force impulse to the rigidbody 2d so again what's happening here will be instantiating spawning in our bullet we're saying at this point we want to name it bullet so that we can access it later we then access this bullet and get the rigidbody 2d component on the bullet we call this component RB we use it to access a function on the component called ad force where we add a force in the fire pointed up vector multiplied with the bullet force I totally understand if you find this code confusing it is definitely a bit confusing just know that we're creating the bullet and we're making it fly at a high velocity and with that let's try and save this go into unity here we'll dragon off fire point also dragon a bullet prefab and if we now hit play and click our mouse we can see that a bullet indeed does fly out it also kind of collides with everything that it touches and it just simply stays there but we do definitely have bullets and we can now shoot all around which is really cool so the final thing that we need to do is of course make our bullet react to it hitting something so to do this we can simply go to up all the prefab and add a new component and here we'll create a pullet script let's double click it to open it up and we can remove both the update and the start function here because all we need in here is a function that triggers whenever we collide with something and unity of course has one of these by default it's called void on collision into 2d now this function also takes in an argument of type collision 2d and we can just call it well collision and what this is doing is simply gathering some information about what happened in this collision so in here we can get some information about what we hit so the collider that we made contact with we also get the relative velocity between the two colliding objects that's a bunch of information in here and this is of course super useful if you want to damage whatever you hit because you can access components on the colliding object however for now all we want to do is just add a cool explosion effect and remove our bullet so to do this we need a reference to a prefab that we can instantiate with this explosion so we'll create a public game object let's call it hid effect and I've actually already gone ahead and prepared an effect using some sprites I had from another asset store pack called Warped caves of course have a link to this in the description as well but I've simply gone ahead and created a short animation out of these that well place a tiny explosion so I'm simply going to go to my bullet here and just drag in this hit effect you can use anything you'd like you can also use particle effects if you want to and then inside of our script we can just instantiate it in the exact same way that we did with our bullets so let's go instantiate we want to instantiate the hit effect want to do that at the current position of our bullet so transformed up position and we really don't care what way this is rotated so we'll just use the default rotation which is referred to as quaternion dot identity yes we use this super weird word for just saying no rotation and of course we also want to remove a bullet afterwards so we'll call destroy game object and just to be good with our code we also want to make sure that we clean up all of these hid effects so we're simply going to create a temporary variable that is going to story reference to it just like we did with a bullet and then call the destroy function on this effect and just delayed by say five seconds so this way all hit effects are going to be removed after five seconds just so they don't lie around RC so with that let's hit save let's go back into unity and let's try and play and as you can see when we now shoot and hit something with our bullet it explodes and disappears really really really cold now of course there are a bunch of other stuff that you can do with shooting most importantly you probably want to add some damage in case you are fighting enemies and this of course also other ways of shooting to explore this is what I refer to as prefab shooting because we are instantiating a prefab or a game object and having it fly through our scene however another really common way is reka shooting where we simply do everything through code and this way we can have the bullet hit instantaneously which is really cool for stuff like lasers luckily we have a video dedicated to 2d shooting that takes a look at all these things I also recommend adding stuff like muscle flares to your player and just a bunch of other flavorful effects so I definitely encourage you to have fun with it but this should be a nice starting point that's pretty much it for this video if you enjoyed it make sure to subscribe so don't miss the next one definitely learn more about unite Copenhagen using the link in the description remember tickets do sell out quite fast also don't forget to check out Jason's courses simply click the link in the description to get a free tshirt and get started on that thanks for watching and I will see you in the next video which is going to be on the community game jam thanks of the awesome patreon supporters who donated in July and a special thanks to infinity PPR Dennis Sullivan does the violence love forever Chris face Samara Phi David Lipka louisette Ronan Daniel T sonic jacob sanford consensus current says no Kiyosaki Gregory piers Allison the fierce Erasmus and cool Swedish ski you guys Rock