hello everyone and welcome to the shooting tutorial done by Brad keys I am the CEO of Bret keys and in this video we are going to take a look at two different methods for creating our shooting mechanics they are the most used and we won't go into all of the detail with recoil and muscle flashes and stuff like that but I will show you how to script shooting and how to implement it into a game also you can choose on your own which of the methods you want to use it really depends on the style of your game we are going to be implementing this raycast shooting mechanic into our survival game which we have a tutorial series on also on our youtube channel so you can go ahead and check those out if you want to but first of all I have set up a scene here inside of unity to demonstrate the differences between the two kinds of shooting the first one we are going to be taking a look at is what's called prefab shooting or at least I called it that and this kind of shooting effect is pretty much achieved by instantiating a bullet which you have then attached a script to and a rigidbody so you can make it shoot out so you apply some force and then unit sees collision system will do the rest and once it hits something it will check if the it will then send a message to whatever game object it hit that the game object here should apply have applied damage to it and you can change the damage on the bullet itself using this variable but let's just first of all before we get into the scripting let me show you how this actually behaves in game so let's hit play and you can see that I've made this little red bullet and once it hits the enemy the enemy dies and this is because I've set the enemy to have 100 HP health points and I've set the damage also to be 100 so if I go back into a unity into the project pane and select the bulletproof at that I've made we can go under the damage variable and simply change this to something less let's say 50 and therefore when I play the game I need to hit the enemies two times before they disappear but as you can see there can be some errors with this that can be glitches especially if I change this back to 100 especially if we make it so that the bullet goes even faster because realistically a bullet travels so incredibly fast especially with modern weapons of course that you will have to turn this up so you wouldn't even be able to see the bullet so if I open up the prefab shooting script this is how it looks it simply has a variable called the bullet and this is declared as a type rigidbody because we want to later influence the force and the positioning of the rigidbody we simply wanted to shoot out and it also has a speed variable which can then be changed inside of unity it then checks if the player hits the mouse button and if he does we want to instantiate the bullet so instantiate the bullet and the instantiated version of the bullet should be called clone we'd then want to apply a velocity through the clone so clone dot velocity in the direction forward by the speed amount the speed variable and then I've just added that the clone game object should be destroyed after three seconds so that our hierarchy won't be filled up completely so when I play the game and make some bullets you can see them start to disappear after three seconds right so that's the prefab shooting let me just show you how this can be used wrong so I have bye for now and chat this to our main camera the prefab shooting script and if I change up the speed to let's say 200 with which would probably be more realistic first of all the bullet goes really fast in get it can't go through walls also because simply it's too fast for the unit circulation system to handle and well I have to shoot the enemies a whole lot of times before they die even though they should die on just one shot so it can be really effective for creating slower bullets or if you want to be able to throw hand grenades but in general if you want to be precise with your shooting prefab shooting is just not the way so let's go ahead and disable this and select our play into that and enable the raycast shooting which have cost attached to the player and let's just see how this works so I hit play and so we can see that I have made a little particle that appears wherever we hit something and of course I am missing the crosshairs that would be in the center of our scene in this preview scene but so it can be a little difficult to aim but once you get that in place this should work just fine so I can aim at the enemy and they will die and I can pretty much guarantee that this will happen every time one thing though of course the enemies does have to have colliders attached to them but that's also the case with the prefab shooting let's take a look at how rick has shooting actually works so here we have quite a few things going on and most of these are actually because I wanted to show you what the computer does behind the behind the game so this is what the computer does so if I just quickly hit play while I am in this scene view also sorry hit play here there you go you can see that the computer draws a red line between the play of the camera what he is pointing at and the enemy or whatever he's shooting at and so the computer is able to more realistically calculate how the bullet would fly you then have to implement stuff like gravity and other forces that could manipulate the trajectory of the bullet but this is a much much better way to do it so that's pretty much ray cast shooting so if I just quickly open up paint we have in the first example in a prefab shooting example this is the prefab shooting we simply take a point and this can be whatever this would normally be an empty game object this box is an empty game object and we say that from here we want to create a pallet prefab so we instantiate a bullet around that and then later we tell it that we want to fly in a certain direction and this would normally just be forward and this can be done using a speed variable which you can then change inside of unity so that's it for the prefab shooting and because this bullet this bullet prefab has a rigidbody attached to it it will by default collide with things in the same raycast shooting works somewhat similar but a little different so this is the raycast shooting and what we're doing here is we have our player and whenever he presses the button we tell the computer to draw an invisible line let's make this screen from the camera the way he looking he's looking until it hits something whenever it hits something we want to instantiate some particles wherever it hits so here we can instantiate some sparks or some blood then we simply say that we want to send a message to whatever it hits and this means that we can call a function on the game from this script that is attached to the game object that we had so if this was our enemy this is our enemy would then be red we can call a function on the enemy script saying that it needs to lose health so that's basically it for understanding the different methods the one that we are going to be using are in our survival game is the raycast shooting so let me just go ahead and open up the actual is the actual scene from our survival game and this is how the game looks so far we have an enemy down here and let me see if I can find him there yes that's our enemy and because we are just testing some stuff out I want to bring him over to our play so a little village so if I go ahead and hit play we can see him and he he actually also chases us and for now we can only hit him but we want to also create a shooting mechanic so I haven't actually modelled out a gun but this is not important for this tutorial this the gun would simply be graphics for now we just want to create the script that handles the shooting and so if we'd go under the player the main camera we can see that I have made an empty game object called melee and under this melee I have a maze and a sword and so I can parent all of the different weapons that I want to exist in my scene to this melee object so if I go ahead and disable the mace I want to create a new object called gun and for now this is just gonna be in empty car a game object this is where you would bring in your model the gun and I'm just gonna call this cut drag it under the melee game object and let's century off the position and there we go it's pretty much in this century of our camera dick trajectory and a little out from our player that looks good not that it really matters as long as you don't have a model so let's actually add a script now so hit the add component button new script and call this let's call this ray cast shooting ray cast shooting and I'll just quickly capitalize the are actually let's not do that because unity wouldn't like us to so let's open up the script in monodevelop and here we go this is how it looks so let's start writing some shooting functionality we can go ahead and delete the function start because we won't be using that and let's make some variables the first variable you're gonna make is called var and then we are going to write you can write whatever you want but this is basically just gonna store the particles that are going to emit whenever our so called bullet hits something so this could be sparks this could people odd and you could also have different particles emit depending on what you what you actually had so I'm just gonna write our particles actually I'm gonna write effect and then it's gonna be a type transform the next one is gonna be a bar and this is going to be the damage variable so let's write the damage and by default that's set this 200 let's go into our function update now and write some more code so here we're gonna type bar here I think it's gonna be a type raycast see if I can spell this right raycast hit yes and then a VAR ray of type ray and it's going to be a ray and it's going to be equal to camera don't main that screen points to ray a vector parenthesis vector 3 parenthesis screen dot with times zero point 5 comma screen dot height small letters screen dot height 5 times 0.5 and then comma 0 end up parentheses and a parenthesis and then a semicolon now what we're doing here is we are creating two variables inside our function updates so these are constantly gonna be changed the first one is kind of is called hits and it's gonna basically store all of the information of the game object that we are going to be hitting so our hit function or hit variable I'm sorry it's gonna store information about our enemy so whenever we send out the line and it hits the enemy it's gonna store information about what we hit and where we hit it so that's its that is something we are going to reference later to found find our stuff and to send a message to the game object that it should lose damage so this is our hit variable now let's go back and see what our ray variable does our array is our actual ray cast so this is our line and here we simply say that the sensory of the screen should be sending out the line straight forward so ray equals camera that main screen points array and the screen points array function will simply take it whatever position on the screen mean that means a 2d coordinate and sent out a lane line straight forward from that and here we declare what where exactly that's going to be and it's gonna be half down our screen so we take the width and it's going to be the width times 0.5 so that means about here and it's going to be the height times 0.5 so that means half of the height width which gives us the center of the screen and on the Z we just wanted to start directly from the camera and so there this is how we actually cast out one of these lines all right so now we want to check if the player actually presses the input mouse button so actually presses the fire button so if input that get mouse button down you can use anything here but I'm going to use the mouse button down zero which means the left mouse button then we want some things to happen so let's open up some parentheses so we can make some logic for this if statement and inside of here we want yet another if statement we want if physics dot raycast so if the raycast actually hits something ray hit 100 and separate them with commas and make sure it you close up the parentheses so this will check this will make sure that it casts out this array that it stores the information in the hit variable and that it only does this if it's inside a range of 100 so that you won't be shooting stuff all the way across the scene but feel free to play around with this variable it really depends on what you want to achieve so let's open up some more brackets so we can have some logic inside of this new if statement and here we're gonna do quite a few things let's start out by just actually writing the dyeing of our enemy so we are going to write hit dart transform that sent message and open parenthesis and call this apply damage comma the damage comment send message options that don't require receiver close up the parenthesis and end with the semicolon now I know that this code can be a lot and it is quite confusing but let me just go what we have going on so far we have the damage variable which is going to simply tell the computer how much we want to damage the arrow and in opponent we have some variables helping us in sending out the array and looking at what it hits and we have some if statements making sure that this only happens when it actually hits something and when the player presses the fire button and if all of these requirements are met then we want to send a message to whatever we hit that it should apply damage I can see that I have misspelled this to Apple damage so apply damage it's very important that this name here is the same as the name of the function that should apply the damage so what's going on here is we say it sold the hit that transformed that send message that we want it to call a function called apply damage and it it has a requirement and that is that it will use the damage variable so we call the apply damage function and sent the damage variable with it and if the the if whatever we hit doesn't have this damage function then we just won't care so it doesn't have to have a receiver then then nothing will happen simply so I'm let's open up the script that will actually be applied damage to so go back into unity let's just quickly see if we have any errors I can see that we have two if physics that drink Astra function update let me see I can't seem to find any errors oh yeah I've missed a parenthesis in the F statement so quickly close that off see if we still have any errors now via error free but I love this thing now we can go and check out our enemy script that's our enemy and this was written in the survival game series tutorial tutorial series and you can just go ahead and check it out but it's a very simple script called enemy health and inside of here you can see that we have a function called apply damage which requires the damage variable and it's simply gonna say that health will be less the amount of damage so health minus equals the damage so we will subtract the damage variable that we are going to be sending from the health all right so I'll just quickly close on some of these scripts so these are the two most important scripts and let's go ahead and test out if this actually works so open up the game hit play and indeed when I click the button and point on the enemy it does disappear from our scene so that's it for the most basic part of ray cast shooting if you also want to apply some particles we can do that let's go back into the raycast shooting script this can be really helpful in showing the player where he hits when he when he misses and so on and so forth so let's write var particle clone equals instantiate and the instantiate function is what you use whenever you want to spawn an object so make an object appear all of this Sutton so open up a parenthesis and type effect the variable effect we declared earlier comma hit dot point comma quaternion dad look rotation open up parenthesis hit dot normal close parentheses close parenthesis and a semicolon now this line makes a new variable called particle clone and this allows us to later delete this when it's done playing but the important part is not this the important part is the instantiate effect at the hit dot point with the rotation of catonian dog luke rotation hit dot normal now if you're not too heavy on math basically what the normal is so I'm gonna open up a new paint document basically what the normal is at least in this case as if we have a circle the normal would be this line so what we're doing is we want if we hit the if we hit the circle from a certain angle let's say we hit it from here we want to make sure that the particles are facing this way out and not omitting inside of the the the circle of the enemy so we wanted to meet amid outwards and this is better done by simply taking the normal of that point and so we can make sure that the particles will emit the correct way and so if we go back into the script editor we simply instantiate the particles at the position where we hit with this normal rotation but you'd really I can understand if it's it's difficult wrapping your head around but for now you can just go ahead and write it in it should work in all cases and then type after that destroy particle cologne and dart game object game object comma after two or three seconds you can choose I'm just gonna write two so this will just make that make sure that we don't have a lot of particles in our scene they will be destroyed after two seconds and let's quickly make a particle for us to instantiate I've done this before hand so I'm just gonna use the one I used inside of the example scene so I have it under the shooting tutorial and then pull it hit so I'm gonna drag that out into my assets folder so that it is select the gun and drag in the ability to hit but you can always do this by making a game object create other particle system chicken around with it until you are satisfied and then just dragging it into the project to make a prefab out of this so now that we have added this effect let's hit play and indeed when I hit the wall you can see the different particle start emitting and when I hit the enemy he dies and the particles so MIT so on that's it for shooting I know this was quite a long video but it is a difficult subject especially when you want to add different forces particle effects and so on and so forth I hope you enjoyed the video and I'll see you in the next one