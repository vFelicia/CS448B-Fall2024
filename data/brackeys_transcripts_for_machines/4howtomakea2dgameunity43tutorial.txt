thanks for tuning in at braies hello everyone and welcome to the fourth episode in going 2D today we'll be taking a look at making our ball and make it jump around the screen so uh but before we go ahead and get started I just want to quickly plug a couple of wallpapers I made you can see the first one on my desktop here and then also just a bracky logo wallpaper a lot of PE people requested me to make some some wallpapers so I thought I would go ahead and do it uh so you can get them at brack.com wallpapers that's a secret Ur So just type it directly in there and you can download the zip file in HD cool so let's always uh as always open up unity and uh what we're going to go ahead and do first is we're going to import the Sprite uh that will uh be our ball so if I just quickly minimize this go into the 2D assets pack again available at bra.com uh and under the pwn game under individual Sprites we have the ball so let's just drag that on to Unity and release it in the project Pane and now when we select it here we can see that all of the settings are already set up like we want them to so now we can just go ahead and drag our ball into the scene view I'm just going to drag it pretty much in the center here and uh what we can do is we can uh first off add some components so the first thing we want to add is the physics to the circle collider and so we will just scale it down by adjusting the radius to something like 0.23 that looks pretty good and uh when we play the game now the ball is just static we want it to actually uh act in physics space so let's hit add component physics 2D and add a rigid body 2D which will allow us to make it actually jump around so now when we hit play we can see that it falls and it just sits there uh so basically what we want to do is first off we want it to be set to fixed angle we are going to kill the angular drag set that to zero the gravity we're going to kill that in a sec also but first off let's set the mass to 0.1 just because we don't really want the mass to have an effect on anything uh then what we're going to do is we're going to go down here in the project Pane and we're going to create a physics 2D material and we're going to call this uh ball bounce and uh what this will do is it will allow us to adjust some properties for how this uh ball will act uh in physics space so basically we can kill off its friction so that it won't um be affected by uh basically it won't slow down is what it's going to ultimately mean uh and then we're going to set the bounciness to one uh so that it will bounce off everything it hits and now when we hit play uh we should oh yeah we need to apply it first so select the ball drag on the ball bounce under the material under the circle collider and now hit play and we can see the ball bouncing just beautifully if you want to know more about CIS and rigid bodies and physics materials you can go ahead and watch uh the um mastering Collis tutorial I made uh a while ago cool so what we can do now is we can just uh turn off the gravity scale so set that to zero and uh I think we are ready to create our bow script so let's just uh go ahead and rename uh no actually let's just make the script sit on the ball and then we can handle spawning it through the GM object and uh yeah so let's just start out by making a ball script so let's select the ball hit new script and call this ball control and create an ad let's double click it to open it up in mono develop here it is and let me zoom in so you can see this better so we can m no actually let's keep the function update because we're just going to rename it so in the function St we first off want to um start the ball we want it to uh start uh traveling in a random Direction so if you have played old school pong you will notice that um once the game starts it shoots out to a random side so what we can do now is we can use a random number to affect which side side it goes goes to so we can use for example random. range there are a lot of random things we can uh call in here so we can use random. range and this will make a uh float uh object or a float value between the minimum and maximum values you you put in so if we do like zero and just let's just do zero Z and one uh we can say that if uh actually let's make this into a variable sorry I'm cling so variable and then random number equals random. range 0 to one and then we can go in here in an if statement and say if random number is uh less than or equal to 0.5 then we wanted to shoot out in One Direction so debug.log shoot right and if it's not so else oops debug.log shoot left so now when we play this we should see that it randomly chooses a number uh or a direction to shoot so right now we've only gotten shoot right but in a sec if we keep on playing this we should get shoot left to appear Also let's see if we can get shoot left to appear for some reason this is not working so if it's less than or equal to 0.5 do we need this to be two that would be weird there it was left and right and left and left well it looks like we need this to be two yeah there's something about that actually random range can confuse you sometimes but okay it works now so let's just go with this it's really not that important it's just so it doesn't shoot out to the same exact side time so in here we're just going to put uh rigid body 2D do add force and then this needs a vector two so a vector two is just a variable storing two coordinates the X and the Y so we're going to do new Vector 2 and inside of this we are just going to do something like maybe 80 and 10 this is just an estimate you could make variables for these so you can adjust them inside of unity but I think this is going to be just fine and let's just duplicate the same line down here and then make the 80 to into a minus 80 and the 10 into a minus 10 and of course you could make uh even more if statements you can make a switch uh so that there are more outcomes or you could just use the random that range directly to access the force but again it just gets too complicated we just want this working right so let's save this and hit play and we can see that our ball shoots out so it's acting just how we wanted to and uh yeah things are looking great but we have a problem and that is that the ball is currently very very predictable because in some pong variation ations if I uh if you move upwards while colliding with the ball you will change the um uh the direction of the ball just a bit but right now it doesn't matter which way we are um moving the ball will jump the same no matter what and so these patterns uh that are very easy to predict will uh start appearing so I think we should go ahead and change that and it's it's pretty much a decision whether or not you want to do it um but I think it makes it a little more fun so let's go ahead and do function on collision enter 2D and this will get called whenever we collide with something uh it will that is two dimensional it will get called one time and what we want to do is in here we want to pass some uh variables so we want to basically store some information about the collision and we could call this the call the call info let's actually call it call info for collider information and uh it's going to be a type Collis 2D remember to put a 2d there or you will get an error cool so what we can do now is we can first off check that we have hit the player so let's do if call info. collider the one we collide with tag is equal to player then we want something to happen so let's just do a debug.log it's working and then exit out of this and we will go into unity and we will remember this time to select both our players or you can select the prefab uh in the project paint so this is actually pretty handy because if we were to select let's see our player two and then change it its uh its tag and hit apply we would also apply the move up and down keys and that's not something we want so instead we can go into the prefab in the project Pane and change the values here and they will both automatically update so uh for the tag we'll select the pre prefab go to tag select player uh it will automatically be there if not you can go ahead and hit add tag and you can just type it in there and then afterwards select it great so let's hit play now and once it hits our player we get to see it's working in the console so that's just perfect but you uh might notice that once our ball hits our players they get pushed so uh to change this we can go ahead and select again our player pre preab and we can just bump up the mass quite a bit and this is an easy solution uh but one thing we would want to do also um is go under the player controls and we're going to lock in our prision uh we can also go under the uh con uh normally when when it comes to rigid bodies you have some constraints as to where you want them to move uh but it's not in the 2D rigid bodies yet so instead we're going to open up the um player control script here and then in the function update we simply want to set the um the x velocity to zero so we just do rigid body 2D velocity. x equal 0 and this will mean that our okay so this will mean that our players will stay in place so now when the ball hits they do nothing they move a tiny tiny tiny bit uh but then they the next frame they will just snap into place again so it really doesn't matter cool uh so where were we guys uh our ball is moving and it's colliding and everything is great okay so we want it to be affected by velocity so instead of the its working statement let's go ahead and type VAR velocity y or just v i because this is the name of the variable and this is going to be equal to rigid body 2D do velocity doy so I just want to store it as a variable so you can easily access it then we're going to do v i so the uh the Y velocity of the R Body of our ball is going to be equal to and uh here we could just set it directly to the velocity of the player but I didn't really I don't really think that uh was that great so instead I did this to make a mix out of the two so I mix in the velocity of the ball and mix in the velocity of the player and uh I think this is working pretty great so what I did was I took half the velocity of the Y and plus the collider do collider uh or not the collider I mean collider info. collider rigid body Tod do velocity doy okay and divide that by three uh so half the velocity y plus the a third of the uh velocity of the player uh I found that to be a pretty great match and now if we hit save and go back into to Unity you will notice that we can affect the velocity of the ball by moving up and down so if I can just get it to work so if I stay still and don't really move the ball should slowly cancel out its velocity so if we can get this to slowly just is this working actually I don't think this is working okay so I'll just go ahead and and quickly turn off the uh the record recing and I'll see you in a second okay so I'm back I'm sorry for the smaller confusion there and uh of course as always when you look through code you uh suddenly just find something that is insanely stupid and I did something insanely stupid so basically what what I did was I made a new variable uh which I just declared um as a float value and then I just changed that and the rigid body 2D the velocity didn't really update so we basically just changed this value and not the value we actually wanted to change there are a couple of ways to solve this the easiest of which is just to forget this variable declaration copy the rigid body 2. velocity doy in place of the Velocity doy here and then just delete this and now everything should be working and we can also delete our debug.log statement so now when we go ahead and hit play uh we should see that if we don't move at all yeah the uh the wire movement on of the ball cancel uh cancels out but if we then uh give it some momentum you can see that we can affect the traveling Direction so this is great because it uh it's more like the modified version of P which I really like and uh it makes the game a lot more exciting because you can actually try to score um score goals cool so right now you will notice that when we hit the left and right walls uh nothing happens so I guess that's going to be the objective for next time so we're going to handle scoring yay so thanks for watching and I'll see you in the next video