thanks for tuning in at brakus hello everyone and welcome to this video on making a multiplayer FPS in unity today we are going to be adding the first shooting graphics to our game so we'll be adding a muscle flash that will display at the end of the barrel of our gun each time we shoot and that's going to be a very cool looking particle system and we'll also be adding a hit effect so that we have some sparks bouncing off the wall and some smoke coming from the place that we hit anything so that's going to look super cool we are not going to be adding any bullet hole decals or any bullet trails if that's something you also want to see leave a comment in the description or visit the brac is firm to let me know it's not something that I'm going to add today because it's too much for one video and also I think we have a lot of gameplay elements that we still need to add so I don't want to spend too much time working on kind of details if you want so I think these two are pretty important the mass muscle flash and the hid effect because they make the gun feel real and it gives some visual feedback on the fact that you're actually shooting and what you were hitting but that's what we're going to be doing today again if you want to see more let me know so without further adieu let's dig right into unity and I pretty much haven't touched this project since we left it the last time where we created our weapon manager and that's something that we are going to be editing just a bit in this video to allow for syncing this stuff over the network so the first thing that I want to do is kind of make actually a muscle flash with a bunch of particle systems that we can play and stop playing whenever we want the muscle flash to begin and end and it's pretty much only going to be displayed or the particle systems are only going to be emitting one single frame at a time so we are going to set that up and as a base for this I'm going to go into standard assets and then particle systems again this is imported by rightclicking import package and then choosing particle systems and then going to go under prefabs and select the flare this is a super cool looking particle system if we just reset the transform here and drag it up you can see what it looks like and you can see that this smoke is also right now going kind of in the wrong direction but we'll have a look at changing this let's do that right now actually so this is going to act as the base of our muscle flash and the first thing I want to do is delete the spikes we are not going to be using those in our muscle flash and also go ahead and rotate this smoke 90 degrees I think along negative 90 along the X nope maybe negative 90 along the Y that's not it that's this Z so let's try that that's K so we need to rotate it 90 degrees along the Z there we go and so this should be working cool and this is set to 90 okay so that's Y so the that one needs to be zero and we need to change the flare here to zero there and now we can rotate the smoke okay so see route the flare zero out the smoke and then we should be able to do negative 90 on the X here there we go that was why I was confused and let's try and bring in our gun graphic so we can kind of see what this looks like in relation to our gun because you often go ahead and create some coollooking particles and then they're huge compared to what you need so always have some kind of a reference when dealing with particles so this is our scifi automatic prefab and let's just drag this over here let's go in and find an empty object here or create an empty object and we are going to call this the fire point and that's just going to sit right at the end of our barrel so let's go over here and drag that up and drag that in right there it's going to be the fire point and maybe just a bit out from the gun cool and then we can take our flare and let's drag that under the fire point and let's rename this to muscle flash and we have the smoke prefab there good so whenever we stop and simulate or pause this particle effect it's also going to do the same to the smoke that's the cool thing about rested or nested particle systems in unity so that gives us kind of a lot of freedom and what I want to do here is the one change the duration to one and do the same thing with the smoke and then I want to undo emission instead of having did this at a fixed rate I'm going to do a burst instead so down here on the bursts let's set that between 1 and 1 so you can see what that looks like and with the smoke again no rate but instead a burst between 1 and we should maybe do two here to randomize the smoke just a bit so you can see now it looks like a muscle flash we also want to of course reset the transform on the muscle flash here and again the smoke is going off in the wrong direction so let's OH that needed to be zero okay so that's perfect so now it's going straight up and you'll notice that's also a negative gradov gravity modifier on the smoke here so that's super cool so if you wanted to kind of give it a bit of direction you could tilt it over just a tad so it will shoot a bit outwards and then go up I think that's actually even better so let's do that cool so now that we have that set up we can maybe change the size of some of these elements just a bit so I think this flare itself here is a bit too large so let's do a start size between 0.3 and 0.6 and also the lifetime to 0.05 we want that to be very short so you can see it's only one short burst there and we want we don't want this to play on awake that's very important the simulation space we want that to be local because this is only displayed very quickly and therefore we want it to snap through the barrel however on our smoke we want the simulation space to be global or world so that when we move around on the smoke just does just follow the gun it will stay where it was created so in the simulation speed space need to needs to be world and we can go in here and maybe bump down the size a bit so instead of having this random between two curves let's make it random between two constants and let's do that between 0.5 and 1 maybe that's maybe a bit too small so we can try point seven and 0.2 that looks pretty cool but again we kind of need to see this in game I also think the life time is way too long so let's do one instead you can see it disappears much quicker and I think we are kind of getting there so this needs to be a subtle effect we don't want anything huge so actually 0.7 and one I think it's going to do and yeah I think that was all the settings I wanted to change maybe let's make this just a bit more transparent so that's going to the start color and just make that a bit more opaque cool so I think this is a really good base to work off and let's just go ahead and hit apply on this prefab so the next thing I want to do is actually implement this muscle flash in game so to do that let's add a new component and this is going to call be called weapon graphics and it's going to sit on our scifi automatic graphics so simply going to sit on the well the weapon graphics and the cool thing here is we can have a script that is separate from everything else that stores references to prefabs for graphics we want to spawn in so that we can have different hid effects and different muscle flashes for different weapons and it can also store local references in the hierarchy over here to stuff like the muscle flash which we want to enable and disable so it's much better than searching through the weapon to find something this way we can position things on the object and this object and this component here will know what is going on so in here we simply want for now just two variables we want a public particle system and this is going to be the muscle flash and we also want a public and this is going to be a game object and that's going to be our hit effect or impact effect of whatever you want to call it and it's going to be a prefab so we are going to put that in there and we haven't created this yet that's for later use and that's pretty much all I want to do here it just makes sense to group it this way so let's head back into unity and see these two variables appear and let's just fill out the muscle flash when we are still on that so let's do that and hit apply and now we can actually go ahead and delete this weapon from the scene we are not going to be needing it right now next up let's open our weapon manager in Visual Studio so you can see I have it here and you can see that we currently have a reference to our current weapon that's something that we keep track of what is the current weapon we have equipped well I kind of want to do the same but with for the weapon graphics so we can very easily access the graph the graphical elements of our weapon and I'm also going to be creating this getter just like we can get the current weapon which we are utilizing in our shoot script we also want to be able to get the current graphics so let's just keep track of that in here and in order to do that let's go in and say our private weapon graphics current graphics and then we want a getter here so we want to make a public weapon graphics get current graphics or weapon graphics whatever you want to do and that's going to return the current graphics and under the equipped weapon this is where we want to store this reference so you can see here that we set up a weapon instance and we set the current weapon up here well after having creating having created this instance we want to look for the weapon graphics component on that instance so we'll go on weapon or current graphics equals skate component of type weapon graphics and we want to get this component from the weapon instance here so we spawn in a some weapon graphics respond in a weapon and we search on that weapon for the component weapon graphics and we put that into our current graphics that's all we are doing here and because we have no assurance that the weapon we are using actually has this component we should do a check here in case we forgot to add it so let's check if current graphics is equal to null well then we want to freak out then we want to debug that log error no weapon graphics component on the weapon object now we go and we could also print out the name of the weapon which we are going to do so plus weapon ins dot name there we go so that's just good practice to do it this way the next thing is if you notice down here we check if we are the local player and if we are well then we want to change the layer of our weapon we also want to do this with our muscle flash and I'm going to show you why so if we just go into our prefabs here and find this scifi automatic and bring it in here and let's just make the muscle flash here play on awake let's just do that and again it's set to loop here so this is what we should be seeing as soon as we spawn it in let's just try this for a second and let's disable that gun what we will see now when we hit play and we go in on the land host is that the particle system is playing just fine but it's not aligned with our gun and that's kind of weird behavior you might think because if we go into the scene it's right there it's completely aligned with the gun it's actually looking really really great and the reason why is because we are setting our weapon to be rendered using a different camera remember that's what we set up the last time we have the normal camera which renders everything else and we have the weapon camber camera which renders the weapon and this is positioned positioned differently this precision for the out and it also has a different field of view than the normal camera and this allows us to control how the weapon looks in here but that means that if we are drawing the muzzle flash with the other camera they are going to be unaligned so we need to make sure that when we spawn this scifi automatic gun in that the lair it's assigned to is weapon and that all of the children of that object Slayer is also weapon and currently they are not you can see that only the root object only the parent game object has the lair weapon assigned all of the others are just set to default so that means we need to loop through all of the children and all of the children's children to make sure to set the lair correctly and we've actually done this before remember in an earlier video we created a recursive method to do this so I thought that since we are using these recursive methods more often that I thought we would and since it's also a good idea to kind of group together reusable code that we should go ahead and create a new c javascript called util which is short for utility and in here we'll have different very general methods that are not part of any particular function in the game but just have some useful generic methods for doing stuff like setting the lair of all game objects in a hierarchy so let's do that let's do exactly that so we have this public class util and it's not going to be a mono behavior but it is going to be using unity engine and what we are going to do here is we are going to make a public static void called set here recursively here so we'll change it on all objects and it's called a recursive method because it's self referring and therefore it will range out to process all different things so let's first off taking a game object and this is going to be the object we want to change the layer off and we're also going to have a integer which is going to be the new layer index so that's going to be our new layer and the first thing that we want to do is because this is a very general method we want to make sure that obj is not equal to null so if that is we want to simply return if it's not equal to null well then we want to set obj dot layer equal to the new layer it's that simple so now we've changed it for the current object then we want to loop through all of the children to this object so we want to say for each transform child and let's do an underscore child here child in obj dot transform so this is going to go through all of the different different transform all of the different children in the object and for each of those we want to check if underscore child is equal to null again we want to make sure that we don't get any null references if it is we want to simply continue to the next child that will skip this iteration if it's not meaning if we've actually found a child here we want to set layer recursively and put in child dot game object and put in the new layer so what we're doing here is we're looping through all of the children and we are calling the same method we're calling this method again so that will jump up here now the object is going to be the child of the previous object and it's going to be the same layer we're going to set the layer of that child and we're going to loop through all of the children of that child and that means that it will go through and keep on doing this to all children of children of children of children however many of them might be have been set to this layer so that is the super cool thing about this recursive method so now if we go ahead and find our weapon manager here instead of calling weapon ins or setting weapon in stud lair we want to now call util dot set lair recursively and you can see I can just do this without a reference because I marked it as static and we can set the game object we want to change is changes weapon ins and the lair is going to be a layer mask dot name to layer and the name of the lair was something like weapon layer name there we go so that's just a variable we have up here so that should set all of the objects and when we now go ahead and hit play and hopefully we get no compiler errors looks like we don't you can see that the game object or the muscle flash is now correctly aligned with our game object you can see just how cool that actually look good so now that we have that set up we can go ahead and delete this scifi automatic we're not going to be using that or actually that's setting me let's just turn off looping and let's turn off play on awake and also turn off looping on this and make sure playing awake is also turned off there let's set apply that and now we can go ahead and delete that we'll bring it in later so we can go on to our weapon manager and just make sure everything here looks good which it does and then we can go into our weapon shoot script and I actually want to change a player shoot script quite a bit because currently in our code in our update method here we are simply checking for input and if we get some input put we're shooting but what I want to do in here is I want to differentiate between what happens if we our local player and if we are not a local player more specifically more specifically if we our local player I want to come I want to call a command that will then call a method that is handled on all players shoot scripts or on the player shoot scripts of this game object but on all clients that will then display this muscle flash but in order to do this I need the player shoot script of this game object to be enabled on all clients and currently we are only enabling this player shoot script on the local player and we are doing that using the player setup remember we added it up here if we're going to play a setup we have the player shoot script right here as one of the components to disable so that's one I want to delete to lead that array element just rightclick it delete the array element right click it again and it will remove it from the list here and then I want to go down into the player shoot and add in some conditioners myself so the start method we want this to be done no matter if we have the local player or not that doesn't matter in our update method we want to set the current weapon again that doesn't matter we want that to be done for all and then we are calling these different different shoot methods and if we go and look at the shoot method and this is again going to be called for all clients we are actually doing some ray casting here and this is something I want to only do if we are the local player so I can add in an if statement here saying if we are not the local players so exclamation mark is local player but then we want to return now we don't want to do all of this down here but if we are then we want to do the actual shooting this allows us to add some stuff to this object so which will be called for all others that are not the local player so let me give you an example here basically what I want to do is I want to create a command again remember a command is a function that is executed only on the server so let's make a command here and this is going to be a void it's going to say CMD on a shoot and this is going to be called every time we shoot no matter if we hit matter if we hit something or not this function is going to be cold and we are of course going to be doing that here and again I want to this to be below this if statement because we only want to call this command from one place and that is if we are the local player this way on the local player will will be in charge of when he shoots not all of the other clients that's a much much better way so we'll do that and yeah so if we are the local player we want to call the command on shoot and then in here we can put some functionality for what we want to happen when we shoot such as calling a method on all clients that will display a muscle flash so let's do that so remember when we want to call a method on all of the different clients we use what is called a client RPC so when we mic this it means we can go from the server to all clients so we put in a void here and this is going to be called RPC do a muscle flash or do shoot effect here and we don't want this to take in any more arguments and this here can refer to different stuff up here you can refer to variables so what we want to do here is we want to change the value of our muscle flash so we have this command on shoot and we want that to call the RPC to shoot effect and I think it's time to come in some of this out so we are shooting come a call beyond shoot method on the server this here is called on the server when a player shoots it's called on all clients um um it's called on all clients when we need to do a shoot effect and yeah that should be good let me think your for a moment good so the first thing that we could sort of do here is just try and enable our muscle flash just to see if this is going through and in order to do that we need a reference to that muscle flash and again we have that reference in the weapon graphics and we have a reference in the weapon graphics in the weapon manager so if we just go into our player shoot just as we are getting the current weapon by calling current weapon equals weapon manager to get current weapon every frame we can do the same with the graphics so in here will simply say let somebody have a private actually instead of doing that every frame here let's just down here say current or let's say weapon manager dot get current graphics dot muscle flash dot play that is going to play the particle system muscle flash that we have set up so this is kind of a long and maybe T to some way to do it but it's going to get the job done and it's going to work just fine so let's try this out now it should happen that when we shoot the massive flash gets enabled it's not going to get disabled again but it is going to play so let's try to play here and let's select land host let's try and click and again it does get enabled and you can actually see that it hmm it's actually working just fine I did think that I was going to go ahead and we're going to need to disable it but since the particle system only emits and bursts that's actually not something we want so that's awesome I thought that we would have to go in here and create an enumerator and that we call from here a curve team that would play the particle system then wait a frame you'll return zero and then stop the particle system but since the particle system is so short unity does it for us of K so unit is awesome as always let's just stick with this and again if if it becomes a problem we'll do what I talked about groups are accidentally swap testers they're good so now that we have that done what we can do is just see if this works on the network so let's test this out so let's hop into unity let's build this player here semi controlv or commandv if you're on the Mac let's see if this works I'll just drag this over here and wait wait for unity to build the lining there we go hit play let's join here as in host and let's join here as a client and you can see here that when I press this it's indeed networked and also make sure that when you are pressing or when you're firing here that the other player doesn't fire it doesn't look like it and you're not going to be able to see that this but I'll drag the other one over to the other screen and just make sure that this is working and indeed it is so just take my word for that and that's awesome so next up let's do some bullet impact effects and those look so cool when they're implemented properly so what we're going to be doing is actually really simple most of the scripting for this tutorial is actually over but we are going to be creating the particles first so that's going to standard assets particle system script or on prefabs and find the flare I think this is a great actually base for a impact effect as well especially with the awesome spikes here they are going to look super cool in the game so again let's reset this transform drag it up let's take the smoke now and if we just think about this for a second so first off we want this to be again emitted in a very short burst so let's keep looping on for now because we want to see what this burst looks like but let's change the duration to one and do the same here and the same here and then we can go under a flare here and let's rename this to hit particles or heat effect on whatever let's go into emission and change the rate from zero to burst between 1 and 1 that looks good let's take this smoke here and again go to mission zero let's change the burst here to be between 1 and 3 maybe let's take the sparks go to mission zero and let's make those go between zero and four maybe something like that looks pretty cool and what we can then do is maybe drag this over to a wall just so we can see what it looks like if it's on a cube and there we go strength and oops we only drug the sparks there I want to take the entire particle effect and drag over and see what's what this looks like so it's kind of hard to send you in on right now so the first thing I kind of want to figure out here is how this is oriented so okay this is being weird let's just reset the transform and zoom in on the effect there we go and let's just see we hit say we hit the floor here well in that case I want this Z here to be pointing upward so I'm going to rotate negative 90 negative 90 Oh negative behind Lee on the X and then we want our smoke to go upwards so we'll take our smoke here and let's zero that there we go so we hit down in the smoke go goes up and if we take a look at that that looks just fine the next up we'll find our sparks and again we want to zero that out and they are currently being emitted if we go and open up shape here in a sphere instead I want those to be emitted in a hemisphere which is a half sphere so they will not jump in towards the wall they will only jump outwards and that looks very cool actually let's also take the smoke and make that a bit smaller and change the lifetime so let's set a lifetime of maybe two seconds that's more than plenty let's do one I think one is a bit more manageable it really depends on the size of the gun that you want the effect to cover this box the lifetime here is going to be two that's fine and for the hit particles the lifetime should be very short so point zero five the start size of those I think 0.4 and 0.8 maybe we want the start size of the smoke to be some again random between two constants and we want that to be between let's see one and two point five or maybe one and two that looks super cool and I think actually this size of the sparks are pretty good we could maybe do point zero two there yeah like that quite a lot so I'm very subtle but a cool looking effect what I will also do let's go ahead and actually create an empty game object which we will reset the transform of and we'll call this one hit particles and then we'll call this one let's just do flare and we'll take all of these put them on the hit particles we'll take those and drag out here and reset the prefab instance that's just fine and then we can find the prefab here and delete uh all right not delete anything let's just find the pre and let's take the hit particles and drag in here so that we have this object with three different particles in it and this way we can take our flare here which is too large I think it should be point two and point four instead maybe something like that we can take that and we can drag it out a bit and that will make sure that it doesn't clip through the ground you can see if I drag it down here you can see it's current it does this ugly clipping on the ground if we just drag it out just a bit something like this it's going to look a lot better and no one will really notice so that's going to make the effect a lot cooler and let's just I think we should just try this out so let's it apply on those hit particles and let's save that and let's then find our our prefabs scifi automatic and drag in the hit particles under the hit effect prefab and that is good and then we need to spawn it in through code so let's open visual studio and just as we called the command on shoot we also want to have a command on hit so let's just go ahead and make that and we can just have that down here we're going to have a command void CMD on hit and this is going to take in some parameters for first off a victor 3 for the hit position and then a vector 3 for the normal of the surface that we hit and again a normal is a vector 3 that points straight out from the surface so it's orthogonal on the surface meaning that there is a 90 degree angle between the vector that points out from the surface and the surface itself so yeah and then we want to call of course an RPC so let's just duplicate this RPC right here and this one is going to be called RPC do hit effect or impact effect or whatever you want to do and what we want to do in here we'll figure out in a second and this is also going to take in a vector three position and a vector3 normal cool and inside of our command on hit will simply call our pea seed do hit effect with the position and the normal data there we go and then down here we only want this to be called if we hit something and that is within this if statement so if this raycast returns true we've hit something and and if that is true we want to call command on hit and we want to enter in hit dot point the point that our raycast hit and hit dot normal it will simply return the normal coordinate of that only normal vector of that surface so good it will call that and we can just come this out we hit something call the on hit method on the server and here it's called on the server when when we hit something takes in the hit point and the normal of the surface cool and here is called on all clients here we can spawn in cool effects good so and that's it that's exactly what we are going to do we are going to instantiate and then we are going to do weapon weapon manager dot get current graphics dot um hit effect prefab there we go and we wanted to be instantiated at position and the rotation is going to be quaternion dot look rotation and then that takes in the vector so this will transform a direction to look in into a quantonium which is what unity uses for rotation so that will take in the normal surface and that will make sure that our our effects are spawned looking directly out from the surface so let's say we hit our cube here right on the wall it's not going to be looking that way or along the wall it's going to be looking straight out in an arrow so that's going to look super cool good so now that we have that set up and we instantiate any instantiating it in let's also just store a quick reference to the instantiated object so that we can delete it after let's say a second so we don't clutter up a scene with unnecessary object so let's store a hit effect reference and we want that to be a game object so we also need to cast it and then down here we simply say destroy hit effect and we want to destroy that after two seconds this way we get the effect plenty of time to play to finish so that looks super cool and I think this should be working now keep in mind that you are spending quite a lot of resources on instantiated in a hit effect especially if you have some kind of machine gun and a lot of people are shooting at the same time if that starts to bother you performancewise you should look into object pooling there are plenty of good tutorials on this on the Internet I might do one myself at some point but you should definitely be covered it's a more effective way to kind of spawn in objects so you should check that out again object pooling like swimming pool good so now that we have that let's save that close that and first off try this off local and we can see that it's working but it's also the effects are also looping and I actually don't think they're oriented correctly oh I might be wrong about that actually let's just try and hit something here and pass that let's find our hit particles here and there I actually oriented correctly it looks like no they are not these sparks here should be pointing outwits the smoke should be pointing outwards and the flare yeah now it's correct about that okay so let's go ahead and find our prefab here and fix those box so let's find our hit particles so when this hit particles this hit particle here is pointing upwards meaning it has a negative X well then we want our flyer to reset there so that should be pointing upwards we want this to be reset so that should be pointing upwards and we want our sparks to be reset so though those are pointing outputs and also we need to make sure that we disable looping play on awake should be true though we also want to disable looping here and we can just make the assimilation space local because the it's not going to be moving at any time so let's just spare yourself the calculations and let's apply that delete that and let's just try this again it should look a lot better there we go so this looks super cool just a very tiny impact effect with a lot of Sparks and some smoke and I think that looks really cool you will also see in a moment when we test this out on the multiplayer that it also works when we are hitting pots or each other or the players so let's try and build this and wait for it to build here and I'm going to it's going to open up here and let's wait for unity to calculate the lining once again there we go let's just say that and let's try and hit play here bring this over let's select land host on this one and land client on this one and you can see here that others other players can see this impact effect as well so it's synced over the net we're going to can see because of my lack of network ping here or a delay that it's actually going really quickly it's very responsive and we can also shoot each other and that actually looks super cool so look here can shoot each other in the face so and now I can't because this guy is responding and you can see there he became responsive again so that just looks super awesome and I think you should go ahead and have a lot of fun with that also if you are having performance issues and you've tried out object pooling these dynamic spikes which jump off everything in the environment those are kind of taxing they require a lot of physics calculation so maybe spawn few of those in or maybe make them non bouncy meaning that they shouldn't collide with the environment so that was basically all I wanted to show you for this video I hope you enjoyed it and I'll see you in the next one