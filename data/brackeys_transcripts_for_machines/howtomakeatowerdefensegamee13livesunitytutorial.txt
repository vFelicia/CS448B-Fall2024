this video is brought to you by our own Metta thank you so much for donating if you want to support breakage yourself you can go to patreon.com/scishow cheese thanks for tuning in at brac ease hello I want to welcome to this video and critic and tower defense game in unity today we'll be adding a large calendar to our player stats and will also be displaying that on the UI we'll also start creating a game manager that will do something whenever we run out of lives right now we'll just throw a debug padlock statement and we'll also add some health to our enemies and a cool death effect whenever they die so let's just get right into it so you can see I'm here in unity and what I want to begin with is adding some way to keep track of how many lives we have left let's find our player stats crypt and double click that to open a table in visual studio and then we can add a new variable to this and this is also going to be a public static variable just like our money so we'll make a public static integer with the amount of lives then we'll also create a public integer that is nonstatic with the amount of lives that we want to start with so our start lives and we'll just default that to something like 20 then down in our start method we said lives equal to start lives whoops start lives there we go so whenever we start the game our lives will be initialized with them with a value of 20 but right now we can't really see this happening so in order to display this on the screen let's create some UI you can see that we have our first canvas here and this is the overlay canvas that is just put on top of the screen we also have another canvas here which is our world canvas that is shown at the bottom of our map let's go and hit and rename these properly so let's have this be our overlay canvas and this one be the bottom canvas so now that they are named accordingly we can go ahead and duplicate our bottom canvas by pressing ctrl D or command D if you're on the Mac and let's just move this up I will also switch to the front or the top view here by pressing on the yaxis this will just give me a bit of overview of what's going on and switch to the 2d tools over here so that we can easily manipulate the canvas so now that we've moved this up to the top this is where I want to display our lives so let's rename this here to on top canvas and let's also maybe change the format of this a tiny bit so the first thing that I want to do is change the scale something like 0.1 times 0.1 times 0.1 and that makes it really huge then I want to fit it back in here with our map and just drag it up a bit and make some more room then I want to take our money element here and just flat out delete that and instead let's edit our timer so right now you can see it scales with our screen again make sure that it does that by going to stretch and holding down alt and clicking in the bottom right corner and then what we can do is maybe centering this on the X here and then snapping it to the bottom so that it will sit right on top of our map then we can maybe take our entire canvas and drag it down a little bit to decrease the distance from our map to the font and then we can rename this one to our lives and let's put some actual text in here so let's say on 20 lives and let's just increase the size of this so we can put our font size to something like maybe 204 and I think that looks pretty good and we can maybe even decrease the size here or the distance here from the map just drag it down a tiny bit more so I think overall this looks pretty great and I think it's very dramatic displaying the lives in such a big way so it's pretty essential to display important information in large places so that the user can't help but notice how many lives he has left so now what we can do is maybe link this so that it will actually change with our action live amount so let's go on to on to our lives here and create a new component just like we added the money you I will have a very little symbol script here called the lives UI let's just hit create an add on that and doubleclick it to open it up in visual studio and it's just reload this and you can see that we can just quickly edit this class first off we'll be implementing unity engine dot UI so that we can now create a variable up here with a reference to our text and then we'll call this one the live text then what we can do is every time in the update function and yes this might not again be the most efficient way but because our game is so small this is really not going to matter if you're pushing to mobile you might want to consider doing this in a curio team instead or having it linked to the player stats in some way but for now we can simply go and check for this each time we do the update and we're simply going to check if or you have check we can simply going to set live text here live text add text equal to player stats dot lives there you go and that should of course this is now an integer so we need to convert it into a string but we actually don't need to do this whenever we add a string on to it and we want to add space lives on to the number here and that actually makes unity convert this interesting automatically but if you want to be explicit you can just as well do to string in there just to be very clear about what you're doing but that's completely up to you so now that we've actually done this we can go back into unity and we of course want to link our text object up to the script so let's just drag our text into the lives text field cool so this will actually not be noticeable if you just hit play right now we won't get any arrows but nothing will change and that that's because our lives will they start at 20 and they don't change in any way so what we'll do is just go to our game master going to play your stats and then change our start lives to something like twelve just to see them change so let's hit play here and they will now say twelve lives so that's awesome so let's just put this at one for testing and we can see what happens when we decrease the lives and we when we go to zero so let's have a look at that I also want to change the wave spawn here where the time between waves should be ten instead of twenty I think that's too much and I will also go into our prefabs and find our enemy and make sure to increase the speed here to fifty just when testing so we don't have to wait that long then while I'll do is double click on the enemy script and let's have a look at what happens when he the last Waypoint which is the end of his path so in this case we want to reduce the amount of lives the player has and we probably want to destroy all our enemy here so right now we are simply destroying the enemy and then returning I want to put this into a separate function so we have a clear overview of what's going on so whenever you have the ability to group little pieces of coastal code like this for example changing the amount of lives and destroying the object which is can all be categorized under path ended or end path or something like that then you pretty much want to do that so let's just put the destroy call in here and let's now call end path here and then we can set lives or player stats dot lives that means equals 1 cool so now when we go in and hit play we should see that our little enemy spawns and he runs through and you can see there's the cat tail on the cam here and when he reaches the end our lives changed to zero say hi all right and you can see when we have more enemies spawn here when they go through we should get to negative 1 and then negative 2 of course we don't want that to happen we want something special to happen whenever we reach a lives amount of serum so let's go ahead and add this functionality one thing you could do here is have some kind of method that you call on the player stats to reduce the lives and just instead of just changing it directly you could have some method in here some public method called reduce or subtract lives or whatever and then you could have that keep track of how many lives we have and if that goes below zero we could have a call to a separate object say a game manager that will then do some stuff but instead of interlinking them in all these ways because that is maybe a bit more advanced and something that I recommend you do if you want to create a very large games with lot of moving components and that needs to be very optimized inst we'll just create a game manager that simply sits and checks our life's amount and then handles everything locally if you want to do it the other way I suggest you look at the 2d platformer course because that shows a lot of ways to do that kind of stuff and how to kind of cheat your way to some singles and objects if that is something that interests you so let's just go ahead and create a new component here on the game master and let's call this one our game manager and this will be kind of essential for whenever we need to end the game restart a game maybe pause a game at a later point we'll see so on what we're doing here is we'll have a update method which we have here and that is going to check if player stats dot lives is less than and whoops let's close that one it's less than or equal to zero so in case we reach zero lives or for some reason if two player or two enemies enter at the same time and we reach minus one lives or so then we want to end the game so let's do and game and let's make this a separate function here and game I mean just make it private because we only want to call it from inside of the game manager itself and we'll just for now throw a debug deadlock statement saying that the game is ended so game over and then you could of course go ahead and restart the level here using something like a scene manager dot our load scene or load level and then you could use the currently active level or you could prompt the user with some kind of in screen we can do lots of stuff here and we'll definitely add something in at a later point but for now we just to throw this debug deadlock statement and that's pretty much it however one thing that you will notice is if we go ahead and try this out and this should definitely work is that when we reach zero lives here so our enemies spawned and he goes through the entire path and once he reaches the end it's Pam's game over down here and we only want to do that once because if we want to display some kind of game over screen we don't want 20 or 30 or 100 game over screens popping up in just a few seconds we only want one so what we do is simply add a boolean up here and you can make this a private boolean you could also make it a public static if you want all the objects to know whether or not the game has ended and we'll call this one game end it and set it equal to false by default and then down here we'll set game ended equal to true and then up here in our update method we can say that if the game has ended well then we just want to return them we don't want to continue down and do all this other stuff we simply exit out of the loop awesome so now when we hit play and see that our enemy runs through the map and he's gonna do that pretty quickly excuse me and reaches the end here it says game over just once and there you go awesome so the next thing that I wanted to do was add some way of damaging our enemies because right now when we add a tower and it shoots the enemy the bullet then simply destroys the enemy object and nothing really happens I want to be able to add some more money to our play area I want to have a cool death effect and maybe even have the ability to give different damage amounts to different bullets so that we can have different turrets damage in different ways that's a lot of different so what we'll do is we will find the place where we currently destroy our enemies and that is inside of our scripts and then if we find our bullet csharp script here and double click that to open it up in visual studio and you can see that down here where we have a function called damage it simply destroys the enemy so what we'll do instead here is have some function inside of our enemy that will allow us to take damage so let's go into our enemy here and begin by adding a new variable and this is going to be a public integer and this is going to be our health and we'll just default that to say 100 but you can of course input anything that you want then we'll create a new method and this is going to be a public void because we'll access it from without the class that will access it from a bullock class using a reference and then we'll call this one take damage and we'll specify the amount of damage as a parameter here so as an argument and that is going to be an integer with the amount and then we'll simply say that our health equals our amount so we'll just subtract the amount from our health and then we can say that if health is less than or equal to zero so in case we die well then we want to call some kind of die method and that is yet another method that we want to create so let's just create a private method here called die and we no longer need this to be public because we don't we are calling this from inside of this function and that of course it's on the class so that can just be a private variable and all we'll do here for now is just destroy the object so right now we'll just destroy the game object and then in a moment we'll create a cool effect whenever this happens and we'll also make sure to add some money so once we've done that we can go into a bullet and now we want a way of using this transform enemy so this enemy transform and then are getting the component called enemy on that object because right now the enemy transform is this entire object right here we want to seek down this particular component here the enemy component and we'll want to go into that and call this particular function so the way that we do that is by first getting the component and to do this we simply go enemy that get component and the component we want to get is of type enemy then we can store this component in a variable we call of type enemy and we'll just call this e the reason why I call it e here we could just as well call it enemy but we need to differentiate between this new variable which is the component and the other one whoops and the other one which is our entire object so this is the entire transform so on what we could do as well as just call this one enemy go for a game object something like that and then have this one the enemy but I'll just call it e for short then what we do is say e dot take damage and now we can simply pass in some amount we could pass in a fixed amount of 20 damage or we could go up here and add a damage parameter to our bullet so let's just do that so let's create a variable here a public integer with the damage and set that equal to 50 by default this way we can go into all of the different bullet prefabs such as the missile and the bullet and later we might have some other stuff in there and change the damage individually for each one then down here we pass in the damage and that makes sure to throw it over to the take damage which is over here one thing that might happen is we might get an enemy who doesn't have an enemy component this might be something that we want to happen purposefully in the future or we might just well screw up so what we'll do here is we'll just check if E is not equal to null well then we want to do this if it is then we're screwed awesome and then we can delete the destroy thing down here we really don't need that cool so this should actually work so if we now go in here and everything is set up and we'll just change the speed of our enemy back to say ten and you can see we have a health here and on our bullet we also have a damage and the same thing with our if we find it here our missile launcher also or not our missile launcher our missile also has a damage so we could of course change these around so what we can do now is simply hit play and wait for an enemy to spawn and we can just add a few turrets here and you can see one two shots and then the enemy is dead so it does take two shots now to kill the enemy that's awesome so the next thing that we could could do here is find our enemy and then add some more functionality whenever he dies for example we could add on some money so and this is why we grew up into small functions here is so we can very easily go in and add more functionality and have a and very clearly see where the functionality should go and of course we want to add more money only when our enemy dies so we can go up here and make this another variable it's going to be a public integer and this could be the value or the price or whatever let's just put value here you could also say money or money gain whatever it will just put value in here and we'll have this default to something like I don't know the prices here are 100 and 250 so let's make one of these give say $50 and we'll just down here say play your stats play your stats dart money plus equals our value Kol so that should actually work so if we now hit play and kill up one of these guys and you can see very clearly here it's going to take two shots one and two and our money just increased by 50 sorry I said you see here it says start build money left 300 plus 50 is 350 and we can just keep on doing this and on money will decrease whenever we build an increase whenever we shoot something awesome so the last thing here is just adding in a cool effect so let's actually create that cool effect and we'll use one of the prefabs here as a starting point so let's use our we'll use the bullet impact effect as a starting point so let's drag this inside of a scene focus in on it I'm going to shift away from the top view here and just move it up a tiny bit something like that looks fine and then we can rename this to UM enemy death effect and Wow Apple wants me to spend money there we go and then we can read rag this into our prefabs folder there we go so make it into a new prefabs that we don't overwrite the old one and let's configure some stuff here so the first thing is I want to go into my renderer actually the first thing is I wanted to enable looping and said that too and hit simulate Barrios now we can see the changes correctly so I want to go into my renderer and change the material here to the material of our enemy there we go so that it will look like the enemy shatters into multiple pieces and I'm going to go pretty quickly through this so let's go into our shape let's change the radius to one and we don't want to change anything else here let's go into emission change this to something like between maybe fifteen and twenty that's going to be plenty and then we can go up here change the stat life time that's going to be fine the start speed to somewhere between zero and five sounds fine on by me and then the start size between 0.25 and point three five just to make them a bit clearer to see there we go are everything else here can be left on touch we could put in a bit of start rotation so I'm gonna do a hundred there and randomize that by one there we go I think I think that looks pretty good then what we can do is go down and find our collision tab and we'll just make sure to kind of raise these a bit above the ground and we do that by going in here changing the radius scale to one there you go it pops up and everything looks much better and I kind of like how this is looking now um and maybe we can just disable interior collection interior collisions and everything else is good awesome so that is kind of the effect that I'm going for and you can of course spend more time it will also be cool to add in a light just as we did with the missile exploding effect just to make things a bit more dramatic but I'll leave that up to you so we can now hit apply on this as soon as we've turned up looping of course and I'll let's delete this from our scene let's go in and add the ability to spawn this in through code so we'll need a reference to the effect here so we'll make a public game object and we've done this multiple time this is going to be our on death effect then we can go down here to where we want it to be spawned we'll call instant we'll pass in our death effect as the prefab will say that we want to spawn it at our current position which is transformed a position and with no rotation which means quaternion dot identity and we'll of course make sure to store this in a variable called effect and cast it into a game object there we go and then this way we can make sure to destroy that effect after say five seconds just to clean up the scene a little bit and I'm going to add the money here way at the top kind of group things a bit better something like that looks really neat and now if we find our enemy prefab we have a slot here for the death effect let's drag our enemy death effect into that slot hit up no applying there because it's in our project and hit play and things should look freaking awesome so let's try this out and indeed it does so I really like that effect it's very solid it's very clean it could definitely do with some bigger explosions and some light effects but I'll leave that up to you I think you can definitely get away with these graphics and I think they're really funny and cotugno so let's just keep it this way for now so that was pretty much it for this video I hope you enjoyed it and I'll see you in the next one thank you so much to all of the awesome people who donated in September and especially thanks to our own Metta Robert Roach James Calhoun Kim Rose cuccos Bao and Antoine and vixen pea thank you so much for donating you guys are awesome if you want to support practice yourself you could go to patreon.com/scishow