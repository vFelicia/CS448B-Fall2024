thanks for tuning in at braies hello everyone and welcome to video number 25 in the how to make a 2d platformer course in today's video we're going to be making an audio manager for our game that means we're going to be creating this Central script that is going to store a list for of all of the different audio files that we want to play during our game and then we're going to have an very easy to use function called play sound where we simply insert a string storing the name of the file uh and it's then going to play it for us with some different sound variants so we're going to have a a pitch Randomness and a volume Randomness and that kind of stuff it's going to make it very easy for us to add new sounds to our game so that's awesome so without further Ado let's go ahead and get started so you can see here that I'm in the project as I lifted the last time and uh well basically nothing's changed here I simply move the uh script we created in the last video under the scripts folder and uh we should be pretty much uh ready to to create a new one so under the add component simply type audio manager and then new script and make it of type c so let's hit create an ad and let's double click this to open it up in Visual Studio on Mon to develop whatever you are using so uh this script is actually going to be fairly simple in nature uh but it's going to be very very effective for the stuff that we want to do so first off I want to get rid of the using system doc collections namespace we're not going to be needing that whatsoever and uh we want this to derive from mono behavior um but before we actually go and model out what we want in our audio manager class I want to create a different class I want to create an a custom class up here and this is going to be a a public class and uh this class is going to be called sound so I want to kind of model out the idea of a sound object so if we're going to have a sound that we can play uh in our game well it's going to be uh needing uh some different properties one of these is a string which is going to store the name of our sound so we can very easily refer to the sound or tell it to play uh simply using a name as identification then next up we're going to have a public audio uh clip we want to actually associate an audio file so this is simply going to be the um uh let's just call this the clip and uh finally we want some kind of reference to an object in the game that can play this uh clip so if we think go into Unity here you can see that so far when we've been playing our respawn countdown uh audio file here we've been uh simply attaching an audio source to whatever object this is a DM object and uh we simply add in an audio clip from the uh in from the project here into this slot and the audio Source will actually play this with uh some different settings however what we want to do is we want to create this audio manager where we drag in all of our different clips and do some settings in here and then when we play the game uh in the start method we're going to instantiate a bunch of objects which will which will lie on the GM object and each one is going to have an audio Source uh Associated we could also put all of this on one single object but there's really no reason to so we're going to have these different objects and uh with each their audio source and then we want when we want to play the clip uh we simply uh have a reference to that audio Source uh and tell it to play so that's kind of the idea here and therefore we want to be able to reference an audio source and uh we want this uh reference to be well private because we don't want to be able to uh change it uh instead we're going to be creating a method to access this so we're going to have a private audio Source you can just leave out the private here if you want to and uh we simply going to call this Source then we're going to have a public uh method that's is going to be a void called Uh set source and uh in here we we're going to feed in it an audio Source reference underscore source and uh the method is simply going to say that Source equals underscore source and and uh I believe that's all we're going to do yeah cool uh so now that we have that in there we can also go ahead and create this idea of playing a clip uh so let's say that we have a public void called play and well basically what do we want to do whenever we play this clip oh yeah in here we can also uh add to our source the clip so we can say source. clip equals clip there we go because we don't need to do this each time we play because we know that the audio clip is not going to change uh throughout the game so uh when this method here is called uh the clip is going to be called or set with it okay so my phone went off there for a second but we'll just continue good so uh we simply insert the clip there then in our play Method uh we could very simply go ahead and say source. playay and it would play the clip Associated which is the clip that we've ins inserted up here however I think that there are some more awesome stuff that we can do with this we can add some Randomness to how the sound plays and I definitely think that that's something that we should do so let's uh think about this for a moment we have these uh variables up here well we could start by adding a public float which is going to stall the volume a public uh float which is going to store the pitch so now we have those two settings but those are kind of static and we could just set those directly down here which we're going to start out by doing so we're going to say that source. um volume uh should equal actually let's give these up here some uh default values and let's just add that back in there uh so let's just set that to a default value of 0.7 and this to a default value of one and you can see that we can simply add these in here so that's going to be equal to volume and we could do source. pitch and set that equal to pitch and that's going to be just fine uh and uh maybe we should see if this is showing up in the inspector uh and actually let's go ahead and test test that now so uh we can go in here and we can define a sound array and this is simply going to be a list or an array of sounds uh so that's going to store all of our sounds and we want this to be editable in the inspector but not ACC accessible through script so we'll make this a serialized field however this is not going to work you can see if I save this now and head into unity and wait for it to recompile here you can see that the audio manager still has no Fields showing up you can actually see this array and the reason why is because this class is not marked as a serializable class so again we need to go up here and add system. serializable and now this should work so if we save that and head back in here you can see it showing up and then we can add however many elements that we want to add uh but I'm just going to begin with one we can add a name to it and this is going to be the respawn and we can drag in an audio clip and you can see that we have this volume and Pitch values right here however this kind of sucks um instead of uh changing this value here which is kind of an arbitrary um value well we don't want our volume to ever go above one or below zero we could add some kind of restriction to this and we do that using a uh slider and uh to add a slider we simply use an attribute here called range and uh in this we give it a minimum value of zero and a maximum of one so that's simply going to clamp this volume between zero and one in the inspector uh and we can do the same with the pitch here uh that's going to be clamp between 0.5 and 1.5 let's say you can put in whatever values you want here uh so now when we save that and head back in here it's just going to feel uh a lot more uh a lot nicer so now we can set our volume here to 7 and a pitch here to 1 and you can see that we can simply adjust these however we want to so that's very easy and and looks much nicer uh next up the randomness uh so we can actually go ahead and and create two more fields we can uh make a public float which is going to be the uh volume Randomness um volume variance uh random volume whatever you want to do I'm just going to do random volume here uh and uh this is going to be a multiplier so I'm going to default that to 0.1 so that means that if a volum volume was um let's say if our pitch had a random pitch of 0.1 the pitch could vary between uh 0.9 and 1.1 because it's simply a multiplication however with the uh 0.7 here it would be 0.1 uh uh it would be 0.7 * 1 plus the random volume but I'm going to show you that in a second so uh public float random pitch and again default that to 0.1 and it's very good to have these random values in the game to make it sound uh not repetitive so uh we're going to uh give this a range also and it's going to go between zero and 0.5 maybe uh I think that's actually the volume now that's going to be fine and we're going to do with the uh do the same with the pitch here and then down here we want to set it equal to volume multiplied with 1 + random. range and remember to put a parenthesis here random. range and uh this is going to go between um negative random volume divided by two to positive random volume divided by two so this is what it's going to look like and we're going to do the exact same thing with the pitch only now we change this to pitch and random pitch here and there so that's going to give our sound some variance and of course you can see why this works because we multiply it with uh one if we have uh no Randomness whatsoever then this is going to go from0 to uh zero and the random number between 0 and0 is what Z and therefore this is just going to return one and when multiplied by one this is simply going to be the volume if we go between uh 0.1 uh or if we have a randomness of 0.1 this is going to go from negative 0.05 to positive 0.05 uh which is going to be an a range of 0.1 and uh then we add that onto the one so this could either be 0.95 or 1.05 five and then we multiply that with the volume so you can see how that works good so uh let's delete this now and uh I think this is pretty much all we need to do inside of our sound class uh next up is just adding some methods to actually make this work within Unity uh very easily so we can just go in here and check that all of these settings are working uh so just wait for Unity to reload here and you can see that they both both defaulted to 0.1 and how we can drag these around as we want for example uh the um respawn countdown here is not something that I want any variance on uh since it it's basically just my voice and that doesn't get too repetitive if it's only play like every time you fall down it's not a very repetitive sound like a machine gun or a dying effect or anything like that so we're going to be just uh fine uh with that cool uh and uh yeah so inside of our audio manager class we're ready to add some different functions first off let's make in the start function uh we can uh basically Loop through all of our different sounds and add an object uh for each one of them so make a four statement whoops a four statement and this is going to be I and it's going to be sounds. length so for every uh sound in the sound array we are going to add a new game object and we're going to store reference to this so it's going to be game objector go equals new game object and we're going to give it a name and the name that we want to give this is uh well let's prefix it by sound underscore and then the uh number of the sound so let's just do the index here plus uh another underscore plus and then the name of the sound so let's do uh let's do sounds to i. name that's how it's going to be cool and for now it's of course only going to spawn one object but when we add more uh this is going to be make to make it very easy to find the correct sounds and see the settings and if they've been applied correctly and all of that and uh next up we're going to uh actually add a component to this which is going to be the audio Source component because this is going to spawn without anything added to it only a transform component um so we simply goore go. add component of type and then audio Source there we go and uh then we can uh call on the sound so Sounds incremented by I do set source and we want to set the source to the newly added audio Source this is just the same as referen it refer ring s sing it up here so if we do audio Source here and call this underscore Source equals that that is the ex and then putting in the source here that's the exact same as simply doing on this except this is not going to store anything in the variable and so it's not going to uh be cleaned up with the garage collector because it's never really added so this is going to be aign a bit faster cool uh so now that we have that in place let me just think what we need to do we are setting the source and all of that is perfect then we can go ahead and create a method for playing a sound uh so I'm going to make a public void here called play sound and this is the audio manager so later we can do some special things for music if that's something that we want to do uh but we'll we'll see and uh this is going to take in a string which is going to be the uh name of the sound and it's simply going to Loop through uh all of the sounds so I'm creating the same loop as we had up here and uh there are more effective way of finding a specific sound all of that I know uh but this is going to be just fine and it's very easy syntax I mean you understand why this is working so don't worry unless you're going to be having hundreds of thousands of sounds this is going to be fine uh and then we check if sounds make an if statement here if sounds to I do uh name is equal toore name then we found the correct s sound uh and we're just going to play the first sound that comes up with that name if they're multiple uh the other ones are going to be skipped we could just Loop through all of them and let let it play all of them that would be just fine uh but I think it's it's all right if we only play uh one uh so we are going to now play that sound by doing sounds to I do play there we go so once we found it we call play on the sound and uh then we want to return so there we go we exit out of the loop and everything is fine and if we reach this place down here uh well then it's because because it have has not found any sound um with that name so uh no sound with uh name uh and then we we're ready to throw some kind of debug.log statement it's not going to crash or anything uh but we definitely want to let ourselves know because then we are calling something that doesn't need to be called so uh we're just going to throw a warning here saying that uh audio manager uh sound not found in uh in sounds array or in list and then we uh specify the uh name of the sound here so not found in this plus and then we do uh underscore name all right so I'm just going to do a comment there instead looks cleaner cool and that's basically all we need um there's only one thing with this and that is we need a reference to this audio manager and instead of getting that by uh dragging in as a component or whatever uh we're going to be using u a kind of Tey Singleton as we've done before uh so again let's create a static reference and uh then um set that through the awake method so uh here we're going to create a public static Audio Manager and this is going to be the instance and in the void start or uh void a wake we simply want to set instance equal to uh this and we can just check if there are multiple things and then throw an error so if instance is not equal to null debug. log error more than one audio manager in the scene there we go and this is just going to be an else cool and I believe that was all we reference that we go down here and uh just for quick testing we can call the uh audio doplay method through here uh so that just go and do that so we'll just play a sound here so we'll say play sound and the sound we want to try playing is the respond sound just to see if this is working and let me just turn on my audio here so I can listen in uh on whether or not this is working uh let's try respawning 3 2 1 so that's actually working and you can see under the GM object uh that we okay so the sound is right here and we probably want to parent it to the GM object I forgot that part but you can see that the volume is randomized the pitch is randomized within the boundary we've set and uh yeah that's all really perfect and you can see its name correctly and all that so uh just to make this a bit cleaner we simply going to go into this uh game object and say uh go. transform. set parent and we want to set it to this. transform there we go and that's just going to look a lot better so if we hit play now it's going to play the sound responding and you can see that it now appears under the GM object we can of course create a sub object for this you can do whatever you want with this in order to organize it uh but this is going to be the very Basics so let's just try and implement this let's remove this play sound call right there let's instead open up our game master and we can now delete this audio Source right here it's not needed uh let's create a reference to our audio manager from within this game master so uh let's create down here let's create it down here uh a private audio manager so we'll just do all of a caching here cache private audio manager and let's just call this the audio manager and in the start method we'll set uh we do all of this and then we cache we'll simply set audio manager whoops audio manager equal to audio manager. instance cool and we can of course check if this is null we should probably do that so if audio manager is equal to null when then we throw a debug. log error say saying that uh freak out um the uh no audio manager found in the scene there we go and uh then under the respawn player where we find our audio s source and play the sound instead what we want to do is we want to say audio manager. playay sound and then we give the name here so respawn and instead of hardcoding this we could add it as a variable up here which I think we are going to do so we already have all of the spawning stuff so let's do a oops let's do a public string and this is of course going to be the uh spawn sound name and we're simply going to feed this down here case save that remember when we go back into Unity to change this variable there we go to respawn now hit apply collapse that collapse that clear that collapse that and that and that okay we want to watch that and now hit play and hopefully it's not going to play right away but it's added here now you can see that the volume and pitch is defaulted to one but this should change as soon as we uh actually respawn so when I jump down now respawning it changes and the sound actually plays so you can see here that the volume just bumped down to 0 S uh that might be correct but I actually only wanted it okay so it starts at 0.7 so that's why and that's just fine so you can see that this is now working just as in intended we have the variance and I want to disable this for for that uh there we go hit apply to that and you can go ahead and add all of the different sounds that you want by simply following this very simple pattern of getting a reference to the audio manager and then calling the play sound you don't even need to Cache it if it's not something you want to do you can just call it directly it's not going to H hurt your performance too much so that was basically all I wanted to show you in this video I hope you enjoyed it and I'll see you in the next one one