this video is brought to you by our own Metta thank you so much for donating if you want to support breakage yourself you can go to patreon.com/scishow geez thanks for tuning in at brac ease hello I want to welcome to this video on creating a tower defense game in unity today we'll be adding currency to the game along with a cost for each charge so we can't just build them infinitely we also be tidying up how we are built turrets in the build manager and how that is connected to each individual node so will make it a bit safer and definitely easier to use so without further ado let's just jump right into it as you can see I'm here in unity and what I really want to begin with is our shop so I will undo canvas and then shop we can see that we have this sharp script let the two buttons are linked to and they just called call purchase standard turret and purchase missile launcher on that shop script let's double click that to open it up in visual studio and here we can see what is actually happening all we really do is we call set turret to build on the build manager and then we pass in some prefab that is actually also sitting on the build manager I think we should go ahead and clean this up quite a bit because instead of setting the turret to build using some prefab that is located under the build manager what I thought that we would do is create a separate class that has and called something like turret arm blueprint where we would have a prefab and then a cost and then what we will do is we will simply set that on the build manager so that the build manager can then be responsible for subtracting that cost in our amount of money and actually building it using the prefab so let's just go ahead and create this class right away and this is just going to be a csharp script and we'll call this our turret blueprint down here and let's double click on that to open it up and just reload all here and let's try that one more time there we go and we don't want this to be a mono behavior because we don't want it to be a component in unity we won't don't want to need to attach this to any game object but we definitely do want to be able to see the field here inside of the inspectors so therefore we are going to go ahead and mark this as system that serializable and I will show you why we need to make this in a second all this really means is that unity will go ahead and save and load the values inside of this class for us and that means that they are visible in the inspector and therefore we can edit them so let's just go ahead and create a public variable here and this is going to be a game object and this is going to be the prefab of this chart and then we'll also have a public integer on storing the course the cost of this turret and we can definitely add more things in here but for now we'll just add these two values then what we can do inside of our shop is that we can now create a public variable and as the type will now put into our it blueprint so we just created a class here that we are now using as the type and and this is going to be our standard turret and we'll also have a public blueprint for our missile launcher there we go and you can see that if I save this now and then hit into unity here and select our shop we now have a standard turret if we open that up we have a prefab where of course we need to drag our standard prefab and a cost that we can just go ahead and set to something like 100 and we also have a missile launcher and we need to drag that in as well but I will just quickly show you what happens if I remove this system that serializable well that means that unity won't know how to serialize the data meaning that it won't know how to save the data and therefore it does know on how to show it in the inspector either so it doesn't show up there so therefore we need to every time we create a class that we want to show up in the inspector with multiple fields we need to market our system serializable so we can see that it's it's back here and we lost the information here so we're going to set the cost of the first one 200 the second one so maybe on to 50 and then we'll drag in the true prefabs here this standard turd and our missile launcher there we go cool and now we can go ahead and use it utilize the fact that we have these two blueprints so instead of calling everything on the build manager here we can simply go ahead and remove all of this and maybe rename it a bit as well so instead of having this on the name of this method be purchased and a turd will have it be select standard turd instead because the transaction only happens when we actually place on the turret and therefore we aren't subtracting any money yet so let's just call this Lee select standard chart and select missile launcher and then we can go ahead and rename this as well so we'll rename this to select turret to build turret to build and we'll do the same down here and we can go ahead and now remove these two and then instead let's pass in let's pass in the standard turret and the missile launcher so now we need to go into a build manager of course and allow ourselves to do this but you can see how this makes sense we have a method that just tells the build manager to select the turret that we have up here so now we can find our build manager and we can go down here and instead of having this set turret to build here we'll create an entirely new function and this will look of course a public void and we'll call it select turret to build and it's going to take in a turret blueprint which is just going to be the turret here you can also call that turret blueprint if you want and then our tour to build currently has the type of game object let's go ahead and change that to a turret blueprint as well so that is as well aware of both the prefab and the cost and so now we can just say turret to build equals deterrent blueprint that was passed in to this electorate build function cool so that will change that correctly and now what we can do is we can go ahead and have a look at how we actually purchase or actually place down these turrets so if we go into our know script I remember this sits on every single node that and the node means a buildable place means a platform that we can build something on top of you can see here that um if we get a mouse down it's going to get the tart to build and it's going to build it right in here and I thought it would be a lot cleaner to have the build manager actually do the building of the turret so let's separate this code out and let's do that by first getting rid of the get turret to build method so inside of a build manager here and what we are going to do is we're simply going to remove this method entirely and we still need a some kind of way to check if we have a church selected so previously we would say if build manager get tart to build was equal to null then we didn't want to highlight on the the node when hovering over it and we didn't want to be able to build anything of course because we can't build null but instead what we'll do is we'll go into the build manager here and create a nifty little or use a nifty little trick here where we are type in public and then we are going to do bold can build like that and then we open up and close these armed curly brackets we type in get return and then we do our turn to build it's not equal to null and then remember to close that off with a semicolon so this syntax might be really new to you or it might just be trivial I will try and explain what we're doing here this is called a property and it's called a property because we only allow it to actually get something we only allow ourselves to get something from this variable this variable can never be set and it's pretty much the equivalent of writing a small function that will just check if tart to build is equal to null and then or is not equal to null and then return the result so what we will be doing is we are saying that we want a public pool variable called can build and when we try to use that say if we can build and instantly going to check if dirt to build is not equal to null and if it isn't equal to no it's going to return true so we can build and else it's going to return false so we can't build so that is the idea with this our property but you could also make this as a function as well so in here we can now just right if build manager that can build and it was that easy so that just makes more sense syntax wise and we're going to go ahead and do the same thing up here so build manager that can build and then we will return if we can so let's just put an exclamation mark in front of those two of course if we can build we want to proceed down here all right so I think we are getting there slowly so now we can take all of this code here and let's move that in to the build manager so let's instead make a function on the build manager call something like our build turret let's just say build char it on and then we'll pass in this node so if we go into our build manager here then let's create a function and this is going to be a public void build turret on and the reason why I'm saying on is we want to build it on a particular node and we'll have that passed in as an argument here so we'll have the node passed in and what we can do here actually I'll just write all this code here once again so we make sure we don't you make any errors so we want to instantiate our Terr to build dot prefab so that's the current turret that we have selected we want it to be instantiated at node transformed up position so the node that we have specified this is where we want to build the turret we want to use that the position of that node and we want to add on to that node dot um and it's I think it's offset position offset there we go so we want to add that value onto that or we could simply go into the node here and create a little helper function which I definitely think that we should do and this is just going to be a public arm vector3 and we'll call this our get built position and this is just going to return transformed up position plus our position offset so now in here instead of doing all this we can simply say node get build position there we go and finally we want a rotation and we're just going to use quaternion identity so we won't rotate it at all and what we can now do is we can do game object and store this in a temporary variable we'll just call that one turret and we'll cast it as a game object as well remember we've done this before we've cast it into a game object and called the turret and now we can simply say node dot turret except we need to go into the node here and we need to change this to public and this actually makes a lot of sense for us because you might want to have some nodes with a turret already placed when you start the game some levels you might want to restrict the user or help the user depending on what you choose to have built on top of that turret so what we'll do in here is we'll just make this and just put a disclaimer here inside of the editor on that we will just saying optional so this is just an optional parameter and that just means that if we go into unity now and I think we might have to just wait until we finish it all here so we'll just wait a second here so we'll say no dot turret we are now able to do that equals deterred that we just built and I believe that is all so now we are actually ready to do some currency but let's just see if this is working so we should see this error disappear here and now if we select if we select a node here you will see that we are able to optionally put a turd in here so it just says optional and that is really the only function that this has here the header only displays a bit of text here in the editor help ourselves but it is definitely usable especially because if you just see this game object and you haven't put optional here it looks scary it looks like something should definitely be there come so everything should be working now and we should hit play and we should be able to select the chart except we can and that's because we've lost the connection of these buttons so we need to select standard turret item we need to go shop and then instead of purchase standard turret it is now select standard turret and the missile launcher as well so we'll go shop and then select missile launcher go so now we should be able to hit play and select the turret and place it around and do the same with the missile launcher ok so that's awesome and if we go into the code here I just want to walk you through what is happening so inside of our shop we these methods are called when we click something and they call it method on the build manager called select chart to build and then we pass in the turret that we want to build in our case either the standard or the missile launcher which are defined by these turret blueprints which is basically just a prefab and a cost and then we are going to the build manager here so this is the function that is a cold and it just sets the chart to build here which is a private variable a private turret blueprint equal to that chart that we passed in and then later when we want to actually build it when we want to place it and that happens on the node whenever we click the node it's going to say if everything is of ok ok of course if we can build and all that then it's going to call build turret on that node on the build manager so it just passes itself on to the build manager that then builds the turret hard to build on top of that node with the correct position and all that and make sure to set no tattered equal to that turret so the node itself is aware of what turret is on top of it and if we go in here and hit play and I will show this here and I will just hit escape here and find a node here let's just find let's say use the third one from the left here if we go and place and note or a turret on top of that you can see that the optional turret here now says standard turret and that is if we click on it a reference to that specific turret here so it's a reference to that turret that we can then do stuff with such as maybe sell at a later point or upgrade or whatever you really want to do there cone so I believe that that was all of the changes to how we do this stuff that we needed to mega now it's really really easy to add the actual currency in here so on now we can just go on our game master here and add a component you could put it onto the build manager you could make a separate one called currency I think I'm going to go ahead and make one called maybe player stats and then we'll have stuff like currency in there on the money of course and I will have maybe the remaining lives left that the player has and you can keep track of other stuff as well the amount of damage the player has done if you want the player to have a level or a base that you could upgrade or whatever related to the player any statistics here we're going to put them in here and now we can simply go public um static int and this is going to be our money and then we'll go public integer and this is going to be our start money and again remember we make this a public integer because we want to edit this inside the inspector and we make this a public static integer because we want to this to be accessible with using only the player stats type without requiring an instance or a reference to any particular object in the scene so public in start money will just default that to something crazy like 400 we'll be able to afford a lot of turrets and then we'll create a start method here and when we start the game we just want to set money equal to start start money and you might now say why don't we just set money up here equal to 400 and then remove all of the other stuff and the reason why is that static variables will carry on from one scene to another so if you were to reload the scene and use that as a way to reset the game money would the amount of money that we have would carry over and so if the player is broke he will start off with no money left so that is kind of important to do cool so now we can set that in here we have the start money in here and that also makes it very easy to edit inside of the inspector doing it this way and then we'll find our build manager and under the build chart on what we want to do here is we want to now check if player stats dot money is greater or is less than um to build dot cost so if we don't have enough money what we want to do is we will simply want to return and then we might display something on the screen at a later point but for now we'll just say are not enough money or not enough gold whatever you want to call it let's just say not enough money to build that ah cool and if we do have enough money we're just going to proceed down here and in that case we want to say players that that money equals turd to build costs so that we remember to subtract the cost of our turret from our money amount and what we will do here is we just want to say debug deadlock Mon turd built um money left and just display our amount of money that we have left so we're just going to go play your stats dot money at a later point maybe already in the next video we are definitely going to display our amount of currency on the screen but I have some different UI changes that I want to make so I think I'm going to pack all of them into one video I have some really cool ideas about how we can overlay the text here and make things look a bit better and we might also want a price tag for the turrets down here as well so if we now go in here and hit play you can see we can't do anything until we click a turret here and we're going to purchase it and it says chart built money left 300 and that is correct 400 minus 100 is 300 and if we now build a missile launcher here you can see a missile launcher selected toward build money left 50 and now we can't actually go ahead and place anything because it says not enough money to build that and one really really cool thing that we could add at a later point is so that when you select the turret and hover over one of these arm uh notes here that it might show um the turret that we want to build and maybe make that to red if um if we don't have enough money to build it or something like that at least change the color of our hover over or um yeah you get the idea so that is definitely something that could be added in and something that you might experiment with on your own and until the next video can of course go ahead and add the currency on the UI here just as we did with our on time we're up here it shouldn't be very different so that was basically all I wanted to show you in this video I thought it's really exciting and um in the next one again I hope to do some UI so without further ado thanks for watching and I will see you in the next video thank you so much to all of the awesome patreon supporters who donated in August and a special thanks to our own Metta Robert Roach james calhoun vixen p and andrew kay you