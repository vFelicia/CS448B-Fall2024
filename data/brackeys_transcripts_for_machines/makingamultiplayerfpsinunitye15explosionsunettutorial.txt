thanks for tuning in at brakus hello and welcome to this video on making a multiplayer FPS in unity today we are going to be adding some cool particle systems to our game so in this video we're going to be adding both a death explosion effect and a respawn particle effect we're also going to be changing between the scene and the player camera so it will look super cool when we die we can see the entire map and stuff like that so that's going to look super awesome and be a lot of fun so without further ado let's just jump right into today's video here and now you can see that I'm here in unity and the first thing that I want to take a look at is just how it looks right now when we play the game so if I go under our player and double click or play your script here and I'm just going to say yes to all of this there we go and just remove those two you can see here that we have a piece of code that we've written in an earlier video and that it's commented and I'm just going to uncomment this and you can just write it back in just copy it here if you haven't have deleted this for some reason and this is simply for testing on the respawn mechanic we simply say that if we press the key K for kill we add a bunch of damage to our player so this will just allow us to kill ourselves here commit suicide and when we do we can see what happens so if I hit play now I'm going to land host and hit K you can see that I become unable to move but there's no kind of visual feedback for what's going on and if we have a look in the scene view what happens is basically we just our freeze in place and the physics actually is still applied and nothing really happens so the first thing that we could take a look at doing here is maybe adding in some particles more specifically an explosion effect so if we go under standard assets particle systems and then prefabs and again in order to import this we simply rightclick go import package and then particle systems if you don't have this folder then we can take the explosion prefab here and drag that in this is going to act as a base for our cool explosion effect and you will see in a moment what this looks like so if we just drag this up a bit from the ground just to add a Y of one let's try that and try and hit play you will see that this explosion is huge it looks super cool but it's also very large and therefore unity has provided this cool particle system multiplier so we set this to something like point four it should scale the particle system down and it does however the smoke surrounding it still looks super weird so let's try and configure this a bit in order on to have the smoke black not be affected by this particle system multiplayer on multiplier will create a sub object so simply create an empty object here and reset the transform when it's parented under the explosion and let's just call this something like particles it doesn't really matter let's take all the objects here except the smoke black and move them under there and then we're going to break the prefab instance but that's fine with me because we're going to be turning this into a separate prefab in a second anyways then we can take our particle system multiplayer and multi player multiplier and then copy that component and remove it and then paste it as new on the particles object we can do the same with the explosion physics force you can also just go ahead and simply delete that component if you want to this is simply going to add an explosion force so any rigidbody objects nearby will be affected by the explosion we're just going to keep this in for now and then we might change it later so then we have this smoke black here and this is what we want to change and first off we could maybe set the duration a bit shorter something like 0.5 and let's just Center it on this we can also take the shape here because it's currently huge and set that to a radius of 1 and let's try this again it's already much better we can then maybe change the lifetime actually the duration here I wanted that to be yeah point five is going to be fine and then on the lifetime we can set that to something like I know between 0.7 and 1.2 let's try and simulate that that looks much better let's actually do one here I like 1.2 better and the start size here they've said that between 75 and 150 maybe ah maybe 130 it's better so let's try and simulate that and that looks much better so it's now I a much less dramatic effect and it should look much cooler we can also quality the emission here and change the rate to something like 8 just to thin up the smoke a bit and I think that looks super cool so we're just going to stick with that and we can now take this and make it into a new prefab so let's go under our prefabs folder and drag the explosion in there good so we are now ready to code the instantiation of this explosion so let's select our player and go to our player script double click that again and let's first off set up a quick reference to that explosion object so let's do a serialize field private game object and this is going to be the death effect and all we want to do is find the place where we died remember we have this OPC client RPC code take damage and if of course because this is a client IPC it means that it is called on all of the our different clients whenever a game object takes damage and therefore on the die method here is called inside of this will also be executed on all of the clients so that's perfect for spawning in temporary effects because it's going to spawn on each separate clients and it's not going to be handled over the network in any way it's going to be spawned actually locally on the client so that's just fine and what we can do here is maybe just quickly add in some comments so what we do here is we disabled components and we don't want here we disable the collider and here we spawn a death effect and we simply do this by using the instantiate method and what we want to spawn is the we call the death effect and we want to spawn this at our current position so transform that position and the rotation really doesn't matter so we're just going to use quaternion that identity and so we get a zero zero zero rotation and let's just store a quick reference to this so we can delete it after a couple of seconds so we want clutter up the hierarchy so we'll make a temporary game object here called let's just say graphics GFX instance and set that equal to the instantiated object and we need to cast that to the type game object and then down here we can simply say that we want to destroy this our graphics instance after let's say three seconds this way we get give the smoke plenty of time to dissolve good and all we need to do now is simply wait for this lot here to appear and then let's just lock this inspector go on to our prefabs folder and drag the explosion into the death effects lab and we can now unlock that again and let's hit play and see if this is actually working so we can take our scene view and just talk it over there so we can see what's going on in the scene here and we can spawn in and we can move over here and then press K and you can see that a cool explosion now spawns and I think that looks super nice so what we need to do now is actually disable the player graphics so you can see currently under our player we have this disabled undeath array and this will disable and certain the components added to this array when well when we died and what we could do is we could go through all of the different renderers associated with our graphics under the different graphics objects and add them in here but that would be tedium and yeah we don't want to do that so what we do instead is we go up here and then we create a new array and this array is going to disable objects entire game objects instead and this is going to be the disabled game objects I'm death and what we simply want to do here is first off up here in the setup we don't need to do that we also do it here so we can simply copy this for loop and here we want to disable able game objects instead of just components and we can change this to disabled game objects on death and do the same here and instead of using that enable I'm setting that to a boolean we use that set active and then we put in false right here so then we just disable all of that and we can just take this inside entire for loop and duplicate it for down here so here we want to then set all of them to true again we want to enable them again so here we set components active and here we also enable game objects that's a better way to put it here so enable the components there we go and for the components we remembered whether or not they were enabled before and then set them back to that state for the game objects here we're just enabling them again that's going to be fine for now if we run into some problems later we are going to change that of course so here we want to enable the collider as well there we go and that's going to work just fine and I think we are already ready to add some game objects that we want it to disable and the first one that comes to mind is the entire graphics object so we can just add that to the array and this doesn't include the weapon but you will see that I game object disappears here so when I press K the guy disappears and that looks already much better however I want to also disable the weapon and the weapon sits under the camera object and that's fine because I want to also disable the camera however when we disable the camera I want to make sure that our scene camera gets enabled instead so if we were to go ahead and drag the entire camera object in here that's going to disable the camera the weapon camera the weapon holder and now all of the stuff under that all of the weapons and that's going to be fine however it's going to say that the scene is missing a full screen camera and that's because our scene camera here is still disabled so let's create a way through script for us to enable that and control its current state and I think the way that we're going to do that is currently if we take a look at our player setup script we're simply finding our main camera and setting that to active or are not active and that's fine as long as we only have a very limited amount of cameras and we always control that the scene cameras is tagged as the main camera and it's it's okay however I think a better way for this for us to do this would have the game manager would be to have the game manager to control the state of the scene camera it will have a reference to what camera is the scene camera and it will have a method that will enable and disable it so that's what we are going to do and therefore we are simply going to delete all of this we're going to delete the scene camera reference up here and we are going to change the code down here what I basically want to do is have some kind of method on the game manager so we can say game manager instance and then we can call some kind of method here let's go ahead and create that method now so if we jump over to our game manager open that up and make a reference to our scene camera so just put a slot here a private and this is just going to be a game object because I want to disable the entire game object so we don't have multiple audio listeners and so we disable the flan the GUI layer and stuff like that so a private game object and this is just going to store the scene camera and then what we can do down here so we can make a public void code maybe set scene camera active State States whatever set scene camera active and then we have a boolean here called is active that will control whether or not it's currently enabled and then what we do is first off we want to check if the scene camera is equal to null well then we want to not do anything inside of this math method and simply just return we simply want to just quit out of that method and if it is not equal to null meaning that it's equal to something well then we want to set say scene camera that set active and then we want to pass in the is active variable that we have passed in over here good and remember to do this check because we are calling this from the on disable method and therefore it might be equal to null that is something that happens so unless you want to have error messages it's a good idea to do that check then we can now just on the instance here find the method called set scene camera active and we can set that to true when we are not no longer in the scene we want to just set the seat or no longer active as a player when we are destroyed then we want to set that scene camera to active at another point we might be transitioning to some kind of menu scene but this is what we're doing for now then under our player object we can call the exact same method then that is the cool part so now in here under the die method here we can check that if we are the local player if is local player and again we only want to execute this for the local player because we whenever a player dies it's only camera that should change it would be weird if you killed someone and then you were taking to the scene a camera that would just that doesn't make sense we only want it for the guy that is actually killed and here we switch camera and we simply do gamemanager dot instance dot set scene camera active to true yeah there we go so we want to set that true and we can copy this line of code go down to the set defaults and here again we want to have we want to copy the if statement also so there we go and now we want to set it to false by because when we are responding and we call the set defaults we want the scene camera active to be false as well good so we save that and let's try and hit play here and let's select our land host and something is not working and I bet that is because we we didn't get an error but we did not either reference a scene camera and that's something you need to do so let's do that and now he'll play and select land host here you can see the scene camera gets disabled if we now kill off this guy we can see it switches to the scene camera and it switches back on however it will also notice that it doesn't turn off the ingame UI so if I press K here it's there and it's frozen but it's there so we want to disable that temporarily and they a very simple way to do this ah a very simple way to do this is if we look under the player set on script we already have a reference to our current player UI the player UI instance it's up here so if we just went ahead and made this public and we don't want to be able to see this in the unity inspector so we'll tag this as a hide and inspector so we don't see it but we do want to be able to access it what we can then do is we can go under our player script I'm first off we want to make sure that we have a player's setup on on the same object so we don't get any null references here so we want to require component type of player setup this way we don't have to do any error checking and then inside of our this local player here when we set the scene camera state we can also say get component the type play your setup dot set active oops I mean dot um and it's called player something with player UI play you our instance dot side active and then we can set that to false so whenever we enable the camera we disable the player UI and we of course want to invert that down there good so now when we and we don't need to reference anything so now when we hit play so like land host and kill the sky you can see that the UI disappears and that we will be that way with any kind of ingame UI we create under this object so also the crosshair disappears and everything is just perfect good so on the next thing that I kind of wanted to take a look at here if we see everything's working with that and we have our player here and the death effect the final thing I wanted to take a look at is a cool respawn prefab so let's go ahead and actually create this in the game so first off let's go into standard assets particle systems prefabs again you can import this if it's not there and I want to base my effect off of the fireworks effect I think this is a super cool effect however I don't want all these trails and the smoke I only want the explosion sub emitter and we're going to break the prefab instance that's fine and we can delete the rest of the particle system and I want to rename this to something like spawn effect and my phone is going off you excuse me for a second I'm just going to turn that off very quickly and hopefully we can continue the video here cool so we can call this the spawn effect and we can maybe just move this up one unit and if we zoom in on this you can see just how cool this effect actually is and what I want to do is I want to turn off looping on this I want to change the duration to something like 1 and I want to change the lifetime let's say point somewhere between 0.5 and 1 maybe there we go so that just brought the effect down a bit but I think still think it has this very cool bright and colorful feel to it which is definitely nice to have in the game so yeah I am really satisfied with that and you can of course tweak this on to death you can do anything you want with that I'm just going to now drag this under the prefabs folder turn it into a prefab and let's just very quickly do the code that will spawn the same so under our player objects we will go up here scroll scroll it's becoming quite the script this one and let's just duplicate that instead of a death effect if we now want a spawn effect and we don't want to spawn this in when we die of course instead we want to spawn this in a good place to do it would be under the respawn method however our respawn method is only called when we have died not when we first into the game however I'd set defaults method is called also when we enter the game so I want to put the code in there however I also want to move this set defaults method down after we set our current position because this way we won't spawn in the particles at the place where we died instead we will spawn them in at our new spawn location and things won't look weird so that's a quite an important step and then we can go and do our set defaults here and we can just make a new comment here called create spawn effect and it's going to do the exact same as when we we were spawning a death effect up here let's just copy that part of the code change the name here to spawn effect and everything else should work just fine so now when we add when we say that head back into unity we should have a field there that we can now populate and we want to lock that go into our prefabs go into our spawn effect and drag that in there and now we should hopefully see this working so nice like land host you can see that we have this cool respawn effect and I can go and destroy my player and it's going to spawn there with the coollooking effect and I'm just going to demonstrate that this is working over the network so let's go ahead and hit control B or command B if you're on the Mac to make a standalone build that we can test this on and it is going to wake work in almost every way except one that I will show you and that's not something we're going to be fixing today and I will explain why so let's go ahead and and hit play here select host over here and that is working then select client here and you can see here that was the part that wasn't working when we join as a client it spawns for both the current your own player but also on all of the other players that are currently active and we'll talk about that in a second but first let me just show you that if I kill this guy he explodes and he spawns back in beautifully and it's the same if I do this for the other one I'm not going to show you that all right now because well then I can't see that but you can see here it works just fine on this system as well as this one so that's super cool so as soon as the objects are actually in the game everything works on fine the only issue is when you spawn is in sa client and I can show you this again if I press client here now whoops okay so we have some weird functionality going on here maybe things didn't work quite as well as we wanted them to so if I kill myself here that looks just fine oh and this was also a result of what I'm going to talk about of okay of course so the reason why we have this weird functionality is because we have of the way we have set up our player script so if we go under our player here we can see that we have this set up method and this set up method is super nice because it sets our object up just as we want it to be set up the problem is not with this method the problem is is with how it's called because currently this set up method is called for all of the different clients and that means that on all of the different players as well and that means that if I am a player and I want to join a lobby and this Lobby currently has four players in it and I'm the fifth player well then I am going to join that lobby I only want to call this setup method that sets all of the defaults values and stuff like that and creates a spawn prefab I only want that to be called on this player I want it to be called on all the clients with I want all of them to spawn in the coop prefabs and update the fact that I've updated this object but I don't want it to be on called for all of the different objects because this way all of the players will be reset when just a single player spawns and that's the current way we have it set up and that of course doesn't work because if we look under our set default method we have for example resetting the health of this guy we're also spawning in some particle systems and stuff like that and that means that when we spawn in any kind of player he will make sure that all of the other players health is reset and that's not something we want that is unfortunately not something we're going to be changing in this video because it requires some restructuring of how we have this of how we call this method you can see currently we just call it in the start method and frankly I think this is going to be a lot easier to to do when we actually create some kind of network manager on our own and this way we can I'll call this kind of set of methods through that and have very more control so we're going to have to leave this for now because this video is already very long just know that I am aware of this bug and that I definitely want to fix that in a coming video so I I will look into it for sure so with on that set that was the particle systems here and I hope you enjoyed it I think particle systems are one of the most fun parts of using unity yeah so that was it for this video I hope you enjoyed it and I'll see you in the next one