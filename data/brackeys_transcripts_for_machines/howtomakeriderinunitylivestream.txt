hello everyone welcome to this video this is a live stream tutorial on creating a replica of Ryder the pretty popular mobile game and this is what it's going to look like this is my recreation inside of unity if I go ahead and hit play here you can see that we have this small car and that if we hold down our mouse button we can move him and if we hold down our mouse button while in the air we can rotate him so we have to make sure that we always land on our wheels and that we kind of go through this course and of course you can add points for doing it quickly there you go I I messed up and that would mean that we had to restart you can add points for doing multiple flips for creating perfect landings if you land flat on a surface and you can create all kinds of different surfaces and the way that I have this set up is using a Bezier curve Collider so we can actually really easily insert the editor sculpt our level using this Bezier curve editor and I'm going to show you how to set that up using a simple extension that I've modified a bit to suit this tutorial and also of course we have some neon on the lines here which is a pretty cool effect and finally we have the camera and car controllers so that's basically this stuff that makes up this game and I really do encourage you to add a bunch of more stuff to it the if you want some inspiration as to what you can go ahead and add to this tutorial I suggest checking out the rider app as you see here it's on the iOS and Android stores so that's pretty much it and without further ado let's jump into the video so let's start by creating a new project here so click file new project and let's go ahead and call this 2d and let's go ahead and call it Rider and let's hit actually write a replica it's probably better and then that's it create project and I've had some issues recently with unity not really wanting to start in certain occasions hopefully it's not going to do that now but if it is that's just fine meanwhile I can say that this video is also going to be uploaded to YouTube to those of you guys watching on stream if you have to lose leave during the stream that's okay don't we will also upload it to YouTube afterwards and you should be able to download the entire project along with all the stuff that I'm using on github there will be a link to that in the description of the YouTube video but it looks like unity is going to behave this time so that's awesome the first thing that we can go ahead and do is maybe change the background color of our main camera to a more darker is saturated or at least a more saturated blue and what I really want to do here is set it up to use postprocessing effects right away because I want to get that cool glowy retro look and one of the ways to achieve that is using postprocessing effects in other ways color correction I want to get it vignette I want to modify our colors a tiny bit and finally I want to get that cool glow so I think I'm going to do that right away so that we can see that kind of working and then we can set up all the other stuff afterwards so first let's go ahead and save this scene here let's save it as just main for now and we can maybe rightclick and go in and create a tiny sprite here and we are just gonna select a default UI sprite just so we have something here that we can color correct based on now we can go to the asset store and we can download an asset called the postprocessing stack so we'll search for postprocessing and we should see it here it's created by unity themselves we'll just go ahead and hit import once it loads here and this will allow us to add all kinds of postprocessing effects like bloom like color correction and color grading motion blur vignettes all that good stuff we just want to get this in right away so that we can kind of find tweak the visuals of our game with these settings already applied I feel that works better for a game like this so we'll just wait it wait for it to loading all the unnecessary assets I mean while I'll have a look at the chat here to see how people are doing people are hyped that's awesome welcome to all the people who just joined and yeah so now we have our post processing stack in here and what we want to do is select our main camera we want to change the projection size here to something like 7 just to zoom out a little bit and we can go ahead now and add a new component and this is going to be the post processing behavior now we need a profile in other words these settings for our color correct and we need to create this in the project by going create post processing profile and we'll call this CC for color correction then we can select our main camera and drag in our CC object and now we can go ahead and add first of all a vignette there we go maybe decrease the intensity on that a bit we can also add some color grading and here I wanted to select from the tone mapper the filmic aces look I really like this look but it does mean that we have to brighten up things quite a bit and this is actually also the color grading that Unreal uses so yeah it's it's pretty popular in a game dev circles so I'll just brighten up the background a tiny bit there and I feel it gives this really saturated contrast a look that I really like especially for this style so now that we have our color grading in place we can maybe also bump up the exposure a tiny bit I'm gonna put it to 0.5 I feel that bumping up the exposure a bit makes everything look just a tiny bit cooler but it also means that you do have to go back and adjust a background color if your camera so now I feel that this is looking kind of decent we can also go ahead and turn on some motion blur but I don't want to exaggerate this I'm gonna put it to look something like 230 on the shorty angle not to play everything out too much and I think that's pretty much all the settings that we're going to set in here you could also go ahead and add some bloom this way but I'm gonna show you a way of creating our glow that gives you much more control than the default built in bloom here so now we can save this and we can go ahead and delete our new sprite instead we want to start creating some lines and again to do this we are going to be using an editor extension just two very simple scripts one that you applied to the object and one that makes it editable through the unity editor and these are actually taken from an old post from the Bronchos forum and let me just see if I can find that post here I actually don't have a link ready which I really should I've had here Bezier curve line let me just see if I can find this unity ah there's your curve Collider sorry I should really have had this ready here a set of custom colliders for unity here custom 2d colliders it's by guy quad and he created this a couple of years ago and posted it on the brackets forum and it includes custom colliders for both Bezier curve colliders but also a bunch of other shapes and they are really really cool I did have to go in and update them a tiny bit to not spit out warnings and also to make them edit a line renderer so they are actually visible so they're not only colliders but actually render lines and also to make them movable inside of the unity editor so I have created I've taken this updated version and I've uploaded it so I'm gonna post a link right now to the stream here if you want to use it and I'm also of course going to have a link for this in the description of the video and I've of course downloaded this already it's called the Bezier curve lines unity package and if we just take this now and drag it into unity we can see that I have two scripts one for the Bezier curve Collider and one for the Bezier curve Collider editor there's also a license here but it basically just says that it's free to use but if you want to redistribute it you have to include this license as I've done here so you can use it in any way also commercially that's totally fine you can use this in your games and then sell them that's totally okay so now if we go ahead and rightclick and create an empty object and we can call this our line actually that's called line segment and now we can hit add component and we can go under physics 2d scroll to the bottom and select the Bezier curve Collider 2d and there we go it actually draws a line it's currently very ugly line as well as a Collider inside it here that's just a fancy edge Collider and we can now edit this inside of the editor so let's go ahead and drag this start point here over here we can maybe on make it look something like this we can go ahead and add a knotty point to do that we go under the Bezier curve Collider 2d and hit add point in order to create another point here we can kind of smooth it out so it doesn't look quite as ugly let's create another point again and we can actually go through and create as many points here as we'd like but I'm just gonna create a fairly simple terrain here that we can drive along and I definitely recommend you to spend much more time on it than I do here I just want to show you the basics of how this works so now that we've created this line we probably want to make it look a bit better this weird purple line isn't really cool so what we can do is actually go into a line render and configure it I also probably want to bump up the smoothness of our line here you can see if I decrease this it's very clear that it's made of segments and if I increase it it becomes smoother and smoother I've found that a pretty good point it's about around 20 that makes everything look fairly smooth and also makes the collision handle fairly smoothly so now we can go inside of our line renderer and here I first want to decrease the width to something like 0.15 I think that's a pretty good width for the line that we want and I also want to smooth out the endings of this line here I think that looks better it's not actually something they do in the game but I think it's better if we go ahead and put endcap versat vertices here to about three to create that kind of smooth out ending of I think yes a matter of personal preference but I just kind of like that and finally we need to go ahead and add a custom material to our line so we'll go into a project right click go material and we'll call this our line and we can make a purple line first and of course we need to choose a shader and normally four lines like this you might maybe use an unlit shader or a sprite shader but these don't really glow so how do we add glowing to our line well the answer is using another custom extension and this one is called MK glow free I'm of course also going to have a link for this in the description as well as throw a link to it in the chat so there you go and this is a totally free asset in fact it's a free version of a paid asset that has more features but I haven't personally run into anything where I needed the pro version just yet so feel free to download this for free of the asset store and that's exactly what we are going to do we are going to search for MK glow free and it should pop up right here and we just want to go ahead and import that into unity and this will basically allow us to create materials that glow that's pretty much all we're doing here so let's hit import I will wait for everything to load into unity meanwhile I'll just have a look in the chat here and yeah we'll all be over 300 viewers that's awesome so happy you guys are joining in this tutorial today is pretty fun it's always nice to get to play with our clothes and especially Bezier curve editors that's just something really cool about them so awesome that you guys are joining in I hope you are loving this stream so far and I'm definitely looking forward to answering some questions later so I hope you guys are too and you have people are are going nuts in the in the chat that's awesome but it looks like it's loaded in here and all we need to do is go under m'kay now you see here we can go onto m'kay go free and they've actually gone ahead and included a demo scene so you can definitely open this up and have a look at how everything is working they demonstrate a few different examples of these shaders but this is actually applied to 3d objects and we only want to apply to a simple twodimensional line so our use case is actually much much simpler what we want to do if we go back here is first of all go to our main camera and add the MK glow free script and this does have a custom icon but it is basically just like any other component and here we can go ahead and choose what we want to glow we can change the glow type from fullscreen if you want the entire screen to glow we're selective if we only want a certain layer to glow which we do and we only want lines to glow so let's go ahead and add a new layer here and let's call this the lines layer let's then select online SEP segments and add it to that layer now we can go on to our main camera and on the glow layer will select nothing to deselect everything and then make sure to only select our lines layer you will also see that this doesn't make our line our glow right away and that's because we need to add a glow material to this line luckily we've already created the material we just need to go in here and select the right shader and the right shader is under MK glow selective and here we can now choose all the different shaders that allow us to create this selective glow effect and what you want to choose is coming going to completely depend on what you want to glow and how many settings you want I have found that sprites and then default works pretty well however we do need to include a glow texture for this to show up you can see if we're going to like to check a texture here it's actually not glowing yet and that's because of course we also okay let me just select none here we need to also make reference make sure to insert this material into our line segment so let's select our line segment let's go under materials and drag in our line purple there we go but you can see it's still not glowing and that's because we actually need to use a glow texture if I hit select here you can see if I choose one of these textures in my project it starts to work and it's going to mimic the different colors that are seen in this texture so you can actually create really cool and advanced glow effects using this texture but we just want a uniform glow and we want to be able to just simply tint it using the tint and color glow bearable so instead of using a custom texture let's just use a completely white texture and to do that we'll go into Photoshop and we'll create a simple white 2x2 squared let's all we need just a completely white block so let's go file new and here we'll just create a very simple let's make it 16 by 16 white background hit create and there we go let's that's all we need to have here we can then save this so save as and you can of course just search for this just white square you could also make it in any other program or you could download my project if you don't know how to get a white square yeah it's all you need so now we go to desktop projects and let's search for our project here we called it writer replica let's put this as white inside of the assets folder and yes you can't just save Photoshop files directly into unity and they will appear so there we go we have our white square and now if we go and select online purple material drag in our white square you can see that our entire line close up yay so now we can select a tint here I'm going to select kind of a purple tint and I'm going to tint it just a tiny bit and this is the actual line part however it's not currently really showing is it that's that's okay we can just go ahead and select a glow call and change this to a purple and drag that over and you can now see that we can make online color or our line glow with a specific color we can also control the power of that color in here if you want to control it for individual segments and you have a bunch of other settings if you're using a texture okay so now that we have adjusted our glow color we can adjust how we want our line to cooler separately and this is the primary reason why I wanted to use this shader instead of just applying a bloom to a colored line that's because applying a bloom doesn't necessarily allow us to control individually the color of a line and the color of our glow but here you can see I can actually tint my line completely white and then still have the glow so I'm just gonna have it almost white just a tiny bit of purple here so it's still really bright and I think that looks pretty cool I'm also going to go into my camera and for all of the line segments so under the MK glow free component I'm going to go ahead and maybe bump down the glow a bit so samples and iterations is just fine but I am going to go ahead and bump down the intensity a bit and you can definitely also play around with the spray here until you get something or the spread until you get something that you think looks nice so I think that looks pretty good and we'll just leave it as it's cool so now we've created a glowing line segment that we can edit inside of our editor let's go ahead and maybe just create another quick line segment here just to show you how easy it is so let's duplicate our current line segment let's go ahead and move this one over and let's go ahead and inside of our Bezier curve Collider here we'll hit reset oops something is happening here that we do not want to happen I think maybe the reason why is yeah okay so whenever we are moving line segments like this we actually want to go into our line render and make sure to disable use world space that will make it follow around our object locally so we can easily move them that's something I actually forgot to add to the to the extension to do that automatically so just make sure to do that manually I might go ahead and edit the extension before this it gets uploaded to YouTube so to the people of downloading this will automatically be set to false because of course we wanted to follow around our object here so now we can go ahead and maybe adjust this to suit the other one I'm actually going to quickly remove a few points here and just have this be a very tiny little segment and let's have it point kind of upwards like in my original level something like this looks pretty good and I just want to show you how easy it is to create a separate color here so I'm just going to go ahead and duplicate our material and let's call this one line green and let's select our second line segment and let's go ahead and adjust or change the material here to line green and this time we just want to go ahead and simply change the hue to green and do the same thing with the tint here change that to green as well and I actually want this to be a bit more saturated there we go so now we have both in a purple and a green segment awesome so now we're pretty much ready to add a car controller before we do that I just want to have a look inside of the twitchchat here everything is looking good that's awesome you guys are doing great see if there's any questions will this be on YouTube yes it will it will be on YouTube tomorrow evening and yeah I think we are we're ready to continue awesome so now we can go and add our actual car and I've gone ahead and created a simple sprite that looks a bit like the original it's called Ryder here you can of course use any sprite that you want and I'll make this available for download and I'm along with the github project so if you want to use it or this particular sprite yourself you can definitely do and right now let's just go ahead and drag this one in I think it's a big bit too big so I'm gonna adjust the pixels per unit on the on the acid in the project panel here to about 150 and let's hit apply that looks a bit better in terms of scale but on that we don't need to adjust any import settings we can just go and select our Rider and first we probably want to add some kind of Collider so let's create a polygon Collider 2d and I don't want this to be too sophisticated let's hit edit Collider and we can hold down control and click on points in order to remove them and I want to remove most of these as I want it to be very simple and then we can kind of sculpt out our car and the most important thing for me is that the car moves smoothly along the surface and this for me means that we are trying to avoid really ragged and harsh edges so that's more important than actually finding the shape of our car and I think this here looks pretty good because we have this very smooth curve in front of the car which should make sure that it doesn't get stuck too easily so now if we stop editing that we can go and add another component and this here is going to be the rigidbody 2d and this should make make it so that if we hit play our car actually falls to the ground and indeed it does awesome so now we of course want to go ahead and create some controls for our car but in order to do that we first need to set up a few physics settings in order for it to behave correctly and of course whenever it comes to physics settings in unity it can be really tough to get them right so I've gone ahead and done a bit of experimenting for you and I found that a mass of round five works pretty well in this case I've tried setting the linear drag to a bunch of different values but I found that round 0.3 makes for a fairly smooth riding experience I wanted quite a bit of angular drag actually three worked well for my controller and we can just leave the gravity scale at one I also make sure to say that set the collision detection to continuous I found that avoid quite a few bugs with collision if you're traveling quickly so those are kind of the settings that I've been using I don't apply any constraints or anything like that just a few settings in here and one pretty important thing is I also make sure to apply a physics material because right now if we hit play our car stands completely still even though he's kind of standing on a slope and I find it's pretty or a lot nicer if the rider and the line doesn't have any friction between them so if we go ahead and right click and create a physics material and let's call this the line or the rider physics mat and we select a rider here and drag this into our rigid bodies material start and then select a rider physics math we can change the friction and I'm just gonna set it to a straight zero so now our rider should just glide around on our line and as you can see he does this is nicely because we are imagining that our rider has actual wheels and if he has if he's standing on the slope he's Pro unless he's hitting the brakes he is definitely going to roll down it so that's pretty much the same as just putting him without wheel just as a normal surface but without any friction so yeah this way we don't actually have to create the wheels but we're kind of giving the impression that he is driving and now it's actually time to go ahead and create our actual controller so let's hit add component and let's create a car controller we're gonna select C sharp hit create an ad let's double click it to open it up in visual studio and I'm going to have another sip of water while that's doing it cool so what do we want to do here well first we want a way of knowing whether or not we're pressing down the mouse button to do that let's create a poll which will call move or is pressing Mouse whatever you want to call it I'm just gonna call it move and I'm gonna default it to false then we're going will create a callback method called on actually now let's do this differently let's create a update method and inside of our update method we're going to check if input dot get buttondown and you can choose any button see I'm just going to choose fire one which is going to default to the left mouse button so if you're pressing down the left mouse button we want to set move equal to true then on the other hand if input get button up so if we release fire one left mouse button so if we stop stop pressing our left mouse button we want to set move equal to false and we can actually see this working already if we save that and go inside unity now the the move variable is definitely set to private but if we go to the top right of our inspector and select debug we can see that our move variable actually appears so if we now hit play and start pressing we can see it turns on and if we then release it turns back off so yeah now we're keeping track of whether or not we need to move of course whether or not we need to move forward or rotate it's going to depend on whether or not we're currently standing on a surface but we'll figure that out in a moment let's start by just assuming that we always want to move forward to do that will create a void fixedupdate and remember the difference between update and fixed update is that update is used for getting input and fixed update is used for actually moving or controlling the physics of our car and the reason why is that update is called every time we draw a frame so a bunch of times a second update will be called and so it's nice for triggering input and fixed update is is called X amount of times a second so it's called called on a fixed update loop and update can have it and any amount of times per second and can vary by effective thousand you should really change a whole bunch but update fixed update will always be constant so that's why we use it for fixed physics updates so here we can check if move is equal to true well then we want to go ahead and move forwards and in order to do that we need a reference to a rigidbody so let's create a public rigidbody 2d and let's call it our B then if move is equal to two true we can set our Peter add force and here we can add a force in our cars forward direction so that is transform dot right because this is 2d so if we have a look here this here is forwards this here is up and this here is right so if you want our car to move forward in our 2d space we want it we want to use transform dot right which means the red error the red arrow so we can then multiply this transform done right with some kind of speed variable so let's go to the top here and create a a public float speed and set it equal to something like twenty by default we probably also want to multiply this with time dot fixed Delta time and that's because while fixed at the time or while fixed update always runs on a fixed time step this fixed time step is configurable it might not be the same for each system so that's why we multiply with time that fixed Delta time to make sure that no matter how we configure it and no matter what system we're on we always going to move at the same speed and finally I probably want to multiply with a round number like a hundred because the amount of force that we're adding if we multiply with time that fixed at the time which is normally pretty small it's going to be pretty miniscule unless we bump it up by about a factor hundred so that's why we multiply with a fairly large number here so we don't have to be ridiculous when setting the speed value and then finally we can change the force mode and we'll just said that II to force which I believe is also the default but it's nice to be explicit about that so now we should see that whenever we press down our left mouse button we're going to move our car forwards if we save this and go into unity and hit play we can test if that is true so it's playing here and I'm gonna press down my mouse button and we get an old reference exception what is this the reason why is of course we need to reference our rigid body in the inspector so let's change out of debug mode to make this less confusing and let's take our rigidbody component here and drag it into our RP slot now when we hit play we should be able to actually move forwards yay so now that we have our moving of the car in place we also want to be able to rotate when we are in the air however in order to do that we need to be able to see our car once it gets in the air and right now that's not kind of within our viewport so let's make our camera follow around our rider to do that will create another component and this is going to be our camera controller let's select C sharp hit create an ad and oops reload solution doubleclick it to open it up in Visual Studio and we're going to create a very very simple camera controller here first we need a reference to the target that we are tracking in our case our car or rider and we'll make this of type transform and call it target then inside of our late update function and this is another variant on the update update is called whenever the computer draws a frame fixed update is called whenever we should update physics so a fixed amount of times per second Update is the exact same as update but it's drawn after all of the other functions so after we do a movement after we update all of our game stuff and trigger input then we call late update and this is awesome for following around a car with a camera because we only want to move our camera once our car has moved when we've determined whether or not we need to move then actually move the car then we want to move the camera to follow it we don't want to move the camera then move the car and then jump to next frame that's just gonna make for a very jittery and weird behavior so that's why we use blade update and all we need to do here is simply set our position so transformed up position equally to our targets position but we probably want to kind of offset or camera a little bit so instead of setting an equal to target depth position directly let's go ahead and do a bit of calculation firstly let's create a public vector3 and this is going to be our offset that we can adjust inside of the inspector then we can go and create a nother vector3 in here which is going to be our new position for the camera let's set that equal to target up position plus the offset that we specify then of course we also want to go in and adjust new position dot Z to make sure that we don't change the Z offset of our camera since we probably just want to adjust that once which is before we play the game and not using these controls down here I think it's nice to just position at once and then and never change it again and also because we are using orthographic the Z is not really going to matter unless it goes to zero or above in other words we just want it to be pulled back further than the rest of our objects if we switch into the CMU here you can see that the camera can see all the objects on right until it intersects and then we can't see them anymore but it's not like this assuming we use the size instead to zoom with our camera all right so we just want to make sure that we don't change the Z and we do that by setting new position to the eco trend to transformed up or yeah transform dub position Z so just remain retaining the old Z position and then finally we can set transform top position equal to our new position let's say that lets going to unity let's it play and let's see if that works and of course it doesn't because again we need to set up this reference so we need to make sure to drag in our rider into the target slot and now when we play we should actually see it working so as you can see it snaps right to the position of a rider and I of course want to go ahead and offset our camera a bit so I'm gonna bump up the X here and also bump up the wire a bit something that like that looks a bit nicer I think so let's go ahead and maybe copy the settings of the component by rightclick going copy component let's stop playing and then right click paste component values and there we go we should now see that when we play the game again our camera snaps to this offset awesome so now we can actually start to play through our level and we get to the part where our rider is floating in the air this is where we can go ahead and rotate him so we want to be able to check is our car currently on ground is he currently touching a line because if it is if he is we want to move him if he's not we want to rotate him let's go to the top here and create another boolean called is grounded and will default that to false then we go to the bottom and let's create a callback method so Boyd on collision enter 2d and if we just autocomplete this it's going to fill out eight month of a bunch of information but we don't actually want to gather any information about what we hit we just want to know that we hit anything at a later point you probably want to check that what you've collided with is actually a line because if you add coins and stuff you don't want to have the car think that he's cool lining with the line when he's actually just picking up a coin stuff like that but right now all we have in here is lines so that should be just fine if not you can go ahead and set up layers you can go ahead and check for tags all that good stuff it should be fairly easy to do but we just want to go ahead and say that if we enter or on collision enter whenever we hit something we've hit a line and so we're currently grounded so we want to set is grounded equal to true and we want to do the exact opposite thing when we are leaving a collision so when we are no longer touching an object we're no longer touching a line and so we want to set is ground it to false in other words private void on collision except 2d and again we don't want to gather any information here but we do want to set is grounded to false and there we go just to check that this is working we can go and select our rider we can change from normal mode to debug mode I'm just waiting for the editor to compile here there we go and we should now see another variable here called is grounded if we hit play whenever we touch the ground this gets enabled and then as soon as we leave ground and go into the air we can see it gets disabled awesome so now we can use this through script down here whenever we are moving to check if is grounded well in that case we want to go ahead and add a force in the forwards direction that we are already doing if it's not so else we want to go ahead and add rotation so RP add and in terms of forces we call a rotational force on torque so we want to add torque and the amount of torque that we want to add is going to be dependent on a knod variable that we specify up here so this is going to be a public float rotation speed and we can maybe default that to something like let's do seven and again we're going to here let's see the amount of torque is going to be our rotation speed multiplied with time that fixed at a time multiply it with a hundred multi applied with speed and it's multiplied with speed first or in the it's in the same order and of course not speed but rotation speed there we go and we can of course also specify a force mode here but let's just said that to force again which is also the default so if we now save this and go into unity and hit play we should be able to actually rotate once we get in the air and the value might be off here I have no idea okay yeah so it definitely is let's go ahead and decrease the rotation speed to something like to see if that's working it might be that we shouldn't really multiply it with a hundred but with two instead to kind of even it up no I think that actually works really well with two so there we go a rotation speed of two and we can go ahead and change the default here as well so it doesn't bog out completely if we were to do this one more awesome that's actually I think I just realized that's all I wanted to show you guys in this video we can of course go ahead and add a few more line segments so we can go ahead and create another one of these purples purple ones here and move it over and we can definitely go in and switch back to normal mode so we can see all of our bit see a curve handles here and we can maybe add a bit on to this level just to make it a bit more exciting so let's make this a bit further here we can maybe make some kind of a steep hill here that we have to climb and then we can maybe end in another green line segment so take this nine segment here and I actually want to try and do something fun here and I want to make this physics enable so I basically want this to be rotated around its center whenever we jump onto it let's see if that works so in order to do that I want it to be or I want it to be centered around the R transform of the object because it's going to rotate around this point so we don't want it to rotate like this that's just gonna look weird let's take a lines here and move up to around this point so that we can imagine that it rotates around it something like this and then let's go ahead and move it down here and try to see how that works actually maybe going to even flip it a tiny bit like this and I think that's going to be pretty nice okay so you might have seen an error there yep I haven't really accounted for rotation on the script so instead of flipping it let's just go ahead and do it manually with the points like this sorry guys this is not a complete editor extension or anything I just really quickly modified this to or work for this tutorial and I think you can easily expand upon it if you want I just want to show you guys how cool this your curves are and the fact that you can actually do this but there are some really nice extensions on the earth asset store that should help you do more advanced stuff with with lines and Bezier curves so okay so now we actually have a bit more of an interesting level but let's try and go ahead and add physics to this line segment so in order to do that we need to add another component and we're going to add a rigidbody 2d let's make sure to make this dynamic it's also pump up the master around maybe a hundred and the same thing with the angular drag I know that's a very very big angular drag but we're also going to have quite a bit of force on the rider and I think it's actually going to work well we're also going to freeze it on the X&Y position and definitely not on the Z rotation because we only wanted to rotate and not move so for now I play I actually do believe that this should work so of course the first one here is not physics enabled but then the second one once we get this fine the level should actually yeah it rotates with a player hey that's super easy and it's something that the that the original Rider gaim takes advantage of quite a bit it often takes a chunk of the line and then makes it into a green line that is rotatable so that you can go you can drive through over that line onto a hoop and then back on to the green part it's something they do quite a bit and it's something that looks just really cool so now we can go ahead and add all kinds of fun physics stuff add coins add score counters go completely nuts I hope you guys will enjoy it and that's pretty much the end of the tutorial only with a bit of messing up I think I've blacked out and about at about 30 minutes in there but I think we made it so I hope you guys enjoyed the tutorial and now we're going to switch over to the the Q&A so let me just switch over here to Q&A chat mode there we go and you guys can go ahead and ask some questions I'm just gonna say real quick of course this is going to be uploaded to YouTube so if you're just joining in and mr. tutorial it is going to be on YouTube don't worry and I can see we're almost 400 viewers that's awesome guys so thanks to all the people who are tuning in and without further ado ask me some questions and I am going to attempt to answer them guys the Q&A here is going to be or is always pretty much anything if you have of course super technical questions are often hard to answer just right off the top of my head and it's also something that doesn't make for a very interesting Q&A but personal questions is fine semi technical questions are fine suggestions all that good stuff so first questions will you be Ludum dare a41 I really hope so alright I've already written it into my calendar and I'm really looking forward to the next one I'm dari so unless something stops me from being there I definitely will be so yeah I'm really I'm really hoping to to join what do we have to do when we want the lines in rainbow color if you want multiple colors over your line you can use the texture glow like I showed you before which allows you to change the glow of the line or using a texture that's pretty darn cool then you can just make a rainbow texture and it should actually make the glow rainbowcolored let's see what is the hardware for making a game I am don't understand the question I'm sorry how do you stay have you all the time drugs no kidding I'm not happy all the time guys but I am happy most of the time and that's probably because my job is very very fun and I have a lovely wife so how do you speak your name Espeon that's how and you're not gonna get me to say it again because I'm just gonna mess up my own name what about making a tour tutorial about stealth games so I do believe that unity already has a welfare Leo to turn out about creating a stealth game and I would definitely just recommend checking out that also I'm just gonna take my camera here and very quickly bump up the brightness a bit because I think it got a tiny bit Dawg so let me just do that there you go I can see you guys more clearly that's not you you can see me Mowgli I can see you just the same but hey how can I learn how to code my own scripts to make my own game well there are a bunch of different ways for you to learn it completely depends on how you prefer learning I learned mostly through YouTube tutorials so you're good start there turning in our live streams like this one definitely helps even though this is maybe more a bit towards intermediate uses since I go pretty quickly through the stuff but I do have a course on for complete beginners called how to make a video game definitely check that out and yeah just lots and lots of practice did you make your website yourself really coded yeah I did create the new practice website from scratch using our Jekyll Jekyll is a static site generator it's freaking awesome and it only requires you to know a bit of HTML CSS and a tiny bit of Cakery or JavaScript now I didn't use any JavaScript for the I don't think I used any JavaScript for the breakfast website but I did use a bunch of JavaScript for dev assets but yeah it's really really fun to make websites and whenever I do it I really love it I just haven't done it too much mobile controls in csharp that could actually be pretty fun to do however I do normally tend to stay from mobile since I want to cover subjects that apply to both mobile games and standard and stuff and console and all that I don't do console specific stuff well at least I haven't done that yet but maybe someday has got to be the day that I start doing that last time I'm asking why do you have rotation speed squared do I have it squared did I squared did I multiply it I'm sorry one moment let's go ahead and investigate let's see whoa and then I went infinite let's see here rotation speed oh yeah that shouldn't be the case I'm sorry that's probably why I had to decrease the number that's because I did squared so two times two is four and that's why I had to decrease it from seven to two to get around the same movement so thank you for solving that for me and the answer to your question is I shouldn't have so there we go we do get the same behavior now that that was actually one of the less bad errors in terms of creating or squaring out a variable because it only meant that once we said it it did behave just fine and linearly but yeah it shouldn't be squared and now it's fixed I'm sorry and we can go back to the Q&A so thanks for pointing that out cool so um yeah two plus two is four did I say eight I think it's at eight yeah it's four whatever you also saw that seven was a bit faster and actually maybe four is a better number but that's that's for you to play around with quick math do you know how to code in PHP I can I feel like I can read PHP fairly well I'm not that great with PHP syntax and so I don't feel comfortable in it but I feel like I could pick it up fairly quickly that being said I've heard that PHP can get pretty hairy in certain situations so I probably shouldn't say that but yeah I I don't feel comfortable writing it now I have written it a tiny bit which do a tutorial called how to make quests if you're just talking about ordinary RPG quests that's actually a pretty good idea and sounds pretty exciting I'll make sure to add it to the list do I know C or C++ that depends on what you mean by no I have written some C++ code and found it to be really fun and also sometimes very tricky I have also written a tiny bit of C code but it's not something that I feel nearly as comfortable in as say a csharp JavaScript or Java hello could you make a tutorial about Unreal Engine or native code I would love to make a tutorial on unreal at some point but I will have to brush it up my unreal skins skills beforehand and that's probably what kind of is holding me away from doing it right now it's just a time thing because while I do feel I can do quite a bit of stuff in unreal I don't feel comfortable enough teaching it before I get some more experience under my belt how to do a simple multiplayer just where I'm sorry I don't understand the question how to find a job this is not something that I'm going to be the best person to give advice about probably because I haven't actually ever had to apply to a job in the tech industry I've been pretty been pretty lucky there and practice has pretty much been my job since I I quit or since I finished up my education but I think from what I hear the primary thing is building a portfolio and getting lots of experience I know that's really annoying the best way to get a job is by having jobs but that is truly true so yeah recommendations building out a portfolio a strong portfolio and experience very very little education that I hear that doesn't matter too much anymore how old are you I am 20 years old how can we Clair play rotation to say this is too technical I'm sorry I'm not going to answer it right now will you make some tutorials on procedural generation especially around generating building details like trees and boulders attack I've created a few videos on procedural generation primarily on covering noise per the noise and terrain generation that sounds a bit more technical and something like something that would take longer time but I would definitely love to do more on procedural generation however if you do want to know more about procedural generation I suggest you check out sebastian lake he's just awesome and he has a lot of stuff on procedural stuff our generation can you make the tutorials of shrinking how can I make a tutorial on how I made shrinking planet I think that's what you're referring to maybe it depends on what part of the game I mean it did take me a total of 48 hours to make and so if I had to make tutorials on that we're explaining everything they would be insanely long so probably not but I might take a certain mechanic from it if there's something in particular that you're interested in but yeah could you show us how to make custom assets in blender or is there a youtube tutorial I do have a basic blender tutorial check it out not a lot of people know about it it's decent so go check out my blender tutorial if you want any tips for getting a good game dev internship in a triplea company nope I don't have any tips whatsoever I'm so sorry on your mmm okay okay rapid firing through these questions I should really take a breather here guys I'm trying to answer as many questions as possible which phone do you use I use a iPhone 6 I've actually never really had an Android so I just use iPhone I'll probably switch soon maybe if this one breaks I imagine picking up an Android but we'll see yeah don't quote me on that Franky's see you're all video thanks man can you make it a turn on how to make a chat and if you have please give me link I haven't made a tutorial on multiplayer adding in a lobby no I have not and I don't really plan on it right now but it sounds very interesting and like something I would want to do at some point where am i from I'm from Denmark I'm based in Copenhagen can you make a tutorial about AI enemies like dead cells not just like Mario's okay okay I know I'm probably not going to make a toriel series unsophisticated enemy AI now I haven't played dead cells but I imagine that they are pretty sophisticated if you want to create triple a quality AI with smells memory cutting techniques all that jazz you can go ahead and check out rain Indy which is a really good plugin for unity or AI solution so yeah check that out rain Indy I know the basics of csharp and I understand coding but I can't write code can you help me please this is just a matter of practice actually I I think everybody gets to a point where they kind of they've seen some basic tutorials they know what an if statement is they know that you can write code and you can press dot and it will access the different functions in a class they have kind of this vague idea of what a class is maybe and and what what functions can be used for but the syntax is just not there and you don't know all the functions that you have you're at your disposal simply you don't have knowledge of the API that unity uses I think everybody gets to that point and when you're there you're close you're really close from there it's just a matter of trying to write simple scripts on your own or taking other people's scripts and modifying them to suit your needs and once you've done that enough time it will just kind of start to float off the top of your head use the Unity API a bunch when I was at this point I actually went on vacation and I didn't have internet access when I had the downloaded version of unities documentation and so I was forced to kind of figure out some of these things on my own I couldn't just Google of the problem so i sat there looking through the documentation and tried a bunch of different things until I got the syntax right until I found the correct function that I needed to use and needed or set up the code in the right way so going from understanding code to being able to logically write it and get the syntax right and know all the function is a step but it's not the not the biggest step so yeah your clothes just keep going how to do is simple to play variables that you can read take from other computers use unit I have a tutorial on unity networking there are different tutorials online can you do a video about database integration with unity I'm not too good when it comes to databases it's not really my strength um so I probably aren't I am not the one to ask but I might do something at some point would you upload this live stream to your YouTube channel yes it will go up on YouTube I learned coding through you multiplayer tutorial hey that's awesome that's a pretty advanced tutorial to learn coding from so I'm really glad that you were able to use it do you know how to make a random level generator like which in the temple run yeah I do know how to create such a random generator it's actually the one in temple run is actually fairly simple if I remember it correctly because it's just a matter of instantiating in different prefabs so basically you're just chaining together prefabs that you create semi randomly just make a bunch of assets and choose from them from a list and then in certain cases you will have to eliminate certain possibilities because you don't want a right turn and then a left turn right after where they kind of intersect but you yeah you want it to do to create logical roads but still yeah I learn coding from school and from your brakes oh thanks oh thanks man I'm really good that I was able to help do it tutor series on making a 2d sandbox survival game like terraria no that's too many words in one sentence I would be 100 videos long but yeah start with some of the basic videos start with some of my 2d videos and then expand from there I think that should kind of get you going and then you can try and add more stuff to it on your own I want to thank you thank you with the unit tutorials that started my career now I just have to get old and be able to own a company that's awesome I'm glad I was able to help with those with just my first game when it's finished definitely send games to me on Twitter guys it's always fun to see what you guys are working on thanks so much for spending your time to teach us you're doing so great great guys you guys are making me blush taste of this too many compliments more questions this desk up there is I cannot take it you guys are too sweet we are tutorial please that would be awesome I still have to get my hands on your headset though I started C sharp and unity with you thank you thank you and yeah okay so guys um any secret portfolio tricks yeah try and make something visual just something that seems interesting to look at I mean I think the problem a lot of people run into with their portfolios is they think that well when someone goes to my portfolio they they're looking at all the stuff that I made not necessarily a hiring manager will usually just kind of look very quickly skim through what you've done and if nothing interesting catches their eye it's just going to discard it and so you need to make it pop you need to make it look interesting right away and then maybe they'll take a second look so yeah something visual always works and okay so find the Christians guys we're wrapping up very very soon when will be the next unity tips oh I I could actually go out and create another unity tips video soon that would be pretty fun I should add that to the list I'm 14 years old and I know csharp and Python should either in unity is it going to be effective in 2018 or later yes yes yes yes for a bunch of different technologies both became development also for science simulation education VR unity is pretty much at the center of it all right now so yeah learn unity it's awesome if you want to when we upload stream to YouTube tomorrow evening at 900 p.m. UTC I think can I call a method inside a method yes what is a rider rider is the game drag and drop tutorial yeah that could be interesting there's gonna be a unity update right where csharp will change not drastically I don't think there are going to be some some updates to how we write scripts yes with the new csharp drop system that it's going to expand upon it quite a bit but you can still write scripts in the same way as far as I understand so far where can I send you what I've made from your tutorials Twitter yeah pull stuff to me on Twitter that's awesome how do I learn in csharp keep going at it and I think guys can you make a video about making them an animation stuff I would love to at some point do you have any experience with the koto engine and if so would you make tutorials on it I have severe experience and if so yes it looks fun if you guys wanna meet you ha stone like simple game tutorial I have created a video recently where I show how to create cards in ha stone using scriptable objects that's probably as far as I'm going to go but if you want a particular mechanic definitely let me know and there we go that kind of wraps the questions for this live stream guys thank you so much for tuning in I had I have just had a lot of fun and another question is how long is my hair it goes to here so fairly long but I did cut it recently so it's it's not crazy anymore but we can maybe end on that let me just loosen this up and we can say thanks for watching guys I had a bunch of fun if you want to support the live stream and future tutorials and all the stuff that we're currently putting out I suggest you go to patron at patreon.com slash practice I'm just gonna put it inside of the twitch chat here there you go patreon.com slash Breck ease it's a way for you to donate a monthly amount of your choosing you can cancel it at any time and I offer some humble rewards in return people think it's the Jesus but it wasn't this but do I work in the black abyss no this is just the screen guys don't worry this is something behind it but yeah if you guys enjoyed the screen the stream or are enjoying the the content content definitely go to patreon and thank you so much to the people who are already already supporting over there it really means the world to us it's a huge part of our income and especially now that we are multiple people it's it's just really really awesome so thanks for supporting and thanks for tuning in guys I'll see you guys in the next video bye thanks to have the awesome patreon supporters who donated in December and a special thanks to Judah Manby Pheo infinity PBR euro Omer and soft tune Cybermen Derrick Eames Kirk Murr face Samara fine Peter die double tap 45 James P Dan Evans Thomas Wally Superman the great John Burkhart clock approaches Lotito Alex for kid ski SUNYAC obscene James Rogers Robert Boone Rob fan and Erasmus