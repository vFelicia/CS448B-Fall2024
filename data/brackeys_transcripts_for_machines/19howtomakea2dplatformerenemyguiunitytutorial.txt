thanks for tuning in at brakus hello everyone welcome to video number 19 in how to make it to the platform a course in today's video we're going to take a look at creating an enemy health bar but we're gonna do this by creating a fairly generic status indicator script so we're going to be able to expand onto this later such as adding an ammo display something maybe if we want a kind of manna all that stuff and also will hopefully be able to use this both for the enemy and for the player so what that should be pretty cool but before we get into it I just quickly want to mention that if you have any questions go to forum brackets to come and also and not many people know this break is actually has an apparel store so if you want some cool breccia Smerch or some I'm a developer tshirts there's also a write code one they come in many different shapes and forms and colors so if you think that's cool check it out and also a lot of people ask me how they can kind of help support brackets well one way is of course donating that's completely optional but links are in the description or if you want to get something cool out of it you can always buy a tshirt that's a percentage of what it costs also goes to me so that definitely helps out a lot cool so now that I've self promoted a little bit let's go ahead and open up unity and as you can see I'm currently using the dark skin but of course all the features that we're going to be using are available in unity personal Edition so yeah the first thing that we want to do here is to set up the UI for what we're going to be making so we kind of had so we have a reference so we can see what's changing and to do this I'll go into the scene view and select our alien spaceship and on him I'll rightclick on the UI and create a and image and you can see that it spawns in this huge canvas if you just selected and hit so what we'll do with this is first off we'll call this status indicator and we'll drag this under the alien spaceship then we'll change the render mode to world space so that we can parent it to our alien space alien spaceship and have it follow around and next up we are going to bump the width let's just reset the transform actually down here and let's make it a width of 100 and a height of 400 which should be default and next up we can change the scale so basically instead of just like making it really really small by just dragging in on this box and setting the width and height really low we want to change the scale because else we are not going to have any pixels to work with inside of this area we want a hundred five hundred pixels to work with at least when starting out and then simply scaling and those pixels down so basically we want to set this like zero point one so one one seven one and then we can just change to the scaling tool by hitting R and simply just scale it down even further something like that looks pretty good and now we can drag it up and maybe make it a bit smaller here and and for that I'm not going to be using the scale I only use the scale uniformly so that's very important okay so next up we can take our image and simply snap it to scale with our entire canvas and basically I just want to bring this down to make it look a bit more like a health bar and then we wanted to basically snap to the bottom and scale with its width and in order to do that we'll simply click this right here also because we want this to scale in kind of from the right here to the left we'll have to change our pivot point so you can either drag that over here in the middle to the left or you can simply change the values for it here so you can see the only thing that we need to change is some set the X here to zero and it will snap to the left century cool so now you can see that if we change oops that must be an error if we change the canvas here it scales and with it and it doesn't scale on the y axis cool so uh next up I think is a let's do some text also that displays our health so let's make this bar here green and then later maybe we can make it change color depending on how much health and we have left that's definitely something that I wanted you but I think right now we should just kind of get it to where we wanted and then later we can do that kind of tweaking that's also fun challenge if you look up unity gradients so and we'll just rename this to health bar and next up we'll make a text object and you'll notice that this starts out pretty big and with this we just want to place it on let's see at the top here and so that it goes from the left to the right and we want to scale with that but we want it to be kind of parented to the top here so therefore you can select this one cool and whoops what we can do now is simply take the whole status indicator and bring it down a bit we can also change the font size to something like 10 and then we'll change the text here to something like 100 out of 100 HP will change the color to completely white and we'll make this a bold text object next up we'll simply drag this down something like that and then we can again bump this down something like that looks fairly decent and you will notice right now that our health bar is rendering very it almost pixel perfect I mean it's it's very sharp on the edges but on the text object is currently almost blurred out it's very clear that this is not very high resolution but and the reason for this and I'll show you just we'll just call this health text the reason for this is if we go into the status indicator we currently have a very low dynamic pixels per unit so PPU pixels per unit is what kind of help that helps us define the resolution per unit that this object should be drawn with so the higher the number you put here on the more calculations the computer will have to do but at the same time the higher resolution we will get and you don't need to change this much in order for it to get drastically better you can see just from one to two it gets a whole lot better and for this I'll put mine all the way up to five that might be a bit too much but I think and then that's a pretty fine number to begin with so you can see that that's completely crisp and this might not look extremely nice on the recording because of how it kind of calculates pixels but I'll show you that it looks pretty fine when I play the game here so that's something you can mess around with cool so next up I maybe just want to bring this in just a tad so if you want to scale from the center you can simply hold down alt while dragging and it'll do that so I think we'll put this at 75 and 17 so if you want my exact numbers you can get them there cool so now that we kind of had have that in place I think it's time to go ahead and actually make this update via script so let's make a status indicator script and this is of course going to be of type C C sharp status indicator let's double click this and it will open up in Visual Studio and again if you want a tutorial on setting up visual studio to work nicely with unity I just recently made one of those so we are going to exclude using a system that collection but instead we're gonna use a system a unity engine Jud unity engine that UI cool and we're gonna set up some references here the first reference I want to keep these values private because I don't want them to be accessed by other scripts but at the same time I want them to show up in the unity editor so we can drag them in so a cool way to do this is simply write out private and then the type and that's gonna be a type rect transform so we can change the scale on that and we are just gonna call this healthbar rect or something like that I think that's gonna be fine and next up a private text object called health text and if we want these to actually show up we can use this attribute here called serialize field so that will make them show up in the editor even though they are private and that's of course and the exact same as writing this I just like to be explicit with that kind of stuff cool and next up we'll maybe do some checking if we have these components I think we are so inside of an awake statement here let's actually just make this a start statement for now at least we'll say if health bar rect is equal to null you complain a bit so debugged add large error and will say no health bar object referenced and this is from the status indicator and we'll just copy this and would you have text status indicator no health text object referenced cool so I don't want to return or anything I just want to easily be able to see this in the console awesome so next up we'll make a public void and this is going to set the health so assuming that we have these components I think we're just going to assume that every status indicator has a health but if not we can just simply have stuff like manna or ammo points again that doesn't necessarily need to be applied but we'll get into that so public void set health and what we want to do in here is basically we want to pass in a few things so the first one is the int max health or let's do the current one first sort of current and then int max and notice that I'm doing these underscores that's just to be very explicit about this being a a private variable that is only accessible within the scope of this method so I do that that a lot when when kind of showing that this is passed in as an argument are created inside the method that's up to you if you want to take on that naming convention it's fairly standard in in csharp cool so once we have that in here we can simply calculate out and this is going to be a floating point value we're going to calculate out kind of the percentage of our maximum health that we currently have and actually let's make that a number between zero and one so we'll just call this one value and again because I'm creating this inside the method and it won't be accessible out here I'm gonna do the underscore and we're gonna set this equal to the current health divided by max health and we'll make sure that we cast this into a float awesome next up what we can do is we can simply set our health by rect dot local scale I think yes local scale equal to a new vector3 and in here we're gonna do value that's going to be our X so that's going to be go between zero and one depending on how much health we have and then one and one we just want the others other parts to remain the same we could also make sure that if we've made some changes to the other parts if we kind of scale them I think right now we're just gonna do one F but we could also do something like this actually we're just gonna do these four cuts for orders sake cone so that's gonna change the scale of our health by and next up we just want to change our text so we're just going to do health text that text equals and then we'll put in the current amount of health then we'll do a plus sign because we want to do the the slash there and then the maximum health and then we'll do space HP something like that however we however you want to format this is completely up to you I know that this is currently hardcoded and there are better ways to do that but I think this will be more than fine for now I mean it's the game is not that complicated as of as of yet it ain't broken we're not gonna fix it Colm so let's save that and this script should actually be error free and it should actually be working but currently we don't have anything calling this set health method and that's what we are going to implement plan implement into our enemy script so first off let's just make sure to set up our health bar and our health text at a later point if you want do the changing of colors on the health bar what we would do is in here simply grab the image component get then change the color of that image component and set it equal to a gradient that you've created up here public gradient where the value you used to live through that gradient would be underscore value so if that makes any sense awesome if not we are probably gonna get into it I don't want to promise it because we have so much to do but I know that unity cookie I think they I believe they're I believe they're called no that's wrong it was nearly cookie it's cooking with unity they have a tutorial on doing that awesome so let's move on so let's dig into our alien spaceship and open up the enemy script here and we're gonna expand just a bit on this because this is a very simple way to do a custom class but I kind of want to set this up in a bit more usable fashion so basically currently we only have a health we don't have any value storing the maximum amount of health that we allowed to have so if we wanted to do some healing that wouldn't be possible and again if we want to show our maximum health that's not currently possible either so let's change this around a bit so inside of our enemies stats we'll do a public int called max health and we want default this to anything just yet then we'll also do another another public int and this is going to be called current health actually I want to change this to max health to be noncapital and the same with this current health but I also want to create a private int called underscore current health so don't quite think we've gone over getters and setters yet so getters and setters are basically a way to control how we how we go about changing the value of a variable and that's why we have I get part on what we do when we want to retrieve what is inside the variable and we have a set part which basically allows us to change how we change a value in a very alpha variable so basically inside of this current health what we do is instead of whoops just making a semicolon we open up some brackets on a new line call and in here will basically be changing this private integer that's gonna store the number that we want to store but we're gonna be accessing it through this public Gator Get Set variable so first off let's create a getter so when ever we want to get something get our current health from this private variable we'll simply return return that variable so get just returns our current health but when we want to set it we don't just want to set the variable we want to make sure that it is between zero and our max health this will make sure that we don't ever go get a negative health amount and that we never get healed or whatever we want to do above our max health amount so that's a super cool thing that we can do very easily by just using a by using this set keyword so if we just wanted to set our current health equal to whatever value that we wanted we would simply say that underscore current health equals value that's the standard getter and setter and you've might seen it you might have seen it before if you've looked at some longer a csharp scripts but what we want to do is basically we want to clamp this between two values so we are gonna do math dot clamp and we're gonna say the value that we want to clamp is called value that's like of the keyword that we use for the value that this variable is set equal to and then the minimum is going to be zero and the maximum is going to be our max health so this will ensure that every time we change our current health we're going to it's going to be clamped between zero and our maximum amount of health and for some reason I've made an error here of some kind so what's going on I'll just save this out out in a second and we'll see what's wrong but first we'll just change our damage enemy here this is going to be change to current health so whenever we want to access it or change it we use the nun underscore version because that's kind of our accessor kind of what we have to go through in order to get to our actual current health so if that's very confusing to you at the moment I get it just note that this is a very handy way to control values so let's just try and save this and see what's going on here cannot implicitly convert time float to int and that's because we put an F here and the rest is integer values so we'll just do that and I think that should be fine yeah we are using the float version of math that clamp we wanted to use the integer version and cool so now that we have that in place another thing I want to do with the enemy stats is I want to make sure that we've said I am current health equal to our max health at the very beginning of our game so first off let's set a default amount for our max health and let's simply do that up here for now we could make a class constructor but let's just put it there and then down here I want to make a method that will allow us to initialize such very so right now it's simply our current health later it might be the mana and current mana and all that stuff but basically I just want to have a public void here called in it that will take care of all those kinds of variables that will have to be set up at at compile time or at the beginning of run time so inside of this init method we're simply gonna set our current health equal to our max health and it's that easy if we wanted to have an opponent begin or start its life with only a percentage of our max health we could create another public method here called or another public variable of type float and we'll just call this maybe start percent health something like that and we're going to default it to 1f and then you can simply say that the current health equals max health health time start percent health or something like that so you can check off some of an employment an opponent's health inside the unity editor but for now we're just gonna go with this and then we're going to go into a start method and in here we are simply gonna set say that our stats dot we're simply gonna say it's that starting it and also up here instead of just creating that there I think we are gonna say in our start method that we want stats to be equal to a new enemy stats that way we have complete control over when when it will create an add object now I'm starting to doubt this actually let's do this that's let the editor take care of that cool so but we definitely want to in need it inside of the start method there are so many ways to do this kind of stuff because we are really just creating a lot of code to not get very much done but it's important once you get a a bit of a bigger game which is this is which this is becoming and that you do this stuff because it will really help limit errors later and also if you're working multiple people on a project this is a necessity because it really gives a lot more freedom to the level editors awesome so now that we are in knitting the stats we simply want a reference to our status indicators so we're gonna make a public status indicator and again I don't want this to be public I actually want it to be private but I want it to be accessible in unity so we're gonna make a private serialize field and it's gonna be of type status indicator and I'm just gonna do status indicator for the name here the non capital S and then in the start method we'll set status indicator or check if status indicator it's equal to no and here we could say that we want to print out a an error if it's equal to null or we could just make this an optional part and I think we're gonna do that so not every enemy or whatever is going to need a status indicator but it can have one if it wants so therefore we're gonna make a header up here and headers are a property draw and an attribute that will allow you to just type in something inside of the unity editor or inside of the inspector at what we are going to type here is just optional just mark that as meant as an optional feature so if we go down here you will be able to see that once this refreshes that we have a status indicator and that it currently says optional right above so that's a pretty nice way of structuring your inspectors so if static aiders indicator is not equal to null we want to set health and we want to say current health oops want to set stats that current health come as stats dot max health awesome and next up under the enemy here down below here after we kill it if we don't need to handle its health if we just kill it right away but we will if it doesn't die so down here we are simply gonna set the health the same way so we're just gonna check if it's secret to Nollan if it isn't we're gonna set the health there awesome I think that was pretty much everything we needed to do so now we can simply go into our stats here and for some reason that's defaulting to zero so there we go 90 folding two hundred and I will simply drag in the status indicator oops and now we can hit play and when we shoot this guy you can see his health going down until he dies so that was a lot of code for not much functionality but this is going to be so easy to build on top of later we can add a bunch of different functionality and I just wanted to kind of give you this cool playground where you can add a bunch of different cool Mechanics for your game because it's gonna be a symbol as just adding it into the enemy stats class and then just changing it or changing it with a method inside of the enemy and just making sure that you pass that on to a method on the status indicator so it's it's fairly simple to get gameplay mechanics and kind of this a database of values and the graphics to work together awesome so that was basically everything for this video I'm just gonna play around with this for a bit just show you how this is working and I guess I'll see you in the next video