thanks for tuning in at braies hello everyone and welcome to the 14th episode of how to make a 2d platformer in unity I hope you have had a Merry Christmas and a great New Year it's 2015 now and we're going to kick it off with enemy AI this is probably the uh most exciting tutorial we've had in some time and uh enemy AI can't be very difficult and hard to wrap your head around but I promise you we're going to be using some great tools to make the process easier and that are also very powerful for doing many kinds of AI these tools are free and uh what the tools don't provide I've made for you cool so as always I uh suggest you check out the 2D assets pack available at brack.com uh because if we open it up here uh I have the final scripts in here under the scripts folder and I've also made an enemy uh inside of the Sprites to the platformer here you see the alien spaceship it's uh nothing special uh he pretty tiny there but here he is and that's what we're going to be using as an enemy for now cool um also if we head over to Chrome here you can see that I've made a new Forum post on the forum. bra.com and uh in here I showcase wave incoming uh it's still a way uh work in progress but it's basically a game I made with a a good friend of mine uh in just about 48 Hours attending dream hack and uh I've made all of the code publicly available I'm just touching up on some bucks and implementing the final audio and uh you can see here all the code is here and you're free to use it I've made a license file which suggests how you should use it uh so check that out also I'm working on another a really cool project and I won't tell you too much but let's just say it's going up on the unity asset store cool so back to the tutorial if you have any questions go to The Forum and uh I I'm there many others are there waiting to answer your questions so what we're going to be using today for AI is a solution called AAR pathf finding there are many different pathf finding algorithms out there and um another really good one for Unity is uh the rain engine um but for Simplicity sake and also because I've just used it in wave incoming we are going to use the uh Asar pathf finding algorithm and that is freely available so let's head back to Chrome let's sear for search for AAR path finding unity and it's the first one that pops up here the oh I don't even want to try to pronounce that but you have the URL right there and we're going to click on that then we're going to go under download and you're simply going to download the newest free version uh free is going to be more than plenty for what we are doing here don't worry and uh you might want to stay out of the beta because there can be bucks so just download the new uh newest stable version here I'm using 3.5.2 and the version of unity I'm using is 4.6 now let's open up the uh ZIP file here you might want to extract that uh just to make sure that nothing goes wrong so I'm just going to show it in in a folder here if I can get it to open maybe not let's try that again under our uh downloads there we have it uh sh folder there it is right click extract all extract just going to think about it and here here we can simply navigate through our folder and double click on the unity package and it will start importing in unity make sure you have Unity open while you do this and then uh as you can see it's going to import all this stuff and it's it's quite scary just how much stuff it's going to import but it's very well written it's very well optimized and it's very well documented so there are plenty of stuff in here but most of it we're not going to be using and all of it belongs under the AAR pathfinding project folder so you won't get any weird stuff clouded around your project it's just all in the AAR P pathf finding project folder now let's hit import it's just going to think about it for SEC here so wait for Unity to import all of the assets there's some images in there and stuff that might take just a a couple of seconds here so while it does that uh we can maybe start organizing our project a bit because I think that our project panel here is getting a bit cluttered so before we get started let's right click hit create and then folder and let's call this one animation and let's drag in all of our animation files and animation controllers let's also make one for scripts where we can drag in all of our Scripts cool let's make one for materials you can of course organize this however you would like to so we're just going to drag all of our materials onto that then we can maybe do one for Sprites uh so our muscle flash that's prefab isn't it no that's a Sprite this is the prefab so make sure to grab the Sprite there you can also uh organize after um uh tags or uh categories or whatever you hear unities made a lot of of tools to help you do that but again just grab all of the Sprites here our blue background our environment map our whoops that shouldn't be right R didn't want to change anything there no okay so unit is behaving a bit weirdly here uh so I'm just going to drag them in one by one so let's take our asut Sprite sheet our blue background let's take our environment our muscle flash uh this is our player prefab I believe yes and uh this is a pistol prefab cool let's make a prefab folder also since we have so many prefabs now so prefabs and we can drag in our muscle flash pistol and player also the GM bullet Trail and spawn particles just drag them under there and uh I think we're going to wait with with an audio folder and all that we don't have much more cool so that was the boring part let's get started with some actual pathf finding here so what is necessary to get a star pathf finding to work well first of all I just want to show you that on their website they have this tab called documentation which will walk you through pretty much any feature in a star what you can also do is check out the get started page if you think that I'm moving at a wrong Pace or if that's something you don't quite get it's going to tell you many of the same things that I'm going to do today cool so what we're going to do here I'm just going to check my time okay so we at 9 Minutes in approximately cool so what we're going to do is we're going to create an empty object which is going to be like the master of our path finding so let's hit create empty or control shift n let's call this a St and move it to the top I like to keep all of the uh GM objects and um sort of um uh Global uh scripts at the top here uh so let's Z out the transform let's hit add component and what we're going to do is we're going to go under the uh newly added component uh category here called pathf finding and let's click the path finder and this has confused me a bit in the past because the path finding here is called Pathfinder but as a script it's called a star path so just know that it's Pathfinder but it's really called a star path what we are then going to do here is we are going to go into the scene View and we're going to go out of 2D mode we're going to hit F to focus on our empty game object then we can open the graphs Tab and we're going to create a quid graph there are many different ways of creating uh sort of um graphs that simulate where our enemy can walk so there uh one of the first steps to pathf finding is uh teaching the computer where we have obstacles and where it can actually work and one of the ways to do this is using a grid and another very common way especially for 3D environments is making what is called a nav mesh that stand for navigation mesh and it basically generates this 3D mesh uh sometimes it's a plane it's actually most of the time it's a plane um that that just shows where you can walk but instead we're simply going to make a grid graph which is just basically a bunch of points uh but just a bunch of way points that um are placed wherever you can walk and then some nonw walkable way points that are of course placed on obstacles or in holes or on um if you have any mountains that you can't work on top of and all of that so let's hit a uh let's create a grid graph and we can expand it here and you can see that it lays out all of these points but right now our grid graph is laid out on the wrong axis so what most beginners do here is they simply rotate the whole plane and you will notice that that just simply doesn't work so in just instead make sure the transform is zeroed and then go under the grid graph settings and you will see an option called rotation and we're going to rotate it uh 90 uh 90Â° on the xaxis which is basically positive 270 then what we also going to do you will see that these uh squares here don't update yet they will in a sec when we go down here and hit scan but first let's set some more settings so first uh we want to maybe expand this because this is currently very very small so let's make uh this number this number of nodes here which is basically the number of points that we can walk on let's make that let's start out with a 100 by 100 that should be plenty big uh for our current level and you can of course always expand onto this then uh we're going to keep the node size at around one and then we're going to Center this so make sure it's set in the center here and then do 0 0 0 and you can see that again the cubes don't update but we should navigate using the lines here then what we're going to do is we're going to make sure that down here uh we have the number of connections set to eight which means that we can move diagonally also and that gives a natural moving feel and then under the max climb uh you can see that the climb axis is currently set to Y and that is definitely not what we want because right now if the climb at AIS is set to Y it means that it uh our AI will think that it's walking upwards towards uh up uh towards a hill or something when it's really just going up on the screen here and that's not what we want if we want to make say flying AI then we want to na it to navigate freely on the X and Y and then be completely restricted on the Z so what we're going to do instead is we're going to set the climb axis to Z and set the max climb to zero cool then we're going to check use 2D physics because we're using the 2D colliders that comes with unity 4.6 you can of course uncheck this and use normal 3D colliders even with 2D Sprites I don't recommend it though because the 2D physics are pretty awesome then we're going to make sure that Collision testing is set to true and uh the collider type is not going to be capsu that will result in an error instead we're going to be using either Rays or spheres first I'm going to show you spheres and then I'm going to talk a bit about why rays are better for instance so uh let's start with the sphere Dam diameter of let's say two and uh now we can go down here and hit scan you can see that it creates this huge grid and uh all of the uh blue uh grid lines here rep represents the part of the area that we can actually walk on whoops I should really stop rotating that uh I'm simply going to rotate this back so 0 0 Z sorry here uh and then 90 again and we're going to hit scan again there we go so you can see we have all these different grids and uh grid lines and uh actually I'm going to bring this in this is way too many notes for now we're going to do 50 and 50 and Center it out again here that's better it's SC cool but currently our obstacles here our platforms and our player and nothing in the environment is preventing the enemy from moving there so now it can walk pretty much anywhere so what are we doing wrong well you notice that under the Collision uh testing tab we have this option called mask and that's currently set to nothing well that basically means that we are currently not including anything as being obstacles and here you can select different layers so let's say if we selected the player this is not what we want but we can do it for testing and then hit scan you can see that our player is now being treated as an obstacle and the enemy will not be able to move inside of these uh this area right here but again it's not really the player that we want to avoid that's actually going to be their target so what we're going to do instead is we are going to um create some layers for all of our obstacles so let's set this back to nothing Let's uh select what we want to be obstacles which is basically the platforms here let's go and layer hit add layer and we can clean up our layers a bit so we have the player we have the background we're going to set this to obstacle and then again select all of them and now change the layer to obstacle and now you will see that their box collider 2D will prevent uh enemies from moving here so when we generate the grid again this will actually affect the enemy movement um what we might want to do at some point is change these away from a box collider 2D because um a polygon collider of some sorts might be more accurate but for now we're just going to leave it as is you can do that on your own if you want to experiment so now let's head back on the da star object uh and we can go ahead and and scan this again and it's not working that's because we have to add the obstacle layer to our mask so hit scan and you will see that now the algorithm is working perfectly I really need to stop rotating this this is second time now so let's just try this one more time so 0 0 and 270 there and for some reason scan cool okay so I'm just going to change away from the rotation tool here because apparently I can't keep my hands off it cool so if we head into the game view here and enable g mode you can see that it's currently looking quite okay but if we zoom in you will notice that there's quite a gap between where uh we can stand and where they can walk so let's try and change this back to Ray and hit scan again it's much much closer now what method you prefer using really depends on the environment you're making and how long you want it to take for such a small grid like this is it pretty much won't matter performance wise uh because we're not going to be generating at runtime we're going to be generating beforehand but um if you have this huge scene there might be some variations there's plenty of documentation on this so if you're more Curious than just selecting R and hitting scan please go ahead and read up on that cool so now we actually have our navigation grid set up so we can uh uh close close down the tab here on the grid graph and I'm also going to click the ey here to disable the um the grid view then we can tab away and you can see that it has these red triangles where it cannot move now let's hit save because we've made such good progress and uh let's go ahead and create our enemy so this is a pretty uh good uh place for me to split this episode up so uh this was the nav ation part in the next one we going to be creating um the enemy script that is going to utilize everything we've set up here so I'm sorry I have to split this up but um the next episode is going to be uh just as awesome maybe even more awesome because then we are finally going to get something moving hopefully finally cool so thanks for watching and I'll see you in the next video oh