in this video we're going to implement items for our game as well as laying the foundation for our inventory system and if you haven't seen it already Sebastian did the previous video on implementing the player character so go to his channel and check that out other than that let's get into it so as you can see in the previous video sebes set up this nice player character let's create an item here that he can pick up let's go to the Hier key right click go 3D object and Cube this is going to be the temporary graphic for our object let's scale it down a bit and move it over let's also give this some more fancy material let's right click go create material let's just call this material item let's drag it onto there and change the tint to a say shiny yellow now it looks like something we want to pick up let's now select the cube and rename it to test item and let's now create a script that will allow us to pick this item up to do that we'll hit add component and we'll create a script called item pickup we of course select C and hit create an ad and now the thing about the script is that an item is an interactable and so we don't want to write all the code for focusing an item walking to it and interacting with it once again instead we'll simply derived from interactable which is the script we created in video 2 we can also delete our two methods and everything under system dark collections now without adding any code here if we just save this and select the item in unity we can see that we now have a radius and an interaction transform that's because we've now inherited all the values and methods inside of our interactable class now one thing that's pretty annoying about our interactable in its current state is that we get a no reference exception until we go ahead and drag in a transform I want to change this by just opening up the interactable going to the bottom where we drawing our Gizmo and in here I simply want to say that if interactable transform is equal to null well then that set interaction transform equal to our own transform this will just make sure that we don't get any errors in the inspector so if we now clear this and select our test item you can see it automatically selects our own one and now the radius is displaying but of course we do want to add a bit of extra code to our item pickup the first thing we need to do is Define what happens when we decide to inter act with your object and remember inside of our interactable script we created a virtual method for this exact purpose so all we need to do is simply go into our item pickup and override this method we'll write public override void and then interact if you use autocomplete it will automatically insert this base. interact call this means that it goes back into our interactable and executes all the code inside of our interact method we then add code before that or after that right now we only write out a message but I'm still going to leave this in here in case we want to add more later and after that we can go ahead and pick up the item so we'll call some kind of method here which we'll call pick up we'll then create this method so void pickup and in here we can start by writing out a message saying that we are picking up an item then we want to add our item to our inventory and then finally remove our game object from the scene so we'll just call destroy game object if we now save this go into unity and hit play you should see that when we right click to focus the item we will walk over to it and pick it up but we still need a way to define properties for our item currently there's not much to tweak here we want to give our item a name an icon later on with equipment we want to modify stats on our player so we need to Define some kind of item data object you could do that using some kind of data serialization format such as Json or XML or you could use a very very handy feature in unity called scriptable objects scriptable objects are basically custom assets that you can create inside of your project and then set properties for each object in our case we'll go ahead and create a c script called item this is going to act as the blueprint for all of our scriptable objects so if we now open this up we'll delete our two methods and our collection namespaces and then we want to derive not from mono Behavior because we don't want the script to sit on a game object instead we want to derive from scriptable object and now we need to think about what all of our items is going to need remember we're making a blueprint here so all of our items is going to need a name and we'll just default that to new item you'll see a green line under the name here that's because any object actually already has a property called name and so there's a conflict when we also create one called name you could go in here and put say item name but instead I'm just going to put a new here in front of the variable which means that we're going to be overwriting the old definition and using this one instead then we'll also want an icon that will show up in our inventory for that we'll create a public Sprite call it icon and set it equal to null by default and at some point Sebastian is going to add some nice equipment to our character when he does this he's going to equip our character with some default wear and when we replace that default wear we don't necessarily want it cluttering up our inventory so we'll just go in here and add a public bullan stating whether or not this is a default item and we'll just set this equal to false by default so now we've kind of sketched out what properties we want our item objects to have again later we'll add equipment types armor modifiers damage modif and so on but these values will be shared by all items but one thing we still need to do is tell Unity how we want to create new items this can be done super easily by using an attribute it's called the create asset menu here we can give our item a default file name we'll just set it equal to new item and a menu name this is where we're going to navigate in order to create our item we'll put ours under inventory item now if we save our script go into unity and then right click in our project panel go create we will see a new tab here called in inventory and under there we'll see an item if we press this a new object is created in our project panel this is our scriptable objects we can give this a name in the project I'm just going to call it test item and then we can fill out all of our variables let's call it the helmet of protection we'll just leave the icon blank for now and we don't want this to be a default item and we can now go ahead and create as many items here as we want in fact let's go ahead and create a folder for all of our items let's drag our test item into there so now all we need to do is link our test item with our item pickup script to do that let's open up item pickup in here let's create a public item and let's just call it item and now we can access all the values under that item if we write item dot we can see both the icon the default item and the name right here so instead of saying picking up item let's say picking up and then follow by the name of the item let's save that drag our test item into the item slot hit play and now when we pick up the item it's going to say interacting with test item and then picking up helmet of protection awesome so now we know what item we are picking up but currently we're just making it disappear what we really want to do is add it to some kind of inventory to do that let's create another C script let's call it inventory let's also create an empty game object in our scene reset the transform and call it say game manager let's then drag it to the top so we can always see it and here we want to add all of the scripts that control the General State of our game I'm going to add my inventory here but you could definitely also put it on the player let's open it up and we do want to delete our two methods but for this one we'll keep all the name spaces and that's because we want access to the list type because Central for any inventory is a list of items so let's create a public list of type item let's call this list items and set it equal to a new list of items then we can create a method for adding a new item let's go public void add and here we want to take in an item called say item and we then simply want to add this item to the items list to do that we go items do add and in here we put our item we also want to make a method called remove this is also going to take in an item and you guessed it this time we just want to go items. remove and then put in the item there are a few cases where we don't want to add an item remember how we created our is default item variable well this is where we want to take it into account we don't want to go ahead and add this item if it's a default item so in here we'll write if our item is not a default item well then we want to go ahead and add it to our inventory of course we also need to call these methods inside of our item pickup we've already said that this is where we want to add the item to the inventory but we need a reference to our inventory we could just go find object of type inventory and then call the add method on whatever we find but this is fairly taxing instead what we'll do is go into our inventory and here we'll create a very simple Singleton pattern now this is not a video dedicated to Singleton so we won't be making a true Singleton pattern in fact I'll just show you the easiest way all to get this working but hopefully you'll get the idea if you want to learn more about Singleton I'll have a link in the description the first thing we'll do is create a public static and this is why it becomes a bit weird we'll create a public static inventory that's why we're creating a variable with the same type as our class we'll call this variable the instance then we'll make an awake method and in here we'll set instance equal to this so basically what we're doing here is we're creating a static variable meaning a variable that's shared by all instances of a class and we're calling it instance then when starting the game we are setting the instance equal to this particular component that means that we always be able to access this particular inventory component by simply going inventory. instance it also means that you should only have one inventory at all times in fact let's go ahead and write if instance is not equal to null well then we want to warn ourselves because we've clearly done something wrong so let's go debug. warning saying more than one instance of inventory found and we then return out of this method now this piece of code can be pretty confusing to understand at first but it's something that you will see on so many different scripts especially scripts sitting on some kind of game manager and since this part of the code is not really related to the purpose of the class I like to hide it away at the top to do that we'll use a region we'll call this region the Singleton and then at the end here we'll use end region that just means that we can take this entire piece of code and collapse it it's always here so we know it's using a Singleton but we don't have to look at the actual code if we then save that and go into our item pickup now instead of using find object of type we can simply write inventory do instance and there we go we now have a reference to our inventory script so now we can call add on that script and the item that we want to add here is the item variable let's then save that go into unity and hit play and if we have a look at our inventory script it currently has no items if we then pick up this item it's going to say that that we have one item and the item is going to be our test item awesome so that's the very Foundation of our inventory but there's still some common things that any inventory should have the first thing is of course limited space let's go ahead and create a public integer called space and set it equal to say 20 slots then when trying to add a new item we'll check if items. count is greater than or equal to or space variable if it is well then we want to debug that log that we don't have enough room and then return out of the method and if we get past this if statement we do have enough room and so we want to add the item however this is currently going to lead to a bug because in the event that we don't have enough room we don't want to consume the item we want it to still sit in the scene but inside of our item pickup we destroy the game object regardless we try and add the item and whether it's successful or not it's still going to destroy it so what we'll do is go into our inventory and add a return type of B here we're going to return false if we didn't pick up the item and if we did we're going to return true now we can save this and not use it at all we don't have to worry about the return type but in the case of picking it up we definitely want to know whether or not we were successful so we'll create a bol here called was picked up and we'll set that equal to the result of our ad method we then check if the item was picked up and if it was we want to destroy our game object now if we go into unity and try decreasing our space to say two we then duplicate our test item a few times let's play and let's let's try and pick some of these up so the first time it gets added to our inventory the second time it does so as well but the third time it says picking up helmet of protection not enough room and as you can see it hasn't been added to our inventory and it's not disappeared from our scene if we were to go ahead and decrease the amount of items we have well now we can pick it up in the next video we're going to be displaying our inventory on screen we'll also allow you to manage it by removing items and be using the same interface for later equipping them but in order to update that UI we want to know when the inventory has changed in other words when have we added or removed an item to do that we'll go into the inventory and we'll create what is called a delegate a delegate is basically an event that you can subscribe different methods to when you then trigger the event all of the subscribed methods will be called we'll create a public delegate and you can actually return values in delegates as well we'll just write void though we'll call it on item changed then we want to open and close some parentheses and put a semicolon now we've defined our delicate type next we need to implement it to do that we create a public on item changed and we'll call this our on item changed callback now if you've never seen the delegate before this is a lot of weird syntax but this allows us to do some really great stuff now we can have different methods subscribe to this event we'll do that when creating our UI but we already know when we want to call it we of course want to do that when we add a new item so after adding a new item we'll go on item Chang call back. invoke this means that we are triggering the event and so we want our UI to update when doing this we want to make sure that we actually have some method subscrib to this call back if not we'll get an error so we'll just make sure to check if on item change call back is not equal to null and if it's not well then we can go ahead and call invoke we can just copy this code and paste it to the bottom of our remove function as well so now whenever something is changing on our inventory we triggering on item changed call back this is going to be super handy in the next episode and that's it the hardest part is actually done now and we're getting pretty close to being able to add all the cool stuff to our RPG so I hope you'll hang in there that's pretty much it for this video If you enjoyed it make sure to subscribe so you don't miss a future one the next video on adding UI to our inventory should be out next Wednesday so make sure to subscribe for that also remember you can download both the environment and player character of Dev assets and if you get stuck at any point you can download the project from GitHub both links are in the description other than that thanks for watching and I will see you in the next video thanks to all the awesome patreon supporters who donated in July and a special thanks to H huun Cole cabal Will goat yesper melson Thomas vley stone gamer cybor mummy Jason natto Derek Heir faal marifi Robert Bund and Peter lock if your name's not on the list I will make sure to include you in videos later this month and the next month as well thanks a lot guys