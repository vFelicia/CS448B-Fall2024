so it's the last video on gameplay in the RPG series at least for now congratulations if you've gone this far today we are going to be doing combat and after that it's really up to you Sebastian will still be doing some more videos on implementing graphics he'll be adding a cool enemy model and doing rectal effects and all that fun stuff but I've actually covered all the stuff that I wanted to cover which also means that if you've been following along this far you should have made some pretty cool games as well I would really like to see what you guys have made using this series so if you haven't already tweet me a link or a picture or a gif or something on Twitter at brakus tweet that would be so cool to see on that let's get into the final episode so first let's go to scripts and it's rightclick go create csharp script and let's create a script that will sit on both our player and our enemy called character combat let's then select that player an enemy and drag it on there now let's open up the script in Visual Studio and the first most essential thing we want to have in here is a public method for attacking so public void attack and this is going to take in a character stance which is going to be the stats of the target that we want to attack so that's called this target stats and now we can actually go straight in here and write Target stats dot take damage and then give it some amount of damage however the amount of damage that we want to do completely depends on the attacking characters stats so we also want a reference to this character stats to that let's create a private variable of type character stats let's call it my stats then inside of the start method let's set my stats equal to get component of type character stats of course we then have to make sure that any object with a character combat also has a character stat component attached I will do that by using require component up here type of character stats now down here instead of writing 20 we can go my stats damage get value and that's the very foundation of our character combat if we save that and go into unity we need to find the place where we trigger this code well we want that to happen whenever we interact with the enemy and remember the enemy component which derives from interactable has a method hold interact which is called whenever we interact with it and we've even inserted a comment here where we say attack the enemy let's open up the script and here we can now trigger an attack but to do that we need a reference to our player well here we can use the fact that in the previous video we created a player manager that always has a reference to the player so up here let's create a player manager call it player manager and in the start method we can set player manager equal to our player manager instance then when we decide to attack we can get a reference to the character combat on our player to do that we use player manager dot player and we then call get component of type character combat let's store this in another variable called character combat and we can just call this something like player combat then just to make sure that we are safe we are going to check if player combat is not equal to null in which case we can go ahead and attack so play a combat dot attack and here we need to specify the target stats for our player well that is of course going to be the enemy itself let's create another component of type character stats let's again call this my stats and in the start method we simply set my stats equal to get component of type character stats and just like we did in the last script we make sure to always have this component on the object now down here when we attack we simply want the player to attack my stats if we now save this and go into unity and hit play we should be able to right click on our enemy and a player will walk right up and start interacting and right away we can see that the enemy takes damage based on our players damage we go back here and equip say the helmet which I know gives a damage buff and then equip it we can see that we now do a greater amount of damage however we can actually spam this button quite a bit and as you can see if we keep doing that our enemy will die that's all fine and dandy but we probably want it cool down on our attack to do that let's open up our character combat and let's create a public float called attack speed let's just default this to one now here you get to set an attack speed for each individual character but since we already have characters that's implemented you can easily make attack speed influenced by the character stats that's something that a lot of games do but for the sake of simplicity I'm just gonna put it here then we can have a private float and we'll call this the attack cooldown this is going to default to zero then every frame so inside of update we want to reduce attack cooldown a tiny bit so we subtract by time.deltatime and when we then decide to attack we check if our attack cooldown has gone below zero and if it has we're ready to attack again so we can go ahead and call take damage on our target stats right after we attacked we also want to set our tech cooldown back so we'll set attack cooldown equal to 1 divided by our attack speed so the greater the attack speed the small did the cool down awesome if we were to save this now and go into unity and hit play we should see that we can still attack but if we spend this button now you can see it says interacting with enemy a lot but only every 1 second it's going to say enemy takes 2 damage so a system is working let's get rid of this annoying spam by opening this up in visual studio just commenting out this message so now no matter how fast I click it's only going to take damage every 1 second and we can adjust this for our player and our enemy independently but our enemy isn't attacking at the moment to change this let's go to our enemy and let's open up the enemy controller in here we've actually already specified the place where we want to attack the target to do that we first need a reference to the character combat sitting on our enemy so you guessed it we're going to go in here and create a character combat variable called say combat and then in the start we can set combat equal to get component of type character combat and then when we decide to attack we can go combat dot attack and again we need to give it a target stats for this we can use our target variable we instantly go target get component of type character stats and we can store this in a character stats variable called target stats just to be sure that we don't get any errors will check if target stats is not equal to null in which case we are ready to go ahead and attack and now we can input target stats into our attack method if we now save this go into unity and hit play we can then walk up to our enemy and once it gets close enough you will see it attacking every one second and if it keeps doing this long enough you can see that our health will finally reach zero and it's going to say player died but currently nothing happens that's because inside of our players stats we're not overriding the die method so here let's create a public override void called die we're called base that died and then we can go ahead and kill the player in some way this could be done by playing a player death animation followed by a game over screen you could pull up a prompt allowing the player to respawn for some penalty or you could simply restart the level in our case we're just going to restart the scene but you can really fill in anything you'd like here but I don't think restarting the scene makes a lot of sense inside our players stats method instead let's call a method on our player manager dot instance code say kill player now we can open up our player manager and here let's create a public void called kill player and all we are going to do here is reload the scene so we'll be using unity engine dot scene management and to load a new scene will go scene manager dot load scene and the scene that we want to load is the currently loaded scene so scene manager get active scene and now we have to do dot build index and close that off so now whenever the player dies it's going to call a method on the play manager called kill player and this method is then going to restart the scene we have serial delays or animation in here I'll leave that up to you to add now when we play get closer to our enemy I'm just gonna select him and bump up the damage so this won't take forever we can see that as soon as we get killed our level gets restarted and we're back to default you can also maybe see a slight bug with our lighting this is something that only happens in the editor but if it's annoying you a whole lot you can always go to the lining panel and disable autogenerate and then hit generate lighting now if we did play and get closer to our enemy and died once more you can see that our lighting States the same however you will have to make sure to go into a lighting panel and regenerate lighting every time you change something about your lighting or environment just keep that in mind I'm just going to it back to autogenerate so now our combat system is working there just a few things that we want to add in order to make it easier when we add combat animation I think the best thing is going to appreciate that one thing is under character combat we need to add an attack delay because currently our attack happens immediately and in reality when dealing with the tank animations you probably don't want to do damage until we reach the point in the animation where we actually do the slicing so let's create a quick coroutine that will allow us to delay or damage to do that we'll right ienumerator we call this do damage we'll take in a character stats just call this stats and it flowed with the delay then we'll wait X amount of seconds as specified by our delay so we'll write yield return new wait for seconds I will put in delay and now we are ready to do the damage so let's take our line up here where we call take damage and paste it down here and here it's not called target stats but just stats and then up here we can simply trigger the kuroh teen so we'll write start coroutine it's called do damage we put in our target stats and we can put in a delay of say one second or even better that's actually make this into a variable so let's create a public float attack delay and set this equal to something like point six by default we then take our attack delay and put it down here and then round off the line with a semicolon now when we save go into unity and hit play because we don't have a tag animations yet the change is going to be very subtle but you should see that when we now attack the enemy there's a slight delay finally when we create an animator controller we also want to notify it whenever we attack to do that let's create a simple callback method and we'll do this using a bit different syntax that we've done before this time we'll write public event system action and we'll call this action on attack now this is basically just a really quick and easy way to create a delicate with a return type of void so we don't return anything and with no arguments we also go through and create the delegate in the same way we've done previously but this is just a lot shorter and easier then down in our attack method will simply make sure to trigger this so if an attack is not equal to null well then we want to call attack and you can see how little syntax is required here and that should pretty much be it for our combat system I wish I had some kind of happy dance animation for this guy to play I think we need to spend Sebastian about that in the comments let's pretty much it for this video congratulations if you made it this far you've completed the entire gameplay part of this series and you are truly awesome thank you so much for following along through all of these videos I hope you enjoyed it as much as I did from here there's still a lot of stuff that you can add to your game I recommend checking out some of my other videos to see if they might make your game better I have one on creating a dialogue system which I know a lot of RPGs need or maybe one on adding audio if you want to create a larger and more interesting environment definitely check out the Mayan temple pack that we recently released on dev assets and just subscribe for more general unity goodness so thank you again so much for watching if you like this series and want to see similar content in the future you can always support me at patreon patreon is an awesome way for you to donate a monthly amount of your choosing it really helps keep us going if that sounds like something you want to do you can go to patreon.com/scishow I'm that thanks for watching and I will see you in the next video thanks of the awesome patreon supporters who donated in Arcis and especially thanks to hence often Derek hems Kirk Faison Merrifield yes / magazine James P psychic mommy Jason Lotito Erin Robert Bund who some Kazaa and Judah Minh if you want to become a patron yourself you can do so at patreon.com slash break ease thanks a lot guys