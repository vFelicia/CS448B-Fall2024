thanks for tuning in at braies then down here we going to check for a whole bunch bunch of things and I'm going to write this out first and then I'm going to explain it after so let's make the if statement we're going to do if cam. transform.position dox is larger than or equal to Ed Vis position uh right let's do that one first minus offset X and um can I get the and symbol Here There and has a right body is equal to false cool so what we're doing here is we are first off checking if the position of the camera is bigger than or equal to the uh Edge where the um where the element is visible so we this is where we're checking if B is bigger than or equal to a which is basically the same as checking for A and B but we are just inverting it uh so we're checking if B is bigger than or equal to a um minus our offset so that we don't get weird errors uh where we uh where it doesn't get to instantiated it before we it's too late and uh then we also checking if it already has a right body because if we've already been there and it's already instantiated something we don't want to instantiate something on top of it so so that's what we're doing here and then we're going to make an else statement before we write some Logic for it uh it's actually going to be an else if and this one is going to be pretty similar uh this is going to do the same for the left side so if if that's not the case we're going to do transform. position. X is less than or equal to so this time it's it's less than uh Edge visible position left plus offset X and has a left body is equal to false so here we're doing the exact same calculation but over here so we're checking if D has passed C and if we already have a bu there that's basically what we're doing so in the first if statement we're going to um we're going to call a function let's start out by making the function actually because this is where we get to instantiate our body so let's make a new function right below the uh update one we're going to do V make new Budd and then we are going to take a parameter so um I'm not sure I've shown you parameters in the last video I think I didn't and what a parameter is it's basically an a variable that you can pass over to the function so when we are calling the function we can say hey function you should do all of your logic but you should also remember what this variable is uh and this is going to be of a type int and we're just going to refer to it as right or left could also call it Direction but this is just easier so uh we're going to take in a right or left and it's basically just going to be a one or negative one value um and this is because we want to in invert uh the position if um it's either right or the left body we need to instantiate um yeah so what we're going to do now is we're going to first off calculate the new position for our body so we're going to make a vector 3 starring a position we're going to call this new position and we're going to equal it to a new Vector 3 open up parentheses and let's just put the semicolon there while we added we're going to write my transform. position. X so our current position plus the Sprite width um and then time it with our right or left so if uh right or left is equal to minus one it's going to instantiated on on the left side of our current object and if it's equ Al to one it's going to instantiate on the right side this way we don't need to do an actual if statement we can just have it um we can just have the computer calculated and then for the Y we're going to do my transform.position doy simle as that and the same for the Z so y transform. position oops position. Z and close it off so what we're doing here is we are calculating the new position for our new body and up here we are checking if uh we can uh see the edge of the element um and then calling make new buddy if we can and let's actually also just come and out make new body this is the function a function that creates a Budd on the side um required cool so now under the vector 3 new position we are going to write transform uh new actually let me write it out like this we're going to do instantiate so this is the actual spawning of our new body and inside of this instantiate function uh it takes three parameters the first one is a transform uh with what you want to to instantiate and that's just going to be basically a clone of what we've already instantiated so it's going to be a my transform it's just a clone of the object um then uh the next one is the vector three storing the position so that's just going to be a new position that's what we've just made and then a uh Quan storing the uh rotation so that's just going to be my transform. rotation that's all we need um and what we want to do is we want to be able to uh set the name of this set the parent of this uh do different uh things with this new object that we're instantiating with this new buddy so we're going to give store this new body in a variable we do this by just putting transform and then the name new body in front of it and setting it equal to uh the instantiation but one thing we need to do is we need to uh define a cast we need to cast this and that means that we are saying that this instantiating instantiation should be a transform it's not this is just def uh defining what the new body variable uh type is going to be we also need to Define what the instantiation type is going to be and we're doing this by writing else transform afterwards some people write it like this in parenthesis in front just transform uh but you know it's personal preference I just think that for beginners at least seeing the s in there um makes it easier to understand what we're doing simply saying that we should instantiate it as a transform and put it into a new body variable cool uh so let's just comment this out also for Good's sake so we are instantiating our new body and storing him in in a variable then right below this we're going to do an if statement where we will use our reverse scale so if reverse scale is equal to two so if the uh object is not tilable uh then we want to just do a a cool Nifty little trick which is take the new body uh local scale so just the scale uh or the size of the new body uh we want to set this to a new Vector 3 scales are stored just like positional values as a vector 3 and we want to set this to newbody do local scale. X time minus1 so we want to invert the um the X size of our new body and then comma one comma 1 we could also do new body. Locale doy new body. Locale doz but that's not something we're going to change right away um actually I changed my mind let's just future proof this and do newbody dot local scale do y comma new bu. local scale doz whenever you don't do something like this you always just end up regretting it anyway so cool um so that's going to allow uh us to invert the size of our different Mountain which which will mean that they will perfectly Loop because I'm going to show you this if we just take this mountains blue and duplicate it and move it over we can see that um the seam here where tiles looks yeah just plain stupid but if we take the scale here and invert it right right now it's minus one so if we make this one you can see that it will almost seamlessly uh repeat and of course you can see that it's it's tiling here that it's repeating this way but it's much better than an ugly seam and when it's just in the background you rarely notice so that's a good alternative to making it tilable which can be a pain cool so enough script under the if reverse scale I'm just going to comment this out uh if not tilable let's reverse the X size of our object to make it uh to get rid of ugly seams uh right below this we are going to write new budy do parent equals my transform. parent in a sec we are going to uh parent these objects uh to some empty game objects because we're going to have a lot of uh foreground dirt once the player progresses and we don't want this to fill up the Hier key so we just want to make sure that if we parent the first one the rest are also going to be parented and that's what we're doing here we're setting the parent of the new body to the same parent as the current one then we're going to do an if statement and I promise you we are done pretty soon um we are getting closer to the end here I'm pretty sure that's a song so oh wow we're almost half an hour in uh cool so let's uh do this quickly we're going to do an if statement we going to check uh right or left if it's bigger than zero then we want to here we want to uh do new body. get component uh of type tiles or no tiling was tiling and we want to set has a left body to true so the reason why we're doing this is because if um we instantiating a a body over here uh we need that body to realize that it always already has a body on its right and if we instantiating a body over here we needed to realize that it already has one on its left so that's what we doing so if right or left is uh bigger than zero that means that we have instantiated one over here so we need to tell that new body that it has a left body um there so it has a body on its left and if it's not bigger than z z that means that we've instantiated one uh to the whoops to the left of our um of our ground and then we need to say new bu. get component tiling that has a right body equals true wow okay so that was most of our logic now we just just need to fill out the F statements so uh in here we want to call make a new body and we're going to send over the value one because we want it on the right and then we're going to set the has a right body to true in here we're going to do make a new body and pass it the value minus one and we're going to set the has a left body to two that was it let's see if we have any errors we actually don't that's amazing okay so let's try and hit uh play right now it's only going to work for the foreground dirt uh let's just go into 2D mode here and let's um let's just split this view so we can um see everything that's going on you can see right now that uh the camera is uh really really wide so right when we hit play it should create some uh new foreground dirt for us and we should be able to see this in the scam view also so let's try and hit play and indeed it has created a lot of new uh dirt for us which is just what we wanted and we can even try this if we take our player here and let's just remove his gravity and let's bump up his speed to maybe 50 so we can quickly move over here and and see what's going on oops uh looks like we have a platform in our way there so let's try this again to see if this is working we can see that it automatically instantiates new prefabs as we are going so that's really awesome and for some reason the platform is currently following us what's going on here have our cented the platform yeah okay so I dragged it in um for some reason cool so now the uh the tiling should be working and we can go ahead and add this to our other elements so that let's select both the background mountains blue and purple let's drag in the tiling and let's make sure to select reverse scale because here we want it to reverse and now those elements are going to Loop also so now we can just uh explore an infinite World and we will never notice that it's actually only three elements we're using that was a long run Okay cool so thank you for watching and uh yeah we still have a lot of exciting stuff to do so yeah thanks for watching and I'll see you in the next video he