thanks for tuning in at brakus hello everyone num will come to video number 12 and make a game a cool series on making a video game in unity today we have a bunch of things to do so here's the todo list we have to fix a bunch of things just tweak some settings and we're going to add some cool visuals so I've made a model and some edit some normal Maps so we're going to talk about all that this video might be pretty long but we're just gonna have added and if it gets too much I'll split it up into parts but before we get started I want to quickly plug something I've made because a lot of people always ask me well you have a donate function but I don't have any mind money and I want to support brackets so what can I do and to help you support me what I've done is I've made a wallpaper pack like the one you see here and you can download them at breaky Starcom slash wallpapers if you want to spread the word about braggy so just plain showoff and there are a lot of cool wallpapers here you can see some of them here and you can download all of the HD versions so please go ahead and do that and set them as your desktop background I'm sure it will help spread the word so cool now that we have the introduction out of the way let's go ahead and open up a unity so first thing on our list is the ball control script and this is because we have some kind of clunky logic in there that I just want to clean up in the last video I went ahead and did something that was way more difficult than it had to be and that was because I was experiencing some problems with the on collision enter function but those problems are fixed now so we can go ahead and clean up the script cried a bit so first thing to do is we want to get rid of all of this play once umm no another one yeah that one too so that yeah first off that's clean now the audio I think that'd be best so we can just get it rid of this play once variable because instead of doing all this play once checking we can go ahead and and use the on collision entry so delete the variable delete all the places that it's used also the play ones true function so delete that delete the function itself down here and delete the if statement here and there we should be good to go and now we take all of this audio logic here and we just cut it so control X or command X if you're on a Mac and then we make another function call function on collision enter and we open up some brackets and in here we'll just copy all of this and if you select all of it and do shift tab you can move everything backwards so now this will just be much simpler we don't need to call all kinds of different functions it will simply play the sound whenever it collides with them with something cool now in the on collision stay we are gonna change this because on collision stay is not always that reliable and the problem right now with jumping is that if we for example let's say if we go into unity here and hit whoops oh we I forgot oh yeah so there is to play once we need to delete that also so just delete every trace there is left of the play ones variable we don't need it but if we go in now and hit play and we jump up to a side so I might not be able to hit this but if we just collide with the side of the ground we're able to jump again like this and that's not really something we want we want to be make sure that our player stands on the ground when he's able to jump so good way to do this and this is also pretty easy is just to delete this function on collisions day delete the is falling variable again delete all traces and the variable up here and instead of that let's make a new variable so we're going to call this dist to ground so that's for distance to ground and it's just going to be of type float so it's just going to be a number with decimals and this how we're going to declare that in the function start so let's make a function start here and instead of this we're going to write dist to ground equals Collider bounds dot extends dot y so basically what we're doing here is we are getting the distance from the center of our object to the outer boundaries of our Collider and this way we can check if we by sending out a array by sending out a line downwards we can check if this line hits something within or over the hour distance to the ground so we can basically say how far are we from the ground and so therefore determine if we're standing on it so if that all sounded too complicated I'm sorry just follow along here and it might make sense in that in a bit so we're just going to say here that we are getting the distance from the center to the ground that's what we're doing there cool so let's go ahead and make a separate function down here and let's call this function is grounded so this function is something we want to call whenever we are checking if if we are standing on the ground so just close off the parentheses and then do of type boolean so that's what we're going to return so that will allow us to check if we are grounded by calling this function and then let's open up the brackets here and then we want to write what we are going to return so just write which n and then we're going to do physics that raycast and then transform that position whoops that's a small T transform dot position comma minus vector three dot up so we're just going to shoot downwards that's why we have the minus comma this to ground and then we're just going to do plus something small just like zero point one because then we are going to make sure that we accounting stuff like rounding errors and such so we're just going to make sure that it will it will actually return the right value so cool basically what we're going to do we are doing here and I know it looks pretty weird but all you need to understand is that we are making a function called is grounded and we can call this to check if we are standing on the ground and what we're doing is we are sending a line down from the center of our ball so if I just browse back into unity here we are sending a line from the center here and then down and just checking if we if whatever it hits is inside of the boundary here so that's not simply all we're doing and so if it is it will return true and if it's not it will return nothing so what we can do is up here instead of and is falling is equal to false we can simply say and this grounded like this and then to parentheses and that's it so now when we go in hit play we can see that it working it's working just like before but now when we hit the sides and stuff we are not going to be able to jump and it's just a wall better practice to do it this way cool so now that we've cleaned that up I hope it wasn't too confusing but it's just a good way to do it and I just wanted to show you the the correct way of doing things per se so if we're just going to write let's say a little description here we're just going to check if we are on the ground return true if we are else return null cool so what we can do now is we can go ahead and find the next thing on our list so here yeah so next is the ball scale I just think that our ball here is a little bit too small when we get play it's just pretty small on the screen and this is a matter of preference but I would just like to bump it up to something like zero point 3 comma 0.3 0.3 so and now we might fall through now we are actually we didn't but I'm just going to move it up a bit so we are sure if never falling through the ground and yeah I just think that looks a little cooler and and that was basically it so that was a fast one next up is that we're going to apply new materials now the material we are using right now let's just go ahead and find it for a ball this the ball a wood and there's nothing wrong with this material it's just a simple diffuse material and of course we are using a diffuse because if we use the specular we would get these glowing effects and that not that doesn't really appear or in wood what is very diffused so we are using the right shader but we are only using one image and that's the normal color map or diffuse map but what you can do for added realism is you can use multiple images and for example you can use what is called a normal map and that's basically the same image but with different colors that tells the computer what is high and what is low so it will help light bounce off the object in a more realistic way because right now light bounces off the same way no matter where on the object but you know there are some things that are higher and something that are lower on this image so if we convert this into some data the computer can more realistically calculate lighting so what we can do is we can add this normal map and it's something that you can generate with a bunch of different programs I've gone ahead and made some in Photoshop here using Nvidia invidious tool the normal map filter so you can go ahead and download that if you're using Photoshop there are also some free alternatives for or if you want to generate some really easily you can buy a plugin like crazy bump or in do2 if I'm not mistaking something like that but just go ahead and write whatever solution you're using and there will be a guide showing you how to make these normal Maps but I of course generated some force so if we go into the Mac assets and these of course available at brackets calm we can go under the textures and now there is both the medieval bricks and a medieval bricks normal and so also one for the rough wood so let's just go ahead and import both these at the same time import them into unity and let's go ahead and apply this so first off let's find the material here on the ball the ball would and instead of diffuse we're going to change it to bumped diffuse so that's going to take in a normal map now you can see there's an extra slot and you need to make sure that the tiling on these are the exact same so I've already gone ahead and set the tiling to the same if they're not things are going to look very weird so just make sure that they're the same cool and now we can drag in our rough wood texture and you can see that right now it looks really weird and that's because our texture is not marked as a normal map and it will also tell us this down here so you can either hit fixed now which we are going to do I'll go into the rough wood and change the texture type to normal map but let's just take it fixed now and unity will do it for us so now we can see that light bounces off a little more realistically especially down here in the shadowed parts and you can go ahead and change this on and off if you want to see the effect on or off and how I'm sorry um how effective this method is depends on how you make your nominal map so you don't want it to be too apparent but it's I mean it's a matter of preference and I've generated this to be pretty subtle but let's just change it to diffuse and you can see things are a lot more smooth and if we change the back light is a little more realistic cool so now that we have that done let's continue to the next part so we're also going to add the medieval bricks but we are going to add them to the new ground model I made so that's next point that's the new ground model so again if we go under the mag assets and then go under models we can see that we have a model here called the platform and we have this in both the FBX version and a blender version so unless you have know what Blender is and have it installed we can just simply import the FBX version if you are familiar with blender and maybe want to make some changes I've just included it so you can play around with play around with the file basically how I made this and I'm going to very quickly show you this in blender just because it's so easy is first off when you open up you delete the camera and the Sun then you take the cube you go into edit mode by hitting tap then you scale it by pressing X s and then Y to only scale on the y axis drag it out and click then scale and then that to scale it down on this set axis here and then what we can do is now that we have the overall shape we can go to the right hand side under the massive fire panel hit add modifier then bevel and this will give it these cool rounded edges but we're just going to bump down the with a bit to something like that and then we're going to set the shading over in the left hand side to smooth then add another modifier called edge split and then apply both modifiers from the top to the button button there and then the last thing you want to do is you want to unwrap the UVs and we can do this without adding any seams because the model is so simple so simply go into edit mode and hit you and then unwrap and now we can add a seamless texture so that was basically how I made it and I just wanted to really quickly walk you through it so you know the different steps awesome so let's just import the FBX version here so let's just maybe we should make a separate folder for this yeah that will be pretty good I think so let's make a folder called models and inside of this we are just going to import the FBX click and drag and there it is you're going to change the scale factor to 1 and then we are going to disable import materials and yeah that should be pretty good everything looks nice if you're going to generate a light map you need to check the generate light map UVs but we're not going to do that and we're going to add colliders ourselves so hit apply under the rig we want to set this to none and hit apply and under the animations that will be disabled when you set the rig to none so now we can go ahead and drag this into our scene and you can see that it already looks really nice so what we can go ahead and do is we can make a material for it so let's disable the other ground here let's just delete that so we can work with this let's position it correctly something like there looks pretty good and what we can do is we can go ahead and find our material our ground bricks let's also delete the other grounds here so just get rid of all of them and then let's just drag the ground bricks on here but as you can see this the texture is pretty stretched and that's because our tiling is currently at 5 on the X and 0.5 on the Y so we're just going to make that one 1 but now you can see that the texture is way too big so instead let's do something like 5 comma 5 that should give the it the effect you're looking for yeah that looks pretty good and then we can go ahead and change this into a pumps diffuse so let's now find the normal map and drag it in here hit fix now and we can see that this looks really cool so now that our ground looks much better we can delete the old ground prefab and drag the new platform interpret fab here so we can distribute it all over our scene making the game a lot more fun to play so let's just duplicate this move it over just going to quickly make a few copies here and and we'll call it that see we could maybe do something like this just make sure that they all have the same set value and if you forgot to change it you can just select all of them and and input zero so there this looks pretty cool so let's go ahead and hit play and what shot whoa what happens so of course we need to add a Collider and this is where it gets really great that we made it into a prefab because now we can just select one of them hit add component physics box Collider and then everything looks nice so we can just hit apply and all of them are going to have box colliders so now when we add play we're not going to fall to our death we are going to be able to play this and everything works and this is actually quite fun so of course you should do something more exciting with your level that I have here but it's a start and it's just to show you the overall principles cool so that was pretty much it for this video we're just going to wait with the last thing here the music reset fix it's not that important and yeah we are running out of time so that's pretty much it let's just for the last thing let's make the GM object in to a prefab by dragging it down here that's just something that has been bothering me a bit so yeah that's it for this video thanks for watching and I'll see you in the next video