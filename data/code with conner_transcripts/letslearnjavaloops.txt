00:01 - [Music]
00:05 - all right we're going to be exploring
00:07 - loops primarily for loops while loops
00:09 - and do while loops let's just go over
00:12 - some syntax and talk about some issues
00:14 - start with a for loop so four bracket
00:16 - parenthesis
00:19 - zero so this is a temporary variable i'm
00:21 - creating that's why i'm declaring it
00:23 - and i'm naming it i and i'm initializing
00:25 - it zero you could use an existing
00:27 - variable in your code but typically in a
00:28 - loop we want a self-contained period the
00:31 - nice thing is that variable only exists
00:33 - inside this loop because it's created
00:34 - there
00:35 - so then we create a condition to run so
00:37 - this is a conditional statement has to
00:39 - evaluate true or false that will tell us
00:41 - whether or not the loop should run this
00:42 - time around and we end with an area
00:45 - each of those three statements are
00:46 - separated by
00:48 - uh semicolon we open it up so this says
00:50 - for a new integer called i that
00:52 - initializes to zero
00:53 - as long as i is less than 10 go ahead
00:56 - and run the loop and then when done
00:57 - running the loop iterate
01:00 - so this should print 0
01:03 - iterate to 1 check 1 is less than 10
01:06 - good prints 1 iterates to 2 checks
01:10 - prints 2
01:11 - three
01:12 - check
01:13 - print iterate check print it or a check
01:15 - print when it prints nine
01:17 - it's going to come here it's going to
01:18 - iterate to 10 it's going to jump up here
01:20 - it's going to say 10 is not less than 10
01:22 - that's false so we will not run the code
01:24 - in the loop it will instead jump to the
01:27 - n bracket and begin the rest of your
01:28 - program so this should print zero to
01:30 - nine
01:32 - your iterator is also very flexible it
01:34 - can be a full mathematical equation
01:36 - so you could do lab i
01:38 - on a equals
01:40 - three for example and have it jump by
01:42 - three each time
01:44 - you can do a decrement so i minus minus
01:48 - now that won't work in our current setup
01:49 - so i'd have to change my initialization
01:52 - in my condition
01:53 - so if i started 10 i say as long as it's
01:55 - bigger than zero
01:57 - do a decrement that should go backwards
02:00 - just like that
02:01 - okay so there's lots of ways that you
02:03 - can set these up in terms of this can be
02:05 - any boolean statement and this can be
02:07 - any increment decrement or full
02:09 - mathematical equation that affects your
02:11 - iterator
02:12 - okay
02:13 - and then inside obviously you can have
02:14 - all kinds of code that can use the index
02:16 - or not use the index
02:18 - inside the loop
02:19 - cool so for loops are great when you
02:21 - have fixed execution numbers so you have
02:23 - a variable number or you know how many
02:25 - times you want to execute remember this
02:26 - doesn't have to be 10 this could be a
02:28 - variable
02:29 - right
02:31 - and then up here you could have
02:38 - maybe that number comes from a user or
02:39 - it comes from
02:40 - a method or whatever so there's some
02:42 - flexibility there but typically for
02:44 - loops their power comes in fixed
02:46 - execution so when we know how many times
02:49 - you want it to execute
02:51 - you can also do um
02:53 - tested
02:54 - for loops as well so
02:56 - i less than zero our i equals zero i
02:58 - less than five i plus plus and then
03:01 - inside i'll do four
03:03 - j equals zero j less than five
03:06 - j plus plus
03:08 - so i'm going to do system.edu
03:12 - the print line
03:14 - i equals
03:16 - plus
03:24 - we'll get to see those i and j values as
03:27 - it runs
03:28 - so if we run
03:31 - what we'll that is i stays zero for five
03:34 - executions as j cycles from zero to four
03:37 - and then i stays one as j cycle so the
03:40 - inner loop completes its full loop
03:43 - over and over and over and over
03:47 - for each time that the i value changes
03:50 - so when i is zero
03:52 - it's going to run this entire loop
03:54 - then
03:55 - when that loop fails this ends this
03:58 - ends which means i iterates and now the
04:02 - whole thing runs again
04:03 - and then ends ends i iterates and the
04:06 - whole thing runs again so you can create
04:08 - these neat little nested loops in here
04:10 - let's talk about while loops so a while
04:12 - loop is great for variable execution so
04:16 - a while loop syntax basically looks like
04:18 - this while
04:20 - conditional
04:21 - basically it just says as long as this
04:23 - condition is true
04:25 - keep running the code
04:32 - now you can do
04:33 - funky stuff
04:35 - like
04:37 - this
04:38 - some programmers love the wild true loot
04:41 - so while true loop will never end
04:43 - okay
04:43 - it will just run forever and it'll crash
04:46 - uh your system eventually or your
04:47 - program eventually it's not the ideal
04:49 - way to do things some people like this
04:51 - because then you just control with
04:52 - breaks
04:53 - so i could have something like
04:56 - integer before my while loop
04:59 - so
05:01 - i zero
05:04 - and then i could do say
05:06 - if
05:08 - i is greater than
05:10 - uh m
05:12 - [Music]
05:13 - right
05:16 - else
05:17 - [Music]
05:22 - i
05:30 - so we are manually doing the iteration
05:33 - now but i could do something like this
05:35 - this is going to run essentially the
05:36 - same way it's going to go 0 all the way
05:37 - up to 10.
05:38 - if i run that
05:40 - zero all the way up to 10.
05:42 - so this is just me taking manual control
05:44 - of it using a break statement break will
05:46 - break out of the kind of the closest
05:48 - loop structure
05:50 - so it's great for things like that but
05:53 - while loops typically are going to have
05:55 - something in it like while i is less
05:57 - than
05:58 - 11.
05:59 - so forget the efl structure forget the
06:02 - breaks
06:04 - right we can just take this
06:07 - which create the only difference between
06:08 - this in the for loop is that i'm
06:10 - responsible for manually iterating and
06:11 - i'm responsible for manually declaring
06:13 - and initializing the variable before the
06:15 - loop starts so run exactly like the for
06:18 - loops from before 0 to 10. so there's
06:21 - all that control that we can do with a
06:22 - while the thing with a while loop that
06:24 - some people don't like
06:25 - is that the while loop is going to check
06:27 - the condition at the very beginning
06:29 - before it runs any of the code so if you
06:32 - ever wanted the code to run once
06:34 - and then have a condition to fail so
06:36 - just for example let's say this was a
06:38 - user input situation and we wanted to
06:40 - print something give them an option to
06:42 - enter a value and if they didn't enter a
06:44 - value we liked we reprint the statement
06:46 - so something like um let's create a
06:48 - scanner
06:49 - [Music]
06:52 - i gotta import it
06:59 - okay
07:00 - and then
07:02 - let's say i were to do a string user val
07:08 - string for now
07:12 - so while user about
07:14 - dot equals
07:18 - q
07:20 - and we'll put a not in front of that
07:23 - so as long as the user has not entered q
07:26 - then we want to print something like
07:28 - glitch
07:35 - and then we'll grab our
07:38 - user valve
07:39 - [Music]
07:41 - equals
07:44 - [Music]
07:49 - so essentially this code unless they
07:51 - enter a queue is just going to keep
07:53 - running
07:54 - ever which may or may not be what we
07:56 - want and then if they enter a queue it
07:58 - should quit so the thing about this is
08:01 - because the user valve
08:05 - is starting blank that's fine uh it
08:08 - should let it run so let's just run that
08:10 - and just test it out oh what did i get
08:15 - i might have to initialize that to a
08:17 - null
08:19 - string let's run it now
08:22 - okay so value k a b c and q and it quits
08:28 - um so that's one way we can use a while
08:30 - loop but the other way is sometimes we
08:32 - want to print this stuff out
08:35 - and then
08:36 - have it check only after one execution
08:39 - so to do that we can use a do while
08:41 - which basically just it looks like this
08:46 - [Music]
08:48 - so it's essentially the exact same thing
08:49 - as a while loop the only difference is
08:51 - it will run the code in the loop one
08:52 - time no matter what before it checks the
08:54 - condition
08:56 - then it will check the condition
08:57 - and then if the condition fails
09:00 - it won't run it again so
09:03 - it's exactly like a while loop just
09:05 - allows for the code to execute once
09:07 - automatically
09:08 - without checking a condition and then
09:10 - we'll check the condition at the end of
09:12 - that first execution and at the end of
09:14 - each subsequent execution so sometimes
09:17 - that works better it's literally the
09:18 - only difference is about that first
09:19 - execution everything after the first
09:21 - execution doesn't really matter uh it's
09:24 - all going to run the same so that's our
09:26 - for loops our while loops and our do
09:27 - while loops and the structure for them
09:28 - and you can nest any number of these
09:30 - loops together
09:31 - they all serve different purposes and
09:32 - they all have different benefits
09:34 - but uh yeah it's important to have that
09:36 - structure because we're going to use
09:37 - loops a lot when we're looking through
09:39 - strings and we're looking through arrays
09:41 - and we're looking through a list
09:42 - good luck talk to you soon
09:46 - [Music]
09:54 - you