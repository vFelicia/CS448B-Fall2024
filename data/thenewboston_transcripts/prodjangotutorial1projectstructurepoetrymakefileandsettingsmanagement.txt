00:00 - what up y'all welcome back to another
00:02 - video and in this one we are going to be
00:04 - talking about how to set up a Django
00:06 - project
00:08 - and I say setting up a Django project
00:10 - because we actually aren't going to be
00:12 - talking about Django itself too much as
00:14 - far as you know uh view serializers
00:17 - migrations all of that stuff not so much
00:19 - that more so just the structure of you
00:22 - know
00:23 - um organizing your code managing
00:26 - dependencies dealing with settings
00:28 - across multiple environments
00:30 - um linting testing logging dockerization
00:34 - deployment pretty much all of the stuff
00:36 - around the application or business logic
00:39 - because I don't see too much content
00:41 - around that and well I thought it would
00:43 - just be a cool little tutorial
00:45 - so let's just go ahead and get started
00:47 - and jump right in so I'm going to start
00:50 - by just creating a blank Django project
00:52 - so I'm going to navigate to where I have
00:55 - all my projects on my computer and that
00:57 - is desktop in a folder called projects
01:01 - and the first thing that I always do is
01:04 - use Django admin and by the way I assume
01:06 - that you have like a basic uh
01:08 - understanding of Django if you're
01:09 - watching this tutorial
01:11 - um probably not the best series to watch
01:12 - if this is your very first introduction
01:14 - to Django unless you just want to you
01:17 - know stick around and hang out with us
01:18 - that's cool too but anyways Django admin
01:21 - you already know how to start a project
01:23 - now typically what you want to name your
01:26 - project right off the bat and this is
01:28 - going to create a folder with the same
01:30 - name is you know whatever your
01:32 - application is like um putting website
01:36 - or you know bacon or whatever
01:38 - however what I do is no matter what I
01:41 - actually want to call my project
01:42 - whenever I push it up to GitHub and you
01:44 - know share it with the world I always
01:46 - Kick It Up by naming IT project at this
01:49 - stage right here
01:51 - now you're going to see why I did that
01:53 - in just a second however just note that
01:55 - this is going to create a folder called
01:57 - project however I don't want the name of
02:00 - my actual project to be project so right
02:02 - now I'm just going to rename that in the
02:05 - way that you can rename things right in
02:06 - the terminal is just
02:08 - um basically move project to the new
02:12 - name of the folder
02:13 - so I'm going to call that directory core
02:17 - tutorials so why did I just create a
02:20 - folder with all this stuff in it and
02:22 - then I just renamed it right after well
02:24 - check it out go ahead and open this up
02:26 - in any IDE of your choosing
02:29 - and I'm going to be using pie charm
02:32 - all right so check it out I opened this
02:35 - directory in my IDE and nested under it
02:37 - is still this folder right here called
02:39 - project and also the reason I created
02:43 - this by default and then renamed it is
02:44 - because when you rename it only this
02:46 - changes nothing else and I say that
02:48 - because if you look at how the rest of
02:51 - the project is set up it's set up
02:53 - exactly how I want with all of these
02:55 - like core settings nested under project
02:57 - and Django also sets up a couple other
03:01 - things you see it says project right
03:04 - here and I believe if you go to your
03:06 - settings
03:07 - there's some other things like the root
03:10 - um URL configuration is project.urls it
03:13 - basically sets everything up uh like I
03:15 - want it to nesting everything under
03:17 - project while allowing me to keep the
03:20 - top level folder exactly as I want but
03:23 - either way I won't dwell on that too
03:26 - much uh what do we do next
03:28 - so the very first thing that I do right
03:31 - after this is I create my git ignore
03:34 - file so dot get
03:38 - ignore there we go and the reason I do
03:42 - this off the bat is because I like to
03:44 - push up my project to GitHub pretty
03:46 - early even if I'm just working on it
03:47 - myself just because I don't know
03:49 - github's a nice total manage code
03:52 - and
03:53 - there have been a lot of times where I
03:55 - forgot to do this get ignored like maybe
03:57 - I'd had to read me or something then
03:58 - push it up and then a bunch of my files
04:02 - that I wanted to ignore are like
04:04 - accidentally committed or pushed up I'm
04:06 - like okay how do I remove my project
04:09 - files from uh git but still keep them
04:12 - locally and yada so
04:14 - uh moral of the story is just go ahead
04:17 - and add your ignore super quick
04:19 - and like I said I just copy over the
04:22 - most recent ignore from my previous
04:25 - Django projects so that's what I'm going
04:27 - to do now and I know you guys didn't see
04:29 - where I just copied that but I'm going
04:31 - to be sharing this on GitHub so you
04:34 - don't really have to like um create all
04:36 - of this line by line I'm not going to be
04:38 - going through this line by line because
04:41 - what this uh getting more file is is
04:44 - basically a template that I found for
04:47 - python or Django projects or something
04:49 - and then I just added a few things my
04:52 - own but this is pretty much standard
04:54 - where any Django project as long as I
04:56 - add this it like covers like 99 of what
04:59 - I needed to maybe we'll add some other
05:01 - things
05:02 - um you know in the future but for right
05:04 - now this is fine
05:06 - so like I said by the time you're
05:07 - watching this this will be on GitHub but
05:09 - uh yeah there you go let's go ahead and
05:12 - hop on to the next stage which is
05:14 - creating a readme file so I'm going to
05:16 - close this for now just create a new
05:18 - file and I'm going to call it read me
05:20 - now a lot of you are probably familiar
05:24 - with markdown however what I'm going to
05:26 - be using is an rst extension so
05:29 - readme.rst and what rst is is it's very
05:33 - similar to markdown actually but it's it
05:36 - stands for restructured text and the
05:39 - differences between restructured text
05:41 - file and a markdown file is that
05:43 - restructure text has some benefits when
05:45 - it comes to writing technical
05:46 - documentation
05:47 - and we're going to be taking a look at
05:49 - some of those benefits later on
05:51 - but for right now we don't even have a
05:54 - project so there isn't too much that we
05:56 - can do with the readme I'm just going to
05:58 - add some quick placeholder text in here
06:01 - for now and I'll say project setup
06:05 - in if you aren't familiar with any of
06:07 - the syntax don't worry just add some
06:09 - equal signs on the line under that
06:12 - again we just want to add a placeholder
06:14 - for now since I don't know it just feels
06:16 - weird being empty and I'll just say
06:18 - project
06:21 - set up instructions here all right so
06:25 - what does this equals uh you know what
06:27 - do we do after here don't worry about it
06:30 - for now we're going to be hopping back
06:32 - into this looking at researcher text in
06:34 - much more detail whenever we need it but
06:37 - for right now I just kind of want to
06:38 - skim through a lot of this
06:41 - and all right so we've got two files uh
06:43 - it's probably good to push up to GitHub
06:45 - now but before we do let's go ahead and
06:48 - just move on install some other tools
06:50 - that we need the first one that I want
06:53 - to talk about is poetry all right now
06:56 - whenever you type in Python poetry
06:59 - you're going to be taken to a site like
07:01 - this and just go ahead and follow the
07:04 - let's see where this is the installation
07:06 - okay if you go to what was that
07:09 - introduction and you just find
07:11 - installation then it's going to give you
07:13 - the most up-to-date installation
07:15 - instructions and you can just follow
07:17 - this depending on whatever your system
07:19 - is again don't want to dwell on this too
07:21 - much I'm sure you guys can figure out
07:24 - how to install it if you haven't already
07:26 - and also I just wanted to uh say that
07:28 - you should be following the latest
07:29 - rather than you know whatever I show in
07:31 - this video but anyways what is poetry uh
07:36 - probably a good thing to figure out
07:37 - before we start installing this so
07:39 - poetry is a tool that allows you to do
07:42 - well quite a few things
07:44 - um it includes managing dependencies it
07:47 - allows you to run your project in a
07:49 - virtual environment it actually has a
07:51 - lot of other features and we're going to
07:53 - be covering those kind of as we need
07:56 - them however more of the story right now
07:58 - is that go ahead and make sure you have
08:00 - poetry installed and once you do
08:04 - terminal around a bit you can verify
08:06 - that you have it installed just by
08:08 - running poetry version
08:13 - and all right we've got poetry 1.1.11
08:16 - looking good
08:18 - so
08:20 - how should I put this so if you're
08:23 - familiar with JavaScript you can kind of
08:25 - think of poetry right now is the npm of
08:28 - python or it's kind of like pip on
08:31 - steroids in a way I don't know it's a
08:34 - pretty unique tool but the first thing
08:36 - that we want to do and why I called it
08:38 - the npm of python is just like we do npm
08:41 - in it we can do poetry in it however
08:44 - instead of creating a package.json file
08:47 - what this is going to do is it's going
08:49 - to create a piproject.toml file so it's
08:53 - going to be a little interactive guide
08:55 - and we'll just go with the defaults now
08:56 - pack your name Court tutorials yeah
08:59 - version looks good author beautiful
09:01 - license for license we can actually type
09:04 - in MIT that might be the only thing okay
09:07 - and also for the compatible python
09:10 - versions instead of python 3.9 I want to
09:13 - do python
09:15 - 3.10
09:18 - and what I like to know all right we can
09:22 - put no right here because I want to show
09:24 - you how to do this separately but really
09:26 - that's all you need to fill out just
09:28 - make sure you have MIT for license in
09:30 - 3.10 or actually whatever version of
09:32 - python you want
09:33 - uh nope I don't want to do any of this
09:36 - do you confirm generation yes all right
09:39 - beautiful
09:41 - so what exactly did we just do right
09:43 - there well as you can see we now have
09:45 - this Pi Project dot toml file so okay
09:49 - what is a pi project.tomo file so let me
09:53 - pull this up
09:55 - and show you so you can see all right so
10:00 - pipeproject.tomo if you've never seen it
10:02 - before again I don't mean to be making
10:06 - all these like JavaScript comparisons
10:07 - but I do know a lot of my viewers are
10:09 - familiar with JavaScript and uh npm so I
10:14 - figure it might be useful for right now
10:16 - you can kind of think this as
10:17 - package.json even though I don't want a
10:20 - lot of people to be yelling at me
10:21 - because it's not like a direct
10:24 - equivalent just right now for something
10:26 - to compare it to it's you know probably
10:28 - a decent comparison but we can really
10:30 - see the best description right here
10:31 - which is this file contains build system
10:33 - requirements and information which are
10:36 - used by pip to build the package so
10:39 - basically just that it contains system
10:42 - requirements needed to build our project
10:45 - basically so what other requirements are
10:47 - dependencies for our project it's kind
10:50 - of the uh quick and dirty of it and
10:52 - again there's more to this file
10:55 - than just listing what dependencies you
10:57 - need but for now we'll just um stick
11:00 - with that since that's kind of one of
11:02 - the main features of this file features
11:04 - of this file attributes I don't know
11:06 - however you say
11:08 - all right so we can see that right now
11:11 - python is a dependency we got some
11:13 - information about our project beautiful
11:15 - now the next thing that we're going to
11:18 - want to do is I'm going to run a command
11:20 - to specify some additional packages that
11:24 - our project is going to require
11:26 - so we're going to require let's see I
11:28 - know a couple off the bat I can't
11:29 - remember them all Django Django rest
11:31 - framework Django filter
11:34 - um you know a couple other things so in
11:36 - order to add those is dependencies
11:39 - you can write poetry add and let's see
11:42 - the ones I remember Django
11:45 - Django rest
11:48 - framework make sure I spelled that
11:49 - correctly uh we're actually gonna be
11:52 - using postgres so
11:54 - uh the package for that is Psy cop G2
12:01 - I don't even know how to pronounce that
12:02 - and then all right Django filter there's
12:05 - some other ones but we'll be adding
12:07 - those uh later it's actually probably
12:09 - better that way since you know I'm just
12:11 - not showing you how to add Everything at
12:13 - Once of course as you're developing a
12:15 - project you realize that there's some
12:17 - other dependencies you need later on and
12:19 - can add them so either way I'm just
12:21 - going to go ahead and hit enter right
12:23 - now and when I do what poetry is going
12:26 - to do you see a couple of things
12:29 - so all right let's see if we can get
12:32 - some prompts all right python through
12:34 - nine not supported trying to find a
12:36 - compatible version uh creating a virtual
12:38 - environment that's interesting and then
12:41 - okay it looks like it's going out and
12:44 - grabbing those dependencies and
12:46 - installing them all right so that's
12:48 - pretty cool so now let's hop back in our
12:52 - IDE and check out our Pi Project Tamil
12:54 - and we can see that poetry did a couple
12:56 - things they added those dependencies uh
12:59 - to this file and it also created this
13:02 - poetry lock file huh this is interesting
13:06 - I didn't see this before so what exactly
13:09 - happened here well check it out whenever
13:11 - we ran this command poetry ad what it
13:15 - did is it not only added these
13:18 - dependencies to our Pi Project toml file
13:20 - but actually kind of in the background
13:22 - it ran another command right after
13:26 - in that was to install them
13:29 - so why did it do both at once and why
13:33 - would we ever need this command if
13:35 - poetry ad kind of like runs it together
13:38 - well
13:40 - whenever you just need to add a new
13:42 - package to your project or dependency
13:44 - whatever you want to call it then you
13:47 - can run poetry ad and it runs both
13:48 - however for any other developers working
13:51 - on this project whenever they pull this
13:54 - down from GitHub they don't actually
13:56 - need to add these again because they're
13:58 - already added to Pi Project tunnel they
14:00 - just need to go ahead and install those
14:03 - packages
14:04 - okay so they would probably run poetry
14:06 - install instead of poetry ad and that is
14:08 - correct but again what is this poetry
14:11 - lock file doing
14:13 - so whenever this poetry install command
14:16 - is Iran let me pull this down a little
14:19 - bit
14:20 - whenever this command is ran if there
14:23 - already is a poetry lock file then the
14:27 - developer is going to install these
14:29 - exact versions specified in this poetry
14:32 - lock file now if this poetry lock file
14:36 - does not exist let's pretend that it
14:39 - doesn't exist although I'm not going to
14:40 - delete it right now but let's just
14:42 - pretend it doesn't exist in a developer
14:45 - ran this poetry install what would
14:47 - happen is that poetry would read in the
14:51 - dependencies from this Pi Project that
14:53 - Tom will file
14:55 - hey actually
14:57 - there are cars beeping outside right now
14:59 - if that's like too annoying in the video
15:01 - then uh let me know and I'll cut them
15:03 - out but otherwise I never actually did
15:05 - this where uh I actually want to see how
15:08 - loud that honking is and if it's fine
15:09 - then I'll just kind of keep rolling with
15:11 - it but um yeah let me know and anyways
15:13 - let's get back on track here
15:15 - so if you run poetry install and there's
15:18 - not already a poetry lock file then it's
15:21 - going to go ahead and resolve all these
15:22 - dependencies and generate this poetry
15:25 - Dot Lock file
15:26 - so
15:27 - short summary pipeproject.tomo is really
15:31 - just a list of what packages your
15:34 - project needs and then
15:36 - poetry.lock is almost like the final
15:40 - source of Truth stating exactly which
15:42 - versions each of those packages are
15:46 - going to be included to ensure that
15:48 - everyone ends up with the exact same
15:49 - dependencies because even if
15:52 - two developers have the same
15:54 - dependencies but they have like a minor
15:57 - version different than each other these
15:59 - are some of the most tricky bugs to
16:00 - track down because that's when you get
16:02 - into well it's working on my computer
16:04 - but uh but not yours so as much as you
16:08 - can uh we want to end up with every
16:10 - single environment production uh local
16:13 - all of the different developers with the
16:16 - exact same packages to kind of prevent
16:19 - um a lot of these surprises so we can
16:21 - actually run poetry install right now
16:23 - and when you do it's it's pretty
16:25 - interesting because it says okay
16:27 - recreating this virtual environment and
16:30 - then it's it's trying to install
16:32 - everything again and that's kind of
16:35 - weird because well just like a minute
16:37 - ago I added everything and it seemed
16:40 - like I was installing it then and now
16:41 - I'm running poetry install kind of just
16:44 - to show you and it seems like it had to
16:46 - reinstall all those that's I don't know
16:49 - it's not sounding too efficient so check
16:52 - it out
16:53 - by default poetry is going to create its
16:56 - own virtual environment which is great
16:58 - because it does that to keep things
17:00 - isolated from your own system in other
17:03 - words whenever we install these
17:05 - dependencies it's nice to have them
17:07 - isolated and not install on like my Mac
17:10 - you know
17:11 - so
17:13 - poetry is always going to try to create
17:15 - a virtual environment and install the
17:17 - dependencies there however it gets a
17:20 - little bit tricky sometimes as you just
17:21 - saw in I actually had some issues with
17:24 - the past just by running it straight up
17:27 - and that was because it ended up I can't
17:30 - remember exactly what happened because
17:31 - well truth really truthfully it was like
17:34 - uh quite a ways ago when I was running
17:36 - into these issues but it was something
17:37 - like I had too many environments or I
17:39 - had trouble switching between the
17:41 - virtual environments like I said I can't
17:43 - remember however lucky for us there was
17:46 - a much better method that I found not
17:49 - really that I found just uh I don't know
17:51 - was reading about on their documentation
17:53 - and that's this
17:55 - if you go ahead and create your own
17:57 - virtual environment then whenever you
18:00 - run poetry commands then what poetry is
18:03 - going to do is it's going to
18:04 - automatically detect that you're already
18:06 - in a virtual environment and it's just
18:08 - going to use that one
18:09 - so let's just go ahead and do that in
18:12 - pie charm
18:15 - and okay so show you how to do it in pie
18:17 - charm if you go down to your project in
18:20 - Project interpreter if you click this
18:22 - little gear you can click add and we
18:26 - just want to create a new virtual
18:27 - environment
18:28 - and I'm not sure how to do it in the
18:30 - other Ides but
18:32 - um I assume that a lot of you are
18:34 - familiar with this so uh in pyterm this
18:38 - is how you do it and this looks okay
18:41 - and okay so now we can see that we have
18:43 - this new virtual environment and really
18:46 - that's all that we need to do for the
18:48 - time being like I said now whenever we
18:52 - run poetry install then it's going to
18:55 - detect
18:57 - that new virtual environment
19:02 - actually I think this may have
19:07 - okay so I'm actually gonna
19:09 - I need to close that tab specifically
19:11 - all right so I had a little mistake
19:14 - there I was already kind of shelled in
19:16 - to the wrong location not in my virtual
19:18 - environment but in pycharm release make
19:22 - sure that you actually close out of this
19:24 - tab specifically then when you reopen it
19:26 - you should see this little prompt right
19:28 - here that says pretty much an indication
19:30 - that you are now in your virtual
19:32 - environment and now I can demonstrate
19:35 - what I wanted to which is installing
19:37 - those packages and the cool thing is it
19:40 - doesn't say now creating a new virtual
19:42 - environment it looks like everything is
19:45 - just happening in the one that was
19:46 - already created so that's pretty dope
19:49 - and now let me wait till this is done
19:52 - installing and I'm actually just going
19:54 - to close out and try to do that one more
19:55 - time because I want to demonstrate one
19:58 - thing and that is now whenever you
20:00 - install it it's going to say hey pop
20:02 - them back into your virtual environment
20:03 - using that I see that you try to
20:06 - reinstall it you already had all these
20:07 - installed so no nothing needed all good
20:12 - to go
20:13 - so again that's just something I found
20:15 - was much more useful than to have poetry
20:18 - kind of try to manage these different
20:19 - virtual environments on its own
20:21 - but I did want to show it to you this
20:23 - way and kind of like do it that I don't
20:26 - want to say bad way but the alternative
20:28 - way first just to demonstrate some of
20:30 - those nuances that you might run into if
20:33 - you don't create your own virtual
20:34 - environment all right so now let's just
20:36 - go ahead and try to run this project and
20:38 - I got this little button in my IDE and
20:41 - check it out so here let me move this
20:44 - over here would be easier to see
20:47 - all right so it says whenever we click
20:51 - that all right it actually looked like
20:52 - things are working and let me pop this
20:55 - open and just make sure that
20:59 - all right so it looks like things are
21:02 - running correctly however huh so the
21:06 - first thing I see is we get this little
21:07 - migration warning so we have to deal
21:10 - with that so let me go ahead and stop
21:12 - this in another thing that I want to
21:14 - point out is that even though things uh
21:17 - appear to be working you know decently
21:19 - we really don't want to be running our
21:21 - project using the IDE
21:24 - and the reason for this is we want
21:26 - everything to go through poetry and by
21:30 - that what I mean is whenever you run
21:32 - this project we want it to run on poetry
21:34 - it not only our local environment but
21:37 - other developers environment and in
21:39 - production whenever we dockerize
21:41 - everything we basically want everything
21:43 - to run through poetry because poetry can
21:46 - keep everything consistent which is
21:49 - great because like I said we don't want
21:50 - any surprises at least not when it comes
21:52 - to programming
21:54 - now before we see how to run this
21:57 - project in poetry let's just go ahead
21:59 - and talk about the Syntax for running
22:01 - well anything using poetry so anytime
22:05 - you want to run something in poetry you
22:06 - type poetry run and then after is
22:10 - basically the command you would normally
22:12 - type so to run a python script is just
22:15 - Python and then you know uh whatever the
22:19 - name of the Python file is and for
22:22 - example let's say you're running Pi test
22:23 - instead of just running
22:25 - pie test straight up you can do poetry
22:27 - you run pie test yada yada but basically
22:30 - just remember that the syntax is poetry
22:32 - run and then your command
22:35 - so the command to run the app is
22:41 - python run
22:43 - actually what is it python manage that
22:46 - py run server there you go
22:50 - actually this is ironically a pretty uh
22:53 - good demonstration of the fact that I
22:56 - have trouble uh remembering these
22:58 - commands sometime so I believe it's
23:00 - poetry run python managed.py run server
23:03 - and okay so this looks like work still
23:06 - getting those migration issues but let
23:07 - me just pop this open
23:10 - and this was the new tab right here
23:13 - okay so apparently we can run it this
23:16 - way as well but well we did have that
23:20 - one issue where I forgot exactly the
23:23 - command so let me just go ahead and take
23:25 - another look at that okay poetry run
23:27 - python manage.py run server okay so I
23:30 - can probably remember this command uh
23:32 - going forward however I do know that
23:34 - they're quite of there are a few other
23:37 - commands that we're going to be using
23:38 - quite often for like creating super
23:40 - users running migrations running tests
23:43 - and well even though I could probably
23:45 - remember this command trying to remember
23:47 - all of those the exact syntax form it's
23:51 - is going to get pretty confusing
23:53 - so one thing that I know that I can do
23:56 - is I could probably create like some
23:58 - Google doc and paste all my commands in
24:01 - there and then whenever I need one I'll
24:03 - just copy it over and paste it in this
24:06 - terminal however that just it doesn't
24:08 - feel like the best way to be honest it
24:10 - doesn't even sound like the best way so
24:12 - a better method let me clear out my tabs
24:15 - right here a better method is creating a
24:18 - make file so I'm going to go ahead and
24:21 - create that it's called make file and
24:25 - okay looks like it already has an icon
24:27 - so well what the heck is a make file
24:29 - though so make is a tool used a lot in
24:34 - compiling software and it already comes
24:37 - with your system it's it's a Linux tool
24:39 - but
24:41 - actually the easiest way that we can
24:42 - probably understand uh what this make
24:45 - file is is kind of just to jump right in
24:46 - so
24:48 - this file is going to be made up of
24:50 - something called targets and under a
24:54 - Target you have your recipe right there
24:57 - so you can think of a Target as kind of
25:00 - like the function name and the recipe it
25:02 - just doesn't have to be one line it
25:04 - could be multiple lines you can kind of
25:06 - think of it like a function body
25:07 - although a lot of people familiar with
25:09 - make are like this isn't a function
25:11 - whatever whatever but uh
25:13 - um we'll see exactly uh what we can do
25:16 - with it in just a bit however before
25:18 - typing an actual useful mate command I
25:21 - do want to mention one other thing and
25:24 - that is another syntax and that is to
25:28 - the right of your target you may see
25:30 - some something called prerequisites and
25:34 - prerequisites are kind of like triggers
25:37 - that when the prerequisites change it
25:40 - can cause the recipe to be re-ran and I
25:45 - mentioned this last because we're
25:46 - actually not going to be using those
25:47 - prerequisites right now out and I don't
25:49 - want to throw too many things at you
25:51 - guys but I do want to just mention it
25:54 - because they're pretty cool in that
25:57 - make can detect changes in those
25:59 - prerequisites and keep track of whenever
26:02 - it needs to run this recipe again all
26:04 - automatically so it's a very efficient
26:07 - way that you can you know run complex
26:09 - commands or rerun complicated build
26:12 - processes and only rebuild the parts of
26:16 - your project that are necessary so it
26:18 - makes your build process a lot more
26:19 - efficient but like I said don't really
26:21 - worry about it right now
26:23 - um we'll be digging into those later on
26:25 - when we start dockerizing everything
26:26 - just didn't want you guys to get thrown
26:28 - if you see this you know little syntax
26:30 - looking at any make documentation or
26:32 - anything
26:33 - so anywho let's just go ahead and make
26:36 - an actual useful Command right now
26:39 - and in order to make a make Target or
26:42 - function command whatever you want to
26:44 - call it
26:45 - type in the name of it and this can be
26:47 - any name that you want I'm just going to
26:49 - call mine run server because what we are
26:52 - going to be doing is using it as a
26:54 - shorthand for this Command right here
26:58 - all right so I couldn't remember if it
27:01 - was poetry run python run or poetry run
27:04 - python manage.pri run server but lucky
27:07 - for me now I don't have to remember the
27:09 - syntax at all because anytime that I
27:12 - want to run this command all I have to
27:15 - do is run let me clear this out all I
27:19 - have to do is run make
27:21 - and then just make sure you guys can see
27:24 - make
27:29 - run server so again for a make file just
27:33 - make sure that you're in uh that
27:35 - directory run make Command and then the
27:37 - name of your target now whenever you do
27:40 - this you're going to see that it's the
27:42 - exact same thing is running this command
27:44 - it just allows us to have a much cleaner
27:47 - syntax
27:48 - so all right uh looks like this file is
27:51 - going to be handy learn a new tool make
27:54 - everything's looking good however we
27:56 - still have these migration issues and
27:59 - all right so let's close out of this for
28:01 - now since we've got that make file
28:03 - written all right so before we get into
28:06 - any more tools or project setups what I
28:08 - want to do is restructure the code base
28:10 - a bit and the reason I want to do it
28:12 - right now is because whenever we go and
28:15 - set up these
28:16 - um various tools those tools are
28:18 - typically going to like reference uh
28:21 - locations or actually files like lint
28:24 - this directory or this is where my
28:27 - project settings are so on and so forth
28:28 - so I like to get my code base structured
28:31 - early on because then you don't have to
28:33 - go back and like tweak all those uh file
28:35 - paths and whatnot
28:37 - so the first thing I'm going to do is
28:39 - I'm actually going to create a new
28:40 - package and this package is going to be
28:43 - a lowercase version of whatever your
28:46 - actual project name is so my project
28:48 - name is core tutorials however I am
28:51 - gonna kind of break my own standard and
28:55 - just drop off that hyphen tutorials
28:57 - because
28:58 - um this is really just to indicate that
29:00 - this is like a tutorials project however
29:02 - in a non-real
29:05 - in like a real non-tutorial project this
29:07 - is what I was trying to say uh we
29:09 - wouldn't have that so just to keep
29:11 - things kind of um as they would be in
29:13 - production I'll just name it core
29:15 - and now what I want to do is I want to
29:17 - move this project package which is the
29:21 - one that was created whenever it was
29:23 - created whenever we first started our
29:25 - project I want to move that in here
29:28 - and just refactor that and then also
29:31 - this manage.py
29:33 - so basically all of the
29:36 - um files that came whenever Django
29:39 - created that project for us I'm just
29:41 - going to scope it under this core and
29:43 - that's because I want to leave this top
29:45 - level directory mostly for uh like
29:49 - standard project files and Tool
29:51 - configurations and files referencing the
29:54 - various tools that we're going to be
29:56 - using I want to keep the application or
29:58 - business logic out of all this I don't
30:01 - want it all scattered in together so
30:03 - that's why I scope all of that undercore
30:07 - all right so if we actually try to run
30:10 - the project right now we're gonna get a
30:12 - couple issues and okay I can't find this
30:15 - file yada yada okay
30:17 - so basically what this is saying is
30:19 - since we moved all of those under
30:22 - basically to a new location there are a
30:25 - couple places in Django where we need to
30:27 - just update some things the first one is
30:29 - in this manage.py file and this is just
30:33 - saying uh the Django settings module is
30:36 - no longer in a package called project
30:38 - settings because in our top level we
30:40 - don't have project anymore is now under
30:43 - core.project.settings
30:46 - and also if you go under project
30:50 - settings.py let's see what we need to
30:53 - change here
30:55 - so first of all
30:57 - um since we nested uh this file under
31:01 - one additional package
31:03 - our base directory we just have to add
31:05 - another parent since we're we're kind of
31:08 - like one more level deep
31:09 - and now let's see what else needs change
31:12 - uh root URL config again same thing is
31:16 - over here
31:18 - too lazy to type five characters so that
31:22 - is now under core Dot projects.url and
31:26 - then I believe that there might be one
31:28 - or two more all right whiskey
31:30 - application
31:31 - just add core right there and
31:35 - okay so I think that's all we needed to
31:38 - change however
31:40 - um we will still get an issue if we just
31:43 - run
31:45 - this command still even though we
31:47 - updated all our source code and the
31:49 - reason for that is because in our make
31:50 - file what we said is this command
31:54 - says to run a script called manage.py
31:58 - and as you can see that manages that POI
32:01 - file is no longer in the same directory
32:04 - so in order to update that
32:08 - instead of running that manage.py we can
32:12 - say run the module
32:15 - if I can type and the module just
32:18 - different syntax is core Dot
32:21 - manage and that's where this is core dot
32:24 - manage all right so once you have those
32:27 - updated hopefully unless I didn't miss
32:30 - anything now when we run make run server
32:34 - yes we're selling getting these
32:36 - migration issues but we had those before
32:37 - point being is that now everything is
32:40 - updated and everything is working now
32:43 - that things have been shuffled around a
32:45 - bit good to go
32:46 - all right so now that that is looking
32:49 - good let me actually close out of this
32:51 - for now and I'm gonna be adding some
32:54 - more commands to this make file so you
32:56 - can go ahead and clear everything else
32:57 - out and all right so now I'm just kind
33:02 - of thinking through all the commands
33:03 - that I know 100 that I'm gonna be
33:05 - basically running uh quite often in this
33:08 - project the first one is to install the
33:12 - dependencies so I'm just going to call
33:14 - it install and I'll say
33:17 - poetry install essentially this is kind
33:20 - of what I what I tell myself in the head
33:22 - if in the terminal I'm using poetry a
33:26 - lot of the time and typing that in then
33:27 - I'm I probably want to make this uh make
33:30 - command so I know this is kind of of a
33:33 - weird way to think of it but it I don't
33:35 - know it just uh seems to work out
33:37 - and okay so install poetry install and
33:41 - now because I'm lazy gonna copy this
33:44 - and okay what's another thing well uh uh
33:48 - my grades migrate to get rid of those
33:51 - those uh migration commands and for this
33:54 - actually going to be copying this
33:57 - so the command to run those
34:01 - migrations is just migrate and then
34:04 - another command to actually make
34:06 - migrations
34:08 - so I'll just name this
34:11 - migrations instead of make migrations
34:13 - because we can run it this way like this
34:16 - make migrations
34:19 - but anyways this is just going to be
34:24 - make migrations and again uh the
34:27 - difference between these two just to
34:28 - skim on this real quick is that whenever
34:31 - you have a change that's going to update
34:32 - one of your models and in turn you need
34:35 - to update like your a database structure
34:37 - you're going to make those migrations
34:39 - basically does the equivalent of
34:41 - generating a bunch of SQL commands and
34:44 - then migrate actually runs those SQL
34:47 - commands against your database to
34:49 - actually do the updating so these are
34:51 - the instructions and this is how you
34:53 - actually like execute those instructions
34:55 - all right what else do we need uh run
34:57 - server uh create super user gonna be
34:59 - doing that so I'll call this command
35:01 - super user
35:05 - and we'll just say create
35:08 - super user
35:09 - and then uh let's see the last command I
35:13 - believe that we need for the time being
35:15 - is just a command that other
35:18 - um developers can use whenever they need
35:22 - to update their own environment so say
35:24 - that they pulled down a branch from
35:25 - GitHub and there are you know some
35:27 - changes maybe some new packages that got
35:30 - added and maybe some uh new migration
35:34 - files that they need to run to update
35:35 - their local database
35:37 - instead of typing all that and figuring
35:39 - it out we're just going to make a
35:41 - command called update now here
35:44 - instead of just tapping down to a new
35:47 - line and writing the instructions
35:48 - there's actually a a pretty cool I don't
35:51 - know what to call a trick a new syntax
35:53 - that you can use because
35:55 - well I want this update command to be is
35:58 - basically a combination actually I'll
36:00 - write it the uh
36:02 - not bad way but I rate it the long way
36:04 - and then I'll shorten this up so what we
36:06 - want to do is we want to first run the
36:08 - install command to run any of these uh
36:11 - basically install any new dependencies
36:13 - and then after that what we want to do
36:16 - is we want to run migrate and what this
36:19 - is going to do is it's going to say if
36:21 - there are any new migration files just
36:22 - go ahead and update the database however
36:25 - we see a lot of like repeated code and
36:28 - these commands are already like
36:30 - shortened to this new syntax so there
36:34 - must be a better way and indeed there is
36:36 - instead of just copying the recipes from
36:39 - here and moving it down here what we can
36:41 - do is write install and then migrate in
36:45 - what this does make sure you add a
36:47 - semicolon actually a spaced in semicolon
36:49 - what this does is whenever we run make
36:52 - update now it's basically the same is
36:55 - running make install and then right
36:57 - after it running make migrate
37:00 - so again I want to keep our commands as
37:03 - efficient as possible but yeah I think
37:05 - this is all the commands that we need
37:07 - for now and let's actually now that we
37:11 - have this snazzy new let me find it wait
37:16 - for it wait for it now that we have this
37:18 - snazzy new make migrate command let's go
37:21 - ahead and run that to hopefully get rid
37:22 - of some of these migration issues so I'm
37:25 - going to run make migrate
37:28 - and then it looked like everything was
37:30 - migrated now I'm going to go ahead and
37:33 - run make run server again and if
37:35 - everything worked we should see that
37:37 - these migration issues are no more
37:41 - let me just expand that
37:46 - make run server and beautiful so check
37:50 - it out so now we have our project
37:52 - running our Command shorten project
37:55 - structure looking good and all right
37:58 - uh let's just go ahead and close that we
38:00 - aren't digging into the actual project
38:02 - or don't care if it's running right now
38:04 - so what's next well before we get into
38:07 - kind of the next stage of this Django
38:09 - project setup I do want to make one
38:11 - additional update to this make file and
38:14 - that is adding something called
38:17 - I don't even know how to say it adding a
38:19 - new syntax called phony and I'll show
38:22 - you what it is and then I'll talk about
38:23 - it so if you're right period and then in
38:27 - capitals p-h-o-n-y
38:29 - semicolon and then just write the name
38:32 - of your target right after it and we're
38:35 - actually going to be doing this for all
38:36 - of these
38:38 - targets right here I was going to say
38:40 - command Target demo with the column but
38:43 - what the heck is going on right here
38:45 - well check it out whenever you create a
38:48 - make file make by default it assumes
38:52 - that these targets right here migrate
38:55 - migrations run server it makes the
38:57 - assumption that these targets are actual
38:59 - files however when we were creating
39:03 - these we didn't reference any file for
39:06 - example there's no file here called like
39:07 - migration there's no file called
39:09 - Superuser no file called update so
39:13 - what's the deal like what are we
39:15 - supposed to do so what we want to do is
39:18 - essentially tell make that these
39:21 - commands right here they're not files we
39:23 - want to explicitly say that they're kind
39:26 - of just like custom commands that we
39:28 - built basically and we want to do this
39:30 - for two reasons the first one is
39:32 - actually to improve performance and that
39:35 - is because whenever make is going to see
39:37 - this phony keyword it knows oh okay I
39:40 - don't have to check if there's a file
39:41 - called you know installer or migrate I
39:45 - can just bypass that like file checking
39:47 - logic and another thing is whenever you
39:52 - um tag a Target is phony then it avoids
39:56 - a conflict in case there is indeed a
39:59 - file with the same name and I say that
40:01 - because sometimes let's say there could
40:03 - be indeed some script in here called
40:05 - update and a file called update and it
40:09 - might be like a shell script responsible
40:10 - for updating I don't know updating
40:12 - something
40:13 - however if we tag this
40:16 - Target is phony
40:18 - I'm just gonna say this update is phony
40:21 - right here then even if there was a file
40:24 - called update right here then it
40:26 - wouldn't even look at it or try to run
40:28 - it or anything like that it would just
40:29 - bypass that and say okay this command is
40:32 - what you're trying to execute
40:34 - so either way we're just going to go
40:37 - ahead and tag everything is phony
40:43 - all right we got some phony migrations
40:45 - here run server also phony
40:49 - meaning it is not an actual file and the
40:53 - super user Target right here yes this is
40:55 - all phony everything is phony and all
40:59 - right this looks good and by the way
41:01 - um right now whenever we run these
41:05 - commands it's going to make no
41:06 - difference whatsoever however just
41:08 - internally know that since we tagged our
41:11 - targets phony
41:12 - um it just improves performance in a bit
41:14 - and yeah we get all those benefits
41:16 - so that's what phony does in those I
41:19 - believe are the only changes I wanted to
41:21 - make the this make file right now so now
41:23 - let's go ahead and move on hi so let's
41:27 - close this make file and now what we can
41:31 - do is we can start on settings
41:32 - management so as our project scales what
41:38 - we need to do is we need to make sure
41:39 - that we keep all of our settings
41:42 - if I can pop it open we need to make
41:45 - sure that we can keep all of these
41:46 - settings organized now right now it
41:49 - doesn't look that bad I mean not that
41:51 - many settings you only got like 100
41:52 - lines or so but as we scale as we got
41:55 - more packages as we need to configure
41:57 - our testing uh Docker Django rest
42:00 - framework needs settings that we're
42:01 - going to need to add then this file can
42:04 - get pretty beefy so the first thing I
42:07 - want to do is I want to create a way
42:09 - that we can kind of break this up a
42:11 - little bit easier now thankfully a lot
42:15 - of other people had this issue too so
42:18 - they already have a couple packages
42:21 - the one that we're going to be using is
42:24 - or adding I should say if I'm going to
42:26 - type in the add keyword is Django
42:30 - split
42:31 - settings and before we even install that
42:35 - I'll show you what it is has a pretty
42:37 - good nice short description
42:39 - so this package allows you to organize
42:42 - Django settings into multiple files and
42:45 - directories easily override and modify
42:47 - settings and use wildcard yada yada so
42:50 - this is kind of the meat of it and yeah
42:52 - that kind of sounds exactly what we were
42:54 - going for
42:55 - so we're going to be using that in
42:58 - another
42:59 - um not really uh important one I would
43:01 - say but we are going to be using
43:03 - something from Pie yaml as well so just
43:07 - go ahead and add these two and again
43:10 - when you add them it automatically
43:12 - installs them as well so we don't need
43:15 - to run a poetry install or make install
43:17 - separately
43:19 - now just to verify that okay we now have
43:23 - jingle split settings and Pie ammo in
43:25 - our project good to go
43:27 - so what are we going to be doing after
43:29 - this
43:30 - well jingle split settings as we saw it
43:32 - allows us to kind of break up this
43:34 - single settings file into multiple
43:36 - different ones and since we're going to
43:38 - have multiple settings files we should
43:40 - probably create a new package for that
43:42 - so go ahead inside your project where
43:45 - this settings module is just go ahead
43:47 - and create a new package and we're going
43:51 - to be calling this settings so basically
43:53 - converting this file to a little package
43:56 - right here now inside here we can
43:59 - actually create a new directory we don't
44:01 - need to make this a python package we
44:03 - can just use a directory
44:05 - and I'm just going to call this
44:08 - template tmblads always double check
44:11 - make sure you set everything correctly
44:13 - and
44:14 - um actually let me add one more file and
44:16 - then I'll kind of talk through what the
44:18 - heck I'm doing here so in here I'm going
44:20 - to add a python file which is kind of
44:22 - weird because it's a directory and not a
44:25 - package but it's just going to be like a
44:27 - template sample file so I'm going to
44:29 - call this settings dot Dev Dot py
44:34 - all right so what's going on with this
44:36 - structure all right
44:38 - you know what actually let me do one
44:41 - more thing and that is I'm going to
44:43 - rename the settings file
44:45 - a refactor rename I'm going to rename
44:47 - this to base
44:49 - dot py since these are indeed like our
44:52 - base settings I'm going to move this in
44:55 - this new settings package
44:57 - all right so now we got everything
45:00 - structured so let's go ahead and talk
45:02 - about this structure real quick so all
45:05 - of the settings are going to be in this
45:07 - package called settings and even though
45:09 - we have this one base file right now
45:11 - we're going to be breaking this up and
45:14 - pretty much creating more settings files
45:16 - in here we're going to have one for our
45:18 - base settings which are like the core
45:20 - um Django settings we'll keep it this
45:22 - kind of as is and then let's say that we
45:26 - want to set up our settings for Django
45:27 - or rest framework we're going to be
45:29 - adding another file for that we're going
45:31 - to be adding one for Docker one for like
45:33 - environment variables we're going to be
45:35 - adding more settings in here that's all
45:36 - you need to know in
45:39 - it's like a monster truck racing outside
45:41 - and it's just a cool way that you can uh
45:44 - break them up keep things a little bit
45:46 - more organized now this templates right
45:49 - here in the settings.dev.py this is
45:52 - going to be each developer's like local
45:54 - settings so let's say one developer
45:56 - wanted to change their logging they
45:58 - prefer things to be logged out in a
46:00 - certain way or maybe they wanted to
46:01 - switch to a new database to try
46:03 - something out
46:04 - what we're going to be doing is
46:06 - basically creating a template file right
46:08 - here however they just don't want to be
46:11 - editing this in each person pushing it
46:13 - up to GitHub so it's just going to be a
46:17 - template what they're going to do as
46:19 - part of the project setup is clone or
46:21 - copy this over to a separate location
46:23 - that basically doesn't get checked in a
46:26 - git and then they can each developer can
46:30 - kind of customize their own settings the
46:32 - template stays as is and all of the
46:34 - global settings that we need for every
46:36 - environment such as the base a Django
46:38 - rest framework so on and so forth those
46:40 - will stay as is and if that's all
46:42 - confusing and you it's like it's easier
46:45 - just to see this than to explain it but
46:48 - I did want to you know kind of give you
46:50 - an overview of what's going on so you
46:52 - know I don't just think it's easier that
46:54 - way
46:55 - all right so what to do next so let's do
47:00 - this
47:01 - in settings
47:03 - in it py
47:06 - I'm actually gonna go ahead and move
47:10 - this right here over and I actually need
47:14 - both of these I believe that's the only
47:16 - yep okay so I'm just going to go ahead
47:19 - and copy
47:21 - actually let me go ahead and do it this
47:23 - way I'm going to cut this and in
47:25 - settings py paste that in I'm also going
47:27 - to cut this
47:30 - since I need that
47:33 - and
47:35 - go ahead and really remove a lot of this
47:40 - okay let me just clean out some of these
47:42 - comments since it's uh getting a bit uh
47:45 - tricky to read all this all right
47:48 - so in this settings dot in it this is
47:54 - going to be where we're going to kind of
47:56 - aggregate everything so everywhere else
47:59 - that was importing from the settings
48:01 - module it can kind of do it the same way
48:03 - and we'll be getting into the setting up
48:05 - of those other files in just a second
48:07 - but for right now I just want to fix a
48:08 - couple things that kind of broke in this
48:10 - reshuffle the first thing is that since
48:13 - the path of this file which where we're
48:17 - specifying the space directory it was in
48:20 - a settings module directly under
48:22 - projects but since we created this new
48:25 - module in nested under there we just
48:27 - need to add one more parent right here
48:30 - to make sure we got the right path
48:32 - now after this what I want to do is hop
48:35 - back in base and set up a couple things
48:38 - near these comments too so
48:41 - you all know what I'm doing
48:43 - and actually let me
48:45 - I always like to keep things um very
48:47 - alphabetized I don't know I have OCD or
48:50 - something but either way uh what I'm
48:54 - gonna do is actually copy these over
48:57 - and I'm gonna stick these
49:00 - in these Dev setting
49:03 - template right here because I want
49:07 - these values by default I want debug to
49:11 - be equal to false
49:13 - in this pretty much says we're in
49:15 - production mode by default and I say
49:18 - this because it's just safer to do this
49:19 - way because then in your development
49:21 - modes you can easily turn on debug it's
49:25 - just um better this way in case let's
49:28 - say you forget to make it false then you
49:30 - have all these logs in um well security
49:33 - issues popping up and
49:36 - yeah so for secret key also I'm just
49:39 - gonna have set this to not
49:42 - implemented all right
49:44 - so now by default uh we are in
49:47 - production mode we have to manually
49:48 - overwrite that for a development
49:50 - environment that's exactly what we want
49:51 - and by default as well the secret key is
49:54 - not implemented and wouldn't this throw
49:57 - an error uh by default yes and that's
49:59 - exactly what we want because any
50:01 - environment you run this is basically
50:03 - saying hey you need to provide the
50:04 - secret key and this just helps to make
50:07 - sure like no secret keys are checked in
50:09 - to get or anything like that
50:11 - and all right so these are going to be
50:14 - our overrides for local environment
50:16 - however one other thing that I want to
50:18 - do is this uh database path is broken
50:23 - right now and that's because remember we
50:26 - removed this base stir setting from the
50:29 - space.pol file and we moved over to init
50:32 - and we're going to kind of see how
50:33 - everything hooks together in just a
50:34 - second but for right now I'm not gonna
50:37 - really worry about that
50:40 - because we're actually going to be
50:41 - replacing SQL Lite with postgres and
50:45 - um just to show you how to set up a
50:47 - actual database however if you use well
50:49 - really any other database my sequel
50:51 -  even is going to be all the same
50:53 - however I just want to get this kind of
50:56 - like working for right now so we can
50:58 - kind of move on
50:59 - so what I'm going to do is I'm just
51:01 - going to go ahead and copy how do you
51:05 - I always forget where it is okay copy
51:07 - patch reference and just say absolute
51:09 - path
51:10 - so again this is kind of a hacky way for
51:13 - right now but like I said we're going to
51:14 - be deleting this soon just want to make
51:16 - sure that our project is still going to
51:18 - be able to run while we set up
51:19 - everything else so I copy the absolute
51:22 - path to this wherever your DB sqlite
51:25 - database is go ahead and paste it in for
51:27 - there
51:28 - now next up uh let's see what else we
51:31 - need to do got these overrides right
51:33 - here so
51:35 - what we're going to be doing remember
51:37 - these are like the global settings that
51:41 - developers basically shouldn't be
51:43 - messing with they're going to be set up
51:44 - once and you more or less don't touch
51:46 - them
51:47 - the developers custom settings are by
51:50 - default uh specified in this templates
51:52 - file however we don't want developers to
51:55 - be messing with these explicitly either
51:57 - this is just a template to show
51:59 - developers what they need to fill out
52:01 - however what do they do whenever they
52:03 - actually want to change their settings
52:04 - well what we are going to be doing is we
52:08 - first are going to be making a directory
52:11 - right here called local and it's due for
52:14 - my terminal it's probably uh
52:18 - always cool to learn some new commands
52:20 - if you don't know so I'm gonna be making
52:22 - a directory called local
52:25 - and now you can see we have this local
52:28 - directory right here
52:30 - and then what I'm going to be doing is
52:33 - I'm going to be copying over
52:35 - probably shouldn't have
52:38 - minimize that but I'm going to be
52:40 - copying over the settings from this
52:44 - template file to my local directory
52:46 - right here so how do we do that well let
52:50 - me just scroll down a little bit
52:52 - if you do CP I'm going to copy it from
52:56 - it's in core and then it's in Project
53:00 - settings
53:01 - templates and then it's
53:04 - settings.dev.py where do I want to copy
53:07 - it to well the current directory there's
53:09 - a directory called local
53:12 - and I just wanna basically name the same
53:15 - thing settings dot Dev Dot py and I'm
53:19 - gonna run that and now we should see
53:22 - that this file which was in the
53:24 - templates directory is now in my local
53:29 - slash
53:30 - settings.dev.py and by the way the
53:33 - reason that I
53:35 - um also like to run these commands
53:38 - rather than just saying
53:40 - go ahead and right click and new file
53:42 - this and that is because now what I can
53:45 - do is copy these and stick them in the
53:47 - readme
53:49 - pull that open and we're going to be
53:52 - cleaning all this up
53:54 - in a bit as well I just want to kind of
53:59 - pretty much make sure I don't forget
54:01 - anything
54:03 - so okay
54:05 - so as part of the project setup we're
54:07 - going to be running these demands and
54:09 - I'll show you how to kind of format this
54:10 - so it looks like code and make
54:12 - everything prettier but right now like I
54:14 - said it's just kind of a placeholder
54:17 - so okay
54:19 - so now we have our basic uh pretty much
54:24 - all of our basic settings structure
54:26 - setup however things aren't really tied
54:29 - together anyway for example we didn't
54:31 - really specify Hey whenever we run our
54:34 - project we want to First pull all these
54:37 - and then apply any overrides yada yada
54:40 - so how do we do that
54:42 - well in order to specify everything
54:45 - exactly how we want we need to write a
54:47 - couple custom functions for ourselves
54:49 - they're going to help with this entire
54:51 - process now for these utility functions
54:55 - I don't want to stick them under this uh
54:57 - settings package what I want to do is I
55:00 - want to create another package right
55:02 - alongside
55:04 - um this projects package and even though
55:08 - it's kind of weird right now but this
55:10 - you can name it core
55:13 - since we're going to be putting quite a
55:16 - few things in here and they're kind of
55:17 - like core
55:19 - uh you'll kind of see they're like core
55:21 - functionality oh we could almost name
55:23 - this General since this functionality is
55:25 - going to be General to really this
55:27 - entire project
55:28 - uh a lot of reusable generic
55:31 - functionality but either way
55:34 - inside here I'm just going to make
55:35 - another package called utils and let me
55:37 - close out everything else right now
55:40 - so in here we're gonna have the first
55:43 - thing that we're going to write
55:45 - inside a module called collections
55:49 - and the one function that we're going to
55:50 - be writing right now is a function to
55:52 - basically uh allow us to pack pass in
55:56 - two dictionaries one is like the
55:57 - original uh dict and the other one are
56:01 - your new values and what we're going to
56:03 - be doing is we're going to be basically
56:05 - a way to update a dictionary but we
56:08 - update it in a way that if there are any
56:10 - nested dictionaries or nested values
56:12 - those get updated as well and the reason
56:15 - that we're going to be doing this just
56:16 - is a little
56:18 - kind of give you some meaning behind
56:20 - everything is let's say that we are in
56:25 - um okay so let's say our we want to
56:27 - update our database settings now right
56:29 - now we only have a couple levels right
56:31 - here this is our default database the
56:34 - engine we're using sqlite but we're
56:35 - going to be changing it to postgres and
56:37 - let's say that you wanted to change the
56:40 - name of the database or the password or
56:42 - something like that maybe I don't know
56:44 - well with this function that we're going
56:46 - to write is going to allow us to do is
56:48 - it allows us to pass in certain Keys
56:51 - even if they're deeply nested and it's
56:54 - just going to update those values rather
56:57 - than having to like uh recreate this
56:59 - entire thing on an outer scope and then
57:01 - pass it in
57:03 - um it's probably easier just to kind of
57:04 - write this out so I'm going to create a
57:06 - function called Deep
57:11 - update
57:12 - and we're going to be passing in the
57:15 - base stick or the original dict and
57:18 - we'll say update with which is going to
57:20 - be the new dictionary and I'll just
57:23 - write a comment what we're gonna do
57:25 - actually I don't need a comment I'm
57:26 - coming in with my voice right now
57:28 - so the way that we're going to do to do
57:31 - this is pretty much
57:33 - iterate over this new dictionary the new
57:37 - values that we want and for each of
57:39 - those items we're basically going to pop
57:42 - apply the new values to the original
57:45 - dictionary
57:46 - so we'll see how this is done for a key
57:50 - value in update with dots items
57:56 - go ahead and first we need to check if
57:58 - the value that we're trying to apply is
58:01 - a dictionary itself so we'll say if
58:05 - is instance and what is an instance well
58:08 - check the value and then we're going to
58:11 - check if it's a dictionary now if so
58:14 - what we want to do is we want to get the
58:16 - value from basically the base stick in
58:21 - Basic Value
58:24 - the equivalent value and that's equal to
58:26 - the base stick dot get
58:29 - key
58:31 - all right so we're saying that if the
58:34 - value from the new dictionary is indeed
58:36 - a dictionary then the first thing we
58:38 - want to do is get like the equivalent
58:40 - value from the base dictionary and what
58:45 - we want to do here is we want to check
58:47 - if the original value is also a
58:49 - dictionary because if the original value
58:52 - in the new value are both dictionaries
58:54 - then what we're going to do is we're
58:56 - going to update basically run the same
58:57 - function again basically creating a
59:00 - recursive function right now now if the
59:02 - original value is not a dictionary then
59:05 - we're just going to set it to the new
59:07 - value and you guys that's uh a lot to
59:11 - take in in about two seconds you're
59:13 - going to see what's going on so if is
59:16 - instance
59:17 - that Basic Value we want to check if
59:20 - this is a dictionary as well then we're
59:23 - just going to call a deep update and
59:25 - this is going to take the base dict
59:27 - value
59:29 - in that new value
59:32 - referencing this right here
59:35 - and we can just say else if it is not
59:38 - addict then what we want to do is just
59:40 - update the basic
59:44 - key
59:45 - with that new value all right pretty
59:48 - cool so this was for this item saying
59:53 - what to do if it is addict
59:56 - however now we can say what to do if the
59:59 - new value is not addict and in that case
60:02 - what we want to do is just say the basic
60:05 - actually we can just copy this
60:11 - all right right like that and the last
60:15 - thing that we need to do is just return
60:19 - the base dick sense this is essentially
60:22 - the goal of it to um update this basic
60:25 - with the nested values
60:28 - all right so let me just I'm sure uh
60:32 - iterate over the new dictionary check if
60:34 - the values addict and then
60:38 - compare it with the base value of this
60:41 - update it again and fall through just
60:45 - update it okay
60:46 - actually let me pause this and just add
60:49 - some comments real quick
60:53 - all right I had some comments so
60:55 - whenever I uh push this up to GitHub if
60:57 - you're peeking back at it later on then
61:00 - um yeah don't have to watch this whole
61:01 - tutorial but unless you wanna that's
61:03 - cool too all right so we got this
61:05 - utility function written now another
61:08 - thing that we're going to need is I
61:11 - might as well just write it so I'm going
61:13 - to create a new uh file called
61:16 - miscellaneous
61:17 - and in here we're going to be making
61:20 - that yaml function and let me just go
61:24 - ahead and get things started so yaml and
61:26 - by the ammo function I mean back here
61:29 - remember when we added this pie ammo
61:31 - well this needs to be installed for this
61:34 - yaml package right here but either way
61:37 - what we're going to be doing is we're
61:40 - going to write a function called
61:42 - yaml
61:44 - coerce course how do you even say that
61:47 - who knows quarters of course all right
61:50 - and in here what this is going to allow
61:54 - is basically us to pass in a string
61:58 - dictionary and it's going to convert it
62:01 - to proper uh python now we named this
62:04 - yaml course because
62:06 - by default this functionality is
62:09 - um
62:10 - is kind of for loading in yaml which we
62:12 - can probably set up this way uh I don't
62:14 - use it but either way
62:17 - what actually let me show you why this
62:19 - is useful and it's going to make sense
62:22 - in a bit
62:23 - so check this out so let's go back to
62:26 - our database example and say that we are
62:29 - writing a Docker file however we want to
62:32 - override our database let's say we're
62:34 - getting ready to deploy to production
62:36 - and our production database has a new
62:39 - name a new user a new password well in
62:41 - our Docker file it doesn't take python
62:44 - syntax in fact our dockerfile it
62:48 - doesn't give us a whole lot of
62:50 - flexibility so what we need to do is we
62:54 - need to figure out how we can use this
62:56 - like a nested dictionary in a Docker
62:58 - file so what we're going to be doing is
63:01 - we're basically going to be stringifying
63:02 - everything so in our Docker fire file we
63:05 - just have one long string that's
63:07 - basically going to resemble this
63:10 - dictionary something like this
63:14 - right here oh no I'm getting yelled at
63:16 - by my IDE but we can basically pass in
63:19 - an entire nested dictionary
63:22 - as a string and then what this is going
63:25 - to do is basically convert that to a
63:29 - python dictionary so it's just super
63:31 - easy to do it this way convert the value
63:33 - to proper python actually let me add
63:35 - that comment that's all this function is
63:36 - going to do
63:41 - and now I'll show you how to do this
63:43 - we'll say if is instance
63:46 - we just want to check if that value is a
63:48 - string and then if so we're just going
63:50 - to return
63:51 - yaml dot load and what we can do is
63:56 - we're going to create a basically a um a
64:00 - tiny bit of yaml and then just convert
64:02 - it to python super quick so we'll say if
64:05 - you actually you can do it the shorthand
64:07 - value
64:10 - since you can use f strings now so what
64:13 - we can do is we're just going to be
64:15 - creating this tiny snippet of yaml under
64:18 - the key of dummy and then once we do
64:21 - that we can load it in or basically uh
64:24 - convert it so I'm going to say the
64:27 - loader is equal to yaml dot safe
64:32 - loader there we go and what value are we
64:36 - trying to pick off from this
64:38 - dummy right here
64:40 - now if it's not a string then we can
64:43 - just go ahead and return the value
64:47 - and all right so I believe that's all we
64:51 - need so basically whenever we get passed
64:54 - in a
64:56 - um a string that references a nested
64:59 - dictionary it's basically going to
65:02 - convert it to yaml which is going to
65:04 - convert it to Python and then we're just
65:06 - going to be returning the value from it
65:07 - which is now the python value and
65:10 - actually let me pause this and add a
65:12 - comment so all that makes sense as well
65:15 - all right so I added some comments uh
65:17 - yeah I'm a loader turns a python object
65:20 - so this is going to return to python
65:22 - object and I also gave a little example
65:25 - of what we're actually going to be using
65:26 - this uh basically to convert a string
65:30 - dictionary such as this right here to an
65:33 - actual python dict and I also added this
65:38 - comment right here it's useful because
65:39 - sometimes we need the stringify settings
65:41 - this way such as in Docker files it
65:43 - doesn't like python but it loves strings
65:45 - so basically to convert these to python
65:48 - that we can use and by the way I know
65:51 - just creating a bunch of these utility
65:53 - functions and not really seeing how they
65:55 - fit into our settings is a little bit
65:57 - confusing right now
65:59 - but I do want to say that we do have one
66:02 - more utility function to write and in
66:05 - about 10 minutes we're going to see how
66:06 - everything is going to come together to
66:08 - create this beautiful settings
66:10 - management system or at least I think
66:12 - it's beautiful so just bear with me a
66:15 - little bit longer and less I'll say
66:18 - maybe utility settings that file that
66:21 - we're going to write I can't even talk
66:23 - anymore uh inside utils just write
66:26 - settings.pui and one small function you
66:29 - can import
66:30 - OS
66:33 - and then I'm also
66:36 - going to import
66:38 - like a structuring this way I also want
66:40 - to import this function right here and
66:43 - you'll see why in just a second so from
66:47 - Miss and poor yaml course
66:52 - and all right
66:53 - so the function that I'm going to be
66:55 - creating right now is going to basically
66:59 - pull any specific environment variables
67:03 - from the actual system environment so we
67:07 - can use those now why would we want to
67:10 - do this it's because whenever we are
67:14 - well there's probably a couple different
67:16 - places but the one I can remember right
67:18 - now is that whenever we are going to be
67:21 - setting up and dockerizing this project
67:24 - we want to be able to set environment
67:27 - variables from our Docker container
67:30 - now those are basically the equivalent
67:33 - of setting system environment variables
67:36 - like I would do
67:38 - like uh right here in my terminal now we
67:42 - want to say if there are any relevant
67:45 - environment variables from the overall
67:47 - parent system like uh you know just
67:49 - locally or Docker container or whatever
67:51 - pull those out and apply them to this
67:54 - project now
67:56 - what we want to be sure of is is it's
67:58 - just not pulling all of our environment
68:00 - variables because you know we may have
68:03 - some for other projects or we may have
68:05 - some for other applications or we may
68:07 - have some environment variables that
68:08 - were just like playing around with
68:09 - something we don't just want to pull
68:11 - everything in from our environment and
68:14 - just like blindly apply it to our
68:15 - project
68:16 - so how do we kind of uh handle this well
68:20 - what we're going to be doing is we're
68:22 - going to be namespacing our own custom
68:24 - environment variables from the system
68:26 - and what we can do is we can just say
68:29 - that whenever we have an environment
68:30 - variable and it's typically named the
68:33 - name of your project and just something
68:35 - like settings
68:37 - whenever we have an environment variable
68:40 - like in Docker is one that we're going
68:42 - to be using or we can say something like
68:44 - I don't know even like a DB name
68:46 - something like that basically we're
68:49 - going to be looking for any system
68:51 - environment variables that are prefixed
68:54 - with this prefix and we're going to be
68:56 - making it a constant so we don't have to
68:58 - actually type the string out every time
69:00 - but we're going to be looking for these
69:02 - specific environment variables and if we
69:04 - find any then we're just going to strip
69:06 - this away and that this
69:09 - becomes what gets applied so it's kind
69:12 - of weird just to explain but you know
69:14 - just uh kind of give some meaning behind
69:16 - this function right now so I'm going to
69:18 - say get settings from
69:22 - environment and I'm also just gonna pass
69:26 - in the prefix right here to keep this
69:28 - function rather generic
69:30 - and then remember what we're going to be
69:32 - needing to do is kind of slice off that
69:35 - prefix because what comes after that
69:37 - first underscore is like the actual name
69:39 - of the environment variable or how we
69:41 - want to treat it so in order to do this
69:45 - I'll just say prefix dot Ling is equal
69:48 - to the length of the prefix just so we
69:51 - know how much text to slice off
69:53 - and what this function is going to be
69:55 - returning
69:56 - is a new dictionary and it's basically
70:00 - going to be a dictionary of all your
70:01 - clean up environment variables without
70:04 - that core setting underscore prefix
70:07 - so the key of this new dictionary is
70:10 - gonna just be equal to prefix length
70:14 - and the value
70:17 - uh we'll save this yaml course value and
70:22 - for this we're going to be actually it
70:25 - probably makes more sense if I just
70:27 - write it this way so for a key value
70:31 - in OS dot environment items so basically
70:36 - iterate through all of your environment
70:38 - variables and for each of those check if
70:43 - the key
70:48 - starts with I thought I was going to get
70:50 - some autocomplete there prefix
70:53 - all right so we're going to be passing
70:55 - in that prefix and if any of our
70:57 - environment variables start with that
70:59 - prefix then just filter those out and
71:02 - that
71:07 - is why I typed the value right here let
71:09 - me actually minimize this all right so
71:11 - now we can kind of see what's going on
71:12 - so again the prefix that we're going to
71:15 - be passing in this is just dummy code
71:16 - right here but it's going to be
71:18 - something like core
71:21 - settings underscore so again it's going
71:25 - to iterate iterate through all of the
71:27 - environment variables check the ones
71:29 - that start with this prefix and let's
71:32 - say that there's
71:34 - a environment variable called this what
71:37 - it's going to do is it's going to
71:40 - actually might as well do this let's say
71:43 - that we have an environment variable
71:44 - called core settings in Docker one what
71:47 - this is going to return is a dictionary
71:50 - whose value is in docker
71:54 - or excuse me the key is in Docker and
71:56 - the value is 1. so convert this to a
72:00 - dictionary of these
72:02 - that's all it's doing
72:04 - all right so now that we got all of our
72:07 - boring utility functions out of the way
72:09 - let's go ahead and close all those and
72:11 - hop into the good stuff
72:13 - my good stuff I mean seeing how all of
72:16 - this fits together
72:18 - so in it's wrong in it so in settings in
72:22 - it py remember this is kind of where
72:25 - we're going to aggregate
72:27 - um really all of this logic
72:29 - so
72:30 - the first thing that we need to do is
72:33 - import a couple things and that's OS dot
72:35 - pass
72:36 - and then we'll say actually
72:39 - passively I've got passed in what else
72:41 - do you need okay
72:42 - so you know that split settings package
72:45 - that we download that I said that it's a
72:47 - way to kind of aggregate multiple
72:49 - settings files into one well we are
72:53 - going to need some things from that so
72:55 - from split settings dot tools we're
72:58 - going to import include
73:00 - and we also are going to import optional
73:04 - and what this include is going to be
73:09 - is it's going to take
73:12 - um however many arguments you pass in
73:14 - you're basically going to be passing a
73:16 - bunch of settings file like file one
73:17 - file two so on and so forth and it's
73:20 - gonna
73:22 - um aggregate them together in this
73:24 - optional one right here this keyword is
73:28 - saying that if you have a file like file
73:31 - three in here in its uh labeled as
73:35 - optional this means that this file may
73:38 - exist or it may not exist so we would or
73:42 - we actually are going to be using this
73:43 - to specify this local settings file
73:46 - right here since if developers don't
73:50 - have any of their own uh local settings
73:52 - files then that's fine but um yeah
73:55 - that's basically the syntax of it
73:58 - so okay what else are we gonna need so
74:01 - let's
74:02 - actually let me remove this right now
74:04 - these bugs are kind of annoying me so
74:07 - another thing that we want is to create
74:09 - a constant for that prefix
74:11 - so let me actually add a comment
74:15 - are
74:21 - and again for you you probably wanna
74:24 - um change the value of this to be
74:27 - different depending on your the actual
74:28 - name of your project but for me I'm just
74:32 - going to name this EnV v-a-r environment
74:35 - variable
74:37 - settings prefix and for the value I'll
74:41 - just say core
74:43 - settings underscore so again whenever we
74:46 - have an environment variable that we
74:49 - want to be pulled in from basically the
74:52 - parent system whether it's Docker or my
74:54 - actual system I'm developing on which is
74:57 - not going to be too common but hey who
74:58 - knows we just need to make sure to
75:00 - prefix it with this string of text right
75:04 - here
75:04 - now before we get into actually
75:07 - aggregating all these files and so on
75:09 - and so forth I also want to make another
75:11 - constant for a local settings path
75:14 - so local
75:16 - settings passed and I'm just going to
75:20 - say this is equal to uh OS dot get
75:24 - from the environment and I'll make it an
75:27 - F string
75:28 - so this
75:30 - this path right here
75:32 - um we are going to allow the developers
75:35 - to specify their own settings file and
75:38 - that's because
75:40 - by default we can just assume that is in
75:43 - this location but let's say that they
75:45 - wanted to test something out but they
75:47 - didn't want to update this file right
75:50 - here maybe they just wanted to create a
75:53 - similar file for like testing a new
75:55 - database or logging something
75:58 - differently so on and so forth and to
76:01 - avoid you know having to comment this
76:02 - out and create new ones so on and so
76:04 - forth we can just allow them to create a
76:06 - new file and just update the path of
76:08 - where the local development settings are
76:11 - and we'll say that
76:14 - um again this is going to be optional as
76:16 - well but we'll say that if they have a
76:20 - custom one
76:22 - then just go ahead and it's going to be
76:25 - local
76:27 - actually this is this right here
76:30 - so if they do have a custom local
76:33 - settings file then they're going to be
76:36 - passing in an environment variable
76:37 - telling it telling us where it is and
76:41 - it's basically going to be
76:43 - this is going to be the value or excuse
76:46 - me this is going to be the key and then
76:48 - the path is going to be the value
76:49 - but yeah we'll just reference this right
76:52 - here and now what we need to say is if
76:55 - there is not a local settings path and
76:58 - there's not going to be one the majority
77:00 - of the time because they're just going
77:01 - to be using this one by default what we
77:04 - can say is that the local settings path
77:06 - is just equal to
77:08 - local slash settings
77:12 - actually let me just copy this name so
77:14 - I'll make sure I don't
77:15 - refactor rename this is what I do
77:18 - whenever I need to copy this name pretty
77:20 - sure there's an easier way but there you
77:22 - go all right so if they don't give us a
77:24 - custom settings path or a settings file
77:26 - then we'll just assume that they want to
77:28 - use this one right here and
77:31 - after this
77:34 - uh what we can do now is just to make
77:36 - sure that the paths are always
77:40 - um formatted consistently we can check
77:42 - if the settings path is a relative path
77:44 - or an absolute one and if it's relative
77:47 - we're just going to convert it to
77:48 - Absolute so from there forward we're
77:51 - just always working with a standardized
77:54 - absolute path to whatever settings file
77:56 - that we need all right so we'll say if
77:59 - the local settings path is not absolute
78:02 - by saying if not OS
78:04 - dot path dot is abs
78:10 - or didn't that autocomplete it's kind of
78:11 - scaring me now all right if the local
78:14 - settings path is not absolute then what
78:17 - we're going to do is just update it
78:19 - so we have the
78:23 - base directory and then the local
78:26 - settings path all right so if the local
78:30 - settings path is not absolute then just
78:32 - go ahead and prefix it with our base
78:34 - directory which is this right here
78:36 - that's essentially going to convert it
78:38 - to an absolute path
78:40 - and yeah I think we're good to go now
78:42 - all right
78:43 - so the last command that we need is that
78:46 - include
78:48 - function right here and again like I
78:51 - said what this is going to do is allow
78:53 - us to include
78:54 - um various settings files and it's going
78:56 - to aggregate it as one now right now the
79:00 - really the only settings files that we
79:03 - have is this base
79:04 - that py settings file and also this
79:08 - custom
79:09 - should I organize it like this all right
79:11 - and also this custom like local
79:14 - development settings file right there so
79:16 - no matter what we always want to include
79:19 - base.py it's always going to be there no
79:22 - developers ever supposed to delete it or
79:24 - anything so we can just write that in
79:26 - just like that
79:27 - now after this we want to go ahead and
79:32 - write an optional local settings path
79:34 - because like I said
79:36 - this may exist it may not
79:40 - um either way check if there is one and
79:42 - if so just include it
79:44 - and that should be oh good to go right
79:48 - there in
79:50 - we do have some additional let me think
79:54 - about this so we're going to be making a
79:56 - custom environment variables in Docker
79:58 - but I think we can actually test this
80:00 - out right now
80:02 - and in order I like this here for some
80:05 - reason in order to test this real quick
80:08 - let me just where do I want to go
80:11 - I'm just going to my URLs since this is
80:13 - going to load after
80:16 - the settings and I'm just going to write
80:18 - some a quick dummy code just to make
80:21 - sure that the settings are being pulled
80:22 - in correctly and that is from
80:25 - Django Dot configuration I just want to
80:29 - import settings
80:31 - and what I'm going to do is I'm gonna
80:34 - print out
80:35 - settings. debug
80:40 - and let me just
80:42 - print out this secret key as well
80:44 - usually you don't want to do this
80:45 - especially on YouTube but well not
80:48 - actually going to be deploying this
80:49 - project or anything so okay now the
80:52 - reason that I want to test it right now
80:54 - is because everything I believe should
80:56 - be hooked up where we're basically
80:59 - saying that these are our base settings
81:01 - that we're going to be using for every
81:03 - environment now for these base settings
81:07 - since we had base and then after we're
81:10 - including this local settings path which
81:12 - is this right here we're basically going
81:15 - to be overriding or adding any of the
81:18 - settings to base that are in here so if
81:21 - everything worked properly this debug
81:23 - which was false by default in a way
81:26 - should be true now in the secret key
81:29 - which is not implemented because we want
81:32 - each environment to implement it own
81:34 - their own explicitly
81:36 - so if everything's working correctly
81:38 - then when I run this I should see that
81:40 - debug is true and that secret key is
81:44 - this ends in teh
81:46 - so let's just go ahead and test that out
81:48 - right now
81:50 - [Music]
81:56 - make a run server and okay true and that
82:00 - this ends in t e h beautiful
82:05 - all right so uh those settings are good
82:09 - to go
82:10 - um any developer can just go ahead and
82:14 - tweak their own actually did I include
82:16 - this in my ignore
82:19 - make sure
82:24 - all right all right
82:26 - so let me where to go from here no no no
82:30 - okay let me always like to keep stuff uh
82:33 - nice and clean
82:35 - I can't believe uh when I see people on
82:37 - Chrome uh and they have like uh 60 tabs
82:40 - open I'm like oh man I just want to
82:42 - steal their computer and close all their
82:45 - dad but uh all right uh let's see okay
82:49 - so the next thing that we're gonna do is
82:52 - we're actually going to add another
82:54 - settings file right next to base and I'm
82:57 - gonna call this
82:59 - custom okay
83:01 - so what is going to go in here well let
83:06 - me actually add a comment and I'll say
83:08 - settings specific to this application
83:11 - only
83:15 - and by this I'll specify
83:18 - tries
83:21 - I'll specify that this means no Django
83:23 - or third
83:25 - party settings all right
83:28 - so as our project scales we're going to
83:31 - have more settings in addition to this
83:34 - um pretty soon we're going to be setting
83:36 - up settings for like Django filters
83:38 - Django rest framework Docker so on and
83:40 - so forth a lot of Django related
83:42 - packages though and
83:45 - in addition to that we're also going to
83:48 - want global settings just for our
83:51 - project and by that I mean like let's
83:53 - say we're making like a store we'll say
83:55 - like uh
83:57 - this would be stupid but I can't think
83:58 - of anything else right now like uh maybe
84:00 - the tax like so tax is like 0.07 or
84:04 - we'll say uh the global color theme or
84:07 - something like that basically any
84:09 - environment variables that are only
84:11 - going to be in this app in really not
84:14 - like every single Django app out there
84:16 - so one thing that I want to specify in
84:19 - here by default is in docker
84:22 - I'm going to be setting this to false
84:24 - so
84:26 - by default whenever we're running this
84:28 - we're gonna basically be telling our
84:30 - project that you are not running in a
84:34 - Docker environment and that's just
84:36 - because uh kind of throughout our
84:38 - project some things are going to be
84:40 - different if you're in Docker and if
84:43 - you're running outside of Docker so yeah
84:45 - it's just that flag is going to come in
84:47 - handy quite a bit so either way now that
84:50 - we have this additional settings file
84:52 - it's pretty uh Bare Bones right now but
84:55 - we need to make sure that we include it
84:56 - right here
84:58 - so custom.py
85:01 - again this is our these are our base
85:03 - Django settings and these are our custom
85:05 - application settings
85:08 - now another thing that I want to do is I
85:11 - want to create an additional settings
85:13 - file and remember these utility
85:16 - functions that created for example we
85:20 - created this function to pull all those
85:24 - environment variables and kind of apply
85:26 - those
85:27 - or convert them to a dictionary right
85:29 - here and that we also wrote this deep
85:32 - update to update a one dictionary with
85:35 - another dictionary well now we're going
85:38 - to see why these are coming in handy
85:41 - so I'm gonna name this file again under
85:46 - here as well under settings I'm going to
85:48 - create a new python file and I'm going
85:50 - to name it n vars envars.py
85:55 - in what this is going to do is it's
85:58 - going to use actually those two
86:00 - functions that we just talked about so
86:01 - let me import those first core dot core
86:03 - dot utils collections deep update and
86:07 - from core core utils the settings we
86:11 - want to import git settings from
86:13 - environment
86:16 - and there's a plane flying out okay
86:18 - so
86:20 - actually let me pause it and uh let me
86:22 - pause this video and add a comment and
86:24 - it's just going to be a lot more clear
86:26 - what's going on
86:29 - all right so here's a little cheat sheet
86:31 - of what is going on in the logic that
86:33 - we're going to be writing right here and
86:34 - by the way this is only going to be one
86:36 - line of code so you know not that much
86:38 - but basically what the logic we're going
86:41 - to be writing is going to do is it's
86:43 - going to look for any environment
86:44 - variables that are prefixed with this
86:48 - specific prefix again this is going to
86:50 - be different depending on your
86:52 - um your project
86:53 - but it's going to be looking for these
86:55 - environment variables and then whenever
86:57 - it finds one it's going to be stripping
86:59 - this off and it's going to be
87:02 - essentially converting any of these
87:04 - values to Python and then applying it to
87:08 - our globals which is just a dictionary
87:10 - of your Global variables basically
87:12 - converting this
87:14 - into a global variable or a regular
87:17 - setting that our project can use
87:20 - and actually let me uh specify this real
87:24 - quick so I'll say globals
87:27 - this is a
87:32 - variables it's not really that well I
87:35 - don't want to say not that common but uh
87:36 - you know just a little helper all right
87:38 - so how do we do this how do we update
87:40 - our globals with these you know nice
87:43 - clean uh updated settings well if you do
87:46 - deep update
87:48 - again let's go ahead and look at the
87:49 - signature for this so whenever we update
87:52 - something we're going to be passing in
87:54 - in
87:55 - um we'll say original dictionary and
87:57 - then the new dictionary that we want to
87:59 - basically apply
88:02 - to this original one so this original
88:05 - one are just our Global variables and
88:09 - again this is something that's built in
88:11 - with python
88:12 - and
88:14 - how do we get that new cleaned up
88:17 - um python dict what we do is we use this
88:21 - function get settings from environment
88:23 - we'll take a look at the signature for
88:24 - this right here
88:26 - and what this is going to do is it's
88:27 - going to pull all those settings from
88:29 - our environment clean them up and then
88:31 - return a nice python value and again
88:36 - this is where if we pass in like a
88:38 - string dictionary is going to going to
88:40 - convert it to a python dictionary but
88:42 - basically all of that we wrote already
88:45 - and the last thing that we actually need
88:48 - to pass in this get settings from
88:50 - environment
88:51 - is we need to pass in the prefix and
88:55 - what is this prefix it's this right here
88:59 - so we're going to be passing that in
89:02 - right here now actually this is another
89:05 - interesting thing
89:07 - uh let me actually update this real
89:09 - quick so right after this local settings
89:14 - path what we can do
89:17 - is we want to include this file right
89:20 - here which is our environment variable
89:24 - settings EnV v-a-r-s-p-y envars.py
89:31 - all right
89:32 - so we are basically telling Django
89:36 - whenever you're setting up our project
89:37 - configuring all the settings first load
89:40 - in base dot py let me close these other
89:43 - files first load in base dot py which
89:47 - are your base Django settings then load
89:49 - in any custom settings that are specific
89:52 - to this application only after that
89:55 - apply any local settings
89:59 - um yeah pretty much just that local
90:00 - settings from that specific developer
90:03 - and then after this look for the system
90:07 - environment variables which are right
90:10 - here
90:12 - and convert these to settings basically
90:17 - standard settings that we can use
90:18 - throughout the project now what we see
90:21 - here is something pretty interesting and
90:23 - that is we are including this nvar
90:26 - settings prefix but we didn't import it
90:29 - so is this going to break well believe
90:32 - it or not it is not going to why is that
90:35 - is because even though we didn't import
90:37 - it from this file whenever this include
90:42 - or excuse me I'll say it like this
90:43 - whenever split settings is patching
90:46 - together like this master setting
90:49 - structure what it basically does is this
90:51 - it's going to go one by one and say okay
90:53 - what's in base.py okay I'm more or less
90:56 - going to copy everything here and just
90:58 - keep it in memory for a second
91:00 - now what's the next thing you want me to
91:02 - apply well it's this custom settings
91:04 - right here so it basically takes every
91:07 - setting that it already has in memory
91:09 - which is basically all the ones from
91:11 - base.poi and it more or less like pastes
91:14 - it above here so I say that because if
91:16 - there are any thing in this file that
91:19 - references any of these then that's fine
91:23 - so
91:25 - we may get some syntax issues because
91:27 - the IDE doesn't really like it but
91:29 - that's essentially what's happening so
91:31 - by the time we get to this nvars that
91:35 - Pui file right here we can actually use
91:37 - any of the settings from here
91:40 - and from here and actually even the ones
91:43 - from in here you can imagine that all
91:46 - that's kind of copied and if we pasted
91:49 - all of those above here then those can
91:51 - get applied to here too
91:54 - so as part of this it also includes uh
91:59 - this right here so long story short all
92:03 - of this is kind of already included in
92:06 - here however even though we can write it
92:09 - this way my IDE just doesn't really like
92:11 - it because it doesn't know
92:13 - um what split settings is doing behind
92:14 - the scenes so just so I can avoid this
92:17 - and not always have this error and my
92:19 - IDE telling me I did something wrong
92:21 - when really it's like supposed to be set
92:24 - up this way I'm just gonna have type
92:27 - ignore and then basically just telling
92:30 - my IDE to ignore this this is actually
92:32 - how I want it it's not an issue there
92:34 - you go
92:36 - but yeah just kind of know that whenever
92:38 - you're applying your settings behind the
92:40 - scenes it kind of applies them in
92:42 - aggregate like that one by one so you
92:44 - don't always have to import everything
92:45 - and now this I believe is
92:50 - good to go let me just go ahead and run
92:52 - this real quick just to make sure that
92:54 - nothing broke
92:56 - so make run server and okay I still have
92:59 - those print statements that I probably
93:01 - want to get rid of and actually do that
93:03 - right now
93:04 - those are in our urls
93:07 - we verify that it's working don't need
93:09 - to test those anymore and all right
93:13 - now the last thing
93:16 - that we want to do is we want to add one
93:20 - more settings file for now and that is
93:22 - our Docker settings and this settings
93:25 - file is going to be pretty lean right
93:27 - now since we don't even have Docker set
93:29 - up however I do just want to have it in
93:31 - here just to get our you know kind of
93:33 - our settings structure finalized but
93:37 - either way go ahead and create a new
93:38 - settings file and let me clean some of
93:40 - this up let's keep basing here I'm going
93:42 - to show you guys some in a second
93:44 - by either way create a new settings file
93:46 - we're just going to call it Docker and
93:49 - what can we do right now we'll check it
93:52 - out so we're actually going to be
93:54 - um using this exact environment variable
93:58 - so by the time we get to actually let me
94:02 - do it like this
94:03 - so we are going to include the docker
94:06 - settings right after
94:09 - um this envirus
94:11 - right here let me pull this out in order
94:15 - so we're going to be loading in base
94:16 - then envar's Docker some other ones but
94:19 - that's the order we're going to be using
94:20 - so by the time we get to docker
94:23 - these environment variables are
94:25 - essentially going to be converted to
94:27 - globals so we can more or less just
94:29 - reference
94:30 - um this name from this Docker file so
94:33 - what do I mean by that I mean we can say
94:35 - something like if Docker and again we
94:39 - have that issue with the IDE
94:43 - not liking it because we didn't import
94:45 - it
94:46 - even though split setting is kind of
94:48 - like imported everything behind the
94:50 - scenes manually so for here we're just
94:53 - going to make a simple check and what
94:55 - we're going to be checking is that if we
94:57 - are running this project in Docker mode
94:59 - and we're going to be deploying this in
95:02 - Docker by the way but either way I say
95:04 - this because
95:06 - where's my middleware okay whenever
95:08 - we're running in Docker mode one thing
95:09 - that we want to do is we want to make
95:12 - sure that well not only this package
95:14 - right here but possibly some other
95:17 - um middleware is included
95:19 - but either way the logic I'm going to be
95:21 - writing is if you're in Docker then we
95:23 - need to make sure that we're running
95:25 - this middleware
95:26 - so how do we do this well let me just go
95:28 - ahead and copy that and I'll say we want
95:31 - to assert or make sure that
95:35 - the middleware
95:37 - the beginning of it
95:40 - is exactly equal to
95:42 - this all right
95:45 - so we're getting a few warnings from the
95:49 - IDE because it's saying hey I don't know
95:52 - what indocker is you're not importing
95:53 - anywhere and also what the heck is this
95:55 - middleware however all of this is going
95:58 - to be included because this middleware
96:00 - is going to come from the base settings
96:03 - and the soccer is going to come from our
96:05 - environment variables and both of those
96:06 - are going to be included by the time we
96:09 - get to this Docker file and then we're
96:11 - just going to test that the
96:15 - um basically this is just saying that
96:17 - this is included in the first section of
96:19 - the middleware list
96:22 - all right so actually let me do
96:25 - something else too just to kind of test
96:28 - this out okay so if we are in Docker and
96:32 - I'm going to delete this in just a
96:33 - second I'll say running in
96:36 - Docker mode
96:40 - actually running in Docker I don't know
96:42 - why that bothers me I'm going to delete
96:43 - in about two seconds but just to show
96:45 - you guys
96:47 - um that everything is working when we
96:49 - are running in Docker mode we're just
96:51 - going to log this out since you know
96:53 - this doesn't give us any indication if
96:55 - it worked or not
96:56 - so now everything looks set up properly
96:59 - the first thing I'm going to do after
97:00 - this is just run this real quick
97:03 - and okay I don't see anything running in
97:06 - Docker and that is expected because we
97:09 - actually didn't set that environment
97:10 - variable anywhere however the rest of
97:13 - the project look like it's all working
97:14 - nothing is broken at least
97:16 - so the last thing we have to do for now
97:18 - is just go ahead and actually let me
97:21 - pause my video and set this environment
97:24 - variable I actually don't want to do it
97:26 - um on screen just because you guys are
97:29 - going to see all my other environment
97:30 - variables I'm sure I have a bunch of
97:32 - secret keys in there and whatnot so let
97:34 - me just go ahead and pause this real
97:35 - quick and I'll set this environment
97:37 - variable in my own local system and then
97:40 - we'll make sure that uh everything is
97:42 - working correctly so one second
97:46 - all right so what I did is I went ahead
97:49 - and I updated my system or my Macs in
97:53 - environment variables
97:54 - and I also when I was testing this I did
97:57 - see that I had a one little typo
97:59 - um or a typo for our code but in this
98:01 - comment right here
98:03 - uh just in case you're following along
98:04 - line by line I had a core setting
98:08 - singular not plural however it's
98:11 - supposed to be course settings with an S
98:13 - so just updating this comment right here
98:15 - however now let me go ahead and make run
98:18 - server and we can now see it is indeed
98:21 - running in Docker mode
98:23 - so Docker settings uh everything is you
98:27 - know up and running correctly so what
98:30 - I'm going to do this do right now is
98:32 - just remove that since we don't actually
98:34 - need that
98:35 - and now that we've verified that yes
98:37 - this is working correctly uh our utility
98:40 - functions are pulling in the values
98:43 - correctly from our environment uh
98:45 - stripping out this prefix correctly
98:47 - converting these to Global values that
98:50 - are valid Python and all of our settings
98:53 - are pretty much set up again like I said
98:55 - as we install more packages
98:58 - in our application begins to scale we
99:01 - are going to likely need to add
99:02 - additional settings file almost
99:04 - certainly however for right now this is
99:06 - the basic structure
99:09 - so you know what this is probably good
99:11 - for this video too
99:13 - um so what I'm going to do is I'm going
99:15 - to make sure to remove that in Docker uh
99:18 - environment variable and then
99:22 - in the next video just making sure we
99:25 - don't need to cover anything else right
99:26 - now so in the next video we're going to
99:28 - be well we got a lot more to cover
99:30 - actually in terms of flake linting my
99:33 - pie editor config pre-commit and also we
99:40 - will set up some logging middleware
99:41 - we're going to be setting up Pi test we
99:44 - are going to be setting up Docker we
99:46 - talked about Docker a lot and didn't
99:48 - even set it up yet and then uh adding a
99:50 - license that's gonna take like two
99:51 - seconds
99:52 - setting up postgres and then after all
99:55 - that we are going to be learning how to
99:57 - uh set up some CI CD and actually deploy
100:00 - this to AWS getting a domain name
100:03 - setting up SSL
100:05 - and yeah pretty much doing everything
100:08 - like we would do for a production grade
100:10 - actual Django project
100:13 - so yeah we got a lot to cover but uh for
100:17 - now I think that's a good place to stop
100:19 - the video uh thank you for watching and
100:22 - I will see y'all later