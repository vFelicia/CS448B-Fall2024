00:00 - welcome back y'all and in this video
00:04 - what we're going to be doing hopefully
00:06 - is finishing up the remaining shop Logic
00:09 - for the back end
00:10 - now in between the last video and this
00:12 - one I did some thinking a little bit of
00:15 - pondering if you will and I kind of
00:19 - thought through some edge cases and some
00:21 - other things that are going to kind of
00:22 - simplify things in the future
00:24 - and by the way
00:26 - another thing that I want to mention
00:27 - real quick is that I hate when people
00:30 - have text on any screen and they kind of
00:33 - just read through it especially with
00:34 - like slideshows like what's the point
00:37 - why not just give this a piece of paper
00:38 - and we could read it ourselves but with
00:41 - that said
00:42 - um that's exactly what I'm gonna do
00:43 - right now and I'm gonna do this because
00:46 - I also want to think through this one
00:48 - more time and also explain what
00:51 - um kind of these changes are in detail
00:54 - so the first thing is order product
00:56 - creation
00:57 - so right now whenever we create an order
01:00 - what we are basically doing if I can
01:03 - pull up my model
01:04 - is in shop models order product so for
01:08 - each product in the cart
01:10 - or in other words for each of these cart
01:12 - products we're basically creating an
01:15 - order product from it in an all ordered
01:17 - product is is just two foreign Keys one
01:18 - to the order one to the product
01:21 - now
01:22 - the issue with that is that since this
01:27 - order product in other words these items
01:30 - right here are just a link to the
01:31 - product let's say once this is ordered
01:35 - the user goes ahead and they make some
01:37 - changes to it so even though you know
01:40 - this is kind of an extreme use case but
01:42 - say someone orders this wooden spoon
01:44 - well then as a seller I can come in and
01:46 - change this to
01:47 - um you know a piece of pizza or
01:49 - something like that well then on the
01:51 - buyer's order The Wooden Spoon that they
01:54 - ordered is gonna say piece of pizza now
01:56 - now of course that's an extreme example
01:59 - probably wouldn't happen but they can
02:00 - like change the image change the
02:02 - description say Hey you see this two
02:04 - small elephant figurines actually I'm
02:06 - going to change that to one small one
02:08 - after you ordered it so basically I want
02:10 - to ensure that at the point in time
02:12 - where the buyer orders something
02:14 - those items should not be changing after
02:17 - they order it
02:19 - so with that said that's what this first
02:21 - one is what I'm going to do whenever
02:23 - order is created is I'm going to take
02:25 - all that product data and just clone it
02:27 - over to an order product
02:29 - and these order products are not going
02:31 - to be editable
02:32 - so again like I said
02:35 - um the buyer's order should not change
02:37 - after ordering even if the seller
02:39 - updates that product later on
02:41 - and this is just a little technical
02:43 - thing I don't need to put the created
02:45 - modified date on it since the order
02:48 - products are just going to have the same
02:49 - created and modified date is the parent
02:51 - order
02:52 - and even though
02:55 - the order products are going to have all
02:58 - the same information as the product I
03:00 - still want to keep a foreign key to the
03:02 - product in that way
03:05 - let me pull this up
03:07 - that way let's say that you're a seller
03:09 - and you want to view this product you
03:11 - can still see like all the related
03:14 - um order products or orders that it's on
03:16 - uh just good like housekeeping so
03:20 - next order of business probably
03:23 - shouldn't say order so much but
03:25 - okay
03:27 - so to the conundrum of what would we do
03:31 - whenever these items are ordered because
03:35 - right now we have this status active in
03:39 - draft and that basically determines if
03:41 - those items show up on the buyer's
03:43 - product catalog which I'll call this
03:45 - page right now
03:46 - so this is pretty much displaying all
03:49 - the active products right now but the
03:51 - issue with that is that even if a
03:53 - product gets sold then it's still going
03:55 - to appear on this page
03:57 - so that was a little bit tricky and we
03:59 - didn't really want to mess with the
04:00 - active and draft status since it like
04:02 - wasn't really related to that and all
04:04 - that was working fine already
04:06 - so instead
04:08 - what I'm going to do is this I'm going
04:10 - to add a quantity field to the product
04:12 - and I'm going to add a quantity field to
04:15 - the order product and whenever you
04:17 - create an order we're just going to
04:19 - deduct the order product quantity from
04:21 - product quantity so basically for the
04:25 - majority of these is just going to have
04:26 - a quantity of one and then whenever you
04:29 - create an order product that's going to
04:31 - be deducted and have a quantity of zero
04:33 - but let's say you do sell something like
04:35 - t-shirts or something that may have a
04:37 - quantity of like 20 in
04:39 - you know this is obvious example I don't
04:41 - even need to go through a pup if the
04:43 - user orders one then or let's say the
04:45 - user orders two then you're going to
04:47 - deduct two so they're going to have
04:49 - quantity of 18.
04:50 - the point being is that once we have
04:53 - that logic what we can say on this page
04:55 - is this show me all active products that
04:59 - have a quantity greater or equal to one
05:01 - so basically show me all products that
05:03 - are active and available and I just
05:06 - think that it's going to be a lot
05:07 - cleaner than trying to mess with our
05:09 - active or draft status or anything like
05:11 - that
05:12 - now with that said uh let's see what
05:14 - else okay
05:16 - so another couple
05:19 - um like user experience related issues
05:21 - that I had with this car updating is
05:24 - that say that
05:27 - you have an item in your cart like this
05:29 - black T-shirt right here now
05:32 - a couple of different things can happen
05:34 - at this point in time that are kind of
05:36 - out of the normal flow now if you added
05:40 - this shirt to your cart then you must
05:43 - have got it from your product catalog
05:45 - and since it was in your product catalog
05:47 - it must have been active and it had to
05:50 - have it had to have had a quantity
05:53 - greater than one
05:54 - so basically when you add it to your
05:56 - cart it was active and available now
05:59 - once it's in your cart however two
06:01 - different things can happen the seller
06:04 - who's selling this they could set it or
06:07 - basically revert this product back to
06:09 - draft mode so it's inactive now but like
06:11 - right now they could be changing it to
06:13 - draft mode
06:14 - another thing is that while it's in your
06:16 - car someone else could order this
06:18 - product so in that case even if it had a
06:21 - quantity of one and it was available if
06:23 - someone else orders it and it now has a
06:25 - quantity of zero then we run into that
06:27 - issue as well so for these two edge
06:30 - cases I'm actually treating them a
06:33 - little bit differently and the reason is
06:34 - this
06:36 - whenever you are a seller
06:39 - and you want to deactivate a product in
06:42 - other words turn it into draft mode
06:45 - as a seller I'm doing that because this
06:48 - product's not ready or I'm still making
06:49 - changes to it or for one reason or
06:52 - another I don't want buyers to be able
06:54 - to see this anymore
06:56 - now
06:57 - in that case what we're going to do
06:59 - since I don't want them to see it
07:01 - anymore I'm making like private changes
07:03 - I'm just going to remove it from their
07:04 - carts
07:05 - now the logic is a little bit different
07:07 - if you have item in your cart and it
07:09 - just gets paid for or purchased by
07:11 - someone else because then as a seller
07:14 - you know it's not like sensitive data
07:16 - it's just I want to convey to the um
07:19 - potential buyer hey this product is no
07:21 - longer available
07:22 - so the point being is that if this
07:25 - product gets reverted back to draft mode
07:28 - then it's just going to disappear from
07:29 - the cart because that's kind of what the
07:31 - seller intended no one wants to see it
07:32 - however if it gets purchased then I'm
07:35 - just going to have some kind of status
07:36 - on the UI that says no longer available
07:38 - because it doesn't mean like it's
07:41 - sensitive data just that it's no longer
07:42 - available and there you go
07:45 - so that's what this little snippet is
07:48 - kind of saying and the last thing that
07:50 - we need to do is just this isn't
07:52 - anything new I just uh kind of wrote it
07:55 - as a to-do list is that whenever you
07:58 - place an order
08:01 - basically whenever you hit place order
08:03 - what we did already is we created the
08:05 - order object on the back end but we
08:07 - didn't do anything with the payment
08:08 - system so pretty much the buyer at this
08:11 - point in time is just ordering all these
08:12 - products for free however that's not
08:14 - what we want they do indeed need to pay
08:17 - for it
08:18 - so a little note about that
08:21 - is that whenever you are selling
08:23 - products
08:24 - what you can do is you can of course
08:26 - give it a price like I want to sell this
08:28 - thing for 200 coins and then you can
08:30 - either say
08:32 - um like you pretty much get to pick what
08:34 - currency that you want to be paid in
08:37 - now that means that in your product
08:39 - catalog these items for example these
08:42 - top three can be being sold for tnb and
08:45 - these bottom three can be being sold for
08:46 - VTX now the user can add each of these
08:49 - items there so they may have a mix of
08:52 - products available for tnb and VTX in
08:55 - here and that's perfectly fine as long
08:57 - as they're from the same seller we'll
08:59 - change this UI a little bit to just say
09:02 - that the total cost of your order is
09:05 - going to be like 200 tnb and 400 VTX so
09:08 - that's perfectly fine no issues we just
09:11 - need to validate everything and make it
09:12 - work on the back end
09:14 - but with that said actually oh crap I'm
09:17 - out of water so let me go ahead and go
09:20 - get some water and then we'll get
09:22 - started with all of this so let me pause
09:25 - my video real quick
09:28 - and we are back and hydrated okay
09:34 - so uh an order is created clone products
09:37 - to order products and for that to happen
09:40 - I first need to adjust my
09:43 - uh product and order product Model A
09:45 - little bit since they're going to have a
09:47 - lot of the same fields
09:49 - so I'm just going to make a base class
09:50 - for them so this is product this is
09:53 - order product
09:54 - and right now
09:59 - okay
10:01 - so what I'm gonna do is I'm gonna make a
10:03 - new abstract model
10:05 - and I'm just going to call it item
10:07 - and these are going to be the common
10:09 - fields for both product and order
10:12 - products so both product and order
10:14 - product is going to inherit from item
10:16 - and I just want this to be abstract
10:18 - based class so
10:21 - let me just copy this
10:25 - all right so item
10:30 - maybe this is kind of an easier UI okay
10:34 - so we have this item now this item is
10:37 - not going to inherit
10:40 - from created modified because only
10:42 - product
10:43 - is going to have a gradient modified
10:44 - date
10:47 - this over too feels better this way okay
10:50 - now only product is going to have
10:53 - activation status
10:55 - however both product and order product
10:59 - are going to have a description
11:01 - an image
11:03 - a name
11:06 - a price amount and a price core
11:17 - also
11:20 - for the seller
11:24 - my server isn't running okay
11:27 - and also a seller is that right
11:31 - even though I don't need
11:36 - maybe I'll just keep seller on product
11:39 - okay
11:41 - because each of these order products are
11:44 - going to be related to order
11:48 - which are also already related to the
11:51 - seller
11:54 - but I'm thinking that
11:59 - [Music]
12:04 - you know I think I'll just keep it like
12:06 - this right now okay
12:08 - so from
12:17 - so I wouldn't import item
12:26 - product is going to inherit from created
12:28 - modified in item
12:30 - and then a product is going to have an
12:32 - activation status
12:35 - get this so you guys can see everything
12:36 - so a product is also going to have
12:39 - activation status like before in seller
12:43 - and then for order products
12:47 - yeah I'm actually going to remove this
12:49 - created modified day I don't need it
12:57 - it just gets all the item data as well
13:01 - it doesn't need a seller
13:06 - and then that should be good
13:11 - okay
13:19 - and do I need to
13:26 - I don't think I need to import item
13:28 - right here
13:30 - here because it's a base class shouldn't
13:33 - be using it anyways all right so this is
13:37 - also going to ensure that um
13:39 - aside from like changing a t-shirt to or
13:43 - a wooden spoon to like a piece of pizza
13:45 - or something
13:46 - um what this is going to allow is let's
13:49 - say that
13:50 - the seller is has like a couple of these
13:54 - Wooden Spoons
13:56 - and they're selling it at this point in
13:59 - time for a hundred
14:01 - so whenever someone orders it it's going
14:03 - to say 100 right here and then later if
14:05 - they go ahead and they edit this price
14:07 - it doesn't change the price right here
14:10 - so yeah that should be good and I'm also
14:14 - going to be adding a quantity feel to
14:15 - here
14:17 - however
14:18 - I don't need to do that right now I mean
14:20 - it could but that's it feels like too
14:22 - many changes at once
14:24 - so let me just go ahead and look at my
14:26 - notes
14:29 - uh order products should still have a
14:31 - foreign key to product
14:33 - which it does
14:35 - and just before running migrations I
14:37 - want to make sure everything's good
14:46 - so
14:56 - is it possible to add a non-knowable
14:59 - field
15:02 - okay
15:04 - to order product
15:06 - okay this is basically saying that hey
15:07 - you added a
15:10 - um basically saying that order product
15:11 - has description now
15:13 - so you need to give a description
15:16 - so I'll say provide a one-off value now
15:24 - string
15:26 - same thing with image
15:30 - [Music]
15:34 - if I could just give an empty string for
15:36 - this same thing with name and a string
15:39 - and price amount
15:42 - just going to say zero
15:51 - wait what's this
15:53 - so price amounts uh select an option one
15:57 - why is price amount
16:00 - seeing a default time zone
16:05 - zero
16:07 - and for the price core
16:10 - I'll just say one okay
16:14 - so those are all defaults and I'll say
16:16 - make a migrate
16:22 - beautiful
16:26 - what do we got to do after that so this
16:29 - should be updated in Django admin
16:34 - so I'll say here actually let me just
16:36 - run my server make sure nothing's broken
16:38 - so make
16:50 - all right so products
16:53 - everything is looking same there and for
16:57 - order products
16:59 - they now have all the product related
17:02 - fields beautiful
17:05 - fantastic okay
17:07 - so when order is created clone
17:11 - products to order products
17:17 - so hi this all right
17:21 - so shop serializers when order is
17:25 - created
17:27 - which happens right here
17:30 - this is the product
17:36 - clone it to order product so first I'm
17:39 - just gonna say
17:41 - product equals the product just to kind
17:44 - of pull it off
17:46 - and
17:48 - be still stay the same
17:54 - and I think we just might have to do
17:56 - this manually
17:58 - I can't really think of a fancy way to
18:00 - do this but anyways when you create an
18:03 - order product
18:07 - Okay order product these are taken care
18:09 - of now for item
18:19 - let me just get my fuels here
18:24 - so I'll say description equals product
18:26 - description
18:29 - and then I'm going to do it for image
18:31 - name
18:33 - price Mountain cord which name personal
18:35 - core
18:38 - image
18:40 - image name
18:43 - price amount
18:55 - so for each
18:58 - product in your cart
19:01 - you are going to create an order product
19:02 - from it with all that same information
19:04 - this order product is not going to be
19:06 - editable and then you're going to remove
19:08 - that item from your cart and the product
19:10 - stays the same
19:13 - so when order is created clone products
19:16 - to order products this is to ensure that
19:19 - it doesn't change after ordering even
19:21 - with the seller replace the product
19:22 - later on I just kind of cross everything
19:24 - out as a checklist
19:26 - order products do not need a created or
19:28 - modified date since those values are the
19:30 - same as the order
19:32 - and I actually just want to make sure on
19:35 - my order
19:36 - model
19:39 - okay that I do have created modified
19:40 - which I do
19:42 - and that order product does not because
19:44 - in here it's from item an item doesn't
19:46 - have it beautiful
19:49 - and order products should still have a
19:51 - foreign key
19:54 - product which they do
19:58 - all right so now let's go ahead and just
20:01 - test this
20:02 - so open Postman
20:06 - my server is running
20:09 - and let's pop open this as well
20:15 - actually let's just delete any orders
20:17 - that we got
20:20 - and okay so we have no orders no order
20:23 - products no items in the cart
20:27 - and let me
20:30 - all right so I'm gonna buy this bacon
20:33 - and my address is number four so I'm
20:37 - gonna create
20:39 - well I first need a
20:41 - I don't have any car products right
20:43 - how'd I forget it was just like two
20:44 - seconds okay first I need to add uh
20:47 - bacon to my cart
20:50 - so for a cart product and number one
20:54 - so cart product at number one
20:57 - and now just verify that I have
21:01 - a buyer one which is me
21:03 - I have bacon in my cart beautiful
21:07 - and now what I'm gonna do is I'm just
21:10 - gonna create
21:12 - an order
21:16 - and let me just make sure I got my right
21:18 - token
21:23 - so this is my token and some DG
21:31 - all right that's me so now that I have a
21:33 - product in my cart I want to create an
21:36 - order from it using address number four
21:39 - which is
21:42 - my address
21:45 - so let me go ahead and do that
21:48 - and okay
21:52 - actually let me
21:54 - look at my serializers again
21:57 - so my order product serializer that's
21:59 - good
22:01 - oh actually
22:04 - I don't need
22:06 - this product to be serialized anymore
22:09 - because the reason that we were
22:11 - serializing the product is to have all
22:12 - that data
22:14 - but now
22:18 - we actually don't want it
22:26 - because it doesn't really matter
22:31 - let me just get my orders
22:36 - okay
22:39 - so when an order comes back
22:42 - you have all the order related
22:43 - information
22:45 - yeah if you're buying your seller and
22:47 - for the order products
22:49 - this is all the order product data that
22:52 - is not going to change even if the
22:54 - product
22:55 - it's related to which is in this case
22:57 - product one even if this information
22:59 - does change
23:00 - this is still the same including the
23:02 - name the image the price amount the core
23:07 - and this is going to be the digital
23:09 - currency
23:11 - so on and so forth no create modified
23:13 - day because that's on the order
23:14 - beautiful
23:16 - cool
23:17 - all right now next up uh let's add
23:21 - quantity to product and quantity to
23:23 - order products since they both inherit
23:25 - from item
23:27 - then we can just add in there
23:35 - and it's going to be a big integer field
23:43 - quantity
23:50 - and should I have a default
23:54 - let me think about this
23:56 - no because when they create a product
23:59 - and in order product is created I want
24:01 - to explicitly set this value and I'll
24:04 - just have to in my migration set default
24:07 - so
24:09 - make migrations
24:11 - at a default of
24:14 - uh one that's fine
24:17 - wait a minute what was that oh this is
24:19 - just for um
24:23 - one is for order product and one is for
24:25 - product so now they both have quantity
24:30 - like migrate and
24:32 - should be able to run my server but
24:34 - don't want to do that yet okay
24:36 - so now products in order products both
24:39 - have a quantity
24:41 - and
24:43 - let's check or do so add quantity to
24:46 - product add quantity to order product
24:48 - now when an order is placed deduct the
24:51 - order product quantity from the product
24:53 - quantity
24:57 - okay
25:06 - so this means
25:12 - hmm wait a minute wait a minute wait a
25:14 - minute
25:17 - okay
25:19 - so I'm thinking that
25:22 - yeah
25:24 - so now when you
25:26 - are
25:28 - browsing products and you add it to your
25:31 - cart
25:32 - you can add quantity as well
25:39 - all right
25:43 - so the order products that's going to be
25:45 - in your cart is going to have a quantity
25:50 - and then
25:53 - oh wait cart product is going to need
25:55 - quantity then
25:58 - all right had to pause the video for a
26:00 - second but I'm back now and uh another
26:03 - thing that I realized is that
26:06 - sense
26:07 - these
26:09 - um order products they don't get created
26:12 - here let me pull this up
26:13 - so the order products
26:16 - they don't get created
26:18 - until you place an order and when you
26:21 - place an order
26:22 - uh those order products get created from
26:25 - cart products
26:26 - so what we need to do is we also need to
26:28 - add a quantity to cart product and then
26:31 - whenever you add an item to the cart by
26:34 - clicking this button in other words
26:36 - basically the creation of a cart product
26:39 - we'll have some UI so you can indicate
26:41 - uh how many you want to order if there
26:45 - is more than one available so basically
26:47 - moral of the story we need quantity on
26:49 - car
26:53 - s today
26:55 - uh hold on one second
27:00 - all right and we are back again and
27:02 - where were we I believe we needed to add
27:05 - a quantity
27:07 - to cart product I don't want it to
27:09 - inherit from item
27:11 - so okay
27:13 - cart product
27:17 - make a migration on that so
27:21 - migrations
27:30 - and migrate that and
27:33 - so whenever we add a cart products let
27:36 - me just look at my serializer now
27:41 - it's going to require
27:42 - [Music]
27:44 - a buyer a product and quantity
27:49 - and all of that should be good still
27:54 - maybe some validation but
28:06 - okay
28:07 - actually can I put min
28:10 - uh on this
28:17 - so when adding cart products validate
28:20 - the quantity is greater than zero
28:24 - say when creating cart products
28:32 - when creating cart products
28:42 - Quan is
28:47 - zero there's my new car product model
28:51 - and let's see
28:56 - here is my car product serializer and
28:59 - what else you need check GPT
29:06 - and for my cart product View
29:10 - there you go
29:14 - and uh okay
29:21 - um
29:27 - interesting okay validate quantity I
29:30 - wonder why I added this
29:34 - oh wait it already had it yeah okay so
29:36 - validate quantity if the value is less
29:39 - than zero then do this okay
29:43 - so in my cart product serializer I just
29:46 - need to add this to validate the
29:48 - quantity
29:49 - and this is saying you can just Mark
29:52 - that aesthetic since it doesn't use that
29:54 - self argument all right so if value is
29:59 - less than or equal to zero then just say
30:00 - Quantity must be greater than zero then
30:02 - return value which is the quantity
30:04 - beautiful now whenever we create these
30:08 - orders
30:10 - then what we are going to want to do is
30:14 - for the order product quantity
30:17 - we're just going to set this equal to
30:18 - the cart product quantity
30:21 - now another thing that we probably want
30:24 - to do
30:25 - in our
30:30 - cart product serializer
30:35 - yeah
30:36 - so another thing that we can validate
30:38 - here
30:40 - is we need to check that the quantity
30:42 - being added
30:45 - car products does not exceed the product
30:47 - quantity in other words let's say that
30:50 - there are 10 of these available the user
30:52 - shouldn't be able to add 20 of them to
30:54 - the chart
30:55 - so let's say
31:00 - another thing we need to validate is
31:03 - that the
31:06 - cart product
31:07 - quantity is not
31:10 - see the
31:13 - related products related
31:19 - quantity
31:23 - that's a very good point Thank you chat
31:25 - gbt okay
31:27 - validate this
31:29 - huh that's interesting
31:33 - what I was thinking it would do is take
31:36 - this logic and just
31:42 - validate it in this validate function
31:44 - since validate quantity
31:47 - is usually for if you just have uh if
31:51 - you want to check if a single field is
31:53 - valid but in this case we are running
31:57 - validation logic related to two of the
31:59 - fields
32:00 - so let me ask
32:03 - is it better to just stick that logic in
32:10 - is it better to stick that logic
32:13 - in the validate method or validate
32:19 - quantity method I think it may be more
32:22 - performant
32:25 - to stick it invalidate because here we
32:28 - already are pulling the product down
32:30 - which is going to have one query now the
32:34 - way it wrote it the first time
32:38 - is it's going to query again here so
32:42 - I think this would just be an extra
32:43 - query
32:52 - it's better to put the coin to check and
32:53 - validate method because you already have
32:54 - the product object available there yeah
32:58 - otherwise we need to access it again
33:00 - which should not be might not be the
33:01 - best practice I mean in a way it does
33:03 - make sense because
33:07 - like it's all related to quantity and
33:10 - it's probably more readable that way but
33:12 - this is uh the performance benefits
33:13 - outweigh the cost so
33:18 - quantity is a field that we need
33:22 - and this is serializers cart product
33:24 - just making sure I'm in the
33:27 - same place
33:29 - all right
33:30 - another thing that we can actually do is
33:32 - to make it easier is this
33:37 - okay so we're pulling off the product
33:39 - from the attributes pretty much the
33:42 - request
33:43 - using the product seller and then the
33:45 - quantity that they passed in as well
33:48 - now with that
33:50 - we are just going to check if the
33:53 - product quantity
33:56 - yeah if the quantity exceeds the product
33:58 - quantity
34:02 - so after you validate that the product
34:05 - is active
34:06 - the quantity
34:09 - cannot exceed so only this many units
34:12 - available perfect
34:16 - okay so now
34:19 - this should be good to go whenever you
34:22 - are creating your order you're going to
34:25 - iterate through the cart products
34:27 - and from those you are going to get the
34:31 - related product and for each one you are
34:33 - going to create an order product
34:35 - with whatever quantity is in the cart
34:40 - quantity beautiful
34:44 - so now let's go back to our roadmap and
34:45 - see where we are okay
34:46 - when an order is placed deduct the oh we
34:49 - didn't even do this
34:50 - so we need to deduct the order product
34:52 - quantity from the product quantity okay
34:57 - so I will say this
35:06 - okay so same thing I just separated this
35:10 - out to a more easy to read variable Okay
35:14 - so
35:16 - the related product and quantity is
35:18 - going to come from the cart product
35:20 - and then we're creating an order product
35:22 - with that quantity however once we do in
35:26 - other words once we order that product
35:27 - we also need to deduct this quantity
35:30 - from the related product
35:33 - so let's should we do that after the car
35:36 - product delete
35:39 - okay
35:40 - so let's just say this
35:45 - yeah maybe it's just easiest this way so
35:48 - after we're done creating the order
35:50 - product we're going to delete the cart
35:51 - product and then for the product
35:56 - dot quantity
35:58 - we're going to deduct the quantity that
36:01 - we ordered and we'll just do product dot
36:03 - save
36:05 - all right so let me read through this
36:06 - one more time just to make sure it makes
36:08 - sense
36:09 - so for each product in your cart
36:11 - you are going to create an order product
36:14 - from it that's immutable can't change
36:16 - and then after you're done with that you
36:19 - are going to delete the car product and
36:22 - deduct the amount of things that you
36:25 - ordered from the products quantity and
36:28 - then you're just going to save that
36:29 - product order product created car
36:31 - product deleted
36:33 - looking good
36:35 - all right and then this is just saying
36:40 - I won't cross this out because this is
36:42 - saying on the UI on the product catalog
36:44 - page will only show the active products
36:46 - with quantity greater equal to one
36:49 - so that means at the moment in time one
36:51 - of these is ordered even if it's active
36:53 - as someone's browsing the product
36:55 - catalog it won't show up which is the
36:57 - logic that we want
36:58 - so next up what do we got
37:01 - when there's a cart product
37:04 - okay car updating okay
37:08 - when there's cart products in before
37:10 - ordering someone else orders the
37:12 - products of the quantity is zero
37:14 - do not remove the cart product but
37:18 - instead just display no longer available
37:19 - on the UI okay
37:22 - so in that case what information do we
37:26 - need
37:27 - well we
37:29 - do not remove the cart product
37:31 - so we don't need to do anything on the
37:33 - back end we just need to display the
37:34 - information on the UI so in order to
37:36 - display this what information do we need
37:38 - on the UI in order to make that decision
37:41 - and that is
37:44 - the quantity
37:47 - of the related product in the cart
37:50 - so let me go ahead and fetch my cart
37:52 - products and we'll see what we're
37:53 - working with so carts
37:57 - products okay
37:59 - connection refused because
38:02 - my server is not running
38:05 - let me make migrations
38:09 - okay
38:15 - make our own server now get these again
38:19 - okay I don't have any items in my cart
38:22 - let me just go ahead and create one real
38:23 - quick
38:26 - quantity is required now forgot
38:30 - product one
38:33 - quantity I would just say is one
38:36 - okay
38:38 - so now when I get my cart products the
38:40 - related part product is going to include
38:42 - quantity
38:43 - and then
38:45 - if this is anything but zero wait a
38:48 - minute wait a minute okay
38:50 - so this is perfect so this quantity is
38:54 - saying how many of these items you have
38:56 - in your cart in this quantity is saying
38:59 - how many
39:01 - items or of those products are available
39:03 - so if this equals zero then what we can
39:06 - do is we can just say something like
39:08 - this product is no longer available
39:10 - and we'll just have them uh delete it
39:14 - from the UI
39:20 - okay so now let's let's look back in
39:24 - no longer available this is kind of
39:25 - minimize confusion okay
39:28 - so even though they won't be able to
39:30 - order that product we don't just want to
39:31 - remove it from their cart in that case
39:33 - because yeah we don't just want cart
39:36 - products suddenly disappearing from the
39:37 - car if we don't need to however in this
39:40 - case when that product is reverted to
39:43 - draft we do want to remove it from their
39:46 - cart because I don't know maybe the
39:49 - sellers putting like private information
39:50 - in there or something who knows but
39:52 - either way they're indicating that I
39:54 - don't want anyone to see this so we're
39:56 - going to remove it
39:57 - so when there is a car product and the
39:59 - seller reverts the related product to
40:01 - draft delete the cart product
40:04 - so this logic is going to go in
40:08 - product serializer because upon this
40:12 - change of active to draft made to the
40:15 - product that's when we want the logic to
40:17 - run
40:18 - so what I'm going to do is close these
40:20 - and say
40:23 - in my product serializer
40:27 - and to make it easier I'm just going to
40:30 - give it my updated models
40:33 - okay just to make sure chat GPT has all
40:36 - the context that we need to give it let
40:39 - me give it my updated product model
40:41 - which includes the item
40:43 - and of course the product module itself
40:49 - and
40:51 - here
40:54 - I will give it the product serializer
40:58 - maybe even the view too
41:02 - let's give it the view too
41:06 - guarantee in the future that there's
41:08 - going to be an easier way to do this I
41:10 - mean I know that you can already select
41:12 - files
41:14 - and upload those with uh I think I gotta
41:17 - enable that plugin but either way
41:21 - actually I'm pretty sure soon enough all
41:23 - this is just going to be baked into the
41:25 - IDE I don't know if GitHub copilot can
41:28 - you know work off this context right now
41:31 - I know that you can like leave a comment
41:33 - and tell it what to do but I don't know
41:35 - if it can like think across multiple
41:37 - files yet but either way you can kind of
41:40 - distracted here
41:42 - okay when there's a cart product and the
41:44 - seller reverts the related product to
41:46 - draft
41:48 - delete
41:50 - the car product
41:58 - should I say this too this is because
41:59 - when seller they don't know if they see
42:01 - it
42:03 - okay
42:06 - so let's see if
42:09 - check GPT can figure this one out
42:15 - in order to lose the car product on it
42:17 - later but you can override the update
42:19 - method and product rate serializer
42:20 - perfect
42:25 - exactly what we wanted okay
42:34 - now here let me put this in my right
42:36 - serializer
42:38 - all right
42:40 - so in the product right serializer we
42:42 - are overriding the update method
42:45 - and of course we need to import
42:48 - from models and for car products okay
42:52 - why did you import a request I'm not
42:54 - sure
42:56 - I don't think you need it
43:00 - and we'll say from
43:06 - models.product import activation status
43:15 - so an update here
43:17 - we're saying if the product status
43:18 - changes to draft
43:22 - remove the related cart products
43:26 - okay
43:30 - so if activation status is invalidated
43:34 - data and we need that check because we
43:38 - allow them to partially update this so
43:40 - they may be updating the product in the
43:42 - request
43:44 - doesn't even it may not even have the
43:47 - activation status attribute in it
43:49 - however if they do
43:51 - and
43:54 - the activation status is equal to draft
44:00 - then find any
44:05 - then pretty much delete it from
44:06 - everyone's cart
44:11 - okay
44:16 - so one thing I'm thinking here to
44:18 - improve this
44:19 - is that
44:23 - if they
44:26 - are passing in activation status
44:29 - and it already was draft
44:33 - we are probably going to run this query
44:35 - unnecessarily so let's see what Chinese
44:37 - has to say about that so if they are
44:40 - passing in
44:44 - and the was already draft
44:50 - and the
44:56 - will run
45:01 - unnecessarily
45:05 - and I'll give it a little clue so it
45:08 - knows what query I'm talking about
45:15 - to optimizes we can first check if it
45:17 - has been changed from active to draft
45:19 - okay perfect
45:25 - all right so if activation status is
45:29 - invalidated data in other words if they
45:31 - pass the end at all and
45:33 - the
45:36 - validated data
45:39 - is draft and the instant status is
45:42 - active then do that which is what we
45:45 - want
45:47 - okay
45:48 - so
45:51 - let's do this
45:57 - so this works however I just want to
45:59 - kind of change this a little bit for a
46:02 - readability so if activation status
46:04 - isn't out activated data and
46:07 - the current instance
46:14 - and
46:23 - okay so if the user is updating the
46:28 - product
46:32 - and they pass in uh value for the
46:35 - activation status then what we want to
46:37 - do is we first want to check the
46:39 - activation status of the existing data
46:42 - pretty much before anything gets updated
46:43 - now if this is active and the new
46:47 - activation status is draft then and only
46:50 - then we want to run this query right
46:53 - here which basically deletes this
46:55 - product from everyone's cart
46:58 - all right
47:01 - so now let me go ahead and Link
47:11 - um
47:13 - what's going on here
47:22 - okay definition of meta and base class
47:25 - create a modified is incapable
47:31 - all right so let's
47:37 - get some help with this error message
47:46 - and what Chad gbt is doing that let me
47:48 - see if I can see what's in okay
47:51 - line 14 definition of meta and base
47:54 - class
47:55 - created modified is in capital oh okay
47:58 - so we have
48:03 - is it incapable though because this meta
48:06 - abstract goes true and the item match
48:09 - actually it was true
48:14 - so
48:19 - okay so product is here inheriting from
48:22 - two parent classes
48:24 - and there's a conflict in the magic
48:25 - definitions
48:30 - okay so they both have meta subclass
48:35 - there's some overlap or conflict on how
48:37 - they're configured
48:40 - to find both middle classes or okay so
48:43 - pretty much you're giving me two pair of
48:44 - classes to inherit but they both have a
48:46 - meta subclass so it's getting a little
48:48 - bit confused
48:49 - as an example in meta
48:56 - fix this you need to reconcile two meta
48:58 - definition so there's no conflict
49:00 - however I don't see
49:03 - meta in your item model did it remove
49:07 - D so I think I might have to do this
49:09 - because even though there isn't a clash
49:11 - I guess it just doesn't like that
49:13 - there's two meta subclasses
49:16 - so what I can do is just remove meta
49:18 - from item but before let's just uh give
49:22 - the info just to see if there is a
49:23 - better solution
49:25 - so there's my created modified
49:27 - and then in my item
49:32 - I mean both meta classes are the exact
49:34 - same but
49:38 - okay so they have the same attribute
49:40 - even though they're set to the same
49:42 - value
49:43 - it doesn't matter
49:47 - interesting
49:49 - linter
49:53 - huh
49:59 - okay that is interesting
50:02 - so my pie is
50:07 - telling me it's incompatible but chat
50:09 - gbt says it's I
50:11 - but what I can do is I can just
50:15 - remove
50:17 - this right here
50:19 - and
50:20 - that should be fine
50:24 - no big deal let me see if they
50:37 - make migrations
50:41 - wait
50:47 - all right what do we got going on now so
50:53 - Okay order product the field product
50:55 - clashes with uh
50:58 - product
51:10 - that's interesting
51:15 - Okay order product dot product the
51:18 - product field clashes with the field
51:19 - product from model shop.item
51:25 - so the order product model is in sharing
51:27 - your code I assume it's something like
51:28 - this order product has a fornicated
51:29 - product yes
51:31 - and the model item or one of its
51:33 - descendants also has a field name
51:34 - product
51:41 - um
51:46 - running your product fields
51:58 - I don't see what the issue is though
52:00 - okay
52:02 - and the item model or one of its
52:04 - descendants
52:05 - which is order products
52:08 - has a name product
52:13 - you know what I'm going to do
52:16 - is I think it might be better
52:19 - just keep this here let me see this make
52:22 - my grade
52:32 - all right so I think that this is the uh
52:36 - best solution here so this code
52:40 - structure it seems to be fine it's just
52:42 - that my pie isn't really liking it so
52:46 - in this line
52:50 - I and let me just review this code one
52:53 - more time
53:00 - we see Pop I see
53:05 - okay so I think it's just so
53:07 - um my pie
53:09 - doesn't know that these are fine
53:17 - so what I can do is remove my pyc files
53:19 - I also want to try just to remove my
53:21 - entire my podcast so let me delete this
53:27 - and once again if this is still giving
53:29 - me issues then we can just ignore
53:33 - the
53:36 - um okay
53:44 - incompatible with the definition of that
53:46 - which is not it is compatible so I'll
53:48 - say how do I ignore this for an in my pi
54:15 - it's gonna be better to access the root
54:16 - of the problem
54:24 - both are required they do not conflict
54:32 - inheritance list for product
54:42 - if you confirm meta definitions are
54:44 - compatible in both classes error yes I
54:47 - have but I still don't like that too
54:48 - much okay
54:50 - so before we go ignoring things actually
54:52 - let me go ahead and make sure that this
54:54 - is a solution first
54:57 - so
55:00 - on this line whenever I lent
55:04 - it does ignore it however
55:09 - let's see what else we can do
55:14 - the created modified abstract equals
55:16 - true item I'm sure I think it was true
55:24 - I mean they are both abstract classes
55:26 - and they don't Clash
55:31 - so yeah I think it's fine actually
55:40 - all right I think we're good
55:42 - so let me just
55:45 - make migrations make migrate one more
55:47 - time
55:53 - I'll do make lint make test and then I
55:56 - think we're good to go
56:06 - okay
56:08 - so
56:10 - what I can actually do is do some manual
56:14 - testing because what I
56:19 - okay so what I'll do is this
56:25 - I will create a product
56:28 - and then I'll add it to Amy's cart and
56:32 - then
56:33 - I will set that product to draft
56:38 - and we can see if it deletes from her
56:39 - card
56:42 - so let's
56:45 - first create a product
56:49 - so I'm gonna create a product
56:57 - to use
56:58 - I think we need to use form data okay
57:03 - and it's probably a good idea if I run
57:05 - my server huh so
57:08 - yeah too lazy type this command there we
57:10 - go
57:12 - all right so now what I'm going to do is
57:14 - I'm just going to go ahead and add a
57:15 - product which has a description
57:19 - an image a name
57:24 - price amount a quantity and a price core
57:29 - description is hey
57:32 - in the image is going to be I'll just
57:35 - say uh this bacon
57:37 - the name yo price amount uh 10
57:42 - quantity
57:44 - I'll say 90 and the price core this is
57:47 - going to be one
57:48 - okay
57:50 - so now I created product with id4
57:53 - and it is a yo maybe a yo-yo or half a
57:58 - yoyo who knows
57:59 - and the activation status by default is
58:01 - set to draft and then for this item we
58:05 - can go ahead and add it to a cart
58:08 - so in Django admin
58:11 - gonna go ahead and create car product
58:13 - and let me delete this
58:16 - make it easier to see what's going on
58:18 - okay so the buyer is Amy and the product
58:22 - is this yo and I'll just say she wants
58:25 - uh just one of them
58:28 - so we have one cart product Right Here
58:30 - and Now what I am going to do
58:33 - is I'm going to update this activation
58:36 - status
58:39 - actually I'm going to update this to be
58:41 - active first
58:43 - so now this product is active and
58:45 - technically she shouldn't have been
58:47 - allowed to add this to the cart but
58:49 - since we kind of hacked it did it
58:50 - through Django admin that's why we had
58:52 - it in there so now hopefully if
58:54 - everything works correctly when I set
58:56 - this back to draft
58:58 - then it should be deleted from her cart
59:01 - so this still works correctly and let's
59:04 - see
59:06 - okay and it didn't get deleted so what's
59:09 - up
59:11 - so what we can do to check for this
59:14 - is say
59:17 - first of all let me make sure I'm
59:18 - getting the right serializer so whenever
59:23 - oh wait a minute this is embarrassing so
59:26 - I wasn't even updating the product I was
59:29 - just making the same post request again
59:30 - but what I want to do is I want to patch
59:33 - that product which was number four
59:38 - all right so that product
59:41 - which is this yo these ones
59:45 - okay so this yo is in the cart with the
59:48 - product ID of four
59:50 - and now I'm going to make a patch
59:52 - request to update this for the
59:54 - activation status
59:56 - which just to verify one more time
60:00 - so the activation status of it is now
60:02 - active
60:04 - and I want to deactivate it
60:08 - so it's active and then let me just go
60:11 - ahead and deactivate it set it to draft
60:13 - looks good refresh this and it is
60:16 - deleted from the cart
60:19 - okay that was a a fun one and on that
60:23 - note I think if we look back in our road
60:26 - map
60:27 - should be good to go so when the cart
60:29 - product and seller reverts the related
60:31 - practice draft delete that cart product
60:35 - and that's because if they're setting it
60:37 - to draft they don't want anyone to see
60:39 - it which is different
60:41 - than the logic where if you just don't
60:43 - have any quantity left because then it's
60:46 - fine if people see it
60:48 - okay now another thing that we're going
60:51 - to do is work on this order payment
60:52 - system however before I do that I
60:56 - actually just want to uh what I'm going
60:58 - to do is actually stop the video here
61:00 - and I want to get feedback on this issue
61:03 - since it's the one thing that's kind of
61:04 - bugging me again to recap
61:07 - what the issue is
61:09 - so
61:11 - if we go to both of these parent classes
61:13 - which is
61:18 - uh so product is inheriting both from
61:20 - this crate modified
61:22 - and it's also inheriting from item now
61:25 - both of these have a subclass of meta
61:28 - with abstract equals true just to
61:30 - indicate that it's abstract class
61:32 - and whenever I'm linting this my pie
61:35 - doesn't like the fact that even though
61:38 - these are the exact same in chat GPD
61:41 - said as long as these are cool then you
61:44 - know everything's good to go and also
61:46 - just uh in my experience I never seen
61:49 - any issues with that however if there is
61:52 - a better solution out there rather than
61:53 - just ignoring this my pie issue right
61:55 - here since I really don't like to do
61:57 - that then yeah just uh go ahead and let
62:00 - me know
62:01 - also if it's just bad programming
62:03 - practice or it really does cause some
62:06 - conflicts for some reason and my pie was
62:08 - correct in warning me then yeah I'd love
62:10 - to hear that as well
62:11 - but on this note I think we're good for
62:14 - now so
62:16 - what I'm going to do is I'm going to
62:17 - hold off on this order payment Logic for
62:19 - the next video once we kind of tackle
62:21 - this issue and yeah I think we're all
62:25 - good to go for now so uh looking forward
62:27 - to that feedback and I guess I'll see
62:30 - you next time