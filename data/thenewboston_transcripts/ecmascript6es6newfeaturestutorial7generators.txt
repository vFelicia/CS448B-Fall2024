00:00 - all right guys welcome back and in this
00:02 - video what I'm going to do is I'm going
00:04 - to talk to you guys about generators now
00:07 - a generator is actually really hard to
00:09 - explain without just showing you guys
00:10 - how it works but before I get coding I
00:13 - kind of want to just try to give you
00:14 - guys a real brief overview so you know
00:17 - whenever you just make a normal function
00:18 - what you do is you make the function
00:20 - give it a name and then whenever you
00:22 - call it it either just runs a bunch of
00:24 - code or if it has a return value then it
00:27 - runs up to the return statement and then
00:29 - gives you back a value well at first
00:32 - these generator functions they look a
00:34 - lot like you know just a normal function
00:37 - but the thing is they actually don't
00:39 - execute all the code at once like a
00:41 - normal function what they do is say that
00:45 - you had 10 different lines in your
00:47 - generator you could say run the first
00:50 - two lines and then pause and wait until
00:52 - I tell you to go on now once I tell you
00:55 - run the next three lines and then pause
00:58 - so it pretty much allows you to make
01:00 - functions with like checkpoints in them
01:02 - sounds weird and it kind of is so I'll
01:05 - show you guys how to make one so
01:07 - whenever you just make a function you
01:09 - just say the word function that's the
01:11 - keyword and then you type the name well
01:13 - whenever you make a generator function
01:15 - which is a function with like
01:16 - checkpoints in it after the keyword
01:18 - function use the asteris and this says
01:22 - Hey JavaScript this is actually a
01:23 - generator a special type of function and
01:27 - the rest
01:28 - or
01:30 - um most of the rest is kind of the same
01:33 - so again you can name it anything you
01:34 - want just like a normal function now
01:36 - check this out these checkpoints are
01:39 - determined by the yield keyword so yield
01:44 - basically means pause I mean that's what
01:47 - it means in real life too so it's not
01:48 - that hard so let me go ahead and type
01:52 - this and show you guys a couple examples
01:56 - so I'm just gonna uh return a couple
01:58 - stupid values here
02:00 - uh apples bacon and what I can actually
02:03 - do is I just don't only have to include
02:05 - yield I can include just normal code as
02:07 - well I can include if statements while
02:09 - statements uh printing stuff out to the
02:11 - screen so say um okay this is the line
02:16 - after
02:19 - bacon and now let me yield one more
02:22 - thing which is corn so basically anytime
02:26 - you see yield think pause or checkpoint
02:30 - simple enough so now let me go ahead and
02:32 - actually create a reference to this
02:34 - generator so I'll say let
02:36 - sample
02:38 - equal actually let me say sample
02:40 - generator instead of simple
02:42 - generator think it'll be a little bit
02:44 - easier to
02:46 - see since this isn't really simple but
02:48 - it is indeed a sample sound like Dr
02:50 - Seuss now all right so this is just a
02:53 - reference to this function now whenever
02:56 - I call this function the very first time
02:58 - what it's going to do is it's going to
02:59 - run run until it gets to this yield so
03:02 - essentially it's going to say okay I'm
03:04 - going to return apples and then I'm
03:06 - going to pause and I'm not going to run
03:08 - any of this other code until you tell me
03:10 - to so just so we can actually print out
03:13 - apples what I'm going to do is this I'm
03:15 - going to say
03:16 - sample. next this next function
03:20 - essentially means run this generator
03:23 - until you get to the yield statement so
03:26 - now if I go ahead and run this check it
03:28 - out now take note of of what this
03:30 - returned what it returned is an object
03:33 - with the value of apples and it also has
03:36 - another property called done now
03:39 - whenever your generator gets to the end
03:41 - and it has no more yield statements this
03:43 - is going to be equal to true now since
03:45 - we still have more code to go this is
03:47 - going to be equal to
03:49 - false all right now if you only want to
03:51 - print out the value for example if you
03:54 - only want to print out apples and you
03:56 - really don't care about that done
03:57 - statement then what you can do is just
04:00 - print out the value just like that so
04:02 - that may be a little bit easier to see
04:04 - what's going on so again what it did is
04:06 - it ran this function until it got to
04:09 - Apples returned it and then it says okay
04:11 - I'm waiting I'm waiting for you to tell
04:14 - me to go to the next checkpoint can't
04:16 - even talk today so whenever I do that it
04:20 - says okay I'm going to run
04:23 - apples and then you want me to go to the
04:25 - next one so I return bacon and then I'm
04:28 - pausing so this line of code it never
04:31 - even ran whenever we call next what it's
04:35 - going to do is it's going to run all the
04:37 - code until it gets to the next yield
04:40 - statement so then check this
04:44 - out whenever I ran this it printed out
04:48 - apples right here and then it went on
04:51 - returned bacon and then after it
04:54 - returned bacon it hit this line of code
04:57 - so that's why it printed out this and
04:59 - then the last one was corn now if you
05:02 - guys were wondering all right well what
05:04 - happens if you say go to the next one
05:07 - even though you're kind of all done with
05:08 - them well what it does then is it just
05:10 - gives you undefined so undefined
05:12 - essentially just means hey I'm done with
05:15 - the generator function that's it so
05:18 - that's all a generator is basically a
05:21 - function where you can include
05:22 - checkpoints or little parts of your code
05:25 - where you can pause until you call next
05:29 - so if you guys are wondering all right
05:31 - so that's kind of cool I guess but is
05:34 - this useful in any kind of way the
05:36 - answer is no it's not thank you guys for
05:38 - watching I'm just kidding so I'll show
05:40 - you guys a really simple example of and
05:43 - this is probably the easiest way I know
05:45 - that whenever we're talking about like
05:48 - communicating um with an API in promises
05:51 - then you're like just demonstrate a
05:52 - generator then that's kind of what
05:54 - they're made for but for now I'll show
05:56 - you guys like the most simple example
05:58 - ever so I'm going to make a new um
06:02 - generator so again function asteris
06:05 - actually let me just give myself some
06:06 - more
06:08 - space and let's say that I was making a
06:10 - program to create a bunch of new users
06:13 - for I don't know a website or something
06:15 - and each time I created a user they
06:18 - needed a new user ID so I'm just going
06:21 - to say get next ID just like that now
06:28 - the first ID I'm just going to say just
06:30 - make it equal to zero why not you can
06:33 - start at one if you want but who cares
06:35 - and see I really don't have that much
06:37 - money for a big old server and I don't
06:40 - want like a million people signing up so
06:42 - I'm just going to say while ID is less
06:45 - than three so I can only have a Max uh
06:48 - number of three users on my website
06:51 - again it isn't a very cool website but
06:53 - it'll demonstrate this point all right
06:57 - so what I want to do is this I am going
06:59 - to Loop through this three times now
07:01 - instead of just returning one two three
07:04 - what I'm going to do is I'm going to use
07:05 - this yield keyword that says what we
07:08 - want every time we call this generator
07:10 - is basically for you to return the next
07:13 - user ID and then pause and wait until I
07:17 - ask you for another user ID so I'm going
07:19 - to yield the ID and since we want it to
07:22 - actually change I'm just going to write
07:25 - Plus+ so the first time I return zero
07:27 - and then one and then two
07:30 - and then it breaks and if we try to call
07:32 - it again it's going to be
07:34 - undefined so I'll say what can I say
07:38 - here I'll say let um create user
07:42 - equal get next
07:46 - ID so anytime I want to use
07:49 - this print it out so we can actually see
07:51 - what's going on create
07:54 - user
07:56 - next and remember this actually Returns
07:58 - the object with the value and remember
08:01 - it said done equals true or false right
08:04 - now I'm just concerned about the value
08:06 - so that's all I'm going to print out so
08:08 - if you run this check it out the very
08:11 - first user is this user
08:15 - zero now if I call this
08:17 - again then I get user one so now what I
08:21 - can do is I'm like all right so that's
08:24 - enough users for now um okay I have to
08:28 - go do something else write some more
08:31 - code yada yada yada that runs and then I
08:35 - don't know maybe I check my database or
08:37 - my server to make sure that everything
08:39 - is you know that I can support all these
08:42 - users all two of them and then I can go
08:45 - ahead and call this generator again
08:48 - pretty awesome eh now just because I
08:51 - know you guys want to
08:53 - see me try to create another one and for
08:56 - the say undefined boom roasted there
08:59 - there you go so whenever you try reading
09:02 - the documentation about generators it
09:04 - makes it sound like it's the most
09:06 - confusing thing in the world but it's
09:07 - actually really easy again all they are
09:09 - is functions and they run until you get
09:12 - to the yield keyword and this pretty
09:14 - much says pause until you call next
09:16 - again and then you can keep calling next
09:19 - and it can keep returning values until
09:22 - it gets to the end of it whatever kind
09:24 - of way and it has no no more values to
09:28 - return and then it just returns
09:30 - undefined that's it that's all they are
09:33 - so yeah generators easy peasy thank you
09:36 - guys for watching and I will see you
09:38 - next time