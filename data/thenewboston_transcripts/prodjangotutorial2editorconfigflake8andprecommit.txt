00:00 - alrighty everybody welcome back to
00:02 - another video and in this one we're
00:04 - going to be going over some styling and
00:06 - linting related tools really just
00:08 - setting up our project to keep our code
00:10 - consistent and clean no matter how many
00:12 - developers we have on our team
00:14 - so with that being said let's hop into
00:17 - our first tool which is editor config
00:19 - so you may be asking the same question
00:23 - that apparently a lot of people have
00:25 - asked and that is what is editor config
00:27 - and I really hate just reading from you
00:31 - know kind of like whenever you have a
00:32 - slideshow and you have a bunch of texts
00:33 - on there and they're just reading it
00:35 - like you know is this necessary but uh
00:38 - this really is the best explanation
00:40 - where it helps maintain consistent
00:42 - coding styles for multiple developers
00:44 - across various editors and Ides so that
00:48 - sounds pretty cool so how exactly do we
00:51 - use it well before we hop into that
00:53 - check this out a little cool thing I
00:56 - want to mention and that's this boom no
00:59 - plugin necessary we don't have to
01:01 - install everything check it out these
01:03 - editors come bundled with Native support
01:05 - for editor config everything should just
01:08 - work love that
01:09 - so with that being said now let's go
01:12 - ahead and figure out how to use this bad
01:13 - boy
01:14 - so to actually set this up go ahead and
01:16 - create a new file name editor config
01:20 - and this of course is where all of our
01:22 - configurations are going to go
01:24 - now the first line I want you to write
01:27 - is this root equals true huh auto
01:29 - complete didn't even know that that's
01:31 - pretty cool so what this signifies right
01:33 - here is that this is the most top level
01:36 - editor config file now I say this
01:39 - because we can and I'm not going to be
01:41 - setting up the project this way I I
01:43 - never do really but if you wanted to you
01:46 - can actually have a separate editor
01:47 - config files nested inside different
01:50 - packages or directories
01:51 - and whenever you have those it's going
01:53 - to take the settings from that file and
01:55 - apply it to that scope whatever your
01:57 - directory it's in
01:58 - however because we don't do any of that
02:01 - I'm just going to signify root equals
02:03 - true and the reason I do this is because
02:06 - whenever editor config is going to kind
02:10 - of scan your project and look for all
02:11 - these editor config files whenever it
02:14 - reaches one that says root equals true
02:16 - it's going to say oh this is the top
02:18 - level one I don't need to search anymore
02:20 - so that's all I'm signifying right here
02:23 - and now we can get into the good stuff
02:25 - which is you know the actual rules for
02:27 - making our code consistent and clean
02:29 - so how do we do this
02:31 - well for each file type we are going to
02:34 - have a wild card pattern to pretty much
02:36 - say what rules or what kind of files are
02:39 - these rules going to apply to so in my
02:42 - project I'm going to have HTML files
02:43 - python files and you really don't even
02:46 - have to plan head because anytime you
02:48 - create a new file type you can just go
02:50 - ahead and update it in this file but
02:52 - just for an example for HTML files I say
02:55 - I want the character set utfa I'm really
02:59 - loving this auto complete by the way
03:01 - uh for the indent size we'll go with
03:05 - four like that for HTML files for in
03:08 - that style we can do space and for MAX
03:12 - Line length I'll go 119. all right so
03:15 - basically Wild Card pattern to say what
03:18 - kind of files are you making these rules
03:20 - for and then you make all the rules
03:22 - now I'm also going to take these same
03:26 - rules and apply it to python files as
03:28 - well so for my python files I also want
03:31 - this utfa character set just your
03:34 - standard characters that are you know on
03:36 - your keyboard uh let's see indent size
03:40 - four space 119 okay now another thing
03:44 - that I want to mention is that since we
03:47 - have these rules repeated and we're
03:49 - pretty much applying the same ones to
03:51 - HTML and python we can indeed shorten
03:53 - this up a bit by instead of saying star
03:56 - dot then your file extension you can
03:58 - have curly braces and say HTML and py
04:02 - and now we can remove this and it's the
04:05 - exact equivalent
04:07 - and what the heck is this I looking at
04:09 - me for
04:11 - okay it's creeping me out but anyways
04:13 - last thing I want to mention before we
04:15 - move on to the next tool is that if you
04:17 - set up your project by kind of just
04:19 - following along to this point and your
04:21 - IDE still isn't picking up these changes
04:23 - then it's likely that you need to go
04:26 - into your settings and just well for jet
04:30 - Brains it's at editor code style and
04:33 - then here you can see this little
04:34 - checkbox enable editor config support
04:36 - and also a little it's a warning but
04:39 - it's not really a warning it's exactly
04:41 - we want it's saying settings may be
04:42 - overridden by editor config I'm not
04:45 - going to disable that because like I
04:46 - said that's exactly the behavior that we
04:48 - want
04:49 - so I'm not sure where the setting is in
04:51 - other Ides but just know that if it
04:54 - isn't picking it up you probably need to
04:56 - go into your settings and specify that
04:57 - somewhere but yeah with that being said
05:00 - this is really all we need to do for
05:02 - editor config and there you go
05:05 - now the next tool that we're going to be
05:07 - working with is something that I'm sure
05:10 - a lot of you are familiar with and that
05:12 - is flake 8. so flake 8 just like a lot
05:15 - of these other tools it's a tool to keep
05:17 - your code consistent and clean and for
05:20 - this one we actually do need to install
05:21 - so I'm just going to run poetry add and
05:25 - I'm going to install it as a Dev
05:26 - dependency since we don't need this in
05:28 - our final build push up to production
05:30 - it's really just for you know developers
05:32 - to make sure their code's consistent so
05:35 - add minus capital D and the packages is
05:38 - just called flake 8. so again whenever
05:42 - we do this it's not only going to add it
05:44 - to our Pi Project tunnel but also
05:46 - install that so that's pretty cool
05:50 - all right
05:51 - now
05:53 - actually let me just go ahead and make
05:54 - sure
05:56 - yes it is installed as Dev dependency
05:58 - beautiful
06:00 - so just to actually make sure that this
06:07 - is working correctly if you do poetry
06:09 - run the command to run this tool is
06:12 - flake 8. however I'm just going to go
06:14 - ahead and say dash dash help just to
06:17 - make sure that yes it indeed looks like
06:19 - this is working correctly all right
06:23 - so check it out now let's go ahead and
06:25 - kind of get a glimpse of what flake 8
06:27 - does for us in action
06:29 - so what I'm gonna have you do is go into
06:32 - any it doesn't really matter right now
06:34 - just go into any of your python files
06:36 - and just add a bunch of random blank
06:38 - lines just so it's going to throw some
06:40 - styling uh warnings and then back in
06:44 - your terminal if you say poetry run
06:45 - flake 8 just go ahead and write the path
06:48 - to that file so that file that I just
06:51 - messed up was in core manage so I'm just
06:54 - going to go ahead and say flake or in
06:57 - other words check this file for issues
06:58 - hit enter and it says yes indeed in this
07:02 - file you have way too many blank lines
07:04 - you have 12 that is absurd let's just go
07:07 - ahead and fix that up and check it out
07:10 - now whenever I run flake 8 again I don't
07:12 - get any issues beautiful so that's kind
07:14 - of the gist of what flake does however
07:18 - we don't want to set this up exactly in
07:21 - that way where we have to run everything
07:22 - from the command line all the time
07:24 - now actually another thing that I want
07:27 - to mention before I begin is that you
07:30 - know how we can run this checker on an
07:33 - individual file using this format if you
07:35 - ever want to just check every single
07:37 - file in your project you can do poetry
07:39 - run flake 8. now I'm actually not going
07:42 - to hit enter because I don't want to do
07:44 - that and the reason is because I have a
07:47 - lot of other files in here specifically
07:49 - in my virtual environment and there's
07:51 - actually a crap load of files you see in
07:54 - here the files from every package
07:56 - basically so by default if flaky doesn't
08:01 - know like hey I shouldn't be checking in
08:02 - your virtual environment we actually
08:04 - have to configure it for that so how do
08:06 - we do that well great question if you go
08:09 - to new file just going to go ahead and
08:11 - hit dot flake 8.
08:14 - and these of course are going to be our
08:17 - flake 8 configurations
08:19 - now instead of typing everything let me
08:22 - just copy some of these in
08:25 - all right
08:26 - cheat sheet beautiful all right so first
08:29 - up we just need to have square brackets
08:31 - in say a flake 8 and under these are of
08:34 - course going to be all the flake 8
08:35 - configurations actually similar to
08:37 - editor config in that way
08:39 - now these ignores actually do I even
08:42 - want to go over them uh probably not so
08:45 - the reason that I don't want to go over
08:46 - each of these ignores is because these
08:48 - are the rules that I like to ignore
08:51 - however what I would suggest that you do
08:53 - is I would start by not ignoring
08:56 - anything and then whenever you run flake
09:00 - 8 what you're going to see are rules
09:02 - like this
09:04 - um e303 this is a rule that checks for
09:06 - too many blank lines for example and
09:09 - that's one that I like I want to check
09:11 - uh if I have too many blank lines so I'm
09:13 - not going to ignore that however if you
09:15 - ever see some issues and it's like no
09:18 - this isn't an error this is actually how
09:20 - I want to style my project then you can
09:22 - go ahead and ignore those so these are
09:24 - the ones that I like to ignore again
09:26 - just skimming these are for like coding
09:27 - magic comments these are for Doc string
09:30 - FR kind of your generic flake rules
09:32 - anything that starts with i is a rule
09:35 - related to uh Imports and anything that
09:37 - starts with w
09:39 - actually this I don't even know what the
09:41 - W stands for I know that these rules are
09:43 - line break occurred before a binary
09:45 - operator and line break occurred after a
09:47 - binary operator so yeah I'm not sure the
09:50 - significance of that W but either way
09:51 - they kind of group it based on letter
09:54 - not really that important uh but yeah
09:57 - that's just the noise
09:59 - now for exclude this is probably pretty
10:02 - obvious saying what directories or
10:05 - um packages do you want to exclude of
10:08 - course my hidden git podcast in my
10:11 - virtual invent the end and also I want
10:15 - to ignore this as well
10:17 - my my pie cash
10:19 - so again this is just saying that
10:21 - whenever I check for these style rules
10:23 - that I'm just gonna you know kind of
10:24 - bypass all these file name is just
10:27 - saying what files do you want to check
10:28 - for encodings a lot of this is pretty
10:31 - simple inline quotes how do you want
10:33 - your quotes uh Max complexity this is an
10:36 - interesting one so this is related to
10:39 - something called the McCabe complexity
10:41 - and it has actually a weird definition
10:44 - but it's more or less the number of
10:46 - decisions that your program is making
10:48 - so I say that because if you ever uh if
10:52 - flake 8 ever like complains about this
10:54 - check then what you need to do is you
10:56 - need to go back in your code and break
10:57 - up your logic in some way simplify it
11:00 - remove some if statements basically
11:02 - reduce the number of decisions that that
11:04 - chunk of code is making
11:07 - and all right so that was Max complexity
11:09 - uh these ones are pretty
11:10 - self-explanatory to MAX Line number MAX
11:13 - Line length multi-line quotes
11:16 - and this last one
11:18 - per file ignores this says that if you
11:21 - ever have a rule but you don't want to
11:24 - ignore it across your entire project if
11:27 - you want to ignore it across your entire
11:28 - project you're going to stick it here
11:29 - but for example if you only want to
11:31 - ignore it in a single file and I
11:34 - typically have these in like these files
11:35 - right here
11:36 - where under core project settings
11:39 - templates you know how we had this file
11:41 - which like it isn't like a python file
11:44 - that gets executed it's really just a
11:46 - sample template that other developers
11:48 - can use to say what should go into my
11:50 - local settings right here that is of
11:53 - course is you know it isn't going to
11:55 - follow the same rules as your other
11:56 - python files so this would be a good
11:58 - example of one file that you want to
12:00 - ignore specific rules on
12:02 - so now that we saw how to configure that
12:05 - what I can do here is actually
12:12 - poetry run flake 8 sense now that my
12:16 - virtual environment is being ignored I'm
12:18 - not too worried about uh scanning that
12:20 - and check it out so it did find some
12:22 - issues with our project and we can
12:24 - actually just click into these and fix
12:25 - them one by one so this rule right here
12:28 - f821 this is going to check for like it
12:31 - says an undefined name in Docker now
12:34 - remember that this actually it may look
12:37 - like an issue but it's not because just
12:40 - the way that our split settings were
12:42 - kind of structured this is actually
12:44 - going to be defined we talked about this
12:46 - in the last video the point is if you
12:48 - want to explicitly ignore this rule for
12:51 - this certain line you of course don't
12:52 - want to go and Flaky and just ignore it
12:54 - here or else it's never going to check
12:56 - any of your files for it so instead
12:59 - right after this if you say just add a
13:02 - comment and say no QA and then you can
13:06 - just
13:08 - specify the rule
13:11 - so no QA for f 821 and also it's
13:17 - happening on this file too
13:19 - or excuse me this line right here then
13:22 - it's pretty much just going to ignore
13:23 - this rule for this specific file and
13:26 - just to kind of prove that let me just
13:27 - go ahead and run it again and you see
13:29 - that these lines are no longer throwing
13:32 - any issues we just have those two left
13:35 - which is in this file
13:38 - and I have a trailing white space
13:41 - actually close this
13:43 - so yes as you can see there's a white
13:46 - space right here that shouldn't be there
13:48 - so embarrassing and actually let me just
13:51 - go ahead and delete this we don't I'll
13:53 - just like for the tutorial all right so
13:55 - no white space because we just removed
13:57 - the entire comment so that should take
13:59 - care of that and what is this so it was
14:02 - on line 15.
14:04 - see what that all right so it was the
14:06 - same issues before
14:10 - where this
14:12 - just needs to be ignored because we're
14:15 - going to get that from split settings
14:18 - all right so now let me go ahead and
14:20 - just check everything again and yeah no
14:24 - warnings so there you go there's the
14:26 - basics of how to set up and run flake 8.
14:30 - now before we hop into the next tool
14:32 - what I want to just touch on is you know
14:34 - how I said that whenever I find myself
14:36 - typing poetry run and then a command
14:39 - poetry you're on command poetry around
14:40 - command then we probably want to make
14:43 - this into a mate command to kind of just
14:45 - shorten it up well I'm not going to do
14:47 - it for this example because we're
14:49 - actually going to be tweaking away that
14:50 - flake uh ran and you'll see exactly in
14:55 - just a bit what I'm talking about but
14:57 - that's the reason I'm not going to make
14:58 - that make a command quite yet
15:01 - and let me just close everything before
15:04 - I get started with our next tool which
15:07 - is pre-commit
15:10 - all right
15:13 - I love keeping my terminal nice and
15:15 - clean and I don't know why it's a little
15:18 - issue that I have but now to install
15:21 - pre-commit what we can do is uh actually
15:23 - let me tell you what pre-commit is
15:25 - before we just go ahead and start
15:26 - installing a bunch of random stuff so
15:29 - pre-commit is a tool that allows you to
15:31 - manage something called hooks now what
15:34 - is a hook a hook is basically just a
15:36 - little script that can check your code
15:38 - for various issues in fact you can make
15:41 - your own custom hooked uh you know have
15:43 - it do anything that you want but some
15:46 - examples that other people developed
15:47 - already are let's say you can have a
15:49 - hook to check that you don't have any
15:51 - extra white space or you can have a hook
15:52 - to make sure that your Imports are
15:54 - properly sorted so like I said a hook is
15:57 - just a script to check your code for any
16:00 - style or linting thing that uh really
16:02 - anything that you can dream of you can
16:04 - make but anywhoot let me go ahead and
16:06 - install this by saying
16:09 - poetry add
16:11 - just like flake hey this is going to be
16:12 - uh development dependency and then we
16:15 - are going to install the package
16:17 - pre-commit so hit enter installing and
16:21 - beautiful all right so now that we have
16:24 - it installed
16:25 - to verify that yes we do indeed just
16:29 - like our other tools we're going to go
16:31 - ahead and create a new configuration
16:32 - file dot pre
16:35 - commit hyphen config and this is going
16:39 - to be a yaml file so y-a-m-l and check
16:43 - it out
16:45 - all right schema validation Mr require
16:47 - repos all right what the heck is going
16:50 - on here so let's go ahead and get some
16:52 - sample data in here so our IDE stops
16:54 - yelling at us and the easiest way to do
16:57 - this is if we do poetry run and we're
17:01 - going to run a command from that package
17:03 - we just installed which is pre-commit
17:04 - and we're just going to say sample
17:07 - config so whenever you run this it just
17:10 - outputs this text right here which you
17:12 - can use as like a boilerplate and you
17:16 - saw whenever I posted that in then my
17:18 - IDE stopped yelling at me
17:20 - and actually
17:23 - I kind of hate how these dashes are here
17:25 - but anyways let's go ahead and figure
17:27 - out what the heck we just pasted in now
17:30 - at the top level we have something
17:32 - called repos and that's what we're going
17:34 - to be kind of posting in the first
17:36 - nested level right here is each
17:39 - individual repo so you know I thought we
17:43 - were like specifying these hooks in
17:44 - these different type of rules so what
17:46 - are all these repos doing why do we even
17:48 - care about them well check it out these
17:51 - repos if I pull one up
17:53 - these are basically where the hooks are
17:56 - going to live so pre-commit already has
17:58 - a bunch of standard hooks but let's say
18:00 - that you want to make your own or some
18:01 - other company that you're working for
18:03 - they have their own hooks so they're
18:05 - basically going to be various hooks
18:07 - scattered across a bunch of different
18:09 - repos so whenever you want to use a hook
18:11 - you first need to specify where the
18:13 - location is so what repo is it in so
18:16 - that's what that is and as you could see
18:19 - for these repos they usually have just
18:21 - on the read me a list of all the hooks
18:23 - that you can use but we'll get into that
18:25 - in just a bit
18:26 - so this second one this uh rev that just
18:30 - stands for the revision basically the
18:32 - version number
18:33 - and then this last uh setting right here
18:36 - hooks this is good stuff so these
18:39 - individual hooks are more or less the
18:41 - code checking scripts so what you want
18:43 - to do is you actually want to read
18:44 - through that repo and then read through
18:46 - all the hooks and see what ones you
18:48 - actually want to apply to your project
18:50 - and for this it's you know good for this
18:53 - example so we'll keep those and yeah
18:55 - that's the basic structure of this
18:57 - configuration file again we're going to
18:58 - be adding in a couple more repos and
19:01 - have a couple more hooks later on but
19:03 - for now what I want to show you is this
19:06 - so what we want to do is we want to run
19:09 - these checks right before or pretty much
19:12 - automatically whenever we Commit This to
19:14 - a git now in order to do this
19:18 - what we can do is say poetry run
19:20 - pre-commit install
19:23 - so what this is going to do is it's
19:25 - going to install all of these hooks
19:28 - right here pretty much to configure it
19:30 - where whenever we make a commit then
19:33 - these checks get ran automatically now
19:36 - that is pretty cool however sometimes
19:39 - what we also want to do is just run
19:41 - these manually
19:42 - so what we can do for that is for the
19:46 - pre-commit command we can just say run
19:48 - and what do we want to run it on we're
19:51 - just going to say all files
19:53 - so hit enter and it said we have a
19:57 - little issue here but the cool thing
19:59 - about this is let me just go ahead and
20:01 - run this again
20:03 - all right so check it out
20:05 - so this end of file fixer the first time
20:07 - that we ran it it said hey there was a
20:09 - warning however the cool thing about
20:11 - this tool is that it actually just fixed
20:13 - it for us so where was that issue
20:16 - uh it didn't even say what file was but
20:20 - um or was it in our getting more file
20:23 - yeah fixing get ignored and another
20:25 - thing that I want to mention is that
20:28 - this actually let me clear this out of
20:30 - the way
20:31 - so
20:35 - so you know how we ran that command and
20:37 - we said pre-commit run all files so this
20:40 - is kind of weird like isn't just the
20:42 - default just to scan all files anyways
20:44 - well the interesting thing about
20:47 - pre-commit is that typically what it
20:49 - does is it only runs against files that
20:51 - have changed according to git now this
20:55 - is you know efficient since you know you
20:57 - don't want to check the same files if
20:59 - nothing's changed but it's not always
21:01 - what we want if we want to force
21:03 - pre-commit to check all files then of
21:05 - course you are going to use this all
21:07 - files flag right here
21:09 - so with that being said let me go ahead
21:11 - and add in some more hooks right now
21:15 - and let me just go ahead and paste these
21:17 - in
21:19 - all right so check it out
21:24 - so if I clean this up a bit so this is
21:28 - all the same I also added in another
21:30 - repo now this repo right here uh Yap
21:35 - this is it's basically because code can
21:39 - conform to pep 8 but still not look that
21:42 - great so Yap is a tool to help with that
21:45 - and you can kind of imagine it where if
21:47 - you had the most OCD developer following
21:50 - the most strict style guide then this
21:52 - would kind of be the output of it
21:54 - and for this last one uh this flake 8
21:58 - repo so this is pretty interesting so
22:00 - here we're saying that there are some
22:03 - flake 8 related rules that we want you
22:05 - to check and you see this additional
22:07 - dependency as well I didn't mention this
22:09 - but these additional dependencies we saw
22:12 - it with the F it depends on Tamil and uh
22:14 - with flake a as well these are just
22:17 - additional packages that the hook
22:18 - depends on so with flick 8 we have bug
22:21 - bear which is for some like possible
22:24 - bugs and designer related issues an
22:26 - example of this is using the accept
22:27 - keyword without specifying an exception
22:30 - type built-ins this is to pretty much
22:33 - say don't use python built-ins as
22:35 - function arguments this is for adding
22:38 - coding magic comment checks this is
22:41 - related to sorting and grouping Imports
22:44 - polyfill for backwards compatibility and
22:46 - quotes of course the ability to check
22:48 - for uh double quotes single quote to
22:50 - everyone configure it
22:52 - so again to reiterate the hooks are the
22:55 - actual rules or scripts for checking
22:57 - your code the repo is just where these
23:00 - hooks live at
23:01 - and although we set everything up to say
23:04 - yes these are the repos these are the
23:06 - hooks that we want there is sometimes
23:09 - additional configuration that we need
23:11 - for each of these individual tools now
23:14 - whenever we need to specify additional
23:16 - configuration we don't do it from this
23:18 - pre-commit config yaml file where we
23:21 - actually do it is this Pi Project Tamil
23:24 - pretty cool man so in essence pre-commit
23:27 - config yaml says what Hooks do we want
23:30 - to install and in Pi Project Tamil we
23:33 - configure them there so for example I
23:36 - know that we are going to need to
23:38 - configure this one uh this eye sort tool
23:41 - so for this what we need to do is type
23:43 - in tool Dot isort
23:47 - wow can I tell you today
23:49 - and uh yeah that's what I should rename
23:52 - the tool I can't type today and then for
23:54 - this is just where your configurations
23:56 - go
23:58 - um really just like your editor config
24:00 - in a way so
24:02 - I wonder if I got any autocomplete all
24:04 - right I'm just going to copy this in
24:06 - though so for the eyesore tool I'm going
24:09 - to say the multi-line output is 5 and
24:11 - then I just need to give out line length
24:13 - and to configure that Yap f
24:17 - then I'm just going to say based on
24:19 - Google style some indentation rules and
24:23 - uh yeah either way uh the point of this
24:25 - isn't to go over each of my individual
24:27 - settings since this is really a lot of
24:29 - this is personal preference it's really
24:31 - just to demonstrate that whenever you
24:33 - have these additional tools and they
24:35 - require
24:36 - configuration then you can figure them
24:38 - in Pi Project Tamil kind of the same
24:41 - format that we've been following before
24:43 - so now that we have everything set up
24:45 - let me go ahead and just make sure
24:47 - everything is working and to do that
24:49 - what I first want to do
24:52 - is I want to go ahead and uninstall
24:56 - anything and then install it again
25:00 - and by the way I'm not uninstalling and
25:03 - then reinstalling the actual uh
25:05 - pre-commit package this is a pre-commit
25:08 - command that uninstalls or installs
25:10 - those individual hooks
25:12 - and
25:13 - I also want to just go ahead and after I
25:16 - have those installed manually run them
25:19 - of course if we make a commit to a git
25:21 - it's going to run it but I just want to
25:23 - just go ahead and run everything by
25:24 - default
25:26 - and check it out so a couple issues here
25:31 - where it says
25:33 - I need to change these to single quotes
25:36 - again this one can be a double quote
25:38 - because I actually have a single quote
25:39 - here that is not escaped and just go
25:43 - ahead and run this again
25:45 - all right beautiful now the last thing I
25:49 - want to mention is you see how we are
25:52 - now running flake 8.
25:54 - through uh this pre-commit well since
25:57 - we're just running it like this instead
26:00 - of you know running flake 8 directly
26:01 - what we can actually do is we can remove
26:08 - as a development dependency that flake 8
26:11 - package
26:15 - so that's going to remove it is a
26:19 - too much stuff on my screen right here
26:20 - so that's going to remove it is a
26:22 - development dependency however check it
26:25 - out
26:26 - if we just go ahead and run
26:29 - pre-commit again you see that we still
26:32 - get this flake a logic and it's even
26:35 - pulling in those uh flake 8 settings as
26:37 - well so this is just a really cool way
26:40 - that you can unify a lot of different
26:41 - tools under the same like a single
26:44 - parent tool I guess you could say so now
26:47 - that we got the bulk of everything kind
26:49 - of configured up and running exactly how
26:52 - we want let's go ahead and now hop into
26:55 - our make file and start kind of making
26:58 - some make commands to avoid a lot of
27:01 - this repetitive terminal code so the
27:05 - first thing that I want to go ahead is
27:08 - make a new command and I'm just going to
27:11 - say install pre-commit all right
27:15 - so before I even start typing anything I
27:18 - just want to make sure that this is
27:20 - tagged phony as well and check it out so
27:23 - what this command is going to do is it's
27:26 - going to say
27:28 - type this it's
27:30 - let me find where it was
27:31 - here we go so you know whenever I
27:34 - uninstalled in the and then reinstalled
27:36 - all those hooks I want to do the exact
27:38 - same thing just in a shorter Command
27:40 - right here so I'm going to go ahead and
27:42 - uninstall and another interesting thing
27:46 - is that you know that I said that this
27:49 - actually I'll show you kind of the wrong
27:51 - way to do it and then I'll show you uh
27:54 - the Nuance of it so you know how I said
27:57 - that you basically have a rule or it's
28:00 - more or less like a function in that
28:02 - nested right here is your function body
28:04 - similar to python in a way
28:07 - so the issue with structuring it this
28:08 - way is that each of these sub commands
28:10 - is actually ran in its own shell and
28:14 - it's cool for a lot of things but some
28:16 - things can get a little tricky that way
28:17 - so if you want to ensure that both of
28:20 - these commands are running inside the
28:22 - same shell then what you can do is you
28:24 - can just add them on the same line by
28:26 - putting a semicolon after your first
28:28 - command and then your second Command
28:30 - right after so this is looking good for
28:33 - that command and now what I want to do
28:35 - is actually make a command for this
28:38 - which is actually running pre-commit
28:40 - against all of our files I want to
28:42 - explicitly say all the files and for
28:45 - this I'm just going to name this command
28:46 - linked
28:48 - so I'll say
28:50 - lint
28:52 - and I'm just going to tag it as phony
28:54 - and this was my command right here
29:00 - all right and then after this I also
29:04 - wanna
29:05 - update my update command so I have
29:08 - so I have installed migrate and then I
29:11 - want this one to
29:15 - install pre-commit and then
29:20 - let me just go ahead and test this out
29:22 - so make update
29:24 - so this is what developers are going to
29:26 - do whenever they you know pull something
29:28 - down and they need to update it like the
29:30 - first thing right after grabbing their
29:32 - coffee and now instead of running this
29:36 - big old poetry run pre-commit run all
29:39 - files we can just do makelint
29:41 - and looking beautiful all right
29:46 - so that is really the gist of it however
29:48 - Before I Let You Go I do want to show
29:51 - you one other thing and that is just
29:52 - that uh the kind of benefit of setting
29:55 - everything up this way that let's say
29:57 - that we want to go ahead and add a new
29:59 - hook and this is just what I pasted in
30:02 - right here
30:04 - um
30:05 - I don't want to get into this exact hook
30:07 - but uh just kind of simplify how easy it
30:09 - is to add just go ahead and paste it
30:11 - right in there and then after that to
30:14 - update everything we just need to do
30:15 - make update and again this is going to
30:18 - uninstall and then reinstall everything
30:20 - just to make sure that whenever we
30:22 - commit to get that this is ran as well
30:24 - and then
30:26 - to use it we can just do make lint
30:30 - and all right so we actually have a
30:33 - didn't even know I was going to pick up
30:35 - this error but need type annotations for
30:37 - this
30:38 - can't determine so we'll just put a star
30:41 - right in here
30:43 - so I know what type it is
30:47 - and all right so look at that that is
30:50 - how easy it is pretty much just that add
30:52 - new repos and hooks right in here then
30:54 - you do make update make a lit and you're
30:57 - good to go so yeah editor config flake 8
31:00 - pre-commit
31:02 - I mean we are looking good this uh code
31:04 - base is you know very appreciative it's
31:08 - all nice and clean now so yeah uh it's
31:11 - really all we had to go over in this
31:12 - video in the next video not even sure
31:14 - we're going to be doing maybe getting
31:16 - into some logging and uh yeah whatever
31:19 - it's going to be about it's probably
31:20 - going to be awesome so anyways thank you
31:23 - for watching and I'll see you then