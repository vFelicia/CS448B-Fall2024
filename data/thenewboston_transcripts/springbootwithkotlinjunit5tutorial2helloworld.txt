00:00 - all right so once you've extracted the
00:03 - zip file let's go and open your
00:06 - ide so in this tutorial series i'll be
00:09 - using intellij
00:10 - and i recommend you do the same because
00:12 - it has the best support for kotlin
00:15 - it also works well with spring boot if
00:18 - you want to use eclipse on netbeans that
00:19 - works just fine as well
00:21 - just make sure to install the kotlin
00:23 - plug-in
00:24 - if you should have any problems
00:27 - following along please try using
00:28 - intellij
00:29 - as it's of course the easiest way to
00:31 - follow along
00:32 - just using the exact same tooling now
00:35 - depending on your intellij version this
00:38 - project start window here might look a
00:40 - bit different
00:41 - but just look for a open button
00:44 - and then open up the location where you
00:46 - have your
00:48 - way you extracted your project for me
00:51 - that will be
00:52 - this one here spring booth the new
00:54 - boston once you open it it's going to
00:56 - start
00:57 - building the project using gradle and it
01:00 - will download
01:02 - well the gradle distribution if you
01:03 - don't have it yet
01:05 - and we'll just start downloading all the
01:08 - dependencies and everything that you
01:10 - need
01:11 - so for me since i already have the
01:12 - gradle version installed and so on
01:15 - it only took 15 seconds but it might
01:17 - take a few minutes depending on your
01:19 - system and your setup
01:21 - so just give it a moment to get
01:23 - everything done
01:24 - and once it's finished just go to the
01:26 - project view on the left hand side
01:29 - and open up the project directory here
01:32 - now before we dive into all the
01:34 - different files and what they mean and
01:35 - how you can use them
01:37 - let's just open up the source folder and
01:40 - then
01:40 - under main and kotlin you will find the
01:44 - main entry point into the spring boot
01:46 - application
01:48 - so here because i called my artifact the
01:50 - new boston
01:52 - it generated a class called the new
01:54 - boston application
01:56 - so let me just go ahead and rename this
01:58 - really quick
01:59 - so i'm just going to fix at least the
02:01 - casing here the rest should be fine for
02:03 - now
02:04 - and then let's also update the name of
02:08 - the
02:08 - test class that was also generated for
02:11 - us
02:12 - and that already looks a lot better
02:15 - now let's just go ahead and run this
02:17 - application first of all
02:18 - and just see it in action before we do
02:20 - anything else
02:26 - all right so once it starts up you can
02:28 - see here in the
02:30 - run dialog you can see it locks
02:33 - spring first of all and then it starts
02:35 - up the whole application
02:36 - you can also see the version that we
02:38 - selected that's being used here
02:41 - you can see it's starting the new boston
02:43 - application
02:44 - and then down here you should see tomcat
02:46 - has started on port
02:48 - 8080 so this is the default port that it
02:51 - will use
02:52 - and if it starts up successfully you
02:55 - should see this log message
02:57 - in your log files so let's go ahead and
03:00 - check out this application in the
03:01 - browser
03:03 - over here let's open up localhost
03:07 - at port 8080 and that's just going to
03:10 - give you a white label error page
03:13 - which already means that you have a
03:15 - tomcat running
03:16 - and you have a springboot application
03:18 - that just doesn't really know what to do
03:21 - with this request over here so that's
03:23 - why you can see it's not found
03:26 - if you didn't have anything running on
03:27 - this port it wouldn't be able to connect
03:30 - in the first place
03:31 - if you want to get rid of the error page
03:33 - what you can do really easily
03:35 - is you can go into the resources and
03:38 - then
03:38 - in the static folder here you can add a
03:41 - new file
03:43 - a new index html and you can just let's
03:46 - say
03:47 - we put a headline here it's a hello
03:50 - spring boot so with this just rerun your
03:54 - application
03:55 - you can also tell it to not ask again
03:58 - in the future and just rerun
04:02 - so you can do that with shift f10 or you
04:05 - can also click the button up here
04:07 - so now with these changes let's try
04:10 - again and let's refresh this page in the
04:12 - browser
04:13 - and you should see you have hello spring
04:15 - boot there
04:16 - so it's just showing the index.html
04:18 - whatever you put in there
04:19 - is going to be shown at the root path of
04:22 - your application
04:23 - now if you have any trouble running this
04:26 - project and if you get an error such as
04:28 - cannot access class java.lang.class
04:32 - you might have to go into your project
04:35 - settings
04:36 - so for this you can use ctrl alt shift s
04:40 - so it's a bit of a hard combination of
04:43 - keys
04:44 - or you could also go ahead and go to
04:47 - file and then project structure
04:51 - and then just make sure you have a
04:52 - proper project sdk selected here
04:56 - you can use a jdk 11
04:59 - or jdk 15 just to make sure that you can
05:02 - find all the java classes in your class
05:04 - path
05:06 - all right so hit ok and that should do
05:08 - the trick
05:09 - make sure there are no errors down here
05:11 - as well in the file and that it starts
05:13 - up
05:14 - successfully all right so far so good
05:17 - but we didn't come here to write html
05:20 - code so let's create a more spring boot
05:23 - like hello
05:24 - world application and let's create our
05:26 - first
05:27 - controller or rest endpoint for this
05:30 - so let's create a new coupling class or
05:33 - file by the way i'm using alt insert to
05:35 - create
05:36 - new elements in the tree here and let's
05:39 - call this one simply
05:41 - hello world controller so this is a new
05:45 - kotlin
05:45 - class or file hit enter
05:49 - and then this one well so far is just a
05:52 - regular class
05:54 - so in order to tell springboot to make
05:56 - this a rest controller
05:58 - just add the annotation called
06:00 - restcontroller
06:02 - and this will tell springboot to
06:03 - initialize this class
06:06 - and to make this responsible for
06:09 - handling rest requests next you need
06:12 - another annotation
06:13 - here called request mapping
06:17 - and this one defines the path
06:21 - to use in your rest or for this rest
06:23 - endpoint
06:24 - or for any endpoints in this class
06:27 - so let's go ahead and say api hello
06:31 - so this means now that this rest
06:34 - controller
06:36 - is responsible for any endpoints that
06:38 - start with api
06:40 - slash hello so with the current
06:42 - application
06:43 - that would be localhost 8080
06:47 - slash api slash hello now in order to
06:51 - actually
06:52 - add a mapping here let's create a
06:56 - function and in kotlin to create a
06:58 - function or a method
07:00 - just write fun and then give it a name
07:03 - such as hello world
07:05 - and this will simply return a string
07:09 - and then let's just say we return
07:12 - hello this is a rest
07:16 - endpoint now when you have a very simple
07:20 - function like this one in kotlin
07:22 - meaning one where the whole function is
07:24 - really just one
07:25 - simple expression you can also refactor
07:28 - it by converting it to an expression
07:30 - body
07:31 - and just writing it with an equal sign
07:33 - and that's just the exact same thing
07:35 - just written a bit more concisely now
07:38 - there's one more thing we need which is
07:40 - another annotation on this method
07:42 - and here we can use get mapping in order
07:45 - to say that this is supposed to be
07:47 - a get endpoint now get endpoint is
07:51 - typically just to fetch some
07:54 - data and here the data we fetch is a
07:57 - very simple string
07:59 - but later on it will be things like the
08:02 - list of banks that you saw
08:04 - in the beginning now on the scat mapping
08:06 - annotation
08:07 - you could also add another part of the
08:09 - path
08:10 - so if you wanted something like let's
08:12 - say api slash hello
08:15 - slash spring boot you could do it like
08:18 - this
08:19 - or even just like this and that would
08:22 - mean this will be appended to the space
08:24 - path
08:25 - so like i said this would turn out to be
08:27 - localhost 8080
08:29 - slash api slash hello slash
08:32 - spring boot now here in this example we
08:34 - don't need this so let's get rid of it
08:37 - and this way this get mapping will
08:40 - simply
08:40 - use the parent path over here
08:44 - so just api hello and that's all you now
08:47 - have your first rest 10 point
08:49 - so let's restart the application again
08:52 - using
08:52 - shift dot and f10
08:55 - and then let's just give it a second to
08:58 - rebuild the application and then restart
09:00 - it
09:02 - so here tomcat started on port 8080 so
09:05 - let's go over to the browser
09:08 - on the root path we can still see our
09:10 - index.html
09:12 - and now if we go to slash api slash
09:14 - hello
09:16 - we should see the content that comes
09:18 - from the get
09:19 - endpoint so hello this is a rest
09:21 - endpoint
09:23 - all right perfect so with this you are
09:25 - now set up
09:26 - and ready to go ready to add your actual
09:29 - business logic
09:31 - and proper endpoints so let's go ahead
09:33 - and do that in the next tutorials
09:36 - all right perfect so you've created your
09:37 - first web service based on spring boot
09:40 - you have the project ready to go for the
09:42 - next few tutorials
09:44 - if you liked it so far please leave a
09:46 - like below and also check out my youtube
09:48 - channel where i'll be posting a lot more
09:50 - about
09:51 - front-end and also backhand development
09:53 - for now
09:54 - let's continue with the springboot
09:57 - tutorials