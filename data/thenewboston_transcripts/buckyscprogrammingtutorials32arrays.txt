00:00 - what's going on guys welcome to your
00:01 - 302nd C++ tutorial and in this tutorial
00:05 - I am super excited because I'm going to
00:07 - begin talking to you guys about
00:08 - something called an array so enray is
00:11 - basically one of my favorite parts of
00:13 - C++ because enray is basically a
00:16 - variable that can store multiple values
00:20 - and you can do a bunch of cool things
00:21 - with them and uh like I said it's one of
00:23 - my favorite Parts dealing with C++ so
00:26 - let's go ahead and get started like I
00:29 - said an array is basically a lot like a
00:32 - variable but instead of just storing one
00:35 - value like 8 or 20 or you know 87 it can
00:40 - store multiple values so if you're
00:42 - saying all right that's kind of weird
00:44 - but let me go ahead and show you guys
00:45 - how to make one in order to make an
00:47 - array you First Rate what data type
00:49 - you're working with let's go ahead and
00:51 - make a simple integer array next just
00:54 - like a variable you type something you
00:56 - want to call it I'm going to call my
00:57 - array Bucky because it's pretty cool
00:59 - name
01:00 - and now right after this with no space
01:03 - in square brackets you go ahead and you
01:06 - write how many numbers in this case how
01:08 - many integers do you want to store in
01:11 - your array so let's go ahead and say
01:13 - five so what the compiler is going to do
01:15 - now is it's going to create an array
01:18 - that can store five integers so whenever
01:21 - you run this your compiler is going to
01:23 - set aside some space to hold five
01:25 - integers so we saying all right so now
01:29 - one array
01:30 - can hold five different integers pretty
01:32 - cool huh so here is how well there are a
01:35 - lot of different ways you can create an
01:36 - array but the probably the most basic
01:39 - and easiest to understand is called an
01:41 - array initializer list and an array
01:44 - initializer list is basically just a
01:46 - list of numbers and you have to put it
01:49 - in between these uh squiggly brackets I
01:51 - don't know the technical name for them
01:53 - but they're above the square brackets on
01:54 - your keyboard and in between it you
01:57 - write a comma separated list of five
01:59 - numbers so let's go ahead and print out
02:01 - like um 66 75 2 43 and
02:07 - 99 and that is basically all it is to
02:10 - create an array so we went ahead and we
02:12 - created an array called Bucky and Bucky
02:15 - was able to hold five integers and
02:18 - whenever we gave it its five integers we
02:20 - had to put it inside something called
02:22 - enray initializer list so we have five
02:25 - integers 66 75 2 43 9 99 so now whenever
02:32 - we want to use those values you're
02:34 - saying all right say I wanted to print
02:36 - out one of these values like two or
02:38 - something so let's go ahead and see out
02:41 - um
02:42 - Bucky okay well I can't do that because
02:44 - if I just say the array name it doesn't
02:47 - know exactly what value I'm talking
02:49 - about here so in order to let C++ know
02:53 - what value you want to use from that
02:55 - array uh we have to use something called
02:58 - the array index so let me tell you guys
03:00 - this first when I said an array is made
03:03 - up of a bunch of different values the
03:05 - technical term whenever you're working
03:07 - with array is called elements and all
03:09 - they are is values but you know we have
03:12 - to be professional here so we're going
03:13 - to call them array elements so 66 is one
03:16 - Element 75 is one Element two is an
03:19 - element so on and so forth so whenever
03:22 - we want to index a specific element in R
03:25 - we go ahead and rewrite the index number
03:28 - inside our square bracket ETS so you
03:30 - might be thinking all right the index
03:32 - number for this one is one this one is
03:34 - two and this one is three so let's go
03:36 - ahead and try to print out Bucky 3 and
03:39 - see what happens let's go ahead and end
03:41 - that
03:42 - line and we should be expecting two
03:45 - right here so let's print it out and
03:47 - check it out 43 what the heck I thought
03:50 - it was going to be two okay so 43 is the
03:53 - fourth one not the third one so what's
03:56 - going on Bucky well the reason that it
03:58 - printed out 40 3 is because whenever
04:01 - we're dealing with computers I don't
04:03 - know if you guys know a lot about binary
04:05 - and zeros and ones but you know how
04:07 - people start counting at one 1 2 3 4 5 6
04:11 - 7 8 9 10 I learned how to count to 10
04:13 - well computers they start counting
04:16 - everything with zero so whenever we
04:18 - create our array this first element even
04:21 - though it would be number one to us to
04:23 - the computer it's actually element zero
04:26 - so let's go ahead and print out Bucky
04:28 - zero and as you you can see whenever we
04:30 - run this we get the number 66 so
04:33 - whenever we are referencing indexes or
04:36 - excuse me elements in our array we have
04:38 - to remember that our array starts
04:40 - counting at zero so 0 1 2 so this is
04:45 - actually the two index so let's go ahead
04:47 - and print out Bucky two and now we go
04:50 - ahead and we get two right there so
04:53 - again the basic things I want you guys
04:55 - to remember is this an array is
04:58 - basically a variable that can store
05:00 - multiple values the easiest way to
05:02 - create an array is this write the data
05:04 - type write your array name and then
05:06 - write however many elements you want
05:09 - your array to hold and we stored five
05:11 - integers in this case so that's why we
05:14 - passed five integers in in something
05:16 - called an array initializer list so
05:19 - basically whenever we create Bucky
05:21 - 5 we're telling our computer all right
05:24 - Bucky is going to be holding five
05:26 - different values so compiler go ahead
05:29 - and set aside some space in our memory
05:31 - to hold five integers so that's what it
05:34 - did whenever it created this line and
05:36 - aside from from that I want you guys to
05:38 - notice this each value in the array I
05:41 - say value sometimes but technically
05:43 - they're called an array element and in
05:46 - order to reference one of those elements
05:48 - we use something called an array index
05:51 - and the first element in every array is
05:54 - index zero so if you wanted to print out
05:56 - 99 it would be 0 1 two three four so
06:02 - Bucky 4 whenever we ran this
06:05 - program is 99 pretty cool huh so that's
06:09 - basically the most simple way I can
06:11 - explain arrays to you guys again I said
06:14 - that one way to create an array was to
06:16 - use an array initializer list in the
06:18 - next tutorial I'm going to show you guys
06:20 - a different way to create an array and
06:22 - it's a lot cooler way so if you don't
06:24 - quite understand arrays yet and don't
06:26 - quite understand why they would be
06:28 - useful then just stick around and uh I
06:30 - trust me what did I say I trust me of
06:33 - course I trust myself and trust me you
06:35 - guys will in the upcoming tutorials so
06:36 - again thank you guys so much for
06:38 - watching and I'll see you in the next
06:40 - tutorial