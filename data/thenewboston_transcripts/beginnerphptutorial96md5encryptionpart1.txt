00:00 - hi this is Alex from PHP academy' 2 org
00:02 - back with another PHP tutorial for the
00:05 - new Boston now in this video we're going
00:07 - to be talking about md5 encryption or
00:09 - rather generating an md5 hash from a
00:12 - string now if you if you don't know what
00:14 - md5 is I'll make I'll take a couple of
00:18 - seconds to just explain md5 is a form of
00:21 - encryption and a hash is generated from
00:25 - a string that is given and in PHP we
00:30 - have a function called md5 and what this
00:33 - does is if you supply a string in here
00:35 - it will convert this string to an md5
00:37 - hash so let's take a look at a couple of
00:41 - examples let's create a string that
00:43 - might possibly be a password so I'm
00:46 - going to call this I'm going to give
00:47 - this a value of password so our password
00:49 - essentially is password now if we want
00:52 - to encrypt this we could simply echo out
00:55 - or create a new variable say string hash
01:00 - and I'm going to make this equal to md5
01:02 - and then it in the bracket I'm going to
01:04 - supply the string data that I want to
01:09 - convert or rather encrypt now I'm just
01:13 - going to come down here and echo out
01:15 - string hash ok so now let's take a look
01:18 - at password what it looks like with an M
01:21 - when it's been hashed pass air in line 8
01:26 - ok oh yeah sorry semicolon on the end of
01:29 - there so let's refresh ok so what you
01:32 - see now is the hash representation of
01:35 - the string password now however much we
01:38 - refresh this it's going to stay exactly
01:40 - the same so let's keep refreshing is
01:42 - exactly the same so we call this one-way
01:48 - encryption this string this hash cannot
01:51 - be decrypted back to normal text the
01:54 - only way we can do this is take an input
01:57 - and match it to the actual hashed
02:00 - version of the input so for example if
02:02 - you had a password stored in a database
02:04 - with this value which we are going to
02:06 - come on to talk about in a minute and
02:08 - give a short example if you had a
02:10 - password stored as 1/2
02:12 - and the user typed in say Alex as the
02:15 - password the hash for Alex wouldn't
02:17 - match the hash for this
02:19 - therefore the password would be
02:20 - incorrect now if we were to hash
02:22 - password again if password was entered
02:26 - via user input and and we hashed
02:31 - password again it would match this
02:33 - therefore we would ask you what we know
02:37 - that the password is the same so if this
02:40 - doesn't make sense I'm going to create a
02:42 - new file and I'm going to copy and paste
02:45 - this hash over into this file so paste
02:50 - it in there and we're going to call this
02:56 - hash dot txt
03:00 - so obviously this would be an unsecure
03:02 - way of storing a password because
03:03 - someone would be able to access it
03:05 - however what I'm going to do now is from
03:10 - index.php is I'm going to let the user
03:13 - enter a value so we're going to create a
03:17 - form that allows the user to enter a
03:19 - value then when the form is submitted
03:21 - we're going to open hash dot txt we're
03:24 - going to look at the contents and I'm
03:26 - going to see if the password matches
03:27 - bear in mind this this is equal to
03:30 - password so if we were to type in Alex
03:33 - this the password would be incorrect how
03:35 - it however if we were to type in
03:37 - password this would be correct so let's
03:41 - begin creating what we'll get rid of
03:43 - this first of all and let's begin
03:45 - creating our form so form action equals
03:50 - index or PHP the method is going to be
03:55 - post remember we're posting a password
03:57 - so we want to keep it out of sight so
04:00 - we're going to use post
04:02 - and when you are sort of using login
04:05 - forms or register forms you should
04:06 - always use the post method as well
04:08 - because we've got a lot of data as a
04:09 - process as well as we wanted it to look
04:11 - as clean as possible so now I'm going to
04:14 - create a label called password or some
04:18 - text called password and the input type
04:20 - would usually be password but for the
04:22 - purposes of this tutorial I'm going to
04:23 - use text just so we can see the text
04:25 - that we're typing in and the name of
04:28 - this is going to be user underscore
04:32 - password okay so let's break down a
04:36 - couple of lines and create a submit
04:39 - button and the value of this is going to
04:43 - be submit so let's just refresh the page
04:47 - and check that looks okay okay so we've
04:50 - got the option to type in the password
04:51 - here you can see what I'm typing whereas
04:55 - if we were to use the password type we
04:58 - should obviously always use for
05:00 - passwords then we wouldn't be able to
05:02 - see the data so let me just change this
05:06 - back to text okay so the next thing we
05:09 - want to do is up here we want to check
05:10 - that a password has been entered into
05:13 - the box and the form itself has been
05:15 - submitted so we do this we start an if
05:18 - statement and this here is going to be
05:19 - the block that runs if this is evaluated
05:22 - to true so the first thing we need to
05:25 - check is if the the input type has been
05:28 - set therefore the form has been
05:30 - submitted so we can say is set post user
05:38 - underscore password and we're also going
05:42 - to check if the password isn't blank so
05:45 - we're going to say is not empty not a
05:49 - semicolon there sorry and then we're
05:51 - going to specify this post again so user
05:55 - password okay
05:57 - so presuming that the form has been set
06:00 - and the password has been entered we're
06:03 - now going to echo out something just to
06:05 - confirm this to us as programmers before
06:08 - we continue to the next step so let me
06:10 - type M let me just refresh the page
06:11 - first of all let me just type a password
06:14 - in here
06:15 - and I'm going to click Submit and you
06:18 - can see that we've got this little
06:19 - message confirmation message coming back
06:21 - however if I submit it without any data
06:23 - in nothing happens so the user is going
06:26 - to have to type in a password we could
06:28 - we could also let's say else here we
06:31 - could echo please enter a password okay
06:36 - so obviously we're not going to be a
06:38 - curing out okay to the user that was
06:40 - just for our benefit now the next stage
06:43 - is to set a new variable with this with
06:48 - this password value it it's not
06:50 - necessary but it just allows us to
06:51 - program a lot quicker so we're going to
06:54 - say user underscore password you can
06:56 - name this variable anything you like and
06:58 - that is going to equal dollar underscore
07:00 - post and then user password so we're
07:05 - just creating a shorthand way to
07:06 - reference this posted variable if we
07:09 - reference this outside of this if
07:12 - statement we made we may come across an
07:14 - undefined index error so we reference
07:17 - this inside here okay so the next thing
07:20 - to do is to open up this file called
07:23 - hash text and we want to grab this value
07:27 - here and then compare it to the password
07:30 - that's entered now we're obviously not
07:32 - directly comparing it because if we were
07:34 - directly comparing it the user would
07:36 - have to type this password hash in or if
07:39 - we were storing it as plain text we
07:42 - wouldn't have to do anything to it
07:43 - because that would avoid the point of
07:45 - talking about md5 hashes