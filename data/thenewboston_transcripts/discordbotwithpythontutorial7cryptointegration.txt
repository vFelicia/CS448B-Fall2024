00:00 - welcome back everyone to another video
00:02 - and in this tutorial we are going to be
00:05 - learning how to build a blockchain
00:07 - integration
00:08 - so this is a way that you can allow
00:10 - users to link a blockchain account to
00:13 - their discord username so that your
00:16 - discord bot can accept crypto payments
00:19 - so some simple use cases for this let's
00:22 - say that you had a discord bot where you
00:24 - were selling things like reactions or
00:26 - rolls well you could accept crypto
00:28 - payments for those
00:29 - or
00:30 - let's say that you allowed users to
00:32 - deposit coins
00:34 - and they could buy in-game items such as
00:36 - digital corn or swords for your discord
00:39 - game
00:40 - or let's say that you had discord bot
00:42 - that allowed users to list items for
00:44 - sale
00:44 - but it may cost a fee in crypto to be
00:48 - able to list those items so lots of
00:50 - various ideas and in this tutorial
00:52 - series of course we are going to be
00:54 - using the new boston blockchain because
00:56 - first of all is the greatest blockchain
00:58 - ever and second of all it's just really
01:01 - fast and easy to use in these examples
01:03 - however the core concepts that we're
01:06 - going to be learning throughout the
01:07 - series you are going to be able to port
01:10 - that over to lots of different
01:11 - blockchains encrypt those
01:13 - so now that we have a basic overview of
01:15 - what we're building let's go ahead and
01:17 - dive into the technicalities of how this
01:19 - bad boy is going to actually work
01:23 - so the first thing first is that
01:26 - the discord user is gonna run this
01:29 - register command
01:31 - and they're gonna pass in their account
01:33 - number which is something like this
01:36 - here's mine right here
01:38 - so this register command is essentially
01:40 - saying that hey i want to link this
01:43 - blockchain account with my discord
01:45 - username
01:46 - so that's what's going on there and then
01:48 - our bot is going to ask does the account
01:51 - number that you're trying to register
01:52 - already belong to a user
01:55 - now again
01:56 - in this architecture whenever i say
01:58 - register or registration this means
02:02 - essentially an attempt
02:04 - of a user to link a blockchain account
02:06 - to their discord account now whenever
02:08 - that registration is complete as we'll
02:11 - see later on we're going to be creating
02:13 - a user object
02:14 - and when a user object is linked to a
02:18 - account this means that everything is
02:19 - good everything is verified that's kind
02:21 - of the end step
02:23 - but anyways now we can go back to here
02:25 - and say does this account number that
02:26 - this user is trying to register
02:29 - already belong to an existing user
02:32 - now if so we just want to throw back an
02:34 - error message that says hey this is
02:35 - already registered you can't link the
02:37 - same blockchain account number to two
02:39 - different discord users
02:41 - now if it's not already registered
02:44 - then this is going to be the more common
02:47 - flow we first have to say does this
02:50 - discord user id already have a
02:52 - registration in other words are they
02:54 - already trying to register or link
02:58 - another account number
03:00 - so if they are then what we want to do
03:03 - is we just want to update the
03:04 - registration with the new account number
03:06 - because maybe whenever they ran this
03:08 - command they typed in the wrong account
03:10 - number or something so this allows them
03:11 - to update it
03:13 - and scrolling back down here
03:16 - now if they don't already have a pending
03:18 - registration then what we want to do is
03:21 - we want to just create a brand new one
03:23 - and for this flow
03:25 - the way that we're going to link it is
03:27 - whenever these registrations are created
03:29 - or these attempts to link the blockchain
03:31 - account to their discord username
03:34 - what the bot is going to do is it's
03:36 - going to generate a random verification
03:39 - code and then it's going to send it to
03:41 - them
03:42 - in a dm
03:43 - so only this discord user is going to
03:45 - know about this unique verification code
03:48 - kind of like how those emails work when
03:50 - you
03:51 - include a token in the url and then you
03:53 - email the user but it's kind of the
03:54 - basic concept
03:56 - so now with that being said let's pop
03:58 - over to the verification
04:00 - flow
04:02 - diagram right here
04:04 - so
04:05 - the bots after
04:07 - this registration command is complete
04:09 - it's going to send them a dm that is
04:11 - going to look something like this
04:14 - it's going to say send onecoin to the
04:16 - bot account
04:17 - and it's going to say from i didn't
04:19 - include this part but from the account
04:22 - that you're trying to register
04:24 - with the unique memo
04:26 - so essentially only the user who knows
04:28 - about this unique verification code
04:31 - is going to be able to send it from that
04:33 - account with this in the memo and the
04:37 - memo is just the description
04:39 - of whenever you send coins it's just a
04:41 - little you know bit of text that you can
04:43 - include with your transaction
04:45 - but anyways the user is then going to
04:49 - send this
04:50 - to the bots account
04:52 - and then what the ba account is going to
04:54 - be doing our discord bot is it's going
04:56 - to be listening to blockchain for any
04:59 - incoming transactions
05:01 - now when it receives a transaction
05:04 - the bot is going to look at it it's
05:06 - going to say does the sender of this
05:08 - transaction
05:09 - does their account number and memo match
05:12 - a registration if yes it means that
05:15 - someone is trying to register or link a
05:18 - blockchain account with a discord user
05:20 - account
05:21 - so now the next thing that it needs to
05:23 - ask is if yes does the account number
05:26 - already belong to a user
05:29 - now if it already belongs to a user that
05:31 - means that this blockchain account
05:33 - number is already registered and then
05:36 - we're just gonna throw back an error
05:38 - now
05:39 - i wanna pay a little bit attention to
05:41 - this because this is probably the only
05:42 - tricky part in this whole flow so check
05:45 - this out
05:46 - back here
05:47 - whenever we had our discord bot accept
05:50 - this register command it was a discord
05:52 - user saying hey i want to register this
05:54 - blockchain account to my username
05:57 - now
05:57 - if this account was already registered
05:59 - to user we're just going to throw back
06:01 - an error message right here
06:03 - so why do we need to do this double
06:05 - check right like this
06:07 - well this is just for a special edge
06:08 - case
06:09 - and
06:10 - to kind of describe it imagine this
06:12 - imagine if i released this discord bot
06:14 - and right away two people tried to
06:17 - register my account number right here
06:20 - so of course i tried to register and
06:22 - then someone else tried to register it
06:24 - well before anything was verified the
06:27 - bot could have two pending registrations
06:30 - open
06:31 - now let's say i went through and i of
06:33 - course completed the registration
06:35 - process so i already linked it to my
06:38 - official user
06:39 - now when that second discord user tried
06:42 - to register again and this is really a
06:45 - weird edge case but let's just say i had
06:46 - two discord accounts
06:48 - is that that's when you would say hey
06:51 - this already belongs to a discord user
06:53 - so you're going to get that error
06:54 - message so again this is going to be
06:56 - very rare but since you know
06:59 - it does involve cryptocurrency then you
07:02 - want to just make sure to account for
07:03 - all edge cases so moving along does this
07:06 - account number
07:07 - already belong to a user if not then
07:10 - we're going to say is this a new user
07:13 - that doesn't exist in we're gonna be
07:15 - using mongodb for a database but is this
07:18 - a brand new user that we're pretty much
07:21 - creating or registering for the first
07:23 - time
07:24 - so if it is indeed a brand new user and
07:28 - they're just linking their blockchain
07:30 - account to their discord account for the
07:31 - very first time
07:32 - then we're going to create a brand new
07:34 - user object in our database with zero
07:37 - balance
07:38 - now if not
07:40 - then it means that there's already an
07:43 - existing user that already had a
07:45 - different account number linked up and
07:47 - what we want to do is we just want to
07:49 - update because maybe they just created a
07:51 - new
07:52 - um blockchain account and they're just
07:54 - trying to update their
07:56 - account to something else for example i
07:58 - have bucky and then i have this other
07:59 - one bucket
08:01 - so that is that flow right there
08:04 - now remember this is the flow we go down
08:06 - whenever a user's or the sender's
08:09 - account matches a registration so
08:11 - they're trying to link their blockchain
08:12 - account to their discord account
08:15 - now
08:16 - if
08:17 - the bot receives a payment from the new
08:20 - boston blockchain network that doesn't
08:22 - match a registration
08:24 - then that means of course it's not a
08:26 - user trying to register so it would
08:28 - either mean one of two things
08:30 - now if it's a user
08:32 - that is sending coins to the bot account
08:36 - that just means that they're trying to
08:37 - make a deposit so in this case we're
08:39 - just going to take their balance and
08:41 - increase it by whatever amount they sent
08:44 - now
08:44 - the last case which i mean this isn't a
08:47 - bad thing but um i don't think it's
08:49 - going to happen that often
08:51 - is if the bot
08:52 - receives a deposit or a payment
08:56 - that doesn't match your registration
08:58 - and it doesn't match a user that just
09:00 - means that it's a random person sending
09:02 - coins to this bot account so you can
09:04 - just view it as a donation but most of
09:06 - the time it's either going to be someone
09:08 - trying to go through the registration
09:09 - process or deposit coins into their
09:12 - account and by the way
09:14 - since this is just a basic framework
09:17 - what i am going to do is just have the
09:19 - users
09:20 - whenever they send coins they just have
09:22 - a balance
09:23 - but
09:24 - your bot doesn't have to be structured
09:26 - this way instead of depositing the coins
09:29 - and going to user balance they can
09:31 - deposit coins and they can buy rolls or
09:33 - they can buy in-game items or they can
09:36 - pay for something but i'm just gonna
09:38 - have a balance that increments just
09:40 - because like i said we're just covering
09:42 - the basic concepts right now
09:45 - so now that we understand how everything
09:47 - works and again what we'll be doing is
09:49 - coming back to this and referencing it
09:51 - so you know don't worry if you didn't
09:52 - catch everything right away we're going
09:54 - to be coming back
09:55 - but there you go let's go ahead and jump
09:57 - back into the code and get started now
10:00 - just to give you guys a quick overview
10:01 - of what i did before this tutorial
10:04 - started is i did create a git ignore
10:06 - file and this is just ignoring some
10:08 - basic stuff my ide files some testing
10:11 - environment could keep
10:13 - and by the way all this is going to be
10:15 - on um github it's going to be under the
10:17 - repo discord python framework so you
10:19 - know don't worry about if i'm going over
10:21 - all of this too fast
10:23 - and another thing i did is i created
10:25 - this basic readme on how to set up the
10:27 - project
10:28 - so like i said we're going to be using
10:30 - mongodb as a database for this tutorial
10:34 - and i'm going to be showing you guys how
10:36 - to set it up with your project but as a
10:38 - prerequisite just go ahead and get it
10:40 - installed on your computer i have
10:42 - instructions right here for mac if
10:44 - someone else wants to add windows or
10:45 - linux that would be great
10:47 - but i already actually made an entire
10:49 - mongodb
10:51 - tutorial series so if you guys need help
10:54 - installing it or if you run into any
10:56 - issues either watch that or of course
10:58 - you can pop over in the discord and
11:01 - anyone in the community myself included
11:03 - if i'm available will be able to help
11:05 - you out but anyways like i said make
11:07 - sure that you install mongodb before you
11:10 - get started
11:11 - and the initial structure that we're
11:14 - going to need to create
11:15 - is a database called discord db
11:19 - so let me pop open mongodb compass i
11:22 - like to use
11:23 - and i'm just going to create a new
11:25 - database and this is called discord db
11:29 - and for the collection
11:31 - we're just going to be creating one
11:33 - right off the bat called users
11:36 - and if you remember from these diagrams
11:40 - let's see this user is going to be
11:44 - one of the objects that we store the
11:45 - other one is registration and we're also
11:48 - going to have one other one as you guys
11:49 - are going to see but the cool thing
11:51 - about mongodb is that if you create an
11:54 - object
11:55 - and the collection doesn't already exist
11:57 - it's just going to go ahead and create
11:58 - one on the fly for you so even though
12:00 - we're going to have more collections in
12:02 - addition to users we only need to have
12:04 - one collection and then the rest will
12:06 - just be auto created on the fly pretty
12:09 - cool pretty cool
12:11 - so all right we created our initial
12:13 - mongodb database and collection
12:16 - and then now let's go ahead and create
12:18 - our requirements.txt file
12:22 - so
12:23 - let me go ahead and right click new file
12:25 - requirements.txt
12:28 - make sure to add these in
12:30 - and i actually have these saved so let
12:32 - me go ahead and paste those in
12:34 - and that is this
12:35 - so of course we're going to be using
12:37 - discord dot py
12:40 - pi this is going to allow us to
12:42 - connect our python project
12:44 - python dot n so we can have environment
12:48 - variables and we're going to be doing
12:50 - this because that way
12:52 - we don't have to store our discord token
12:55 - right in our source code because it's
12:57 - not the best practice so instead we'll
12:59 - be
13:00 - following best practices and store that
13:02 - in an environment variable
13:05 - and then this request is just so we can
13:07 - make network requests because we of
13:10 - course are going to be reaching out to
13:11 - the blockchain to listen to transactions
13:15 - all right so those are all the
13:16 - requirements or
13:18 - dependencies that we need to install
13:21 - so now let me go ahead and copy this
13:22 - command
13:23 - and this is just
13:25 - to install those from that file
13:29 - again it's just in case you didn't see
13:31 - that was kind of quick pip3 install
13:32 - slash r requirements.txt
13:36 - and now everything looks good
13:39 - and just pop them back in my
13:40 - requirements all right so no issues or
13:43 - anything and we are good to go
13:44 - and before we get started coding we
13:47 - actually want to do one other thing
13:49 - i believe this is mentioned in the setup
13:51 - and that is one create a dot env file so
13:55 - let me go ahead and do that
13:57 - dot env
13:59 - let me close this right here
14:01 - and it says
14:02 - in the root directory so right there
14:04 - and make sure you set this environment
14:07 - variable which is going to be discord
14:09 - token
14:10 - so this example is of course not going
14:13 - to work for you guys and it's not even
14:15 - going to work for me because i already
14:18 - generated a new one
14:20 - so hold on on the right side of my
14:22 - screen i'm generating a new token and
14:24 - there you go
14:25 - so either way go ahead and create a env
14:28 - file and make one environment variable
14:30 - called discord token
14:32 - and then make sure to include your token
14:34 - right there
14:35 - and by the way this file is in our git
14:39 - ignores so whenever you post this up to
14:42 - github it's not going to share your
14:44 - token so that's why we're doing all this
14:47 - now another thing that i want to do is i
14:49 - actually want to create a config package
14:53 - and all of our core settings are going
14:55 - to be here
14:56 - so make a new file we'll just call it
14:58 - settings
15:00 - [Music]
15:01 - settings.py
15:02 - and again anything that you want to keep
15:04 - private
15:05 - is going to be in your env and then
15:08 - anything that we're going to be putting
15:09 - in our settings are just like constants
15:12 - for application but they're not private
15:14 - no like passwords or anything like that
15:17 - it's mostly just like um application
15:19 - settings think of think of it like that
15:21 - so
15:22 - first thing import os
15:24 - [Music]
15:25 - and we'll say
15:26 - from
15:29 - env
15:30 - we're going to import load
15:32 - dot env
15:34 - and then we're going to call this
15:36 - load.env and what this is going to do is
15:40 - it's going to load in all of our
15:42 - environment variables so that we can
15:44 - treat them in our application
15:46 - the same as we could treat um
15:49 - environment variables from our operating
15:51 - system
15:52 - so it just is a way in case you never
15:54 - worked with this
15:56 - python.env to pretty much load in your
15:59 - project environment variables as
16:01 - operating system ones but anyways
16:03 - let's go ahead and create all of the
16:05 - contents that we're going to need
16:08 - and we are first going to need some
16:10 - application constants
16:12 - and i am going to name this
16:14 - maximum
16:17 - confirmation checks
16:20 - in what this variable is going to be
16:23 - is how many times we are going to check
16:26 - for confirmations and actually let me
16:28 - pull this up
16:30 - it's actually pretty cool
16:32 - where is it there we go all right
16:35 - so essentially
16:37 - whenever we get a
16:39 - or whenever our bot receives a
16:42 - transaction what it does is it's gonna
16:44 - see that and say okay this is a
16:47 - transaction however
16:49 - a transaction does not mean a verified
16:52 - payment a transaction
16:54 - that the bot sees at first is just going
16:56 - to say that it's an attempted payment
16:59 - now in order like many blockchains to
17:02 - verify that payment you need to wait for
17:04 - confirmations
17:06 - so once it receives it
17:08 - in in our blockchain it happens right
17:10 - away
17:10 - but either way what we're going to do is
17:12 - we're going to say once we receive it
17:14 - we're going to pull the blockchain x
17:16 - number of times looking for these
17:19 - confirmations
17:20 - so
17:21 - we will say we're going to look 20 times
17:24 - and if we still can't find the
17:25 - confirmation then that means that the
17:27 - payment was just a failure and it's
17:30 - invalid
17:31 - so that's all this means we can tweak it
17:33 - later on if we need to make it longer or
17:35 - shorter but you guys are going to see
17:36 - how this works when we get to it
17:39 - now the other
17:41 - constants i want to add are just for
17:43 - the new boston blockchain network
17:46 - and the first thing we're going to have
17:48 - is a bank
17:50 - ip
17:51 - and we're just going to use my bank
17:53 - which is 54.183.16.194.
18:00 - and after this we're going to use
18:04 - the bank protocol and we're just using
18:06 - http again we're on the alphanet
18:09 - i don't know when you guys are watching
18:10 - this but uh it's 2021 and we're still on
18:13 - the alphanet of our blockchain so http
18:17 - and for the bots account number
18:22 - this is going to be the account number
18:24 - that of course if you can't tell belongs
18:25 - to the bots
18:27 - and basically saying that listen for
18:29 - payments to this account number so of
18:32 - course make sure it's one that you own
18:34 - or else someone else is going to be
18:36 - getting your payments but there you go
18:39 - now
18:40 - after this
18:41 - we're just going to have some discord
18:43 - constants
18:44 - and i'm just going to call this discord
18:47 - token
18:48 - now this is going to be equal to this
18:51 - value right here and that's why we
18:53 - needed to import os right here because
18:56 - we're going to be plucking that from os
18:59 - dot get
19:00 - environment variable
19:02 - and this environment variable is just
19:04 - going to be called discord token
19:07 - so that's how you do that
19:08 - let me clean this up a little bit all
19:10 - right now last but not least
19:13 - we are going to have some constants for
19:15 -  and that is the database
19:18 - name
19:20 - and if you remember the database name
19:23 - was discord
19:25 - hyphen db
19:29 - and after this the host
19:32 - is just going to be localhost which is
19:34 - hosted on my own machine right now
19:37 - and then port
19:39 - we're going to be setting this equal
19:41 - well this is actually just the default
19:43 - is 27017
19:47 - but i just want to hard code it because
19:50 - of course whenever you're deploying this
19:52 - you may have to change some of these
19:53 - settings so there you go but that is all
19:56 - that we're going to have in our settings
19:58 - basically our constants needed for
20:01 - further development
20:02 - so let's go ahead and get started with
20:04 - our basic boilerplate from discord.ext
20:08 - we are first going to import commands
20:11 - and then we will just name our object
20:13 - box and this is equal to commands dot
20:15 - bots
20:17 - and for the command prefix i like this
20:19 - little arrow maybe i like it because it
20:21 - reminds me of the new boston logo but
20:23 - either way that's what we're going to
20:24 - roll with
20:25 - and what we can actually probably do
20:27 - right after this is we can say if name
20:30 - is equal to
20:31 - dunder maine
20:34 - then we just want to do bots.run
20:39 - and then we can just pass in our discord
20:42 - token
20:44 - and from this we can do config.settings
20:47 - import discord token
20:50 - so there you go and let's also just go
20:52 - ahead and make that on ready event
20:54 - listener so we can say
20:57 - bot.event
20:59 - and then we'll say async
21:01 - def on
21:02 - ready
21:05 - now whenever our bot is ready
21:08 - even though we aren't gonna write this
21:09 - logic just yet we are gonna actually
21:12 - start pulling the blockchain in other
21:13 - words we're gonna start listening for
21:15 - transactions right away
21:17 - so i'm just going to write a little note
21:19 - here so we don't forget start pulling
21:22 - blockchain
21:23 - and then we'll say for now we'll just
21:25 - print out ready
21:26 - just so we can test that everything is
21:29 - working
21:30 - so let me just go ahead and run this
21:32 - mostly just to make sure that my token
21:34 - is legit all right so it says on ready
21:37 - and pop open discord it looks like our
21:40 - bot is online beautiful all we need for
21:42 - now
21:43 - so now let me go ahead and stop this and
21:46 - let's first start coding our register
21:49 - command
21:50 - so let me copy this
21:52 - a bit lazy
21:54 - and instead of on ready remember we're
21:56 - just gonna name it register
21:59 - now
22:00 - the sample that we're gonna be using is
22:04 - of course
22:06 - register and let me just copy my account
22:08 - number
22:12 - all right just so we can see what's kind
22:14 - of going on
22:16 - so we're gonna be making custom command
22:18 - called register
22:20 - and this isn't an event it's actually a
22:22 - command singular
22:24 - all right and as you know whenever you
22:28 - have a command it takes context
22:31 - and since this is taking in one argument
22:34 - that's going to be the account number we
22:36 - can actually rename this to account
22:38 - number
22:40 - and there you go
22:42 - now the very very first thing we want to
22:44 - do before we get into any of the good
22:46 - stuff is we want to take a look at what
22:49 - they passed in right here and we want to
22:52 - verify that it's a properly formatted
22:54 - account number the reason for this is
22:57 - because if it is not
22:59 - and they try to register something like
23:01 - tuna then everything else is going to be
23:03 - kind of messed up because it's going to
23:05 - try to listen to an account number or
23:07 - transactions that is impossible to exist
23:09 - and well really if they do that we want
23:12 - to give them feedback right away
23:14 - so now let's go ahead and make this
23:16 - verification function however i don't
23:18 - just want to put it right in here
23:20 - because i want this main dot py to be
23:23 - really focused on these bot commands and
23:26 - this validation is really more of like
23:29 - part of the new boston protocol
23:32 - so that said i'm gonna go ahead and make
23:33 - a new package called utils
23:37 - and i'm going to create a new file and
23:39 - i'm just going to call it new boston now
23:42 - in here we'll make a function that says
23:45 - is valid let me bump this up too
23:48 - is valid account
23:51 - number
23:53 - and this is going to take an account
23:54 - number
23:55 - or in other words some kind of string
23:59 - and then we can just say
24:01 - that this checks if the
24:07 - checks if the given account number is
24:09 - valid
24:10 - now just to give you guys a real quick
24:12 - overview the account numbers that are
24:16 - valid on our network one these are
24:18 - actually 64 digits long so it has to be
24:22 - 64 characters long
24:23 - another thing is
24:25 - you need to make sure that you can
24:27 - convert it to bytes because this is a
24:30 - hexadecimal representation of a big
24:33 - integer so as long as you can convert it
24:35 - to a byte value then it's legit so you
24:38 - guys are going to see it's it's like uh
24:40 - six lines of code or maybe a little bit
24:42 - longer but whatever
24:44 - so the first thing is if the length in
24:47 - even though it may be a string already
24:49 - we just want to make sure that we
24:50 - convert it to a string so that this
24:52 - function doesn't tweak out so say if the
24:55 - value that you passed in for the account
24:57 - number
24:58 - after being converted to a string
25:00 - is not equal to
25:02 - 64 characters long basically we just
25:04 - want to go ahead and return false
25:07 - because it has to be 64 characters long
25:10 - for show
25:12 - so another thing that we're going to do
25:13 - like i said is we want to try to convert
25:15 - this from the hexadecimal value that it
25:18 - is to a byte value
25:21 - so okay this will ensure that they can't
25:23 - just pass in a 64 character long
25:26 - string or sentence or anything like that
25:28 - so in order to do this what you can do
25:30 - is bytes
25:32 - from hex
25:33 - and then you can just convert the
25:35 - account number and we don't need to
25:37 - store it in a variable or do anything
25:39 - because if this cannot convert then it's
25:41 - just going to tweak out
25:43 - so we can just say accept
25:45 - exception we really don't care why it
25:48 - can't convert because at this point we
25:50 - just want to say
25:51 - is it legit can it convert or not if not
25:54 - then we just want to return false now if
25:57 - it is 64 characters long and if you can
26:00 - convert it to a legitimate byte value
26:02 - then and only then we want to return
26:05 - true
26:06 - so there you go there is our function is
26:09 - valid account number so now let's go
26:11 - ahead and import that
26:14 - so from utils.the new boston import is
26:17 - valid account number
26:19 - and back in our register function let me
26:21 - zoom out just a little bit just a little
26:24 - bit we can now check if not is a valid
26:28 - account number for the account number
26:29 - that they passed in
26:31 - what we actually want to do right here
26:33 - is we want to send them back an error
26:36 - message and then we are going to want to
26:39 - return
26:40 - now
26:42 - actually let me leave a comment a send
26:45 - back
26:46 - error message right here
26:48 - now of course we can just do you know
26:50 - get the channel send whatever but what i
26:53 - want to do
26:55 - is i want to standardize the way that we
26:57 - send back messages to them and i want to
27:00 - use an embed because whenever you are
27:03 - using discord and embed really
27:05 - differentiates between that and user
27:08 - type commands and i also just always
27:10 - like sending back messages from the bot
27:12 - using embeds
27:14 - it makes your discord bot look a little
27:16 - bit more professional so let's go ahead
27:18 - and create that function now now again i
27:21 - know that we can just use it directly
27:23 - right here but what i want to do is
27:25 - actually standardize a few things namely
27:27 - the color of this
27:29 - and i don't want to give
27:31 - the flexibility to change the color
27:33 - right in here even though we may later
27:34 - on but for right now just to keep
27:36 - everything standard we're going to be
27:38 - using a separate function
27:39 - so in utils right here let's make
27:42 - another file for discord utils
27:46 - and we can say async
27:49 - def
27:50 - send embed
27:53 - now in here i'm actually been thrown in
27:55 - this star right here
27:57 - and this is going to take the context
28:00 - the title and the description
28:02 - of the embed that we're going to send
28:04 - back to the user and let me pump this
28:06 - back up i always forget
28:09 - and just leave a comment we will say
28:11 - something like
28:13 - send a
28:14 - simple bed with a title and a
28:19 - description
28:20 - [Music]
28:21 - now the reason i put this star right
28:23 - here is because whenever you have star
28:25 - it forces the rest of the arguments to
28:28 - be named in other words you
28:31 - what is this function going to be called
28:32 - send embed right like this
28:35 - so anyways um the point being is that
28:38 - instead of just and we didn't import it
28:41 - that's why we're getting these errors
28:42 - but instead of just passing in values
28:44 - right here it forces you to actually
28:46 - pass them in with equal sign and i just
28:48 - like it because
28:50 - it makes your code a little bit less
28:52 - error prone again for some simple
28:54 - functions like this it's probably not
28:56 - needed but it is helpful in some cases
28:59 - and you guys are going to be seeing
29:00 - what's going on right when we actually
29:02 - invoke this function
29:03 - but that's uh the background behind that
29:06 - so what we want to do is we just want to
29:09 - make a variable first of all called and
29:11 - we actually need to import discord
29:13 - [Music]
29:16 - the discord package
29:18 - so what we want to do is
29:21 - from discord dot embed
29:24 - and again i'm going to be going over
29:25 - this pretty quick because i already went
29:28 - over it in i think my last tutorial or a
29:30 - couple tutorials ago
29:32 - so the title is just going to be equal
29:33 - to the title that we passed in the
29:35 - description is equal to the description
29:39 - now for the color of all of these we are
29:42 - going to be using
29:44 - discord
29:45 - dot
29:46 - color go with the english spelling i
29:48 - believe that is and we're just going to
29:50 - be using red and this is going to
29:52 - standardize the color of all
29:55 - messages that we send from the bob and
29:57 - last but not least we can just do await
30:00 - context dot send
30:05 - and we're just going to send back the
30:07 - embed as the embed
30:10 - now let me clean this up and import it
30:14 - so let's say
30:15 - from utils.discord
30:18 - and well i actually forgot the name of
30:21 - that just made it like two seconds ago
30:22 - bro
30:23 - all right
30:24 - so yeah this is what i was saying right
30:26 - here where
30:28 - instead of just being able to pass in
30:30 - the context uh title description as you
30:33 - know
30:34 - three strings like this
30:36 - whatever and then whatever because
30:39 - whenever you do this it's it's hard to
30:40 - tell like wait what was i supposed to
30:42 - pass in first oh context though and then
30:45 - wait after that was a title or
30:47 - description
30:48 - it kind of just uh
30:51 - doesn't allow you to have that ambiguity
30:54 - i guess
30:55 - so let me
30:56 - show you guys what i like to do
31:01 - so whenever i have a function with
31:03 - multiple arguments i like to separate
31:05 - each of those out on a new line
31:08 - and i don't know just kind of ocd thing
31:10 - but for the context of course we're just
31:12 - going to be passing in the context
31:14 - for the title we can just say something
31:16 - like uh okay so this is going to be what
31:19 - we send back if their account number is
31:21 - invalid we'll just say something like
31:23 - invalid for right now
31:25 - and for the description
31:27 - we can say something like
31:32 - invalid account number
31:35 - and since this is an async function we
31:38 - also need to await this
31:40 - and then with that everything should be
31:42 - good to go
31:44 - so we can actually let me just go ahead
31:46 - and i always like to keep my code nice
31:49 - and clean
31:50 - all right so now we can actually go
31:52 - ahead and test this because we do have
31:54 - logic where they can basically pass in a
31:57 - valid account number and as of now it's
32:00 - just going to do nothing and then if
32:02 - they pass in an invalid one then it's
32:04 - just going to print out
32:06 - this little embed right here so let me
32:08 - copy this because we know this is the
32:10 - valid command
32:11 - and now if i go ahead and rerun this
32:14 - pop open my discord bob
32:16 - and this was from before when i was
32:19 - playing around with it but either way
32:21 - this is me trying to register a legit
32:24 - account number gonna press enter and
32:26 - nothing happened so that's good
32:29 - so now let me go ahead and try to
32:30 - register
32:32 - an invalid account number and i'll just
32:33 - say registered dog
32:35 - and then we go beautiful it just says
32:37 - invalid invalid account number there we
32:39 - go
32:40 - so that is our basic account number
32:43 - validation check
32:44 - so now let's move on all right so after
32:47 - we have a valid account number down here
32:50 - then what are we supposed to do well
32:52 - lucky for us we plan now everything
32:55 - ahead of time
32:57 - and we can reference our diagram to know
33:00 - exactly what logic we need to code next
33:02 - so we got a valid account number cool
33:05 - cool cool
33:06 - next question that we have to answer is
33:08 - does the account number that was passed
33:10 - in through this register command belong
33:12 - to an existing user
33:15 - now remember our existing users are
33:17 - going to be stored in so now we're
33:20 - going to have to get a connection to
33:21 -  so how do we do that well we are
33:25 - going to be using
33:27 - pi so let me just go ahead and
33:29 - import that now so i that's actually
33:31 - from
33:32 - pi we are going to import the
33:35 -  client
33:37 - because this is the essentially the
33:39 - python connection to
33:42 - and in order to use this you can make
33:44 - object called and set this equal
33:46 - to client
33:48 - and when you initialize this connection
33:51 - it takes in two pieces of information
33:54 - the first one is the host that you want
33:56 - to connect to and we're just running
33:58 - this on localhost and the second one is
34:00 - the port number
34:02 - so since we're going to need these let
34:04 - me go ahead and import those from
34:06 - settings and that is
34:08 -  host and then the port
34:11 - number
34:12 - and you can just copy those and pass
34:14 - those in in this order
34:16 - so the next thing that we're going to
34:19 - need before let's see if i can pop open
34:22 - mongodb compass again
34:24 - is before we can access this users
34:26 - collection because that's what we're
34:28 - going to need to check
34:29 - we first need to get access to this
34:31 - database which is going to be the store
34:33 - of all of our collections and we named
34:35 - this discord hyphen db
34:39 - now in order to do that if you just make
34:41 - a variable called database
34:44 - you can set it equal to your
34:46 - connection and this is actually really
34:49 - easy in order to do
34:51 - because you pretty much just access them
34:53 - like python dictionaries
34:55 - so the name of our database we can just
34:59 - use this right here
35:01 - this constant mongodb name so
35:04 - make sure you import that first of all
35:07 - and then you can reference it right like
35:08 - that
35:10 - just so this
35:13 - shows up on your guys screen let me just
35:15 - go ahead and clean this up a bit
35:22 - alright there you go
35:24 - so anyways uh point being is that we
35:27 - needed to check something in mongodb
35:29 - namely does a user already exist for the
35:33 - existing account number
35:35 - and in order to do that we just got a
35:37 - connection to and then we
35:39 - reference the database now in order to
35:41 - reference the actual users collection
35:45 - since we're going to be using this a lot
35:47 - and i want to make sure that i don't
35:48 - overwrite it i'm going to be making a
35:50 - constant
35:51 - and using all caps for that
35:54 - and
35:55 - with the database so i can just copy
35:57 - that
35:58 - to access a certain collection
36:00 - again same thing you pretty much just
36:02 - treat it like a python dictionary where
36:05 - you can just pass in the collection name
36:08 - right like this i guess not pass it in
36:10 - it's not a function
36:11 - but there you go
36:13 - so now with this users collection what
36:15 - we can do is we can use it
36:18 - to see if we have a user with the
36:21 - matching account number so how do we do
36:23 - that well we can just say
36:25 - we'll store the results in a variable
36:28 - called user and then what we can do is
36:30 - that users collection which this is all
36:33 - connected to by this point we're
36:36 - just going to say we're going to use
36:37 - this find one function and in here you
36:41 - can basically type in what is the field
36:44 - you're looking for and then what is the
36:46 - value you're trying to match basically
36:48 - like a filter so we're going to say look
36:50 - at the account number
36:52 - key
36:53 - and if any value matches the account
36:56 - number we're trying to pass in then that
36:59 - means that user must exist
37:02 - so anyways what we're going to say is
37:03 - something like this if a user is found
37:07 - then we're just gonna wanna send back uh
37:10 - error message that says already
37:12 - registered
37:14 - since that account number is already
37:16 - taken
37:16 - and then from here we can just return
37:19 - because we don't wanna go through with
37:20 - any more logic once they get that error
37:22 - message we kind of want to break out of
37:24 - our code and of course instead of this
37:27 - comment right here we have our handy
37:29 - little function
37:31 - that can send embeds and there you go
37:34 - so
37:34 - we for this title can say something like
37:37 - already
37:38 - registered
37:40 - and then for the description let me
37:42 - actually make this a f string
37:44 - because we can say the account
37:48 - and then pass in the account number just
37:50 - as some you know additional feedback is
37:53 - already
37:55 - registered
37:59 - all right there you go scroll out all
38:02 - right
38:03 - so we're essentially going to validate
38:05 - the account number and if that's good
38:07 - we're going to look at the account
38:08 - number we're going to see if it already
38:10 - matches an already registered user if so
38:14 - then even though the account number was
38:16 - valid we want to say hey this account
38:18 - number already belongs to someone you
38:19 - can't register it because we don't want
38:21 - multiple discord users
38:24 - hooked into the same account number