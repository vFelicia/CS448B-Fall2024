00:00 - okay so the next thing like I said we
00:02 - need to do is open the file so I'm going
00:05 - to create a variable called handle and
00:07 - this is going to be equal to F open and
00:11 - we are opening let's just create a new
00:14 - variable here called file name so we can
00:16 - reference this as well so the file name
00:18 - is hash txt so for the arguments for F
00:22 - open we need the file name specified and
00:25 - the method the way we want to open it so
00:27 - we're opening just to read the data in
00:29 - so we just need to pop an R in there now
00:33 - what we want to do is we want to create
00:35 - a new variable with the file password so
00:39 - this variable is essentially going to
00:41 - equal a hash that's inside here so file
00:47 - password is equal to f read and then we
00:51 - need to supply a couple of arguments
00:52 - here the first argument is where we're
00:54 - reading from which is the handle and the
00:57 - second is the file the amount of data we
00:59 - want to open to the file we want the
01:01 - entire file size so we use this file
01:04 - size function here as opposed to
01:06 - specifying an amount of data in bytes so
01:10 - file size and then we want to just
01:12 - reference that to back to our file name
01:14 - so what we've done so far is we've
01:17 - created a reference for our hash txt and
01:20 - we've opened that using the F open
01:22 - function with read properties on that so
01:26 - we can read it now we've created a new
01:28 - variable called file password which will
01:30 - contain this hash so we can do something
01:33 - with it in our program and we've used
01:35 - use the F read function and we've used
01:37 - that we've specified that we want to
01:39 - read data from this file this specific
01:42 - file here which I've named handle and
01:44 - then we're opening the full file size of
01:47 - the hash txt so let's just put an echo
01:51 - in front of here in front of there so we
01:55 - echo out this data so let's just type
01:58 - anything in here it doesn't really
02:00 - matter at this stage and click Submit
02:02 - you see that we've now gained this hash
02:04 - from this hash to txt file so now we can
02:09 - do something with it
02:11 - now what we need to do is we need to
02:13 - hash the password that the user has
02:15 - entered so this user password needs to
02:18 - be converted to a hash in order to
02:20 - compare it to another hash so we can do
02:23 - this just by simply saying md5 and
02:27 - wrapping that in the md5 function now
02:30 - the password is automatically converted
02:32 - to an md5 hash and if we were to compare
02:35 - them they'd either equal something
02:37 - completely different or the same as they
02:40 - are now both hashes so we can create an
02:43 - if statement and we can say if user
02:46 - password is equal to file password do
02:53 - something else we want to run this
02:56 - blocks we want to do something else
02:57 - so obviously the else is going to be
02:59 - incorrect password password there we go
03:05 - and otherwise we're going to give the
03:08 - user a confirmation message that their
03:11 - password was okay so password okay so
03:16 - now let's run the program or our our
03:20 - script rather so back to you a hair
03:22 - please enter a password r-right okay the
03:26 - reason that it's saying that
03:27 - automatically is because we have this
03:30 - check in here as well as this check so
03:33 - even if we haven't submitted the form
03:35 - we're still processing please enter a
03:37 - password this is an easy fix you just
03:41 - need to break it up into two different
03:42 - if statements one inside another but for
03:46 - now we'll just go ahead and type in a
03:48 - password so I'm going to type in Alex as
03:50 - the password and click Submit now we've
03:53 - received the error incorrect password
03:54 - now if we were to type password what's
03:58 - going to happen now is we are hashing
04:01 - the user password we're hashing this
04:05 - value here password and we are
04:08 - converting it to an md5 hash then we
04:12 - compare it to the md5 hash already
04:14 - stored in hash therefore password hash
04:17 - is equal to this
04:18 - therefore the password matches so let's
04:21 - just click Submit
04:22 - and it says password okay now why do we
04:27 - use password hashes in the first place
04:29 - this md5 encryption what's the point in
04:32 - using it we could just define a password
04:34 - variable inside this file when no one
04:37 - has access to it no one can view the
04:40 - source of the webpage when we're
04:41 - processing in PHP because everything's
04:43 - done server-side so how do we cut how do
04:46 - we explain why we need md5 hashes now
04:50 - the reason is even though md5 isn't the
04:53 - most secure form of of hashing and it
04:56 - isn't the most secure form of encryption
04:57 - it can be cracked easily by checking
05:01 - using a brute force method however let's
05:06 - just say you had a database setup and
05:09 - there were lots and lots of usernames
05:12 - and passwords so you have lots of users
05:14 - on your website and you are using a
05:16 - database now what happens if someone
05:19 - gains unauthorized access to your
05:21 - database what's going to happen is they
05:23 - are going to be able to see all your
05:25 - passwords if they're unencrypted let's
05:29 - just say you had a website that let that
05:31 - let people say make a payment or was to
05:34 - store sensitive information if you were
05:36 - storing a password and someone had
05:39 - access to your database and they could
05:41 - view users passwords you may have let's
05:44 - just open a new text file you may have a
05:46 - column called user name and a column
05:48 - called password and I can have Alex here
05:50 - and I could have say pass one two three
05:53 - we could have another user called Billy
05:55 - and the password could be I love PHP now
05:59 - if I was to break into this this
06:03 - database I can already see the users
06:06 - passwords therefore I can go straight
06:08 - over to the website and I can log in
06:10 - using these passwords however if these
06:14 - were md5 encrypted for example
06:20 - look like this it just so happens that
06:24 - these two users are going to have the
06:25 - same password if it looked like this you
06:28 - know someone that has access and
06:30 - authorized access to any way you store
06:32 - these will say oh well I can't convert
06:34 - these because remember I said earlier in
06:36 - the tutorial the md5 is one-way
06:38 - encryption there is no way that you can
06:41 - return this to its original value that's
06:43 - what we call one-way encryption if I was
06:46 - to create an encryption method that lets
06:48 - say made a equal to one it makes or
06:53 - let's do this another way or made B
06:56 - equal to 2 or C equal to 3 and my
07:03 - password was BC a and I encrypted it as
07:06 - 2 3 1 you would be able to reverse this
07:11 - encryption so you'd be able to say 2 3 1
07:14 - well I know that I know the algorithm
07:17 - that's used to encrypt this so I know
07:18 - that 2 is equal to B I know that 3 is
07:21 - equal to C and I know that 1 is equal to
07:24 - a so I now know that the password is BC
07:27 - a however md5 doesn't work like that
07:30 - there's no way to converting this back
07:32 - so you're protecting against your users
07:34 - and against your website and if you
07:37 - haven't already looked at user databases
07:40 - and MySQL databases that will come later
07:43 - but we'll always be storing them as md5
07:45 - hashes where most cases anyway for
07:47 - tutorial purposes some people or and I
07:50 - certainly might not buy in a real life
07:53 - situation you must always store a
07:55 - password with at least the level of
07:57 - encryption of md5 okay so that's about
08:00 - it for M d5 I hope you learned something
08:02 - and remember to always in passwords
08:05 - with one-way algorithms