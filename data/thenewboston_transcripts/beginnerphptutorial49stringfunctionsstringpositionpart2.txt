00:00 - now what happens inside our while loop
00:02 - so while our string position equals STR
00:05 - pause if nothing is found in the STR
00:07 - pause it will return a 0 so remember 0
00:10 - inside here will mean a false therefore
00:13 - the loop will be broken but for now as
00:15 - long as the string position is found we
00:18 - want to echo out the string position so
00:20 - we just simply do echo string position
00:25 - and I'm just going to append a break on
00:28 - to that let's just make this a bit more
00:30 - user-friendly we could say echo echo
00:34 - found at we can even include the word so
00:41 - let's say find found at ok so what this
00:46 - is going to do is for every every for
00:50 - every time it's found we're going to
00:52 - echo the position and obviously the word
00:55 - we're going to iterate way and then
00:56 - we're going to put a line break on the
00:58 - end but now what we want to do is we
01:00 - want to create a new offset because at
01:02 - the moment we're going to find the we're
01:04 - going to find the string that's that's
01:07 - absolutely fine we're going to echo out
01:08 - the first instance of the string found
01:11 - within here so it will be at position 2
01:13 - however then all we're going to be doing
01:16 - is searching from the start again so
01:18 - we're going to be searching from
01:19 - position 0 again so we're going to be
01:22 - searching and we're going to find the
01:23 - same string so you'll find that if you
01:25 - do run your page at this point then your
01:28 - page will probably crash it might crash
01:31 - your browser because what we actually
01:33 - have here is now an endless loop so now
01:35 - what we need to do is we need to create
01:37 - the offset value and I'm going to say
01:40 - offset is equal to string position so
01:44 - this is the current position found let's
01:46 - just run through so if we were to find
01:49 - it at position 2 we then need to add 2
01:54 - on Twitter to begin the search from here
01:57 - so string position add 2 now why is this
02:02 - not good well I've already explained
02:03 - we've got the length of the string to
02:06 - find here so that's the amount of
02:08 - characters just to skip so all I need to
02:11 - do is add on this variable
02:13 - length now we can run and test our
02:18 - program now to see if everything is
02:20 - working so let's just refresh and you
02:24 - can now see Oh
02:35 - oh yeah okay so I'm reading this as is
02:38 - found out but obviously our word is is
02:41 - so let's just make this bold so it
02:44 - doesn't look as confusing confuse me for
02:47 - a minute there okay so okay so we've got
02:53 - is found at two so we found it a
02:55 - position to let's just double check that
02:57 - so we've got one two and then we've
03:00 - found it then what we've done is here
03:02 - within the office Cape we've skipped two
03:04 - so we've started from this position here
03:06 - and the offset has been read in here so
03:09 - the offset has now been read out on to
03:12 - its found it - so the offsets now
03:14 - starting at position 4 and now we go one
03:18 - more and we find it at position 5 which
03:20 - is here we skip to and we start at
03:24 - position 7 and then we find it all the
03:27 - way up here at position 25 then we skip
03:30 - another two and it can't be found any
03:33 - more therefore this while loop will be
03:36 - evaluated to false because this value of
03:38 - string position will equal zero so now
03:41 - we've successfully found everything now
03:45 - I know we've used a lot of variables
03:47 - like the find in here and the fine
03:49 - lengths in here and the reason for this
03:51 - is now if I wanted to search for a
03:53 - completely different word inside here
03:54 - for example if I wanted to change this
03:56 - to string everything is now going to be
03:59 - updated so the fine length is going to
04:01 - be updated which is going to be put in
04:03 - here so now instead of skipping two
04:04 - characters we're skipping one two three
04:06 - four five six and we're also updating
04:09 - this inside our function so we've only
04:11 - had to change one value now why is this
04:15 - going to be useful let's just test it
04:17 - out first and we'll see if it works
04:19 - string found at 10 so let's just check
04:22 - this one two three four five six seven
04:24 - eight nine ten yeah it's found that so
04:27 - why is this useful well let's say we had
04:29 - a form down here and we wanted to ask
04:31 - the user to input a certain value we
04:34 - could pass this find variable as say
04:37 - dollar underscore post Abdulla
04:39 - underscore get to find for example so we
04:44 - could specify or we could allow the user
04:46 - to specify a string
04:48 - I wanted to find in another particular
04:50 - string and therefore our program that
04:52 - we've just created here would
04:54 - automatically update for whatever string
04:56 - was entered so that's basically how the
05:00 - string position function works and how
05:03 - useful it can actually be