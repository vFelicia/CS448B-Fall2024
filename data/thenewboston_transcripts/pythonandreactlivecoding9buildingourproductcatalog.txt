00:00 - already on welcome back to another video
00:03 - and in this one we're gonna keep
00:05 - chugging along at our shop feature
00:07 - so in the last video what we did is we
00:10 - wrote the logic for the seller product
00:12 - page in other words
00:14 - so the seller can add and manage all of
00:17 - their products and now that we have the
00:20 - functionality for a seller to be able to
00:22 - add products let's go ahead and build
00:24 - out our buyers product catalog which is
00:28 - going to be the equivalent of this view
00:30 - right here
00:32 - so on that note what I want to do
00:36 - is first hop into tnbos
00:40 - and all right
00:44 - so what I'm going to do first is make
00:46 - the empty state for this
00:49 - in other words when there are no
00:51 - products at all we're just going to give
00:53 - them a better empty State than this you
00:56 - know little uh well we don't just want
00:58 - to give them a blank screen a little
01:00 - indicator to let them know what's up
01:03 - let's hop back into nbos and figure out
01:06 - how we do this so tnbos I have two
01:10 - components an empty page which is empty
01:13 - state for an entire page and then an
01:15 - empty State and this is just a component
01:18 - where let's say you have like a little
01:19 - subsection like a panel or something
01:22 - then you can stick this in there and for
01:24 - my empty page component I basically just
01:27 - use that same component but inside a
01:29 - much larger container that will take up
01:31 - the whole page
01:32 - so with that said I'm going to go ahead
01:35 - and first just copy this empty State
01:38 - component
01:43 - okay
01:46 - so yeah let's actually just copy and
01:47 - then we'll kind of read through it
01:50 - okay so front end
01:52 - okay
01:54 - so a new item
01:57 - our component Library which is an empty
02:00 - State component
02:02 - and the styles for this let's see what
02:06 - we're working with
02:09 - so the spin Gray
02:14 - let's do the colors palette
02:19 - Gray
02:20 - looks like 100 and 200 should be
02:22 - switched
02:23 - yeah I think they should be actually
02:31 - yeah that looks a little bit better okay
02:33 - so anyways getting a little off track
02:35 - here but had a little issue okay so span
02:40 - gray and I have spin blue
02:50 - and under types you can buy those
02:57 - all right so now let's look through this
03:00 - so the empty State component
03:02 - is going to accept empty State props
03:03 - which is action text
03:05 - bottom texts
03:07 - graphic
03:11 - I actually like text and top decks so at
03:13 - the top of this component we have a
03:16 - graphic
03:16 - and then we're going to have some top
03:19 - text
03:20 - which is required
03:22 - and then
03:24 - we are going to have bottom text
03:30 - which is also required an optionable
03:32 - action text so this is going to
03:35 - basically look like a uh a link
03:37 - and it's going to be like
03:39 - um to give you an example it's going to
03:41 - be like
03:42 - no products to display here create one
03:44 - now and that create one can be a link
03:46 - where you click on it and it can like
03:48 - pop open a model or take you to the
03:49 - create product page whatever you want to
03:51 - do but that's the basic of the action
03:54 - text
03:55 - so this is saying if you don't have any
03:57 - action text or you don't have a click
04:00 - Handler for it then you can just go
04:02 - ahead and return null basically those
04:05 - options were not being used
04:07 - however if you do then what you're going
04:10 - to render
04:11 - is that action text
04:16 - inside the span blue which is basically
04:19 - just a uh it's going to look like a link
04:22 - all right so that is good
04:26 - and then we can close out of this for
04:29 - now
04:31 - empty State component done so now what
04:33 - we're actually using
04:36 - is this empty page component
04:40 - so copy this component
04:43 - and you're going to get a new component
04:45 - in my component Library
04:46 - for empty page
04:49 - and this is going to use
04:51 - that empty State component that we just
04:53 - talked about
04:56 - and it's just going to render it inside
04:58 - a page instead pretty much
05:02 - all right
05:05 - oops okay so for this empty page we
05:10 - basically pass in all the same props and
05:12 - it just passes those through to this
05:15 - empty State component and then we're
05:18 - just styling this to pretty much have it
05:19 - appear in the center of the page
05:24 - okay
05:26 - so now I can use this empty page
05:29 - component
05:41 - and where am I getting a graphic for
05:45 - this
05:47 - assets
05:52 - okay
05:59 - so under my assets let me say
06:04 - leaves wind
06:10 - I'll say leaves empty state
06:13 - actually I'll just call it empty State
06:15 - now I may have uh different graphics for
06:19 - empty State this is one of them
06:22 - but until I have another one for empty
06:24 - State I'll keep the naming a little bit
06:26 - uh generic
06:27 - so let me just do
06:40 - State
06:42 - and I'll say
06:50 - empty State graphic
06:56 - actually let me kind of look ahead and
06:59 - see what other empty States I got by
07:00 - checkout
07:10 - interesting
07:14 - here's a Network's empty state
07:18 - which I can use for Cores so let me
07:20 - actually do that right now
07:22 - uh refactor your name
07:25 - leaves empty state
07:31 - and then I'll just say leaves
07:37 - wow
07:38 - okay let me move my keyboard a little
07:40 - bit so I can actually type okay
07:42 - so for the empty page what are we gonna
07:45 - do with you
07:50 - so first Mr empty page component what
07:54 - okay let me give you a graphic
07:57 - graphic equals leaves empty States
08:01 - and then you're probably going to want
08:02 - top text to
08:06 - say
08:08 - top text
08:10 - bottom text
08:21 - bottom text and let's give you some
08:24 - action text as well
08:33 - action text click
08:39 - and I don't think I'll have any option
08:42 - or excuse me action text for a list
08:44 - however I just want to kind of make sure
08:47 - my component is rendering properly
08:50 - and that was not what I wanted to open
08:52 - but I guess I'll open Discord too all
08:54 - right
08:55 - so this is my graphic top text bottom
08:58 - text and then an optional action text
09:01 - right here
09:03 - first of all that action text is a
09:05 - little it's supposed to be a blue
09:08 - it's not let me quit Discord
09:11 - all right so a couple different things
09:13 - let's first of all just get our um
09:17 - spacing taken care of
09:20 - so buy home
09:24 - just gonna have this container
09:27 - page content empty state so page content
09:30 - it'll be applied to
09:36 - okay that didn't work as anticipated so
09:40 - this is the top this is the bottom
09:44 - this is the page
09:46 - and for this bottom one
09:49 - actually how do we have it
09:52 - interesting
10:00 - so for this what we can do is say
10:02 - display Flex
10:07 - Direction column
10:09 - Flex one
10:13 - is that gonna work
10:16 - and it's not because the parent
10:23 - and that's a good question what is the
10:25 - parent of this and I don't want to mess
10:27 - with my layout
10:38 - hmm that's interesting too I thought the
10:41 - top part was sticky
10:43 - the bottom part was scrollable but
10:45 - apparently not
10:47 - but I think that we want that
10:51 - so
10:52 - I may have to change the layout for this
10:57 - let's put it into nvls right
11:00 - yeah
11:01 - yeah I think I want this logic right
11:04 - here
11:05 - all right so in this case
11:09 - yeah Flex
11:12 - yeah
11:13 - so I'm gonna need to make a layout
11:16 - in the top is and it's going to be a
11:19 - flex full extraction column height of a
11:21 - hundred and then for the top toolbar
11:27 - keep that as is and then the bottom is
11:29 - just going to have a height of a hundred
11:31 - to take up the remaining space
11:35 - okay
11:38 - so now
11:41 - this becomes
11:44 - might not be that difficult
11:49 - okay so with Pages we have the shop page
11:53 - this is the index for it
11:56 - in the container what we do
12:00 - okay so it's this layout right here
12:03 - we're gonna have to adjust
12:05 - and for the outlet oh this is
12:07 - interesting
12:12 - I wonder if I wonder if I can style this
12:17 - Outlet
12:18 - that would be great
12:21 - Runner down let's find out
12:23 - s
12:24 - okay
12:28 - so as
12:32 - you Outlet all right I'm gonna style a
12:36 - custom outlet and it's going to be a
12:37 - Style version of this unstyled Outlet
12:42 - for this I basically want to use the
12:45 - same logic as this right here
12:49 - so it's gonna have
12:53 - so that's gonna be the flex this is
12:55 - going to be
12:57 - height of a hundred
13:03 - really hoping this works
13:09 - this is a styled Outlet
13:12 - this is either gonna work or probably
13:14 - mess a bunch of stuff up
13:17 - all right so the good thing is this
13:18 - works
13:23 - okay
13:25 - and now
13:26 - that is not working
13:32 - so my styled Outlet is supposed to have
13:34 - a height of a hundred let me just do
13:37 - background red
13:43 - okay however it does not actually is my
13:48 - Tire yeah this isn't
13:57 - play flax Flex Direction column
14:07 - well this is my layout
14:09 - display Flex
14:13 - wait a minute
14:17 - yeah this is my layout display Flex Flex
14:19 - Direction column
14:26 - and then this
14:28 - play Flex
14:31 - and then this is what I should have
14:44 - fascinating
14:47 - my way out maybe I have to put a height
15:23 - whoa whoa whoa whoa whoa let's go on
15:26 - here
15:30 - all right this should be my logic
15:33 - Flex Flex Direction column overflow
15:35 - hidden however now this
15:38 - should have a height of 100 and then
15:40 - overflow y scroll
15:43 - okay actually the Overflow y Auto
15:46 - for
15:48 - this
15:51 - okay but either way this is my layout
16:00 - and then the outlet
16:03 - should have a overflow y
16:08 - Auto
16:10 - and this isn't working but
16:13 - at least we're getting somewhere
16:16 - okay
16:20 - so yeah
16:22 - so I need to figure out how to apply
16:23 - this styling
16:25 - to this
16:27 - is the outlets but I just can't style it
16:36 - minus the up minus the red background
16:40 - okay
16:42 - so
16:48 - you can't style the outlet like that
16:53 - so let's figure out how I can
16:57 - Outlets
17:00 - is going to render right there
17:02 - and height 100
17:13 - all right try CPT got a good one for you
17:16 - and that is
17:25 - how can I style this Outlet
17:35 - all right in your code series solid file
17:38 - you can sell it in directly or you can
17:41 - wrap the owlette oh we can wrap it
17:43 - that's interesting as well
17:46 - yeah I already tried this
17:50 - but it's not working
17:59 - inside a style div
18:02 - all right so it looks like I'm going to
18:05 - have to
18:08 - try this property which is the outlet
18:10 - container
18:11 - all right let's see if this is working
18:17 - all right so we have an outlet container
18:19 - that's going to contain our Outlet
18:27 - work similar to this where the height is
18:30 - 100
18:31 - the Overflow
18:34 - if needed
18:39 - all right so that is looking good from
18:42 - that perspective
18:45 - that's great and now
18:48 - just go to my cell products
18:54 - okay this is looking good this is what
18:58 - we wanted
19:00 - so by default there is no scroll sticky
19:03 - top bar
19:06 - and then if needed you get a little
19:08 - scroll going on and also
19:11 - I got this empty State flowing in the
19:14 - middle which I want
19:15 - and then also
19:17 - well it uh no scroll don't have anything
19:21 - in there for now but there will be
19:22 - eventually okay so one thing that I'm
19:26 - seeing is we need to change the actual
19:28 - empty State text of this
19:30 - so close that don't need you don't even
19:33 - know why I opened you okay
19:36 - um what could be the empty state for
19:38 - these products I can say
19:42 - uh let's just say nothing here
19:45 - actually let me just check overflow
19:47 - hidden away
19:50 - why
19:51 - okay that's good
19:53 - layout
19:55 - good
19:57 - that's good okay
19:59 - so no empty state so there's not going
20:02 - to be any action text there's not going
20:04 - to be any bond text
20:06 - still didn't leave so I'll say top text
20:09 - nothing here
20:11 - and for the bottom text I will say
20:15 - um
20:18 - what can we say for this bottom text
20:28 - actually let me just say no products to
20:30 - display
20:45 - nothing here no products to display
20:49 - okay that is good
20:55 - all right looking good
20:57 - so now this is going to be the empty
20:59 - state which hopefully we uh won't have
21:01 - that often and now let's go ahead and
21:04 - actually add the product logic
21:09 - so this
21:12 - pie catalog
21:16 - wait a minute wait a minute wait a
21:18 - minute
21:20 - so in my layout the outlet container
21:26 - is going to say height of 100 overflow
21:29 - live necessary
21:32 - and then in my product catalog do I also
21:36 - need that height of a hundred
21:42 - I think I may
21:43 - for that empty state if nothing else
21:45 - yeah
21:48 - and then
21:51 - overflow y Auto
21:55 - overflow by Auto for the container
22:00 - don't think I need that at although
22:03 - I think we pretty much achieved this
22:05 - same thing
22:11 - actually this I don't need
22:16 - okay
22:17 - okay then I'll stick a grid in there and
22:20 - it should be good
22:23 - yeah yep yep yep yep yep yep yep yep
22:27 - that stretches stretches okay
22:32 - all right so now for the buy catalog
22:35 - it's uh just get organized and tackle
22:38 - that part
22:39 - so for the buy catalog
22:42 - what we are doing is we are going to say
22:47 - inside the buy catalog we are going to
22:50 - render content we're first going to look
22:51 - if there are any products to display if
22:53 - not
22:54 - then we are gonna just render the empty
22:57 - page like we have right now now if we do
23:01 - have products then we're gonna render
23:03 - the product cards container
23:06 - and this product cards container
23:10 - what this is
23:12 - actually a component
23:16 - and this component is just going to take
23:18 - a bunch of product cards in other words
23:20 - react children
23:22 - and then gonna render them in a
23:25 - responsive grid
23:27 - now the question is why did we make this
23:29 - a component
23:32 - and actually if nothing else it's nice
23:35 - to split up this way but I do want to
23:37 - see if we use our end URLs okay
23:41 - so
23:43 - this
23:47 - product cards container under components
23:50 - okay so it's not going to really be a
23:53 - reusable component
23:55 - however I do want to split this logic up
24:01 - so let's do it anyways all right
24:05 - yeah this is actually a nice pattern all
24:07 - right so product cards container let's
24:09 - go ahead and add another component to
24:10 - our component Library product cards
24:13 - container
24:15 - product cards container let's check your
24:17 - styling
24:19 - I'm gonna have to update that
24:22 - all right so product cards container
24:23 - product cards container styles
24:27 - types scared it from there okay
24:30 - so we're going to be passing you
24:31 - children in other words a bunch of
24:33 - product cards and you're going to render
24:34 - them
24:35 - inside a grid
24:38 - and
24:40 - also going to be
24:46 - changing these because I want to use my
24:48 - standardized break points so this is
24:51 - pretty much saying that
24:53 - um
24:53 - by default you or basically the most
24:57 - items that you can have on your screen
24:58 - is Six Wide six columns and then as the
25:03 - screen gets smaller you know uh you just
25:06 - don't wanna you don't want six columns
25:08 - wide when you're on like a phone so
25:13 - do this
25:21 - okay
25:24 - so first let's import the standardized
25:26 - break points
25:33 - starting probably from the
25:42 - one two three four five
25:50 - okay so one two three four
25:53 - let's just uh kinda
26:00 - I mean it's hard to imagine this stuff
26:02 - in your head the break points so what
26:05 - we're gonna do is kind of just Build It
26:08 - Up all right so one two three four and
26:10 - then the fifth so one
26:13 - two
26:14 - three
26:16 - four and then the default which will be
26:18 - five
26:20 - so the most we can have is five four
26:22 - three two one and then we'll do mini
26:24 - mobile tablet desktop so mini mobile
26:26 - tablet desktop
26:29 - and anything larger than the desktop or
26:32 - anything larger than 1400 pixels will
26:35 - just show five products right there
26:39 - and of course this is going to be tough
26:40 - to test too since we don't have any
26:42 - products rendering on the screen
26:44 - but this component is looking good for
26:46 - now as good as we can get it without
26:48 - some product surrendering so let me
26:50 - close that
26:52 - and all right
26:54 - so now what I can do
26:58 - is yeah let's go ahead and import this
27:01 - so products container
27:09 - okay import product cards container now
27:11 - I can say something like render page
27:14 - content
27:18 - render page content it's going to be
27:20 - replaced by this empty state
27:27 - which is going to be right here
27:31 - and then this is going to be render page
27:33 - content
27:41 - okay
27:42 - okay okay okay okay okay
27:47 - all right available products
27:51 - so now what we can do
27:54 - is actually start this off pretty easy
28:06 - so under Pages let's first just render
28:09 - all the products before we filter
28:10 - anyone's out available unavailable and
28:14 - these will include draft products and
28:16 - active products for now
28:19 - um later on we only want to display
28:20 - active products because that's kind of
28:22 - the point of having products in draft
28:24 - mode that they aren't ready to be
28:26 - bought and sold yet
28:28 - but we'll kind of get to that in a bit
28:32 - don't want to do too many things at once
28:33 - okay so for now let's just go ahead and
28:35 - get those products using new selector
28:37 - which is going to come from react Redux
28:42 - select these products from my store and
28:44 - then get product selector I have in
28:46 - selector States
28:50 - so these products
28:58 - um available products
29:02 - that's probably coming from a hook
29:10 - and okay so I'll just do
29:19 - actually I do want to split that out
29:22 - available products should I do it now
29:24 - though
29:27 - might as well
29:32 - and why did I name it available instead
29:35 - of
29:37 - okay
29:40 - it's our name net available instead of
29:41 - active products because on this page I'm
29:46 - filtering out the ones where you are the
29:48 - seller of so basically whenever you're
29:50 - looking at this
29:52 - if you are selling products
29:55 - there's no need to display in the
29:57 - catalog because
29:59 - it doesn't make sense because then you
30:02 - can just add your own products to the
30:03 - car and it's going to be confusing
30:05 - because we're probably not even going to
30:07 - allow
30:08 - purchasing of your own products
30:11 - however I'm also wondering from a ux
30:13 - perspective would it be weird
30:16 - if you were selling products and you
30:19 - just added one for example and you saw
30:21 - it right here but then you went back to
30:23 - the product catalog
30:25 - kind of just the I don't know get a
30:27 - perspective of what other people are are
30:29 - seeing and you don't see it here
30:32 - and I think it might be
30:35 - so
30:38 - in that case what I'm going to do is
30:40 - this
30:41 - I'm gonna say
30:47 - first gonna say I want to use Memo from
30:50 - react
30:54 - and I'm going to say active product so
30:56 - const
31:03 - use memo
31:10 - all right so this is going to return
31:16 - I'm just going to return all products
31:18 - for now
31:22 - and then I can just say if you don't
31:24 - have any active products
31:26 - or basically if you have active products
31:29 - this is just going to convert the length
31:31 - to a Boolean this double Ampersand or
31:33 - double exclamation mark and then if you
31:36 - do have products you're going to enter
31:38 - render this
31:40 - if not then you render an empty state
31:46 - and then eventually we're going to need
31:48 - to add a filter for this so to do
31:55 - filter
31:57 - but before we get to that let's just go
32:00 - ahead and re yeah we'll render
32:02 - everything out on the screen just to
32:04 - make sure that um
32:07 - The Styling and everything is looking
32:08 - good all right so render product cards
32:14 - is going to render these product card
32:15 - components
32:19 - and for this we need that product card
32:21 - so go to declaration and this is just
32:24 - formatting everything basically
32:30 - including an account label
32:39 - okay so lots of mini components in here
32:44 - so let's see what ones we got an account
32:47 - label
32:49 - and for that
32:52 - okay so for each of these cards we have
32:54 - a thumbnail on top
32:57 - and then at the bottom we have a name
32:58 - description account label
33:02 - so name description account label which
33:05 - is basically just a little user icon
33:09 - and then it's probably going to say
33:11 - their username and then whether they're
33:13 - the buyer or the seller
33:15 - then after this we have another
33:18 - component
33:20 - for the pricing
33:22 - which is called the price component
33:32 - okay so working on the inside out let's
33:34 - do the account label first
33:37 - and I believe that I want to change the
33:39 - name of this to user label so components
33:42 - account label
33:54 - yeah let's do the user label
34:00 - all right so components do I have a user
34:04 - label or account label already no
34:10 - and okay so make a new directory called
34:14 - user label
34:17 - and The Styling for it is going to be
34:20 - this as well
34:23 - I might need actually a lot of uh
34:31 - so first of all from the Styles and
34:34 - components
34:44 - so this actually takes
34:52 - all right so first we need an avatar
34:57 - and we don't have that either
35:02 - that's from system right yeah
35:06 - okay
35:07 - so system components Avatar
35:13 - this is interesting
35:23 - um
35:24 - [Music]
35:27 - so what this is going to do
35:31 - is display an image inside a container
35:35 - with a fixed height width
35:39 - and then I'm also displaying on tnb OS
35:42 - this little online offline maybe you can
35:45 - see it
35:46 - like a little online offline button but
35:48 - I don't need that
35:51 - so we can remove this logic
35:59 - okay
36:00 - so let's just make a simple avatar for
36:03 - now
36:04 - so for the avatar
36:11 - what we can do is in the Styles we don't
36:14 - need the status
36:18 - and in this
36:21 - we don't need
36:26 - any of these
36:31 - [Music]
36:33 - so I'm not going to render the status
36:34 - I'm not going to render the status I'm
36:38 - not going to render the status
36:40 - so for the Avatar props
36:44 - what we can do is this
36:47 - so this is interesting as well we still
36:49 - need to build in the like profile photo
36:52 - Logic on the back end
36:55 - however we can just use a default avatar
36:58 - for now
36:59 - so for the display image we won't pass
37:02 - this in yeah this is going to be super
37:05 - simple now but we'll make it a little
37:06 - bit smarter or a lot smarter relatable
37:09 - later
37:10 - so here we're just going to use a
37:12 - default
37:14 - display image
37:17 - and to do that what we can do
37:21 - is get this default Avatar series system
37:24 - access default Avatar
37:26 - so this is the math
37:28 - um
37:29 - system s is default Avatar copy that
37:33 - my assets paste in default Avatar
37:36 - which is just a blank user
37:40 - and then for
37:43 - this
37:49 - what we can do is say in our ftar
37:52 - component for now now that we don't have
37:54 - any
37:55 - fancy schmancy user profile logic we'll
37:58 - just use the default Avatar in 100 of
38:02 - the instances
38:05 - but now
38:07 - we don't need the status either
38:14 - so Avatar styles of this
38:18 - all right so our Avatar is basically
38:20 - just a uh
38:23 - yeah I don't need this
38:30 - all right so user label
38:34 - which we were saying was account label
38:48 - all right so new component here
38:52 - let's call it index
38:57 - all right
39:00 - and here it's called account label but
39:02 - we rename that so refactory name
39:07 - to user label
39:11 - and for the display name
39:17 - actually I wonder if we can just pass in
39:19 - the user
39:24 - hmm
39:35 - yeah maybe we just do this
39:38 - well first of all let me clean this up
39:44 - okay so I am just gonna pass in a
39:48 - description
39:49 - in the name
39:53 - yeah we'll keep this uh nice and easy
39:55 - for now
39:58 - okay
39:59 - so for this user label we're going to be
40:01 - passing in the description and a name
40:04 - for the avatar
40:07 - we are using this Avatar component and
40:11 - it doesn't take any props because we're
40:13 - just using that default
40:15 - thumbnail or Avatar now for the name
40:18 - we're just gonna render whatever they
40:20 - pass in for the name for the description
40:22 - this is going to say a seller
40:25 - and then those are both required these
40:28 - look good
40:29 - and then okay
40:32 - so now we have an account label
40:36 - what else do we need for that product
40:38 - card
40:45 - all right so the priority accountable
40:48 - line a thumbnail
40:52 - so for the thumbnail components
40:55 - I actually have this one already
41:00 - and all this does yeah
41:03 - and this just creates a square aspect
41:06 - ratio so we actually have all of our sub
41:08 - components we need now we just need to
41:10 - render the product
41:12 - card
41:14 - so this should be easy enough just go to
41:16 - product card
41:23 - opponent
41:26 - all right
41:27 - so apps shop
41:30 - remove all of these
41:34 - components account label we renamed to
41:37 - user label
41:50 - all right
41:52 - c u v
41:54 - user label and then for the default
41:57 - colors I don't need
41:59 - for the description that is color
42:01 - secondary and for the Border color
42:06 - is colors border
42:11 - okay so that should be good
42:14 - for the styling of the product card now
42:17 - on my product card
42:20 - uh let's see so
42:22 - price component I don't think we have
42:24 - that yet
42:25 - types unify these
42:36 - press
42:38 - okay
42:40 - so I need a price component
42:42 - the product that gets passed in
42:46 - the property on that is just name image
42:48 - right
42:51 - okay so image is the name of the product
42:54 - URL
42:55 - so product image and then for this it is
42:58 - user label and then
43:02 - for that user label
43:07 - actually we changed the name in the
43:08 - description right
43:12 - all right
43:15 - so for the name actually we can do
43:17 - product dot seller dot username
43:21 - because I believe
43:23 - this is gonna break but we have products
43:27 - and when they come back they have a
43:28 - seller and a username nested within it
43:31 - so that's good
43:33 - okay
43:34 - so now let's go ahead and make this
43:36 - price component
43:41 - it's price component let's see what
43:44 - you're looking like
43:46 - so what you have
43:48 - is a network image
43:51 - and then a price amount on the right
43:57 - okay
43:59 - looking not bad
44:02 - all right
44:03 - so let's go ahead and steal you
44:06 - put you under components
44:10 - and get you all formatted to this new
44:13 - project okay
44:15 - but first the styling all of this looks
44:17 - good for the network image I'm going to
44:19 - rename this the core logo
44:29 - and network image this is going to be
44:31 - core logo
44:32 - Alt
44:34 - or logo
44:37 - and for I'm not going to use the hooks
44:40 - for now
44:42 - I'm going to unify my types
44:45 - for us
44:49 - all right and now for this logo so
44:53 - product
44:55 - price amount to local string
44:57 - uh core logo
45:01 - just gonna import core logo
45:09 - actually what did I just see
45:18 - why am I
45:23 - wait what's going on here okay
45:26 - oh I have a uh
45:29 - that's interesting
45:31 - I have a component named core logo
45:37 - thanks
45:42 - and this source
45:44 - okay
45:49 - this is styled image
45:56 - so I'm wondering if
46:09 - [Music]
46:09 - um
46:12 - all right let's do this
46:14 - so in my core what's my asset called
46:19 - unknown core
46:22 - yeah this is just
46:31 - we'll just do this for now
46:33 - keep things nice and simple
46:36 - all right so instead of using my core
46:37 - logo we're just going to use the unknown
46:39 - core which is a reference to this image
46:41 - right here and we'll say the source of
46:44 - all of these
46:46 - gonna be that unknown core
46:50 - and this is just so we can get things
46:52 - not breaking for the time being
47:00 - yeah that'll work for now
47:03 - let me just take a peek at core logo and
47:05 - see what's going on so this is an image
47:12 - um interesting
47:14 - fascinating fascinating okay
47:19 - okay
47:22 - so this price component is taken care of
47:25 - although we may have a little
47:27 - unification or drying up some of our
47:29 - logic to take care of
47:31 - but for right now just got to get
47:32 - something rendered on the screen to uh
47:34 - you know so we can click around
47:36 - something see if it breaks
47:39 - and now let's go back to this product
47:41 - card component
47:44 - so this is looking good
47:46 - the styles for this are looking good
47:56 - now let's go ahead and render this
47:59 - so render product cards
48:02 - what we can do is we can say in this
48:05 - function
48:08 - is that whenever we are rendering
48:10 - product cards what we're going to do is
48:11 - we're going to take the active products
48:14 - which we need to add a filter for and
48:16 - we're going to map over each of them
48:18 - and for the product card which we need
48:19 - to import so product card container
48:22 - above that what product card
48:28 - all right so for the product card the
48:31 - key is going to be
48:34 - product.id
48:35 - now on click we don't have a click
48:37 - Handler yet but what we can do
48:41 - put a empty one for now
48:45 - and for the product we pass in that's
48:48 - just going to be the product that we're
48:50 - mapping over
48:51 - and the product that gets passed in
48:55 - is going to pluck off all the
48:57 - information and yeah
49:00 - should be good to test it out now
49:04 - all right looking good
49:06 - so
49:07 - Amy is the seller of the bacon
49:12 - I got a couple styling issues where like
49:14 - the
49:16 - um the prices aren't lining up and
49:19 - that's because you see here on the
49:21 - description these two are one line and
49:23 - then these are two lines but that's just
49:26 - a little responsive design thing
49:30 - see when they get one line it looks a
49:31 - little bit better
49:33 - but now let me hit my break points so
49:36 - first of all I'm thinking that
49:39 - maybe four items Max
49:43 - okay
49:44 - so let's start with the smallest
49:48 - actually should we start with the
49:50 - biggest or smallest let's start with the
49:51 - smallest
49:53 - so my break point for this left menu you
49:55 - see where it says Coors wallet exchange
49:57 - shop when is that gonna go Mini
50:00 - that's going to go Mini at
50:03 - 10 20.
50:06 - all right so
50:08 - Let's uh take a step back here
50:10 - let's go ahead and just look at my
50:13 - product cards container and work on the
50:15 - styling for this
50:18 - nothing else let's keep it simple here
50:20 - Bucky all right so 1024 is when I get
50:24 - some more space from the left menu
50:28 - is the wrong app so embarrassing okay
50:34 - so this is my one column and that is
50:37 - looking good
50:38 - all the way until it splits into
50:43 - I think that's looking good as well
50:52 - you know what this actually isn't
50:54 - looking that bad although what I'm
50:56 - thinking
50:58 - is that maybe we just have four items
51:02 - is the max
51:06 - one
51:09 - two three's looking good four
51:13 - it pops it a little bit too soon right
51:15 - now
51:20 - three I want oh man
51:23 - this is tough you know what
51:26 - I'm gonna pull all audible again and I'm
51:29 - gonna say that this is looking all right
51:30 - for the time being I mean it is
51:32 - responsive and it's pretty close to what
51:34 - we want and then later on what I'm gonna
51:37 - do is I'm gonna find a designer to
51:40 - pretty much uh you know create an actual
51:42 - style guide right now this is kind of
51:44 - just like pieced together based on my
51:46 - style skills and I am far from a good
51:49 - designer
51:50 - however as part of that process they're
51:53 - gonna make all a bunch of responsive
51:54 - break points and kind of tweak all this
51:56 - so for right now things are indeed
51:58 - working
52:00 - and um
52:02 - yeah leave that as is so let me go ahead
52:05 - and close this and all right
52:09 - so another thing that we were going to
52:12 - do
52:13 - is
52:15 - I guess what we can do next is when you
52:18 - click on one of these it's going to
52:19 - navigate you to the product Details page
52:24 - now do I want to do that first or
52:29 - do I want to have the logic
52:33 - to fix this right here so let's do that
52:37 - okay
52:39 - so for each of these product cards what
52:41 - we have right now
52:42 - is in the price section
52:48 - we are just always rendering the unknown
52:51 - core which is
52:55 - basically this question mark right here
52:57 - but what we want to do
53:02 - is what we are going to do is depending
53:05 - on which price they selected for example
53:08 - if they are choosing a tnb or VTX we
53:12 - want to render the tnb logo or VTX logo
53:15 - so
53:17 - in that case what we can do
53:21 - is in the price component
53:24 - we could pass in the ID
53:27 - of the price core and then from cores we
53:31 - can pull that image and we're going to
53:34 - want to split that out into a hook
53:38 - so let's do that
53:42 - okay
53:43 - first let me uh get my price component
53:45 - from tmbos see what's going on so price
53:50 - all right
53:53 - now
53:55 - Network display name is using network
53:57 - display image pass this in
54:01 - using that work display image and I
54:03 - believe I just want to use the same
54:05 - logic but just um
54:07 - changing naming from it
54:09 - so from the back end we have cores and
54:14 - the name of the image is a logo
54:17 - so I'll say use core
54:19 - logo
54:23 - yeah let's do that so instead of using
54:26 - network display image I'm going to
54:28 - create a new hook
54:32 - and let me make sure use oh look at this
54:35 - I got it already
54:37 - oh baby love when that happens okay use
54:40 - core logo and the good thing is that uh
54:43 - it's named the exact same thing that I
54:44 - just came up with so okay
54:47 - so let me just
54:51 - import that so use logo from hooks
54:56 - and then the core logo
54:59 - that gets passed in
55:01 - it's going to be the products
55:03 - price core
55:06 - and then this is just gonna be the core
55:08 - logo for the source and I'm going to be
55:10 - able to delete this and should be good
55:13 - actually
55:15 - all right so this is VTX so it displays
55:18 - the V this is tnb so it displays the tnb
55:22 - logo
55:24 - and now actually I want to switch this
55:26 - to my default Avatar too
55:28 - so let me just
55:36 - where are you actually
55:43 - just find it easier this way
55:48 - all right so the source of this
55:51 - um
55:53 - doesn't have anything to do with like
55:55 - the product detail page but it's just
55:57 - kind of annoying me so default Avatar
56:09 - all right so now instead of looking at
56:12 - my beautiful face we can just look at
56:14 - this default Avatar instead
56:16 - and it'll just serve as kind of a visual
56:19 - to do to let us know that we need to
56:22 - change this Avatar logic as well okay
56:25 - so right now D far D well so
56:28 - embarrassing default avatars all around
56:33 - and no click logic
56:36 - but we'll do that in just a second
56:40 - so
56:41 - uh let's see what we're gonna do next
56:44 - let's go ahead and do this let's make a
56:47 - um a temporary uh product detail page
56:50 - basically the
56:53 - uh template version of this page right
56:55 - here
56:56 - and then from there we'll go ahead and
56:59 - build out the click logic so whenever
57:01 - someone clicks one of these cards
57:04 - then we can take them to that page and
57:06 - then we'll build out the details of this
57:08 - page later on
57:10 - so on that note let's go ahead and first
57:13 - hop back in here to
57:19 - what's going on here okay so let's go to
57:23 - our pages in our shop page
57:26 - and for the buy catalog
57:31 - just seeing if we have a product Details
57:33 - page yet okay
57:36 - so for the shop pages
57:40 - buy product details
57:43 - which we don't have yet but we can go
57:45 - ahead and create a new page to do that
57:47 - right now
57:48 - so it's going to be the same as pretty
57:50 - much this
57:53 - okay
58:02 - all right so we are creating a new page
58:05 - and to do that we create a new directory
58:08 - and it's pretty much the same as this
58:15 - and the style is just empty style file
58:17 - and for the component
58:22 - we can just add some placeholder stuff
58:27 - right now
58:28 - all right so now we got a new page that
58:30 - the user is going to be taken to
58:33 - and now we just need to
58:36 - see it's not in our layout it's in our
58:39 - main just need to register it
58:44 - all right and then for this
58:47 - by product
58:53 - all right thinking the best way to do
58:55 - this because we're going to need to use
58:56 - an ID
58:58 - but for now
59:06 - all right let's just keep it simple for
59:07 - now model p
59:13 - should I do products
59:25 - all right so let's do this by catalog
59:28 - I'll say bye
59:30 - product
59:35 - all right and that didn't work great and
59:37 - that is because it was supposed to be by
59:39 - products
59:41 - okay so buy product details is going to
59:45 - say buy products and it's going to have
59:46 - an ID in it which we didn't give it yet
59:49 - but for now what we want to do is really
59:52 - just make sure that when they click this
59:56 - goes to the right link
60:04 - Okay so
60:09 - maybe we can do that now
60:13 - now the question is
60:15 - is there anywhere else in my app
60:25 - that we are using this logic
60:30 - and I don't think so
60:35 - okay
60:41 - and I'm probably going to need a consult
60:43 - chat GPT so for the private details page
60:55 - all right
61:02 - except uh param
61:05 - an ID param
61:11 - like uh
61:22 - wow
61:29 - like this
61:37 - all right so chai GPT tell me the
61:40 - formatting for this and then I also want
61:43 - to make sure that whenever we render
61:44 - that page
61:46 - that we are plucking off those params
61:50 - from the component
61:57 - params this is what I want products
62:03 - there we go
62:05 - all right so products forward slash ID
62:09 - is going to give you that behavior
62:14 - so products for slash ID and then in
62:21 - here
62:22 - use params and then just pluck off the
62:25 - ID
62:33 - all right and let's see what we got
62:36 - going on here
62:43 - and then let's just render that ID out
62:46 - here
62:53 - all right so now hopefully when we go to
62:56 - buy products 20 it renders 20 beautiful
63:00 - 21
63:01 - looking good and then of course we're
63:04 - going to be using that to fetch the
63:06 - actual product
63:07 - however for now
63:10 - that is looking all right
63:13 - it's actually what we can do
63:17 - is whenever we click one of these to
63:22 - navigate to that link so let's do that
63:25 - right now okay
63:28 - so that is going to be
63:30 - on actually keep this around so for shop
63:34 - pages that is the buy catalog that's
63:37 - going to link to products
63:38 - components and that is eventually going
63:41 - to display this product card right here
63:46 - now for this product card
63:51 - let's see what we have
63:54 - oh that's interesting
63:56 - oh very very interesting
64:02 - now the question becomes
64:06 - why on the product card
64:13 - all right
64:18 - so why is the click Handler being passed
64:21 - in
64:27 - render product cards
64:32 - so active byproduct ID select page
64:41 - I'll click handle click
64:45 - okay now
64:48 - what is this this must be a different
64:51 - product card
64:56 - what
64:58 - okay
65:00 - sell product details oh okay I know what
65:03 - I was doing
65:05 - all right so
65:10 - okay so on team BOS what I was doing is
65:13 - you see how I have all my product cards
65:16 - right here like one two three four five
65:17 - six seven eight however many I have
65:19 - now I have it where you click it it
65:21 - takes you to The Details page of the
65:23 - product I'm wondering why I had that
65:25 - like
65:27 - um I had customizable click Logic for it
65:29 - since it seems like I would just always
65:30 - want to go to The Details page
65:33 - and the reason is because the way I have
65:35 - it set up is that whenever I'm editing a
65:37 - product right here see this is also a
65:40 - product card
65:41 - um component and then whenever I click
65:43 - this I don't want to be taken to the
65:45 - details page for it since it all this is
65:48 - is just like a little preview of what
65:50 - the product card is going to look like
65:51 - however for this app
65:56 - um whenever we're editing we don't have
65:58 - that product card preview so what I'm
66:01 - going to do is I'm just going to move
66:02 - that click logic right to the product
66:04 - card itself
66:06 - so
66:08 - on the product card we don't need to
66:09 - pass an on click Handler
66:12 - so that means on this product card
66:17 - we're actually still going to have on
66:19 - click logic but just not pass it in
66:23 - okay
66:25 - so on the product cards which gets
66:27 - rendered from the product cards
66:28 - container
66:30 - and this is gonna be getting rendered
66:33 - from the buyers catalog page
66:38 - so we're going to say that this on click
66:40 - Handler you no longer have to give to
66:42 - your product cards
66:43 - because we don't need it
66:48 - and instead
66:52 - I'm gonna say constant handle click
67:00 - and then this is going to be my click
67:02 - Handler and all this is going to do is
67:04 - it's going to navigate to the product
67:06 - Details page
67:14 - and to navigate to this page what we
67:17 - need to do is we need to use navigate
67:18 - from reactorader Dom
67:23 - and then we need to
67:27 - store it
67:29 - in a navigate variable and then just
67:31 - navigate
67:33 - wherever
67:35 - our heart desires okay
67:39 - so we're going to navigate to what page
67:41 - was it it was buy products
67:45 - what you want something like this
67:49 - okay so back in here
67:52 - we're going to navigate to
67:55 - this
67:57 - and then the ID is just going to be a
68:00 - product.id
68:02 - all right
68:04 - so now for these product cards we're
68:07 - just going to pass in a product and then
68:09 - whenever you click the card anywhere in
68:11 - the card it's just going to take you to
68:13 - the product Details page for that
68:17 - all right so let's test this out I'm
68:19 - going to click bacon
68:21 - and it taken me to products 11 which
68:23 - hopefully is bacon
68:25 - yep
68:26 - and then one spoon products 14.
68:29 - mushroom book product 15. looking nice
68:33 - okay so we got our click logic working
68:36 - right here and
68:40 - actually is there anything else to do on
68:43 - this page
68:44 - scroll functionality is working the
68:47 - empty state was working tested that out
68:48 - earlier
68:51 - um
68:52 - yeah some things with the avatars that
68:55 - aren't working however we don't have
68:57 - Avatar Logic support on the back end yet
68:59 - so nothing we can do for now
69:01 - oh yeah prices all the info displaying
69:04 - as we expected actually one other thing
69:10 - that I want to make sure of is this
69:12 - let's go ahead and deactivate this
69:15 - mushroom book
69:17 - and then I just want to make sure that
69:21 - only active products show up here
69:23 - so
69:24 - then we can actually push up this branch
69:28 - um
69:29 - so on that case in the buy catalog we
69:34 - have this to do add a filter
69:36 - and then we're going to be getting that
69:39 - from enums
69:40 - so filter
69:44 - okay
69:48 - so import
69:57 - so import activation status from enums
70:01 - and now when
70:05 - getting all our active products we just
70:08 - want to say
70:14 - let's just figure out the activation
70:16 - status
70:17 - so activation status
70:25 - okay so the active products are all
70:28 - products whose activation status equals
70:30 - active and then hopefully if everything
70:32 - went right we should not see the
70:34 - mushroom book however if we go back and
70:37 - we activate it so it's now active
70:39 - then when we go to our catalog it should
70:42 - be there beautiful
70:45 - and there's also another question of how
70:47 - you want to sort these products
70:52 - and that's an interesting question
70:56 - whenever you're looking at a product
70:57 - catalog
71:00 - just like view all how should they be
71:03 - sorted by the last modified first that
71:05 - sounds kind of dangerous because then
71:07 - people are probably just going to edit
71:08 - their products all the time needlessly
71:11 - just so they appear
71:14 - to at the top of everyone's list
71:18 - so there must be a smarter way but
71:20 - that's it seems like that's a little bit
71:22 - more
71:23 - um Advanced logic
71:26 - I'm sure we can come up with a pretty
71:27 - smart solution however for now just kind
71:30 - of want to get things working and you
71:32 - know make sure nothing breaks
71:34 - so I think this is actually good for
71:36 - this feature
71:38 - um let me add
71:40 - product
71:41 - yeah so say that the buyer product
71:44 - catalog page is done and next up we have
71:47 - to
71:48 - pretty much build out this UI the
71:52 - buyer product Details page
71:56 - all right so that's what we'll do in the
71:58 - next video however for right now and
72:01 - just go ahead and
72:02 - I'll link to this and uh yeah push it up
72:06 - and another item off the checklist
72:08 - another good coding session
72:11 - so link that's looking good I will push
72:13 - this up and in the next video what we'll
72:16 - do is we'll tackle the product Details
72:18 - page so as always thank you all for
72:21 - watching and I'll see you next time