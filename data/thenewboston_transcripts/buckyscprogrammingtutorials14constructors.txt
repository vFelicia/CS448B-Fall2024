00:00 - well is up guys welcome to your 14th C++
00:02 - tutorial and in this story I'm going to
00:04 - be going over constructors what they are
00:07 - and why they are useful so first of all
00:10 - I want to tell you guys what a
00:11 - constructor is a constructor is a
00:14 - function that gets called automatically
00:16 - as soon as you create an object so
00:18 - before what we could do is we could
00:20 - create an object and use that object to
00:23 - call functions from our class well now
00:25 - as soon as we create this object it's
00:28 - going to call a funk funk ssin code
00:30 - constructor we don't need to explicitly
00:32 - use that object to call a function it's
00:34 - going to do automatically so you're
00:37 - saying alright Bucky you talk to talk
00:38 - time to walk the walk show me an example
00:40 - well creating a constructor is
00:43 - incredibly simple to do so it's
00:46 - basically the same as creating a
00:48 - function with a couple weird rules first
00:51 - of all I need to tell you guys this
00:52 - constructors never have a return type so
00:56 - you don't need to type int or void or
00:58 - string or anything like that the only
01:00 - thing you need to do is type the
01:02 - constructor name and the constructor
01:04 - name is always the same as the class
01:07 - name the exact same so let's go ahead
01:09 - and copy this and paste it right here
01:12 - and that's how your C++ program knows
01:14 - that it's a constructor because once it
01:17 - comes across a function with the same
01:18 - name it knows that that is the
01:20 - constructor so let's go ahead and we'll
01:23 - add no parameters and in the body what
01:26 - do we want to happen as soon as we
01:27 - create this object we didn't have just
01:30 - you know maybe it will print something
01:31 - out on the screen like this will get
01:35 - printed automatically
01:38 - pretty cool huh so now we have
01:40 - constructor that's going to get called
01:42 - automatically as soon as you create an
01:45 - object interesting all right you keep
01:46 - saying that but what exactly does that
01:48 - mean
01:48 - well say we have an object from Bucky
01:51 - class named Bo well before we would have
01:55 - to write Bo yadda yadda yadda whatever
01:57 - we want to use from it but now as soon
01:59 - as we create this object this
02:01 - constructor is going to get called so
02:03 - let's go ahead build and run this and
02:05 - see this will get printed on Mac app
02:08 - will blah blah blah automatically so you
02:11 - could see that
02:12 - before we needed to use that object to
02:15 - call functions but this is a special
02:18 - function called a constructor that gets
02:20 - called automatically as soon as you
02:22 - create that object so you're saying all
02:25 - right that's pretty cool and interesting
02:27 - but why what didn't I just you know
02:30 - print this out on the screen or
02:31 - something else what's the use of a
02:33 - constructor why would you even want
02:35 - things to happen automatically well
02:37 - typically people don't print things out
02:39 - in their constructors actually if you
02:41 - see anyone printing something out in
02:42 - their constructor then they're idiots
02:44 - and you should slap them inside ahead
02:46 - because constructors the main reason
02:50 - that people make constructors are to
02:52 - give variables an initial value so for
02:55 - example this class has a variable called
02:57 - name but it might have another variable
02:59 - called age height weight favorite color
03:02 - favorite sports theme have all these
03:04 - variables so as soon as you create an
03:06 - object from that class you might want to
03:08 - assign a bunch of values to these
03:10 - variables right now so in order to do
03:14 - that here is what you do whenever you
03:16 - want to take a value and assign it to a
03:18 - variable you need to add a parameter in
03:20 - your constructor so let's go ahead and
03:22 - assign a value to this name right here
03:24 - and in order to do that we need to pass
03:26 - in string and just name it Z or
03:30 - something so now what we can do is we're
03:32 - going to be passing it in a string to be
03:34 - setting it equal to name well we already
03:36 - have a function that does that called
03:38 - set name so in order to do that just go
03:41 - ahead and call set name with the
03:43 - parameter of Z so now later on whenever
03:47 - we want to use our constructor our
03:49 - constructor can take a parameter as well
03:51 - and for our parameter let's just go
03:53 - ahead and write something like lucky
03:56 - bucky roberts and now what's going to
04:00 - happen is this as soon as we create this
04:03 - object it's going to call a constructor
04:05 - with a parameter lucky bucky roberts so
04:09 - it's going to go up see if it has a
04:11 - constructor oh I do
04:13 - and as my parameter I need a string and
04:15 - for a string we give it lucky bucky
04:18 - roberts so anytime has saw z it plugged
04:21 - in lucky bucky Reppert so it says all
04:24 - right
04:25 - your constructor you told me to set the
04:26 - name equal to lucky lucky Roberts
04:29 - so it basically set the name equal to
04:33 - lucky bug you're Robert so pretty much
04:35 - lucky Bucky Roberts got passed into Z
04:38 - which got passed in X which got passed
04:41 - in the name so that's why our name was
04:44 - lucky Bucky Robert so now that our name
04:46 - is lucky bug you're Everts that gets
04:49 - kind of repetitive saying that but
04:51 - anyways we can just go ahead and you
04:53 - know print it out on the screen or
04:54 - something so of course to access
04:56 - anything in our class use the object and
04:59 - of course the get name just like that
05:03 - function so let's go ahead and build and
05:05 - around this and we have int main we got
05:08 - a problem here hold on one second
05:10 - we find it oh I see what the heck how in
05:15 - the world did I do that for some reason
05:17 - I must actually hit paste or something
05:20 - but I copy the word name outside my
05:22 - class I just wrote the word name
05:24 - randomly in the middle of my program so
05:27 - remembering not to put words randomly in
05:28 - am over your program or else it won't
05:30 - run so now let's go ahead and build and
05:32 - run this and check it out lucky lucky
05:34 - Roberts so that is the basics of a
05:38 - constructor how they work and also how
05:40 - you can add a parameter to your
05:41 - constructor and basically the only times
05:44 - you wouldn't want to add parameters to
05:45 - your instructors is whenever you're
05:48 - taking those variables that are inside
05:50 - your class and you want to set them
05:52 - equal to values initially so that is
05:55 - basically why a constructor is useful
05:57 - whenever you have a bunch of variables
05:59 - in your class and you wanted to set them
06:00 - equal to values initially on that is how
06:03 - you can do that so here's that example
06:05 - and you just printed it our name so
06:08 - simple enough
06:09 - so aside from this I guess I have time
06:11 - to show you this one thing you might be
06:14 - thinking all right so I have an object
06:17 - from this Bucky class named Bo and its
06:20 - name is equal to lucky Bucky Robert so
06:22 - does that mean later on if I were to
06:25 - create another object from the Bucky
06:27 - class name like Bo too
06:30 - and I set this name equal to armed
06:34 - what's even dumber than lucky Bucky
06:36 - Roberts um Sally Mick salad that's
06:40 - that's what's on my mind right now
06:42 - so does that mean that I'm going to
06:44 - overwrite this one well let's go ahead
06:46 - and print out armed bo2 dot get name
06:55 - just like this so let's go ahead and
06:57 - print it out and see what we get lucky
06:59 - Bucky Robertson Sally Mix Aled so why
07:02 - wanna stress is this whenever you create
07:05 - an object from a class each object has
07:08 - its own set of variables so this object
07:11 - Bo name is lucky Bucky Roberts this
07:15 - object is named Sally Mix Aled even
07:19 - though they're from the same class it's
07:21 - not like changing the same variable so
07:23 - even though we set this BL to equal to
07:26 - Sally mixed salad it didn't overwrite
07:28 - this they're just from the same template
07:30 - pretty much so anyways what I wanted to
07:32 - stress is that you can create multiple
07:34 - objects from the same class and they
07:37 - don't overwrite each other they're just
07:40 - a sign they're they're assigned they're
07:42 - each set variables am I saying that
07:44 - right
07:44 - they're each assigned a set of variables
07:47 - so yeah I just wanted to stress that
07:49 - before you get in to objects in classes
07:52 - more and you get confused so anyways
07:54 - that's just a little side note stick
07:56 - with constructors and then once you're
07:58 - good with constructors you're ready to
07:59 - move on to my next tutorial but for now
08:01 - thank you guys for watching and remember
08:04 - don't stick words into randomly middle
08:07 - of your program and yeah I guess I'll
08:09 - see you next video