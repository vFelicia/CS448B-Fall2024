00:00 - alright guys welcome to 72nd well we've
00:03 - come a long way
00:04 - c++ tutorial and in this tutorial i'm
00:07 - going to be talking to you guys about
00:08 - some more very useful string functions
00:11 - so the very first string function i want
00:13 - to talk to you guys about is called the
00:15 - substring function now what the
00:17 - substring function does is it takes a
00:20 - big string and it creates a substring
00:23 - out of you know a small piece of it so
00:24 - let me go ahead and show you guys an
00:26 - example it's going to be a lot easier to
00:28 - show you example rather than try and
00:29 - explain it so go ahead and make a string
00:31 - i'm cuming call actually i'm probably
00:33 - going to call all my strings s1 in this
00:35 - story and just go ahead and write
00:37 - something like OMG i think i am Craigie
00:44 - or something stupid like that i don't
00:45 - know
00:46 - create a new string you want and go
00:48 - ahead and print out s1 dot s ub STR this
00:55 - is a sub string function and go ahead
00:58 - and outline and L now the substring
01:01 - function takes two parameters the first
01:04 - parameter it takes is the beginning
01:06 - index or the beginning character
01:08 - remember strings are arrays is pretty
01:12 - much an array of characters so this is 0
01:13 - 1 2 3 4 so on and so forth so let me go
01:19 - ahead and put the beginning character
01:22 - which is 17 and the next parameter it
01:26 - takes is how many characters do you want
01:28 - to go on for so if we put 1 5 it would
01:32 - start at 1 and it would go 5 characters
01:34 - in so let's go ahead and put 17 7 go
01:37 - ahead and run this and we get the word
01:39 - pretty with explanation point 1 2 3 4 5
01:43 - 6 7 actually 0 1 2 3 4 5 6 I don't know
01:48 - it's one or the other but anyways the
01:50 - substring method is basically what
01:54 - character do you want to begin in and
01:55 - this is the seventeenth character and if
01:57 - we count seven characters one two three
02:00 - four five six seven
02:04 - is how many characters is included in
02:06 - the substring so basically the substring
02:08 - function is how to create a smaller
02:09 - string from a bigger string definitely
02:12 - useful whenever well whenever you want
02:15 - to create a smaller string from a bigger
02:16 - string now after this I want to teach
02:19 - you guys about another function and
02:20 - that's called the swap function now this
02:23 - is might be if you're working a lot with
02:25 - sorting lists or how to sort arrays
02:28 - you're going to be using this function a
02:31 - ton what it basically does is it takes
02:33 - one string and swaps it with another
02:36 - string so let's go ahead and put string
02:38 - one and we'll make this one make it
02:40 - something that begins with a a like
02:41 - apples and put string two and what this
02:46 - one does is we'll make this one like
02:48 - beans good enough and what we can do
02:52 - first is just print out the strings to
02:54 - verify that they are indeed working
02:56 - correctly so one and then we'll print
02:59 - out two and then go ahead and in that
03:01 - line so what this line is going to print
03:02 - out apples beans and I'll add a space
03:05 - after this and now what we can do is I
03:09 - want to show you guys what the swap
03:11 - function is and how it works the first
03:13 - thing you need is a string to apply it
03:16 - to and I'm going to apply it to shrink
03:17 - one now go ahead and call swap on this
03:20 - now it always needs to take a parameter
03:23 - and that's what string do you want to
03:25 - swap with it and we want to swap shrink
03:27 - two with it so basically saying are a
03:29 - swap beans with apples and now string 1
03:34 - contains beans and string 2 contains
03:37 - apples so if we go ahead and print this
03:39 - out again let me just go ahead and copy
03:41 - it and print it out again in build and
03:44 - run the original strings or apples and
03:47 - beans but now it took the contents or
03:50 - values of them and flip-flop them so now
03:52 - string 1 contains beans and string 2
03:55 - contains apples again this is very
03:57 - useful whenever you're sorting usually
04:01 - you're going to run through a huge while
04:02 - loop and you're going to back all right
04:04 - if this value is greater than this value
04:07 - then swap them if not leave them the
04:09 - same and by the end by the time you get
04:11 - to the
04:11 - end of the loop everything's in a nice
04:13 - neat order so that's your basic of you
04:17 - know how to sort things but again let's
04:20 - go ahead and delete this and again one
04:21 - last time none of these things are
04:23 - really confusing but they're definite
04:25 - functions that we need to know that's
04:27 - why I'm going to be covering this
04:29 - explicitly because these are functions
04:31 - that you should definitely shouldn't
04:33 - have to look up in a you know resource
04:36 - or reference guide these should be
04:37 - function that should be stuck in your
04:39 - brain so the last function I want to
04:41 - cover the in this tutorial is the find
04:43 - function now like I said I want to
04:46 - repeat this one last time
04:47 - strings are just arrays of characters so
04:50 - whenever we're finding a substring what
04:54 - it's going to do is it's going to give
04:55 - us the location or in other words the
04:58 - index of where in the string that is so
05:01 - let me go ahead and make a string again
05:03 - most of these it's going to be a lot
05:05 - easier just to see an example so let me
05:07 - go ahead and make something like Hamm is
05:10 - spam oh yes I am and I actually made
05:14 - that string for a very specific reason
05:16 - what you will see you later on so go
05:18 - ahead and see out s1 dot find a m and
05:24 - now let me go ahead and in that line and
05:29 - you're saying all right so I kind of
05:31 - know what this is going to do already
05:32 - it's going to go and look through your
05:34 - string and find where a.m. is but check
05:37 - it out we have this one right here
05:39 - and this one right here and this one
05:41 - right here so let's go ahead and build
05:44 - and run this and see what when it
05:45 - returns and I forgot to do something and
05:48 - add a lesson and sign right there so
05:50 - let's go ahead and build around this
05:51 - again and it's going to say one so say
05:54 - an R right so obviously it gave me the
05:57 - location of this first one right here
05:59 - because this is the 0th index of this
06:01 - array and this is one so what it
06:04 - basically does is it gives you the
06:06 - starting location of the first found arm
06:11 - first found a.m. I guess that's all I
06:14 - need to say the first found occurrence
06:15 - that's what I was looking for so even
06:18 - though there are three occurrences in
06:20 - this string it's going to loop through
06:22 - and it's only
06:23 - return to you the first occurrence of
06:25 - this so remember that whenever using
06:27 - fine it doesn't give you know 1 and 10
06:29 - and 19 or whatever the heck these are so
06:32 - saying all right well what if I want the
06:35 - occurrence of the last a.m. well there's
06:38 - another function for that and that's
06:39 - called our find this stands for reverse
06:42 - find you know how whenever you're
06:45 - finding you know a substring such as
06:47 - a.m. and a bigger string is going to
06:49 - start at the beginning and it's going to
06:51 - work a left to right well what reverse
06:54 - fine does is it works right to left just
06:57 - like that and it's going to go right to
06:59 - left and it's going to look for a.m. so
07:01 - it's basically going to give you the
07:02 - last occurrence of a.m. which let's go
07:04 - ahead and print this out and that is 21
07:07 - so if we can see this is 1 2 3 4 5 6 7 8
07:13 - 9 10 11 12 3456 10 21 right like that as
07:17 - you can see this 21st index in other
07:21 - words this one right here is the first
07:23 - location of the last a.m. so that's the
07:26 - difference between fine and our fine one
07:29 - works left to right and one works right
07:31 - the left so there are some more string
07:35 - functions right there again these string
07:37 - functions our function is that you
07:38 - should not have to look up these are
07:40 - some functions that should be embedded
07:41 - in your programming brain so that's why
07:44 - I want to give them to you guys and
07:45 - hopefully me showing you an example of
07:47 - how they work help you know make them
07:49 - stick in your brain a little bit easier
07:51 - so thank you guys for watching these
07:52 - stories we only have a few more string
07:54 - functions to cover but don't skip over
07:56 - these tutorials because later on when
07:58 - I'm developing games and showing you
08:01 - guys how to work with 3d and cool stuff
08:02 - like that I'm not going to be taking
08:04 - time to stop and pause and cover these
08:05 - functions so if you know you decide to
08:08 - skip these next tutorials and just go
08:09 - straight to game development or whatever
08:11 - you're going to be crap out of luck so
08:12 - there you go thank you guys for watching
08:14 - don't forget subscribe don't forget to
08:16 - check out all my other videos and yeah I
08:18 - guess I'll see you guys later