00:00 - alright guys welcome back and in this
00:02 - video I am going to show you how to make
00:03 - a serializer class so before we get
00:06 - started let's figure out what the heck a
00:07 - serializer class is and the most
00:10 - important question does it have anything
00:12 - to do with cereal the best by the way is
00:15 - Cinnamon Toast Crunch the answer to that
00:17 - is yes it does
00:18 - I'm just getting a dozen all right so a
00:21 - serializer class is a class that's going
00:24 - to convert this model to json data
00:27 - because remember right now whenever the
00:30 - user requests a website we usually just
00:32 - send them back regular old HTML in the
00:35 - HTTP response however we don't want to
00:37 - send them HTML that's only for whenever
00:40 - you're want information from a browser
00:42 - what we want to do is we want to send
00:44 - them jason so we need a way to convert
00:47 - this to jason and that's what to
00:49 - serialize your classes that's all it is
00:51 - whenever you read the documentation they
00:53 - make it sound like it's something
00:54 - incredibly complicated it's not so I'm
00:59 - just going to name this class
01:00 - serializers and it's going to go right
01:02 - in my company's app right there and in
01:06 - order to do this we actually need to
01:08 - import some stuff from the rest
01:09 - framework so from rest framework import
01:12 - serializers and also we need to import
01:16 - whatever models we want to serialize by
01:20 - the way whenever you hear the term
01:23 - serialized that just means taking a
01:25 - model and converting it to some data
01:29 - that you can actually either just save
01:31 - on a hard drive or like transfer across
01:34 - the network because the reason that we
01:36 - need to serialize things is let's say
01:38 - that we have these stock objects well
01:40 - you can use them in our program but what
01:42 - happens when we want to save them to a
01:44 - thumb drive and give them to our friends
01:46 - well we just can't save Python objects
01:48 - to a thumb drive so that's why we need
01:50 - to serialize it basically saving data in
01:54 - a format that you can transfer so that's
01:57 - it all right where was I so from models
02:00 - import stock alright so the common class
02:06 - name for this is just whatever your
02:08 - model name is which stock
02:11 - followed by serializer
02:16 - make sure i spell everything correctly
02:18 - alright so whatever object you're trying
02:22 - to serialize just say that object
02:24 - serializer simple enough so now you
02:27 - actually need to inherit from
02:29 - serializers dot model serializer and
02:33 - again this is all built-in you get it
02:36 - from the rest framework basically we're
02:38 - gonna be converting something to jason
02:43 - based on a model so this is the
02:46 - blueprint that we're going to use in
02:48 - other words whenever we send this jason
02:49 - response it knows to include the ticker
02:51 - open/close and volume so all those
02:53 - pieces of information we don't have to
02:55 - specify it so now what we can do is we
02:58 - can make class meta and we can actually
03:01 - further configure these so the first
03:04 - thing you need to do is you actually
03:06 - need to say what model you're trying to
03:08 - serialize so I know that we only have
03:10 - one in here right now but let's say that
03:12 - we have one for stocks and companies and
03:14 - users and pictures whatever you can
03:17 - actually write all your classes in the
03:19 - same file so that's why you need to
03:21 - specify the specific one right here now
03:24 - the next thing you specify in here are
03:27 - whenever the user requests information
03:29 - about stocks what attributes do you want
03:32 - to return so you can either return all
03:35 - of them right here or maybe you have
03:37 - some weird ID number or maybe some I
03:41 - don't know formula about stocks you're
03:43 - working on and you don't want to send it
03:44 - to the user let's say that you only
03:46 - wanted to send them back the ticker and
03:49 - the volume so how would you specify that
03:52 - well if you use the keyword fields then
03:56 - go ahead and add whatever attributes you
03:59 - want to send back so I'll just rate
04:01 - ticker and volume so just like that so
04:08 - then again whenever they make a request
04:10 - that says hey give me information about
04:12 - Facebook it's only going to send back
04:13 - their ticker and volume and not their
04:15 - open or closed now a cool little
04:17 - shortcut is if you want to return
04:20 - everything then what you can do is you
04:21 - can go in here and just type too
04:23 - open clothes volume or a shorter way is
04:27 - if you just go fields it's given me a
04:33 - red line that I spelled it wrong all
04:35 - right so dunder all done der so double
04:39 - underscore all double underscore and
04:41 - again the reason that you may not want
04:43 - to do this is if you have some like
04:46 - weird primary keys or like ID number for
04:49 - the user that you don't want them to see
04:51 - whatever but in this example I'm just
04:53 - going to go ahead and send back all of
04:54 - those fields
04:55 - boom roasted