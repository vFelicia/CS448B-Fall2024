00:00 - hi this is Alex from PHP academy.org
00:02 - back with another PHP tutorial for the
00:05 - New Boston in the last uh object
00:07 - oriented programming example we looked
00:10 - at we created a class called bank
00:12 - account with a property of balance and
00:14 - we've set this to 10.5 uh just as an
00:17 - example we've made this public for now
00:19 - before we talk about properties and
00:21 - their different
00:22 - types we've just created it public so it
00:24 - can be used by the rest of our page now
00:27 - we've also created a method which is
00:28 - called display balance and we've echoed
00:31 - this out here you can see it returns a
00:33 - value here of balance and then this this
00:37 - balance so returning the uh the value of
00:40 - the balance which we've now echoed out
00:43 - onto the screen but what happens if we
00:45 - want to start to modify this balance So
00:48 - within a bank account you can obviously
00:50 - display your balance you can withdraw
00:52 - and you can add funds to your account so
00:54 - you can uh you can add uh
00:57 - money so we can go ahead and we can uh
01:00 - create another method and we'll name
01:03 - this first and then we'll talk about how
01:04 - we're going to do it so we're going to
01:06 - say public
01:09 - function
01:11 - withdraw and we're going to create the
01:13 - skeleton so we've got our uh parentheses
01:16 - here and then we've got our curly
01:17 - brackets here as well so within
01:20 - withdrawal what we want to do is much
01:22 - like a function in normal like proed
01:24 - when you're programmed procedurally in
01:26 - PHP we want to take in a parameter so
01:29 - I'm going to take in um int or amount
01:32 - for example that makes it look a bit
01:33 - better so we have a function now which
01:36 - is called a method so we're going to be
01:38 - calling the methods uh called withdraw
01:41 - and with this withdraw method we can spe
01:43 - specify a specific amount of money that
01:45 - we want to withdraw so let's go ahead
01:48 - and start the calculation now what we
01:50 - want to do is we don't want to return a
01:52 - value to the user because our balance
01:54 - will return a value our withdraw is
01:57 - going to do everything in the background
01:58 - to withdraw the funds from the bank
02:00 - account so what we can now do is we can
02:04 - say um this remember we used the this
02:08 - keyword or the variable if you like to
02:11 - which I mean the variable this
02:13 - corresponds to the whole of our class so
02:16 - we're saying this balance so we're
02:18 - picking up the variable here much like
02:20 - we did in this part here and then we're
02:22 - saying
02:24 - equals
02:26 - this
02:28 - balance now this is equivalent and then
02:31 - we say minus the amount so we're taking
02:33 - the parameter that we fed in or the
02:35 - argument that we fed in uh the argument
02:37 - here and we're minusing so we're using
02:39 - the minus um the minus mathematical or
02:44 - uh arithmetic operator here to minus the
02:47 - amount that we specify so this is the
02:50 - same as if we were going to
02:52 - do balance oh sorry balance equals
02:56 - balance minus amount however because
02:59 - we're working with it in a class we need
03:01 - to reference it this and then we use the
03:04 - hyphen and the greater than sign to get
03:06 - the balance from this class so the
03:09 - current balance of uh the current
03:10 - balance which is a property inside this
03:12 - class is equal to the current balance
03:16 - minus amount so what we've done here is
03:18 - we've successfully created a method that
03:20 - is going to withdraw a specific amount
03:23 - from our bank account so let's say
03:26 - before we display our balance we want to
03:28 - withdraw a certain amount
03:30 - so withdraw a certain amount is
03:31 - obviously going to take away um an
03:34 - amount from our balance so let's go
03:36 - ahead and um do this and then we're just
03:40 - going to touch up this method to ensure
03:42 - that we can't withdraw any more than we
03:44 - actually have in our bank account so we
03:47 - simply say Alex remember we've created
03:49 - the new instance of the variable of the
03:51 - uh class up here we say Alex and then we
03:54 - say withdraw and then obviously in the
03:58 - brackets much like we did with the
03:59 - display data we didn't put anything in
04:01 - the brackets because there's no
04:03 - arguments in here with withdrawal we
04:05 - just specify an integer amount so we
04:08 - could say withdraw five so if we want to
04:10 - withdraw 5 we um withdraw it this what
04:16 - this will do is it will take away five
04:18 - from the uh Bal property balance and
04:21 - then it will Echo out our balance so
04:22 - we're displaying our balance so uh let's
04:25 - just go ahead and comment this um so we
04:27 - know what we're doing new instance of
04:32 - class then what we're doing is
04:37 - withdrawing
04:39 - 5 and then we're displaying balance so
04:44 - what we've done is we created a new
04:45 - instance which is fine now what we've
04:47 - done the difference is before we display
04:49 - the balance we're making a withdrawal of
04:51 - five so let's go back now what should
04:54 - happen is we should display the balance
04:55 - out as 5.5 as you can see here so we've
04:58 - displayed the balance out out now as 5.5
05:02 - so we've successfully withdrawn
05:05 - £5 from um our bank account in fact I'm
05:09 - going to get rid of these comments CU I
05:10 - know it's going to make it look a lot
05:11 - Messier okay so now what we need to do
05:14 - is check inside
05:16 - withdraw um whether um whether we can
05:20 - withdraw this money or not so um what we
05:23 - need to do is we need to create an if
05:24 - statement we need we need to say if um
05:29 - this
05:31 - balance and we can pop that in Brackets
05:34 - just to make it easier to read um if
05:36 - this balance is um smaller than um the
05:40 - amount so if our balance is smaller than
05:43 - the amount we're trying to withdraw then
05:45 - uh oh no sorry we need to say Echo
05:48 - something
05:50 - otherwise we can make the deduction from
05:53 - our bank
05:54 - account okay so um in here we can just
05:57 - say Echo um or or we can even throw a
06:00 - new exception but we'll deal there's I
06:03 - have tutorials on throwing exception so
06:05 - you can take a look at that um so we've
06:07 - got just Echo not enough
06:11 - funds or money we'll say to keep things
06:14 - simple so let's uh go back and refresh
06:17 - and we can see that that's absolutely
06:18 - fine now let's try and withdraw uh £1 so
06:22 - let's go
06:23 - down so we're going to say withdraw 12
06:27 - now what we should do is get the error
06:28 - message not enough money and then it's
06:31 - still displaying our balance because
06:32 - we've specified uh we specified uh
06:36 - displaying our balance down here so not
06:38 - enough money now we can create this
06:40 - error in many different ways um however
06:44 - for now I'm just going to Echo this out
06:46 - just to keep things simple so what we've
06:48 - done in this tutorial let's just briefly
06:50 - recap we have created a new method
06:54 - called withdraw and we've allowed the
06:56 - user to withdraw a certain amount of
06:58 - money from their bank account using this
07:00 - amount argument we're checking if the uh
07:03 - there's enough money in the account
07:04 - first of all otherwise we're deducting
07:06 - the balance from the balanced property
07:08 - or the amount withdrawn from the
07:10 - balanced property and we're doing this
07:12 - by calling the method here um which is
07:14 - referenced to the new instance of the
07:16 - bank account class that's named Alex