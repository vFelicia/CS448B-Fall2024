00:00 - hi this is Alex from PHP academy.org and
00:02 - this is a short video created for the
00:04 - New Boston now in this part of our
00:08 - operators when we're looking at
00:09 - operators we need to think about an
00:11 - operator that doesn't just deal with
00:13 - equating the value but um we have to
00:18 - look at the data type as well so let's
00:20 - just give an example of num
00:23 - one and I'm going to equal this to one
00:26 - um and that's in a string so we've got a
00:28 - string with the value one now num two
00:31 - and that's going to equal one but as an
00:34 - integer data type so now what happens if
00:37 - we create an if
00:39 - statement and we actually compare these
00:41 - two values so let's compare num
00:43 - one to num two so we're using the double
00:47 - equals operator which is uh is equal to
00:50 - essentially let's
00:52 - Echo
00:55 - equal
00:57 - else
00:58 - Echo not not
01:00 - equal okay so this is a basic if
01:02 - statement we're saying num if num one is
01:05 - equal to num two Echo equal otherwise
01:08 - Echo not equal so let's just open up our
01:10 - browser and refresh and preview what we
01:13 - get so we've got equal here so we're
01:17 - essentially saying that one does equal
01:20 - one however if you look at this from a
01:22 - logical point of view we've got one as a
01:25 - um string so we've got our single
01:28 - quotation marks around it
01:30 - and one here is an integer so this is in
01:32 - fact a number this is in fact a string
01:35 - now what PHP has done is it's dealt with
01:37 - this as a one in itself and it's dealt
01:40 - with this as a one in itself so they're
01:41 - essentially the same
01:43 - character even though this is an integer
01:45 - and this is a string so therefore it's
01:48 - saying that they are equal then what
01:50 - happens if we want to say is num one
01:53 - actually equal to number two you know in
01:55 - reality if I was to say the number one
01:57 - or a picture of the number one they are
02:00 - the same thing but we need to think
02:02 - about the difference between numbers and
02:05 - a and a graphical representation so a
02:07 - string of something so for this we use
02:10 - the triple equals comparison
02:13 - operator so instead of putting two
02:15 - equals remember equal is an assignment
02:17 - operator this is a comparison operator
02:20 - triple equals is also a comparison
02:22 - operator but what triple equals does is
02:25 - it will compare not just the value but
02:27 - it will also compare the data type so if
02:30 - the data type does not match in this
02:32 - case using the triple equals then we'll
02:35 - we're going to be echoing out not equal
02:36 - because this statement here will be
02:38 - validated false so let's give that a go
02:42 - let's come and
02:44 - refresh okay so you can see that now
02:47 - just by adding in that extra equal
02:49 - symbol we're now saying not
02:51 - equal so we now know that one as a
02:55 - string data type is not equal to the
02:57 - number one so
03:02 - why is this useful and when might you
03:04 - use it now it's useful for the obvious
03:07 - reason that we may want to convert um we
03:11 - may want to keep our um comparisons as
03:15 - literal as possible we want to say it
03:16 - must equal the number one must equal
03:18 - number one now for example if I was
03:22 - submitting form data and I was to type
03:25 - in a number one and we were comparing it
03:27 - to number one as in a one we wouldn't
03:30 - use the um triple equals operator we
03:33 - would compare it like this because this
03:35 - is still the number one so there's
03:38 - places you can use it and places you
03:40 - can't use it I mean a lot of people tend
03:43 - to use it even when they don't actually
03:45 - need to but it's just for added sort of
03:48 - uh comparison Integrity if you like so
03:51 - you'll find that perhaps in uh in other
03:54 - instances you find this um other times
03:56 - you may need to use the triple equals um
03:59 - especially in some of my tutorials as
04:01 - well I tend not to use it a lot but um
04:05 - in things like dealing with files as
04:08 - well we might need to to use it as a
04:10 - literal so this is the triple equals uh
04:13 - comparison operator and hopefully you
04:15 - will find some use for it when you are
04:18 - comparing exact values and you want to
04:20 - check data types as well