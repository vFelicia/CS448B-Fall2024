00:00 - all right everybody welcome back to
00:02 - another video and in this one it's
00:04 - actually the first time I'm filming from
00:06 - the new apartment that I just moved into
00:08 - so also if my audio is a little bit
00:11 - weird I know the echo was weird in my
00:13 - old room but uh yeah hopefully this is
00:16 - better but if not let me know and I can
00:17 - fix things up for you
00:19 - but either way let's get back on track
00:21 - to uh remember what we were doing with
00:23 - the shop feature
00:25 - so I believe where we left off is on
00:28 - this functionality right here where the
00:31 - seller can come in and they can add a
00:32 - product and they could go ahead and just
00:35 - you know fill out all the fields hit
00:36 - submit and actually let's see
00:39 - kind of weird where we were at
00:43 - I'll pick the tnb logo I'll say tnb
00:46 - price 12. the quantity one to three
00:49 - activate cement okay
00:51 - so where we were at is uh let me just
00:55 - verify that this is working on the back
00:57 - end too okay so user submits the form
01:00 - and now it looks like we are logging
01:02 - this out and also actually yeah hitting
01:06 - the back end too
01:08 - and then after that I can actually pull
01:11 - up this logic uh this is tmbos okay
01:17 - so after that I can probably just do
01:20 - this too
01:22 - we are going to be navigated to this
01:26 - page
01:29 - all right so toolbarge create another
01:32 - product all right
01:36 - so upon submission of that product
01:38 - creation form we are logging out the
01:41 - values and that's what we saw right here
01:44 - and then after that we are just
01:46 - formatting all of our form data we have
01:48 - to
01:50 - um do some special stuff with form data
01:52 - because we can't just send Json up
01:55 - because it does include image data as
01:57 - well
01:59 - and then
02:01 - once we get that pretty much just uh
02:04 - syncing up our store and navigating to
02:06 - Shop sell products and that's the page
02:08 - that we're going to be working on today
02:09 - so basically we're going to be building
02:12 - out this product uh list page which is
02:15 - eventually going to look like the
02:16 - equivalent of this on tnb OS right here
02:20 - so with that said where to begin
02:23 - actually before I even hop into that I
02:25 - wanted to do this since I know things
02:27 - were kind of uh
02:29 - uh getting kind of messy so I created
02:32 - the stock shop shop roadmap for the
02:35 - front end and I'm just going to kind of
02:37 - outline what all we need to do
02:39 - so we'll split split it up between
02:41 - seller and buyer
02:43 - so seller
02:45 - and buyer
02:48 - all right so for um actually let's just
02:52 - do sell and buy
02:54 - so from the seller's point of view what
02:57 - we need to do is build out the products
02:59 - page
03:00 - and then
03:03 - actually maybe we can split up this way
03:10 - yeah so I'm just going to split it up
03:12 - into front end because I
03:21 - I'm gonna kind of write everything out
03:23 - in the order that we are going to
03:24 - actually do them
03:26 - so first we're going to be building out
03:28 - the seller's product page
03:30 - and then after that
03:33 - what I want to do is I want to actually
03:35 - build out the product catalog page
03:38 - because that's like the next thing
03:41 - naturally in the flow of things so buyer
03:45 - product catalog page
03:53 - and then after this what we can do
03:58 - is we could build out
04:02 - yeah this is kind of a natural
04:03 - progression as well so
04:06 - the buyer
04:08 - let's do the product detail page next
04:14 - yeah let's do that
04:17 - so
04:21 - okay so we already allowed the seller to
04:25 - create products now
04:27 - after that we're going to allow them to
04:29 - view their products and then the buyer
04:30 - to view the products the buyer to click
04:32 - into the detail of one of those pages
04:35 - and then what we can do
04:40 - let's do the addresses next
04:43 - and then we'll have ADD cart
04:46 - functionality Because by the time I get
04:48 - to this cart page I want everything kind
04:50 - of ready to go so I'll say my address
04:56 - all right so my addresses
05:04 - uh then the buyer crate
05:13 - but then we'll build out
05:15 - this page and then the functionality to
05:18 - add
05:19 - and edit
05:21 - addresses
05:24 - and then from there
05:27 - what we can do
05:30 - is have this add cart button
05:36 - actually from there
05:39 - yeah add to cart button
05:41 - and then we'll call this the checkout
05:44 - page
05:46 - all right
05:53 - buyer checkout page
05:58 - and then
06:01 - yeah
06:01 - place order functionality and that will
06:05 - be part of the checkout page
06:07 - and in order to buy your orders and
06:09 - seller orders
06:12 - and that should take us out so buyer
06:18 - all right so this is all we need to do
06:21 - before we have our very own Shop app
06:23 - kind of Pumped okay so in this video
06:25 - hopefully we can knock out the uh seller
06:27 - product page and then well maybe if we
06:29 - are feeling very ambitious the buyer
06:32 - product catalog page too but really I
06:34 - don't think this all should take more
06:36 - than uh a week or so a week and a half
06:39 - I'm guessing in fact
06:41 - if we can get this all built out in a
06:43 - week and a half I will uh I'll be very
06:46 - very happy and it is July 25th now so
06:51 - let's say by the end of the month if we
06:53 - can get this shop app taken care of good
06:55 - to go uh publish live then yeah I'll set
06:59 - a deadline for myself
07:02 - all right so in that note now that I'm
07:04 - under the clock let's go ahead and get
07:06 - ready to build up the seller product
07:08 - page
07:09 - so this is what we're going for and let
07:12 - me just actually inspect this and see
07:13 - what we got going on right here
07:16 - okay so this layout looks like I did a
07:19 - grid
07:21 - and do I want the same thing so main
07:24 - image some details
07:26 - I do like having the status here and
07:29 - then yeah these buttons are pretty much
07:31 - exactly what I want as well
07:34 - so let me see if I can find out where
07:36 - this code is in tnbos
07:43 - View
07:44 - okay
07:45 - so now I'm just kind of figuring out
07:47 - what I can steal from tnb OS
07:50 - um
07:52 - products
07:58 - all right so what I'm doing here
08:01 - is rendering the main heading and I'm
08:04 - doing that same thing
08:13 - all right so on our website we are
08:16 - rendering the main heading with a button
08:19 - on the right
08:21 - so rendering the main heading with
08:23 - button on the right and then in tnbos
08:27 - they're just rendering content
08:30 - and the content is first going to check
08:31 - if you have
08:34 - um any products to display if so you're
08:36 - going to render those products if not
08:38 - just some empty text that says no
08:40 - products to display
08:43 - and the empty text is also its own
08:46 - component
08:48 - so let's actually do the empty State now
08:54 - okay
08:57 - so empty text is just gonna
09:02 - be Center align text
09:08 - so I don't think we have a component for
09:10 - that so for
09:15 - okay this is interesting
09:18 - so components yeah let's just make it
09:21 - empty let's just make a standard empty
09:23 - text component
09:25 - for the entire app
09:28 - all right so empty text paste that into
09:31 - my components and then
09:34 - let's see what we need to do
09:36 - so from Styles what font color actually
09:40 - we don't even have font color do we okay
09:44 - so let's not even worry about the colors
09:47 - for this right now you can just keep it
09:50 - the default color
09:52 - again mainly going to work on my styling
09:54 - later
09:55 - just getting the base components out
09:57 - there and then from
10:01 - the components what we're doing is we're
10:03 - just passing in anything to display
10:06 - which is usually just going to be a bit
10:08 - of text and it's just going to display
10:10 - it
10:11 - italicized okay
10:16 - and with that we'll go with basically
10:18 - the same design pattern we used here
10:21 - where we first well first of all we need
10:24 - to import this empty text component
10:29 - empty tags from components empty text
10:32 - and then in our cell products we can
10:34 - have uh render content logic
10:39 - and eventually we're going to be pulling
10:41 - in the cell products from the API but
10:43 - for now
10:44 - what I can do is I can just make an
10:46 - empty list to test things out
10:49 - so
10:51 - um
10:52 - actually let's just do this off the bat
10:55 - so with surrender content is just going
10:57 - to do is display MD text and we'll add
10:59 - some smarter logic into that later on
11:02 - but for right now just to make sure that
11:04 - our empty state is looking nice
11:07 - go ahead and
11:13 - okay so that looks alright no products
11:15 - to display however I am noticing
11:19 - there's a little bit too much padding
11:21 - and that is because
11:23 - in this top section
11:26 - I have padding
11:29 - as well as this
11:32 - okay so I don't think
11:35 - is this coming from the page actually
11:37 - where's this padding come from
11:40 - well let's find out
11:45 - so on my cell products page I don't have
11:47 - any so it must be coming from the
11:49 - section heading
11:52 - yeah padding 16 and I don't want
11:57 - that
11:59 - I don't think I want any padding on my
12:02 - section heading at all
12:05 - because
12:09 - yeah
12:11 - okay so what am I going to do is this no
12:14 - padding on the section heading
12:18 - and instead
12:21 - what I want is padding
12:25 - on my page right here
12:31 - all right that works actually all right
12:34 - so now there's padding around my entire
12:37 - content my entire page no padding on the
12:40 - section heading and then my empty state
12:43 - is going to have its own padding so that
12:45 - means whenever we build out the product
12:47 - section also want to implement padding
12:49 - there
12:50 - and I think that looks alright
12:53 - and yeah I did see why I changed the
12:56 - color of this
12:58 - let me see if
13:02 - yeah
13:03 - might as well change the color of that
13:05 - now
13:10 - all right so this is a little subtle
13:11 - gray color I'm just trying to see if
13:14 - there's anywhere else
13:16 - where I use that subtle gray color
13:20 - okay
13:25 - all right so this is color secondary
13:30 - the color is secondary and that would be
13:33 - empty text
13:36 - colors
13:38 - colors secondary
13:44 - all right there we go no products to
13:46 - display if you don't have any products
13:48 - looking good
13:50 - so now let's go ahead and well first of
13:54 - all let's see if we have any products in
13:56 - Redux
13:57 - okay so these are products that I
14:01 - created
14:02 - so after I created them with this form
14:05 - what happened is
14:08 - um we hit the back end to actually
14:10 - create them on the back end as well and
14:13 - then when the response data came back as
14:15 - long as it was a successful 200 or
14:18 - whatever the status code is for created
14:20 - 201 or whatever then uh we stored those
14:23 - in Redux
14:25 - so now what I'm first gonna do
14:27 - is I am going to build a selector to
14:32 - pretty much just get all the products
14:34 - that are in the Redux store in
14:36 - um display them out here
14:37 - now another thing that I want to do
14:39 - after that is I'm going to be fetching
14:42 - the products from the API just in case
14:45 - for some reason the products aren't in
14:46 - the store right here maybe the user
14:49 - logged out and they log it in for uh for
14:52 - the first time then whenever they go to
14:54 - this page or maybe they just refresh it
14:57 - then we could hit the back end pull
14:59 - those products back in yeah yeah
15:02 - all right so let's get to work
15:04 - all right so the first thing is I'm
15:07 - going to need a selector
15:10 - to get those products out of my state
15:12 - so right now in my store I have products
15:18 - in my store but I don't have any way of
15:21 - pulling them out so let's just copy one
15:23 - of these
15:25 - um an OP all right
15:28 - so I have products
15:30 - in there
15:35 - and my selector is just going to be
15:37 - called git products
15:40 - all right
15:41 - so now using a selector I can pull those
15:45 - out
15:48 - just find implement
15:50 - it
15:56 - all right
15:59 - so for m1p
16:03 - so for lectors state I'm doing
16:07 - get products and by the way I am going
16:09 - to have to put a filter on here since
16:12 - um eventually you're gonna have a lot of
16:13 - different products in your store kind of
16:15 - like the back end has a lot of different
16:17 - products in the database they're going
16:19 - to be from a bunch of different buyers
16:20 - in on this page I only want to display
16:23 - your products the ones that you're
16:25 - selling so you're going to have to add
16:27 - some filtering for that but we'll get
16:29 - there eventually
16:30 - okay
16:31 - so we're getting the products out and
16:34 - then
16:37 - we're gonna need to use selector from
16:38 - reactor Redux
16:45 - and then we'll just copy this pattern so
16:48 - element NLP
17:06 - all right so now let's just log these
17:08 - out and make sure we're pulling the data
17:11 - correctly all right so these are the
17:14 - products
17:16 - that we have in our store
17:21 - and now what I want to do
17:24 - is actually let's take a look at 10 b os
17:26 - and figure out what they're doing
17:28 - they'll probably filter them
17:32 - okay
17:36 - yeah we're basically doing this exact
17:38 - same thing
17:40 - all right so the products section is
17:43 - just going to be a grid
17:46 - and then there are going to be four
17:48 - columns in it so we can oops
17:52 - go with that same logic
18:00 - so if we if we don't have any products
18:03 - then it displays an empty state if we do
18:05 - then we're going to render them in this
18:07 - grid right here
18:09 - with a 12 pixel Gap
18:11 - and
18:15 - to do that we are going to be using this
18:18 - as well
18:20 - so cell products
18:23 - this is interesting too
18:25 - so
18:26 - okay I'm using a hook here
18:29 - to figure out those cell products but
18:31 - I'm wondering
18:33 - if I need a hook
18:37 - okay so the reason I'm using a hook
18:40 - is because I'm using it on the page that
18:42 - we're building now and also
18:46 - anywhere else no
18:53 - yeah sorry I don't think I need a hook
18:55 - actually I think that I can just
19:01 - yeah
19:02 - memory memoize this okay
19:06 - so first of all let's go ahead and
19:08 - determine how we filter our cell
19:12 - products
19:14 - so each
19:16 - product is going to come with a seller
19:19 - and the seller is going to have an ID
19:21 - property and what we need to match this
19:24 - is against r
19:26 - ID property of self
19:30 - and
19:32 - I have a feeling we may want to create a
19:35 - hook for this
19:36 - use self ID
19:41 - or is that just no no that's a little
19:43 - bit unnecessary
19:45 - but either way let's just go ahead and
19:46 - get that logic so self
19:54 - all right so we're going to be using
19:56 - self
19:58 - Elemental p
20:00 - self
20:02 - and then we are also going to say
20:08 - uh
20:10 - use memo
20:14 - it's all say const
20:25 - use Memo from react
20:31 - and then what this is wait a minute I'm
20:34 - typing in the wrong app
20:43 - all right so we're going to be using
20:45 - Memo from react in
20:51 - I'm wondering if we should even put it
20:53 - in render products
20:56 - filter
20:59 - hmm
21:14 - I use memo and then what we're doing is
21:18 - just filtering out this
21:29 - all right
21:30 - so we are going to say that for first of
21:36 - all all the values of products
21:39 - since they're keyed by ID we're going to
21:41 - pull off the seller property and if
21:43 - seller dot ID is equal to self ID
21:48 - and we are gonna want those ones so
21:51 - basically the seller's products
21:54 - and now let me just log this out
22:00 - to make sure we get all the right ones
22:02 - and it should be all of them right now
22:05 - and there we go
22:06 - okay
22:08 - so
22:09 - just uh one more time the seller's ID
22:12 - needs to match self ID
22:18 - and then those are the products that we
22:20 - want
22:21 - and then we can update this render
22:24 - content logic right here
22:28 - to say
22:34 - okay
22:37 - so we'll say if
22:39 - products filtered products length
22:44 - then return render products we didn't
22:47 - have that written yet so we can just say
22:49 - no for now otherwise return empty text
22:53 - okay
22:56 - okay
22:58 - and another thing that I'm gonna have to
23:00 - do is I'm going to order these products
23:02 - by actually don't know what the best way
23:05 - to order this is
23:08 - so whenever you're on this screen maybe
23:11 - last modified that probably would make
23:14 - sense
23:17 - it's kind of weird since I only have one
23:18 - now but eventually there's this page is
23:22 - going to be full of products that you're
23:23 - selling
23:24 - how do you want them ordered
23:27 - alphabetically latest modified actually
23:29 - let's just go ahead and build out the
23:31 - logic now and then um intuitively I'm
23:35 - probably gonna
23:36 - you know kind of feel what one is
23:39 - working best
23:41 - so let's do that okay
23:44 - so hopping back in tnbos
23:46 - what we need to do now is build out this
23:49 - product section
23:56 - so let's start with the most atomic
23:58 - element which is the product itself
24:03 - so for the product
24:06 - what we have
24:09 - is a thumbnail
24:11 - product list details
24:15 - which is Zone component
24:18 - activation badge
24:25 - and action links
24:28 - interesting
24:33 - okay so let's do this
24:36 - so we're going to make a product
24:38 - component and we're going to pass in a
24:40 - product so let's just go ahead and get
24:43 - started with that all right and then
24:45 - this product component is nested inside
24:48 - the cell products page
24:50 - so new directory product
24:55 - close out U for now and then this is
24:59 - going to have a Styles file
25:01 - and then a new
25:04 - opponent
25:06 - and this is going to be renamed to
25:08 - product
25:15 - okay
25:16 - and then let me just make sure we're
25:19 - passing in the right type of data
25:23 - so we are going to be from types passing
25:25 - in a product
25:28 - op QRS
25:31 - okay
25:33 - and then for this
25:43 - all right so what this product is going
25:46 - to do
25:48 - is it is going to take a product
25:56 - and it's going to be a type
26:00 - type product
26:03 - all right so this product component
26:10 - so this product component is going to be
26:13 - passed in a product and that product is
26:17 - of type product but because our
26:19 - component's name products I'm just
26:20 - renaming that import as T product
26:23 - and now we can work with the product in
26:26 - here
26:27 - actually before I even do that let's
26:29 - well let's do it this way
26:32 - so this is eventually going to have four
26:34 - columns
26:37 - so I don't even need this
26:42 - because I don't need that class name
26:45 - however what are we displaying here a
26:47 - thumbnail
26:51 - in here I made a separate thumbnail
26:53 - component
26:56 - which is interesting
26:57 - is going to come in handy
27:00 - so components wait do I have a thumbnail
27:03 - component in my
27:05 - nope not yet so let's steal that as well
27:08 - all right
27:10 - so before you do let's just go ahead and
27:12 - take a look at what this is
27:15 - it looks like what I'm doing is this
27:19 - thumbnail component basically allows you
27:21 - to pass in any kind of component with
27:23 - optional click Handler and it's just
27:25 - going to display as a square so if you
27:28 - have a tall image like a picture of a
27:30 - building or something or a wide image
27:33 - like I don't know a picture of the Grand
27:35 - Canyon even though those aren't very
27:36 - good examples if you're selling products
27:39 - unless you're selling a building in the
27:41 - Grand Canyon then they may be very good
27:44 - images but either way what it does is it
27:47 - just creates a square image or a square
27:49 - aspect ratio without stretching or you
27:53 - know shrinking the image or anything
27:56 - so anyways we'll go ahead and test that
27:58 - out later but for now we need that
27:59 - thumbnail so I'm just going to copy it
28:01 - over to my app
28:03 - and then clean it up to formats
28:06 - to my existing logic
28:10 - all right so types
28:13 - types
28:29 - all right let me make sure I got this
28:34 - yep yep okay so this is going to take a
28:38 - an optional on click Handler and that's
28:41 - just going to be a generic function that
28:43 - returns void and then the thumbnail URL
28:47 - I'm just going to render the image
28:49 - inside a container
28:51 - so now what I can do
28:55 - is since we need this thumbnail in my
28:58 - products
28:59 - component
29:00 - and the product Styles I'm just going to
29:03 - import that thumbnail
29:06 - and then
29:10 - we can style it right here so yeah with
29:14 - uh styled components what you can do is
29:16 - whenever you have a component like this
29:18 - thumbnail right here
29:20 - um so this is just going to be a regular
29:21 - component that has its own default
29:23 - styling but let's say that you want to
29:26 - override The Styling then what you can
29:28 - do is you can just import it and instead
29:30 - of making style component like style div
29:32 - like you do right here you can just do
29:34 - styled and then uh wrap your
29:38 - um component right here so basically
29:40 - like a mini high order component and
29:42 - then you just overwrite any styling and
29:44 - it would be basically the same as
29:46 - applying it right to your component
29:49 - right here
29:50 - so pretty cool technique and on that
29:53 - note let me actually go ahead and
29:55 - use this so
30:00 - looks like I'm pulling off
30:03 - all right so I'm pulling off some
30:05 - properties from product right here
30:08 - but I actually just want to see where
30:10 - the thumbnail URL is
30:13 - so okay it's on the image property so
30:16 - product.image equals thumbnail URL
30:21 - so let's just do this first
30:24 - we cannot make our code more readable in
30:26 - a bit but for now I just want to have
30:28 - something to render out on the screen
30:29 - okay so on click
30:33 - uh we won't have any click Handler for
30:35 - now
30:36 - and thumbnail URL is just the product
30:39 - dot image
30:44 - now hopefully we got something
30:45 - displaying on the screen
30:50 - oh wait a minute we didn't even uh
30:53 - render this product yet so here we're
30:56 - going to be filling out more details but
30:57 - this is essentially going to be a row
30:59 - for
31:01 - um this product right here however we
31:03 - didn't even import it into our main
31:04 - component yet
31:06 - so of course you probably need to do
31:08 - that let me just see what I can steal
31:10 - from here
31:13 - so import product from product and then
31:17 - we will say render products
31:23 - so what we are going to do
31:25 - is we are going to say if you have
31:29 - filtered products basically then you're
31:31 - just going to render the products and
31:33 - whenever you render the products take
31:35 - each of your filtered products
31:37 - and then map them
31:41 - to this where the product is going to be
31:45 - passed in and
31:47 - the key is just going to be product ID
31:52 - and this has an implicit any type
31:54 - because
31:55 - I wrote that incorrectly
31:58 - okay
31:59 - so if you have products
32:02 - then go ahead and map them to a product
32:04 - component where the key is the product
32:06 - ID
32:07 - and the product being passed in this
32:09 - product and then for each of these and
32:12 - I'm probably going to add my ordering
32:13 - logic right here but for each of these
32:16 - render them inside the products
32:18 - um
32:19 - container
32:21 - which is just going to render them as a
32:24 - grid with four columns that we only have
32:27 - one column for right now
32:31 - all right so those are my four products
32:33 - and because we didn't render the rest of
32:37 - those yet
32:39 - um you actually just
32:41 - let's just do this
32:45 - so all that's looking good for now
32:52 - and now let me just kind of um
32:55 - render the framework of this product
32:57 - some more so this product is gonna have
33:00 - in its second column product list
33:02 - details
33:06 - which is this right here
33:09 - and then
33:11 - the badge and then the elements so let
33:14 - me say this
33:19 - stick everything in a div right now to
33:21 - get my structure
33:24 - so product list details and I'll say the
33:26 - activation status
33:30 - and then after this will be my actions
33:33 - so now it's going to look a little bit
33:36 - closer to that and from here we can just
33:39 - really start building everything out
33:41 - piece by piece
33:43 - however one thing I'm noticing already
33:45 - is the padding here
33:48 - since this grid it does have 12 pixels
33:50 - but I still need
33:54 - yeah let me just put a padding top and
33:56 - bottom of 12 pixels on this real quick
33:59 - okay and let me do that all right so for
34:02 - cell products
34:04 - um the products
34:08 - gonna have a padding of a 12 pixel zero
34:12 - so 12 pixels top bottom zero pixels left
34:16 - and right and that looks a little bit
34:18 - better
34:19 - okay
34:20 - so now instead of product list details
34:22 - let's first figure out why I made that a
34:25 - component
34:28 - instead of just styling it right
34:32 - straight up
34:34 - all right and that is because oh okay
34:39 - so anyways what I was wondering is why I
34:42 - made this what I'm highlighting a
34:44 - component instead of kind of just
34:45 - styling everything right here and it is
34:47 - because I use that same component right
34:51 - here on the orders page too
34:54 - and I'm calling it product list details
34:56 - so let's just stick with the same
34:57 - all right
34:59 - so
35:00 - let's go to U
35:03 - Mr protocols details
35:08 - and this is a container
35:15 - interesting
35:16 - okay so this is a container with a name
35:19 - description and then price Mini
35:26 - and
35:28 - right now we only have a one price
35:30 - allowed per product so that works as
35:32 - well
35:34 - now let's go ahead and take a look at
35:35 - Price Mini
35:44 - Network image
35:46 - Network image
35:51 - okay
35:54 - so kind of just a like reverse
35:56 - engineering this component and see what
35:58 - I have to pass in okay
36:01 - so this is going to need this price Mini
36:06 - in other words it's going to need this
36:08 - component which I also separated out
36:11 - into another component so let's go ahead
36:13 - and create that first
36:19 - so for the front end we're gonna have
36:22 - price Mini
36:27 - and price mini I may want to rename this
36:32 - right here networked image
36:36 - yeah I'm gonna want to rename this
36:39 - core image or something like that
36:43 - actually let's see on the back end
36:46 - so cores models you got a core so I'll
36:50 - say core
36:52 - logo
36:58 - inside a network image this can be core
37:01 - logo
37:08 - so
37:10 - set a network image we got core logo the
37:14 - alt just a core logo
37:19 - and all right so from types
37:25 - is where we get this use Network image
37:35 - QRS
37:39 - Okay so
37:42 - now
37:44 - we're going to be using those product
37:46 - details
37:55 - so let's first of all just figure out a
37:58 - couple things
38:00 - okay
38:01 - so on the product each product
38:05 - is going to have a price amount
38:09 - and then the product.price amount is
38:12 - what we're going to convert into that
38:13 - amount right there
38:15 - and then here what we are doing
38:20 - is we are saying
38:23 - to get the image
38:28 - from the product
38:31 - yeah that's going to be an interesting
38:33 - one
38:35 - okay
38:37 - so the product is going to have
38:42 - uh ID of a core
38:45 - and price core and this is going to be
38:49 - basically the ID
38:52 - of one of these chords that has a logo
39:01 - and that's called price core
39:05 - okay
39:07 - so we can make a hook use Network
39:10 - display image
39:12 - yeah let's rename that hook as well
39:17 - and what we are basically going to do is
39:20 - we are going to
39:22 - actually use core
39:27 - let's say this use core
39:31 - logo
39:33 - and we're going to be passing in a core
39:36 - ID
39:41 - and we're going to be getting back a
39:43 - string of an image
39:45 - so now we need to create a hook use core
39:48 - logo and it's going to work the same as
39:50 - this
39:52 - okay
39:57 - all right
39:58 - so we can just copy this for now and
40:00 - change a few things actually let me go
40:02 - ahead and make a new hook uh called use
40:05 - core logo
40:10 - first
40:12 - new hook
40:13 - and we're gonna say it is is just a type
40:17 - share file use core logo
40:21 - it's going to be similar to this except
40:27 - instead of using network display image
40:29 - we're going to call you use core logo
40:32 - and then for these assets I don't think
40:36 - I have an asset for the default one
40:39 - unknown Network
40:46 - so assets I need
40:50 - we have one thing in there right now
40:56 - all right so this would be
40:59 - shop assets
41:03 - or is it in my main one
41:06 - okay
41:07 - so this question mark can be for when I
41:10 - don't have any core logo let's say we
41:12 - had a core but it got deleted or
41:14 - something it's kind of just a default
41:16 - state
41:18 - and I'm going to name this asset I'm
41:20 - gonna actually name it unknown core
41:26 - unknown core.ping and this is unknown
41:29 - core
41:35 - this is going to be core ID
41:41 - okay
41:44 - and gets cores from selectors they so
41:47 - selector State get course
41:51 - okay okay now we got a little something
41:54 - going on here networks nope course
42:00 - and then this is going to be core
42:03 - network is going to be renamed core
42:07 - and this is going to be core logo if you
42:09 - got one
42:11 - and I don't like how that's all bunched
42:13 - up so
42:16 - maybe I do yeah it's good this way okay
42:19 - either way what we're doing is we're
42:21 - saying we now have an asset of this
42:24 - image right here that's called unknown
42:26 - core
42:27 - now the goal of this Hook is to actually
42:29 - get the core logo
42:33 - and for this
42:36 - what we're going to be doing is we are
42:39 - going to be passing in
42:41 - a price core which I believe
42:47 - a number
42:49 - yeah
42:54 - so from the product we're going to be
42:56 - passing in the ID of a core which is
42:58 - going to be a number
43:00 - and then from our course that we have in
43:03 - our Redux store
43:05 - we're first going to say
43:09 - I don't think we need this logic either
43:13 - since it's always going to be a number
43:20 - okay
43:22 - so basically what we will do
43:24 - is we'll pass in an ID of a core and
43:28 - hopefully the majority of the time it
43:30 - can just use that ID to look up the core
43:32 - and once it finds it it can pluck off
43:35 - the logo from it and return that however
43:37 - if we don't have a core then this is
43:40 - going to be undefined so it's just going
43:42 - to return this logo instead which is a
43:44 - question mark logo
43:46 - so all of this is in the hook use core
43:48 - logo
43:50 - and then in our hook index
43:59 - logo
44:01 - actually
44:07 - use available well of course
44:18 - all right so use core logo hook
44:22 - imported it into our main
44:24 - and then from
44:33 - import that from hooks okay
44:35 - so now our price mini is using this core
44:37 - logo
44:38 - from the product core that we pass in
44:41 - products price score
44:43 - and then with that it's just going to
44:45 - render the core logo on the left and the
44:48 - price amount on the right something
44:50 - similar to this
44:53 - now let me just check my styling again
44:54 - real quick kind of just working from the
44:57 - inside out Elemental op QR
45:01 - all right that looks good that looks
45:03 - good that looks good okay
45:05 - so now what we can do is we can build
45:07 - out this product list the details
45:09 - component now that we have that price
45:11 - mini working
45:14 - and for that let me just figure out
45:17 - where it was
45:22 - okay
45:23 - so this product list details component
45:27 - I believe
45:31 - interesting as well
45:35 - okay so let's start patching this
45:37 - together too and I'll rename the Shop
45:40 - product list details
45:45 - all right so for component
45:49 - let's make a new component
45:54 - new directory and I'll say shop
45:59 - product list details
46:02 - and in here
46:03 - we're going to be using this
46:07 - Styles file
46:13 - is going to say
46:20 - okay
46:25 - so here I created a mixing
46:29 - for a list name and a list item
46:32 - description and let me go ahead and
46:34 - actually just see
46:38 - QRS if I actually want those mix-ins
46:40 - again
46:43 - okay
46:48 - I may actually want to use these mix-ins
46:51 - again
46:54 - mix in list item description mix and
46:56 - list item name
46:58 - [Music]
47:00 - because I'm wondering if
47:03 - yeah it's kind of tricky because tnbos
47:05 - was kind of designed where each app that
47:08 - was built it's it's like uh I don't know
47:11 - like a separate app that you would make
47:13 - on your desktop like everyone was just
47:15 - had its uh completely Unique Style
47:17 - however what I'm doing here is I'm
47:21 - actually merging everything into the
47:23 - same well not the prettiest ey right now
47:26 - but I'm merging like all these apps into
47:28 - the same website and they're going to
47:29 - have consistent styling now
47:32 - so in my head I'm kind of just going
47:34 - through and figuring out what needs to
47:36 - be separate to the shot feature and what
47:39 - can be reused as a generic component
47:42 - but I'm thinking that I probably want to
47:44 - reuse these
47:45 - and that way if any other part of our
47:47 - app needs
47:49 - yeah a list item description or List
47:51 - item name
47:53 - follow the same format okay
47:56 - so let me go ahead and make those
47:57 - mix-ins here
47:59 - so I'll say styles mix-ins
48:02 - input style to burst Style
48:07 - this is interesting too so apparently I
48:10 - had different name and Convention
48:12 - we're here I was prepending all my
48:14 - mix-ins with the word mix-in but I don't
48:16 - think I want to do that
48:19 - should I JK yeah that's not
48:22 - okay
48:23 - so for the list item description
48:28 - and the list item name
48:32 - all right so for this it's a default
48:35 - font so we don't need any
48:39 - special thing for that and for the list
48:42 - it is in the description this was a
48:45 - color secondary
48:47 - so now
48:48 - actually need to go in my Styles main
48:52 - file
48:54 - just import
48:55 - antly so list item description list them
48:57 - name
49:00 - by jkl
49:07 - all right code optimize Imports
49:11 - I'm sure these are sorted okay
49:15 - so I now have those two mixings that and
49:17 - I'll keep this as a standard
49:19 - um across our entire app
49:22 - and then I'll say list item description
49:26 - list item name
49:29 - and this is a list item description a
49:31 - list item name
49:33 - hey looking good
49:37 - and what is this is clickable mix-in
49:39 - okay
49:44 - all right so this is cool actually
49:49 - all right so product list details
49:51 - product list details probably what's
49:53 - details where you at
50:02 - all right now let me just copy this
50:04 - refactor rename product list details you
50:07 - are being renamed to Shop product list
50:09 - details
50:12 - and we need to clean up these types as
50:15 - well
50:25 - p-dress
50:30 - until the strings
50:32 - and I don't have truncate
50:36 - interesting
50:41 - so truncate to where are you coming from
50:44 - my strings
50:47 - util strings
50:51 - fascinating didn't even have truncate
50:53 - okay
50:55 - so this is my string
51:00 - qrst all right
51:02 - so this trunky function all it does is
51:05 - it takes
51:05 - um
51:06 - a string and then a max length for it
51:09 - basically and then if it exceeds that
51:11 - max length it just slices it and then
51:14 - add dots to the end that way if people
51:16 - write like a long description you aren't
51:19 - displaying it all here you only need
51:21 - display like two lines or so and then
51:22 - add some dots after it
51:24 - but anyways uh let's see what we got
51:27 - going on here now
51:29 - okay
51:30 - so we created an opponent Shop product
51:32 - list details
51:34 - I'm gonna P Q R S T U okay
51:40 - okay
51:41 - so what we're doing here is we're
51:44 - passing in a product
51:47 - and it is just going to render the name
51:50 - of that product
51:52 - with optional on click Handler for
51:54 - example if you want to go to a um if you
51:56 - wanted to become a link basically
51:58 - and then for the description we are
52:01 - truncating that at 200 characters Max
52:03 - and then under that we're rendering that
52:06 - price mini component
52:08 - and with this we pass in a product
52:11 - and that price mini components
52:14 - was styled to have an additional margin
52:17 - top of 10.
52:21 - that looks all good
52:23 - then all this is doing it's getting the
52:25 - logo
52:27 - by passing in the ID of the product to
52:29 - use core logo
52:31 - and then rendering the amount on the
52:34 - right side of that
52:38 - okay
52:39 - so Shop product list details is what we
52:42 - want here
52:43 - and we're going to be replacing of that
52:52 - so let's go ahead and figure out what we
52:55 - did in tnbos just to make sure we aren't
52:57 - missing any logic
53:01 - so product list details sell products
53:04 - right here okay
53:06 - so we are going to have a click Handler
53:09 - for it
53:10 - and this is gonna be the same as
53:13 - handling the edit okay so basically in
53:17 - tmbos I had it whenever you click the
53:19 - image or whenever you click the title
53:22 - right here it took you to the edit page
53:24 - same thing as clicking this
53:26 - and we'll Implement that later on
53:30 - but for now we'll just have a no click
53:34 - at all
53:36 - okay
53:38 - so in this component shop product list
53:41 - details
53:45 - whoa
53:50 - what we need is a product and that is
53:53 - just going to be the product
53:55 - and then for on click
53:59 - yeah we'll just pass in this empty
54:00 - Handler for now
54:03 - and that proper was on click wasn't it
54:07 - yep I'm quick
54:08 - okay
54:09 - so now hopefully we should be getting
54:12 - this right here yeah look at these
54:14 - descriptions okay
54:16 - so
54:17 - for this birthday cake which looks like
54:20 - a desk right now
54:23 - actually let's do this let's get some
54:25 - realistic product out in here
54:28 - okay let's start uh selling some stuff
54:36 - all right and I don't delete that
54:38 - because this is another issue we gotta
54:40 - sync up the um
54:43 - back end whenever we delete products
54:46 - from it but anyways what picture do I
54:48 - have that I can sell
54:52 - so I have that wooden spoon still
54:55 - no no I don't
54:58 - so let's sell this desk
55:00 - so say wooden desk
55:04 - and the description is uh
55:06 - big wooden desk gotta work on my
55:10 - marketing skills tnb price amount 800
55:14 - and then the quantity only got one
55:17 - activate that right away so and okay
55:20 - so
55:21 - right here wooden desk
55:26 - first of all I was expecting that to
55:28 - appear at the top but that's another
55:29 - issue we have to fix
55:33 - um but yeah we have a realistic product
55:34 - data in here what I'll do is whenever
55:37 - this page loads I'll make a request to
55:40 - the back end to get all the products and
55:41 - just uh set those products in the Redux
55:44 - store and since I'm kind of over
55:46 - overriding everything at that point
55:50 - um that's gonna wipe out these three
55:52 - products right here that no longer exist
55:54 - in the back end since the back end we
55:56 - only have this wooden desk right now
55:58 - but anyways little by little work on
56:00 - that
56:02 - um for now let's just go ahead and
56:03 - continue working on the UI
56:05 - yeah none of these click handlers work
56:07 - right now so what I'll do now is just
56:09 - build out this activation status
56:11 - component in other words this quick
56:13 - badge right here
56:16 - so let's go ahead and
56:22 - that's going to be in my product right
56:25 - here
56:30 - all right so what did I do with the
56:33 - utmbos so I built this activation badge
56:37 - and all this does is it takes activation
56:40 - status
56:41 - sure sure
56:48 - these are my two activation status
56:50 - active or draft
56:56 - shop products activation status active
56:59 - draft
57:00 - all right so most of this can just be
57:02 - copied
57:06 - and then what else am I doing wrapping
57:08 - it in
57:10 - okay so now I'm just wrapping it in a
57:13 - div since apparently I get some strange
57:15 - Behavior if I just render it out
57:17 - straight up
57:19 - okay so first things first what we're
57:22 - going to need is an activation badge
57:27 - where we pass in an activation status
57:31 - however what I'm thinking is instead of
57:33 - activation badge
57:36 - if we want to name it something else so
57:39 - maybe shop activation badge
57:44 - and that is because this logic
57:48 - it only applies to the shop section
57:54 - now why don't we do that
57:59 - or maybe product activation badge yeah I
58:04 - like that name
58:05 - oh yeah okay
58:07 - so this is going to be rename product
58:10 - activation badge to a refactory name
58:14 - let me just go ahead and create a new
58:16 - component and we'll name it product
58:19 - activation badge
58:22 - and then Styles pretty much can be the
58:24 - same
58:28 - just need to update for my new
58:30 - convention so import colors and types
58:36 - and
58:37 - it's actually from enums now
58:43 - information status active and direct
58:45 - okay
58:48 - so for the active we have it is green
58:52 - which is good for now may need to change
58:54 - it later but
58:59 - and for this we can use dark gray
59:03 - all right
59:04 - so if it's active it's going to be green
59:06 - if it's draft we'll just say dark gray
59:10 - 100 and we'll kind of need to see how
59:12 - these colors look but this is the logic
59:14 - for now
59:16 - um that looks fine that looks fine now I
59:19 - need the actual component
59:21 - this right here
59:28 - all right so for you
59:31 - miss their components you are
59:37 - actually this is going to come from
59:39 - types
59:41 - and then the activation status it's
59:44 - going to come from enums
59:53 - and I think that's good
59:55 - so we're going to be passing an
59:56 - activation status
60:01 - and then that takes care of that
60:09 - yeah yeah yeah yeah yeah yeah yeah oh
60:12 - okay let's go okay
60:14 - so now
60:18 - yeah
60:21 - oh I forgot to rename it actually so
60:24 - this is going to be called
60:26 - product activation badge
60:37 - and this is
60:41 - okay so this is my product activation
60:48 - actually it's activation status right
60:52 - product activation status or activation
60:55 - badge
61:02 - the component is a badge but it
61:05 - resembles the activation status so the
61:07 - component is activation badge and yeah
61:10 - this makes sense so we have to pass in
61:12 - the activation status so no it's kind of
61:15 - tricky naming but
61:18 - makes sense as well
61:22 - so import this component
61:25 - p
61:28 - product activation badge product
61:30 - activation badge
61:32 - and then what we want to do
61:36 - is we're eventually going to be passing
61:37 - in something like this
61:41 - so product activation badge you know
61:43 - what prop does it take the activation
61:44 - status
61:45 - and activation status is just the
61:48 - products activation status just like
61:50 - that and then I got a feeling we're
61:52 - going to have some weird styling and
61:55 - that of course is why I put it in that
61:57 - div
61:58 - so just like the nbos what we can do
62:02 - since I like to have my components
62:05 - styled
62:08 - all right and what was that element qrst
62:11 - oh wait
62:18 - motivation
62:24 - activation status
62:30 - yeah actually that works
62:36 - yeah let's stick with that
62:45 - all right so I'll wrap this in a div so
62:48 - it doesn't stretch
62:50 - and there we go
62:53 - so that looks all right however now I
62:57 - just want to tweak the colors a little
62:59 - bit since they're uh
63:01 - it's green is I don't know I'm not
63:03 - really digging it
63:05 - so for this let's try green
63:10 - let's try 400.
63:13 - might be a little bit too green but
63:15 - we'll see
63:17 - not bad not bad at all
63:20 - and then for this draft is this good
63:27 - yeah maybe darken that a little bit see
63:29 - how we are looking
63:31 - just a tiny bit just a little nudge and
63:35 - let's go back to 100 that was a mistake
63:37 - it was a huge mistake okay
63:40 - so now let's see how we're looking
63:42 - beautiful beautiful beautiful and also
63:45 - beautiful
63:46 - one other thing I may want to do is Bump
63:49 - this up since this one's kind of small
63:51 - right here
63:55 - but I think that we are good for now
63:59 - so add back the products got the wrong
64:02 - products but that's fine an issue for
64:04 - another day well actually today but
64:07 - another another time
64:10 - for now just want to get everything out
64:12 - there and then
64:13 - like putting the foundation into the
64:15 - house and then we're gonna go back in
64:17 - paint everything uh make everything look
64:20 - real nice and Purity I'm going to pick
64:23 - yours there we go okay
64:25 - so next up let's just go ahead and
64:28 - finish out the styling of this page by
64:31 - writing our actions right here and they
64:34 - look like simple links but for some
64:37 - reason in tnb OS I styled them
64:39 - differently okay
64:43 - so what I'm doing here is I am saying
64:47 - okay
64:48 - so we have three different action links
64:50 - in edit delete and then deactivate and
64:54 - then when you click deactivate it's
64:56 - gonna of course deactivate it and then
64:58 - this is going to change to an activate
64:59 - so this last one is going to require a
65:03 - little bit of logic depending on the
65:05 - state of your product so yeah I'll just
65:07 - go ahead and build out this logic right
65:09 - now
65:10 - so uh let's start with render activation
65:15 - Action Link actually should we
65:21 - let's go ahead and take a look at this
65:22 - Action Link component
65:26 - so this is an action link
65:28 - which pretty much standardizes
65:32 - the link
65:35 - okay
65:37 - and I just want to see why I made this a
65:40 - separate component as well
65:48 - okay so we use it yeah okay so we are
65:52 - actually going to be using this across
65:53 - many different parts of the app as well
65:56 - so let's go ahead and just
66:00 - this Action Link is now officially part
66:03 - of our component Library
66:05 - okay
66:06 - so for the Action Link it's just a link
66:08 - but it's going to pull from our styles
66:11 - and it's going to use this blue color
66:18 - 200 300 I got a feeling I'm gonna need a
66:21 - darker darken this as well
66:23 - but for right now we'll just roll with
66:25 - it
66:27 - all right so for this Action Link
66:35 - what we are going to do whenever we use
66:39 - it
66:40 - is we're just going to be passing in the
66:42 - children which is just going to be a
66:43 - string in other words the text of the
66:45 - link
66:46 - and then we're going to be passing in a
66:48 - click Handler
66:49 - not an optional one uh they're pretty
66:52 - much just all gonna have one
66:55 - and then when we hover over it's going
66:57 - to change color have a pointer and an
66:59 - underline
67:00 - beautiful nice and simple component
67:03 - all right
67:05 - so with that said let's go ahead and
67:07 - render these out so Action Link
67:12 - Action Link
67:15 - and then what we can do here
67:18 - is
67:22 - we can create this actions
67:26 - div wrapper
67:32 - okay and all we're saying is here's this
67:35 - is going to be the font size
67:38 - and do we even need that
67:42 - because what I'm thinking is okay so
67:45 - these don't have a font size
67:49 - I'm wondering what my default font size
67:52 - is as well
67:57 - but either way we can do that later
68:01 - all right
68:02 - so let's just get this uh edit and
68:04 - delete one so we can see the styling of
68:06 - it
68:09 - so instead of a div this is in
68:12 - s actions
68:15 - and this is pretty much just uh styling
68:18 - these right here
68:26 - all right so first let's see what we got
68:29 - going on
68:31 - so yep those are definitely too dark
68:34 - and also I did want to see
68:40 - all right so yeah my default font size
68:43 - is 14 and I did want these to be smaller
68:45 - so these are 13
68:48 - those are looking good however let's
68:50 - darken this up just a bit
68:57 - to paste no wrap and all right
69:03 - so let's let's actually go 400 and 500
69:07 - 400
69:09 - 500
69:11 - and how are you looking
69:13 - okay much better
69:15 - so edit delete nothing happens
69:18 - and then
69:20 - what I'm also gonna do
69:24 - is render out this other action links so
69:29 - render activation Action Link
69:34 - all right
69:40 - and that is going to go in here
69:49 - and on click you aren't going to do
69:51 - anything either but basically we are
69:54 - saying that
70:02 - all right so for the products activation
70:04 - status
70:07 - first of all let's go ahead and
70:11 - get this from enums
70:19 - all right so say if activation status
70:22 - equals
70:23 - draft
70:25 - then we're going to want to render the
70:27 - text activate because we the action
70:29 - would be turning it from draft to active
70:31 - mode
70:32 - now if it's not draft then it must be
70:35 - active then we're going to want to have
70:37 - the text to deactivate it so hopefully
70:41 - we have that logic right now okay
70:44 - so in this case the product is active so
70:48 - you can deactivate it and when it's
70:49 - draft you can activate it and that is
70:52 - looking good so even though none of this
70:54 - logic is working since we just have uh
70:58 - pretty much these no Ops
71:00 - for all the on click handlers what we
71:04 - can do next
71:07 - is start working on all of that but
71:11 - anyways I think we got the uh yeah the
71:13 - basic layout is looking pretty good of
71:16 - course these products are deleted and
71:18 - those deletions aren't reflected on the
71:20 - front end yet
71:21 - and we got a lot of uh logic to build in
71:25 - but for now let's look in all right
71:29 - yeah looking good okay so I'm actually
71:32 - gonna go to the bathroom and uh yeah I
71:34 - had a little bit too much coffee and
71:36 - then I will be back in a sec so see see
71:40 - you uh soon
71:42 - alrighty Jack we are back and now that
71:47 - we have the basic layout taken care of
71:49 - let's go ahead and start working on
71:52 - oh yeah that's nice so let's go ahead
71:55 - and start working on the actual like uh
71:57 - functionality for this
71:59 - so the first thing that I want to do is
72:03 - actually let's go ahead and just make
72:05 - the logic for um fetching these products
72:08 - since I have a feeling that whenever I
72:11 - log out
72:12 - log back in again
72:14 - go to shop
72:16 - sell products okay
72:18 - so right now this should be displaying
72:20 - the one product that I have on my back
72:22 - end
72:23 - and also what I'm gonna do
72:27 - is I'm going to log in from the
72:28 - perspective of Amy as well
72:31 - and I'm just going to create one product
72:33 - from her
72:34 - so first of all on this logo
72:37 - needs to change this is just hard-coded
72:40 - in my uh profile picture from GitHub but
72:43 - eventually we're going to have a profile
72:45 - section to allow anyone to update their
72:47 - own logo point is for now I just want to
72:49 - have
72:51 - uh okay let me just have this bacon for
72:54 - sale
72:57 - nice and juicy bacon
73:00 - could be selling for VTX
73:02 - 300 and a quantity of 10 bacon packages
73:06 - Amy's bacon Factory okay
73:09 - so now I just wanted to have two
73:11 - products on the back end one that Bucky
73:13 - was selling and one that Amy was selling
73:15 - and I'm gonna go ahead and actually log
73:18 - out and log in as Bucky again
73:22 - and I just want to have that because
73:23 - whenever we're building out the logic
73:25 - only one product should be displaying
73:27 - here
73:29 - okay so now to do that I need to go
73:32 - ahead and write on my product endpoints
73:36 - so this is going to be oh wait I already
73:39 - have these that's awesome
73:44 - all right so get products
73:47 - and that means I have my dispatchers too
73:53 - and get the products okay so oh I have a
73:56 - great product but not get products yet
74:01 - so first let's figure out where I'm
74:03 - going to be using these from
74:06 - so whenever I go to this page I want to
74:09 - make a request
74:11 - to get my products
74:16 - so let's of course see what team B has
74:19 - first of all probably actually that
74:22 - logic probably isn't going to apply
74:24 - all right so this is going to be an
74:26 - effect
74:30 - if I can just steal
74:36 - E from one of these
74:43 - yeah let's do this
74:46 - all right
74:48 - so what we're going to need is a few
74:51 - things first of all use effects and
74:53 - dispatch
74:58 - dispatch dispatch okay
75:03 - mm-hmm
75:05 - oh I already have that as well
75:08 - cool cool cool
75:12 - so I'm just stealing the same kind of
75:14 - design pattern from elsewhere
75:20 - and then
75:21 - to need to
75:27 - so first let me get this air toasty
75:29 - utility function to you
75:32 - error fetching
75:35 - um products
75:38 - so what I'm gonna do
75:43 - get product selector state
75:46 - okay
75:53 - from dispatcher products
75:57 - so I want to import
75:59 - get products as get products from
76:05 - my dispatchers
76:07 - dispatchers products
76:10 - and now here what I'm going to do
76:15 - is whenever this page loads
76:18 - I'm gonna call that dispatch git
76:21 - products
76:23 - and what this is going to do
76:25 - is it is going to hit my endpoint hit my
76:30 - back end and then with the response
76:31 - status set those as products
76:35 - and then I'll render these out right
76:36 - there
76:41 - and if you get error then you just
76:42 - display the error and say error fetching
76:44 - products and later on what I'm going to
76:47 - be doing is adding in like a
76:50 - filters on the back end and then query
76:52 - params on the front end because right
76:55 - now I actually show you hopefully this
76:56 - is working
76:58 - okay
76:59 - so you know what we did right here is
77:02 - we're just fetching all the products
77:05 - basically right here
77:07 - now on this page to make that a little
77:10 - bit more optimized even though we are
77:14 - pulling down two products
77:17 - even though things are working right now
77:18 - in other words we're pulling down a list
77:20 - of both products my product which is
77:23 - this desk in Amy's product which is that
77:25 - bacon
77:27 - um on the front end what we're doing is
77:29 - we're filtering them out and where we
77:33 - are doing that is right here
77:35 - by saying filter project products is
77:37 - just equal to the ones that you are
77:39 - selling basically
77:41 - um however what I want to do is right
77:44 - here add it so I'm only fetching mine on
77:46 - the back end to make this process a
77:48 - little bit more efficient
77:50 - but for right now
77:52 - this should be working fine
77:56 - and yeah okay
78:00 - so the next thing I actually want to do
78:02 - is
78:04 - build out this edit logic or should I
78:07 - build up the delete and deactivate logic
78:09 - now
78:12 - so the edit logic is going to take a
78:14 - long time the deletion
78:17 - in the activation not so much
78:20 - so let's do
78:24 - actually maybe we just do edit first
78:27 - let's tackle it I'm ready
78:30 - I'm ready to tackle this okay
78:33 - so now let's dig into well first of all
78:35 - anything else that's needed here for the
78:37 - time being
78:39 - I don't think so so let's dig into each
78:42 - product
78:45 - first let's
78:48 - build out the edit logic
78:53 - okay
78:58 - here what I did
79:00 - is I put handle edit click
79:05 - and then what we need to do
79:09 - set active cell product ID
79:13 - that's interesting
79:17 - page
79:22 - fascinating fascinating
79:27 - because I remembered when
79:36 - so what we're going to do for this edit
79:38 - logic is remember we have in our manager
79:42 - this function right here
79:45 - it's reducer function where we could
79:47 - update any of these
79:49 - and we also said
79:52 - that what we want to do is we want to
79:53 - set the active product in this manager
79:59 - this is equal to null or
80:04 - yeah an actual product instance
80:08 - so what we're going to do for the edit
80:10 - logic is set this active product to the
80:12 - product that we want to edit
80:13 - and then navigate them to this page as
80:16 - well
80:17 - so I'm going to be sealing this and I'm
80:19 - going to say
80:22 - handle edit click
80:34 - steal this and I'll get a click in order
80:37 - to click and then let me
80:40 - get all of these
80:42 - so dispatch navigate dispatch navigate
80:56 - and then update manager where are you
80:58 - coming from
81:04 - setup wait a minute
81:06 - yeah
81:11 - I'll take manager from store manager
81:17 - okay
81:18 - so whenever you click edit and that
81:22 - includes either by clicking on the
81:24 - thumbnail you can edit the image
81:27 - by clicking on the name
81:31 - of the Shop product details or whatever
81:35 - this component is called and that's
81:36 - going to put your on click Handler on
81:38 - the name in other words the product name
81:41 - and of course the last place
81:44 - is if you just click the edit button or
81:47 - the edit Action Link on the right
81:49 - then it's going to call this handle edit
81:51 - click and what this handle edit click is
81:53 - going to do is it's going to set the
81:55 - active product
81:56 - to the product of the row you're being
81:58 - clicked on and then navigate you to this
82:00 - page okay so all that should work
82:04 - so now what I can do is even though we
82:07 - didn't build out the form for the edit
82:08 - page yet I can check my Redux and see
82:13 - where is my manager
82:15 - okay so if I click this image it should
82:18 - set it and take us to this page which is
82:20 - good
82:22 - also if I click this name same thing and
82:25 - also edit same thing okay
82:27 - so what is going to happen now is these
82:33 - fields are going to Auto populate with
82:34 - whatever the active product was right in
82:37 - here
82:38 - so let's go ahead and yeah I might as
82:41 - well do that now so I already have our
82:44 - active product being populated
82:48 - let's close some of this out and okay
82:52 - so right now the way we built out this
82:55 - form already is we pretty much always
82:57 - assume that it's
83:00 - um well we basically didn't build any
83:02 - edit logic functionality yet it's just
83:05 - always like going to create a new
83:07 - product by default but now we want to
83:09 - say that if we have an active product
83:12 - which we don't right now but we can get
83:14 - there by clicking like edit right here
83:16 - which is going to set that active
83:17 - product if we have an active product
83:19 - then go ahead and populate these fields
83:21 - so in order to do that let's go ahead
83:25 - and
83:28 - sell product details
83:32 - yeah it's this one right yeah
83:37 - so here I'm using a hook to get the
83:40 - active cell product and is that what I
83:43 - want to do in this case as well I
83:45 - believe so
83:49 - he actually I don't even think
83:57 - hmm
84:01 - so I can use a hook to get it or
84:06 - this is interesting too
84:09 - because in tnbos I was only storing the
84:11 - idea of it
84:13 - and now I'm storing the entire
84:15 - cell product
84:21 - now how do I want to do this
84:27 - so let's do this
84:36 - hmm
84:38 - so it's in my manager
84:46 - um
84:47 - that'll clean that up a little bit but
84:49 - is there anywhere else I'm using this
85:03 - all right so let's keep this simple for
85:05 - now
85:16 - okay
85:17 - so I'll say I'll get it from the manager
85:29 - all right so from the manager
85:39 - which is in select your state what I can
85:42 - do
85:43 - is
85:46 - I can look for an active product
85:59 - let me show you want this here
86:04 - all right so this active product can be
86:07 - equal to a product or null
86:10 - so now
86:12 - what I can basically do is this
86:21 - okay so for the this is interesting too
86:25 - so the initial values of activation
86:28 - status is a Boolean
86:31 - and this is a string
86:41 - so I can do this
86:43 - so if there is an active product
86:47 - then use the activation status for the
86:50 - activation status otherwise use an empty
86:52 - string as the initial value so basically
86:55 - if you're editing then use the
86:58 - value that you're editing otherwise just
87:00 - use an empty string and it's going to be
87:03 - the same pattern for all of these
87:07 - image name price mail yada yada yada
87:10 - okay
87:15 - description name
87:25 - pretty sure there's an easier way to do
87:27 - this but
87:30 - we'll figure out later
87:33 - now this is interesting as well
87:38 - blob
87:40 - I'm talking about blog so active product
87:51 - why is it blob
87:57 - okay so price amount
87:59 - is this because
88:07 - all right the argument of type string or
88:09 - number is not assignable it's a string
88:10 - but number is not assignable
88:16 - so it says values the price amount this
88:20 - is interesting
88:23 - so it has no problem here
88:26 - because the initial values is going to
88:29 - be a string
88:31 - okay oh okay I see what's going on here
88:33 - okay so here we are taking the initial
88:37 - values in
88:38 - whenever you're creating a new product
88:41 - all of them are just an empty string
88:43 - however if you have values on an
88:46 - existing product that you're editing
88:48 - then it's just a kind of not working so
88:52 - nicely because these values are coming
88:55 - from these form values which are the
88:57 - type of these initial values
88:59 - and right here it's saying that
89:01 - basically it's getting a little bit
89:02 - confused because this is a number the
89:05 - price amount from the product and then
89:07 - this is a string
89:09 - so
89:11 - can we just put two string here
89:21 - so these are strings
89:24 - but they're just strings
89:27 - for the form and these get converted
89:30 - later on
89:33 - okay so this is good
89:37 - so if I want to add a new one you see
89:40 - that Tau active product is now null and
89:42 - when active product in my manager is
89:44 - null then all of these form fields are
89:47 - going to be empty
89:48 - and then whenever I want to edit one
89:52 - then active product is going to be a
89:54 - product so it's going to populate with
89:55 - all of these right here
89:59 - now the question is
90:02 - where did
90:05 - my file Chooser go
90:08 - because here
90:11 - it works
90:13 - but whenever I'm editing it seems to
90:16 - have disappeared so let's figure that
90:18 - out
90:19 - okay
90:20 - so the logic says if
90:24 - if there is no values.image
90:31 - and image equals activeproduct.image or
90:34 - empty string
90:38 - that's interesting
90:48 - so
90:51 - oh wait a minute this is um
90:54 - okay so let's actually open up another
90:57 - project that we're borrowing this from
91:02 - and let's see
91:09 - so render preview
91:13 - close out of tmbos for now
91:19 - all right
91:21 - so here
91:24 - we are saying that
91:28 - all right if you don't have any value
91:30 - for image then handle the file selector
91:34 - and then for render preview
91:39 - this should be rendering
91:42 - so image source preview
91:46 - is equal to the
91:51 - set field value function
91:56 - where where's preview coming from
91:59 - if preview
92:02 - preview is coming from State and set
92:04 - preview oh okay okay okay okay okay okay
92:08 - so first thing we need in this is
92:11 - preview state which we already got
92:14 - however that piece we seem to be missing
92:16 - is this space
92:17 - where after
92:20 - we're setting the form values type
92:23 - we have a use effects statement
92:26 - and what this is doing if we can import
92:29 - use effect
92:35 - okay
92:44 - fix this initial values really
92:47 - okay
92:50 - it says wrap this and use memo
92:53 - and can you do it for me
92:55 - or do I need to do it
92:58 - all right so initial values is just
93:00 - going to be yeah something like this
93:07 - like this however
93:11 - instead of this you get passed in this
93:14 - boom
93:18 - and your dependencies are going to be
93:20 - this
93:21 - they pretty that up
93:27 - all right
93:29 - so let me just make sure my imports are
93:32 - good all right
93:34 - so here we're saying
93:39 - that the initial values
93:42 - are going to either be basically a bunch
93:46 - of empty strings or a bunch of product
93:47 - details now if initial values.image
93:52 - does not exist then basically don't do
93:55 - anything it just means you're trying to
93:57 - create a new product no need to do
93:58 - anything special
93:59 - however if
94:02 - there is an initial values image then go
94:06 - ahead and set the preview to that image
94:10 - basically
94:11 - and this will give us our default Logic
94:15 - for displaying that thumbnail
94:19 - okay there we go
94:20 - so now from the top I'm going to my cell
94:24 - products I'm going to add a product
94:25 - there is no image in there great now
94:28 - whenever I edit a product I already get
94:30 - this default image which is exactly what
94:32 - I want and I close out of that and I can
94:35 - select a new one if needed
94:38 - select Steve Jobs
94:44 - be good to go
94:45 - all right cool
94:48 - so now what's going on here those are
94:50 - activated activation status is it prop
94:52 - on Dom element
94:56 - okay
95:00 - so let's fix this little unrelated
95:02 - warning
95:05 - and from there
95:08 - I believe
95:12 - where is it coming from here
95:14 - yeah
95:16 - I believe so
95:18 - so here we're using activation status
95:20 - but it's not a valid Dom element
95:23 - because we're sticking on a div right
95:25 - here so what we're going to need to do
95:27 - is just prepend it with a dollar sign
95:33 - one two three four
95:39 - yeah basically using a style components
95:41 - anytime you use
95:43 - um
95:44 - pretty much like a custom property that
95:46 - you want to pass down to your styling
95:48 - portion of the style components
95:51 - and it's not like uh existing domp
95:54 - property then you just need to prepend
95:56 - it with a dollar sign so hopefully if I
95:58 - refresh
96:00 - should fix that always nice to keep your
96:02 - console nice and clear
96:04 - but now getting back on track let me
96:06 - just go ahead and
96:08 - not gonna need this anymore okay
96:10 - so what we are gonna need to do now
96:14 - is we need to update our submit logic
96:16 - because even though we have this logic
96:20 - working correctly where for adding a new
96:21 - one then there you go or if you're
96:23 - editing it then you know the form is
96:26 - pre-populated
96:27 - um whenever you submit this data you're
96:30 - either making a poster request or a
96:32 - patch request depending on if you're
96:34 - trying to create a product or edit a new
96:35 - one
96:36 - so on that note let's go ahead and
96:41 - figure out what we did
96:43 - here
96:44 - okay
96:47 - so this is my uh cooking app and what I
96:50 - said that if you have an active recipe
96:52 - already in other words you're in edit
96:55 - mode then you just want to make an
96:58 - update request otherwise if you don't
97:00 - have one means you're creating it for
97:02 - the first time you just set this equal
97:04 - to
97:07 - create and then let response data or
97:10 - yeah
97:14 - and then here I'm navigating to
97:18 - okay so I don't think I need any of this
97:21 - because here what I'm doing doing is I'm
97:24 - storing the response data of either the
97:26 - updated response or the creation
97:28 - response and then using that response
97:30 - that ID to navigate them to the recipes
97:32 - page
97:33 - however in this I'm just navigating to
97:37 - their cell products
97:41 - so in that case what I can do is this
97:44 - actually you can keep this pretty easy
97:48 - okay
97:50 - so I'll say if you have an active
97:53 - product
97:59 - so if you have an active product then
98:01 - what you want to do
98:04 - I'm gonna update this in a bit but
98:10 - if you have an active product then you
98:12 - want to make an edit product
98:14 - request otherwise make a great product
98:17 - request
98:19 - so let me just go in here and say if you
98:21 - have active product
98:25 - oops whoa
98:27 - finger in the Run Spot
98:29 - okay
98:30 - so if you have an active product where
98:32 - you're on this edit page then you're
98:34 - just going to go ahead and want to
98:36 - update that product and also why am I
98:38 - not
98:42 - expected two arguments for update oh
98:44 - that's because I need the ID as well
98:47 - so if you have an active product
98:50 - then pass in the product ID
98:54 - and then the request data so
98:55 - activeproduct.id
98:58 - and then the request data
99:01 - otherwise you are creating it and
99:05 - another thing that I just want to check
99:07 - yeah actually have this logic right here
99:12 - if the initial value for image is
99:14 - different than that
99:16 - come on
99:19 - and also I can update my
99:28 - so a couple of different things here
99:33 - so
99:37 - when you create a product you want to
99:39 - say product created otherwise you can
99:42 - see product updated
99:46 - and then for this error
99:51 - then what we're going to say
99:56 - is that
99:58 - if you had an active product
100:01 - then you are updating otherwise you're
100:03 - creating it
100:05 - so if there's an error message when
100:07 - you're updating it's going to say error
100:09 - updating product authorize error when
100:11 - you're creating is error creating
100:13 - product
100:17 - and then no matter what it navigates you
100:19 - back
100:20 - this should be good
100:24 - okay so from the top I'm going to add a
100:29 - new product and what is this going to be
100:31 - let's um
100:34 - what is this a dresser
100:40 - dresser
100:42 - wood
100:43 - dresser
100:45 - uh 12 and I'll just have one of them and
100:49 - I will not activate this dresser so now
100:52 - let me just check my network request
100:55 - submit
100:57 - okay so the ordering is still a little
100:58 - bit weird but there you go and now yeah
101:01 - we didn't build this activation logic
101:03 - however if I go and edit this I should
101:07 - be able to say change the name to big
101:10 - dresser
101:11 - one dresser and
101:14 - let me update this to tnb
101:18 - okay
101:20 - a dresser there you go let me actually
101:21 - change the image of this
101:23 - to bacon
101:26 - actually I don't want to do bacon
101:28 - because Amy's selling bacon
101:30 - in fact let me just change it to uh
101:34 - Steve Jobs
101:37 - so this is I'll say Steve Jobs poster
101:44 - updated description
101:49 - and for a price I'll do 500 now and the
101:52 - quantity five activate submit
101:56 - actually that was interesting
102:01 - was it that
102:05 - okay let me put this in draft mode I
102:07 - think I noticed something okay this is
102:09 - in draft mode and whenever I edit it
102:12 - it automatically populates the actives
102:15 - which is not what we wanted because we
102:18 - were in draft mode so why is that
102:20 - happening
102:22 - okay
102:27 - so the activation status is now equal to
102:31 - draft
102:35 - however
102:38 - in the check box
102:44 - what we are saying
102:53 - type check box
102:57 - label
103:02 - how does it know if it's checked or not
103:04 - name
103:14 - yeah how can we see if you are checked
103:16 - or not
103:29 - well first of all let me see if
103:32 - I deactivate this oh look at that that's
103:36 - interesting so I'm clicking this now and
103:38 - no matter what it's just always checked
103:42 - fascinating
103:43 - now whenever I sell
103:46 - I can check or uncheck it so what
103:50 - the
103:52 - heck is going on with this
103:55 - okay
103:56 - so when I'm editing it that's another
103:59 - interesting thing I noticed you see how
104:01 - this is
104:03 - um
104:03 - deactivated
104:05 - but then I click this nothing changes
104:08 - with the checkbox
104:11 - and then we get that funky Behavior
104:20 - all right so this is with a recipe
104:23 - it's pop open tnbos since that's what we
104:25 - got the check box at checkbox at
104:28 - label name
104:36 - the value
104:42 - you feel go to
104:48 - all right it's only one thing to do and
104:51 - that's as our friend Chad gbt what's up
105:00 - hmm
105:08 - name label okay
105:11 - so the issue is how can we phrase this
105:15 - um when editing a product
105:20 - okay when editing a product
105:25 - the activate product checkbox is always
105:28 - checked
105:30 - and why
105:50 - I have a bug when editing and Croc the
105:53 - activation checkbox is always checked
105:56 - now let's give it the info that you need
106:00 - so first you're probably going to need
106:03 - the product type
106:07 - and actually
106:10 - let's do this
106:11 - so the enum product you need the
106:15 - activation status
106:21 - and then of course you are going to need
106:27 - a component components
106:31 - and then what else are you going to need
106:34 - the checkbox component
106:37 - for sure
106:39 - and what's this doing nothing important
106:44 - all right chat GPT help me out
106:47 - issues that you're not setting the
106:49 - initial value to Boolean value
106:52 - oh okay
106:54 - so okay
106:58 - yes yes
107:06 - oh
107:09 - all right so yeah I see what's going on
107:12 - here so the form value of the checkbox
107:14 - is just the true uh excuse me a true or
107:18 - false
107:19 - so
107:22 - um whenever you add a new one this is
107:23 - false this is true false and true now
107:26 - our back end it takes active in draft
107:29 - so what we're doing right here is right
107:33 - before we submit this request to the
107:35 - back end which is happening right here
107:37 - or right here what we're do doing is
107:39 - converting that Boolean value to either
107:42 - active or draft
107:43 - now the problem is whenever we are
107:47 - getting all these default values from
107:49 - the active product to populate our form
107:51 - what we're doing is we're just plucking
107:54 - off the activation status without
107:55 - converting it to a Boolean and since
107:58 - active or draft are both just shrinks
108:00 - and they're both truthy then it's just
108:03 - always keeping that checked
108:04 - but now we need to change that and how
108:10 - to chat jipta say we could okay
108:15 - and let me just make sure I didn't miss
108:17 - anything when the checkbox work true but
108:20 - in your activation status active draft
108:24 - initial convert back all right so for
108:27 - the initial values
108:33 - yeah this is nice
108:38 - so I'll say activation status
108:44 - if your active product is equal to
108:48 - okay
108:51 - so this is either going to be true or
108:52 - false true if you have active product
108:54 - status and its status is equal to
108:58 - or excuse me if you have an active
109:00 - product and the status is equal to
109:01 - active
109:03 - and now let me just make sure
109:10 - and then when we submit it
109:15 - handle submit I already do that as well
109:20 - yeah
109:22 - so now I think we should be good so
109:25 - editing this
109:27 - first of all that is rare
109:29 - okay
109:30 - so I edit this that's already active and
109:32 - it says active I edit this that's not
109:35 - active and it's not active now I can
109:37 - change this
109:40 - submit it and that should make a patch
109:43 - request with activation says active let
109:46 - me deactivate that submit make a Patcher
109:49 - request for the activation status equal
109:51 - draft beautiful
109:53 - okay and everything else does work right
109:56 - uh yes it's amount that amount that
109:59 - amount this amount
110:01 - bacon Smith Steve Jobs posts are great
110:09 - activate that all right looking good
110:12 - so now our edit logic is actually taken
110:16 - care of
110:20 - yeah I think that's all we needed to
110:23 - write oh wait a minute
110:26 - so these are hard-coded as well
110:29 - but we will change that eventually
110:49 - change those from hard-coded values
110:58 - cool cool cool cool cool cool cool cool
110:59 - cool cool cool cool cool cool cool cool
111:01 - cool cool okay
111:04 - so now pages and actually let me go
111:06 - ahead and lint this real quick just a
111:08 - little bit npm run lint
111:11 - just to make sure
111:13 - I'm in a good uh checkpoint
111:17 - all right so for shop Pages let's build
111:20 - out the rest of this functionality
111:22 - okay
111:24 - so for cell products what else do we
111:26 - need to do
111:28 - well well well well well so glad you
111:32 - asked
111:34 - so for each of these individual product
111:36 - rows
111:38 - we got this logic working where you can
111:41 - click the image
111:43 - to the go to the edit page click the
111:46 - name
111:47 - or click edit so let's just finish the
111:50 - rest of this functionality starting with
111:52 - delete so right now when you click
111:53 - delete nothing happens and what I want
111:56 - to do is actually delete the product so
111:59 - I'm gonna do
112:03 - you know edit click don't need this
112:06 - um
112:13 - okay
112:16 - so what I'm gonna do
112:22 - just trying to see if I could steal her
112:24 - from anywhere okay so I'm going to be
112:26 - calling this dispatchers delete
112:30 - product
112:31 - and pass in the ID
112:34 - so I want to import
112:41 - products all right
112:44 - so handle delete click
112:54 - what I'm going to be doing is I'm gonna
112:56 - be calling this
112:59 - whenever I click the delete button of
113:01 - course
113:02 - and all this is going to do
113:07 - is it's going to dispatch this delete
113:09 - product dispatcher function and this is
113:12 - going to
113:15 - take the ID of the product we're trying
113:17 - to delete so
113:20 - product ID
113:22 - and then I need to await this
113:32 - wow wow okay
113:34 - so now whenever I click delete it should
113:36 - dispatch this delete product by
113:40 - deleting this product with a given
113:41 - product ID so let's try that
113:45 - now it should also delete it from the
113:47 - back end so let me go to my products I
113:49 - have three products back here
113:52 - these two I don't want to sell this
113:54 - Steve Jobs poster anymore
113:56 - so I'm going to delete that
113:58 - deletes it for my back end
114:00 - and it deletes it from my front end
114:03 - looking good now another thing I
114:05 - actually want to do is just display a
114:07 - toast right there because whenever I
114:10 - deleted that it was kind of uh
114:15 - weird not having any toast as a feedback
114:17 - so display toast
114:31 - take your Stu
114:34 - here
114:36 - let's play toast toast type comes from
114:38 - enums
114:45 - and for this toast I will say after you
114:49 - delete it
114:51 - and the delete was successful
114:54 - say successfully
114:58 - deleted
115:00 - product or
115:02 - that product or something
115:04 - how do I have it in here
115:12 - uh so order products products
115:19 - oh product deleted there we go that's
115:21 - easier
115:27 - and I should probably put a
115:31 - I'm wondering if
115:34 - probably want to try catch for this
115:46 - yeah you saw the you know app doesn't
115:48 - crash it's never a good thing if that
115:50 - happens so try and then I'll say
115:57 - where's my error logic that I can just
116:00 - see though
116:01 - ah so great products
116:18 - all right so try to delete the product
116:21 - and if you can't then display the error
116:26 - in the console and then
116:29 - eratosis is error deleting
116:33 - product
116:35 - okay
116:36 - so handle delete click should Now
116:39 - display toast let's figure out okay so
116:42 - delete this product deleted looking good
116:46 - now let me just go ahead and add one
116:48 - more so I can test something else
116:53 - so let's sell that desk again
116:57 - all right so wooden desk
117:02 - wooden desk big woodeness I'm selling it
117:06 - for tnb selling it for 500 a great value
117:09 - phenomenal
117:11 - amazing value let's activate it submit
117:14 - it and looking good so edit delete works
117:18 - now deactivate is what I want to do now
117:22 - so
117:24 - let's
117:31 - handle activation link click
117:35 - okay
117:42 - this is interesting new activation
117:44 - status equals draft
117:51 - yeah I think I just don't even want to
117:53 - mess with any of this so
117:58 - what I'm going to do is this
118:02 - actually what did I name that handle
118:03 - activation actually and click
118:05 - handle
118:09 - render activation link and so
118:16 - so const handle
118:20 - activation action link click
118:24 - and also going to need to
118:29 - it's async as well since we're going to
118:31 - be dispatching some stuff
118:36 - handle activation
118:38 - action link click
118:40 - good enough okay
118:44 - so the first thing I'm going to do is
118:51 - Date Update
118:54 - all right
118:56 - so let's figure out what the new
118:59 - status is going to be
119:09 - and also going to be stealing some stuff
119:11 - from here namely this update product
119:16 - logic so update product from dispatchers
119:19 - product
119:25 - [Music]
119:26 - I'm also going to be saying
119:35 - all right
119:36 - so we want to update this product
119:41 - and what data do we want to update it
119:44 - with
119:46 - well the data that we're going to be
119:49 - updating with is we are going to say
119:55 - we're only going to be updating one
119:56 - field which is this activation status
120:01 - and the value of this is going to be
120:04 - depending
120:09 - on this so I already got it
120:12 - so let's just do this activation status
120:14 - DOT active
120:19 - form data
120:21 - oh I need to convert this to form data
120:23 - okay
120:29 - so this data requires form data
120:34 - so to do that
120:41 - well we can go ahead and make some new
120:43 - form data all right so activation status
120:47 - actually this works pretty well
120:51 - activation status
120:55 - request data
121:05 - so what I can do is just say
121:11 - values activation status
121:24 - all right so for the activation status
121:27 - we're going to be doing is we're going
121:29 - to be looking at the products activation
121:31 - status
121:32 - in seeing if it's equal to
121:38 - active
121:39 - if so
121:41 - then when they click it
121:44 - it's going to be in draft mode otherwise
121:46 - it's going to be active
121:48 - and then this
121:51 - that's probably why I I did it uh
121:54 - since I hate how that's formatted
121:59 - so this is actually
122:02 - works as well
122:09 - all right
122:10 - so let the new activation status let's
122:12 - just assume it's a draft
122:15 - by default
122:19 - and then here I'm saying that if the
122:21 - current activation status is in draft
122:23 - then the new one should be active
122:25 - so if the current activation status is
122:28 - in draft then
122:31 - that's new
122:41 - that's kind of ugly too
122:50 - oh boy oh boy oh boy so conservation
122:54 - status all right should we just do this
122:56 - the ugly way
123:04 - all right
123:12 - so handle activation link click whenever
123:15 - you do you're going to make new form
123:16 - data and then you're going to figure out
123:18 - what the activation status should be
123:21 - and that is if the current activation
123:23 - status is active then you want to update
123:25 - to the draft however if it's in draft
123:27 - then you want to change it to active
123:29 - and let me just try one more time to
123:32 - make this
123:33 - readable
123:39 - oh yeah there we go that's what I'm
123:42 - looking for okay
123:44 - now hand elevation activation link click
123:47 - and render activation link on click and
123:50 - this is where we're going to stick it
123:52 - and now everything should be good go may
123:55 - want to put a try catcher on this too
123:57 - but let's just test things first okay
123:59 - it's active you see deactivate
124:01 - then you click this to activate it or
124:04 - excuse me to put it in draft mode now if
124:06 - it's draft mode you can activate it it's
124:08 - active deactivate draft mode activate
124:11 - there you go
124:13 - so now I want to do two more things and
124:17 - this is just some housekeeping stuff the
124:19 - first thing that I want to do is I want
124:21 - to surround this and try catch just so
124:23 - we don't have any um
124:25 - right here if this fails then we're just
124:28 - gonna kind of Crash our app and you know
124:31 - try to avoid that
124:34 - so try to do this
124:37 - now if there's an error we'll say error
124:41 - updating activation status
124:47 - otherwise
124:49 - if it's successful I'll say
124:54 - product or I'll say activation status
124:57 - updated
125:06 - so that should
125:08 - carry that
125:10 - activation status updated activation
125:13 - status updated
125:15 - there we go
125:17 - all right wait actually is this a
125:20 - is this done now let me try it with a
125:23 - couple more products
125:29 - all right so let me get this wooden
125:30 - spoon that I've been meaning to sell so
125:32 - I'll copy image address okay let me
125:35 - actually delete these I'm gonna treat it
125:37 - like an actual actually coming from the
125:39 - top my goal as we said was to sell my
125:43 - wooden spoon I'm gonna go to my products
125:45 - I'm going to add I'm going to say
125:47 - wooden spoon
125:52 - and the description
125:54 - beautiful wooden spoon
125:58 - for this let me just go ahead and save
126:01 - this image as spoon
126:06 - and then I can for my downloads
126:09 - select this spoon
126:12 - now I'm gonna sneeze
126:17 - boy
126:18 - all right so I want tnb for this spoon
126:21 - and I'm gonna sell it for 2600. I only
126:25 - have one of them this is handcrafted
126:27 - and I'm not going to activate it just
126:29 - yet
126:30 - because I first want to go here product
126:32 - created
126:34 - edit it don't need to and I'll just
126:37 - click activate from here
126:39 - activating status activated beautiful
126:43 - all right I think uh
126:45 - actually I think that's all there is let
126:47 - me just add one more just to make sure
126:49 - our list behavior is still working
126:53 - uh
126:56 - mushroom book so save image as
127:02 - mushroom book
127:05 - I just want to add one more so we have a
127:07 - list of products just to make sure my
127:09 - grid styling remains intact
127:11 - and I'll say mushroom
127:15 - book
127:16 - say uh
127:22 - about mushrooms
127:29 - and where are you at mushroom book there
127:32 - you are
127:34 - now for this I'm gonna sell it for uh
127:37 - 2200
127:39 - tnb I only have one of these as well and
127:42 - I'll activate that right away okay
127:45 - so a couple things I'm noticing here
127:47 - first on this page
127:50 - then I would have liked to have my most
127:55 - recently added products appearing at the
127:57 - top
127:58 - so let's go ahead and do that right now
128:01 - so each product has a modified date on
128:04 - it
128:05 - and I'm just going to order by that
128:10 - and this is on my products page
128:13 - so I'm gonna need that ordering right
128:17 - here
128:25 - and let me see if I get it
128:33 - okay so order buy from low Dash
128:39 - and
128:41 - what I can do is just create a date
128:48 - all right
128:49 - so my filtered products
128:52 - I can order them right here
128:54 - so anyways just the recap I'm first
128:58 - running this memoize function right here
129:01 - to determine all the products that I'm
129:05 - selling so any products that are in my
129:08 - store if they're from another seller I'm
129:09 - filtering it out and just getting this
129:11 - filter products now these are used to
129:15 - determine if I should display the empty
129:17 - state or a list of products right here
129:18 - and what I could do is I could order
129:22 - them at this time since it's the same
129:24 - list of products that's eventually going
129:25 - to be rendered
129:27 - however I'm wondering if it's more
129:29 - efficient to just save this as is and
129:32 - then at the time
129:35 - that I'm rendering them then order them
129:40 - yeah that's going to be more efficient
129:47 - so what I can do is this
129:53 - uh where's that order by I was stealing
129:57 - oh somewhere else
130:01 - oh here we go
130:04 - so if it does come time to render these
130:07 - products then what I'm going to do is
130:09 - just I'm just going to say ordered
130:10 - products
130:17 - and this is equal to an ordered list of
130:21 - filtered products and instead of created
130:24 - date
130:24 - that is going to be modified day right
130:32 - modified date descending highest the
130:35 - lowest okay
130:39 - and then these products are just going
130:40 - to be
130:43 - ordered products
130:45 - all right so when you have products to
130:48 - render then just go ahead and order your
130:51 - filter products which is basically means
130:53 - the products you're selling
131:03 - and then sort of my modified date
131:05 - descending highest to lowest
131:11 - okay cool
131:13 - now let me edit the spoon I'll say nice
131:15 - one spoon and hopefully this should be
131:17 - first in the list yep
131:21 - oh you know one weird thing about this
131:23 - though is that look what happens when
131:25 - this
131:26 - huh that's a little bit Goofy
131:29 - okay
131:30 - so whenever a product is added or edited
131:34 - like this
131:38 - then correctly so I want it to appear at
131:41 - the top of my list
131:43 - because that's just intuitive to me
131:45 - however the logic for this is just sort
131:48 - this by modified date
131:49 - in
131:51 - it's kind of unintuitive however
131:53 - whenever I'm just updating the
131:55 - activation status
131:57 - since it does of course update the uh
131:59 - modified date but
132:01 - then my products are kind of hopping
132:03 - around here
132:05 - so that's another question that I'll
132:07 - throw out the to the community
132:10 - how do I wanna account for this
132:13 - finically finicky logic
132:18 - yeah I'm not sure I have a good answer
132:21 - for that right now but um
132:23 - hopefully someone else does
132:26 - you add one of these
132:28 - no I'm good right now
132:31 - all right so on this note can we just
132:34 - check this off seller products page I
132:36 - mean there's nothing else to do to it
132:37 - right
132:38 - so products page we add
132:41 - thumbnails working price is working
132:45 - badges working all these buttons working
132:47 - yeah I think we're good to go
132:49 - okay
132:51 - so the cool thing is we can now manage
132:54 - our products from the front end
132:56 - however as a buyer we still don't have
132:59 - any catalog
133:01 - so what I'm going to do is kind of just
133:04 - uh call it a checkpoint probably a video
133:06 - right now so let me go ahead and if you
133:08 - run lint
133:14 - and then I could push up these changes
133:18 - and then kind of get started on the next
133:20 - part of the video all right
133:23 - so I'll go ahead and review these
133:25 - changes real quick and then push it up
133:27 - and then in the next video what we'll do
133:29 - is we will get started
133:32 - on this buyer's catalog page or the
133:36 - catalog page whatever you want to call
133:38 - it
133:38 - so uh yeah I mean progress looking good
133:42 - so far and I'll see you next video see
133:44 - you soon