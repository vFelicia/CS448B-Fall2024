00:00 - alright guys so in the last video what
00:02 - we did is we learned this really awesome
00:03 - shortcut of how to make a non hard-coded
00:06 - URLs and this is the proper way that you
00:09 - should do it in all of our templates but
00:11 - let's go ahead and take a step back and
00:13 - think about things for just a second I
00:15 - mean right now this project is pretty
00:18 - small it only has one app music but what
00:22 - happens when we start creating more apps
00:24 - maybe we're going to make another one
00:26 - for videos maybe we're going to make
00:28 - another one for profile form whatever so
00:30 - basically what I'm trying to say is
00:32 - usually sites have like 10 or 20 or even
00:34 - more apps so that's fine however what
00:38 - happens when another app aside for music
00:41 - has the same detail view maybe it has
00:44 - video detail view profile detail view
00:48 - well then whenever Django tries to look
00:51 - at this template it says alright you're
00:53 - telling me to get the URL pattern for
00:55 - detail but I have one in music one in
00:58 - videos what the heck URL pattern am I
01:01 - supposed to know what you're talking
01:03 - about
01:03 - well we solved that problem by
01:06 - namespacing our URLs that means that we
01:09 - need to say or specify oh whenever we
01:12 - wrote this detail right here we're
01:14 - actually talking about music app detail
01:18 - view and it's really easy to do above
01:20 - your URL patterns in music slash URLs
01:23 - just go ahead and write app underscore
01:26 - name and just set this to whatever your
01:29 - app name is in this case music so now we
01:32 - can go ahead and copy this and we can
01:34 - actually use this in our template so
01:38 - instead of just specifying alright URL
01:40 - pattern detail we can write music detail
01:44 - and now what we're saying is alright
01:46 - instead of just looking for a generic
01:48 - detail pattern actually go in the music
01:52 - app and look for that specific detail
01:55 - one so another cool thing is now we can
01:58 - have this keyword in however many apps
02:00 - we want so that works out pretty awesome
02:03 - and the last thing I want to talk to you
02:04 - guys about in this tutorial is kind of
02:06 - unrelated from all of that but this is
02:09 - kind of important because later on in
02:11 - the future tutorials I'm going to use
02:12 - this logic
02:13 - you know I didn't kind of want to skip
02:15 - over it you see in your views right here
02:18 - and in your detailed view whenever we
02:22 - look at the details of album we're
02:24 - basically saying okay
02:25 - try to get that album with some specific
02:28 - ID and right now we have a album with ID
02:30 - of one and two
02:31 - now if we ever try to you know query
02:34 - album whose ID doesn't exist like 78
02:37 - then it's going to raise this exception
02:40 - so this is pretty much what people
02:43 - always do all the time they pretty much
02:45 - try to get something from the database
02:47 - and if it doesn't exist
02:49 - raisa 404 so since people were doing
02:52 - this over and over and over again what
02:53 - the developers of Django did is they
02:56 - give you guys a real nice shortcut to
02:58 - pretty much write all of this in one
03:00 - line of code so how do you do that
03:02 - well right after render go ahead and
03:06 - it's from jingle shortcuts right get
03:09 - object or 404 so we can actually
03:13 - actually let me cut this right here all
03:17 - right so you can actually delete your
03:19 - entire track except statement and here I
03:24 - won't even paste it in all right so
03:26 - instead of this what we can do is write
03:30 - album equals get object or 404 album
03:36 - primary key equals album ID so right
03:44 - here replaces that entire try except
03:48 - statement so it does exactly what you
03:49 - think it's going to try to get an object
03:51 - which object well something from the
03:53 - album class and this is where you
03:55 - specify what album it tries to get now
03:58 - if it can't get it is just going to go
04:00 - ahead and throw your 404 so this is a
04:02 - lot more condensed then your try except
04:05 - so I can go ahead and delete that and
04:07 - now check this out it says are you
04:10 - aren't even using this import anymore so
04:12 - we can actually delete that too
04:13 - so look how condensed this viewed up py
04:17 - file is I mean that is awesome and
04:19 - there's a lot of logic in here that we
04:21 - pretty much clean up real nice and neat
04:23 - so yeah there you go a couple cool
04:26 - tricks then guys for watching
04:27 - I'll see you guys later