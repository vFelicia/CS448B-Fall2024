00:00 - hello this is Alex from PHP academy' de
00:03 - org and this is another video tutorial
00:04 - in PHP for the New Boston in this video
00:08 - I'm going to be talking on the subject
00:10 - of operators but we're going to be using
00:13 - comparison operators and I'm going to be
00:15 - showing you how they work and what
00:18 - they're useful for now let's go back to
00:20 - our previous examples of having
00:22 - variables I'm going to say 10 and number
00:25 - 2 I'm going to make that equal to 9
00:29 - now comparison operators are basically
00:33 - when we compare one or more values we
00:35 - can compare any amount of values we want
00:38 - in this example we're going to be
00:39 - comparing sort of a maximum of three
00:41 - values just to demonstrate but without
00:43 - going going too far over time now for
00:46 - this example we're going to be using if
00:49 - statements so if you haven't already
00:51 - learned about if statements go to the
00:53 - video about if statement and have a look
00:55 - at that so you can get a general idea
00:56 - but as far as this is concerned I'm
00:59 - going to set up an if statement with my
01:02 - block just under here as well so I've
01:04 - got the block of data that's going to be
01:05 - executed here if this equals true now
01:08 - remember this inside here evaluates to
01:11 - either true or false
01:13 - therefore if I was to say if true
01:16 - I'm going to echo out inside so this is
01:21 - inside out our block I'm going to
01:23 - refresh and that's as inside however if
01:26 - I was to change this to false and I
01:30 - refresh it's not going to echo anything
01:32 - out because this has evaluated
01:34 - automatically to false I've used the
01:36 - false keyword now it's the same as if I
01:38 - was to do 1 equals 1 now you probably
01:40 - noticed I've just put two equal signs in
01:43 - there now remember when we assign values
01:45 - we use a single equal sign however when
01:48 - we use double value of double equal sign
01:51 - we compare so we're comparing the number
01:54 - one to the number one now the number one
01:57 - is equal to the number one this means is
01:59 - equal to so we're asking the question is
02:02 - one equal to one and this statement will
02:07 - evaluate to true so we are going to echo
02:10 - out
02:10 - text inside so let's refresh inside now
02:14 - we can say if does one equal two it
02:17 - doesn't so we're not going to echo this
02:19 - text down now the other the other
02:24 - assignment opera comparison operator
02:26 - sorry are not equal to so what we do is
02:31 - we use an exclamation mark and then we
02:33 - still use a single equal sign so we've
02:36 - got two characters here we've got an
02:38 - exclamation mark and a single equal to
02:40 - sign and this in plain English reads two
02:42 - does one or doesn't one equal to or does
02:48 - this not equal this now the answer is
02:51 - yes it doesn't one doesn't equal two so
02:54 - therefore we this is going to evaluate
02:55 - to true so one doesn't equal two
02:58 - therefore we're going to echo out the
03:00 - text inside now if we change this back
03:02 - to a 1 does 1 not equal 1 1 does equal 1
03:07 - so this is going to evaluate to false so
03:09 - let's refresh and we don't echo the text
03:11 - down so now what we can do is start
03:14 - working with things like greater than
03:16 - and greater than or equal to or less
03:18 - than or less than or equal to so for
03:22 - example just to let you know beforehand
03:24 - this can also be written like this so
03:26 - we've got sort of conflict in less than
03:28 - and greater than signs so 1 is equal to
03:32 - 1 so we're not displaying anything
03:34 - however if we change this back to 2 as
03:36 - I've shown in the previous example it's
03:38 - still working so that can be this or
03:40 - this it's entirely up to you I always
03:42 - prefer this I just think it's a lot
03:44 - easier to to read and process in your
03:47 - mind because we tend to think of this as
03:49 - sort of maybe a perhaps a negative thing
03:52 - like her we're exclaiming something so
03:54 - doesn't equal to you know it's just a
03:56 - lot easier to read so let's go on to
03:58 - incorporating our variables up here that
04:01 - I've assigned earlier into this if
04:03 - statement now I want to say does is or
04:07 - is number 1 greater than number 2 so in
04:12 - here I'm going to change this text so
04:14 - I'm going to say either yes or no
04:16 - so yes is going to be our text
04:19 - we're echoing out otherwise echo no so
04:27 - we're using an if-else statement now so
04:30 - if number one is greater than number two
04:34 - we say yes otherwise we say no so
04:38 - obviously in this case number one is
04:40 - equal to ten and number two is equal to
04:42 - nine so number one is bigger than number
04:44 - two so or greater than in real terms
04:49 - so we're echoing out the text yes now if
04:52 - I was to change this to smaller than so
04:55 - is that or less than is number one less
04:58 - than number two it's not so this
05:01 - statement here is going to evaluate to
05:02 - false and we say no it's not so we
05:06 - that's the text we echo out to the
05:08 - screen now what we can also do is we can
05:11 - say is number one greater than or equal
05:17 - to now if we just left this as greater
05:19 - than and we had 10 and 10 10 isn't
05:22 - greater than 10 its equal to 10 so this
05:25 - is still going to evaluate as false
05:28 - so we're reading is 10 greater than 10
05:32 - and the answer is of course no it stays
05:37 - does now however if we incorporate an
05:41 - equal sign in remember when we did the
05:43 - not equals we're incorporating the equal
05:45 - sign this now reads is number 10 greater
05:49 - than or equal to number 2 and in fact
05:54 - this statement is going to evaluate to
05:56 - true because 10 isn't greater than but
05:59 - it is equal to so we get the text yes
06:02 - echoed and we can do exactly the same
06:04 - with less than or equal to we're still
06:07 - going to be receiving the value yes
06:09 - because it is still equal to as well if
06:14 - we were to put this as 2 this is now
06:17 - smaller than it's not equal to but it is
06:20 - smaller than so when we do refresh we
06:23 - still get the value
06:24 - Oh down okay so now these are the
06:33 - comparison operators we're comparing two
06:37 - different numbers or two different
06:38 - variables as it stands this may as well
06:41 - read obviously two and ten because we're
06:45 - just replacing the variables inside here
06:49 - but however simple they may seem they
06:54 - are extremely useful you'll probably
06:56 - find yourself using the double equals a
06:59 - lot if you're creating code for example
07:01 - if a user was to submit a password
07:03 - through a form you may want to check if
07:06 - their password is equal to maybe a
07:08 - preset password or a password stored in
07:10 - the database and therefore what we'd do
07:13 - is we'd do something like if we were to
07:15 - have a preset password I'm going to set
07:17 - my password up here to password so
07:19 - obviously quite a basic password and I
07:21 - might say if password so it helps if you
07:24 - read it out English if password equals
07:27 - equals password then we echo correct
07:39 - otherwise so else echo incorrect so the
07:46 - way we read this is in English would be
07:48 - password the variable password equals
07:51 - password this is the password that needs
07:53 - to be matched now we say if the password
07:57 - so the password up here is equal to
07:59 - password correct otherwise incorrect so
08:03 - refresh at the moment it's correct
08:05 - however if we were to change this to
08:07 - something else it's incorrect so you can
08:11 - see how on a daily basis this could come
08:13 - into great use and and these comparison
08:16 - operators can help you operate your
08:17 - program really really well