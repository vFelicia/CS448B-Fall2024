00:00 - hey welcome back everyone this is Ian
00:02 - bringing you the fourth video in this AI
00:04 - series with the New Boston in today's
00:07 - video we are going to work with the GPT
00:10 - 3.5 turbo model using open ai's chat
00:13 - completion API and we're going to tell
00:15 - the model to act like it is a helpful
00:18 - code review assistant and we're going to
00:20 - pass it the contents of a code file in
00:23 - this case a python file and we're going
00:26 - to have it review that for us and give
00:28 - back some feedback some suggestions for
00:30 - improvement so if you're working from
00:33 - the repository with all the source code
00:35 - found in the description of this video
00:37 - then you'll want to go into the open a
00:39 - examples 04 code review folder and look
00:42 - at that main.py file you'll also find
00:45 - the code. pi file adjacent to it and
00:47 - it's going to have the function that
00:49 - we're actually going to pass through to
00:52 - the openai API and ask it to give us the
00:55 - code review on really simple function
00:57 - here it's called get quotient it takes
00:59 - two arguments A and B and then it does a
01:02 - division on those and Returns the result
01:04 - so let's go ahead and close that
01:07 - file and let's zoom in a little bit and
01:10 - work through this code so the First new
01:13 - code that we're going to recognize here
01:15 - is lines six and seven essentially it
01:18 - says with open and then a string
01:21 - argument of dot SL code. pi and then a
01:25 - second string argument of the letter R
01:28 - and then as file and then inside this
01:31 - code block code content variable is
01:33 - equal to file. read that's a method
01:36 - being executed so the width is just
01:39 - saying hey after this open as file is
01:42 - done running go ahead and make sure that
01:46 - this closes out and that way uh
01:48 - everything finishes properly with this
01:50 - operation and we don't have any issues
01:52 - there if you want to read more about it
01:54 - check it out in the reading and writing
01:56 - to file section of the Python
01:58 - documentation now the the open method
02:00 - here takes two arguments the first one
02:03 - well it takes more than two I should say
02:05 - but in this case we're using two
02:06 - arguments the first one is the code. piy
02:10 - file which is located in the current
02:12 - directory alongside this main.py and so
02:14 - we use for code. just to tell open where
02:18 - to find that file and then the second
02:20 - argument is the mode in this case the r
02:22 - stands for read so it's going to be in
02:25 - read mode and then after that it says as
02:28 - file that's going to give give us access
02:30 - to the file via this object called file
02:33 - this variable called file inside of this
02:36 - code block we're saying code content is
02:39 - equal to file. read so calling the read
02:42 - method on the file object is actually
02:44 - going to give us the contents of the
02:46 - file that was being read and so we're
02:48 - going to take that content of the file
02:50 - it's now a string we're going to assign
02:52 - it to the code uncore content variable
02:55 - now we can use that in the rest of our
02:57 - code whenever we're communicating with
02:59 - the API so let's take a look at that so
03:01 - here we are getting the response from
03:03 - calling open ai's chat completion API
03:06 - we're using that create method so that
03:08 - it knows to send a request to the
03:10 - endpoint that creates a new chat
03:12 - completion object and sends it back to
03:13 - us as the response we're telling it the
03:16 - model we want to use is GPT 3.5 turbo
03:19 - and then our messages list here is where
03:21 - things are going to change from some of
03:22 - the previous videos very similar here we
03:25 - have a system roll object as the first
03:28 - object and then we have a user R object
03:29 - object as the second object however with
03:32 - our system role inside of its content
03:34 - string we are setting it to you are a
03:37 - code review assistant provide detailed
03:40 - suggestions to improve the given python
03:42 - code so we're no longer a helpful
03:44 - grandma or a helpful assistant we are a
03:46 - specific code review assistant who's
03:48 - going to provide detailed suggestions to
03:50 - improve the code that we're going to
03:52 - provide and so in the next object with
03:55 - the user role the content will actually
03:57 - Point directly to that variable codee
03:59 - for Content that we created on the
04:01 - previous lines when we read that code.
04:03 - piy file so content is going to point to
04:06 - a string version of that get quotient
04:08 - function from the code. py file and then
04:11 - the system is going to act as a review
04:14 - assistant and the assistant response
04:17 - that comes back to us will be text
04:19 - telling us what we can do to improve
04:21 - upon the code from that file the
04:23 - temperature and the max tokens are going
04:25 - to be the same as they were in the
04:26 - previous videos and I should note that
04:28 - even though the temp is low that doesn't
04:30 - mean that the response will be the same
04:32 - every time this is a pretty open-ended
04:34 - question getting feedback or detailed
04:37 - suggestions to improve the given python
04:38 - code so it could vary from response to
04:41 - response you might want to get a couple
04:43 - responses just to see what those
04:46 - variations might be so then down here at
04:49 - the bottom we're just printing the
04:50 - response that's going to be the entire
04:51 - response object it's going to have
04:53 - things like the response ID it's going
04:55 - to have the Tim stamp for when it was
04:57 - created the type of object it is in this
04:59 - case chat completion and then it's going
05:01 - to have your choices list and inside of
05:03 - choices it's going to have that first
05:04 - message which is going to have the
05:06 - content from the assistant role that's
05:09 - what we want to look at so down here at
05:10 - the bottom we go ahead and print the
05:12 - response. choices bracket 0. message.
05:15 - content to get access to that string in
05:18 - our console output so let's go ahead and
05:21 - run this code and see what type of
05:23 - response we get back from the API so
05:26 - from inside of the 04 code review folder
05:29 - with our virtual environment activated
05:32 - we're going to run python
05:35 - main.py okay so we got our response I'm
05:38 - going to go ahead and zoom out here a
05:40 - little bit so we can see it more easily
05:43 - now at the bottom of course we have the
05:45 - actual text content from the assistant
05:48 - rolles message as we scroll up we're
05:50 - going to see the entire chat completion
05:53 - object and that's going to have all the
05:55 - typical things including the Finish
05:58 - reason stop that's good that means we
06:00 - gave it enough tokens in our Max tokens
06:02 - argument and then the usage telling us
06:05 - how many tokens it ended up using in
06:07 - this case 423 so quite a few but it
06:10 - still hasn't used our Max tokens which
06:12 - is good so here we have the actual text
06:15 - content of the assistant rolles message
06:18 - object so we're going to copy it and
06:21 - just to make it a little bit easier to
06:23 - read I'm going to open up a new
06:28 - file and then because this is outputed
06:31 - as markdown we're going to open it in a
06:35 - preview mode in VSS code here and you
06:37 - can see that we get a nice output as
06:40 - marked down so this is the response it's
06:43 - it's pretty big and it's got code
06:45 - examples inside of it that are formatted
06:48 - with syntax highlighting and everything
06:49 - which is a benefit of getting marked
06:51 - down as a response from the API so the
06:54 - given code is a simple function that
06:56 - Returns the quotient of two numbers by
06:57 - using the floor division operator double
06:59 - for slash here's a few suggestions to
07:02 - improve the code add type hints so then
07:05 - here it shows using int int for both of
07:08 - those parameters and then saying here
07:10 - with the little arrow int that the
07:12 - function is going to return an INT data
07:15 - type add error handling for division by
07:18 - zero so then it does some additional
07:20 - checking here and raises a specific
07:22 - error based on whether or not there's
07:24 - division by zero which of course is not
07:27 - allowed in Python consider using
07:30 - floating Point division the current
07:31 - implementation uses floor division which
07:33 - Returns the largest integer less than or
07:35 - equal to the quotient if you want to get
07:37 - a floating Point quotient instead you
07:39 - can use regular division by replacing
07:41 - the double forward slash with a single
07:42 - forward slash and so it builds on the
07:45 - previous suggestion but this time it
07:46 - changes it from the double forward slash
07:49 - to the single for Slash and then it ends
07:51 - by saying these suggestions will make
07:52 - the code more robust readable and
07:54 - flexible for different use
07:56 - cases that's awesome so we essentially
08:00 - passed in a separate file we read it
08:03 - using the open method with python we
08:06 - assigned the contents of that file to a
08:09 - variable we pass that in with our user
08:12 - roll content inside of that user R
08:14 - object right inside that message object
08:17 - in our messages list right after the
08:19 - system roll and the response that we got
08:21 - back was this really elaborate and
08:24 - thorough uh code review of our code.
08:27 - file so you can see here now that you
08:29 - have this in Your Arsenal you can do all
08:31 - kinds of really cool things where you
08:33 - can just take any type of text or
08:34 - document you can tell gbt 3.5 turbo what
08:39 - it's going to be as the system roll and
08:41 - then you can pipe in all of that textual
08:44 - content and have it give you some type
08:45 - of output it doesn't have to be code
08:47 - review it's really anything that you can
08:49 - imagine so I would definitely jump into
08:51 - this if I were you and take some time to
08:54 - experiment with it and see what kind of
08:55 - cool stuff you can come up with that's
08:57 - it for this video thanks much for
08:59 - spending your time with us here on the
09:00 - New Boston we can't wait to see you in
09:02 - the next video until next time peace