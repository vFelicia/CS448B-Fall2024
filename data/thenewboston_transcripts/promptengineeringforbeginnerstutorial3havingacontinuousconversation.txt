00:00 - hey welcome back everyone this is Ian
00:02 - bringing you the third video in this AI
00:04 - series with the New Boston in this video
00:07 - we're going to build upon what we
00:08 - created in the first two videos where we
00:10 - interacted with the gbt 3.5 turbo using
00:13 - open ai's chat completion API in the
00:16 - first video we just asked a question we
00:18 - hardcoded it and we got back an answer
00:21 - in the second video we actually got
00:22 - Dynamic input from our user whenever we
00:24 - ran our program and then we used that to
00:27 - ask a question of the model and we got
00:29 - back and answer again this time we are
00:31 - going to continue on that but we're
00:32 - going to have a back and forth
00:34 - continuous conversation with the model
00:36 - so let's go ahead and get into the code
00:38 - on the first couple lines of course we
00:40 - have our boiler plate importing whatever
00:42 - packages we need and setting our API key
00:44 - on the open AI library now we have an
00:47 - example of some potential inputs that we
00:49 - can provide here in this multi-line
00:51 - Comet so we me being Ian uh you could
00:55 - put your name here if you wanted to
00:57 - we're going to ask uh we're just going
00:58 - to greet the model saying hi Grandma and
01:01 - then give me a suggestion on what to eat
01:03 - for lunch and then we're going to follow
01:05 - that up with what is the recipe for that
01:07 - so in between each of these queries
01:09 - we're going to have some responses from
01:11 - the model and you can see whenever we
01:13 - run the program how we actually get to
01:14 - have a back and forth conversation where
01:17 - the model actually remembers the
01:18 - previous thing that we told it for
01:20 - context it has a history of the
01:21 - conversation and it's able to respond
01:24 - accordingly so let's see how we're doing
01:26 - that down here on line 13 we have our
01:28 - messages list nothing new here except
01:30 - for instead of hardcoding a user roll
01:34 - object right after our system roll
01:36 - object we're going to do that
01:38 - dynamically inside of a w Loop which
01:40 - comes next but let's take a look at the
01:42 - system roll object that we have inside
01:44 - of the list of course the system roll
01:46 - object always needs to happen first
01:48 - before everything else one time and then
01:50 - after that we're just going to have a
01:51 - back and forth between user Ro and
01:53 - assistant role user role being what we
01:55 - input and then ass assistant role being
01:58 - what the model sends back back to us as
02:00 - a response to our request to the API so
02:04 - the system role is the same as what we
02:06 - did in the previous video where the
02:07 - content is set to you are sweet old
02:09 - helpful Grandma so we're going to be
02:12 - communicating with Grandma in this
02:13 - program and we have an infinite Loop
02:15 - here so while true and then we're going
02:17 - to gather the user text input using the
02:21 - input method in Python where the
02:23 - argument that we pass in here is just a
02:25 - string of e in colon space and that's
02:28 - just prompting us the user whoever
02:29 - running the program hey this is the part
02:31 - where you enter in the input for in this
02:34 - case Ian once we get that assigned to
02:37 - the variable then we're going to take it
02:39 - and we're going to inject it into this
02:41 - dictionary here which is the user roll
02:44 - object we're going to pass that into
02:46 - messages. append so it'll take the user
02:49 - roll object with the dynamic content
02:51 - that we just got from that input on the
02:53 - previous line and it'll append it to the
02:55 - end of our messages list so like I said
02:58 - previously we had it hardcoded system
03:00 - roll message and then after that the
03:01 - user roll message we're doing that now
03:04 - except the user roll message is getting
03:05 - appended dynamically and that's
03:07 - important because it happens inside of
03:09 - the W Loop now as we continue to have
03:11 - this continuous conversation with our
03:14 - model we can add new Dynamic input from
03:17 - us the user and additionally later on
03:19 - we're also going to include the
03:21 - responses from the model so let's take a
03:24 - look at what's next here here is the
03:26 - code that should not be new to you it's
03:28 - the same thing that we used in the
03:29 - previous two videos where we're actually
03:31 - making the request to the openai chat
03:34 - completion API so we're creating a new
03:36 - chat completion object and we're passing
03:38 - in the arguments of the model set to GPT
03:41 - 3.5 turbo the messages set to the
03:44 - current state of our messages list the
03:46 - temperature we're keeping it low around
03:47 - 0.5 so not a lot of creativity uh going
03:51 - on there and then the max tokens we like
03:53 - to have it around 1,024 for this use
03:55 - case but feel free to play around with
03:57 - it for whatever you're building so we
03:59 - get that response from the API and then
04:01 - we can Traverse into that object you've
04:03 - seen the object in our logs from the
04:05 - previous videos but essentially it has
04:08 - information about the chat completion
04:09 - when it was created the various choices
04:12 - available to you in this case there's
04:13 - always one choice un lets you tell it to
04:15 - have more which we're not and we're
04:16 - going to go into that First Choice get
04:19 - access to that message object and then
04:21 - pull the content string out of it that
04:24 - content string is going to be the
04:26 - textual response from our assistant role
04:29 - so from the API we're going to assign
04:31 - that to the granny response variable and
04:35 - then we're going to print that we're
04:36 - printing it so that we can keep track of
04:38 - the conversation in the console and see
04:40 - what the responses are from the API
04:43 - however we also need to include that in
04:45 - a assistant role object that we append
04:48 - to the end of our messages list so I
04:51 - know I said this twice already but we
04:53 - start out with our system role and then
04:55 - we have our user role now we're
04:56 - including our first assistant role
04:59 - object and then we're going to go back
05:01 - and forth user Ro assistant role for the
05:03 - remainder of however long we keep this
05:05 - program running for and that's how we
05:07 - keep the history of the conversation and
05:09 - keep providing context back to the API
05:11 - for each of our API calls in the future
05:14 - so here we have messages that's our
05:16 - messages list. aend this is just going
05:18 - to put this dictionary onto the end of
05:22 - the messages list the role is set to
05:24 - assistant and then the content is
05:26 - whatever the dynamic value is of that
05:29 - cont content string that we're getting
05:31 - back from the API response up here so
05:35 - again we assign that to Granny response
05:37 - we pass it in here we append it to the
05:39 - end of messages as an assistant roll
05:41 - object and now the loop is going to run
05:44 - over again and it's going to wait for us
05:46 - to provide further user input here and
05:49 - keep continue to repeat that process so
05:52 - that's it for the code really
05:53 - straightforward really simple let's go
05:55 - ahead and run it and see what happens so
05:57 - we'll go ahead and open up our terminal
05:59 - here
06:00 - we'll run python main.py with our
06:02 - virtual environment activated we're
06:03 - inside of the open AI example 03
06:06 - continuous conversation folder and we're
06:09 - going to execute that main.py file using
06:11 - Python 3 so when we run that the first
06:14 - thing it does is it gets down to the
06:16 - user text input Ian which you see
06:17 - highlighted over here on the left and
06:19 - it's just prompting me for my input so
06:22 - I'm going to keep it simple
06:25 - hello Grandma now we wait for Grandma to
06:28 - respond
06:30 - short and sweet hello dear how can I
06:32 - help you today so that's perfectly in
06:34 - line with what we told the model how it
06:37 - was going to behave it's a helpful old
06:39 - grandma that checks out so now I can say
06:42 - can you please
06:45 - recommend something for
06:48 - lunch we got to say please because it's
06:51 - our grandma so we wait for a moment it
06:53 - comes back of course dear how about a
06:55 - comforting bowl of homemade chicken
06:57 - noodle soup it's nourishing and
06:58 - delicious or if you prefer something
07:01 - lighter a fresh salad with grilled
07:02 - chicken and mixed greens would be lovely
07:04 - what do you think so this is nice it's
07:06 - actually giving us options so let's go
07:09 - with the chicken noodle soup so I'll say
07:11 - I like the chicken noodle
07:15 - soup can you please provide a recipe for
07:21 - that so let's see if it can give us a
07:23 - recipe with the number of response
07:25 - tokens we've limited to in our Max
07:28 - tokens so the recipe might take a second
07:31 - to come back it's probably the the
07:33 - largest response thus
07:35 - far and sure enough there it is so if we
07:38 - take a look Grandma comes back with
07:41 - absolutely here's a simple recipe for
07:43 - homemade chicken noodle soup it gives us
07:45 - all the ingredients nice and organized
07:47 - in an unordered list then the
07:49 - instructions in an order list every
07:52 - single step that we need to do to create
07:54 - a delicious bowl of soup and at the very
07:56 - end a message there you go dear I hope
07:58 - you enjoy making and eating this
08:00 - comforting chicken noodle soup let me
08:02 - know if you need any more help so
08:04 - because we're inside of a infinite Loop
08:06 - when we finally decide that we want to
08:07 - exit out of here we just contrl C
08:10 - keyboard interrupt and that'll stop the
08:12 - program from running and that's it for
08:15 - having a continuous conversation with
08:19 - your GPT model inside of the chat
08:21 - completion API thanks a lot and we'll
08:24 - catch you all in the next video