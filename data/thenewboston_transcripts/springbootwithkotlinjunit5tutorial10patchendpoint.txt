00:00 - all right welcome back so in this video
00:02 - we'll create
00:03 - a patch endpoint using spring boot
00:06 - so here i'll actually have to correct
00:08 - myself from the past few videos
00:11 - where i mentioned that we'd be using a
00:13 - put request
00:14 - and you will see this quite a few times
00:16 - in some apis
00:18 - where put is basically used to update a
00:21 - resource
00:22 - however what i found is that more
00:24 - correctly
00:25 - you would use a patch request if you
00:27 - always want to update an existing
00:29 - resource
00:31 - and put is more correctly used if for
00:34 - instance
00:34 - you want to create the resource or the
00:38 - object
00:39 - if it doesn't already exist so kind of
00:41 - like the post request
00:44 - but really if you want to only update
00:46 - existing resources and only update
00:49 - certain fields of it
00:51 - so making partial updates a patch
00:54 - request
00:54 - is the better representation for this so
00:57 - that's what we're going to do here
00:58 - we're going to use a patch request and
01:01 - so what's going to happen here
01:02 - is if we let's say create a bank
01:05 - with this account number and then we
01:08 - make a patch request
01:10 - that updates the transaction fee and the
01:12 - trust
01:13 - we want the service to update the data
01:17 - so that if we now retrieve all the banks
01:20 - you can see here
01:22 - it has been updated with the data that
01:23 - we provided
01:25 - now also it depends a bit on how you
01:27 - want to design your rest api
01:29 - oftentimes you would use the identifier
01:33 - here as a path variable
01:35 - so in our case that could be something
01:38 - like this
01:39 - and then you only provide the data you
01:42 - want to update
01:43 - in your request body however here i've
01:45 - decided to actually
01:47 - move it all into the request body so
01:49 - that we have again
01:50 - the same kind of bank object in the
01:53 - request body
01:54 - and we read our identifier which is the
01:56 - account number from the request body
01:59 - so so much for the rest api design and
02:02 - why we're doing what we're doing
02:04 - so now with this out of the way let's go
02:06 - into our ide
02:07 - and start implementing this so as you
02:10 - can probably imagine
02:11 - i'm going to start again in our test
02:13 - case so here i am in the bank controller
02:16 - test
02:17 - and in here i'm going to create a new
02:19 - nested test class just like we did
02:21 - before
02:22 - and i'm going to use patch slash api
02:25 - banks as the display name and then the
02:28 - class name should be
02:29 - patch an existing bank all right and so
02:32 - in here i'm going to create my first
02:34 - test case
02:35 - and i'm going to scroll down here a
02:37 - little so this
02:38 - should update an existing bank first of
02:42 - all that's the happy path
02:44 - so let's say given the account number
02:47 - one two three four when we now make a
02:50 - request
02:51 - a put request in this case to our
02:54 - base url and inside this request we're
02:57 - using
02:58 - a body so i want to do this for now
03:02 - this actually looks the same as in the
03:03 - post request so i'm going to look over
03:05 - here
03:06 - and i'm going to take the content type
03:08 - application json and also the content
03:10 - from up here
03:12 - and in fact i will need of course also a
03:14 - bank object not just the account number
03:17 - so i can also do it similar to how we
03:20 - did it over there
03:21 - so updated bank
03:24 - should be well some bank with an account
03:27 - number that already exists
03:29 - and then i'm going to update it using
03:32 - this trust and transaction fee
03:34 - so now i'm going to update the variable
03:35 - name down here and i'm going to store
03:37 - this
03:38 - as perform put or in fact we're using
03:42 - patch now so perform patch
03:44 - and then we say perform patch maybe
03:48 - let's say perform patch request
03:51 - and do a print and i'm going to scroll
03:54 - down again here
03:56 - and then we expect first of all that the
03:59 - status code
04:01 - is okay so this should be again the
04:04 - status code 200
04:05 - indicating that the operation has been
04:07 - performed
04:08 - and this is all that we need for now so
04:10 - again we're going to go step by step
04:12 - and we want to get this test case to run
04:15 - first
04:16 - so now let's go ahead and run our test
04:18 - and then we should of course get our
04:20 - failing test
04:21 - again using the test driven development
04:24 - cycle
04:25 - with red green and refactor so we have
04:28 - our red test our failing test so now
04:30 - it's time to make it green
04:32 - let's also take a look why it's actually
04:35 - failing
04:36 - and of course you're expecting a status
04:38 - code of 200 so okay
04:40 - and here again we have the status code
04:42 - 405
04:43 - which means method not allowed and we've
04:45 - seen this before so this means there is
04:47 - no
04:48 - patch method that's allowed on this url
04:51 - so it was able to find
04:53 - the api slash bank's endpoint
04:57 - it does exist but there is no patch
04:59 - mapping for it
05:00 - so let's go ahead and create that now so
05:03 - over here
05:04 - we'll create a patch mapping i'm going
05:06 - to call this update bank
05:08 - and from the request body again we get a
05:10 - bank object
05:12 - and we're also going to return that one
05:13 - for now and
05:15 - again let's keep it simple so we're just
05:18 - going to return
05:19 - the object that we get and we remember
05:22 - that this is of course not the proper
05:24 - implementation and then let's go ahead
05:26 - and run this test case again which
05:27 - should now work
05:29 - and let's also refine it a little bit so
05:31 - down here we not only want to expect
05:33 - that the status is okay
05:35 - all right so it's actually still failing
05:37 - let's take a look
05:39 - so we're still getting method not
05:40 - allowed
05:42 - and that's because i'm actually using a
05:44 - put request here so it seems like i
05:46 - forgot this again
05:47 - but of course mock can we see allows us
05:49 - to do patch requests just the same way
05:52 - all right and now it should run through
05:54 - so down here
05:56 - we want to assert that not only the
05:58 - status code is okay
05:59 - but also we have as the content we first
06:03 - of all have the
06:04 - content type which is again application
06:06 - json of course
06:08 - and then also what we can do and what
06:09 - i'm going to use to also refine
06:12 - the other test case that we have is in
06:15 - this content block
06:17 - we can also assert the entire block of
06:20 - content or json data that we get so
06:23 - inside the content
06:24 - block i'm going to use json and in here
06:28 - i can now
06:28 - use the object mapper to
06:31 - compare this to our updated bank object
06:35 - of course it's serialized version
06:38 - because what this endpoint should return
06:40 - is in fact just the updated bank data
06:43 - that we gave it
06:44 - if it was able to update the bank as it
06:46 - should
06:47 - so this is actually a now nicer way to
06:50 - assert this kind of thing
06:51 - so up here for instance in our post
06:55 - test case we can do the same thing so
06:58 - instead of
07:00 - asserting each property of the object by
07:03 - itself
07:04 - we can also remove this and then instead
07:07 - in this
07:07 - content block here assert that we have
07:10 - json data
07:11 - and that it's the same as the data that
07:14 - we gave it
07:15 - so here i think it's called a new bank
07:17 - and this should work just the same way
07:20 - so that's also one of the reasons why we
07:22 - like to have fast running tests so we
07:24 - can run them
07:26 - many times and we still know that they
07:28 - pass and then let's see up here
07:31 - well here we freely just made a get
07:34 - request
07:35 - you could also create a bank object here
07:38 - so the expected bank that you
07:40 - expect to be returned and then compare
07:43 - against that but i think
07:44 - this is fine in this case
07:47 - and then i think we're done refactoring
07:50 - the existing test cases
07:52 - so this is really just a nicer way
07:53 - especially if you have larger objects
07:56 - to just compare all of their fields all
07:59 - right so yeah as you can see this still
08:01 - passes
08:02 - because well we're just returning the
08:05 - original
08:06 - object that we get so now one other
08:09 - thing we can actually do quite easily is
08:12 - we can
08:12 - get this object back again so we want to
08:16 - get
08:16 - our base url slash our
08:20 - updated bank dot account number
08:23 - and then we expect that this will of
08:24 - course give us from our get endpoint
08:26 - that we already have now
08:29 - the same object so the object mapper
08:32 - write value a string
08:33 - of the updated bank so this way we now
08:36 - make sure that we
08:37 - did indeed persist the changes that we
08:40 - gave the service
08:41 - and that it didn't just trick us and
08:43 - just gave us back our original object
08:46 - and this way we can now properly test
08:48 - that we're actually doing what we should
08:50 - do
08:51 - and now of course this should fail
08:53 - because in our current patch
08:55 - endpoint we're not really doing anything
08:57 - and the same thing we can
08:59 - also do up here we can again just
09:03 - make requests to our get endpoint
09:06 - and this way we can quite easily assert
09:09 - that this
09:09 - works as it should so we should also do
09:11 - this in our test case
09:13 - for the post endpoint so again i'm going
09:16 - to say that the content
09:18 - should have the same json
09:21 - content after we've called the
09:24 - post endpoint all right and with this we
09:28 - can run the tests again
09:29 - and then of course the patch endpoint
09:32 - will still fail
09:33 - so in our controller we should now see
09:35 - what we actually want to do
09:37 - now i challenge you to do this on your
09:39 - own because it's really the same process
09:42 - that we did before for
09:43 - the post standpoint except that now of
09:46 - course we want to have
09:48 - a bank in the request body that already
09:50 - exists
09:51 - so the account number must already
09:53 - exists in this patch mapping
09:55 - whereas on our post standpoint we check
09:58 - that the
09:59 - account number does not already exist so
10:02 - it's really
10:02 - of course a different use case but it's
10:05 - really very similar so
10:07 - feel free to pause the video here and do
10:09 - this for yourself and then we'll see how
10:11 - you can do it
10:12 - all right so we'll of course create this
10:14 - method in our service create the member
10:16 - function
10:17 - which will also return a bank object and
10:19 - this will simply delegate to
10:21 - the data source so here i'm going to say
10:24 - also
10:25 - update bank i think that's a fair name
10:28 - for this function and i'm going to say
10:31 - return
10:32 - and then refactor this and convert it to
10:34 - an expression body
10:37 - and of course we go one layer down so on
10:39 - this data source
10:41 - we'll create this member function and on
10:43 - the interface again i don't want any
10:45 - implementation here
10:47 - instead i'm going to go into the
10:50 - [Music]
10:51 - mock bank data source and then in here
10:54 - below the existing implementations
10:57 - i want to add our update bank and now
11:00 - this one will first search for the
11:02 - current
11:04 - bank object if there is one and so
11:07 - we look through the banks collection and
11:09 - then we find the first
11:11 - or null which fulfills that its account
11:14 - number
11:15 - is the given account number
11:18 - and if there is no such element with
11:20 - this given account number
11:22 - we say again no such element exception
11:25 - and it's really also the same message as
11:27 - up here
11:28 - and then if there is such a bank which
11:30 - already exists
11:31 - then we want to say from our banks
11:34 - collection we just
11:35 - remove the current bank
11:38 - and instead we add our new bank
11:42 - so add the new bank
11:45 - and then we want to also return this one
11:47 - just because
11:48 - we decided that the endpoint should
11:50 - return the bank that it received
11:52 - alright so that should do it if there is
11:54 - already a bank with the given account
11:56 - number
11:57 - it will remove that and add the new one
11:59 - which is basically a replace
12:01 - and if there is no bank that has the
12:04 - account number
12:05 - we'll get our no such element exception
12:08 - so with this we can run our tests again
12:10 - and now the current patch endpoint test
12:14 - should pass
12:17 - all right here we go we have a green
12:19 - test now we can refactor anything we'd
12:21 - like to refactor
12:23 - but there is really nothing i want to
12:24 - refactor it now i think
12:26 - except that here i'm going to say again
12:29 - it should
12:30 - suppress the not used warning if the
12:33 - method is annotated with the patch
12:35 - mapping
12:36 - all right so now it's time again to test
12:39 - also the non-happy path
12:41 - so i'm gonna go down to the patch
12:44 - existing bank
12:46 - and then we have another test case here
12:49 - and let me close this down for a second
12:52 - and then this one should also return a
12:55 - bad request if no bank with
12:59 - given account number exists
13:02 - so this is the same as for the get
13:05 - endpoint
13:06 - where if you have an account number
13:08 - let's say
13:11 - does not exist then that one should also
13:14 - return a bad request which usually
13:16 - indicates that
13:17 - there was something wrong with the data
13:19 - that you provided to the service
13:21 - and in fact i should again make this a
13:24 - bank object
13:25 - so some invalid bank where i'm using
13:27 - invalid account number
13:29 - and the rest doesn't really matter but
13:32 - it has to be the other way around
13:33 - so first the trust as a double and then
13:36 - the transaction fee
13:37 - and then again using our mock can we see
13:39 - when we make a patch request
13:42 - to our base url and as the content this
13:46 - time we provide
13:49 - this invalid bank first of all we have
13:52 - also
13:52 - the application content type
13:55 - so in here if we now provide the invalid
13:59 - bank with the invalid account number
14:02 - then we of course expect and again let
14:05 - me
14:05 - split this up so perform patch request
14:11 - and then we can say perform patch
14:12 - request
14:15 - and do a print and then we expect that
14:19 - we get
14:20 - a status code of a bad request
14:24 - and that's really it we can also say
14:26 - that we expect the
14:28 - content to be empty but for now this
14:31 - should suffice
14:33 - so let's see what happens and in fact
14:35 - since we have
14:36 - the exception handler in our controller
14:39 - this might already work but there seems
14:41 - to be something wrong with it
14:42 - so let's see all right so down here we
14:45 - have
14:45 - expected bad request so that's number
14:48 - 400
14:49 - um in the http status codes but actually
14:52 - we got not
14:53 - found okay so let's see if we can
14:57 - figure out what's going on up here
15:00 - so could not find bank with the account
15:02 - number that looks good
15:04 - if we look into the controller and into
15:07 - our exception handler up here we have
15:09 - one for no such element exception and
15:12 - indeed it goes to the not found and this
15:14 - makes actually sense so
15:15 - in the get 10 point when we want to get
15:17 - data about a bank
15:19 - or an account number that doesn't exist
15:21 - that should be a 4
15:22 - 4 not found and i think actually the
15:25 - same makes sense even for a patch
15:27 - endpoint
15:28 - so i think this mapping is actually fine
15:30 - and we should instead fix the test
15:32 - so instead of assuming we get a bad
15:36 - request i think not found is even better
15:38 - and then it will also say could not find
15:40 - a bank with this account number
15:42 - that was provided in the request body so
15:45 - here it's really i think a matter of
15:47 - fixing the test so sometimes you have to
15:49 - think about
15:50 - well first of all what you're testing
15:52 - but then also
15:54 - the question is always who tests the
15:56 - test
15:57 - and really it's of course your decision
15:59 - or if you have any requirements then you
16:01 - know
16:02 - what the response status should be here
16:05 - i think it's not found is even better
16:06 - than
16:07 - just a bad request alright so this is
16:09 - looking good let's go ahead and start up
16:12 - our application here so we're again
16:15 - up on port 9000 so let's switch to
16:18 - postman
16:19 - now over here if we get all the banks of
16:22 - course we start out with our three banks
16:24 - that are hard
16:25 - coded in our mock data source
16:28 - and then if i post a new bank over here
16:31 - we get
16:32 - of course the same bank as a response
16:34 - currently with a trust
16:36 - of 80 and a transaction fee of 10.
16:39 - so now let's see if we make a patch
16:40 - request with
16:42 - the request body being the newer bank
16:45 - having the same account number but new
16:47 - data we expect that we get first of all
16:51 - the same data back we get a status code
16:53 - of 200
16:54 - and if we now check what the current
16:57 - status of our banks is
16:59 - we see we have this new bank and it also
17:01 - has the updated trust of 85
17:04 - and the transaction fee has been reduced
17:06 - to 3.
17:07 - all right looking good so now all that's
17:09 - left regarding the rest 10 points that
17:11 - we have
17:12 - planned is the delete endpoint so that's
17:15 - what we're going to look at in the next
17:16 - video
17:17 - if you like this one and you learned
17:19 - something from it please leave a like
17:20 - below
17:21 - check out the links in the description
17:23 - and please let us know in the comments
17:24 - what other
17:25 - tutorials or topics you'd like to know
17:28 - about or learn more about
17:30 - and then i'll see you again in the next
17:31 - video