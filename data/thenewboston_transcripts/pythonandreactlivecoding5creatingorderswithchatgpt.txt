00:00 - all right everybody welcome back and in
00:03 - this video what we're going to be doing
00:04 - is hopefully finishing up the back end
00:06 - for our shop slash eCommerce solution
00:09 - here
00:10 - and we're gonna have to build the
00:12 - address model order and order products
00:15 - model
00:15 - and another thing that I want to mention
00:18 - is I did bump up the font size I saw all
00:21 - those comments and also I saw in the
00:23 - video that it was pretty small so let me
00:25 - know if this is big enough if not I can
00:27 - just bump it up again
00:28 - and lastly for anyone just joining
00:32 - I just want to say that this series is
00:34 - indeed less of a tutorial and more like
00:36 - a codalong session so if that's what
00:40 - you're into then cool uh feel free to
00:42 - join us if not then yeah unfortunately
00:45 - uh that's what this is so
00:48 - now on that note let's go ahead and kind
00:50 - of just figure out what we're gonna do
00:53 - so it already has chat gbt for some help
00:56 - with these models but we're first going
00:58 - to be creating an address model and then
01:01 - we'll go with the order and order
01:03 - products now
01:05 - actually let me pull this open as well
01:08 - uh this is the new Boston front end but
01:11 - what I want to do
01:13 - pop open tnbos
01:16 - I know you can't see that but
01:19 - just getting the software open since I
01:21 - want to talk you through some things
01:24 - all right
01:31 - if it opens up there we go
01:33 - okay so check it out
01:36 - so the logic that we're gonna go with
01:39 - let me pop open Redux
01:42 - is that
01:43 - whenever let me pop this open so
01:47 - whenever the buyer places an order then
01:50 - what this means
01:53 - is that they are going to need you
01:56 - basically need to have two things
01:58 - whenever you place an order you need to
01:59 - have an address to say where the order
02:02 - is going to be shipped to and you also
02:04 - need a list of products and just as a
02:08 - kind of requirement all these products
02:10 - need to belong to the same seller
02:12 - so
02:14 - whenever we actually make this request
02:17 - on the back end we actually don't need
02:19 - to pass in these products and the reason
02:22 - for this is because these products are
02:25 - already going to be in the cart so
02:28 - whenever an order is created instead of
02:31 - like the user explicitly passing in
02:33 - anything in that request the system can
02:35 - just look what's in the cart do some
02:37 - validation make sure that they all
02:38 - belong to the same seller and then if so
02:41 - it'll just create the order using
02:43 - basically converting these cart products
02:46 - to order products with this address and
02:49 - you end up with something that looks
02:51 - like this
02:52 - so the first thing we need to do is just
02:55 - go ahead and create this address logic
02:57 - or else there's not going to be anywhere
02:59 - for the user to receive their order so
03:02 - shop models
03:04 - I'll just create the new
03:07 - file for the models serializers
03:10 - in view now
03:15 - all right so for the address model where
03:19 - yeah chat Jupiter
03:23 - okay so for the address model this is
03:27 - what we came up with
03:34 - and all right let's just do a little bit
03:36 - review so
03:38 - all right
03:40 - the first thing by the way I haven't
03:42 - reviewed any of this code just kind of
03:44 - uh put in a prompt to check gbd to
03:47 - um generate the stuff but
03:50 - okay so for the first thing that I'm
03:52 - seeing is
03:55 - the address has a user which is what we
03:57 - want but I actually want to call it
04:00 - owner since that's kind of the naming
04:02 - convention that I'm following
04:05 - so the owners of the address instead of
04:08 - user
04:09 - related name addresses
04:11 - so they have Street
04:15 - City
04:18 - okay
04:20 - and let's do this so I notice a couple
04:24 - things
04:28 - first of all instead of street I'm gonna
04:30 - need two addresses there since
04:32 - uh basically address one
04:36 - an address line two
04:40 - yeah something like this
04:42 - and this is in case anyone has a PO box
04:45 - or they live in an apartment or anything
04:47 - like that
04:48 - so I'm just going to say address one and
04:51 - address two
04:55 - and 255 should be good for those
04:58 - and then yeah I'll say City
05:01 - State I like this more I don't know why
05:04 - I changed up
05:09 - all right so the address owner address
05:12 - one address two city state
05:16 - country and zip code and then
05:18 - even though I want to have the country
05:20 - standard
05:22 - I don't want to install any python
05:24 - package or anything for like the list of
05:26 - countries because what I'm going to do
05:28 - is just keep this a character field and
05:30 - then on the front end that's where I'm
05:33 - going to download
05:34 - um I'll find some like country list
05:36 - package or something like that and then
05:38 - the user is going to be able to select
05:40 - from those and then we'll just end up
05:43 - with a standardized country name on the
05:45 - back end here
05:46 - but I figured it would be well there's
05:49 - probably no package well there might be
05:52 - but just to uh have two separate lists
05:55 - one on the front end one on the back end
05:56 - and to make sure they're always in sync
05:58 - it's it's gonna be a little bit tricky
06:00 - so
06:01 - um
06:03 - let me just get an updated string
06:05 - representation for this
06:13 - me
06:17 - give me a string for this
06:20 - and
06:24 - address one address line two just
06:28 - reviewing as well
06:31 - state
06:35 - all right so this is pretty cool
06:42 - you know what I noticed as well is that
06:45 - so before whenever you have something
06:48 - like uh auto complete it was kind of
06:50 - like a tool to help you code of course I
06:53 - know that sounds obvious but um kind of
06:55 - the like extension of your abilities and
06:58 - then whenever I first started using chat
07:00 - GPT it was kind of the same just like uh
07:03 - a separate tool but basically
07:04 - autocomplete where I gave it something
07:07 - in it like tweaked my code or improved
07:09 - my code now I'm kind of treating it like
07:11 - uh many not a mini developer almost like
07:15 - a developer where I'm like you write
07:16 - code and then I'm going to review it
07:18 - make some suggestions so on and so forth
07:20 - so uh
07:23 - is this
07:28 - fine for international shipping
07:33 - so I know that this is good for the us
07:36 - but
07:38 - but it can be improved model makes a few
07:40 - assumptions about address structure yeah
07:42 - my knowledge of address structures in
07:45 - different parts of the world
07:52 - and actually what did I do for tnb OS
07:54 - because I knew I took some time to look
07:56 - at that
07:57 - and this is something okay
08:01 - actually this had a city
08:04 - state
08:05 - and zip code
08:09 - and then for addresses whenever you're
08:12 - adding yeah
08:14 - actually this might be fine then
08:23 - region okay so anything for example if
08:29 - there's no state if there's a region or
08:31 - Province then I believe we can just
08:32 - tweak that on the front end
08:35 - and that should be good okay
08:37 - so now moving on to the address
08:39 - serializer
08:42 - um
08:43 - yeah I believe we only need one
08:47 - so the dress serializer
08:52 - this
08:59 - all right so for address and for address
09:03 - and here you can address
09:10 - and then
09:11 - I just want to make sure
09:14 - that it's registered Django admin
09:20 - all right so in Django admin we're going
09:22 - to register our address
09:25 - clean up our Imports have our address
09:27 - model address serializer
09:33 - and then okay so I'm missing some
09:36 - validation here but we can fix that in a
09:39 - bit
09:43 - and address a few sets
09:45 - the user should only see their own
09:47 - addresses
10:03 - all right
10:05 - um
10:06 - let me give it the updated address
10:08 - actually I can just do this
10:16 - should I have chat GPT help or not
10:19 - when creating an address okay
10:26 - when creating an address
10:30 - the owner should be set
10:34 - the request user
10:41 - also
10:44 - update the permissions
10:47 - be set to
10:51 - to ensure only the
10:54 - owner can edit and delete there
11:00 - addresses I believe it should have my uh
11:03 - permission class from before
11:12 - all Fields read only Fields owner it's
11:15 - good
11:16 - that is what I wanted
11:20 - to copy that
11:24 - okay
11:29 - so for the address serializer the user
11:31 - is going to pass in all Fields aside
11:33 - from owner and then the is going to
11:36 - validate that using model validation
11:40 - and then for the owner it's going to be
11:42 - set to the request user
11:44 - right here
11:46 - that's looking good and then in the
11:48 - address view set what do we got going on
11:53 - the address few sets is
11:57 - we give it an updated
12:00 - core actually what did we create
12:02 - yesterday
12:04 - well we can do this
12:14 - just want to give it a good example
12:28 - use this class
12:40 - I know for a lot of this code too what I
12:44 - could probably do is just type it out uh
12:46 - faster that I'm telling chess GPT how to
12:48 - type it out however the reason that I'm
12:50 - not doing that is because chat sheepd
12:52 - always has like slightly different ideas
12:54 - so I like to see those ideas and kind of
12:57 - like uh pick it apart in a way
13:00 - now okay good career side perform crate
13:11 - yeah I don't think I need to do this
13:20 - and actually why not use crate instead
13:27 - yeah I want to follow the same design
13:29 - patterns
13:31 - use the create method instead like
13:42 - let's ask
13:52 - why not use the create method why
13:54 - perform create
14:11 - um
14:29 - okay the benefit for phone credit is to
14:31 - separates validation
14:34 - and saving steps when you call
14:35 - serializer to save to create model
14:38 - serializer is called which creates a
14:39 - model instance by overriding this or
14:43 - yeah I actually do want to use that
14:45 - serializer though is the thing so
14:52 - all right
14:55 - and that's because we have that uh
15:00 - logic in there
15:18 - all right so this should be good now let
15:20 - me just go ahead and lint
15:22 - and
15:24 - uh let's see
15:26 - make lint
15:33 - make it again
15:38 - and now
15:41 - migrations we're gonna migrate
15:47 - and then I just need to
15:51 - run the server register my URLs and it
15:54 - should be good
16:00 - okay so from
16:03 - views addresses we have an address view
16:06 - set
16:10 - and
16:12 - addresses is
16:15 - going to reference this view set
16:19 - and now just some quick sanity checks
16:23 - so oops the permission class is
16:27 - need to be updated so the permission
16:29 - classes
16:36 - are
16:39 - you need to be authenticated
16:41 - and you need to be the owner of the
16:44 - address
16:48 - in order to make any changes to it
17:09 - actually
17:15 - okay
17:18 - you know what
17:23 - you don't even need this
17:27 - sure is true because the owner is
17:31 - already going to be set to the request
17:32 - owner okay
17:34 - so
17:36 - when you call serializer Save
17:43 - so the serializer is going to be passed
17:45 - in the request data which has the user
17:47 - along with it since we are authenticated
17:49 - and then it's going to check if it's
17:51 - valid and then save it which is going to
17:53 - call this create method in in the create
17:55 - method
17:56 - it's already going to pass in the
17:58 - request user is the owner so we don't
18:00 - need to do it right here
18:02 - and
18:09 - for the get query sets
18:11 - it's complaining that I don't have a
18:15 - query set like this
18:19 - so it needs a default query sets which
18:22 - we can just set to none and then
18:24 - whenever you're retrieving them it's
18:26 - just gonna get the
18:28 - addresses that you are the owner for
18:30 - which we renamed to so the owner is the
18:34 - requesting user
18:35 - and
18:37 - make lint again
18:46 - and now I believe we can test it
18:55 - okay
18:57 - so let's open our favorite tool Postman
19:03 - all right
19:04 - so first thing I'm going to do is just
19:08 - log in as Bucky and let me pop open
19:10 - Django admin as well
19:13 - all right so addresses registered with
19:15 - Django admin
19:16 - now let me just go ahead and create a
19:20 - new address
19:21 - I did log in right
19:23 - all right so this is the token
19:28 - so this should be empty
19:32 - right here just getting Bucky's
19:33 - addresses but I just want to test it
19:35 - right now because after we create one
19:37 - we're gonna need it
19:39 - and then let's see
19:43 - all right
19:49 - so when creating addresses let me just
19:51 - get some errors here so we have address
19:54 - one and I'll say
19:59 - Maple Lane and then we have one two
20:02 - three four more fields
20:07 - all right City uh we'll say Pittsburgh
20:14 - pits
20:18 - Pittsburgh and the state
20:26 - Pennsylvania
20:28 - hopefully I spelled that right and then
20:30 - country
20:34 - USA and then the ZIP code
20:37 - will go with one two three four five
20:40 - send that okay
20:43 - so owner equals one and actually let me
20:46 - just try to pass in a different owner
20:50 - just to make sure that I can't okay so I
20:54 - can't pass in different owner even if I
20:56 - do it just reverts back to one which is
20:58 - Bucky
21:00 - and now let me go ahead and
21:06 - okay a couple things
21:08 - now I think we want to have credit date
21:10 - and modify date but your read-only
21:12 - Fields as well
21:14 - and then
21:16 - let me just patch this address
21:20 - so patching this I will say City equals
21:25 - um
21:26 - corn
21:28 - all right now I also let me just go
21:32 - ahead and reassign address number two to
21:34 - someone else
21:36 - to make sure
21:38 - all right so say address number two was
21:40 - Amy's address now when Bucky edited
21:45 - something to like the state equals New
21:47 - York
21:48 - we should get a detail not found that
21:50 - works as well
21:53 - because it is not his address so that
21:57 - works and if we delete it
22:01 - same thing however should be able to
22:03 - delete one
22:05 - beautiful
22:07 - wait yeah yeah so one was his address
22:09 - okay
22:10 - so that is looking good
22:14 - and what else was I gonna do uh so read
22:17 - only fields
22:25 - yeah so read only fields
22:32 - I'm also going to have crazy day and
22:33 - modify date in there since those are
22:36 - fields that are kind of managed by the
22:38 - system so no need to like explicitly
22:40 - pass them in
22:42 - whenever a new address is created
22:50 - all right looking good and then anything
22:53 - else for a dress
22:57 - quicksand Indie check
23:09 - all right looking good now that that's
23:12 - out of the way let's go ahead and
23:18 - okay buyer creates a dress they can also
23:21 - delete and update now buyer places in
23:25 - order what do you got for this chat
23:27 - Jupiter
23:30 - all right where are you at
23:36 - so order is going to consist of a buyer
23:41 - a seller and
23:44 - an address
23:47 - okay
23:48 - now technically we don't need a seller
23:53 - here because each order is going to have
23:55 - order products in these order products
23:58 - are all going to belong to the same
23:59 - seller and we can kind of derive the
24:02 - seller that way but that's a very
24:03 - convoluted way to kind of um figure
24:06 - everything out
24:08 - in a way we have like I don't know I
24:11 - don't even want to say like two sources
24:12 - of the truth but uh yeah that would just
24:15 - be like a headache trying to do that
24:16 - every time on the back end and front end
24:18 - so we ain't gonna do that instead we're
24:20 - going to keep things nice and simple
24:23 - so in the shop
24:27 - I'm going to create a new
24:31 - order model serializer and view
24:40 - all right now for this orders
24:44 - let me kinda
24:49 - get my imports steal it from here
25:00 - okay
25:11 - all right
25:12 - so order is also gonna inherit from
25:15 - creating modified and every order is
25:18 - going to have a buyer which is a foreign
25:19 - key to user
25:21 - and
25:25 - the related name can just be orders
25:32 - bot
25:35 - purchased
25:40 - I don't like how this is orders and then
25:43 - this is sold orders
25:46 - purchased
25:48 - so I'll say
25:52 - actually maybe bought
25:57 - yeah buyer bought seller sold
26:01 - and this is how you spell bought right
26:04 - yeah
26:08 - and then I almost guess okay that works
26:10 - for now we'll have to fix that later and
26:12 - then for the address
26:14 - it's just going to be a foreign key to
26:16 - that address
26:18 - in the related name I don't even think
26:21 - we need to relate this might be useful
26:24 - so if we ever want to see like give me
26:26 - all the orders that were shipped to this
26:28 - address we can just say orders right
26:29 - here okay
26:31 - so
26:33 - and this makes sense right if you're a
26:35 - user and you want to see every order
26:37 - that you sold or if you're a user and
26:39 - you want to see every order that you
26:40 - bought okay
26:42 - now order ID
26:43 - by using sellers are username good good
26:46 - good next just clean up our models
26:55 - from order in poor order
26:59 - last but not least just register and
27:01 - Django admin before you get to anything
27:03 - else
27:06 - okay
27:11 - beautiful now that is looking good
27:16 - now in our serializer for order what do
27:19 - you got what do you got
27:22 - okay let's do this
27:25 - so serializer order is going to look
27:27 - similar to the serializer for a dress
27:30 - but instead of importing address we're
27:32 - going to import order
27:35 - and then the logic for it
27:40 - okay so you have a order read serializer
27:43 - and order right serializer
27:52 - okay so this is interesting as well
27:55 - because
27:57 - yeah
28:00 - okay so the order serializer whenever we
28:06 - are going to be returning that to the
28:08 - user it's going to have those order
28:09 - products included and this is what we
28:11 - want as well because even though the
28:14 - order only consists of a buyer seller
28:16 - and address what we don't want to have
28:19 - to do is whenever we're looking at our
28:20 - orders to First fetch a list of these
28:24 - orders which only contains that like
28:27 - very basic order information and then
28:30 - what we would have to do on the front
28:32 - end is make a separate request to pull
28:33 - down those order products when that
28:36 - doesn't really make sense I mean maybe
28:37 - from like a crud standpoint but for this
28:40 - it would just be nice if you just always
28:42 - included these and in that case we're
28:44 - going to need to make two models at once
28:47 - but either way let me just kind of think
28:49 - through this so the order products we
28:51 - didn't make this yet but
28:53 - we're just going to include all
28:54 - information including the order products
28:56 - which is going to be a list and it's
28:57 - going to be read only
28:59 - and then for the right serializer
29:05 - we are just going to be
29:09 - giving it the address which is a foreign
29:12 - key
29:14 - and then for the order
29:18 - read only Fields it's going to be buyer
29:21 - seller
29:23 - and then also those created modified
29:25 - Fields so
29:28 - the read-only fields for this equals
29:31 - this and then buyer and seller
29:40 - so I don't think that we need to pass in
29:42 - ID right here
29:43 - and this can be a tuple
29:49 - let me just see something
29:52 - see my standards
29:58 - all right now
30:01 - whenever you are creating an order
30:07 - yeah you really never need to edit in
30:09 - order right maybe you would change the
30:12 - address on it but I don't
30:16 - that's another UI ux thing should you be
30:19 - able to change an address on an order
30:21 - now of course from the buyer's
30:23 - perspective that would be yes property
30:25 - however it might get tricky if you place
30:27 - an order and let's say that when you do
30:30 - the seller goes ahead and they ship this
30:32 - out well then what happens when the
30:34 - buyer changes their address well the
30:37 - seller is already gonna be like hey you
30:38 - changed it but then the UI is going to
30:40 - be weird like wait a minute I didn't
30:42 - ship to this address I thought I shipped
30:43 - to another one so for now I'm just going
30:45 - to say that
30:48 - [Music]
30:51 - all right I'll toss this question to the
30:53 - uh any of the viewers watching so anyone
30:56 - out there do you think the user excuse
30:59 - me the buyer should be able to change
31:00 - their address after they've placed the
31:03 - order
31:05 - good question
31:08 - okay either way
31:14 - all right whenever the user is creating
31:16 - an order they don't need to explicitly
31:20 - pass in the
31:21 - um
31:22 - products in the request because what
31:24 - we're going to do is we're just going to
31:25 - get all of their products based on
31:28 - basically all of their cart products
31:30 - where the buyer is the request user
31:33 - let me just make sure that's what we
31:35 - called it
31:38 - so the buyer of the car is basically the
31:40 - owner of it
31:42 - so this is all of their products in
31:44 - their cart
31:45 - and then for the product sellers for
31:47 - each of the items in their cart
31:50 - we are just going to pluck off the
31:52 - seller for that and all of the items in
31:56 - their cart should belong to the same
31:57 - seller
31:59 - and so here we're just checking that if
32:03 - for some reason
32:05 - um you have
32:06 - products in your cart that belong to
32:08 - multiple sellers we're just going to
32:10 - throw a validation error
32:12 - and then
32:15 - we are going to get the seller
32:20 - by popping off the first and only item
32:23 - in the set
32:25 - and then we are going to create an order
32:27 - object
32:30 - right here which is kind of the meat and
32:32 - potatoes of this
32:34 - with the buyer of the request user the
32:37 - seller
32:38 - is the seller derived from the cart
32:40 - products and the validated data is just
32:44 - the address
32:46 - and we also need to validate the address
32:49 - [Music]
32:51 - belongs
32:54 - to
32:58 - user
32:59 - okay
33:09 - all right so for car product and car
33:11 - products okay so a couple things here so
33:14 - here we need to validate
33:23 - that the address
33:28 - given
33:30 - belongs to the request
33:41 - all right so basically uh you can only
33:44 - ship items to your address not anyone
33:46 - else's address
33:48 - and then while that is doing that thing
33:51 - let me think so
33:53 - for each of the product in your cart
33:55 - we're going to go ahead and create an
33:56 - order product and then
33:59 - delete it from the cart so basically
34:02 - convert cart products to order products
34:06 - and this isn't going to have a quantity
34:08 - maybe in the future but not now and we
34:10 - still need to make this model
34:12 - I'm also wondering
34:20 - okay so a new validation here
34:34 - if you do need that
34:36 - apparently
34:40 - get validate so validate address
34:48 - I believe we can just do
35:03 - to validate field name method yeah so
35:12 - all right
35:13 - in yeah I don't even think we need this
35:16 - up here
35:18 - okay so order create serializer
35:23 - what we're going to do is call validate
35:25 - address and then this is going to
35:26 - validate the address that's passed in
35:30 - and I don't think we need that primary
35:33 - key
35:37 - field at the top but we'll go ahead and
35:39 - check that as well
35:41 - so address does not belong to the
35:42 - authenticated user which we want to make
35:44 - sure happens
35:45 - and then what else am I missing order
35:48 - product serializer okay
35:54 - all right so this is going to check that
35:58 - and then
36:00 - yeah for the validated data whenever
36:02 - they create the order this is
36:03 - going to be an address
36:13 - and yeah I don't think we need that
36:15 - because we already
36:19 - are using model serializer with the
36:21 - dress okay
36:22 - so now before I get to anything else
36:25 - let's just go ahead and make that order
36:26 - product model since it's needed in the
36:29 - order serializer so
36:31 - models
36:33 - actually let me go ahead and clear a lot
36:34 - of this out
36:37 - so I'll say models new python file order
36:42 - actually let me check my text messages
36:46 - and I'm moving and uh
36:50 - in a week and trying to coordinate
36:52 - everything because
36:54 - uh my new building doesn't allow people
36:57 - to move in on the weekends but that's
36:59 - the only time the elevator is free for
37:01 - the movers on this weekend yeah yeah
37:05 - okay
37:13 - all right order product order product
37:15 - order product where are you at
37:27 - or your product
37:29 - okay
37:31 - here
37:34 - order product quantity we're not going
37:37 - to have but either way all right so here
37:40 - is our order just gonna copy some
37:42 - boilerplate from here
37:44 - and now
37:48 - for the order product model let's see
37:50 - what chat GPT came up with
37:56 - all right so for the order product what
37:59 - we need
38:03 - foreign key to an order
38:07 - in a foreign key to a product
38:12 - there's a plane flying overhead
38:16 - order product ID
38:20 - just make that more readable
38:27 - okay so in this case what we can do
38:29 - since what I'm kind of thinking is that
38:32 - whenever well I'll show you
38:36 - so
38:38 - from the seller's point of view
38:40 - they are going to go ahead and create
38:42 - products now from the buyer's point of
38:45 - view they're going to see these products
38:47 - and add them to their cart and at that
38:49 - point in time they're going to become a
38:50 - cart product
38:52 - now whenever the buyer places the order
38:54 - those products are referenced through an
38:59 - order product now the thing about this
39:01 - is that even though that these products
39:03 - are now on in order and pretty much like
39:07 - off the market unable to be sold
39:10 - what they still are going to have is
39:12 - this active you basically still have an
39:15 - active product
39:18 - so I am wondering in this case we got a
39:21 - couple options
39:22 - we can introduce a new status
39:25 - in addition to active in draft that says
39:27 - like on order or sold or something like
39:30 - that
39:31 - another thing that we could do is we
39:35 - could say
39:37 - that
39:39 - um basically we can take
39:45 - pretty much like the item related
39:48 - information and extracted out to a base
39:50 - class and then the order product and
39:53 - product can just be similar and then
39:57 - what we could do is we can just yeah not
40:02 - going to want to do this but anyways
40:03 - another option is just to delete a
40:06 - product and create an order product from
40:08 - it whenever it's sold
40:10 - however I'm thinking that
40:14 - that's probably not the best either so
40:16 - what I'm leaning towards doing is just
40:19 - creating a a new status on here that
40:22 - says like sold or on order or something
40:26 - and then whenever you are a buyer
40:30 - looking at the catalog of all the
40:31 - products we're just filter out by all
40:33 - the active ones so active product we
40:36 - will Define as a product that is not in
40:39 - draft mode and not
40:41 - on
40:43 - hasn't been sold yet
40:47 - and in this case
40:50 - everything checks out still
40:52 - but it's always good to think through
40:54 - these things so
40:56 - an order product is basically just this
40:58 - an order in a product
41:05 - so on that note let's go ahead and
41:11 - all right so from order product
41:17 - work a product and then register in
41:19 - Django admin
41:32 - actually is my server running right now
41:36 - we can stop that because we need to make
41:38 - a ton of migrations before this is good
41:40 - to go again but either way
41:43 - good all right so we have ordered
41:45 - product
41:46 - and now
41:48 - just go ahead and
41:50 - make this serializing review for it so
41:53 - actually do we even need of yeah we do
41:58 - all right so order product serializer
41:59 - and order product View
42:03 - all right so and also for my order
42:07 - serializer we can actually
42:15 - okay
42:19 - so a couple things from the order
42:20 - serializer we were working on earlier so
42:23 - whenever an order is created we said
42:25 - that you're basically going to take all
42:27 - the cart products do some validation and
42:29 - then for each of the products that was
42:31 - in your cart you are going to convert it
42:34 - to an order product or create an order
42:37 - product
42:38 - by saying an order product create for
42:40 - this order
42:41 - which is created up here and the product
42:44 - is related to the cart product product
42:46 - and then after you created an order
42:48 - product you can just remove it from your
42:50 - cart I believe that we can optimize this
42:53 - as well
42:55 - by using bulk crate
42:58 - however this is fine for now we're not
43:00 - we're not worried about optimization in
43:02 - this step just to make sure that things
43:04 - are working
43:06 - so now the only other thing that this
43:09 - needs fixed is order product serializer
43:11 - and we are about to fix that right now
43:14 - and in that kind of just thinking
43:18 - through
43:19 - okay
43:22 - so in my oh this is perfect actually so
43:26 - in my order product serializer the
43:27 - product already comes back as serialized
43:29 - and that is what we want because in our
43:32 - orders
43:35 - um well I guess even in this view we
43:36 - want to be able to view the product
43:38 - related information so this is good this
43:40 - is really really
43:43 - great
43:46 - okay
43:51 - order product and then
43:54 - okay so order product serializer doesn't
43:57 - need a reading or write
44:03 - so
44:12 - and I'll say from
44:25 - all right so the order product
44:26 - serializer
44:28 - is Going to Be A Serial or an order
44:30 - product with a product serialized using
44:33 - product read serializer pretty much the
44:34 - product details right here
44:36 - and now in my order serializer
44:42 - my order product is order product
44:45 - serializer and each order whenever we
44:49 - return it to the user it's going to have
44:51 - many order products they may only have
44:53 - one but it's going to be returned as a
44:54 - list no matter what read only equals
44:56 - true or to read serializer and okay so
45:00 - now I just need to create this View
45:03 - and for this
45:11 - wait this
45:15 - yeah we don't even need a view for this
45:18 - right
45:20 - because
45:23 - yeah okay
45:26 - so we don't need any view or any
45:28 - endpoints for order products at all
45:32 - let me just think through this a little
45:33 - bit
45:35 - so views order product
45:41 - and also while I'm at it so I can just
45:43 - go ahead and
45:48 - I don't have any views for order either
45:50 - so that's next on to-do list but anyways
45:53 - the reason I'm saying that we don't need
45:54 - any views
45:56 - for order products is because to create
45:59 - order products what we do that gets done
46:02 - through the process of creating an order
46:06 - we never edit order products
46:09 - and then once we were anytime we
46:12 - retrieve order products those are just
46:14 - part of an order
46:17 - so that should be good
46:22 - Okay cool so now let me go ahead and
46:26 - create my order View
46:36 - order right serializer and then
46:42 - if you said okay okay
46:49 - all right let me take another look at my
46:52 - order model
46:55 - all right so for our order model we have
46:58 - the buyer
47:02 - the seller
47:04 - the dress
47:07 - and then for the order serializer
47:12 - re-serializer inner right serializer
47:17 - and
47:20 - we said that
47:24 - okay so orders can only be created
47:29 - and never delete it or updated
47:33 - and then we said maybe the address can
47:35 - be editable
47:37 - but
47:39 - that's a kind of logic in the future and
47:42 - then
47:43 - when an order is created the buyers the
47:45 - request user
47:47 - so yeah I think this is going to be
47:49 - pretty simple
47:52 - all right so first let's just enforce
47:55 - some stuff
48:00 - we don't want those we're just going to
48:02 - use that same pattern
48:04 - and then for the order view set
48:07 - is authenticated
48:09 - okay
48:13 - so I'm going to need to change this as
48:15 - well
48:18 - okay
48:25 - all right so from Models we're going to
48:27 - import order and from the series
48:32 - and for the serializers these are going
48:34 - to come from order and we have the order
48:36 - re-serializer
48:37 - holy sweet ravioli
48:40 - order serializer in order right
48:42 - serializer and just like
48:45 - what was it car product
48:47 - the only action we are going to allow is
48:51 - the creation of orders
49:05 - so the only thing that
49:07 - you the only thing that people are going
49:09 - to be able to do is create orders not
49:12 - delete them
49:15 - or edit them
49:18 - and then when creating we're going to
49:20 - use the right serializer when reading
49:22 - we're going to use the read serializer
49:24 - and for this query set this is incorrect
49:28 - as well
49:29 - so instead
49:31 - what we want to say is that
49:35 - for the query set
49:37 - users should be able to
49:40 - retrieve any orders that they are the
49:42 - buyer or seller for
49:48 - all right so I'll say update this query
49:51 - sets
49:58 - to
50:07 - and I've got to spell retrieve right
50:11 - i before e except over C I have it for a
50:13 - accept that for C okay uh update this
50:16 - queer set users should only be able to
50:18 - retrieve orders that they are the buyer
50:19 - or seller for and I just paste it in the
50:22 - view set
50:24 - and now let me just go ahead and paste
50:27 - in
50:28 - my order models as well
50:31 - just to give a little bit more context
50:39 - update the get query sets and gonna need
50:42 - this Q object
50:47 - and now this is going to require a ton
50:52 - of testing again I'm going to do manual
50:54 - QA and then uh lots and lots of unit
50:58 - tests
51:02 - okay
51:03 - and get query set perfect
51:11 - QRS
51:19 - okay
51:21 - so the orders that you have access to
51:26 - are the ones that you are the buyer or
51:30 - the seller
51:36 - and let me just clean this up a little
51:38 - bit by doing this
51:46 - okay okay okay
51:49 - so you have access to orders where
51:51 - you're the buyer or the seller
51:55 - everything else should be good
52:01 - now let's lint it make our migrations
52:08 - migrate
52:09 - [Music]
52:22 - all right
52:24 - so the next thing you actually need to
52:26 - do is just uh register this order few
52:28 - sets
52:31 - so
52:36 - from order
52:37 - we're gonna get order view sets
52:41 - and this is going to be under the
52:44 - endpoint orders
52:49 - let's make a lint
52:56 - regressions and let's run and test make
53:03 - server okay
53:05 - so for this example let's say
53:12 - and what are we really going to be
53:13 - testing the meat and potatoes of this
53:15 - are in the order right serializer
53:18 - okay
53:20 - so what do we got going on so far well
53:25 - actually
53:26 - here let's kind of do a clean sweep of
53:29 - everything
53:31 - I'm going to delete these addresses I'm
53:33 - going to delete
53:35 - all the cart products
53:37 - and we'll kind of walk through this bit
53:38 - by bit there's no order products there's
53:40 - no orders uh there are two products
53:46 - and I'm gonna say that Amy is selling
53:49 - these products because in this little
53:51 - example I'm just gonna pretend to be
53:53 - Bucky
53:55 - I guess I don't have to pretend I I am
53:57 - Bucky but okay so right now
54:02 - actually just make sure I got everything
54:04 - cleared out okay no addresses no car
54:07 - products no order products no orders and
54:10 - right now
54:12 - check it out
54:13 - I am shopping and Amy is selling
54:19 - bacon and a wooden spoon
54:22 - now even though she's selling both of
54:25 - those things only bacon is active right
54:28 - now
54:29 - so what I need to do if I want to buy
54:32 - this bacon since that's the goal right
54:34 - now for me to be able to buy this bacon
54:37 - so I first need to create an address
54:39 - well first I need to log into the app so
54:42 - I'm logged in right here
54:46 - and now I'm just gonna go ahead and get
54:48 - my addresses which hopefully I don't
54:50 - have any right now beautiful so I need
54:52 - to go ahead and create an address right
54:54 - off the bat
54:55 - so I'm gonna go ahead and
55:01 - I believe my body's good too so this is
55:04 - where I live
55:06 - I live at uh Maple Lane
55:11 - corn New York and I realize I forget to
55:14 - give my street number so I actually live
55:16 - at 123 Maple Lane corn New York
55:20 - so I'm gonna patch this address number
55:22 - four
55:24 - and all right looking good
55:27 - so now that I have my address let's go
55:29 - ahead and add
55:33 - that bacon to my cart so this bacon
55:37 - is product id1
55:39 - and I want to create a cart product from
55:42 - this
55:43 - so I'm going to go ahead and post
55:50 - car products
55:52 - and
55:54 - that is product number one
55:59 - send that
56:02 - and beautiful so I now have I'm buyer
56:05 - number one
56:06 - I now have bacon in my cart
56:12 - now
56:14 - just to check I'm going to try to add
56:16 - that other product that I should not be
56:18 - able to
56:19 - so this wooden spoon spoon is three
56:21 - however it's still in draft mode so I
56:23 - shouldn't be able to add that
56:26 - so three
56:28 - products must be added active to be
56:30 - added to the cart great and also let me
56:33 - try to add that bacon again even though
56:35 - it's already in my cart and okay this
56:37 - product is already in your cart
56:38 - beautiful
56:39 - so now in my cart I have bacon and now
56:43 - that's it that's all I needed to get I
56:45 - am ready to create an order
56:48 - Now to create an order
56:50 - what I need to do is I need to just pass
56:54 - in the address
56:56 - so first I'm going to say
57:00 - for post orders create orders
57:03 - let me just go ahead and get my
57:05 - addresses now
57:06 - so that address of mine
57:08 - was one with the id4
57:12 - so
57:14 - address with the id4 this should work
57:18 - however before you do I want to check
57:20 - one
57:21 - other thing
57:24 - and that is this validation
57:27 - where
57:29 - whenever we are creating an order and
57:31 - passing in the address we need to make
57:33 - sure that the
57:37 - yeah
57:39 - value okay so this value is going to be
57:42 - equal to the address that we passed in
57:44 - and we'll say if the address owner is
57:46 - not equal to the request user that
57:49 - address doesn't belong to you so let's
57:51 - just go in Django admin real quick and
57:53 - create another address that belongs to
57:55 - Amy all right so Amy has an address of
57:57 - 456 Amy Lane apples New York uh this
58:01 - this this so save and continue editing
58:05 - and then okay so this is address number
58:07 - five so I'm Bucky and I want to place an
58:10 - order and I want to use Amy's address so
58:12 - I'm going to send this in
58:14 - and it says address this field is
58:16 - required okay so it looks like I did
58:19 - need that primary key field
58:23 - oh wait a minute no that's because I
58:26 - spelled dresser on
58:27 - okay
58:28 - the address does not belong to the
58:31 - authenticated user perfect
58:34 - so that's Amy's address I shouldn't be
58:36 - able to use it my address is number four
58:38 - right here
58:39 - so now when I
58:42 - created this with number four
58:48 - okay so it looked like the order was
58:50 - created but our serializer got mixed up
58:52 - okay
58:54 - so we created this order
58:58 - which I was the buyer and Amy was a
59:00 - seller now I should have one order
59:01 - product bacon for order number one and I
59:04 - also should have no cart products this
59:06 - is beautiful so the only other thing
59:08 - that it looks like I need to do is in
59:11 - here
59:14 - when creating an order I need to return
59:18 - the data
59:21 - using the order read serializer
59:26 - and maybe you can just
59:31 - do this
59:37 - all right so when creating an order
59:45 - the order
59:58 - I said here response and Status so
59:59 - response and status
60:07 - okay
60:09 - so when I create an order what's going
60:12 - to happen is it is going to get the
60:15 - right serializer
60:17 - and then it's going to check if it's
60:19 - valid and then if it's valid it's going
60:21 - to call
60:23 - discrete method which is going to return
60:25 - in order
60:27 - and then for that order
60:29 - I want to send it back to the user using
60:33 - the read serializer right here
60:37 - so now I'm gonna go ahead and
60:43 - Clint
60:49 - and a run server
60:51 - okay
60:53 - now let me actually delete this order
60:57 - and
60:59 - follow that last bit of logic so
61:02 - all right I don't have any items in my
61:03 - cart anymore and let me just go ahead
61:05 - and delete this
61:09 - all right no order no order products and
61:11 - then this bacon is still for sale so the
61:14 - bacon was product one
61:17 - first let me go ahead and add it to my
61:19 - cart
61:24 - so I'm going to go ahead and add product
61:26 - number one to my cart
61:31 - just want to get cart products
61:37 - all right so that bacon is added to my
61:39 - cart
61:41 - and now I want to create an order with
61:44 - address number four and let me just go
61:45 - ahead and make sure they can add to my
61:47 - cart no word products in no Order
61:49 - Perfect
61:51 - now I want to go ahead and create an
61:53 - order with address number four and then
61:55 - once I do I'm going to be returned this
61:59 - serializer
62:03 - so the buyer which is which is me the
62:06 - seller
62:08 - the address
62:12 - okay
62:15 - so this is good I'm just thinking right
62:17 - now in terms of what's going to be
62:18 - needed on the front end
62:20 - so all the product information including
62:22 - you know the image so on and so forth
62:26 - um
62:27 - I think we also want to
62:31 - yeah
62:33 - so the buyer and seller we're probably
62:35 - also going to want to serialize
62:38 - using the user read serializer because
62:43 - from the buyer's point of view
62:45 - we're just going to want going to want
62:48 - to give information about the seller and
62:50 - for the seller's point of view just some
62:51 - user information about the buyer
62:54 - and then also
62:56 - the address needs serialized as well
63:04 - all right so to check that
63:08 - let's just go ahead and get orders
63:13 - and all right
63:17 - so when getting orders just serialize
63:20 - these three foreign keys and then I
63:22 - think she we should be good
63:26 - all right so for the order read
63:29 - serializer
63:33 - the buyer seller and address
63:36 - so first of all let's do the address so
63:41 - from
63:51 - so address is going to be serialized
63:53 - with the address serializer it's not
63:55 - gonna be many but it's going to be
63:57 - read only true
64:01 - and actually let me just do everything
64:03 - and then do it all at once so I'll say
64:18 - it's kind of unrelated but this is going
64:20 - to be read only true as well
64:26 - so from New Boston serializers and for
64:28 - user read serializer
64:32 - buyer for the order it has a buyer
64:37 - and the seller let me just elbow butt
64:40 - type these
64:44 - and
64:52 - went to clean up my imports
65:06 - all right so now whenever I get the
65:10 - orders okay so for each order I pull
65:13 - down the address is going to be
65:14 - serialized
65:17 - the buyer
65:19 - is going to have their info even though
65:21 - we don't have a profile photo yet
65:24 - actually let me make a ticket for that
65:25 - so I don't forget
65:39 - also user
65:42 - Avatar says profile photo
65:48 - all right so that's good I don't know
65:50 - what I'm gonna call it yet but just want
65:51 - to uh kind of make a note of that
65:54 - and check it out so
65:57 - the order is going to have the address
65:59 - serialize the buyer's information which
66:02 - is eventually gonna include an avatar as
66:04 - well the seller's information
66:07 - and
66:09 - yeah everything else is good to go
66:15 - okay
66:16 - and just to make sure that the addresses
66:18 - the cart products the order products
66:23 - the order
66:25 - and the product okay
66:28 - so one other thing that we need to do
66:32 - and let me just think through this
66:34 - logical one more
66:36 - because
66:38 - right now even though I ordered this
66:41 - bacon
66:43 - the bacon itself is just still has
66:46 - activation status of active
66:49 - which means
66:52 - that
66:54 - whenever users are browsing it
66:58 - right here that bacon is going to still
67:00 - be for sale
67:02 - now that is not what we want because our
67:05 - initial Marketplace is just going to be
67:07 - for items like this it's not going to be
67:08 - like for uh manufacturers and like
67:11 - suppliers and stuff who have like
67:14 - um who like anyone who actually sells
67:17 - bacon and you know they can have like
67:18 - multiple customers a day
67:20 - it's going to be just for like uh us
67:23 - selling things to each other like books
67:25 - and cool rocks and stuff like that and
67:28 - of course we don't have like quantity or
67:30 - anything like that
67:32 - so on that note
67:37 - think about this just a little bit more
67:38 - so first of all activation status is not
67:45 - um
67:47 - actually this is useful
67:50 - to keep active in draft
67:52 - because
67:55 - well I mean it's like working exactly as
67:57 - we want right now
68:00 - whenever you're selling something
68:02 - you can just decide to activate it or
68:05 - put it in draft mode that's I don't know
68:07 - it just seems super intuitive
68:09 - so
68:10 - yeah what I'm thinking now
68:13 - is instead of
68:18 - adding another status to this active
68:20 - status and then
68:23 - this is interesting so instead of adding
68:26 - another status to this active status and
68:28 - then renaming this to be like product
68:29 - status or something generic like that
68:31 - what I'm thinking of is one we can have
68:35 - an additional flag or status on here
68:38 - to pretty much say is this product sold
68:40 - or not
68:43 - and another thing that we can do
68:48 - to keep this even more simple
68:54 - is just to say that
68:57 - whenever you are and maybe this is the
69:00 - way to go
69:01 - we can say that whenever you are
69:03 - querying products
69:05 - for example whenever you're on this page
69:07 - and you just want to see all the
69:09 - products that are available for sale
69:12 - um
69:14 - what you can do is just fetch the
69:18 - products that don't have
69:20 - a related order product with it
69:28 - okay so right now we're saying that
69:30 - whenever you retrieve products then you
69:33 - can view all the active products you can
69:35 - also view any products that are in draft
69:37 - mode that you are the seller of
69:41 - but I'm thinking here
69:44 - we basically want to say
69:52 - hmm what is going to be the best way to
69:55 - do this
69:58 - you know what what I'm gonna do right
70:00 - now since we have our main logic working
70:02 - is I'll go ahead and upload this video
70:05 - and then when the videos like processing
70:07 - and uploading
70:09 - um
70:10 - I'm gonna go ahead and think through it
70:12 - and I'll I might have a chat GPT help me
70:15 - out as well
70:16 - but also if anyone else has any ideas
70:20 - how we can do this in the most elegant
70:22 - way since I know
70:24 - you know there are a couple different
70:26 - things we can do change the status on
70:27 - and so forth but if any had anyone else
70:30 - has a really elegant solution to how we
70:33 - can just make sure that once a product
70:36 - has been sold
70:38 - and of course it's still going to be
70:40 - active then
70:43 - it doesn't appear
70:45 - as an option
70:47 - for anyone else
70:51 - yeah maybe we need to add an extra field
70:53 - maybe we just need to uh filter out
70:56 - those products
70:57 - but um either way let me know and then
71:01 - yeah we'll kind of just uh brainstorm it
71:04 - all together and our best solution is
71:06 - the one that I'll update in the next
71:08 - video but for now let me just go ahead
71:11 - and
71:15 - make lint
71:17 - make tests
71:24 - push this up
71:27 - see I'll check my migrations one more
71:28 - time so
71:30 - migration's pretty sure
71:33 - okay no changes detected and I'll make
71:36 - migrate
71:37 - just to make sure everything is nice and
71:39 - clean and on this note I'll say uh
71:49 - I'll say uh address
71:56 - order and order product logic I don't
71:58 - want to say remaining shop logic because
72:00 - we still got some housekeeping items to
72:02 - do
72:02 - and another thing that I want to mention
72:04 - is that in addition to kind of figuring
72:08 - out
72:11 - this
72:12 - um like sold like don't show me
72:16 - okay let me take a step back in addition
72:18 - to figuring out the logic where we no
72:21 - longer show sold products to potential
72:24 - buyers if anyone else notices anything
72:27 - else in the code or anything we can
72:29 - improve or optimize or logic that I
72:32 - missed
72:33 - um then yeah let me know that as well
72:36 - and on that note I think we're good for
72:38 - this video so as always thank you guys
72:41 - for watching and I will see y'all next
72:43 - time