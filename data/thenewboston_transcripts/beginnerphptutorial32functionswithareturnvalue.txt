00:00 - hello this is Alex from PHP academy' de
00:02 - org and this is another video for the
00:04 - new Boston we are dealing with functions
00:06 - with return values in this video if you
00:09 - haven't already watched the other two
00:10 - videos on functions do so now what we're
00:13 - doing is we are asking the question what
00:16 - do we want to do if we want to say to a
00:18 - function inside a function we don't want
00:20 - to necessarily echo the contents of a
00:22 - function L and for this we use something
00:24 - called a return return value we return a
00:28 - specific value or the value that's
00:31 - calculated within a function this can be
00:33 - a string value this can be an integer it
00:35 - can be anything any any variable that we
00:38 - can return now the idea of the program
00:41 - I'm going to be the small program I'm
00:43 - going to create in this is we want to
00:45 - create a function that divides two
00:48 - numbers but we also want to create a
00:51 - function that adds two numbers and then
00:53 - what we want to do is want to create a
00:54 - sum similar to this so we want to add
00:57 - ten and ten together for example of five
01:00 - and five together and the result of this
01:03 - operation would be ten add 10 which is
01:07 - 20 divided by five at 5 which is 10 so
01:10 - the answer would be 2 20 divided by 10
01:13 - is 2 so this is what we want to do
01:16 - however if we're creating a function
01:18 - here called add and we are taking two
01:24 - numbers so number one number two and
01:29 - we're echoing out number one plus number
01:34 - two what we're doing is we're outputting
01:38 - this result to the browser we're not
01:40 - storing it as a variable we're just
01:43 - simply outputting it now we could say
01:46 - create something like result equals and
01:50 - then we could say echo result however
01:53 - we're not changing any we're not really
01:57 - changing how the code works all we're
01:59 - doing is making it longer for ourselves
02:01 - so what we really want to do is we want
02:04 - to be storing a result but then instead
02:06 - of echoing it we want to be returning
02:08 - the result now you don't always have to
02:10 - return or even echo or anything in a
02:13 - funk
02:13 - a function can purely work in itself and
02:17 - not display any output it doesn't need
02:19 - to display output however we're
02:22 - returning the result of this now look
02:26 - what happens when I go to add two
02:27 - numbers together we add 10 and 10 we're
02:30 - putting a parameter we're putting an
02:32 - argument in here which is 10 that's
02:34 - equal to number 1 and then 10 which is
02:36 - equal to number 2 here so the result is
02:40 - going to be basically 10 in this case
02:42 - add 10 and we're returning the result
02:46 - which will be 20 so I've called this now
02:49 - what's going to happen absolutely
02:52 - nothing and the reason for this is this
02:55 - now is equal to 20 but we're not doing
02:59 - anything with it we're calling the
03:01 - function we're supplying it with
03:02 - arguments but we're not doing anything
03:04 - with there so in fact what we can now do
03:06 - is echo out the function in itself and
03:09 - what this is going to do is it basically
03:12 - means we can either use this as a
03:14 - variable on its own or we can echo it
03:17 - out to display it to the user so this
03:19 - will now echo out 20 to the screen and
03:22 - what this means is that I could say add
03:25 - 10 10 plus a hundred and echo that out
03:32 - so what we're doing is we're including
03:35 - this function the cooled function inside
03:37 - another mathematical sum so now let's
03:40 - refresh and we should get the result 120
03:42 - which we do so you can see now though
03:45 - instead of occurring a value we're
03:46 - returning a value therefore we've got so
03:48 - much more freedom now to use this as a
03:51 - variable in itself so the example I
03:56 - showed was we had an operation here
03:59 - which was 10 at 10 should really be
04:02 - displayed at this 10 at 10 and 5 at 5:00
04:04 - and the result of this is going to be 2
04:06 - so how are we going to do this we need a
04:09 - function to add which we've already got
04:11 - we've got a function to add up here
04:13 - which we can use for this and we can use
04:16 - for this we don't need two different
04:18 - functions we can add 10 add 5 at 10 and
04:22 - 10 at 5 at 5 and it will produce the
04:24 - same result with the same phone
04:25 - but now we need a function to divide so
04:28 - we create a function to divide exactly
04:33 - the same way as we've done we supply a
04:35 - number in here so number one number two
04:40 - now these values here these variables
04:44 - here are superficial they're not
04:46 - actually declared variables they're just
04:48 - telling you what well they are but
04:50 - they're just telling you what we need to
04:51 - read it so you can name them the same
04:53 - name we've called number one and number
04:55 - two here and we've called it number one
04:57 - number two here so we can do exactly the
05:00 - same thing result result equals number
05:05 - one divided by number two and then we
05:11 - return the result okay so now let's run
05:16 - this program to make sure we don't have
05:17 - any errors which I don't think we will
05:19 - do no now we need to take the original
05:23 - sum that I wanted to achieve and we need
05:25 - to put it into practice with just these
05:26 - two functions and it's simple we need to
05:29 - create a variable called result or you
05:31 - can call it anything you like and we're
05:35 - in fact let's call it sum and that is
05:38 - equal to divide okay we need 10 open
05:46 - well we need a value here and a value
05:48 - here so what we can now do is add
05:52 - something inside this function so we're
05:55 - adding 10 and 10 and we're adding five
06:00 - and five but we're dividing 20 now by 10
06:07 - so we've declared or with called a
06:10 - function within a function instead of
06:12 - occurring at returning values so now
06:14 - down here we can simply echo sum so if
06:18 - you look carefully the logic of this
06:19 - you'll understand how this can be done
06:21 - so now let's refresh and we've got our
06:24 - result of to which we required from the
06:26 - star so this is basically how to return
06:29 - a value in a function and you can see
06:30 - how useful it is instead of just echoing
06:33 - something out or just performing an
06:34 - operation
06:35 - we're actually returning something for
06:37 - the user or for
06:39 - to use as the variable as a whole rather
06:43 - than just a function to echo out the
06:44 - result of what we've done inside the
06:46 - function