00:00 - what is going on guys my name is Bucky
00:02 - Roberts and in this little miniseries
00:04 - what I'm going to do is I'm going to
00:06 - show you guys all the cool new features
00:08 - and syntax that we got with
00:10 - es6 so I'm going to break it up into a
00:12 - couple different videos and in this
00:14 - first one I'm going to be talking about
00:16 - the let keyword so if you guys saw any
00:19 - of the source code online you probably
00:20 - noticed that whenever you make variables
00:22 - you no longer are using the keyword VAR
00:26 - in most cases instead you're using the
00:28 - keyword let so why did we switch over to
00:31 - use let instead of VAR well with VAR as
00:35 - I'm sure you guys know there was a lot
00:37 - of scoping issues and by that I mean
00:39 - whenever you made a variable or declared
00:41 - a variable using VAR it wasn't quite
00:44 - clear exactly where you were allowed to
00:46 - access this variable were you allowed to
00:48 - use it inside functions inside if
00:50 - statements what if you made it inside if
00:52 - statement could you use it outside the
00:54 - if statement I mean it was just
00:56 - confusing and no one really could follow
00:58 - along with the exact rules well with let
01:02 - the rules are very simple whenever you
01:05 - declare a variable using the keyword let
01:07 - that variable is accessible from the
01:10 - same block that it was declared so I'll
01:14 - show you guys a quick example right now
01:17 - so let's say that I had a function and I
01:20 - named it the
01:22 - notebook all right so any of the
01:25 - variables I put in here and let me just
01:28 - make a variable called
01:31 - The
01:32 - Notebook so we made a variable called
01:34 - movie now since we use let this variable
01:38 - is only accessible from this block the
01:42 - same block that it was declared and just
01:45 - real quick I'll explain this whenever I
01:47 - say declared declared means that you're
01:50 - just pretty much saying hey computer I'm
01:54 - about to make a variable and whenever
01:55 - you declare it it pretty much reserves a
01:58 - bit of memory in your computer for it
02:00 - now whenever you initialize a variable
02:03 - that means you're giving it an initial
02:05 - value so again declaring it is just
02:08 - something like this saying hey computer
02:10 - I'm making a variable and initializing
02:12 - it means you set it equal to some value
02:16 - so that's all the differences for anyone
02:18 - who I'm sure all of you guys knew that
02:20 - but for I don't know maybe the few who
02:22 - didn't there you go so whenever I say
02:25 - block scope first of all what the heck
02:27 - is a block for right now think of a
02:29 - block
02:30 - as these curly braces right here so this
02:34 - block starts here and ends here that
02:37 - means that we have access to this
02:38 - variable anywhere in this
02:41 - code so if I just want to go ahead and
02:43 - return movie then I can do that so now
02:47 - when I do something
02:50 - like console
02:52 - log The
02:54 - Notebook then this isn't going to be a
02:57 - problem so check it out we ran the
03:00 - notebook and since of course we declared
03:04 - this variable right here this function
03:06 - obviously had access to it now what
03:09 - happens when I try to do something like
03:11 - pretty much break the rule so I'm going
03:14 - to go ahead and try to log out movie
03:17 - just like this or remember the only part
03:21 - of your code that can access this
03:23 - variable is essentially any code right
03:26 - in here between this curly brace and
03:30 - this curly brace right here in this
03:31 - block now I'm trying to print out
03:34 - movie right here and I'm going to get it
03:37 - err that's because this variable isn't
03:41 - accessible from outside this block all
03:44 - right so check this out we can
03:47 - actually demonstrate this further by
03:50 - doing something cool I'll say Good Will
03:54 - Hunting
03:56 - so let me run this a bunch of times
04:00 - now whenever I run this what's going to
04:02 - happen is I'm essentially printing out
04:04 - movie three different times now this
04:07 - movie right here what it's going to do
04:09 - is it's going to say okay I'm going to
04:11 - look for a movie that I am allowed to
04:14 - access am I allowed to access this movie
04:16 - no since it was declared using let only
04:19 - this chunk of code can access it so what
04:22 - I'm going to do is I'm just going to use
04:23 - this one since it was declared in the
04:25 - same block and by the way whenever you
04:27 - declare a variable and it's not
04:30 - explicitly in between any curly braces
04:32 - like this like I just put it at the top
04:34 - then it's kind of the global scope so
04:36 - the block is kind of you can use it
04:38 - anywhere now of course we already know
04:40 - why
04:41 - this little bit of code right here
04:43 - prints out the notebook and that's
04:45 - because it uses this movie variable that
04:47 - was in this scope now here's another
04:49 - cool thing if I get rid of this line
04:52 - completely then whenever you try to
04:54 - return the movie and print this out it's
04:56 - actually going to print out Goodwill
04:58 - Hunting because what it does is it kind
05:00 - of works like um like a family tree it
05:03 - looks for the closest ones first so it's
05:05 - going to look for a movie variable in
05:07 - the same block and if it can't find one
05:10 - then it's going to go to the next
05:11 - hierarchy the next level so it says all
05:13 - right there's no movie in this scope so
05:15 - let me go ahead and go to this scope and
05:17 - if it couldn't find one there then it
05:19 - would have to go to the next one and the
05:20 - next one so there you
05:23 - go and let me get my code back all right
05:27 - now this is the last thing I kind of
05:29 - want to point now in this little uh part
05:31 - of the tutorial so even though we
05:35 - declared and initialized the variable
05:36 - right here called movie and then we ran
05:38 - this function which declared and
05:41 - initialized another value for movie
05:44 - whenever we tried to print out movie
05:45 - right here it didn't use the notebook it
05:47 - actually used this movie right here why
05:51 - because it still didn't have access to
05:53 - it even though we made the same or a
05:58 - variable with the same name we still
05:59 - weren't allowed to access it because it
06:01 - wasn't in our scope all right pretty
06:05 - cool so that's all scope is in Block
06:08 - Level scope pretty much means you can
06:09 - access this variable from the same block
06:12 - that you declared it in now just to
06:15 - iterate that block doesn't have to be a
06:16 - function um I'll
06:19 - run another sample right here so I'll
06:21 - say bickies
06:25 - function this is just going to be the
06:27 - dumbest function ever so let me make a
06:29 - couple variables here just so I have
06:31 - something to print out and I'll say let
06:34 - um is horse equal to true so we'll say
06:39 - that we're testing if something was a
06:41 - horse or not again the dumbest example
06:43 - ever but whatever and I'll say let's
06:46 - saying and this is just going to be a
06:48 - little chunk of text I want to print out
06:50 - so I'll say bacon is
06:52 - good so this program is absolutely
06:54 - worthless but I'll just demonstrate
06:56 - something real quick so whenever
07:00 - I print out something and I'll
07:04 - say I don't know before
07:07 - if then I'll print out
07:10 - saying all right so I'm going to have an
07:13 - if statement here and I essentially just
07:15 - want if statement so I can show you guys
07:16 - that there can be blocks inside of
07:18 - blocks so I'll just test if is horse is
07:22 - equal to true now of course it is equal
07:24 - to true so I'm I essentially just want
07:27 - to excuse to make another block right
07:29 - here that's all I'm doing and I'll say
07:31 - let's
07:34 - saying and declare this variable again
07:36 - I'll say um I am a
07:39 - horse so again the reason that I wanted
07:41 - to print this
07:45 - out is
07:47 - because again up here we saw that
07:51 - block like I said essentially means the
07:54 - curly braces that surround it but it
07:56 - doesn't have to be a function so so this
07:59 - if statement you see these curly braces
08:02 - you can think of this as a block now
08:04 - this block is actually inside this block
08:07 - so you can have blocks inside of blocks
08:09 - now I say just think of it like Curly
08:11 - braces whenever you have to you know
08:13 - kind of remember block but it doesn't
08:15 - explicitly need to have curly braces for
08:18 - example if you have a if statement that
08:20 - only has one line of code then you can
08:22 - actually emit or leave out those curly
08:24 - braces so that would still be a block
08:27 - but for right now just think of a block
08:28 - like Curly braces it's a little bit
08:30 - easier to understand that way and before
08:33 - I run this I'll give you guys a little
08:36 - challenge so what this function does is
08:40 - it prints out this saying three
08:41 - different times it prints it out right
08:43 - here and then it prints it out inside
08:46 - this if statement and then it prints it
08:47 - out after this if statement so what do
08:51 - you guys think is going to display on
08:54 - the screen whenever I run this well if I
08:56 - run this check it out the saying is
08:59 - bacon is good I am a horse bacon is good
09:04 - well we printed out the same saying
09:06 - variable three different times so why
09:08 - did it change
09:10 - remember this saying it needed to print
09:13 - out a variable name saying so the first
09:15 - place it looked was inside its own block
09:18 - and that's why it found this right here
09:21 - now whenever we printed out this saying
09:24 - it didn't have access to any of the
09:25 - variables inside this block since they
09:27 - were declared using the let keyword so
09:30 - whenever you say let it means let this
09:33 - variable be used anywhere inside this
09:35 - block now again we can leave this out
09:38 - and whenever we leave it out if it can't
09:40 - find it inside its own block then it's
09:42 - going to look to its parent block right
09:44 - here and in that case we would get bacon
09:48 - is good and that's it that's all the let
09:50 - keyword is now you guys know now it
09:53 - makes sense thank you guys for watching
09:54 - and I will see you guys next time