00:00 - hi there this is Alex from PHP
00:02 - academy.org and this is a video for the
00:04 - new Boston uh in this video I'm going to
00:07 - be talking about mathematical or um
00:09 - arithmetic operators inside PHP now what
00:13 - we mean by um arithmetic operators if
00:16 - you're a mathematician if you uh know
00:18 - anything about maths you'll understand
00:20 - that these are plus minus multiplication
00:23 - and divide um in PHP we also use modulus
00:27 - uh which you may have heard of we use an
00:29 - increment and a decrement now let me
00:31 - just talk you through each one of these
00:33 - addition uh mul addition subtraction
00:36 - multiplication and division are easy
00:38 - modulus is where you take two numbers uh
00:40 - for example um 3 and 10 and we give a
00:45 - remainder so we say 10 / 3 is going to
00:48 - be uh three and then that's a remainder
00:50 - one so a modulus of 10 and three or 3
00:53 - and 10 would um equal one uh an
00:56 - increment is simply increment a value by
00:58 - one uh and a decrement is simply
01:00 - decreasing a value by one um so these
01:04 - are more uh PHP based in terms of uh the
01:08 - symbols as well as uh the multiplication
01:11 - and the division um so let's just get
01:14 - rid of this and we'll go through it so
01:16 - the first thing we're going to do as an
01:17 - example is we're going to take two
01:19 - numbers and these are going to be inside
01:22 - um variables in fact in actual fact
01:25 - first what we could do is we could
01:27 - create a variable called sum and we
01:29 - could equal that to a number and then we
01:32 - need to add say or multiply or subtract
01:34 - another number from it so I'm going to
01:36 - say 10 and from this I'm going to add 20
01:40 - remember your line Terminator at the end
01:42 - so all I've simply done is is straight
01:44 - away just put a number in there with no
01:46 - uh no uh quotation marks around it I've
01:50 - used the plus symbol and I've added that
01:52 - to another number so now what we can do
01:54 - is we can either type Echo here which I
01:56 - wouldn't recommend or we could come down
01:58 - and Echo out the value of sum
02:00 - remembering your line Terminator
02:04 - so what we need to do now is um preview
02:07 - this in our browser to see if we
02:09 - retrieve the result we want which should
02:10 - be 30 so sum should now at this point of
02:14 - the program be equal to 30 and then what
02:17 - we can do is Echo the result by just
02:19 - echoing out the variable
02:21 - sum okay so let's just refresh and you
02:25 - can see we've got the value 30 here now
02:27 - this is exactly the same with uh the
02:30 - minus um
02:32 - operator so at this point the value of
02:35 - sum is going to equal minus 10 uh so
02:38 - let's just double check that works by
02:40 - refreshing in our browser you can see
02:42 - that it's equal to minus 10 so you've
02:44 - already seen an example of um variables
02:47 - but now we've automatically um this
02:49 - variable has become a minus figure so um
02:53 - everything's very easy to work with um
02:56 - we won't run into too many errors we can
02:57 - also obviously do multiplication so we
02:59 - can do 10 * 20 if we refresh in the
03:02 - browser we get the result of 200 which
03:04 - is what we expect uh and that's
03:05 - obviously using an asterisk we can also
03:08 - use um our forward slash for division so
03:11 - 10 / by 20 and we're going to receive
03:13 - receive the result
03:15 - 0.5 um so these are basic arithmatic
03:19 - operators um what would be uh a lot
03:22 - neater and easier in this case
03:24 - especially in larger programs would to
03:27 - would be to have two um variables so we
03:30 - can have number one uh and I'm going to
03:32 - make that say
03:34 - 100 and let's just get rid of this line
03:36 - here and this line here so we're
03:38 - starting with one variable number one
03:40 - and a
03:42 - number two that's going to be called
03:45 - well that's going to be equal to let's
03:47 - just say 50 and then I'm going to create
03:50 - another variable called number three and
03:53 - I'm going to equal that to two so now
03:55 - what I can do is I can start to create a
03:57 - long constructed um
04:01 - mathematical operation if you like with
04:03 - this now there's a few notes to point
04:05 - out because what we want to do is we
04:06 - want to as with standard maths um put
04:09 - some
04:10 - operations some of these mathematical
04:12 - operations in as a priority so for
04:15 - example if I was to create a new
04:17 - variable called result and I was going
04:19 - to say number one added to number two
04:24 - and I want to divide the whole of this
04:27 - by two so all I can do is say divide
04:31 - number three so what this is actually
04:34 - reading out as is 100 because uh our
04:37 - variable number one is equal to 100
04:39 - added to number two so our variable
04:42 - number two is equal to 50 and I'm going
04:44 - to divide this by variable number three
04:47 - which is equal to two now in actual fact
04:49 - the way this program or this result is
04:51 - going to work is it's going to perform
04:54 - this that I've selected in blue first
04:56 - then it's going to add number one so if
04:58 - we think about this uh reading it as a
05:01 - human um we might say number one add
05:05 - number two that's going to be
05:07 - 150
05:10 - um and that's going to be divided by
05:13 - number three which is the value of two
05:15 - so we should receive the result 75 now
05:19 - let's preview this in our
05:21 - browser oh we haven't echoed it out so
05:25 - Echo result that's probably the most
05:27 - important part so refresh we're actually
05:30 - retrieving the result 125 and the reason
05:33 - for this is we're performing the
05:34 - operation number two divided by number
05:37 - three um so that's uh 50 / 2 which is 25
05:44 - and then we're adding 100 so we're
05:46 - receiving the result 125 now as with
05:49 - normal uh mathematical operations the
05:51 - way we go around this is we prioritize
05:54 - different parts of our sum so we're
05:56 - going to enclose this in Brackets so
06:00 - everything in Brackets is going to be um
06:02 - is going to happen first and then we're
06:05 - going to divide by number three so you
06:07 - can see by just the addition of these
06:08 - brackets we refresh and we receive the
06:10 - result
06:12 - 75 now let's move on to um the modulus
06:16 - and we can see how this works so let's
06:19 - have a a number one and we'll have that
06:21 - as 10 and we'll have number two and
06:25 - that's going to equal three now we're
06:27 - going to have our result equal two
06:30 - number one now the way we use a modulus
06:34 - is with the um percentage sign so we're
06:37 - saying number one
06:39 - mod number two so that's 10 mod 3 and
06:43 - with a result we should rece receive uh
06:47 - number one so we're basically saying
06:51 - what is the remainder of 10 ided by
06:53 - three and the remainder is one so this
06:55 - is useful um in some aspects of
06:57 - development uh when you you need to um
07:00 - come up with a remainder of a number uh
07:02 - for very various different reasons but
07:04 - you'll you'll probably experience that a
07:05 - bit later on um now let's just take away
07:09 - all our variables except our number one
07:11 - what I want to do is here is I want to
07:13 - create on a new line say number one ++
07:17 - now if we were to Echo out number one
07:20 - now we've actually incremented number
07:23 - one by one we don't need to assign this
07:25 - to anything we can just say number one
07:26 - ++ and I'll explain the reason for that
07:29 - in a minute it you can see that we've
07:30 - got oh oh yeah Echo number one sorry so
07:35 - if we refresh we've got 11 now why do we
07:38 - need to create this command or this uh
07:40 - variable increment on its own the reason
07:43 - for that is this is a shorthand notation
07:46 - of number one
07:48 - equals number one + 1 so if we refresh
07:53 - we' got exactly the same result however
07:56 - number one ++ is just a quicker way of
07:58 - doing that that now the the times that
08:01 - you need to use this increment and of
08:03 - course we can do decrement as well which
08:05 - is two minus signs as opposed to two
08:07 - plus signs um that will give us the
08:10 - result of uh nine so we've decremented
08:12 - by one and then will decrease by one the
08:15 - reason we do this is because in Loops
08:18 - sometimes we need to keep track of how
08:19 - many times the loop has run um so we use
08:23 - say a figure we might use a variable
08:26 - called I or a variable called uh n or
08:29 - anything really but we want to increment
08:31 - to each time the loop happens and doing
08:34 - this is just a much quicker way of
08:36 - instead of writing number one equal
08:39 - number 1 + 1 obviously if you wanted to
08:41 - increment it by five you would do it
08:44 - this way so if we refresh that would
08:45 - then read 15 but um this these are
08:49 - basically the standard operators that
08:51 - you're probably going to use on a
08:52 - day-to-day basis if you're programming
08:54 - perhaps not the modulus uh but um
08:57 - particularly the uh the basic sums the
08:59 - addition the uh subtraction
09:01 - multiplication division and the
09:03 - increment and perhaps the
09:05 - decrement