00:00 - all righty guys welcome back and in this
00:02 - video I'm going to show you guys how to
00:04 - use inheritance in es6 very easy now I'm
00:08 - guessing that like 95% you guys already
00:10 - know what inheritance is but for those
00:12 - few who may not be familiar with it it's
00:15 - actually really easy to understand so
00:17 - I'll give you guys like the real quick
00:18 - 30 second overview so say that I was
00:21 - making a computer game and I wanted to
00:23 - make a bunch of enemies so I made a
00:25 - ninja enemy and this ninja can move left
00:29 - move right and he could attack so I made
00:32 - three methods in that class now later on
00:36 - I decided to make like a I don't know an
00:38 - astronaut and me or a wizard
00:41 - I guess the astronaut is not really a
00:42 - great enemy so this wizard and me he can
00:46 - move left and right and attack so I made
00:48 - the same methods in there and then later
00:50 - on let's say I made the astronaut and he
00:52 - also can move left and right into that
00:54 - so basically I had all these classes
00:56 - with duplicate code it was the exact
00:58 - same code they could all move left and
01:00 - right in attack now my number-one rule
01:03 - of software design is never repeat
01:06 - yourself if you find yourself repeating
01:08 - yourself then you're probably doing
01:09 - something wrong
01:10 - so I thought wouldn't be cool if we
01:12 - could take all these shared functions
01:14 - all of this shared functionality stick
01:17 - it in one base class and then we can
01:20 - just include it whenever we needed it
01:22 - well that's what inheritance is
01:24 - basically making one base class that has
01:27 - functions that you share and then you
01:29 - can just include those functions rather
01:31 - than typing them over and over and over
01:33 - again so let's say that in this example
01:36 - who's texting me right now right in the
01:39 - middle of my video anyways let's say
01:41 - that in this little demo right here I
01:44 - was making a game and this game had a
01:46 - bunch of different types of people maybe
01:48 - like Sims or I don't know a computer
01:51 - game whatever so I had programmers and
01:53 - it had construction workers and nurses
01:55 - basically a bunch of different
01:57 - professions now all of these people or
02:01 - all of these professions had some common
02:04 - attributes they all had a name they all
02:06 - had a age and they all had a weight no
02:08 - matter what profession you are you all
02:10 - have these same
02:13 - so instead of just typing this code in
02:16 - every single class what I'm going to do
02:18 - is I'm going to actually make this a
02:19 - base class or the parent class and I can
02:23 - make other classes that inherit from it
02:25 - so I'll say class programmer and again I
02:30 - don't want to have to type all of this
02:31 - code again so what I can do anytime I
02:34 - want to include all the stuff in here is
02:37 - I can just use the keyword extend now
02:41 - the class you right after this is saying
02:44 - re go ahead and grab all the code in
02:46 - person and bring it into this class
02:49 - that's all of those so now even though
02:53 - we don't have anything visually to see
02:56 - in programmer there actually is all of
02:58 - this code right here and just to kind of
03:01 - clear things up you see that this person
03:03 - has a name and age and a weight instead
03:06 - of just display way I'm actually going
03:08 - to make display name and display age so
03:10 - I'll say display name and I might as
03:16 - well type it I was going to copy it but
03:18 - let's copy this part so all I want to do
03:22 - is I want functions to pretty much
03:26 - output their name and age all right so
03:33 - even though we can't see it whenever we
03:35 - make a new object from the programmer
03:36 - class we can use display name display
03:39 - age and display weight since we pretty
03:41 - much took everything from person class
03:43 - and brought it in using this extends or
03:46 - inheritance pretty sweet huh now there
03:49 - are a couple little things that we need
03:51 - to watch out for
03:52 - so this parent class or the class to
03:56 - inherit from it's technically called the
03:59 - superclass so some people say that this
04:02 - is the parent and this is the child but
04:04 - you can also refer to the parent is the
04:06 - superclass so whenever we set up the
04:09 - constructor in the child class here I'll
04:13 - show you guys how to do this
04:16 - so it's basically similar to the one
04:19 - before but instead what we wanted to do
04:22 - is this inside the constructor what
04:28 - we're going to do is we're actually
04:29 - going to call the parents constructor so
04:33 - how do we do that we actually use the
04:35 - keyword super now the parents
04:37 - constructor since a programmer is a type
04:40 - of person essentially we need to create
04:44 - a person's though it takes a name and
04:46 - age and a weight so we can just pass
04:49 - those in right like this now
04:52 - additionally to just setting the name
04:54 - the age and weight of a person this
04:58 - programmer has an extra attribute and
05:00 - that's language so I'm just going to say
05:03 - that a programmer also has their
05:05 - favorite language which can be like
05:07 - JavaScript or Python or C++ or whatever
05:10 - so just like before what we can do is
05:18 - this so check that out
05:21 - so actually what I am going to do is
05:24 - kind of start showing you guys a little
05:26 - demo here so of course Sally is just a
05:30 - regular person she's not a programmer at
05:34 - all so we know that we can display her
05:36 - name her weight and her age so let me
05:44 - just go ahead and run this and verify
05:46 - that all right sally has a name in age
05:49 - and a weight looking good now if I make
05:54 - another variable called Bucky another
05:56 - object gets us more technically called
05:59 - and instead of just being a person he's
06:01 - actually a programmer then what do I
06:04 - need to pass in well I need to pass in a
06:08 - name and age in a weight and also his
06:12 - favorite language so his name is Bucky
06:14 - Roberts and what's the next parameter
06:19 - age 87 weight 987 pounds and his
06:25 - favorite language
06:26 - javascript now check this out
06:32 - display age and I'll just do display
06:35 - name and actually let me separate this
06:44 - with a little line so you guys can see
06:50 - what's going on so of course we know
06:52 - that Sally stuff prints out fine but
06:54 - Bucky's information also prints out fine
06:58 - now if you look inside this programmer
07:01 - class which Bucky is indeed a programmer
07:03 - we don't even have the methods display
07:07 - name and display age
07:09 - so how come Bucky was able to use those
07:12 - well that's because whenever we
07:14 - inherited from person class it pretty
07:15 - much got all of the methods inside here
07:18 - and this isn't technically how it works
07:21 - put but essentially behind the scenes it
07:24 - pretty much cut them and pasted them
07:26 - right in there or copy and pasted them I
07:28 - guess it's slightly more technical and
07:30 - another thing that you can do is you can
07:33 - actually give a programmer custom
07:36 - functions as well so I'll say display
07:39 - language now say console.log print out
07:47 - their favorite language so whenever I
07:54 - run Bucky display language of course it
07:58 - prints out JavaScript now again only
08:01 - programmers have access to display
08:04 - language not a person a person only has
08:07 - access to these three and a programmer
08:09 - has access to those three plus whatever
08:12 - it's in or excuse me whatever is in its
08:15 - own class so that is the basics of
08:19 - inheritance again before es6 it was
08:22 - super complicated but thank God for es6
08:24 - makes things really easy thing guys for
08:26 - watching and yeah I'll see you guys next
08:29 - video