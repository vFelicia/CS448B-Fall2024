00:00 - in this video we're going to create our
00:02 - service layer
00:03 - now the service layer is basically the
00:06 - main entry point into your business
00:08 - logic
00:09 - that really implements the use cases
00:11 - that your
00:12 - application supports so its
00:15 - responsibility will be to use the data
00:18 - source to retrieve all the data that it
00:20 - needs
00:21 - and for now it's going to be very
00:23 - trivial because that's not
00:25 - any business logic or any transformation
00:27 - that it will do
00:28 - on this data but we're gonna again do
00:31 - this with test drive development and
00:33 - we're gonna see
00:34 - a new springboot annotation and how it
00:37 - all works together
00:38 - and in this video we're also gonna look
00:40 - at mocking using mockay
00:43 - so let's go ahead and jump right in so
00:46 - in our ide
00:47 - i'm going to go ahead and add a new
00:48 - package again here
00:50 - so this one i'm just going to call
00:52 - service and in here
00:54 - i'm going to create a new kotlin class
00:56 - or file and this time i'm just going to
00:58 - call it bank
00:59 - service so this class represents our
01:02 - service for the bank use case
01:05 - and similar to the repository we're
01:07 - going to use the service annotation
01:10 - which again just like the repository
01:12 - annotation
01:13 - tells springboo to make this bean or
01:16 - this class
01:17 - or an object of it available at runtime
01:20 - so it's available in the application
01:22 - context and it can be injected by a
01:25 - dependency injection
01:26 - into your other objects and classes
01:30 - and again this also conveys meaning to
01:32 - other developers reading your code
01:34 - so they know this is a service level
01:36 - bean so this thing will be responsible
01:38 - for things like calling some
01:40 - data source maybe or maybe handling or
01:42 - mapping exceptions
01:44 - performing transformations on the data
01:46 - whatever the use case
01:48 - or the business logic is for that use
01:50 - case
01:51 - and by the way if you have a bean or a
01:53 - class that isn't really a service or
01:55 - repository or you're not too sure
01:57 - and you just want a generic bean that is
02:00 - available for
02:01 - component scanning and therefore for the
02:05 - application context you can just use the
02:08 - component
02:09 - annotation and really repository and
02:12 - service
02:13 - are pretty much just that so they are a
02:15 - meta annotation
02:17 - that applies the component annotation so
02:20 - if you're not too sure
02:21 - you're not really in the service layer
02:22 - or it's not really a repository
02:24 - you can always use the add component
02:26 - annotation
02:27 - for just a generic bean that's available
02:30 - in your spring application context all
02:33 - right so with this
02:34 - let's again go ahead and create our test
02:37 - class
02:38 - again make sure you have junit 5
02:40 - selected up here
02:41 - and then i'm just going to hit ok so
02:44 - with this one we now again have to make
02:46 - a decision whether we want a pure unit
02:48 - test
02:49 - meaning that we really just want to test
02:51 - what the service class does
02:54 - and we mock out the data source that it
02:56 - uses
02:57 - or do we want to have an integration
02:59 - test that really goes maybe
03:01 - through the service bean but also uses
03:04 - the actual data source
03:06 - to retrieve some data and we see if
03:07 - those two work together just fine
03:10 - now what i'm going to do here in this
03:12 - video is i'm going to use a pure unit
03:14 - test
03:14 - so i'm going to make this a mock data
03:17 - source in the test
03:19 - and i'm just going to see or check that
03:21 - the service
03:23 - actually calls its data source as it
03:25 - should
03:26 - and i'm doing this because in the next
03:28 - video when we create the controller
03:30 - i'm going to create an integration test
03:32 - there that really uses the service the
03:35 - data source
03:36 - and really tests that all of these
03:38 - components work together as they should
03:40 - so for this level here for the service
03:42 - level we can just use
03:44 - mocking so let's start off by thinking
03:46 - about what we want to test
03:48 - so i'm going to use the test life
03:50 - template again and i'm going to import
03:52 - the test dependency or the test
03:54 - annotation
03:55 - make sure it's really from junit jupiter
03:57 - api and not another test annotation
04:00 - and here i'm just going to say it should
04:03 - call
04:03 - its data source let's say to retrieve
04:07 - data
04:07 - or to retrieve banks and then i'm going
04:10 - to skip the given part for now and i'm
04:12 - going to say
04:14 - we want our bank service dot
04:17 - let's say get banks and again we get
04:20 - some errors here and this is again using
04:22 - test driven development
04:25 - so this one actually is just because i
04:28 - don't have
04:29 - the property in the test itself
04:32 - so i'm going to create this one and here
04:34 - again i'm just using
04:36 - um this as a pojo so again in this test
04:39 - i'm not using
04:41 - any dependency injection i'm just
04:43 - creating
04:44 - these these objects manually
04:48 - so for now i don't really need it yet
04:50 - but i'm gonna
04:51 - use a mock data source or just a data
04:54 - source
04:55 - of type bank
04:58 - bank data source and this will later run
05:01 - be a mock
05:02 - so for now i'm going to comment it out
05:04 - but in our bank service
05:06 - what we don't have yet is we actually
05:09 - want to have
05:10 - a property so again we're using a
05:13 - primary constructor here
05:15 - and so this one needs its data source so
05:18 - it needs some object of type bank data
05:20 - source
05:21 - and now going back to the test we now
05:24 - again have an error here so we need to
05:25 - provide some data source
05:27 - so now what i need here is a mock object
05:31 - for this data source and to create this
05:34 - mark i'm going to add a new library
05:36 - to our gradle dependencies that's really
05:39 - good
05:39 - for creating mocks in tests with kotlin
05:43 - and this is also going to be part of the
05:46 - test implementation
05:47 - configuration here which just really
05:49 - means in gradle that
05:50 - the classes that you import or this
05:53 - dependency
05:54 - will be available in your test classes
05:57 - or your test
05:58 - resources but not in your production
06:00 - code
06:01 - and the dependency i want here is from
06:04 - io.mockay
06:06 - and it's just called mockay and
06:08 - currently the version is
06:09 - 1.10.4 so once you have this just make
06:13 - sure you
06:14 - load the gradle changes you can also
06:17 - enable auto import so it does this
06:19 - automatically
06:20 - and then once that's done being
06:22 - downloaded
06:23 - you can verify in your external
06:26 - libraries down here
06:28 - that it's really been downloaded
06:29 - successfully okay so once gradle is done
06:32 - downloading everything
06:33 - make sure you have io.k down here and
06:36 - then you should be ready to go
06:39 - so back in our test class we can now
06:41 - simply go and say
06:43 - our object of type bank data source
06:47 - is supposed to be a mock with this
06:49 - function mock k
06:50 - now there are quite a few options here
06:52 - that you can see
06:53 - as the parameters we're going to use one
06:56 - of those later on but for now you can
06:58 - just use this object
06:59 - and put that into your bank service and
07:02 - then the
07:03 - bank service property is ready to go so
07:05 - the next thing that would fail this test
07:08 - is that we don't have a get banks method
07:10 - yet in the bank service
07:12 - so let's create this and this of course
07:14 - should also create a
07:16 - or return a collection of our bank
07:18 - entities
07:20 - and in here for now let's really just
07:22 - again do the minimum
07:23 - so we're going to return an empty list
07:26 - all right
07:27 - clean up the white space a little bit
07:30 - and then back in our test class
07:32 - we can now verify that when we call the
07:35 - bank
07:36 - service dot get banks it actually calls
07:39 - this data source
07:41 - so that's what we want to test in this
07:43 - test case
07:44 - we want to make sure or we want to
07:46 - verify
07:47 - that our data source dot retrieve banks
07:50 - has been called and this verify method
07:53 - here if you go into it
07:55 - this is coming from mock k and what it
07:57 - does is it really
07:59 - just verifies that the method call that
08:02 - you put in here
08:03 - was being done in the realm of your test
08:06 - case
08:06 - and we can also make sure that it is
08:09 - called exactly once
08:11 - which is what we expect here so the
08:13 - server shouldn't call it
08:14 - three times or whatever it should really
08:16 - just call the data source
08:18 - and it should call it exactly once so
08:21 - with that done
08:21 - let's go ahead and run this test case
08:24 - all right so here we go we have
08:26 - our failing test case and it's saying
08:28 - that
08:29 - the verification failed because bank
08:32 - datasource.retrievebanks
08:34 - was not called so let's go to
08:37 - our bank service and in here what we
08:40 - really want to do is we want to return
08:43 - the datasource.retrievebanks
08:46 - and that's really all it has to do for
08:47 - now so let's go ahead and run the tests
08:50 - again
08:51 - all right we still get an error in here
08:53 - it says no answer has been found
08:56 - for bank datasource.retrievebanks so
08:59 - what's going on now
09:00 - let's go back to our test class and in
09:02 - here we're calling bankservice.getbanks
09:06 - and what's happening is if we now look
09:07 - at our get banks
09:09 - it's calling datasource.retrievebanks
09:12 - so it's doing what we expect but the
09:14 - problem is that we don't even get to our
09:16 - verify block down here
09:18 - instead the code runs into this call to
09:21 - the data source
09:23 - and it doesn't know what to do with it
09:25 - because the data source
09:27 - if you recall is really just a mock
09:29 - object
09:30 - and if you have such a mock you have to
09:32 - specify its behavior
09:34 - for every method call that you expect on
09:37 - it
09:38 - so what we can do is we can say given
09:40 - that every datasource.retrievebanks
09:43 - returns ah let's say a list of
09:47 - banks or well for now we can also just
09:50 - return empty list it doesn't really
09:51 - matter
09:52 - we just want to test that the data
09:54 - source is being called
09:56 - and with this let's go ahead and run the
09:58 - test case again
10:00 - and then it passes just fine now what we
10:03 - can also do
10:04 - to simplify this a little bit because we
10:06 - don't really care about this return
10:08 - value
10:09 - and we don't really care about what the
10:11 - mock exactly does
10:13 - we really just want to verify that if we
10:16 - call the service
10:17 - that it really just calls its data
10:19 - source
10:20 - and therefore we don't really need this
10:23 - and we don't really need any given block
10:25 - and what we can do here is we can say
10:27 - that this mark
10:28 - should be relaxed now what this means is
10:31 - whenever a method is called on it
10:33 - it will just return some kind of default
10:36 - value
10:37 - so if it's encountering a method that's
10:39 - supposed to return a collection
10:41 - like retrieve banks most likely it's
10:44 - just going to return
10:45 - empty list by default if it's an int
10:47 - it's going to return
10:48 - maybe a zero maybe one you shouldn't
10:50 - really care about it because
10:52 - it's relaxed if you want to specify
10:55 - explicitly what it should return
10:57 - you should use the every and then return
11:01 - syntax okay so that makes it easier
11:04 - then also we can clean this one up
11:06 - because we don't really need the
11:07 - return value here and then we run our
11:10 - tests
11:12 - and we're still green everything's still
11:13 - looking fine
11:15 - so now we're in the reflector phase of
11:17 - our red green refactor cycle
11:20 - so we can see in our bank service
11:23 - there's something we can refactor which
11:26 - is to convert this to an expression body
11:28 - and then we have just a single line of
11:30 - code because it's a very trivial
11:33 - indirection just to the data source all
11:36 - right and that's it we have our service
11:37 - layer with our first method
11:39 - implemented of course there's going to
11:41 - be more for the
11:42 - post and put requests later on we also
11:45 - have our test ready
11:46 - we've used mock which is a really nice
11:48 - mocking framework
11:50 - if you're interested in more about junit
11:53 - 5
11:54 - test driven development unit testing or
11:57 - mocking with market please let us know
11:59 - in the comments below
12:00 - also note that again the bank service
12:04 - test here
12:05 - is completely independent of the spring
12:07 - boot or the spring boot application
12:09 - context
12:10 - we are again using pojos so we are
12:12 - initializing all the objects ourselves
12:15 - but we're going to do this differently
12:16 - in the next video where we're going to
12:18 - take a look at
12:19 - controllers and rest mappings if you
12:22 - like this video please make sure to
12:24 - leave a like below
12:25 - and i'll see you again in the next one