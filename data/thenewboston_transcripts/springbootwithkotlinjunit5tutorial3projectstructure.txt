00:00 - now before we implement the whole
00:02 - application
00:03 - it's always important to understand the
00:05 - project structure and what all the files
00:07 - are for
00:09 - now obviously you have the base project
00:11 - from start.spring.io
00:13 - so let's just go through what this
00:17 - tool generated for you so you know your
00:19 - way around the project
00:20 - and you kind of feel at home with this
00:22 - kind of project
00:23 - structure now let's go ahead and close
00:26 - down the source folder here
00:28 - and first of all let's look at this
00:32 - gradle directory over here so in here
00:35 - you find the gradle wrapper
00:37 - and this is basically a gradle
00:39 - distribution
00:40 - that will be downloaded for everyone who
00:44 - opens this project and so its purpose is
00:47 - that your users or anyone who's working
00:49 - on this project
00:50 - doesn't have to have gradle installed
00:53 - locally
00:54 - instead when they check out the project
00:56 - or they use this great wrapper
00:58 - it would automatically download the
01:00 - version that is specified in here
01:03 - now currently start.spring.io will use
01:06 - gradle 6.7.1
01:10 - there's also gradle 7 so when you're
01:12 - watching this you might already have a
01:14 - newer version of gradle in here
01:16 - so now in order to use this grader
01:18 - wrapper you can open up a terminal
01:21 - which you can also do right from inside
01:23 - intellij
01:24 - and then just run gradle w for the
01:27 - greater wrapper
01:28 - and then build to build the project
01:31 - so there are different gradle tags that
01:33 - you can run
01:34 - and build is one of them now if you get
01:37 - an error here
01:38 - saying your java home is not set or that
01:41 - java cannot be found in your path make
01:44 - sure your environment variables are set
01:47 - correctly so let me show you here
01:50 - under my environment variables you
01:54 - should have
01:54 - a java home which is pointing to a jdk
01:58 - so for me it's a jdk 11 and notice there
02:02 - is no
02:04 - suffix for the bin folder for the
02:06 - binaries
02:08 - now also in your path
02:11 - you need to add your jdk in here
02:14 - but make sure to also add the bin for
02:16 - the binaries at the end
02:19 - so both of them have to be set and then
02:22 - the greater command should run through
02:25 - and of course with your current project
02:28 - the greater build should also succeed
02:31 - all right so for now let's move on and
02:32 - look at a few other
02:34 - gradle files now the next one that we
02:37 - have
02:38 - is the settings.gradle and this
02:41 - first of all sets up a few repositories
02:45 - where gradle can find the spring
02:48 - plugins and then the root project
02:52 - was named the new boston so this is
02:54 - again based on the artifact id
02:56 - that you enter on start.spring.io now
02:59 - more importantly you also have a
03:01 - build.gradle file
03:04 - and in fact here because we chose kotlin
03:07 - the gradle files both the settings and
03:10 - the build
03:10 - are actually kts files so they are
03:13 - kotlin scripts
03:15 - in most projects you will find just a
03:17 - build.gradle file without kts
03:20 - and that makes it a groovy file so it's
03:22 - using a different programming language
03:24 - to set up the
03:26 - build scripts but if you're using kotlin
03:29 - you can also use the
03:30 - kotlin dsl for gradle
03:33 - i won't go into detail on that in this
03:35 - tutorial series but if you're interested
03:37 - in that
03:38 - let us know in the comments down below
03:40 - for now let's just take a look at what
03:42 - this build.gradle file is for
03:44 - and what it currently looks like now
03:47 - first of all there are a few plugins
03:48 - that are applied to this project
03:51 - most notably of course you have
03:54 - spring framework you also have
03:56 - dependency management coming from spring
03:59 - and then you have jvm and another spring
04:02 - plugin
04:03 - so these are cotton plugins allowing you
04:05 - to write
04:06 - kotlin for java projects so kotlin jvm
04:10 - and then also spring integration for
04:13 - kotlin
04:14 - next up there are a few details about
04:16 - this project's artifact like it's group
04:18 - id
04:19 - and version um the java compatibility is
04:22 - set to version 11 so that's again the
04:25 - radio button that we used on
04:27 - start.spring.io
04:29 - and then again there are some
04:30 - repositories set up telling gradle where
04:33 - to fetch dependencies from
04:36 - then we have the dependencies for this
04:38 - project
04:39 - the first one and the most important one
04:41 - is spring boot starter web
04:43 - so this is again because we selected the
04:46 - web
04:46 - dependency we have this specific spring
04:48 - boot starter
04:50 - and this really is the base uh
04:52 - dependency that gives you a spring boot
04:55 - service and then next we have the
04:58 - jackson dependency this is for
05:01 - serializing objects to json
05:03 - and deserializing json content or
05:06 - requests
05:08 - to objects we're going to talk about
05:09 - this in the next few videos
05:12 - then we have kotlin the standard library
05:14 - and also cotton reflect
05:16 - and then we also have a test dependency
05:19 - here two spring boot starter test
05:21 - this gives us junit five a 3rd j for
05:24 - assertions out of the box
05:26 - also includes mokito for mocking and so
05:29 - on
05:29 - we're going to take a look at this in
05:31 - more detail in the next videos
05:33 - when we actually write some tests using
05:35 - junit 5.
05:36 - now further down here we have a few
05:39 - options
05:39 - for kotlin so here it says any task
05:43 - that is related to compiling some cotton
05:46 - code
05:47 - should always use strict mode and it
05:49 - should compile to
05:51 - java byte code targeting version 11.
05:54 - so kotlin is a jvm language which means
05:56 - it is
05:57 - compiled down to java byte code and
06:00 - depending on the target version you
06:02 - choose
06:03 - it will only run on containers that
06:06 - support
06:07 - well in this case java 11 you could also
06:10 - target java 8
06:11 - so that well any platform or container
06:14 - that can run java 8
06:16 - can run your project and then there's a
06:18 - similar configuration down here
06:20 - so any test task should use the junit
06:24 - platform
06:26 - so all these basics that we need to get
06:28 - started with
06:29 - spring boot with kotlin and with jnet5
06:32 - are already given to us with this
06:34 - project base
06:36 - now apart from these cradle files
06:38 - there's also a little help
06:40 - markdown file over here with a few links
06:43 - uh you can check them out if you want to
06:45 - and then there's a git ignore file with
06:47 - quite a few defaults
06:49 - for things to ignore when using git
06:53 - so if you're not too familiar with git
06:55 - also let us know if you'd be interested
06:56 - in tutorials on that down below in the
06:58 - comments
07:00 - but for now let's take a look at the
07:02 - source folder
07:04 - there's a test and a main sub-module
07:07 - under test you have all the unit and
07:10 - integration tests
07:11 - and there's also one given for you
07:14 - as an example so i won't go into detail
07:17 - yet
07:18 - but it looks like it's doing nothing but
07:20 - it's actually already testing something
07:22 - which is that the spring application
07:24 - context
07:26 - can be loaded successfully and this is
07:28 - also why this
07:30 - uh this example function here or this
07:33 - test case
07:34 - is called context loads because the
07:37 - spring boot test annotation
07:39 - will actually trigger spring boots to
07:42 - build up the entire application
07:44 - context which means it's going to create
07:46 - all the
07:47 - objects that you have in your
07:49 - application
07:50 - and therefore if the test here runs
07:53 - through that means that the application
07:55 - context was loaded successfully
07:58 - if you're not quite sure about
07:59 - application contacts and what all of
08:02 - this means
08:03 - don't worry we're gonna talk about this
08:05 - in more detail in the next videos
08:08 - so next we have our main source
08:11 - directory
08:12 - and under here we have the new boston
08:14 - application so this is again the main
08:16 - entry point to this application
08:19 - and then the main function basically
08:22 - just runs
08:23 - our the new boston application
08:26 - so for now there's not much to do here
08:29 - the whole magic again comes from the
08:30 - springboot application annotation
08:32 - which basically tells springboot that
08:34 - this is your main application class
08:37 - and that it should build the context and
08:40 - configurations starting from
08:42 - this class as a starting point
08:45 - now another essential file in spring
08:47 - boot is here under resources
08:50 - and it's called application.properties
08:53 - and this is your main entry point for
08:55 - configuring the whole springboard
08:57 - application
08:58 - this includes things like the port on
09:00 - which the application runs the tomcat
09:02 - options
09:03 - logging levels some custom
09:05 - configurations that you're using in your
09:07 - application
09:08 - and many more so springboot is very
09:11 - versatile when it comes to configuration
09:13 - for now let's just try it out by setting
09:16 - server.port
09:17 - equal to let's say 9000
09:20 - and this should make it run on port 9000
09:23 - instead of port
09:24 - 8080 so let's start the application
09:27 - again by
09:27 - selecting it up here and then just
09:30 - starting it
09:32 - so now you should see well it starts
09:34 - running again but this time it says
09:36 - tomcat started on port
09:38 - 9000. one thing to keep in mind is that
09:41 - if you have something running
09:42 - on port 9000 already which shouldn't
09:45 - normally be the case
09:47 - then it will fail so make sure the port
09:50 - is free otherwise the application will
09:52 - not be able to start
09:54 - all right perfect so now you know what
09:56 - all these files are for
09:58 - how you can configure spring with
09:59 - applications you've seen a bit of gradle
10:02 - and how it works
10:03 - so i think that's really important to
10:05 - really understand everything that's
10:07 - there in your project
10:08 - in order to start working on it so i
10:11 - know you can't wait to
10:12 - actually write some more code so that's
10:14 - exactly what we're going to do in the
10:16 - next few videos
10:17 - please give this video a like if you
10:19 - liked it and i'll see you in the next
10:21 - one