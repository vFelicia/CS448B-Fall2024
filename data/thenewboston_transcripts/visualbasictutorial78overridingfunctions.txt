00:00 - hello YouTube sam here from youtube.com
00:03 - slash on live gamer for the new Boston
00:05 - and in this tutorial we're going to be
00:07 - covering overriding inherited functions
00:10 - in this case we're going to override the
00:12 - two string function that is that we used
00:15 - in the last tutorial now if you remember
00:17 - in the last tutorial we have the
00:18 - customer structure we created add
00:20 - customer which will create a customer
00:22 - object based on the first name last name
00:25 - and email that is passed to the sub it
00:28 - sets the values inside of our object
00:30 - customer structure or object new
00:32 - customer structure and then we added
00:34 - that structure our that customer to our
00:38 - my customers ArrayList and then we just
00:41 - went ahead and added that to this list
00:42 - box right here and you can see when they
00:45 - click the button it adds a couple
00:47 - customers so you can see that we got a
00:49 - little problem when we ran this we click
00:52 - list customer instead of giving us new
00:55 - customers name and email we get the
00:59 - project name the class name and the
01:01 - structure name so what we're going to
01:04 - have to do is we're going to have to
01:05 - override the two strings bumpkin because
01:08 - we use two string right here we want to
01:10 - string to do something other than just
01:11 - converting it to a string so let's go
01:14 - ahead and open our customer structure so
01:18 - inside of the structure if you remember
01:21 - that structures can use functions and
01:23 - subs methods and some other stuff
01:26 - they're just not as useful as classes so
01:29 - what we're going to do is we are going
01:30 - to override the to string method inside
01:33 - here so we will just type public so that
01:36 - anybody outside outside of this customer
01:39 - structure can use this function so
01:42 - public overrides so what this is saying
01:46 - is overrides let's see
01:51 - it says specifies that a property or
01:55 - procedure overrides an identically named
01:57 - property or procedure inherited from a
01:58 - base class so basically what this means
02:00 - is that we're going to use the same
02:03 - exact name as to string that is
02:05 - inherited and we're going to tell it to
02:07 - do something other than what it normally
02:09 - does and two strings is a function
02:11 - because it returns a value you can see
02:14 - here that it gives us the option to use
02:15 - to string it says returns the fully
02:17 - qualified type name of this instance so
02:20 - we can go ahead and press ENTER and
02:22 - it'll fill in everything for us
02:23 - overrides to string as a string because
02:26 - it's going to return a string and it's
02:28 - got in function so what we're going to
02:30 - do is we want to return whatever we want
02:34 - to be put inside of this list box right
02:36 - here so instead of giving us useless
02:38 - information we wanted to give us the
02:40 - user's name and their email so we'll
02:42 - just return name and X see here that we
02:47 - get public read-only property as string
02:49 - which is this property right here so we
02:53 - want to return name and we'll just add a
02:56 - space and a parenthesis and then we'll
02:58 - add their email and then we'll add more
03:02 - parentheses so this will just enclose
03:05 - their email inside of parentheses so now
03:09 - that we've over added the function to
03:10 - string now we can go ahead and minimize
03:12 - out of this structure right here to come
03:15 - down here to button one click or no add
03:17 - customers so what it's going to do is
03:19 - it's going to add object new customer to
03:23 - this list box but since object new
03:26 - customer is a of type customer our
03:29 - structure right here our structure has
03:31 - the function to string in it so when we
03:35 - call us to to string it's going to be
03:36 - calling this one right here instead of
03:39 - the default to string that is inherited
03:41 - so let's go ahead and run this you can
03:44 - see that when we type when we click list
03:46 - customer we get Sam hello and then sam
03:49 - da hello at programming comm John
03:52 - Roberts and Rachel Smith and you can see
03:54 - that it will add them the way we want to
03:57 - because we override into string and had
04:00 - it
04:00 - named in their email next to each other
04:02 - now if we called to string anywhere else
04:06 - in our program that wasn't of type
04:09 - customer so if we declared an integer
04:11 - and you've stopped to string on that
04:12 - it'll do it the normal way and it will
04:15 - convert that to a string this two string
04:17 - is only used for the four structure
04:21 - customers so when we create a customer
04:24 - object and we call to string it's going
04:26 - to use this one up here right here so go
04:31 - ahead and you can place overriding
04:35 - functions as somewhere else in your
04:37 - program so it can be used let's say
04:39 - throughout the entire class so if we put
04:42 - this up here
04:43 - it would override to string for the
04:46 - entire class but of course we would get
04:48 - an error because name and email are not
04:50 - defined outside of this structure but
04:52 - you can put an overriding to string
04:55 - outside of this structure right here and
04:57 - have it return something else so go
04:59 - ahead and practice a little bit with
05:01 - overriding functions it's a little bit
05:03 - hard to understand at first but you'll
05:06 - get it after a while
05:07 - with some practice so thanks for
05:09 - watching guys and stay tuned for the
05:10 - next tutorial