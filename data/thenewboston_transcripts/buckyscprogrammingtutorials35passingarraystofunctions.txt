00:00 - what's going on guys welcome to your
00:01 - 35th C++ tutorial and in this tutorial
00:04 - definitely don't want to miss this one
00:06 - because I'm going to teach you guys how
00:07 - to pass arrays into functions and there
00:10 - are a lot of weird tricks that you need
00:12 - to watch out for so make sure that you
00:14 - pay attention to every single detail so
00:18 - let's go ahead and make a really simple
00:20 - function I'm going to make it really
00:22 - easy the only thing it's going to do is
00:24 - print out an array you know one by one
00:26 - so far array was like 4321 eight it will
00:30 - print out 4321 eight really simple but
00:32 - you know it's a nice clear example so
00:35 - let's go ahead and make sure you're
00:37 - working outside your main function right
00:39 - here
00:39 - and call it anything you want I'm just
00:41 - call mine print array and it's going to
00:45 - take some parameters the first parameter
00:47 - that's going to take is the array itself
00:50 - that we're going to pass it in so let's
00:52 - go ahead and say we're passing it in an
00:53 - integer array go ahead and write int and
00:55 - then give your rate a name
00:57 - the array and whenever you pass an array
01:01 - into a function you need to write those
01:03 - square brackets right after it if you
01:06 - don't write those square brackets it's
01:08 - going to think that you're going to try
01:09 - pass in a variable and we want to tell
01:12 - our compiler no our first parameter
01:14 - whenever we use this function is going
01:16 - to be an array
01:17 - hence the square brackets so what people
01:21 - typically do whenever they pass an array
01:23 - into a function they usually want to
01:25 - pass in the size of the array too
01:27 - because you know that's information that
01:29 - you definitely need to know later on so
01:31 - just go ahead and name the size of array
01:34 - and this is of course going to be how
01:36 - many elements are in the array so now
01:39 - like I said this is the easy part let's
01:41 - just go ahead and build a function that
01:43 - prints out on you know each element in
01:46 - the array so for int x equals zero
01:51 - because remember we always want to start
01:52 - at a zero so that's never going to
01:54 - change the only thing that's going to
01:55 - change is this second thing we need to
01:57 - pass in X is less than size of array so
02:03 - check it out we can go ahead and write
02:06 - you know later on when we create our
02:07 - array instead of using size of array x
02:10 - is less than 10 or X is less than 20 but
02:13 - now whenever we use this function we can
02:15 - pass in any array and any size we want
02:18 - and it's going to work perfectly so
02:19 - instead of setting this equal to a
02:21 - number like 10 15 5 I like to set equal
02:24 - to a variable because then it's a lot
02:26 - easier later on and of course X plus
02:29 - plus incremented by 1 so now whenever we
02:31 - pass in an array it's going to loop
02:33 - through each of its elements 0 to the
02:37 - last element so now let's just go ahead
02:39 - and print out on the screen the array
02:42 - and of course for here we plug in X and
02:47 - endline so now once I fix this right
02:52 - here what we built is a function that
02:54 - bit basically takes two parameters an
02:56 - array and the size of the array we
02:59 - needed this information because whenever
03:01 - we created our loop we needed to know
03:03 - how long to make that loop last and of
03:06 - course for each line all we did is we
03:08 - print out whatever element whatever
03:11 - value that element is equal to so now
03:14 - let's go ahead and prototype this
03:16 - function right now because remember
03:17 - we're going to be using the function
03:19 - right here in the main but whenever it
03:21 - tries to use this function it's not
03:23 - going to know that it's a function that
03:25 - we built in less we prototype it so
03:27 - let's go ahead and copy this and if you
03:29 - remember from like I don't know the 10th
03:30 - tutorial something around then if we
03:32 - prototype it now we don't get an error
03:35 - message whenever we try to use this
03:36 - function because it knows that it's a
03:38 - function that we created so let's just
03:40 - go ahead and make two arrays to work
03:42 - with int Bucky and we'll set this equal
03:44 - to a 3 injury and go ahead and add any
03:47 - three integers you want um 20:54 and 675
03:52 - sounds good to me and actually let's go
03:55 - ahead and make another array just to
03:57 - make sure our program is working fine I
03:59 - like to name my arrays names and I'm
04:01 - going to name this one Jessica and she's
04:03 - going to hold 6 integers so set this
04:06 - equal to
04:08 - get that elbow way and 54 on why do I
04:12 - use 54 L time 24 7 8 & 9
04:16 - and how many is that 5 and another 199
04:20 - good go so now we have 2 arrays Bucky
04:23 - which has 3 integers and Jessica which
04:26 - has 6 integers so whenever we want to
04:29 - use this function that we just created
04:30 - just go ahead and type the name of your
04:31 - function print array and give it the two
04:34 - pieces of information needs but you know
04:36 - I have to begin this story I said that
04:38 - there are a couple of tricky things that
04:40 - you guys need to watch out for this is
04:42 - one of them you might think in the first
04:45 - parameter you might type Bucky or Bucky
04:48 - square brackets or Bucky square brackets
04:50 - 3 but actually the only thing you type
04:53 - is the name of that array so of course
04:57 - you well how can I explain this you
05:01 - already created an array called Bucky so
05:04 - now whenever you pass it in it knows
05:06 - it's on the right you don't have to tell
05:07 - it that you're passing in an array
05:09 - because obviously if it created it
05:11 - already it's going to know so that's why
05:13 - whenever you pass it into a function you
05:16 - don't use those square brackets at all
05:18 - and of course the second piece of
05:20 - information it needs is how big is this
05:22 - array so let's go ahead and make sure 3
05:25 - and passing 3 4 here so now let's go
05:28 - ahead and build and run this program and
05:30 - check it out
05:33 - 20 20 54 54 675 675 and now let's go
05:41 - ahead and use this for Jessica just cut
05:44 - array again with no square brackets and
05:47 - six so let's go ahead and build and run
05:50 - this and it looks good to go 54 24 seven
05:54 - eight nine ninety nine pretty good so
05:57 - one last time here's what we did in the
06:00 - very first line of code we built the
06:02 - function prototype because if we didn't
06:04 - have that prototype let me just go ahead
06:05 - and comment this out and we try to run
06:08 - it we're going to get an error message
06:09 - so this error message pretty much means
06:12 - this our writes I did this I did this
06:15 - and now you want me to do this what the
06:18 - heck is print array so when we do
06:20 - include that prototype and try to run it
06:22 - it knows that Oh
06:24 - print array is actually a function that
06:26 - you guys built alright so now I'm going
06:28 - to run this and I know to look for a
06:30 - function so anyways that's what
06:31 - prototyping did in the main we just made
06:34 - two arrays and in this line we just
06:38 - called that function and passed in the
06:40 - array name and the size of the array so
06:43 - then whenever we called Jessica six it
06:47 - went down here to print array for this
06:50 - parameter it was Jessica and for this
06:52 - parameter it was six and then it looped
06:54 - through it pretty much looped through a
06:57 - loop six times and said all right for
07:01 - the array which was Jessica print out
07:04 - each index of that array zero to five
07:07 - and that would give you your six
07:08 - elements so this is basically how you
07:11 - use an array in a function and the only
07:14 - couple things you need to watch out for
07:15 - is this don't forget to prototype your
07:17 - functions
07:18 - don't forget whenever you are making
07:20 - your function itself to include the
07:22 - square brackets but whenever you use the
07:25 - function in your main program do not
07:27 - include the square brackets because your
07:29 - compiler is smart enough to realize that
07:31 - whenever you use Jessica it obviously is
07:34 - an array because you told it right above
07:36 - it so as long as you remember those
07:39 - simple things you will be good to go and
07:41 - that is how you use an array
07:44 - side of function so it's kind of
07:45 - complicated at first but if you just do
07:48 - it like two times you'll be a pro at it
07:49 - so that's all I have for you guys for
07:51 - this story thank you guys for watching
07:52 - and don't know when we talk them out in
07:55 - the next tutorial but it's going to be
07:56 - cool so I'll see you then