00:00 - hey welcome back everyone this is Ian
00:02 - bringing you the fifth video in this AI
00:04 - series with the New Boston in today's
00:07 - video we're going to continue using open
00:08 - AI chat completion API and this time
00:11 - we're going to leverage something called
00:13 - function calling so this is going to
00:14 - allow us to send a description of a
00:18 - function or functions that we have
00:19 - written in our code over to the API and
00:22 - the API can decide based on the other
00:25 - input that we provided and the
00:27 - description of these functions whether
00:29 - or not it wants to call one of these
00:30 - functions in order to use the
00:32 - information that the function will
00:34 - return to generate the final response to
00:37 - our initial question so that's a lot uh
00:39 - I actually have a program flow diagram
00:42 - here that can kind of make a little more
00:44 - sense of this visually but we're going
00:46 - to walk through this step by step so
00:47 - don't worry if at first it's not
00:49 - clicking by the time we're done with
00:51 - this you're going to have everything
00:52 - laid out in front of you it'll make
00:53 - perfect sense so this is our program
00:57 - over here and the first step is to
00:59 - collect the user input in this case
01:01 - we're just going to hardcode ours but
01:03 - you can get it dynamically like we
01:04 - showed in our second video in the series
01:07 - and then we're going to include a
01:09 - functions list with some descriptions in
01:11 - Json format giving information about the
01:14 - functions that we have defined so the
01:16 - functions will be defined separately but
01:18 - the functions list is going to have
01:20 - information about those functions we're
01:21 - going to pair that together with our
01:23 - user input and then we're going to send
01:25 - that request over to chat completion now
01:28 - chat completion is going to decide what
01:30 - or not it wants to call one of our
01:31 - functions in order to generate its final
01:34 - response and we'll actually be the ones
01:36 - calling the function all chat does is it
01:38 - sends us back some uh parameters and we
01:42 - describe the parameters in those
01:44 - function uh descriptions that we sent
01:46 - with our initial request so that's how
01:48 - it knows what type of parameters to
01:50 - include so it's going to send that back
01:52 - to us we're going to check and see if it
01:54 - in fact did want to call a function if
01:56 - so which function and then we're going
01:58 - to extract those parameters we'll take
02:00 - the parameters that it gives us and
02:01 - we'll actually pass them into the actual
02:03 - function that we wrote we'll invoke the
02:05 - function and get the response we will
02:07 - include our functions response with the
02:10 - initial response from the chat
02:12 - completion API in our messages list back
02:15 - to the chat completion API so that it
02:17 - now has the full context the original
02:20 - question its initial response our
02:22 - response from our function call using
02:24 - the parameters from that previous
02:25 - response from the API all that bundle
02:28 - together it's going going to look at
02:30 - that and it's going to generate the
02:32 - final content of that last assistant
02:34 - message so that's what we get down here
02:36 - at the bottom so again it's a lot of
02:38 - back and forth it's a little more
02:39 - complicated than some of the previous
02:41 - examples but once you mess around with
02:43 - this and get your hands dirty you'll
02:45 - realize it's actually pretty
02:46 - straightforward and you can easily get
02:48 - going with this in your code today just
02:50 - by messing around with some of the
02:52 - examples that we have provided here so
02:54 - let's go ahead and look at an example
02:56 - and then we'll walk through the code
02:58 - line by line so I'm going going to run
03:00 - this file before we actually walk
03:02 - through the code and I'm just going to
03:04 - show you what it does so essentially we
03:06 - are defining a function that will return
03:09 - the weather in a given location and
03:12 - we're going to pass a description of
03:14 - that function along to the API with our
03:16 - initial question which is what is the
03:17 - weather in Boston Massachusetts so we're
03:21 - asking for real-time information and
03:23 - this is what makes this whole thing
03:25 - super powerful traditionally when you
03:27 - ask a question like that about real-time
03:29 - information
03:30 - be it the weather or the news or the
03:32 - stock market or what have you chat is
03:34 - going to come back to you and say hey I
03:35 - don't actually know because I'm trained
03:37 - on historical data now it's going to
03:41 - look for the functions that we've
03:42 - provided to it and say can I get a
03:44 - accurate answer to that question by
03:46 - providing parameters to one of these
03:48 - functions and if it can it'll give us
03:50 - those parameters and it'll let us get
03:52 - that real-time information send it back
03:54 - to the API where it can then formulate
03:56 - its final response which will have some
03:59 - accurate information about the world
04:01 - around us presently and so in this case
04:03 - we simply said what's the weather like
04:05 - in Boston today and the result was the
04:07 - current weather in Boston Massachusetts
04:09 - is 72° f with sunny and windy conditions
04:13 - so these values 72° sunny windy these
04:16 - are things that we've actually hardcoded
04:18 - into our function but in the real world
04:20 - you could actually send the request out
04:22 - to like a weather API and get actual
04:24 - information to send back to the chat
04:26 - completion API now that we've run a
04:28 - request here and seen it response let's
04:30 - go ahead and work through the
04:32 - code okay so at the top the only thing
04:34 - that's new here is the import of Json so
04:37 - we need that Json module because we're
04:39 - going to do a little bit of what's
04:40 - called serialization and we're
04:42 - essentially just making sure that our
04:44 - python data structure can be converted
04:46 - to Json before we send it over to the
04:49 - API and when the API sends us back some
04:52 - data we want to make sure that we can
04:53 - convert that from Json into something
04:55 - that python can work with like a uh
04:58 - dictionary for instance let's take a
05:00 - look now at this function that we
05:02 - defined here again like I said a moment
05:04 - ago this could potentially call a real
05:07 - world API some third party API like a
05:10 - weather API and then you could get back
05:12 - some real world data for Simplicity sake
05:14 - we just hardcoded an object here weather
05:16 - info location is the location that gets
05:18 - passed in to this function temperature
05:21 - is just a hard-coded value of 72 the
05:23 - unit is the unit that gets passed in if
05:26 - unit argument is omitted whenever the
05:28 - get current weather function fun is
05:29 - invoked by the program then it just
05:31 - defaults to Fahrenheit and then the
05:33 - forecast is a array or a list of some
05:36 - string values in this case sunny and
05:38 - windy so we take that weather info
05:40 - dictionary and we use the Json module
05:43 - that we imported up top to do something
05:44 - called dumps where we pass in the
05:47 - dictionary and what this will do is it
05:48 - will return a Json string I believe and
05:51 - we can use that with the chat
05:53 - completions API so we're going to put
05:56 - all of the rest of the logic of this
05:58 - program inside of a run method or run
06:00 - function I should say and that just
06:03 - makes it to where at the very bottom of
06:05 - the program we can control what
06:07 - environment this gets run in so if this
06:09 - main.py module were to get imported
06:12 - somewhere else it would not run this
06:13 - code but if you just run like python
06:15 - main.py or Python 3 main.py from your
06:18 - terminal or your command line then it'll
06:20 - know okay this needs to be run you'll
06:23 - see that at the bottom of the code that
06:25 - we have included that does that but just
06:27 - letting you know that we're going to
06:28 - wrap everything inside of this run
06:30 - function all right first things first we
06:32 - need to create a list of all our
06:34 - functions in this case we only have one
06:35 - function we're still going to use a list
06:37 - but we're only going to have one object
06:39 - inside of here and the object's job is
06:41 - to describe that function so we give it
06:45 - a name here the keys are all strings the
06:47 - values are all strings this is
06:49 - essentially Json if you're interested in
06:51 - learning more about Json schema there's
06:53 - a link here that you can visit and you
06:55 - can see how this is all structured why
06:56 - it's structured the way that it is but
06:58 - we're just trying to put it in a
06:59 - ubiquitous format that can be used with
07:02 - the API so functions is going to have
07:06 - objects inside of it the objects are
07:07 - going to have a name property the name
07:09 - is going to be the name of the function
07:11 - in this case we have the get current
07:13 - weather function so we call it get
07:15 - uncore current uncore weather the
07:17 - description is just going to describe
07:19 - what the function does in this case our
07:20 - function gets the current weather in a
07:22 - given location so then we move on to the
07:25 - parameters of the function so if you
07:27 - remember from above our function took
07:29 - two parameters it's going to have the
07:31 - location and then it's going to have the
07:33 - optional unit and then the unit will
07:36 - default to faight the string value if
07:39 - it's omitted we have a type of object
07:42 - just describing the properties object
07:45 - and then inside the properties object we
07:47 - actually have the parameters so the
07:49 - first one is location and it points to
07:52 - its own special object that takes some
07:54 - additional key value pairs you have to
07:56 - say the type of the parameter in this
07:59 - case the type is string we also want to
08:01 - describe this particular parameter so we
08:04 - put a description key and we say
08:05 - something like the city and state for
08:07 - example San Francisco California this is
08:10 - just meta information for the API so
08:13 - that it knows whenever it decides to use
08:15 - one of our functions how it should send
08:17 - back the parameters how it should
08:19 - structure them what they should look
08:20 - like whenever it sends that data back to
08:22 - us so then here we have unit the type is
08:25 - string again but instead of description
08:28 - we have something here called en
08:29 - enum just means that this is an
08:31 - enumerable and essentially that means
08:34 - that anything inside of this list here
08:36 - are the only options that are available
08:38 - to us so we have either Fahrenheit or
08:40 - Celsius that is it so whenever the API
08:42 - sees this it knows that it has to send
08:44 - back either Farenheit or Celsius nothing
08:46 - else now outside of properties we have
08:49 - required and this is just a list telling
08:51 - us which of these properties are
08:52 - actually required for this function to
08:54 - run and in this case location is the
08:57 - only required parameter so now that
08:59 - we've defined our functions list we can
09:01 - use that in our requests to the API so
09:03 - let's go down and look at that we have a
09:06 - messages variable pointing to a list of
09:09 - message objects and traditionally we
09:11 - have a system role as our very first
09:13 - object here but in this case we can omit
09:15 - that because by default the system roll
09:17 - is just a helpful assistant and what
09:19 - we're doing here is we're just sending
09:21 - the initial user roll message with its
09:25 - question to the chat completion API so
09:28 - the content for this one is what's the
09:29 - weather like in Boston again this is
09:31 - hardcoded if you wanted to get user
09:33 - input refer to video two of this series
09:35 - to see how you can easily do that so
09:37 - we're going to send a couple different
09:39 - requests remember in the program flow
09:41 - diagram I show some back and forth this
09:43 - is going to require a couple different
09:44 - requests here and so instead of saying
09:47 - response is equal to the API call we're
09:49 - going to say this is the first response
09:52 - so first uncore response is equal to the
09:54 - openai chat completion. create method
09:56 - and this will send our request to that
09:58 - AP
09:59 - the other thing you'll notice that's
10:00 - different here is the model isn't using
10:02 - GPT 3.5 turbo it's using GPT 3.5 turbo
10:07 - 0613 this is the current version of the
10:09 - model that's trained on the function
10:11 - data set likewise there's also a 0613
10:14 - for GT4 if you decide to use the more
10:17 - powerful llm all right so messages is
10:20 - going to point to our messages list
10:22 - that's right here on line 48 functions
10:24 - is going to point to the functions list
10:26 - that's what we defined up above and then
10:28 - here function call is equal to Auto that
10:30 - is the default whenever you include a
10:33 - functions parameter here or functions
10:35 - argument in your call to the API and
10:37 - what Auto means is it's just saying that
10:40 - the API can decide whether or not based
10:43 - on the context of everything it wants to
10:45 - call one of our functions you can
10:47 - actually provide an object here with the
10:48 - name of the function if you want to make
10:51 - it call the function every single time
10:53 - but the API is really powerful and if it
10:56 - sees a question like what's the weather
10:58 - like and it sees that we have functions
11:00 - that can handle that then it's going to
11:02 - know that it needs to provide us with
11:03 - those parameters so the the arguments
11:06 - that you can pass to function call or
11:07 - the values anyway are string of Auto
11:10 - string of none or an object with a name
11:13 - key pointing to the name of the function
11:16 - from your functions that you want it to
11:17 - call okay so since we've called that now
11:20 - we're going to print the first response
11:22 - and if you remember from before when we
11:23 - did the example over here you can see
11:26 - the entire response object if you look
11:28 - here there's two different objects
11:30 - here's the first one and this is
11:32 - important because the content of this
11:34 - one inside of choices the First Choice
11:37 - inside of message the content is
11:39 - normally where we pull that generated
11:40 - text from but as you can see it's null
11:43 - so it's good that we pulled this up
11:44 - because you should know that if the
11:46 - model decides that it wants to call one
11:48 - of your functions it's actually not
11:50 - going to provide you with content it's
11:52 - going to provide you with something
11:53 - called function call so function call is
11:55 - new to us it's inside of the message
11:57 - object you can see this is an assistant
11:59 - roll message and if there's a function
12:01 - called property then it's going to have
12:03 - a name the name is going to be the
12:06 - function that it wants you to call from
12:07 - your functions list and then it's going
12:09 - to have arguments the arguments are
12:10 - important because that is the arguments
12:13 - that you're going to pass to your
12:14 - function whenever you call it and the
12:15 - Finish reason here is function call and
12:18 - that's different from what we're
12:19 - normally used to which is either stop or
12:21 - if we reach our Max tokens limit so
12:23 - function call is telling us like hey
12:25 - this is the model wanting us to call one
12:27 - of our functions so we're going to look
12:29 - more closely at that but you can see
12:31 - where we print out the second response
12:34 - here this one actually has the content
12:36 - and that's what we Traverse down into
12:37 - and print at the very bottom so we're
12:39 - going to get to that in a second but
12:41 - let's look at our code real quick we are
12:43 - printing the First Response object we
12:45 - are printing an empty line and then
12:47 - we're saying First Response message is
12:49 - equal to and we're traversing down into
12:51 - the First Response object looking at the
12:53 - choices list looking at the first item
12:56 - in that list and then extracting the
12:57 - message object from
12:59 - this is important because this is going
13:00 - to have information that we need to send
13:02 - back to the API again referring back to
13:04 - our program flow we send the initial
13:06 - request it sends it back to us we're
13:08 - about to send another request and
13:10 - included in that second request is going
13:12 - to be the response from the initial
13:15 - request and the response from calling
13:18 - our function so down here we do a check
13:21 - we're saying hey inside of the First
13:23 - Response message is there a property
13:25 - called function call we do that with
13:27 - this doget method so first response
13:29 - message is a dictionary so we can use a
13:31 - dog get method to check and see if this
13:33 - key exists on that dictionary if it does
13:35 - then this if statement will be true and
13:37 - we will go down into this block now
13:40 - we're going to create another dictionary
13:42 - that is available functions these are
13:44 - the functions that are available to us
13:45 - the key is the name of the function
13:47 - variable and then the value is the
13:49 - actual function variable so now we want
13:50 - to extract the name of the function that
13:53 - the model wants us to call that's inside
13:55 - of that first response message it's
13:57 - inside of that function call object and
13:59 - it has a key called name that is going
14:01 - to be in this case getor current uncore
14:04 - weather so now that we have the function
14:06 - name we know which of our functions we
14:08 - need to call this is simple because we
14:10 - only have one function but if you had
14:11 - more than one then you would have those
14:13 - listed here so function args is going to
14:17 - get pulled from the First Response
14:19 - message again into function call but
14:21 - this time into arguments as opposed to
14:23 - the name key and so you can see here
14:26 - these arguments look something like this
14:28 - like location Boston Massachusetts this
14:30 - is an object and we can pass the
14:33 - location the value for the location into
14:36 - our function call because remember our
14:38 - function requires at the very minimum a
14:40 - location argument so we use Json loads
14:43 - here essentially just wrapping this
14:46 - arguments value in Json loads will make
14:49 - it into a it'll serialize it into a data
14:52 - type that we can work with in our python
14:54 - code function to call is going to be the
14:56 - available functions object here
14:59 - with the function name as a key in this
15:02 - case it'll be get current weather which
15:04 - will turn the function to call variable
15:07 - into the get current weather variable or
15:09 - essentially It'll point to that function
15:11 - whenever we invoke function to call
15:13 - we're actually invoking our get current
15:15 - weather and remember get current weather
15:17 - was defined at the very beginning right
15:20 - here so now that we have access to that
15:22 - we can actually pass in the argument or
15:24 - arguments depending on whatever
15:26 - parameters were given back to us from
15:28 - the AP gu call and we can actually get a
15:30 - result here returned to us and we can do
15:32 - something with it so let's scroll back
15:34 - down
15:35 - here a lot of extracting Happening Here
15:38 - essentially from the response just
15:39 - trying to figure out okay does it want
15:41 - us to call the function if so which
15:44 - function is it we get the name to
15:46 - determine which function okay now that
15:48 - we know which function let's get those
15:49 - arguments let's make sure that they're
15:50 - in a data type that we can use so let's
15:52 - do a Json loads on those and now let's
15:55 - find the actual function the function to
15:58 - call from our available functions using
16:00 - the function name and the last thing we
16:01 - want to do here is invoke the function
16:03 - to call with the arguments so location
16:06 - is equal to function rs. getet location
16:09 - same pattern as the if statement here
16:11 - we're using theget method on a
16:13 - dictionary to see if the location
16:15 - attribute is available to us if it is
16:17 - it'll get returned here and then we have
16:20 - units it is equal to the function R.G
16:23 - unit if there is no unit then I think
16:25 - it's just going to be like an empty
16:26 - string or a nonv value either away if
16:28 - it's omitted then it's going to default
16:30 - to Fahrenheit so the result of calling
16:33 - our function will get stored in this
16:35 - function return value variable and now
16:38 - we can use that whenever we're sending
16:40 - our second request back over to the chat
16:42 - completions
16:43 - API okay so we need to append the First
16:47 - Response message from the API to our
16:50 - messages list and then right after that
16:52 - we need to append a new message with a
16:56 - role that we've never seen before this
16:57 - role is called function as opposed to
16:59 - like system assistant or user and then
17:03 - the name of it needs to be the function
17:04 - name so that's what we extracted from
17:06 - the previous message and then the
17:08 - content is going to be the return value
17:11 - of calling that function with those
17:12 - parameters so we stored that in that
17:14 - function return value variable and we
17:16 - bundle all that up into an object append
17:18 - it to our messages list and now our
17:20 - messages are ready to be sent back to
17:22 - the API to get that final response so
17:24 - that's what's going to happen right here
17:26 - we're going to get second uncore
17:28 - response from calling the API a second
17:31 - time telling it the model is gbt 3.5
17:34 - turbo 0613 the version of the model
17:36 - that's trained on function called data
17:38 - and then we're going to pass in our
17:39 - messages list so that the model has the
17:41 - full context of everything that's
17:43 - happened th far and can give us the
17:45 - appropriate answer now you'll notice
17:47 - that we don't include things like
17:48 - temperature or Max tokens here if you
17:51 - don't include temperature it'll default
17:52 - to one if you don't include Max tokens
17:55 - it'll default to Infinity so make sure
17:57 - that you include those if you you want
17:58 - to tweak those to something more
18:00 - specific but for the sake of just
18:01 - showing you the example here we can omit
18:04 - them safely so then down here we're
18:06 - going to print the result of second
18:08 - response that's that second object that
18:10 - we saw over here so this
18:14 - one and then we're actually going to
18:16 - print an empty line and then we're going
18:17 - to Traverse down into the second
18:19 - response choices list first item message
18:22 - object content attribute and that's
18:24 - going to give us the string value of the
18:26 - current weather in Boston massachus us
18:28 - is 72° f with sunny and windy conditions
18:32 - so that's all the back and forth we're
18:35 - calling the API two times the initial
18:37 - time it sends a response we do some
18:39 - checking we do some extracting we do a
18:41 - function call we assign the result of
18:43 - the function call to a variable we
18:45 - bundle all that together we send the
18:48 - initial response with our function call
18:50 - response to the API a second time as
18:54 - part of that whole messages list and it
18:56 - finally comes back to us with the
18:57 - textual response resp based on the
18:59 - context of everything that we've passed
19:01 - it thus far and that's what we use to
19:03 - Output to the terminal so that the user
19:06 - can see the answer to their initial
19:07 - question and the very first request now
19:10 - I told you at the very bottom this is
19:12 - where we actually run run you may have
19:14 - seen this pattern before but essentially
19:16 - in every Python program or every python
19:18 - module there's going to be a double
19:20 - underscore variable and it's going to
19:22 - have the name of the module in this case
19:24 - if you run this module with like Python
19:27 - and then the module name python main.py
19:30 - in your terminal then this value will
19:33 - evaluate to double main as a string in
19:35 - which case we do want to invoke the Run
19:37 - function which will run all of our code
19:40 - so let's zoom out real quick I know it's
19:43 - a little small sorry for those of you on
19:44 - mobile but let's just take a look at
19:46 - this program because it is a bit longer
19:48 - than the programs we've been writing
19:49 - previously so we've got our boiler plate
19:51 - stuff up top we include Json so we can
19:54 - use the dumps and loads methods we
19:57 - Define our function in this case we're
19:59 - just including some dummy data to Output
20:01 - but here you could use a third party API
20:03 - to get some real world realtime data and
20:05 - then we have our run function which is
20:07 - where we Define the rest of all of our
20:09 - code where we're going to actually
20:10 - interact with the chat completion API so
20:14 - we Define our functions in this Json
20:16 - schema format where we have all of the
20:19 - information about our functions in this
20:21 - case we only have one function but we
20:23 - want to describe its parameters and that
20:26 - will dictate how the model will send
20:29 - back information for us to use to be
20:31 - able to call our function we're going to
20:33 - create our messages list we're going to
20:35 - start with the very first message being
20:37 - from our user Ro not from the system
20:39 - role like we've been doing previously
20:41 - we're going to hardcode the content
20:42 - again you can get Dynamic input if you
20:44 - like we're going to package that up and
20:47 - send it to the API but making sure to
20:50 - include the functions in addition to the
20:52 - messages that way the API knows it has
20:54 - the ability to send back parameters for
20:56 - our function if it wants to we're going
20:58 - to print our response here and then
21:00 - we're going to Traverse down into that
21:02 - and get the entire first message we're
21:05 - going to check and see if it wanted us
21:06 - to do a function call if it did we're
21:09 - going to extract all the necessary
21:10 - information from that object so that we
21:12 - can do our function call we're going to
21:14 - store the result of calling our function
21:16 - with those parameters from the initial
21:18 - response from the API in a function
21:20 - return value variable and then we're
21:22 - going to use that down here to package
21:24 - it up into a message object with a roll
21:27 - of function before we do that of course
21:29 - we need to append the initial response
21:31 - from the API to our messages list then
21:34 - we append our new function roll message
21:37 - with the name of the function that was
21:39 - called and the content of the result of
21:42 - calling that function we package that up
21:44 - in our messages list we send it in our
21:46 - second request to the chat completion
21:48 - API and the result is going to include
21:51 - the textual response from the API to our
21:53 - initial question from our first response
21:56 - that's it for doing function calls with
21:57 - open a chat completion API let us know
22:00 - if you have any questions down in the
22:01 - comments below and we'll catch you all
22:03 - in the next video thanks