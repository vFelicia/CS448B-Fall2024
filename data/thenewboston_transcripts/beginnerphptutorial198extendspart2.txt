00:00 - so let's say we might may have a a
00:05 - public type and this might equal let's
00:12 - say 18 to 25 so this is the type of a
00:18 - savings account I have just as an
00:20 - example we could say ISO or whatever so
00:23 - 18 to 25 is the type of account that
00:26 - exists at the moment and when we create
00:30 - this alyc savings we can also then we
00:35 - can also then grab this type because
00:36 - we've created it as a public property we
00:39 - can take this type of account and we can
00:41 - echo it out however this is not going to
00:44 - be available in our bank account class
00:48 - because we've created an extension of
00:50 - our bank account but with this
00:52 - additional property which is only
00:55 - available to use inside this class here
00:57 - so let's go ahead and test this we'll
01:00 - test it with both we'll test it with
01:01 - bank account and then with the savings
01:03 - account so if I was to say under here
01:06 - Alex or echo rather echo let's get rid
01:12 - of our balances echo Alex and then type
01:17 - so we're trying to echo the type of
01:19 - account that I have in my normal bank
01:21 - account now because we've only extended
01:23 - our bank account and and specified this
01:26 - additional property in our savings
01:27 - account class when noting it's not going
01:30 - to work we're going to we're going to
01:31 - return an error so we've got undefined
01:33 - property bank account type that's
01:35 - because our property doesn't exist
01:37 - within our bank account class it only
01:40 - exists within our savings account so
01:41 - let's get rid of that line there we
01:43 - can't do that unless we've already pre
01:45 - specified it up here in which case it
01:47 - will automatically be available in
01:49 - savings account and I'll show you an
01:51 - example of that in just a moment okay so
01:54 - um let's go ahead and say Alex savings
01:58 - and now let's echo out the type of
02:00 - account so echo
02:03 - alik savings and the type of account so
02:05 - let's go ahead and refresh and you can
02:07 - see that we've been we've been displayed
02:10 - with the value of eighteen to twenty
02:11 - five is which which is what the account
02:13 - we specified up here so now what I was
02:16 - talking about earlier is because this is
02:18 - only available in savings account which
02:20 - is an extension of bank account we can't
02:22 - use it with bank account but if we did
02:24 - want to use it with bank account we can
02:26 - cut that from there we can put it in
02:28 - there and now what happens is this is
02:31 - available for each for each instance we
02:36 - create so what we might do is we might
02:38 - create a new bank account and then we
02:41 - might say we might give it a specific
02:46 - value and we'd need a method to do this
02:48 - so we could create a new method called
02:54 - in fact no no what we can do is we can
02:56 - come down here and we can say Alex type
03:04 - now let's let's do it through a method
03:06 - so we'll come up here and we'll say
03:10 - function public function we need public
03:13 - function set type and this is going to
03:19 - set the type of account that we're
03:21 - currently dealing with so what we can do
03:23 - is once this function is run and we take
03:26 - in the type here let's give it another
03:28 - name just so we don't confuse it with
03:30 - the property name so set type input we
03:36 - can now say this type equals input okay
03:47 - so set the value of this type here to
03:50 - the input so what we can do is when we
03:52 - now create a new account we can say Alex
03:57 - sets type and we can set the type to
04:01 - let's say 18 to 25 current and now with
04:11 - our savings account we can do exactly
04:12 - the same thing because we remember we've
04:14 - extended all methods and properties so
04:16 - we can say Alex savings set type super
04:25 - saver okay so now what we can do is we
04:29 - can get rid of that we can now echo out
04:32 - let's say the balance and the type of
04:36 - account so I'm going to say echo Alex
04:42 - first of all Alex and then I'm going to
04:45 - say type and then I'm going to say has
04:50 - and then I'm going to say Alex display
04:57 - balance okay so what this is going to do
05:00 - it's going to take the type of account
05:01 - and then it's going to say housing a
05:03 - certain amount of balance that's in
05:04 - there and we can append a line break on
05:06 - there let's just test this one in
05:08 - particular first let's refresh you can
05:11 - see that 18 to 25 current has balance 80
05:14 - so let's go and get rid of this dot if I
05:17 - put that
05:21 - oh yeah okay so I've got covered the dot
05:24 - in there so that's a refresh
05:26 - so 1825 current has balance 80 now what
05:29 - we can do is because we're extending
05:30 - this we're extending the method and the
05:32 - property like before we just set the
05:34 - property inside here we can echo out
05:36 - Alex savings and then we can echo the
05:40 - type out remember this is a property not
05:42 - a method so we're just echoing out the
05:44 - raw public property so if we would set
05:47 - this to private we wouldn't be able to
05:48 - do that we'd have to create a method in
05:50 - order to return the type as we do with
05:53 - display balance so now let's go ahead
05:55 - and say savings type and we can say has
05:58 - and Alex savings display balance and
06:07 - we'll put a line break just on the end
06:09 - of here to keep things neat and let's
06:12 - refresh so we've got 18 to 25 current
06:15 - has balance 80 and supersaver has
06:17 - balance 3000 so in this tutorial we've
06:20 - looked at adding another method in
06:22 - another property and also extending a
06:24 - bank account and demonstrating how we
06:26 - can create additional properties in here
06:28 - I haven't shown method but is exactly
06:30 - the same way as you do a property you
06:32 - just pop that straight into savings
06:33 - account and then that's unique to
06:34 - savings account however every method and
06:38 - property and bank account we can now use
06:40 - in savings account and I've also given a
06:43 - short example and so I encourage you to
06:45 - sort of play around with this create new
06:47 - methods and properties inside your
06:49 - savings account and bank account or
06:50 - whatever classes you're creating for
06:52 - whatever purpose you're creating them
06:54 - for play around and see what you can do
06:57 - and can't do and we can guarantee that
06:59 - after you've got the hang of this
07:02 - object-oriented programming in general
07:04 - will become a lot easier to grasp