00:00 - all right everybody welcome back and in
00:03 - this video what we're going to be doing
00:04 - is continuing on our shop app in the
00:08 - last video we made a lot of progress we
00:10 - have our add to cart and remove from
00:12 - cart button and we also built a bunch of
00:15 - address management logic so that was
00:17 - cool
00:18 - now in this one what do we got left so
00:22 - yeah just a little indicator we have
00:24 - five days from a launch day so I'm
00:28 - really hoping I can knock out a lot of
00:30 - these features today but we have some of
00:32 - the remaining add to cart logic just
00:34 - some Edge Case Logic that we'll talk
00:36 - through in just a bit
00:37 - and then the checkout page and then of
00:40 - course the orders pages so the checkout
00:43 - page is going to look something like
00:44 - this in the orders Pages something like
00:47 - this
00:48 - so like I said five days left until Go
00:51 - Time so really hoping I can make some
00:54 - good progress today
00:56 - now another thing that I actually saw
00:59 - while I was like starting up my
01:01 - environment for today was that
01:04 - I went to this bacon and I was just
01:06 - testing out this add to cart button and
01:08 - I got an error
01:09 - and that is because even though I have
01:11 - the item in my cart
01:13 - as you can see we aren't fetching these
01:17 - cart items whenever we log in so that's
01:20 - what I'm actually going to do right now
01:22 - kind of just a housekeeping item before
01:24 - we get to our good stuff
01:26 - and let me see if I can remember where I
01:28 - put this so in app
01:32 - all right so probably the authenticated
01:34 - layout
01:36 - since in my layouts right here this is
01:38 - what gets shown if the user isn't logged
01:40 - in yet basically the created account or
01:42 - sign-in forms and the authenticated is
01:45 - of course once they are authenticated
01:47 - then this is what we show them basically
01:49 - our main layout
01:51 - so in this case we are fetching a bunch
01:54 - of things and what I also want to fetch
01:58 - is the carts
02:02 - and dispatchers that would be in car
02:05 - products
02:06 - get card products
02:15 - products and get cart products and we'll
02:18 - just fetch it right here at the very top
02:23 - and also there is a way I can make this
02:26 - more efficient using promise all
02:30 - so let's do that as well actually let's
02:32 - test this
02:38 - all right and there we go we now see
02:40 - when I refresh the page it made this
02:43 - fetch to cart products
02:46 - and then I have a car product right here
02:49 - but we don't have the logic for this
02:51 - page yet
02:52 - now another thing that I do want to do
02:57 - is I can just wrap this in a promise all
03:02 - so right now what's happening is this
03:06 - request is being sent and it's waiting
03:09 - for that and then after this request is
03:11 - being sent we can actually fire all
03:13 - these off at the same time
03:19 - don't
03:27 - make this more efficient
03:32 - I just want to get the Syntax for
03:33 - promise all
03:36 - and there we go
03:39 - so yes this will allow us to
03:43 - Spectrum all at once
03:47 - card score has changed
03:54 - all right it's beautiful
03:56 - and now let me just go ahead and refresh
03:59 - this actually I can log out and log back
04:02 - in again
04:03 - and then hopefully I get my cart
04:05 - products beautiful okay
04:08 - so now let's see what we got to do okay
04:13 - now actually before I even get to this I
04:16 - know
04:17 - kind of teasing everyone with a lot of
04:19 - prep work before but one thing that I
04:21 - also noticed is that I have two
04:24 - realistic items in here and one bacon I
04:26 - just want to change this to uh something
04:28 - more realistic
04:30 - just so I'll say this mug right here
04:38 - just so we can start having some actual
04:40 - data in here and actually need to
04:43 - download that
04:46 - tnb mug
04:51 - all right so the name of this can be tnb
04:54 - mug
04:56 - replace it with this image
05:01 - and I'll say
05:03 - coffee mug
05:09 - and that would be product
05:13 - 11.
05:15 - did I say that
05:19 - should have
05:20 - yep okay
05:22 - so there you go and that was actually
05:25 - interesting why didn't that not refresh
05:31 - that is interesting so I'm not
05:33 - refreshing these when I go through the
05:36 - details page
05:39 - okay so let me add a to-do for that as
05:42 - well
05:45 - since you see I just made that change
05:47 - and then I tried to refresh the page
05:48 - assuming they would uh
05:52 - be appearing on
05:55 - here
05:59 - but yeah
06:01 - it's not happening
06:03 - in fact I wonder if
06:06 - let's do some quick QA
06:10 - let's first log out
06:13 - and then log in and then on this page go
06:15 - to this URL directly
06:17 - and this doesn't show anything because
06:19 - I'm not fetching
06:21 - that product again so
06:25 - in here we'll put a use effects let's
06:29 - say
06:38 - fetch the details of the product from
06:40 - the buy product Details page
06:43 - all right
06:45 - so maybe we should just do this right
06:47 - now
06:50 - ID for params
06:54 - okay
06:55 - before we get to that I just want to
06:57 - make sure nothing is breaking and all
06:59 - right so basically whenever I go to the
07:01 - URL directly I should be able to fetch
07:05 - this product information
07:07 - instead of having to go through my
07:09 - product catalog first so
07:12 - let's
07:14 - actually do we even have that end point
07:19 - so get the products
07:24 - get product details is what we're
07:26 - looking for
07:29 - I'm saying gets products
07:34 - 11. okay so we do have the endpoint
07:39 - but now the question is
07:42 - do we have a API and that would be
07:46 - products
07:47 - yeah so we have it for crate delete git
07:51 - and update
07:53 - but no product details
08:01 - and I'll just say get products
08:04 - is what the name of this will be
08:11 - great and
08:15 - to fetch an individual
08:21 - crate and or create a get product API
08:26 - function fetch an individual product
08:31 - e by
08:33 - by ID
08:37 - now
08:39 - let's pass this in
08:42 - and yeah should be good okay and another
08:46 - thing I want to do is just make sure
08:48 - that
08:53 - pair
08:56 - core
09:01 - wallet I'm just seeing if I have any
09:03 - other existing design patterns
09:07 - wires no okay so it should be good
09:11 - and now I'm gonna have to do it for a
09:13 - dispatcher as well
09:19 - all right so get product this is what I
09:21 - was looking for
09:26 - all right so get products is what we can
09:28 - use on our product catalog to get
09:30 - um a list of all the products get
09:33 - product allows us to pass in an ID and
09:36 - we're going to get back a product
09:41 - these look good
09:44 - now create
10:00 - great now create a dispatcher function
10:02 - for that
10:04 - and
10:05 - Port it yes and then create this
10:11 - get product get product wham bam a
10:15 - little bit toe jam
10:26 - getting products again products
10:29 - again products getting products okay
10:33 - now let's read through this so to get
10:35 - product you pass in an ID it's gonna
10:38 - make an request to the endpoint and then
10:41 - it's going to set product
10:43 - since it's an individual product we get
10:46 - back
10:47 - response data
10:49 - data looking good okay so now we can
10:53 - just dispatch get product
10:57 - in a similar fashion
11:00 - from the product Details page
11:10 - similar to this right here okay
11:13 - so use effect and we're going to be
11:16 - needing
11:18 - dispatch
11:20 - what you got for me already okay
11:22 - dispatch
11:25 - let's actually just use this
11:36 - a b c d e f g okay
11:41 - so I want to say
11:47 - um first of all
11:49 - I don't need
11:52 - to rename this
11:55 - okay
11:57 - so what I want to do whenever I mount is
12:00 - get product error fetching
12:02 - product it's gonna be there message
12:05 - and what I'm also going to do is pass in
12:07 - the ID
12:09 - which is gonna
12:11 - this ID is going to take a number
12:13 - actually right
12:14 - get product it's going to take a number
12:16 - so I need to parse that
12:22 - and then I will say at the beginning of
12:25 - this
12:30 - I have no ID return
12:37 - fetching credit details okay
12:41 - so now I'm gonna say that when this page
12:44 - loads
12:45 - if you don't have any ID which you
12:47 - should but if not just return it
12:50 - otherwise
12:51 - then just try to fetch the product
12:54 - details
12:55 - and if there's any error with the API
12:58 - then just log this error message all of
13:01 - these look good so now
13:03 - let's go ahead and check this logic out
13:06 - again so that's good that fetched all
13:08 - right so now what I'm going to do is log
13:10 - out log back in again and go directly to
13:13 - this page and now hopefully it makes
13:17 - this request
13:18 - to fetch the product details and all
13:21 - right we're good to go
13:23 - looking good looking good and I now got
13:26 - this mug removed from cart add to cart
13:29 - we are looking great right here okay
13:32 - so now
13:34 - we can actually get to the logic that I
13:38 - uh wanted to write right here
13:40 - and the logic is this basically right
13:45 - now I have one item in my cart uh I'm
13:48 - logged in this Bucky right now and this
13:49 - is from Amy now I'm able to add
13:53 - different products from Amy to my cart
13:55 - that's fine even if they have different
13:57 - uh core prices for example this is in
14:00 - VTX and this is in tnb
14:02 - however if I add a product from someone
14:04 - else other than Amy then we don't want
14:07 - to allow that in our system because then
14:10 - we're like
14:11 - have a weird ux issue that we run into
14:14 - we're like placing a single order from
14:16 - two different Sellers and it's just a
14:19 - pain at least for MVP
14:21 - so in this case what I'm gonna do is
14:25 - check
14:26 - this on the front end
14:28 - since we're already checking on the back
14:29 - end but we don't want to have to hit the
14:31 - back end just to tell us we get air back
14:33 - and also we can just validate this on
14:35 - the front end so we never make that
14:36 - request in the first place
14:38 - so that's what we're going to do
14:40 - and to do this I'm actually going to
14:44 - create another user
14:47 - actually let me do this
14:49 - I'm going to create an invitation
14:52 - and I'll just say uh
15:00 - all right so I'll say Bob one two three
15:05 - and there's no user yet
15:07 - and then I'm going to log out
15:10 - I'm gonna create an account
15:12 - and this is going to be for Bob
15:15 - whose password can be
15:17 - bacon
15:19 - one two three four five
15:22 - bacon
15:24 - one two three four five invitation code
15:26 - Bob one two three
15:28 - and well why did I get a bad request
15:31 - invalid or used invitation code wait did
15:34 - I never create this
15:36 - safe
15:37 - and embarrassing
15:39 - all right now create it in actually I
15:41 - want to write down
15:46 - one sec I gotta write that down okay so
15:50 - Bob
15:56 - has a password bacon
16:01 - I was bacon one two three right yep no
16:04 - bacon one two three four five
16:10 - okay let me just log out and see Bob
16:14 - bacon
16:16 - one two three four five beautiful
16:21 - all right so we are looking good on that
16:23 - and now that
16:25 - I am Bob right now
16:28 - my name is Robert Paulson okay
16:33 - now what I can do is create a new
16:35 - product
16:37 - so what product do I want to create how
16:41 - about these elephants
16:45 - elephant uh images
16:52 - all right Bob you are going to create a
16:55 - little mini
16:57 - elephants
16:59 - uh these are uh cool looking figurines
17:06 - f i g u r i n yes I think that's how you
17:09 - spell it
17:10 - and what did I name that elephants.jpg
17:16 - uh I'll say uh tnb since Amy is selling
17:21 - for VTX although it doesn't really
17:22 - matter for what we're doing here
17:24 - uh the price of these they are pretty
17:27 - nice elephants so I'm gonna say four
17:29 - thousand and I only have one set
17:32 - little mini elephant set I'll say
17:36 - and I'll say two cool
17:39 - I only have one set and I'm going to
17:41 - activate that product okay
17:44 - all right Bob we are now
17:48 - selling elephant figurines
17:50 - now I hope Bucky loves them because
17:53 - Bucky's about to log in right now
17:55 - and check it out so Bucky already has an
17:58 - item from his cart in his cart from Amy
18:02 - but now Bucky's looking at these
18:04 - elephants and wants to add them to the
18:05 - car oh but he can't why because it says
18:09 - you can't add products from different
18:11 - sellers to the cart
18:14 - all right so that is what we want
18:16 - however what we're going to do now is
18:18 - instead of making this request to the
18:20 - back end to find out that we can't do
18:22 - that we're just going to display a
18:24 - little warning on the front end and
18:26 - we'll also give them the option to say
18:27 - hey you're not allowed to do this
18:29 - however if you still want to overwrite
18:31 - your cart then you can just go ahead and
18:33 - do that
18:34 - now I already wrote some this logic in
18:37 - tnbos but
18:41 - it's actually
18:43 - okay so I'm on the byproduct Details
18:46 - page
18:47 - I think all right handle add to cart
18:50 - click this is where it's going down
18:55 - now this is where
18:59 - I want to display that modal
19:04 - all right
19:09 - and in tnbos where are you at
19:14 - so Source apps shop
19:17 - pages
19:19 - is it byproduct details
19:22 - cart warning modal
19:26 - okay so in my modals let's look what
19:29 - this car warning model is
19:31 - to get rid of you
19:34 - this product has a different seller and
19:37 - a price Network
19:45 - so does this take any prop active
19:47 - byproducts this is interesting
19:50 - a whole different flow
19:58 - header warning okay
20:01 - so let's just go ahead and make this
20:03 - super
20:04 - simple
20:07 - for now
20:13 - okay
20:15 - all right so what I'm going to do is I'm
20:18 - going to throw up a warning that says
20:19 - hey you
20:21 - can't have products for multiple sellers
20:24 - in your cart would you like to create a
20:25 - new order now if they say no then we
20:28 - pretty much just close the modal now if
20:30 - they say yes what we have to do
20:33 - is we actually have to delete all the
20:35 - cart products on the back end
20:37 - and then after that
20:40 - we add this new product to their cart
20:45 - so
20:46 - I already smell some inefficiencies with
20:49 - having to make a lot of delete requests
20:51 - to the back end that hopefully
20:54 - we can optimize a little bit later on
21:00 - but for right now this is our logic
21:03 - all right so
21:05 - car warning modal we'll go with
21:12 - we'll go with the same naming convention
21:14 - cart warning modal
21:16 - since we only have one cart warning
21:19 - modal right now okay
21:21 - so
21:23 - let's go ahead and just create a new
21:25 - modal
21:27 - cart warning modal
21:31 - yeah that's good we can rename it later
21:34 - on if we need to
21:36 - but
21:38 - it's like that's permodal core modal
21:42 - great wallet model
21:45 - I just want like a simple model
21:48 - all right either way let's go ahead and
21:50 - just create a new component for this
21:55 - and then
22:04 - that is good that is good and
22:11 - do we want this
22:14 - I just keep it nice and easy
22:18 - I don't know if it's gonna have any
22:20 - custom styling but we'll kind of just uh
22:23 - keep it easy for now
22:25 - now for a modal
22:31 - let's see how I was writing these okay
22:36 - so for the modal
22:39 - let's
22:40 - let's use uh yeah trades model
22:43 - as our example
22:47 - all right so basically import this
22:49 - shared modal component
22:51 - and then you can overwrite The Styling
22:53 - for it
22:59 - all right easy enough
23:01 - so in the cart styles
23:05 - do this with a modal
23:08 - and then the modal implementation it
23:12 - looks a little bit something like this
23:13 - okay
23:21 - all right and what was my header of this
23:24 - just said warning
23:31 - this is going to take a closed prop
23:35 - I'm sure these did too
23:41 - all right so this cart warning modal
23:44 - props is going to consist of a close
23:49 - function that we pass in
23:58 - and then what we are saying
24:05 - yeah that there's just a div right here
24:07 - but this should be enough for us to get
24:09 - started
24:17 - all right and now in here what we need
24:21 - to do is we need to use
24:26 - pretty much the same thing
24:36 - use toggle
24:38 - all right
24:41 - so just stealing some previous patterns
24:43 - right here we're going to use toggle
24:44 - hook to toggle this on and off
24:50 - for this we're going to say cart warning
24:53 - modal is open
24:56 - toggle cart warning modal
25:03 - and that's going to be false by default
25:05 - so by default it is not
25:08 - open on the screen
25:11 - and then
25:14 - want to have logic here
25:22 - well another thing that we need to do is
25:25 - actually import this modal
25:27 - so
25:32 - we're going to say cart warning modal
25:34 - cart warning modal
25:40 - and then we have
25:43 - it's rendered alongside here
25:49 - can be interesting as well
25:52 - by product details is this going to mess
25:54 - up any of our styling
25:56 - I don't think so but let's find out
26:02 - all right so for that state we just
26:05 - added we are going to say
26:10 - if cart warning model is open
26:14 - then we're gonna render cart warning
26:16 - model
26:19 - otherwise render nothing and for the
26:22 - close we're going to say toggle cart
26:23 - warning model
26:29 - all right now for here what we can
26:33 - always do is just call toggle cart
26:36 - warning modal
26:43 - and then this is just going to allow us
26:46 - to test things
26:47 - so let me go ahead and add to cart we
26:49 - get our nice warning model
26:51 - and all right
26:56 - so this is eventually going to say
26:58 - something like
27:01 - um
27:03 - actually let me see that one more time
27:11 - The Styling don't look that great but
27:15 - actually let's tweak this just a little
27:17 - bit
27:21 - all right so first of all 480 looks like
27:23 - a better width for this
27:27 - and now we can say something like uh
27:33 - what did I say in tnbos
27:38 - this product
27:41 - has a different Cellar than the existing
27:44 - mine was in your car all right this is
27:45 - pretty good
27:52 - this product has a different seller
27:55 - in the system items in your cart would
27:58 - you like to create a new order
28:05 - which product has a different seller
28:06 - than the existing imaginary car would
28:08 - you like to create new order
28:12 - nice and simple huh
28:15 - all right and they can either close out
28:18 - of it or they can click yes and then if
28:22 - they click yes or submit or whatever you
28:24 - call it then it's pretty much gonna
28:26 - replace the items in their cart however
28:28 - many there are with this elephant
28:31 - all right so we're getting there we are
28:34 - getting there
28:36 - now in order for that to happen
28:40 - what we also need to pass in
28:43 - is a product
28:46 - and also
28:49 - we need to change this logic to figure
28:51 - out if we should throw this warning
28:56 - so in order to do that
28:59 - what I'm going to do is I'm going to
29:01 - actually make a hook
29:02 - and
29:03 - I want to make a hook because I'm going
29:06 - to make a bit of reusable logic to
29:08 - figure out who the cart product seller
29:13 - is and this should always be one user
29:16 - basically whoever
29:18 - um
29:19 - let me pull this up so right now since I
29:22 - only have a product from Amy in my cart
29:24 - then the cart product seller would be
29:27 - Amy
29:29 - and then what I can do with that
29:31 - information
29:32 - is whenever they're on a product detail
29:34 - page I can just say that if the seller
29:37 - of the product you're looking at doesn't
29:39 - match the seller of you know who you're
29:42 - already ordering products from then send
29:43 - the error and the reason that I want to
29:46 - make that a hook is because on my
29:48 - checkout page I'm also going to be
29:51 - displaying information from the seller
29:53 - so let's do that
29:57 - and I believe that in here
30:01 - active byproduct
30:06 - cart seller okay
30:10 - so I just called it cart seller
30:22 - so let's do this and this is easy
30:26 - okay
30:27 - so the cart seller is actually going to
30:30 - be
30:32 - I'll say cart seller ID
30:36 - well what was this did it return a
30:38 - string
30:41 - yeah I think I want to return just their
30:44 - user ID
30:47 - I mean I can return this but
30:50 - no need
30:52 - so cart seller ID
30:57 - now under hooks I'm going to make a new
31:00 - hook get rid of you first of all and I
31:03 - will say
31:05 - that this is a typescript file named use
31:08 - cart seller ID
31:11 - and let me just get
31:15 - I don't know
31:17 - I just want some boiler play right now
31:20 - so I'll say use core logo whatever
31:24 - and okay so refactor rename I'm gonna
31:28 - say that I'm creating a hook use card
31:30 - seller ID
31:32 - and this is not going to take any
31:35 - parameters
31:44 - use card seller ID
31:46 - and this is either going to return let's
31:49 - see a number or null
31:55 - so basically if you don't have any items
31:58 - in your cart it's going to return null
32:01 - otherwise if you do have items it's just
32:04 - going to return the ID of the seller
32:06 - who's ever selling those items okay
32:10 - so now what we can do is we can just get
32:12 - cart products
32:15 - from the cart product selector
32:19 - products
32:33 - all right and then we can use this same
32:35 - logic where
32:38 - um
32:42 - probably just something like this
32:55 - all right so we are saying that
32:59 - uh car product list
33:12 - all right so the card product list is
33:13 - just object values our car product now
33:16 - if there are no
33:19 - basically
33:21 - car product list
33:25 - the property seller doesn't exist on car
33:27 - product
33:30 - it's interesting
33:36 - types cart product
33:40 - oh wait it's car product
33:43 - oh wait I'm looking on my wrong thing
33:46 - here so cart
33:49 - products
33:51 - all right here we go so cart products
33:54 - have a product
33:56 - in that product
34:04 - ID like this so This should work let me
34:06 - just read through it one more time okay
34:09 - so using this Hook is called use cart
34:13 - seller ID
34:15 - we are first looking at all of our cart
34:18 - products
34:19 - then we're just getting pretty much the
34:21 - uh cart products themselves rather than
34:23 - the keys and we're saying that
34:27 - if there is anything in your cart then
34:29 - just
34:31 - get the first one and get the product
34:34 - sellers ID from it
34:36 - otherwise just return null
34:40 - and that should work
34:42 - okay and now
34:45 - uh close out of you
34:48 - all right
34:51 - so now in my hooks
34:55 - go ahead and bring this in available all
34:57 - of course
35:03 - seller IDs card seller ID
35:07 - okay
35:10 - so now in my hooks I can use
35:14 - use cart seller ID
35:31 - now let me just log this out to see what
35:34 - I'm working with
35:36 - all right
35:37 - so now on this page we should be logging
35:39 - out the cart seller ID
35:42 - and that is the wrong app so let's
35:45 - okay first of all let's see what we got
35:48 - in my cart
35:50 - so I got a product from
35:53 - I got tnb mug
35:55 - and tnb mug is being sold by Amy and Amy
36:04 - if I can find the users is user two
36:09 - so when I go here it should log out user
36:12 - two
36:15 - all right beautiful
36:18 - and now let me just remove it from my
36:21 - cart and it should say no awesome add to
36:24 - cart
36:25 - two beautiful
36:27 - all right so now what we can do is we
36:30 - can compare the product being added to
36:33 - the cart seller ID
36:41 - okay okay
36:45 - and that is
36:49 - product ID
36:51 - yeah
36:58 - Actually I don't even need that what am
36:59 - I doing here
37:10 - okay
37:15 - okay
37:21 - okay
37:31 - products
37:32 - all right so this is the product that I
37:34 - want
37:39 - okay
37:42 - so I will say and also this
37:51 - you know add a car click if there's no
37:53 - ID
37:56 - or no product
37:59 - okay let me do this when you're adding
38:01 - to cart
38:03 - there's no product return and now for
38:07 - the product I can just use the product
38:09 - ID
38:11 - and when you add a card let me just log
38:14 - out the product
38:18 - make sure nothing's breaking
38:23 - all right so when you add to cart we're
38:26 - going to log out the product
38:28 - and for the product seller this is
38:31 - product seller ID this is the property
38:34 - we want to pluck off
38:36 - to compare
38:44 - cons product seller ID equals product
38:47 - Dot seller.id
38:50 - and now what we are going to say
38:57 - is something like
39:01 - if product seller ID
39:05 - is not equal
39:07 - to the cart seller ID
39:13 - and we can actually just do this to
39:14 - clean it up
39:16 - then what we want to do
39:19 - is we want to toggle this cart warning
39:22 - modal
39:24 - and
39:26 - and then we can just return from there
39:29 - because what we'll do is we'll have all
39:31 - our smart logic in the Moto itself
39:34 - and while also pass in
39:40 - the product
39:42 - yeah that should work
39:48 - [Music]
39:51 - and then this won't go through
40:03 - okay
40:06 - yeah just trying to see if uh
40:10 - like after kind of just thinking what
40:14 - happens in here
40:16 - and if we should just return or let the
40:19 - logic fall through
40:20 - I mean you could write it either way
40:25 - just be tricky this conditional return
40:27 - or not so what I'm thinking is we might
40:29 - have logic similar to this in the cart
40:31 - modal because the pending on if they
40:35 - click submit in other words yes they do
40:37 - want to create a new order then we're
40:39 - going to need to have that logic where
40:42 - we delete all the existing products
40:44 - and then add the new products in the
40:46 - cart
40:48 - okay
40:51 - but now let's do this off the bat
40:54 - so I have a product from Amy in my cart
41:00 - now I'm gonna go ahead and add this one
41:02 - from Bob and I get this warning looks
41:05 - good and just to test things out I wanna
41:10 - have another product from Amy so let's
41:13 - say that this mushroom book we'll just
41:15 - change that to be sold by Amy as well
41:19 - this mushroom book is now being sold by
41:21 - Amy
41:26 - all right so I have one product in my
41:28 - cart which is this coffee mug and then
41:30 - this other mushroom book I should be
41:32 - able to add this
41:34 - just like that
41:36 - I can remove it I can add it no problems
41:40 - now the on-prem comes when I try to add
41:42 - something from Bob
41:44 - this is when I get swearing this product
41:46 - has different seller than the existing
41:48 - items in your cart would you like to
41:49 - create a new order okay
41:51 - so now we are getting somewhere
41:55 - so now what we can do
42:00 - first have a button on here
42:07 - let me see if I can just steal it from
42:08 - one of my other models cart warning a
42:10 - core modal
42:14 - I want a form
42:15 - create wallet
42:18 - the form two isn't it nope okay
42:24 - so here why do I have a button container
42:30 - oh just to have some of that
42:33 - actually this all works
42:45 - alright so that's going to allow me to
42:47 - add a button in
42:49 - and that's going to come from here
42:52 - and check it out so this
43:02 - all right
43:17 - and for this button I just said yes as
43:20 - well okay
43:22 - so now let me actually stick this in a
43:26 - div
43:34 - Okay so
43:36 - uh when we click add to cart now
43:40 - it says this product has different
43:42 - cellular than existing items in your
43:43 - cart would you like to create a new
43:45 - order
43:46 - now first of all this model is way too
43:49 - wide freaking me out
43:50 - so let's instead of 480 let's go 360.
43:55 - all right that's much better
43:58 - and aside from that I also want to bump
44:01 - up this margin even though
44:03 - I said that this is mainly for
44:13 - all right let's go with 32.
44:19 - top bottom container 32.
44:22 - and what's this great wallet model I
44:24 - just wanna
44:28 - oh yeah that's if I don't have one
44:31 - so let's test that with Bob actually Bob
44:34 - that was bacon
44:38 - all right so wallet whenever you're
44:40 - creating a new wallet you get this
44:41 - button this actually doesn't look that
44:43 - bad boom
44:50 - yeah yeah
44:51 - [Music]
44:54 - all right
44:56 - actually let's uh do this
44:59 - I am going to revert this
45:01 - to 16 even though I don't like the looks
45:04 - of it but but because
45:08 - it's consistent that way
45:10 - it'll kind of act as a visual indicator
45:12 - to
45:14 - fix this okay
45:16 - so where am I at I have two products
45:19 - from Amy in my car I'm gonna remove this
45:21 - one at it okay
45:22 - so I have products from Amy in my cart
45:24 - now I want to add this one from Bob it
45:26 - says this product has a different seller
45:28 - because you have products from Amy
45:30 - you're trying to buy from
45:32 - and all of a sudden you say you want to
45:34 - buy from Bob now so like what's the deal
45:36 - yo
45:38 - do you want to change it yes and I need
45:40 - to have a click Handler for this okay
45:44 - so if they have if they say no or they
45:47 - don't want to then they can just click
45:48 - away or click this x I don't think I
45:50 - need like another cancel button here
45:53 - but if people get confused we can always
45:54 - change that later on
45:56 - point is
45:58 - I need to click Handler now to say
46:01 - handle button click
46:15 - all right now what's going to happen
46:19 - is if they click yes then it's going to
46:22 - call this function and what this
46:25 - function is going to do is first
46:28 - it needs to delete all
46:32 - of the existing items in your cart
46:38 - and then after
46:40 - it needs to
46:43 - add this
46:45 - basically create this car product
46:52 - actually it's logic very similar to this
46:55 - now
46:57 - what we also need to do is we need to
47:00 - pass in either a product
47:02 - or product ID and let's just pass in
47:05 - product ID
47:14 - because that will be easier
47:28 - product ID is a number
47:34 - yeah baby baby okay
47:36 - so on this
47:41 - yeah so I'm going to be passing in the
47:43 - product ID which is going to be coming
47:44 - from this product
47:54 - okay so product ID equals product.id
47:59 - and what I can also say since this
48:02 - product
48:04 - we allow it to be undefined
48:10 - what I'm going to say
48:16 - is to keep it simple
48:22 - if you don't have any product or just
48:24 - return null
48:27 - and actually in the left and right
48:30 - I don't know if we can figure this out
48:32 - no
48:39 - and just to kind of confirm everything
48:42 - I'm just going to log this out right now
48:43 - although we're going to be getting a
48:45 - little bit more fancy with it in the
48:46 - future
48:47 - but
48:49 - let's say that
48:52 - okay let me refresh this
48:54 - all right so now when I click add I'm
48:56 - it's a cart first gives me a warning now
48:58 - if I do want to override it
49:00 - and yes it's going to say just log out
49:03 - 16 right now
49:04 - but eventually uh what we're going to be
49:06 - doing is emptying the cart first and
49:08 - then once that's done we're going to be
49:10 - creating a new cart product with only
49:12 - product number 16 in it
49:15 - so
49:20 - we're probably going to do this the
49:22 - inefficient way first which is just
49:25 - let's say we have three different
49:27 - cart products we're going to iterate
49:30 - through each one
49:31 - and make a separate deletion request to
49:34 - the back end
49:36 - because we don't
49:38 - have any logic to just wipe out our cart
49:40 - right now
49:44 - and I'm kind of just thinking ahead to
49:46 - that logic because what we can do is we
49:48 - can make another endpoint on the back
49:50 - end
49:50 - to kind of simplify it just until two
49:53 - operations one to bulk delete your
49:56 - entire cart so you have basically wipe
49:59 - out all your products in one request so
50:01 - you don't have to like make three
50:03 - different requests one for deleting each
50:04 - card product
50:06 - another thing that we can do
50:08 - is instead of having that end point and
50:11 - then another one
50:12 - that we trigger right after to create
50:14 - this we can just do it all in one to
50:17 - basically say overwrite my cart with
50:20 - whatever product or products I pass in
50:24 - and that'll shrink that down to one
50:26 - request
50:29 - however
50:35 - yeah and I'm probably going to get
50:38 - yelled at because I have a weight inside
50:40 - a for Loop which is never good
50:45 - so what do we want to do let's think
50:48 - about this let's think I mean eventually
50:50 - we are going to need one of the later
50:52 - two systems I'm just thinking for MVP if
50:55 - we want to build this out right now
51:01 - yeah
51:03 - empty cart
51:06 - I think we do want this
51:08 - because then we can just call empty cart
51:10 - and then create car product
51:17 - so let's do it
51:19 - yep we're gonna do it we are actually
51:21 - going to do it oh man so pumped up okay
51:24 - now uh let's go to shop uh views car
51:29 - products serializers cart product hello
51:31 - back in haven't seen you in a while
51:34 - um
51:35 - and I'll just say create
51:40 - a new endpoint to empty your cart and
51:43 - we'll see what it comes up with
51:57 - to empty their cart
52:01 - there's my serializers and there's my
52:04 - views
52:11 - you can create a new
52:13 - endpoint called empty carts
52:17 - code
52:20 - for the currently authenticated user
52:22 - added this code to your product view set
52:23 - okay
52:30 - so make her post request
52:33 - did the URL path empty cart
52:39 - and I don't really think I need that URL
52:41 - path but let's see so empty cart
52:48 - should go right here in the action
53:04 - all right
53:10 - and let me just see if we had this
53:11 - action somewhere else
53:19 - all right so we had it in deposit
53:27 - yeah I don't think I need that uh URL
53:30 - path
53:36 - let's see
53:40 - let's see well first let's just call
53:41 - this straight up
53:43 - so that would be cart products slash
53:45 - empty cart
53:47 - and then I can just uh
53:56 - print user cart products and I actually
53:58 - want to rename this the car products
54:04 - okay so hopefully whenever I make a post
54:08 - request of this
54:10 - so post requests the car products empty
54:13 - cart
54:14 - what I should see
54:17 - clear my buffer
54:21 - shrink this so we can see what's going
54:22 - on here
54:25 - so what I should see
54:27 - yes is a query set of my cart
54:31 - and now they should be emptied
54:35 - on the back end
54:38 - so car products no more beautiful
54:42 - and now let me
54:44 - what
54:49 - hmm
54:54 - is that it's okay all right so now let
54:57 - me just try to do this without the URL
54:59 - path detail false you don't need it
55:05 - all right now on the front end
55:09 - let me go ahead and just
55:14 - all right so I'm going to be adding this
55:19 - that's interesting
55:21 - oh
55:22 - okay so what this is doing is
55:26 - erroneously throwing up this warning
55:28 - because
55:30 - this check right here where it's saying
55:33 - if product seller ID which is Amy
55:36 - in this case I'm buying from Amy so
55:39 - seller id2 if it's not equal to the cart
55:41 - seller which is null then it's going to
55:44 - throw this warning but I also need to
55:46 - check
55:48 - basically write something like this
55:53 - all right so if cart seller
55:56 - and
56:00 - all right so if there is a cart seller
56:03 - ID and the cursor ID is not equal to
56:06 - this person then you get the warning
56:11 - sure that logic is refreshed and all
56:13 - right so that looks a little bit better
56:15 - all right so now just trying to add with
56:18 - Bob that's when you get the warning good
56:20 - good and what was I going to do now oh
56:24 - yes so we updated the back end to remove
56:26 - that endpoint explicitly
56:30 - in The Decorator and now let me just
56:32 - clear this
56:34 - make sure everything's working still
56:42 - okay looking good looking good great
56:51 - so now I have this logic let me go ahead
56:55 - and
56:59 - clean up my imports
57:11 - great great great great great great
57:13 - great great great great
57:16 - and okay
57:19 - then I will say
57:21 - first of all thank you Chad GPT for that
57:24 - appreciate your help
57:25 - and now let me just give you some more
57:29 - work to do since that's kind of your
57:31 - thing like working and okay so that was
57:34 - cart products right yep
57:40 - now let me say
57:44 - great now create an API function
57:53 - now creates an API
57:59 - and now creating
58:02 - and API and dispatcher function
58:08 - for that endpoint
58:11 - and these are my API functions and let
58:13 - me show you my dispatcher functions so
58:16 - you can see my standard
58:21 - [Music]
58:25 - we should be good uh write this Logic on
58:28 - the front end
58:29 - okay
58:30 - make a new function called empty card
58:32 - that makes a post request the empty
58:33 - carts
58:35 - and this is correct
58:40 - any data back
58:43 - okay
58:46 - and okay I'm just kind of thinking ahead
58:48 - because some stuff might get a little
58:50 - bit tricky but EFG okay
58:54 - so this is going to make our request
58:56 - back in cart products
58:59 - with empty cart
59:00 - and you're basically not going to get
59:03 - anything back
59:07 - and then what we can do actually this
59:10 - might be easier than I thought
59:14 - because we can just set
59:17 - yeah we don't even need to do this
59:20 - okay
59:23 - ABCD EFG okay so empty cart as empty
59:28 - carts
59:29 - and then
59:38 - hmm
59:43 - yeah let's do this
59:46 - all right when I call empty cart what
59:48 - I'm gonna do
59:50 - is I'm gonna call set car products
59:54 - and this is pretty much gonna overwrite
59:56 - your state and what I want to do is just
59:58 - set it equal to an empty list
60:02 - and that should work
60:05 - so basically empty out all my cart
60:07 - products on the front end after this
60:09 - request comes back
60:13 - and then should be good so
60:18 - let's do that let's do that
60:22 - gonna put it in a try catch because I
60:25 - want
60:28 - to do a couple things okay
60:32 - okay first we're gonna need dispatching
60:33 - here
60:35 - and our toasts
60:37 - I like toast and I like dispatching
60:40 - things cute or
60:43 - what am I doing here
60:44 - to you
60:47 - and then types gonna need that dispatch
60:49 - thing going on and then what do you got
60:52 - some in here
60:55 - optimize you later and check it out
60:59 - so I'm going to be dispatching some
61:01 - stuff so let me just steal you
61:08 - what else am I going to be doing I'm
61:10 - going to be using logic that looks a
61:12 - little bit similar to this
61:16 - and then I'm going to be sticking
61:18 - clothes in there
61:28 - so for the product this is going to be
61:30 - the product ID quantity one for now
61:34 - and all right
61:37 - and where are you coming from dispatcher
61:39 - is an enums
61:46 - dispatcher dispatcher
61:51 - great car product and also
61:54 - we got you now
61:57 - which you can empty the cart okay
62:00 - so
62:04 - what I can do
62:13 - error
62:15 - updating cart
62:23 - so now what I can do is this
62:27 - first going to whenever they click that
62:31 - they want to I'm going to go ahead and
62:34 - empty their cart
62:35 - and then
62:38 - after this we're going to take the
62:40 - product that they are trying to add
62:42 - which is from the new seller and then
62:44 - add it to their cart
62:46 - and then give them a little toast that
62:48 - says product added to cart and then
62:49 - close the modal
62:53 - and then this logic doesn't get ran
62:55 - because we break out right here
62:59 - then I think we're good to go
63:09 - all right are we looking good to test
63:11 - this let's find out
63:15 - all right I'm buying
63:18 - I got a product from Amy in there
63:21 - and let me just make sure my back end
63:22 - synced up
63:24 - all right so I'm shopping I'm having a
63:26 - good time I'm a shopaholic I bought
63:28 - something from Amy and now I want to buy
63:31 - this mushroom book which is also from
63:33 - Amy so no issues there
63:35 - but now what I want to do is I want to
63:37 - look at this and oh this is from Bob so
63:39 - let me try to add this to my car too and
63:42 - wait a minute this product has a
63:44 - different seller than the exist some
63:45 - items in your car
63:46 - would you like to create a new order now
63:48 - if I close and nothing happens then
63:50 - nothing happens of course just got those
63:52 - two items from Amy
63:54 - however if I do
63:57 - hit yes then what's going to happen is
64:00 - I'm first going to empty my cart car
64:02 - emptied and then I'm going to add this
64:04 - item from Bob in my cart so now I only
64:06 - have this one item
64:08 - from Bob
64:10 - beautiful this is great this is
64:14 - absolutely great okay
64:17 - and then our back end is updated
64:20 - efficient too
64:22 - so I'll say empty cart endpoint
64:33 - and technically we can make this process
64:36 - even more efficient by combining this
64:38 - empty cart logic with
64:42 - this endpoint but
64:44 - that's just a little bit too complicated
64:46 - I think a little convoluted
64:49 - and that little boost in performance
64:51 - benefit I just don't really think it
64:54 - outweighs the um
64:56 - well anything really
64:58 - the readability the understandability so
65:00 - on and so forth this is pretty intuitive
65:03 - which I like
65:05 - I mean who doesn't
65:08 - great great great great great great
65:11 - and also great okay
65:15 - so now actually that we got that taken
65:18 - care of
65:20 - I believe what we can do is cross
65:25 - another thing off the checklist across
65:29 - another thing off of the checklist all
65:32 - right five days away but we were looking
65:33 - good 300s left and now
65:36 - actually I think that takes care of all
65:37 - the logic on this page it doesn't seem
65:39 - like there's anything left to do remove
65:41 - items from the car add it to cart
65:44 - and uh yeah I think we are now
65:48 - ready to write our checkout logic
65:52 - so got items in your cart ready to check
65:54 - out and let's see what that's going to
65:55 - look like
65:56 - so you're shopping you're shopping
65:58 - you're loving it you're loving life
65:59 - adding items
66:01 - getting Christmas presents for your
66:03 - family and then oh you're ready to check
66:04 - out and it's gonna look like this
66:10 - so
66:12 - first of all
66:14 - first of all let me push up this
66:16 - so we can call this a day so
66:20 - oops
66:24 - npm Romans that make lint
66:30 - and then I'll do a quick review on all
66:32 - this and then kind of uh
66:35 - also something here where I'm parsing
66:37 - the product ID multiple times can
66:40 - probably make that more efficient too
66:41 - but
66:46 - so for this
66:48 - what we did is we created a new empty
66:50 - cart endpoint
66:54 - looking good
66:58 - created git product
67:03 - so we can get the individual product
67:04 - whenever we go to The Details page
67:07 - empty cart dispatcher function
67:10 - empties on the front end
67:15 - the product dispatcher set the product
67:20 - use car seller ID so we can have that
67:22 - reusable logic
67:24 - I'm also thinking now we may want to
67:26 - change this to cart seller
67:30 - and the reason for that is because
67:34 - we're going to need to display their
67:36 - information on that checkout page but
67:39 - this is good for now you can always
67:40 - change it change it software nice and
67:43 - soft
67:44 - okay uh use calculator ID this logic is
67:48 - looking good
67:51 - uh this is more efficient
67:53 - it's looking great as well
67:57 - you okay
68:00 - product ID
68:02 - if they want to overwrite their cart
68:03 - then they do so by emptying it then
68:06 - adding one new product
68:13 - my styling is looking I good enough for
68:16 - now and then
68:20 - this is looking good too
68:23 - so this is my uh product Details page
68:28 - and we're fetching the products
68:31 - off the bat which is good
68:34 - checking some housekeeping things
68:37 - determining if we should display the
68:39 - modal
68:42 - and getting the products ID
68:51 - good good in the neighborhood okay
68:55 - so I'll say um
68:57 - cartel logic completed
69:07 - we are look
69:09 - looking I am uh
69:12 - yeah I feel good about this pace that
69:14 - we're on
69:15 - I mean a lot of work to do still
69:18 - but let's see okay so the checkout page
69:21 - and then the buyer in the seller orders
69:23 - and these are actually kind of similar
69:25 - they I believe they use the same
69:28 - um component
69:30 - but either way I'm gonna
69:32 - go to the bathroom and then I'm gonna go
69:35 - grab a refill of coffee and then we'll
69:37 - get started on this page
69:40 - and I am back all refreshed and okay
69:45 - so for this page what I am thinking is
69:49 - first
69:51 - yeah we can kind of follow the same flow
69:53 - kind of just style all the UI elements
69:57 - and then once we kind of have everything
69:59 - on the screen in the basic layout set
70:02 - then we can start making everything a
70:03 - little bit more intelligent
70:05 - until we get to this final place order
70:08 - button which is kind of the goal of
70:10 - everything
70:11 - but in order to place an order of course
70:13 - need our cart products working we need
70:15 - to be able to select an address so on
70:18 - and so forth
70:20 - and also let me actually just see
70:24 - if I delete this
70:27 - deleted
70:30 - okay just get this button that says
70:32 - select address
70:35 - okay
70:37 - all right so let's
70:41 - go ahead and just start with this basic
70:43 - layout and then we'll probably work on
70:45 - these
70:45 - from kind of left to right okay
70:48 - so this page
70:51 - is a shop page called buy checkout
70:58 - all right and now in 10B OS
71:03 - Pages by checkout
71:07 - all right and let me see what the layout
71:09 - is well this is a lot of logic okay
71:12 - so we have our
71:20 - interesting
71:23 - okay
71:27 - so in our main container what would be
71:30 - looking like
71:32 - so we have the left section
71:35 - and what do you consist of left top
71:39 - Edge's particular participants and then
71:42 - products okay
71:45 - so the left section is basically this
71:47 - right here your address your
71:49 - participants and your products and the
71:52 - right section is this total
71:58 - yeah so let's get started by just
72:00 - rendering the left and the right
72:07 - so first of all what's the container the
72:10 - container is a grid with a gap of 12
72:13 - grid columns so the left is going to be
72:15 - basically the right is going to be 30
72:17 - percent and the left is going to be Auto
72:20 - height of 100 width of 100
72:26 - yeah that looks good
72:31 - okay so first for R by checkout page
72:35 - our container is the same and then let's
72:38 - just get the left and right
72:41 - yeah we'll just do this for now so left
72:46 - and then the right
72:50 - all right so we have two columns the
72:52 - left and the right to the left is the
72:54 - First Column where the Overflow y Auto
72:57 - array is the second column
72:59 - and then in here we just call render
73:03 - left and render right
73:10 - and render left
73:26 - and I'll do the same thing for render
73:28 - right
73:40 - render left
73:43 - surrender right all right so this as
73:47 - long as we're running
73:49 - should give us
73:51 - two columns a left and a right looking
73:54 - good all right
73:56 - so next up let's start making these
73:59 - basic sections so the left top
74:03 - consists of an address and participants
74:05 - section
74:07 - and let me just go in here
74:10 - see left top render address
74:15 - and we have a heading and a line under
74:17 - each of these all right
74:20 - so let's get our heading in line
74:25 - so the heading is this
74:30 - and the line
74:33 - we have our line component
74:38 - from components line
74:41 - and it's just a styled version of that
74:43 - let's give it a little bit of a margin
74:45 - bottom
74:48 - and then let's get our left top as well
74:53 - so the left top is also a grid
74:58 - now it's flexed with a gap of 32
75:01 - and a margin bottom of 32 okay that
75:03 - looks good
75:05 - all right so for the left top
75:10 - we have rendered dress and render
75:12 - participants so left top render address
75:14 - render participants and then we have
75:16 - rendered products right here
75:18 - underneath
75:20 - so for render address
75:23 - what we can do
75:33 - just
75:35 - give a heading and a line for now
75:45 - address
75:47 - without it
75:55 - all right so for my address
76:01 - I can just save this render participants
76:05 - what are you gonna be
76:09 - all right keep you lean as well
76:11 - Elemental peqr
76:20 - and my participants how were you styled
76:23 - basically the same
76:33 - all right and then products should we
76:36 - frame you out yet or not
76:42 - for rendering products yeah
76:48 - okay
76:59 - all right this should give us our
77:01 - scaffolding for everything but let's see
77:04 - what we got okay so address participants
77:07 - products
77:09 - section all empty for now
77:13 - and then on the right
77:16 - we are going to have the total
77:21 - and let's see what that is looking like
77:24 - so on the right
77:27 - yeah we have total
77:35 - okay
77:38 - so let's look at this okay
77:43 - so on the left we have address
77:45 - participants and products in on the
77:47 - right we're gonna have the total right
77:49 - here so now let's just go ahead and
77:52 - start actually like building out these
77:54 - sections of one by one starting with the
77:58 - address section
78:02 - now
78:04 - how is this going to work
78:10 - so
78:11 - if you have an address you can select it
78:13 - just like this and let me actually add
78:15 - one so Bucky
78:18 - uh Bucky Roberts is my name
78:22 - address I live at One Two Three Maple
78:24 - Lane
78:25 - apartment
78:26 - 2000
78:28 - 200 whatever City
78:31 - let me see Queens
78:36 - state New York one two three four five
78:39 - is my ZIP code in my country is
78:42 - let's do uh
78:50 - Nigeria
78:52 - all right so this is an address now when
78:54 - I go to my carts page I should see it
78:57 - selected so this is another interesting
78:59 - thing too
79:00 - if you only have one address
79:03 - then in tnbos I defaulted to that option
79:08 - however if you have multiple addresses
79:14 - then you should see a selection page in
79:17 - here
79:18 - so let me actually go ahead and make
79:19 - another address I'll say my full name is
79:22 - Bucky
79:24 - Jones
79:27 - address is
79:30 - 678-678 uh monkey Lane
79:35 - address two I don't have one
79:37 - but it's required interesting
79:40 - apartment 500
79:42 - City
79:45 - Pittsburgh PA
79:47 - one two six seven eight in this country
79:51 - is in the Philippines
79:56 - all right address added also a little
79:59 - fun fact I'm actually 1 8 Filipino
80:02 - I don't know if anyone cares but
80:04 - okay
80:06 - so this is how it's gonna work
80:08 - Maple Lane
80:09 - actually monkey Lane
80:13 - Maple Lane
80:15 - all right looking good so that's how the
80:18 - address selector is going to work so now
80:21 - let's just go ahead and build that out
80:25 - so by
80:28 - how am I going to set this actually
80:30 - I'll probably just have this in state
80:33 - yeah I think that'll be the best
80:37 - but then
80:39 - if the user navigates away and comes
80:41 - back
80:46 - do we want to keep it there
80:51 - and
80:54 - a good question
80:56 - so let's say that I have something like
80:59 - monkey Lane in here
81:02 - and then I buy and I come back if that's
81:04 - in state then this component gets me
81:06 - remounted and forgets what's in there
81:10 - but is that really an issue
81:14 - it would probably be better to keep that
81:17 - in
81:21 - yeah probably be better to keep that in
81:24 - Redux
81:28 - so in that case
81:32 - let's do that and we can stick it in our
81:34 - manager
81:36 - so we can just store
81:38 - the ID
81:40 - of the active address
81:45 - I think that would be better okay
81:47 - so I'm not allowed to just uh talking
81:49 - and not a lot of coding so far but I
81:51 - kind of just want to think through these
81:53 - things make sure I get the right design
81:54 - pattern to avoid having to uh rewrite
81:57 - things
81:58 - so what I'm going to do is I'm basically
82:01 - going to be creating this widget but I'm
82:05 - going to be storing this in Redux and
82:08 - that is because if the user
82:10 - you know navigates away from the
82:12 - component or comes back or logs out of
82:13 - the site and comes back then since we uh
82:16 - persist all that
82:18 - then should be good to go
82:21 - yeah that's the experience that I would
82:23 - want okay
82:25 - so with that said let's actually just go
82:28 - ahead and maybe build this component
82:30 - first
82:32 - yeah that might be easier and then we
82:34 - have something to kind of test our Redux
82:37 - logic out with
82:39 - so what was this render address select
82:43 - modal
82:49 - okay
82:51 - so this address select modal
82:57 - I see and then you pass the Handler
82:59 - right into it
83:02 - and we aren't going to need to do this
83:04 - because this model itself
83:09 - can just
83:12 - spatulate to Redux directly
83:15 - okay
83:17 - so this is my address select model
83:24 - you know what let's actually just
83:30 - copy this whole thing
83:34 - yeah okay
83:36 - so I'm first going to build out the
83:38 - address select the model and then we'll
83:40 - create a button to toggle it
83:42 - so let me just copy this
83:47 - and in my modals
83:54 - we can do this and then the styling
83:57 - let's see
84:02 - [Music]
84:03 - view review okay
84:10 - so The Styling looks good modal
84:14 - empty text
84:15 - button
84:22 - button with a hundred button container I
84:26 - don't have
84:29 - but I have a margin bottom on these
84:31 - cards
84:32 - and the model will just play Flex Flex
84:34 - column
84:41 - yeah it looks alright now
84:45 - now for the address select logic let's
84:48 - actually go into these
84:50 - um the individual cards themselves
84:53 - so the selected mix-in
84:55 - which is the state like that shade of
84:58 - green if it's selected
85:01 - looks alright for now I want to
85:03 - standardize a lot of these backgrounds
85:04 - and whatnot but for right now I'm just
85:06 - kind of getting everything taken care of
85:09 - um
85:11 - okay this is interesting too
85:17 - so this is my address select card
85:27 - first of all I don't have this package
85:31 - unify my types
85:46 - and let's see what's going on here so
85:48 - for each of these individual cards I'm
85:50 - going to be passing in an address
85:54 - is selected
85:59 - and then on click
86:04 - I do want all that logic
86:08 - okay
86:11 - now the thing I thought would happen
86:17 - is to use that address
86:20 - card again
86:23 - let's see
86:30 - yeah I'm wondering if I could reuse this
86:32 - dress card since it's pretty similar but
86:35 - I see now that it's not exactly the same
86:41 - all right so first of all let me just
86:43 - pluck everything off here
86:49 - and then
86:54 - address address 2 city state country you
86:57 - gotta
86:58 - okay
87:02 - so this is my address select card
87:05 - produce alerts my old one
87:13 - and then I'm going to be passing in an
87:14 - address for each one and is selected
87:16 - Boolean which basically says do you want
87:18 - to display as green or not
87:21 - and then an on click Handler which is
87:25 - basically in the parent element gonna
87:27 - toggle the selected end knots
87:31 - okay
87:35 - so with that said
87:44 - okay so this is good this is good
87:51 - now for my dress selected modal
87:55 - let's just
87:59 - clean a bunch of stuff up so you can
88:02 - find my types you can find my types
88:11 - all right I'm importing those cards and
88:14 - now
88:17 - whenever I use this
88:19 - this set address ID I'm not going to
88:22 - need because
88:24 - we can just
88:26 - dispatch that right to Redux which means
88:28 - I don't need this generic void function
88:30 - type or this prop that gets passed in
88:37 - now what I'm going to be doing
88:40 - is getting all my addresses for my store
88:43 - I'll just get the address of the list
88:57 - and selected address ID is equal to it
89:00 - not a string or null
89:02 - it's going to be equal to a number of
89:04 - Arnold
89:08 - and handle this is equal to number
89:19 - all right so this should be good but let
89:22 - me just see what's going on here okay
89:26 - so whenever you pop open that you want
89:29 - to select an address for your order
89:32 - then this modal is going to pop open I
89:34 - just select the modal
89:37 - and you're not going to need to give any
89:39 - props because it's going to contain all
89:41 - the information that it needs
89:43 - so basically it has the selected address
89:45 - ID
89:48 - and logic to set the selected address ID
89:53 - and then
89:57 - yeah you know what I don't think I want
89:59 - any of this logic actually
90:01 - because instead of this
90:04 - logic where you have to select one and
90:06 - then hit submit
90:08 - what I want to do
90:10 - is I can just have it when you select
90:12 - one it just updates Redux right away no
90:16 - need to like
90:17 - hit the submit button just
90:20 - edit it select one
90:22 - and then you're good to go
90:29 - yeah I think I want that logic
90:32 - let me just think through it one more
90:34 - time if you have one selected
90:39 - like what is the point of hitting the
90:41 - submit button if you can just open it
90:44 - select it
90:45 - and then close it
90:50 - I decided I don't like the submit button
90:52 - so
90:53 - what we can do
90:56 - here
90:59 - is get rid of this
91:02 - handle button click logic
91:06 - I would disabled State no anything like
91:09 - that
91:11 - now I do want to surrender content
91:13 - because we say if you don't have any
91:15 - addresses
91:18 - then what you're going to do is you're
91:20 - just going to say no addresses to
91:21 - display however if you do have addresses
91:23 - you're going to render these address
91:25 - select cards
91:28 - now these first of all get rid of this
91:31 - handle button click
91:33 - now
91:37 - surrender address select card
91:45 - don't need this
91:49 - okay
91:52 - so this address select card is also
91:54 - going to know itself if it's selected
91:59 - because it can just pull that data right
92:02 - from Redux basically compare the
92:04 - selected address ID to its own address
92:08 - ID
92:09 - so we don't need that
92:12 - so we don't need it selected
92:14 - so we don't need is selected
92:17 - and we'll just set the SQL to Boolean
92:20 - for now since this will determine the
92:22 - styling but basically instead of the
92:25 - parent telling the card if it's selected
92:27 - the card's going to be able to figure
92:28 - out itself
92:29 - now on click it doesn't need this either
92:32 - right
92:37 - because before
92:50 - so before the parent element kind of had
92:52 - to figure that out but now it doesn't
92:54 - need to
92:55 - this will simplify our logic as well
93:00 - all right so you don't need to on click
93:02 - Handler even though
93:09 - we are going to be adding click logic
93:11 - from you but you are going to be kind of
93:18 - flying solo on that okay
93:22 - so now
93:25 - let's see what we got going on here okay
93:30 - so this simplifies our component quite a
93:33 - bit
93:34 - um basically whenever we toggle open
93:37 - this address select model
93:41 - we are either going to render
93:43 - a bunch of address cards or empty text
93:46 - if we don't have any addresses
93:48 - now for each of these address cards our
93:52 - address select cards
93:55 - they get rendered inside this address
93:58 - select cards
94:01 - is good
94:03 - and they just have an empty click
94:05 - Handler for right now and they're also
94:07 - just all going to be styled as selected
94:09 - before we add any of that Redux State
94:12 - okay
94:14 - so now let's go ahead and pop this open
94:18 - and we'll do that here
94:23 - so we'll say address select model is
94:25 - open use toggle false
94:33 - all right so we're gonna need to use
94:34 - toggle to toggle the modal
94:38 - open and closed
94:41 - what else do we need we need that actual
94:44 - modal so we can render it
94:49 - so import
94:55 - the address select modal
94:58 - and then we can render it just like this
95:00 - render address select modal why did we
95:02 - split this out into its own function
95:13 - if this isn't open do this otherwise do
95:16 - this okay
95:21 - I think we can kind of simplify this
95:26 - yeah let's not use another function for
95:28 - this
95:32 - um and then we'll just follow this
95:35 - pattern
95:43 - something like this
95:50 - all right so
95:53 - if the address select model is open
95:58 - and what we want to do is we want to
96:00 - render the address select modal of
96:02 - course
96:03 - now the close Logic for this is toggle
96:06 - address select modal that's going to
96:08 - toggle the logic from open to close
96:16 - we need to
96:24 - what am I missing here uh or no
96:35 - mm-hmm
96:39 - okay
96:41 - so
96:42 - from here what we need is a button
96:51 - to trigger that modal and that is going
96:54 - to be in the render addresses right here
96:59 - okay
97:01 - so we're gonna have a button
97:04 - okay what's going on here
97:07 - okay
97:10 - so what this is saying is that we either
97:13 - have a button here or an address card
97:17 - depending on if we have an address
97:19 - selected
97:21 - but for now we don't have the ability to
97:25 - select an address really because we
97:28 - can't store any Redux so we're just
97:29 - going to render this button for now
97:36 - so let's do this
97:44 - this so we are going to import you you
97:46 - little button
97:49 - and address
97:51 - that is under the line that's when
97:53 - you're under a Content which is a button
97:55 - that just says select address
98:03 - toggle address select modals it's going
98:05 - to say select address and yeah should be
98:08 - good okay
98:09 - so now let's test this we have a button
98:12 - that says select address
98:13 - and we have no addresses to display
98:17 - because we just don't have any addresses
98:19 - yet right yeah no addresses okay
98:22 - so let me go ahead and add an address
98:30 - all right so I just added two addresses
98:32 - one for one two three Apple Lane and one
98:34 - for four five six bacon Ave
98:37 - now when I go to select addresses
98:40 - there we go so they both appear right
98:43 - there
98:44 - and also no
98:50 - that's interesting too
98:53 - so I get a little bit of extra padding
98:55 - on bottom here
98:58 - and that is because
99:03 - yeah both the last element
99:08 - both the last child and the overall
99:10 - modal have padding
99:16 - but that's good for now that's a styling
99:18 - issue
99:20 - okay
99:21 - actually we can't fix that oh that's a
99:25 - dress select model
99:30 - yeah worry about that later okay
99:33 - so now what we need to do
99:36 - is we
99:39 - need to store
99:45 - okay let's think about this so whenever
99:48 - we select an address we need to store
99:50 - the ID of that address in a Redux
99:54 - under
99:56 - the manager
99:58 - we can say
100:01 - we already have active address why do we
100:04 - have this what are you doing
100:11 - all right active address
100:14 - buyer justices okay
100:18 - so this active address is for whenever
100:22 - we are editing addresses
100:25 - so let's say active order address
100:34 - actually let's
100:42 - what would be a good name for this
100:45 - so first of all let's go to our uh
100:49 - Store look in our manager
100:52 - we already have active address
100:56 - and
100:59 - again that is for whenever you are
101:02 - editing addresses
101:04 - like I say I want to edit this then your
101:07 - active address is set to this
101:12 - you see and then basically the app knows
101:15 - that this is the one you're editing
101:16 - however what could be
101:18 - what's going on outside what could be a
101:21 - name for this maybe like default
101:26 - Maybe
101:27 - actually let's call it order
101:31 - active order address ID
101:35 - I think that's going to be the most
101:36 - intuitive even though it's kind of long
101:39 - so
101:42 - yeah so active order
101:46 - address ID
101:48 - and this is either going to be equal to
101:50 - a number which is going to be the
101:53 - address ID
101:56 - or null if you need to select one
102:01 - so active order address ID
102:05 - and then what we can also do
102:08 - is we can create a hook
102:10 - to ensure that this
102:12 - address ID
102:15 - to basically pull the um active order
102:18 - address from this and the reason for
102:20 - that
102:21 - instead of just tapping into Redux and
102:24 - pulling this directly whenever we want
102:26 - to use it in one of our components is
102:28 - let's say for example that we have an
102:31 - active address right here
102:33 - however then even though it's kind of
102:36 - like our
102:38 - uh active address ID stored in Redux
102:41 - let's say we go back to our address page
102:43 - and delete that address
102:45 - then instead of trying to like sync
102:48 - everything in Redux which is only one
102:50 - thing right now
102:51 - but I'm thinking it might just be easier
102:53 - to create a hook to kind of abstract
102:56 - that logic you know it might sound a
102:58 - little bit confusing but I'll show you
102:59 - what I'm talking about in just a bit
103:01 - so active order address ID
103:05 - active order address ID equals null
103:09 - and then okay
103:14 - so now what I want to do is I'm just
103:16 - going to reuse
103:19 - actually this might be pretty easy
103:22 - so first thing I'm going to do is just
103:24 - set this
103:25 - in Redux
103:27 - and that is in my modal
103:29 - address select model address select card
103:34 - then on click
103:35 - is where I want to do this
103:40 - I'm going to say update manager
103:42 - something like this okay
103:45 - so I'm going to need to use dispatch
103:47 - again and use dispatch from react Redux
103:53 - types I'm going to be using App dispatch
103:58 - and then I just want to use dispatch
104:07 - all right in this address yeah the idea
104:10 - isn't popped off yet but
104:13 - okay
104:18 - and I can actually just do this handle
104:21 - click
104:30 - all right so handle click whenever an
104:33 - address is clicked
104:36 - and this is going to be the click
104:38 - Handler for it
104:39 - and what do we want to do when an
104:42 - address is clicked
104:43 - what we're going to do is we're going to
104:45 - update the active order address ID
104:48 - to just be the address ID and we can
104:52 - kind of follow our same pattern
104:54 - and set it equal to this
104:59 - and now for the is selected what we can
105:02 - say is
105:06 - and we probably want to create a
105:08 - selector
105:10 - but either way we can test this logic
105:12 - out first so let's check it out
105:15 - all right
105:16 - so in my Redux state
105:20 - I'm going to select this
105:23 - and it's going to update my manager to
105:26 - say
105:27 - where are you at okay
105:29 - active order address ID is number eight
105:31 - which is apparently Apple Lane
105:34 - then when I click this one it updates to
105:36 - number nine click this one
105:39 - updates to number eight again all right
105:41 - beautiful
105:42 - so now what I want to do
105:45 - is I want to say you are selected in
105:48 - other words you're green only if
105:51 - your ID matches this one right here
105:55 - so how do we select that data or how do
105:58 - we pull it from Redux
105:59 - well what we can do is we can first look
106:02 - at our selectors
106:06 - and okay we can get manager
106:12 - this might be the easiest easiest way so
106:14 - let's do this and then see kind of what
106:16 - we're working with
106:17 - for selector state
106:21 - I'm going to get manager
106:26 - manager if you
106:29 - selector State Elemental p
106:32 - should know my ABCs by now okay
106:36 - so you are selected if your ID
106:40 - is equal to the manager's active order
106:44 - address ID
106:51 - now this should
106:54 - okay this is interesting as well so
106:57 - if you select this one it updates in
106:59 - redox and since this component's address
107:03 - ID matches this one it's selected and
107:07 - then if you do this
107:10 - then that one selected however the logic
107:13 - that I also want is right now it's just
107:15 - clicking it to set it I want to say if
107:18 - it's already selected and you click it
107:19 - then just go ahead and set it equal to
107:21 - null
107:23 - so
107:25 - what I can do is this
107:29 - let me make a constant
107:35 - I'll say is selected if the ID
107:39 - equal to this
107:41 - then is selected I can just pass it
107:43 - through here
107:45 - and now for the value
107:51 - what did I say here
107:56 - I just select model
108:03 - something like this
108:09 - all right I'll say const value equals if
108:13 - it is selected
108:15 - and you clicked it again then you're
108:17 - going to be setting equal to null
108:19 - otherwise if it isn't selected then just
108:21 - set it equal to the ID
108:26 - that should give me my toggle off logic
108:30 - select address if it's selected
108:34 - okay that's cool so you can toggle it on
108:37 - and you can toggle it off looking good
108:43 - great okay so now what we need to do is
108:47 - if we have
108:49 - in
108:51 - active order address ID in here
108:54 - we are going to be making a hook to get
108:57 - the related address object which is in
109:00 - this case number eight
109:02 - we see basically one two three Apple
109:05 - Lanes is this one
109:06 - and then if we do have an address object
109:09 - we are going to display it right here
109:13 - and for that hook we will call
109:17 - use
109:19 - active order address
109:23 - okay
109:25 - use active order address looking good
109:29 - so let me
109:31 - actually let me stop in uh
109:34 - take a five minute break then I'll come
109:36 - back to that
109:38 - all right so now let's go ahead and
109:40 - build out the active order address hook
109:43 - so use active order address and that is
109:46 - going to be in my hooks
109:49 - and I'm gonna say a new typescript file
109:52 - called use active order address
109:57 - all right and now you my friend
110:03 - are
110:05 - where can I steal you from
110:11 - and something like this okay
110:21 - this is interesting
110:25 - actually that's very similar to what I
110:27 - wanted to do okay
110:29 - yeah this is great okay so use active
110:32 - order address let me get your name
110:34 - refactor rename this hole to you
110:39 - and instead of the wallet you are going
110:42 - to return
110:46 - let's just do this the hard way
110:50 - all right
110:51 - so use active order address is going to
110:54 - return an address or null
110:57 - and then in order to do this
111:03 - what we're gonna do
111:07 - is we're first gonna get your addresses
111:16 - and then we want to check on the manager
111:18 - for this active order address ID okay
111:23 - so
111:25 - if you have an active order address ID
111:31 - then use that
111:34 - to look up
111:43 - the address from that and if you have
111:46 - that to return it otherwise return null
111:50 - and we can pretty this up okay
111:58 - okay so does this work okay
112:02 - so use active order address is going to
112:04 - return an address or null if you have
112:07 - something set for your active order or
112:09 - just ID then try to look it up using
112:13 - or try to use that
112:15 - to find the address
112:18 - and if you can find it then return it
112:23 - let me just make sure this is the same
112:25 - logic
112:26 - yep otherwise return null
112:31 - and then even if the user deletes or
112:34 - they set an address as your default and
112:37 - then deletes the address then this will
112:40 - return null and we won't be able to
112:42 - place the order which is the logic that
112:43 - we're going for okay
112:45 - so now in the hooks let's say use active
112:48 - order address
112:58 - okay so use active order address gives
113:01 - us that logic and now what we can do
113:03 - back in our checkout
113:05 - is in our hooks
113:09 - what we can say
113:16 - render address oh this needs to be
113:18 - updated but either way
113:22 - actually this is interesting
113:28 - use active order address
113:38 - all right so active order address
113:42 - is going to be equal to an order or null
113:44 - let me just see what I did in tnb OS
113:48 - so when rendering my address
113:59 - so I'm going to say pretty much the same
114:02 - thing
114:07 - let content be equal to this button
114:13 - because remembering this address section
114:15 - we're either going to be just be
114:17 - displaying the button
114:20 - or
114:23 - the address card okay
114:26 - now if they have an address selected
114:31 - and what we are going to do
114:36 - is just have the constant be equal to
114:38 - something else
114:39 - which is going to be an address card
114:44 - and the address card
114:49 - that we have that drop down
114:51 - for as well
114:56 - under address drop down menu
115:00 - address drop down menu edit okay it's
115:03 - pretty much exactly what we want
115:16 - all right so
115:18 - where else did we have that drop down
115:20 - menu it was one of the components right
115:22 - shop
115:25 - my shop drop down menu
115:30 - see what's going on with the dress card
115:32 - right now
115:35 - I just want to see the other
115:36 - implementation of this real quick
115:39 - okay so it's going to look similar to
115:40 - this
115:42 - where the render drop down menu
115:45 - is pretty much just gonna look like this
115:50 - menu options
115:52 - drop down menu as that
115:56 - so I'm going to need to import this drop
115:58 - down menu
116:00 - [Music]
116:08 - and then also
116:11 - edit is toggle address select modal
116:14 - which we want
116:20 - and then what did we do here
116:27 - is equal to the address card with some
116:30 - styling applied to it so the address
116:32 - card we just said with
116:40 - but we don't need to do that just yet
116:42 - let's see how it looks otherwise okay
116:46 - so the address card is from a dress card
116:49 - component so component's address card
116:52 - and then if you have an active order
116:54 - address
116:56 - you basically want to set it equal to
116:58 - that address card
117:03 - content equals
117:05 - address card
117:09 - where the address is equal to the active
117:12 - order address
117:15 - and then on the address card the write
117:18 - content
117:21 - equal to render address drop down menu
117:27 - that should be good
117:35 - I wonder if I can simplify that as well
117:37 - but this looks uh pretty readable
117:41 - okay so now let's do some testing all
117:44 - right that's a good sign off the bat and
117:47 - actually let me try to edit this I don't
117:49 - have any
117:50 - and I actually like to see why I can see
117:52 - what's going on behind all right now I
117:54 - have an active one gives me that if not
117:57 - I don't have anything
118:00 - great it's awesome
118:04 - just what we're looking for and also one
118:07 - other thing
118:10 - yeah I was wondering if I was gonna have
118:12 - to apply any special styling for this to
118:14 - take up the entire width
118:17 - however
118:19 - I think it's doing it already just
118:20 - because of the yeah it's Flex
118:27 - okay
118:29 - so this is great that's uh pretty much
118:33 - all the address logic and then whenever
118:35 - we submit the order
118:37 - all we have to do is we need to pass up
118:41 - I believe we had our order order logic
118:44 - where the only thing we need to do is we
118:46 - need to give it an address because it
118:49 - already knows the items in your cart so
118:50 - it doesn't need to
118:52 - um
118:54 - do anything with those
118:57 - and yeah
119:01 - all right so next up what we're going to
119:03 - do is render these participants
119:08 - and yeah might as well get to that right
119:11 - now
119:12 - okay
119:14 - actually let me push this up uh just do
119:16 - some quick code review
119:18 - push it up as a checkpoint so npm run
119:20 - lint
119:26 - hopefully we don't get any linting
119:28 - issues
119:32 - and all right let's do a little self
119:34 - review okay use active order address
119:37 - this is working as expected actually one
119:40 - other thing that I want to test
119:42 - is this
119:45 - so what I was talking about was let's
119:49 - say that you are on this page and you
119:52 - selected one two three Apple Lane then
119:54 - you go to your addresses and you delete
119:56 - one two three Apple Lane address deleted
119:59 - now back in your checkout okay so it
120:02 - should say select address again
120:04 - and nothing selected and that is also
120:07 - the logic that we want
120:11 - great so now we can go to my code review
120:14 - after that mini QA session
120:17 - okay
120:19 - so hooks use active order address
120:22 - that's good
120:24 - use active order just going to return
120:26 - address or null
120:30 - get this so you guys can see okay
120:34 - so this looks good as well
120:40 - okay
120:42 - and now this is the address select card
120:48 - and it pretty much figures everything
120:50 - out on its own is it selected or not
120:54 - and then depending on that select state
120:57 - what to do the click Handler
121:00 - do you deselect yourself or do you
121:02 - select yourself
121:05 - for The Styling this is all the same
121:09 - select and mix in probably want to
121:11 - standardize this because I believe
121:13 - there's somewhere else on my app
121:15 - that um
121:16 - has a selected State I think when you're
121:18 - selecting like a core or something
121:21 - but anyways this needs to be uh
121:23 - standardized but that's a story for
121:25 - another day
121:28 - this looks good
121:31 - I just select model
121:36 - uses the cards for each address that you
121:39 - have just renders them out into a select
121:41 - card
121:42 - let's Place those
121:44 - or an empty state if you don't have any
121:46 - addresses
121:52 - my styling for my address select the
121:54 - modal or the cards
121:57 - gonna look like this
122:01 - all right looking good looking good
122:03 - and let's see what we got right here at
122:06 - the checkout quite a few changes to this
122:08 - component which is basically the entire
122:10 - page we were working on
122:13 - importing everything
122:19 - and then
122:23 - the drop down just has edit in it
122:29 - your left top participants okay so we
122:32 - got like one out of four sections
122:34 - complete I would say
122:36 - but pretty good
122:39 - considering this is a uh pretty beefy
122:42 - page Lots going on here
122:51 - if the logic gets too complex we can
122:53 - split it up in a
122:54 - multiple sub components as well but I
122:57 - think it's uh pretty good so I would say
122:59 - uh address
123:01 - order address selection logic
123:09 - that
123:12 - so now what I can do is I can render the
123:17 - participants
123:20 - so what we're going to do now is we're
123:22 - pretty much just going to say buyer
123:23 - which is always going to be you and then
123:25 - the seller
123:26 - and then
123:28 - we may want to update one of our hooks
123:30 - as well to make this a little bit easier
123:35 - now another thing that I'm wondering is
123:37 - if you remove this
123:40 - says no buyer or seller to display and
123:43 - it's because there are no products
123:47 - so we'll keep that logic as well okay
123:51 - okay okay doing good doing good let's
123:54 - keep it going okay
123:55 - so
123:58 - what we're going to do first is we're
124:00 - first going to check if there are any
124:01 - items in the cart
124:06 - if there are items in the cart then
124:09 - we're going to render two account labels
124:11 - one for the buyer which is you and one
124:13 - for the seller
124:17 - and why do I need to check if there is a
124:18 - cart seller
124:21 - well probably because this uh
124:24 - because this can't be nullable otherwise
124:26 - we're going to render empty text
124:30 - just like that
124:37 - okay
124:39 - and do we render any empty text here no
124:42 - so
124:45 - so let's just clean this up
124:51 - and get started so first of all our
124:53 - empty text component
124:55 - this is interesting
124:57 - oh a line
125:01 - all right slime has margin bottom okay
125:05 - so we need to import our empty text
125:08 - component here
125:11 - styles
125:13 - because we're going to need to style it
125:16 - to take away some of the padding and
125:18 - that's because the line which is going
125:20 - to be appearing under already has a
125:21 - margin bottom of 12.
125:23 - so just like this our empty text is
125:26 - going to have a padding top of zero
125:28 - Elemental P actually what am I what am I
125:31 - doing here see the E F G okay so that's
125:35 - going to take care of our empty text
125:36 - component
125:38 - and now
125:40 - actually just go ahead and render
125:42 - basically the same logic
125:45 - so our cart product list
125:52 - split that out into this
125:55 - car product list why did I do that
126:02 - that's interesting
126:06 - I kind of like this actually
126:11 - oh
126:14 - yeah I don't need to do this now so what
126:16 - I was doing is giving it some default
126:18 - ordering
126:22 - thank you
126:23 - but I don't need to do that
126:31 - okay so what I'm going to do
126:34 - actually what do I want to do
126:42 - let's do this
126:45 - so under my shop pages I have the
126:52 - wait a minute wait just a minute here
126:56 - so order products cart products
127:00 - yeah I don't even think I'm pulling them
127:02 - out anywhere
127:04 - maybe in one of my hooks
127:14 - all right got a lot going on here okay
127:16 - so in Redux
127:21 - your Redux for here let's check
127:25 - so my car products
127:37 - interesting interesting interesting
127:40 - so my carp products consist of objects
127:44 - whose product is nested
127:48 - now we are going to be wanting to pull
127:50 - the seller from these
127:58 - but what's the easiest way to kind of do
128:00 - everything
128:02 - I think from the seller
128:06 - hmm
128:10 - all right let's just keep it simple for
128:12 - now and get cart product list
128:17 - okay
128:28 - all right so we'll do something like
128:30 - this
128:32 - buyer checkouts
128:35 - use memo coming from react okay
128:40 - so first let's get cart products
128:48 - and this is going to come from
128:54 - so selector States Elemental Peak your
128:57 - St
128:59 - what we're going to be doing is getting
129:00 - all the cart products
129:02 - from Redux
129:05 - using our selector
129:08 - and then since these
129:11 - are keyed
129:15 - under the ID
129:20 - to get just a list of them we can just
129:22 - do object values cart products and so
129:25 - all of our cart products are gonna go in
129:27 - here
129:30 - okay
129:32 - so now what we can do with our
129:35 - participants is we can check if there's
129:38 - any items in that list
129:45 - and we can have the content be something
129:48 - similar to this or render participants
129:52 - for participants with the content
129:55 - under the line and okay
130:00 - so if cart product list has length in
130:03 - other words if there are items in your
130:05 - cart then you can render the
130:06 - participants if not just say no buyer or
130:09 - seller to display because no one's
130:11 - buying anything if there are no items in
130:14 - the cart
130:15 - and then for
130:18 - let's just go ahead and do the buyer
130:20 - first
130:21 - so this component we were named to user
130:24 - label if I'm correct so yep user label
130:29 - and then to use this
130:35 - like the implementation of it
130:41 - so for user label
130:48 - actually should I I'm going to need to
130:50 - style this
130:51 - valuable
130:53 - accountable
130:59 - okay
131:02 - so for this user label which is going to
131:05 - come from components user label
131:09 - the implementation details of this are
131:12 - we're going to give it a description and
131:14 - a name
131:18 - so instead of account label
131:21 - I'm just going to say user label
131:24 - in the description equals buyer
131:29 - and why am I
131:31 - there we go
131:33 - all right so the buyer
131:35 - is my name my username
131:39 - and that is going to come from self
131:41 - right
131:47 - opening the wrong thing okay
131:50 - and that is going to come from self
131:52 - username
131:56 - okay
131:58 - so now we just need to give get to self
132:08 - there's getself
132:10 - and that is coming from selector state
132:14 - select your state get self
132:17 - okay
132:19 - so self
132:22 - is equal to my own data from the store
132:25 - and if I just do self username
132:31 - string null
132:36 - okay let's go ahead and see what's going
132:38 - on here okay
132:40 - so this user label takes a name which is
132:43 - a string
132:44 - and itself I'm guessing that types self
132:50 - yeah the username is equal to a string
132:53 - or null
132:56 - and that is because
132:58 - it's just how it gets initialized in
133:00 - Redux however
133:07 - actually I can do this
133:09 - we should be able to
133:18 - so what I can do is just uh use the
133:21 - exclamation mark
133:22 - to guarantee that this value is going to
133:25 - be set because the only time that it
133:28 - doesn't get set in Redux is if the user
133:31 - is logged out basically but they're
133:33 - logged in because they say this checkout
133:34 - page and since they're logged in they're
133:37 - guaranteed to have a username
133:46 - okay so now let's see what's going on
133:49 - all right participants Bucky who is the
133:52 - buyer
133:54 - and now for the seller
133:58 - what we are going to do is this
134:02 - so I need the seller's information
134:04 - including their username now we already
134:07 - have a hook called
134:10 - used cart seller ID and what this
134:13 - returns
134:16 - is
134:18 - a number which is the ID of them but we
134:20 - want to actually return the seller
134:22 - themselves
134:24 - so we're gonna update this entire hook
134:26 - to say use cart seller you know what
134:29 - this is going to return
134:33 - is type product
134:37 - is it's going to return a user read
134:39 - serializer
134:44 - or null
134:48 - all right so let's first figure out
134:51 - everywhere this is
134:55 - and make sure to replace it
135:00 - which card seller ID and then here
135:03 - okay
135:04 - so use cart seller ID is going to be
135:07 - refactor rename
135:09 - to use cart seller let's just refactor
135:12 - all of those
135:15 - and that is
135:17 - cart seller used card seller
135:20 - used cart seller
135:25 - and then this is going to be renamed as
135:27 - well
135:30 - cart seller ID to just cart seller
135:43 - but first let's update this
135:45 - implementation of it
135:47 - so the user read serializer
135:53 - is going to come from types
136:01 - all right
136:03 - so for the cart seller it's either going
136:05 - to be a user read serializer ID
136:08 - and then we're saying if you don't and
136:15 - okay
136:16 - so if you have objects in your cart then
136:19 - just go ahead and get the first one and
136:21 - get the seller from it otherwise if you
136:24 - don't have any items in your cart then
136:25 - just go ahead and return null
136:27 - so now this used cart seller is going to
136:30 - be equal to user resalizer or no
136:32 - and that means this cart seller ID
136:36 - we can just call cart seller
136:39 - and then we can say
136:42 - if you have a cart seller
136:44 - and the cart seller
136:47 - ID
136:52 - and their ID is equal to the product
136:54 - seller ID then we get that logic okay
136:59 - now with this being said
137:03 - we also want to use the updated logic
137:08 - in this
137:13 - okay so now that we cleaned up all the
137:15 - old code let's go ahead and write some
137:17 - new code
137:19 - so this is working correctly
137:22 - and we're just going to say
137:25 - that
137:26 - for the participants that we're
137:28 - rendering of course I'm going to be the
137:30 - buyer who's ever like the user that's
137:32 - logged in is always going to be the
137:33 - buyer it's their shopping cart
137:35 - and then I also want to
137:39 - kind of do this logic right here
137:45 - where the styled version of this has a
137:47 - margin top of 16. so in order to do that
137:50 - I pretty much need a regular user label
137:52 - and a style user label
137:58 - [Music]
138:00 - so I'm going to import unstyled user
138:03 - label
138:09 - Elementary
138:10 - stu okay
138:14 - so I'll say that this user label is a
138:18 - styled version of this unstyled user
138:20 - label
138:21 - and all it does is it has a margin
138:25 - top of 16 and this is going to be the
138:28 - one for the seller
138:32 - so what I can do is I can say if
138:36 - cart seller
138:45 - would be gross okay
138:48 - so if you have a cart seller
138:51 - then what you want to do
138:54 - is you want to render a stylized version
138:57 - of this user label label with the
139:00 - description of seller in the name is the
139:03 - cart sellers username
139:06 - should be good
139:13 - product does not define or under
139:14 - participants
139:18 - or under left render participants
139:31 - okay what's going on here
139:34 - cart product list length is this it
139:37 - object values that are car products
139:44 - freshness and see what
139:46 - hey that was right maybe I had some hot
139:48 - reloading issues didn't make quite a few
139:50 - changes okay
139:54 - so this is okay so I was just getting
139:56 - confused because I didn't see any
139:57 - products here but that's how it kind of
139:59 - calculates this but it's just because we
140:01 - didn't actually display those products
140:03 - yet
140:03 - am I recording okay I just want to make
140:06 - sure I'm not talking to myself here okay
140:09 - so I have items from Bob who's the
140:13 - seller in the cart
140:14 - and now what I want to do is I actually
140:16 - want to buy this mug from Amy instead so
140:18 - I want to add this to the cart do I want
140:20 - to override my cart yes
140:22 - and now when I go here it should say Amy
140:25 - is the seller but now you know I changed
140:27 - my mind I actually don't want this so
140:29 - I'm going to remove all those go back to
140:31 - my cart and it says no buyer or seller
140:34 - to display and that is exactly the logic
140:38 - that we want
140:40 - from this note let's go ahead and add
140:42 - this from Amy again
140:44 - actually let's see how many things can
140:47 - we buy from Amy okay so we have this mug
140:49 - in the mushroom book
140:52 - and now when I go back here two products
140:54 - from Amy I'm the buyer a music seller
140:57 - this is the address that I selected all
141:00 - right the participants section is
141:02 - looking good as well so now what we can
141:05 - do
141:06 - is I'll do another self mini code review
141:09 - and then we can start on the products
141:11 - section
141:13 - so with that said let me go ahead and
141:16 - first lint everything
141:20 - and then let me just review everything
141:23 - real quick
141:25 - got the hiccups today
141:27 - what causes the hiccups I'm curious
141:32 - okay so let's see what we did
141:36 - we converted this use cart seller ID
141:39 - hook to just use cart seller so we can
141:42 - get the full user object
141:44 - because we also need their username in
141:46 - some cases and that looks good
141:49 - this is just renaming it and saying
141:52 - instead of a number you are now
141:54 - returning a user object in other words
141:56 - the user read a serializer
141:58 - now returning an ID anymore so that's
142:01 - good
142:04 - and then in and check out
142:07 - made quite a few changes here
142:12 - basically adding in your participants
142:16 - and deciding if we should display
142:18 - participants or not based on if we have
142:20 - items in our cart
142:23 - and then pulling everything from State
142:26 - hooks
142:29 - getting our carp products
142:37 - and then rendering them out here
142:41 - and the logic is saying that if you have
142:44 - items in your cart then display the
142:46 - buyer and seller labels otherwise
142:48 - display this empty text
142:54 - styling updates override the empty text
143:01 - and then this second user label may want
143:04 - to rename that but that's basically for
143:05 - the seller
143:07 - give them a margin top just so there is
143:09 - a little bit of space between the buyer
143:11 - and seller label
143:13 - and then this is just our new hook that
143:15 - we had to change
143:17 - the cart seller is now the user object
143:21 - instead of ID
143:22 - and so
143:24 - we're saying that if you have one
143:28 - check that their ID basically compare it
143:32 - with the items you're trying to add to
143:34 - make sure you're not trying to add
143:36 - products from two different sellers to
143:38 - your cart and that's all good okay
143:40 - so I'll say participant logic set
143:46 - working
143:48 - actually we can just say participant to
143:50 - logic
143:56 - all right sweet we are looking good
143:59 - actually so now let me go ahead and take
144:01 - another mini break and uh in the next
144:06 - little bit what we're going to be doing
144:09 - is working on these products and
144:11 - actually let me add some products real
144:12 - quick
144:18 - maybe just two of these maybe this is a
144:20 - shirt
144:21 - and this old man
144:24 - struggle
144:26 - carving
144:27 - I actually like that green color that
144:29 - toast that pops up here okay
144:31 - so next we are going to have this
144:34 - section
144:35 - working on where we pretty much just
144:37 - display the products in our cart and we
144:40 - have a little action link that gives us
144:42 - the ability to remove those as well
144:46 - but I'm going to take a five minute
144:47 - break and then we'll get to that
144:51 - and we are back Jack so let's go ahead
144:56 - and see what we need to do for this
144:58 - product section right here
145:01 - uh this is tmb front end uh let's see
145:04 - render products this is what we got
145:05 - going on right now
145:08 - and empty products looking pretty bland
145:12 - and let's hop over into BLS
145:15 - see what they got going on okay
145:18 - so render products
145:22 - says that if you have cart products then
145:25 - call this renter car products function
145:29 - and then we have this cart product
145:31 - component
145:34 - all right so first of all these cart
145:35 - products are just gonna say
145:38 - there are three columns one for the
145:41 - image one for the details and then one
145:43 - for those action links
145:45 - so let's seal this section right here
145:46 - cart products
145:48 - that's where they're gonna go
145:52 - and then what we can do
145:55 - we can actually borrow a lot of this
146:06 - okay
146:10 - just trying to decide if I want to make
146:12 - this
146:15 - first
146:18 - and we'll remove click
146:22 - yeah I think we want to do this
146:28 - okay so we are going to be making a cart
146:30 - product
146:32 - which is basically just a row in that
146:35 - grid
146:36 - or basically it's just one carp product
146:40 - and then what we can do is actually pass
146:43 - in the entire cart product
146:46 - because for this handle remove click
146:50 - um this was made for the decentralized
146:52 - network but what we need to do
146:55 - is we
146:58 - are going to be making a request to the
147:01 - back end to delete it
147:04 - and yeah in this decentralized network
147:06 - everything was kind of just um
147:11 - getting distracted here
147:13 - everything was just hit happen client
147:16 - side
147:20 - so let's do this so car product copying
147:23 - you
147:24 - and and this page
147:28 - on the buy checkout page what other
147:30 - components did I have oh payment details
147:32 - and we didn't do that yeah
147:34 - so on the my checkout page we're going
147:35 - to have this cart product
147:37 - first let me look at your styling
147:40 - uh for the actions voice not rap text
147:42 - line end so it appears on the right
147:45 - that looks good
147:47 - and yeah that looks so good now cart
147:49 - product got a lot of stuff to do to you
147:53 - first of all we'll get rid of all these
147:57 - unify my types as usual PE QRS
148:02 - uh this is just gonna be types toast
148:05 - type that's coming from enum
148:12 - Coast types from enons
148:15 - moved that around
148:21 - and the product list details
148:27 - Okay so
148:33 - this is interesting I thought I had a
148:35 - component for this but
148:37 - yeah it was on my cell page right
148:40 - okay so the cell page
148:43 - we have our cell products and each of
148:46 - these products
148:49 - oh yeah here we go
148:50 - so this is going to be replaced with
148:52 - Shop product list details
148:55 - so Shop product list details
149:01 - I'm gonna p q r s t
149:04 - I wish I knew my ABCs but I don't but I
149:07 - don't but I don't don't don't
149:11 - you what you doing here
149:15 - here okay okay
149:18 - shop
149:21 - let's get these organized okay
149:22 - so Shop product list details
149:25 - you pretty much give it a product
149:31 - and all right where first of all you are
149:34 - capitalized
149:36 - you don't need to have these ticks
149:43 - because we are not
149:45 - doing anything and then
149:50 - for handle remove click
149:54 - we don't want to use you
150:01 - okay let's just do this
150:03 - let's knock it crazy here
150:07 - okay
150:08 - so for the thumbnail
150:12 - you are just gonna be past the product
150:14 - image
150:16 - now when dispatching
150:19 - when clicking the button to remove
150:22 - what we want to do
150:26 - well first of all we need to yeah yeah
150:30 - yeah yeah okay so this is going to take
150:32 - a cart product
150:34 - instead of a product because we need the
150:36 - cart product ID
150:38 - whenever we are deleting it
150:45 - okay
150:46 - so let's do that off the bats a lot of a
150:49 - little cleanup to do
150:51 - so in my dispatcher my cart Product
150:53 - Where am I gonna need from you I'm gonna
150:57 - say delete cart product
151:00 - and then
151:02 - I'm gonna get to you
151:05 - and I'm gonna steal you
151:09 - uh Delete cart product right here
151:12 - and then I'm going to say
151:15 - first of all
151:17 - the types I'm going to be passing in
151:21 - our car product as tea cart product
151:24 - and I have to rename it because this
151:26 - cart product component is also named car
151:28 - product
151:29 - so
151:31 - the type I'm going to be passing in is a
151:33 - cart product
151:36 - and that's going to be a type cart
151:38 - product
151:40 - and I'm going to be passing this in
151:43 - in for the image
151:45 - it's the cart product products image
151:49 - for the product it's the car product
151:51 - product
151:53 - and for this remove click
151:57 - I'm going to dispatch
152:01 - pretty much the same logic
152:05 - and do I want to wrap that in it async
152:10 - wait a minute where did I actually have
152:12 - this
152:19 - here we go
152:22 - product removed from car or doing this I
152:25 - think I want all of this pretty much
152:26 - exact same logic
152:33 - yeah okay
152:43 - all right so let me read through this
152:44 - real quick
152:50 - uh the
152:51 - DT okay
152:53 - so each of these car products
152:56 - are gonna have a thumbnail on the left
153:00 - the details like the name description
153:02 - yada yada
153:03 - and then our link to remove it when you
153:07 - click the remove link it's going to
153:09 - dispatch this delete cart product
153:12 - car product using the car product ID and
153:15 - afterwards it says product remove from
153:17 - cart
153:18 - now if there's an issue with this it's
153:19 - just going to say error removing product
153:21 - from cart
153:24 - and that should be good
153:27 - so now
153:29 - I can use that cart product
153:33 - components to basically render out as
153:36 - before
153:39 - okay so first import all my cart
153:41 - products components
153:45 - and now let's see so this is going to be
153:47 - in render products
153:53 - and the content is going to be the same
153:55 - as this
154:06 - this is going to render car products
154:07 - you've got car products and that is
154:12 - the same thing
154:16 - under a dress or under left
154:21 - so render car products is going to take
154:24 - a
154:28 - okay so we're going to do this for each
154:30 - car product the key is the cart product
154:33 - ID
154:34 - and for the cart product it's just the
154:37 - carp products
154:39 - sort my attributes
154:46 - and that should be good
154:49 - okay
154:51 - so just to recap uh the content you have
154:55 - under here depending on if you have
154:57 - products to display or not in your cart
155:00 - if you do you're going to render cart
155:02 - products
155:03 - and when you render cart products you're
155:05 - just iterating through all your cart
155:07 - products
155:09 - and creating a cart product component
155:13 - passing through all the props that we
155:15 - need and rendering it in this car
155:16 - products section
155:21 - okay okay
155:24 - so now this is looking good uh let me
155:27 - just go back and come back okay so I
155:29 - have two items in my cart mug and a
155:31 - mushroom book
155:32 - now let's say I want to remove this mug
155:36 - in my checkout page that should be
155:38 - removed now let me add it back in
155:42 - and that should be there and now when I
155:45 - click remove
155:48 - yes that is good as well
155:51 - and now I should have one item a
155:53 - mushroom book in my cart
155:57 - and now let me just remove that
155:59 - says no products to display products
156:02 - removed from cart delete it from the
156:04 - back end looking good in the
156:07 - neighborhood okay
156:09 - now another small ux issue that I have
156:12 - or ux question
156:14 - is whenever you are adding items to the
156:17 - cart how do you want these displayed
156:19 - what I'm thinking is you probably want
156:22 - them displayed in the order that you
156:25 - added them
156:26 - with the most recent items on top so if
156:29 - I added the mushroom book first in the
156:30 - mug
156:32 - think I would be expecting
156:34 - to see the mug on top
156:36 - although could also sort it in
156:38 - alphabetical order
156:40 - but
156:43 - I don't think
156:46 - that makes a whole lot of sense
156:50 - okay
156:52 - so either way the product section is
156:54 - working now
156:58 - remove remove we get empty States and
157:00 - the products of display okay
157:02 - so now what I can do is let me add these
157:05 - two items back
157:09 - and then
157:10 - uh let me do a little bit of review as
157:13 - usual
157:14 - actually lint and then a review it's my
157:17 - two favorite things because it means I
157:18 - just finished up a little mini section
157:22 - um eventually this is going to be lint
157:23 - then test then review
157:27 - but for now oh you don't have any tests
157:30 - written I know that's uh not that great
157:32 - to say but um but yeah okay so for this
157:37 - cart product let's see
157:42 - thumbnail dispatch you know I'm just
157:44 - tell you it's okay
157:47 - the cart product is going to be past the
157:49 - cart product
157:50 - object
157:52 - and then it basically just renders the
157:54 - thumbnail
157:56 - the details of it
157:59 - and then the actions
158:02 - which is only one to remove it then when
158:05 - you click that it's going to delete it
158:06 - from the back end delete delete
158:10 - okay pretty much delete it from the back
158:13 - end then delete it from your front end
158:15 - and then pop up a toast saying success
158:19 - on these are just to minimize my action
158:22 - font size and align them on the right
158:24 - since the default font size is 14.
158:28 - I want that a little bit smaller
158:31 - imported that car product component that
158:33 - we just looked at
158:35 - and then when we render the cart
158:38 - products
158:39 - we either render an empty state if we
158:41 - don't have any items in our cart or
158:44 - render the cart products
158:46 - and all this does is it converts all the
158:49 - items in your cart excuse me all the
158:51 - objects
158:52 - in your store to
158:55 - pretty much a car product component
158:57 - and then displays them in the car
158:59 - products section
159:01 - and the car product section just has
159:03 - some styling where the items are spaced
159:06 - 12 pixels
159:08 - and we just get this nice grid layout
159:13 - that looks so good and I'll say okay uh
159:16 - products logic
159:20 - cuckoo cool
159:22 - all right now let me push this up and we
159:25 - are getting close we are getting very
159:27 - close to where we want to be
159:30 - which is
159:33 - being able to place an order okay
159:35 - so now the last thing we have to make is
159:37 - this section right here
159:39 - and what we will say
159:42 - is that
159:44 - so
159:45 - um another thing this is actually a
159:48 - little bit more advanced than tnbos as
159:50 - far as the payment logic goes because
159:53 - tnbos it could only support
159:57 - um not only one seller but only one
159:59 - payment type per order
160:02 - in
160:04 - this new system that we are working on
160:07 - it's going to support
160:09 - um multiple payment types per order for
160:11 - example this is a valid order that we're
160:13 - looking at right here even though we're
160:14 - paying with two different currencies
160:16 - it's going to be 2200 10B and 300 VTX
160:20 - so what I'm going to do
160:22 - is let me think how we want to lay this
160:25 - out we're probably just displayed the
160:27 - prices right on top of each other and
160:30 - then
160:31 - the button right under it
160:34 - and then we can have all the error
160:36 - messages right here
160:38 - yeah
160:41 - yeah
160:43 - yeah
160:45 - okay
160:49 - so let's do that
160:55 - okay so I push this up actually did I
160:57 - push my back end up too
161:03 - yep yep yep yep yep yep yep and also yep
161:07 - okay
161:09 - okay I'll go again okay okay
161:13 - [Music]
161:16 - so now
161:18 - on the right hand side it says total
161:20 - nothing let's see what is going on with
161:23 - our good friend tnbos actually we want
161:26 - aren't going to need tnbls for much
161:28 - longer
161:29 - but anyways what this does
161:33 - what's going on right here oh okay don't
161:36 - need this either
161:37 - so basically what I did is I created a
161:39 - separate component here named payment
161:41 - details
161:43 - and it basically just
161:50 - okay we're being passed in this click
161:53 - Handler and I'm wondering why
162:00 - hmm so this is doing a lot of stuff that
162:03 - we don't need to
162:08 - okay
162:11 - yeah I don't need to do basically any of
162:14 - that
162:15 - wondering if I should just basically
162:16 - write this from scratch is my disabled
162:19 - yeah so the parent was figuring out a
162:21 - bunch of stuff and passing it down
162:23 - however I'm thinking that
162:26 - most of this can just be handled right
162:28 - in the payment details
162:31 - section
162:37 - yeah
162:39 - so maybe I'll just get the styling from
162:41 - this
162:45 - and then
162:49 - yeah
162:51 - yeah yeah yeah
162:57 - okay so let's do this
163:00 - let's create a new payment details
163:02 - component
163:04 - which is gonna effectively be this
163:06 - component on the right
163:08 - and then we'll just put a bunch of
163:10 - placeholders in there for now
163:13 - and then we'll kind of say goodbye to
163:16 - tnbos for the time being and
163:19 - kind of Go free solo since
163:22 - a lot of this logic isn't going to be
163:24 - able to uh carry over kind of just some
163:26 - of the basic simple styling all right so
163:30 - I do like the name payment details for
163:32 - this
163:34 - so what I'll do is I'll make a new
163:36 - component called payment details and all
163:39 - right
163:40 - so you are going to have styles
163:43 - you're also going to have a component
163:47 - and the component's name is just going
163:49 - to be payment details
163:56 - and then you
164:02 - are eventually going to display other
164:03 - things but for great hiccups great
164:06 - timing but for now payment details is
164:09 - good enough
164:13 - so import that payment details component
164:15 - and payment details
164:17 - and then
164:20 - yeah
164:22 - so on the right hand side
164:26 - Total Line payment details
164:31 - all right so what are we working with
164:32 - here
164:33 - payment details looking good
164:36 - now what I want to make first is
164:42 - actually let's just get the button
164:43 - styling taken care of let's do the easy
164:45 - stuff first
164:47 - all right so do we have a button from
164:48 - here yes we do are we gonna need to
164:51 - style it maybe but
164:54 - a little bit too much for now
164:58 - all right so I have the button and it's
165:00 - going to say place order
165:10 - all right
165:12 - so I have a button
165:14 - that is going to say place order
165:18 - and eventually something is going to
165:21 - happen when you click it but for now
165:23 - ain't nothing gonna happen and why
165:27 - parsing error well oh
165:29 - forgot my arrow okay
165:31 - so now we have a button that says place
165:33 - order and how we look in
165:35 - pretty good now I already am seeing that
165:38 - I want to style that to take up the full
165:40 - width so
165:46 - let's do that and button with 100.
165:54 - so what I'm going to do in here is
165:56 - import an unstyled button
165:59 - and then I can still the same button
166:01 - logic from here
166:03 - to pretty much give a width of 100 and
166:05 - now instead of using this button
166:06 - component I can use that styled button
166:10 - which is going to give me that width of
166:12 - 100
166:13 - beautiful okay
166:15 - I'll click this nothing happens but
166:17 - let's go ahead and make something happen
166:23 - and I'm wondering if we can even make a
166:26 - separate component for this
166:31 - what's this component right here this is
166:33 - the price component
166:41 - so let's just use those shall we
166:45 - okay
166:47 - so on our
166:50 - component Library we have this price
166:52 - component
166:55 - and how do we use it well we just oh
166:57 - this is interesting
167:01 - um okay
167:06 - so unfortunately this is a product price
167:10 - component where we have to pass in a
167:12 - product
167:18 - but we basically want the same styling
167:23 - without needing to pass in a product
167:28 - so what we could do
167:34 - hmm this is interesting
167:38 - yeah I might have to just recreate this
167:43 - for this one okay so price container
167:46 - let me see what's going on with you a
167:48 - little price container all right so
167:50 - price container
167:53 - is basically going to be the same thing
168:02 - price container is going to have a logo
168:04 - and an amount
168:07 - all right so let's just do this for now
168:11 - all right so just like before we're also
168:14 - going to have a price container we won't
168:15 - have any margins on it yet
168:19 - and I'm going to say price container
168:23 - and we're going to have two of these
168:33 - and let's just do let's do this so core
168:36 - logo
168:49 - all right so we're gonna have a core
168:50 - logo in here
168:59 - in the source
169:01 - what we can do is we can just do
169:04 - something super easy
169:06 - and something like this
169:10 - oops
169:13 - we can just
169:16 - hard code in an image URL for now
169:24 - all right so our price container has a
169:26 - core logo
169:29 - and then it also has let's see what else
169:35 - an amount
169:44 - and the amount is going to be calculated
169:48 - but for right now we can hard code that
169:50 - into so the amount will say a total
169:53 - price of 500
169:57 - actually should we do
170:03 - all right let's see what we're working
170:04 - with here
170:08 - okay
170:12 - so something like this
170:18 - but it floats in the middle
170:24 - all right so you are 24
170:28 - and this entire container has a line
170:31 - item Center Flex Direction column
170:38 - all right so this entire container
170:44 - which is the price element
170:48 - basically payment details element let me
170:51 - see how your container is styled
170:53 - your container you have what does it
170:56 - have a border radius that's funny
171:03 - okay
171:06 - so I don't believe we need this border
171:07 - radius and that should Center align
171:10 - everything
171:13 - okay that's looking all right
171:19 - and then what size are you
171:22 - 18 and I need you to be 25 24.
171:27 - can you do that for me chord logo can
171:30 - you be 24 24
171:33 - 24
171:35 - font size 26 font weight
171:41 - let's use our standardized font weights
171:43 - as well so follow weights semi bold
171:54 - all right
172:01 - nice Imports let's put U24 as well
172:06 - and let's see what we're working with
172:08 - now
172:10 - maybe fall way bold looks a little bit
172:12 - better
172:14 - it's a little too weak that's semi-bold
172:17 - nonsense
172:19 - that's bold I mean dare we go extra bold
172:22 - I don't think so
172:24 - that's this seems like a little bit too
172:26 - much whoa whoa whoa no no no
172:29 - no no no no no
172:30 - that's let's not get crazy here okay
172:33 - so font weight bold for the amount and
172:36 - then
172:37 - for the price container
172:39 - I'm a wondering
172:41 - since I do want some space of my button
172:46 - I'm wondering where we put that
172:53 - so basically we may have something like
172:55 - this
172:57 - they won't be the same logos but
173:05 - I'm thinking for each of these price
173:06 - containers is if we give it a margin
173:08 - bottom it will look alright
173:20 - okay let me get this copy image address
173:24 - something else
173:33 - okay let's do 519 000.
173:40 - Okay so
173:43 - looks interesting
173:48 - actually let's do this what it's going
173:50 - to be
173:52 - just to get some realistic always like
173:54 - and what was this 300
173:59 - okay so this total order is 2200 10
174:03 - being 300 VTX so the
174:07 - total would look something like this
174:13 - how does this look
174:18 - not bad it does not look bad
174:22 - so these are all fake numbers still but
174:25 - okay
174:28 - so now what I want to do is just have
174:30 - some text for the error message
174:32 - and we'll eventually be displaying that
174:35 - conditionally
174:36 - but here just want to kind of get
174:40 - everything so render price error
174:42 - is going to have an error message
174:53 - all right so colors
175:00 - and for my error color
175:11 - if anywhere in forms file input okay
175:16 - so this is my standard error message
175:18 - color
175:20 - although I probably want to make this
175:22 - into a constant as well since I
175:25 - reuse it quite a bit quite a bit okay
175:29 - but now let me go ahead and render price
175:32 - error
175:36 - and I'm going to say
175:39 - have some logic right here
175:44 - total price of
175:48 - okay
175:54 - so this is eventually going to say
175:56 - something like total price of
175:59 - um
176:00 - what was it uh
176:03 - 200
176:05 - tnb
176:07 - seeds available balance of
176:11 - um
176:12 - let's say they only have
176:14 - uh
176:15 - 1000
176:17 - 610 people
176:23 - okay
176:25 - so if they get an error it's going to
176:27 - say something like total order price of
176:32 - 22 exceeds a valuable balance of 1600
176:36 - tnb
176:37 - and that looks alright
176:40 - however I'm wondering if I bump up the
176:42 - font a little bit
176:45 - and also I may have
176:48 - multiple of these errors
176:51 - if they have okay let's do this let's do
176:55 - this
176:56 - okay
176:57 - so for the error message I'm going to do
176:59 - a margin top of 12. I'm going to do a
177:01 - font size of 11 and then I'm just going
177:04 - to render
177:06 - two of these
177:11 - okay that would be better
177:19 - okay
177:21 - that's a little bit better
177:25 - now hopefully we don't get these error
177:27 - messages but if so then
177:36 - and what we can also do is change the
177:38 - naming so we'll just say total price of
177:41 - X currency exceeds available balance of
177:45 - X currency
177:50 - okay
177:53 - all right so I think that we got
177:59 - yeah so this is pretty much all of our
178:03 - logic that we're going to need
178:07 - here
178:12 - and I also want to do one thing let me
178:15 - try this out so line height
178:22 - one
178:24 - what is the line height of this by T
178:26 - fall
178:30 - no
178:31 - one is one shrunk
178:43 - hmm
178:44 - well one looks better the default or a
178:46 - line height of 1.2
178:51 - let's go ahead
179:00 - yeah let's do 1.24
179:02 - [Music]
179:06 - actually this entire
179:10 - okay
179:11 - so for the payment details
179:14 - actually the price container
179:17 - I can do a line height
179:32 - all right
179:40 - yeah it looks a little bit better
179:43 - that one's a little bit too spread out
179:45 - and this one
179:46 - is looking good okay
179:49 - so that's looking all right for now I
179:51 - think all my styling is as good as it's
179:53 - going to get with my pretty primitive
179:56 - styling skills
179:58 - and now what I can do next is just
180:03 - okay
180:05 - so another thing I need to do is I need
180:08 - to conditionally be able to disable this
180:10 - button because if there is an error
180:12 - message
180:14 - then the button should be disabled
180:20 - so
180:22 - let me just look at my button props
180:28 - and I believe this is just a
180:31 - okay
180:34 - disabled equals true just uh hard-coded
180:37 - in for now just make sure that we get
180:40 - this logic
180:41 - and okay
180:43 - so
180:48 - now let's just add a click Handler so it
180:50 - comes handle button click
181:04 - console uh click okay
181:07 - so we're just going to have some click
181:09 - Handler for this button right here
181:12 - and now
181:15 - you can't click it because it's disabled
181:17 - that is good and if you go back in here
181:20 - say disabled equals false
181:23 - and we should be able to click it and it
181:25 - just logs out click okay
181:27 - so now we got all the basic
181:29 - functionality working what logic do we
181:32 - want to do now
181:34 - so next up what we are going to do
181:37 - is we need to figure out if there are
181:39 - any actual errors
181:43 - and the way we do that is we compare
181:45 - their available balance
181:48 - with
181:50 - the total
181:52 - of the items in their carts
181:56 - so
181:58 - what we are going to need to do
182:02 - is this
182:05 - we're gonna need to calculate
182:10 - actually let me do this
182:16 - all right so Amy you are going to be
182:19 - selling this little mini elephant set
182:21 - too
182:25 - because I need you to have some more
182:28 - products from what I'm about to test all
182:31 - right so let me refetch these and I'm
182:33 - going to add this to the cart as well
182:36 - and the reason for that is because I
182:38 - wanted to be able to kind of add up
182:40 - um
182:41 - multiple products from the same currency
182:43 - so basically the first thing I want to
182:46 - do is just display this information
182:47 - correctly
182:48 - so it should say
182:50 - 6200 tnb 4000 plus 2200 and 300 VTX and
182:56 - then once we display this correctly we
182:59 - can compare it to the active or the
183:01 - available balances that they have
183:04 - and then pretty much determine if we
183:07 - need to show any error messages or
183:08 - disable the button but that is the first
183:11 - thing
183:13 - that we're going to do
183:17 - now another thing that I'm thinking of
183:19 - is where do we put this logic
183:22 - so
183:27 - um
183:29 - I'm thinking ahead how we're going to
183:31 - need to use it
183:33 - to kind of get the return type of it
183:34 - what I'm thinking is
183:39 - all right so for the cart products
183:47 - each product has a price core
183:50 - which is just the ID of a core
183:55 - so in other words one
183:57 - is T and B
184:01 - okay
184:03 - so what I'm thinking is we're going to
184:05 - probably write a reducer function where
184:07 - the key
184:12 - is the ID of the price core
184:17 - and the value is the sum
184:20 - of all products
184:25 - in that core
184:27 - so basically the key is the price core
184:30 - and the value is the aggregate price
184:33 - amount of all products
184:42 - so
184:43 - I'm going to ask a chat GPT for help on
184:46 - this one since it sounds like a little
184:48 - bit beefy
184:51 - okay
184:53 - so what information do you need chat
184:56 - Jupiter okay
185:00 - maybe I can just give it my
185:02 - car products
185:09 - yeah
185:11 - so I'm going to say here are my carp
185:13 - products
185:23 - ready
185:24 - write a function
185:35 - that gives me
185:37 - I don't even know how to say this the
185:38 - GPT okay
185:40 - Zoomer card products
185:42 - um
185:46 - write a function
185:49 - that iterates through each
185:56 - okay
185:58 - write a function that Returns the total
186:00 - amount
186:06 - the total cost of the products in each
186:08 - price score
186:11 - see if we can figure this one out
186:13 - here are my
186:16 - card products
186:26 - write a function in
186:30 - JavaScript that
186:34 - um
186:36 - returns an object where the key
186:42 - is the price core
186:46 - core ID
186:48 - and the value is the total
186:52 - price of products
186:56 - is the total price
187:04 - based on price amount
187:10 - calculated by using
187:14 - price Mount times quantity
187:27 - all right
187:29 - for each item in the cart
187:41 - total price price core
187:49 - all right so what I'm going to do is
187:50 - this
187:53 - so that was looking good but what I'm
187:56 - going to do is kind of clean all that up
187:58 - so car product
188:09 - all right here's my car product type
188:13 - and let's see here is my product type
188:22 - I'll give it the item type as well
188:33 - I'll say
188:35 - um
188:36 - update the function
188:41 - to use typescript
188:49 - reduce
189:09 - okay let's see what we got going on here
189:21 - total price
189:28 - so total price
189:39 - oh I see what's going on here
189:45 - okay
189:50 - okay so first of all I want to rename a
189:52 - total price
190:01 - all right
190:04 - so a couple things rename total price to
190:06 - ACC
190:33 - and then I'll say
190:35 - use this function to display the proper
190:38 - information for each price container
190:44 - all right gotta like slowly
190:47 - talk it into rewriting my entire
190:49 - component for me okay
190:52 - uh use this
190:58 - in this component
191:01 - to display
191:03 - each of those prices as
191:09 - a
191:13 - price container element
191:17 - all right trash GPT this is a tough one
191:20 - for you but I got faith in you
191:21 - you can do it buddy
191:24 - I wonder if it would be uh easier if I
191:26 - just wrote it myself by now but I don't
191:28 - know it's kind of fun working with chai
191:30 - GPT
191:31 - okay
191:33 - so in the payment details
191:45 - price core total
191:50 - price core is a number
191:54 - okay that's interesting
191:58 - one
192:00 - so I'll say
192:04 - calculate total price let's take a look
192:07 - at this first
192:14 - okay
192:23 - all right uh price core total
192:30 - all right let's just clean up this code
192:33 - all right Church the we are going to do
192:35 - this together
192:37 - I'm going to pretty things up for you
192:39 - okay so cart items equals a cart product
192:47 - and that is true
192:52 - yeah
192:55 - okay so from types
193:04 - we need to give it a list of all the
193:06 - products in our cart
193:09 - so how do we do that so let's do this
193:13 - let's do this exact same thing unless we
193:17 - just want to pass in the cart product
193:18 - list from here
193:23 - hmm that's interesting too
193:28 - but let's not do that even though it may
193:31 - be a little bit performance benefit
193:32 - later on
193:35 - okay so car product list equals you
193:38 - selector selector State select your
193:40 - state
193:41 - give them a peek your St okay
193:44 - and then some of these
193:47 - optimize those later okay
193:50 - so the cart products
193:53 - you're gonna of course need that
193:56 - and you also need this car product list
194:02 - because
194:04 - whenever you calculate
194:06 - the total price
194:09 - we are going to have you calculate using
194:11 - this
194:12 - cart product list
194:15 - and what you're going to return is a
194:18 - price score total
194:20 - which is
194:22 - typed out right here
194:34 - all right now for cart product we are
194:37 - also going to be importing you
194:41 - and for the item we can just rename you
194:43 - to cart product
194:49 - for
194:51 - sure still got four
194:54 - okay
194:56 - all right
194:58 - now
195:00 - for calculating the total price what you
195:03 - do is you pretty much iterate through
195:06 - every
195:07 - carp product
195:09 - and you pull off the price core
195:12 - which is the core ID
195:14 - the amount and the quantity from it
195:24 - now for the accumulator what you can
195:28 - check is
195:38 - okay
195:41 - uh let's ask if there's any way to
195:43 - simplify this first because I have a
195:45 - feeling there might be
195:52 - also I should probably just log out
195:54 - these results soon and make sure that uh
195:57 - if else block yeah
196:16 - okay
196:23 - we can get rid of these as well
196:28 - all right so with price core equals
196:33 - whatever was there by default if nothing
196:36 - yet then just go ahead and set it to
196:38 - zero
196:41 - Plus
196:43 - the price amount multiplied by quantity
196:49 - okay now let's log this out console log
196:57 - all right and let's see what we're
197:00 - working with
197:03 - whoa whoa whoa whoa whoa whoa
197:05 - and that is because I need to call the
197:07 - function
197:09 - invoke it to get those sweet sweet
197:12 - results okay
197:15 - all right so this is looking good so for
197:18 - Price core one
197:20 - we get 6200 which is tnb
197:23 - price Core 2 you get 300 VTX
197:29 - great great
197:31 - and when I remove this should also
197:34 - update that's awesome this is great okay
197:38 - now let me add those back in
197:41 - just so we can get that uh fancy
197:43 - schmancy logic and
197:46 - another thing that I probably want to do
198:02 - okay okay okay
198:08 - so
198:12 - we probably want to memorize this
198:17 - memorize this and rename it to
198:23 - total
198:25 - totals
198:28 - total prices
198:34 - minimize this
198:37 - graph this and use memo and
198:50 - okay really leveraging here okay
198:56 - and rename to Total prices
199:07 - calculating total price
199:13 - all right so I know I'm spending a long
199:15 - time on this but it is an important part
199:17 - of this app and I want to make it as
199:20 - readable as possible since you know
199:23 - do have to maintain this as well
199:27 - so now do I have use Memo from this
199:30 - already
199:31 - you can do calculate total price
199:39 - cart product list and then total prices
199:42 - below
199:52 - that looks good now just test everything
199:55 - still
199:57 - yes this is looking good looking good
200:00 - looking good looking good looking good
200:08 - all right cool
200:11 - and I will say
200:14 - what else can we say use total prices
200:21 - using total prices
200:30 - using total prices
200:34 - update my components to render a
200:41 - to render a price container
200:46 - for each entry for each of those entries
200:58 - and also do I need to give you
201:16 - that's a good point I actually don't
201:22 - now at this point it's probably going to
201:24 - be easier if I just uh write it myself
201:26 - since
201:31 - prices all right don't use that
201:37 - render price error
201:41 - and then what I want to do is I actually
201:43 - want to split this up into a render
201:46 - price containers function
201:50 - okay so render price containers
202:08 - all right so render price containers
202:10 - which is going to be the core logo and
202:12 - the source of the logo and the price
202:14 - amount equals total to the local string
202:16 - the key equals the price core which is
202:20 - which is good
202:21 - and pretty much want to take this
202:24 - place it with these price containers
202:30 - for each of these what I can do
202:34 - is for the cores
202:45 - I can use this
202:52 - all right so I need to do
202:58 - cores price core and then logo
203:07 - and this is going to be tricky because
203:09 - it may be
203:12 - wait why is price core
203:20 - total prices
203:22 - this is going to return
203:30 - a price Court total
203:34 - total prices price core total
203:40 - highest price course string object
203:42 - entries price scores issuing
203:48 - this is interesting
203:49 - this total prices returns price core
203:52 - total for the price score is in number
203:55 - and the value is a number
203:58 - however in object entries
204:00 - why is press course string
204:24 - why is price core a string there
204:28 - because it should not be
204:33 - all object keys are strings under the
204:35 - hood
204:38 - implicitly converts into a string when
204:40 - you use object entries so
204:46 - this thing
204:49 - convert it back using a number
204:53 - okay so I just converted back
205:01 - a little messy but
205:09 - source
205:16 - okay
205:23 - and this is because if I have a number
205:25 - in here that doesn't exist then I'm not
205:27 - going to have a core
205:31 - so what I'm going to do is this
205:40 - I'll say core equals
205:47 - a core keyed by this and this can either
205:50 - be
205:59 - yeah so this may be equal to null
206:17 - your string is on the type string or
206:19 - null
206:25 - so this core is equal to a core
206:30 - okay so core logo oh wait a minute
206:36 - okay okay okay so
206:39 - this core logo is going to take a string
206:43 - or null
206:48 - yes yes yes okay
206:51 - so what I'm gonna have to do is a core
206:56 - forgot I wasn't using this core logo
207:01 - why not
207:09 - why not use this one
207:13 - instead I pretty much just need to give
207:15 - it a default unknown core
207:23 - yeah okay so I'm gonna have to clean all
207:26 - this up in a bit but for now what I can
207:29 - do is I can just say core logo or
207:32 - unknown core
207:35 - and then what I can do
207:39 - I think I want to keep this logic
207:42 - and the reason is because
207:47 - this is actually tricky what I'm
207:50 - thinking is if they have a
207:54 - well first of all this is working which
207:56 - is good
207:57 - okay that's really good
207:59 - um anyways
208:03 - what I was thinking is that
208:07 - if they have an object in their cart
208:10 - let's say these two objects with tnb and
208:12 - VTX
208:13 - and
208:15 - one of these cores get removed then
208:18 - what's going to happen with the item in
208:20 - their cart
208:26 - so what we can do is we can see if the
208:27 - course still exists which it should like
208:29 - 99 of time but in the rare case that it
208:32 - doesn't
208:35 - we can just return
208:39 - it won't render
208:47 - another thing we can do to simplify this
208:51 - bit is just this logic
208:56 - or even this logic
209:05 - can even simplify more but it's a little
209:07 - bit too unreadable I
209:11 - okay so let's just see what's going on
209:13 - right here
209:15 - so these are my totals 6200 tnb 300 VTX
209:20 - if I remove this one
209:22 - it just shows CNB if I remove this one
209:26 - just shows that one and remove this one
209:28 - I get none which is great
209:32 - I mean probably on an empty state right
209:34 - here actually what is my empty State tnb
209:36 - OS if I remove all of them
209:39 - the button is disabled the total says
209:42 - zero
209:44 - okay
209:46 - I kind of like that logic actually
209:48 - and maybe just have to say who knows who
209:51 - knows who knows
209:53 - hmm
209:57 - but either way this is working with
210:01 - total prices
210:06 - so now the next thing that we can do
210:12 - is
210:13 - go ahead and show those error messages
210:16 - yeah let's work on the error messages
210:18 - next so let me add these items back to
210:21 - the cart
210:23 - on another this from Amy and what else
210:26 - you selling Amy
210:27 - Amy I'm buying everything that you got
210:29 - okay
210:30 - so now let's work on our error messages
210:36 - and I'll do that after I take a mini
210:38 - break
210:39 - be back in just a second
210:41 - all right so now that we got kind of
210:45 - this logic working right here what I'm
210:48 - gonna do is
210:51 - figure out the logic for displaying
210:54 - these error messages
210:55 - and in order to do this what we need to
210:57 - do is we need to look at the total
210:59 - prices of everything and for each one
211:02 - compare it to the Wallet balance for
211:04 - this core
211:05 - and we just need to pretty much check
211:07 - that the balance can cover whatever
211:10 - you're trying to pay for
211:12 - so let's uh do that now
211:17 - in order to accomplish this
211:20 - I'm going to use another memo
211:26 - and this is going to say total price
211:28 - errors
211:31 - and it's just gonna return a list of
211:33 - strings which are going to be error
211:35 - messages
211:36 - and it's also going to use reduce
211:40 - and it's going to also
211:46 - take the
211:51 - object entries of total prices
211:54 - the accumulator is just going to be a
211:56 - string
211:57 - array and for each of these
212:02 - we are going to say
212:12 - so price core total
212:16 - and actually can we just pull it out
212:18 - from here
212:29 - and maybe we just do this the uh
212:40 - yeah I think we want to do this
212:57 - all right so for each of these
213:03 - all right
213:15 - four of
213:17 - foreignties of an object
213:28 - okay
213:33 - so what I'm going to do is this
213:42 - so I'm going to say
213:45 - and why am I getting issues here every
213:48 - sign constantly
213:54 - all right so what I'm going to do is I
213:56 - am going to iterate over the
214:00 - pretty much the total prices and I'm
214:03 - going to pluck off the
214:05 - core ID
214:07 - and the total price and then compare it
214:09 - to the Wallet balance
214:11 - so I need to get my wallets so files
214:22 - let's
214:29 - and I'll say the wallet
214:36 - okay so for my wallets
214:53 - okay
215:13 - if no wallet exists
215:17 - um
215:19 - add an error to the results
215:29 - all right so return results here
215:33 - final wallet
215:35 - and what am I doing here
215:40 - you are a string all right
215:44 - so Loop through each of these and find a
215:47 - wallet where the core matches the price
215:49 - core
215:52 - uh I'll say that
215:54 - the total
215:56 - price core
216:00 - compare the Wallet balance
216:04 - um
216:06 - ensure the Wallet balance balance
216:11 - um
216:13 - has enough funds to
216:16 - cover the total
216:19 - if not
216:21 - add an error to the results
216:28 - all right
216:30 - so I'll say here's my wallet object
216:40 - here's my wallet type
216:45 - uh fill I'll just say rate the code for
216:48 - these comments
216:59 - write the code for the comments complete
217:02 - the code for the comments
217:14 - here's the completed code for the
217:15 - comments okay let's see what you got
217:20 - while you're doing that
217:23 - total price errors
217:27 - okay
217:31 - all right all right all right all right
217:33 - all right all right okay
217:36 - so total price errors is gonna return
217:38 - and memorize string array
217:48 - so this is my for Loop and let's see
217:52 - what you got
217:54 - so let's keep those comments in there
217:56 - for now
217:59 - and pretty this up
218:01 - okay
218:02 - and what are you doing right here
218:04 - wallet is already declared in Upper
218:07 - scope
218:08 - wallet
218:09 - wallet where is wallet no it's not what
218:14 - unless wait a minute
218:19 - oh this variable right here okay
218:32 - so final wallet where the chord matches
218:34 - the price core so it's gonna iterate
218:38 - through all my wallets and find the one
218:41 - where the core ID
218:45 - wallet core
218:51 - wallet core ID that's right
218:57 - matches the price core which is going to
219:00 - be string converted to a number because
219:02 - using object entries keyed by string
219:06 - all right so if there's no wallet
219:09 - say no wallet found
219:12 - for core with ID price core
219:21 - all right
219:25 - and oh that's part of this okay
219:30 - um otherwise if you have a wallet Ensure
219:38 - okay first you need a wallet then if you
219:41 - have a wallet check that the balance
219:44 - is not less than the total
219:48 - okay otherwise you say total price of
219:51 - for core ID this
219:54 - exceeds available balance of this okay
220:05 - all right
220:08 - and what I also want to do is check the
220:11 - core itself
220:16 - and that would be this
220:25 - number Price score let's see core ID
220:33 - okay
220:40 - all right
220:46 - so what I'm doing here
220:50 - maybe I
220:53 - maybe I do this
221:01 - hmm that's interesting
221:07 - okay so I want to first check
221:16 - so I'll say this
221:25 - I'll say
221:27 - um
221:30 - yeah let's do this so if there's no core
221:34 - that we can find which is going to
221:37 - happen in the rare case that they have
221:38 - items in their cart
221:40 - for a certain core but then that core
221:43 - gets deleted in other words like a
221:45 - digital currency Network goes down I'll
221:47 - say no
221:49 - the core
221:52 - with ID
221:54 - core ID
221:57 - and I'll just say continue
222:01 - I kind of like this format I just think
222:03 - it's easier to read
222:05 - even though we may have a lot of
222:07 - continues
222:11 - actually we can just do this
222:17 - if there's no core then say there's no
222:19 - core with the ID of this anymore so
222:22 - that's going to be an error otherwise
222:25 - if you don't have a wallet for the core
222:27 - then of course you can't pay for it so
222:29 - you say no wallet found with a core
222:34 - God do you hear that screaming outside
222:38 - all right
222:41 - I gotta pause this
222:45 - all right someone was just a little
222:46 - angry outside need to pause it so I
222:48 - didn't have any swearing in my video
222:50 - where was I okay
222:53 - let me clean this up
222:55 - so what I'm going to do
222:58 - is first delete these and say there's no
223:00 - core say there's no core with ID of that
223:03 - chord otherwise if there is a core but
223:05 - you don't have a wallet for the core so
223:07 - no wallet found four
223:11 - and I'll say core
223:14 - dot ticker so for example if you don't
223:17 - have a tnb wallet and you're trying to
223:19 - buy some items for tnb it would just say
223:22 - no wallet found for can B
223:25 - otherwise
223:27 - if the Wallet balance is less than the
223:30 - total
223:32 - and I actually just want to switch this
223:34 - around for readability
223:36 - so if the total price exceeds the Wallet
223:39 - balance
223:43 - and what we can say is total price of
223:46 - total
223:48 - and I also want to display these as
223:52 - formatted
223:58 - so total price of total
224:06 - all right so something like total price
224:08 - of 500 tnb exceeds available balance of
224:13 - 100 tnb
224:15 - something like this
224:19 - and that is pretty ugly
224:42 - let me just clean that up a little bit
224:44 - okay
224:45 - so we are first checking if there is a
224:47 - core which should be a lot many of the
224:49 - times also checking that you have a
224:52 - wallet if not that's also an issue if
224:54 - you're trying to buy something and um
224:56 - last but not least
224:58 - check that you got enough funds in your
225:00 - wallet for it
225:03 - all right and then total price errors
225:06 - what we're going to say if
225:11 - disabled
225:14 - total price errors that length
225:18 - so basically if you have any errors at
225:20 - all then disable the button
225:24 - and then
225:25 - for the render price error
225:30 - what we're going to do is we're just
225:33 - going to say
225:36 - return
225:38 - total price errors dot map
225:51 - error message
225:53 - and then that just gets mapped to this
225:56 - with the error message displaying here
226:12 - okay
226:13 - so I think this should work
226:16 - everything besides the click button
226:18 - logic
226:19 - okay so this is good so far but now what
226:22 - I want to do is I actually want to
226:24 - reduce my wallet balance so I can test
226:26 - some things out
226:28 - so wallets let's put it at a
226:32 - right now I have ten thousand I want to
226:34 - put it in
226:36 - 2600
226:40 - okay
226:46 - and why do I get two right here
226:50 - this is interesting
226:53 - so I should get an error
226:59 - but only one
227:08 - so now
227:13 - let me just log out what I got for total
227:16 - price errors
227:19 - that is also interesting
227:24 - I only have one item in here
227:33 - render where am I getting oh wait a
227:36 - minute wait a minute
227:39 - hmm that's interesting interesting
227:47 - so I wonder if I can just key it by
227:49 - error message
227:54 - all right let me see if this fixes it
227:58 - is that what's complaining about my key
228:01 - e
228:03 - now why am I getting multiple error
228:06 - messages being displayed here
228:11 - oh because I'm rendering it twice
228:14 - I am a I am a there we go
228:18 - okay and is it okay to key these by
228:25 - well first of all I see a little issue
228:27 - here
228:30 - and that is
228:35 - this right here
228:40 - and in that case I might as well just
228:43 - dirty this up
228:45 - simplify
228:51 - wow that looks pretty terrible
228:58 - funny how things are okay
229:03 - now is this good for this key I guess so
229:14 - hmm
229:20 - all right and let's also check this uh
229:23 - disabled logic so
229:26 - let's do this okay I'm getting an error
229:29 - message right here
229:31 - because the total price of 6200 exceeds
229:34 - my
229:36 - let's do something different uh 22 000.
229:39 - 2100.
229:42 - okay so I have 2100 tnb total now of
229:46 - course 6200 is more than 2100 so I'm
229:50 - going to go to error however
229:52 - [Music]
229:53 - changes again 24.
229:58 - okay
229:59 - so this is more than 2400 however if I
230:01 - delete this
230:03 - then I shouldn't get an error anymore
230:07 - and the button is still good
230:09 - click all right good to go
230:13 - remove this still good remove this
230:19 - we probably want to empty state but that
230:22 - is good for now
230:26 - yeah
230:29 - yeah actually I'll just say that
230:32 - um what I can do is just disable this if
230:34 - there are no cart products at all
230:37 - that might be easier
230:43 - so I'll also say
230:51 - if
230:53 - on
231:01 - or
231:03 - okay
231:05 - so if there are no cart products or
231:09 - you have errors
231:14 - then go ahead
231:18 - and disable that
231:21 - okay so I don't have any errors but I
231:24 - don't have any car products either so
231:25 - that's disabled
231:27 - and now once I add this it should be
231:30 - good
231:31 - that works
231:34 - now let me just add a wooden spoon
231:37 - yes
231:38 - oh wait a minute so this is issue two
231:41 - where I can add items for myself
231:44 - but I don't want to do that so let me
231:46 - just add all of Amy's items all right
231:48 - Amy I'm going to take your mushroom book
231:50 - and these elephant figurines
231:54 - and okay
231:56 - so now this order total exceeds what I'm
232:00 - giving you
232:01 - that's an issue so this button is
232:04 - disabled so I'm going to remove this the
232:07 - button is good now
232:09 - now another thing
232:13 - okay so this is issue two where I don't
232:15 - have an address selected this button
232:17 - should be disabled and also another is
232:20 - selected prop
232:22 - just a linting issue
232:24 - but let's fix that right now
232:30 - so that is going to come from this
232:33 - address select model
232:36 - and we're getting yelled at because this
232:39 - is selected
232:41 - is not a valid Dom element that's being
232:44 - passed in
232:48 - so because of that we need to prepend it
232:50 - with the dollar sign
232:52 - so in that case just replace these three
232:56 - with a dollar sign
233:00 - be
233:02 - good this is fixed then okay
233:05 - so now let's just go ahead and make sure
233:06 - we don't get that linting issue anymore
233:09 - select this deselect it selected
233:11 - deselect it and okay
233:16 - so another thing I want to do with this
233:17 - button logic is I want to ensure that we
233:22 - have an active address
233:26 - so
233:28 - I'm going to do in that case
233:33 - is I want to pull out active order
233:35 - address
233:45 - and that's going to come from my hooks
233:51 - all right
233:53 - so in addition to these checks I'll say
233:55 - if you don't have an active order
233:57 - address or you don't have any products
234:00 - in your cart or you have any errors with
234:03 - your payments in other words you don't
234:05 - have enough funds to pay then we're
234:07 - going to disable that Bond
234:08 - now
234:10 - in that case if I remove this
234:15 - and I don't have an address the button
234:17 - is disabled which is what I wanted
234:19 - okay so now we have products have enough
234:22 - funds for it we have a valid address
234:25 - we're ready to place this order and we
234:28 - just need a click Handler for this
234:31 - Okay so so
234:34 - what we can do now
234:37 - is before we do this so let me actually
234:41 - just push this up because
234:44 - if I were to lose this logic I would
234:47 - probably cry
234:48 - so first let me just go ahead and run
234:50 - npm run lint
234:59 - and hopefully I don't get any issues so
235:02 - now let me push this up after a little
235:03 - mini code review okay
235:06 - so I don't think we wrote too much code
235:08 - here just a lot of like uh thinking
235:10 - through some weird stuff
235:13 - all right just change that to a dollar
235:15 - sign not much review there
235:17 - and then the payment details entire
235:19 - component
235:22 - doesn't take any props
235:27 - and we're pulling everything that we
235:30 - need car product list
235:32 - calculating the total prices for each
235:36 - core
235:40 - quantity or excuse me the uh
235:45 - value that you add and you take the
235:46 - amount
235:47 - that the product is times the quantity
235:50 - and add it to the total for the core
235:55 - Zero by default
235:59 - and for these errors
236:03 - what we're doing is we're iterating over
236:05 - all the prices
236:07 - and basically saying is there a core
236:09 - that exists still
236:11 - if not throw an error do you have a
236:13 - wallet because you need to pay for it
236:16 - if not that's a problem throw this error
236:19 - and then last but not least if the total
236:22 - amount
236:24 - exceeds the Wallet balance for that core
236:28 - then just give you an error message here
236:31 - a detailed error message which is good
236:34 - okay
236:35 - so now we're logging out something that
236:36 - we shouldn't be logging out the fixed
236:38 - end just a bit
236:43 - now last button actually will not last
236:46 - but not least I think I'm losing my
236:48 - voice
236:55 - okay payment details oh maybe not maybe
236:57 - I just had some in my throat
237:01 - maybe drink some more water maybe maybe
237:03 - maybe maybe maybe this maybe that okay
237:06 - now let me just clean this up real quick
237:10 - so this we don't need to log out anymore
237:13 - and then on that note I think we're
237:15 - going to push this up so I would say
237:18 - um
237:19 - uh cart total logic
237:31 - all right cool cool now I believe that
237:35 - the only other thing that we need to do
237:36 - from here is whenever we click this
237:39 - order button
237:40 - we need to submit this order and I think
237:42 - this is going to be a piece of cake too
237:45 - yeah
237:47 - because I remember our orders endpoint
237:50 - and actually that's
237:56 - yeah this is good
237:59 - okay so our orders and points
238:04 - if we take a look back at this on our
238:06 - back end
238:07 - uh shop if you use orders and then we
238:11 - can look at the serializer for it
238:14 - so all we need to pass in
238:16 - when creating an order is the address
238:26 - and then what we can do is for the
238:29 - address that we pass in just make sure
238:31 - that we are the owner of it
238:34 - and then yeah basically uses that
238:36 - address
238:39 - cool
238:42 - and then for the order objects
238:46 - yeah oh this is interesting
238:53 - so this uses a foreign key to an address
238:58 - and then in that case we're also going
239:01 - to run into an interesting situation
239:03 - where if the user places an order with a
239:06 - given address but then they delete that
239:08 - address then in this case the order is
239:11 - going to be deleted
239:12 - but I think this is fine for MVP since
239:14 - we're probably just going to test out
239:15 - with some silly things like Wooden
239:17 - Spoons and whatnot
239:19 - but uh yeah of course that's a big area
239:21 - we want to look at in the future
239:24 - you know after this becomes like the
239:26 - number one e-commerce site in the world
239:28 - which I don't know it's probably only
239:30 - going to be a week or so from now
239:31 - because it seems pretty dang awesome
239:35 - okay
239:38 - so let me actually let's uh give tea a
239:42 - pretty tough job
239:49 - yeah I'll do this
239:54 - okay
239:55 - so I'll say
240:00 - car products addresses
240:07 - so here are my coding standards
240:19 - write me API functions for
240:24 - orders
240:28 - and then I'll give you this
240:32 - and let's see
240:34 - actually this could be the last slice
240:37 - that we write
240:38 - kind of Bittersweet all right so there's
240:42 - great hiccups
240:48 - uh where are you
240:53 - and there are my serializers and might
240:55 - as well give you my order object as well
241:04 - here's how you can structure your API
241:05 - functions actually I gotta create my
241:07 - types
241:22 - I can't update order you can't delete
241:26 - orders but this is looking fine either
241:29 - way
241:32 - okay so let me actually go ahead and
241:35 - Postman what I'm going to do is just
241:39 - kind of do everything manually one last
241:40 - time hopefully
241:42 - and then
241:44 - I am gonna pretty much get all my
241:47 - typings
241:48 - you know what we're actually looking
241:50 - pretty good for this I actually don't
241:52 - even need to use Postman
241:58 - all right so
242:04 - first of all where are my dresses coming
242:06 - from
242:07 - log out log in
242:09 - shop
242:10 - my dresses okay
242:14 - so that's another thing
242:18 - so I do have addresses in here
242:23 - Bucky
242:26 - okay so I need to fetch my addresses off
242:29 - the bat as well
242:34 - and when am I doing this
242:45 - am I just never fetching my dresses
242:51 - yep that's what it looks like
242:55 - all right so that's not good
242:58 - so let's do that so in my layouts my
243:02 - authenticator layout
243:04 - what I'll do is this
243:07 - I will say that
243:11 - in my dispatchers
243:16 - I want to
243:17 - whenever I first boot up the app I want
243:20 - to get my addresses
243:23 - because well we need them
243:27 - all right and now
243:31 - I log back out and log back in
243:34 - shop my dresses I have my addresses okay
243:39 - now the address endpoints
243:44 - gonna consist of these addresses
243:49 - and then whenever I am
243:52 - submitting my order
243:55 - I need to pass in the address ID of an
243:58 - address that I own
243:59 - which is four six
244:02 - or nine
244:05 - if we're testing
244:07 - five this must belong to someone else
244:14 - all right so now let me go ahead and try
244:16 - to post an order or create an order
244:21 - and first let's just kind of do it
244:23 - incorrectly
244:33 - clear buffer okay
244:37 - so now I'm going to create an order and
244:41 - just pass in
244:43 - just a useless problem for now
244:47 - actually for the address
244:50 - um I can even try to put in five right
244:52 - now
244:53 - and this should
244:56 - okay wrong endpoint
244:58 - okay address does not belong to the
245:01 - authenticated user that is good
245:06 - now if I pass in an address that I do
245:09 - have
245:13 - where was that data okay
245:17 - so let's say address number four
245:20 - is one of them that I do have available
245:25 - so in step five four
245:31 - let me go ahead and send this up and
245:33 - then I get a valid order okay
245:37 - so the only thing I need to do to create
245:39 - an order is just pass in an address
245:43 - fascinating
245:44 - so now with that information I'm
245:47 - recording still right yep okay so now
245:51 - let's go ahead and make our crate order
245:55 - request
245:57 - typing
245:59 - so types API orders new types your file
246:02 - where yeah where are you at orders
246:05 - now just like um I don't know
246:08 - addresses I guess
246:13 - um create a dress request this is going
246:15 - to be create order request
246:17 - and it's just going to take an address
246:19 - which is a number
246:23 - for address ID
246:25 - that looks good orders
246:28 - just says create order request okay good
246:30 - to go okay so now in my main typescript
246:35 - let me just import that
246:37 - that is under exchange orders
246:44 - orders and that was called create order
246:46 - request
246:50 - this
246:55 - code uh actually we can do sort lines
246:58 - edit
247:03 - all right I also do chord code optimize
247:07 - Imports
247:08 - and now
247:13 - we are going to need to
247:18 - hmm
247:21 - should we make our API endpoints first
247:23 - or kind of just structure everything out
247:25 - in the store
247:29 - let's do this
247:33 - okay
247:39 - all right let's go ahead and start
247:41 - creating our store before we can
247:42 - dispatch anything to it so I'm going to
247:45 - new touch your file name orders
247:48 - and in here
247:50 - we are going to say
248:00 - all right
248:04 - so first of all orders extends from
248:07 - creating modified right
248:15 - this is going to be an interesting one
248:23 - okay
248:25 - so I'm going to be storing orders which
248:27 - of course as an ID
248:29 - she'll just look at our order serializer
248:34 - so our order read serializer has all the
248:36 - fields from orders
248:38 - which is created and modified
248:43 - an ID and I got those two already
248:45 - created modified ID those are the easy
248:47 - ones
248:48 - and now in addition to that
248:51 - we also have
248:56 - buy your seller and address
249:00 - buy or seller and dress and order
249:01 - products
249:04 - now we have these from the
249:08 - address
249:10 - serializer
249:15 - but then we need one for order products
249:24 - and for that
249:29 - let's get a
249:31 - let's just do this
249:36 - okay working from the inside out here
249:40 - um
249:43 - create a typescript
249:49 - for this which is order products and I'm
249:52 - going to need an order products type so
249:54 - new texture file I'll say order products
250:03 - it's actually clean up some of this
250:08 - okay so here's my order type here's my
250:11 - order products type
250:14 - now my
250:17 - order product
250:25 - is going to have an ID
250:29 - let's go pretty much have all these
250:31 - right
250:41 - okay
250:43 - so let me just kind of compare this it
250:46 - has in
250:47 - ID
250:50 - description image
250:53 - name price of melon price core quantity
250:58 - as an order which is ID
251:01 - product which is an ID
251:07 - okay this is good this is good
251:12 - that's what we were looking for okay
251:15 - so now first let me just go ahead and
251:17 - register this with my main types in that
251:20 - is under manager
251:23 - and I'm just going to say order products
251:27 - we have an ordered product type coming
251:29 - from there
251:31 - I'm n o p okay and now in here
251:37 - under my order
251:41 - I can also say
251:47 - oh it already did
251:54 - interesting
251:56 - all right order
251:58 - it's going to have buyer
252:11 - all right so let me say
252:19 - create a typescript interface for this
252:21 - which is my order now that I have my
252:23 - order product taken care of
252:29 - so from my order products I'm going to
252:32 - need order product
252:34 - and in my order let's just see so I have
252:37 - an address
252:40 - that is
252:42 - just an address
252:50 - yeah so my address is just going to be
252:52 - an address
253:02 - all right so my address is an address my
253:05 - address is an address
253:11 - this is oh this is good this is good so
253:13 - my address is a New Dress my buyer and
253:17 - my seller are from the user root
253:19 - serializer
253:21 - now my order products are going to be a
253:23 - list of order products so I can steal
253:25 - this
253:28 - and let's see what else so I have a
253:31 - buyer and a seller too
253:34 - buyer and seller and those are just user
253:37 - read serializers right
253:48 - [Music]
253:54 - okay
253:55 - okay and
254:00 - all right so
254:05 - fire is a user read serializer in the
254:08 - seller too
254:17 - all right so this is my order object
254:19 - with the address buyer ID order products
254:21 - in the seller
254:23 - so address buyer order products the
254:26 - seller and then also created modified
254:28 - which we can hear from and that should
254:30 - be good to go
254:33 - okay
254:34 - so now let me just go ahead and import
254:36 - it into my main types
254:39 - so order products and then orders
254:45 - here we have order
254:47 - which is a single one
254:49 - and the orders which is how we're going
254:52 - to be storing it in the Redux Key by ID
254:55 - Le NLP
255:02 - now let me just go ahead and sort these
255:07 - edit sort lines
255:10 - okay
255:12 - now we can go ahead and create an orders
255:17 - oh first of all constant
255:30 - all right and then from this what are we
255:34 - going to be doing for orders
255:38 - so first of all we need to order this
255:40 - file
255:43 - for the reducer and
255:45 - it's probably going to be similar to
255:47 - wallets
255:49 - where we set many or one
255:59 - um
256:01 - yeah let's do it for here
256:05 - so I've never unset
256:08 - everything else is the same okay
256:12 - so orders
256:13 - uh the store is gonna be similar to
256:15 - addresses
256:16 - first
256:20 - what we're going to do is replace a
256:22 - bunch of stuff in here okay
256:28 - Place addresses with orders
256:32 - replace a dress with order
256:35 - replace lowercase addresses with
256:38 - lowercase orders
256:42 - now we don't need onset order because we
256:45 - never delete an order at least not for
256:47 - now
256:48 - and then this logic should take us home
256:51 - okay
256:52 - so for the order slice
256:56 - we're going to be storing orders in a
256:58 - dictionary Key by orders initial state
257:00 - is nothing
257:02 - a constant that we use for auto
257:04 - generating action names it's just orders
257:07 - sure I spelled this correctly orders
257:11 - and then what we're going to do is we're
257:12 - going to set an order
257:14 - by passing in an order
257:17 - and then key it under the ID
257:20 - and then when we set multiple orders for
257:22 - example we just refresh our orders page
257:25 - make requests get a list of orders back
257:27 - and then set all those keyed under ID
257:32 - so this is looking good
257:36 - and now from here what we can do is just
257:39 - register this
257:40 - in our main store
257:44 - and we can do that by saying for orders
257:52 - under orders use the orders reducer is
257:55 - the value
257:59 - looking good and now even though we
258:01 - probably won't be using it in this video
258:09 - I will say that for the future whenever
258:12 - we call get orders then give us
258:16 - everything under the orders
258:19 - slice
258:22 - okay so that's good
258:25 - so now we can actually create those
258:30 - API functions
258:36 - for orders
258:43 - all right so let's do that now so new
258:47 - uh texture file orders
258:56 - and I think chat GPT already gave me
258:59 - these yeah
259:05 - okay so let's steal some of this
259:10 - so for orders what we want to do is this
259:17 - all right so we have pre-order request
259:21 - and that was what we called it right so
259:23 - types index
259:25 - pre-order request okay
259:29 - so the end point for this is just API
259:32 - orders now with create orders we're
259:34 - going to send it create order requests
259:36 - and get back in order
259:39 - now we can't delete orders
259:44 - can get orders and in this case we're
259:46 - just going to make a request at this
259:47 - endpoint it's going to return our orders
259:49 - as a list
259:51 - and then we can't update an order either
260:01 - so in this case what I can do
260:08 - is
260:10 - create my dispatcher functions
260:17 - I'll say here are my API functions for
260:21 - orders
260:34 - and I'll say
260:44 - here are my coding standards for
260:47 - dispatcher functions
261:00 - create me
261:03 - dispatcher functions for orders
261:13 - create order get orders set orders
261:21 - set orders orders
261:25 - okay that all looks good
261:34 - all right so create order
261:37 - get orders I don't have any singular
261:41 - singular get order whenever you create
261:43 - order you pass in and create order
261:45 - requests which is pretty much just the
261:47 - address
261:51 - and then
261:54 - it's going to set that order in our
261:58 - store
262:01 - now to test this let's go to our
262:10 - checkout payment details
262:15 - and then handle button click
262:20 - this is where
262:29 - so let me just uh
262:33 - [Music]
262:48 - let's just steal some of this okay
262:53 - so I am going to be doing something like
262:57 - this
263:02 - so first let's import what we need to uh
263:06 - dispatch we need to import
263:12 - dispatch
263:14 - our toasts
263:16 - display toast display error toast
263:20 - toast type from enums
263:24 - E F G H and then let's see
263:28 - so on handle button click
263:33 - which is to place the order
263:36 - what we are going to be doing
263:38 - is we're going to be making a request to
263:40 - the back end
263:43 - to create that order
263:47 - and the request data is just going to be
263:48 - the address
263:53 - and it is going to be the active order
263:57 - address ID
264:05 - no active
264:09 - and just return
264:12 - so by this time we're going
264:20 - to address his number
264:25 - oh wait I'm using the wrong
264:27 - um
264:29 - yeah
264:30 - so this was for dispatcher orders
264:32 - payment details yeah
264:35 - done stealing stuff from you okay
264:38 - so first of all this is supposed to be a
264:40 - create order
264:42 - so from orders we want to use this
264:47 - and then
264:49 - for this request
264:53 - we want to pass in this request data
264:58 - and it says getting an error still I
265:01 - think I might have spelled something
265:02 - wrong in my create order request that's
265:06 - an interesting
265:08 - oh yeah
265:10 - it's a dress not dresses
265:14 - that's my request data
265:16 - now if this is successful I'll say order
265:21 - created
265:23 - and if not I'll say error placing order
265:29 - does that make sense order created and
265:32 - error placing order got two different
265:34 - verbs going on but I think it's all
265:36 - right
265:40 - now let me see if I can just shorten
265:41 - this a little
265:43 - a little bit just a little bit
265:48 - okay
265:51 - so when you handle the button click to
265:53 - place the order
265:56 - you're gonna make a request to the back
265:59 - end to create it
266:00 - and then it's going to display a toast
266:02 - that says order created and then after
266:04 - that what we'll do is we'll navigate you
266:09 - to the buy orders page however that's a
266:12 - little bit too much logic
266:13 - test out all at once so let's just test
266:15 - this out now
266:19 - okay
266:21 - okay
266:22 - okay okay
266:25 - all right so from the top here
266:28 - um Let me refresh this
266:30 - I'm logging this buggy right okay
266:34 - so first of all how much money do I got
266:36 - left only 200 bucks
266:39 - so I'm just gonna go ahead and uh
266:42 - add a little bit more to my wallet let's
266:45 - say uh ten thousand
266:50 - okay
266:51 - so now let me refresh this 10 000
266:53 - beautiful okay
266:55 - so let's go ahead and go shopping okay
267:00 - I'm gonna buy this cart or this cup from
267:02 - Amy
267:03 - I'm also going to buy this book
267:08 - the quantity you requested exceeds okay
267:10 - so I already bought this
267:14 - so this is actually smart logic but um
267:19 - a little bit too smart
267:21 - all right
267:23 - sorry I'm buying this book
267:26 - and it has a quantity of one
267:31 - okay and now last but not least elephant
267:33 - figurines and since I already paid for
267:36 - this it's probably going to have a
267:37 - quantity oh no that's awesome oh because
267:40 - I didn't have enough money to pay for
267:41 - earlier
267:43 - but anyways check it out
267:46 - um
267:47 - so I now have
267:50 - 6200 300 now I just need an address
267:53 - let's send it to uh
267:56 - my penthouse on bacon Ave Pasadena India
268:01 - and this should be good
268:03 - so now what I want to do is I just want
268:05 - to make sure that the order is placed
268:08 - and it appears in Redux so first place
268:12 - the order
268:14 - created
268:17 - and that means that the order was
268:19 - created on the back end and now
268:22 - in Redux
268:24 - I have that order set right here
268:27 - and also another interesting thing
268:29 - that's happening is because whenever so
268:32 - I had ten thousand
268:34 - now whenever I place that order it took
268:37 - 6200 can be deducted it from my account
268:41 - and now if we check out my wallet I only
268:44 - have 3 800 left
268:46 - and that is why I'm getting this error
268:49 - message back however it's not really an
268:52 - issue because what we're going to do now
268:55 - is
268:56 - after I submit this I'll make a little
269:00 - to do to navigate away from that page
269:04 - so I'll just say
269:09 - navigate to the buyer order page
269:15 - all right
269:16 - so I am going to
269:19 - and then actually let me think about
269:21 - this
269:23 - all right so I'm going to be taken to
269:25 - this page right here buyer orders
269:27 - and another thing that I want to do
269:31 - is once this order has been placed
269:37 - so on the back end whenever you place an
269:39 - order it removes all the items from your
269:42 - cart
269:43 - so what I can do
269:46 - is after I place that order
269:49 - I want to remove all the items from my
269:51 - car so we'll do that as part of the
269:52 - process so let's do that now
269:56 - okay
269:57 - so I'm going to create an order
270:00 - and then I'm also going to dispatch
270:05 - this
270:09 - function right here
270:14 - Set Card products set cart products
270:19 - all right so in my
270:24 - so I'm basically just going to wipe out
270:26 - all my cart products
270:28 - reset it to an empty list
270:30 - and I'm gonna do that right here
270:35 - and that will work
270:38 - okay so now let's try that one more time
270:43 - and okay
270:46 - I'm gonna refresh this I have no cart
270:48 - products nothing in my cart
270:51 - and then let me just buy this mug
270:54 - so the products I'm gonna have to add
270:56 - one more oh actually I had eight of
270:58 - these nice
271:01 - so now I have one mug in my cart
271:04 - just going to go ahead and place the
271:05 - order
271:06 - it creates it on the back end
271:09 - s it to my store so now I have two
271:12 - orders in there and I also emptied out
271:16 - all my car products which is good now
271:19 - after this the last little bit of logic
271:22 - that we need to write is just navigating
271:24 - to the buyer orders page
271:28 - so
271:31 - let's do that right now and then we can
271:34 - pretty much call it a day
271:37 - to navigate
271:42 - all right so where are you coming from
271:44 - react router Dom let's import you
271:50 - use navigate
271:52 - and then we need to pull it from the
271:54 - hook
271:58 - and then we want to navigate
272:01 - to
272:02 - well first when do we want to navigate
272:04 - right here
272:11 - just grab the URL shop by orders
272:16 - and
272:23 - all right
272:24 - so now what's going on is that we're
272:27 - going to place an order and then this is
272:29 - going to be created stored on our front
272:30 - end we are going to remove all our cart
272:33 - products and then we are going to
272:35 - navigate to our orders page
272:41 - optimize those and then eventually
272:43 - probably in the next video what we'll do
272:45 - is we'll build out that orders component
272:47 - but for right now one last time let's
272:50 - test this
272:52 - and I'm gonna buy another mug really
272:53 - loving these mugs
272:55 - going to the chord I got my address
272:58 - selected bacon Ave Pasadena place this
273:02 - order created cart emptied on the orders
273:06 - page we are looking good all right
273:10 - so what I'm going to do is I'm going to
273:12 - stop the video here do a little bit of
273:13 - self code review and then in the next
273:16 - video we're going to be well hopefully
273:18 - finishing everything up look at this got
273:21 - another item off the checklist
273:23 - buyer checkout page looking good
273:26 - so in the next video we're just going to
273:27 - be making our orders component and we'll
273:30 - reuse that component to use both on the
273:32 - buyer side and the seller side
273:35 - but five days until show time we are on
273:38 - a very good Pace to complete this thing
273:40 - so as always thank you guys for watching
273:43 - and I'll see you next time