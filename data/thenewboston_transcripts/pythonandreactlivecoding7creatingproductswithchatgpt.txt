00:00 - already on Welcome Back and in this
00:02 - video what I'm going to be doing is
00:04 - starting on the front end for the shot
00:06 - feature I already built out a few pieces
00:08 - of it but we'll get into the meat and
00:10 - potatoes of it in this video
00:12 - and I also want to mention that we left
00:15 - off in the last video with a little bit
00:18 - of backend logic still to write however
00:20 - in between the last video and this one I
00:22 - did do a little bit of work with the
00:24 - payment logic so the payment processing
00:28 - for whenever you place an order is all
00:31 - taken care of now and on that note the
00:34 - uh back end is really all completed now
00:37 - so you can see the payment logic is
00:39 - pretty simple basically
00:41 - you know pretty self-explanatory but you
00:43 - add up the price of everything in the
00:44 - cart deduct it from the buyer's wallet
00:47 - and add it to the seller's wallet and
00:50 - then we're just of course saving that
00:51 - and then we're streaming down those
00:53 - updated balances to both the buyer and
00:55 - the seller
00:57 - so again pretty uh self-explanatory have
01:00 - that payment logic works but on that
01:03 - note as long as we don't have any bugs
01:05 - or you know we have to make any tweets
01:07 - to like the response data for any of
01:09 - these endpoints the back end for the
01:11 - shop should be working now
01:14 - so let's go ahead and hop over to the
01:17 - front end and I'll show you what I have
01:18 - so far so this is actually tnb OS
01:22 - eventually what we're going to be
01:23 - building out but for the website what I
01:26 - have is I just added a link to the left
01:28 - menu shop and it takes you to this shop
01:31 - section
01:32 - and the SOP or excuse me shop layout
01:36 - consists of a top toolbar and then the
01:39 - bottom pages that we're going to be
01:40 - building out one by one
01:42 - and you have a buy toolbar and a sell
01:45 - toolbar so these are like two main
01:46 - sections of the shop app or feature
01:49 - whatever we're going to call it
01:51 - now the bisection has a home page and
01:54 - this is where
01:55 - this section is going to go this product
01:58 - catalog I'm calling it and it also has a
02:01 - page for your addresses where you're
02:03 - gonna receive your items your orders and
02:06 - of course your cart or checkout section
02:09 - and for the cell section it's pretty
02:11 - simple you're just going to have a list
02:13 - of products and orders
02:15 - so the way we're going to be building
02:16 - this out is actually kind of similar to
02:18 - the back end kind of like
02:20 - um how everything is pieced together
02:22 - naturally I would say
02:24 - and by that I mean the first thing that
02:27 - we need before we can you know browse
02:29 - products or add anything to the cart is
02:31 - of course a product
02:33 - so I'm going to be building out the page
02:35 - for the cell products and again I'm
02:38 - gonna have right now
02:40 - um on tnb OS this is done through using
02:43 - a modal but I actually want to create a
02:45 - separate page for this because I don't
02:47 - know I just think it would be a better
02:48 - ux then you can use the same page
02:50 - whether you're adding or editing
02:52 - products but either way I'm going to
02:54 - have a forum to add and edit products
02:56 - and then after that we can start on this
03:00 - page right here where you can browse
03:02 - those products
03:03 - so yeah let's go ahead and get started
03:06 - so I am in shop right now
03:10 - sell sell products this is what's
03:13 - actually
03:16 - so this page is going to have a list of
03:19 - your products so what I'm going to do is
03:21 - I'm just going to have a heading that
03:22 - says pretty much this heading right here
03:28 - with products and then we'll have a
03:30 - button on the right that says add and
03:31 - whenever the user clicks this it'll just
03:33 - take them to pretty much this page right
03:36 - here so let's just start with this top
03:38 - heading for now
03:41 - and all right so I actually want to
03:43 - borrow that from tnbos
03:45 - so is this section heading
03:49 - and that is this
03:52 - The Heading component
03:54 - and I also have a separate component
03:57 - just for this line
04:00 - right here because I reuse that in a
04:02 - couple places and I want to standardize
04:04 - it so before we get to this let's just
04:07 - go ahead and borrow some of these
04:08 - components from tmbos
04:11 - an array so I'm going to copy this
04:13 - entire line component
04:15 - and in my components here
04:19 - I'll have line already do I nope so just
04:21 - paste that in
04:22 - all right
04:25 - so the styles are just coming from there
04:27 - colors border defaults
04:32 - all right
04:36 - so online component
04:42 - okay so all this line component is is
04:46 - just a horizontal line it doesn't have
04:48 - any border it has a border top of one
04:51 - pixel and no margin basically just a one
04:55 - pixel Gray Line
04:57 - all right that looks good and now with
05:01 - that taken care of we can go ahead and
05:02 - make this section heading component
05:04 - so what this component is
05:08 - is going to consist of
05:11 - basically a top section that has a
05:14 - heading on the left and optional right
05:17 - content on the right and this can either
05:19 - be a button or well really anything it's
05:22 - just going to be any valid react node
05:25 - so yeah let's just go ahead and copy
05:28 - this
05:31 - section heading move it over to my front
05:33 - end app
05:37 - and now let's see
05:39 - The Heading actually don't want this
05:41 - color
05:42 - the contents are going to display Flex
05:44 - Flex between and padding bottom
05:49 - now this
05:56 - so now this should be good for the
05:58 - section heading
06:02 - so I'll say import
06:09 - all right import section heading
06:12 - from section heading
06:16 - and now let's do this
06:19 - so on tin b os I'm of course rendering
06:22 - it actually lets you just get something
06:24 - rendered on the screen first
06:34 - products
06:37 - all right so first we need some padding
06:41 - on the page and what was my
06:44 - padding for tnbos
06:57 - actually let's uh
06:59 - let's not do that
07:02 - let me see what my padding was on one of
07:04 - these pages
07:07 - all right so this page has a padding of
07:09 - 16 all around so in my shop
07:13 - so
07:16 - I am also going to have a padding of 16
07:20 - all around
07:24 - all right looking good and now what we
07:26 - can do the heading might be too big by
07:29 - the way let me
07:32 - yeah let's go like 24.
07:37 - yeah that looks a little bit better okay
07:40 - so the heading is going to have 24
07:52 - all right and now what I want to do is I
07:55 - want to render a button on the right
07:58 - so let me just look at the logic for
08:00 - tmbos render add product button
08:04 - and okay so I probably don't need to
08:06 - break that out until
08:09 - its own component but
08:14 - all right
08:25 - all right actually let me try to find a
08:28 - button
08:29 - that's used outside of form
08:34 - all right so import the button
08:40 - actually maybe I will
08:43 - am I rendering any other buttons
08:56 - all right so for this I'm just going to
08:59 - return
09:10 - and the text will have the same as this
09:18 - add
09:21 - write content
09:23 - render button
09:25 - and the semicolon
09:28 - and how are we looking so far
09:31 - button add
09:35 - how is my padding looking
09:37 - actually I think that what I want to do
09:44 - align items flux in why is that
10:00 - why am I getting a little extra pattern
10:02 - under the products
10:10 - hmm
10:20 - that's my line height actually what is
10:23 - my line height
10:31 - a line height of one
10:35 - there we go that's what I wanted
10:38 - but to now that actually doesn't look
10:40 - that great I know it takes time but uh
10:44 - whoa whoa whoa
10:51 - 1.2
10:55 - okay 1.2 I know these are just small
10:59 - changes but you know it's always good to
11:02 - pay attention to the detail so it
11:04 - separates uh
11:07 - like a high school project from a more
11:09 - you know try to make it more
11:11 - professional whenever we can
11:13 - even though I am far from any designer
11:16 - like to try my best all right so I'm
11:18 - heading
11:20 - is going to have a line height of 1.2
11:22 - that's what I think looks the best and
11:25 - now let's add some click logic to this
11:27 - button
11:28 - so on click what's going to do this one
11:30 - toggles product modal
11:33 - but in this case we want to navigate to
11:35 - a new page a page that we didn't create
11:37 - yet
11:38 - so before you even write the click
11:42 - Handler for this let me go ahead and
11:43 - make that page
11:45 - now the pages here
11:48 - do I have that yeah so say sell create
11:52 - edit product
11:58 - so product details
12:01 - actually let me pull up this as well
12:07 - so
12:09 - create edit product
12:12 - so for my page name it convention I am
12:15 - so since all my pages are split up into
12:17 - two sections by or so I'm just
12:19 - pre-pending it with either buy or sell
12:20 - I'll say sell
12:22 - uh create edit product
12:31 - all right
12:34 - now we're going to have new styles
12:38 - and then we're going to have a new
12:40 - component
12:49 - and why is this
13:02 - y m
13:09 - I getting this
13:13 - oh system types
13:16 - oh wait a minute I'm on the wrong
13:21 - oops
13:36 - IDE error occurred what
13:41 - I got too many projects up there right
13:43 - now losing tracks so it gets
13:45 - revert why did an IDE air occur
13:51 - okay so create edit product
13:58 - I'm worried about the error
14:00 - where did it pop up okay so git add
14:05 - all right so whenever the nav the user
14:09 - clicks on this button what we want to do
14:11 - is navigate to this page in in that case
14:16 - I need to update my
14:18 - routing Logic for the shop
14:22 - to say to render that page
14:24 - and I am going to say
14:29 - [Music]
14:34 - now what is the URL for that page I'll
14:37 - say uh
14:40 - create edit
14:42 - product
14:45 - in that URL cell slash creative product
14:49 - is going to render that create edit
14:50 - product so
14:52 - now what we can do is we can write the
14:54 - navigation logic so
14:59 - navigate navigate
15:03 - all right so to navigate we're gonna
15:07 - use this hook
15:09 - use navigates and then
15:13 - we're gonna create a navigate variable
15:16 - referencing that hook and then
15:19 - we can
15:22 - make a quick click anywhere so
15:27 - handle
15:28 - add
15:31 - sheet handle button click
15:33 - I only have one button so no need to
15:35 - differentiate
15:39 - and what
15:43 - all we need to do is
15:48 - navigate to Shop create edit product
15:54 - Shop sell
15:56 - creative product
15:59 - and on click handle one click
16:03 - and that should be good so let's test
16:07 - here she let me uh really quick just
16:09 - take a peek in my
16:12 - since everything is running since uh
16:16 - yeah what was this
16:20 - a solidity that's interesting whenever I
16:23 - pasted something
16:28 - huh
16:31 - that's uh weird and interesting so I
16:35 - um
16:36 - wrote those files in the wrong project
16:38 - so I copied it and pasted it into this
16:40 - one and then when I did there's a error
16:42 - with my solidity plug-in which is weird
16:44 - because we're not writing any solidity
16:46 - at all funny how things are okay
16:49 - anywho moving on
16:52 - uh let's see so I'm on this page I click
16:55 - add
16:56 - and it takes me to this page sell create
16:59 - edit product looking good
17:01 - now
17:03 - what
17:04 - I could do
17:06 - is since this is going to be a form and
17:10 - let me show you so this is going to be
17:12 - form that looks somewhat like this not
17:14 - exactly but something like this where
17:16 - you
17:18 - can either add a new product or you edit
17:22 - an existing one and in this case
17:25 - since we're using this as a web
17:27 - application what the kind of standard is
17:30 - I guess is that whenever you're creating
17:32 - a new one you just go to the URL like
17:34 - this
17:35 - and then whenever you are editing
17:37 - something you can pass in that object ID
17:39 - however I actually set this up a little
17:42 - bit different in another app that I was
17:44 - working on uh cooking social network
17:47 - and what I did in this case
17:51 - is
17:53 - let me see exactly how this is
17:55 - structured because I remember I really
17:57 - liked it
17:59 - all right so create edit recipe
18:04 - yeah
18:06 - so I'll show you what I did here
18:08 - so
18:09 - I basically have a slice or just
18:13 - variable in my Redux store that's called
18:15 - active recipe and this is either going
18:17 - to be equal to null or a recipe and I
18:21 - just
18:22 - whenever I navigate to the page if I am
18:26 - just creating a new one then I just set
18:28 - it equal to null and that means hey
18:30 - there's nothing there and if I am
18:32 - editing one then I just set it to that
18:36 - active recipe in the store and that way
18:39 - whenever I go to this page it either has
18:41 - one in it or it doesn't and I don't know
18:43 - I just
18:45 - I think it was uh like a piece of cake
18:47 - working with because then you can just
18:48 - check this in the store don't cut it
18:50 - right about don't kind of worry about oh
18:53 - wait a minute wait a minute though
18:58 - no no no that's good
19:01 - hmm
19:05 - yeah I think that's fine since what
19:07 - logic I'm thinking through is what
19:09 - happens if they go to that page and they
19:13 - they refresh it but that's going to be
19:15 - fine too because then it's just going to
19:16 - look for that active recipe or active
19:19 - product in the store
19:21 - and yeah so we'll go with this Logic for
19:25 - now
19:27 - and what was this called uh active
19:30 - recipe
19:33 - okay
19:34 - so what we need to do in this case is
19:36 - first type out
19:38 - a product so in my types
19:43 - we would just go with products
19:47 - yeah
19:50 - so what I'm going to do is create a
19:52 - typescript interface for products
19:55 - and in order to do that I'm going to
19:57 - have chat GPT help me out a little bit
20:01 - actually how am I gonna do this
20:04 - shop models
20:07 - product inherits from both item
20:12 - and created modified
20:16 - and do I have
20:19 - created modified now
20:26 - to create a date
20:33 - all right so let's go ahead and do some
20:35 - cleanup
20:36 - all right
20:38 - so I want to structure my typescript
20:40 - interfaces similar to the back end you
20:43 - see here a lot of my models or
20:46 - interfaces are inheriting from creating
20:49 - modified on the back end so I'm kind of
20:51 - writing some duplicate code here and I
20:53 - want to clean that up right now
20:55 - this one can be cleaned up this one can
20:57 - be clean up this one can be cleaned up
21:00 - so in order to avoid Tech debt let's go
21:03 - ahead and make another generic type
21:08 - for creating modified
21:11 - and I want to see if I did it here too
21:21 - okay
21:23 - okay so
21:26 - first things first let's go ahead and
21:28 - have Chad GPT
21:32 - write a typescript interface for this
21:34 - shared Base Class
21:40 - all right
21:44 - oh mama
21:55 - all right and let's should we stick this
21:58 - in generic or not actually I don't think
22:01 - so
22:03 - since on the back end it is in its own
22:06 - file so let's just stick with the same
22:08 - pattern
22:10 - alright so types I'm going to have a new
22:13 - file typescript file
22:16 - created modified
22:19 - m-o-d-i-f-i-e-d
22:26 - m-o-d-i-f-i-e-d had to make sure I
22:28 - spelled it right and okay so that is
22:31 - looking good
22:32 - now for the
22:35 - types
22:37 - let's go ahead and import that
22:50 - and why is it not finding that
23:05 - uh did I not export anything what's
23:08 - going on here
23:11 - yep forgot to export it okay so from
23:15 - this we're just
23:17 - doing this and this is just so I can
23:19 - have all my types
23:23 - nice and neat
23:28 - all right
23:29 - so we got the created modify type
23:33 - and now what we can do
23:36 - is create a products type
23:39 - so actually before you even get to that
23:42 - what I want to do is just um
23:45 - Yeah clean up all of these
23:50 - existing ones
23:54 - so from
23:57 - created and modified
23:59 - created modified and for the wallet
24:03 - extends created modified get rid of
24:06 - created and modified
24:08 - so wallet is taken care of and now it's
24:11 - going to be for
24:14 - change
24:18 - core and trades
24:38 - get rid of you get rid of you
24:46 - all right nice and neat and now on that
24:50 - note
24:53 - let's go ahead and make that products
24:55 - type so typescript file
25:04 - and this is going to use the same
25:05 - pattern as this
25:09 - so the pattern is gonna I'm gonna be
25:11 - using is I'm gonna type everything out
25:13 - and then in my Redux store I am
25:18 - um storing all the products is an object
25:20 - that are keyed by the ID just so I can
25:23 - look everything up quickly so that's
25:25 - what this dick is doing right here so
25:27 - this is a raw product and this is how
25:28 - it's going to be stored in my Redux
25:30 - store
25:31 - and for this let me just replace wallet
25:33 - with product
25:38 - and what I want to do
25:43 - is first of all
25:46 - since we're going to be
25:50 - all right so remember that our products
25:53 - inherit from item and item is just all
25:55 - of this like um item related information
25:58 - image name description price yada yada
26:00 - and also the order product also inherits
26:03 - from item so in this case what I'm going
26:06 - to do is I'm going to create another
26:08 - interface for item and then when I type
26:11 - out product and order product it's just
26:13 - going to inherit from those
26:15 - keep everything nice and neat so uh
26:28 - and while that's doing that I can go
26:30 - ahead and make
26:32 - what do I want to put this let's just go
26:34 - ahead
26:38 - alright so this is also stored in item
26:44 - so let's just keep it nice and simple so
26:49 - item
26:54 - yeah I'll just say items
26:57 - okay
27:02 - core
27:07 - so
27:09 - wait a minute is
27:12 - yeah the core is just going to be a
27:15 - number
27:25 - okay so price core
27:28 - just going to be an ID of a core which
27:31 - is just a number
27:35 - and also
27:41 - I don't want camel case
27:46 - because this is just gonna be straight
27:48 - up API data so price mounts
27:52 - price core
27:56 - all right
27:58 - sport item
27:59 - description image name
28:02 - press Mouse number quantity number and
28:04 - okay
28:06 - first thing I'm going to do is just
28:25 - all right
28:27 - and then I can use it in my product
28:40 - all right so product extends created
28:42 - modified day and item
28:44 - and then I need to type out the actual
28:47 - product data
28:50 - so
28:52 - product data
28:57 - and I'm gonna need an enum for this
29:02 - activation status
29:06 - okay
29:10 - okay okay
29:14 - okay
29:17 - now so what am I going to do about
29:19 - seller thinking about that
29:21 - all right
29:22 - so in enums let's just go ahead and say
29:28 - was it exchange orders
29:32 - okay so we can just do products
29:39 - all right so
29:44 - I'm gonna create a new enum and we'll
29:46 - just say
29:48 - that this is called activation status
29:55 - and the values for this are active and
29:59 - draft
30:08 - and then let me just go ahead and import
30:10 - those and those are under products
30:16 - and that was activation status
30:21 - operation status now pretty this up
30:26 - cool
30:31 - all right now for products
30:43 - from enums we are going to have an
30:47 - activation status
30:52 - and that is going to be the activation
30:54 - status
30:58 - and then we just have a seller
31:05 - now let's see how the products are
31:07 - coming back
31:10 - so in the product serializer
31:13 - we have the seller being serialized
31:17 - as a read user read serializer so that's
31:21 - how I'm going to store it in my Redux
31:24 - store
31:25 - now
31:29 - let's see this so API users
31:41 - okay
31:47 - create user response
31:52 - okay so I think I'm just going to create
31:54 - an interface
32:01 - to match my serializer name
32:08 - so let me do this
32:13 - let me just can I just get products
32:21 - right here thing okay
32:22 - so actually this is just the user read
32:26 - serializer
32:28 - okay
32:29 - so just the ID and the username for now
32:32 - right ID username
32:35 - is my seller you user read serializer so
32:39 - what I'm going to do is this
32:53 - export interface user read serializer
32:57 - and this is equal to this right here
33:03 - so in my create user response the user
33:06 - is a reference to this
33:08 - and also let me just
33:17 - users we also get the user rate
33:19 - serializer
33:25 - all right and then
33:27 - for seller right here
33:31 - this is in types API users so
33:44 - in the products we called
33:49 - is seller
33:51 - yeah
33:56 - okay
33:58 - so
34:00 - actually did I let me close some of this
34:02 - stuff
34:05 - okay so product is inheriting from
34:09 - creating modified and item activation
34:11 - status It Go activation stats enum and
34:14 - the seller that's going to be stored is
34:16 - a serialized version of the user which
34:21 - is
34:21 - referenced by the user reads serializer
34:24 - and now let me just make sure my imports
34:29 - all right now from actually we didn't
34:33 - even do it yet did we
34:35 - okay
34:37 - all right so products is right on the
34:38 - manager
34:42 - all right now we just need to import
34:44 - product
34:46 - and products
34:48 - and then we can begin I don't know NLP
34:51 - QRS
34:53 - I don't know my abc so I have to sing
34:55 - the song
35:00 - all right so now everything's typed out
35:01 - to now we can go ahead and set up our
35:04 - store
35:05 - so I'm going to create a new slice call
35:09 - it products
35:12 - and for the
35:14 - key that we need to make
35:17 - Elemental p q r s products
35:25 - all right so now that I got that taken
35:29 - care of let me just go ahead and see if
35:31 - I can
35:34 - this is interesting
35:36 - so this
35:41 - modified date oh wait did I I
35:44 - accidentally
35:49 - yep okay so create a date
35:55 - and then modify dates
35:57 - in my rename I accidentally convert
35:59 - those to camel case
36:01 - so all right it should be looking good
36:05 - and I believe so I'm just looking at my
36:08 - wallet slice right now since I am pretty
36:11 - much going to use the same structure for
36:13 - store basically have two reducer
36:16 - functions in here one is for setting
36:20 - the item
36:23 - and then this sets it all from a list
36:28 - so basically set multiple at a time or
36:31 - set an individual one and I don't even
36:33 - think that we need
36:35 - this logic right here since the reason
36:38 - that I had this uh
36:40 - um actually let me show you another one
36:46 - so in my store usually
36:52 - yeah so usually whenever I set
36:54 - information you can just say since I
36:57 - want a key under ID I can just do state
36:59 - ID equals payload but for wallets I have
37:02 - some tricky logic that says if there is
37:05 - no state ID basically if there's nothing
37:07 - yet then you just want to set it or
37:10 - if you do have one then compare the
37:13 - modified date against the one you're
37:15 - trying to update and the reason for this
37:18 - is because
37:20 - um anytime there's a balance related
37:23 - update on the back end that gets
37:25 - streamed down on the front end however
37:27 - two balance updates could happen like
37:29 - very quickly together and I just thought
37:32 - it was like a little race condition on
37:34 - the front end where I want to make sure
37:35 - that I populate the readout store with
37:38 - the most recently modified one and for
37:41 - example this happens a lot I'll actually
37:43 - show you
37:44 - um
37:45 - like let's say that you are
37:48 - placing a trade right here well the
37:51 - moment you place a trade then your
37:53 - balance is going to get updated because
37:54 - you had to pay for that trade however
37:56 - let's say that that trade gets filled
37:58 - within like a fraction of a second
38:00 - well then you're going to get another
38:02 - update that comes down so you're gonna
38:04 - have like this race condition where you
38:05 - get two updated balances and the front
38:07 - end needs to figure out what's the more
38:09 - recent one but for the shop app I don't
38:11 - think that's really necessary so that is
38:15 - why instead of using this is a
38:17 - boilerplate I'll use trades
38:20 - okay
38:22 - so for my products
38:25 - store I'm first going to replace
38:28 - trades with products
38:34 - and replace
38:36 - trade
38:39 - trade with product
38:47 - and it says ID doesn't exist because we
38:50 - forgot to put an ID on the product right
38:53 - here
38:54 - actually maybe we can just stick an item
39:01 - and it feels a little bit weird doing
39:03 - that
39:05 - all right so in my types let me just go
39:08 - to trades
39:10 - definitely type that out faster but all
39:13 - right
39:15 - all right so all products also have an
39:18 - ID
39:18 - don't need that anymore in
39:21 - let me just convert this as well trace
39:23 - the products
39:26 - all right so this should be good but let
39:28 - me just read through it make sure it
39:29 - makes sense okay
39:30 - so for the products slice we are just
39:33 - using this constant we created
39:36 - looks to be named correctly
39:38 - and then we're importing product and
39:40 - products here this the shape of the
39:42 - state is product which is pretty much
39:44 - just the dictionary where the key is the
39:47 - product ID and the value is a product
39:51 - and for the slice we're just going to
39:53 - call it products initial State nothing
39:56 - and then name reducer
40:00 - the payload action whenever you're
40:01 - setting product just pass in a product
40:03 - and then it's gonna store that under the
40:07 - ID
40:08 - and then whenever you set multiple
40:10 - products at once for example whenever
40:12 - you go to the uh
40:14 - um this page right here then what this
40:17 - is going to do is it's going to fetch
40:18 - all your products from the back end and
40:21 - it's going to set them as a list so then
40:23 - we just want to pretty much
40:26 - [Music]
40:26 - um
40:27 - create a reducer function to convert
40:30 - that list into an object keyed by ID and
40:34 - that all looks good
40:36 - all right so now in our store now that
40:39 - we have the slice set up let's just go
40:41 - ahead and kind of patch everything
40:43 - together here
40:44 - so that is products on our manager so
40:47 - manager
40:53 - and we will call this products reducer
40:57 - so
40:58 - I would say the products are going to be
41:02 - stored in the products reducer
41:04 - and now that we got that slice taken
41:07 - care of what we want to do now is
41:10 - actually just go ahead and update our
41:12 - manager
41:14 - to include an active product
41:19 - all right so in my manager which is kind
41:22 - of just like some
41:24 - um
41:26 - so how can I explain this so there are
41:29 - just like miscellaneous things I need to
41:31 - keep track of on the front end and they
41:35 - are almost like
41:37 - like you almost might think about
41:39 - sticking them in state but for example
41:42 - whenever the user selects an asset pair
41:44 - right here I just didn't want to keep it
41:46 - in state because if the user ever
41:48 - navigates away and comes back to this
41:50 - then I wanted to remember what asset
41:52 - pair they had and also like on this uh I
41:55 - think this might be one to
41:58 - yeah so you see that on the wallets page
42:01 - you have deposit and withdraw well I
42:04 - thought it was better that if the user
42:06 - navigated away and came back it
42:07 - remembered what tab they had so I didn't
42:10 - want to keep it in component State
42:11 - because then anytime the component gets
42:13 - unmounted then it would forget it so you
42:16 - know just like these little
42:17 - miscellaneous UI things so anyways that
42:21 - is where I'm going to stick active
42:23 - product and basically if you have an
42:25 - active product and you go to that create
42:27 - edit page it means that's the one you
42:28 - want to edit if you don't have any
42:30 - active product it means you want to
42:31 - create a new product but we'll say
42:33 - active product
42:35 - and for this this is going to be a
42:38 - product or null
42:50 - and actually I
42:53 - at a wrong location
42:55 - so active products
42:58 - is going to be a product or null
43:02 - and for this I that's coming from types
43:06 - and then the initial state for this is
43:09 - actually just going to be null
43:12 - I don't need this
43:15 - okay
43:17 - so now what I can do
43:21 - is in
43:24 - my cell products
43:29 - yeah and what is the update manager okay
43:35 - so now finally what we can do is
43:38 - whenever we click this button right here
43:45 - this add button
43:46 - you see how it's going to take us to
43:48 - this page right here well
43:51 - what we want to do even though we don't
43:54 - have any way of setting these active
43:56 - products right now what we are going to
43:58 - do is
44:02 - just go ahead and
44:07 - all right
44:09 - so we're going to need a couple of
44:11 - different things here so update manager
44:13 - this is coming from the store manager
44:17 - and we also need a dispatch and that's
44:21 - going to come from types
44:24 - use dispatch and that's going to go from
44:26 - react Redux
44:30 - and then what else do we got going on
44:33 - here
44:37 - dispatch from the hook
44:44 - and all right
44:48 - so whenever we click this button to add
44:52 - a new product we want to set the active
44:56 - product to null basically saying we're
44:59 - not trying to edit anything we are
45:01 - creating a brand new one
45:05 - and yeah I believe we are good to go
45:09 - cool
45:11 - and actually let me just
45:13 - do some real quick QA now since I
45:16 - updated State let me just go ahead and
45:18 - log back in and first let's check our
45:20 - Redux store and make sure okay our
45:23 - product slice is in there
45:26 - and then in here whenever I click this
45:28 - button I should see this action
45:31 - triggered which is going to set
45:34 - the manager's active product to null and
45:37 - that's exactly what it did manager
45:39 - active product and all looking good okay
45:42 - so now what we need to do on this page
45:44 - is pretty much just start building out
45:46 - our form which is going to be
45:48 - responsible for us adding a product
45:52 - now let's okay so let me think about
45:56 - this so we're going to need to treat
45:58 - this form a little bit special since
45:59 - we're working with form data in other
46:01 - words we need to um we can't just use
46:04 - Json to send up because we're gonna uh
46:07 - be uploading an image for the product as
46:10 - well
46:11 - but before I do that let me just go
46:13 - ahead and start structuring some things
46:15 - so
46:17 - close all of those in under these Pages
46:20 - shop
46:23 - so create a product
46:26 - decided I've got to get a water my
46:27 - throat it's a bit barged
46:32 - oh yeah oh yeah baby okay
46:35 - so let's see where else on the app we
46:38 - have a form that we can steal from
46:42 - so on the withdraw section that looks
46:47 - like an easy place
46:49 - okay
46:50 - so we'll say uh
46:53 - account number
47:03 - close that for now and okay
47:08 - so let's first
47:13 - all right what are we gonna need formic
47:15 - form
47:16 - input and button so formic form
47:25 - uh buttons inputs
47:32 - and
47:34 - and that may be good so now
47:39 - steal this thank you very much
47:43 - you don't need to react as well why
47:47 - why did it import you
47:50 - for no reason at all fascinating okay
47:56 - all right so
47:59 - let's actually get rid of this
48:04 - and all right
48:10 - okay let's do this
48:11 - so for handle submit
48:22 - so for handle submits
48:34 - what we can do is this
48:37 - so
48:39 - we'll say that a product has a name and
48:42 - a description for now has some other
48:44 - fields but
48:46 - baby steps baby steps and let's see
48:49 - uh let's get the product type so type
48:58 - okay so product is gonna have a name
49:00 - and a description
49:03 - and I'll just say here we'll have an
49:06 - input for
49:08 - name and description
49:19 - in the description
49:21 - description
49:23 - and eventually whenever we submit this
49:26 - form
49:27 - we are going to want to of course make a
49:30 - request to our API but for now let's
49:32 - just go ahead and log out these values
49:39 - now
49:41 - um the name of the button this can just
49:43 - be should be crate or submit actually
49:46 - let's just do submit for now
49:48 - all right so right now we should have a
49:51 - form
49:53 - we don't need these four michelbergs for
49:55 - now
49:57 - and
49:58 - just need a validation schema
50:07 - and let's just get this from where are
50:12 - we gonna get it
50:18 - this looks good for now
50:21 - actually let's get something with
50:26 - let me steal this one okay
50:30 - so the validation schema in other words
50:33 - how are we going to validate
50:36 - this data
50:50 - all right so for now what we can do is
50:54 - we can just save that description must
50:56 - be a string and name also must be a
50:59 - string
51:01 - and now let me
51:03 - make sure that this is working
51:06 - so I'm shopping and go to the shop app
51:09 - and I'm going to sell a product I'm
51:11 - going to add a product and now I get
51:13 - this form right here and now for the
51:15 - name I'm just going to put what we got
51:17 - right here uh I guess I'm selling a
51:20 - birthday cake and the description is uh
51:22 - look at all my auto completes nice and
51:25 - juicy okay so now I can submit this and
51:28 - look at this logging out that data
51:31 - so now first thing I want to do is just
51:33 - add some padding around here since it's
51:35 - shrubbed me out a bit nuts
51:37 - and I'll just stick with this padding of
51:40 - 16
51:41 - actually should we
51:44 - Center this form
51:48 - since on my let me look what I did for
51:51 - my cooking website
51:53 - so the pages create and edit styles
51:58 - the container
52:00 - zero Auto 42 pixels interesting
52:05 - so I Center aligned it but let's see how
52:08 - that looks
52:13 - um
52:15 - Center aligned or left the bajillion
52:17 - dollar question
52:26 - let's go ahead and Center align it I
52:28 - think I look pretty good
52:31 - so margin
52:33 - okay we can stick with this
52:39 - actually how many fields are we going to
52:40 - have and does that even matter
52:43 - you know what for now I'm just gonna
52:45 - leave it like this
52:47 - doesn't look that bad and for now we're
52:49 - just really trying to build out the
52:51 - logic of it so
52:54 - what can I say
52:57 - oh you know another thing that we're
52:59 - gonna need to do that we might as well
53:01 - do now
53:03 - is this
53:07 - what
53:08 - okay
53:10 - so
53:18 - yeah here I'm also
53:23 - okay so I'm gonna need a file input
53:31 - because I want to kind of take her the
53:33 - image uploading process already and
53:36 - actually before I do that let me just go
53:38 - ahead and see
53:42 - what are all the required fields
53:45 - for this
53:49 - so when I reset a product you need price
53:51 - core quantity
53:56 - all right
53:58 - so what I can do is this
54:18 - so pretty much going to steal all this
54:20 - logic or
54:21 - if there's an image
54:23 - in the form
54:27 - then render
54:30 - okay so if you don't have an image
54:32 - uploaded already then you want to render
54:35 - this file selector otherwise render this
54:39 - preview of the image
54:44 - and the render preview what this is
54:47 - going to do
54:53 - if there's a preview
54:55 - okay
54:57 - basically
54:59 - if there is an image
55:03 - then set equal to image source otherwise
55:08 - anything
55:10 - I just render it here
55:12 - so let's start getting this prepared
55:15 - so what do we need working from kind of
55:18 - inside out so the image container
55:20 - and then an image
55:23 - and then a close button container
55:26 - so image container image
55:31 - as you for now
55:38 - so image container image and then a
55:41 - close button container
55:42 - so basically if they're
55:45 - let me add this and I'll talk you
55:46 - through so we in our form right here
55:51 - we're going to have a file selector for
55:52 - image and then once they select one from
55:55 - their system there it's going to be
55:57 - displayed as a thumbnail right here and
55:59 - if they ever want to like change images
56:01 - then they have to there's going to be a
56:02 - little x button on the top right corner
56:04 - and then they can just close it and
56:06 - select another one
56:08 - so let's go ahead and hop back in here
56:15 - now that I have this we can have render
56:17 - preview
56:20 - and move this over here
56:23 - so render preview we have preview set
56:26 - preview and MDI icon
56:31 - we need YouTube
56:34 - and then preview and set preview
56:43 - all right
56:47 - looking good and now render preview is
56:49 - used where
56:54 - all right right here render preview gets
56:59 - passed in set field value from
57:07 - right here
57:10 - render preview there we go
57:14 - and I also have this bumper
57:16 - and this just adds some padding and I'm
57:19 - also going to need that
57:26 - and yeah
57:31 - and recording yeah
57:34 - I'm sorry
57:37 - all right
57:42 - looks good
57:47 - and okay so now I actually just need the
57:50 - uh
57:52 - file selector
57:54 - and that's going to come from here so
57:56 - this is a custom field a file input
57:59 - the change handle change and I don't
58:02 - have this element yet
58:04 - in this application so this is my
58:06 - cooking front end
58:15 - so form elements file inputs my
58:19 - components
58:20 - form elements
58:22 - need a file input didn't get a solidity
58:25 - to error that time so that's good
58:27 - and then for this file input just want
58:29 - to make sure my styling is is right
58:34 - this is my error message
58:39 - okay
58:40 - so let me just read over this so this
58:43 - file input
58:46 - which is an input field that accepts an
58:48 - image type file and if you have an error
58:51 - message you can display the error
58:52 - message below
58:54 - and then once I have that taken care of
58:57 - let me go ahead and add it to my little
58:58 - form elements
59:00 - Master file so
59:06 - file inputs file inputs
59:10 - file input Here and Now
59:13 - I can use it
59:20 - e f g h i good good good good good good
59:23 - good good good good good
59:25 - so values image that means that I need
59:31 - an image in the initial values which is
59:33 - going to be an empty string
59:39 - and also
59:43 - what else do we got
59:45 - so on change and file change touch
59:47 - touched
59:48 - opponent file image should be
59:52 - she wears this field coming from okay
59:56 - it's right above the preview so we're
59:58 - going to have this
60:00 - and the values
60:06 - so first we need to get the values from
60:09 - the form and if there is no image then
60:12 - render the button if there is an image
60:13 - render the preview and now
60:17 - for just import field and where are you
60:20 - coming from formic
60:24 - formic import field as well and then on
60:27 - change handle file change
60:29 - and here we have handle file change
60:32 - reader reader
60:41 - okay so for handle file change you're
60:46 - pretty much going to look at the file
60:47 - that they selected and you're going to
60:50 - create a new file reader
60:53 - set preview to that data and then the
60:56 - preview of it will be displayed
61:00 - okay
61:03 - should be
61:05 - good
61:07 - and then yeah we're just logging out
61:09 - this right here so make sure nothing
61:12 - broke
61:13 - check it out so
61:16 - um we didn't add padding to this
61:22 - container padding 16.
61:32 - all right so now let me choose a file uh
61:35 - what about this uh desk that I'm selling
61:38 - beautiful and now you see this little
61:42 - close button this is what I'm talking
61:43 - about so we are looking good right now
61:46 - choose something else this python logo
61:49 - and close it beautiful mate and actually
61:52 - let me actually
61:54 - saying actually 800 times here
61:57 - let me just go ahead and submit this so
61:59 - 34 yada yada submit it
62:03 - and then we're submitting all of this
62:06 - juicy juicy beautiful data looking
62:09 - pretty good
62:10 - huh nice okay and
62:15 - hmm
62:17 - now actually let me go ahead and
62:21 - had
62:24 - why isn't this bumper being used
62:31 - all right so the bumper goes under the
62:32 - preview just to give it that space
62:34 - between the button
62:38 - and the image
62:45 - and what do you
62:46 - ER
62:52 - beautiful beautiful beautiful beautiful
62:53 - beautiful
62:54 - absolutely beautiful
62:57 - okay
62:58 - now
63:05 - now we pretty much just have to add the
63:07 - rest of our fields in so
63:12 - let's go ahead and figure out what
63:14 - fields we need
63:16 - and you know what else
63:20 - okay let's just do this one by one nice
63:23 - and slow
63:24 - so
63:27 - yeah
63:27 - this is going to be a checkbox
63:29 - activation status active or not
63:36 - actually should we start with the item
63:38 - might be easier this way so anyways name
63:40 - description amount price amount price
63:44 - core and quantity
63:52 - okay
63:58 - all right so price amount
64:01 - price core quantity
64:12 - so those six which I already have and
64:15 - then in addition activation status
64:20 - and then ID and seller as well as
64:23 - created modify date we don't need to
64:25 - pass in
64:26 - so just activation status
64:36 - okay
64:38 - so let's
64:44 - so activation status this is going to be
64:46 - a check box and I already have a
64:49 - checkbox element
64:50 - somewhere not create an edit recipe
64:53 - where was it tnb OS
64:56 - so tnbos in my apps shop
65:00 - and under my pages
65:05 - what page was that
65:07 - what product details movie
65:11 - yeah
65:12 - so I have this checkbox element
65:16 - and
65:19 - that is
65:22 - coming from this component checkbox
65:30 - so let's steal this component from tnb
65:32 - OS the check box and that is going in
65:36 - form elements
65:39 - check box
65:44 - Styles file for this are just under
65:48 - styles
65:49 - and for the air color
65:53 - actually what's the label just the
65:55 - default so I shouldn't need that and for
65:58 - the air color what did we have
66:03 - color palette red
66:07 - so for the air color it's color palette
66:09 - red
66:12 - just make sure everything else looks
66:13 - good and for the check box
66:18 - props those should all be good too
66:21 - these four Styles it's checkbox Styles
66:23 - don't think we need we need to do that
66:27 - unless we're gonna
66:33 - unless we need to okay
66:36 - unless we need to update the styling or
66:37 - anything but I don't think we do
66:41 - so now we can use that
66:44 - oops
66:50 - got to include a tier
66:59 - so my form elements are exporting all of
67:01 - these so that I am able to export them
67:04 - more cleanly here
67:06 - and yeah that's why I uh again am kind
67:09 - of aggregating all these sub components
67:12 - into just Forum elements because then
67:14 - whenever I input form elements I can
67:17 - just have one line rather than you know
67:20 - three lines right here
67:21 - but now that said let's go ahead and
67:23 - figure out how to use this check check
67:25 - box component
67:27 - so the checkbox component
67:30 - we can put under
67:34 - the image
67:36 - and
67:38 - what is it
67:39 - so this references activation status
67:45 - and I will say activate yeah we can just
67:48 - use the same one activate product
67:53 - and now let's see how we're looking
67:56 - okay
67:57 - so activate product
68:00 - that's true when you uncheck it it's
68:03 - false looking good
68:05 - name description we gotta thumbnail
68:08 - we're looking fantastic here
68:12 - it's the other thing I'm selling if
68:13 - anyone wants to buy a nice dresser
68:15 - espresso wood great condition just has a
68:19 - little crack on the mirror but there you
68:20 - go
68:21 - and all right so we got name description
68:23 - image what else are we gonna need to do
68:29 - he actually clean up some of this stuff
68:31 - okay
68:32 - so a product has a activation status
68:37 - actually we just need to eat at those
68:38 - other forms
68:40 - or form elements so activation status
68:43 - check description check the image check
68:45 - price amount
68:49 - so let's do that in where do I want it
68:53 - let's put it under the image as well
68:59 - yeah since we have like all the product
69:00 - information and all the pricing
69:02 - information on bottom
69:04 - so on that note
69:10 - so under the preview on the bumper what
69:13 - was the field name price amount
69:22 - and we'll just say
69:25 - actually what did I say in tnb OS
69:30 - uh price amount huh okay well there you
69:32 - go
69:33 - so price amounts
69:35 - and this is going to be a type number
69:44 - all right so this is going to be
69:47 - type
69:49 - number
69:59 - and let me just make sure that
70:01 - okay
70:03 - so the type of this input except text
70:05 - number or password text is the default
70:07 - so we need to pass a number right here
70:10 - and then after this
70:12 - what do we need to do is we need to have
70:17 - a field for the price core and this is
70:20 - going to be drop down of all the cores
70:23 - and let me see how I did this as well
70:27 - so price now we're okay one more
70:34 - okay
70:36 - so in my form elements since this is can
70:39 - be drop down we need a select
70:45 - right here
70:50 - and then for the options
70:56 - where these options come from
70:58 - use Network select options
71:01 - and this is just going to be
71:05 - a list of Select options which are what
71:09 - these
71:10 - interesting
71:13 - fascinating fascinating fascinating
71:16 - okay easy enough
71:18 - so first let's copy the select component
71:21 - and form elements select and now
71:25 - make sure it's compatible with this
71:27 - project so the styles
71:32 - first of all come from Styles the color
71:34 - for the error message
71:38 - what is the color for the error message
71:42 - colors palette red I'm thinking I should
71:49 - colors palette red
71:57 - oh
72:00 - so we already are
72:03 - in oh yeah
72:09 - it's probably red and what other for the
72:12 - label of this color set of colors font
72:15 - muted we'll just do that for now
72:18 - and all right now in here
72:21 - types
72:23 - okay so we need to select option type
72:27 - in our typings so it's under types where
72:31 - did I have
72:35 - this select option
72:40 - so under types forms select option so
72:42 - I'm just going to copy this file
72:44 - types forms
72:47 - and now
72:57 - uh a b c d e f g so types forms
73:01 - and that was called select option
73:05 - Elemento p q r s e f g yada yada tomato
73:10 - okay so a select option has a disabled
73:14 - domain so really you need a value to
73:17 - make it work and everything else is good
73:22 - all right so that select component
73:25 - should be good just need to import it
73:27 - here
73:33 - all right
73:35 - still looking good looking good looking
73:38 - good looking good looking
73:41 - good
73:43 - okay
73:44 - so now in tnb OS let's figure out how we
73:48 - use that
73:51 - select
73:55 - okay and where was it I had it right on
73:59 - top of the price amount so price amount
74:03 - actually I did even import this
74:05 - no
74:09 - no okay
74:10 - so
74:12 - the price Network
74:15 - what did I name it
74:17 - price core
74:22 - so basically what digital currency do
74:24 - you want to use and
74:26 - or eventually calculate this in a little
74:28 - bit better way but now it takes an
74:32 - object where the value
74:34 - we'll just say something like uh
74:42 - just give it two quick ones for uh
74:44 - testing
74:48 - all right and now if everything worked
74:51 - we should have a select menu
74:53 - so let's see
74:56 - yes it's a little bit wide have to work
74:58 - on our styling for this but basically
75:00 - you have all this selected
75:03 - do you want tnb or VTX and how much
75:06 - we'll do 20
75:08 - the component is changing from
75:10 - uncontrolled
75:12 - controlled
75:14 - and that should not be happening
75:17 - that was when I adjusted price mount
75:22 - that's interesting
75:24 - why didn't I give it that time maybe
75:26 - something with a react to render
75:28 - okay let's go through this again yada
75:31 - yada do this uh selling
75:33 - this python logo
75:36 - tnb VTX
75:39 - okay
75:40 - I guess it was just something with uh
75:42 - maybe hot reloading or something but
75:44 - either way all of this info is looking
75:46 - good
75:53 - all right I think we're ready to start
75:54 - sending this data up and did we miss any
75:58 - fields
76:00 - it's in the description name person out
76:02 - quantity press core okay
76:06 - cool
76:08 - now
76:10 - let's go ahead and actually make
76:16 - request the back end
76:21 - before we do that however
76:24 - we're going to need to set up
76:29 - quite a few things so we need an API
76:31 - endpoint to hit
76:33 - and
76:37 - let's see what we can copy maybe chorus
76:40 - is a good example
76:42 - all right
76:44 - so we are pretty much going to be
76:46 - building out our API uh endpoints right
76:50 - here
76:53 - and can I just give this a chat GPT and
76:56 - say make one of these for products
77:00 - and actually this is going to work great
77:02 - because the data is form data as well
77:17 - Actually I don't even think I need chai
77:19 - chip tea I think it's just simple find
77:21 - and replace so all right we're making a
77:24 - new typescript file
77:27 - called products
77:31 - and it's going to be just like these
77:33 - functions however
77:35 - instead of core
77:38 - we are doing it for product
77:45 - the endpoint cores is going to be
77:47 - products
77:51 - and now let me just read through this
77:53 - okay
77:55 - so we are importing product in the base
77:59 - URL is whatever we environment we're on
78:02 - either the live environment or our Local
78:06 - Host
78:07 - and then it's the endpoint products so
78:09 - creating products we're going to be
78:11 - passing in form data and we're going to
78:13 - be getting back a product object which
78:16 - just to clarify is this right here with
78:19 - yes all this in the seller is nested as
78:22 - user serializer
78:24 - and then this is just going to return
78:26 - the response data or throw an error and
78:29 - we want these headers as well
78:32 - yes authorization form headers because
78:34 - we're using form data and that is
78:36 - because Json won't work because we have
78:38 - image data included now for delete
78:41 - product whenever we do this we're just
78:43 - going to be passing in an ID
78:45 - and it's just going to hit delete on
78:47 - that endpoint now for getting products
78:49 - we're going to get back a product list
78:53 - and for updating products
78:57 - it's the same thing except we pass in an
79:00 - ID as well
79:03 - so that looks good so now what we need
79:06 - to do is we need to make our dispatcher
79:09 - since this is pretty much just our
79:10 - communication with the API but now
79:15 - we need a dispatcher to kind of use this
79:17 - in uh dispatch this data to our Redux
79:21 - store
79:22 - so that is
79:26 - products
79:29 - and property steel piece from cores as
79:31 - well
79:35 - okay
79:37 - so replace core
79:41 - with product
79:44 - and replace cores with products
79:50 - and unset product yeah I'm gonna need
79:53 - that as well
79:56 - okay
79:58 - so
80:00 - uh one last dispatcher or
80:06 - some can talk you can type at the same
80:07 - time okay
80:09 - so under course I also have this reducer
80:13 - function which is for deleting so this
80:15 - is for setting the list this is for
80:17 - sending an individual one and this is
80:19 - for deleting one of those
80:22 - and now let me just replace
80:24 - core with product
80:30 - okay
80:31 - so
80:36 - all right so to add a product you call
80:40 - set product to add a list of products
80:41 - you call set products and to delete one
80:44 - you call onset product and pass in the
80:46 - ID of that
80:47 - stay products it's a number and it's
80:50 - just going to delete that from the state
80:54 - okay
80:55 - and now this
80:57 - should be good unless we named it
81:01 - onset product
81:03 - wait a minute yeah that should be good
81:06 - interesting oh didn't export it so
81:10 - embarrassing
81:12 - onset product okay
81:14 - now let me read through these so for
81:18 - my dispatcher functions I name them the
81:22 - same as my API endpoints just because I
81:25 - don't know it's like a very intuitive
81:27 - naming however when I import them I have
81:29 - to just uh rename the Imports so I don't
81:32 - get naming conflict so create product
81:34 - delete product get products and update
81:36 - one two three four that takes care of
81:39 - everything
81:40 - and then these are my reducer functions
81:43 - so for creating a product we're going to
81:46 - pass in the form data
81:48 - and then it's gonna call the create
81:51 - product endpoint and then as long as I
81:53 - didn't get the error
81:54 - it is going to set that product in my
81:57 - store now for deleting it I'm going to
82:00 - pass in an ID and it's going to call the
82:03 - delete product endpoint and then once
82:05 - it's deleted from the back end it's just
82:07 - going to call onset product to delete it
82:09 - from my store
82:10 - on the front end and then same thing or
82:12 - not same thing but with Git products
82:14 - what I'm going to do is not going to
82:16 - take any arguments just fetching all the
82:18 - products
82:19 - and of course we're added support for
82:20 - like query parameters and filtering so
82:22 - on and so forth but for right now it's
82:24 - again kind of the structure set but
82:26 - anyways whenever we get the products
82:27 - it's going to set those using set
82:30 - products since this is going to be a
82:31 - list not one
82:33 - and then for updating you're going to
82:35 - call the patch endpoint on the back end
82:38 - and then you just set the product again
82:40 - and it's going to overwrite whatever is
82:42 - in there
82:44 - so looks good now what we can do is we
82:47 - can say
82:49 - great products and import from
82:51 - dispatchers products
82:54 - so we want to import
82:56 - great product from dispatchers products
83:02 - we are going to want to call this
83:04 - whenever we
83:06 - click the handle submit button so for
83:08 - that we're going to need dispatch
83:14 - and show you what is going on here
83:23 - why are you not dispatching
83:32 - interesting
83:36 - like what are you doing with this data
83:38 - then a response data
83:40 - wait the request data
83:44 - oh here we go
83:48 - oh wait crate recipe
83:57 - oh they're not even
84:05 - huh this one's just using the endpoint
84:07 - directly
84:09 - but I don't think I want to do that
84:15 - hmm you know why so most of the time
84:20 - what I'm going to be doing is
84:23 - um you know like you always want to keep
84:25 - your backing in front and in sync and
84:28 - most of the time like whenever you
84:30 - create something on the back end then
84:32 - you want to store it on your front end
84:33 - obviously reasons but
84:36 - since how I had it set up on my uh
84:39 - recipe social network I'm just creating
84:42 - it on the back end and not even worrying
84:44 - about sorting on the front end because
84:46 - after that I'm navigating to this
84:48 - recipes Details page and this recipe is
84:52 - Details page whenever you just visit
84:54 - that it fetches that recipe
84:57 - right off the bat so that way
85:01 - I mean it's a little bit more
85:03 - performance since
85:04 - I mean at this point in time when it
85:06 - fetches it on this page it's going to be
85:07 - overriding anything that's in the store
85:09 - anyways
85:11 - but I'm thinking of this is the logic
85:13 - that I
85:15 - am going to go with
85:17 - okay
85:18 - so I need to think about this from users
85:21 - perspective
85:23 - um I guess there are two different
85:24 - things that we can do whenever I add a
85:28 - product here
85:31 - so my pages looks kind of like this
85:33 - actually let's just pull up our page so
85:36 - the question is when I'm done adding a
85:39 - product here and I hit submit and it
85:42 - goes ahead and creates on the back end
85:44 - do I want to be taken to this product
85:46 - Details page
85:48 - or
85:50 - do I just want to be taking to my list
85:52 - of products right here
85:55 - and I think after I create this
85:59 - then I would want to be taken to this
86:01 - page
86:04 - so
86:08 - do I need to even
86:11 - store this in Redux
86:14 - because this page is going to fetch my
86:16 - products you know what I think it's
86:18 - better this way
86:21 - yeah let's just go with this and we can
86:22 - change it up to make it a little bit
86:23 - more performant later on may have uh be
86:27 - setting data that I don't need to but
86:29 - you know what's the harm for now at
86:32 - least we can test it to make sure it's
86:33 - working
86:34 - okay so what this is going to do
86:38 - whenever
86:41 - here whenever I handle submit
86:46 - let me get rid of this there's too much
86:48 - stuff going on my brain can't handle it
86:51 - okay so in my cooking front end what I
86:54 - need to do
86:55 - is I need
87:00 - to make this request data such as so
87:10 - and then with that request data
87:15 - catch it
87:18 - let me put this in the try catch
87:24 - so try to do this
87:37 - should have searched for something else
87:39 - okay
87:45 - all right
87:47 - so for my error handling I like to log
87:50 - out the error and then display a toast
87:51 - to the user and
87:54 - for that I'm just gonna steal this
87:59 - all right so try to make this request
88:02 - and if you could error just log it out
88:03 - in the console and say air
88:06 - um
88:08 - probably steal it from here
88:13 - yeah well I'll just say error creating
88:15 - recipe right now but I'll have to
88:20 - this because if they are updating the
88:23 - recipe then it would say error updating
88:26 - recipe but since we don't have any
88:29 - um update logic yet just creation then
88:31 - this is fine for now
88:34 - and I also want to
88:38 - get my dispatch
88:42 - whoa whoa what's going on
88:49 - okay so I'm also going to be using this
88:51 - dispatch use dispatch and app dispatch
88:54 - types
88:56 - dispatch
88:58 - and then
88:59 - use this badge is going to come from
89:01 - reactor Redux
89:05 - all right
89:08 - so now I can dispatch things and what am
89:11 - I going to dispatch this great product
89:12 - event
89:13 - so I will say
89:17 - whenever I submit this
89:30 - okay
89:36 - all right
89:38 - so I'm going to get all my request data
89:42 - taken care of and then
89:44 - once that's taken care of
89:47 - I'm going to create this and dispatcher
89:49 - and the data is just the form data okay
89:56 - all right so let me just alphabetize
89:59 - these
90:04 - all right
90:05 - so I'm gonna pretty much need to do this
90:08 - for everything
90:12 - so basically taking these form values in
90:15 - um putting together my form data
90:22 - if
90:23 - initial values
90:27 - dot image is not equal to this
90:31 - then open the image Okay so
90:35 - this is basically saying so this logic
90:39 - is a kind of
90:41 - um
90:41 - for whenever I am editing as well but it
90:44 - actually works fine for creating so
90:46 - basically if the initial values of image
90:49 - which right now is just an empty string
90:52 - is not equal to the value you have for
90:54 - image which is going to be that file
90:56 - data then basically if something changed
90:58 - then appended to the request data in the
91:02 - reason that I want to have this check is
91:03 - let's say that
91:06 - um the user is
91:08 - editing one of these products and let me
91:11 - show it on this so let's say that the
91:13 - user is editing this product and the
91:15 - image didn't change well if the image
91:17 - stayed the same then there's no need to
91:19 - um setting up that data
91:21 - because you know we don't even want to
91:24 - include it because then the image will
91:25 - just get the same image is just going to
91:27 - get re-uploaded and saved in S3 so it's
91:31 - just a little bit well much more
91:32 - performant this way
91:34 - and uh let's see okay
91:38 - so activation status description
91:43 - image name that we need price amount
91:47 - price core quantity
91:54 - name price amounts and I don't even
91:57 - believe we have a quantity or do we
92:04 - wait a minute price amount we don't have
92:06 - quantity do we
92:13 - so where are we going to put quantity
92:18 - name description Maybe
92:22 - under a description
92:24 - or maybe under price amount
92:28 - Let's do an underpriced amount
92:34 - and this is going to be a number as well
92:46 - all right and on that note hopefully
92:49 - whenever
92:54 - this gets submitted we should have an
92:56 - object on our back end
92:59 - so let's go ahead and pull that up first
93:02 - so for products let's say that we don't
93:04 - have anything yet just delete those we
93:07 - don't need them
93:08 - okay now let me go through this flow I'm
93:11 - Bucky I'm selling a product I'm going to
93:13 - go ahead and add one it's a birthday
93:15 - cake it's nice and juicy the image is
93:19 - for some reason the image of this desk
93:21 - uh
93:23 - price core 10B okay this is actually
93:25 - incorrect
93:28 - because
93:32 - this is going to need to be a value of
93:38 - where my core is at so I have one and
93:41 - two so let me do that
93:43 - actually we can even test
93:47 - yeah let's do this
93:50 - so
93:52 - this is going to be value one
93:56 - in value two
94:02 - and for this
94:08 - okay and I think we can just change the
94:12 - option type here
94:15 - so under forms the value is a string but
94:18 - I believe we can just say
94:22 - number or string
94:25 - and then we can also say the display
94:27 - name
94:31 - for this first option
94:33 - is tnb
94:44 - okay you're going to get Elda and just a
94:46 - bit button okay
94:48 - so this is eventually what we're going
94:50 - to be building dynamically but for now
94:53 - we'll just keep everything hard coded
94:57 - and let's see let's pretty this up
95:00 - all right
95:07 - error error error type number is not
95:11 - assignable string I thought I'd take
95:12 - care of that issue already
95:14 - okay
95:16 - so now that's still working okay so
95:19 - birthday cake it's nice and juicy and I
95:22 - will post
95:24 - this photo of my desk uh the price
95:27 - amount for this birthday cake is a 50
95:29 - tnb I'm going to go ahead and
95:32 - activate that and then quantity I'll do
95:35 - 10 birthday cakes and I also want to
95:38 - change the order of these around but
95:39 - let's go ahead and submit it
95:41 - and we get an error on the back end
95:47 - batter Quest
95:51 - and that is because
95:55 - true is not a valid
95:58 - wait price core is null
96:01 - which should not be the case
96:03 - in activation status is true oh yeah
96:06 - forgot instead of uh true and false
96:08 - we're using uh active in draft
96:12 - so for Price score
96:14 - let's take care of that one first
96:20 - price core why are you not
96:27 - registering so the name is price core
96:33 - let's just log out these values so
96:35 - console log values
96:45 - all right so price core is an empty
96:48 - string
96:50 - fascinating
96:52 - absolutely fascinating so is that
96:56 - because I didn't select one of these
96:59 - yeah I think so
97:02 - yeah price score equals one
97:04 - right now okay
97:06 - so
97:11 - um yeah so anyways the reason that price
97:13 - score was none at first is because the
97:16 - way my select or drop down component is
97:19 - set up is that this value doesn't
97:22 - pretty much the value doesn't get set
97:25 - until you click on the menu and choose
97:26 - something
97:27 - and then because I didn't do that the
97:30 - value never got set
97:32 - so
97:36 - actually let me see if that
97:40 - okay
97:42 - so that works I just need to fix this
97:44 - activation status now so let's do that
97:48 - and let's see what we did
97:53 - in tnb OS
97:56 - Source apps shop
97:59 - pages
98:01 - so product details
98:04 - okay
98:10 - wait a minute wait a minute wait a
98:11 - minute
98:16 - we're in our content modal
98:19 - oh wait I'm on the wrong page here we go
98:23 - okay so for Activation status handle
98:26 - submits activation status we just say
98:29 - okay
98:32 - actually this works really well
98:39 - okay
98:40 - so what we will say for Activation
98:43 - status
98:45 - is if the value
98:49 - for Activation status is true in other
98:52 - words if the checkbox is checked then we
98:55 - just wanna
98:58 - and where is we can go to here
99:04 - okay
99:05 - so I want to get activation status from
99:07 - enums a b c d e
99:10 - and we can just see this
99:12 - so if it is checked then that means you
99:15 - want activation status active otherwise
99:18 - you want activation status draft
99:25 - and then this activation status can be
99:28 - in the form
99:30 - before that
99:32 - and then everything else should be good
99:35 - to go but again that's what I said last
99:37 - time and it didn't work out came across
99:39 - some errors but let's see how things are
99:41 - looking at this time and also for this I
99:46 - what I'm gonna add
99:48 - is something like this
99:52 - so
99:53 - because it needs to be selected now
99:56 - what I'm going to do is I'm gonna give
99:58 - it a display
100:00 - of hyphen and the value of zero and this
100:03 - is just going to be the default
100:05 - and then they're going to need to select
100:07 - one of the valid cores
100:10 - okay
100:13 - so now from the top name birthday cake
100:17 - description nice and juicy this image of
100:20 - my desk
100:21 - the price core I want to be paid in tnb
100:24 - how much is this this is worth a hundred
100:27 - I'm going to go ahead and activate it
100:29 - and the quantity I'll just have four of
100:32 - these for sale go ahead and hit submit
100:34 - and now we didn't write any logic to say
100:37 - success or anything but it looks like
100:41 - yeah all right beautiful
100:45 - looking nice seller Bucky 24.
100:49 - my image is uploaded
100:51 - beautiful beautiful okay
100:56 - so now
100:57 - a couple of things that we need to do
100:59 - first we need to do some styling
101:02 - um well an easy thing I want to get out
101:05 - of the way right now is I want to move
101:08 - this activation to the very last thing
101:13 - so it just appears right there I think
101:16 - it's a little bit better and now for the
101:18 - styling what I'm probably going to do is
101:20 - I'll probably Center align everything
101:25 - I think that'll look a bit better
101:29 - and then
101:31 - um aside from styling updates what we
101:33 - need to decide is what actually happens
101:35 - when the user clicks submit and they
101:38 - create a product
101:39 - and for that logic what I'm thinking is
101:42 - we probably would want to display a
101:43 - toast message that says product created
101:46 - successfully and also just take them
101:49 - back to this page
101:50 - which is
101:53 - the equivalent of this page right here
101:56 - now another thing that we could do is we
101:59 - can take them to the product Details
102:00 - page
102:05 - but what would they be expecting
102:08 - what would I want so what I'm thinking
102:12 - is that
102:13 - I would probably want to be taking just
102:16 - to my products page as a seller because
102:19 - if I added a product
102:21 - then chances well first of all it's
102:24 - going to appear at the very top which is
102:26 - good feedback and also
102:29 - I may be more likely to add another
102:31 - product right after
102:34 - since for example if I'm selling a bunch
102:35 - of stuff I probably just want that
102:39 - okay so what we'll do is this once they
102:44 - go ahead and submit a product
102:46 - successfully we'll display a toast and
102:49 - we will bring them back to this page
102:51 - right here
102:53 - so let's do that right now that should
102:54 - be a piece of cake
102:56 - so
102:57 - first thing I'm going to need
103:01 - let's just clear all this out okay Pages
103:04 - Shop sell products
103:08 - actually that was
103:10 - creating edit product now I want to
103:13 - navigate them to some routes
103:18 - so I'm going to be using this logic
103:23 - and all right so this is going to come
103:25 - from use navigate which is coming from
103:27 - your activator Dom
103:29 - react router Dom
103:31 - and then
103:33 - navigate is going to come from the use
103:35 - navigate hook
103:39 - use and navigate we just call navigate
103:41 - and then the route
103:43 - and that is going to happen right after
103:48 - you dispatch it and what is the route of
103:51 - that
103:52 - that is just Shop sell products
103:56 - so Shop sell
104:00 - products
104:01 - and I also want to clean up my imports
104:04 - code optimize Imports and display a
104:06 - toast
104:12 - if I can type if I can type okay
104:16 - so I'm going to be displaying the toast
104:20 - and that is util's toast under display
104:22 - toast
104:24 - and I want it to be green so I need to
104:27 - put the toast type
104:29 - and that's coming from Enos toast type
104:34 - so I'm going to be displaying a toast
104:36 - right before
104:39 - I reroute them
104:43 - so something like this okay
104:45 - so create product and then display post
104:49 - that says
104:53 - created
104:56 - product created get some excitement
104:59 - going there
105:01 - and
105:02 - all right let's see what we got going on
105:05 - here right here okay I'm going to create
105:07 - a new product this time chicken and
105:09 - cauliflower pasta sweets and I got any
105:13 - more interesting photos okay
105:16 - interesting thing uh let's just uh
105:20 - okay we can use this Steve Jobs quote is
105:22 - the product photo for now this one's
105:25 - going to be VTX just test that out too
105:27 - the price amount is going to be uh 26 in
105:31 - the quantity is 10 of these and I'm not
105:34 - going to activate this one but I'm going
105:36 - to submit it we got product created and
105:39 - we were taken back to our products page
105:41 - looking good
105:42 - okay so from here what I'm going to do
105:45 - is start building out my products page
105:47 - now that we have like the product
105:49 - creation functionality taken care of
105:52 - so actually I'm probably gonna go eat
105:54 - dinner right now and then when I come
105:57 - back we can start tackling this products
105:59 - page basically building out these
106:01 - products so pulling these from our store
106:04 - and uh yeah well we'll talk about logic
106:07 - in that video
106:09 - but on that note yeah I mean this is uh
106:12 - it's looking pretty good so got some
106:14 - styling work to do here and of course uh
106:18 - well a long way to go before I can sew
106:20 - that wooden spoon of mine but for now
106:22 - thank you for watching and I will see
106:23 - y'all next time