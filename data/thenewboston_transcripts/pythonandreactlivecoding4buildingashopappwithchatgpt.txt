00:00 - all right everybody welcome back and in
00:04 - this video we are finally going to be
00:05 - getting started with this shop feature
00:09 - now before we get to that I got a couple
00:11 - housekeeping items to discuss so first
00:15 - of all I want to mention that from the
00:17 - last video to this one I did a bunch of
00:19 - renaming and reorganizing of these files
00:22 - I actually
00:24 - um started recording it because I don't
00:27 - know I just felt like it should be part
00:28 - of this tutorial series
00:30 - and then halfway through I'm like this
00:32 - is the most boring video ever all I'm
00:34 - doing is like moving files around and
00:36 - renaming things so I figure I wouldn't
00:39 - torture you and upload that video but I
00:41 - want to show you what I did
00:43 - so kind of what we discussed in the last
00:45 - video
00:46 - what I did is I took that orders app and
00:50 - I moved into exchange because remember
00:52 - this app now is going to have two
00:55 - different types of orders one is for the
00:57 - exchange and the other is these orders
01:01 - uh which we'll call shop orders
01:03 - so anyways this model
01:05 - that was the kind of the trade order is
01:08 - now called exchange order
01:10 - and that's just whenever you trade uh
01:12 - coins with someone else and I'll name
01:15 - the other type of order shop order
01:17 - and then let's see what else I did got
01:20 - my little notepad here
01:22 - uh yes so I renamed transfers as you can
01:27 - see there's no more transfers app I move
01:29 - that into the wallets app and I also
01:33 - renamed it to wired because remember
01:35 - that we said a a transfer was basically
01:39 - whenever you deposit coins or withdrum
01:41 - and we're going to be calling that wire
01:43 - because just like a bank wire it's like
01:46 - a transfer funds between two different
01:48 - systems now we are going to be having a
01:51 - transfer model in the future but that's
01:53 - just going to be an internal transfer
01:55 - like I'm gonna send you some coins or
01:57 - you send me some coins so kind of like a
02:00 - um
02:00 - I don't know more like a venmo type
02:02 - transfer
02:03 - and a couple other things not related to
02:06 - what kind of related to the code I guess
02:08 - I got some feedback on my font size so
02:11 - right now I'm recording my entire screen
02:14 - um some people like it some people think
02:16 - my font size is too small there was a
02:18 - debate so I just want to kind of ask for
02:21 - your feedback do you like it small like
02:23 - this or do you want me to uh bump it up
02:25 - your choice just wanted to do a get
02:28 - everyone's opinion before I change
02:29 - anything
02:31 - and let's see what else we got so
02:34 - another thing is I saw hussu you left
02:36 - the comment and I actually really like
02:39 - this idea he mentioned that whenever we
02:42 - are withdrawing funds it would be nice
02:43 - to be able to see the fee that's going
02:45 - to be charged and I think this is just a
02:49 - uh a good suggestion for UI ux
02:51 - Improvement so I thumbs up that and
02:54 - we'll put that in the backlog we'll get
02:56 - to that probably after the shop app but
02:58 - thank you hesu for that suggestion
03:00 - and let's see aside from that I mean I
03:04 - guess the only other news is I just had
03:06 - a bagel it was delicious so on that note
03:09 - I think we're ready to get started with
03:11 - a Shop app
03:12 - so again just to recap
03:14 - for those who skipped the last tutorial
03:17 - or two what we're going to be doing is
03:19 - taking this shop functionality and
03:22 - moving it into the website because right
03:25 - now this uh is part of tnbos which is a
03:29 - peer-to-peer application but since we
03:31 - don't really have the network effect
03:32 - going for this yet we're just going to
03:34 - go ahead and stick it on the website for
03:36 - now make things easier
03:38 - and also on that note
03:41 - I now have a one Soul goal in life and
03:47 - that is to sell this hand carved wooden
03:50 - spoon so this took me a long time to
03:52 - carve it's my finest and only work as a
03:56 - wood carver
03:57 - and if I can do this just sell this one
04:02 - single spoon then what that will mean is
04:05 - that our economy is born
04:08 - so it's not going to be easy I mean
04:10 - we're gonna have to build this entire
04:12 - Shop app a lot of functionality related
04:15 - to this but again
04:17 - I like to take complex problems and
04:20 - break them down into kind of more simple
04:22 - terms
04:23 - so the goal again is just for me to sell
04:26 - this one wooden spoon that's it
04:30 - so how exactly are we going to do that
04:33 - well I have this roadmap so we can start
04:35 - planning everything out don't have
04:36 - anything yet but let's just go ahead and
04:38 - get to it
04:41 - let me bump this up and all right
04:45 - so I'll say this is the roadmap for the
04:47 - shop app
04:50 - and now let me go ahead and kind of
04:53 - figure out how we want to tackle this
04:56 - so what I'm not going to do is just copy
05:00 - all of my existing logic in kind of
05:03 - model structure for
05:04 - um
05:05 - for from TMV OS because there are a lot
05:08 - of things in here like I mentioned that
05:10 - are kind of related to like syncing data
05:13 - between two devices and the payment
05:15 - system is going to be a little bit
05:16 - different because well just peer-to-peer
05:19 - payments are different than the payment
05:20 - system we have on this back end
05:22 - but actually let me close this
05:26 - and all right
05:29 - so let me go ahead and think through the
05:32 - natural flow of what we need to make
05:35 - this happen so before anyone can buy
05:37 - products you first need someone to like
05:40 - list the product or sell a product
05:43 - so the seller
05:46 - is going to need to add products first
05:50 - so I'll say seller ad products
05:57 - and then after they add a product let me
06:01 - just see the fields here
06:02 - so activation status Creation Day image
06:05 - we're going to require an image
06:09 - um price amount price number president
06:10 - seller okay so after
06:13 - they add a product they're going to go
06:16 - ahead and activate it
06:18 - and then
06:19 - from there it's going to be visible on
06:22 - the buyers UI
06:25 - now what the buyer is going to do is
06:27 - they're going to click into this kind of
06:30 - just talking slow to kind of think
06:32 - through what models are needed in my
06:33 - head
06:35 - but then once they find a product
06:37 - they're going to add it to the cart and
06:39 - then that is going to become a car
06:41 - product
06:42 - so say fire
06:45 - uh I'll just say
06:46 - like crates
06:49 - cart
06:53 - and then
06:54 - they are eventually going to be placing
06:58 - an order from their cart page but is it
07:01 - prerequisite for placing an order
07:05 - they not only need cart products but an
07:08 - address as well
07:11 - so before that I would say buyer
07:15 - creates
07:17 - address and again it doesn't really
07:19 - matter if they create their address
07:21 - first and then add products to their
07:22 - cart or if they add products to their
07:24 - cart and then they have an address the
07:26 - order of operations here isn't really
07:28 - important just kind of stating that the
07:31 - buyer needs these two things in order to
07:33 - place an order in order to place an
07:36 - order interesting all right so anyways
07:39 - once they have those two they can go
07:41 - ahead and place an order
07:44 - and then so let me say fire places order
07:50 - and whenever the order is placed then
07:54 - those
07:55 - cart products
07:58 - are going to be converted to order
08:00 - products
08:02 - so these are cart products now place the
08:04 - order
08:06 - my cart's empty converted to order
08:08 - products
08:11 - and then let's see what else we have
08:14 - so address cart products already figured
08:17 - that manager this is just for you I
08:19 - don't need any of this
08:21 - order products order product record
08:24 - recipients this is for syncing data
08:26 - product record same thing products
08:29 - receiving accounts okay
08:31 - so
08:33 - whenever I developed this peer-to-peer
08:36 - logic there was a receiving account
08:38 - but for this we are not
08:42 - going to need one
08:44 - and
08:46 - actually do we need a payment so anyways
08:49 - the receiving account was basically so
08:51 - an account can be created uh by the
08:54 - seller and then for example if the
08:57 - seller went offline talking about tnbos
08:59 - now then
09:01 - uh basically they didn't have to wait
09:03 - around in like monitor the account and
09:06 - be online the buyer could send the funds
09:08 - to that account and even if the seller
09:10 - was offline they would be able to come
09:12 - back online check a receiving account
09:14 - and see the funds then however since we
09:18 - were managing all the stay on the back
09:20 - end
09:22 - do we even need a receiving account in
09:25 - transaction
09:28 - because these two things together make
09:30 - like a peer-to-peer payment system but
09:34 - Actually I don't even think that we need
09:37 - a payment
09:38 - model at all
09:41 - and the reason for that is because
09:43 - whenever an order is placed
09:46 - now
09:48 - it's going to have a total and that
09:50 - total is going to be just paid right
09:52 - away so
09:54 - again before with peer-to-peer
09:57 - um the buyer was basically placing this
09:59 - order and then they were responsible for
10:01 - kind of paying for it after but now
10:04 - since everything just managed on the
10:06 - back end and the user has like a wallet
10:08 - included we won't even let them place
10:11 - the order if they don't have enough
10:12 - funds in their wallet so
10:15 - I think that we don't even need like a
10:17 - separate payment or transaction or
10:19 - anything like that
10:20 - this is going to be awesome much easier
10:23 - than this peer-to-peer payment system
10:26 - so buyer places order
10:29 - and then
10:32 - yeah funds are deducted right from there
10:36 - let me just say that
10:41 - funds are deducted at the time the order
10:45 - is placed
10:50 - and let me put this in italics because
10:52 - these are pretty much all the models
10:54 - that we need
10:55 - so seller adds a product
10:59 - buyer creates cart product the buyer
11:01 - creates an address
11:03 - I replace it the hiccups gray buyer
11:07 - places the order and then cart products
11:09 - become order products okay
11:12 - now with this said
11:17 - I am wondering how to structure this so
11:21 - one two three four five models when I'm
11:24 - thinking is I can probably just stick
11:28 - these all
11:30 - in a single Django app
11:33 - I think that'll be easiest
11:35 - so let me do that
11:38 - and okay so I'm going to stick
11:40 - everything in a single Django app and
11:41 - now last but not least let's go ahead
11:43 - and figure out how to break these up
11:44 - into tickets
11:46 - so I'm actually thinking although I
11:50 - don't like to do this too often I like
11:52 - to pretty much keep my tickets as small
11:54 - as possible because then you can you
11:57 - know you don't have like these huge
11:59 - changes and you try and merge in and get
12:00 - a bunch of merge conflicts
12:02 - so it's nice to have like small
12:04 - bite-sized tickets however I also don't
12:09 - like to merge in features that are like
12:11 - halfway complete and I am the only one
12:15 - working on this application right now so
12:18 - maybe I'll just have two tickets one for
12:20 - the front end one for the back end I'll
12:22 - just say uh shop
12:25 - so let's do that okay
12:27 - so this
12:29 - is a shop on the back end
12:32 - and what I'll do is I'll build out the
12:34 - entire back end first
12:36 - and then I'll just test everything using
12:38 - Postman and then after that I'll just
12:41 - work on the front end
12:42 - show shop and then for the front end
12:50 - let me just say shop let's just say
12:55 - the front end of this always like to
12:58 - kind of link my front end tickets to my
13:00 - relevant back-end tickets
13:04 - all right so back in shop 39 so back in
13:08 - just make sure I'm in sync
13:12 - and that was 39 chop
13:22 - all right so change shop
13:27 - clear this out and
13:31 - my Django admin now
13:33 - okay
13:35 - so now let's go ahead and hold on I've
13:37 - got some stuff on my desk a lot of
13:40 - clutter let me organize this
13:42 - okay clean desk clean mind ready to go
13:46 - so see me the New Boston
13:55 - start app shop
14:09 - uh
14:11 - uh you know what I'm just gonna do this
14:17 - okay and got my shop app
14:22 - deleting my models testing views because
14:24 - I like to put those in packages
14:28 - and then first thing I'm just going to
14:30 - do is register this
14:32 - and I'm too lazy to
14:34 - type out the new Boston so I'm just
14:36 - going to copy this
14:40 - and okay so now I gotta register this
14:43 - app so that's projects settings base
14:57 - shop config
15:02 - beautiful
15:04 - and now let me go ahead and
15:08 - my models
15:12 - actually let me do this
15:15 - let me get my package structure
15:19 - so I'm going to have models
15:21 - serializer and views
15:26 - all right now I'll get to those in a bit
15:28 - but first let me just go ahead and uh
15:31 - kind of spec out my models
15:33 - so let me open My Boy chat Jupiter
15:38 - and uh
15:50 - all right do I got anything embarrassing
15:52 - here cooking pork chops intermittent
15:54 - fasting and YouTube content migration
15:57 - errors okay yeah yeah and uh perfect
16:00 - so next what I'm going to do is I'm just
16:03 - going to create a new model for product
16:12 - and let me actually just pull up a
16:15 - reference here
16:16 - and okay
16:25 - so I'm going to inherit from creating
16:26 - modified since this is just going to
16:29 - give me a created modified date which I
16:31 - want to keep track of on my products
16:33 - and
16:35 - I'm also just gonna
16:38 - whoa whoa whoa what's going on here
16:48 - all right so what does my product model
16:51 - need in it where are you at tmbos
17:03 - okay
17:10 - create a Django model with an activation
17:13 - status
17:15 - of
17:17 - or draft
17:24 - actually do I want this
17:28 - so I have two activation statuses active
17:31 - or draft I could have that a Boolean but
17:36 - yeah I don't think I want to do that I
17:38 - feel like that's going to come back to
17:39 - bite me if I want to add another one in
17:41 - the future
17:42 - okay so activation status
17:45 - description
17:48 - uh image URL we don't need that actually
17:53 - we do need that but
17:55 - I don't want to have uh
17:58 - see what was my other one
18:03 - where did I have an image core
18:08 - all right so
18:13 - for the image what did I just call that
18:17 - should I just say image
18:20 - yeah I'm sure in the future we're going
18:22 - to support multiple images as well but
18:24 - for right now this is fine
18:27 - and okay what else do you need a
18:30 - modified date name of course
18:34 - name
18:37 - and then
18:39 - product amount
18:42 - or Price amount
18:45 - then price
18:47 - Network
18:51 - so just say price even though we're
18:53 - going to have a core
19:03 - so
19:05 - core
19:09 - just just thinking the naming convention
19:11 - for this so anyways this price amount
19:15 - and price core is basically saying what
19:18 - digital currency
19:19 - are do you want to be paid in and then
19:22 - how much is it
19:25 - so I so what I can do is just name it
19:29 - core and amount
19:31 - but I kind of like the idea of
19:33 - pre-pending it with price
19:35 - just because I think it's going to be a
19:38 - little bit more intuitive
19:40 - so let me say price core
19:44 - and I'll tell chat gbd price then I'll
19:47 - rename it later
19:50 - and then uh the product ID and then the
19:53 - seller
19:54 - which is a foreign key to a user
20:06 - this is good for now then we'll kind of
20:07 - patch everything together
20:09 - sure I can help with that
20:14 - I'm Chad gbt I'm so smart I can do
20:17 - everything me okay so let's see what we
20:21 - got
20:22 - um
20:25 - wire
20:28 - okay so this is going to be a text
20:31 - Choice as well
20:46 - all right so I'll say what am I gonna
20:49 - name this
20:52 - I keep opening that accidentally
20:56 - okay so activation status
21:26 - Okay so
21:31 - activation status and what did I have
21:34 - for here active in draft
21:42 - so active active the readable version is
21:45 - active and of course draft
21:50 - and the readable version is draft how
21:53 - many characters is active have been at
21:55 - one two three four five six
21:57 - so we need a max length of six
22:00 - and all right so activation status is a
22:04 - character field these are the choices
22:06 - max length of six it's going to be
22:08 - required
22:10 - to go
22:11 - and then let's see what else we have
22:16 - so next up is
22:22 - actually I don't think I want to do I
22:25 - want to default for this
22:28 - maybe I do
22:31 - yeah let's add a default
22:34 - so default equals activation status dot
22:38 - draft
22:45 - in my linter will pick up this issue so
22:48 - activation status
22:49 - a description
22:52 - name
23:00 - and the price
23:03 - is going to be a big integer field
23:08 - with no d
23:13 - so price amount
23:21 - so they're gonna have to give us a price
23:24 - amount
23:25 - in a price core in whenever
23:31 - yeah I don't want on the elite models
23:33 - Cascade because I don't want the
23:36 - products being deleted if we ever have
23:37 - to delete the course
23:39 - so models Dot
23:44 - I always forget the name of these
23:46 - so
24:05 - far case on delete parameter not models
24:10 - Cascade
24:12 - not protect either set no there we go
24:21 - Hmm this is interesting too
24:26 - yeah that'll work
24:36 - ties
24:40 - okay so let me make what
24:46 - all right so a product is going to have
24:47 - created day and a modified day is going
24:49 - to have an activation status and this is
24:52 - either going to be active or draft max
24:54 - length of six and it's going to be set
24:56 - equal to draft by default so whenever
24:58 - the first grade product is going to be
25:00 - in draft mode and then when they're done
25:01 - filling out all the information they can
25:04 - go ahead and activate it to make it live
25:06 - so they're going to fill out actually
25:08 - let me just do this
25:12 - so you're going to fill out the name the
25:14 - description and give it an image what's
25:16 - not going to be our URL we're just going
25:18 - to store it on their back end but name
25:20 - description image
25:25 - and I don't want this to be pulled up
25:29 - blank it was true because I want that to
25:31 - be required
25:36 - and then for the price Network this is
25:39 - going to be the core
25:41 - basically do you want like TN or tnb VTX
25:45 - so on and so forth
25:47 - then the price amount how much is it if
25:51 - the core ever gets deleted then just set
25:54 - this to null instead of deleting the
25:56 - product
25:57 - and the seller is of course going to be
25:59 - the person who sells it and we don't
26:02 - need a buyer right here because we only
26:05 - need a buyer on the order
26:07 - so
26:10 - I also want a better string right here
26:18 - and for the string representation I'll
26:20 - say the product ID
26:24 - let's get the name
26:27 - in here
26:31 - and I'll say price
26:36 - so the price e for this display I'll say
26:40 - price amounts and then I'll say
26:42 - the price core
26:49 - ticker so as the string representation
26:53 - representation it'll say like price 110
26:55 - b or something like that
26:58 - so now with this said oops
27:02 - actually let's close all those and kind
27:04 - of just uh
27:06 - make sure everything's working in Django
27:08 - admin first
27:09 - shop models product
27:12 - and let me just steal my init
27:16 - over here
27:21 - is
27:25 - you know what I'm doing now is I'm just
27:28 - uh importing basically whenever I import
27:31 - my models from shop I don't have to do
27:34 - models.products I can just do uh from
27:37 - shop.models import product just makes my
27:39 - models a little bit more cleaner
27:41 - whenever I'm importing them
27:43 - and then in my admin just register that
27:48 - and I like to steal this code whenever I
27:51 - can because I'm too lazy to type
27:52 - basically everything
27:54 - and here we go
28:00 - is my server running what's going on
28:03 - here
28:09 - just oh that's interesting
28:13 - so I have a foreign key that I'm setting
28:14 - to know but I don't have the field as
28:16 - knowable you know what I'm going to do
28:18 - for right now I am just going to go
28:19 - ahead and put Cascade because even
28:23 - though this isn't the future user
28:26 - experience that I want where let's say
28:28 - we have to delete a core because it's
28:30 - like causing issues or maybe it goes
28:32 - offline I don't want those products
28:34 - silly did however
28:37 - on my front end I'm going to have to
28:40 - handle the case where it's null and I
28:43 - think it's just a little bit too much
28:45 - logic to kind of build out all at once
28:48 - so instead I'm just gonna make it
28:51 - Cascade and then in the next iteration
28:52 - I'll handle that edge case
28:55 - all right so make migrations
28:59 - make migrate
29:04 - okay
29:06 - and then in Jungle admin what do we got
29:09 - let's go ahead and add a product
29:12 - actually where's my uh
29:17 - and what image do we got uh let's just
29:22 - use this bacon for right now what if
29:24 - okay so the name is bacon in uh
29:28 - description
29:30 - juicy bacon for sale price is for 20
29:34 - price core tnb seller Bucky continue
29:37 - editing beautiful all right so
29:40 - productive one is bacon and the price is
29:42 - 420 tnb
29:45 - so now what I'm gonna do is probably
29:49 - just uh get a simple endpoint going on
29:54 - so let me just say for
30:04 - so for the serializer I'm probably
30:08 - going to want to have a separate read
30:11 - and write the serializer
30:19 - all right so shop serializers
30:27 - products
30:33 - product I don't need my user model
30:41 - and how to create serializure actually
30:45 - let me do this
30:46 - should be easier
30:48 - let's leverage chat GPT
30:56 - as much as we can
30:58 - all right now
31:09 - what
31:11 - actually let's do this I'm trying to
31:15 - give it like um an existing pattern and
31:18 - then oh yeah here we go okay
31:21 - so I'll say that
31:30 - okay
31:32 - here is
31:34 - one of my Django
31:39 - and views
31:42 - all right so I'm gonna give it
31:48 - a core serializer in view
31:54 - and I'll say
31:56 - create
31:57 - um view set for me
32:01 - my
32:04 - product model
32:06 - creative USA and serializer
32:10 - and serializers for me for my product
32:12 - model here
32:19 - and I have to be able to give it the
32:22 - logic as well I'll say I want anyone to
32:25 - anyone who is
32:29 - to be able to
32:34 - retrieve
32:39 - i before e except after c
32:43 - I want anyone who is authenticated to be
32:45 - able to retrieve products
32:49 - um
32:50 - let's see did I give him my yeah
32:59 - the seller to be able to create edit
33:07 - and delete products
33:10 - if I can type
33:13 - and what other logic do I want
33:23 - I think that might be it
33:25 - okay so let's see this
33:29 - I want anyone who's authenticated be
33:30 - able to retrieve products and the seller
33:32 - to be able to create edit and delete
33:33 - products
33:36 - show me what you got chat gbt
33:38 - show me what you got okay so in this
33:40 - case you're gonna need two serializers a
33:42 - reading or right okay I agree I concur
33:45 - and
33:49 - read on these fields okay what do you
33:53 - got going on here
33:55 - that's looking right so far we just copy
33:57 - that from here real quick
33:59 - just a little bit okay
34:06 - okay looking good looking good
34:11 - okay so product resealyzer it's going to
34:14 - return all the fields let me just make
34:16 - sure and have no
34:19 - yes they do need all the fields and none
34:21 - of them are secret or anything so that
34:24 - is good
34:27 - I'm also wondering
34:29 - since this field the price core
34:33 - in the seller
34:34 - hmm
34:36 - so these are actually going to be
34:37 - foreign Keys which means in the response
34:39 - they're going to come back is an integer
34:43 - but I'm thinking
34:45 - for the seller
34:50 - whenever we return that we probably want
34:53 - to return that with a serialized field
34:56 - that way we can display kind of like
34:58 - this the um the name of the seller and
35:02 - then their profile photo and whatnot
35:08 - so yeah
35:11 - actually what user and information do I
35:13 - have
35:14 - so for my users you have a username
35:18 - we don't even have profile photos yet
35:21 - so embarrassing okay but we still want
35:24 - the username so let's just
35:28 - turn a serialized field for that
35:32 - okay
35:33 - so user serializers user read serializer
35:37 - see if we can borrow it from somewhere
35:39 - else
35:51 - okay
35:55 - see in the product read serializer
36:05 - you
36:06 - [Music]
36:10 - I just get rid of that file
36:13 - using the user read serializer
36:16 - I just realized that it's probably going
36:18 - to be easier if I just type this out
36:20 - myself but
36:21 - I did want
36:29 - okay chat Jupiter let's see what you got
36:33 - here
36:35 - okay so product view set is a model view
36:38 - set
36:39 - uh these parser classes are gonna allow
36:41 - me to work with images which I'm going
36:45 - to need is authenticated is object owner
36:47 - or read only
36:48 - uh this is going to have to change
36:54 - get this queued up ready to go
36:57 - uh serializer request so when you're
37:01 - creating it
37:03 - okay what serializer do you need well
37:05 - whenever you're creating it or updating
37:07 - it you're using the product right
37:08 - serializer in the product create
37:09 - serializer says that
37:11 - whenever you create it the seller is
37:14 - going to set to a request user and then
37:16 - once the created modified day and seller
37:18 - are set this is pretty much the fields
37:20 - that are going to be controlled by the
37:22 - system
37:23 - and anything else is just editable at
37:27 - any time right yes
37:30 - so the user is going to be able to
37:32 - toggle it to active and draft at any
37:34 - time
37:35 - between the description image name
37:37 - amount and core if they want to and not
37:40 - the seller so that all looks good
37:43 - all right so the creation logic is save
37:45 - it and then return it using the
37:47 - re-serializer
37:49 - then when you update it you don't need
37:51 - to have all fields
37:57 - which is interesting
38:01 - do I need this
38:07 - hmm
38:10 - I don't know if I need this but I had it
38:12 - in my core so stick with that all right
38:15 - so the instance is the existing instance
38:18 - the data that I pass in pass instance
38:21 - update logic
38:23 - and same same okay
38:27 - um and then I wanted to tell actually
38:29 - what was chat sheep doing
38:32 - oh yes
38:36 - Okay so
38:39 - uh from the New Boston users
38:46 - from the New Boston users get to this
38:49 - serializer and then in my product
38:52 - response
38:54 - seller is going to come back is a nested
38:57 - object more or less
38:58 - and then I also want to say that
39:01 - hey gbd
39:04 - these are
39:11 - my class
39:15 - okay so basically I want to tell chai
39:18 - gbt that
39:19 - um typically on most of these models
39:24 - I reference the owner of the object
39:26 - using the keyword owner which is a
39:29 - foreign key just to a user that owns the
39:31 - object however on my product model I'm
39:34 - calling it seller
39:36 - so it may need to change that
39:50 - all right so is object owner permission
39:54 - checks currently filled buy a new
39:56 - product owner yes
39:58 - works on a cellular okay
40:07 - here's how you can modify a subject
40:09 - owner okay
40:11 - so
40:12 - I don't want to do that either what I
40:15 - was thinking is that it may give me
40:17 - something
40:18 - a little bit more fancy but it looks
40:20 - like it's just giving me the same thing
40:21 - with the um
40:23 - with this replaced
40:26 - so is object seller
40:30 - or read only
40:37 - all right
40:40 - and let me just ask if there's any way
40:42 - to uh
40:45 - dry up these
40:50 - indeed there is a way what are you
40:52 - coming up with Chad Chipotle is field
40:54 - user
40:58 - huh that's interesting
41:01 - now oh
41:03 - okay I'm liking this
41:07 - Oh I thought that what I was going to do
41:12 - is just have me pass it in every time
41:15 - I'm using this
41:18 - however
41:19 - I'm liking this a lot actually is field
41:22 - user overeat only not sure about that
41:24 - but
41:26 - yeah this is nice
41:28 - okay
41:32 - all right so basically we're saying that
41:34 - uh it's the same permissions we have to
41:37 - make sure that the requesting user
41:40 - is either the owner or the seller
41:42 - however in this base class right here
41:46 - instead of doing this which we had
41:50 - before just matching the object.property
41:53 - to the request user
41:55 - instead we are setting a user field to
41:59 - none and then in the class that's
42:01 - inheriting it the child class we just
42:03 - set the kind of the user Field property
42:09 - just thinking of my name and Convention
42:10 - is field user or read only I don't like
42:13 - that name
42:15 - is field user
42:19 - is object owner
42:22 - is
42:24 - field user
42:26 - so this is interesting so I basically
42:29 - want a word for the person who like owns
42:32 - the object but it's not the owner and I
42:34 - don't want to say seller
42:36 - you know what this field user actually
42:38 - is sounding better right about now so
42:41 - okay let's uh let's roll this
42:45 - um yeah I think we're kind of good to go
42:47 - right now so now what I'm going to do is
42:49 - just make my urls
42:52 - and what I can do is copy this from core
42:55 - and go to
42:58 - products or excuse me shop
43:03 - Heroes
43:04 - and I'll say products
43:09 - and Views product I am looking at the
43:13 - product view set
43:18 - Okay so
43:22 - my URLs are looking good for this and
43:24 - now I just gotta
43:27 - tie these to my main project and I
43:29 - should be could go to start testing
43:33 - New Boston Chop
43:35 - euros
43:44 - alright so I'm making it
43:48 - failed bow
43:57 - okay it looks like
44:00 - it didn't like this too much
44:20 - all right so it looks like it doesn't
44:25 - like that it's first this user field uh
44:28 - variables first being cast to none and
44:30 - then later on we're setting equal to a
44:31 - string
44:33 - however
44:35 - you just type it out as optional string
44:40 - and let's see what our linter says about
44:43 - that and I forgot the import optional
44:45 - from typing
44:54 - all right and then one more time because
44:57 - the first time it should have fixed it
44:58 - and then there we go
45:01 - all right looking good
45:03 - so now let me open Postman
45:10 - and all right so first thing I want to
45:12 - do is just log in
45:19 - get out of here thing
45:22 - all right so I'm gonna log in and use
45:24 - your name Bucky password one two three
45:26 - four
45:28 - get my access token
45:31 - and then
45:33 - for the products endpoints
45:40 - I'm just gonna call Bear with that token
45:44 - send and all right
45:46 - so my products endpoint is working
45:51 - good so far
45:55 - and everything is coming back the seller
45:57 - is nested
45:59 - using this user read serializer
46:04 - and then created a modified date
46:08 - it's in draft mode
46:11 - okay looking good
46:13 - so now with that being said let me go
46:16 - ahead and
46:18 - try to create a product
46:20 - so I'm going to create a product
46:23 - and let's see I want
46:27 - form data
46:29 - and
46:31 - all right let me just go ahead and send
46:33 - this in get some errors back okay
46:36 - so name of this product is going to be
46:39 - spoon
46:43 - spoon
46:45 - the
46:46 - the scription
46:48 - like a hard wind spoon
46:52 - yes I know I have to work on my
46:54 - marketing skills all right so the price
46:56 - amount I'll say 100
46:59 - and the price core
47:01 - this is going to be foreign key and
47:04 - let's see
47:06 - so for the course this okay the new
47:10 - boston.net is foreign key one
47:13 - so 100 tnb
47:15 - and then for the image
47:20 - this is going to be going to be file and
47:22 - I'll just say
47:24 - bacon right now
47:27 - looking good looking good and
47:32 - yup seller that's me
47:35 - and also just to kind of do some quick
47:37 - QA let me pass in an unauthorized
47:40 - request
47:41 - beautiful not authorized
47:45 - okay
47:46 - and then
47:49 - so this is three
47:54 - now I'm just go ahead and try to patch
47:56 - AKA edit that
47:59 - and I'll say I want to change the
48:02 - description to soft wooden spoon and the
48:06 - price amount say 260.
48:10 - description softwin spoon price amount
48:13 - 260 and everything else is the same now
48:17 - another thing that I'm considering is
48:19 - serializing this price core but I don't
48:21 - think that we need to and that's because
48:24 - the way I have it set up on the front
48:26 - end whenever you first log in it's going
48:28 - to pull all
48:30 - excuse me all information for all cores
48:32 - so it's already going to have like the
48:34 - ticker the full name the
48:37 - um the logo so on and so forth so we can
48:39 - just pull this right from Redux and keep
48:41 - everything nice and lean of course we
48:43 - don't want to do it for seller because
48:46 - whenever you log in it's not like we
48:48 - want to pull all the users down
48:50 - for the entire database from uh but for
48:53 - the course it's fine since they're kind
48:55 - of a key part of the entire application
48:58 - okay so now
49:01 - what next
49:06 - okay let me actually let me go pee
49:10 - and then we'll tackle the next feature
49:15 - uh
49:16 - pause
49:18 - all right so seller ad products
49:23 - looking good let me just cross this out
49:25 - for now all right now the next thing we
49:29 - have is for the buyer to create cart
49:32 - products
49:35 - okay now what I'm going to do is kind of
49:37 - Leverage GPT a little bit more because
49:40 - yeah it was pretty impressive with its
49:44 - work on products
49:46 - and okay
49:54 - next create a car products model with
50:01 - created date
50:03 - in a foreign case the product
50:07 - and okay
50:15 - now create a cart
50:19 - model with
50:24 - um
50:26 - now create a car product model
50:29 - that will keep track
50:32 - of the products
50:34 - uh buyer adds to their cart
50:42 - include a
50:48 - bar
50:50 - foreign key for the buyer
50:53 - uh created dates and a
50:58 - foreign key I'll say a foreign key to
51:00 - the buyer and a foreign key to
51:08 - product
51:11 - I think that's all we need
51:14 - because yeah the buyer only has one cart
51:22 - created modified that works actually
51:25 - okay
51:29 - so let's close out all these and Shop
51:32 - models
51:38 - cart products
51:42 - okay
51:44 - so we got to create and modified but
51:46 - that's okay even though we aren't really
51:49 - going to need the modified date because
51:50 - they aren't going to be able to modify
51:52 - these cart products if they ever want to
51:54 - remove an item from their cart they're
51:56 - just going to delete the entire thing
51:58 - but I mean it's all standard so it's all
52:00 - good
52:02 - um meta we don't use this at all
52:05 - okay
52:07 - so the buyer
52:10 - is going to have a foreign user if you
52:12 - delete them then if you delete the user
52:15 - then the products are deleted as well
52:20 - and then for product
52:27 - foreign key to
52:30 - let me see
52:31 - shop
52:34 - dot product
52:36 - and then really name
52:39 - so cart
52:41 - ID
52:44 - make that more readable buyer username
52:46 - and the product name
52:51 - okay
52:58 - and actually let me go ahead and uh
53:07 - just make sure we have something to test
53:08 - it around so cart products
53:12 - for a car products
53:23 - actually
53:34 - I think I may need to create another
53:35 - user
53:37 - yep and let me just go ahead and create
53:39 - one right now
53:41 - all right so Amy uh your password can be
53:44 - the same
53:52 - password is too common
54:00 - all right so now I have two users uh Amy
54:04 - and Bucky and then Amy
54:07 - and I gotta make migrations
54:23 - all right so now I've got that up and
54:26 - running
54:27 - so it turns out that Amy really loves
54:31 - this
54:34 - wooden spoon actually let me delete what
54:37 - one of these Wooden Spoons since I
54:39 - created two of them
54:43 - all right you know what in fact Amy
54:47 - loves bacon
54:50 - and Amy also loves this wooden spoon of
54:53 - buckies
54:55 - so now
55:02 - I'm going to do is I'm gonna log in is
55:05 - Amy and Amy's password is bacon12345
55:11 - and now once we have our off token we
55:13 - can begin
55:19 - Okay so
55:23 - I would say
55:33 - actually what do I need
55:36 - create a serializer and if you said
55:44 - and view set for car product
55:54 - yeah
55:56 - all right so now chai sheep T I want you
55:59 - to create a serializer and view set for
56:01 - cart product
56:03 - um I'll say buyers should be able to
56:09 - [Music]
56:12 - in fact how do I want
56:14 - all right so anyways buyers should be
56:16 - able to add and remove items from their
56:20 - cart
56:24 - now I'm thinking how I want this data
56:26 - serialized
56:28 - because
56:32 - I mean if the user
56:36 - is looking at these products then
56:39 - they're already going to have these
56:40 - products in their store
56:43 - and whenever they for example add it to
56:46 - their cart
56:47 - then we really only need the foreign key
56:49 - because we can just just look it up in
56:52 - the Redux store however then I'm
56:54 - thinking
56:55 - if for some reason they're on their
56:57 - checkout page and they refresh this
57:00 - then
57:03 - they're gonna fetch the carts endpoint
57:05 - to figure out what products they have
57:06 - there and then the product actually
57:09 - isn't
57:12 - yeah so then we'll have to fetch the
57:14 - product again so I will say that in the
57:18 - serializer
57:21 - we want to serialize
57:28 - the product
57:34 - using the product rate serializer
57:47 - serializer we
57:54 - using the product read serializer which
57:57 - you should be familiar with already
58:01 - and
58:04 - another thing is that I wanted to say
58:08 - buyers should not be allowed
58:12 - to
58:16 - add
58:18 - items to their cart from multiple
58:21 - sellers
58:27 - and I think that might be it
58:34 - well at least it's a start first let's
58:36 - create car product serializers show
58:38 - query read flexibility
58:40 - great
58:43 - I like where this is going
58:47 - fantastic great job you're doing awesome
58:49 - keep it going we'll keep it going
58:58 - I think I'm in love with you this is
59:00 - amazing stuff
59:02 - all right so now let me go ahead and
59:04 - create a new
59:06 - car product serializer and a car
59:08 - products for you
59:18 - all right so what do you got for the
59:19 - serializer
59:23 - okay so car product serializer
59:28 - you are saying that it's model
59:30 - serializer the product is going to be
59:31 - serialized using credit grade serializer
59:34 - and it's going to serialize product
59:35 - Fields all which is create modified
59:38 - buyer product
59:41 - looking good
59:42 - all right now for the right logic
59:45 - um again these are kind of system
59:47 - controlled Fields I'm going to recreated
59:49 - the buyers automatically set by the
59:51 - request user
59:52 - and then
59:54 - okay this comment is good for
59:56 - readability okay
59:58 - so for the carp products
60:00 - it's basically all the products where
60:04 - the buyer is the request user
60:06 - now if anything exists in that query set
60:10 - then get the seller for that
60:14 - and
60:16 - create a set
60:18 - from all of the sellers
60:21 - and
60:24 - If the product seller
60:26 - from the product they're trying to add
60:29 - is not in the set of existing sellers
60:33 - which there should only be one in the
60:36 - set unless something went wrong then I'm
60:38 - going to say you cannot add products
60:40 - from different sellers to the cart
60:44 - I read that right okay
60:46 - so get the product seller for the
60:49 - product they're trying to add
60:58 - I wonder if this should actually be in a
61:01 - separate validation method
61:04 - must ask
61:19 - since this seems like uh data that would
61:21 - be validated before this crate function
61:24 - would be called
61:26 - yes that's a great point it's good
61:28 - practice to place validation logic and a
61:30 - separate method
61:32 - okay cool
61:35 - that's what I love about HR cheap T I
61:37 - love working together on these things
61:39 - you can learn a lot from each other
61:46 - attributes
61:52 - okay
61:55 - do this
62:06 - okay so whenever you validate this
62:16 - and you're just going to validate
62:17 - everything with the parent class which
62:21 - is just the model validation basically
62:23 - and then you're gonna get the request
62:26 - put the user from it
62:28 - and same logic as before
62:32 - and then after you ran your validation
62:34 - then you can just go ahead and run this
62:36 - crate with all the validated data
62:38 - request
62:40 - buyer
62:42 - looks good
62:43 - okay cool
62:45 - and now
62:48 - let's see what you got for
62:51 - The View sets
63:05 - is this right for the vsat is here
63:18 - wait a minute first of all I got
63:20 - something in my eye right now
63:22 - okay anyways let's go back to the
63:26 - product
63:27 - nope nope
63:28 - no products for you there we go
63:36 - from crate
63:51 - okay
63:57 - okay what I'm going to do is just say
63:58 - this
64:07 - based on these standards
64:11 - chat GPD may have got a little bit
64:13 - confused mix in a serializer with
64:16 - unless I just copied the wrong thing but
64:19 - car product view set
64:26 - parser class I don't need that
64:29 - okay
64:30 - so this is what I wanted
64:38 - now for the let's say
64:43 - wallets
64:49 - don't need that parser class because
64:52 - okay
64:57 - so I don't need this parser class
65:03 - and then the owner of this cart is the
65:07 - buyer
65:11 - so in that case I'm going to create a
65:14 - new
65:21 - so say is object the buyer
65:24 - or read only in the user field for this
65:27 - is buyer
65:29 - and then I'll say for cart products the
65:32 - buyer is kind of in charge of everything
65:34 - all right so the permission classes that
65:36 - you need you need to be authenticated
65:38 - and you need to be the buyer to
65:40 - basically do anything to your cart
65:43 - and for the query set this is going to
65:46 - be different as well
65:56 - so for the query set
66:06 - QRS all right so for the query set we
66:10 - basically want to save the same logic
66:12 - right here where carp product objects
66:15 - filter buyer equals request user her
66:17 - project rubbish filter buyer equals
66:19 - request user
66:28 - buyer equals user and then for this top
66:33 - level query set we can just do none
66:36 - okay
66:39 - so what we're seeing right here is that
66:41 - whenever they are retrieving items
66:43 - then only retrieve the items that you
66:47 - are the buyer for basically you
66:48 - shouldn't be looking in anyone else's
66:50 - cart
66:51 - and now let's just do a quick sanity
66:54 - check
66:56 - okay
66:58 - so whenever you are creating a new cart
67:02 - product
67:04 - you are going to be using the product
67:07 - right serializer same thing if you are
67:09 - doing any partial updates
67:15 - which I don't want right
67:19 - yeah
67:21 - no updating allowed
67:25 - because there is no need
67:38 - so
67:46 - and there's no need because even if they
67:48 - want to update their cart
67:49 - um they just delete the product so
67:55 - I want to disallow updates I think I
67:57 - just have to remove
67:58 - update when I want to make sure there's
68:01 - no baked in Behavior
68:03 - simply remove the updated this prevents
68:06 - okay
68:09 - method not to return action since these
68:11 - will no longer be valid fantastic
68:17 - now
68:31 - all right so if you are creating
68:35 - an object then use the product right
68:36 - serializer and the product right
68:38 - serializer is basically just going to do
68:41 - all your basic validation make sure
68:43 - you're not going to try to add products
68:46 - from different sellers into the same
68:48 - cart and then do your model validation
68:51 - if that's good it's just going to create
68:52 - and return your cart product
68:54 - and then it's going to return that data
68:58 - using the read serializer after it gets
69:00 - created here and in the read serializer
69:03 - it's pretty much just serializing the
69:05 - car product with the product also
69:07 - serialized
69:09 - and
69:11 - if object buyer
69:13 - should be the one in charge is object
69:15 - buyer
69:17 - okay
69:19 - now let me lint this
69:22 - and I think I'm on my migrations are
69:24 - good
69:30 - I can change anything right make
69:31 - migrations
69:39 - by the way we also need to write a bunch
69:40 - of tests but I like to do everything uh
69:43 - testing everything manually at first
69:45 - just because I I don't know seamless
69:48 - development is a little bit easier that
69:50 - way
69:51 - but either way
69:52 - let's go ahead and say okay so Amy
69:56 - you're logged in fantastic now
70:00 - I also want to get Amy's car products
70:09 - and for this you're going to need to
70:12 - authorize you with
70:13 - this new token because this is Bucky's
70:16 - token
70:17 - so let's go ahead and oops no end point
70:20 - because we didn't create one yet so
70:22 - embarrassing
70:23 - all right so shop urls
70:32 - from views cart products
70:35 - Port cart product
70:38 - view set
70:42 - and now for oops car products car
70:45 - product visa and for products product
70:47 - view set
70:49 - so now
70:53 - hopefully when you get the car products
70:55 - now okay so Amy has two items in her
70:58 - cart some juicy bacon
71:02 - from Bucky and this is cart product one
71:05 - and Amy's buyer two
71:08 - and she also has that wooden spoon soft
71:11 - wooden spoon
71:14 - and
71:17 - huh this is interesting as well
71:19 - so
71:21 - I'm looking at this right here okay
71:24 - so
71:25 - if I actually wonder what happens in
71:29 - this case
71:30 - um
71:31 - so say that Amy is shopping
71:35 - my name is Amy I'm shopping at an items
71:37 - to my car I'm loving it and then in item
71:42 - like this black T-shirt and gray t-shirt
71:44 - gets added however at this point in time
71:48 - Bucky is going to mark one of these as
71:51 - draft again maybe he like wants to
71:53 - change the image or the name
71:56 - what is the user experience like for Amy
72:00 - because
72:01 - if we just delete it then Amy's like
72:04 - wait a minute I just added two things to
72:05 - my cart and I went to check out and now
72:07 - there's only one
72:09 - another thing that we can do is
72:12 - let her place the order and then throw
72:16 - an error but that's kind of annoying
72:17 - because then she might be like well if
72:19 - this was going to cause an error then
72:20 - why'd you let me add it in the first
72:22 - place
72:24 - so
72:26 - I don't know what to do this is
72:28 - interesting
72:29 - okay if everything's legitimate and it's
72:32 - added to the cart but then while it's in
72:34 - the cart
72:41 - hmm
72:46 - okay
72:56 - okay what I'm thinking
73:01 - and I mean what I can do is just say
73:08 - It's tricky because I can just say that
73:11 - whenever you're returning
73:13 - this query right here for example if you
73:15 - are on the checkout page
73:17 - then I can add like a logic here to
73:21 - filter out any cart products where the
73:24 - product is then in draft mode
73:28 - but the problem with that is let's say
73:30 - that we even allow Amy to place your
73:32 - order so we take that let's say that one
73:36 - of these is in draft mode one of them is
73:38 - inactive we only return the active one
73:41 - to the front end
73:44 - and then Amy places the order and in her
73:46 - orders
73:47 - she only has one product in there so
73:49 - that's going to be good however
73:52 - at the point in time when Bucky makes
73:54 - that product active again then Amy's
73:58 - gonna have an item in her cart that like
74:00 - just appeared out of nowhere it's going
74:02 - to feel like
74:03 - so what I'm thinking is the logic that
74:06 - we probably want is that if
74:10 - there is a product in anyone's cart and
74:14 - the seller
74:15 - makes that product draft mode again then
74:18 - we probably want to just delete it from
74:20 - their car automatically
74:22 - yeah I think that's the logic that we
74:24 - want
74:25 - so that's going to involve a little bit
74:28 - more tricky logic probably
74:30 - not really appropriate for this uh
74:33 - initial MVP but yeah something else to
74:37 - keep in mind also thrown it out to the
74:40 - everyone out there if there's better
74:43 - logic if anyone else works on like an
74:44 - e-commerce solution or you just have any
74:47 - other ideas then uh yeah let me know
74:49 - this is a kind of tricky situation
74:52 - but anyways uh let's see what we got
74:55 - going on here so we're already
74:56 - retrieving this and now let me just go
74:58 - ahead and
75:00 - all right let's just see if we can
75:02 - delete some of this
75:05 - so let me delete something and add it
75:07 - again just to uh
75:09 - make sure this is working
75:11 - so Amy you got two items in your cart
75:14 - you're loving it you are a Shopaholic
75:18 - okay next thing that you're gonna do
75:21 - is you are going to delete the first car
75:25 - product
75:27 - so Amy
75:29 - I mean these
75:31 - you are going to delete cart product one
75:36 - and now let me just go in Django admin
75:38 - and
75:39 - okay so Amy got two items in our cart
75:41 - she's gonna delete cart product one
75:45 - uh no content delete it and now when I
75:47 - refresh this okay beautiful
75:49 - and now she should be able to add that
75:53 - back in again
75:54 - so
75:56 - ooh you know what else we are gonna make
76:00 - yeah we're gonna have to make a unique
76:02 - constraint as well I just realized okay
76:05 - so next what Amy's going to do is she is
76:09 - going to
76:12 - create a car product
76:16 - and for this
76:24 - all right so the wooden spoon
76:27 - was product
76:31 - ID3
76:33 - and the bacon was id1 so let's say Amy
76:37 - wants to add product one to her cart
76:39 - she's going to post car products this
76:44 - and now she should again
76:49 - have a wooden spoon and bacon in her
76:52 - cart even though we didn't figure out
76:55 - this draft logic yet
76:58 - actually let's add another let's add
77:00 - some notes here
77:01 - um
77:12 - so as part of the validation the product
77:14 - that's being added should not be in
77:15 - draft mode
77:17 - and then another note that I want to add
77:21 - is
77:23 - a unique constraint
77:28 - basically saying that if Amy already has
77:30 - bacon inner cart or like a wooden spoon
77:32 - or something she shouldn't be able to
77:34 - add it again
77:35 - because it doesn't make sense it's just
77:37 - to add the same product over and over
77:39 - so now
77:41 - okay there is this air
77:44 - where you see
77:46 - Amy has bacon in her cart twice so need
77:50 - to fix that
77:51 - and then okay
77:56 - so what's this
77:58 - uh add a unique constraint
78:08 - con
78:14 - I can't add the same product to their
78:18 - cart
78:19 - twice
78:23 - or let me say not twice but multiple
78:25 - times
78:30 - you can add a unique constraint to The
78:32 - Meta class yep
78:38 - okay okay
78:40 - and then
78:50 - just use this as the boiler for plate
78:58 - all right
79:01 - unique together
79:03 - buyer and product
79:05 - however I think that this is the
79:08 - preferred
79:16 - okay yep so chat GPT wants that ahead of
79:21 - me unique together is going to be
79:22 - deprecated in the future so I might as
79:24 - well just do this
79:27 - buyer and product need to be unique
79:30 - together which means
79:32 - that yeah they pretty much can't have
79:33 - the same
79:35 - product to their car multiple times
79:38 - and then let me actually go ahead and
79:42 - test this first
79:45 - so first of all cart products let me
79:47 - just delete these
79:51 - and then I need to make migrations again
79:58 - not my guard day
80:00 - make migrate
80:04 - as much over up and running
80:09 - all right so now let me go ahead and see
80:12 - Amy you ain't got anything in your cart
80:15 - right now now you're gonna go ahead and
80:17 - add this juicy bacon looks good
80:21 - and let me just pull the cart down to
80:22 - one item looking good now try to add it
80:25 - again
80:26 - and it says
80:29 - okay so this is good and bad
80:34 - because
80:40 - um
80:42 - I mean it didn't allow it but now I got
80:45 - a 500 error instead
80:54 - and why is that because I I thought that
80:56 - this should validate it
81:04 - so
81:10 - when buyer attempts to add the same
81:13 - product
81:14 - to their
81:16 - cart again
81:18 - they should receive
81:23 - a 400 level
81:35 - okay so basically whenever the
81:38 - basically saying whenever the buyer
81:40 - tries to add the same
81:43 - product to their cart then just give
81:45 - them an error message instead of
81:46 - crashing my server
81:50 - I'll just give it a little update to let
81:52 - chat gbt know where we are
82:00 - huh I thought all that happened
82:01 - automatically interesting okay
82:04 - this can be done within the create
82:05 - method
82:07 - that is interesting I always thought
82:10 - what when there was a unique constraint
82:12 - like this that this kind of got handled
82:16 - or checked for is part of validation but
82:19 - instead of what's happening is it's not
82:21 - being checked for obviously and whenever
82:24 - the whenever Django tries to create it
82:27 - right here
82:29 - that is when
82:32 - it's thrown that 500 error
82:35 - that doesn't sound very efficient but
82:38 - I mean if we did validate it or check
82:41 - for it right here
82:42 - then I think it would just be an extra
82:45 - query because
82:47 - yeah I mean it's already going to check
82:50 - at the database level so maybe it's
82:53 - easier that way
82:58 - it doesn't feel that great but
83:11 - make a glint to clean this up
83:30 - all right so now let me just go ahead
83:32 - and check what's going on with this cart
83:33 - so Amy got bacon in her cart doing a
83:36 - little bit of shopping and now
83:39 - all right she's trying to add it again
83:42 - it says the product is already in your
83:43 - cart
83:47 - let me ask chat you should
83:52 - take place
83:54 - in the crates method
83:57 - or validation method
84:03 - it's more appropriate to handle in the
84:04 - create method because validation method
84:05 - I want to deal with data that's past
84:06 - them and not interact with the database
84:09 - directly
84:17 - also I think if you do
84:20 - it in a validator then you may end up
84:23 - with a race condition because it could
84:25 - validate
84:29 - huh
84:32 - and then in that time
84:35 - yeah
84:37 - yeah okay well this is fun
84:41 - it's fine now what else do I need to do
84:44 - um
84:45 - another thing I want to ensure is that
84:57 - another thing
85:00 - that needs
85:02 - validated when adding cart products
85:06 - is that the product
85:10 - is not in draft
85:13 - should I say the product is not in draft
85:15 - mode or should I say the product
85:19 - must be active
85:22 - that way if we can
85:30 - must be active
85:33 - to be added to the cart
85:41 - okay that way if we add more activation
85:44 - statuses later we just checking aren't
85:48 - checking if it's not draft uh like it
85:51 - explicitly needs to be active to be
85:52 - added
86:06 - okay so Chiropractic serializer
86:11 - uh attributes this this
86:15 - all right
86:31 - all right so
86:41 - and is this going to be a product
86:44 - instance or an ID
86:50 - well let's find out
86:53 - okay so let's delete this
86:58 - all right I'm going to delete your bacon
87:00 - and let me just go ahead and add it
87:02 - again
87:03 - product must be active to be added to
87:05 - the cart
87:07 - and yeah it is a product instance
87:11 - okay so now that is good and let me just
87:15 - go ahead and activate this bacon uh this
87:19 - bacon is now active
87:22 - and now Amy should be able to add it to
87:25 - her cart what am I doing with this
87:29 - all right Amy you're getting that juicy
87:31 - bacon soon enough everything is looking
87:33 - good
87:35 - okay
87:38 - let's do a quick sanity check
87:49 - and I think I want to clean this up just
87:51 - a little
87:54 - bit
88:00 -  off all my attributes at the top
88:03 - and then run my logic after
88:14 - okay now let me let this and push it up
88:20 - so I believe we can do the Aspire crates
88:23 - car products and that includes deleting
88:25 - them as well
88:39 - reactive
88:45 - all the products for the user with that
88:48 - exist so on and so forth
89:02 - all right and then what
89:14 - all right so for the back end this
89:17 - ticket is 39 shop
89:29 - and let's open a PR now just so I can
89:31 - review it even though it's not ready to
89:33 - merge
89:34 - so this ticket is going to close number
89:37 - 39.
89:39 - and let me just do a quick review
89:45 - just make every sure everything is good
89:47 - so far okay
89:48 - so if you're a user you pass in the user
89:52 - field and it checks for whatever object
89:54 - dot that field is equal to the user it
89:58 - could be the buyer owner seller object
90:00 - buyer object owner check seller
90:04 - true
90:06 - registering a shop app including shop
90:09 - urls
90:12 - we have two models the car product and
90:14 - the product
90:17 - shop config migrations looking good
90:20 - migration still looking good and
90:21 - migrations they're looking great all
90:24 - right and
90:27 - car products cleaning up our Imports
90:31 - a foreign key if the users ever deleted
90:34 - then their cart products are deleted
90:36 - created modified unique constraints so
90:38 - they can't add the same product of the
90:40 - car multiple times
90:42 - a beautiful string method so we can look
90:44 - at it in Django admin and activation
90:47 - status is either active or draft draft
90:50 - by default
90:52 - products have a description an image
90:54 - which is required
90:56 - a name a price a core in other words a
91:00 - currency and then the seller
91:04 - string method
91:06 - cart products whenever we're reading it
91:08 - the product the product is also
91:10 - serialized
91:11 - whenever you're writing it these fields
91:14 - are controlled by the system and then
91:16 - for the creation logic we are checking
91:19 - for that Integrity issue for that unique
91:21 - constraint
91:23 - and then for validation we are making
91:27 - sure that the product they're trying to
91:28 - add is active and also they're not
91:31 - trying to add
91:33 - products from different sellers
91:36 - and for the product read serializer
91:38 - for the product we're basically
91:40 - serializing the seller as well so we can
91:42 - display that along with the product
91:45 - you have to make a mental note to uh add
91:47 - a display image to the seller too
91:50 - we'll do that whenever we add a profile
91:52 - to the app but anyways for writing
91:55 - products
91:56 - these are controlled by the system the
91:58 - sellers automatically populated they
92:00 - don't need to pass that in
92:03 - and then
92:05 - these are my endpoints car products
92:08 - endpoint and products endpoint with the
92:10 - related view sets
92:12 - and for the views
92:15 - so for the cart product you need to be
92:17 - the buyer to pretty much control your
92:19 - cart
92:21 - this is the query set default query set
92:25 - and all right I think one last file
92:30 - for the product it's the seller who has
92:32 - control of the product
92:37 - and then for the product it's going to
92:39 - take parser class because we allow
92:41 - images permission classes the seller can
92:43 - do what they want
92:47 - and then for all this is so
92:54 - okay
92:57 - now another thing that I am
93:01 - seeing now
93:03 - is one other issue and that's this
93:08 - all right so for the shop
93:10 - views product
93:14 - how am I going to say this
93:16 - um so basically what I saw is that right
93:19 - now the default query set whenever
93:22 - you're pulling down products I'll show
93:24 - you
93:27 - is pretty much just to pull down
93:29 - um all products
93:32 - and we do need anyone to be able to pull
93:36 - down products so they can actually view
93:38 - them right here however if you are a
93:42 - seller then you should also be able to
93:44 - see basically the Logics this if you are
93:48 - not the seller of a product
93:51 - then you should only
93:54 - be able to view active products
94:01 - all right if you are the
94:04 - uh seller of
94:08 - let me see users should be able
94:15 - to retrieve
94:18 - all active products
94:22 - and
94:24 - along with draft products
94:28 - that they are the seller for
94:34 - users should be able to retrieve all
94:36 - active products along with any draft
94:37 - products that they are the seller for
94:47 - it also I said this uh I made a tweet
94:49 - about this but from what
94:52 - my hypothesis is that AI is getting to a
94:57 - place where we're basically going to be
94:59 - able to type in business requirements in
95:02 - out like outcomes a final product in for
95:05 - that final product whether it's a mobile
95:07 - app or a website or whatever if there's
95:09 - anything you want changed about it you
95:11 - can just input it in human language and
95:13 - then we'll just change it
95:15 - now of course that's going to be a while
95:17 - away but I mean in the
95:20 - near future distant future sometime in
95:23 - the future that's kind of my hypothesis
95:28 - okay
95:37 - now do we need is authenticated because
95:43 - if they are authenticated
95:55 - since we
95:58 - do we need is authenticated since we
96:01 - have this already
96:24 - oh okay in your case since you aren't
96:27 - strictly using this authenticated
96:28 - version can I send your product you said
96:30 - you technically wouldn't need the if
96:33 - check
96:41 - so get I'm gonna
96:44 - cue
96:47 - all right so for getting the query set
96:50 - from models
96:56 - dot product
97:08 - okay
97:09 - so
97:11 - for the query set for this product view
97:13 - set
97:24 - so if you are creating
97:29 - wait return all products for a seller
97:37 - if you're creating obtaining or this
97:45 - I don't think this is right
98:09 - sellers
98:35 - okay this is what I'm looking for all
98:38 - right so
98:41 - whenever you're performing operations
98:50 - all right let me just see what I'm
98:51 - working with here
98:58 - in models Q
99:15 - okay
99:17 - unauthenticated so I don't want this at
99:21 - all
99:25 - okay
99:26 - so
99:42 - okay now we are getting somewhere
99:46 - okay
99:48 - so anytime the user is trying to do
99:50 - anything to their products then the
99:53 - query set of available products should
99:55 - just be any of the ones where they are
99:57 - the seller
99:58 - now if they're not doing any right
100:02 - operations basically if they're only
100:04 - reading from it then user should be able
100:08 - to query any product that's active
100:11 - or any product that's in draft mode that
100:15 - they also are the seller of
100:18 - perfect and I don't think this comment
100:20 - is pretty uh self-explanatory
100:22 - so on that note
100:25 - I think
100:27 - all right let me just test this
100:40 - all right now check it out
100:43 - all right so this is Amy right uh
100:46 - q-u-v-g
100:51 - -evg okay so whenever you're getting
100:54 - products if you're not authorized then
100:56 - you can't view any products you need to
100:58 - be logged in to see the app
101:00 - now
101:02 - for let's see Amy do you got any
101:06 - products
101:07 - now these are both Buc-ee's
101:11 - yeah these are both Bucky's products
101:13 - one is in draft mode and the bacon is
101:16 - the only one that's active so Amy right
101:18 - now should only be able to see the bacon
101:21 - since Bucky spoon is not active
101:25 - and that looks good and now
101:28 - whenever I'm Bucky
101:34 - pass one two three four
101:36 - however whenever Bucky queries this
101:39 - endpoint
101:43 - whoa whoa whoa
101:45 - then Bucky should be able to see both
101:47 - because yes even though this is draft uh
101:49 - he is the seller of it so so good to go
101:53 - beautiful so now actually let me do make
101:56 - test
101:58 - even though we only got two tests
102:00 - and I'll do lint one more time
102:09 - all right so let me go ahead and push
102:11 - this up and I'll say
102:18 - um update get query soon
102:24 - update query product logic
102:35 - all right so
102:38 - the seller can add products buyer can
102:41 - manage and also in addition to just
102:43 - adding products and creating products we
102:44 - pretty much filled out the entire back
102:46 - end for the product and car product
102:48 - management system so that's pretty cool
102:50 - and uh yeah still got two
102:54 - actually we got
102:56 - the address which is going to be pretty
102:59 - easy the order model and then the order
103:01 - products model
103:03 - but uh yeah making good progress but
103:06 - either way
103:07 - um
103:08 - yeah thank you for watching I think I'm
103:10 - gonna end the video right here maybe
103:12 - I'll record a little bit more tonight
103:14 - but
103:16 - um also make sure to if anyone has any
103:18 - ideas on that like um
103:20 - uh cart product becoming uh draft
103:25 - product and again then uh yeah feel free
103:28 - to let me know and uh yeah again thanks
103:30 - for watching and I'll see you next time