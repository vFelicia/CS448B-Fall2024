00:00 - all right hostas welcome back and before
00:02 - we get to this video let's just go ahead
00:04 - and recap what we did so far in our
00:07 - program so right now what our program
00:09 - does is it sits on the network and it
00:12 - just waits for data to come across now
00:14 - whenever it receives any data what it
00:17 - does is it takes it and it starts trying
00:19 - to figure out what it is now up to this
00:22 - point we can figure out the destination
00:24 - what device it's coming from where it's
00:27 - going to the Ethernet protocol and we
00:30 - also found inside our package another
00:33 - package so now what we need to do is we
00:37 - need to say ok well what about this
00:39 - payload that we found inside let's go
00:41 - ahead and start interpreting that so
00:43 - this was all the ethernet frame the
00:46 - Ethernet data basically how data from
00:49 - your computer gets to the router but now
00:51 - we got to unpack that i.p packets this
00:55 - is pretty much the good stuff
00:56 - so we already took care of a lot of the
00:59 - boring stuff that IP packets are what
01:02 - we're going to be unpacking now and I'll
01:03 - give you guys a real quick diagram of
01:05 - this so basically the IP packets and IP
01:09 - headers this is how you connect with
01:12 - another computer on the Internet so not
01:15 - just your router but it's how you
01:16 - connect to you know Facebook server
01:18 - YouTube reddit whatever so basically
01:21 - every computer has an IP address so
01:24 - whenever we want to talk to Facebook we
01:26 - need Facebook's IP address which is
01:28 - already going to be bundled up in here
01:30 - and we need to send it some other
01:32 - information well IP address to send you
01:34 - know the pictures of my ex-girlfriend
01:36 - back to which is mine so we have just
01:40 - the IP version the header on the length
01:43 - the source address destination dress and
01:45 - again these are IP addresses so that's
01:48 - what we're going to be doing in this is
01:50 - oriole unpacking the IP data and IP
01:53 - stands for Internet Protocol basically
01:55 - data that you're going to send across
01:58 - the internet so again that's what this
02:01 - is so let's go ahead and make that right
02:03 - now let me add a comment I'll say uh
02:06 - unpacks
02:09 - ipv4 packet and that's good for now so
02:14 - we're of course going to check to make
02:16 - sure that the Ethernet data that we got
02:18 - whenever we unpacked it we only want to
02:21 - worry about the internet traffic I mean
02:24 - we really aren't worried about anything
02:25 - else like ARP or anything like that
02:27 - right now
02:27 - so whenever I don't know maybe our kids
02:31 - or our friends that are living with us
02:33 - they go to some website we're going to
02:35 - start extracting that in seeing what
02:37 - they're up to
02:38 - so def ipv4 packets and remember we're
02:44 - going to be passing in this little
02:46 - bundle of data eventually all right so
02:51 - let's go ahead and take a look at what
02:52 - we need to extract the first thing that
02:55 - we're going to extract is this which is
02:57 - the version and the header length I'll
02:59 - show you guys how to take this one byte
03:01 - and break it up so you can you know see
03:03 - each one individually now we're also
03:06 - going to be getting the time to live
03:07 - which I don't know isn't that useful but
03:09 - if you're ever analyzing a network um I
03:12 - don't know maybe there's something weird
03:14 - about that
03:15 - we'll get the protocol and of course the
03:18 - source address in the destination
03:19 - address to see pretty much what servers
03:23 - or what websites they are actually
03:26 - connecting to now again all of this data
03:29 - that you're looking at that we're going
03:30 - to extract this is just the header now
03:33 - an IP header basically comes before the
03:37 - IP payload or data and it's pretty much
03:40 - if you think of it like a package that
03:42 - you just send through the mail this
03:44 - would be on the label but the actual
03:46 - data inside is inside the box which is
03:49 - the good stuff so this is pretty much
03:51 - information that proceeds every IP arm
03:55 - payload pretty much just to give
03:57 - information about it so let's just go
04:00 - ahead and do version header length all
04:08 - right so the first thing we're going to
04:10 - do is we're just going to get
04:11 - information about the version
04:13 - and the header length so remember that's
04:15 - the very first flight so if you rate
04:18 - data
04:18 - zero that's going to give us that but
04:21 - now what we actually need to do is this
04:24 - combined it isn't really useful because
04:27 - this is actually broken up into version
04:29 - and header length now if you guys are
04:32 - wondering how we can extract the version
04:34 - out of here if you remember from my
04:35 - bitwise operator tutorials in Python 3
04:38 - we can actually take this in bit shift
04:41 - it to the right by 4 bits now what
04:44 - that's going to do is it's pretty much
04:45 - going to ship this out and we're going
04:48 - to be left with only the version so 0 0
04:50 - 0 0 and then the version and if you guys
04:52 - don't have any idea what I'm talking
04:54 - about
04:54 - go watch my bitwise operator tutorials
04:57 - and I'll show you guys how to use
04:58 - bitwise operations it's actually not
05:00 - that hard it just sounds weird
05:02 - so version header length what we're
05:05 - going to do is we're going to take that
05:06 - entire byte and bit shift it by 4 to the
05:10 - right now that's only going to leave us
05:12 - with a version number so that's taken
05:14 - care of now to get the header length
05:19 - what we can do is a little something
05:22 - that's kind of tricky we can actually
05:24 - take the version header length and we
05:28 - can end it by 15 and again in that same
05:33 - tutorial I talked to you guys about how
05:34 - to and and what the bitwise and operator
05:38 - means basically you're going to compare
05:40 - two bytes and you're going to get the
05:43 - result when both of those bytes are 1 so
05:46 - if you multiply that by 4 this is going
05:49 - to give you the header length now if you
05:50 - guys are like why do I even need the
05:52 - header length why are we doing this
05:54 - you need the header length in other
05:57 - words the length of this entire data set
05:59 - because the length of the header is used
06:02 - to determine where the data starts
06:04 - because right after the header ends
06:07 - that's when your actual data begins
06:09 - there butted up right up against each
06:11 - other so you pretty much read all the
06:13 - information from the header and then say
06:15 - after that oh that must be the data so
06:18 - that's why we need all this crap right
06:20 - here so now what we can do is we can
06:23 - actually start unpacking everything so
06:25 - we're going to get the
06:26 - time to live the IP protocol the source
06:31 - the target and we'll just set this equal
06:34 - to strut unpack now this is kind of
06:39 - weird how this is packed together so
06:40 - kind of pay attention here all right
06:44 - that that was embarrassing okay so the
06:49 - exclamation mark that's just for saying
06:51 - that we want to make sure you know the
06:53 - byte order is correct now if you go 8x
06:56 - and then B B 2 X then 4 s 4 s so this is
07:04 - the format that our data is going to be
07:07 - unpacked into and now we need to say
07:10 - well where's the data well the data is
07:14 - from the very beginning to 20 bytes so
07:20 - it's 20 bytes long and we can see that
07:21 - in this little diagram all of your
07:24 - header information is 20 bytes long so
07:28 - we're going to be giving it a chunk of
07:30 - binary and se-ra
07:32 - extract it into these variables pretty
07:37 - cool way now the last thing that I'm
07:40 - going to want to do is this I'm going to
07:42 - run a return a bunch of the information
07:45 - that we just got and also the actual
07:48 - data the payload that's inside it how do
07:50 - we do that well let's just start
07:52 - returning crap what did we figure out
07:54 - you figured out the version already we
07:57 - also figured out the header length the
08:00 - time to live and I can just copy this
08:04 - we're also going to be returning the
08:06 - time to live the protocol and you know
08:09 - help before what we did is we formatted
08:11 - that MAC address properly we actually
08:13 - need to do the same thing with the IP
08:15 - address so later on we're going to be
08:17 - making function called I'll just name
08:19 - like ipv4 and then we'll pass the source
08:24 - and target in there so again we already
08:27 - extracted the IP address but now we just
08:29 - want to format it properly the same
08:32 - thing with the target
08:36 - boom roasted right in there and the last
08:40 - piece of the puzzle that I want to
08:42 - return is just the payload so how do we
08:46 - know where the actual data is not the
08:49 - header we already took care of that with
08:51 - actual data well remember it begins it
08:54 - which signifies the end of your header
08:56 - so that's where you want to begin and it
08:59 - just goes to the end so just right
09:01 - header length is the beginning and this
09:04 - will go to the end which would just give
09:07 - you all the rest of it
09:08 - so remember an IP packet the entire
09:11 - packet is broken up into a header which
09:15 - is all this information and the actual
09:18 - data so that's what we're going to be
09:20 - doing and whenever we unpack this we
09:23 - just pass it in it extracts all the coil
09:26 - information and now we are ready to move
09:29 - on to the next video and what we can
09:31 - actually do now is work on that
09:33 - formatting function so let me just add a
09:36 - comment and say returns roughly
09:39 - formatted ipv4 ipv4 address now I'm sure
09:50 - you guys know how an IP address is
09:52 - formatted it's basically like one two
09:54 - three four five six that whatever it out
09:56 - whatever I mean you can't have four or
09:57 - five six but it's pretty much three
10:00 - numbers with a dot separator so what we
10:04 - can do is just call it define this and
10:10 - we're going to pass it in the address
10:12 - remember this address is the unformatted
10:15 - address and now we're just going to do
10:18 - is return join and then we just map
10:29 - ddr art so we're basically taking all
10:32 - the chunks and we're going to map them
10:34 - to a string or convert them to a string
10:36 - now once they're in proper string format
10:39 - we can just join them with a dot in the
10:41 - middle so you get something like
10:43 - 127.0.0.1 so these will be strings join
10:49 - together with periods boom roasted there
10:53 - you go so that is how you unpack an ipv4
10:56 - packet and how you properly format an
10:59 - ipv4 address and we are now ready to
11:02 - move on