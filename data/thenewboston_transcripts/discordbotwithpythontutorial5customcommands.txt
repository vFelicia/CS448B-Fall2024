00:00 - alrighty guys welcome back to another
00:02 - discord tutorial and in this one i am
00:05 - going to be showing you how to write
00:06 - custom commands
00:08 - now by a command what i mean is in
00:12 - discord what you can do is you can have
00:13 - a special character
00:15 - and there are some default ones if you
00:17 - use the forward slash you can see the
00:19 - discord built-in commands
00:21 - now you can essentially on top of these
00:24 - built-in discord commands you can pretty
00:26 - much make your own custom discord bot to
00:29 - listen to custom commands
00:31 - now some popular ones that people use
00:34 - are the exclamation mark and for example
00:37 - you can have a command called
00:38 - exclamation info to show info about your
00:41 - server or the bot itself
00:43 - another one that i'll just show you real
00:45 - quick before you get into it is on the
00:47 - new boston discord server if you use the
00:50 - greater than symbol and there are a
00:53 - couple different commands that you can
00:54 - use but anyways this is our custom one
00:57 - where you can do something like status
00:59 - and this tnb bot is hooked up to the new
01:02 - boston blockchain
01:04 - so it can display some information about
01:06 - for example your blockchain address uh
01:08 - your balance
01:09 - um some other things as well but anyways
01:11 - what i'm trying to say is in order to
01:14 - create custom commands all you do is you
01:16 - pick a special character whether it can
01:19 - be really anything that you want and
01:21 - this just signifies to your bot of hey
01:24 - this bit of text is going to be a
01:25 - command and then you can write your
01:27 - custom command and your command can
01:29 - basically do anything that you want
01:31 - so all right
01:33 - sounds fantastic let's go ahead and get
01:35 - started
01:36 - so unlike before whenever we were
01:38 - working with the discord client what we
01:40 - are going to be using is a command
01:44 - object so that is from
01:46 - discord.ext
01:49 - we are going to import commands
01:52 - and then we can name this object
01:53 - anything that we want but we will call
01:55 - it bot and this is equal to
01:58 - commands
01:59 - and
02:00 - the class is called bot
02:03 - and
02:03 - the first thing we need to do whenever
02:05 - we initialize this object is we need to
02:08 - pass in a command prefix now what this
02:11 - is is the special symbol we're going to
02:13 - use to denote a command now again like i
02:16 - said this can be anything that you want
02:18 - a lot of people use exclamation marks
02:21 - greater than signs forward is the one
02:23 - that discord uses by default so in this
02:26 - tutorial what we're going to be using is
02:27 - the exclamation mark
02:30 - so
02:30 - we are going to be writing commands like
02:32 - exclamation info or exclamation punch
02:35 - you know whatever we want to name it now
02:38 - unlike before at the end of these where
02:40 - you had client.run
02:43 - it's pretty much the same thing except
02:45 - we are going to do bot.run and this
02:48 - takes the token as well and i actually
02:50 - have a new token let me copy that and
02:53 - paste that in
02:54 - all right so this is the basic structure
02:57 - now let me go ahead and start by writing
02:59 - a simple command and then i'll talk
03:00 - through exactly what it's doing
03:02 - so
03:03 - we can actually name these commands
03:05 - anything that we want
03:07 - so i'm going to make a command called
03:09 - info that's going to be called whenever
03:11 - the user types in exclamation mark info
03:13 - and in order to do this you just write
03:15 - async def same as before we're just
03:18 - making a function
03:19 - and then the name of the function is
03:22 - going to be the name of the command
03:25 - so
03:26 - we're going to just be calling this info
03:29 - and we are going to be passing in
03:31 - something called ctx
03:33 - so first of all let me leave a comment
03:35 - right here
03:37 - to show a sample of how to invoke the
03:39 - command and that is just by typing
03:41 - exclamation info that's what's going to
03:43 - trigger this bit of code right here
03:45 - but another thing that i want to talk
03:46 - about real quick before i move on is
03:49 - this ctx object that got passed in
03:52 - this ctx and i'll leave a comment since
03:54 - i'm going to be sharing the source code
03:55 - on github this is the context object and
04:00 - what this basically means
04:02 - is this object is going to contain
04:04 - information
04:05 - about how the command was executed
04:12 - all right so what the heck does that
04:15 - mean that's kind of generic well yeah it
04:18 - kind of is actually so
04:20 - in order to test that this bot is
04:21 - actually working first of all and to
04:24 - learn more about this context object
04:26 - let's go ahead and say whenever the user
04:28 - types exclamation info that we're just
04:30 - going to print out some properties about
04:32 - this context object
04:33 - so we'll say context
04:35 - dot send because the send function is
04:38 - actually a property on here that we can
04:40 - actually send messages out to the
04:42 - channel and that is the same channel
04:44 - where the command was invoked from
04:46 - so we can actually send any string right
04:48 - here but what we are going to do just so
04:51 - we can learn a little bit more about
04:52 - this context object is say we're going
04:54 - to send out context.guild
04:57 - which of course is the server
05:00 - and just some other things right here we
05:02 - can say context.author
05:04 - which is going to be the person or the
05:06 - user who triggered the command
05:08 - and then we'll also say
05:10 - context.message.id
05:12 - so again all i'm doing right here is
05:14 - saying whenever the user types
05:15 - exclamation info we're going to print
05:17 - out a bunch of stuff about this context
05:19 - object and this is just to give you guys
05:20 - a better idea of what this context
05:22 - object is now before i just go ahead and
05:25 - run this there is one other thing that
05:27 - we need to do
05:28 - and that is to use a decorator to wrap
05:31 - this function
05:32 - so the the decorator for this is bot
05:36 - dot
05:37 - command
05:38 - and that is singular not plural
05:41 - and all right so what this decorator is
05:44 - basically going to do is it's going to
05:46 - look at the function name
05:48 - in this case it is info and then it's
05:50 - going to listen for this symbol
05:53 - followed by this function name and it
05:55 - knows whenever it receives a message
05:57 - with that to trigger this function
06:00 - so let me go ahead and run this
06:06 - when this is actually don't have an on
06:08 - ready but
06:09 - i think we waited long enough
06:11 - so either way i'm just going to do
06:13 - exclamation explanation exclamation yeah
06:16 - i think that's it info and there you go
06:19 - so this
06:20 - again triggered the
06:22 - info function
06:24 - which printed out the guild author and
06:27 - message id
06:28 - and again the guild is tnb tutorials
06:31 - remember guild is basically just discord
06:32 - server the author of course that's me
06:35 - who wrote it in the message id is this
06:38 - long string of numbers
06:40 - all right fantastic so we learned the
06:42 - basics probably stop that now
06:46 - of how we can make simple bot commands
06:48 - so what else can we do with the spot
06:50 - well let me copy this because this is
06:52 - the basic structure of how to make a
06:54 - command
06:55 - and let me go ahead and make another
06:57 - command um let's pretend for this
06:59 - tutorial that we are going to make a
07:02 - some kind of game and in this game we
07:04 - can like fight people or something i
07:06 - don't know just kind of making this up
07:07 - on the fly but we'll say we're going to
07:09 - have a punch command and what i like to
07:11 - do in these commands is i always
07:14 - like to include just a sample of um
07:17 - kind of how to invoke it
07:19 - so we can say in addition to just making
07:21 - commands that you just call straight up
07:23 - and no other information these commands
07:25 - can also take in arguments
07:28 - so for example you can have punch but
07:30 - unlike this right here where you just
07:32 - typed info and that's it
07:34 - you can include additional information
07:37 - such as let's say we want to say
07:39 - whenever you run this punch command you
07:41 - can include someone's name
07:43 - and then it will print out uh you
07:45 - punched justin or something like that
07:48 - so again remember in order to send
07:50 - messages from this context object you
07:53 - can just do await context dot send and
07:56 - then here you can print out whatever you
07:58 - want to display
08:00 - in the uh discord server
08:02 - so we can use f strings to say whenever
08:04 - someone invokes the punch command we are
08:07 - going to take this bit of information
08:09 - after it and this bit of information
08:11 - everything that comes after it this is
08:14 - going to be passed in as another
08:16 - argument called a r g
08:19 - so this arg is basically what came after
08:22 - this punch command in this case arg is
08:25 - equal to the string justin
08:28 - so in the string that we want to print
08:30 - out we can say
08:31 - punched
08:33 - oh
08:34 - not just
08:35 - punch arg
08:37 - all right simple enough let me clean
08:39 - this up and let me go ahead and run it
08:41 - so
08:42 - we can actually well we don't need to
08:44 - copy that so let's go ahead and run this
08:47 - and once it's running we can say okay
08:51 - punch
08:52 - justin okay punch justin and just to
08:55 - make sure that this is working with any
08:57 - argument we can say punch uh betty
09:01 - all right punch betty so there you go
09:04 - that is how you can have a command
09:06 - that takes an argument as well
09:09 - now just to show you guys a couple other
09:12 - cool things
09:13 - and that is how to take multiple
09:15 - arguments let's say that we want to have
09:18 - a special command that um
09:21 - let's say double punch
09:23 - okay so the first thing i always like to
09:25 - do is leave uh um an example of how to
09:28 - invoke it so we say what double punch is
09:31 - gonna do is instead of taking in one
09:33 - person's name we are going to be able to
09:36 - take in two names because this is a
09:38 - special thing where you can actually use
09:40 - both your fists to punch two people at
09:42 - once it's pretty awesome i mean not the
09:44 - brag but yeah
09:46 - so okay how do we do this well whenever
09:49 - we want to take in multiple commands
09:51 - then what we can do is just separate
09:53 - those into either r1 r2 this is just
09:56 - standard naming convention
09:58 - but it doesn't really matter the name
10:00 - you can just pass it in as a comma comma
10:03 - separated list of arguments and let's
10:06 - say in this example instead of just
10:09 - being able to punch one person you could
10:11 - punch justin and
10:13 - hassu for example
10:16 - now in this uh string that we want to
10:19 - pass out we can say
10:21 - double
10:22 - punched
10:23 - and instead of arg we're going to have
10:25 - to say you double punch arg 1
10:29 - and
10:30 - arg2
10:32 - so again uh this is just uh saying that
10:35 - whenever you want to have a custom
10:36 - command that takes multiple arguments
10:38 - you can just pass them in right like
10:40 - this and then just like before whenever
10:42 - you use your argument somehow you can
10:45 - just either print it out in a string or
10:46 - do whatever you want to it
10:48 - but let me go ahead and rerun this
10:50 - because this now includes the old double
10:53 - punch command
10:55 - so let me run that and
10:58 - pop open my bot and say
11:01 - double
11:02 - underscore
11:03 - punch justin
11:05 - and jesus
11:06 - and the bot says you double punch justin
11:09 - and jesus and again just to make sure
11:11 - this is working with
11:13 - some other people say
11:15 - double
11:17 - punch
11:18 - uh
11:19 - betty and schmedy
11:22 - hate these two people double punch betty
11:24 - and schmetty there you go
11:26 - yeah they deserve it oh betty and
11:28 - schmidty okay
11:30 - now the last thing i want to mention in
11:32 - this tutorial is what happens when you
11:34 - have a command and it doesn't just take
11:36 - in one argument or two arguments but
11:39 - let's say that there's an unknown amount
11:41 - of arguments that take in maybe one
11:44 - maybe two maybe 50.
11:46 - so in our game what can we have that
11:48 - does this
11:50 - let's say there's a
11:51 - there's an attack called roundhouse kick
11:54 - and
11:55 - whenever you roundhouse kick people you
11:57 - can either roundhouse kick one person or
11:58 - two people or you can either roundhouse
12:01 - kick like five people at a time and one
12:02 - kick it's pretty awesome so let me just
12:05 - go ahead and copy this
12:08 - method right here
12:09 - the punch method or excuse me a function
12:12 - and then we can rename this to
12:16 - roundhouse
12:17 - kick
12:18 - all right so first of all the example is
12:20 - not just going to be a punch it's going
12:22 - to be roundhouse kick and instead of
12:24 - taking one argument what this does what
12:27 - we are going to do is take star
12:30 - args so this is going to pass in all of
12:33 - the arguments that we have after
12:35 - roundhouse kick as a list and that list
12:38 - is just going to be referred to as args
12:41 - so for an example i can roundhouse kick
12:43 - justin
12:44 - and
12:45 - sue and
12:47 - magnetic and
12:49 - christy and this really doesn't matter
12:51 - how long it is but you know just for the
12:53 - sake of documentation don't want to have
12:54 - it be too long
12:56 - so remember
12:57 - whenever we
12:59 - print this out we're going to be taking
13:02 - in a list now we need to convert this
13:04 - list and again this is these are
13:07 - individual list items we need to convert
13:09 - this to a string
13:11 - so how do we do this well let's just say
13:13 - that we want to turn this into a string
13:15 - separated by commas
13:17 - so we can have a variable called
13:20 - everyone and we can say that
13:23 - um
13:24 - this is pretty much how you convert a
13:25 - list to a string we are going to join
13:29 - the iterable args
13:31 - so again all this does is it takes a
13:34 - list
13:35 - of items and it converts it to a string
13:37 - separated with a comma
13:40 - so now every one is a string and then in
13:43 - our
13:45 - f string what we can do is we can say
13:48 - roundhouse
13:49 - kicked
13:50 - everyone
13:51 - all right
13:52 - fantastic let me just clean this up and
13:55 - i'll copy this to make sure that um
13:58 - i typed the right thing and let me just
14:00 - go ahead and run this actually i can
14:03 - just copy this entire thing i actually
14:05 - like to copy this because then you make
14:08 - sure that your documentation
14:10 - example is working correctly so either
14:12 - way let me go ahead and run this
14:14 - and once that is ready i'll paste that
14:17 - in and we are going to roundhouse kick
14:19 - justin hussoo magnetic and christy
14:22 - let me run that
14:24 - it's just funny watching it
14:26 - output that roundhouse kick justin hasou
14:29 - magnetic and christie and just to test
14:33 - let's say we want to test it with three
14:34 - other people uh
14:36 - betty
14:37 - uh we'll say joby and hannah
14:40 - all right roundhouse kick betty joby and
14:42 - hannah and i don't know about you guys
14:44 - but i'm really destroying these people i
14:47 - mean i'm really awesome at this game
14:49 - uh pretty much crushing everyone i go up
14:51 - against pretty much because i have no
14:53 - competitors but either way
14:56 - enough of me bragging about how awesome
14:58 - i am at this game that is the basics of
15:00 - how you create a discord bot
15:02 - that accepts custom commands and before
15:05 - i go i do want to mention something that
15:08 - really isn't a discord related but
15:10 - whenever you are choosing a command
15:12 - prefix remember that people are also
15:14 - going to be running these commands on
15:16 - their phone
15:17 - now some of these symbols are kind of
15:19 - hard to get to so if you do something
15:22 - like tilde greater than or equal to
15:25 - it may be a little bit annoying to get
15:27 - to if you have to click through a bunch
15:29 - of symbols so i would try to stick with
15:31 - the more uh common symbols but either
15:33 - way
15:34 - that is kind of uh just a ux type of
15:36 - thing so for now thank you guys for
15:38 - watching don't forget to subscribe and
15:39 - i'll see you guys later