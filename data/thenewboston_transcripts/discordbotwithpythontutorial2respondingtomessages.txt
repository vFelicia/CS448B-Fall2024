00:00 - all righty guys welcome back and now
00:02 - that we have our bot set up through our
00:04 - discord developer portal we are ready to
00:07 - start setting up our project in python
00:10 - so for this tutorial series i'm going to
00:12 - be using pycharm but you guys can use
00:15 - any ide that you want it's all the same
00:18 - now for me for starting a new project
00:21 - i'm just gonna go ahead and hit new
00:23 - project
00:24 - pure python and i store my projects
00:28 - so you guys can see on my desktop in a
00:31 - folder called projects
00:33 - so i'm going to open that and i would
00:35 - just name this uh
00:37 - discord
00:39 - bot tutorials
00:42 - and what i'm also going to be doing is
00:43 - sharing this source code on github
00:46 - so let me just go ahead and create this
00:49 - and i'll show you guys the uh github
00:51 - link later on whenever i push it up
00:53 - all right so whenever it set it up it
00:56 - just gave me this main dot py and all
00:58 - this does is it prints out
01:00 - something in the console hi pycharm so
01:02 - let me just go ahead and wipe out all of
01:04 - this and i'm actually going to delete
01:06 - this main.py file and what i'm going to
01:09 - do is just add a couple quick
01:12 - housekeeping files
01:14 - the first one being a get ignore and
01:16 - this is just ignoring all of my ide
01:19 - files my you know testing files virtual
01:21 - environment so on and so forth
01:24 - and again like i said this is all going
01:25 - to be push up to github if you guys want
01:27 - to copy it
01:29 - another thing that i'm going to be doing
01:31 - is adding a read me
01:33 - and for this i'll just say
01:36 - project
01:38 - setup
01:39 - and i'll say something like uh follow
01:47 - follow the steps below to set up the
01:49 - project
01:55 - on your environment
01:57 - and then i'll just say
01:59 - local development
02:02 - since this was the first thing that
02:04 - we're going to need and i'll say crate
02:07 - uh
02:13 - with python wow cannot type today 3.7 or
02:16 - higher
02:18 - i'm using 3.8 but i believe you can use
02:20 - any python three-point whatever
02:23 - and then what we're going to be doing
02:25 - one other housekeeping file for this is
02:27 - just have a requirements file right now
02:29 - the only requirement we're going to have
02:31 - or dependency is just the discord python
02:34 - library
02:35 - but just in case we add any i just want
02:37 - to have everything kept in one file so
02:40 - install
02:41 - required
02:43 - packages
02:45 - and the command for that is it's not an
02:47 - angular command
02:48 - we are going to be running pip3 install
02:54 - requirements.txt
02:56 - so what this command is going to do is
02:58 - just install all the requirements in
02:59 - this requirements.txt file
03:02 - so now let's go ahead and create that
03:03 - file
03:05 - and just to make sure we're pulling the
03:07 - right version we can say
03:11 - pi pi discord all right so discord
03:14 - pi
03:15 - 1.7.3
03:19 - so we'll say discord.py 1.7.3
03:23 - so again
03:24 - what we can do is just run this command
03:27 - pip 3 install from requirements file
03:30 - and this is just going to install
03:32 - discord.py in any of the
03:34 - dependencies that come along with it
03:37 - clear and there you go
03:39 - so again if what you want to do is just
03:41 - pull down the github repo and go from
03:44 - that then you don't have to kind of uh
03:45 - type all of that but either way this is
03:48 - just uh typical housekeeping stuff so
03:51 - now let's get into the fun part so what
03:53 - i'm going to be doing in these examples
03:55 - is basically trying to create a single
03:58 - python file per tutorial
04:01 - so for this first one i'll just name it
04:03 - zero one on message since we're gonna be
04:05 - learning about a specific event called
04:08 - on message
04:10 - and all right now the first thing that
04:12 - we're to do in this file is just import
04:15 - the discord
04:17 - package that we just installed
04:19 - and the pattern that we're going to be
04:21 - following for these first couple of
04:23 - tutorials is we first need to create
04:25 - something called a client object now
04:28 - this client you can just set it equal to
04:31 - discord.client
04:33 - and what this client is is basically a
04:36 - connection to discord in other words
04:39 - we're going to be using this client
04:41 - object to interact with the discord
04:43 - websocket and the discord api
04:46 - so you can just initialize that
04:49 - just like this
04:50 - and all right
04:52 - now another thing that i want to mention
04:54 - real quick before we get our hands dirty
04:56 - is just touching quickly on the concept
04:58 - of events
05:00 - now in discord let me bump this up a
05:02 - little bit so you guys can see
05:04 - so
05:04 - in discord anything that happens and i
05:08 - say that as a generic term but i do that
05:10 - on purpose is that
05:12 - whenever something happens like someone
05:14 - sends a message or someone adds a thumbs
05:17 - up and that's called a reaction
05:19 - these are just events
05:22 - now in our bot application what we can
05:24 - do is we can actually listen for certain
05:27 - events so we can say whenever someone
05:30 - sends a message we want to inspect that
05:32 - message and respond accordingly or
05:34 - whenever someone has a thumbs up or
05:36 - thumbs down we want our bot to do
05:38 - something because of that so the first
05:40 - event that we're going to be listening
05:42 - for is just something called an on ready
05:44 - event
05:45 - now i'll go ahead and write this to show
05:47 - you guys the structure of these events
05:49 - in the listeners and then i'll talk
05:51 - about what this unready event is
05:53 - so we are going to be listening through
05:56 - something called a decorator so if you
05:58 - do client.event
06:00 - we are going to decorate the function
06:02 - that we want to listen for so it's going
06:04 - to be async function
06:07 - and it's just called on
06:09 - ready
06:11 - so again this is a function that is part
06:13 - of the discord package and this is just
06:16 - going to be triggered whenever our bot
06:18 - comes online so this is useful so
06:21 - whenever your bot is
06:23 - coming online it's logged in
06:25 - successfully and it's ready to listen to
06:27 - other events it's pretty much one of the
06:29 - first events that gets called so what we
06:32 - want to do in this case is we're just
06:33 - going to print out something like
06:36 - bot is now online and ready
06:41 - to roll
06:44 - so right now we have logic that says
06:46 - import the discord package create a
06:48 - connection so we can actually interact
06:50 - with the discord api
06:51 - and whenever our bot is coming online
06:54 - then just print something out in our
06:56 - terminal
06:57 - now the last piece of the puzzle that we
06:58 - actually need is to run this client now
07:02 - not clint that would be a cool name for
07:04 - a but client all right
07:07 - now in order to run this we actually
07:09 - need to pass in one last piece of
07:11 - information and that is our token
07:13 - authorizing our bot to pretty much run
07:16 - and we get this from the discord
07:19 - development portal
07:20 - so if you go back to your discord
07:22 - development portal and you go to the bot
07:25 - section right here you can copy this
07:28 - token
07:29 - and once you have that copied go ahead
07:31 - and paste it in here
07:33 - now another thing that i want to mention
07:34 - of course is that you don't typically
07:37 - want to run this with just a hard-coded
07:39 - token
07:40 - you ideally want to strip this out to an
07:43 - environment variable
07:44 - but just to make everything crystal
07:46 - clear for everyone watching this
07:47 - tutorial i want to show you guys the
07:49 - hard-coded token in here and by the way
07:52 - by the time i publish this tutorial i'm
07:54 - going to
07:55 - replace this token so you know for those
07:57 - of you trying to
07:59 - run commands off of my bot this token
08:01 - isn't going to work for you you do need
08:03 - to have your own token
08:05 - so i am about to run this however i want
08:08 - to show you guys something cool
08:10 - and that is this
08:12 - so i'm gonna go ahead and pop open
08:14 - discord again and notice again that my
08:16 - bot now is offline
08:18 - so i'm gonna go ahead and just run this
08:22 - and watch what happens whenever
08:24 - i do run this application
08:26 - so i'm going to go ahead and right click
08:28 - and run
08:29 - and you can see that my bot did pop from
08:32 - offline to online and then back in
08:35 - pycharm you can see it did print out bot
08:38 - is now online and ready to roll
08:40 - so again all we did is we ran our
08:43 - discord bot
08:44 - and then an event got triggered that we
08:46 - were listening for to say whenever this
08:49 - bot goes online and is ready to roll
08:52 - then pretty much uh hook into this
08:54 - function right here and the logic that
08:56 - we ran is just to print out bot is now
08:58 - online and ready to roll and there you
09:00 - go so now that we understand the basic
09:02 - structure of creating a client object
09:05 - and listening for events what we can do
09:08 - now is listen for a more interesting or
09:10 - useful event i would say
09:12 - so
09:13 - what we are going to do is listen for
09:15 - the on message event and this event is
09:18 - going to get triggered whenever a
09:20 - message gets sent by any user
09:22 - so for example if a user types in hey or
09:25 - yo or basically any message that they
09:27 - send we want to be able to listen to
09:29 - that and maybe we'll have our bot
09:31 - respond with something so we can say
09:33 - that whenever they say
09:35 - hello
09:36 - then the bot says welcome to the new
09:38 - boston something simple like that
09:41 - so just because i am super lazy what i'm
09:43 - going to do is just copy this
09:46 - and
09:47 - all right so we want to register another
09:50 - event listener however instead of the on
09:53 - ready event we want to listen to the on
09:55 - message event
09:57 - now another thing that i want to mention
09:59 - is unlike the honor ready event the on
10:02 - message event also passes in the message
10:05 - itself now this message is an object
10:08 - that not only stores the content of the
10:10 - message like the word hello or yo or
10:12 - whatever user typed but it also stores
10:15 - information like the author um the
10:18 - channel
10:19 - that it was sent from and some other
10:20 - stuff that we're going to see later on
10:23 - but the first thing that i actually want
10:25 - to do before we get into any of the fun
10:27 - stuff is we just want to make sure that
10:30 - the bot since remember we are going to
10:33 - be listening for user messages and then
10:35 - our bot is going to be responding to
10:36 - them so we do want to add a check real
10:40 - quick to say whenever we get a message
10:42 - that the bot sends we don't want to
10:44 - respond to that with the bot or else
10:46 - it's just going to be the bot responding
10:48 - to its own messages and then we're going
10:49 - to get an endless loop
10:51 - so the check to do that is
10:53 - if message.author
10:56 - in other words if the person who sent
10:58 - the message is equal to the client.user
11:02 - in other words if the person who sent
11:04 - the message is equal to the ba then we
11:06 - just want to return to break out of this
11:08 - function so we don't get that endless
11:10 - loop
11:11 - but now that we have that set what we
11:14 - can do is first just
11:16 - you know what before we even inspect the
11:18 - message from the user we'll just see how
11:20 - to send a message from the bob
11:23 - so since this is async function we are
11:26 - gonna await
11:27 - [Music]
11:28 - message.channel and again remember
11:32 - this bot can be running on multiple
11:34 - different channels so right now we only
11:36 - have one text channel but we can have
11:38 - another one we want to make sure that
11:40 - the bot is responding in the same
11:42 - channel that the message is coming from
11:45 - so what we can do is say in
11:47 - message.channel what we want our bot to
11:50 - do
11:51 - is send a message and we just want to
11:53 - say that that message is just like uh yo
11:56 - we'll just say something unique for now
11:58 - so now let me go ahead and restart this
12:01 - and check it out
12:03 - pop open discord and whenever i type in
12:05 - apples
12:06 - the bot says yo whenever i type in bacon
12:09 - the bot says yo
12:11 - so again all that's happening right here
12:14 - is the bot is listening for any message
12:17 - and as long as it didn't come from the
12:19 - bot itself it's just gonna send back yo
12:22 - okay simple enough now let's add
12:24 - something a little bit more useful
12:27 - and we can say that if the message dot
12:31 - content
12:33 - in the message.content is going to be
12:36 - equal to this string of text right here
12:38 - which in this case it was apples in this
12:40 - case it was bacon
12:42 - so we can say that whenever users were
12:44 - coming onto our server everyone was
12:47 - saying hello for the very first time
12:50 - now in this case what we want to do
12:53 - is we can just copy this and
12:56 - paste up there so we can say that
12:58 - whenever user comes on and they
13:00 - type in hello then we want our bot to
13:03 - say welcome to the new boston
13:08 - all right
13:09 - so let me go ahead and rerun this
13:13 - and check it out
13:15 - so whenever a user comes in and says
13:18 - hello our bot is going to respond
13:20 - welcome to the new boston
13:22 - now just to make sure that this works if
13:24 - they ever say something like corn
13:27 - it does nothing whenever they say
13:28 - something like dog it does nothing only
13:31 - when the message content is hello is our
13:33 - back and respond welcome to the new
13:36 - boston
13:37 - so there you go that is the very basics
13:40 - of of course the discord client
13:43 - the event system where we can use this
13:46 - decorator to register or in other words
13:48 - listen for specific events that happen
13:51 - and whenever those events do happen we
13:54 - can have our bot respond however we want
13:56 - now in the next tutorial we are going to
13:58 - be learning a whole bunch of other fun
14:00 - stuff so for now thank you guys for
14:02 - watching don't forget to subscribe and i
14:04 - will see you guys later