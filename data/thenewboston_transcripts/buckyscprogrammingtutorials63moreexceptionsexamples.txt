00:00 - what's up guys welcome to your 63rd C++
00:02 - tutorial and in this tutorial I'm going
00:04 - to be showing you guys another example
00:06 - of exception handling so let me go ahead
00:09 - and I want to cover you know one other
00:11 - little Inky dinky thing it isn't a main
00:15 - concept but if I don't cover this I'm
00:17 - going to you know it's like OCD I need
00:19 - to cover it or else it's going to bug me
00:21 - for the rest of my life so let me go
00:23 - ahead and first what I like to do is
00:25 - this whenever I'm working with exception
00:27 - handling I like to set up the framework
00:29 - first so I like to go ahead and put try
00:32 - right there and after this put catch
00:34 - with my parameters right like that and
00:37 - that way whenever we get you know typing
00:39 - a bunch of code in here I don't have to
00:41 - go search and be like all right what's
00:43 - this curly brace go to what do these
00:44 - parentheses go to it's really easy if
00:47 - you set up the outside first and work
00:49 - your way in then that way you don't get
00:50 - confused so let's go ahead and in this
00:54 - program I just want to build a really
00:55 - simple calculator I'm going to have the
00:57 - user input two numbers and and I'm going
01:00 - to make sure that the bottom number is
01:02 - not zero because remember you're not
01:04 - allowed to divide by zero or else the
01:07 - you know your computer is going to blow
01:08 - up so what I like to do first is uh well
01:13 - before I even do that let's go ahead and
01:15 - just start with the program so let's go
01:16 - ahead and make two variables in Num one
01:19 - and I'll save in Num two for later so
01:21 - let's go ahead and give the user prompt
01:24 - like C
01:25 - outs and we'll just say something like
01:28 - enter first number
01:32 - in
01:33 - line and now let's go ahead and give
01:36 - them a way to enter that number into num
01:38 - one and by the way I read this a couple
01:40 - days ago and maybe this will help you
01:42 - guys um understand this arrow and this
01:45 - Arrow the arrow shows the direction that
01:50 - information is Flowing now whenever you
01:53 - output something it goes to your
01:54 - computer screen so this text is going to
01:58 - your computer screen now whenever you
02:00 - input something it gets inputed and
02:03 - stored as a variable on your computer so
02:07 - the text that you enter is going to be
02:09 - stored in a variable in your computer
02:11 - you see where the information's fing to
02:14 - your computer screen to your computer
02:17 - basically the information is Flowing to
02:19 - the user and back into the computer
02:22 - pretty cool huh so I probably should
02:24 - have said that in like my second
02:26 - tutorial but you know 63 tutorials and I
02:29 - guess is better late than never so now
02:32 - the user entered a number and it's
02:33 - stored in the variable number one so now
02:36 - let's well might as well just copy this
02:39 - right here and copy this and paste it
02:43 - right over here and we'll change this to
02:45 - two so enter two it's going to be sted
02:47 - two and
02:50 - enter second number pretty good so now
02:54 - after this what we want to do is it
02:56 - really doesn't matter what number they
02:58 - answer for you you know number one as
03:00 - long as it's a number but number two it
03:03 - does matter because the second number
03:06 - cannot be equal to zero because if you
03:08 - remember from you know fifth grade math
03:09 - class or whatever you can't divide by
03:11 - zero it's illegal the math Gods will not
03:14 - allow it so let's go ahead and have an
03:15 - error message pop up whenever you TR try
03:18 - to divide by zero and we can just go
03:20 - ahead and put a simple if statement if
03:22 - num two is equal to zero let's go ahead
03:26 - and throw an exemption we'll just throw
03:29 - the number
03:30 - Z and now what we want to do is remember
03:35 - if number two is not equal to zero that
03:37 - means that the numbers that they entered
03:39 - were valid so we'll just go ahead and
03:41 - print out the answer on the screen num
03:43 - oneide by num two and in that line so
03:47 - basically if they enter zero is a second
03:50 - number we're going to get a error if
03:52 - they enter two valid numbers it's just
03:55 - going to print out the answer by
03:56 - dividing the top number by the bottom
03:58 - number so if we do indeed get a error
04:01 - remember in the last tutorial I taught
04:03 - you guys that you can pass in a number
04:05 - to use as like an error reference number
04:08 - and you can just write something see
04:12 - out you can't divide
04:17 - by
04:19 - X and that way whenever we throw zero
04:22 - it's going to pass zero in as X and it's
04:25 - going to say you can't divide by zero so
04:27 - let's go ahead and run this and see what
04:29 - happens
04:30 - enter the first I'm going to first run a
04:33 - program that works perfectly enter 32
04:35 - for my first one enter 16 for my second
04:39 - one and 32 / by 16 is indeed two as we
04:43 - can see here so my program is working
04:46 - beautifully but let's go ahead and say
04:49 - that we have an idiot that's going to
04:52 - you know never knows how to use the
04:53 - calculator and is going to try to divide
04:55 - by zero okay 32 okay everything's going
04:58 - good so far but then I'm going to try
05:00 - and enter zero is my second number and
05:02 - whenever I try to hit this and solve
05:04 - this riddle we can see you can't divide
05:07 - by zero so as you notice as soon as you
05:10 - get an error message it basically just
05:13 - jumps right down to this catch block
05:14 - right here and it says hold on you did
05:17 - something wrong here's your error
05:18 - message you can't divide by zero so now
05:22 - the little itty bitty thing I want to
05:23 - cover in this tutorial is this you can
05:25 - have multiple catch blocks to catch
05:28 - different types types of error messages
05:31 - right now the only type of error message
05:33 - I showed you guys is an integer error
05:35 - but you can catch a double um you can
05:38 - actually catch a character if you want
05:40 - you can catch any different type you
05:42 - want now aside from covering that I
05:45 - don't need to show you guys you know the
05:47 - different types of error messages you
05:49 - can catch but what I do need to show you
05:51 - guys is this little thing right here dot
05:54 - dot dot you're saying what the heck type
05:57 - is this a dot dot dot okay I understand
06:00 - that I can catch you know ins and
06:02 - characters whenever you just want any
06:06 - error message to be caught for example
06:09 - you don't know what error message is
06:10 - going to happen in this Tri block but
06:13 - anytime any error message occurs you
06:15 - just want it to be caught right here
06:18 - then you can use the dot dot dot so dot
06:20 - dot dot is pretty much the all
06:22 - encompassing the default catch so
06:25 - basically if you have an so basically
06:29 - anytime an error message is thrown it's
06:32 - going to be caught by the dot dot dot no
06:33 - matter if it's an INT character yada
06:36 - yada yada so with that being said this
06:38 - is the catch that you see most often I
06:41 - just wanted to throw you guys um the
06:43 - piece of information that you can indeed
06:46 - catch specific types of error messages
06:48 - but this is the one you're going to see
06:50 - more often so let's go ahead and try and
06:53 - run this and it says all right and one
06:56 - second I did something wrong oh I see
06:58 - what I did I actually tried to pass an x
07:02 - and x is no longer existing so let me go
07:05 - ahead and try to run this one more time
07:06 - and you see it says enter first number
07:08 - 32 and then we try to divide by zero get
07:11 - error message and we get that default
07:13 - you can't divide by error message so
07:16 - typically you would want to write
07:17 - something like this it would probably
07:19 - make more sense but anyways I just want
07:21 - to stress you guys that aside from
07:23 - Catching different types of error
07:25 - messages you can also catch general
07:28 - error messages mes and that's what we're
07:30 - going to be doing most of the time so
07:32 - now that you understand that you
07:34 - understand most of everything there is
07:36 - to know about exception handling there
07:38 - are a couple other things that uh I
07:41 - don't even know if I want to cover or
07:42 - not there's like passing in objects that
07:45 - you can catch and also um you know
07:47 - inheriting from exception classes and
07:50 - default messages and stuff but I really
07:52 - don't know if I want to get into that I
07:54 - mean we understand the basics so um in
07:57 - the next tutorial don't know if I'm
07:58 - going to be covering more about
07:59 - exception handling or you know jumping
08:02 - into the next topic but either way it's
08:04 - going to be amazing so if you have any
08:06 - questions check out my Forum the new
08:08 - aon.com forum and uh yeah I guess I'll
08:11 - see you guys in the next video