00:00 - all right so now that we got Redux up
00:02 - and running what we can do is start
00:04 - going through each of these components
00:06 - starting from the top and pretty much
00:08 - just making them work plugging them into
00:10 - Redux making all the buttons and
00:12 - everything functional reading in the
00:14 - right data so on and so forth
00:16 - now before we actually get to that I did
00:18 - see that I had a one warning in the
00:20 - console and that is because
00:24 - I forgot to include let's see
00:27 - in the history
00:29 - uh T head I need to wrap all these
00:32 - th is in a t r a table row and then
00:37 - hopefully
00:39 - that'll get rid of that issue but now
00:42 - that that little minor issue is taken
00:44 - care of I'm going to pop back open Redux
00:46 - and we'll start with these top
00:48 - components up here like I said so what
00:52 - I'm going to do and I'll show you what
00:53 - the top card is right now so for each of
00:56 - these top cards we just hard coded it in
00:58 - the word network for the heading and
01:01 - then we also hard coded in the element
01:03 - that we're passing in which is this
01:05 - space items element
01:07 - which is basically this logo and pencil
01:09 - right here so I want to update the
01:11 - component now so we can pass in whatever
01:13 - string that we want for a heading and
01:16 - also I'm gonna have it so we can pass in
01:18 - any node
01:19 - for this bottom content right here
01:22 - because most of the time it's going to
01:24 - be the spaced items but whenever we
01:27 - first boot up the app you see in the
01:29 - manager we don't have any account or any
01:31 - network right now so whenever we don't
01:34 - have anything selected I just want to
01:36 - have a button that appears here that
01:37 - says something like select the account
01:39 - or select a network and then whenever
01:41 - you click that button the modal is going
01:43 - to pop up and we still have to build
01:45 - that too and well that's going to allow
01:48 - you to actually select whatever you're
01:50 - trying to select
01:51 - so the first thing I want to do is
01:54 - actually just rewrite some of this top
01:56 - card logic
01:58 - so let me go ahead and make my interface
02:01 - first so for the props I want to export
02:05 - interface and whenever I'm defining the
02:08 - props for these components I follow the
02:11 - name and Convention of the component
02:12 - name and then perhaps
02:16 - all right so we're going to be passing
02:18 - in two props to this component and by
02:21 - the way to actually use these props
02:24 - after sfc you just need to put the prop
02:27 - type and that's going to be top card
02:28 - props but either way the first thing
02:31 - that we're going to be passing in is a
02:33 - heading and that's going to be a string
02:34 - so I'll say heading
02:36 - string and then to actually use it in
02:39 - your component we can destructure it
02:42 - right here and then we'll replace this
02:45 - hard-coded network with whatever we
02:47 - passed in for a heading and then we want
02:50 - to do the same thing because we're going
02:51 - to pass in one more prop which
02:53 - actually pass it in as a child so
02:58 - children and let me go ahead and import
03:01 - this
03:02 - so for the content body right here well
03:06 - I have an error right now but um for
03:08 - this right here we're just going to be
03:10 - passing in either a button or the spaced
03:12 - items so we need to import
03:16 - from react
03:20 - the element to react node
03:25 - all right so whenever you use this
03:27 - component give me a string for the
03:28 - heading and then give me any react node
03:31 - and I will display that right in this
03:35 - content section right here
03:38 - all right now let me just pretty this up
03:40 - in with that we can now test it in this
03:44 - top component so uc's top component is
03:47 - uh complaining a little bit right now
03:48 - because we're not passing in those props
03:50 - that we just defined so just to test
03:52 - things out we'll copy the spaced item
03:59 - it's based item all right so what we'll
04:01 - do is we'll have the account
04:04 - section on the left
04:06 - so we'll say for this top card The
04:09 - Heading is going to be equal to
04:13 - account
04:15 - and this is going to be a button by
04:18 - default but since we don't have that
04:21 - button written yet I'm just going to use
04:22 - space items
04:23 - and check it out so this next one is
04:28 - going to be Network
04:31 - so all right so we are now rendering the
04:34 - space items correctly account and
04:36 - network and now that we saw that we can
04:38 - pass in a valid react node what I want
04:40 - to do is go ahead and create that button
04:42 - object so we can actually pop open the
04:45 - model
04:47 - so for this let me actually clean some
04:50 - of this up all right I'm gonna pop open
04:52 - my Styles file and I actually wrote this
04:55 - earlier
04:57 - I think what I'm gonna do now is kind of
05:00 - um have the CSS pre-written because I
05:03 - want this tutorial series to be more
05:05 - about like tnb OS and react and electron
05:07 - however I feel like I'm spending a
05:10 - little bit too much time on the CSS so
05:13 - if there's ever any new Concepts that
05:15 - we're going to cover related to style
05:16 - components I'll make sure to take the
05:18 - time and cover those however just for
05:20 - you know like basic button styling or
05:22 - div styling or whatever I'll just have
05:25 - it all pre-written so anyways this
05:27 - button right here just to read through
05:28 - it real quick it's just going to be a
05:30 - button with basically no background it's
05:33 - going to be pretty much gray and it's
05:35 - going to take up the full width of the
05:38 - container and then I added a little
05:40 - hover State as well but anyways that is
05:43 - our button you'll see in just a second
05:45 - now what I'm going to do is like I said
05:50 - the logic is going to be for this
05:53 - account content right here if you have
05:55 - an active account then we're going to
05:58 - display the account information and it's
05:59 - going to look pretty similar to this now
06:01 - if this is null which it is right now
06:03 - then we're going to display the button
06:05 - now I can probably just write this logic
06:08 - right in here but I like to split it out
06:10 - into a separate function since it has
06:13 - some uh I don't know it's not just like
06:14 - a a simple expression it's going to be a
06:17 - little bit more involved so I'm going to
06:19 - make a function called render account
06:23 - content
06:26 - and then this the logic is basically oh
06:30 - you know what
06:33 - actually let me just go ahead and return
06:34 - that button right now so s dot button
06:39 - and I'll say select account and I'll
06:42 - show you what the button looks like and
06:43 - then we'll go ahead and add in that
06:45 - logic to say if you have an account
06:47 - display this if you don't display that
06:48 - so on and so forth
06:50 - so for the account content
06:52 - instead of spaced items I'm going to be
06:54 - passing in this
06:57 - and ra so this is our button this is
07:00 - what it looks like and now let me go
07:01 - ahead and add that conditional and again
07:04 - that conditional is going to check in
07:06 - Redux to see what the value of this
07:08 - active account number is so as the next
07:11 - step we need to figure out how to read
07:12 - in data
07:14 - from Redux into our component
07:16 - so to do that we are going to make a new
07:19 - directory in speed test and I'm going to
07:22 - call it
07:23 - selectors and since this selector or
07:27 - we're actually going to make a few of
07:28 - them but since these primary selectors
07:30 - are just going to be working with that
07:32 - Redux State I'll just go ahead and name
07:34 - this
07:36 - State and I'm gonna write all my Redux
07:39 - selectors right in here and before we
07:42 - write any selectors what I want to do is
07:44 - I want to import
07:48 - from system types
07:52 - the root State it's actually let me show
07:54 - you this
07:55 - so this is basically the root state of
07:58 - our entire store and I'm not just
08:01 - talking about the speed test uh chunk
08:04 - that we created but the entire like tnb
08:06 - OS Redux store so once we have that to
08:10 - create a selector we're just going to
08:11 - make a const
08:13 - and I will name this get active
08:19 - account number and this is going to be
08:22 - equal to a function
08:24 - that takes the state
08:26 - not Vista state
08:28 - it's going to take in the state and just
08:31 - to type it out the shape of that is
08:32 - going to be root State and remember from
08:34 - our typing if we go to the manager the
08:37 - valid values for active account number
08:39 - are string or null so whenever we use
08:42 - this selector that's the value that
08:43 - we're going to be returning
08:45 - and now
08:48 - and as a return value
08:50 - we just need to say where it is and that
08:52 - is state.speaktest dot manager.active
08:56 - account number
08:58 - and let me actually go ahead and
09:01 - write the other selectors that we're
09:03 - going to need right now even though we
09:05 - won't be needing them immediately
09:07 - but in addition to getting the active
09:09 - account number I also want to get the
09:11 - Active network ID
09:13 - so get Active network ID again same type
09:17 - string or no and instead of plucking off
09:20 - the active account number we're just
09:22 - going to pluck off the
09:24 - Active network ID and aside from that we
09:27 - also want to create a selector to get
09:29 - these runs
09:30 - right here we'll just uh pluck off and
09:33 - get the entire dict and because I want
09:35 - to type that out what I want to do is
09:41 - apps speed tests types
09:45 - we'll just import runs from here
09:49 - and all right so we'll say get runs
09:55 - now what was the shape of that flow if
09:57 - we check in our runs
10:03 - just this runsdict and Speedtest Dot
10:07 - runs
10:09 - all right so we now have three selectors
10:12 - written one to get the active account
10:13 - number and then the Active network ID
10:15 - and then the runs from Redux now in
10:18 - order to use these let me clean up some
10:21 - of this close tabs to the right in our
10:23 - component the first thing that we need
10:25 - to do is we need to import use selector
10:28 - from react Redux and then once we have
10:32 - that imported I'm going to make another
10:34 - actually
10:36 - which is caught with the same thing I'm
10:39 - going to make a local constant called
10:40 - active account number and this is going
10:42 - to be equal to U selector and what we
10:45 - pass in here is that selector that we
10:47 - just wrote so get active account number
10:50 - and again this file is selector state
10:55 - report
10:56 - get active account number from apps
10:58 - speed test
11:00 - collectors state
11:02 - and then pass this right into your
11:05 - selector and now in your component this
11:08 - active account number is always going to
11:09 - be equal to whatever the account number
11:11 - is or active account number that we have
11:13 - stored in our Redux sort
11:15 - so now that we have that we can write
11:18 - logic that looks like this whenever we
11:21 - are deciding what to render right here
11:24 - what we can say is if we don't have any
11:28 - active account number which we don't
11:30 - have right now it's set to null then
11:32 - what we want to do is we just want to
11:34 - return this button
11:36 - that says select an account and it's
11:38 - going to pop open a modal allows us to
11:39 - select it otherwise what we'll do is
11:43 - we'll we'll rewrite this later on but
11:45 - for the time being we're just going to
11:46 - return space items by default since when
11:49 - we have an account selected that's what
11:51 - it's going to look like
11:52 - and you see that whenever I updated that
11:54 - this UI didn't change because in that is
11:58 - correct because we do not have this
12:00 - active account number
12:01 - all right pretty cool
12:03 - so now let's go ahead and get started on
12:06 - our modal component and this modal
12:09 - component is going to be used whenever
12:11 - we click this button select the count
12:13 - and this button that we can't see yet
12:15 - but it's going to say select Network and
12:17 - it's going to be similar to the model I
12:19 - wrote in the chat system and I'll give
12:21 - you a little preview right here so we're
12:23 - going to click a button and then we of
12:26 - course have a pretty standard modal it
12:28 - has a heading and a close Button as kind
12:31 - of the top section and of course you can
12:33 - close it to close it now in addition to
12:36 - just this div floating in the center of
12:38 - the screen I also wrote this overlay
12:40 - which is kind of like dims the
12:42 - background and it's just another way to
12:45 - close this model as well if you click
12:46 - anywhere outside the model on the
12:48 - overlay
12:49 - I just thought it was a cool ux
12:52 - um I don't know kind of intuitive click
12:53 - outside the model it closes as well so
12:56 - we're going to be going for that same
12:58 - style so we'll make it basically like
13:02 - this we'll have an empty container where
13:06 - we can pass in a heading and just like
13:08 - that top card I want to be able to pass
13:10 - in any content right here so for the
13:14 - account modal we'll just be passing in
13:16 - the list of account cards and for the
13:18 - network model we'll just be passing in a
13:19 - list of network cards and I like doing
13:21 - it that way in general My Philosophy
13:24 - with modals is to keep them is
13:25 - unopinionated as possible a lot of
13:28 - people have like forms in them in their
13:30 - modals quite often and they tie a bunch
13:32 - of form logic in there but I found that
13:34 - if you try to keep that logic in the
13:37 - child component or the component being
13:39 - passed in then it just makes everything
13:41 - a lot easier so I'll show you exactly
13:45 - what I'm talking about right now
13:47 - now in components let me go ahead and
13:50 - remove some of this first all right
13:52 - create a new directory called modal and
13:55 - let me do all my standard stuff create
13:57 - an empty template
13:59 - and an empty Styles file and just rename
14:03 - this to modal
14:05 - beautiful
14:06 - now let's go ahead and Define what props
14:09 - we're going to be passing in so export
14:11 - interface modal props
14:14 - and again to use those
14:18 - right like this and okay so for the
14:21 - header we're going to be passing in a
14:23 - string and we also need to pass in a
14:26 - closed function
14:28 - and this is going to be returning void
14:31 - and aside from that let me see if I can
14:34 - just steal it from my top card
14:36 - we're also going to be passing in our
14:38 - react node
14:40 - and let's follow that same pattern and
14:44 - pass in the content
14:48 - as children so whatever we pass in as
14:51 - children this is going to be the modal
14:53 - body more or less and now let me just go
14:55 - ahead and make sure we're passing
14:57 - everything in
15:01 - and the header okay now instead of just
15:05 - returning a basic HTML element or a
15:09 - component like we have been what we need
15:11 - to do is we actually need to use a
15:13 - portal and for those who aren't familiar
15:16 - with portals I'll show you actually let
15:19 - me show you this
15:22 - all right so
15:25 - in my main template this root element
15:29 - right here is where I'm rendering
15:31 - basically the entire react app now I
15:34 - also have this element right here called
15:36 - a modal root what we're going to be
15:38 - doing is creating something called a
15:40 - portal and this is just going to allow
15:42 - us to render some element or really any
15:44 - valid react outside of this Dom
15:47 - hierarchy so instead of rendering inside
15:50 - root we're just going to render on re or
15:52 - excuse me modal root and that's going to
15:55 - allow us to basically have that
15:57 - functionality where we have this entire
15:59 - overlay in modal appearing on top of all
16:02 - these other components so how do we do
16:05 - that well the first thing we need to do
16:07 - is import the create portal function
16:10 - from
16:12 - reacts Dom
16:16 - and that is called create portal now
16:19 - instead of returning this container we
16:21 - are instead going to return a portal and
16:24 - this function is going to take two
16:26 - params the first one is the react code
16:29 - or elements that we want to render and
16:31 - the second one is where do we want to
16:33 - render it now for the react code what
16:37 - I'm going to do is actually use a
16:38 - fragment because I'm basically going to
16:41 - have something like this
16:42 - I'm gonna have
16:44 - my overlay
16:46 - rendering right here and then here is
16:49 - where I'm going to render the modal and
16:51 - that is just going to give us that you
16:53 - know black dimmed background with that
16:55 - HTML element appearing on top of it but
16:58 - anyways this is the basic structure for
17:00 - the first param of what we want to
17:01 - render now the second one
17:04 - if we see
17:07 - I'll show you this so we're going to
17:09 - render it right here
17:10 - and this is a div with the ID modal root
17:14 - now in order to kind of reference this
17:17 - from react what we can do is we can say
17:19 - document Dot
17:21 - get element by ID and again that was
17:24 - modal root and another thing that I'm
17:27 - going to put is this just to make
17:29 - typescript happy this exclamation mark
17:31 - and this is because
17:33 - oh I'll show you the exact error
17:35 - it says that argument of type HTML
17:37 - element is not assigned to this
17:39 - basically saying that whenever you
17:40 - create a portal
17:42 - you have to have an element and we don't
17:46 - know if this element actually exists on
17:48 - the Dom or not now because I know
17:51 - definitively that it exists because I
17:53 - hard coded in myself and it's not like
17:55 - conditional it's just always there
17:56 - that's how I can safely put this
17:59 - exclamation mark to tell typescript yes
18:01 - it's definitely in there don't worry
18:03 - about it being null or unfun or anything
18:04 - like that so now let's go ahead and
18:06 - start styling this thing and instead of
18:09 - container I'm going to call it modal
18:13 - and
18:15 - let me go ahead and add some generic
18:18 - styling off the bat so we're going to
18:20 - give it like pretty much the same color
18:22 - background is the um the app itself and
18:26 - also another thing that I want to do is
18:29 - I want to say that the position is fixed
18:31 - and the reason for this is because I
18:33 - want to make sure that this is going to
18:35 - be displayed in the very center of the
18:37 - screen
18:38 - so in order to Center this div in the
18:41 - center what I'm going to do is say left
18:43 - 50 and I'm also going to say top 50
18:48 - now what this is going to do if we just
18:51 - render this is It's Gonna
18:54 - um basically make it so the top left
18:56 - corner is in the middle of the screen
18:58 - but I want the entire container to be in
19:01 - the middle of the screen so you know the
19:02 - center of the div is in the center of
19:04 - the screen so just to get that logic
19:06 - what I'm going to do is transform
19:08 - and I'll translate by
19:12 - negative 50 negative 50 percent and this
19:15 - is going to make sure that that entire
19:17 - div right here is perfectly aligned in
19:20 - the center of the screen good to go
19:22 - now another thing that I want to do is
19:26 - style my icon because remember we have
19:28 - that X in the heading section on the top
19:31 - right so just to add some styling to
19:34 - that I already have this written
19:37 - again this is the same is the pencil
19:40 - icon where it has a color and then when
19:43 - you hover over it then it has just a
19:45 - little a little change in the background
19:47 - and color just to give the user an
19:49 - indicator that they are hovering over
19:51 - something and maybe I will give a cursor
19:55 - pointer to this so This icon is going to
19:59 - appear in this header section so
20:02 - actually let me uh type the rest of this
20:05 - out so again our header is at the top
20:07 - and on the left hand side it's going to
20:10 - have that text and on the right hand
20:12 - side it's going to have that icon so
20:14 - that's why I made it display Flex
20:15 - justify content space between and just
20:18 - add some padding so everything isn't
20:20 - bumped up right against the edges and
20:22 - then Under The Heading we're going to
20:25 - have this content section so anything
20:27 - that we throw in there for children it's
20:30 - going to have padding is 16 and again
20:32 - this is just to make sure that those
20:33 - cards don't bump up right against the
20:35 - edge looks a little bit better
20:37 - and let actually let me go ahead and uh
20:40 - put all this on the screen and then
20:42 - we'll make our overlay so again the
20:44 - parent component
20:46 - for all of that stuff that we just wrote
20:48 - is s dot modal
20:51 - and what I can also do is I'm going to
20:54 - be passing in this class name from
20:57 - styled components right in this modal
20:59 - and then inside the modal we're just
21:01 - going to have the header and then the
21:03 - content so s dot header
21:07 - and I'll just make a span
21:10 - and inside this span is where we are
21:14 - going to render whatever string we
21:16 - passed in for the header now remember
21:19 - this header right here is a flex element
21:23 - so since we have Justified content space
21:26 - between this header is going to appear
21:28 - to the left and then whatever we write
21:30 - right here is going to appear to the
21:31 - right and for that we want this icon
21:35 - appearing so
21:36 - s dot icon
21:40 - and I'm also going to need to import
21:43 - that close button so from
21:49 - mdi.js
21:51 - that close button icon
21:53 - is actually what is it MDI close there
21:57 - we go all right so as a prop I want to
22:00 - say that the icon
22:03 - is equal to MDI close and then another
22:06 - thing that we want to do is we want to
22:09 - have this on click Handler be equal to
22:11 - this close functionality that we're
22:13 - going to be passing in again we didn't
22:16 - write this function in the parent
22:17 - component yet but we will in just a sec
22:19 - and now this also takes a size prop so
22:23 - I'll say 16 pixels see how that looks
22:25 - and another thing that I want to do is I
22:28 - want to pass in this unfocusable and
22:31 - this is just for styling issues where if
22:33 - we have it focusable then like the blue
22:35 - ring appears around it and it looks a
22:37 - little bit weird so anyways this is how
22:40 - we have our header structured now the
22:42 - only other thing we have to do for now
22:44 - is say
22:45 - content section
22:48 - which is just the basically the body of
22:51 - the modal all we need to do for this is
22:53 - say whatever children element that we
22:56 - pass in render it right in the content
22:59 - just like that so this is all good for
23:02 - our modal styling however we still need
23:05 - to style that overlay
23:08 - let me just steal this
23:12 - alright so for that overlay or that
23:14 - black background I'm just going to call
23:17 - it overlay and what I'm going to do is
23:21 - I'm going to give it a height of 100
23:22 - vertical height which means just take up
23:25 - the entire height of the screen and same
23:27 - thing for width except you do 100 VW for
23:30 - vertical width
23:32 - and then just to make sure everything is
23:34 - positioned correctly for left
23:36 - zero and then for the top it's also zero
23:41 - and let's just make sure that the top
23:43 - left corner of this element is in the
23:46 - top left of the screen and I also am
23:48 - going to do position fixed
23:51 - so I can go like eyelash in my eye
23:53 - position fixed there we go now this is
23:57 - gonna work fine for an overlay however
23:59 - just to make it a little bit more fancy
24:02 - instead of whenever we click the button
24:04 - the model pops up and it has this dim
24:06 - black background I want this overlay to
24:08 - kind of fade in so in order to do that
24:12 - we can learn a new trick from style
24:14 - components and that is a keyframes
24:16 - method so keyframes and again all this
24:21 - is its uh helper method from styled
24:23 - components that allows us to add
24:25 - keyframes for an animation so what we
24:29 - can do to use it is do something like
24:32 - do this create a constant called add
24:35 - overlay and set it equal to keyframes
24:37 - now inside the ticks
24:41 - you pretty much Define how you want to
24:43 - transition this animation so we'll say
24:46 - from
24:48 - and for the background
24:52 - we will just do actually let's do rgba
24:58 - zero zero zero zero so we're going to
25:03 - transition from a completely opaque
25:05 - shade of black to a slightly transparent
25:08 - shade of black because we want to still
25:11 - be able to see the background what's
25:12 - going on so we can adjust this opacity
25:15 - if it's too dark or too light later on
25:16 - actually this is supposed to be two from
25:19 - two okay so these are our keyframes now
25:23 - how do we use this as an animation well
25:25 - in our overlay div right here for the
25:28 - animation property we can use that
25:32 - dollar sign curly brace syntax and throw
25:35 - in our overlay
25:37 - which are our keyframes animation right
25:39 - here and now for this we still need to
25:42 - find how long we want the animation to
25:44 - take and we'll say 0.3 seconds and we
25:47 - also need to Define how we want the
25:49 - animation to run and we'll just say
25:50 - forwards
25:52 - so this is going to give us our three
25:55 - second black fading property
25:58 - and to actually use this
26:01 - make sure I got the right thing so this
26:04 - overlay div is going to appear
26:07 - as a sibling element to modal so s dot
26:11 - overlay
26:13 - and then we just need to pass in the on
26:17 - click Handler on this as well because
26:19 - remember we have two different ways to
26:21 - close this modal once it's open we can
26:22 - either click the close icon or click
26:26 - anywhere on that overlay and that's
26:27 - going to close it as well
26:30 - all right
26:31 - I think all of our modeling style is uh
26:34 - good to go so is next steps now that we
26:37 - have our generic modal in other words we
26:40 - just have an element that pops open in
26:42 - the middle of the screen and we can pass
26:44 - in a heading and you can click close to
26:46 - close it what I'm going to do next is
26:49 - create another directory called modals
26:52 - because I want to start working on our
26:54 - two use cases for that modal and that is
26:57 - the account model and network modal so
27:00 - again one of these is for whenever you
27:03 - click this button and that modal is
27:05 - going to pop open with a list of
27:06 - accounts and the other one will list the
27:08 - networks so let me go ahead and make
27:09 - that account modal first
27:11 - so under modals what I'll do is create
27:14 - another directory called
27:16 - accounts modal and this is just
27:20 - same thing as I always do components and
27:23 - styles
27:24 - let me get this organized
27:26 - all right so the account model I'm just
27:29 - going to name it to account model
27:32 - and then let me go ahead and just
27:36 - find my props as well
27:45 - my IDE so laggies you know what's weird
27:48 - every time I uh make an interface for
27:51 - props my IDE starts to lag I don't know
27:54 - it's uh
27:55 - exhausting okay so the props that we're
27:58 - going to be using for the account modal
28:00 - are actually let's just go ahead and
28:05 - use this close functionality because
28:07 - we're going to need to pass this through
28:08 - to the actual modal right here however I
28:13 - don't want to import the modal right in
28:16 - this component because I want to apply
28:18 - some additional styling to it so instead
28:21 - of just treating it as a normal
28:22 - component we'll import it as a uh well
28:25 - pretty much be able to work with it
28:26 - using our styled components so what I'm
28:30 - going to do is I'm going to import
28:36 - I think that's default so import U or
28:39 - unstyled modal from and what location
28:42 - was that apps
28:43 - speed test
28:46 - components
28:48 - modal
28:49 - all right so now that we have our
28:52 - unstyled modal
28:55 - we are going to make
28:57 - a styled
28:59 - version of that
29:01 - and how do we want to update the styling
29:03 - well let's just say that we want to
29:06 - display
29:07 - Flex because remember in this account
29:09 - model we're going to have a list of
29:11 - cards so we want to just make sure that
29:13 - those all appear in a column so I'm
29:17 - going to do display flex and then Flex
29:19 - Direction column and you can also give
29:21 - it a specific width and height because I
29:24 - don't believe in our modal styling
29:28 - yeah we don't have any explicit width
29:30 - and height right here so whenever we
29:32 - import it and add our custom styling we
29:34 - can just add uh whatever width and
29:36 - height we want depending on our use case
29:37 - so I'll say a Max
29:40 - width for this and this is probably
29:43 - going to need to be tweaked later but
29:44 - I'll say 400 and a Min width of I don't
29:48 - know 360 380 whatever
29:52 - all right so we have our modal
29:56 - styled for our use case and then to use
29:59 - it we can just do this s dot modal now
30:05 - of course we need to pass in the class
30:07 - name also this close function which we
30:11 - didn't write yet but we're also going to
30:12 - be passing this through to modal
30:14 - and then this modal is going to take a
30:15 - header property as well and for the
30:18 - header
30:20 - you can actually just hard code this in
30:21 - so
30:24 - select account and I'm getting a typing
30:26 - issue because I forgot to Define my
30:29 - preps right here
30:30 - and all right now another thing that I
30:34 - want to kind of point out and this is
30:37 - kind of a tricky bug but I figured I'd
30:39 - show you that if you ever forget to
30:42 - export this interface then whenever you
30:45 - try to import it and using your styled
30:47 - components you may see this error right
30:49 - here it says exported variable modal uh
30:52 - pretty much is something like this and
30:54 - it's kind of uh difficult to understand
30:57 - this error so even though we didn't come
30:59 - across this I just wanted to point it
31:01 - out because it's something that I used
31:03 - to do quite commonly so uh you know
31:05 - maybe save you some headache and anyways
31:08 - for this account modal even though we
31:11 - didn't write these account cards yet
31:12 - I'll just
31:13 - say account cards here so we can
31:16 - actually see where they're going to
31:18 - appear
31:19 - so now that we have our modal components
31:21 - written looking good we'll hop back into
31:24 - this top section and figure out how to
31:25 - actually open this modal so what I'm
31:28 - going to do is first import it and I'm
31:30 - gonna
31:31 - import the account modal
31:35 - from apps speed test modals account
31:39 - model
31:40 - and another thing that I want to do is I
31:42 - want to import a custom hook that we
31:44 - have called a use toggle and that is
31:47 - from system
31:49 - hooks and all this Hook is going to do
31:53 - as you're going to see in a second
31:54 - actually it's probably easier if I just
31:57 - write it so let me go ahead and create
31:59 - const and this is going to be equal to
32:01 - use toggle
32:04 - and I'm going to initialize it to false
32:06 - so all this Hook is going to do is
32:09 - you're going to initialize it to a value
32:10 - and then whenever you call the calling
32:12 - function on it it's going to switch the
32:14 - value so if it's false it's going to
32:15 - turn it to true true then you turn it to
32:17 - false and yeah it's uh pretty
32:20 - self-explanatory by the name but for the
32:22 - variable that's going to store the value
32:23 - I I will say accounts model is open and
32:29 - for the function to toggle it we'll just
32:31 - say toggle account modal so now what I
32:35 - want to do is I want to create another
32:37 - render function right here I'll say
32:40 - render account modal
32:45 - and for this logic I will say if
32:49 - the account modal is not open then this
32:53 - function is just going to return null
32:54 - however if it is open oops accidentally
32:58 - uh
32:59 - cut that instead of copied it now if it
33:02 - is open then what we're going to do is
33:04 - we're just going to return that account
33:06 - modal and we also passed in this uh
33:10 - close function and this close function
33:12 - is just going to be this toggle function
33:13 - right here
33:15 - so
33:17 - for rendering this account modal we are
33:20 - actually going to render it as a sibling
33:22 - to this container so in order to do that
33:25 - let me go ahead and create a fragment
33:28 - and of course we are always going to
33:30 - render this container which is that
33:33 - those top card elements and now under
33:35 - here we'll say render account modal and
33:38 - this will render again like we see right
33:40 - here the account modal if this variable
33:43 - is true otherwise
33:45 - by default it's false that means not
33:48 - rendered and now is the last step I
33:50 - believe the only other thing that we
33:52 - need to do is we need to add that on
33:54 - click Handler to this button element
33:57 - so all right on click toggle account
34:00 - modal
34:01 - all right so let me go ahead and I might
34:04 - have to restart yeah sometimes if you uh
34:06 - write too many components or make too
34:09 - many changes then you actually have to
34:11 - uh restart hot reload won't work
34:13 - all right so check it out so we have our
34:16 - button and now when we click our button
34:19 - we can see that our modal appears and if
34:22 - everything worked correctly we can close
34:23 - this modal either by clicking on this x
34:25 - icon or clicking anywhere on the overlay
34:29 - and all right looks like everything is
34:31 - uh working correctly right now so again
34:33 - just uh do a quick mini recap whenever
34:37 - we are deciding
34:39 - what to render for this account element
34:42 - right here
34:43 - we're going to say
34:45 - well first of all it's this function
34:47 - right here render account content and
34:48 - we're going to say if you don't have any
34:50 - active account number then go ahead and
34:53 - render this button and since we don't
34:55 - that's why we rendered the button right
34:57 - there the button has an on click Handler
34:59 - to set this value right here account
35:02 - model is open so it's going to turn
35:04 - false to true and then since this
35:07 - account modal is now true instead of
35:10 - null
35:11 - which is this state right here it's
35:14 - going to be equal to true and therefore
35:16 - render this account modal now to close
35:19 - that account modal again all we need to
35:21 - do is we need to change this state from
35:23 - True to false so for that function we're
35:25 - just going to pass it through to the
35:27 - account modal and then the account model
35:29 - is going to pass it through to this
35:32 - modal right here
35:33 - and it's going to be passed through as
35:35 - this close prop and again that's going
35:37 - to be on both the overlay and also on
35:41 - that icon so you have two different ways
35:43 - to close the modal
35:45 - so yeah I think that's uh
35:48 - pretty good for now and for this
35:52 - Network model it's pretty much going to
35:54 - follow the same exact pattern however
35:56 - before I get started on the network
35:57 - model what I want to do is kind of just
35:59 - finish up all of this account logic
36:01 - including these account select cards and
36:05 - actually updating Redux whenever we
36:07 - select one and then once I have all of
36:09 - this working up and running the network
36:11 - model and all the related components are
36:13 - going to be a piece of cake but for this
36:15 - video that's probably good getting a
36:18 - little long so yeah thanks for watching
36:19 - and I will see y'all next time