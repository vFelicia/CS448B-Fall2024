00:00 - all right guys welcome to your 53rd C++
00:03 - tutorial and if you've been following
00:05 - these tutorials you know that I've been
00:06 - gone for like a week and I might be kind
00:09 - of rusty with C++ but uh I'll get the
00:12 - hang of it I've actually been planning
00:14 - something and I'm not going to tell you
00:15 - guys what it is but I will say that is
00:18 - awesome and it's going to happen in
00:19 - about a month so that's your little
00:21 - teaser so now let's get back into C++
00:24 - let me get my head straight I actually
00:26 - just opened this program so I think what
00:29 - I was supposed to teach next was about
00:32 - protected because that's what it's
00:34 - looking like so I think in the last
00:36 - tutorial I just covered basic
00:37 - inheritance I probably should have you
00:39 - know watched that video watched the last
00:41 - video before I started doing this one
00:43 - but who has time for that so let's go
00:45 - ahead and talked about what a protected
00:47 - member is you know whenever I first made
00:50 - a class like this mother class right
00:52 - here um automatically it's stuck in
00:55 - public protected and private those three
00:58 - variables or I mean those three Cod
01:00 - wordss and you're supposed to put all
01:01 - your functions and variables in there
01:03 - and I usually just deleted private or
01:05 - protected and I'm like don't worry about
01:07 - that we'll worry about this later well
01:08 - now is the time to worry about it so
01:11 - let's go ahead and in our mother class
01:12 - let's throw in those keywords again so
01:15 - public we already know what this does
01:18 - let's go ahead and make a variable for
01:20 - each one so we already know what public
01:22 - means um anywhere inside this class has
01:25 - access to the stuff and also outside
01:27 - this class can also access this stuff
01:30 - whenever you write something in public
01:31 - it pretty much means anywhere in the
01:33 - program you can access this crap so
01:35 - we'll just name it public V for public
01:39 - variable so now let's go ahead and talk
01:41 - about protected well before we talk
01:45 - about protected let's talk about private
01:47 - because I mean might as well get out of
01:48 - the way the things we know already we
01:50 - already know that whenever we make
01:52 - something like a private variable that
01:55 - this means that only inside this class
01:58 - has access to this variable for example
02:00 - if we wanted to go in another class or
02:02 - in this main CPP class this class would
02:06 - not have access to these private
02:08 - variables and that's why we need to
02:10 - build methods inside this class that are
02:13 - public to access those private variables
02:16 - so basically what we know so far
02:18 - whenever we make something public any
02:20 - other file has access to it whenever we
02:24 - make something private only this file or
02:27 - only this class has access to it so
02:30 - you're saying all right this is a this
02:32 - is B so what the heck is this one it's
02:34 - kind of like sitting in the middle is it
02:36 - like a combination of both well yes it
02:38 - is listen very closely whenever you make
02:41 - something protected here's what it
02:44 - means anything inside the class has
02:47 - access to it just like public and just
02:49 - like private any friend has an access to
02:53 - it and remember we talked about friends
02:55 - earlier pretty much just uh out things
02:57 - outside the class that has access to
02:59 - stuff inside your class and also your
03:02 - base
03:04 - classes remember a derived class
03:07 - inherits from the base class right so
03:10 - any class that is inheriting from this
03:12 - class has access to it so if we were to
03:15 - make a private variable in this mother
03:17 - class and then the daughter class
03:19 - inherited everything from mother well it
03:22 - wouldn't inherit the private variables
03:24 - these private variables are still
03:26 - private to Mother even though daughter
03:28 - inherited from mother daughter does not
03:31 - get these private variables daughter
03:34 - would in fact get public and protected
03:37 - so it would inherit these two but not
03:40 - private so that way you can kind of see
03:42 - it's a mix between public and private um
03:45 - it doesn't let anything inherit it like
03:47 - public and it doesn't just stay in this
03:50 - class like private it's kind of like in
03:51 - between so let me go ahead and make um a
03:55 - protected
03:57 - variable protected V and and I'll go
04:00 - ahead and show you guys an example so
04:02 - let's go ahead and build a function
04:04 - inside daughter and we'll just name this
04:07 - go ahead and make it a public function
04:09 - of course
04:11 - public and we'll just name it like do
04:15 - something did I spell that right H close
04:17 - enough so now let's go ahead and build
04:19 - this method right
04:21 - here
04:23 - and I keep thinking like I'm forgetting
04:26 - something but I guess it's just cuz I
04:27 - haven't programmed in a while so let's
04:29 - go ahead and put void daughter hopefully
04:32 - I'm doing this right all right and what
04:34 - was that oh do something it got it right
04:36 - there for me how nice so now we'll just
04:38 - go ahead and do this well actually I
04:40 - might as well do this one at a time this
04:41 - will probably show it to you very
04:44 - clearly so let's go ahead and before we
04:46 - even start coding this function right
04:48 - here let's go ahead and build a daughter
04:50 - object so daughter uh I think her name
04:52 - should be Tina that seems appropriate
04:54 - for this tutorial an tina. do something
04:58 - right like that so now hopefully when
05:00 - you run this nothing happens because
05:02 - nothing's in this function right now so
05:04 - let's go ahead and see just if we have
05:06 - any errors right now nothing happens
05:08 - good so let's go ahead and do this let's
05:12 - say we want to access that public
05:13 - variable and we'll just like set equal
05:15 - to a number or something we just want to
05:17 - try and access it so let's go ahead and
05:19 - try to access that public variable and
05:22 - do something to it like set equal to one
05:24 - or something stupid well we go ahead and
05:26 - run this and no errors so we know
05:29 - whenever we do that that we do indeed
05:31 - have access to the public variable and
05:34 - just a reminder this daughter class is
05:37 - inheriting everything from this mother
05:39 - class and that includes a public
05:42 - variable a protected variable and a
05:44 - private variable now we already know
05:47 - that daughter can access that public
05:49 - variable in this line of code right here
05:51 - so now let's try and step it up on Notch
05:54 - now let's go ahead and try to access
05:55 - that protected
05:57 - variable protected V right there well if
06:02 - we go ahead and try and set this equal
06:03 - to you know two or something like that
06:05 - and we build and run it it works
06:08 - perfectly so therefore we can see that
06:10 - the uh excuse me the derived class can
06:13 - indeed access the protected members of
06:16 - the base class and remember mother is
06:18 - the base class daughter is the derived
06:21 - class whatever does the inheriting aka
06:24 - the daughter is the derived class the
06:27 - core class that has crap we want to
06:30 - inherit from that's called the base
06:31 - class so now we know that we can indeed
06:35 - access public and protected members from
06:38 - the base class now let's go ahead and do
06:40 - something that we know we're not allowed
06:42 - to do and try to access a private
06:46 - variable
06:48 - and let's go ahead and try to set this
06:50 - equal to three and now we'll go ahead
06:52 - and try and build and run this and it
06:54 - says uhuh Bucky I don't think so you
06:56 - know the rules you are not allowed to
06:58 - inherit
07:00 - private member so that's why we're
07:01 - getting an error whenever we try to
07:03 - inherit a private variable so the
07:06 - concept behind this tutorial is not to
07:08 - build a stupid program that does nothing
07:10 - but it's this whenever you're inheriting
07:13 - from a class you can inherit all the
07:15 - public stuff you can inherit all the
07:18 - protected stuff but you cannot inherit
07:21 - the private stuff so remember whenever
07:23 - you have a base class you're going to
07:25 - get this crap and you're going to give
07:27 - this crap but uh-uh you a't in this
07:30 - class bat I meant crap that's
07:33 - embarrassing but I'm not going to redo
07:35 - the tutor just cuz I mess up that one
07:37 - sense okay got it all right so let's um
07:41 - you know what that's enough of me
07:42 - talking for this tutorial I think that's
07:44 - uh I think you guys understand the
07:45 - concept by now basically at the heart of
07:48 - this tutorial you can inherit everything
07:50 - except private variables I could have
07:52 - made this tutorial real short but I
07:53 - didn't so thank you guys for watching uh
07:55 - don't forget to subscribe and by the way
07:58 - if you guys want um nice organized
08:00 - playlist um I didn't I don't really like
08:02 - doing them on YouTube because it's not
08:05 - really easy to organize that way but uh
08:07 - if you go to my website I have all my
08:09 - videos laid out you can watch one right
08:11 - after the other from clicking a button
08:14 - everything's nice laid out in a nice
08:15 - playlist for you guys so thank you guys
08:17 - for watching don't forget to subscribe
08:18 - and I'll see you guys in the next video