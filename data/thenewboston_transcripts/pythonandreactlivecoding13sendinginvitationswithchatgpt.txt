00:00 - all right everybody welcome back to
00:02 - another video and in this one we're
00:04 - going to be building out our invitation
00:05 - system so we can actually invite other
00:07 - users onto the site
00:09 - however before we get to that I want to
00:11 - point out some updates from the last
00:12 - video to this one and that is our shop
00:15 - feature is now live on the new
00:18 - boston.com however whenever I was
00:21 - releasing this I ran into some migration
00:23 - issues so I did have to pretty much
00:25 - reset all data and we only had three
00:27 - users on the site so it wasn't a big
00:29 - deal but um for those two other users in
00:32 - addition to me uh if you notice that you
00:35 - can't log in anymore then just go ahead
00:37 - and ask me for another invite code and
00:39 - I'll send you one and
00:42 - um I guess yeah that's kind of a good
00:43 - segue into what we're doing now so
00:45 - previously whenever anyone else wanted
00:48 - to sign on to the site for example they
00:50 - log out they go to create an account
00:51 - they needed an invitation code and what
00:54 - I had to do is pretty much go in Django
00:56 - admin add a new one and then like copy
00:59 - and paste it send it over to them
01:01 - um it was kind of cumbersome and only I
01:03 - could invite people so now what we're
01:06 - going to do
01:07 - is we're going to have an invitation
01:09 - section where you can create new
01:10 - invitations for example anyone can
01:12 - create these invitations and like send
01:15 - them to their friends or family or
01:16 - whoever they want on the site
01:19 - and I also have it where kind of to
01:23 - prevent people from just
01:26 - um creating new accounts getting new
01:27 - invitations codes creating new accounts
01:30 - getting new if they should code and just
01:32 - like spamming with a bunch of fake
01:33 - accounts
01:34 - so how this works is that right now
01:37 - whenever
01:38 - I send out invitations I'm gonna have a
01:40 - limit of 10 invitations I can create
01:43 - now whoever accepts that invitation when
01:46 - they come in here and they send out
01:48 - invitations they're going to have a
01:49 - limit of nine invitations that they can
01:51 - create then whoever they invite is going
01:53 - to have eight so on and so forth
01:55 - so that is a way where even if someone
01:58 - like wanted to spam with a bunch of fake
02:00 - accounts they can only create a limited
02:03 - amount so I figure that's good enough
02:05 - for now for uh our I don't know
02:08 - kind of solve this issue of a bunch of
02:10 - fake accounts but
02:13 - I am okay so on the back end I already
02:15 - created this invitation limit model and
02:18 - this is pretty much saying what user is
02:20 - it in how many invitations can they send
02:23 - out
02:24 - and you can say I was just playing
02:25 - around with some things right here and
02:27 - then these invitation objects of course
02:29 - are going to consist of
02:33 - um an owner pretty much the Creator
02:35 - the recipient and then this is going to
02:37 - be null by default and then once a user
02:40 - signs up for the site and accepts that
02:41 - then this is going to be equal to that
02:44 - user and it's pretty much a way to tell
02:46 - if the invitation has been you know
02:48 - accepted or not used or not this is just
02:50 - the invitation code that they're going
02:52 - to need to paste in the form and then I
02:54 - also added a note because for example
02:58 - let's say that you create five different
02:59 - invitations and they're just like the
03:02 - invitation codes are just random letters
03:04 - right here and then you send five to
03:06 - your like five of your friends
03:09 - I figured in the UI it's going to be a
03:10 - little bit tricky to see who you sent
03:13 - each one to
03:15 - and for that reason we're going to allow
03:18 - them to type in an optional note and
03:20 - this is going to say something like uh
03:21 - sent to uh Betty or something
03:26 - so that's going to be a more realistic
03:28 - note but that's basically what I have
03:30 - built on the back end and now in this
03:32 - video we're going to be building out the
03:34 - front end
03:35 - so
03:36 - with that said I already got my branches
03:38 - checked out uh the back end should be
03:41 - good to go unless we run into any
03:42 - problems but the front end I didn't do
03:44 - anything to it yet except uh kind of
03:47 - build out the profile page which is
03:49 - unrelated
03:51 - to what we're trying to accomplish here
03:53 - today but I mentioned it because the
03:55 - invite section is going to go on the
03:56 - right now eventually my plan for this is
04:00 - to kind of like
04:02 - of course have more features on the site
04:04 - rather than just be just being able to
04:06 - sign in and invite more people and
04:08 - that's it you can't even do anything
04:09 - just invite people but um
04:12 - I eventually will probably have these
04:14 - subsections Under tabs like my posts my
04:17 - friends my photos my invite section so
04:20 - and so forth
04:21 - but for right now invite is the only
04:23 - feature we got so I'm pretty much going
04:24 - to plop it right here on the right and
04:26 - then later on we can you know have under
04:28 - its own tab or subpage or whatever we
04:30 - decide to do but right now we're just
04:32 - going to get down and dirty and build it
04:33 - right like that
04:35 - all right so for render right what I'm
04:39 - so the structure kind of give you guys
04:41 - what I'm going for it's probably going
04:43 - to be similar to this
04:45 - where I'm gonna have a section like this
04:48 - that's going to say invitations and then
04:50 - I'll have I'll have it either say add or
04:52 - create and then once we do then we'll
04:56 - pretty much have something that looks
04:58 - like pretty similar to this actually
05:01 - where
05:03 - actually let's just start with that
05:04 - heading and take it take it nice and
05:06 - slow
05:07 - let's take it nice okay so
05:11 - what we can do is actually steal it from
05:13 - Pages sell products
05:17 - see what's going on with you
05:19 - so just like products I want a grid
05:24 - and then with columns in it and padding
05:27 - top and bottom should be good okay
05:30 - now we can even get this section heading
05:33 - before that
05:35 - so
05:38 - yeah let's go ahead and just jump in and
05:39 - get our feet 30. okay
05:41 - so on the right hand side what I'll do
05:45 - is I'll create a section heading
05:48 - props you take
05:50 - okay so you need a heading
05:54 - and we'll just say
05:58 - invitations and then
06:01 - for the right content it's going to be
06:03 - button
06:07 - so let me just steal these two
06:12 - and
06:18 - clean up my imports just getting kind of
06:21 - the structure of things right now
06:22 - so we're going to need a button
06:25 - that you click and it's eventually going
06:27 - to open a modal maybe let me think
06:30 - through this in a second but
06:33 - now
06:39 - we'll just say whenever you click it it
06:41 - logs out click
06:42 - and render button
06:44 - add a new invitation I'm thinking crate
06:46 - sounds a little bit more intuitive I
06:48 - want to create a new invitation
06:51 - now this button is going to be the right
06:55 - content
06:57 - for this section heading
07:01 - all right review review then let's see
07:03 - what we got going on so far
07:09 - okay invitations create and then you
07:12 - create one
07:14 - and then the uh do we even need a modal
07:18 - or maybe we can just
07:20 - let's see on the back end whenever we
07:22 - create one so post
07:25 - invitations what was I passing in
07:34 - first whenever we just created an
07:36 - invitation
07:38 - okay so whenever we create an invitation
07:40 - we don't need to pass up any data
07:44 - because on the back end it generates the
07:46 - unique code
07:47 - of course the ID by default the note is
07:50 - just blank
07:52 - the owner is you and the recipient no
07:54 - one accepted it yet because you you know
07:56 - it's just default
07:58 - um so in that case I'm thinking that
08:01 - maybe we don't even need
08:04 - modal year
08:06 - because
08:08 - one option that we have is whenever we
08:11 - create an invitation
08:14 - then we can probably send up a default
08:16 - note
08:22 - is that the same ID okay
08:25 - so what we could do is we can say
08:27 - whenever I create this pop up in a modal
08:30 - and it just has a note field and then
08:33 - you have the option of filling that out
08:34 - or leaving it blank and then hitting
08:36 - submit and then we can just use that
08:38 - whenever you're editing the invitation
08:40 - because whenever you edit it
08:43 - um you're going to be able to edit this
08:44 - note as well
08:46 - so maybe we will go with that logic
08:50 - for now what we can do is actually just
08:52 - display the empty state
08:54 - so on my similar to cell products
09:01 - what we can do is this
09:05 - we can say render content
09:09 - and if there are no invitation length
09:13 - then just return that empty state
09:15 - surrender content we just put an empty
09:18 - list here
09:21 - and then we'll just say return null as
09:23 - well
09:27 - all right so this is going to be if you
09:29 - have invitations basically if
09:31 - invitations list has a length then go
09:34 - ahead and render them out otherwise or
09:36 - so
09:38 - we'll say no invitations to display
09:42 - as an empty text components
09:44 - oh
09:48 - and then that render content
09:51 - and go right under this section adding
09:57 - foreign
09:59 - okay no invitations to display perfect
10:03 - so now let's go ahead and
10:05 - let's go with the modal method
10:10 - and then we'll get some invitations
10:13 - okay yeah this will allow us to uh
10:16 - connect with our back and pretty quickly
10:19 - too
10:22 - how do I want to do this okay
10:24 - let's get this modal going and we'll say
10:28 - um
10:31 - it's not create it's not edit we will
10:33 - just say
10:34 - invitation model
10:37 - yeah
10:42 - Invitational
10:44 - okay so you got styles
10:48 - and then you have a main component file
10:51 - which is an index
10:54 - and then rename this
10:58 - to invitation model
11:05 - okay actually let me pause the video I
11:07 - gotta go blow my nose it's running for
11:10 - some reason
11:14 - all right and we're back nose blown that
11:18 - is the nose update
11:20 - and let's see what else okay
11:24 - so first thing I could probably do is
11:26 - just uh create a simple modal from this
11:30 - where
11:32 - can I still address select model trade
11:37 - um
11:39 - create edit
11:44 - yeah let me
11:47 - I really just want a simple form in here
11:50 - but okay
11:54 - so first
11:56 - probably just need to style this modal
11:58 - okay
12:01 - so let me get a styled modal in
12:10 - it will be fluctuation column with 360.
12:13 - we'll see how that looks we need to
12:15 - tweak it a little bit later on
12:17 - but now I really just wants to get
12:21 - something there
12:22 - so
12:28 - this will be a modal and it will say uh
12:34 - it'll either say create or edit
12:36 - invitation
12:42 - this will be determined by what we're
12:45 - actually doing to this invitation if
12:47 - we're creating one or editing one but
12:49 - for right now we can just hard code this
12:51 - in
12:52 - and now I just want to make sure that
12:54 - it's appearing on the screen so
12:59 - yeah it's gonna be the same pattern as
13:01 - this
13:04 - imitation modal invitation modal
13:09 - all right so we can say
13:11 - invitation model is open
13:14 - and toggle
13:17 - invitation modal
13:20 - for the state variables and now here
13:26 - did I import my modal yep
13:28 - okay
13:29 - so if the invitation model is open then
13:32 - what we want to do is we want to render
13:33 - the invitation model with the close of
13:36 - toggle imitation model
13:39 - otherwise we are going to render a null
13:42 - and then also
13:46 - oh we have
13:49 - two buttons on our profile now don't we
13:53 - your render button
13:56 - oh I see okay
14:00 - and
14:01 - this is a button two
14:04 - so for render button I'll say render
14:07 - um
14:08 - create invitation button
14:15 - alright so render create invitation
14:17 - button and that way we can differentiate
14:19 - it from our button right here which is
14:22 - our edit profile button
14:24 - and then
14:26 - when you click this
14:29 - instead of handle button click what we
14:31 - want to do is we can just do toggle
14:33 - invitation model
14:35 - get rid of this click Handler
14:38 - and that should give us our logic so
14:40 - create
14:42 - invitation there we go
14:44 - close
14:45 - and apparently I'm plus oh wait a minute
14:48 - pass it in the wrong prop or not
14:51 - accepting props at all
14:53 - okay
14:54 - so here what I need to do is
14:58 - create an interface so we can accept
15:00 - that close prop
15:02 - so in my invitation modal
15:05 - I'm going to be passing in a closed prop
15:07 - so to accept them this is what I do
15:10 - and then pass that bad boy through
15:14 - and then whenever you click the close
15:16 - button on the modal it should get that
15:18 - closed logic now
15:20 - as long as I'm passing it through yeah
15:24 - so again there we go open close open
15:28 - close beautiful okay
15:31 - so we got a modal and so this is going
15:34 - to allow
15:36 - for us to either
15:39 - add invitations or edit them either way
15:43 - the only thing that we are doing is
15:45 - working with the notes field
15:48 - so
15:49 - let's go find a form a very simple form
15:52 - that we can use
15:54 - and where do we have the simple form
16:00 - maybe they'll withdraw form
16:04 - shop uh add a carton cart
16:09 - yeah maybe the withdrawal form is
16:12 - easiest
16:17 - all right so let me just borrow some of
16:19 - this logic and let's see
16:24 - so first can close out of U
16:29 - and we're gonna be working in the
16:31 - invitations model
16:33 - so I don't need any you
16:36 - and this is the form that I want to
16:38 - steal
16:42 - okay okay okay okay okay
16:48 - and you know what I'm thinking of
16:51 - is even though it's a little bit more
16:53 - complicated of a form
16:56 - it may be better
17:01 - um
17:04 - maybe address details because I'm
17:06 - thinking we get this logic where we
17:08 - pretty much have something
17:10 - and we can determine
17:14 - if we're editing it or updating it
17:18 - foreign
17:20 - yeah
17:22 - yeah
17:23 - actually what I'm thinking I want to do
17:26 - even before creating this form is kind
17:29 - of set up my uh Redux store to where
17:32 - these invitations are going to be stored
17:34 - and I say that because that is going to
17:36 - require me typing out my invitations
17:40 - and then
17:42 - from those types I can make the API
17:44 - endpoints in the dispatcher functions
17:46 - and then kind of work the opposite order
17:49 - by the time I get to my form I'm going
17:51 - to have all my pieces ready otherwise
17:54 - we're just going to have to print out
17:56 - some data here and not do anything with
17:58 - this so let me do that so
18:01 - uh do I have actually do I have any
18:04 - invitation logic at all in my store or
18:07 - in my types
18:08 - I don't think so
18:10 - interesting
18:16 - okay cool
18:17 - so on that note Let's uh get our good
18:20 - buddy old chat GPT out here and we can
18:24 - start typing these out so my two models
18:27 - I'm going to need are of course my
18:29 - invitation
18:31 - and then invitation limit
18:35 - so I will say
18:39 - and I believe that we already have
18:41 - creating modified
18:44 - okay
18:45 - so first of all let's just type out our
18:47 - invitations
18:50 - new typescript file
18:54 - invitations
18:55 - and
18:59 - yeah where are we
19:07 - okay so creating modified is going to
19:09 - come from here
19:13 - and this is going to be my same design
19:16 - pattern
19:20 - fix come from generic
19:24 - all right so basically I want to have an
19:28 - invitation
19:35 - and then
19:36 - it has an ID it has created and modified
19:40 - and then we're going to be storing them
19:43 - keyed by ID
19:45 - okay
19:47 - so now Chad GPT
19:50 - why don't you
19:52 - and actually how did these come back
19:55 - so the owner which is the Creator and
19:58 - the recipient
20:04 - okay this is interesting this is
20:07 - interesting
20:08 - so right now I have them coming back
20:10 - where everything is in ID
20:13 - but I'm wondering
20:15 - if the recipient
20:17 - should be a user retailizer so we get
20:20 - their information that way on this page
20:22 - right here
20:24 - whereas on this profile page when we see
20:27 - who
20:28 - accepted it
20:31 - then yeah it would make sense to
20:33 - actually see them
20:35 - you don't need to serialize the owner
20:37 - because you're on their profile page
20:43 - so let's do
20:47 - all right
20:51 - so on my serializers
21:00 - I only have this
21:09 - okay okay okay okay okay
21:23 - all right now I don't know if I'm gonna
21:25 - have to create a new serializer or what
21:27 - but
21:30 - just make sure of one other thing and
21:32 - that is this
21:36 - so let me get my invitations and in one
21:39 - of these I just want to test around
21:41 - where let's see
21:43 - so
21:45 - let's see the is one
21:48 - what happens whenever you do have a
21:50 - recipient will say it's uh Emma
21:53 - so in that case
21:58 - yeah the recipient is just an i user ID
22:01 - right now but what we want to do
22:03 - is we want to use a user read serializer
22:06 - for that
22:07 - mm-hmm okay
22:10 - so
22:15 - uh that would be
22:20 - user read serializer read-only equals
22:22 - true and this is imported from
22:26 - the Boston users
22:30 - and this is the recipient
22:42 - now is this good enough
22:47 - okay so now the recipient is being
22:49 - serialized and now let me just make sure
22:51 - my creation logic still works
22:54 - create an invitation hey now
22:57 - and that is good okay
23:00 - I should be looking all right now
23:05 - yeah recipient is either null or a user
23:08 - read serializer
23:12 - and now let me just make
23:15 - this
23:23 - thank you
23:24 - all right looking good looking good
23:28 - looking good looking good looking good
23:29 - looking good okay so now what was I
23:31 - gonna do have chat GPT
23:35 - correct me an interface for this
23:37 - I don't even think we need to it's
23:39 - easier if we just do it ourselves okay
23:41 - so the owner
23:44 - of these invitations is going to be a
23:47 - number
23:51 - and then and then
23:54 - let's see uh the recipient
24:00 - okay let's do note first
24:02 - so code and note are both going to be
24:05 - strings
24:14 - and note there's also a string and then
24:18 - for the recipients what we're gonna do
24:23 - is use user read serializer
24:40 - so actually it's going to be null
24:46 - okay
24:48 - okay so recipient is nullable
24:53 - so for recipient we can say user
24:56 - serializer or no
25:00 - okay this should be good
25:04 - all right so invitations have they do
25:07 - have created modified right oh this is
25:09 - interesting
25:11 - oh very interesting I thought I added
25:13 - that
25:16 - oh invitations have created modified but
25:18 - they're just not
25:24 - in our serializer
25:33 - read only fields
25:36 - actually let me do this I just wanted to
25:38 - see my usage and some other parts
25:44 - read only fields
25:49 - read only field
25:54 - so I'll pretty much just have to eat
25:55 - them
25:56 - they say eat them
25:58 - add them to read only fields
26:04 - yeah because in fields we don't want the
26:06 - user to pass these up these are all
26:07 - unmax so file
26:10 - file
26:13 - okay so now
26:16 - Let's test this again from the top
26:20 - so in creating invitations you could
26:23 - pass an optional note send that you get
26:26 - this back
26:31 - which is interesting
26:33 - and then when you get your invitations
26:36 - wait a minute
26:41 - did I have to add that to the fields
26:44 - in addition to the read-only fields
26:50 - of course that crane
26:53 - maybe so that would be interesting okay
27:09 - cool created modify
27:21 - all right so server is updated now let's
27:25 - see this logic so I'm creating
27:27 - invitations note yo okay create a date
27:31 - and modify day
27:33 - um I don't have to pass those in and
27:35 - then whenever I get invitations they
27:37 - also have a credit and modified day
27:39 - beautiful all right
27:42 - so one more time hopefully make lint I
27:46 - thought I had the invitation model all
27:47 - ready to go but apparently it was
27:49 - missing a few things but that's all
27:50 - right we chug along
27:52 - all right so back in hopefully he's good
27:55 - now although I have a feeling it's not
27:57 - going to be the last time I say that uh
28:00 - invitation okay
28:03 - okay so from here
28:05 - let's go ahead and uh pretty much just
28:09 - import into our main index file
28:12 - invitations come over generic
28:18 - all right so from invitations what new
28:20 - types do we got so we got the invitation
28:22 - type for a single invitation and
28:24 - invitations which is how it's going to
28:27 - be stored in Redux
28:29 - and then they go right here
28:36 - St okay okay all good all good and now
28:43 - let me go ahead and create a little
28:45 - slice for them so in this store I'm
28:47 - gonna create new invitations file
28:49 - however before you do that we need to
28:52 - actually
28:53 - use these from constants
29:05 - notations
29:09 - invitations
29:11 - now
29:13 - we can use it here
29:16 - or wait a minute here
29:18 - the only question becomes
29:21 - what do we need to be able to do to
29:24 - these so
29:25 - we need to be able to create them
29:29 - edit them
29:30 - set a list at a time for example
29:33 - whenever you go to this page we're going
29:34 - to be fetching all our invitations and
29:37 - also delete them and the logic I have on
29:40 - the back end for deleting is you are
29:42 - allowed to delete an invitation if it
29:43 - has not been accepted yet of course once
29:46 - it it's accepted you can't really like
29:48 - delete it or it's like
29:49 - gonna have to delete the user who
29:51 - accepted it as well and that is just a
29:53 - bit messy so
29:55 - on that note what I'm thinking is pretty
29:58 - much Where to steal this logic from
30:00 - and I'm thinking products because
30:02 - products you can
30:04 - create and edit
30:07 - set multiple
30:09 - and then delete them as well so this is
30:12 - pretty much the exact same logic that we
30:15 - want
30:16 - and in that case steel okay
30:20 - so let me replace this with invitations
30:25 - so products constant is replaced with
30:27 - invitations
30:29 - products
30:30 - is going to be replaced with invitations
30:36 - products
30:37 - it's going to be replaced with
30:39 - invitation
30:40 - and then products is going to be
30:43 - replaced by
30:46 - expectations
30:48 - and now let's just read through it to
30:49 - make sure we didn't mess anything up so
30:51 - this constant
30:52 - hopefully I knew what it writes
30:54 - invitations looking good okay
30:57 - now importing this the initial state is
30:59 - just an empty dict for your invitations
31:02 - this is your initial State this is the
31:05 - name of it and for the reducer set
31:08 - invitation you're going to be passing an
31:10 - invitation
31:11 - when you say multiple invitations pass
31:14 - in the list of invitations
31:17 - that those are ID and then to Onset you
31:20 - pretty much should pass in an ID which
31:22 - is a number and you delete it from State
31:25 - and all of these look good so
31:28 - in my store index let's go ahead and
31:31 - piece these together
31:34 - okay so exchange orders
31:39 - all right
31:41 - so I'm now adding a new
31:44 - slice it's my state and it's invitations
31:47 - and the value is the invitation your
31:49 - producer
31:52 - all right that looks good and now the
31:54 - last thing that we're going to do for
31:56 - now
31:57 - is just create a selector function from
31:59 - it to pull that data from our store
32:03 - so invitations
32:05 - okay so now I call the selector function
32:08 - get invitations just give me all the
32:10 - invitations in my store AKA state
32:14 - all right looking good now on that note
32:18 - what we can do is we can go ahead and
32:20 - create
32:22 - our API functions and then
32:26 - yeah later on our dispatcher functions
32:29 - so first API functions so refactoring
32:32 - name get this word
32:38 - all right
32:40 - so I believe we can just steal these
32:43 - as well
32:49 - uh-huh
32:51 - maybe addresses would be even better
33:01 - so we're going to be creating
33:04 - yeah this is better
33:12 - and also for the create address request
33:17 - yeah I'm going to type this out too
33:23 - okay
33:26 - so here
33:28 - under this API address I had the fields
33:30 - whenever you're creating an address
33:35 - yeah let's do this so a refractory name
33:37 - we're going to create another typescript
33:39 - file
33:41 - and this is going to be called
33:45 - create invitation request
33:50 - and what do you accept
33:55 - well all you except is a note string
34:02 - and now we can use that
34:05 - whoa
34:10 - types invitation get all my types in
34:12 - order
34:13 - and all right so now we just gotta
34:15 - import to you
34:21 - all right so we have a new creates
34:24 - invitation request type
34:29 - and you're going to go right there and
34:31 - now
34:39 - so I'm going to use the same pattern
34:44 - for addresses
34:46 - however instead of addresses
34:49 - it's going to be invitations
34:52 - and now anytime that you see the word
34:55 - address replace it with invitation
34:59 - let me do words only
35:06 - invitation
35:09 - just make sure all these are going to be
35:10 - good good good good
35:17 - and then
35:22 - actually maybe this is fine too if I
35:24 - don't do words so create imitation
35:26 - requests create invitation request
35:28 - delete invitation
35:30 - get addresses that's going to have to be
35:31 - fixed up but let's do this
35:35 - okay this should
35:38 - believe gives all the logic we need
35:43 - okay so let's read through it and make
35:45 - sure it all worked out so we are
35:49 - importing from this file an invitation
35:51 - object or excuse me invitation type and
35:53 - create invitation request
35:57 - now the endpoints invitation whenever
35:58 - you call create invitation
36:01 - you're going to be passing in this
36:03 - request data
36:05 - which is just a note
36:08 - and then you're going to be getting back
36:10 - a full invitation
36:13 - which is what we want now to delete it
36:17 - just give it a number you're not going
36:19 - to be getting back in anything
36:22 - now when you get invitations you're
36:23 - going to be getting back a list of
36:24 - invitations
36:28 - we want and then when you update the
36:30 - invitation you give us the ID of what
36:32 - you want to update and then the same
36:35 - data pretty much just the note it's the
36:36 - only thing you can do whenever you're
36:38 - updating
36:39 - and then you're going to get back the
36:40 - updated invitation and this looks all
36:44 - good okay
36:46 - so now that those are taken care of
36:49 - that's actually
36:53 - make our dispatcher functions for us so
36:57 - dispatchers
37:00 - invitations and we can probably just
37:02 - borrow all of these as well
37:11 - okay so now instead of address just
37:15 - replace it with invitation
37:18 - and I'm also going to need to re do this
37:27 - dresses
37:32 - invitations
37:36 - and get invitation and set invitations
37:40 - out correctly
37:48 - okay so this should give us our
37:49 - dispatcher functionality but let's see
37:52 - create
37:54 - delete
37:56 - get invitations
37:58 - update invitations we're going to set
38:01 - one set multiple or delete
38:05 - by unsetting
38:09 - okay whenever we create we pass and
38:10 - create invitation request
38:12 - and then we set an individual
38:14 - information with that data to delete it
38:17 - we're going to be passing an ID and then
38:19 - we're going to unset it from the store
38:20 - after it comes back from the back end
38:22 - that we deleted it to get invitations we
38:25 - aren't going to pass in any filters or
38:27 - any query params for now
38:29 - and then we're going to set those in our
38:31 - store and then to update
38:35 - what we're going to be doing
38:38 - just updating
38:41 - ID data set invitation store okay
38:45 - so now that we got everything structured
38:48 - hopefully everything's working correctly
38:50 - we can go back to our page
38:56 - uh where is that profile index and then
38:59 - from there we actually we're doing
39:00 - things in the modal
39:03 - so invitation model is open
39:07 - okay
39:09 - okay So eventually what we're going to
39:11 - do is we're going to be passing in
39:15 - the prop here
39:19 - depending on if we're creating or
39:21 - editing one
39:26 - right now let's just uh work on the
39:28 - creation side of things so shop
39:32 - uh sell products
39:43 - okay
39:48 - and now I'm wondering if
39:52 - you know let's just get easier form for
39:54 - now okay
39:57 - so let's use the exchange uh
40:02 - yeah where was that the exchange
40:07 - and then it was in the main area
40:10 - trade
40:14 - see what we can do is this
40:17 - so now I just want to work on the form
40:19 - logic just figuring out where I can
40:20 - borrow it from all right so withdraw
40:24 - we'll just use the same logic as this
40:26 - form
40:27 - and I will just say pretty much just
40:30 - find it already
40:31 - find it
40:34 - and I'm going to be stealing a bunch of
40:36 - stuff from you
40:39 - okay so first of all let's just get to
40:42 - our initial values and we can do this as
40:46 - well
40:47 - so in this modal
40:50 - what we're gonna do is we are gonna have
40:55 - pretty much building uh create
40:56 - invitation request and we're going to
40:58 - have a note
40:59 - an empty string
41:02 - now we are eventually going to need to
41:05 - validate that
41:07 - with a validation schema
41:12 - and for this we need to use memo that
41:15 - comes from react
41:17 - and then yup for validation
41:23 - goes yep
41:24 - and then what we can do
41:29 - is we can say
41:33 - let's get another validation scheme
41:35 - actually
41:43 - address string okay
41:48 - so I guess this is pretty much it where
41:50 - we have a note field
41:54 - and we'll just validate that it's a
41:56 - string for right now however
41:58 - I believe we're going to need to
42:02 - let me check on the back end actually
42:04 - note yeah it has a max length of 255 but
42:07 - we can work on all that later okay just
42:10 - want to get things working right now
42:13 - um let's see on that note let's go ahead
42:15 - and
42:16 - see what we need to import for this
42:18 - so formic form inputs and button
42:22 - so formic and form are going to come
42:25 - from formic
42:31 - and then our input and button
42:36 - from components
42:40 - so now let's get a form being displayed
42:42 - so formic steel U
42:48 - H you're going to be displayed right
42:50 - here and then handle submit
42:53 - we'll just log basically the data out
42:57 - for now
42:59 - so on handle submit
43:01 - what we can do
43:05 - is actually just say
43:13 - yeah we'll just log out those values
43:19 - we don't need U
43:21 - if there is error we'll say error
43:23 - creating invitation
43:28 - even though this may say error updating
43:30 - invitation we will also replace that
43:33 - later
43:36 - so we have a note
43:39 - that we are here we go
43:47 - so we have a note field
43:49 - and it's named note
43:51 - and the type is text which is the
43:53 - default type for this
43:56 - and for this button we can say
44:00 - um
44:01 - submit
44:03 - and then on submit it's going to call
44:05 - handle submit
44:08 - which is just going to log out the
44:10 - values for now
44:12 - so
44:13 - let's go ahead and
44:16 - just make sure nothing is broken so far
44:18 - so I'm going to create this
44:20 - and then once I add a note like that
44:24 - it just logs this out okay looking good
44:27 - now the next thing we need to do from
44:29 - here is actually
44:31 - send this data to the back end so
44:36 - what we need to do is we need to import
44:38 - dispatch and that's going to require app
44:40 - dispatch
44:42 - so whoa whoa whoa
44:45 - what's going on here
44:46 - oh yeah display air toast
44:49 - uh at this patch
44:57 - you
44:59 - and then
45:04 - all right
45:07 - and then dispatch is going to use use
45:09 - dispatch from reactor Redux
45:15 - let's get everything that we are gonna
45:17 - need
45:18 - all right so dispatch I'm gonna need you
45:22 - and then also might as well get this
45:25 - standard
45:29 - all right so from dispatchers
45:33 - invitations what we are going to need
45:35 - right now in this create invitation more
45:38 - later but not right now
45:42 - and then whenever we submit this form we
45:45 - are going to call create invitation and
45:48 - the data is just going to be the values
45:53 - foreign
45:59 - so now if this goes correctly
46:03 - we should be
46:07 - able to create invitations on the back
46:10 - end
46:11 - so now let me actually delete all of
46:13 - these
46:14 - so we can see more clearly if it worked
46:19 - all right
46:21 - so now just going to refresh this make
46:23 - sure we got a clean start note is uh
46:26 - yeah
46:27 - for Betty this invitation is for Betty
46:31 - so I'm gonna submit this
46:35 - okay it looked like on the back end
46:39 - it created it
46:41 - we got our data back and now
46:44 - we just need to close the modal
46:50 - so after this just close the modal and
46:52 - probably put up a success toast too
46:55 - let me think
46:58 - yeah so after I create and edit a
47:01 - product pretty much want to follow that
47:03 - same design pattern
47:07 - so after you created a product
47:09 - yeah
47:11 - it says product created in the toast
47:14 - type
47:15 - success
47:16 - and that's coming from enums
47:20 - okay
47:23 - so once you
47:30 - create an invitation
47:32 - then we'll say invitation created
47:36 - and then we'll close the modal as well
47:42 - so now let's test out our new
47:43 - functionality
47:45 - all right so this one we can say for Bob
47:49 - submit that invitation created
47:51 - invitation created the model closed
47:54 - looking good
47:55 - so now we should have also invitations
47:58 - in our store
47:59 - awesome
48:01 - beautiful beautiful
48:03 - so what to do next what I'm thinking is
48:08 - even though eventually what we're going
48:10 - to want to do is update this invitation
48:11 - model to support editing invitations
48:13 - right now
48:15 - what we can do from here is actually
48:17 - just render out these invitations and
48:19 - then we'll kind of uh build it
48:22 - um intuitively where
48:24 - once we have these invitations rendering
48:26 - out
48:27 - then what we can do is we can add like a
48:30 - little section on the right I don't know
48:32 - if it's going to be
48:35 - um just these action links right here I
48:37 - kind of like the idea of having a drop
48:40 - down list instead but either way for
48:43 - each of these invitations we are going
48:45 - to want to say edit or delete
48:48 - um depending on if they've been accepted
48:51 - or not
48:52 - what I'm thinking of a drop down
48:54 - probably since we have kind of limited
48:55 - space here but either way let's just go
48:57 - ahead and work on that right now
48:59 - okay
49:01 - so
49:03 - whenever
49:06 - I render this
49:09 - what I probably want to do
49:14 - actually in this profile do I have this
49:15 - invitation section that I didn't use yet
49:24 - all right so I'm done with the model
49:25 - right now this is my profile this is my
49:27 - profile Styles let me just see what I
49:29 - did with cell products
49:32 - okay
49:34 - yeah I have render products and products
49:36 - rendering there this is pretty much the
49:38 - exact same design pattern that I want
49:40 - okay
49:41 - so here instead of products I'm going to
49:44 - have invitations
49:51 - so
49:54 - invitations and we'll keep it a grid
49:58 - um but how many columns so we have a
50:00 - column for the user label that's one the
50:02 - notes is the second column
50:05 - the third column
50:07 - is the code
50:09 - the fourth one we can render a status
50:12 - and then the fifth one can be the
50:14 - actions
50:15 - so we'll say
50:19 - uh let's say
50:22 - yeah I don't know how this is wait we
50:25 - have five right so let's do two
50:28 - two one one one
50:31 - we can always change that later but
50:32 - basically we have five columns in the
50:34 - first two which is the user label and
50:37 - the notes can be a little bit bigger
50:39 - than the the code the status
50:41 - and then the action buttons
50:44 - okay
50:46 - so now let's just copy this pattern
50:48 - where we can say render invitations
50:57 - and then what we can do
51:03 - is let's just get
51:11 - all of our
51:20 - one two three four five
51:29 - Okay so so
51:32 - how do we want to do this let's just go
51:34 - ahead and get our invitations first
51:38 - and we don't need you and you're in the
51:41 - wrong place
51:45 - all right
51:47 - so just like we were selecting our
51:49 - products here we need to use selector
51:51 - from react Redux
51:56 - and then first selector State we are
51:58 - going to do get invitations
52:06 - and then pretty much just like we did
52:09 - here
52:13 - okay so we are gonna say
52:17 - we're gonna get the invitations we're
52:19 - gonna store you in a variable called
52:21 - invitations
52:23 - and then we're going to clean up our
52:24 - Imports
52:32 - we do that invitation list
52:39 - yeah I kind of like this method
52:47 - forgot where else we had it maybe
52:49 - addresses
52:52 - it was by addresses yeah dress lists
52:54 - like this
52:58 - is going to be invitation list
53:02 - and right now we may need to do some
53:04 - filtering later but
53:06 - it'll basically just give us a flattened
53:08 - list of all our invitations since by
53:10 - default they're keyed by ID and object
53:14 - and now here we can say if you have any
53:16 - invitations in your list then just go
53:18 - ahead and render those invitations
53:21 - otherwise just say no invitation to
53:23 - display
53:24 - and now
53:28 - what we can do is we can say ordered
53:33 - invitations
53:35 - are equal to your
53:38 - invitation list sorted by created dates
53:42 - and now for each of your ordered
53:44 - invitation
53:46 - what you are going to do is you miss
53:49 - their computer
53:52 - are gonna pretty much create that
53:54 - invitation component from those
54:00 - which we don't have yet but we will soon
54:06 - and then you're going to render them in
54:08 - the invitation section
54:10 - first let me pretty this up
54:12 - and all right so next thing we got to do
54:15 - is just create an invitation component
54:20 - and then we should be looking right
54:23 - and this is actually going to be pretty
54:25 - similar to this product component right
54:27 - here so let's see what we got going on
54:29 - over there
54:30 - okay
54:36 - okay so let's just do this off the bat
54:39 - so we're going to make a new pretty dumb
54:43 - component I would say
54:45 - and it's just going to be an invitation
54:47 - components
54:48 - and then you're going to have some
54:49 - styles
54:52 - and then we need a main component file
54:54 - for you
54:58 - instead of this we're just going to say
55:00 - invitation
55:02 - and you are not going to have any class
55:05 - name
55:08 - at all
55:16 - okay
55:17 - so you are
55:20 - wait so we don't have any Styles and
55:22 - then either
55:24 - oh we can okay
55:28 - no container though
55:31 - yeah I don't believe we need a container
55:33 - here either
55:37 - all right so clean up some unrelated
55:39 - code right here but okay
55:41 - so yeah we don't need a main container
55:43 - in this Styles file because
55:46 - we are using it
55:52 - we don't need to import you just yet so
55:54 - anyways you are going to have
55:59 - five columns
56:05 - one two three four five so let's
56:08 - create those right now so div so this is
56:11 - going to be uh the user label
56:16 - so this is going to be the leftmost
56:17 - column and then we have the note
56:23 - and then we have the code
56:27 - and then we have the status
56:30 - maybe we'll remove this but this will
56:32 - either say pending or accepted and then
56:34 - last but not least we'll have the
56:36 - actions that you can do
56:38 - and now for each of these
56:43 - what I want to do
56:48 - is we can just import
56:57 - that invitation object
57:00 - and all right
57:04 - okay
57:07 - so this is also going to take an
57:09 - invitation and we aren't getting yelled
57:11 - at right now
57:14 - we will
57:15 - so I want to import invitation as T
57:18 - invitation since the component is also
57:20 - named invitation
57:22 - and then
57:24 - what I can do is just say I am passing
57:26 - in the invitation
57:28 - through invitation props
57:31 - so you are going to accept an invitation
57:37 - and now what we can do is just kind of
57:39 - start rendering some of this so
57:41 - invitation Dot
57:43 - that was the note
57:45 - and invitation.code in that and that'd
57:48 - be good for right now
57:52 - so this invitation component takes an
57:54 - invitation
57:58 - and all right let's see what we got
58:01 - okay looking good looking good in the
58:03 - neighborhood for Betty for Bob and let
58:06 - me create one more for Carl
58:10 - and they're all being sorted like we
58:12 - want the user label will go here
58:15 - if there is a user otherwise just null
58:20 - and then here's the code status and the
58:24 - actions can be a drop down so that's
58:26 - looking good for
58:28 - now
58:31 - cool cool cool cool cool
58:34 - okay
58:35 - so now let's just actually just start
58:36 - working left to right and
58:39 - um
58:40 - yeah piecing this together
58:42 - so first I think this might be good for
58:45 - this page
58:49 - make sure my imports are in the right
58:50 - order I don't think we need to do too
58:52 - much to it but we can always come back
58:54 - to it if so
58:56 - okay so now let's tackle this
59:01 - so first I want to go to components and
59:03 - look at my user label
59:08 - oh this is interesting
59:13 - hmm
59:15 - so user label
59:20 - it doesn't take a user object instead it
59:22 - takes and I like this actually
59:28 - okay
59:30 - name description
59:33 - an avatar
59:37 - mm-hmm
59:41 - so what I can do
59:44 - I'm just trying to think what to uh
59:46 - display when the user is null otherwise
59:49 - in other words they like didn't accept
59:51 - the invitation yet so there are two
59:54 - options here what we can display is a
59:56 - user label by the way this is the user
59:58 - label component right here
60:00 - so we can display a user label with
60:04 - just the default profile picture and
60:08 - basically just dashes instead of here or
60:10 - we don't have to display the user label
60:12 - at all we can just put a hyphen instead
60:14 - but what I'm thinking is Maybe
60:17 - in a user label with the default is a
60:21 - little bit better
60:23 - so let's
60:29 - and for the avatar
60:31 - wait what am I doing this isn't even the
60:33 - front end okay
60:40 - yeah
60:42 - and for the Avatar that's being
60:44 - displayed on my user label what's going
60:45 - on with that
60:50 - thank you
60:52 - but either way let's let's just display
60:54 - a user label off the bats and then we
60:57 - can kind of uh
61:00 - figure out if this is the best pattern
61:02 - so
61:03 - cons
61:05 - render user available
61:08 - okay
61:10 - so we are going to display
61:17 - a user label
61:19 - and this user label is going to take a
61:21 - description
61:25 - and it's also going to take a name
61:33 - have two hyphens for now
61:44 - okay so let's just see this
61:48 - something like this and apparently for
61:50 - the user label
61:52 - we are not passing in
61:57 - Avatar
61:59 - and pretty much just using my face so I
62:01 - think I just hard coded something in
62:03 - that shouldn't be hard-coded so Avatar
62:08 - and then in my avatar go go okay
62:12 - oh yes so anytime I'm using an avatar
62:17 - here I'm just pulling the self Avatar
62:21 - instead of
62:24 - the user that I want to pass in
62:27 - so I just need to update this
62:30 - okay so need to update some other places
62:37 - okay
62:38 - so whenever we
62:40 - are using an avatar instead of just
62:43 - pulling my own avatar or whoever the
62:45 - logged in user is let's just go ahead
62:48 - and pass in a source
62:56 - and this source
63:00 - let's say
63:03 - that if it's an empty string then we're
63:06 - just going to use the default
63:09 - and that was the same logic that was in
63:12 - self Avatar so under my hooks
63:15 - you self Avatar
63:17 - what we can do is say this
63:24 - so
63:25 - we are going to be rendering a source if
63:28 - we pass it in now if this is equal to a
63:31 - blank string
63:32 - or null we'll say and we can use the
63:35 - default Avatar
63:43 - and that should work
63:46 - all right
63:47 - so for Avatar
63:52 - actually let's go ahead and see
63:53 - everywhere the Avatar is used Straight
63:55 - Up
64:01 - so this Avatar component
64:04 - is just being used in the user label
64:06 - right now which makes things a lot
64:08 - easier
64:11 - because then in the user label if we see
64:14 - everywhere this is being used
64:17 - then what we can do
64:26 - is we can just accept an avatar
64:30 - and let me make sure my naming is kind
64:33 - of in sync
64:34 - so yeah
64:42 - and then I also may want to replace a
64:45 - name with the username
64:47 - so Avatar is a string or null
64:51 - yeah this is good
64:57 - okay
64:59 - so when using the user label
65:03 - we're going to be passing an avatar
65:06 - which is a string or null
65:13 - and then in my avatar component actually
65:15 - this is called The Source
65:18 - okay so that's either equal to a string
65:22 - or no
65:23 - for the name
65:25 - I should probably just rename this to
65:27 - username huh to keep everything
65:28 - consistent
65:31 - so username username username and then
65:34 - for this styled components
65:37 - it's going to rename this to username
65:40 - qrstu
65:44 - yeah I think this is a little bit better
65:46 - a little bit tedious to go through and
65:48 - do it now but it'll pay off in the end
65:50 - Clarity is very important
65:54 - okay so now our user label component is
65:57 - kind of updated
66:00 - new and improved
66:02 - now we just gotta pretty much find all
66:04 - the instances of it that bro can update
66:06 - those
66:07 - so use your label first of all all right
66:10 - so the description is nothing for the
66:14 - username we'll just put the empty Dash
66:15 - right here
66:16 - and then for the avatar
66:20 - uh what we can do is we can just do null
66:27 - now where else are we using you
66:32 - so here actually let's just clean all
66:34 - these up so
66:41 - and then for the Avatar this would be
66:45 - order dot buyer dot Avatar
66:50 - and then for the seller's Avatar
66:53 - when you ordered a seller not Avatar
66:57 - should be good for that
67:02 - user reliable user label
67:06 - are on the buy checkout page too so this
67:09 - is username
67:15 - and for the Avatar this is self
67:19 - Avatar
67:20 - and then for the seller Avatar
67:24 - it is cart seller dot Avatar
67:30 - all right
67:31 - making progress here
67:37 - that is good
67:45 - username
67:46 - and for Avatar
67:48 - product the seller dot Avatar
67:56 - all right that looks good
68:00 - well what am I doing here here we go
68:02 - here's your label
68:08 - foreign
68:13 - I think this is the last one so
68:16 - this is a username
68:19 - and then for Avatar
68:22 - it is
68:23 - product.seller diameter
68:27 - all right so now all our user level
68:29 - components are updated
68:32 - so here let's just go ahead and
68:35 - all right everything recompiled that's a
68:37 - good sign and all right
68:40 - now in my shop yep
68:43 - okay
68:45 - so so
68:47 - just making sure that nothing broke by
68:50 - use your avatars
68:52 - okay good to go
68:55 - now
68:57 - so
68:59 - what I'm thinking is
69:03 - yeah so let me first uh just test the
69:06 - logic where when one of these
69:08 - invitations gets accepted and I'll say
69:11 - the zw1 was accepted by Carl
69:14 - so invitations ZW recipient I don't even
69:18 - have a Carl but uh
69:20 - do I have a bob
69:22 - okay so let's see that this invitation
69:25 - for Bob which is W1 was accepted by Bob
69:28 - so W1 was accepted by Bob Bob is set to
69:31 - the recipient gonna continue editing
69:35 - and okay
69:37 - so now we have
69:40 - oh we didn't even get the invitations
69:42 - yet did we
69:43 - nope
69:45 - okay so another thing that we have to do
69:48 - on
69:50 - yeah this is actually good helps me uh
69:52 - build it out so now whenever we go to
69:55 - our profile page we actually need to
69:58 - fetch those invitations
70:01 - so
70:02 - let me uh find out
70:05 - let me just borrow another use effect
70:06 - fetch somewhere
70:10 - and this one's perfect okay
70:12 - so here what we're doing is saying use
70:15 - effect
70:18 - and we want
70:21 - to dispatch
70:29 - and borrow this from the modals
70:30 - invitation modal okay
70:32 - so
70:34 - we want to dispatch
70:37 - the method to get invitations
70:50 - and then dispatch we are going to need
70:52 - you
71:01 - you selector use dispatch okay
71:05 - so now whenever we go to the profile
71:07 - page we're going to get our invitations
71:10 - so now when I refresh this
71:13 - it should have
71:16 - yep got those invitations and now in our
71:19 - Redux we should see
71:21 - the updated
71:24 - data for Bob okay
71:27 - so now
71:29 - we actually have Bob's invitation
71:32 - in here
71:33 - and I also want to give a profile pic to
71:36 - Bob
71:37 - so we can test that out too
71:41 - and I don't really think I can do it
71:43 - from here but if I log in as Bob
71:46 - from my app
71:48 - so log out login is Bob I believe his
71:51 - password is bacon
71:52 - one two three four five
71:55 - yep lucky guess okay so now Bob
71:58 - since that's your password you are now
72:00 - going to have a profile picture of bacon
72:02 - and now that I updated that log out
72:04 - login is Bucky profile okay
72:08 - so now I have Bob
72:12 - and he has a valid profile picture now
72:16 - so now we should be able to render his
72:18 - information right here
72:20 - so on that note what I'm going to do is
72:23 - whenever we're rendering this user label
72:25 - I'll say
72:31 - maybe I can just do it right here
72:33 - so
72:34 - I will say
72:36 - first check if there's a recipient or
72:38 - not
72:40 - so const
72:43 - ant implementation dot recipient
72:46 - all right
72:47 - so the Avatar I'll say if there's a
72:49 - recipient then render the recipient dot
72:52 - Avatar otherwise render null
72:56 - and I want to do the same thing with the
72:58 - username
72:59 - Over The Hyphen instead so a
73:02 - recipient.username otherwise the default
73:04 - for this
73:07 - is just a hyphen
73:10 - now let me pretty this up
73:13 - and we'll see what we got going on here
73:15 - okay
73:16 - so Bob
73:18 - accepted so that is why we are seeing
73:22 - his username and for this description
73:30 - probably just want to put the created
73:32 - date
73:37 - okay so for the description
73:43 - Hmm this is interesting
73:47 - so do I just always want to render
73:51 - and what do I have for dates tu
73:55 - uh
73:58 - long date
74:02 - okay
74:06 - so let me just see how the date looks
74:09 - although it may look a little bit funny
74:11 - but
74:18 - all right so for a description what we
74:20 - can do is we can just say the invitation
74:22 - is created date
74:25 - and then render them all like that
74:30 - looks pretty terrible so but I think I
74:34 - do want the date rendered right there
74:38 - kind of to see when you created the
74:40 - invitation
74:43 - but I don't like that date format at all
74:45 - whatsoever so instead
74:47 - what I'm going to do is I'm going to pop
74:49 - open one of my other projects
74:53 - and get another day util function
74:57 - so short date
75:04 - short date is today
75:07 - get time ago
75:09 - okay let's get all these
75:15 - so my date util functions
75:19 - hi Jake abcdfg
75:24 - hijkl
75:26 - this is going to require get floralized
75:29 - time
75:34 - a fancy date functions here but now let
75:37 - me just see how it looks for the short
75:38 - date
75:40 - when you pass in the short they you need
75:43 - include today at
75:47 - I'll say true
75:52 - okay
75:55 - see you
76:02 - all right that's a little bit better
76:05 - so now we are able to see I mean it
76:10 - still doesn't look great though because
76:18 - yeah I don't like this hyphen
76:24 - thinking that maybe
76:30 - hmm I mean is this better
76:33 - where
76:35 - we can say that
76:38 - if there is a recipient
76:41 - pretty much something like this
76:43 - if no recipient then we just return
76:48 - an empty label like this
76:58 - I mean is this better
77:02 - or is the other one better with like an
77:04 - empty user this one looks kind of weird
77:08 - we could also just render nothing but
77:11 - that's going to look super weird
77:13 - oh boy oh boy oh boy oh boy what do I do
77:16 - what do I do
77:19 - maybe maybe maybe
77:31 - well I will say of those two options
77:34 - I am leaning towards this one
77:38 - however
77:41 - maybe
77:44 - boy oh boy oh boy
77:48 - maybe I just need more dashes there
77:59 - hmm that looks kind of weird too but
78:01 - actually doesn't look awful not great
78:04 - but
78:05 - not awful
78:09 - I think I just need designer desperately
78:11 - all right all right so I mean it's
78:15 - working right now at least and that's
78:18 - the count for something okay
78:20 - so invitations uh apparently if you
78:23 - don't have a user this is the UI for it
78:24 - which feels a little bit funny but you
78:27 - know
78:28 - not that terrible I would say
78:32 - um this of course is the notes this is
78:34 - the invitation code that you can send
78:36 - them so now let's just go ahead and work
78:38 - on status and for this we're going to
78:41 - have two statuses kind of similar to uh
78:43 - cell products
78:45 - where it's going to have active in draft
78:47 - but it's going to be it's pretty much
78:49 - just gonna look like these instead of
78:51 - active in draft we'll say accepted or
78:54 - pending
78:55 - so on that note
78:57 - let's
79:00 - should we make these enums or not
79:04 - come on
79:05 - because they don't get stored in the
79:08 - back end that way
79:12 - but it would be nice to have those
79:14 - standardized but either way let's go see
79:17 - how we did it with products
79:19 - close out of you for now okay so store
79:23 - are not a store so Pages shop
79:27 - sell products we are rendering it a
79:30 - product
79:32 - and then for the activation status
79:35 - yeah we have a product activation badge
79:41 - and all this is gonna do
79:44 - oh wait we oh that's interesting
79:49 - it's not even a badge component
79:53 - interesting interesting very interesting
79:56 - well then why do we have this batch
79:58 - component
80:01 - all right we need to unify some stuff
80:03 - here
80:06 - yeah
80:08 - okay so what I thought was happening
80:11 - was that
80:12 - we made a generic badge component
80:16 - for like uh these uh displays right here
80:21 - and also I remember
80:26 - yeah near Exchange
80:30 - from your orders there was a badge there
80:32 - too
80:34 - but anyways what I was thinking we were
80:36 - doing
80:37 - is
80:38 - that
80:40 - this batch component for the shop
80:42 - pretty much used
80:45 - um that generic badge component that we
80:47 - have but it looks like it's just
80:48 - creating this whole new thing
80:52 - and I don't think we want to do that
80:57 - draft
81:04 - interesting interesting interesting
81:07 - interesting
81:16 - yeah
81:17 - so let's see if we could unify this and
81:20 - then we can pretty much take that same
81:22 - styling
81:25 - hmm
81:27 - okay
81:34 - green
81:43 - and then I think I want to add
81:45 - a draft state to this
81:48 - so
81:49 - right now we have active which is green
81:53 - for 100 on that
81:57 - says
82:00 - okay
82:01 - so first let's do this
82:05 - let's add another bad style called draft
82:16 - okay and then
82:20 - for this badge style called draft what
82:24 - we want to do
82:26 - is we can create a dark gray mixing for
82:29 - it
82:30 - and then we can say
82:33 - if you ever render that then just
82:36 - include that mix in
82:40 - okay
82:44 - okay
82:46 - so now
82:49 - what we can do
82:52 - is this
82:59 - when you render a badge you pass in the
83:02 - batch Style
83:06 - and text okay
83:09 - so what we can do here
83:11 - is we can say import
83:35 - yeah let's do this
83:37 - actually where did we do that
83:41 - yeah this is pretty much
83:45 - oh this is nice how how are we doing
83:47 - this
83:51 - oh yeah yeah yeah okay let's do this
83:55 - do exactly this okay
83:59 - so for the product activation badge
84:03 - what we're going to do
84:04 - is we are just going to pass in
84:09 - the activation status
84:13 - first let me delete my Styles file since
84:15 - we don't need any of this anymore
84:23 - and all right
84:25 - so
84:26 - for the activation status that's going
84:28 - to be the text of the badge and also
84:32 - the badge Style
84:34 - is going to be equal to
84:38 - active or draft so
84:43 - active
84:48 - yeah I like this design pattern okay
84:51 - so what we can do
84:53 - is we can say
85:00 - all right so if it's active we'll put
85:03 - you in success if it's draft
85:06 - then you get a draft badge
85:11 - so now to render product activation
85:13 - badge we just pass in the activation
85:15 - status
85:17 - and say
85:19 - if you are active you get success draft
85:21 - draft
85:22 - and then the text is activation status
85:25 - so that should work now let's see how it
85:27 - looks okay so first of all the green
85:29 - badge is a little bit too dark but I
85:32 - just want to test this logic where our
85:33 - badge is still working for active in
85:35 - draft okay perfect so now let me just go
85:38 - ahead and update this
85:40 - should we update these all the 400
85:43 - probably
85:48 - yeah let's just do it one by one so 400
85:51 - should give us that nice slightly darker
85:53 - shade of green
85:54 - yeah that's a much better green
85:57 - unless we want to go 500 that's a little
85:59 - bit too bold though okay
86:01 - also this is now getting into kind of
86:04 - styling when
86:06 - you're really mostly just worried about
86:13 - yeah getting things working for now okay
86:17 - so now what I'm going to do is pretty
86:21 - much just create this exact same thing
86:25 - however
86:27 - I don't have this activation status enum
86:31 - or the equivalent
86:34 - for invitations and the reason for that
86:36 - is because it's not a value that's
86:39 - stored on the back end we're basically
86:41 - going to be determining if the
86:43 - invitation is accepted or not based on
86:45 - if there is a recipient however even so
86:51 - we can still
86:53 - create an enum for it
86:56 - because we're going to be using this as
86:58 - a standard on the front end Okay so
87:03 - invitations enum I'm going to create an
87:07 - uh
87:09 - how can we say this
87:12 - um invitation status
87:17 - we'll say accepted
87:21 - or pending
87:23 - whoa whoa whoa
87:27 - so invitations is accepted if it has a
87:31 - recipient otherwise it's pending
87:35 - so now what we can do
87:38 - is just import these I sound like a
87:42 - robot all right so from invitations
87:45 - we're just going to render invitation
87:48 - status
87:52 - and then from there
87:55 - yeah let's keep you around
88:00 - g h i h i okay okay
88:04 - so now like you Mr product invitation
88:07 - badge what we are going to do
88:10 - is we're going to create an invitation
88:13 - status
88:15 - badge I think that's a good name for it
88:19 - yeah so enum index
88:23 - invitation status badge okay
88:27 - so new directory invitation status badge
88:32 - and it doesn't have any Styles files
88:35 - just gonna have a new component
88:41 - and pretty much the same design pattern
88:43 - as you
88:45 - so now we can delete you
88:48 - and do some renaming refactor rename
88:51 - this component
88:56 - set of activation status this is
88:58 - invitation status
89:01 - so replace all those
89:05 - also this
89:11 - okay so invitation status could be what
89:15 - did we say accepted and that can be
89:17 - success and then when this one is
89:20 - pending we'll render it in draft mode
89:23 - so now we should be good for this let me
89:27 - just read through real quick
89:29 - so this is pretty much a specialized
89:32 - badge
89:34 - which takes invitation status of
89:37 - accepted or pending
89:39 - and then
89:41 - we just render the badge based on that
89:44 - and that is determined
89:49 - if we have a
89:54 - activation status
89:56 - and we'll just name this status
90:02 - yeah
90:05 - you can really just put it in a div
90:06 - though can't we yeah
90:13 - okay so now let's go ahead and import
90:18 - that component so invitation status
90:20 - badge
90:22 - and I'll say
90:36 - it's actually for this I could say
90:38 - render status badge
90:40 - horrender interpretation satisfied so
90:42 - just keep it very clear holy sweet
90:45 - totally okay
90:47 - printer invitation status badge first
90:51 - thing we need to do is import our enums
90:58 - so we can get everything standardized
91:01 - and we can say we're going to create a
91:04 - variable for invitation status
91:08 - and we can say this is equal to
91:12 - first checking if there is a
91:16 - recipient
91:19 - so recipients if so then the invitation
91:23 - status is equal to invitation status
91:26 - thought accepted otherwise it's equal to
91:29 - invitation status stop pending and now
91:31 - what we want to do is we want to return
91:36 - our invitation status badge
91:39 - where the invitation status is equal to
91:42 - the one that we just calculated
91:45 - and now we can take this render function
91:47 - and render it
91:48 - in place of our temporary status text
91:53 - and now
91:58 - if everything went absolutely perfect we
92:01 - should
92:04 - see this okay beautiful so Bob is the
92:07 - only one who accepted his invitation
92:09 - right now so this is accepted all the
92:11 - other ones say pending which is great
92:15 - awesome now let me just create one more
92:18 - for testing
92:21 - all right that's the work in in all
92:23 - right
92:24 - so now one of the last things we have to
92:27 - do is fill out these actions right here
92:28 - and again what
92:31 - we allow is for the editing of these
92:34 - notes
92:35 - right here
92:37 - also
92:38 - we allow for any invitation that has not
92:42 - yet been accepted to be deleted
92:46 - so
92:48 - what we are going to do
92:53 - is this
92:55 - let's
93:04 - first do this let's pluck
93:11 - recipients from invitation since we're
93:14 - using it kind of in a couple places
93:18 - so I don't need that anymore and don't
93:20 - need this anymore
93:22 - and we're also going to use it for the
93:24 - uh determining if we can delete it from
93:27 - the drop down menu so I figure we use it
93:30 - enough where it's warranted to uh pull
93:32 - that out
93:34 - but now let's just go ahead and get that
93:36 - drop down menu
93:41 - and why are you
93:45 - know probably because okay
93:49 - so now
93:59 - so let's just import it since we're
94:01 - definitely gonna need that
94:03 - and then we can just say render
94:07 - drop down menu and menu options maybe
94:09 - just steal you for now
94:18 - and actually let's clean this up a bit
94:21 - got to keep things alphabetized and then
94:34 - all right handle edit click
94:42 - you clean you up keep everything nice
94:44 - and clean okay
94:56 - wow wow wow
94:59 - so now let me just put empty click
95:01 - handlers just to make sure that
95:05 - sections ml
95:09 - still kind of uh test things
95:13 - in stages so we were testing everything
95:14 - all at once all right
95:16 - so I have my drop down here right here
95:18 - right here and when I click edit so you
95:21 - just click edit and then delete click
95:23 - delete
95:29 - and I believe here
95:34 - what I want to do
95:41 - is pretty much style these so they float
95:44 - on their right so I'll say
95:47 - okay
95:49 - so first let me just get my styling
95:51 - taken care of
95:55 - and
96:03 - say drop down container
96:09 - on
96:13 - I'm not importing that
96:24 - all right so for my drop down container
96:27 - say display Flex uh
96:31 - let me play around with this in Chrome
96:35 - all right this is my drop down
96:39 - wait where am I
96:42 - oh here we go
96:47 - all right so I'm going to justify
96:48 - content
96:53 - and this is my Flex Direction row by
96:56 - default
96:59 - yeah all right so just like content end
97:02 - that's going to push everything to the
97:04 - right
97:05 - and I'm thinking that I may have too
97:07 - much space
97:08 - as well
97:10 - so either way I'm just going to display
97:12 - the drop down container
97:16 - I'm going to rename it drop down menu
97:17 - container I think that's a little bit
97:19 - more
97:22 - explicit
97:25 - okay the drop down menu container houses
97:28 - the drop down menu and these should all
97:30 - be floating to the right right now
97:33 - um
97:35 - and on that note another thing that I
97:37 - want to do real quick
97:39 - is I pretty much want to say
97:48 - how do I update this so the last column
97:52 - should take up the minimal amount of
97:54 - space and I'm not sure so I'll show you
97:56 - the
98:08 - what you can do okay a fraction
98:11 - represents a fraction Min content
98:14 - beautiful that was easy
98:21 - okay okay okay
98:23 - foreign
98:28 - that didn't work maybe because
98:30 - everything's a fraction still
98:33 - am I great update you got Min content
98:36 - away it's just because uh it actually
98:39 - did work
98:41 - it's just that my statuses are now
98:44 - floating
98:47 - left but we can actually fix those up as
98:50 - well along with a code
98:53 - and I believe that those are the only
98:56 - Memphis coach should remain left aligned
98:59 - I don't know but either way I want my
99:01 - status flowing in the middle
99:03 - I think that'll look better so
99:06 - imitation style is drop down menu
99:07 - container uh get rid of you for now we
99:11 - are also going to have
99:14 - inflation status badge container
99:19 - these are getting a little bit
99:21 - cumbersome these names but I like things
99:24 - super explicit and standardized
99:28 - and this is justify content Center
99:38 - it looks a little bit long but holy
99:41 - sweet ravioli okay
99:43 - for this
99:46 - well first of all it is floating in the
99:48 - middle which is good however
99:52 - display Flex
99:55 - yeah I think I just want
100:05 - maybe inline Flex is what we want
100:11 - nope
100:14 - now what we could do is just put it in
100:16 - another div but
100:20 - let's play Flex justify content Center
100:25 - and let me just try Flex Direction
100:42 - pretty much just don't want it to grow
100:44 - that height
100:45 - so I was saying that what I could do is
100:49 - just this
100:58 - and that is not bad I haven't actually
101:01 - did but
101:08 - yeah
101:10 - I think that's good for now if anyone
101:12 - knows how to uh how I can simplify this
101:15 - pretty much to get rid of this extra div
101:18 - then let me know but otherwise I'm just
101:21 - um taking that badge and sticking an
101:23 - animative and displaying it Flex in
101:25 - Center
101:26 - and then my badge doesn't grow
101:29 - but I'm sure there's an easier way for
101:31 - that
101:32 - um okay so what do we got to do next so
101:35 - now let's go ahead and get
101:37 - these
101:39 - components working
101:42 - okay
101:45 - so first uh let's get the right options
101:48 - here where we're saying that if the
101:52 - status equals accepted
101:54 - in other words if there's a recipient
101:55 - then you don't
101:57 - display the delete function
102:06 - okay
102:07 - what's going on here
102:14 - okay gonna put you to work so if
102:24 - uh render
102:28 - do not include the delete option
102:35 - the delete option the delete object in
102:39 - menu options
102:49 - and might as well just toss you my
102:50 - entire component for context here
103:03 - [Music]
103:13 - all right so create a menu we just add a
103:16 - button and then if there is no recipient
103:19 - yet then pushing the delete logic just
103:25 - now this should work already because
103:27 - right here you get both right here you
103:30 - can only edit it because there already
103:31 - is a recipient
103:33 - okay
103:36 - now things get a little bit more tricky
103:42 - what should we do now let's work on the
103:45 - edit logic because
103:47 - the delete logic is going to be a little
103:49 - bit trickier
103:54 - okay
103:56 - so to edit
104:00 - so when we click edit
104:07 - we're gonna need to render that
104:10 - invitation modal
104:14 - and that is being rendered already in
104:17 - profile
104:22 - so first let's just say that
104:30 - this may be a little bit easier than I
104:32 - thought
104:34 - maybe a little bit harder who knows okay
104:35 - either way let's figure it out
104:38 - so when we click edit we're going to
104:40 - render this invitation modal
104:44 - and that is coming from modals imitation
104:47 - modal
104:48 - and then we can just use the same logic
104:50 - of
104:52 - first let's import what we need
104:58 - we're going to need to do something
104:59 - special in just a bit
105:09 - this is interesting
105:15 - hoping
105:23 - huh
105:26 - very interesting
105:31 - so I'm hoping that
105:34 - CSS grid doesn't view this as a separate
105:38 - element needs to render
105:40 - but I have a feeling
105:53 - okay
105:54 - so on edit
105:57 - what you do is you toggle
106:00 - the imitation modal
106:03 - and that's going to be called
106:07 - okay this is good this is good
106:11 - yeah so I believe since we're rendering
106:13 - this in Portal
106:15 - I just want to see what's actually going
106:16 - on behind the scenes
106:18 - since uh
106:20 - yeah grid
106:22 - it's gonna display all these
106:25 - let me just see where this is rendering
106:28 - okay beautiful
106:30 - so what I was worried about is this
106:33 - basically
106:35 - um whenever we are rendering our
106:36 - invitations you see that we are using
106:39 - CSS grid and we're saying we're going to
106:42 - give you basically five elements for
106:44 - each row
106:45 - and those are these elements right here
106:48 - a user label a note a code the badge and
106:51 - then the drop down menu container now
106:54 - conditionally just because of our
106:55 - component structure we are we may be
106:58 - rendering another element which is the
107:00 - modal right here and I thought that
107:02 - since sometimes it has six elements
107:06 - um it may get confused with grid however
107:09 - the reason that's not causing any issues
107:12 - is because in our modal I'll kind of
107:15 - just show you what's going on
107:16 - so in our modal component we are
107:19 - actually not rendering uh the component
107:22 - right here like it may look like instead
107:24 - what we're doing is we're using a portal
107:26 - to render it
107:29 - um basically outside an entire hierarchy
107:31 - in an element called modal root
107:35 - and then yeah so that's giving us the
107:38 - logic that pretty much the exact logic
107:40 - that we need for now at least
107:43 - so now whenever we edit it
107:48 - and we can edit this now everything's
107:50 - working correctly
107:52 - no logic for delete but now let's keep
107:54 - checking along with the edit logic okay
107:58 - so
108:00 - what we can do here
108:04 - is pretty much update our invitation
108:07 - modal
108:12 - and we're going to be passing in an
108:13 - optional
108:14 - invitation
108:21 - so update invitation from types
108:29 - we'll say we're going to pass in an
108:31 - optional invitation
108:42 - and if you have an invitation
108:45 - then we are going to be editing
108:49 - that invitation otherwise we're going to
108:51 - be updating the invitation
108:55 - and I'm going to have chat GPT do this
108:58 - however
109:00 - what we can say
109:03 - is we can give it another standard from
109:05 - our address Pages which is in shop
109:16 - she would this just be easier just to do
109:19 - it without
109:21 - chippy tea and maybe
109:25 - it may be
109:28 - okay
109:30 - so let's do it this way
109:34 - initial values note
109:57 - okay so for the initial values we're
110:00 - first checking if we have an invitation
110:02 - if so use the note basically whatever
110:06 - value exists already on that otherwise
110:08 - if you don't have an invitation then
110:10 - just go ahead and use an empty string
110:13 - and that's going to give us our initial
110:14 - values
110:15 - now another thing that we need to
110:17 - determine
110:19 - is if we are updating
110:24 - an existing invitation or creating a new
110:27 - one
110:28 - for that we're going to have logic
110:29 - similar to this
110:33 - so if you have an invitation already
110:37 - then let's just do the crate logic first
110:41 - all right so if you have an invitation
110:43 - already
110:46 - then what you're gonna do is update it
110:49 - otherwise if you're creating a new one
110:53 - and you're gonna do something like this
110:56 - okay
110:58 - and then whenever you update your
111:01 - invitation
111:06 - so if you have an invitation already
111:08 - then you're just trying to update it and
111:10 - to do that you pass in the invitation ID
111:12 - with long the form values you submitted
111:15 - and then after the invitation is updated
111:17 - we just say invitation updated give you
111:20 - a success toast and then close the modal
111:23 - now if you're trying to create a new
111:24 - invitation then we're just going to say
111:26 - invitation created
111:28 - and then close the modal
111:32 - in
111:33 - okay so we have some
111:42 - just need to fix our error messages
111:46 - okay
111:49 - so
111:52 - for the verb if you get error message
111:57 - we're going to say if you have an
111:59 - invitation already then you're trying to
112:00 - update it I'm just going to say error
112:02 - updating invitation now if you don't
112:04 - then you're trying to create it so it's
112:05 - going to say error creating invitation
112:10 - and then
112:14 - for this header we'll just say
112:17 - invitation right now
112:24 - hmm
112:26 - do we have a verb there too
112:29 - Maybe
112:42 - let me call this header verb
112:46 - and then
112:49 - you
112:50 - are going to be replaced by some multi-q
112:54 - and I will say verb
112:59 - invitation
113:00 - okay
113:02 - so now let's test all of this out
113:05 - and hopefully our edit logic should be
113:08 - working unless I missed something
113:09 - but either way
113:12 - uh well first when you edit this it
113:15 - should say so that's
113:19 - Incorrect and that is because
113:23 - all this logic depends on us passing
113:25 - through the invitation to the invitation
113:26 - modal
113:28 - and we didn't do that
113:31 - so this is invitation close close
113:33 - invitation equals annotation and now
113:37 - now
113:39 - okay
113:40 - so I'm going to edit this it says update
113:41 - invitation for Bob
113:44 - and I'll say four slob is the update
113:50 - that gets updated invitation updated
113:52 - beautiful
113:54 - and now let me just edit this for
113:56 - tomorrow
114:00 - all right invitation updated beautiful
114:02 - now when I create a new one it should
114:04 - say create invitation
114:05 - and say for Joe
114:10 - all right beautiful
114:12 - edit update invitation for Schmo
114:18 - all right I think we're good to go and
114:21 - now another thing that we need to do in
114:25 - addition to this is we need to convey to
114:27 - the user actually I see a couple of
114:30 - different things
114:31 - first before we get to that let's just
114:36 - fix this grid situation so on this
114:40 - template I have a left inner right
114:42 - section left is the basically user
114:44 - details and the right is the like I
114:47 - don't know page content I guess you
114:48 - could call it
114:51 - now let me just add a gap for maybe 32
114:53 - pixels maybe 48 even
114:57 - okay that looks better
115:01 - so now let me just fix the styling issue
115:03 - and then we'll get to something else so
115:06 - I can just close all that for now okay
115:09 - um so the profile we in the main
115:12 - container have this and I want to add a
115:14 - gap of 48 pixels
115:18 - so that looks pretty good
115:20 - actually what is my gap on the right 32
115:23 - let's bring it down to 32 see if that
115:25 - looks any better
115:30 - like the looks of that actually
115:33 - okay
115:35 - so now the last thing
115:37 - that we need to do
115:41 - is we need to convey to the user how
115:44 - many invitations they have
115:47 - because remember for our invitation
115:50 - logic
115:51 - each user gets invitation limit
115:55 - and then whenever they invite a user
115:57 - that new user gets one less than their
116:00 - limit so I have an imitation limit of 10
116:02 - whoever I invite is going to have nine
116:04 - invitations to send then the next person
116:06 - is going to have eight invitations
116:08 - and then so on and so forth
116:11 - and I also want to add some logic not
116:13 - only the UI of how many you created
116:15 - already and how many you have total but
116:19 - also once they reach the max we can just
116:21 - hide this button
116:23 - so then they couldn't even like there's
116:25 - no use otherwise you're just gonna cause
116:27 - an error on the back end
116:29 - so let's
116:31 - do that
116:35 - okay
116:39 - Okay so
116:41 - what actually let me um
116:46 - let me kind of just give us a checkpoint
116:49 - here so make lens
116:51 - on the back end I'm just going to let
116:53 - everything run tests
116:58 - and then push this up
117:02 - okay
117:04 - so push this up and what did we change
117:07 - we could say added created and modified
117:09 - date to response
117:19 - I had created a modified date to
117:21 - response push that up
117:24 - and now on the front end
117:28 - just do npm run lint
117:32 - and then I'll do a little mini self code
117:34 - review
117:35 - and then we'll get started on the last
117:37 - feature of the invitation I'm actually
117:39 - going to go ahead and grab another
117:40 - coffee
117:43 - maybe freshen up a bit
117:47 - coffee is actually pretty good okay
117:50 - now let's do a quick little mini itty
117:53 - bitty code review
117:54 - okay
117:56 - so for the invitations
117:59 - API methods looking good
118:02 - and also nothing broke oh another thing
118:04 - that we need to do is that uh Delete
118:06 - functionality
118:08 - yeah let's do that first and then we'll
118:10 - call this uh
118:13 - okay so for the invitation
118:16 - first of all let's minimize you okay so
118:20 - yeah the edit logic was working we
118:22 - tested that however the delete logic
118:26 - was not
118:31 - and
118:37 - I believe I'm gonna need to reorder
118:39 - these
118:41 - but when you click delete we're going to
118:42 - call handle delete
118:44 - and yeah
118:48 - it needs to be up there
118:51 - okay now to handle delete what are we
118:55 - gonna do we are pretty much gonna call
119:01 - and it's going to look kind of similar
119:03 - to the modal actually but instead of
119:05 - creating we're just going to delete
119:07 - so
119:09 - we are going to
119:13 - yeah we can just steal this
119:20 - get rid of you so I need my delete
119:22 - dispatcher
119:24 - delete invitation
119:28 - now
119:35 - let's just get these toast
119:42 - okay
119:47 - so when you call handle when you call it
119:48 - delete it's going to be Asic function
119:51 - since it's going to make a request in
119:52 - the back end
119:53 - and all we are going to do
119:56 - is log out something like oh I forgot my
120:00 - dispatch
120:06 - all right dispatch come in with use
120:08 - dispatch
120:12 - okay
120:15 - I have dispatch up dispatch just make
120:17 - sure I got everything right okay
120:19 - so what we are going to do when we click
120:21 - delete is we're going to fire requests
120:23 - to the back end
120:24 - to delete the invitation now when you
120:27 - delete the invitation you need to give
120:29 - it the ID of the invitation and that is
120:32 - coming from the invitation.id
120:35 - now after it was successfully deleted
120:38 - and the Redux has been updated its store
120:40 - we can display toast that says
120:42 - invitation deleted and we don't need to
120:45 - close anything because we're not in a
120:47 - modal now if there are any errors
120:50 - then what we can do
120:53 - is just say error deleting
121:00 - the invitation
121:03 - and we can just render it like this
121:11 - okay that should be good
121:13 - code optimize Imports and now let's see
121:16 - what we got coming on okay
121:18 - so this one we should be able to delete
121:21 - that's good now let's see small I'm not
121:24 - friends with him anymore so I just want
121:25 - to delete that
121:27 - invitation deleted
121:29 - and on the back end
121:32 - let me just verify this
121:35 - all right so I have four invitations
121:36 - right now which is good let me delete
121:39 - this one my testing one
121:42 - good delete it from Redux and I only
121:45 - have three on the back end
121:47 - all right looking good
121:49 - so now what I want to do
121:52 - is this one more time and then we'll
121:54 - push it up
121:56 - and then we'll work on the last
121:57 - invitation feature and then deploy and
122:00 - then invite people and then pretty much
122:02 - create the greatest social network ever
122:06 - a couple more steps okay
122:09 - so
122:10 - invitations to you we create notation
122:13 - delete invitation now being used
122:15 - as well as get an update Suite put
122:18 - everything to use very productive
122:19 - session here
122:20 - now my avatar made those changes so it
122:23 - wasn't just self-avatar but you can pass
122:25 - in a custom source and we made use of
122:28 - that as well
122:30 - a new batch style we unified our product
122:32 - badge and also made the invitation
122:35 - status badge
122:38 - so now we have more consistent UI as
122:40 - well
122:41 - so good changes there
122:45 - there's our Innovation status badge
122:48 - everything looks good
122:50 - these are some
122:52 - user label updates
122:55 - our product activation badge is now also
122:58 - standardized so that's looking good
123:02 - uh deleted that
123:05 - updated this user label rename name to
123:09 - username to better reflect the
123:13 - source code
123:15 - rename that reordered it keep things
123:18 - organized dispatcher functions
123:22 - invitations that's enum
123:27 - now these inputs look Imports look right
123:32 - for the invitation modal takes optimal
123:35 - optional invitation if you're editing
123:40 - mm-hmm
123:46 - yep yep
123:50 - see you
123:52 - you know
123:55 - h
123:57 - okay
123:59 - and then for the imitation which is
124:01 - basically the row
124:03 - then we are
124:07 - catching any delete errors
124:10 - messages look right
124:13 - this one I'm wondering if we could wrap
124:16 - it in a memo but it's a story for
124:17 - another day
124:19 - everything else is looking good
124:22 - some little kind of
124:25 - styling issue here it's not really a
124:27 - styling issue but just wondering if
124:28 - there's a more efficient way to do that
124:31 - let's see
124:34 - now here's my updated profile page which
124:36 - kind of ties everything together
124:40 - all right so we got another modal
124:43 - on load we are fetching our invitations
124:46 - which is good
124:51 - and just memorizing a list
124:58 - and all that looks right if we don't
125:00 - have any invitations it'll just give us
125:02 - an empty state
125:04 - and then our button to create an
125:06 - invitation
125:08 - they're being ordered correctly
125:12 - all of that looks nice
125:15 - we added a gap for styling
125:20 - this is a component updates
125:24 - and let's see what we got here this is
125:27 - the updated user label
125:33 - looking good
125:35 - selector of a fancy
125:39 - fancy here invitation reducer
125:45 - I reviewed this already this looks all
125:47 - good
125:55 - okay nice and ordered
125:59 - station and create a modified it has an
126:01 - ID
126:02 - ol on a recipient recipient is user read
126:05 - or no
126:10 - and of course our fancy schmancy
126:15 - short date function
126:22 - all right looking good so I will say
126:24 - invitation
126:28 - creating editing and deleting
126:34 - all right
126:38 - oh this fly I don't know if you remember
126:40 - from the last video
126:41 - where I had some flies flying around but
126:43 - I got some fly paper and I caught three
126:46 - of them so far I'll keep you guys
126:47 - updated on the Fly update as well
126:50 - but um
126:52 - actually let me stop the video here and
126:55 - then I'm gonna go grab a coffee
126:58 - and then we'll come back and we'll wrap
127:00 - up the rest of this invitation logic and
127:02 - then I actually thought this was going
127:03 - to take a couple days but it's going all
127:05 - right and then uh yeah we can get
127:07 - started on the next feature
127:11 - all right so coffee gotten and now what
127:16 - we got to do next is work on kind of the
127:19 - last part of our invitation UI component
127:22 - and that is just a render out probably
127:25 - right here
127:27 - um how many invitations they are allowed
127:29 - to send
127:30 - so what I'm gonna actually do is update
127:33 - my section heading components to include
127:36 - optional subheading and then what we can
127:39 - do from there is kind of just make it
127:41 - work
127:42 - so for this
127:45 - so we have a heading that's always going
127:46 - to be required and also say subheading
127:52 - and then this can be optional
127:55 - and then
127:58 - for the contents
128:01 - thinking that we have a left and a right
128:05 - yeah that might be better now
128:10 - so the container do I might do anything
128:12 - with this okay so I'm just going to make
128:14 - two left and right divs we can just have
128:17 - them divs but I like to have things
128:18 - named
128:19 - left
128:21 - right
128:22 - and then
128:24 - you can do something like this
128:31 - so the heading is going to go on the
128:33 - left and on the right
128:40 - what we can do
128:43 - yeah that should work fine
128:46 - okay so no change there
128:48 - and let me just check some of my other
128:50 - sections
128:52 - actually wallets
128:55 - cores
128:56 - this goes on the right shop
128:59 - sell left right okay
129:02 - just want to make sure I didn't break
129:03 - anything else
129:04 - so now
129:06 - what we can do
129:09 - is render that subheading
129:14 - and we can render it pretty much
129:18 - on a diverse span
129:20 - will probably a span
129:33 - subheading yeah
129:35 - yeah like that okay so the font size let
129:37 - me just say it's going to be like 13 or
129:39 - something so font size uh 13
129:44 - and then if you do have a subheading
129:52 - we can say
129:59 - if you have a subheading then just
130:00 - render it otherwise and null
130:02 - and for this I'll say subheading
130:07 - is going to say something like a 4 out
130:10 - of 10.
130:14 - first of all this section right here
130:17 - needs to be a flex
130:27 - so display Flex align items Baseline I
130:31 - want
130:34 - and then for the subheading I can just
130:37 - have padding left
130:39 - so for the section heading the left
130:41 - section
130:50 - for the subsection actually that would
130:52 - be margin left of uh I don't know try 16
130:54 - pixels for now
130:56 - and then for the color I actually want
131:09 - and for the color of this subsection
131:13 - let's keep it light gray
131:17 - let's see how we're looking now
131:20 - not bad
131:21 - but what I'm thinking is this is a
131:24 - little bit too far away
131:26 - so maybe modulants of 12 or maybe even
131:29 - eight
131:32 - and response to pick two
131:44 - all right let's just do this
131:46 - font size of 13 margin left of 10.
131:51 - and that will be good
131:56 - version of 10.
131:58 - and all right
132:02 - yeah this is looking all right okay
132:06 - so now what we have to do is first
132:13 - we can probably split this out into a
132:16 - separate render function since we're
132:18 - going to be having to calculate one
132:22 - this is going to be the length of the
132:24 - list and then two this is going to be
132:26 - the max amount so because we're going to
132:29 - have some logic and we don't want to
132:30 - mess anything up let's say const render
132:33 - section heading
132:37 - for now we can just return what we got
132:43 - and then this is going to be right above
132:45 - content we're going to render the
132:47 - section heading
132:49 - now as long as nothing broke then we're
132:51 - good to go make sure I don't get any
132:53 - errors in my console
132:56 - all right good to go
132:57 - so now the first thing
133:01 - we can do
133:04 - is say const
133:08 - ant numerator
133:11 - and this equals to the invitation list
133:17 - length
133:21 - in here
133:30 - it would be the numerator over 10 which
133:34 - that's going to change in a bit but
133:37 - something like this
133:41 - okay
133:42 - so 3 means how many invitations you
133:45 - already created and hopefully once I
133:48 - delete this okay it says two create
133:51 - another one
133:52 - three actually what happens if you
133:55 - create one with a
133:58 - interesting so a note is required
134:02 - okay we may need to change that later
134:03 - but
134:08 - um
134:10 - from Lisa
134:13 - all right so now all we need to do even
134:17 - though it's going to take a little bit
134:18 - of code is we need to figure out the
134:20 - users
134:21 - um invitation limit
134:22 - and how we do that is I made a endpoint
134:25 - on the back end API invitation limits
134:28 - and then you pass in the user ID
134:30 - and then it's gonna return
134:33 - the owner which is pretty much just CID
134:35 - passed in and then the amount right here
134:38 - and then we can store that in Redux
134:42 - and then we don't need to do anything
134:44 - fancy like storing
134:47 - under the ID
134:52 - because
134:57 - yeah we'll just keep it simple for now
135:00 - since I'm thinking later on you probably
135:02 - want to so anyways taking a step back
135:05 - right now you can only view your own
135:07 - profile like even when there's another
135:09 - user right here like nothing happens
135:11 - whenever you click their profile or
135:13 - anything
135:14 - now
135:15 - later on
135:17 - we will need to decide if you want to be
135:20 - able to view other people's invitations
135:22 - as well or is this just private to you
135:25 - and honestly I'm not sure I don't even
135:27 - know what the uh
135:30 - what the logic is that we're going to
135:33 - want probably a discussion for you know
135:35 - uh all of us but
135:39 - yeah for right now I'll just take this
135:41 - and I'll plop it in our store
135:45 - okay so this is called invitation limits
135:49 - so let's get started with that
135:52 - um let's close out all this
135:54 - and we're going to make a new type and
135:57 - it's going to be called
136:02 - invitation limits
136:08 - okay now
136:11 - the
136:13 - interface for this
136:17 - invitation limit
136:25 - I probably didn't even need to copy any
136:27 - of that but it's just going to be an
136:28 - owner
136:31 - is going to be a number
136:35 - in an amount
136:37 - which is also going to be a number
136:49 - okay
136:52 - and now what we can do is this
136:58 - to you invitation limits comes
137:03 - four invitations so
137:16 - let me just sort these to make sure
137:18 - everything stays nice and clean
137:22 - short lines and okay so we have that and
137:26 - now let's just go ahead and start
137:28 - prepping our slice
137:39 - so invitation limits is going to be
137:41 - invitation
137:42 - limits
137:47 - and the logic for this is going to be a
137:50 - little bit different
137:55 - maybe closer to self than anything else
137:58 - yeah
138:00 - mm-hmm
138:02 - okay
138:05 - so first let me go ahead and make a file
138:08 - where you can sort of this so
138:11 - it's gonna be the same as this
138:13 - make a new file to contain this data
138:23 - okay
138:27 - for herself would be replaced by
138:29 - invitation limits
138:37 - now this type is going to be replaced by
138:40 - invitation limit
138:45 - this is going to be an empty state
138:54 - and this is going to be equal to
138:57 - you know what I can do
139:00 - so I can set it equal to this
139:02 - so it's equal to an invitation limit or
139:05 - null
139:07 - and then the payload action could
139:09 - technically be an invitation limiter and
139:10 - all although we're always going to be
139:11 - setting an annotation limit
139:13 - and now let me just rename this
139:19 - and this will be
139:25 - what is the name for this actually
139:35 - limit or limits
139:37 - and why you freaking out
139:47 - hmm types of decision invitation limits
139:50 - actually you should probably name it
139:57 - okay so now why are you freaking out so
140:01 - no is not assignable to the type
140:03 - invitation limit so I actually should
140:06 - type this out like this
140:16 - Hmm this is actually interesting
140:20 - I'm wondering if
140:23 - rethinking everything right now
140:26 - since I'm pretty sure
140:29 - we're gonna have this functionality
140:36 - oh boy oh boy a boy
140:39 - like why are we getting Fancy with it
140:40 - here
140:42 - you know
140:45 - like in the good serializer Invitational
140:47 - limit serializer why not just pass down
140:50 - the ID and just
140:54 - do everything like a super standardized
141:02 - why not
141:09 - so then what I could do is this okay and
141:11 - we now have an ID
141:26 - and why when I retrieve
141:33 - many
141:36 - so I just want the first
141:38 - not many equals true
141:42 - and what's this going to give me
141:44 - just one object and if I do one I don't
141:47 - have access to
141:51 - it doesn't matter
141:58 - so I can retrieve oh this is interesting
142:06 - hmm
142:10 - so let me do this 100 equals one two
142:12 - three
142:16 - empty list okay
142:23 - so here we are saying that
142:26 - the user can only pass in
142:29 - basically nothing
142:33 - however
142:36 - I want them to be able to retrieve it
142:38 - for any users
142:40 - even though in this current UI they're
142:42 - only going to be requesting themselves
142:45 - all right so in the query sets I'll say
142:49 - accept the uh PK from the URL
142:54 - rather than
143:01 - okay
143:03 - Let's uh let's not do anything fancy
143:05 - here let's just stick with our standards
143:07 - so
143:09 - um
143:16 - rather than the request
143:19 - because this fanciness is really uh
143:21 - bleeding into our front end and can't
143:24 - follow our standards yada yada okay
143:30 - so this should be filter
143:34 - quarks from the PK quarks from PK
143:38 - request user
143:42 - and let me just print this out actually
143:52 - so now should be printing out 14 and let
143:55 - me just try to break this so one this
143:57 - should return something valid which is
143:59 - good
144:00 - um what if I do something like this
144:02 - value 500
144:14 - okay
144:20 - okay so I'll say so this is just some QA
144:24 - so
144:30 - how can I prevent the user trying to
144:33 - pass in a string for an ID even though
144:37 - it's not the end of the world
144:42 - I don't want to have any 500 errors
144:45 - coming
145:04 - oh I like this actually why not just to
145:06 - get object or four or four
145:08 - yeah this is much easier
145:13 - and where's that coming from
145:21 - uh we could say
145:31 - URL configuration you can use your
145:33 - Revenue expression and URL pattern or
145:35 - your BK is a number
145:40 - okay interesting
145:44 - so I'll do that
145:48 - so what's going on here
145:51 - all right so for invitation urls
146:03 - uh
146:05 - URL configured
146:10 - update my URL configuration super router
146:13 - on sharing the PK is a number you could
146:14 - override git lookup regular expression
146:17 - you know regular expression was
146:19 - something that I was
146:21 - well what's going on here one second
146:23 - that's it
146:26 - interesting
146:30 - this is fascinating never even knew this
146:33 - existed get look up regex
146:45 - first this can be static I don't use
146:47 - self but anyways
146:50 - for my server updates
146:54 - okay I still get a 500 error
147:19 - to work so this method doesn't do that
147:37 - okay
147:39 - we're out in America PK values
147:45 - there's something else might be wrong
147:56 - okay let me just give you my
148:00 - whole stack Trace then
148:06 - so it seems that even chat gbt is a
148:08 - little confused on this
148:12 - I mean we could just do that is digit
148:27 - okay let's do this then
148:33 - hopefully this works because I really
148:34 - like this pattern of
148:39 - and the query set is equal to this
148:46 - get object or 404
148:51 - no when I pass in an incorrect
148:54 - still 500.
149:06 - hmm
149:08 - remember to hand it could be ready to
149:10 - try to compare non-string to an integer
149:17 - actually this is
149:20 - probably better
149:26 - more detailed error message okay
149:32 - okay okay okay
149:34 - take 15.
149:42 - now what do we need to do we need to
149:45 - import
149:47 - four
149:53 - and okay
149:54 - so we've got a couple of things going on
149:56 - here that we need to test
149:58 - first we need to test it with an invalid
150:00 - primary key
150:02 - and make sure we don't have a 500 error
150:05 - which that's great not found although it
150:08 - should have
150:17 - that
150:20 - I should say invalid ID provided but why
150:23 - not
150:24 - print owner ID what logs out here
150:35 - interesting Y is
150:38 - it's not logging out
150:57 - so just nothing man huh
151:05 - this is fascinating
151:07 - fascinating fascinating fascinating
151:10 - okay so wait what
151:19 - is it catching
151:27 - what is happening here
151:38 - all right so apparently it's catching an
151:41 - error
151:42 - just the wrong one
151:46 - so let's do this
151:53 - and this is value error
151:56 - okay
151:58 - so that's what we wanted to happen
152:02 - but then why are you giving me the wrong
152:04 - error message
152:07 - maybe we need to throw
152:11 - a different kind of error
152:14 - because this is correctly
152:21 - all right so whenever we convert a
152:23 - string or to attempt to convert a string
152:25 - to an integer this is correctly throwing
152:27 - a value error but it's just getting a
152:30 - little weird because I expect this error
152:32 - message come back
152:41 - raise exception I want to see Somewhere
152:43 - in My Views where I'm raising it
152:52 - okay
153:02 - return okay so we can just do this
153:05 - instead
153:10 - so instead of raising an error we can
153:12 - just return
153:15 - an error like this
153:22 - and that should work
153:25 - and if so we also want to replace it
153:27 - down here
153:32 - rest framework import status few sets
153:45 - okay so now let's see okay
153:48 - finally invalid ID provided and that
153:51 - means instead of raising an error
153:54 - whenever we have an issue
153:57 - then what we could do is we can just do
153:59 - this
154:01 - pretty much do it manually
154:05 - okay
154:10 - and now let's make sure
154:14 - this issue right there
154:22 - and I don't think it's going to fix them
154:24 - for me nope okay so code optimize
154:28 - Imports
154:29 - and now instead of these double quotes
154:31 - you single quotes set the double quotes
154:33 - single quotes
154:35 - now let's lint again
154:40 - okay so now we got the logic that we
154:44 - want with all the edge cases taken care
154:45 - of uh cool steps to the left
154:48 - and in addition to that we're also
154:50 - returning the ID
154:54 - which is what we want
154:57 - let's just sort these
155:02 - so I mount ID owner my ID owner keep
155:06 - everything nice and alphabetical
155:09 - and then just one more time okay
155:13 - so invalid ID gives us this
155:16 - um if there is a valid ID but it doesn't
155:18 - exist
155:19 - no none found with this and then once we
155:22 - do have a valid one it gives us back
155:24 - that valid one which is great
155:27 - now to our front end let's go ahead and
155:31 - standardize everything okay
155:35 - so in our typings what we can do is
155:38 - pretty much follow the same pattern
155:42 - and we can say that
155:46 - okay
155:48 - so
155:49 - we are going to be storing
155:55 - these invitation limits and addict
155:59 - and it's going to be called invitation
156:00 - limits
156:02 - and it's going to have
156:05 - an invitation limit which consists of an
156:07 - amount an ID and an owner
156:12 - and then in our index
156:15 - yeah I like this already everything is
156:17 - nice and standardized now
156:19 - so in our invitation limits
156:22 - we're just going to say invitation
156:24 - limits and limitation limits and then
156:28 - invitation limits invitation limits okay
156:30 - so now this is equal to invitation
156:33 - limits
156:35 - which is going to be equal to an empty
156:38 - string
156:41 - and now when we set an invitation limit
156:47 - um let me see what we did we can just
156:49 - steal from invitations
156:52 - so with invitations under my store
156:58 - we can say something like this
157:04 - rotational limitation limits okay
157:08 - so when setting an invitation limit
157:13 - stay as invitation limits we're going to
157:15 - be passing in an invitation limit
157:19 - and I pretty much takes care of that as
157:21 - a code device import and now let me just
157:24 - read through this
157:26 - because we don't need to set multiple
157:29 - and we don't need to delete any ever
157:34 - so okay all right
157:37 - so invitation limits
157:39 - comes from Invitational limits spelled
157:42 - correctly
157:43 - now we're going to be importing
157:45 - invitation limitation limits the initial
157:47 - state is just no
157:50 - invitation limit
157:56 - set invitation limits or excuse me just
157:59 - set one at a time that's all we need to
158:00 - do
158:03 - and then we're going to be good to go
158:07 - show limits okay
158:09 - cool now let's just start piecing
158:11 - everything together and so in facial
158:13 - limits comes before a meditation
158:21 - all right
158:22 - so I now have a new invitation limit
158:25 - slice and it's gonna be equal to the
158:28 - invitation limits reducer
158:30 - and now in my selector
158:34 - what I'm gonna do is I'm gonna say
158:38 - whenever I ask for those imitation
158:40 - limits using git invitation limits
158:45 - then just go ahead and give me whatever
158:47 - is in the store beautiful
158:50 - so now what we need to do is write an
158:52 - API function in a dispatcher function to
158:55 - actually get those from the back end
158:56 - populate the store and then we'll read
158:58 - them out on our component
159:00 - so API function
159:03 - uh this is
159:07 - okay
159:10 - what I'm gonna do is probably get it
159:12 - from product yeah
159:18 - so first let me make a new
159:21 - file
159:23 - called invitation limits
159:25 - and then
159:27 - steal some stuff that I can replace
159:29 - later so
159:31 - the only
159:33 - thing that we're going to need
159:36 - well a couple things
159:39 - so first this is called invitation
159:40 - limits and in here
159:44 - what we want to do
159:51 - is say anywhere we have products just
159:54 - replace it with invitation limit
159:58 - and let's see how far we got here
160:01 - authorization editors okay
160:05 - so we are importing invitation limit
160:08 - and then
160:11 - this is the header that we want to use
160:13 - nothing fancy uh this is our endpoint
160:17 - our base URL and then when we ask for an
160:21 - Invitational limit we're going to be
160:22 - passing in the ID of a user
160:24 - and then we're going to be expecting
160:26 - back an invitation limit and the full
160:28 - URL is a space URL forward slash the ID
160:31 - of the user that we want to get it
160:33 - returns an invitation limit
160:35 - and now that looks good we just have to
160:37 - make a dispatcher function for it
160:40 - so same name so refactor your name get
160:44 - that dispatcher function new typescript
160:47 - file
160:49 - and then we can use the same
160:52 - uh standard we're using for products
160:58 - and get that individual one
161:01 - right here
161:02 - okay
161:04 - so
161:08 - tissue limit you can say get
161:11 - imitation limit as get limitation limits
161:20 - from imitation limits we are just
161:23 - setting an invitation limit
161:30 - and this is git imitation limit
161:33 - and call this
161:35 - then set the invitation limits
161:39 - okay
161:40 - so now in our dispatcher function what
161:43 - we're going to do is we're going to
161:45 - import get invitation limit from our API
161:48 - functions
161:50 - gonna import
161:53 - the dispatcher function
161:55 - then we say whenever we call dispatch
161:58 - get invitation limit we pass in an ID
162:01 - you're going to get it from the back end
162:02 - set it on the front end
162:04 - and then we'll take it out later on
162:08 - and that is what we need okay
162:12 - so now on our profile page whenever we
162:16 - go to this page whenever we get our
162:19 - invitations we also want to get our
162:22 - invitation limits
162:24 - so
162:26 - salutations dispatchers
162:34 - and I want to say
162:36 - get invitation limit in
162:42 - we can just do this
162:49 - okay invitation limits
162:52 - and we're going to need to pass in our
162:54 - self ID
162:57 - so in order to do that
163:03 - we can just select self out of our state
163:09 - and we can do self ID
163:12 - and this is going to have a little issue
163:14 - because
163:17 - self ID maybe null
163:21 - and that is because in our store if you
163:24 - aren't logged in
163:28 - then self ID is equal to null but in
163:31 - order to fix this we can just say
163:34 - no self ID and return
163:47 - okay and why am I still getting this
163:50 - because I check right here
163:55 - is it because this okay
164:01 - and also these can be optimized using
164:04 - promise all
164:05 - so let's do that right now
164:17 - especially this
164:24 - as well as this
164:31 - get rid of you
164:35 - and all right
164:37 - so when we go to the page we are going
164:40 - to get our invitation limit for
164:42 - basically the logged in user and then
164:45 - we're also going to get their
164:46 - invitations and this should be working
164:48 - and Redux should be populating already
164:51 - so now I'm just go ahead and refresh
164:53 - this page and keep an eye on my network
164:55 - first
164:56 - go to this page
164:58 - and it gets back the invitations limit
165:01 - for user one which is me
165:03 - and all that's coming back correctly now
165:06 - let's look in our store
165:08 - see invitations limit
165:12 - okay
165:15 - okay cool cool
165:18 - so
165:22 - what we want to do here
165:25 - is
165:28 - on this UI we want to find the
165:32 - imitations limits for this user
165:37 - and I'm wondering if it's a better idea
165:40 - to put this in a hook
165:42 - but either way we can probably abstract
165:44 - it out later on
165:46 - so for now actually where am I
165:48 - calculating this right here
165:51 - yeah let's just use a memo function
165:57 - imitation limit amount
166:05 - so I will say
166:10 - that this first memo is going to be
166:13 - returning the information limit amount
166:17 - and then what we need to do is this
166:25 - so object values first of all we need to
166:28 - select all of our invitation limits so
166:30 - we can actually find which one belongs
166:32 - to this user even though there's only
166:33 - one in there we can kind of build this
166:36 - assuming that there's going to be more
166:37 - in the future
166:38 - so from our selectors we want to get a
166:42 - list of our invitation limits so select
166:45 - your state get invitation
166:48 - optimize those Imports later on but here
167:02 - all right so our invitation limits
167:10 - all right
167:11 - so first thing we need to do
167:15 - to get the amount
167:17 - is we are going to get a list of all our
167:19 - invitation limits and we're going to
167:21 - find
167:31 - yeah from there what we're going to do
167:36 - is we are gonna
167:38 - pretty much iterate through each
167:39 - invitation limit
167:42 - and
167:46 - what we're going to do is we are going
167:48 - to see the owner
167:55 - and find which one matches self ID which
167:59 - is
168:04 - pretty much our ID
168:07 - yeah
168:12 - okay
168:13 - so to get the invitation limit amount
168:16 - look through all the invitation limits
168:18 - you have in Redux and for each one find
168:22 - the one where the owner matches the self
168:26 - ID in other words the profile you're
168:27 - looking at
168:29 - now
168:37 - is this
168:42 - and then for this I can just use
168:44 - underscore
168:58 - and then do something like this
169:06 - okay
169:07 - so this is going to say if you can find
169:10 - one then just go ahead and return the
169:12 - amount for that otherwise just return
169:14 - zero so it may be a zero for like a
169:17 - split second while the request is
169:19 - pending but otherwise we should be
169:22 - good
169:24 - and then this can be used right here
169:30 - okay
169:32 - and that should actually give us our
169:34 - logic
169:36 - and let me just refresh this to
169:41 - all right so now mine is eight
169:45 - okay cool
169:46 - so imitations three out of eight now let
169:49 - me go ahead and revert that back to 10.
169:53 - okay so when I go to my page it gets my
169:56 - updated invitations now let me just try
169:58 - logging out logging back in just to make
170:00 - sure nothing broke okay so it was Zero
170:02 - for a split second but then it's good
170:04 - so now for this create functionality let
170:08 - me minimize this down to five
170:11 - and then
170:12 - what I can do is I can say
170:16 - basically if if you have five out of
170:18 - five then don't render this create
170:19 - button
170:22 - okay
170:26 - so
170:28 - where are we rendering
170:31 - the create invitations button right here
170:36 - so for the render create invitation
170:37 - button this is write content and what we
170:40 - can do
170:42 - so we're comparing the numerator which
170:45 - is
170:47 - the list of the invitations length
170:53 - this
170:57 - do we need this as well I don't think so
170:59 - I think it's just a little bit too much
171:04 - so when determining whether or not
171:07 - to render the button that is going to
171:10 - allow the user to create more
171:12 - invitations
171:15 - the logic we can say is if
171:19 - the invitation link length basically if
171:22 - the number of invitations you already
171:23 - created is greater or equal to
171:27 - we should really only need equal to but
171:30 - I don't know we may get into a situation
171:31 - where
171:33 - like you created 12 out of 10 maybe you
171:36 - created like way too many invitations
171:37 - and then I don't know Django admin came
171:40 - in like manually entered or something
171:41 - either way it's just a little bit more
171:42 - safe this way
171:44 - so if you created invitations that match
171:47 - or exceed your limit then we just want
171:50 - to return null
171:53 - okay so now
171:56 - hopefully I'm going to create two more
172:01 - and after I create this one
172:04 - then hopefully that button should
172:06 - disappear which is good
172:09 - now I can delete one of these and it
172:11 - should reappear
172:13 - all right cool
172:15 - and on that note I actually think I
172:18 - takes care of this entire invitation
172:20 - invitation feature
172:25 - sorted by created day status I mean it
172:30 - doesn't look
172:31 - beautiful I would say but you know it's
172:33 - functional
172:35 - all right
172:36 - actually that feature took a lot of not
172:40 - as long as I thought and I'm also
172:43 - noticing right here on the profile we
172:44 - probably want to display the username uh
172:47 - probably right here but that's a another
172:50 - okay so now let me just yeah pretty much
172:54 - just review and clean everything up
172:56 - okay
172:57 - so here I just make lint
173:03 - and then make test which these tests are
173:05 - kind of unrelated but also I'm really
173:08 - slacking on my writing test but
173:12 - well I'm gonna get these features out
173:14 - okay
173:16 - so for the invitation limit serializer
173:18 - we're now returning ID to keep
173:20 - everything standardized also to give us
173:23 - a little bit more flexibility
173:26 - on the front end and then when we're
173:29 - retrieving this we're doing some uh more
173:33 - clear things with the PK where if they
173:35 - pass in a non-integer PK then we're just
173:39 - going to give them a clear error message
173:40 - and valid ID provided
173:43 - and also if they pass in an ID of a user
173:45 - that doesn't exist we'll just say no
173:47 - invitation limit found with this ID
173:51 - all right there we go and then
173:55 - uh let's see what else we got going on
173:58 - so that was actually it for the uh back
174:00 - end
174:01 - so updated
174:06 - detail response
174:12 - push that up
174:15 - and now for another Mini review so I'm
174:18 - going to run lint
174:29 - all right no issues found that's good
174:32 - now let's do one more review for this
174:34 - back end okay
174:37 - so do you wrote a API endpoint to get
174:42 - the invitation limit for individual user
174:45 - and this is looking good
174:47 - and then we updated the section heading
174:50 - to include optional subheading
174:53 - and restyled some things that looks good
174:56 - it's just our updated styling
174:59 - subheading is secondary color pretty
175:02 - much light gray
175:04 - looking good
175:06 - this is our dispatcher function
175:09 - everything is sorted
175:12 - basically call this endpoint and then
175:15 - set it
175:17 - in Redux
175:21 - and those are all good
175:25 - importing our new
175:28 - dispatcher functions our selector
175:33 - and then we are fetching this data on
175:36 - page load
175:39 - then
175:40 - we are pretty much finding the limit by
175:43 - comparing
175:45 - by pretty much just finding it based on
175:47 - the user ID
175:49 - and we'll just have zero by default
175:52 - before the request comes back
175:58 - then we're saying if
176:00 - you already created more inverted or
176:03 - enough invitations to meet or exceed
176:06 - your limit then we're just going to
176:07 - return null so you can't create anymore
176:11 - and then render the section heading
176:15 - right there with the proper values in it
176:18 - and this is just our selector to pull
176:21 - that data from State
176:23 - constant for naming
176:26 - imitation limit reducer
176:29 - all conventions look good
176:32 - and then in here
176:35 - pretty much nothing too fancy
176:40 - okay all good are standardized imitation
176:43 - limit invitation limit we decided to
176:45 - store those as addict even though we
176:47 - only have a one now
176:49 - um we may be displaying this information
176:52 - for other users again still don't know
176:54 - if we're even gonna allow well I mean we
176:57 - almost have to
176:58 - um
176:59 - be able to see other people's profiles
177:02 - we're definitely going to be allowing
177:03 - that
177:04 - the question is should you see other
177:06 - people's invitations
177:09 - and I don't know I don't see a reason
177:11 - why you wouldn't but maybe people want
177:13 - to keep that private who knows but
177:16 - either way I'll say invitation
177:19 - limit logic
177:24 - and one last time let me just log out
177:26 - log back in go to my profile four out of
177:28 - five invitations
177:31 - it's a nice
177:32 - annotation created
177:34 - delete this one
177:36 - edit this one for me
177:41 - and even though this is accepted I can
177:43 - still edit the note for you
177:46 - okay I think all of our logic is working
177:49 - so on that note I'm
177:53 - yeah I can pretty much merge these in
177:58 - so back in
178:00 - let me just merge these in so first what
178:03 - I like to do
178:05 - is whenever I'm creating a PR I like to
178:08 - name it in a specific convention with
178:10 - the number of the issue
178:12 - and then a little hyphen
178:14 - and then the name of the issue took it
178:16 - and I can just say closes four to eight
178:19 - and with this keyword
178:21 - closes whenever you merge your PR in
178:24 - it'll automatically close this issue
178:27 - and now all of these changes look good
178:37 - [Music]
178:49 - oh yeah this for all my invitation
178:51 - updates
178:55 - okay this looks good
179:06 - cool cool
179:09 - all right so I will squash and merge
179:12 - this in
179:16 - by the way I like to uh another thing I
179:18 - like to squash it before I merge it
179:20 - because then you see in my master Branch
179:22 - I only have one commit so if I ever need
179:25 - to revert this it just makes it a little
179:27 - bit easier just to uh kind of explain
179:30 - what's going on here
179:31 - and also another thing I like to do is
179:33 - stop my server
179:35 - before I pull down the branch so Master
179:37 - is updated now I just merge everything
179:39 - into there
179:41 - so I already deleted the branch on the
179:43 - back end now I can just delete it on my
179:44 - front end
179:46 - pull it down one more time make sure I
179:48 - got the latest updates
179:50 - and then just run that again
179:54 - and let me make sure I do have it
179:56 - deleted on my
179:58 - local
180:00 - and then no more branch
180:04 - on the back end okay
180:06 - and now for the front end
180:10 - let's just do the same then deploy this
180:12 - bad boy clean some of this up okay
180:16 - so front end like to follow the same
180:17 - pattern uh the issue on the front end
180:19 - was 79.
180:22 - so let's say that 79
180:26 - PR is for invitation Updates this closes
180:29 - issue number 79.
180:32 - create a pull request
180:34 - and then we're reviewing all of this is
180:37 - kind of as we went along
180:40 - you just skim through real quick make
180:41 - sure I don't got any to-do's or anything
180:44 - looks good that looks good that looks
180:46 - good
180:48 - update those update those
180:50 - actually just make sure that uh oh wait
180:52 - a minute
180:56 - you have some changes that we didn't
180:57 - push up yet
181:05 - that could have been bad
181:07 - wait no I don't what am I doing here I
181:10 - thought I saw something blue somewhere
181:15 - all right nothing to roll back
181:17 - maybe I was just seeing things okay
181:20 - uh yeah nothing to push up on the front
181:22 - end so we're good on that note and now
181:34 - all right
181:36 - all right yeah a nice little session
181:38 - today
181:44 - refresh this in the squash and merge
181:46 - which is going to close the issue so we
181:48 - should only have four issues left
181:52 - so delete this branch
181:56 - sweet for issues left
181:59 - and now let me just go ahead and stop my
182:01 - server
182:04 - and sometimes if I'm fetching Master
182:06 - while I have a
182:08 - my Dev server running
182:10 - I get some issues
182:13 - but either way back end Branch deleted
182:15 - front-end Branch deleted let's go ahead
182:18 - and restart this confirm that our back
182:20 - end is still working locally
182:22 - and the last thing I always like to do
182:24 - after merging in a new feature is this
182:26 - shoe some really light
182:29 - QA
182:30 - so log out log back in
182:33 - all right the feature looks good this is
182:36 - all for master Branch let me delete this
182:39 - create a new one
182:42 - a and we're good to go
182:45 - all right so yeah in just a few hours we
182:48 - now have our invitation logic all built
182:51 - out and let's see what other oh yeah so
182:54 - in the next video what I'll do is this I
182:55 - know a hesu I told you a while ago I was
182:58 - going to make this update my bad it's uh
183:00 - been on the back burner for a while but
183:02 - just wanted to get this core
183:03 - functionality out first by the way in
183:06 - the next video this is what we will be
183:08 - working on
183:09 - and then from there another thing that I
183:13 - really want to do
183:15 - I'm going to be adding some social
183:18 - uh functionality to this social network
183:20 - that we have in my cooking core or my
183:24 - cooking website I was working on we had
183:26 - it where you I actually really like this
183:28 - idea but users could like um share
183:31 - pictures of basically share recipes
183:33 - including a photo of whatever food and
183:36 - then the details of the recipe of course
183:38 - like I don't know just the recipe itself
183:41 - and it was uh yeah kind of just a way to
183:45 - you know see what everyone was was
183:47 - eating cooking from all around the world
183:49 - but what I'm going to do is I'm going to
183:51 - take that same logic and I'm going to
183:53 - make a little bit more generic so
183:55 - instead of having it it be a recipe it
183:58 - can just be a generic like social media
184:00 - post with an image and some text and
184:03 - then I'll be building out a feed so
184:06 - basically users can post pictures or
184:08 - just write any posts like they would on
184:10 - you know another social media site but
184:12 - then we start getting this thing you
184:14 - know a little bit more social uh
184:18 - you have some way to uh do something
184:20 - with other users interact with them in
184:22 - some way other than just inviting them
184:24 - and of course trading with them but uh
184:27 - yeah gonna start making this thing come
184:29 - to life little by little we'll get there
184:31 - but yeah for now a good coding session
184:34 - thanks for watching and yeah if you have
184:37 - any other suggestions or features you
184:39 - would want on the site let me know I'm
184:41 - building and yeah don't plan on stopping
184:44 - so let's do it baby see you next time