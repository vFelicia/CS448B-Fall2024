00:00 - alright guys welcome back to your 60th
00:02 - C++ tutorial and in this tutorial I want
00:04 - to talk to you guys about class
00:06 - templates so before we learned about
00:08 - function templates but in this tutorial
00:10 - I want to tell you guys aside from just
00:13 - functions being able to use templates
00:15 - entire classes can use templates as well
00:18 - and again by template all I mean is a
00:21 - generic data type so let's go ahead and
00:24 - build it right now so just like before
00:27 - the way you make a template definition
00:30 - doesn't change you go ahead and write
00:31 - template and then inside your angle
00:33 - brackets you write class and I might as
00:36 - well you know start good programming
00:37 - practice and use what people typically
00:40 - use and that's just one capital letter
00:41 - instead of you know a word you can use a
00:44 - word I like using word but since I'm
00:46 - teaching you guys might as well get into
00:48 - a good habit so now after this now we
00:51 - basically made a generic data type we
00:54 - can begin making our class so go ahead
00:57 - and name a class I'm going to name mine
00:59 - Bucky and let's say that well let me add
01:03 - my semicolon before I got before I
01:07 - forget Bucky is going to have two
01:09 - variables now we don't know what those
01:11 - variables are yet whether they're in
01:12 - stubble so I'm just going to name them T
01:14 - my generic data type one is going to be
01:17 - name first and one's going to be name
01:19 - second so now let's throw a couple
01:23 - functions inside Bucky so they're both
01:26 - going to be public might as well go
01:29 - ahead and make our constructor Bucky and
01:33 - in our constructor let's just go ahead
01:35 - and for two numbers set first and second
01:39 - equal to whatever numbers we pass in so
01:42 - T a and T B basically we're passing in
01:48 - two numbers which we don't know what
01:50 - type of numbers they are yet so now
01:53 - let's go ahead and set first equal to a
01:58 - and second equal to B so now these two
02:04 - numbers and Bucky are going to have a
02:06 - value so that's what's going to happen
02:09 - whenever we first build a Bucky object
02:11 - so now after this we can go ahead and
02:14 - you know just add another method like t
02:17 - bigger and all this is going to do is
02:21 - it's going to find out which number is
02:23 - bigger will actually keep this
02:25 - constructor definition right in here
02:27 - well we'll take this bigger function and
02:29 - we'll build outside because there's a
02:30 - couple different rules I want that you
02:31 - guys whenever you build a function
02:34 - template what I say function template
02:37 - what the heck is that whenever you build
02:39 - a function member outside the
02:41 - Declaration of class template so let's
02:43 - go ahead and do that right now and make
02:45 - sure I have all my semicolons in the
02:47 - right place I looks good that's good one
02:49 - down there looks good so far I guess
02:51 - we'll find out later on when I run it
02:52 - but okay now the first thing I want to
02:56 - know is that even though we made a
02:59 - generic type of data right here whenever
03:03 - you have a function member outside the
03:05 - Declaration of the class and remember we
03:08 - said we're going to be building a
03:09 - function called bigger that belonged to
03:11 - the class Bucky but we're going to be
03:13 - doing it outside the class we always
03:16 - need to have that function definition
03:19 - again so go ahead and copy this and
03:21 - paste it I don't know why they made it
03:23 - where you need it again but they did so
03:26 - before every single function you need to
03:28 - have that now here is how you start out
03:32 - building your function members outside
03:34 - the Declaration of the class template
03:36 - you first write your return type and our
03:39 - return type is of course T just our
03:42 - generic return type and then just like
03:44 - before you write what class you're going
03:46 - to be working with so I'm going to be
03:48 - working with Bucky and I'm going to be
03:50 - building a function called bigger but we
03:53 - just can't go ahead and type you know
03:55 - the function body right here we need to
03:59 - do something first
04:00 - right after your class name you need to
04:03 - add angle brackets and add your T right
04:05 - here too and this is because we need to
04:08 - tell C++ at the
04:10 - functions template parameter is the same
04:13 - one that we're going to be using for the
04:15 - class so in order to do that we need to
04:18 - specify that T inside angle brackets
04:20 - right after we class name everything
04:22 - that's kind of weird well I agree with
04:25 - it it is kind of weird and it's kind of
04:27 - stupid too but if you think this is
04:29 - stupid and complicated you're going to
04:31 - have to take it up with the people who
04:32 - made C++ I just teach it for the record
04:35 - I don't think it should be made this way
04:37 - but you know after the class name you
04:39 - need to include that function template
04:42 - parameter again I think it's a stupid
04:44 - way of doing it but hey I didn't make
04:46 - C++ I just teach it so now we can go
04:49 - ahead and you know what well of course
04:52 - this function called bigger is just
04:54 - going to take the two numbers that are
04:57 - in the Bucky class first and second and
04:58 - it's going to find which one is bigger
05:00 - so it's basically going to be the
05:02 - opposite of what we did last time so
05:04 - just go ahead and return and we'll
05:10 - compare if first is bigger than second
05:14 - then return first else return second so
05:19 - this looks good go right now now well I
05:23 - think that's all we have to do for a
05:24 - class so basically we have a class
05:27 - called Bucky now Bucky has two variables
05:30 - in it a first and a second variable now
05:33 - whenever we make a Bucky object that's
05:35 - when we give the first and second
05:37 - variable their values so first is going
05:39 - to be like 10 and second is going to be
05:41 - like 20 and now we have another function
05:44 - just to find out which number is bigger
05:46 - so whenever we call the bigger function
05:48 - it's going to take the first number and
05:50 - the second number which would be like 10
05:52 - and 20 if 10 is bigger it's going to
05:55 - return 10 if 20 is bigger it's going to
05:57 - return 20 so now let's go ahead and make
05:59 - our Bucky object and run this and let me
06:01 - show you guys how it works so if you
06:04 - think you guys know how to do this you
06:07 - don't because there's one other little
06:09 - weird thing that you have to do you go
06:12 - ahead and make your Bucky object that
06:14 - just as you think you would
06:15 - making Bucky Bucky object and since this
06:19 - is a constructor that takes two
06:20 - parameters first and second we need to
06:23 - give it its two
06:23 - numbers like 69 and 105 and now after
06:29 - this we can go ahead and you know see
06:31 - out bo the bigger and remember this
06:36 - bigger doesn't take those two numbers as
06:40 - parameters since this class already has
06:44 - two variables in it it's just going to
06:47 - go ahead and grab those variables so as
06:48 - you can see in this bigger function we
06:50 - don't need to pass it in those two
06:52 - numbers it already has it so let's go
06:54 - ahead and build an around this and say
06:55 - all right what the heck is this why are
06:57 - we getting an error message that's
06:59 - because whenever well let's read the
07:03 - error message I'll show you guys what it
07:04 - says missing template arguments before
07:06 - Bo whenever we're working with the class
07:10 - template we need to explicitly tell it
07:13 - what type of data we want to substitute
07:16 - for T and we're going to be working with
07:18 - integers because 69 and 105 are integers
07:21 - so between your class name and your
07:24 - object you need to pass in I and T in
07:27 - angle brackets so like I said before
07:30 - before we go ahead and start making
07:32 - these objects if you think you know
07:34 - where you're doing you don't this is
07:35 - what people typically forget so in the
07:39 - last couple tutorials we could have done
07:40 - this it was optional I decided to
07:42 - exclude it well in this tutorial we
07:45 - absolutely need to have it and whenever
07:48 - we do this we're basically saying all
07:50 - right this is what we're going to be
07:52 - substituting for T so if this was double
07:54 - and we made our class object anywhere
07:57 - this class saw T it would plug in double
08:00 - right here these two numbers are doubles
08:02 - when our constructor is made we're going
08:05 - to passing in two doubles whenever you
08:07 - run the function it's going to be a
08:08 - double instead of a T well since we're
08:11 - going to be working with integers we're
08:13 - basically telling our class anywhere you
08:15 - see a T substitute integer for it so
08:18 - that way we can work with you know
08:20 - different types of objects and you know
08:22 - maybe we'll make one class an integer
08:24 - and one plus a double and well let me go
08:27 - ahead and first run this and show you
08:29 - guys that it indeed works 105 is indeed
08:32 - the bigger number and if you don't
08:33 - believe me I'll just change this
08:35 - you know 258 and run it again and show
08:40 - you guys that our program is working
08:41 - correctly so basically there are a
08:45 - couple weird rules the first rule I want
08:47 - to tell you guys is every single
08:49 - function you build you need to precede
08:51 - it with this function template it's kind
08:54 - of weird but it's what you need to do
08:55 - also you need to have the blank generic
09:00 - data type after your class name and this
09:02 - pretty much tells your function that we
09:05 - are indeed working with the classes
09:06 - template parameter which is this one and
09:09 - also the last thing you guys got to
09:12 - watch out for is whenever you make your
09:13 - objects you need to explicitly tell your
09:17 - object what type of data to substitute
09:19 - for T and you do that between your class
09:22 - and your object declaration right here
09:25 - so there are a couple of weird rules
09:27 - again I want to say this if you guys are
09:30 - stuck on templates and this is just way
09:32 - too confusing for you guys all the
09:34 - substitution forget about them you don't
09:36 - need to build it it's just if you want
09:38 - to build a program that takes less code
09:40 - and makes it a little bit easier then
09:42 - you have the option doing this but it
09:44 - isn't a requirement so if you don't
09:46 - completely understand it don't worry
09:48 - about it you can move on and you know
09:50 - you're not going to be lost in C++ so
09:52 - anyways thank you guys for watching
09:53 - don't forget to subscribe don't forget
09:54 - check out my website and I will see you
09:56 - later