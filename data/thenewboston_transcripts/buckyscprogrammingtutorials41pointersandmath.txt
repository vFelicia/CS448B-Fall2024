00:00 - alright guys it's time to jump back into
00:02 - pointers and specifically in this
00:04 - tutorial I'm going to be covering
00:05 - pointers and how we can use math with
00:08 - pointers and even more specifically I'm
00:10 - going to show you guys you know how to
00:12 - add integers to pointers and why the
00:15 - result isn't exactly what you might
00:17 - expect so let's go ahead and start off
00:18 - by building a basic integer array I'll
00:21 - call my Bucky and it can hold five
00:22 - integers now we already know that each
00:25 - integer on my computer takes four bytes
00:28 - of memory on the older computers they
00:31 - usually either take up two bytes or four
00:33 - bytes on some of the newer computers
00:34 - they might take up eight bytes so you
00:36 - know if you're running this tutorial
00:38 - with me and it's not the exact same
00:40 - results don't freak out it's just how
00:42 - your computer stores integers so let's
00:44 - go ahead and make a couple pointers I'm
00:47 - going to make a pointer named BP BP 0
00:50 - and this is going to be equal to the
00:52 - address of Bucky zero in other words
00:56 - it's going to be equal to the address of
00:58 - the first element so let's go ahead and
01:00 - print this out right now and see what
01:02 - the address is so on just give a nice
01:05 - little prompt like BP zero is at memory
01:08 - address and let's print out BP zero that
01:11 - will print out the memory address and of
01:12 - course that's in that line so now let's
01:14 - go ahead and build and run this and we
01:16 - see that BP zero is at the memory
01:19 - address ff0 eight okay simple enough so
01:23 - since we built an array and since we
01:26 - know that each integer takes up four
01:29 - bytes we're expecting the next pointer
01:32 - well let's go ahead and build a couple
01:34 - more pointers first and we're expecting
01:36 - the next pointer to be a memory dress
01:39 - for away from that so if that one was
01:41 - eight the next one will be at twelve and
01:43 - the next one will be at sixteen so let's
01:45 - go ahead and one this will point to the
01:49 - second element and this will point to
01:51 - the third element so now let's go ahead
01:52 - and print all these out on the screen
01:54 - and when I do we can clearly see what's
01:56 - going on
01:58 - 1 & 2 & 2 so basically we're bringing
02:02 - out the memory address of this and then
02:04 - the memory address of this and then the
02:06 - memory address of this so let's go ahead
02:08 - and print this out and check it out bp0
02:11 - is it location FF 0 0 and since we're
02:15 - storing integers and they take up 4
02:17 - bytes
02:17 - the next one is 4 bytes away FF 0 4 the
02:20 - next one is 4 bytes away FF 0 8 and if
02:24 - we were to go on I'm not going to but we
02:26 - can clearly see that each integer takes
02:28 - up 4 bytes of memory on our computer and
02:31 - since we're building an array all these
02:34 - integers are stored one right after each
02:36 - other so that's why each element in our
02:39 - array is stored 4 bytes after the next
02:41 - one basically whenever you make a ninja
02:43 - on computer it reserves 4 bytes of
02:45 - memory for it and you know nothing else
02:48 - can go inside that memory except that
02:50 - integer so let's go ahead and say we're
02:52 - playing around and we decided to do
02:54 - something stupid like be p0 and we set
02:57 - it to add to 2 you know this memory
03:00 - address so let's go ahead and put plus
03:03 - equals 2
03:04 - well now let's go ahead and print out
03:06 - the address of b p0 again and see what
03:09 - happens remember before it was stored at
03:12 - arm the address FF 0 0 so now when we
03:17 - add it to to it we should probably be
03:19 - expecting this to be a FF 0 2 but let's
03:23 - go ahead and run this to see what
03:24 - happens okay like before the first
03:27 - element will store to FF 0 0 then F F 0
03:31 - 4 for the next one then FF 0 8 for the
03:33 - next one but what we did is we took this
03:36 - first one FF 0 0 and we added 2 to it so
03:40 - we should be expecting an FF 0 2 right
03:43 - makes sense that's how it works in our
03:46 - brain but our computer said b p0 is now
03:49 - it
03:50 - ff0 eight well that was the address of
03:54 - this one right here so what is going on
03:56 - what happens is because pointers don't
04:00 - work like math works in our head
04:03 - whenever you add integers third pointer
04:06 - it doesn't change the memory address of
04:09 - that pointer it only changes what
04:11 - element it's pointing to so for example
04:14 - whenever you run this and we try to add
04:16 - two to this pointer right here it didn't
04:20 - change the memory address right here
04:21 - what it did is said all right I'm going
04:24 - to take your pointer and add two to it
04:26 - and basically I'm going to point to
04:28 - whatever is two elements away so again
04:33 - what I want to stress is whenever you're
04:35 - working with math and pointers you're
04:37 - not changing the memory address you're
04:40 - only changing the element that appoints
04:43 - do so again you're not changing this
04:46 - piece of memory right here you're
04:47 - changing what element it's pointing to
04:50 - simple enough like I have a really hard
04:52 - time explaining that but you guys can
04:54 - see what's going on so for example if I
04:56 - put be p0 plus plus it wouldn't change
04:59 - it to FF 0 1 it would change it to FF 0
05:03 - 4 because let me go ahead and prove it
05:06 - to you guys first so we added 1 to this
05:09 - it didn't change the memory to 0 1 it
05:12 - changed it to 0 4 because 0 1 it would
05:16 - overlap this one which would overlap
05:18 - this one and cause a whole bunch of
05:19 - problems so what it does is and change
05:22 - it instead of changing the memory
05:23 - address it just says alright if you're
05:25 - adding 1 to this pointer then you
05:27 - probably want to just point to this
05:28 - pointer right now so that is basically
05:31 - how pointer of rithmetic works basically
05:34 - instead of changing the memory address
05:36 - it just changes where it points again
05:38 - you guys can clearly see in this example
05:40 - what's going on so you know just look at
05:43 - it and you guys can probably understand
05:45 - that a whole lot easier than me trying
05:46 - to explain it so there you have it
05:48 - that's how pointers work with math and
05:50 - why you might be getting a different
05:51 - result than you might expect so thank
05:54 - you guys for watching don't forget
05:55 - subscribe in the next tutorial no idea
05:57 - what I'm going to be covering but I'm
05:58 - probably going McDonald so you guys
06:00 - chill out wait a couple seconds and I
06:02 - guess I'll see you guys in the next door