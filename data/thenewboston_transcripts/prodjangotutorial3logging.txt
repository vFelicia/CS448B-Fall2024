00:00 - all right everybody welcome back to
00:02 - another video and in this one we are
00:04 - going to be talking about logging and
00:06 - let me see what else I got on the menu
00:08 - maybe if we got some time some Docker
00:11 - related stuff later on but for now let's
00:13 - just go ahead and focus on logging
00:15 - so how do we set up all our login config
00:18 - well we're going to make another
00:19 - settings file so go under core project
00:22 - settings and we can get creative and
00:25 - just call this logging so check it out
00:28 - Django uses Python's built-in logging
00:31 - module and this is how we're pretty much
00:34 - going to be dealing with all the log
00:35 - records now I say log record
00:38 - specifically because
00:40 - 99 of the time whenever people are
00:42 - talking about handling logging they say
00:45 - log message but a log message is the
00:48 - actual text a log record has some other
00:50 - information as well for example the time
00:52 - when it was logged the file name like
00:55 - what file caused this log uh some more
00:58 - metadata as well like the log level yada
01:00 - yada we're going to be seeing all this
01:01 - but I just want to make this distinction
01:03 - that a log record is a little bit
01:06 - different than the log message the log
01:08 - message is just like part of the log
01:09 - record
01:11 - so on that note how do we go ahead and
01:13 - start configuring all this we'll go
01:15 - ahead and make a dictionary called
01:17 - logging and this is actually the python
01:19 - standard let me go ahead and pull this
01:21 - link up
01:24 - so we are going to be configuring this
01:26 - dictionary and if you ever want to know
01:28 - like the details of what is like a valid
01:31 - setting in here or well really just any
01:34 - more that I'm going to explain in this
01:35 - video if you just type in login
01:37 - configuration Python and Google I'm sure
01:39 - that this page is going to pop up but
01:41 - anyways we don't need this because I'm
01:43 - going to be going over kind of the
01:44 - basics of everything right now
01:46 - now the first thing some housekeeping
01:49 - items let me just paste these in
01:51 - so the first one is version one and
01:54 - you're just always going to have version
01:55 - one uh this is just in case python wants
01:57 - to change some things in the feature to
01:59 - make it backwards compatible disable
02:01 - existing loggers I'm always going to
02:03 - recommend well at least for now setting
02:05 - it to false and I'll show you later on
02:07 - well it's not going to make a lot of
02:09 - sense because we didn't even create any
02:10 - loggers right now but just to make sure
02:13 - we don't kind of skip over everything
02:15 - this is going to determine whether the
02:17 - default non-root loggers are disabled
02:20 - and and later in the video we'll learn
02:23 - what root loggers are and all that good
02:25 - stuff but for now this is just kind of
02:27 - uh like I said housekeeping stuff
02:30 - so on that note let's go ahead and hop
02:31 - into the good stuff which is formatters
02:35 - now a formatter let me just paste this
02:38 - in right now
02:39 - this is well it may even be exactly like
02:43 - you think in your head whenever you
02:44 - think of a formatter basically how do
02:46 - you want to format or display the text
02:49 - anytime we log anything out
02:51 - so what I did here is I created one
02:53 - formatter called standard and the format
02:56 - or pretty much saying how do we want to
02:58 - uh you know format the text for these
03:00 - log messages it's going to display the
03:02 - time or excuse me log records this is
03:05 - actually uh the message part right here
03:07 - but for the log record we're going to
03:10 - display the time we're going to display
03:12 - the log level and that's going to be
03:13 - either like debug info warning so on and
03:16 - so forth
03:17 - after that we're going to display the
03:19 - name of the logger so we'll see in just
03:21 - a bit how each logger you can give a
03:23 - different name and also some cool
03:24 - Behavior around that and then this is
03:27 - the actual text in other words like
03:29 - whenever you log something
03:31 - and it's like hey uh this message would
03:33 - be this hey right here which is usually
03:36 - like an error message or something Bob
03:37 - this is the text part so
03:40 - this is your formatter so what's after
03:43 - this well after this is your handlers so
03:47 - let me go ahead and create one Handler
03:49 - so first question what is a Handler a
03:52 - Handler very conveniently named
03:54 - basically specifies how you want to
03:56 - handle the log record so what does that
03:58 - mean well for these logs we don't always
04:02 - have to just print them out to the
04:03 - screen we could save them to a file for
04:06 - example we could email them and all of
04:09 - these uh different things that we can
04:11 - handle it they're all going to be
04:12 - specified here in handlers
04:14 - so what I did is I made one Handler and
04:17 - this is just called console and uh first
04:21 - is the log level which I'm going to
04:23 - specify as info so
04:25 - a Handler is basically going to ignore
04:27 - any Vlog message that doesn't meet this
04:30 - log level so since debug is a lower log
04:33 - level than info it's going to just
04:36 - ignore those debug messages however if
04:38 - it ever comes across the info or warning
04:41 - or error then this logger excuse me this
04:44 - Handler is going to be able to handle
04:45 - those now for the class this is just the
04:48 - name of the Handler class the formatter
04:52 - of course you already know what this is
04:54 - saying what formatter do you want to use
04:56 - for the list Handler and we're just
04:58 - going to pretty much save that format
04:59 - are log records in this kind of way and
05:03 - the filters I believe that we can just
05:04 - leave this owl but I actually like to
05:07 - keep it in there to uh be explicit even
05:09 - though we don't have any filter IDs in
05:11 - there but anyways yeah this is going to
05:13 - be an optional list of filter IDs for
05:15 - the Handler
05:17 - um we won't get into that right now we
05:18 - got a lot of other stuff to cover
05:19 - already but either way that's your basic
05:21 - stuff Handler how do you want to handle
05:24 - the log record
05:25 - so now let's go ahead and get into our
05:28 - loggers however before we do that let me
05:31 - go ahead and type some pseudocode down
05:33 - here now before we can start logging any
05:36 - messages from our code what we're going
05:38 - to need to do is we're going to need to
05:39 - grab a logger now I'm actually not going
05:42 - to be creating it right here it's just
05:43 - to kind of show you what's going on this
05:46 - code is going to be in another file
05:47 - pretty much any other file but this one
05:49 - probably but in our code once everything
05:52 - is set up we're going to be doing
05:53 - something like this we're going to make
05:55 - a variable called a logger and we're
05:57 - going to set it equal to logging dot get
06:00 - logger now whenever we get logger we
06:03 - have to pass a name basically naming our
06:05 - logger now this name could be anything
06:07 - you want so I'm just going to name it
06:09 - bacon and then whenever we log something
06:12 - out using this logger
06:14 - then this name is going to be displayed
06:18 - right here so it's going to say like at
06:20 - 2 30 a debug level
06:23 - uh bacon hey you gotta air or something
06:28 - now let me go ahead and show you on
06:31 - other syntax and that is this right here
06:34 - so commonly you're going to see the name
06:37 - just reference this Dunder name keyword
06:41 - and this is going to reference the name
06:42 - of the module so why is this well
06:46 - for one it's actually useful to know
06:49 - like uh what file you're logging from
06:51 - but two
06:52 - using this syntax gives us let me clean
06:56 - this up real quick
06:58 - it gives us some pretty cool
06:59 - functionality and
07:02 - all right let me close this so you guys
07:04 - can see so whenever we create loggers
07:06 - what we can do just like we did for our
07:08 - formatters and handlers under here we
07:11 - have a dictionary where the key is the
07:13 - name of the logger so all I'm doing here
07:15 - is using dictionary comprehension to
07:17 - create let's see I mean I have one two
07:20 - three four five different loggers and
07:23 - for each of these
07:24 - again this is going to be the key the
07:27 - configuration for these loggers is the
07:29 - same it just has log level warning and
07:31 - propagate equals true
07:33 - so as you can see we can create many
07:35 - different loggers and configure them all
07:37 - differently if we want but since I just
07:39 - want to configure all these the same
07:40 - then dictionary Lola dictionary
07:43 - comprehension well it's just the way to
07:45 - go here and another thing that I want to
07:47 - mention is that whenever we use one of
07:49 - these loggers to actually log something
07:51 - from our code what's going to happen is
07:53 - that logger is first going to inspect a
07:55 - log message to see if it meets its
07:58 - configure level which is in this case
07:59 - warning now if this log record does not
08:04 - meet warning then it's just going to
08:06 - ignore it now if it is warning or higher
08:09 - then what this logger is going to do is
08:11 - it's going to pass it off to our Handler
08:13 - and the reason that I did set this to
08:15 - warding is because in production which
08:17 - are our default settings we really don't
08:19 - want to log out these debug in info
08:22 - messages debug is really just for like
08:24 - debugging whenever you are you know
08:26 - debugging some code uh building things
08:29 - and then info it I just don't want to
08:31 - clutter up my uh Logs with like
08:33 - non-relevant data that I don't care
08:36 - about so anyway the default level I'm
08:38 - having is warning and to understand what
08:40 - this propagate true is doing let me
08:43 - actually go ahead and pull up that
08:44 - example again so I'll say logger equals
08:48 - logging dot get logger and here I'm
08:52 - gonna pass in the name of the module and
08:56 - check it out so whenever we name a
08:59 - logger based on the name of the module
09:01 - we get some I want to say like special
09:03 - logging Behavior and by that I mean
09:06 - whenever a record is logged
09:09 - what is going to happen is let me just
09:12 - use this for example
09:14 - say that this was the module that we're
09:16 - in all right so that Dunder name
09:19 - converted to this so check it out it's
09:21 - obviously going to handle the log you
09:23 - know specify whatever the name is right
09:26 - here so on and so forth but in addition
09:28 - to this if propagate equals true what's
09:31 - going to happen is that after this log
09:33 - is like done being handled it's going to
09:35 - move up the hierarchy and pass that
09:37 - record onto any of the parent handlers
09:39 - as well and by that I mean we already
09:42 - have this configured this logger of
09:44 - django.db dot back ends so after this
09:48 - it's going to look for a logger called
09:50 - django.db and then it's going to pass
09:53 - the record onto that logger as long as
09:55 - propagate equals true and after that
09:57 - it's just going to pass it into one
09:59 - called Django which is this one so again
10:02 - what I'm just trying to say is that
10:04 - whenever we name a logger based on the
10:07 - module and we have propagate equals true
10:10 - it's not just handled by this one but
10:12 - any of the parent loggers as well all so
10:15 - again in short let me clean this up too
10:18 - so our logging dictionary has well aside
10:21 - from these two ones three main aspects
10:24 - of it the loggers are basically saying
10:27 - what do we want to log
10:28 - the handlers are basically saying how do
10:32 - we want to handle those logs and then
10:34 - the formatters are just saying how do we
10:36 - format the log data now after this there
10:39 - is one more key dictionary pair that I'm
10:43 - going to write in here and that is for
10:45 - our root logger
10:46 - so our root logger is basically at the
10:49 - top of all other loggers in the
10:52 - hierarchy and this is where all log
10:55 - records are going to propagate up to
10:56 - unless we specify that they shouldn't
10:58 - but it's basically like the fallback for
11:01 - all logs that otherwise aren't
11:03 - explicitly handled so for us we're just
11:06 - saying that for log level debug we just
11:09 - want to log those out to the console
11:11 - so now the time has come where I believe
11:15 - actually where am I gonna log something
11:18 - out let's just log it out in uh urls
11:21 - doesn't really matter you're going to be
11:22 - deleting it but
11:25 - uh let me just go ahead and first import
11:27 - logging
11:28 - and now we'll see how to use all these
11:31 - so what I'm going to do now is just like
11:34 - I did I'm going to make a logger and for
11:36 - this I'll first let me just go ahead and
11:39 - uh actually let me go ahead and name it
11:41 - tuna
11:43 - something non-dunder name and then after
11:46 - this to actually log something out what
11:48 - you do is you reference that logger and
11:51 - then you say what kind of log record is
11:54 - it and I'll just go debug and then in
11:56 - here is the message like this is
12:03 - and of course if you ever want to log it
12:04 - for a difference let's say uh info say
12:08 - this is
12:10 - out of here info message
12:14 - all right now let me do
12:19 - server just to make sure that these are
12:21 - uh
12:23 - and okay getting an error right here and
12:26 - that is because
12:28 - we did not
12:31 - patch those together so we created this
12:34 - logging setting but
12:36 - I forgot to actually include it
12:41 - and type today
12:43 - logging.pui
12:47 - all right
12:49 - oh
12:53 - all right so check it out
12:56 - so we see whenever we start up our
12:59 - server that this is a debug message and
13:03 - that this uh one right here this is an
13:05 - info message and uh you see that I have
13:09 - this colored formatted text and that is
13:11 - because before this tutorial I installed
13:13 - a colored
13:15 - um well I'll show you what I did
13:16 - actually
13:18 - here let me close that
13:20 - and all right
13:22 - so I added this right here poetry add a
13:26 - package called color log and I'm going
13:28 - to add it as a development dependency
13:30 - and you say that or you saw that this
13:32 - was already installed for me because I
13:34 - forgot to uh uninstall it before this
13:35 - tutorial but anyways this is just a uh
13:39 - package that you can use because if you
13:41 - don't have it then all your logs are
13:42 - just the same color and when you're
13:44 - looking in the console it actually is a
13:46 - lot easier to see uh your different type
13:49 - of logs or to you know make them
13:51 - distinct from one another if they have a
13:52 - different color but anyways go ahead and
13:54 - install that and then after you have
13:57 - that installed what I'll do
14:01 - and pull this up
14:03 - actually it might be in my local
14:05 - settings yeah
14:08 - so these are my local settings and I'm
14:11 - going to move it to our you know this
14:13 - settings.dev template and these are just
14:17 - how I configure that a colored logger so
14:20 - for a formatter I'm going to be creating
14:22 - a colored one and
14:24 - actually let me show you so usually
14:26 - formatters you give them a name and
14:28 - format so on and so forth you can also
14:30 - use this syntax and instead of defining
14:34 - everything like we saw you can give it a
14:36 - class and this is just going to be a
14:38 - callable to
14:39 - it's just pretty much a different way to
14:41 - uh create formatters
14:43 - and let's see what else uh loggers
14:46 - whenever yeah I think everything else we
14:49 - uh went over
14:51 - and this is pretty much just going to
14:52 - give us that uh colored Behavior
14:55 - but then after this go ahead and make
14:58 - sure it's in your local settings and
15:00 - then like we saw right here whenever we
15:03 - log things out
15:06 - then we get these cool colors gray for
15:09 - debug and green for info and now what I
15:13 - actually want to do is this
15:16 - so we saw right here that the name of
15:18 - the logger since it was tuna
15:24 - since it was tuna it is displaying right
15:26 - here
15:27 - and now let me do the dunder name
15:35 - actually let me do one for warning
15:39 - just to kind of show off these colors so
15:41 - say this is a
15:43 - warning message
15:49 - now if I run the server again we're
15:52 - going to see debug info warning and
15:55 - looking good all right so I'm going to
15:57 - go ahead and delete these because now
15:59 - that we got our logging system
16:00 - configured formatted got some pretty
16:03 - colors uh we can just kind of Tuck this
16:05 - away for now because later on in our
16:07 - actual application code our business
16:09 - logic that's where we're going to be
16:11 - wanting to log stuff out especially
16:13 - whenever we get air to make sure we can
16:15 - track those debug them as quickly as we
16:17 - can but for now I think that's pretty
16:19 - good stopping point I'll get into the
16:22 - docker stuff in the next video so for
16:25 - now thanks for watching and I'll see you
16:27 - next time