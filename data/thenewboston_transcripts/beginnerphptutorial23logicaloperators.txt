00:00 - hello this is Alex from PHP academy' de
00:03 - org and this is a video tutorial for the
00:05 - new Boston in this video I'm going to be
00:07 - talking about logical operators now
00:10 - we've already seen examples of
00:11 - comparison operators arithmetic
00:13 - operators and assignment operators so
00:17 - we've assigned variables we've compared
00:19 - them now what happens if we want to use
00:22 - a bit of logic to maybe say want to
00:24 - check a few variables at once if they
00:27 - compare two different values now the
00:30 - best way to explain this is to create an
00:31 - example so if I was to create a number
00:34 - here number one equals ten now what I
00:37 - want to do is I want to create an if
00:39 - statement here the block and inside here
00:44 - I want to say number one greater than or
00:50 - equal to ten now echoing out this would
00:55 - be true
00:56 - so we valuated this to true number one
00:58 - is equal to ten so when we refresh in
01:01 - our browser we get true echoed out
01:04 - however let's say we want to check at
01:11 - saying an upper and a lower bounds we've
01:13 - already seen examples like this where
01:15 - we've we've simply made a comparison
01:17 - check but let's apply some logic into
01:19 - this I'm going to create a variable
01:22 - called upper and this is going to be a
01:24 - thousand and my lower is going to be 500
01:29 - I'll make sure we assign that there my
01:31 - lower limit is going to be 500 now what
01:34 - I want to do is I want to let's change
01:37 - this text to let's say okay I want to
01:42 - test whether a specific number supplied
01:46 - which could be up here is equal or it's
01:52 - between a thousand and five hundred so I
01:54 - want this number to be either 1500 or
02:00 - somewhere in between so it could be five
02:02 - hundred and five or it could be 999.9
02:05 - it could be a thousand it could be five
02:08 - hundred but it can't be under five
02:09 - hundred so it can't be four nine seven
02:11 - or it can't be one thousand
02:13 - and one for example so this number at
02:16 - the moment is one let's put it in within
02:20 - our boundaries so I'm going to say 654
02:24 - which is between 500 and 1000 now how
02:28 - are we going to make this check now in
02:30 - PHP we have logical operators we have
02:33 - and we have or or we have not now I'm
02:37 - not going to discuss the knot in this
02:40 - tutorial in depth and I might come into
02:43 - it but we're definitely going to be
02:45 - discussing the and or the or now and or
02:47 - can be written in a few ways we can
02:51 - write and like this with a double
02:52 - ampersand symbol or we can write it and
02:56 - you can see it's turned blue as well it
02:58 - doesn't have to be in capitals but it
02:59 - just makes everything easier to see or
03:01 - is either two vertical lines they're
03:04 - also known as pipes so they're on your
03:06 - keyboard or you can just simply you
03:09 - probably guessed right or so we need to
03:12 - think logically and we need to think in
03:14 - plain English a lot of the time whenever
03:16 - we program anything so I need to say
03:19 - does this nut is this number greater
03:21 - than or equal to 500 which is the lower
03:25 - variable and is it less than or equal to
03:31 - upper so you probably guessed let's
03:34 - start writing this out and speaking in
03:37 - English as we go so I'm going to say if
03:41 - number is greater than or equal to lower
03:48 - and so let's space this out there and
03:54 - number is less than or equal to upper so
04:01 - it has to be greater than or equal to
04:04 - 500 and it has to be less than or equal
04:07 - to foot to a thousand so in this case
04:11 - will echo out okay if that's the case so
04:14 - let's refresh and see what happens
04:15 - okay we're left with the well we're
04:17 - printing out or echoing out okay so what
04:21 - happens if we now change this number to
04:23 - nine nine nine point nine nine
04:25 - for example let's refresh we're still
04:30 - being produced in our browser with okay
04:33 - it's still telling us it's okay so this
04:36 - statement is still evaluating to true
04:38 - now what happens if we say let's just
04:41 - say 10,000 okay
04:44 - so or 10,500 this is obviously greater
04:50 - than a thousand so we should be left
04:53 - with the alternative which will be to
04:54 - display nothing's we don't have our else
04:57 - on the end so if we refresh you can see
04:59 - nothing's displayed so this has worked
05:01 - really really well what I'm going to do
05:04 - at this point is I'm just going to use a
05:06 - bit of concatenation inside here and I'm
05:08 - going to say number must be between
05:12 - space lower and then I'm going to
05:18 - concatenate on some text and with a
05:21 - space either side and upper okay so this
05:26 - is going to read number must be between
05:28 - lower and upper in fact no that needs to
05:33 - go in our else part obviously because if
05:37 - that doesn't evaluate to true otherwise
05:43 - okay
05:45 - okay so the way it works is that if this
05:48 - evaluates to true was hanging okay
05:50 - otherwise we're telling the user the up
05:52 - the lower in the upper bounds of the
05:54 - number so if we refresh so far number
05:56 - must be between five hundred and a
05:58 - thousand if we pop this straight in the
05:59 - middle and say 750 it's telling us this
06:04 - okay so let's go and say that - thousand
06:08 - - 100 for example number must be between
06:10 - 500 and a thousand and then we can do
06:14 - the inclusive numbers as well so if it's
06:16 - 500 it's going to be still okay let's
06:20 - say we were to take the equals out of
06:23 - there remember it now doesn't equal so
06:27 - it's working so maybe we could put a
06:31 - little message on the end of here saying
06:33 - inclusive Okaloosa civ okay so now what
06:40 - we're going to do is get rid of this
06:42 - example and what we're going to do is
06:45 - we're going to have our number we're
06:47 - going to have and a can be one equals
06:50 - two I'm going to have can be two equals
06:54 - four so I want this number here to equal
06:58 - either 2 or 4 so how am I going to do
07:01 - this I'm going to start with if
07:03 - statement and inside here we're going to
07:06 - write if so we're saying if number
07:10 - equals equals remember we're saying is
07:13 - equal to can be 1 or so remember a
07:18 - double pipe number equals equals can be
07:25 - 2 so if it equals either 2 or 4 we're
07:29 - going to echo okay so let's check that
07:32 - at the moment it's 500 nothing's
07:35 - displayed so we can write maybe an else
07:38 - here
07:40 - Eko not okay so we say not okay
07:46 - now if this was to equal to that's fine
07:51 - feels to equal four
07:53 - that's fine if it was to equal say six
07:56 - that's not fine because it doesn't equal
07:59 - the things we've specified now what we
08:02 - can do is we can change this whole thing
08:06 - around and I can say not oh sorry I can
08:10 - say not we use this an exclamation mark
08:12 - to say not so if this is not true or
08:17 - this isn't true then it's okay so at the
08:21 - moment this isn't true
08:22 - all this isn't true so it is okay oh oh
08:27 - sorry yeah so it's - so if not if the
08:30 - number doesn't equal then it's not true
08:33 - so refresh and all maybe weeds her okay
08:38 - so yeah obviously these need to be in
08:40 - brackets because what we're doing is
08:42 - we're evaluating the statement as a
08:43 - whole this is a hole here and this is a
08:48 - hole just here so let's refresh and at
08:52 - the moment is that okay so it doesn't
08:54 - equal the number doesn't equal two it
08:57 - does equal two so it's okay if we to do
09:00 - four and refresh that's okay as well if
09:04 - it's anything else other than two and
09:07 - four with because we've introduced this
09:09 - knot we're saying hmm oh and at this
09:14 - point we need to make sure this is and
09:15 - so
09:19 - okay so okay I'm confused in my own
09:22 - logic what we're doing is we're saying
09:24 - okay if the number is not - and if it's
09:30 - not for so take a look at this code and
09:33 - try and sort of understand it but the
09:35 - logic of it especially speaking into an
09:37 - English English or you say it to
09:40 - yourself and you'll understand it a lot
09:42 - better but that is basically logical
09:44 - operators