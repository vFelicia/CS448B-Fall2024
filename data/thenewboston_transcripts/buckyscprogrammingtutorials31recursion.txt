00:00 - what's going on guys it's Bucky and
00:01 - welcome to your 31st tutorial and in
00:03 - this tutorial I'm going to be talking
00:05 - about something that every single
00:07 - computer science student on Earth just
00:10 - absolutely hates and that is called
00:12 - recursion now this is a topic that's
00:14 - somewhat confusing but I'm going to try
00:16 - to make it uh really simple for you guys
00:19 - so what recursion is is the idea that a
00:22 - function can call itself pretty weird
00:26 - huh so you know how like in main we
00:28 - could call another function called Bucky
00:30 - and Bucky would print something out on
00:32 - the screen well recursion is the idea
00:35 - that Bucky could call Bucky H that's
00:38 - interesting so let's go ahead and take a
00:40 - look at this right now say we had a
00:42 - function called Bucky and all it did was
00:46 - print something out on the screen like
00:47 - see out um let's print out something
00:50 - stupid OMG
00:53 - wtfbbq oh my God WTF barbecue and then
00:57 - it went ahead and it called the function
00:59 - again
01:00 - so now You' say all right well isn't
01:04 - this function going to go ahead and
01:06 - we're going to run Maine first and
01:07 - Main's going to say okay go ahead and
01:09 - run Bucky and Bucky is going to say okay
01:12 - print this out and then run Bucky okay
01:15 - Bucky print this out and then run Bucky
01:17 - again print this out run Bucky print it
01:19 - out run Bucky and whenever we go ahead
01:21 - and run it we can see that this is a
01:23 - function that basically never ends it
01:26 - prints out oh my God WTF barbecue until
01:29 - check it out watermelon exe my computer
01:31 - just crashed and gave up on this so I'm
01:34 - like all right so what's the point of
01:37 - using recursive functions other than
01:40 - don't use them because you know first of
01:42 - all if you build a recursive function
01:44 - like this your computer's going to crash
01:46 - just like mine ass and uh it's not the
01:48 - most useful way to go about things so
01:51 - one reason that people use recursive
01:54 - functions
01:55 - is first of all let me mention this
01:58 - whenever you build a a truly perfect
02:01 - recursive function you need to have
02:03 - something called a base case now a base
02:07 - case is pretty much an ending point for
02:09 - your function so one example that I'm
02:11 - going to be showing you guys is how to
02:13 - calculate factorials now if you remember
02:15 - from math class factorials are pretty
02:18 - much when you say five factorial and
02:20 - it's written like this five explanation
02:22 - point this is pretty much the same same
02:25 - as saying 5 * 4 * 3 * 2 * 1 um 7
02:30 - factorial would be 7 * 6 * 5 * 4 * 3 * 2
02:34 - * 1 whatever factorial it is it's just
02:37 - whatever number times all the way to one
02:40 - so then the value of like 5 factorial is
02:43 - 120 the value of 3 factorial is 3 * 2 *
02:47 - 1 which is 6 so let's go ahead and write
02:50 - a program to do that and this is one of
02:52 - the instances where recursion is
02:54 - actually a good idea so let's go ahead
02:57 - and make a function called we'll call it
03:00 - factorial finders so int first of all
03:03 - better spell that right int
03:08 - um factorial finder I think I spelled
03:10 - that right and it's going to take a
03:12 - parameter which is in
03:14 - X can I not spell int today int X and
03:18 - the parameter it takes is what value do
03:21 - we want to find the factorial of so if
03:24 - we passed it in five hopefully it would
03:26 - give us 120 if we passed it in three it
03:29 - would give us
03:30 - so on and so forth so the first thing we
03:33 - need to build is something called a base
03:35 - case without a base case this factorial
03:39 - finder would never end just like Bucky
03:41 - you know how it ran Forever Until My
03:43 - computer crashed this what this going to
03:45 - do if we don't give it a base case so we
03:47 - need to say okay if x is indeed equal to
03:52 - one then we want to go ahead and return
03:56 - one so whenever you return something
03:58 - remember your your function ends and
04:01 - that's the point that we're trying to
04:02 - get to so in order to do this we're
04:05 - going to assume that they're going to be
04:07 - passing in numbers other than one so
04:10 - we're going to go ahead and do this else
04:12 - if they pass in a number aside from one
04:14 - like five or three or 20 or something
04:16 - like that go ahead and
04:19 - return the value of x which is you know
04:22 - 5 3 20 and then go ahead and multiply
04:26 - that
04:28 - by factorial
04:30 - finder x -1 so what it's going to do is
04:34 - yeah it's going to call the same
04:36 - function again but it's going to call it
04:38 - with a different value it's going to
04:39 - call it with one less than before so if
04:42 - you go ahead and you pass in five to
04:44 - this function what it's going to do is
04:46 - say all right I'm going to call five
04:50 - times the four factorial or factorial
04:52 - four I don't even know how to say it I'm
04:54 - not a mathematician but anyways what
04:56 - it's going to do is it's going to say
04:57 - this I'm going to call five fact
04:59 - factorial 4 well what's the value of
05:02 - that I don't know the value of that is 4
05:05 - factorial 3 what's the value of that I
05:07 - don't know 3 factorial 2 what's the
05:09 - value of that I don't know 2 factorial 1
05:12 - what's the value of that I don't know oh
05:14 - wait I do know one factorial is one so
05:18 - now that it has that bit of information
05:20 - it can go ahead and solve the rest of
05:22 - the questions that it ask you know how I
05:24 - said I don't know I don't know well now
05:26 - it can say all right Bucky one factorial
05:29 - 1 so now I know that 2 factorial is 2 3
05:33 - factorial is 6 4 factorial is 24 and 5
05:36 - factorial is 120 so that way you can see
05:41 - that whenever we go ahead and run this
05:44 - um factorial finer there we go I didn't
05:47 - feel like printing out the whole thing
05:49 - that way when you print out factorial
05:50 - finer five and let me just go ahead and
05:53 - end that line and we run this program it
05:56 - says
05:57 - 120 yeah it was 120 but there is a lot
06:00 - of stuff going on behind the scenes that
06:02 - the user didn't have to see what it did
06:04 - is said all right it ran this function
06:06 - like five different times searching for
06:09 - five factorial and then it called it
06:11 - again searching for four factorial then
06:13 - did again searching for three 2 and
06:15 - finally when it got to one it could
06:18 - answer all the rest of those questions
06:20 - so this is how you can use recursive
06:23 - functions in a useful way again a
06:25 - recursive function is just using the
06:27 - function inside the function body itself
06:30 - and remember whenever you do this you
06:33 - need to have a base case you need to
06:36 - have an ending point that actually
06:38 - answers that question so in this case
06:41 - whenever they got to one it could solve
06:44 - the rest of it of its questions because
06:46 - if we didn't have that base case like
06:48 - before when we printed out OMG WTF
06:51 - barbecue it would just run forever and
06:54 - ever and ever without an end so that's
06:56 - why you need to give it a base case in
06:58 - other words a point to get to where if
07:00 - it solves that question then all the
07:03 - rest of the questions can be solved so
07:06 - again you guys can probably see why
07:09 - people hate recursive functions but why
07:11 - sometimes you actually need it because
07:13 - there's a lot of stuff going on behind
07:15 - the scenes that we don't get look at but
07:18 - we just have to you know assume in
07:20 - theory that this is going to work so
07:22 - it's a little bit different than regular
07:24 - programming in the fact that you don't
07:26 - explicitly call a function like this
07:28 - that a function is call a function for
07:30 - you however many times it needs to so
07:33 - there's a lot of theoretical programming
07:35 - that you need to think of and a lot of
07:36 - different things that can go wrong with
07:38 - recursive functions so that's why I
07:40 - wanted to uh you know show you guys a
07:42 - quick example of the bad way to use
07:44 - recursive functions in the useful way to
07:46 - use recursive functions but now that I
07:48 - taught you guys that tutorial we can
07:50 - finally you know get over recursive
07:52 - functions I you will be happy to know
07:55 - that I don't use recursive functions a
07:57 - lot in programming and we're probably
07:59 - going to be you know done dealing with
08:00 - him for a while but you know it was a
08:02 - topic that we definitely couldn't Skip
08:04 - and now that you watch this tutorial I'm
08:06 - glad I taught it to you guys so thank
08:07 - you guys for watching uh don't forget to
08:09 - subscribe and don't forget to put a base
08:11 - case in your recursive functions or else
08:13 - your guys' computer is going to crash so
08:15 - thank you guys don't forget to subscribe
08:17 - and I'll see you in the next video