00:01 - so what we want to do is in fact SQL
00:04 - might not be an issue in this case
00:06 - because what we might want to do is we
00:09 - might want to check whether this you H
00:11 - either equals you or equals h before we
00:16 - perform this query so we've grabbed the
00:18 - value you H what we can do now here is
00:20 - above the query we can check if you H
00:23 - the variable is equal to either a small
00:26 - U which will it'll automatically be
00:28 - small because of the STR to lower or
00:30 - will it be an H so we can say if you H
00:34 - is equal to AU or you H is equal to an H
00:42 - then we can run we can run all of this
00:50 - code here so down to there and now let's
00:56 - indent everything again so we can view
00:59 - it properly so if the submitted variable
01:03 - which is here is equal to AU or an H
01:07 - perform the query let's just test by
01:10 - putting in else must be U or H so let's
01:22 - refresh to here so if we would select
01:26 - healthy right okay all right okay yeah
01:32 - so we're we're performing this static so
01:35 - that basically means that we it's worked
01:37 - we're not selecting this data just yet
01:40 - because we have an input into the query
01:42 - but just imagine that this is
01:44 - confirmation just say yes that's worked
01:46 - if we click healthy again we still
01:49 - receive this message however if we were
01:51 - to modify this up here to say a must be
01:54 - U or H or in fact something that might
01:57 - be classes a some you know some kind of
02:03 - an SQL injection we supplying this error
02:07 - message but what we can do for there is
02:09 - take out this error message because we
02:10 - don't really want to give away too much
02:13 - works so let's go back up and now we
02:17 - need to do something about this query
02:19 - because at the moment it's selecting
02:20 - this ice-cream row and this is useless
02:24 - because we're allowing the user to input
02:26 - a value but we're selecting a query
02:31 - based on our static preset conditions
02:35 - here so now what we want to say is we're
02:38 - going to get rid of this and calories
02:40 - here we would say we're healthy
02:43 - unhealthy equals a certain value so this
02:47 - value is going to be you H because
02:50 - remember the user is submitting here a
02:53 - value which is put into you H we're
02:57 - making sure it equals U or H then we're
02:59 - performing a query but this time instead
03:01 - of putting you or H in ourselves we're
03:05 - supplying the value of this variable so
03:08 - now if the user was to click on healthy
03:12 - the value of the of this u H here
03:18 - submitted will be H it will go back into
03:22 - PHP we're doing the relevant checks here
03:25 - we're grabbing the variable here
03:26 - converting it to lowercase checking if
03:28 - it is equal to your rate and then
03:30 - putting it into the query so not only if
03:32 - we allow the user to input their own
03:34 - value we've thought about the structure
03:37 - of our program in the fact we need to
03:39 - check this before it's set we need to
03:42 - then set it into a variable then we need
03:44 - to check then we put it into the query
03:46 - and follow on by producing a list of all
03:49 - food which is either healthy or
03:50 - unhealthy so now we've done this we've
03:52 - created a dynamic query so let's go back
03:55 - to index dot PHP and see if this works
03:59 - so we want to choose a food type which
04:01 - is unhealthy first of all and click
04:03 - Submit you can see that we print now
04:05 - produced a list ice-cream has 700
04:07 - calories Pizza has 1,000 calories so
04:10 - they're the to unhealthy values inside
04:12 - our database so we've got a U and U
04:15 - which is Peter and ice-cream what we can
04:18 - then do is select healthy click Submit
04:20 - this value up here changes therefore
04:23 - that the query changes and we've
04:25 - selected the
04:26 - healthy food in our database so this is
04:29 - how we can combine user input and it
04:32 - could be text-based input it can be like
04:36 - drop-down list input loads on the select
04:38 - input it could be absolutely anything
04:40 - you can even press a button just to grab
04:42 - some values it's all about combining
04:45 - what knowledge you have of the post and
04:47 - the get variables and then inserting the
04:49 - data that's been submitted into a query
04:51 - now like I mentioned before this can be
04:53 - dangerous we can have something happen
04:55 - called SQL injection and that's when the
04:59 - value that put into the database might
05:02 - equal might come through as another part
05:08 - of a query for example if this you H
05:10 - value was equal to let's just go up here
05:15 - was equal to a semicolon at sorry a a
05:20 - single quotation mark or and this is the
05:25 - this this one I'm typing is the value of
05:27 - you H or nothing equals nothing okay so
05:32 - that's say that's what the user typed
05:34 - into a textarea box that would then be
05:36 - substituted into here sorry without that
05:39 - extra and you can see how just by
05:42 - inputting this data into there which
05:45 - would not lose you there so it user
05:47 - types this here into a text box and puts
05:52 - it into here we've automatically changed
05:55 - the query nothing does equal nothing so
05:59 - this query will always evaluate to true
06:01 - and this is just an example however it
06:04 - can be dangerous so you need to think
06:06 - about the checks that you do before you
06:09 - perform a query in a program that's very
06:11 - important when you're practicing not so
06:14 - much but I can I can you know I warn you
06:17 - now that this is a good practice to get
06:19 - into making sure that people can't
06:21 - inject their own SQL into your query
06:24 - hence the name SQL injection but this
06:27 - has been a quick tutorial or a long
06:29 - tutorial on how to allow user input to
06:33 - create your query more dynamically