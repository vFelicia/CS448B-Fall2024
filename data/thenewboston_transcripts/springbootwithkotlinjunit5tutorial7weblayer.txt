00:00 - all right so we've finally reached our
00:02 - top layer
00:03 - which is the web layer over here so this
00:05 - one's really
00:06 - responsible for the rest mapping so
00:09 - defining the rest api
00:12 - and also just handling the requests that
00:14 - come into these rest 10 points
00:17 - and then preparing the responses so in
00:19 - this video
00:20 - we'll create our first proper controller
00:23 - which enables this first endpoint that
00:26 - we're working towards
00:28 - that allows us to retrieve all the banks
00:30 - so back in our ide
00:32 - we're gonna go ahead and create a new
00:34 - package
00:36 - and this one as you might think we can
00:38 - call a controller
00:40 - you can also call it something like
00:41 - resource this is quite common
00:44 - but really controller is i think more
00:48 - easy to understand now especially when
00:50 - getting started
00:51 - so in this we're going to create our
00:53 - bank controller
00:56 - and just like we did with the hello
00:58 - world controller
00:59 - i'm already gonna go ahead and add the
01:01 - rest controller annotation
01:03 - which will also tell spring boot to well
01:06 - consider this as a bean so it's gonna be
01:08 - part of the application context
01:11 - which will also be relevant for our
01:13 - testing purposes
01:15 - okay but this is all i want to do here
01:17 - for now because again we're going to
01:19 - first create our test class for it again
01:22 - of course using junit 5
01:24 - click ok and now this time we're going
01:27 - to do something quite different
01:29 - because we're not going to be testing
01:30 - pure pojos by creating the objects
01:33 - ourselves
01:35 - instead we're going to make use of
01:36 - spring boots testing capabilities
01:39 - or at least some of them so here i'm
01:41 - going to add the spring boot test
01:43 - annotation
01:44 - and this will trigger spring boot to
01:46 - initialize the entire application
01:48 - context
01:49 - and even start up the actual application
01:52 - for these tests
01:53 - so always keep in mind when you use
01:55 - spring boot test that it's also somewhat
01:57 - expensive
01:58 - so what we're doing here is really an
02:00 - integration test
02:01 - that will take maybe a second or two to
02:05 - set up the application context
02:07 - of course our application is very simple
02:09 - and there aren't too many beans to
02:11 - initialize for spring
02:13 - but generally when you're using this
02:14 - springboot test annotation
02:16 - you should be aware of its costs simply
02:19 - because it
02:20 - initializes the whole application
02:22 - context there are so called test slices
02:25 - which only initialize a certain part of
02:28 - your
02:28 - application and there are some other
02:30 - ways to restrict
02:32 - which beans are initialized and which
02:34 - you need for your tests
02:36 - but for now we're just going to use
02:38 - spring boot test
02:39 - as the easiest way to get started now
02:42 - inside this test class i want to create
02:45 - an
02:46 - object of type mock mvc so i'm going to
02:50 - also call this one let's say mock mvc
02:53 - and it's going to be of type mock mvc
02:56 - which also comes from the spring boot
02:58 - starter test
02:59 - so you should already have it in your
03:01 - class path so this one should only be
03:03 - used in tests
03:05 - it allows you to make requests to your
03:07 - rest api
03:08 - without actually issuing any http
03:10 - requests which of course is faster
03:13 - so it basically hooks in one layer below
03:16 - the layer in which spring boot usually
03:18 - receives the requests
03:20 - and then it delegates it to a controller
03:22 - but there's no
03:23 - actual http request that's being made
03:26 - here
03:27 - and now in order to tell spring boot to
03:29 - give us a bean
03:30 - of this up of this object when we run
03:32 - the test we're just going to use the
03:34 - auto wired
03:35 - annotation and this is now spring boots
03:38 - way of doing dependency injection so
03:41 - it's going to be responsible for
03:43 - initializing a object of this type
03:47 - and then just assigning it to this
03:50 - variable
03:51 - and this is why also i've used late init
03:53 - var
03:54 - this is a way in kotlin to say that this
03:56 - variable
03:57 - is a late initialized variable so we
03:59 - know that
04:00 - some kind of framework is responsible
04:03 - for
04:03 - injecting this object and it will be
04:06 - initialized at a later point
04:08 - we're going to refactor this later on
04:10 - but for now this will give us
04:11 - a bean of this type well actually
04:14 - there's one more thing we need
04:16 - so the springboot test annotation will
04:18 - only initialize your own application
04:20 - beans
04:21 - in order to get a mock mvc as well we
04:24 - need the configure
04:26 - mockmvc annotation on our test class
04:29 - and then we can use an object of it
04:32 - so with this being done let's actually
04:34 - just add an
04:35 - empty test so again using junit jupiter
04:40 - and well later on we want to make sure
04:42 - that it should return
04:44 - all banks so that's what the endpoint
04:46 - should do but for now
04:48 - i'm actually just going to go ahead and
04:50 - run this test class
04:52 - and just see if it comes up with any
04:53 - errors when initializing our mock can be
04:56 - c
04:56 - object all right so far so good the test
05:00 - passes
05:01 - and there seems to be no issue when
05:03 - initializing this object
05:04 - let's actually see what happens if we
05:06 - remove this auto configure mod mock mvc
05:09 - annotation
05:11 - so when we do this you can see there's
05:13 - an error and it says
05:14 - there's an error creating a bean with
05:16 - name bank controller test
05:18 - and this can happen quite often this
05:20 - kind of error message in spring boot
05:23 - whenever spring boot isn't able to
05:25 - initialize the entire application
05:26 - context
05:28 - so usually this means there's some kind
05:29 - of beat missing that it cannot
05:31 - initialize
05:32 - or maybe there are conflicting beans so
05:35 - multiple of the same
05:36 - type and springboot doesn't know which
05:39 - one you want
05:40 - and here it of course then says
05:42 - unsatisfied dependency expressed through
05:44 - the field mock can we see
05:46 - and just so you know when you get this
05:48 - you can also
05:50 - scroll down and then it says no
05:52 - qualifying being of type
05:54 - something else so here it's the mock can
05:56 - we see and this will go down the entire
05:59 - hierarchy so if there are multiple beans
06:02 - like what can we see
06:03 - this one cannot be initialized because
06:05 - of some other b and c
06:07 - it would show this further down further
06:09 - down further down
06:10 - and then you get to the root cause or
06:13 - the root object
06:14 - or bean that couldn't be initialized
06:17 - so that's just really important to know
06:18 - if you're working with spring boot
06:20 - because this kind of
06:22 - error can come up quite often but then
06:25 - if we're just using auto configure mock
06:27 - can we see here we have no problem
06:29 - and get our mock can we see so now it's
06:32 - time to learn how to use this mock can
06:34 - we see
06:34 - object now one thing you might be
06:36 - wondering about
06:37 - hey what about the bank controller we
06:39 - don't really have a bank controller
06:41 - object yet that we can test
06:43 - well remember that the springboot test
06:45 - annotation
06:46 - basically just starts up the entire
06:48 - application so what we're doing now is
06:50 - we're testing against the actual rest
06:52 - api
06:52 - so we don't really need to have an
06:55 - object of this type
06:57 - instead we really make tests to our rest
06:59 - endpoint
07:00 - so let's just see how this works so we
07:03 - have our test case here
07:04 - saying it should return all the banks
07:07 - and now let's go ahead and make this get
07:09 - request
07:10 - so mock can we see and then you can have
07:13 - get
07:13 - you can have post put
07:16 - delete and so on for all types of rest
07:19 - requests
07:20 - so we're going to use get because this
07:22 - is a get endpoint
07:24 - and we're going to make our request to
07:26 - our api
07:28 - banks endpoint and then what's really
07:31 - useful
07:32 - is you can say and do and then just
07:35 - print
07:35 - which will give you all kinds of
07:37 - information about the request the
07:39 - response
07:40 - and it's really useful to investigate
07:42 - what's happening in the tests
07:44 - and then for now let's just say and
07:46 - expect
07:47 - that the status is okay
07:51 - so you can check for all the http status
07:53 - codes like
07:55 - 404 not found or here it's 200 okay
07:58 - so you might be familiar with some of
08:00 - those numbers here of course you want
08:02 - that we just get an
08:04 - okay and note that this syntax here
08:06 - relies
08:07 - a lot on lambda expressions so this is a
08:10 - lambda expression
08:11 - also this one in the curly braces that
08:14 - you might know already from other
08:15 - languages
08:16 - using functional programming and this is
08:19 - just the
08:19 - kotlin api that springboot offers for
08:22 - the mock mvc
08:24 - inside the status here you could also
08:26 - make
08:27 - multiple assertions well for the status
08:30 - it doesn't really make much sense
08:32 - because there can only be one status
08:34 - however you can also do this for let's
08:37 - say the
08:38 - and expect so here
08:42 - beside status we'll also check the
08:45 - content later on
08:46 - but for now let's just check that the
08:48 - status is okay and that will be enough
08:50 - for now
08:52 - but this is not a given block in fact
08:54 - when using mock cam we see it's a bit
08:56 - hard to distinguish
08:57 - so i like to just use when then
09:01 - really if you want to split it up then
09:03 - this would be
09:04 - the when block the do is really just for
09:08 - debugging purposes and then you could
09:10 - also do it like this
09:13 - and basically split it up but i don't
09:15 - really like this syntax too much so i
09:17 - just keep it together
09:19 - you could also assign the result of this
09:21 - call to a variable
09:23 - and then make assertions down there so
09:25 - it's really a matter of taste
09:27 - and how you want to do it for now let's
09:29 - go ahead and rerun the test
09:32 - okay so mission accomplished we have our
09:34 - failing test
09:35 - let's see what it says well first of all
09:37 - we have all our debug output from the
09:40 - print
09:40 - so you can see it performs a get request
09:43 - to api banks
09:45 - doesn't really have any parameters or
09:46 - headers or any any request body
09:49 - but it's really nice to look in here and
09:51 - see what's happening
09:52 - and then if you scroll down further well
09:54 - you can also see
09:57 - that's the request again but here's the
09:59 - response and it says 404
10:01 - which means not found because currently
10:04 - we do not have this endpoint yet the api
10:08 - slash banks
10:09 - so in the end it fails at the assertion
10:12 - because it's expecting a 200
10:14 - which is the status code for okay but it
10:17 - gets a 404
10:18 - which is the status code for not found
10:21 - so again remember we have our red green
10:23 - refactor cycle
10:24 - and we're now at the point where we have
10:27 - a red
10:27 - a failing test so let's try to make this
10:30 - one
10:31 - green and in the bank controller you
10:33 - basically have everything that you need
10:35 - to make this test green so i challenge
10:37 - you to do this
10:39 - take a look again at what we did in the
10:42 - hello world controller in the very
10:43 - beginning
10:45 - and try to use the same annotations like
10:47 - the request mapping
10:49 - this is also a get endpoint so just like
10:51 - the hello world
10:53 - so please pause the video here and take
10:55 - a minute to try this
10:56 - and then i'll show you the solution all
10:59 - right so the first thing i want to do is
11:01 - add our
11:02 - request mapping up here so request
11:05 - mapping
11:06 - and so the bank controller space path is
11:09 - going to be a slash api and then banks
11:12 - so any endpoint below this one will also
11:15 - be below
11:16 - api slash banks and then we have
11:19 - a get mapping and this one i'm simply
11:22 - going to call getbanks
11:24 - and this will return a list or let's say
11:28 - even a
11:28 - collection of our bank entities
11:31 - and it's quite simple because it doesn't
11:33 - really require any parameters or
11:35 - information from the outside and then it
11:38 - can just call the
11:40 - service dot i think we called it
11:43 - also get banks however we don't have
11:46 - this been yet so let's go ahead and
11:47 - create this in
11:48 - our primary constructor so a
11:52 - service of type bank service and this
11:55 - one obviously can be private because
11:57 - it's
11:57 - only used inside this controller and
12:00 - then let's try and rerun the tests again
12:02 - and see what happens all right looks
12:04 - like this is actually all that we needed
12:07 - and now that i think about it i actually
12:09 - did too much already
12:10 - so let's drive this back for a second
12:13 - for now let's just say works
12:17 - and we're not returning a collection of
12:19 - banks yet but just a string
12:20 - because the test really just wants a
12:23 - status code of
12:24 - 200 on this api bank send point for now
12:27 - so let's just try to get that one green
12:30 - and as you can see this is enough to do
12:32 - that but now let's go
12:34 - into our test again and add a few more
12:38 - assertions or expectations here
12:41 - so oftentimes you're working with json
12:44 - responses
12:45 - and what you can do there is you can use
12:47 - json path
12:49 - and then pass in the expression that
12:52 - basically
12:53 - goes down the json object that's being
12:56 - returned
12:57 - so for now let me just give you the
12:58 - example and then we'll understand
13:00 - exactly how this works in a second
13:04 - so here i'm saying that i want to look
13:06 - at the root
13:07 - object so this is really the entire
13:09 - response basically
13:11 - and because i know that this will be
13:13 - returning a list
13:15 - i want to access the first element in
13:16 - this list and i want to look at the
13:19 - account number field
13:21 - and now for this one i'm expecting that
13:24 - the
13:25 - value should be abcdef
13:29 - because that's what i set for the first
13:31 - object and actually i can move this into
13:34 - one line i find this more readable
13:37 - and you could do the same to get the
13:39 - second bank in the list
13:40 - or the third one or if you want the
13:44 - trust if you want to check about that
13:46 - you can also
13:47 - do it like this so jsonpath is a
13:49 - well-defined specification that you can
13:51 - look up
13:52 - but it's really easy to kind of get a
13:55 - get the hang of it and at least
13:57 - write a simple queries like this one
14:00 - if you have composite objects you can of
14:02 - course also go down
14:05 - and just access any field down the
14:07 - object like this
14:08 - so it's quite easy and quite useful for
14:11 - these kinds of tests
14:13 - and actually there's one more thing i
14:14 - want to test even before this
14:16 - which is that the content has a
14:20 - content type of application
14:23 - json so here i'm just asserting that i
14:26 - get a response
14:28 - that has the application json header so
14:31 - i'm getting json data
14:32 - and once i have inserted this i then
14:35 - look at the json object
14:37 - all right so obviously this should fail
14:40 - again now so let's take a look
14:43 - and then let's take a look at the error
14:45 - message so we get our debug
14:46 - output here and then it says the content
14:50 - type
14:50 - was expected to be application json but
14:53 - it was just plain text
14:55 - so let's go ahead back into our endpoint
14:59 - and now actually if we just
15:02 - move this back to returning the list of
15:05 - banks from the service
15:07 - i believe it will automatically be set
15:09 - to application json by spring
15:12 - because it's then using the object
15:14 - mapper to transform it
15:16 - but we're still getting an error so
15:18 - let's see what's happening
15:21 - so the account number seems to be one
15:23 - two three four
15:25 - so let me check again in our mock data
15:27 - source
15:28 - and indeed this was what i used in my
15:31 - preparation code the abcdf
15:34 - but it's still good because we made sure
15:36 - that our assertion is working as it
15:38 - should
15:39 - so that's perfect we can just try to
15:42 - fix the test and make it green and there
15:45 - we go we have a green test again
15:47 - we're now actually asserting that we get
15:50 - a status code of okay
15:52 - we get a response with the content type
15:55 - of application json
15:56 - and we check that the first bank's
15:59 - account number is one two three
16:01 - four now of course you could be checking
16:05 - as much as you want here you can be
16:06 - checking the account number the trust
16:09 - the transaction fee
16:10 - of each element or you could just
16:13 - check the entire object at once
16:17 - let's also take a look here in our debug
16:19 - output
16:20 - to take a look at the response now so
16:22 - now we can see we have a status code of
16:24 - 200 here
16:25 - we have content type application json
16:28 - again this is
16:29 - coming automatically from spring boot in
16:31 - newer versions
16:32 - where if you're returning a object
16:35 - that's being mapped
16:36 - by the jackson mapper so that's the
16:39 - object mapper that springboot uses
16:40 - internally
16:42 - when you give it a list of banks or a
16:44 - bank it will use that to transform it to
16:47 - json and then send it as the response
16:50 - and it will also set this then
16:51 - automatically
16:53 - and then we have the body with the three
16:56 - banks feel free to extend this test case
17:00 - and make it more comprehensive
17:03 - but what i want to show you here mostly
17:05 - is how to work with what can we see
17:08 - as well as using spring boot test for
17:10 - integration tests like this
17:12 - so now with this one we're actually
17:15 - using
17:15 - our bank controller we're using the bank
17:18 - service
17:19 - our bank data source and all our layers
17:22 - are working together
17:24 - to create this response here
17:27 - all right so that's your first proper
17:29 - endpoint so actually now if you start
17:32 - the application again we can also take a
17:34 - look at this in the browser
17:36 - and in postman so now in the browser
17:39 - i can go to localhost on port 9000
17:45 - and then while on the root url we still
17:47 - get our index.html
17:49 - but if i now go to api banks
17:53 - we can see well the browser in this case
17:56 - firefox
17:57 - even shows it in a nice way you get the
18:00 - json response with three elements
18:02 - and each have their account number trust
18:04 - and transaction fee
18:06 - you can also look at the raw data but
18:08 - it's really nice that it has this
18:10 - visualization
18:11 - now similarly you can open up a tool
18:14 - like postman
18:16 - and then here it's the same thing so i
18:18 - think this
18:19 - base url is localhost 8080 so let me
18:22 - change
18:23 - this one actually so manage environments
18:27 - i have this local environment with my
18:31 - base url which is quite useful but i've
18:34 - changed it in the config
18:36 - so localhost 9000 slash api
18:40 - this way you don't have to type it again
18:42 - all the time
18:44 - and then slash banks should be our
18:46 - endpoint
18:47 - and there we go we have our response
18:49 - here
18:50 - and a tool like postman of course gives
18:52 - you much more control
18:54 - than the browser um as soon as you have
18:57 - post put delete and so on in fact it's
19:00 - going to be really hard to do this in
19:01 - the browser
19:02 - but the simple get endpoint without any
19:05 - parameters or request body is
19:07 - really easy to also look at in the
19:09 - browser
19:10 - we'll see that we'll be using postman
19:13 - for our other request types because it
19:15 - allows you
19:16 - to also define the request body and so
19:18 - on very easily
19:22 - all right so that's it for this video
19:23 - you now know how to use spring boot test
19:26 - and how to use mock mvc to write
19:28 - integration tests in spring boot
19:31 - and of course how to write your
19:33 - controllers that call a proper service
19:36 - i hope you liked it if you did please
19:37 - leave a like and also take a look at my
19:40 - links in the description down below
19:42 - and i'll see you again in the next video