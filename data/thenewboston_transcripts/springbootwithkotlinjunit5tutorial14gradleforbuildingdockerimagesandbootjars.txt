00:00 - so in the comments some of you asked
00:02 - about gradle
00:03 - and why i'm using gradle over maven um
00:05 - so i want to give just a quick
00:07 - user guide into how to use gradle
00:10 - and what comes with the gradle setup
00:13 - from the spring initializer out of the
00:15 - box
00:15 - so in this video you'll learn how to
00:17 - build your project
00:19 - how to package an executable jar for
00:21 - your springboot application
00:23 - and even how to bundle a docker image
00:26 - from it
00:27 - but let's first talk about what gradle
00:29 - itself actually
00:30 - is so gradle is a build automation tool
00:33 - that allows you to
00:34 - build your projects and automate any
00:37 - build tasks that you want
00:39 - so you can build your projects pretty
00:41 - much out of the box
00:42 - with a java plugin for instance for java
00:45 - projects
00:46 - you can also write your own custom
00:47 - gradle tasks
00:49 - to automate pretty much anything you
00:50 - want and also gradle focuses
00:53 - a lot on performance optimization so
00:56 - that your builds your tests and
00:58 - everything runs as fast as it can
01:00 - and also you can see here there are many
01:02 - big companies using gradle of course
01:04 - so beside maven gradle is really one of
01:07 - the primary build tools
01:08 - in the java ecosystem and i personally
01:11 - like
01:12 - gradle probably because i know it better
01:14 - than maven
01:15 - but also because it's more flexible so
01:18 - if you write your own custom tasks here
01:21 - you can basically write any groovy code
01:24 - that you want
01:25 - or if you're using the kotlin syntax so
01:28 - with
01:29 - kts you can basically write any coding
01:32 - code that you want
01:33 - whereas in in maven you have the
01:36 - declarative approach where you write
01:38 - your xml files your prom.xmls
01:41 - and so it's a little more constrained
01:43 - and in gradle you have an actual
01:45 - programming language under the hood
01:46 - so essentially you can write any
01:49 - automation that you want
01:50 - all right so let's take a look at some
01:52 - of the things we can do with gradle
01:54 - the tasks that we're going to see they
01:56 - basically come
01:57 - from the plugins that we have here so
02:00 - there are a few
02:01 - general kotlin or jvm tasks and also
02:05 - there are tasks provided by the spring
02:08 - boot plugin
02:09 - so let's open up a terminal down here
02:11 - and as you might remember we have this
02:13 - gradle wrapper
02:14 - in the project that you can call using
02:17 - gradle w
02:19 - now depending on your operating system
02:21 - you might have to call it like this
02:23 - it doesn't work you can also try calling
02:25 - the bat file directly
02:27 - but for me with windows here
02:30 - it works just fine just calling gradle w
02:33 - and this grader wrapper is really set up
02:35 - in the gradle directory here if you
02:36 - remember
02:37 - and under properties it basically just
02:40 - configures where to download gradle from
02:42 - and which version so whenever a
02:44 - developer or someone else opens your
02:46 - project
02:47 - they can just run gradle w and if it
02:50 - isn't buried it will just download the
02:52 - grade wrapper from the specified url
02:56 - and so this way anyone using your
02:58 - project doesn't have to have a local
02:59 - gradle installation
03:01 - in fact i don't have gradle installed
03:03 - locally right now
03:04 - so if i try to do gradle let's say
03:06 - status
03:08 - i don't actually have gradle here but i
03:10 - can still use
03:11 - the greater wrapper with this project
03:13 - and also
03:14 - the greater wrapper is version together
03:16 - with your project
03:17 - so you can always decide which greater
03:19 - version you want to use for this project
03:21 - to build it
03:22 - and so this way you know which gradle
03:24 - version is used for your build
03:26 - and that also makes it more reliable so
03:28 - let's get started down here by running
03:30 - gradle w tasks and this will just
03:34 - print all the tasks that are available
03:36 - for this project right now
03:38 - so you can see from the top here it
03:40 - starts with boot run
03:42 - which allows you to run your project as
03:44 - a spring boot
03:45 - we're also going to take a look at the
03:47 - clean tasks and the build task
03:49 - so over here and another interesting
03:52 - task
03:52 - here is boot jar so this allows you to
03:55 - assemble your springboot application
03:57 - into an executable jar so we're also
04:00 - going to take a look at that
04:01 - and then since spring boot version 2.3
04:04 - you even have a task
04:06 - boot build image which builds an oci
04:08 - image so
04:10 - a certain way to build a docker image
04:12 - based on your stream boot application
04:14 - so those are the ones we're going to
04:16 - take a look at of course you can also go
04:18 - through the other tasks if you want to
04:19 - explore them
04:20 - but for now let's start off with the
04:23 - clean task
04:24 - so if you have built your project before
04:27 - with
04:28 - gradle you should see a build folder
04:30 - here
04:31 - and this is really where gradle puts all
04:33 - the
04:34 - build files so your compiled classes any
04:37 - jars that it
04:37 - generated and so on so if i run here
04:40 - grader wrapper clean
04:42 - that's just gonna delete the build
04:43 - directory basically
04:45 - so if i refresh now up here sometimes it
04:47 - takes a second
04:48 - okay there it's gone and then the other
04:51 - way around i can run
04:53 - gradle w build and that's going to
04:55 - compile the entire project
04:57 - it's going to assemble all the sources
04:59 - and it's also going to run
05:01 - by default the test that you have in
05:03 - your project
05:04 - so you can see here it starts with
05:05 - compile kotlin of course
05:08 - after you perform a clean it's gonna
05:11 - take
05:11 - um a few seconds so one of the ways that
05:14 - gradle
05:15 - improves this also is that once you've
05:18 - built the project before
05:20 - it can run subsequent builds a lot
05:23 - faster
05:24 - all right so here the build actually
05:25 - fails and i believe that's because we
05:27 - have some tests that don't pass anymore
05:30 - because we're using or we change
05:32 - something about the
05:35 - data source that we're using but at
05:37 - least this way you see that it really
05:38 - does run your tests
05:40 - so it won't build your project
05:43 - if the tests don't pass now fixing these
05:46 - is quite easy
05:47 - and so i challenge you to also try to do
05:49 - this yourself
05:50 - but basically we're going to go into our
05:52 - code here
05:54 - and first of all we don't want to use
05:56 - the network data source anymore
05:57 - because it doesn't implement most of its
06:00 - methods
06:01 - so i'm going to say qualifier mock and
06:04 - then in our mock data source
06:06 - i'm going to also give it this qualifier
06:08 - here so this will already fix most of it
06:11 - so let's take a look and run all the
06:14 - tests again
06:15 - i'm going to close this one down for now
06:17 - all right so now there are only
06:19 - two test cases that fail here and
06:21 - they're quite easy to fix
06:23 - so we've basically used the proper json
06:26 - syntax now so this is now in snake case
06:30 - and the same here so we call this one
06:32 - default
06:34 - default transaction fee and then if we
06:38 - run them again
06:39 - it should all be fine all right there we
06:41 - go all the tests pass again
06:44 - so let's run greater build again
06:47 - all right nice so now we have build
06:48 - successful and also you should have
06:50 - noticed that
06:51 - on the second run the build phase didn't
06:54 - really take
06:54 - long so it jumped almost instantly to
06:56 - the test phase
06:58 - simply because it had already compiled
07:00 - the project again there was also already
07:02 - the build folder
07:04 - so all i had to do was really run the
07:05 - tests again
07:07 - so now the next one we're going to take
07:09 - a look at is gradle w
07:11 - boot run and this really just runs your
07:13 - spring boot application
07:16 - so here you can see you see the same
07:18 - logs as if you ran this from intellij
07:21 - directly
07:22 - so you see spring starting up and it
07:24 - started on port 9000.
07:26 - so in some situations this can be really
07:28 - useful to run your springboot
07:30 - application
07:31 - if you don't want to run it from your
07:33 - ide or your java file
07:35 - and talking about jar files let's also
07:37 - take a look at gradle w
07:39 - and then boot jar and so this will
07:42 - really just take
07:43 - your project and you can see it's quite
07:45 - fast if you've already built the project
07:47 - before
07:48 - and we'll just assemble it all into a
07:50 - executable jar file
07:52 - so if you now look under build and then
07:54 - go into ellipse
07:56 - you should see a jar file being created
07:58 - here so if i now go ahead and say
08:00 - java minus jar so to run hr file
08:04 - and then i give it the build libs whoops
08:07 - not kotlin
08:08 - clips and the jar file that's also just
08:12 - another way to run your application
08:14 - so depending on how you deploy your
08:16 - application the
08:18 - spring boot jar here might be the way
08:20 - that you deploy your actual
08:23 - application into production of course if
08:25 - you're using kubernetes
08:26 - or something like this you need a docker
08:28 - image instead
08:29 - however since springboot 2.3 like i said
08:32 - you even have a task that comes out of
08:34 - the box with the springboot plug-in
08:36 - called boot build image and by the way
08:40 - the casing doesn't really matter
08:42 - with these gradle tasks so you can also
08:44 - just write build image like this
08:46 - and that's gonna assemble a docker image
08:49 - that really just
08:51 - runs your springboot application so you
08:53 - can use those for
08:54 - docker environments whether docker
08:56 - compose or a docker swarm
08:58 - and you can also use it to run your
09:00 - application on a kubernetes cluster
09:02 - so here you can see now it starts
09:04 - building your image and it just takes
09:06 - the
09:07 - project name as the artifact name just
09:10 - like it did for the jar
09:12 - and also by default it's just a snapshot
09:14 - version
09:15 - so by the way notice that this will not
09:17 - work if you don't have docker installed
09:19 - so make sure you have docker installed
09:21 - and then it should be able to
09:22 - find your docker daemon and build your
09:25 - ultra docker image
09:27 - alright so here you can see it use build
09:29 - packs so this is why they also say
09:31 - it builds an oci image and it
09:35 - created quite a few different layers so
09:38 - the way this docker image is packaged
09:39 - follows
09:40 - many best practices it also splits up
09:43 - the springboot application itself into
09:45 - different layers
09:46 - so that if you only change your
09:47 - application only a very small layer
09:50 - changes
09:51 - but i don't want to go into too much
09:52 - detail about this right now that's
09:54 - a topic for a separate docker tutorial
09:57 - of course
09:58 - if you would be interested in such a
09:59 - course let me know down below
10:01 - so that i know which kind of courses you
10:04 - would like to see in the future
10:06 - all right but ultimately you should see
10:07 - successfully build image and then it
10:09 - gives you the name of your image
10:11 - so now taking this you should be able to
10:14 - just say docker run
10:16 - and then give it the name of your image
10:18 - and that tells docker to just run it
10:20 - so now there we go we have at least
10:22 - three ways to run your application now
10:24 - for actually you can run it from your
10:26 - ide which is great for
10:29 - development and you can also run it in
10:31 - debug mode
10:32 - you can use gradle w boot run in order
10:35 - to run it from your command line
10:37 - you can build hr and then use java minus
10:40 - jar
10:41 - or you can use a docker image and then
10:43 - run it with docker
10:45 - now of course if you want to bring your
10:46 - springboot app into production
10:48 - either depending on the environment it's
10:50 - going to run in you're going to create a
10:52 - jar file that can be run on some
10:55 - vm or linux machine or you're going to
10:58 - package a docker image to
11:00 - run on something like a kubernetes
11:02 - cluster and the best thing is all this
11:04 - comes out of the box now with spring
11:06 - boot so you have this plugin in here
11:08 - if you use the springboot initializer
11:10 - and that gives you the boot run the boot
11:12 - jar and the boot build image tasks
11:14 - now the great thing about gradle again
11:16 - is you can also write
11:17 - your own arbitrary tasks to automate
11:20 - anything that you want
11:22 - but that's the topic for a whole nother
11:24 - gradle
11:25 - course or tutorial if you would be
11:27 - interested in such a course
11:29 - also let me know down below so i know
11:30 - what to prioritize
11:32 - and which courses or tutorials you would
11:34 - like to see
11:35 - all right but that's all for this one i
11:36 - hope you liked it if you did please
11:38 - leave a like below
11:40 - and then i will see you in the next one