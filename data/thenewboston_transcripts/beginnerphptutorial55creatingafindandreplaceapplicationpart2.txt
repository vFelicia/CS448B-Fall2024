00:00 - so we use the is set function let me say
00:03 - if is set dollar underscore post the
00:08 - first one to check is text then we use a
00:11 - logical operator and and say if is set
00:15 - dollar underscore post and search for
00:20 - remember we're just referencing the
00:22 - variables from here and we use another
00:25 - and logical operator to now such or
00:29 - check sorry if the replace with is set
00:37 - okay so now we need to check where the
00:39 - users have actually typed any data in
00:41 - this line here will check or this
00:44 - statement in here will check whether the
00:46 - form has been submitted if that
00:49 - evaluates to true we can start to check
00:51 - if the data is empty or not so and
00:55 - before we do that actually we can
00:59 - actually create a shorthand way of using
01:01 - these variables and this must be done
01:03 - inside this if statement because if we
01:06 - try to create a variable first and these
01:08 - can't actually be found we're going to
01:11 - end up getting an undefined index error
01:14 - so text equals dollar underscore post
01:19 - text if you're unfamiliar with this
01:23 - terminology here if you go back and look
01:26 - at the post and get tutorials you'll
01:28 - understand what we're actually doing
01:30 - here we're taking data from the form and
01:32 - putting it into this app these are
01:35 - variables here and then we want search
01:38 - equals dollar underscore post search for
01:43 - and it hasn't got underscore in there
01:46 - and then we want replace equals dollar
01:51 - underscore post and that is replace with
01:57 - so let's just echo these variables out
01:59 - to make sure that they that everything
02:03 - is working up until now these will be
02:06 - with no spaces in between so if I just
02:09 - put one in there two in there and three
02:12 - in there that's a really
02:13 - way to check because if we click find
02:16 - and replace
02:16 - see that one two and three have both
02:19 - been submitted through we've checked for
02:21 - the form submission if we click it and
02:23 - the fall hasn't submitted nothing
02:26 - happens but if we do we return this data
02:30 - so let's get rid of that that and that
02:33 - now what we can do is check whether they
02:36 - have actually typed anything in so if
02:38 - not using the exclamation lock empty
02:43 - text and not empty search and we use the
02:51 - last hand not empty replace and do
02:59 - something otherwise we want to say
03:03 - please fill in all fields of the fields
03:08 - so let's just type something here to
03:11 - check the list check is working and when
03:14 - you're going to type okay with capital
03:15 - letters let's return to our index page
03:18 - and type while in here we - in here and
03:22 - not three in here and let's see what
03:24 - happens so you can see now we've got
03:28 - this error message that we've predefined
03:30 - let's fill in one two again and three
03:36 - again and we'll see what happens here
03:39 - and we're returned with okay so we know
03:41 - at this stage that our form validation
03:43 - is working so inside here we can write
03:47 - the code that actually is actually going
03:49 - to process and return this so this
03:51 - create a bit of space in here for
03:52 - ourselves okay so the first thing we
03:56 - need to do is we need to predefined a
03:58 - variable up here called offset and this
04:01 - is important with the substring function
04:04 - because we once we find an instance of a
04:08 - word inside our string the offset is
04:11 - where we're going to search from once we
04:14 - found one for example we may have the
04:18 - cat sat on the cat
04:22 - if we want to search for cat and replace
04:25 - it with say dog or monkey as I used in
04:28 - my last example it's gonna it's going to
04:32 - find cat here and it's going to make the
04:34 - replacement then it's going to need to
04:37 - start from after this and also replace
04:40 - the last instance of it and our while
04:43 - loop is going to help us ensure that we
04:46 - only loop through this string until no
04:50 - more values have been found that have
04:52 - been specified here so that's what's
04:55 - going to happen now let's do it so let's
05:00 - create our while loop remember a while
05:02 - loop always performs this check going
05:05 - into the loop as opposed to a do-while
05:08 - loop which will search for the condition
05:10 - at the end of the loop so we need to say
05:14 - while substring I'm just calling this
05:18 - giving this I felt my M variable named
05:22 - substring while substring equals
05:25 - substring so now we're you making use of
05:28 - the function inside this while loop
05:30 - substring will return zero if it can't
05:33 - find anything therefore this will
05:36 - evaluate to false so we need to search
05:40 - inside text and we are in fact I've
05:47 - completely messed this up because we're
05:49 - not actually using the substring
05:50 - function like I got a bit confused so
05:53 - we're using the STR pause function
06:01 - obviously the STR pause function is
06:04 - going to return us the offset or the
06:08 - location of a specific string where it
06:13 - is so STR pause equals the function STR
06:18 - pause researching in text we're
06:22 - searching for this search value and
06:26 - we're going to give we're going to
06:27 - specify the offset here now because the
06:31 - offset originally starts at zero
06:35 - we're searching from
06:36 - start of this text variable which
06:40 - equates to this text here what we're
06:44 - then doing is searching for what we've
06:46 - specified in the form here and then when
06:50 - it reaches let's say we were searching
06:53 - for cat inside the cat sat on the mat
06:55 - when it reaches the word cat and finds
06:58 - it this STR pause variable here will be
07:02 - equal to the location then what we can
07:05 - do with the location is we can say well
07:08 - I want this plus the amount of
07:11 - characters in our search term let me
07:15 - just give you an example up here so we
07:17 - know what we do