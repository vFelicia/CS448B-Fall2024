00:00 - okay so now what's the next stage of
00:02 - doing this well we need to create our
00:04 - new image so we need a new image created
00:08 - to be able to store this new thumbnail
00:12 - so I'm going to say new underscore image
00:14 - and this is going to equal image create
00:17 - true color all this is all this
00:21 - functions doing is creating a new image
00:22 - with a true true type color to it and
00:25 - that's important because we obviously
00:27 - want to maintain you know quality when
00:30 - we're creating a new image so now we
00:32 - need to specify the width and the height
00:34 - now obviously we've already got the
00:36 - width and the height here sorted out our
00:37 - new width in our new height so we say
00:40 - new width and new height done okay so
00:45 - now what we need to do is we need to
00:48 - load in our original image as a JPEG
00:51 - image in order to use the function we're
00:54 - going to use next is image copy resized
00:56 - so we need to load in our original image
00:59 - so I'm just going to write image or
01:01 - let's call it JPEG so we don't get in
01:05 - you know
01:06 - messed up with this thing here this set
01:09 - variable here so I'm going to say JPEG
01:11 - or or you could say old image old image
01:16 - equals and and the function we're using
01:20 - is image create from JPEG so image
01:23 - create from JPEG image so we've
01:25 - specified our image in here which is the
01:28 - value of passing through get through our
01:31 - URL and we're creating a new image from
01:33 - this so now we have the original image
01:36 - and we have the new image so now what we
01:39 - can do is use a function called image
01:41 - copy resized and what this is going to
01:44 - do is it's going to resize our image
01:46 - down with very specific parameters in so
01:52 - this function like with most GD library
01:56 - functions in this sense is takes a lot
01:59 - of parameters so let's go through and
02:01 - we'll explain each one as carefully
02:03 - while explaining the least I'll explain
02:06 - each one as carefully as I can so the
02:09 - function is image copy
02:12 - resized okay and this function takes ten
02:17 - parameters so we've got ten parameters
02:19 - to put in here four of which are the
02:21 - destination of x and y of the desk Tori
02:25 - the x and y placement of the destination
02:28 - image and the x and y placement of the
02:30 - source image we don't need to worry
02:32 - about these
02:32 - this is parameters 3 to 6 so we don't
02:37 - need to worry about these the first
02:38 - parameter we do need to worry about is
02:40 - the destination image and the
02:43 - destination image in our case is our new
02:47 - image because we want to create our
02:51 - thumbnail this new image here the second
02:55 - parameter is the old image so it's fine
02:58 - this is why I've named the variables how
03:00 - they are because we can see now what
03:02 - we're doing but we're resizing the new
03:05 - image to into the canvas of the oh sorry
03:09 - we're creating a new image here which
03:11 - we've done already and we're resizing
03:13 - the old image into the canvas of the new
03:15 - image so essentially what we're doing is
03:18 - we've created the canvas found new image
03:20 - which is with the new width and the new
03:22 - height and we're applying our old image
03:25 - to this now obviously this isn't enough
03:27 - parameters we need to specify things
03:29 - like the height and the width of the of
03:32 - the new and the and the old image so we
03:34 - need to scale it down appropriately
03:37 - because what we're not doing is
03:38 - performing a command which is actually
03:40 - going to resize the image itself whereas
03:44 - the function is named it with image copy
03:46 - resize so we're copying the old image to
03:49 - the new image but just with different
03:51 - width and height so the next three
03:54 - parameters like I said the four
03:56 - parameters are the destination X
03:58 - destination white source X and source Y
04:01 - we don't need to worry about these
04:02 - because they're just going from the top
04:04 - of the image they're just going to go
04:07 - straight in theory they're not going to
04:08 - be resized or moved in sorry they're not
04:10 - going to be moved anywhere ok so the
04:12 - seventh parameter we've got destination
04:14 - width so the destination width is
04:16 - obviously the new width
04:19 - and the destination height is obviously
04:21 - the new height because this is the
04:24 - destination that we're creating our
04:25 - thumbnail app inside this image this new
04:29 - image and then what we need to do is the
04:31 - source within the source height which is
04:33 - obviously the old width and the old
04:37 - height but we have called these image
04:39 - width and image height so image width
04:42 - image height remember with the GD
04:46 - library when you're specifying widths
04:48 - and Heights the width always comes
04:49 - before the height okay so now we are
04:52 - pretty much done that there's a just one
04:54 - last thing we need to do and we need to
04:58 - use the function image JPEG and this is
05:05 - going to display the image out on the
05:07 - screen for us so sorry
05:11 - new image so image JPEG new image this
05:16 - is the new image that we created with
05:18 - the new width of new height so I the
05:20 - thumbnail and now what we're doing is
05:22 - we're just outputting it onto the screen
05:24 - so let's uncomment this header here with
05:27 - changing our content type and let's go
05:29 - ahead into our browser and test it so
05:31 - fingers crossed okay great so what we've
05:35 - done here is we've returned the image
05:37 - with the scaled down height and width
05:40 - and you can see that it's maintained its
05:43 - aspect ratio it hasn't been distorted or
05:47 - elongated or stretched with ways or
05:49 - anything like that so let's still go
05:51 - back and have a look at the original
05:52 - image you can see that it's still sort
05:55 - of intact there but when we go back to
05:58 - this page we have resized our image okay
06:02 - so the last stage is to save this file
06:05 - so it can be processed so you can
06:07 - process this URL sort of on the fly if
06:10 - you like so what we want to do is we
06:13 - want to save the file itself so we just
06:16 - simply add a comma onto the inner
06:19 - parameters of this function this image
06:21 - JPEG function and we just specify a file
06:24 - name so the file name I'm going to
06:26 - choose is the original image name which
06:28 - is image
06:29 - and I'm going to append on and I'm going
06:32 - to say dot thumb dot jpg so this is
06:37 - going to be phone jpg and this is going
06:40 - to be dot thumb jpg so it's going to
06:42 - create a new JPEG image remember the dot
06:45 - jpg at the end is really important
06:46 - because then it's a recognizable
06:48 - extension so let's go ahead and run this
06:51 - page let's refresh okay so now what's
06:54 - happened is we've changed we've we've
06:59 - taken this phone dot jpg we processed it
07:01 - through we've resized it but then we've
07:03 - saved as phone jpg' thumb dot jpg so
07:09 - this is an image in my browser you can
07:11 - see that I can pick it up and drag it
07:13 - and copy it copy and paste it whatever I
07:15 - want to do so this is an image in itself
07:19 - of the resized thumbnail so now you can
07:22 - see how useful this function could be
07:24 - I wouldn't recommend calling it index
07:26 - dot PHP call it something like generate
07:28 - thumbnail PHP and then you can simply
07:30 - run an image through using this get
07:33 - variable and then you can process the
07:37 - image and output it to a file name of
07:40 - your choice