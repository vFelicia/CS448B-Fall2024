00:00 - hi this is Alex from PHP academy' org
00:02 - and this is a video tutorial for the new
00:05 - Boston now we're going to be continuing
00:08 - with XML and I'm going to finish this
00:09 - short XML series with looking at an
00:12 - example from the YouTube data API now
00:17 - I've got the YouTube data API page if
00:22 - you like up the it's in the tools
00:24 - section of Google code so the URL is
00:29 - here if you want to have a look at this
00:32 - as well
00:33 - so I'm okay let's come down and we can
00:35 - have a look here we've got several
00:37 - options and what these different options
00:39 - are going to do is generate XML
00:42 - documents for us so we can so we can
00:45 - grab data specifically from where we
00:47 - want some is going to enable or use
00:50 - author or thent ocation but we're not
00:52 - going to be focusing on that we're going
00:54 - to be focusing on just dumb simple
00:56 - features of this so here in the you're
01:02 - in the another tab I have a specific
01:05 - feed for a specific video on YouTube and
01:08 - this is denoted here by the videos
01:11 - forward slash and then the video name
01:13 - itself so were to replicate this for
01:17 - yourself and test it for yourself just
01:21 - simply take the the name of the video so
01:26 - we'll have on YouTube we have watch and
01:28 - then equals and a value here so we're
01:31 - I'm sure you know what I mean it's just
01:32 - the unique code that identifies each
01:34 - video so if you take this and pop it
01:36 - into this URL you'll be presented with
01:39 - this data regarding the video so if you
01:42 - look carefully you can see things like
01:44 - let's go and have a look here let's pick
01:49 - something out the way
01:49 - might find useful
01:54 - [Music]
02:01 - okay so here up here we've got the title
02:03 - so you can see here we've got the title
02:06 - tag start starting here we've got some
02:09 - attributes on to this but we don't need
02:11 - to worry about that for now but for now
02:13 - we've got title here and ends title here
02:16 - so the title here you can see it's
02:18 - contained within these tags you've also
02:21 - got the content here which is create
02:25 - your own guestbook using PHP and MySQL
02:27 - database that's essentially a
02:28 - description or that sorry the content
02:31 - that's relative to the description side
02:36 - of this so we can take the description
02:38 - from it as well and there's various
02:40 - other aspects we can take from this but
02:43 - in this tutorial we're just going to be
02:45 - focusing on getting the title and the
02:47 - description and displaying them on our
02:49 - page so let's go ahead and open up
02:52 - context okay so the first thing we need
02:55 - to do is we need to set a variable which
02:58 - is going to hold the data about this so
03:00 - I'm going to say video is equal to and
03:03 - remember we'll be using this simple XML
03:06 - underscore load underscore file function
03:11 - and in here we can simply take we don't
03:13 - need to use a local file we can use
03:15 - external files as well so if we come
03:18 - into here and copy and paste this here
03:21 - the this generated XML file and come
03:24 - back into our text editor and paste that
03:26 - in there what this will do is it will
03:28 - create our object from this function
03:31 - reading this URL so we don't have to
03:34 - load in a far specifically it doesn't
03:38 - specifically have to be on on in our
03:40 - room in the directory or in another
03:43 - directory on our web server but we can
03:45 - specify euros as well so now what we
03:49 - want to do is we want to come down here
03:50 - and establish what we want to say so I'm
03:52 - going to echo out title
03:56 - and I'm going to break and then
03:58 - underneath here I'm going to echo out
04:00 - the title of this in fact let's append
04:05 - it onto the end of here to save space
04:07 - and we'll create it all on one line so
04:09 - what we essentially want to do is say
04:11 - video and then we want to say - and then
04:14 - greater than so we're taking a specific
04:16 - tag from this XML file so the tag is
04:20 - called title so as you know what we do
04:23 - is we say title like that so it's saying
04:26 - video title now if for example this was
04:30 - a list of a list of video so this data
04:34 - here may be a list of say most popular
04:38 - videos what we could actually do is we
04:40 - could loop this in a for loop so for
04:43 - example if we had more than one title
04:45 - tag on a page we could create a loop a
04:47 - for loop as we've seen in the previous
04:49 - tutorials from our from our own XML
04:51 - files and we could actually read in
04:54 - several titles then what we could do is
04:57 - read in say several descriptions and
04:59 - then we could link the user to these
05:00 - most popular videos so it's very
05:02 - powerful because we're maintaining a
05:04 - data structure these popular videos will
05:07 - update themselves and as we've seen
05:09 - before as new tags are added an old tags
05:11 - are removed our script is going to keep
05:14 - up to date with these because it's using
05:16 - the exactly the same structure so that's
05:18 - something to bear in mind if you're
05:19 - going to play around with the page that
05:21 - I've already shown you here and you're
05:23 - going to say most viewed videos or most
05:27 - recent videos for example or top rated
05:29 - most discussed you've got loads of
05:31 - different options but for now we're just
05:33 - focusing on one video as an example so
05:36 - vector it out the video title let's see
05:38 - if that's worked first of all we're
05:39 - going to put this in bold
05:44 - and upend the break once there so we can
05:47 - view the description as well so go back
05:50 - to our page and refresh okay so you can
05:53 - see that we've got title we've broken
05:55 - down we've actually displayed the title
05:57 - from this XML document so you can
05:59 - already see how powerful this can be in
06:01 - taking specific elements about videos
06:03 - now for example let's say this video
06:06 - name changed on YouTube and it
06:10 - completely changed to something else
06:11 - what's going to happen well our XML is
06:14 - going to update itself so therefore our
06:16 - code is going to equal the same value
06:19 - that's specific to YouTube so as well as
06:22 - some being able to easily access these
06:25 - tags we're also keeping up-to-date with
06:28 - everything with the tags themselves when
06:30 - things might change on YouTube so now
06:34 - what we can do is we've broken down and
06:36 - I'm going to echo out exactly the same
06:38 - thing gonna say strong strong this time
06:43 - I'm going to say description this is the
06:46 - last example I'm going to use but I'll
06:49 - leave it up to you to go and play around
06:50 - with different values things like that
06:52 - let's just move this code on to outside
06:55 - of here so we do exactly the same thing
06:58 - when we say video and this time it's
07:00 - content okay so we're now what we've
07:02 - done is we've grabbed the start content
07:05 - of the description let's go back to our
07:07 - page and refresh and you can see that
07:10 - it's given us a description of the video
07:12 - and as I explained before there's
07:16 - various other tags you can you can take
07:22 - from this specific file itself so we've
07:24 - got things down here like the duration
07:27 - we've got the thumbnail image so where
07:30 - that corresponds to the video itself
07:34 - we've even got been rating for the video
07:37 - and the number of raters so there's a
07:38 - vast amount of information that we can
07:40 - take just out of this single XML file
07:43 - and that's the powerful thing about XML
07:45 - is that lots of websites do use it in
07:48 - the API so you can just grab data
07:50 - quickly an update you may have come
07:52 - across websites say for example in
07:54 - YouTube the index different
07:56 - YouTube videos and display data about
07:58 - them and in fact actual fact they allow
08:00 - that users to comment on them videos
08:02 - from their own website but that's a
08:05 - whole different thing that said the
08:07 - YouTube API itself so you'll find that
08:09 - Twitter and other social networking
08:12 - websites or other websites may produce
08:13 - their own XML feeds more specifically we
08:16 - have news feeds from websites as well in
08:19 - XML format so XML is a really really
08:22 - widely used standard that allows you to
08:24 - maintain a specific structure to your
08:27 - code the code itself and actually echo
08:31 - out things from it and which will
08:34 - constantly update depending on the the
08:36 - updates from the website so that's taken
08:40 - a brief look at how to load in a file
08:42 - from YouTube for a specific video here
08:45 - and grab the title and the video content
08:49 - from from this XML file