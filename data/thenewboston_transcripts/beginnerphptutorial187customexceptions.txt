00:00 - hi this is Alex from PHP academy' are
00:02 - all going to back with another video
00:03 - created for the new Boston now in this
00:07 - exception handling video we're going to
00:08 - look at throwing more than one or
00:12 - catching rather sorry more than one
00:14 - exception that might be thrown so we're
00:16 - throwing more than one exception and
00:17 - we're catching more than one exception
00:19 - we're going to give these exceptions our
00:21 - own name so I'm going to use an example
00:24 - of connecting to a MySQL database you
00:28 - probably already know that to connect to
00:29 - a MySQL database use MySQL connect you
00:34 - then specify the server name the host
00:36 - the host name sorry
00:38 - yet the server name the username and
00:41 - then the password and then we're also
00:44 - going to incorporate this and select
00:48 - database function MySQL select database
00:50 - in which we just specify the database so
00:54 - the first thing I'm going to do is
00:55 - create some of our variables that we're
00:57 - going to be using within these functions
00:59 - just to keep the code clean and easily
01:01 - modifiable so the MySQL server in my
01:06 - case is localhost the MySQL user I'm
01:12 - going to say host Ashley
01:14 - Spezza so host is localhost the user is
01:19 - root and the password in my case is
01:25 - unspecified I don't actually have a
01:27 - password linked to this root account so
01:31 - now I can specify the database so MySQL
01:33 - DB and that is equal to a underscore
01:37 - database this database does exist within
01:39 - a table so when I use the when I test
01:43 - out these exception handling handlers
01:46 - I'm going to change route to Alex so we
01:48 - don't connect properly to our server and
01:51 - then for database um we're just going to
01:53 - append a one on the end just so that
01:56 - gives us an error about our database as
01:58 - well so how do we go about redefining or
02:03 - renaming these exceptions now we do this
02:06 - by creating an extension of a class that
02:10 - already exists and the class is
02:12 - exception
02:13 - so what we need to do is we need to
02:15 - create a new class we need to say class
02:17 - and give it a class name so for the
02:19 - database the database arm exception I'm
02:23 - going to call it database exception with
02:26 - just capital D in the capital e and this
02:29 - is going to extend to ease the extends
02:31 - keyword exception and then we just put
02:35 - two records that we don't need to
02:37 - specify anything in in here at all so
02:41 - what we're doing is we're taking
02:43 - exception and we're extending this into
02:46 - our own class called database exception
02:48 - so we're basically taking everything
02:51 - from exception and using that in our own
02:53 - class called database exception and I'm
02:56 - going to copy and paste this code down
02:58 - if I will write it out again so I'm
03:00 - going to say class server exception and
03:07 - that's also going to extend exception
03:12 - and then we just do two and curly
03:16 - brackets there so I'll put this one at
03:18 - the top because we're going to be
03:18 - connecting our database first then we're
03:20 - going to be our server first then we're
03:23 - going to select our database so let's
03:26 - set up our try and catch block but this
03:31 - time we can add another catch on the end
03:35 - so we've got two catches in our try and
03:37 - couch so what do we put inside each of
03:41 - these well we just say exception no we
03:46 - don't we say catch server extension and
03:51 - we'll call this X and then we exception
03:57 - and then we say catch database exception
04:01 - II X as well and in here we can echo out
04:04 - error messages specific to each
04:06 - exception thrown so what we can now do
04:09 - with a server exception and data
04:10 - exception database exception is we can
04:13 - throw these inside our block so the
04:16 - first thing to do is set up an if
04:17 - statement we're going to say if we can't
04:22 - connect and we're going to silence this
04:23 - so we're not going to give any errors
04:25 - out from
04:26 - my SQL by default so MySQL connect and
04:31 - we put in our MySQL host our MySQL user
04:37 - and our my ask you our password if it
04:42 - doesn't connect or if we're not
04:43 - connecting remember silencing this we
04:46 - are going to throw new server exception
04:51 - and then we're going to specify am an
04:54 - error message so I'm going to say could
04:58 - not connect to server now I can say else
05:04 - if and we can say not and we get them a
05:07 - silence in this MySQL select dB
05:13 - and again we're selecting we're
05:15 - connecting to my SQL DB which we've
05:18 - already specified up here and if that
05:21 - returns true so if if it's not if we
05:24 - can't connect then this will return true
05:26 - need to throw a new data base exception
05:31 - okay so remember we've got we're
05:33 - catching our server extension and
05:35 - database exception and for that we're
05:37 - going to specify the message and in fact
05:43 - we could probably yeah we'll say it
05:44 - could
05:46 - connect to database or could not select
05:55 - database okay so now what we've done is
05:59 - we've created - or an if else if
06:01 - statement and we have said if we can't
06:04 - connect to MySQL so we can't connect to
06:06 - our server using our credentials up here
06:09 - and here then we want to throw a new
06:13 - server exception which we've already
06:14 - predefined by extending our exception
06:17 - class to this that we've named ourselves
06:19 - and we've done exactly the same with
06:21 - database exception we've extended this
06:23 - class and we're now dealing with a named
06:26 - class called database exception with
06:27 - that we've called ourself so we're doing
06:30 - exactly the same thing we're saying if
06:32 - we can't connect that and throw a
06:33 - database exception now we can set up
06:35 - each catch from what we want to do for
06:37 - each catch so if we can't connect to our
06:40 - server for now we're just going to print
06:42 - out us an error message obviously you
06:44 - could do whatever you want it to in here
06:46 - but I'm just going to demonstrate this
06:47 - with an error so I'm going to append on
06:49 - the e^x variable that we've created from
06:52 - this class and from that we're going to
06:56 - specify the function get message which
06:58 - will get the message that we specified
06:59 - when we threw the exception now what we
07:03 - can do is do the exactly the same for
07:05 - our database exception we can say error
07:08 - and then e^x get message so this means
07:15 - we're a now we've now thrown two
07:17 - different exceptions and we have two
07:19 - different actions for each exception
07:21 - thrown so you can now see how this can
07:23 - can actually be useful in everyday
07:25 - applications so let's first of all
07:29 - connect to our database we'll say else
07:33 - okay connected so let's come into our
07:40 - page and refresh now the credit n choose
07:42 - R fine so we've been connected now let's
07:45 - play around with changing them so let's
07:47 - change a root to Alex and what they
07:50 - should do is we should throw a new
07:53 - server exception and we should have the
07:54 - error message could not connect to
07:56 - server'
07:57 - so let's refresh error could not connect
07:59 - to server so that's successful we've
08:01 - successfully thrown this error
08:03 - okay so let's change that back to root
08:06 - and now let's say a database once we've
08:08 - appended a one on this database doesn't
08:10 - exist
08:10 - so now let's refresh and you can see
08:13 - what we've got an error saying could not
08:15 - select database so what we've done in
08:19 - this tutorial is we've extended and the
08:23 - exception class to two class server
08:24 - around so we're using parts of this
08:27 - exception class for ourself and by doing
08:30 - this what we've done by defining them
08:32 - here what we've done is we've been able
08:34 - to throw two different exceptions by
08:37 - naming the classes ourselves we've
08:39 - created a custom name for our exception
08:42 - so we've duplicated this exception class
08:45 - essentially that's what we've done we've
08:48 - connected to our database which you
08:49 - should know how to do and you should now
08:52 - know this works so if we don't connect
08:54 - with throw a new exception otherwise if
08:57 - we don't connect to our database we
08:58 - throw a new exception as well otherwise
09:00 - we say that we're connected successfully
09:02 - and we've got our catch blocks down here
09:05 - which give out an error just as an
09:07 - example but otherwise you could choose
09:10 - to take an action depending on which
09:14 - exception has been thrown so take this
09:17 - play around with it see what you can do
09:19 - with it and see how you can apply it to
09:21 - your own applications