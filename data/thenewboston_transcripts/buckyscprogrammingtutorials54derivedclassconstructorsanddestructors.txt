00:00 - alright guys welcome to your 54th
00:02 - tutorial and in this tutorial I want to
00:04 - talk to you guys about the derived class
00:06 - constructors and deconstructors
00:08 - basically I want to figure out this
00:10 - riddle whenever you have a constructor
00:13 - in addy constructor in the mother class
00:15 - does the daughter class also inherit
00:18 - that constructor well it inherits
00:20 - everything else so is that constructor
00:22 - and Deconstructor included well your
00:24 - short answer is no it does not inherit
00:28 - the constructor and D constructor from
00:30 - the mother class Gore does it I guess
00:35 - you're gonna have to watch and find out
00:36 - so let's go ahead and first make a
00:38 - constructor and B constructor in the
00:40 - mother class so let's go ahead and
00:42 - remember in order to do that just create
00:44 - a function with the same name mother and
00:46 - today mother for the D constructor now
00:50 - let's go ahead and set this up and I
00:53 - guess we'll build the constructor first
00:55 - mother mother and all we're gonna have
00:58 - this constructor do is like C out I am
01:03 - the mother constructor explanation point
01:07 - emphasis on that crap and now let's go
01:10 - ahead and do the same thing let's copy
01:12 - this because I'm lazy and remember dat
01:14 - here tilde so that's the D constructor
01:17 - and just write mother let's get rid of
01:20 - the IMD it's tacky she's a mom mother D
01:25 - constructor so now we have a mother
01:27 - class that has a successful constructor
01:29 - and D constructor so now whenever we
01:32 - create a mother object like mother MA it
01:35 - should build the object so and I messed
01:38 - up something right here some other
01:39 - mother let's see what I messed up
01:43 - oh here it is right here and L you need
01:48 - that because end is not keyword so let's
01:50 - go ahead and run the skin and now
01:52 - whenever I create a mother object you
01:53 - can see that the object gets created I
01:55 - am the mother constructor and whenever
01:58 - the program comes to an end object gets
02:00 - destroyed mother Deconstructor so our
02:03 - mother object works as expected I guess
02:06 - you could say whenever the object gets
02:08 - created this runs and whenever it gets
02:12 - destroyed this runs we already know what
02:14 - a constructor and B constructor does so
02:16 - now let's go ahead and build a daughter
02:19 - object now remember at the beginning of
02:22 - this tutorial I promised you guys that
02:24 - the mother constructor and the
02:28 - constructor even though the daughter is
02:31 - inheriting all the stuff from the mother
02:33 - I promised you guys that it is not
02:36 - inheriting the constructor and D
02:38 - constructor so let's go ahead and build
02:40 - the daughter object if I can type
02:44 - daughter and we'll just name this like
02:47 - Deena because that's a nice name
02:49 - so let's go ahead and build and around
02:51 - this and see what we get whoa whoa whoa
02:54 - Bucky Bucky I think you lied to me it
02:57 - said I'm the mother constructor I am the
02:59 - mother constructor Bucky you mofo you
03:03 - son of B you told me that the daughter
03:05 - is not inheriting the constructor from
03:09 - the mother class so why on earth would
03:12 - it run this constructor twice well let's
03:14 - go ahead and actually build a daughter
03:16 - constructor and we'll see exactly what's
03:19 - going on
03:19 - we'll see if I actually did lie or if I
03:21 - didn't so in order to build daughter
03:23 - constructor let's go ahead and build
03:25 - daughter parentheses and also the tilde
03:28 - daughter for the whoa what the heck is
03:31 - that escape
03:32 - the heck is ahead I do not know how that
03:35 - got there
03:36 - anyways let's go ahead and do that and
03:38 - actually instead of having to copy this
03:40 - I'm just gonna you guys should not do
03:42 - this by the way I just close your eyes
03:44 - for this part and just going to change
03:46 - this to daughter and copy this always
03:52 - bad programming practice because you
03:54 - always usually mess up something but
03:56 - hopefully that should run just like that
03:58 - and now the mother class has its own
04:00 - unique constructor and D constructor and
04:03 - the daughter class has its own
04:05 - constrictor and D constructor so now
04:08 - whenever I run this you're saying
04:09 - alright so you lied me obviously the
04:12 - daughter did in fact inherit the moms
04:14 - constructor so now that it has its own
04:16 - construction and Deconstructor i should
04:19 - see just two constructors and 2d
04:21 - constructors run from the mom one from
04:23 - the kid so let's go ahead and build this
04:25 - in what the heck is this crap six things
04:28 - popping up
04:29 - all right Bucky you need to take a
04:30 - timeout and explain to me what's going
04:32 - on well in order to do that I'll make it
04:35 - real simple for you guys just comment
04:36 - this out right here and run this program
04:38 - again and now we see once we just built
04:42 - this one daughter object actually let me
04:44 - go ahead and take this out completely
04:45 - and now XS out and build it and run it
04:48 - again now we see that even we built even
04:51 - though we built one daughter object it's
04:54 - still running that mother constructor
04:56 - and the daughter constructor so what the
04:58 - heck is going on Bucky alright now let
05:01 - me take a timeout take a deep breath
05:03 - because I got some explaining to do when
05:05 - I told you at the beginning of this
05:07 - story that the daughter does not inherit
05:10 - the mother constructor I wasn't lying I
05:12 - was telling the truth even though the
05:16 - daughter is not inheriting the mother
05:18 - constructor the mother constructor still
05:21 - runs so basically here is how your
05:24 - program works whenever you start this
05:26 - program it says alright I have one
05:29 - daughter object that I need to make so
05:32 - the very first thing I'm gonna do before
05:33 - I do any of my own crap in this daughter
05:36 - class the very first thing this program
05:39 - is going to do is it's going to invoke
05:41 - the base classes constructor
05:43 - so it says alright daughter you have one
05:46 - base class called mother so let's go up
05:48 - to mother and we're gonna in and we're
05:51 - going to invoke the mother constructor
05:53 - before we even do anything with the
05:55 - daughter so that's why the very first
05:57 - thing we did was invoke the mothers
05:59 - constructor and then after that we were
06:03 - able to invoke the daughters constructor
06:05 - so basically whenever you use a class it
06:08 - sets up all its base classes before it
06:11 - does anything on its own class so that's
06:13 - why whenever running the starter object
06:15 - it sets everything up on top of it
06:18 - before it you know did the daughter
06:20 - stuff and another thing I want to point
06:22 - out say you weren't only inheriting from
06:25 - a mother but say there was a grandmother
06:27 - and a great-grandmother and there was a
06:29 - huge hierarchy well it's still the same
06:31 - thing if that was the case then the
06:33 - great-grandmother would get done first
06:35 - and then the grandmother and then the
06:36 - mother and then the daughter basically
06:38 - the very top class is gonna get done the
06:44 - constructor is gonna get finished
06:46 - executing first on the topmost class and
06:49 - this is because like I said whenever you
06:51 - have a class that inherits from another
06:53 - class it needs to set up the class above
06:56 - it in order to make sure everything is
06:57 - going to work inside it so the daughters
07:00 - gonna say RA I need the mother in order
07:02 - to work and the mother didn't say
07:03 - alright I need the grandma in order to
07:05 - work and the grandmas gonna say alright
07:06 - I need the great-grandma in order to
07:08 - work and that's the very top so that's
07:10 - why the great-grandmother it would be
07:11 - set up first but in this case we only
07:14 - have a mother and a daughter a very
07:15 - simple explanation so that's why the
07:18 - mother gets set out first because in
07:19 - order for this daughter class to work
07:21 - the mother class needs to be working
07:23 - first so that is why the mother
07:25 - constructor gets called first like I
07:27 - said the daughter class isn't inheriting
07:29 - it's just setting it up so that's why
07:32 - this mother constructor gets ran simple
07:34 - enough so that's why the mother
07:36 - constructor gets ran and then the
07:38 - daughter constructor gets ran but then
07:40 - the daughter D constructor gets called
07:42 - first and then the mother D constructor
07:44 - that's kind of weird you're saying
07:45 - alright if you're gonna set this class
07:47 - up first then you might as well destroy
07:48 - it first right well that's not the way
07:50 - it works it goes mother daughter
07:51 - daughter mother it's kind of gets
07:53 - sandwiched in there so here's what's
07:55 - happening with the rest of the program
07:57 - whenever an object gets destroyed and
07:59 - remember we only had one daughter object
08:01 - in this program and here's what happens
08:03 - whenever an object gets destroyed its
08:06 - Deconstructor gets called so Deena's
08:09 - Deconstructor got called first and
08:12 - whenever your program saw that this
08:14 - Deconstructor get called it sets off a
08:17 - chain of deconstructors the kid caught
08:19 - after it so if there's were you know a
08:22 - huge family the daughter would get the
08:24 - daughter would die first and then the
08:26 - mother and then the grandma would die
08:28 - and then the great-grandmother so it
08:31 - gets kind of built in a reverse order
08:33 - then thighs but that's how it works so
08:35 - basically one last time whenever your
08:38 - first say you had an object like the
08:41 - daughter all of his space classes the
08:45 - topmost base class gets instantiated
08:47 - first it takes care of the uppermost
08:49 - class first because it needs every class
08:52 - needs class on top of it to work in
08:54 - order for that object work so that's why
08:56 - mother got called even though we weren't
08:58 - inheriting it we needed to set it up
09:00 - before a daughter could get set up now
09:02 - whenever this program ends the first
09:04 - thing to die is this daughter object and
09:07 - once this daughter dies is going to set
09:09 - off a chain of death throughout the
09:11 - family the mother is gonna die then the
09:13 - Grahams gonna die then great grandma's
09:15 - gonna die then Osama bin Laden's gonna
09:16 - die because that's what happened
09:18 - yesterday and that's what day it is and
09:21 - in case you guys are watching this like
09:22 - three years in feature that's what date
09:24 - is today May 3rd Osama bin Laden was
09:28 - declared dead yesterday or two days ago
09:30 - whenever they announced that so anyways
09:32 - I think I'll just in on that note
09:34 - because I'm getting way off topic now
09:35 - and I probably confuse the guys enough
09:37 - so I thank you guys for watching don't
09:39 - forget subscribe and again if you want
09:41 - to check out my tutorials and organized
09:42 - fashion
09:43 - check them out on my website they're all
09:45 - nice and laid out for you guys so thank
09:46 - you guys for watching don't forget
09:47 - subscribe now see eyes later