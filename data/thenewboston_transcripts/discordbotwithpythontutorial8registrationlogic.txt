00:00 - all right guys so in the last video what
00:01 - we did is we accepted this registration
00:05 - command and then we said okay whenever
00:08 - you register we're gonna look at the
00:09 - account number and then if it already
00:12 - matches an existing user that's already
00:14 - registered we're just gonna send back an
00:16 - error message that says already
00:17 - registered
00:18 - and if not then and this is the logic
00:21 - that we're gonna be writing in this
00:23 - tutorial
00:24 - and it basically says that
00:26 - if they are trying to register a new
00:28 - account number like they should be doing
00:31 - then if the user already has an existing
00:33 - registration then we're just going to
00:35 - update that with the new account number
00:37 - that they're passing in and if the user
00:39 - just doesn't have any registration
00:41 - created yet then we're just going to
00:43 - create a brand new one for them either
00:45 - way after this send them a dm
00:48 - with the instructions on how to verify
00:50 - that account number
00:52 - now before we dive any deeper what i
00:54 - actually did before this tutorial
00:56 - is i pasted in this little structure
00:58 - right here
01:00 - and these are the three type of objects
01:03 - that we're going to have in our
01:04 - collection
01:05 - so we already know what a user is a user
01:09 - is the end
01:10 - object that we're all trying to get to
01:12 - this is the ideal state and that is a
01:15 - connection a verified connection between
01:18 - a discord user
01:19 - and with you actually have their
01:22 - like primary key unique id
01:24 - in this field right here it's underscore
01:26 - id
01:27 - so what we are using as like their
01:29 - global unique identifier this is going
01:31 - to be their discord id and of course
01:33 - their account number is their account
01:36 - number on the blockchain and they are
01:38 - going to be able to verify and set this
01:40 - to whatever they want
01:41 - and then
01:42 - like i said in the first tutorial
01:44 - the logic
01:46 - the default logic for this is just that
01:48 - they can have a balance and deposit
01:50 - coins and goes to it however in this
01:52 - system you really don't even need a
01:54 - balance you can just have them pay for
01:56 - things directly
01:57 - or whatever
01:59 - but anyways this is
02:01 - the structure of a user object
02:04 - now i say this because
02:06 - each discord user can have one user
02:09 - object in the spots database
02:11 - and they can also have up to one
02:13 - registration
02:15 - now a registration is kind of like an
02:17 - attempt
02:18 - to
02:19 - set this account number to the
02:21 - registered users account number so again
02:24 - what we are going to be doing is we are
02:26 - going to be passing in a register
02:28 - command like this
02:29 - and the very first time that we do it
02:33 - let's say that bucky's discord id is
02:36 - this
02:36 - since i don't have any registration at
02:39 - all it's going to say okay as long as
02:41 - this is unique and it passes validation
02:43 - and whatnot then i'm going to create a
02:45 - registration for bucky with this account
02:47 - number that he's trying to register and
02:49 - this is going to be the random
02:50 - verification code that we're going to
02:51 - use later on
02:53 - now the next time
02:54 - i update my registration
02:57 - it's going to say okay you already have
02:59 - this one
03:00 - and if you're trying to have a new
03:02 - account number then it's just gonna
03:03 - replace the existing registration object
03:06 - for this user with a new account number
03:08 - so now that we understand all the
03:10 - details nitty gritty let's go ahead and
03:13 - complete this code
03:15 - so the first thing i want to do is
03:17 - actually pluck off a property from this
03:20 - context object and that is just because
03:22 - i'm going to set it equal to a variable
03:24 - only because we're going to be working
03:26 - with it later on and i want to give it
03:28 - something
03:28 - more descriptive naming and that is
03:31 - discord user id
03:33 - and this is equal to context dot author
03:37 - dot id
03:39 - so i just want to be able to use discord
03:40 - user id as a name so that's why i did
03:42 - that
03:43 - and another thing that i'm going to be
03:45 - doing and by the way this is kind of uh
03:48 - irrelevant but i noticed in the last
03:50 - tutorial that i called this variable
03:52 - account name so i renamed it to account
03:55 - number kind of embarrassing there but
03:57 - anyways
03:58 - so the next thing that we're going to be
04:00 - needing for this upcoming logic is this
04:03 - right here this random verification code
04:06 - now this is something that we're going
04:07 - to have to
04:08 - create ourselves so let me go ahead in
04:11 - utils.disc
04:14 - and let's go ahead and write that random
04:17 - verification code function right now
04:20 - so we are going to want to import random
04:24 - because well for obvious reasons
04:27 - and let's say we are just going to call
04:29 - this uh
04:31 - generate
04:33 - location code all right generate
04:35 - verification code
04:37 - and just as reference for what this is
04:40 - going to do pretty obvious but
04:42 - generate a random
04:48 - generate random verification code okay
04:50 - so the first thing i want to specify is
04:53 - what are the available characters that
04:55 - we're going to be choosing from
04:57 - and from string we can have
05:00 - the ascii uppercase
05:02 - and then we'll just do string
05:06 - digits as well so this random
05:08 - verification code won't have any uh
05:11 - lowercase letters but that's fine
05:13 - and then we are essentially just going
05:16 - to get eight random of these characters
05:19 - and then
05:20 - pretty much return that so to do that
05:22 - we're first going to make an iterable
05:23 - that we're going to join together
05:26 - and this iterable is just going to be 8
05:27 - random characters in order to do that
05:30 - you can do random.choice
05:32 - and for this you can say we're going to
05:34 - be choosing from these characters which
05:37 - are just uppercase and digits
05:39 - and then we just have to iterate
05:41 - to get eight of these so for underscore
05:43 - in range
05:46 - eight
05:48 - all right so we're pretty much gonna
05:49 - loop over a random loop eight times
05:52 - and generate eight random characters
05:55 - join them together in a string and just
05:57 - return that and that is going to be our
05:59 - verification code
06:01 - so let me make sure that this is clean
06:03 - and we'll pluck this over
06:06 - so let's see from utils
06:09 - discord we're going to import generate
06:11 - verification code
06:12 - and now what we can actually do is
06:14 - generate that right now so
06:17 - i'm just going to be lazy
06:19 - and say that our verification code is
06:22 - going to be equal
06:23 - to the return value of the generate
06:26 - verification code which should be a
06:28 - random 8
06:29 - character string
06:31 - and now let's plop back in and see
06:36 - where is it there we go okay
06:38 - so again just to double check our logic
06:40 - uh what we have this point is a valid
06:43 - account number so now what we can do is
06:45 - say okay does the user aka the discord
06:50 - user and we're going to check that by
06:51 - the id
06:53 - do they already have a registration
06:55 - object meaning
06:56 - that
06:57 - did they attempt to register before
07:00 - and if it is yes we're just going to
07:02 - update it if not we're just going to
07:04 - create a new registration for them
07:06 - either way
07:08 - we're going to end up with a
07:09 - registration object for them either an
07:11 - updated one or a brand new one
07:13 - so with that being said let me pop open
07:16 - pycharm again and we can do this
07:19 - so we are going to run a query on the
07:22 - actually do i if you didn't have that
07:23 - yet no i don't think i do okay
07:26 - so in addition to this users collection
07:28 - we are also going to make a
07:33 - registrations collection and we'll just
07:36 - say
07:40 - registrations and another thing i want
07:42 - to point out is if you look in my
07:44 - database i don't have any registrations
07:46 - collection right now i only have a
07:48 - user's collection but the cool thing
07:50 - like i said about is that once you
07:53 - try to add
07:55 - an object to one of your collections and
07:57 - that collection does not exist then it's
07:59 - just going to go ahead and create it for
08:00 - you on the fly so that's why i don't
08:02 - need to like go back and explicitly
08:04 - create this collection
08:07 - so anyways with that being said we now
08:09 - have a reference to our registrations
08:11 - collection so we can just run a query on
08:14 - it and i'm going to be storing the
08:15 - results in a variable called results
08:18 - and what we are going to do is we are
08:21 - going to call a method called update one
08:24 - now check this out i want to show you
08:27 - guys what's going on so even though only
08:29 - one of these paths we have where we need
08:32 - to update this registration number what
08:34 - we can actually do in this method is we
08:38 - can call let me see if i can show you
08:41 - guys
08:42 - there is a flag that you can pass in
08:44 - called upsert
08:45 - and what this means is that if you are
08:47 - trying to update a document it's
08:49 - technically called
08:51 - and
08:52 - that document doesn't exist then it's
08:55 - going to go ahead and create one on the
08:56 - fly so the naming of this is a little
08:58 - bit misleading because it's kind of like
09:00 - create or update you can think of it as
09:03 - so okay
09:05 - so the first argument that this takes is
09:09 - the filter of what you're trying to look
09:11 - for and again
09:13 - if this matches it's going to update it
09:16 - if it can't find it in the registrations
09:18 - collection then it's going to create a
09:20 - new one so we can just say the unique
09:22 - identifier
09:24 - is going to be equal to the person's
09:26 - discord user id
09:28 - since for all these registrations
09:31 - that's how we are identifying who they
09:33 - belong to that's the id this is going to
09:35 - be the discord user id
09:38 - all right cool cool cool cool
09:40 - now maybe you found it maybe you didn't
09:42 - but either way what we want to do
09:45 - is this in i don't know how familiar you
09:48 - guys are with but just to show you
09:50 - guys the syntax
09:52 - whenever you say you want to update some
09:54 - properties or set them you use the
09:56 - dollar sign
09:58 - and the command is actually set
10:00 - and then this is actually the key
10:03 - of an object or a dictionary
10:05 - and then the values you put in here are
10:09 - what are going to be applied to this so
10:10 - it's it's a little bit strange syntax
10:13 - now that i think about it
10:14 - and i also think that i am a little bit
10:18 - too nested here
10:19 - okay there we go
10:21 - no it looked funny but essentially
10:24 - it's going to look something like this
10:26 - so the account number for the
10:27 - registration is going to be equal to the
10:30 - account number that got passed then
10:32 - and remember by this point we know that
10:34 - it is valid
10:36 - and after this
10:38 - we are just going to set the
10:39 - verification code and i'm going to copy
10:41 - it from up here to make sure i got all
10:43 - the you know correct syntax correct
10:45 - spelling and whatnot
10:47 - and the verification code
10:49 - we want to set it equal to a
10:51 - verification code
10:53 - so
10:54 - this command is valid however like i
10:56 - said
10:57 - since
10:58 - we don't just want it to say update it
11:01 - and if you can't find it tweak out
11:03 - when we pass in the upsert command
11:06 - that is equal to true what this means
11:08 - that if you can't find it for example
11:10 - someone's trying to do this or register
11:12 - for the very first time then just go
11:14 - ahead and create one
11:16 - okay
11:17 - now with this query the reason that i
11:20 - took this and i wanted to store the
11:23 - results it's because
11:25 - the result object it actually returns a
11:27 - property called
11:29 - modified count
11:31 - and this is how many objects it modified
11:35 - so this is either going to be equal to
11:38 - one if you updated someone's
11:39 - registration or zero if you created a
11:42 - new one
11:43 - so the reason that we want to check this
11:45 - is because we are going to send back
11:48 - a response from the bot that either says
11:50 - registration updated or registration
11:52 - created
11:54 - and actually because i'm super lazy here
11:56 - i'm just gonna copy
11:58 - this i mean come on
12:00 - this is a little too lazy but either way
12:03 - okay
12:04 - so this first one is if
12:07 - something was modified
12:09 - in the registrations collection that
12:11 - must have meant that a registration
12:13 - already existed and therefore
12:16 - the registration updated
12:19 - message is what we can send back
12:22 - now
12:23 - if
12:24 - okay how are we going to do this it's
12:26 - probably going to be multiple lines so
12:28 - let's do this
12:29 - so for the description text we can just
12:32 - say something like uh
12:35 - your
12:37 - registration has been updated
12:41 - we can say something like
12:43 - um
12:44 - with a new account number but that's
12:46 - getting a bit too wordy
12:48 - so we can say to complete
12:51 - registration
12:52 - follow the
12:54 - instructions sent via dm
12:58 - all right so if they are updating the
13:02 - registration to have a new account
13:03 - number this is what we're going to send
13:05 - back otherwise
13:07 - we are going to send back a similar
13:09 - message but instead of registration
13:11 - updated
13:12 - which you should say is we can say
13:14 - registration created
13:18 - and then all right so this text we can
13:20 - say uh
13:22 - let's just do
13:24 - registration created
13:29 - and we can have the same description
13:31 - right here where it's a complete
13:32 - registration follow the instructions via
13:35 - dm
13:37 - okay so that is pretty cool pretty cool
13:40 - and then the last thing that we actually
13:43 - need to do after this is that we always
13:46 - need to send them and let me plop open
13:49 - my
13:50 - chart again
13:51 - so no matter if they're updating or
13:53 - creating a new one we are always going
13:55 - to send them a dm
13:57 - in that dm remember it's going to say
14:00 - send onecoin to the bot account with
14:02 - whatever the random memo is that we
14:04 - generated
14:06 - and since that is the same for
14:09 - each of these flows
14:11 - we can just
14:14 - make that function right here or we can
14:16 - say
14:19 - send verification message
14:22 - now let's actually go ahead and code
14:24 - this
14:25 - as
14:26 - a separate
14:28 - function
14:29 - in our discord utils
14:32 - so this is going to say let's just say
14:36 - send
14:41 - send verification massage message okay
14:46 - and what are we gonna need to pass in
14:48 - here so it's gonna say to complete
14:50 - registration send the following
14:53 - and we're gonna need
14:54 - okay the bots account number the
14:56 - verification code
14:58 - and then their account numbers so we're
15:01 - going to need the context
15:04 - [Music]
15:05 - we'll say
15:09 - registration account number and
15:19 - registration verification code
15:22 - and then for this we'll say send
15:28 - verification message
15:30 - uh and we can say dm
15:33 - verification
15:36 - there we go that's what i do in my head
15:38 - when i can't spell something i just say
15:40 - really slow okay
15:42 - so now let's go ahead and create another
15:44 - one of those beautiful embeds and we'll
15:46 - just name it embed
15:48 - it's going to be equal to a discord
15:51 - embed
15:53 - and then the title of this is going to
15:56 - be account
16:00 - registration
16:02 - okay now the description can be
16:04 - something like to
16:06 - complete tradition please send the
16:14 - please send the following transaction
16:17 - and
16:18 - yeah we probably could have made this a
16:20 - little bit more dry since i feel like
16:22 - i'm repeating myself but um
16:25 - either way this is fine for now
16:27 - and i missed the comma right there and
16:29 - let me clean this up okay beautiful
16:32 - so
16:33 - remember this is going to be dm from the
16:35 - bot saying to complete registration
16:39 - then it's going to give the commands for
16:41 - this user what they need to fill out in
16:43 - this whenever they send coins to the bot
16:46 - to verify
16:47 - so if you remember how to add fields if
16:50 - you do in bend
16:51 - do i say embed in bend
16:54 - add field
16:55 - embed add field okay i can't talk today
16:58 - but whatever
16:59 - and then the first thing is we're going
17:00 - to say the name of this one is going to
17:02 - be from
17:04 - and then we want to say that the value
17:07 - of this is going to be equal to the
17:09 - registration account number because
17:11 - remember
17:12 - we want them to send this from the
17:14 - account number that they're trying to
17:16 - register so that we can prove that they
17:18 - indeed own it because only they know of
17:21 - this secret verification code
17:24 - and then just for formatting i'm just
17:26 - gonna say inline is equal to false
17:29 - and then we're gonna
17:31 - include three other pieces of
17:33 - information in this embed
17:35 - so due to mega laziness just gonna copy
17:39 - that three more times
17:40 - now this next one is we're gonna say
17:43 - who should the transaction be going to
17:45 - well it needs to be going to the bots
17:47 - account number and if you remember from
17:49 - settings
17:51 - we have the bot account number right in
17:53 - here
17:54 - so in discord
17:57 - utils you can say from
17:58 - config.settings import bot account
18:00 - number
18:02 - and then
18:03 - two
18:04 - bot account number okay there you go
18:07 - and then for the memo
18:10 - we want to say the memo is going to be
18:11 - equal to this let me show you you guys
18:14 - can see it this registration
18:16 - verification code that's that random one
18:18 - that we generated
18:20 - so that needs to be the memo
18:22 - and for the amount we're just going to
18:24 - say that
18:27 - the value of this is just going to be
18:29 - one and that just means uh you just need
18:31 - to send one coin
18:34 - now the last thing we need to do is
18:36 - we're just gonna send it as a dm to the
18:38 - user so a weight
18:41 - dot author
18:43 - dot send and i think that's something
18:45 - new that we didn't talk about yet
18:47 - but anyways
18:48 - let me see if i can
18:50 - okay
18:50 - so you see send in bed right here where
18:54 - we're taking the context object and
18:56 - we're saying context.send
18:59 - well
19:00 - we're doing something a little bit
19:01 - different here what we're doing is we're
19:03 - doing context.author.send
19:06 - now the difference of this is that
19:07 - whenever you do context.send it's going
19:10 - to send the reply
19:12 - to the same channel discord channel that
19:14 - the user was typing in
19:16 - now whenever you do context.author.send
19:19 - this is what's going to send the author
19:21 - a dm or direct message
19:23 - so you know if you guys are ever
19:25 - wondering how to send a direct message
19:27 - that's how you do that
19:29 - and last but not least let's go ahead
19:31 - and
19:32 - copy this because we need to import it
19:34 - and use it
19:36 - so back in main.py my discord utils
19:40 - all right
19:42 - so we imported that and last but not
19:45 - least
19:46 - we can just say await send verification
19:48 - match message and the context is equal
19:51 - to context
19:53 - and the registration account number that
19:56 - is going to be equal to
19:59 - the account number
20:01 - that they passed
20:04 - in and then last the registration
20:08 - verification code is going to be equal
20:10 - to the random verification code
20:16 - just like that
20:18 - so now we have our logic designed where
20:21 - we are now ready to test this bad boy so
20:25 - let me go ahead and copy this
20:27 - and
20:28 - i'm going to run this
20:30 - and it said away outside async function
20:39 - and that's probably because in this
20:44 - i need to make this
20:46 - async okay yep in that uh little
20:49 - function that we just created
20:50 - i use the await keyword but i forgot to
20:54 - uh prefix this function definition with
20:58 - async so that's what the error message
21:00 - is coming from going to run this again
21:04 - and it says ready now let's
21:07 - well first i want to show you guys this
21:09 - so i'm going to refresh this and we see
21:11 - that we still don't have a registrations
21:13 - collection and if we go to users the
21:15 - collection and refresh we get nothing so
21:18 - basically our database is as empty
21:21 - as you can get it
21:23 - now back in discord
21:25 - what i'm going to do actually let me
21:27 - make sure i got the right account number
21:29 - so i'm going to copy my account number
21:30 - that i am attempting to register
21:33 - and
21:34 - i just want to say register apple's
21:36 - first make sure we get error invalid
21:39 - account number beautiful
21:40 - so now let me go ahead and register this
21:43 - account number which is a3 yada yada my
21:46 - account number
21:48 - and then it says registration created
21:50 - now that's pretty good because that's
21:52 - what we intended to do the very first
21:54 - time i'm making registration
21:56 - and now if you saw my dm this tutorial
21:59 - bot is going to say
22:01 - account registration to complete
22:03 - registration please send the following
22:04 - transaction from my account
22:07 - to the bots account
22:09 - and this was the random memo that it
22:12 - created or the verification code and
22:14 - then it just said amount one now just to
22:17 - test the full logic because we also have
22:20 - it said okay if the user accidentally
22:23 - typed in the wrong account number or
22:25 - they just want to you know register
22:27 - another one of their blockchain accounts
22:29 - with a spot then what they can do is
22:32 - they can type in
22:33 - register again and then they can paste
22:36 - in a new account number
22:38 - and instead of saying registration
22:40 - created
22:41 - because remember it's not
22:43 - uh being created for the first time even
22:45 - though i didn't pop this open it already
22:48 - existed in there
22:50 - then once it already exists in here then
22:53 - it can just go ahead and update it and
22:55 - that is why it said registration updated
22:58 - and then it gives us this new uh prompt
23:02 - this new dm saying okay instead of this
23:05 - account number we received your new one
23:08 - you can now
23:09 - send your verification message from this
23:12 - and uh just to show you guys in
23:14 - what's going on
23:16 - so right now we have a registration
23:18 - that starts with a db
23:21 - so in here it is db the text might
23:24 - be a little bit small but it says it
23:27 - so
23:29 - and i just want to show you guys this
23:31 - since i forgot to
23:32 - pull open the first time
23:35 - if you register a new account number
23:38 - then in
23:40 - if i refresh this you can see that even
23:43 - though my id stays the same because this
23:45 - is my discord user id
23:48 - that the account number and verification
23:50 - code those did indeed change
23:54 - so now i got instructions to say okay i
23:58 - said this a couple times about now but
24:00 - this is what i have to send to the
24:02 - discord bot however if i just send it
24:04 - right now then it's just going to be a
24:06 - donation to the discord bot because we
24:09 - do not have the logic written where we
24:11 - can actually listen for these
24:13 - transactions coming in and then do
24:15 - something once we receive them so that's
24:17 - what we're going to be creating right
24:19 - now