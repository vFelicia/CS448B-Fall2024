00:00 - all righty hoses welcome back and in
00:02 - this video we're going to be binding the
00:04 - socket to the port so what does this
00:07 - mean basically what we did is we created
00:09 - a socket and all that did is says hey we
00:13 - are going to be connecting to another
00:15 - computer somewhere so now what we need
00:17 - to do is we need to say okay whenever
00:19 - you have that conversation where is that
00:22 - data going to be coming in where is the
00:24 - conversation going to be taking place
00:26 - and we already declared all the
00:28 - variables up here on our own machine
00:30 - just listen on Port 9999 but now we
00:32 - actually have to bind this data to the
00:35 - socket so this socket knows that this is
00:38 - the data to use very simple stuff but
00:40 - you know that's what we got to do two
00:44 - ports
00:45 - and say and wait for connection from a
00:50 - client now the client of course is that
00:52 - Target machine if you got hacked then
00:55 - they probably don't know they're the
00:57 - client but hopefully it's your friend or
00:59 - something in textas so whatever all
01:01 - right so def socket bind and now what we
01:06 - can do is actually just copy this
01:09 - because can use the same stuff and I'm
01:11 - too lazy to type it all right so I'm
01:14 - just going to put a little indicator at
01:16 - first So then whenever you run this
01:17 - program we can see some something pop up
01:19 - in the command line and we know that it
01:20 - didn't freeze or anything so I'll
01:23 - say uh
01:25 - binding socket to
01:28 - Port
01:30 - [Music]
01:34 - and I'll say ports Port because remember
01:37 - this port 9999 this is an integer right
01:40 - now so we have to convert it to a string
01:42 - before we print it out and now if I SP
01:46 - that correctly you can actually do the
01:48 - binding and the way you P you bind your
01:51 - information is actually really easy so
01:54 - for your socket just call the function
01:57 - bind and then inside here you actually
02:00 - rate a tupple and it just takes the host
02:03 - and the port so this says bind the
02:06 - socket to the host and this would
02:08 - usually be an IP address but since we're
02:10 - just listening on our own machine and
02:12 - this is just running on the server
02:13 - itself it's just going to be blank which
02:15 - is fine and Port 9999 all right so now
02:19 - all of our information is bound together
02:21 - we're ready to pretty much listen so for
02:24 - your socket what you're going to do is
02:27 - you're just going to call listen and
02:29 - just stick a number in there like five
02:32 - and that'll be good enough so basically
02:35 - what this does right here is what well
02:39 - I'll break it up so what listen does is
02:41 - it basically allows your server to
02:43 - accept connections so we're not actually
02:46 - connecting yet but now our server is
02:48 - sitting there waiting for someone to
02:50 - connect now this five argument right
02:53 - here this is the number of bad
02:55 - connections that it'll take before
02:56 - refusing any new connections so you can
02:59 - set set it up however you want but five
03:01 - is a good number I mean we're the only
03:03 - ones that are going to be running it in
03:04 - this example so
03:06 - whatev now let me
03:12 - just toss this in again as message and
03:16 - I'll just
03:18 - say all right so whenever we failed at
03:22 - binding I'll say socket binding
03:26 - [Music]
03:28 - error
03:32 - and then we can print out the error
03:34 - message and then what can we do after
03:36 - this let's pump a new
03:38 - line and get some recursion going
03:41 - [Music]
03:44 - on all right so if we fail to bind the
03:47 - socket then what we can do is we can say
03:50 - hey that didn't work but I'm going to
03:52 - retry it so we got some recursion going
03:55 - on it's just going to call this function
03:56 - again and keep trying until it combined
03:59 - so I say combined not combined just
04:03 - talking to myself here don't mind me all
04:05 - right so so far we created a socket we
04:08 - said hey This Server can connect to
04:10 - other computers and then we said all
04:12 - right we're going to bind the socket to
04:14 - the port in other words this is what
04:16 - information or this is where the
04:18 - conversation is going to take place
04:20 - looking good so now the last main
04:24 - function that we have to do here is just
04:25 - to accept connections because right now
04:28 - it's just listening for connections but
04:30 - what happens when someone actually
04:31 - connects well we will
04:33 - [Music]
04:36 - see uh with
04:39 - [Music]
04:42 - client socket must be listening uh for
04:47 - them all right so now what we do is we
04:50 - write def socket accept now this is
04:54 - another thing that you need to watch out
04:56 - for a lot of people try to accept
04:58 - connections when
05:00 - their socket is not listening for them
05:02 - so if you leave this line of code
05:04 - out then it's not going to work your
05:06 - socket needs to be listening before it
05:08 - can actually you know accept obviously
05:11 - so whenever someone ex
05:17 - connects what we're going to do is
05:20 - this all right so what this function
05:23 - does right here is it accepts a new
05:25 - connection so whenever some client
05:27 - connects to our server what it does is
05:30 - it gives you some information this is
05:32 - the actual connection and this well
05:34 - whenever I print out you guys are going
05:36 - to see all right so first let me just
05:39 - print out some information so we can
05:40 - know or understand what these variables
05:43 - actually do so this is going to wait and
05:47 - it's not going to continue for the rest
05:48 - of this code or on with the rest of this
05:50 - code until a connection takes place so
05:53 - at this point in time I'll say
05:55 - connection has
05:57 - been established I guess
06:00 - and let just throw my
06:02 - [Music]
06:06 - pipe and how am I going to format this
06:09 - all
06:10 - [Music]
06:13 - right
06:15 - and all right so this variable right
06:19 - here it's actually broken up into a list
06:22 - and the first element is actually the IP
06:24 - address of whatever computer connected
06:27 - so it's pretty cool that's how we can
06:28 - identify it
06:30 - and after
06:36 - this is the port
06:38 - number and I don't know if I think this
06:41 - is a string already so I just have
06:46 - to all right so the second
06:48 - element is the port number so all right
06:52 - looking good so whenever we get a
06:54 - connection from a client it's just going
06:55 - to print out connection has been
06:57 - established and it's going to tell you
06:59 - the IP address and the port
07:02 - number right there looking good so
07:08 - now what we want to do is we want to
07:10 - pass in well we'll make this function in
07:13 - just a second
07:16 - and close all right so this right here
07:19 - is basically information about whoever
07:21 - connected and this is a reference to the
07:23 - connection itself so the conversation so
07:27 - we're going to make a function in just a
07:28 - second called send commands and
07:31 - basically what this is going to do is
07:34 - once a client is connected then it's
07:36 - going to sit like some dude's computer
07:38 - in Texas is going to sit and say okay
07:40 - what do you want me to do so it's going
07:43 - to look and wait for commands and it's
07:45 - going to do whatever we tell it to and
07:47 - then once it gets a command it's going
07:49 - to run it on its own computer wherever
07:51 - it is and then send us the results so
07:54 - it's basically it's basically an awesome
07:56 - way that we can pretty much access a
07:58 - computer indirectly like