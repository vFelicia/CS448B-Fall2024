00:00 - what's going on guys it's Bucky and
00:01 - welcome to your ninth C++ tutorial and
00:04 - in this tutorial I'm going to be talking
00:06 - more about functions now I talked about
00:09 - this a little bit in like I don't know a
00:11 - couple tutorials ago but I want to talk
00:13 - about it again because I really want to
00:15 - stress what functions are and why they
00:18 - are useful in C++ programming so if you
00:21 - remember a function is basically a
00:24 - computer program is made up of a bunch
00:27 - of functions right now we have one
00:29 - function right here and basically the
00:31 - job of a function is to do something so
00:35 - inside function we can give our program
00:37 - a bunch of separate instructions all
00:39 - followed by a semicolon so our main
00:42 - function that we already learned is the
00:44 - starting point for every computer
00:46 - program every program starts with the
00:49 - function main so this is one function
00:52 - right here but let's go ahead and create
00:54 - another function and in order to do that
00:56 - go ahead and separate from your main so
01:00 - before we're coding everything inside
01:02 - the main function but now we want to
01:04 - create another function so go outside
01:06 - main right here now the first thing that
01:10 - we need is a return type and this is
01:13 - whenever people build functions they
01:15 - usually make a calculation and give you
01:18 - back something for example if we had a
01:20 - function to calculate the speed of my
01:22 - car it would give me back a number if we
01:25 - had a function to UM calculate my weight
01:29 - it would give me back a number well
01:31 - sometimes functions make calculations
01:33 - and sometimes when they don't make
01:35 - calculations just as like printing
01:37 - something out on the screen it doesn't
01:39 - really need to calculate anything so
01:41 - sometimes functions are going to return
01:43 - a number to you in that case you would
01:45 - use int and sometimes they just do stuff
01:48 - like print something out on the screen
01:49 - and don't return any answer to you
01:52 - whenever a function doesn't return
01:54 - anything to you just go ahead and put
01:56 - void and this means you know function
01:59 - just go ahead and do your thing and I
02:01 - don't want anything in return so the
02:04 - very first thing you write is the return
02:07 - type of the function so this one you see
02:10 - it return a number but this one is just
02:12 - going
02:12 - print something out on the screen so
02:14 - it's going to return void so after this
02:17 - you go ahead and you name your function
02:19 - this one is named mein and you can
02:22 - actually name it anything you want this
02:24 - function is just going to print
02:26 - something out on screen like I said so
02:27 - I'm just going to name it print
02:28 - something pretty dumb I know but hey
02:32 - it's my function I can do what I want so
02:34 - after this you see that I added two
02:37 - little curly braces and those are
02:39 - actually called parameters um whenever
02:42 - your function needs additional
02:43 - information you add parameters but we're
02:46 - going to be covering this in next
02:47 - tutorial for now just remember to add
02:49 - them and add nothing in between them
02:51 - trust me I'm going to be covering this
02:53 - in next tutorial and I'm going to make
02:55 - real easy to understand but after these
02:57 - parentheses go ahead and add two curly
03:00 - brackets and just like I said before
03:01 - this is the body of your function for
03:04 - example if you had a function called
03:06 - make peanut butter and jelly inside your
03:09 - body you would have a set of
03:10 - instructions like get out the bread next
03:13 - instruction put peanut butter on one
03:15 - slice next instruction put jelly on one
03:17 - slice lastly eat it well in the body of
03:20 - our function we give it each instruction
03:23 - about what we want this function to do
03:25 - so in our function called print
03:27 - something the only thing that we want
03:29 - this function to do is print something
03:31 - out on the screen easy enough we already
03:33 - know how to do that so let's go ahead
03:35 - and see out oops there we go and what
03:39 - are we going to print out on the screen
03:40 - just right like ooh I am text on the
03:43 - screen it's very feminine function we
03:46 - have here but anyways then just go ahead
03:48 - and end the line simple enough so now
03:52 - whenever we use this function we're
03:55 - going to whenever you use a function
03:57 - it's called calling the function why
03:59 - they did that I don't know but um just
04:01 - remember whenever I say call the
04:02 - function I basically just mean use the
04:04 - function so whenever we call this
04:06 - function all it's going to do is print
04:08 - out ooh I am text on the screen simple
04:11 - enough so let's go ahead and remember
04:13 - since our computer program starts with
04:16 - main we need to tell it in main that
04:19 - this is the function that we want to use
04:21 - so in order to use or call a function
04:24 - all you do is this
04:25 - just go ahead and write print something
04:28 - empty parameters and a semicolon
04:31 - so again anytime you want to use a
04:33 - function just go ahead and type the name
04:34 - of the function
04:35 - empty parameters and a semicolon but
04:39 - check this out whenever we try and build
04:41 - and run this we're going to come and get
04:43 - an error this with this little red
04:46 - rectangle means you can't read my error
04:48 - message because it's down here but says
04:50 - printing something was not declared in
04:52 - the scope and you're saying all right
04:53 - what did we do wrong because Bucky told
04:56 - me that this function is built perfectly
04:59 - which it is but whenever it tried to
05:01 - call it or use it right here it didn't
05:04 - understand what was going on so why is
05:05 - our compiler kind of confused well the
05:08 - reason is this computer programs work
05:11 - from the top down it starts at the very
05:13 - top line and it runs downward until it
05:17 - gets to the very end and then it quits
05:19 - so whenever our computer program was
05:21 - running it said this all right include
05:23 - this file done use this done okay now
05:27 - start with main print something Oh what
05:29 - the heck I never seen that before
05:31 - is this a function or trying to make a
05:33 - variable or what the heck are we doing I
05:35 - don't know what this means
05:37 - well that's because whenever we created
05:40 - our function we created it after we use
05:42 - that we need to tell C++ before we use
05:46 - our function that is actually a function
05:48 - so we have a couple ways of doing this
05:50 - probably the easiest way is just to do
05:52 - this go ahead and cut it and then above
05:55 - your main go ahead and paste it and now
05:58 - C++ is going to think like this all
06:00 - right I'm going to include this simple
06:03 - enough I'm going to use this easy enough
06:06 - and oh you made a function called print
06:09 - something now okay I'll remember that so
06:12 - now whenever I call my main and I come
06:15 - across this thing called print something
06:16 - I know that it's a function that you
06:18 - created so that's why whenever I build
06:20 - and run it now it's going to run
06:22 - perfectly without any errors so that is
06:25 - basically how a computer program works
06:29 - first you need to tell it that you are
06:31 - actually creating a function before you
06:33 - can use that function so if you just try
06:36 - and use it it's
06:37 - not going to know what it is if you
06:39 - didn't create it first sever saying all
06:41 - right I just remember to create all my
06:42 - functions before I use them okay you can
06:45 - do that but let me give you an
06:46 - alternative method of doing this if for
06:49 - some reason you like your main at the
06:51 - top and you like to create your
06:53 - functions after well we already know
06:55 - that whenever you try to run this we're
06:56 - going to get an error but there is one
06:58 - thing that you can do and this is called
07:00 - function prototyping and all this is is
07:04 - this trust me it's the easiest thing
07:05 - ever go ahead and select your a turn
07:08 - type your function name and the
07:10 - parentheses and go ahead and copy that
07:12 - now above your main and under your using
07:16 - go ahead and paste this this is called
07:20 - the function prototype and it's pretty
07:21 - much a copy of your functions header and
07:25 - it basically is saying this alright
07:28 - whenever you run this program now go
07:30 - ahead and include this include this and
07:32 - then we're going to this is called
07:35 - prototyping a function this is pretty
07:38 - much telling our C++ program this
07:40 - alright later on you're going to come
07:42 - across something called print something
07:45 - now whenever you come across it we don't
07:47 - want you to freak out like you have
07:49 - before something us a whole bunch of
07:50 - error messages what we're telling you
07:52 - right now is we created a function
07:54 - called print something but you have to
07:57 - go find it and C++ is going to say oh
07:59 - all right now whenever I try to run my
08:02 - main and I come across this function
08:03 - instead of giving you error message I'm
08:05 - going to know that this is a function
08:07 - that you have somewhere in your program
08:09 - so I'm not going to freak out I know
08:11 - this is a function I know to handle it
08:13 - accordingly so check it out whenever you
08:15 - try and build and run this it works
08:18 - perfectly so that is why you need to do
08:21 - one of two things before you use your
08:24 - function in main one you can prototype
08:26 - it or two you can just go ahead and make
08:30 - your function before main either way
08:33 - whenever you run this function in main
08:35 - it needs to know beforehand some way
08:37 - that this is a function so those are
08:39 - your two different ways of doing that
08:41 - and again in order to create a function
08:43 - go ahead and type the return type the
08:46 - function name
08:47 - and the parameters and again I'm going
08:49 - to be talking about these parameters in
08:51 - the next tutorial so as long as you
08:53 - understand this and the basis of how to
08:55 - create a function and how to use them in
08:57 - main
08:57 - you're ready to move on to the next
08:59 - tutorial so thank you guys for watching
09:00 - don't forget to subscribe and I'll see
09:02 - you guys in next tutorial