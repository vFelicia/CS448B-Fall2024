00:00 - all right welcome back y'all and in this
00:02 - video we're finally going to be getting
00:04 - started with our social functionality
00:07 - now what I did is I actually updated
00:09 - some of the tickets here before they
00:11 - said social but I kind of structured it
00:13 - uh made a little road map here to kind
00:16 - of outline what we're going to do
00:18 - So eventually we're going to have a
00:20 - social feature kind of like you imagine
00:21 - where you can make a post and then other
00:24 - people can leave comments on that post
00:26 - however I don't just want to create
00:29 - everything on the back end all at once
00:31 - instead since our front end still needs
00:34 - some work and it's kind of related to
00:36 - the social feature what I'm going to do
00:38 - is this
00:39 - I am first gonna make the back end for
00:42 - post only no comments
00:44 - and then after that I'm going to go on
00:46 - the front end and you see right here on
00:48 - your profile page you basically have
00:50 - this left section right here and then on
00:52 - the right it's just invitations well
00:54 - eventually we're going to have two tabs
00:56 - here one for your posts and one for
00:58 - these invitations
01:00 - so that's the next thing I'm going to do
01:02 - after the back end is kind of uh all set
01:05 - to go with post kind of just build out
01:07 - the front end framework and then after
01:09 - that I'll actually write the front end
01:11 - posts components
01:13 - and then from there I just have some
01:16 - backlog items that are kind of related
01:17 - to social features one
01:20 - on your profile page we're going to be
01:22 - adding your username right here and
01:24 - that's going to take like I don't know
01:25 - 30 seconds maybe
01:27 - and then after here I'm going to be
01:29 - updating the front end so you can view
01:31 - other people's profiles right now you
01:33 - can see that in the URL basically the
01:36 - only profile you can go to is your own
01:38 - profile however of course once things
01:40 - are connected and you know just more
01:44 - social action going on then you're going
01:46 - to be able to want to click on other
01:48 - people's like user labels and be taking
01:51 - their profile check things out
01:53 - so anyways that's uh what I'm going to
01:56 - be doing right here
01:57 - and then the last
01:59 - um second to last front-end feature
02:01 - is that right now whenever you log out
02:03 - and log back in you go to the course
02:05 - Page by default and instead of that I'm
02:09 - just going to redirect the user to their
02:10 - profile page and I thought it would be
02:13 - good to do this after
02:15 - this feature right here since for this
02:18 - we're going to do some URL updating and
02:20 - then this can just take them to the
02:22 - correct URL and then last but not least
02:24 - to round things out before we get
02:26 - started on the last two features we're
02:28 - going to be working on is comments first
02:30 - I'm of course going to build out the
02:32 - back end and then we'll add the comments
02:34 - to our posts on the front end
02:37 - so that is our roadmap I'm hoping
02:39 - everything will take I don't know maybe
02:42 - uh less than a week for sure let's say
02:44 - that it's August 4th right now
02:47 - so next Friday it's also Friday right
02:51 - now by the way so next Friday I'm hoping
02:53 - to have all this done and launched so
02:55 - that's my goal let's see if we can do it
02:58 - all right now I will say off the bat
03:00 - that we do have a little bit of help
03:02 - and that is I made this other social
03:06 - network type app recently for cooking so
03:09 - people can share like uh recipes and
03:12 - images of food with each other and it it
03:15 - has the recipe which is pretty much a
03:17 - post and also has this comment model and
03:21 - it's a very similar structure to how I
03:23 - want to structure my posts but um yeah I
03:26 - just want to say that I'm going to be
03:27 - referencing this a little bit
03:29 - but either way uh let's hop back into
03:32 - our main project here and first let me
03:35 - create a branch for this
03:37 - so I'm on the back end
03:39 - ticket number 50. cool
03:41 - and let's say
03:46 - a new Branch 50
03:49 - social posts
03:51 - and I'm going to create
03:53 - and am I recording yes and okay so the
03:57 - first thing I want to do is just create
03:59 - a social app I was thinking about just
04:02 - putting it in a post app and then a
04:03 - comments app because that's what I did
04:05 - in this social network just have uh
04:09 - um well they're not called posts they're
04:10 - called recipes and comments but because
04:14 - the app that we're working on right here
04:17 - is a little bit more to it
04:22 - um kind of a little bit more complex I
04:24 - think it's better to organize these
04:25 - under a social app
04:27 - so what I'm gonna do and by app I mean a
04:30 - social Django app so I'm gonna CV into
04:33 - the New Boston and then I'm going to
04:35 - Python 3
04:37 - manage start app is it manage start app
04:40 - or just start app Python 3 managed star
04:42 - app I'll just say social
04:49 - all right so now we got our social app
04:51 - right here and I'm gonna delete models
04:53 - tests and Views because I like to split
04:55 - those out so those
04:58 - and actually let me just steal these so
05:01 - models
05:04 - definitely could have typed that faster
05:05 - okay models package and then serializers
05:10 - refactor rename
05:16 - and then views just like this out
05:19 - all right so that is our structure
05:22 - and now let's actually just go ahead and
05:25 - um
05:26 - register the app for anything else
05:30 - so to register this you need to prepend
05:33 - the app name with the New Boston and
05:35 - assess the location of it and then
05:39 - if I go to Project settings base where
05:42 - everything's registered then in here
05:48 - how's this advertise
05:54 - all right so social apps and this is
05:56 - social config
05:59 - so now our app should be registered
06:02 - and on that note ready to start creating
06:04 - some models now another thing that I
06:08 - want to do off the bat is I actually
06:11 - want to ask chat GPT
06:14 - um kind of for some naming conventions
06:15 - since yes the post is going to be
06:18 - similar to a recipe it's uh pretty much
06:20 - going to have a Creator or an owner and
06:24 - then an optional image and then some
06:26 - like post text but I want to ask chatgpt
06:30 - to write this post model for me because
06:32 - I don't know if the text is going to be
06:33 - called the text the body the whatever
06:37 - else and I just want to kind of
06:40 - um I know it kind of like gets the
06:41 - average of all these so
06:46 - uh social network in chango
06:50 - creates a post model for me
06:56 - and on that note we can actually start
07:02 - rules
07:04 - let me see what I can steal
07:06 - so first of all I'm gonna have a new
07:08 - post model
07:13 - and for creating modified
07:25 - and I actually do want to see
07:29 - pretty sure it's going to be called the
07:31 - owner owner
07:32 - owner owner
07:36 - okay
07:42 - yeah okay
07:44 - so I'm definitely going to have an owner
07:46 - creating modified I just want to make
07:47 - sure I didn't call them anything else
07:50 - and this can be
07:58 - good for now all right chat GPD what did
08:01 - you call it the title the content huh
08:04 - post content
08:06 - okay
08:08 - now
08:13 - um do I want content
08:20 - that is pretty intuitive the post
08:22 - content not the post body
08:26 - not the post description so yeah I
08:28 - believe the content
08:31 - is what we want
08:33 - okay
08:36 - in the description model text field uh
08:38 - an image this is another thing that
08:40 - we're going to need
08:43 - let me just make sure this is my
08:44 - standard for image fields
08:50 - yup and that has
08:52 - okay we'll keep a blank equals true
08:55 - since an image since content is required
08:59 - but an image is not
09:06 - okay
09:08 - this might be a little cumbersome but
09:12 - fix this in Django admin later
09:20 - okay
09:22 - so with this being said let's actually
09:25 - do we want to register this already yeah
09:33 - so now in my model is in it what I can
09:35 - do is from post
09:41 - and then in admin
09:51 - from Models post I'm just going to
09:54 - register post so it shows up in my
09:56 - Django admin now before I make
09:59 - migrations
10:01 - is this good so the post has create
10:04 - modified date the owner the content and
10:06 - an image
10:07 - image can be nullable it's not required
10:10 - and this is all good
10:16 - so
10:18 - make migrations
10:22 - make them migrate
10:25 - and now let me just restart my server so
10:28 - it doesn't get confused and
10:31 - pop over to
10:34 - Jango admin and okay so social now has
10:38 - posts
10:39 - looking good looking good looking good
10:42 - it's looking real good
10:47 - and I'm also thinking that maybe we want
10:49 - to have content be
10:51 - blank true to in the future because
10:53 - there may be some instances where they
10:55 - want to post the image but no content
10:58 - kind of like a
11:00 - Instagram style oh wait a minute no
11:03 - Instagram Style
11:05 - can you even do that or do you have to
11:07 - post some content too I don't know but
11:09 - either way Arts our social networks can
11:11 - be something unique so just do things
11:13 - our way
11:14 - okay
11:16 - so next up what I want to do after this
11:19 - is I want to create a serializer
11:22 - okay so refactor rename
11:26 - new file too
11:28 - let's try to get rid of you
11:30 - so new python file post new python file
11:33 - post okay
11:36 - so for the serializer for this what
11:39 - we're gonna do
11:45 - let's do this let's just copy all you
11:50 - and what we are gonna say is this
11:57 - okay
12:00 - so the fields that we want whenever you
12:07 - are creating it
12:12 - content and image we don't need any
12:15 - read-only fields
12:18 - because we explicitly outlined those uh
12:22 - then the validate that is going to be
12:23 - content and image in the Creator is
12:25 - actually called the owner
12:27 - and this is going to be the requesting
12:29 - user
12:31 - um
12:32 - replace a recipe with post
12:37 - now validate
12:39 - we don't need any special validation
12:45 - so we'll keep that as is
12:48 - the model serializer also already
12:51 - validates kind of everything that we
12:53 - need to validate based on the model
12:55 - so for models post let's do Post
12:59 - I'm going to replace recipe with post
13:03 - okay
13:06 - and then whenever you are reading it
13:09 - what we can do is we can do this
13:20 - we are going to import
13:23 - this
13:26 - and we are going to say this
13:32 - okay
13:34 - so whenever you are reading the post
13:38 - then just serialize the owner
13:51 - let me just see this order read order
13:54 - right
13:55 - Gregory prior right okay
14:01 - I'm also thinking it may be better to
14:03 - explicitly
14:07 - make all of these read only
14:11 - yeah
14:13 - um even though we're only going to be
14:15 - reading from here I believe that
14:22 - by giving each one
14:27 - explicitly read only then it helps with
14:29 - performance
14:33 - oh what's this do this
14:35 - so owner create ID modified date content
14:39 - image
14:49 - and also I want to actually this is good
14:52 - content image because then you don't get
14:54 - created modified okay
14:56 - so anyways
14:57 - um this should have six because this is
15:00 - created and modified owner content image
15:03 - so
15:04 - created modified
15:08 - it's an owner image okay
15:13 - so anyways I was uh saying that when you
15:16 - explicitly pass in read-only fields even
15:18 - if you are only reading from your
15:20 - serializer it gives you some performance
15:23 - benefits because it doesn't ran
15:25 - validation against any of the data when
15:27 - it's read only
15:29 - and that is what we want because we
15:32 - don't need to validate it because that
15:33 - that is already in our database which
15:35 - means it was already validated and well
15:38 - hopefully nothing gets messed up between
15:40 - uh the point where we read it from
15:42 - database database and are serializing it
15:45 - but this should be good for this
15:50 - you create it set the owner to the
15:51 - request user
15:54 - okay
15:56 - yes yes okay
15:59 - and now in our right class
16:05 - yeah let's uh let's steal it from a
16:08 - dress or something
16:11 - shop views addresses
16:19 - actually let's steal it from course
16:31 - yeah this should be a good starting
16:32 - point okay
16:36 - so instead of the core we're going to
16:39 - replace that with the post
16:41 - and we're gonna replace core
16:44 - post
16:48 - now let's see what we got going on
16:55 - Okay so
16:58 - for the Post view set it's a model reset
17:00 - I'm going to be using a
17:03 - multi-part parser and form parser
17:05 - because I'm working with form data AKA
17:08 - images now permission classes is
17:10 - authenticated in this object owner or
17:13 - read only
17:15 - and the property of this is owner so
17:18 - this is good
17:19 - only the owner can pretty much um
17:22 - create or edit their own items or delete
17:26 - oh let's see so this comes with delete
17:29 - that's good uh when creating
17:34 - passing the request is valid if so
17:38 - then the post is equal to whatever you
17:42 - save
17:44 - the read serializer we also need to pass
17:47 - in the request for so it forms the full
17:49 - URL for the image and all right so in
17:53 - the get serializer class we're basically
17:55 - saying anytime you make any write
17:57 - related changes in user rate serializer
17:59 - otherwise use the read serializer
18:01 - let me just see yeah this was the same
18:03 - for the recipe
18:05 - and then for updating
18:07 - partial allowed the instance depending
18:10 - on ID serializer this is the right
18:12 - serializer if it's valid then just get
18:15 - the updated post send through to the
18:17 - re-serializer boom you've got yourself a
18:22 - view okay
18:24 - so also want to copy these urls
18:29 - so copy URLs stick them in Social
18:35 - and then I'm going to say for posts
18:40 - whoa
18:43 - post we are using the post
18:46 - view set
18:50 - okay
18:51 - now let's go ahead and in my project
18:55 - gonna bring in these URLs bringing
18:59 - anywhere else bringing these you or else
19:02 - social
19:06 - it's gonna be the coolest social network
19:07 - ever
19:08 - social urls
19:11 - and then let's lint this bad boy and
19:14 - test things out so make a link
19:20 - and fixing my migration file make a lint
19:22 - again
19:26 - all right beautiful
19:28 - so now just make sure my server is
19:30 - running
19:32 - and all right
19:34 - um apprecially let me restart this again
19:36 - since I have new files just wanna
19:39 - double shirt picked up the latest
19:40 - changes
19:42 - and now I can go ahead and
19:50 - let's first
19:54 - let's first log in make sure I'm the
19:56 - right user
19:57 - so I am Bucky pass one two three four
20:03 - now the first thing I want to do is for
20:06 - one make sure I'm logged in is
20:09 - Bucky okay and now I am just going to
20:13 - get my posts
20:15 - nothing fancy empty list good so far
20:19 - so after this I'm going to create a new
20:22 - post and that is going to be with this
20:24 - type of data and let me just
20:27 - throw it up with this get some errors
20:31 - so I say content is hey
20:36 - all right this gives me a post back
20:39 - recruited ID
20:41 - no image
20:44 - and that works fine so now let me try to
20:47 - create a post with the image
20:49 - and this isn't oh I need form data
20:52 - straight up
20:54 - content yo-yo
20:56 - and then the image
21:00 - this is going to be at or excuse me a
21:02 - file field and I'll just upload this
21:05 - image of one spoon
21:08 - let's send that up okay yo yo one spoon
21:12 - full URL good to go
21:15 - all right so now let me actually try to
21:17 - patch this
21:20 - and I will say I'll update the content
21:22 - to uh spoon
21:25 - City baby what's up
21:28 - uh yep updated two to spoon
21:32 - and now let me try to
21:36 - just update the let's see
21:40 - I am owner one let's try to update it to
21:43 - two didn't work which is good and now
21:46 - last but not least let's try to delete
21:48 - this
21:50 - no content beautiful okay
21:53 - so that was uh easier than anticipated
21:58 - now the question is
22:02 - huh interesting
22:05 - very interesting
22:11 - well first of all let's just refresh
22:12 - this hey
22:14 - hey oh yeah I deleted the second one I
22:16 - was wondering why there was only one
22:18 - okay
22:19 - now is this all we need to do for now
22:24 - I mean if we look at her ticket it just
22:25 - says social posts and that is what we
22:27 - did
22:29 - um another thing that I'm thinking that
22:30 - we may want to do right now
22:34 - is this
22:38 - so right now
22:41 - again actually let me get this one
22:46 - so if I get these posts it gives me a
22:49 - list of posts
22:51 - now
22:53 - even though this is working
22:56 - I'm going to add a filter in here and
22:59 - the reason is because this is actually
23:02 - not the end point that we're going to be
23:03 - using on the front end at this point
23:06 - because on the front end the first
23:08 - feature that we're going to be building
23:09 - is the ability to pretty much create and
23:12 - manage posts from your profile page
23:15 - now what that means is that we're only
23:18 - going to be looking at posts from a
23:19 - specific user so this isn't like a feed
23:22 - or anything where you see like posts
23:25 - from a bunch of different users at least
23:26 - not for this first iteration this first
23:28 - one we're going to need to fetch the
23:31 - post got the hiccups great
23:34 - and then we're only going to need to uh
23:37 - we're gonna be passing in a query param
23:38 - to filter them by a single user
23:41 - so let's just go ahead and make that now
23:45 - okay
23:47 - so
23:49 - before we do that let's take a look at
23:52 - what we did for recipes
23:54 - and look at Django filter back end
24:02 - comments where you at okay filters
24:07 - Django filter back end you're coming
24:09 - from rest framework shingle filter
24:11 - backhand fascinating
24:13 - fascinating
24:15 - and let me just look at how
24:20 - our project settings are set up for this
24:27 - okay
24:29 - all right
24:32 - so uh this is for the token and then no
24:37 - filtering logic by default okay
24:41 - so what I'm gonna do is I'm gonna make a
24:44 - new filter set class
24:47 - and we are going to filter by creator
24:51 - and that the lookup
24:54 - is going to be
24:56 - their user ID
24:58 - okay
25:00 - then we can test that and also before we
25:03 - test that we can also prepare for
25:04 - testing
25:05 - to say we have another post
25:07 - say Ava I say I am
25:11 - Ava
25:14 - and then this one says I am Bucky
25:19 - and this is just so we can see here
25:23 - pretty much who owns each post but now
25:25 - with that said let's go ahead and first
25:31 - create a new filters package in our
25:34 - social app so new
25:36 - package filters
25:38 - and this is going to be for post
25:42 - and just like this
25:44 - we're creating a new filter
25:50 - however we're going to be replacing a
25:52 - recipe with post
25:55 - for these fields we can use a tuple
26:00 - and let's
26:05 - for the models
26:10 - we're going to say owner
26:12 - owner
26:13 - for the fields
26:16 - owner comma for a tuple
26:18 - and all right
26:21 - so now we have a class
26:23 - a filter class
26:25 - that allows users to look up by owner
26:29 - and it'll match up exact so basically
26:32 - they have to pass in owner equals one
26:33 - and it'll
26:35 - the idea of them
26:41 - so filter set
26:45 - their back end
26:50 - wait this comes from the jingle filters
26:52 - package not rest framework
26:54 - so now the question is do I have that
26:57 - filters package
26:59 - and by project Tamil
27:02 - Django filter okay should be good
27:07 - all right so now this is gonna give me
27:10 - this and then my filter back in
27:15 - and then from
27:18 - filters that post import my post filter
27:22 - and then for my filter set class
27:27 - it's going to be my post filter
27:30 - make sure everything is alphabetized
27:36 - make a lint and while you are linting
27:39 - I am going to go ahead and test it and
27:42 - this is with the owner
27:45 - okay
27:46 - so now whenever I get all posts I should
27:48 - have two in there since Ava created one
27:50 - and I created one
27:52 - and now I'm just going to say owner
27:54 - equals one
27:56 - and I get a field error
28:01 - and why is that you asked
28:04 - cannot Reserve crater oh fuel name this
28:08 - is here we go okay
28:13 - so now once I fix that error okay so one
28:18 - gives me buckies I don't know what
28:20 - number Ava is but let's find out two is
28:23 - not Ava is three Ava yes okay so either
28:26 - way we now have support
28:29 - to filter them by a certain user I am
28:33 - Bucky I am Bucky okay okay
28:39 - now as every single linted properly
28:44 - if so I believe we can just push this up
28:46 - to the back end now
28:50 - a few percents this
28:55 - all right cool
28:58 - so now let's push this up and for the
29:00 - naming convention
29:02 - for the first commit
29:04 - we can just do 50 social posts
29:09 - and the reason that I like to do this in
29:11 - my first comment is because
29:14 - um whenever you create a PR then it
29:17 - takes the comment from your first commit
29:19 - and use it as a title for the pr and
29:21 - this is what I want for the title of my
29:22 - PR so well
29:24 - yeah
29:25 - you get the point okay
29:27 - so this register in my app little mini
29:30 - self code review right here uh this
29:33 - looking good
29:34 - init file uh filter file
29:38 - looking noise
29:41 - migrations
29:46 - init file
29:48 - looking nice looking nice that's
29:51 - required on the leak Cascade which is
29:54 - what we want this might have to change
29:55 - because if someone has long content I
29:58 - don't want that all rendering in Django
29:59 - admin
30:00 - but uh that's easy fix whenever we come
30:02 - across that issue
30:06 - this is good however in my serializer
30:10 - can even
30:12 - can even trim that up a bit
30:15 - so the New Boston social serializers
30:19 - we can do this for more simple Imports
30:31 - again and pick up where we left off so
30:33 - serializers
30:34 - uh better Imports
30:39 - all those Imports are correct
30:43 - create
30:45 - date
30:47 - and we did say when we updated to
30:51 - I was just testing
30:55 - okay I just want to test one more thing
30:57 - and that's that whenever we post
30:59 - something
31:01 - that has an image
31:05 - then we get the full URL and then
31:07 - whenever we patch it
31:10 - and let's say that uh we change the
31:12 - image to make these this Flat Rock
31:18 - oh patch post and what number was that
31:27 - five
31:31 - yeah I just want to make sure when I
31:33 - patch it okay that I get a updated full
31:36 - URL too
31:38 - beautiful
31:39 - and on that note I think we're good
31:45 - mm-hmm
31:49 - cool cool cool
31:51 - all right push these up and yeah that
31:53 - was uh easier than I thought
31:57 - all right
31:59 - so now even though we aren't ready to
32:02 - merge this in because I do want to build
32:04 - out the front end for it
32:07 - yeah what we can do is this
32:10 - so I want to build out the front end new
32:13 - layout and then I want to actually build
32:15 - these components these post components
32:16 - on the front end
32:18 - and then what we'll do then
32:21 - is merge everything in since uh whenever
32:25 - I'm building up this front end if I come
32:26 - across any issues like uh I don't know
32:29 - whatever issues there may be with the
32:32 - back end and I need to update something
32:34 - then I don't have to like revert or uh I
32:38 - don't know it's just easier if you kind
32:39 - of this almost tests the back end
32:43 - it's part of development so now
32:46 - that we got this out of the way back in
32:49 - post
32:50 - then what I'll do is I'll say we're
32:52 - going to be working on the front end
32:54 - posts and invites tab next and that'll
32:55 - be part of the same Branch as this
32:59 - so since we're going to be hopping over
33:01 - to the front end let's hop into the
33:03 - front end and get our ticket number so
33:05 - social post 86 social post
33:11 - oh first of all let me make sure I'm
33:13 - updated
33:14 - I don't have any lingering changes nope
33:18 - so on the front end I'm doing 86 social
33:21 - posts
33:24 - all right now is prep work let's go
33:26 - ahead and make those tabs so on the
33:28 - profile Pages profile
33:32 - invitation
33:35 - yeah
33:38 - so what I'm gonna do first
33:42 - to create a new invitations component
33:47 - because then what I can do is stick all
33:50 - these invitations in component
33:52 - and then all the posts and another
33:55 - component and then I'll use a tab
33:57 - component to toggle which one of those
34:00 - sub components to display
34:05 - that'll be good
34:09 - so on that note let's go ahead and do
34:11 - some cleanup we are making a new
34:14 - directory called invitations
34:18 - are you styled my friend yes okay
34:22 - so you are going to have styles
34:26 - and then you are also going to have a
34:29 - component file
34:33 - the file is just going to be renamed
34:38 - to invitations now invitations
34:42 - are going to have this style
34:48 - and also what else do you got going on
34:51 - so invitations
34:54 - what you're going to do
34:56 - is you are gonna have an invitation
34:59 - actually let me shut off my server for a
35:02 - second things are about to get messy
35:04 - just temporary okay
35:07 - so anyways
35:13 - we're gonna do this
35:23 - [Music]
35:25 - so we can have this render invitations
35:27 - function still but instead of
35:33 - returning everything nested inside this
35:37 - invitations component since this is this
35:39 - container now you are just going to
35:41 - return this
35:46 - return your invitations
35:52 - by
35:55 - okay
35:57 - and then we are going to render them
35:58 - right in the main container here
36:02 - and then on that note this invitation is
36:05 - going to move into invitations
36:07 - since the invitations is basically the
36:09 - container IDE error occurred poetry
36:13 - things are going to get messy okay
36:15 - so now this
36:18 - moved over to here
36:21 - invitations a list
36:25 - it's going to be object values
36:26 - invitations
36:28 - that's going to be you selector again
36:30 - invitations selector state
36:37 - okay competitions and invitations
36:44 - from you selector react to Redux
36:48 - okay now invitation list
36:53 - what is this
36:54 - these are just
36:57 - a list of invitations
37:05 - okay now the question is
37:11 - is this all we need to do for this
37:13 - component
37:21 - possibly possibly PA simply possibly
37:25 - okay
37:26 - now if that's the case then what we can
37:28 - do is this
37:30 - we can import invitations from there
37:35 - and then
37:39 - right here where it says render
37:41 - invitations
37:45 - we can render that invitations component
37:53 - and that means we can get rid of this
37:55 - render invitations function
37:58 - and then
38:02 - hmm
38:09 - also means
38:17 - so what we want to do is this
38:23 - we want to move this logic
38:27 - right here where we say if you don't
38:29 - have any invitations then what do you
38:31 - want to do you know we just want to
38:33 - render some empty text
38:39 - and what is this empty text going to say
38:41 - no invitations to display
38:47 - okay so here is where we're calculating
38:50 - the invitation list from the invitations
38:53 - that we have in Redux now if you don't
38:55 - have any invitations then just render
38:59 - empty text otherwise and render this
39:01 - invitation in the container which is
39:03 - going to render all of your individual
39:05 - invitations
39:07 - which is what we want
39:08 - now for this
39:11 - what we can do is whenever we render
39:13 - content for now we can just return
39:15 - invitations
39:17 - eventually this is going to be kind of
39:21 - uh or logic
39:23 - because we need to determine what tab
39:25 - we're on but for right now we don't have
39:27 - any tabs built
39:29 - so
39:30 - no need for any of that
39:32 - so we can get rid of this empty text
39:34 - component
39:36 - um what is this
39:38 - invitation list where are we using you
39:41 - still
39:43 - we're under create invitation button and
39:46 - that's in the section heading
39:48 - for invitations
39:52 - in that section heading
39:55 - is on the right hand side
39:57 - but we want to move that to to
40:00 - invitations
40:05 - so
40:08 - first of all we did not account for this
40:11 - I don't believe
40:14 - and on the right
40:16 - okay
40:17 - but that is fine
40:21 - because what we can do
40:26 - is this
40:31 - say invitation
40:35 - container
40:40 - okay
40:42 - Okay so
40:48 - yeah let's do this
40:51 - so This invitation
40:55 - is going to be renamed to invitation
40:57 - container
40:59 - okay
41:00 - so this is invitation container
41:04 - now for our main page container or
41:06 - component container we'll just keep this
41:08 - empty right now we might have to style
41:09 - this in a bit
41:11 - but essentially
41:15 - what we can do
41:19 - is say this
41:21 - um
41:22 - cons
41:25 - invitations equals this
41:28 - and what we're going to do is return
41:33 - invitation container with invitations
41:36 - rendered in
41:44 - and that will take care of that
41:53 - also
41:55 - hmm
42:03 - yeah let's change some of this
42:10 - so what we're going to do is this we are
42:13 - going to say
42:14 - this invitation list is an ordered list
42:17 - of your invitations
42:20 - um
42:21 - yeah that's fine
42:24 - now whenever we render the invitations
42:28 - we are going to be rendering right from
42:30 - your invitation list
42:34 - and in here
42:36 - what we're going to be doing in the
42:38 - container
42:45 - is this we are going to rename render
42:49 - invitations to render content
42:53 - and that is because
42:55 - we are first going to check
43:00 - you have
43:03 - no invitations then you're going to
43:05 - return empty text instead that says no
43:08 - invitations to display
43:11 - otherwise render your invitations
43:15 - and on top of this is always going to go
43:17 - the section header
43:22 - did we import that yet no
43:30 - okay now where are you at section
43:33 - heading
43:35 - we don't need a render function for this
43:38 - since it's just pretty straight up okay
43:42 - um
43:45 - invitation list length render create
43:47 - invitation button
43:50 - so we're going to need a button an
43:51 - invitation limit amount an Invitational
43:54 - amount is calculated
43:57 - based on this which needs self
44:01 - a lot of moving around things but okay
44:05 - eventually get things in the right order
44:12 - and
44:18 - okay and this is going to require
44:25 - invitation limits
44:28 - which are
44:30 - in our selector
44:37 - all right so now we can bring in create
44:39 - invitation button
44:43 - well first we need a button for this
44:50 - create invitation button
44:59 - and the toggle
45:02 - oh yeah we've got to bring our model in
45:04 - here too and that is toggle invitation
45:06 - modal
45:15 - alcohol comes from hooks
45:21 - and then that means this whole thing
45:27 - is going to need to be
45:31 - in here
45:32 - and then where are you at invitation
45:35 - modal
45:37 - I'm going to move you over to your gnome
45:41 - and for this everything should be good
45:44 - to go invitation model is open if so
45:46 - yada yada boom
45:50 - I think that should just about do it so
45:52 - now let's clean up this
45:55 - render section heading we don't need
45:58 - that
46:00 - we're just going to render content
46:03 - so we don't need you what happened here
46:07 - one too many delete presses okay so fix
46:12 - you up on the right we're just rendering
46:13 - content we don't need you section
46:15 - heading we don't need you create invite
46:18 - button render content you're pretty
46:20 - simple for now
46:22 - invitation list don't need you
46:26 - um
46:28 - okay that can be moved as well but let's
46:31 - just focus on cleanup here
46:35 - uh called up nice import
46:41 - okay so this gets our updated invitation
46:45 - limit
46:48 - and I actually believe that this may be
46:51 - a better place to put it
46:59 - in
47:02 - okay
47:08 - so first of all let's just go ahead and
47:10 - check and make sure I'm gonna mess
47:12 - anything up
47:13 - oh wait I uh I need to start my server
47:19 - okay step one make sure you avoid any
47:22 - huge errors
47:24 - okay everything looks good which is
47:26 - great I'm going to log out log back in
47:29 - go to my profile nothing changed
47:33 - I'm gonna create a note I'll say uh
47:35 - invitations for a magnetic
47:38 - station created beautiful
47:41 - and edit it say nope is it for Bob now
47:45 - beautiful and deleted
47:47 - no invitations empty State there's my
47:49 - limit which is five yada yada
47:52 - looking good okay
47:55 - now let me just do a quick review of
47:58 - this
48:02 - okay so edit profile this is logic for
48:05 - the left this badge shelf self Avatar
48:07 - this logic's still good that way we're
48:10 - just um basically getting our invitation
48:12 - limit whenever you go to the profile
48:14 - page one time rather than
48:16 - like I said eventually we're going to
48:18 - have tabs back here and we don't need to
48:19 - refetch this limit every time we click
48:22 - the tab it's a little unnecessary or
48:25 - very unnecessary
48:27 - now Avatar content is going to be
48:29 - smarter and okay now for my profile I
48:33 - don't have invitations anymore
48:38 - um the button
48:41 - I have it's a button on the left
48:45 - and actually with that said this can be
48:47 - renamed
48:50 - to render button since we only have one
48:52 - button now
49:02 - always like to keep things nice and
49:05 - simple as possible
49:07 - okay
49:12 - and then where was I so this button is
49:14 - for editing your profile
49:17 - oh that's on the left and on the right
49:18 - we just have one thing right now
49:20 - invitation and then whenever you're
49:22 - editing profile it opens good to go
49:24 - so it has a button container image
49:26 - wrapper this for the Avatar left and
49:28 - right section all right that's good
49:31 - and now for these invitations
49:34 - pretty much just make sure everything's
49:35 - ordered correctly
49:39 - limits
49:48 - um
49:51 - care for the user list this is all the
49:54 - same
50:00 - yeah one minor thing here is that for
50:03 - this invitation list
50:05 - um one thing we're just checking
50:09 - is to see if there are any items in it
50:11 - to determine whether we display empty
50:12 - text and then if if there are items then
50:15 - we render them out
50:17 - so it may be a little bit more
50:19 - performant to just have this list be
50:22 - just a straight up list and then only if
50:25 - we need to render them then we can order
50:28 - them since it doesn't really make sense
50:30 - to uh order them prematurely but you
50:34 - know I think this is fine actually so
50:36 - okay
50:37 - we're under the button earn her content
50:41 - section heading
50:43 - good to go
50:47 - okay cool
50:49 - so now let me just go ahead and run lint
50:52 - and I will push this initial Branch up
50:55 - and then it will kind of get started on
50:56 - the tabs
50:58 - so uh this is going to be called 86
51:02 - social posts
51:08 - E6 social posts
51:10 - and what did I do here two green move
51:13 - these oh okay
51:20 - and real quick let me actually just
51:22 - check
51:23 - I moved this file nothing should be
51:27 - ruined just want to check my imports
51:30 - sure I have no relative Imports that
51:32 - broke or anything like that
51:36 - all right so now that we got that out of
51:39 - the way let's hop back in here and
51:41 - figure out this tab logic
51:44 - so
51:46 - what I can do is first
51:51 - think about what other tab logic I'm
51:53 - going to steal and I have a feeling
51:57 - it's gonna come from
52:09 - I said not that one in the exchange
52:12 - let's go ahead and create an asset pair
52:14 - real quick just so we have some elements
52:16 - so primary bpx secondary DMB
52:21 - okay so this is the logic that I want
52:29 - and I say this because this tab data is
52:32 - just stored in state in
52:34 - I want to store this tab data and state
52:38 - the tabs where it says posts or
52:41 - invitations because I don't think
52:44 - we need to keep that in Redux
52:48 - all right so this is in the exchange app
52:53 - so in the exchange uh where are we going
52:56 - so is it the main there yes the main
52:59 - area
53:00 - and what page was this the trade page
53:07 - all right
53:09 - so I have a tab
53:11 - I'm gonna need this
53:16 - and I also want to
53:25 - yeah let's
53:29 - uppercase these
53:33 - and I say that because here on my enums
53:37 - I've been following you see this
53:39 - uppercase standard so
53:43 - uh let's change this so bye
53:47 - by and sell
53:52 - so tap by
53:55 - by tap cell
53:59 - tab by
54:02 - tap cell
54:04 - by tab cell
54:08 - all right
54:12 - all right
54:14 - all right all right all right all right
54:16 - all right okay
54:18 - so we're gonna be having similar tabs so
54:22 - let's prep for this
54:23 - now
54:25 - our tabs
54:26 - are going to be the pages that we want
54:29 - or the sections whatever we call it and
54:31 - I'll say posts
54:34 - invitations
54:38 - invitations invitations okay
54:42 - next thing we are going to want an
54:44 - active Tab and attach state
54:47 - in the default of post
54:50 - so this is pretty much going to
54:52 - determine
54:54 - what
54:56 - we're looking at posts are invitations
54:58 - by default when you go to profile page
55:00 - you're just going to be looking at their
55:01 - posts
55:02 - I don't even know if we have it where
55:04 - you can look at another user's
55:06 - invitations but at least for right now
55:08 - when you're on your own page you can
55:10 - switch between it so
55:13 - yeah we'll roll with this for now okay
55:16 - now next thing I'm going to do is
55:18 - actually render out some tabs
55:21 - so
55:23 - under page content what's going on here
55:26 - asset pair render tabs render tabs okay
55:32 - so here we have tabs
55:39 - this is interesting
55:41 - this is very interesting I was almost
55:43 - certain that this was a component
55:51 - wait a minute are you telling me that
55:53 - all of these are not standardized all
55:57 - the tabs all across
55:59 - the app
56:03 - oh man I hope not
56:06 - okay if so that's going to be uh that's
56:09 - gonna be something okay
56:15 - so let's do this let's build this out
56:18 - and I'll build it out with these tabs
56:20 - under standardized and then I'll get
56:22 - re-familiar with everything and then
56:24 - we'll standardize it in just a bit
56:27 - so first I'm going to need this section
56:29 - or something similar to say render tabs
56:33 - so render tabs this doesn't make sense
56:35 - in this context
56:37 - and for this
56:39 - I am just going to say we need tabs and
56:43 - tabs just like this
56:46 - tabs is the container
56:51 - changes did I make here I'll capitalize
56:53 - everything okay
56:57 - so tabs is the container
57:00 - and the tab is like the individual tab
57:03 - the button
57:05 - and then all this is duplicate code that
57:09 - needs to be fixed buff right now it's
57:11 - good
57:16 - okay so that's that's taken care of and
57:18 - then I will say
57:22 - that the first tab is we'll just say
57:24 - post
57:32 - in the second tab is invitations
57:41 - and then when you click any of this tab
57:43 - it sets it as the active tab because
57:45 - that active tab
57:48 - basically it calls this first to set
57:50 - that tab is active Tab and then since
57:52 - it's equal the active tab is equal to
57:55 - this then it sets it in active which
57:57 - gives it that styling Behavior
57:59 - right here just a different color
58:03 - oh what I need to do is on the right
58:06 - hand side
58:09 - I'm first going to call render tabs
58:14 - and then what I'm going to do is I'm
58:16 - going to rename
58:21 - render content to render tab content
58:32 - render Taz or undertap content okay
58:37 - okay
58:39 - and on that note
58:42 - show you what is tab content here
58:47 - I don't know if I need any of that
58:51 - tab content
58:55 - yeah I don't know if I need any of that
59:03 - because here
59:11 - okay
59:13 - so let's not do that
59:21 - but we can still kind of get this
59:24 - function
59:25 - render tab content is going to be
59:27 - something like this
59:34 - so what we are going to do is we're
59:36 - going to say if you are on
59:39 - tabs post then for now we'll just render
59:42 - a div
59:47 - jeez autocomplete
59:49 - and then we'll say post here
59:52 - now if you're on tabs invitations then
59:56 - what we can do is render those
59:57 - invitation components
60:01 - clean up all this
60:05 - and hopefully we got something that
60:07 - looks like it has the potential to work
60:09 - soon okay
60:12 - so posts post your invitations
60:15 - there you go
60:24 - I'm thinking this tab content we may
60:26 - want to make just so we can kind of
60:28 - separate
60:33 - whatever is in here
60:36 - at the top a little bit
60:40 - I also don't like how
60:43 - see when you're on invitations it looks
60:45 - like post has some space right here
60:49 - but I guess that's more of a styling
60:51 - issue
60:53 - and also these tabs have a margin top
60:55 - but I don't like
60:58 - yeah you can get rid of that okay so now
61:01 - for your styling first of all these tabs
61:03 - have a margin top that I do not like
61:09 - um in my Zoo second of all
61:12 - we do want this tab content after all
61:16 - content tabs
61:20 - and we can just say tap content has a
61:23 - padding
61:25 - top of 16
61:30 - when you render the tab content
61:35 - do it like this
61:37 - maybe it'll be better for margin top
61:46 - I think Mark top is what we're looking
61:48 - for
61:53 - okay
61:57 - so now logging back out logging back in
61:59 - I am going to my profile page my posts
62:02 - tab is going to be selected by default
62:03 - it's going to say post here
62:05 - and if I want to see my invitations
62:07 - click invitations
62:10 - and let's create one of these magnetic
62:12 - you're getting another one
62:14 - and what about uh Bob you get one too
62:17 - last but not least let's not forget
62:19 - about Betty get some realistic data
62:21 - going on in here
62:23 - okay
62:24 - those are gonna be my posts these are
62:26 - invitations
62:28 - yeah The Styling still looks a little
62:30 - bit wonky
62:31 - just doesn't feel so smooth but
62:35 - again I'm gonna need to find a designer
62:37 - because my design skills are well you're
62:40 - pretty much looking at it not that great
62:42 - but now that we got the basic framework
62:45 - done well first of all we can almost
62:48 - close this off
62:50 - okay
62:51 - yeah
62:53 - okay
62:54 - so what I'm going to do is this I'm
62:56 - going to go ahead and run npmer lint
63:00 - do a little mini code review
63:02 - and then if everything looks good we'll
63:04 - cross that other item off of our roadmap
63:08 - and actually before or right after we do
63:11 - that
63:14 - we need to standardize these tap
63:16 - components they're pretty annoying so
63:24 - capitalizing everything and that looks
63:27 - good
63:28 - this was adding our tab component
63:33 - and those look good
63:37 - enough for now at least until we
63:41 - dry up all those
63:44 - and this is
63:48 - yeah this should all be coming from a
63:50 - component but oh that's good for now
63:52 - okay
63:54 - let's see tab component
64:01 - and now
64:07 - I wonder if
64:18 - you think if we throw this to Chad gbt
64:22 - what it's going to do
64:29 - first of all let's think about what we
64:31 - are looking for so our tabs themselves
64:34 - what are they
64:36 - really just the splice Flex
64:38 - and we may have a margin top but this
64:41 - can really be
64:43 - handled in a styled component
64:48 - now the tab content
64:56 - standardizes a well
65:00 - hmm
65:03 - so on our trade page our tab content
65:09 - it's going to have a border and a border
65:11 - radius
65:17 - oh that's because this oh I see what's
65:20 - going on
65:25 - so yeah just this is the tap content
65:27 - right in the other one's the order book
65:33 - let's say if you're staying
65:36 - actually this can be in yeah we don't
65:39 - need this either
65:45 - and I say that because that can just be
65:48 - in
65:49 - this buy component
65:59 - so let's start unifying some of this so
66:01 - on this page in this page they both have
66:03 - a margin top of 12.
66:07 - okay so this isn't
66:10 - ideally what we want but
66:15 - it's preparation
66:20 - good
66:22 - actually what we can do from here
66:26 - is we can get rid of this
66:31 - it's a margin top of 12 pixels that's
66:34 - what this one was right 16. let's go
66:36 - with that
66:39 - and then to make sure we have our same
66:41 - styling as before since we aren't trying
66:44 - to
66:45 - it's too many issues here
66:47 - so in our buy container
66:50 - which we just took the Styles away of
66:52 - the buy and sell
66:53 - we'll go back in here
66:57 - and we can say in your container you can
67:00 - now have these properties back
67:09 - so buy styles
67:15 - uh this and then we have that margin
67:18 - that's interesting
67:21 - so let's do this
67:23 - let's do
67:26 - this
67:30 - okay
67:32 - so now with this I'm thinking that this
67:34 - tab content
67:36 - should not be opinionated at all
67:40 - this tab content is merely
67:43 - just a div
67:46 - now first in trade
67:49 - we're going to keep it the same
67:52 - and then
67:54 - first of all trade should look all right
67:55 - now that's good actually I need to
67:58 - update cell too real quick
68:01 - so the cell styles are going to be this
68:03 - as well
68:04 - so buy Styles sell styles
68:10 - alright so those should look good for
68:12 - buy and sell and now under profile I do
68:17 - want a little bit of a bumper here but
68:18 - instead of having that being dictated by
68:21 - the tabs
68:22 - then instead I'm gonna have it being
68:25 - dictated by the
68:28 - component that is rendered within the
68:30 - tabs
68:31 - and in this case this is invitations so
68:34 - on invitations
68:36 - over yeah I like this method a lot
68:39 - better actually
68:40 - Elemental piece so
68:43 - actually this is the container container
68:45 - right you have container
68:47 - and then in your this you have
68:49 - invitation
68:52 - okay
68:53 - so container
68:54 - that was a margin top of 16.
69:00 - and then we'll do the same for post
69:06 - so this is good we now have our tabs
69:11 - being a lot more standardized
69:18 - all right
69:20 - so now what I'm going to do is close out
69:24 - of these for the time being
69:30 - sure let me just pop up and see what
69:32 - else we got for um
69:37 - this right here
69:41 - for each tab
69:47 - okay
69:49 - so what I'm thinking is we have a
69:52 - yeah how's this component can be
69:53 - structured
70:04 - all right
70:05 - so
70:10 - this is interesting
70:14 - so we basically need to pass in
70:18 - a list
70:20 - of tab data
70:22 - which contains
70:24 - a string
70:26 - or an enum
70:28 - click Handler
70:33 - but no I think this can be the same
70:38 - basically a list of
70:43 - enums and then the readable version of
70:46 - it
70:51 - and actually this needs
70:55 - hmm
70:57 - okay that's why I didn't standardize
70:59 - anything things are going to get a
71:00 - little bit tricky here
71:03 - now another thing that I can do is I can
71:05 - say set active tab I can leave it out
71:07 - here
71:08 - and
71:10 - unclick
71:13 - I can just pass in this
71:15 - and this will set the state from this
71:18 - parent component
71:19 - so call back
71:27 - it's going to be a little bit tricky
71:29 - another thing that I can do
71:40 - is I can be
71:44 - purely just style these
71:47 - maybe that's the way to go
71:50 - so I have a tabs component
71:55 - do I even need that
71:58 - because all it would be is display Flex
72:01 - all it would be is a display flux
72:03 - container
72:05 - and then I would have a tab component
72:11 - then that would take these props a child
72:16 - and is active
72:20 - and then on click Handler
72:23 - it's kind of silly to structure things
72:24 - that way but it's looking like that
72:27 - might be the way to go
72:33 - another question becomes so I need
72:36 - these
72:39 - do I need a component for this
72:42 - it's going to be pretty silly huh but
72:44 - it is also
72:46 - even though you're like separating a
72:48 - component
72:58 - yeah maybe that's better actually
73:03 - okay
73:06 - so we can see how silly this is but it's
73:09 - also a readable
73:13 - and is it really that bad to have super
73:15 - simple components I don't think so
73:22 - okay
73:26 - now I got an idea in my head of
73:33 - what I'm gonna do
73:37 - but
73:38 - let's first ask Chad gbt their approach
73:42 - so create uh
73:48 - separate
73:54 - for the tab
73:57 - for the tabs
74:01 - and I won't give it any additional Clues
74:04 - into what I'm thinking because I kind of
74:06 - wanted to uh
74:10 - kind of don't want to misguide it
74:15 - so this get this
74:18 - hopefully you can handle this much text
74:24 - I might get yelled at for pasting in
74:27 - more content than it can handle but
74:29 - we'll see
74:31 - that's a lot
74:33 - oh nice okay
74:35 - so and notice that I have two components
74:37 - a similar structure nice
74:43 - okay so this is interesting this is
74:45 - exactly what I was thinking about
74:47 - sweating them into two components one
74:49 - with a super simple structure
74:53 - and yeah so here they're in the same
74:56 - file I want to split those out
75:00 - but yeah it's pretty much
75:08 - yeah
75:09 - all right well if me and Chad gbt agree
75:12 - on this and well no one else is voting
75:15 - let's go ahead and get started
75:17 - so
75:19 - what we are going to do first is we're
75:21 - just going to create a new tabs
75:22 - component
75:25 - so I'm going to create a new component
75:26 - and I'm going to call it tabs
75:30 - and then it's going to have a Styles
75:31 - file
75:36 - and then actually this is going to be
75:41 - pretty easy I think okay
75:44 - then it's going to have a new index file
75:52 - this is just going to be your name tabs
75:56 - props for this
76:02 - my props here
76:08 - so is tabs props
76:12 - what I'm going to be passing in is a
76:15 - children that are a react node
76:27 - something like this
76:31 - and they are not going to be optional
76:33 - you
76:34 - to have them
76:39 - and the children are just going to be
76:40 - rendered or right inside
76:51 - you need to accept those props right
76:53 - there okay
76:54 - so that's all tab is doing
76:58 - and now for excuse me tabs and now
77:01 - you're only styling is a display Flex
77:05 - okay so basically we're going to be
77:07 - passing in you stuff just display it is
77:10 - flex nice and easy
77:15 - so now let's just go ahead and kind of
77:17 - get this going on
77:20 - so from
77:21 - components tabs
77:24 - we want to import this super simple tabs
77:27 - component
77:28 - and now in place of our style tabs we're
77:31 - just going to be using our new tabs
77:33 - component which means we can get rid of
77:35 - these tabs
77:38 - and
77:39 - we are going to be doing the same thing
77:41 - for trade
77:46 - so get rid of your actually with trade
77:49 - these Tabs are styled with margin top
77:53 - so we need to make this a style
77:55 - component for this
77:58 - so these
78:01 - are going to be
78:04 - like this
78:05 - so now these tabs
78:07 - are a styled version
78:11 - of these unstyle tabs
78:14 - and we're just adding a margin top to
78:17 - them
78:18 - and then in here we don't need to import
78:20 - anything and then here the usage is the
78:22 - same however now these refer to our tabs
78:25 - component
78:27 - so
78:29 - this still works actually is my server
78:31 - running just want to make sure okay so
78:34 - those changes were picked up
78:37 - and the exchange still works this still
78:40 - works
78:42 - looking good
78:44 - now from there
78:47 - this is where we get a little bit fancy
78:49 - not too fancy just a little bit fancy
78:53 - and we want to make a new tab component
78:56 - which is going to take an is active
78:58 - Boolean
79:01 - and an on click Handler
79:04 - and children which is a string okay
79:09 - so now let's go ahead and make a new
79:12 - where are you at
79:15 - directory
79:16 - called tab
79:19 - you're also going to have styles
79:27 - and you're also going to have a new main
79:30 - component index file
79:37 - and yes of course
79:40 - you're going to look something like this
79:42 - okay
79:43 - so just like tabs you're also going to
79:46 - take props
79:54 - uh nothing of those
79:58 - so this is going to be tab of props that
80:01 - you're going to accept
80:05 - and for the children this is going to be
80:07 - a string
80:15 - and also you are going to be taking for
80:18 - each of these tabs is in is active
80:21 - Boolean
80:22 - and that's going to be passed in
80:30 - and that's going to be converted to this
80:32 - is active and
80:38 - all right so is active
80:43 - when we pass it through to the
80:49 - styled
80:51 - logic we're going to have to rename it
80:53 - to a dollar sign
80:55 - and then on click
80:59 - this is going to be a generic void
81:01 - function so
81:07 - it's going to come from types
81:09 - you can just steal this wherever you are
81:11 - so types
81:15 - click
81:24 - then whatever I tell you to do on click
81:26 - that's what you do on click and now for
81:28 - the Styles you need to accept
81:32 - basically this right here
81:45 - all right so this tab is going to take
81:48 - this right
81:52 - so each tab is going to take children
81:54 - which is just the display text
81:56 - and is active Boolean and on click
81:59 - Handler
82:04 - and then that is all standardized now
82:09 - and now let's
82:13 - standardize it
82:17 - have content okay
82:20 - okay
82:23 - so now
82:25 - for each tab
82:29 - we are just going to be replacing
82:33 - styled version right like this
82:36 - and it's going to help me because of my
82:41 - tab doesn't have any
82:43 - oh
82:47 - uh let's
82:51 - rename
82:54 - so tab uh
82:59 - it's a good
83:04 - hmm
83:07 - hello naming conflict but I don't know
83:09 - what to name it
83:12 - um
83:14 - I have page step profile tab
83:34 - and then is active
83:36 - you are also
83:39 - renamed
83:48 - and then this should be working
83:49 - correctly and I also believe I can get
83:52 - rid of this now
83:57 - and now type content I still need
84:04 - yes yes yes okay
84:07 - so now my profile page should still be
84:10 - good
84:14 - tabs looking good
84:15 - and now the exchange I didn't do yet but
84:18 - let's do that right now okay
84:20 - now where are you where are you where
84:24 - are you okay
84:28 - and you have a tab enum2 which is going
84:31 - to cause some issues
84:33 - so I'll say trade tab
84:40 - then let's just replace you manually
84:55 - all right and then once we have that
84:57 - done we can bring in our new fancy
84:59 - schmancy tab component
85:01 - uh we're gonna do there and then when
85:05 - you're rendering these tabs you are now
85:07 - being replaced by this tab component
85:11 - which has its is active renamed
85:15 - it should be it and then just to make
85:18 - sure
85:20 - we don't need a u anymore
85:24 - that means we don't need this anymore
85:26 - since you should be standardized now
85:31 - if all went well no changes
85:34 - whatsoever
85:36 - sweet
85:42 - beautiful beautiful beautiful beautiful
85:44 - okay now let's see where else we have
85:47 - tabs uh deposit and we'll just go ahead
85:51 - and standardize pretty much all these
85:57 - so deposit that's a wallet tab
86:04 - actually it may even be better
86:07 - are easier to find
86:10 - if we just do this
86:17 - to have the wallet tab
86:24 - oh baby look at this one
86:28 - oh baby baby
86:30 - pretty much just wrote the same thing
86:34 - alright so wallet
86:36 - the wallet page
86:38 - has its own tab component
86:42 - which is
86:44 - pretty much what we wrote here
86:52 - so we're gonna replace this
86:56 - with our tab component
86:59 - oh it also has its own tabs huh
87:02 - and let me guess yep
87:05 - all right so
87:07 - we pretty much just wrote the same
87:09 - components two times
87:12 - which is great because then that means
87:14 - we have room for optimization
87:16 - [Music]
87:18 - so instead of here
87:25 - okay
87:28 - okay we can work with this
87:33 - so first let's import everything we want
87:36 - to
87:38 - so tab
87:41 - and then tabs
87:44 - so we are going to get rid of these two
87:48 - and we're going to import Tab and then
87:50 - tabs
87:55 - and and now this component is using our
87:58 - component
87:59 - so those tabs are the same
88:02 - now the way that it was determining
88:06 - if it was active or not
88:09 - is it was saying if the active wallet
88:11 - tab
88:14 - is equal to the wallet tab that we pass
88:15 - in
88:17 - so we can do the same as long as we have
88:19 - the manager
88:23 - okay
88:24 - so is active
88:26 - pretty much of this right here
88:32 - so it is active if the manager's active
88:34 - wall tab equals wallet tab deposit
88:38 - and then this other one is going to be
88:41 - similar
88:45 - but we'll have to draw
88:52 - all right and that should actually take
88:54 - care of that do I have any custom
88:56 - styling on it
88:58 - half steps nope okay
89:02 - so first let's go ahead and test these
89:04 - deposit withdraw
89:10 - interesting this might be a hot reload
89:13 - issue
89:14 - nope
89:16 - click why is my on click Handler funky
89:26 - I'm gonna click handle tab click
89:29 - oh handle tab click is a callback
89:33 - so
89:35 - what we can just do is this
89:39 - should be generic void function but it
89:41 - doesn't take any params so
89:44 - handle tap click
89:49 - this is interesting
89:54 - wait did I forget a uh
89:59 - handle tab click doesn't take any
90:01 - arguments that oh it takes a wallet tab
90:03 - okay
90:04 - so this is well tab deposit
90:12 - all a tab withdraw
90:14 - okay now hopefully this fixtures my
90:17 - issues
90:19 - but let's see okay that's good
90:21 - yes deposit withdraw deposit withdrawal
90:24 - okay
90:25 - my course no tabs these Tabs are taken
90:27 - care of which means that I can now in my
90:31 - wallet get rid of these two sub
90:32 - components
90:34 - just make sure there's no hidden logic
90:37 - in here that I missed
90:39 - that's all the same and tabs if you have
90:41 - pretty dumb
90:44 - all right so tab tab delete you are now
90:46 - using our fancy standardized tabs
90:50 - and now let me just poke around and see
90:52 - if there's any other
90:55 - orders no tabs
90:57 - asset pair it doesn't have tabs in here
91:00 - shop are there any tabs in here
91:04 - I don't believe so
91:06 - buy sell
91:09 - and then sell
91:11 - none either profile already took care of
91:14 - that at a profile nothing log out
91:16 - nothing on those unauthenticated pages
91:18 - and yeah I think we're good okay
91:21 - so in this actually let me push this up
91:24 - because we just standardize all our tabs
91:26 - which is a
91:29 - pretty great actually
91:35 - so now let me just run interim relent
91:41 - why do I keep getting this error what's
91:43 - going on with this
91:44 - no pointer exception
91:54 - and this is I'm just going to say
91:56 - standardized tabs
92:01 - do a little mini review as you
92:06 - and this is Source upon tab
92:09 - yeah it feels much better having this
92:11 - standardized
92:16 - good
92:18 - this is trade by yeah trade by trade
92:21 - sell
92:22 - similar styling for that
92:26 - rename the enums which is good
92:39 - parking top just out of those type of
92:43 - content
92:48 - whatever you name the enum
92:50 - for our standard
92:54 - and then
93:01 - clean that up
93:03 - delete this delete that delete that
93:06 - delete that I love deleted code
93:09 - means things are getting cleaner
93:13 - things are getting standardized and
93:15 - unified
93:19 - that looks good okay cool
93:26 - standardized tabs baby what's up okay
93:28 - push that up push it up pull it down and
93:32 - then push it up get Boop boom
93:36 - all right so all of our Tabs are
93:38 - standardized now I think yes I think
93:42 - that we are now ready
93:44 - to move on to the post component the
93:48 - moment we have been waiting for
93:50 - and on that note what I'll probably do
93:54 - is I'll probably stop this video here
93:56 - since I don't know how long it is but
93:58 - feels like a good stopping point maybe
94:00 - grab some more coffee
94:02 - and yeah then we are ready to start
94:05 - tackling this post component and I'm
94:07 - pumped so see you soon