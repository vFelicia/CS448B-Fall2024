00:00 - all right so check it out I know that I
00:02 - said in the last video what we're going
00:03 - to be doing next is working on this
00:05 - timer right here however in kind of
00:08 - thinking things through I saw some
00:10 - issues that we're going to run across
00:11 - and the first one was this so inner code
00:15 - what the original plan was to go ahead
00:18 - and log the request date and then
00:19 - whenever we get that response back to go
00:22 - ahead and log the response State and
00:24 - then once we calculate the difference
00:25 - between those it would essentially give
00:28 - us our speed right here however the
00:31 - issue with that is that by default these
00:34 - dates they only are accurate enough down
00:37 - to the second
00:39 - so again here's the date and here's the
00:41 - time hour minute second and that's not
00:44 - gonna offer enough accuracy for our use
00:46 - case so instead of using uh just this
00:50 - what we're going to be using is instead
00:53 - um we'll use the git time function from
00:55 - JavaScript and that's going to allow us
00:57 - to tap into milliseconds
00:59 - so on that note what we'll do is
01:03 - actually keep this request State
01:05 - even though we may have two sources of
01:07 - truth I like it because we'll keep the
01:09 - date logged out
01:11 - for this column right here
01:13 - however
01:15 - in addition to that we will also get the
01:18 - request time
01:20 - and again this is going to be a number
01:23 - which is going to be in milliseconds and
01:25 - then we are also going to change this
01:28 - response date
01:30 - to response time and this is going to be
01:33 - equal to a number or no
01:36 - and let me just see where
01:41 - response date
01:44 - okay
01:46 - so now I think I only need to change it
01:48 - here where we say response
01:51 - time equals null and also whenever we're
01:54 - setting runs
01:56 - this request time is now a required
01:58 - field it's a request time
02:01 - and we're just going to set this equal
02:02 - to the current date
02:07 - and instead of this which is going to
02:09 - give us the actual date we'll call get
02:10 - time on it
02:13 - I'll show you what this is give you the
02:15 - proper definition
02:16 - get time Returns the number of
02:19 - milliseconds since Unix I don't even
02:22 - know how to say the word not going to
02:23 - embarrass myself but uh
02:25 - point is it's going to give us that
02:27 - millisecond accuracy
02:29 - and all right
02:31 - so this is looking good let me just
02:33 - check one more time to make sure that uh
02:36 - response okay
02:38 - and another thing that I think that I
02:40 - want to do
02:42 - yeah I'm gonna add a one more run status
02:46 - here and that is just for air
02:51 - because what I'll say is this so
02:53 - whenever we first fire off this request
02:55 - it's of course going to be pending we
02:56 - know what success is whenever we get a
02:58 - valid pong message back timeout will
03:01 - have that if the request is taking
03:03 - longer than 10 seconds then we're going
03:05 - to go ahead and time it out however this
03:07 - area right here is if we send the
03:09 - request and there's an issue with the
03:10 - core server in other words we can't even
03:13 - communicate with that device at all then
03:15 - we're just going to set it equal to
03:17 - error so I want to differentiate like a
03:19 - server error from a device timeout and
03:23 - in addition to both of those things
03:25 - another thing that I want to do
03:27 - is right now actually let me pop open
03:30 - this component
03:32 - all right so our main button
03:36 - is enabled as long as we have a valid
03:38 - connection but that logic isn't quite
03:42 - good enough because what I want to do is
03:44 - to say not only
03:46 - um disable this if you are not connected
03:49 - but also whenever we have a pending
03:52 - request and we haven't received the
03:54 - response yet then I also want to disable
03:56 - this because I want to keep it nice and
03:58 - simple where I don't want like multiple
04:00 - requests pending at a time just because
04:02 - I like I wouldn't even know what to do
04:04 - with the timer so anyways I'm going to
04:07 - create a custom hook and we'll pick off
04:09 - to see if there's a pending run and if
04:12 - so then we'll also disable this button
04:14 - so under my hooks
04:17 - I'll call this use pending run
04:23 - all right now let me import everything
04:30 - all right subconscious
04:33 - use pending run
04:36 - and what this is going to do if I can
04:39 - type
04:40 - is it's going to return either a run or
04:43 - I'll say return undefined if you can't
04:44 - find any
04:53 - all right in actually let me go ahead
04:56 - and just
05:00 - to make sure I don't forget to export it
05:07 - all right and how are we going to write
05:10 - this well first thing I'm going to do is
05:12 - we need to get the runs and in order to
05:15 - that pull the runs from Redux or at that
05:19 - get run selector and now from here kind
05:22 - of just like it's user connected
05:26 - uh okay I don't copy that not that lazy
05:29 - so return use memo
05:37 - all right so how do we do this so to
05:40 - okay what I'm going to do is I'm first
05:42 - gonna order these and I will order them
05:46 - by
05:48 - this request time and then I'll find the
05:51 - latest one that's pending and this is
05:54 - just so if there's like multiple runs
05:56 - pending
05:57 - um which should never happen but we'll
06:00 - count for all this logic as well so
06:04 - const ordered runs I'm going to call
06:08 - order by and
06:10 - since I just want the Run objects and
06:12 - not the keys I'll say object values runs
06:16 - and for this
06:18 - order by what field do I want to sort by
06:20 - the request time
06:23 - let me think about this so since this is
06:25 - the number of milliseconds since the
06:28 - Unix State we want to order it
06:31 - descending
06:34 - from highest to lowest I think that
06:37 - makes sense
06:38 - all right for some reason whenever I'm
06:40 - have to like order dates I always get it
06:43 - wrong I don't know why it's uh it's kind
06:46 - of weird dates just don't mesh in my
06:48 - head very well all right so once we have
06:50 - those ordered runs what we're going to
06:52 - do is we are going to find a run
06:56 - that has the status
06:59 - of run status pending
07:03 - so find the run where the status equals
07:06 - run status pending
07:09 - and now this should be runs
07:14 - some semicolons in all right so again
07:17 - all this is doing is it's finding the
07:19 - most recent pending run and if I don't
07:21 - have any pending runs then it's just
07:23 - going to return undefined
07:25 - and now what I can do is back in my
07:27 - component
07:29 - I use is connected and also use pending
07:32 - run
07:40 - all right now
07:43 - actually I want to use this in a couple
07:45 - locations so I'm going to split out this
07:48 - enabled logic into a separate function
07:50 - because I'm going to use it in two
07:52 - places one to pass into
07:55 - this styled component to know if it
07:58 - should disable that button to make it
07:59 - appear gray or not and I also want to
08:02 - stick it right here because if the
08:03 - button is not enabled then I just want
08:05 - to make sure that this click Handler
08:07 - doesn't follow through
08:09 - so with that being said let me go ahead
08:12 - and make
08:14 - uh new memoized function I'll say use
08:18 - memo
08:23 - this
08:25 - is
08:27 - use memos and react right
08:34 - so
08:35 - all right so use memo is going to be the
08:39 - function it's going to return a Boolean
08:46 - if there's anything else oh this is good
08:49 - for now so I'll say the button is
08:52 - enabled if you are first of all
08:54 - connected
08:55 - and also there is no pending run
09:00 - and now for these dependencies
09:05 - should be both of those and all right
09:08 - so now what I can do is I can swap out
09:10 - this is connected for a more proper
09:13 - enabled and also right here as well
09:18 - now
09:20 - make sure nothing broke
09:22 - and for some reason whenever we create
09:24 - new hooks or update a hook yeah actually
09:27 - have to
09:28 - close this and restart the entire thing
09:34 - right
09:37 - I can't test this out because I actually
09:38 - have my MacBook closed but I really just
09:40 - want to make sure nothing is breaking
09:43 - for a second and it looks alright
09:46 - now another kind of housekeeping item
09:48 - that I'm going to do is I'm gonna
09:50 - restructure
09:53 - this click Handler right here because
09:57 - what I want to do is actually
10:01 - yeah let me go ahead and pull out this
10:03 - run because I want to throw this request
10:06 - in a try catch statement and if the
10:09 - server throws back an error then I want
10:10 - to update this run status to be this new
10:14 - error status
10:16 - let me do that right now
10:18 - how am I going to do this
10:22 - so I'll say cons to run set this equal
10:25 - to this and for the Run ID
10:31 - can probably just do this
10:35 - all right so first and foremost this is
10:39 - going to dispatch this run
10:43 - and I also want to wrap this in a try
10:45 - catch so try
10:55 - all right so try to dispatch this run to
11:00 - our Redux store and then after that go
11:04 - ahead and send a request
11:09 - to send this block in as the params
11:13 - since we got rid of that variable we'll
11:15 - say the Run ID is equal to the Runs run
11:18 - ID
11:19 - now hopefully nothing breaks but just in
11:22 - case if it does we're going to say
11:24 - console error just uh log out the error
11:26 - in the console and
11:29 - aside from that what I want to do is I
11:32 - wanna
11:34 - pretty much do this
11:38 - so if we do get an error then we're just
11:41 - going to update the uh the status of
11:43 - this run in Redux so spread out the Run
11:46 - since everything's the same the only
11:48 - thing that we need to update is a status
11:50 - and it'll set equal to run status.air
11:53 - just like this
11:59 - and I actually think that
12:02 - let me think this through for a second
12:06 - yeah I also think I need a state
12:07 - variable
12:09 - to set even before this because I
12:12 - believe that this entire function is
12:13 - going to be called
12:14 - before
12:17 - this I'll show you what I'm talking
12:19 - about
12:21 - no one just sit here listen to me uh
12:23 - mumbling so I'm also going to create a
12:26 - new variable to say request
12:30 - pending and I'll say set
12:34 - pending and this is going to be equal to
12:36 - a Boolean
12:38 - which is going to be false by default
12:45 - all right why am I getting error here
12:48 - oh you stay I use pending run
12:50 - embarrassing so let me go ahead and
12:52 - write this and then I'll explain why I
12:54 - wrote it so as soon as we fall into this
12:58 - try block then I want to set request
13:00 - pending equal Troop
13:02 - and then I'm gonna set that equal to
13:04 - false right after this catch statement
13:07 - actually kind of like a finally
13:09 - so false right here and now with this it
13:14 - this variable request pending should be
13:16 - true as soon as well even before the
13:19 - request is actually pending uh before we
13:21 - even dispatch anything to the Redux
13:23 - store and then it'll toggle off at the
13:26 - end of all this but I'll say that this
13:29 - is enabled if you're connected if
13:32 - there's no pending run and also
13:35 - if you don't have any requests pending
13:38 - and then I just need to update these
13:41 - and all right now the reason that I said
13:44 - that I wanted that is because whenever
13:46 - this function is called this handle
13:48 - click function again we have
13:50 - functionality to disable the button if
13:53 - there's a request pending
13:55 - however for this
13:58 - pending a run it's gonna check the Redux
14:02 - store now that's all in well however I
14:06 - don't believe that check or that
14:09 - re-render can take place until this
14:11 - function itself is done executing so
14:15 - that's why I want to set it right here
14:17 - just to be 100 certain that there isn't
14:19 - going to be any race conditions and for
14:21 - example if if uh the user
14:24 - I have to restart it again but anyways
14:27 - just to make sure that if the user is
14:29 - like clicking this button 100 times like
14:31 - as fast as they can then it isn't going
14:33 - to fire off multiple requests this
14:36 - should do the trick tonight let me
14:38 - actually go ahead and quit and restart
14:40 - and just to make sure that everything is
14:42 - good up until this point
14:44 - all right I got my MacBook open too so
14:48 - what we can do is actually like try to
14:50 - break this in a way
14:52 - let me go ahead and open this MacBook
14:54 - this is interesting so this is disabled
14:58 - and I have a feeling I know why I don't
15:01 - think it is any of the code that we
15:02 - wrote there's probably a pending run all
15:05 - right I'm not gonna
15:07 - I'm not going to scroll through all
15:09 - these but I have a feeling that there is
15:11 - a pending run in here from last time So
15:14 - eventually what I want to do is like
15:16 - have a little button down here that says
15:18 - clear history but for the time being a
15:21 - little trick and I don't even know if I
15:23 - would call it a trick as much as like
15:26 - bad practice maybe but in this store
15:30 - initializer
15:32 - actually it's not even bad practice
15:34 - um instead of
15:36 - uh pulling in the initial runs using the
15:40 - electron store what we can do is just
15:42 - temporarily set this to an empty dict
15:45 - and then whenever I boot this app up
15:48 - again it's basically just going to reset
15:50 - all of my runs
15:51 - so all right the app is booted and I'll
15:54 - show you what I'm talking about all
15:56 - those runs that were in there from last
15:58 - time if I check my speed test runs now
16:00 - you see it just set it to an empty
16:02 - decked so now let me go ahead and quit
16:04 - this yet again
16:06 - must be an easier way than this I know
16:08 - but uh
16:10 - now when I go ahead and restart this
16:14 - shouldn't have any pending or runs in
16:15 - there and then we can do a little mini
16:18 - QA mini QA sesh
16:21 - all right so minimize you
16:26 - console
16:29 - get it all nice and Purdy
16:32 - all right much better so let me go ahead
16:35 - and just look at my network inspector to
16:38 - make sure I can't fire off too many
16:40 - requests so first just clicking it at
16:43 - our normal speed
16:45 - I know all right I forgot this too so
16:48 - what happens because we didn't I'll show
16:51 - you what's going on here so in our
16:53 - listener our pong listener what it's
16:55 - supposed to do whenever we get that pong
16:57 - response back is it's going to say I'm
16:59 - gonna update this run where it's no
17:02 - longer pending but it's success now
17:04 - however since
17:07 - since we didn't write that yet either
17:09 - I'll show you new Redux we are stuck
17:12 - with this one pending run
17:14 - right here with no response time and
17:17 - again like I said it's still pending but
17:19 - point is that everything looked properly
17:21 - up until that point but uh yeah got some
17:24 - work to do from here now to save some
17:26 - time let me actually just go ahead and
17:28 - update this pong listener right now so
17:32 - let me pause the video and uh I'll see
17:33 - you in just a second all right so check
17:36 - it out I got the pong listener written
17:38 - and just to make sure we don't skip over
17:40 - any logic I'll go ahead and talk through
17:42 - this right now so what I'm doing in the
17:45 - pong listener is kind of just doing the
17:48 - same validation as before but after I
17:51 - checked that the uuid or the Run ID
17:54 - should I say is a valid uuid then I'm
17:57 - gonna look for that run in Redux and
18:00 - then once I find that run I'm first well
18:02 - this is just making sure that it exists
18:04 - and after that I'm validating the
18:07 - network ID actually I'm going here so
18:10 - when validating the network ID I want to
18:13 - ensure that the block ID or in other
18:15 - words the network that this response was
18:18 - sent over was the same one that matched
18:21 - my run since for example I don't want to
18:23 - be ascending the Ping request over the
18:25 - New Boston Network in having it respond
18:28 - through the vitaxia network because well
18:31 - it's kind of the point of the speed test
18:32 - to test how fast the single network is
18:36 - another
18:38 - thing that I'm validating is this run
18:40 - recipient right here and this I have no
18:44 - idea when this could possibly happen but
18:46 - I figured it might as well have it that
18:48 - the block sender matches the Run
18:50 - recipient in other words I don't want to
18:53 - send a block to like my MacBook and have
18:56 - my Linux desktop send it back again I
18:59 - have no idea when on earth that could
19:01 - possibly happen but I just want to make
19:03 - sure whenever we validate this data that
19:05 - everything's covered
19:06 - and then another thing that I'm doing is
19:09 - I'm validating the Run status to make
19:11 - sure that whenever we receive a response
19:14 - back then the run that we're trying to
19:17 - update is still pending and I do that
19:19 - because if I already timed out the run
19:22 - or if the run is already successful for
19:24 - some reason then we don't want to like
19:26 - update it again so anyways once this is
19:30 - all valid and we ensure that yes it's a
19:32 - pending run I just sent you that request
19:34 - and I'm expecting this response back
19:36 - then what we're going to do is we're
19:38 - going to set the response time
19:40 - to whatever the current time is and then
19:43 - we'll use this response time in just a
19:45 - sec for both the timer and also the
19:48 - history table and then this just sets it
19:50 - equal to success
19:52 - and also with this I'll show you
19:55 - let me clear out my blocks so I'm going
19:57 - to be clicking this a bunch
20:00 - and you see that that disabled state is
20:03 - working correctly right now where the
20:06 - containers main button this
20:09 - and that is because as soon as I click
20:13 - that button
20:14 - it is going to set this request pending
20:16 - State variable to true and that is going
20:20 - to alter this enabled State and of
20:22 - course this enabled state
20:24 - doesn't allow me to click it again
20:26 - and it also
20:28 - toggles on that disabled styling for the
20:32 - button
20:33 - so yeah everything is looking pretty
20:35 - good so far and actually let me just
20:37 - show you what's going on in Redux with
20:39 - one of these
20:40 - so whenever I kick this off it's going
20:43 - to send a requests we're going to get
20:44 - that pong response back which is going
20:46 - to update this run and then whenever
20:49 - this run is updated
20:51 - again it's going to set the response
20:53 - time and update it to success in Redux
20:56 - so now pretty much Redux is populated
20:59 - with all the correct data the only thing
21:01 - that we need to do now is update the UI
21:03 - and that should be a piece of cake at
21:05 - least compared to all the logic that we
21:06 - wrote already so smooth sailing from
21:10 - here on out see you guys next video