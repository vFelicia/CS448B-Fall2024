00:00 - so in this video we're going to take a
00:01 - look at the next layer above
00:03 - our bank entity so above our data layer
00:07 - we'll also take a look at spring boot
00:09 - repositories
00:11 - and we'll write our first junit 5 test
00:13 - cases
00:15 - and actually using test driven
00:16 - development along the way
00:18 - so many interesting topics in this video
00:21 - so let's go ahead and get started
00:23 - so i want to start off by thinking about
00:25 - the architecture we want to have
00:27 - so at this point we have our data layer
00:30 - ready which is our bank entity
00:32 - so the next thing would be a service
00:34 - layer that knows how to retrieve the
00:37 - banks how to update a bank and so on
00:40 - and then later on we can move even
00:42 - further up to the web layer
00:44 - where we have a controller that defines
00:46 - all the rest mappings
00:48 - and so on now actually i'm going to go
00:51 - ahead
00:52 - and create one more layer in here let me
00:55 - actually copy this one
00:58 - so what we want to gonna do in this
01:00 - video is we're gonna introduce a
01:03 - data source and this data source
01:06 - will be responsible for data retrieval
01:10 - and storage and those kinds of aspects
01:13 - now why do we have an additional layer
01:15 - here well this is going to allow
01:18 - us to easily inject different types of
01:21 - data sources
01:22 - into the service layer later on so this
01:25 - way you could retrieve the data from the
01:27 - network
01:28 - from a database from a cache whatever
01:31 - you want to do
01:32 - and you can exchange those
01:34 - implementations of the data source
01:36 - quite easily so this can be a really
01:38 - useful pattern which is
01:40 - why i'm going to show it to you here all
01:42 - right so that means the goal for this
01:43 - video will be the data source layer
01:46 - and then in the following videos we're
01:47 - going to tackle the service layer and
01:49 - then the web layer
01:51 - so let's move back now to our ide so
01:54 - let's go ahead and create a new package
01:56 - for this new kind of spec to our
01:58 - application
01:59 - and i'm going to call this packet simply
02:01 - data source
02:02 - and then in here i'm going to create a
02:04 - new content class or file
02:07 - and actually i'm going to move down to
02:08 - interface down here
02:10 - and just going to call this one bank
02:12 - data source
02:14 - so this will be the more abstract
02:15 - interface for us which just defines what
02:18 - kind of functionality we expect from our
02:20 - data source
02:22 - and for now since we only want to
02:24 - implement the get endpoint for all the
02:26 - banks
02:27 - let's just add one method here called
02:30 - get banks
02:31 - and this of course we expect to return a
02:34 - collection
02:35 - of our bank entities
02:38 - okay so with the interface done let's go
02:40 - ahead and for now
02:42 - just create a mock implementation of
02:44 - this so i'm actually going to create
02:46 - another
02:46 - sub package here called mock and inside
02:49 - this i'm going to add a new mock
02:51 - bank data source so for now we're not
02:54 - going to
02:54 - care about database access or anything
02:57 - like that
02:58 - we just want to get it to work and see
03:00 - how all the layers work together
03:02 - now first of all this class is supposed
03:04 - to implement our
03:06 - bank data source interface in kotlin you
03:09 - just do this with a colon
03:11 - and then inside here of course we should
03:13 - implement this method
03:14 - called get banks and then the error is
03:17 - gone as well
03:18 - so it's already going to generate a fake
03:21 - method body here with a to do
03:23 - the next thing i want to do is i want to
03:25 - add a annotation here which is called
03:27 - repository and this simply marks our
03:30 - mock data source
03:32 - as a spring boot bean so this adds it to
03:35 - the application context and it tells
03:37 - spring to
03:39 - initialize this bean or this object at
03:42 - runtime
03:43 - and it also tells spring that this is
03:45 - not just any bean
03:46 - or object it's in fact a repository
03:49 - which has a few
03:50 - implications later on for instance when
03:52 - testing things
03:54 - and of course on top of that it also
03:56 - conveys meaning to the
03:57 - developers so when someone reads your
03:59 - code and they see
04:00 - the annotation at repository then they
04:03 - know okay this is a repository
04:05 - which means this class is responsible
04:08 - for retrieving data
04:09 - storing data and those kinds of
04:11 - functionalities to access one of your
04:13 - entities
04:15 - so now as i promised we're also going to
04:17 - take a look at testing in spring boot
04:19 - at junit 5 and test driven development
04:22 - so let's go ahead and create a new test
04:25 - for this one
04:26 - and this will simply be called mocked
04:28 - bank data source test
04:30 - and i'm going to go ahead and just
04:32 - create this please make sure that
04:35 - here you have junit 5 selected so hit ok
04:39 - and then here we have our empty test
04:41 - class ready to go
04:43 - now the whole point of test driven
04:44 - development is you
04:46 - go ahead and you write your test first
04:49 - and you make sure that your test
04:50 - fails so that you know when you fixed it
04:53 - that the test is actually testing
04:55 - what you thought it would test so if you
04:57 - don't know that it has failed before you
04:59 - actually
05:00 - fixed it oftentimes you can run into the
05:03 - case where you're not really testing or
05:05 - what you're trying to test
05:07 - so let's go ahead and write a first test
05:09 - case over here
05:11 - and please notice that i'm using a live
05:13 - template so if i just type test
05:16 - and hit tab it's going to create this
05:19 - test case template for me if you want to
05:22 - do something similar
05:24 - just go into your settings and then
05:26 - under live templates
05:28 - you can go to kotlin and then over here
05:31 - you can add a new
05:33 - um live template if you want to look how
05:36 - this is done you can see down here for
05:39 - test
05:41 - i just created a welder function body
05:44 - and you can create placeholders by
05:47 - placing them in dollar signs
05:49 - and then also you want to make sure that
05:50 - this is applicable
05:52 - in kotlin classes so you can select this
05:55 - when you create it down here and then
05:58 - you're all set
05:59 - and you're good to go now the first
06:01 - thing we want to test here
06:02 - is that the mock data source
06:06 - should provide a
06:10 - list or a collection of banks
06:15 - and then inside this test case you can
06:16 - see i have the given when then structure
06:20 - some people also call this arrange act
06:22 - and then assert
06:24 - and the whole purpose is that you have
06:26 - your test prerequisites or the whole
06:28 - test setup done in given
06:30 - and when denotes the actual call that's
06:34 - being made that you want to test
06:36 - and under the then block you just add
06:38 - all your assertions
06:40 - now for this particular test case i
06:42 - don't think we'll have any
06:44 - anything here under given but then when
06:46 - we say
06:47 - our banks is equal to our mock data
06:51 - source
06:51 - dot get banks and we don't have this
06:54 - variable yet
06:55 - so let's go ahead and create a property
06:59 - mock data source and so i'm just going
07:02 - to
07:03 - create this right here so i'm going to
07:05 - create an instance of mock
07:07 - data source and actually i want this to
07:10 - be not just the type i just want to
07:12 - assign this
07:13 - so in kotlin the type is inferred
07:16 - automatically as you may have noticed so
07:18 - i don't have to have
07:20 - the type there again so now i have this
07:22 - object ready
07:23 - and notice that this is a design
07:26 - decision already for this test
07:28 - there are different ways you could test
07:30 - this this
07:32 - right now by just instantiating this
07:34 - object manually
07:36 - basically means we're just testing our
07:37 - data source as a
07:39 - pojo as a plain old java object we're
07:41 - not using any spring boot dependency
07:44 - injection
07:45 - we're simply creating a regular junit 5
07:48 - test case
07:49 - that we could write just the same way
07:51 - without any spring boot dependencies at
07:53 - all
07:54 - so just creating the object ourselves
07:56 - and then we're testing it
07:58 - and i'm going to talk about some of the
08:00 - different
08:01 - types of tests you can have in spring
08:03 - boot at the layers above
08:05 - where we're also going to use the
08:06 - application context
08:08 - but for now let's start with also i
08:10 - guess the simplest type of test
08:12 - where you're just testing a plain old
08:14 - java object
08:16 - so when we have our banks equal to
08:20 - mockbankdatasource.getbanks
08:21 - then we want to assert that and
08:25 - we should have this dependency here make
08:27 - sure it comes from a third j
08:30 - so assert that
08:33 - the bank's object is not
08:36 - empty now the assert j dependency comes
08:39 - with spring boot starter test
08:41 - which is integrated for you in the
08:44 - dependencies
08:45 - if you don't have this make sure that in
08:48 - your build.gradle
08:49 - you have your spring boot starter test
08:51 - dependency over here
08:53 - and that it's also of course marked with
08:55 - test implementation
08:57 - all right so let's go back and indeed we
09:00 - don't really have any given block in
09:01 - this one
09:02 - so let's go ahead and run this test and
09:04 - see what happens
09:06 - okay so once that's done we can see our
09:08 - test results down here
09:09 - and we see this one test case that we
09:11 - have
09:12 - which is red so that's actually a good
09:14 - thing we want our
09:16 - test case to be failing first again
09:19 - that's test driven development
09:20 - so you basically have this cycle of red
09:23 - green and then refactoring
09:25 - so now we're at the first stage we have
09:27 - a red test which means a failing test
09:30 - so now we want to make this test green
09:34 - so let's go back to our implementation
09:36 - so to our mock
09:37 - bank data source and then what's
09:40 - happening here is of course it cannot
09:42 - fulfill this assertion
09:43 - because instead it throws a not
09:46 - implemented error
09:47 - which comes from this to do so what we
09:50 - could do here is we could say
09:51 - return a list off or even
09:55 - we could just say empty list just to
09:57 - make the
09:59 - um or just to change the error message
10:02 - and then we can just rerun the test up
10:04 - here
10:06 - now of course since the assertion was
10:08 - that the list should not be empty
10:10 - this is not going to work yet but you
10:12 - can see it's now
10:13 - yellow which actually means that the
10:15 - assertion failed
10:16 - instead of that just an exception was
10:18 - thrown at runtime
10:20 - and we can see here we're expecting the
10:22 - actual value to not be empty
10:24 - so let's go ahead and instead return a
10:26 - list off
10:27 - and then we're going to create a bank
10:29 - entity here
10:31 - and for now we're just going to do the
10:32 - minimum to make the test pass
10:34 - so don't go ahead and implement
10:36 - everything right away
10:38 - at least if you're trying to do test
10:39 - driven development which is what i'm
10:41 - trying to show you here
10:42 - so just really do the minimal to make
10:44 - the test pass
10:46 - now with this that should be fine for
10:49 - this test case
10:51 - all right so we have a green test now so
10:54 - the next step is to refactor our
10:55 - production code
10:56 - and what i want to do is i want to
10:58 - extract the list
11:00 - into a variable which i'm just going to
11:02 - call banks
11:03 - and i also want to actually move this
11:06 - up here and then we just return the
11:10 - banks
11:11 - and again in kotlin we can also do it
11:13 - like this
11:15 - and this should still keep our test
11:16 - passing so i'm going to run this again
11:18 - with shift f10
11:20 - and yeah it's still running just fine
11:23 - all right so far so good so let's go
11:25 - ahead and create our next test case
11:27 - which is that it should provide some
11:29 - mock data
11:31 - so inside here i think i'm not gonna
11:33 - need a given
11:34 - block again and then i'm gonna say
11:38 - when our banks
11:41 - equal mockback bank datasource.getbanks
11:45 - then i want to assert that that the bank
11:48 - object
11:49 - or the banks they let's say here
11:52 - all satisfy and we're going to take a
11:54 - look at this again in a minute
11:56 - and that the account number is not
12:00 - blank so i want that they all have
12:03 - a proper account number so let's go
12:06 - ahead and try to run this test case
12:09 - and you can see it runs through just
12:10 - fine but if we look at our
12:13 - current mock data we have a bank with an
12:16 - empty account number so what the heck's
12:19 - going on here
12:21 - now if you had already written all the
12:23 - production code
12:24 - you might just think to yourself okay it
12:26 - all looks fine
12:27 - the account number is not blank and all
12:29 - the tests are passing so i'm just going
12:31 - to move on
12:32 - but now because we only did the minimum
12:34 - to make the test case above work
12:37 - we can see that something must be wrong
12:39 - with this test case
12:40 - and in fact if we take a look at all
12:43 - satisfy
12:44 - we can see here an example of how it's
12:46 - supposed to be used
12:48 - so inside all satisfied you are supposed
12:51 - to add
12:52 - multiple assertions on the same object
12:55 - so that's what it's intended for and
12:57 - therefore if we just say
12:59 - all satisfied that the account number is
13:01 - not blank
13:02 - it's just not gonna assert anything
13:05 - what we want to do instead is we want to
13:07 - say all match
13:09 - and again let's also make sure how this
13:11 - one works
13:13 - so as assert that abc they all match the
13:17 - length equals one
13:18 - so this is what we wanted here so all or
13:21 - each element in the collection should
13:23 - fulfill this condition that we specify
13:26 - so now let's go ahead and run our test
13:28 - case again
13:30 - and i'm using shift f10 for this now you
13:33 - can
13:34 - see we have expecting all elements of
13:36 - this list
13:38 - to match the predicate which is the
13:40 - account number is not blank
13:42 - but this one didn't so that's good we
13:44 - have our failing test so now we can go
13:47 - back
13:47 - into our mock data source and try to fix
13:51 - this
13:52 - so i'm just gonna say one two three four
13:55 - for the account number and then run this
13:57 - again
13:58 - now of course we could be as strict as
14:01 - we want now with
14:02 - this mock data we could also say that at
14:04 - least one of them
14:05 - so any match let's say the trust
14:09 - should not be zero so we don't want just
14:12 - zero numbers here
14:13 - or we want the transaction fee to also
14:18 - not equal zero and maybe we even want
14:22 - well let's go step by step we might want
14:24 - more than just one element in the list
14:26 - later on
14:27 - but for now let's run this
14:32 - and let me actually run the entire test
14:34 - class so that we always run all our test
14:36 - cases at once
14:37 - and we can see which status we're at
14:41 - so obviously the second test case now
14:43 - fails so let's go ahead and add a trust
14:48 - of non-zero and the transaction fee
14:50 - already is non-zero
14:52 - let's actually make it 17 then let's run
14:54 - the test again
14:55 - give it a second and we can see all our
14:58 - tests pass
14:59 - now i'm going to add another assertion
15:02 - to our first test case
15:04 - which is that bank dot size is greater
15:07 - than
15:09 - well let's say or equal to three so we
15:12 - want at least three
15:13 - banks of sample data let's go ahead and
15:16 - run this
15:17 - and we can see the test case fails again
15:20 - so
15:20 - this one we probably should have done
15:22 - right away
15:23 - also is not empty is irrelevant now
15:26 - because it's part of this assertion
15:29 - which is also nice because we only have
15:31 - one assertion then
15:32 - in this test case which gives it only
15:34 - one reason to fail
15:36 - now let's go back into our production
15:39 - code and in here
15:40 - i want to create multiple banks now so
15:44 - in your kotlin versions you can actually
15:46 - have the trading comma which is quite
15:47 - nice
15:48 - so you can just duplicate the lines and
15:50 - just keep it like that
15:51 - and i'm gonna let's say add one zero one
15:55 - zero
15:56 - and a trust of 17
15:59 - here and a transaction fee of zero
16:03 - and here we're going to add a trust of
16:05 - zero so it's always good to
16:08 - test border cases as well
16:11 - but of course this is not really test
16:13 - data so we're just mocking things but
16:15 - it might still be nice to have some
16:17 - zeros or ones in here
16:19 - now of course the account number should
16:22 - be different for each one
16:23 - you could actually create a test case
16:25 - for that if you want to
16:27 - so this would be a nice practice to
16:28 - write your own test case
16:30 - just making sure the account numbers are
16:32 - unique
16:33 - all right so this we should be good to
16:35 - go let's run our tests again
16:37 - and we can actually see the second test
16:40 - case failed now because
16:41 - here apparently i said all match but
16:45 - what i wanted to do is i want to have at
16:47 - least
16:47 - one element or one example bank
16:50 - with a transaction fee uh unequal
16:54 - zero i don't want all of them to be
16:55 - unequal zero
16:57 - even though i believe in the actual the
17:00 - new boston currency you can't have a
17:01 - transaction fee of zero
17:03 - but we're not really implementing that
17:05 - here for this example this is just fine
17:08 - all right perfect so we have our passing
17:10 - tests
17:12 - we could see if you want to refactor
17:13 - anything here but i look but i think
17:15 - this is looking just fine
17:16 - so we have our list of banks and then we
17:18 - just return them for now
17:20 - there's one tiny thing i want to do
17:22 - which is just a rename
17:24 - so for this data source i want to choose
17:27 - a more
17:28 - fitting name for this method which i
17:30 - think would be something
17:32 - like retrieve banks so the data source
17:35 - is a quite low level component
17:38 - and therefore it's really about
17:40 - retrieving the
17:42 - banks from somewhere we don't know if
17:44 - the data source retrieves this from a
17:45 - network or a database whatever
17:48 - the service doesn't really care as long
17:50 - as the data source
17:51 - knows how to provide the data that it
17:53 - needs
17:54 - and then of course in the mock data
17:56 - source it should have renamed it
17:58 - automatically as well it should not
18:00 - rename this one though
18:03 - that's not correct all right so now we
18:06 - have
18:06 - the data source ready to go
18:09 - so in the next videos we're going to
18:11 - work our way up to the service layer web
18:14 - layer and so on
18:15 - and we're also going to see different
18:17 - approaches
18:18 - to testing in spring boot so i hope you
18:22 - learned something in this video
18:24 - it's actually quite a few things
18:25 - although we only went to the surface but
18:27 - really using
18:28 - spring boot with kotlin with junit 5
18:32 - and also using test driven development i
18:34 - think it's quite a nice practice
18:37 - to follow along and to kind of see how
18:39 - all of these things come together i hope
18:42 - you liked it if you did please leave a
18:43 - like below
18:44 - and i'll see you in the next one