00:00 - alright guys welcome to your 57 C++
00:02 - tutorial and in this story I'm going to
00:04 - be going over a couple things I'm not
00:06 - going to be doing a whole lot of coding
00:07 - so you guys just might want to put away
00:09 - your keyboard for this tutorial and just
00:11 - you know sit back and watch and learn
00:12 - I'm going to be talking about something
00:14 - called a pure virtual function and also
00:16 - abstract classes and actually they both
00:18 - go hand in hand so you know you aren't
00:20 - really learning you know two totally new
00:22 - concepts but let me go ahead and before
00:25 - I talk about a pure virtual function let
00:28 - me explain you guys what a regular
00:29 - virtual function knows so let's go ahead
00:31 - and before we even start let's notice
00:34 - that this enemy class has an attack and
00:36 - this ninja class has an attack and this
00:39 - monster class has an attack so let's go
00:41 - ahead and actually code something in
00:43 - this enemy class attack and let's code
00:46 - something like C out I am the enemy
00:51 - class now I don't know that's good
00:54 - enough and let's go ahead and end that
00:56 - line so let's go ahead and run this
00:58 - program and see what happens
01:00 - it says ninja attack and monster attack
01:02 - it works as we expected so basically
01:05 - what a virtual function does is this
01:07 - whenever we're programming in using
01:10 - polymorphism for example if we made it
01:13 - if we made an object from the enemy
01:15 - class it would go up let me explain this
01:18 - one more time if we made an object from
01:20 - the enemy class and tried to use that
01:22 - attack function right here what did it
01:25 - do is it would go up to the enemy class
01:26 - and call this attack function but since
01:29 - this attack function is virtual it would
01:31 - go back down and say alright it was a
01:33 - virtual function which means I need to
01:35 - check what I'm pointing to and if one of
01:39 - these derived class overrides this
01:41 - attack function then use that one
01:43 - instead so that's why even though we
01:45 - inherited this attack function that says
01:48 - I am the enemy class we overrode it in
01:50 - these derived class one bump says ninja
01:52 - Tech and one of them says monster attack
01:55 - so since we overrode it right here and
01:57 - since we're using polymorphism with
02:00 - virtual functions that virtual function
02:02 - checked inside that we were indeed
02:04 - overwriting it and used those more
02:06 - specific functions so now let me talk to
02:10 - you guys about what a
02:12 - your virtual function is so let me go
02:15 - ahead and maybe this will be easier if I
02:17 - saw if I go ahead and take out this
02:20 - attack actually let me just go ahead and
02:22 - cut this from the monster class
02:24 - well this monster class is already
02:26 - inheriting an attack function from the
02:29 - enemy class if it doesn't implement its
02:31 - own specific attack function it inherits
02:34 - the default general I am the enemy class
02:36 - so let's go ahead and run this and it
02:37 - says ninja attack had its own specific
02:40 - attack function but the monster attack
02:42 - did not so that's why I inherited the
02:45 - more general enemy class one simple
02:47 - enough so basically whenever you have a
02:50 - virtual function you have the option of
02:53 - overriding it but if you don't it's no
02:55 - big deal because we already have a
02:57 - function right here that we inherited
02:59 - but with a pure virtual function in
03:01 - before I start talking about that let me
03:03 - go ahead and paste this code right back
03:04 - in here a pure virtual function doesn't
03:08 - give you the option of inheriting from
03:11 - the base class in order to make a pure
03:14 - virtual function you don't have a body
03:16 - at all in instead of a body right here
03:19 - what you have is equals zero so
03:22 - basically you're saying this virtual
03:25 - function which we see equals zero
03:28 - instead of a body is now a pure virtual
03:31 - function and as you can see a pure
03:34 - virtual function has no implementation
03:36 - whatsoever and by implementation I mean
03:39 - body my body it means I mean it doesn't
03:42 - do anything so a pure virtual function
03:44 - doesn't do anything at all
03:47 - in one rule that you have any derived
03:51 - class that inherits from this from a
03:55 - class that has a pure virtual function
03:57 - in it it must must it needs to no
04:01 - exceptions it needs to overrate that
04:04 - function so remember last I mean yeah
04:07 - the last example I told you we had the
04:09 - option of taking this out and if we took
04:11 - it out it was no big deal we'll just use
04:13 - this stack function well now in every
04:14 - run it says uh-uh you get an error
04:17 - message right here and the reason is
04:19 - because this
04:20 - you made a pure virtual function in C++
04:23 - in the programmer made a deal he said
04:26 - alright programmer whenever you make a
04:28 - pure virtual function you need to
04:31 - override it that's our deal so in this
04:33 - class alright you did a good job but in
04:35 - this class you didn't overwrite it at
04:37 - all so whenever I try to call this
04:39 - attack function right here nothing's
04:41 - happening equals zero so that's why
04:43 - whenever we use pure virtual functions
04:46 - we need to overwrite it so that can be
04:49 - good and bad depending on what you're
04:51 - going to try to program if you want to
04:54 - make a game or something that you know
04:56 - if you don't want a monster to have a
04:58 - specific attack it can just inherit the
05:00 - enemy attack that's fine then you don't
05:03 - want to use this but if you want to make
05:04 - a game with a bunch of different
05:06 - monsters or something and you want each
05:08 - of those monsters to have a specific way
05:11 - of attacking then you would want to use
05:13 - a pure virtual function because whenever
05:15 - you use a pure virtual function it's
05:18 - going to make sure that you overrode it
05:20 - so now that we overrode in both the
05:23 - ninja class and monster class we're
05:25 - going to go ahead and run this and it's
05:27 - going to work just fine and you're
05:29 - saying all right so I understand what a
05:31 - pure virtual function is but what is an
05:34 - abstract class well this is like the
05:36 - easiest thing you ever learned an
05:37 - abstract class is just a class with a
05:39 - pure virtual function in it pretty easy
05:42 - huh so it took me like five minutes to
05:44 - describe what pure virtual function was
05:45 - and then you know like five seconds to
05:47 - describe what an abstract class was so
05:49 - let's go ahead and recap one last clock
05:51 - one last climb one last claim no one
05:54 - last time all right
05:56 - abstract classes are just classes with
06:00 - pure virtual functions in them now
06:03 - whenever you make a pure virtual
06:05 - function you don't have a body you don't
06:07 - have curly braces you don't have any
06:09 - implementation whatsoever it's just a
06:12 - function that says any derived class
06:15 - needs to overwrite this function it's
06:18 - just kind of checking to make sure you
06:20 - overwrite this function now regular
06:23 - virtual functions have the option of
06:26 - being overridden in the drive class so
06:29 - if this was just a regular virtual
06:31 - function then we can go ahead and take
06:33 - this
06:33 - attack out if we already can go ahead
06:35 - and include it but a pure virtual
06:37 - function we need to overrate this attack
06:40 - function and give it you know some code
06:43 - to run
06:43 - we just can't you know run this equals
06:45 - zero or it's a computer is going to flip
06:47 - out so basically before you could make
06:51 - an enemy object that use attack wait let
06:53 - me think how I'm going to say this well
06:58 - basically I just said all I needed to
07:00 - say I'm just going to you know tell you
07:01 - guys how it works in my program but I
07:03 - think I just said everything I need to
07:04 - say
07:04 - so basically well you know I'm not even
07:07 - going to do that because I did explained
07:08 - it like five times so anyways that is
07:10 - what pure virtual function is in all
07:12 - abstract classes is a class that has a
07:14 - pure virtual function in it so I don't
07:18 - know if in the next lesson I'm going to
07:19 - be showing you guys how to make a you
07:21 - know how to put polymorphism to use or
07:23 - we're going to be moving on to another
07:24 - subject but either way it's going to be
07:27 - amazing so stick with me and uh yeah
07:29 - we're almost done with polymorphism
07:31 - either way so if you know stressing you
07:33 - out just take a deep breath and you know
07:35 - the end is near so thank you guys for
07:37 - watching don't forget subscribe and I'll
07:39 - see you guys later