00:00 - all righty hoses so in the last video we
00:02 - learned all about action creators and
00:05 - actions so now let's go back to our
00:07 - trusty diagram and figure out what we
00:09 - have to do next actions and then we need
00:12 - to figure out
00:13 - reducers wait a minute mate I thought we
00:16 - already learned about reducers in like
00:19 - the first tutorial we already took care
00:21 - of that and all reducers are are pretty
00:23 - much just part of your application just
00:26 - anything that you have to contain in
00:27 - memory so how the heck did we get back
00:30 - to this oh wait a minute I guess there's
00:33 - a little more to it than just a piece of
00:36 - memory that your application has to hold
00:38 - on to it also says it takes in actions
00:40 - and updates part of application State
00:44 - huh that's interesting and that brings
00:46 - me to the last point that I want to make
00:49 - you see these actions right here these
00:52 - actions they don't really do anything or
00:54 - manipulate anything in a smart kind of
00:56 - way all they are is just telling your
01:00 - application hey something happened some
01:03 - user event some action it occurred
01:06 - that's all they just make an
01:08 - announcement to the world and then
01:10 - they're like all right I did my thing
01:12 - now it's actually up to the reducer to
01:16 - determine how that action is going to
01:19 - change your application so this reducer
01:23 - is actually the smart part that says
01:25 - okay whenever I hear this announcement
01:28 - how is that going to change my data so
01:32 - in this case we have one action whenever
01:35 - the user clicks one of these names
01:38 - that's the announcement that gets made
01:40 - so then what we need to do is we need to
01:41 - say okay whenever that happens display
01:44 - their info under here now for this
01:48 - application I'm just going to say that
01:49 - the user that's currently selected we'll
01:51 - just call that the active user all right
01:55 - so last piece of the puzzle let's go to
01:58 - our reducers and check this out so this
02:01 - is the data that we have so far we have
02:03 - three users stored in here now of course
02:06 - eventually we're going to need to make
02:08 - one of these the active user and that
02:11 - user gets displayed on the bottom right
02:13 - here so let me start thinking about this
02:15 - I mean we can have another one another
02:18 - field called active and we can set it
02:19 - equal to true and false but we really
02:22 - don't want to do this because we really
02:24 - don't want to change this piece of data
02:27 - because right now I mean later on we may
02:30 - add a functionality to kind of add new
02:33 - users and delete users but hey we're
02:35 - just starting to learn react so we
02:37 - really never
02:39 - want this user list to change we're
02:41 - always going to have three users no
02:43 - matter what one is the active one so
02:46 - what I'm going to do is I'm actually
02:47 - going to take this reducer this piece of
02:49 - memory and I'm going to leave it alone
02:52 - however we still need to decide who the
02:54 - active user is so how do we do that well
02:57 - I'm actually going to make a brand new
02:58 - reducer
03:00 - and I'm just going to name this
03:03 - reducer active user so again all this
03:08 - piece of data is going to be equal to is
03:10 - essentially whatever user got selected
03:14 - so again we have two reducers two pieces
03:17 - of memory that our application needs to
03:19 - be aware of the first one is a list of
03:22 - all the
03:22 - users and the second little piece of
03:24 - memory is what user is currently
03:27 - selected what one is the active user
03:30 - and this is going to change so we're
03:32 - going to set it up a little bit
03:34 - differently than this right here it's
03:36 - actually going to be really cool so of
03:40 - course this is going to be a function
03:42 - and again its job is to listen for this
03:45 - action so whenever it hears the
03:47 - announcement user selected it's going to
03:50 - say oh um all right what user was
03:53 - selected and that's the active user
03:55 - that's all it does and by the way one
03:57 - other thing that I want to mention
03:59 - whenever any action occurs no matter if
04:03 - it's in this file another file anytime
04:05 - any action occurs that action
04:08 - automatically gets sent to All
04:10 - reducers all right that's an important
04:13 - concept to kind of remember so if you're
04:15 - saying wait a minute so you're saying my
04:16 - action is going to be sent to this
04:18 - reducer even though it doesn't really
04:20 - need it anyway well yes does it matter
04:23 - no because this reducer is going to
04:26 - return the same piece of data no matter
04:27 - what and the majority of your your time
04:30 - most of your reducers are just going to
04:32 - ignore these announcements these actions
04:35 - however what you can do in some reducers
04:38 - is you can set it up to respond to these
04:40 - actions
04:41 - appropriately so how do you do that well
04:43 - let's finally kind of get to it so might
04:46 - as well put this at the top so
04:49 - export default function and we'll just
04:52 - say
04:53 - State equals null all right so let me
04:58 - show you guys something else real quick
05:01 - let me delete some of this crap clean it
05:03 - up do I need my diagram still I'll keep
05:07 - my action all right so you know that I
05:09 - said a million times that all a reducer
05:10 - is is just a little chunk of memory that
05:12 - your application needs whether it's a
05:14 - list of users the currently selected
05:16 - user whatever so whenever we create all
05:20 - these little bits of memory we need to
05:21 - kind of put them together into this
05:24 - thing all reducers yeah we already
05:26 - learned that before why am I saying it
05:28 - again I'm saying this because even when
05:30 - your application first boots up this
05:33 - little chunk of memory it needs to be
05:35 - equal to something wait a minute you
05:37 - don't have any user currently selected
05:39 - yet well we still can't just return
05:42 - undefined or else we're going to get a
05:43 - bunch of Errors so what people usually
05:45 - do is they give this a default value and
05:48 - the default value just has to be
05:50 - anything it can be equal to you know a
05:52 - blank object it can be equal to zero it
05:55 - can be equal to anything just not
05:58 - undefined or else you're you're going to
05:59 - generate a bunch of errrors so with the
06:02 - new es6 syntax you can actually just set
06:04 - a default parameter right here or if you
06:07 - want then you can just return um uh you
06:10 - know a blank object or you can give it
06:12 - like a default user like saying when
06:14 - you're at first boots up just give it
06:16 - Bucky by default whatever but that's an
06:18 - error that a lot of people come across
06:20 - and they don't know why so I just saved
06:23 - you guys the trouble so there you go so
06:25 - again what this is going to do is it's
06:28 - going to take an action as
06:31 - well so right now we only have one
06:34 - action right where is my action so right
06:36 - now we only have one action that can
06:38 - occur user selected but eventually in a
06:42 - full-fledged app we're going to have a
06:43 - bunch of actions menu open Button
06:45 - clicked user deleted message sent a
06:48 - bunch of these little announcements
06:50 - going off so what we do in our reducer
06:53 - is we need to say okay what
06:56 - announcements do we care about so you
06:59 - pretty much
07:00 - say um if it's user selected then do
07:03 - this if it's message sent do that and
07:05 - you have like a bunch of different if
07:07 - statements if this if this if this
07:09 - however whenever you have a bunch of
07:11 - different if statements it's better just
07:13 - to use a switch it's like a more compact
07:16 - way of writing a whole bunch of if
07:17 - statements so what we're going to do is
07:19 - we're going to listen listen for the
07:21 - action type so again that's just the
07:24 - announcement that got made and I can
07:27 - actually copy this
07:30 - so we'll
07:33 - say in the case that the announcement or
07:36 - action was user selected what do we want
07:40 - to do well all we want to do is we want
07:42 - to return remember we have to return
07:46 - some piece of data that's what a you
07:48 - that's what excuse me a reducer is is
07:50 - just a little piece of data that you
07:52 - want to return so this is the active
07:54 - user reducer so what are we going to
07:57 - return well we're just going to return
07:59 - the payload because the payload is the
08:02 - user that they clicked on and this is
08:05 - the easiest thing ever so all we're
08:07 - going to do is return the action
08:09 - [Music]
08:10 - dot why say playlist how did my fingers
08:13 - do that automatically it's weird
08:15 - sometimes I just start typing and I
08:18 - think I'm going to type like bucket and
08:19 - I type like ham sandwich I'm like how
08:21 - did I do that all right let's get back
08:23 - on track here Bucky and
08:26 - break and it won't give it a default and
08:28 - I'll say return
08:30 - State all right so if there was no
08:33 - announcement well I'll say this when
08:35 - you're at first boots up then we're just
08:37 - going to say State equals null so we can
08:40 - say blank object but I'll show you guys
08:41 - a cool little trick that you can do
08:43 - later on whenever you hit null so we'll
08:46 - say State equals null when your app
08:47 - first boots up it just returns State now
08:50 - later on whenever they click one of
08:52 - these users then it's going to hear this
08:54 - announcement it's going to hear this
08:56 - action and it says all right what do I
08:59 - want to to return I need to return some
09:00 - piece of data whenever they selected a
09:02 - user well all I'm going to do is return
09:04 - the payload which is the user right
09:08 - there easy enough so this reducer is
09:12 - always going to return the same list of
09:13 - users we're not touching that
09:15 - everything's perfect there and this
09:18 - one is always going to return the user
09:21 - that was last selected this is beautiful
09:24 - so now again all we have to do is add it
09:27 - to the all reducers so
09:30 - import what am I going to name this
09:33 - we'll just say uh active
09:37 - user
09:39 - reducer
09:43 - from reducer active user and all
09:48 - right so whenever I use this in my app
09:50 - I'll just refer to it as active user and
09:53 - it is equal
09:54 - to the active user reducer which is
09:57 - essentially this function
09:59 - right
10:00 - there beautiful