00:00 - in this video let's move right on to the
00:02 - next get 10 point
00:04 - which is the one to retrieve a single
00:06 - bank so once we're done
00:08 - when we make this request in postman
00:10 - here to
00:11 - api slash bank slash sum account number
00:15 - we want to retrieve or we expect to get
00:17 - that bank
00:19 - back from our api so let's go ahead and
00:22 - do this
00:23 - of course we're going to start off at
00:25 - the test
00:26 - and i don't want to bore you with going
00:29 - bottom up
00:30 - for all of these end points you've seen
00:32 - it now once with test driven development
00:35 - how you build the system up how you test
00:38 - each layer
00:38 - using unit tests but for this one now
00:42 - for the following videos i would just
00:44 - create the controllers integration tests
00:47 - but feel free to keep also writing the
00:50 - unit tests just for practicing
00:53 - kotlin as well as junit 5. it's a really
00:56 - good practice
00:58 - now what i'm going to do here is i'm
01:00 - going to create another test case
01:02 - saying should return the bank with the
01:05 - given account number let's say
01:08 - and then let's say given the account
01:12 - number one two three four
01:15 - when our what can we see request
01:18 - performs
01:19 - a get to our api
01:23 - slash banks
01:26 - oops slash account number
01:30 - and we'll again do a print
01:34 - and so with my live template
01:36 - automatically jumps to the next one
01:38 - but i'm gonna combine these two into a
01:41 - when then block again here
01:43 - and also i want to expect that i get a
01:46 - status code
01:47 - of 200 so it should be okay
01:51 - and i'm going to keep it at just this
01:53 - simple test case for now again
01:56 - still doing test driven development even
01:58 - though i will only be writing the
02:00 - integration test from now on
02:03 - and now i actually started the
02:04 - application because that's the last
02:06 - thing i ran
02:08 - but i want to run the test class all
02:11 - right
02:11 - obviously this will fail so let's go to
02:14 - our bank controller
02:15 - and here we'll need another get mapping
02:18 - and i'm going to call this
02:20 - method just bank and now there's
02:22 - actually something new coming in
02:24 - because this one has a parameter which
02:26 - is the
02:27 - a count number
02:31 - and that test case takes really long for
02:33 - the first time
02:35 - but it's it's faster afterwards so we
02:37 - have the fading test
02:39 - um let's see what happens
02:43 - and of course we get a 404 because
02:45 - there's no such end point
02:48 - and so this account number is a string
02:51 - but in fact what we want to have
02:53 - is this should be a path variable
02:56 - which tells spring that it should get
02:58 - this variable or the value for it
03:01 - from the request path and so a path
03:05 - variable
03:06 - is a variable that's inside here
03:09 - now what we want to do is based on our
03:12 - base path of
03:13 - api banks this get mapping
03:17 - is actually on a id
03:20 - sub path and in fact i have to call this
03:23 - one
03:24 - account number because it has to match
03:26 - the name of the parameter here
03:28 - and this way spring boot now knows that
03:31 - it's a get mapping
03:32 - on api slash bank slash sum account
03:35 - number
03:36 - so this way we have it available in our
03:39 - function body
03:40 - and of course we just want to call the
03:42 - service dot get
03:44 - bank and pass on the account number
03:48 - and as you might notice i'm going a bit
03:49 - too far already
03:51 - so for this test case we have right now
03:53 - we can also let's say
03:56 - just return you want data about
03:59 - the account number and this way we can
04:02 - even test that it's
04:03 - parsing the account number as it should
04:05 - and then we run the tests
04:08 - yep indeed that's enough and we can also
04:10 - check here
04:11 - we have a response body of you want data
04:14 - about one two three four
04:16 - so perfect springboot is looking at the
04:18 - account number and
04:20 - giving it to us in our method so now
04:22 - let's be a bit more
04:25 - comprehensive here in the test so we
04:27 - want to expect that our
04:29 - content type again is application json
04:34 - and in fact i should move this into one
04:37 - block here
04:38 - using this kotlin dsl so i want to
04:41 - expect all of these
04:43 - and don't need this bracket so expect
04:45 - all of these
04:46 - and then again i'm using json path and
04:49 - in here now we only have a single object
04:52 - so we don't need any error access here
04:55 - instead we just use the root object
04:57 - again and
04:58 - on this one we can check for instance
05:00 - that the trust
05:02 - should have a value of let's see
05:05 - in the mock data source a trust of 3.14
05:09 - and a transaction fee of 17.
05:13 - so let's go ahead and say the trust
05:15 - should be
05:17 - 3.14
05:19 - and also the transaction fee
05:24 - should have a value of 17
05:27 - and then i'll run this test again which
05:29 - will now obviously fail
05:31 - so in the bank controller let's just
05:33 - move on
05:34 - so here we're going to call our service
05:37 - and we get we want to get the bank with
05:40 - the given account number
05:43 - now right now we don't have this method
05:45 - yet so let's create this
05:47 - member function and it's going to take
05:49 - an account number of type string
05:51 - and it should return a bank
05:54 - so this one should also be on the bank
05:57 - controller
05:58 - then it could have already inferred this
06:00 - type
06:01 - and so then in here we're gonna again
06:04 - just delegate to our data source
06:06 - and retrieve the bank
06:09 - with this account number now later on
06:12 - there might be more logic in this
06:13 - service
06:14 - but for now we're just going to delegate
06:16 - to our data source
06:18 - and again create this member function
06:21 - which also takes the account number and
06:23 - returns a bank
06:25 - and that's all i want for this interface
06:27 - so now let's go into our implementation
06:30 - that's not the implementation i wanted
06:32 - to go through
06:34 - go to this one's implementation so mock
06:37 - data source
06:38 - and in here we can now implement the
06:40 - remaining
06:42 - interface methods that we do not yet
06:44 - have implemented
06:45 - so retrieve bank and in here we want to
06:47 - say
06:48 - return from the banks the first one
06:53 - which matches the following query
06:57 - its account number should be equal to
06:59 - the given account number and let's see
07:02 - what happens if it cannot find this one
07:05 - it would throw a no such element
07:08 - exception and this is just fine that's
07:11 - actually
07:11 - quite nice that's probably what i would
07:13 - have thrown otherwise let me also
07:16 - refactor this
07:17 - convert it to an expression body and
07:20 - then for now that's good
07:21 - we're going to take a look at what to do
07:24 - if we have this no
07:25 - such element exception later on and how
07:27 - we can map it to the correct status code
07:30 - for now we have all the layers so let's
07:32 - see what happens if we run our test
07:34 - again
07:35 - and it's already working just fine so
07:38 - let's see in our response
07:39 - we indeed get our bank object so that's
07:42 - looking really good but
07:44 - we're only testing the happy path right
07:46 - now and that's not really a good
07:47 - practice
07:48 - i also want to test what happens if i
07:50 - give it a non-existing account number
07:53 - and now to do this i actually want to
07:55 - restructure this a little bit
07:57 - because it can become quite confusing if
08:00 - you have lots of tests and they're all
08:02 - just on the same level here
08:04 - and that's why in junit 5 there's
08:07 - something called a nested class
08:10 - so here again i have a live template for
08:12 - this that i'm going to show you in a
08:13 - second
08:14 - but basically you have this nested
08:16 - annotation
08:17 - which tells junit to
08:21 - look at all the test cases in this class
08:23 - i'm also going to use
08:25 - this test instance per class which means
08:29 - that
08:29 - junit is not supposed to create a new
08:32 - instance
08:32 - of this class for every test case that
08:35 - it runs
08:37 - and what's also really nice is this
08:39 - display name
08:40 - so this one here i'm just going to call
08:42 - getbanks
08:43 - because what i want to do with this
08:45 - nested class is i want to encapsulate
08:48 - all the tests for this endpoint of this
08:51 - method
08:52 - and i'm just going to call this class
08:54 - get banks as well
08:56 - and in here i'm going to move this test
08:59 - case
09:00 - that's the only one we have for this
09:02 - endpoint and then it's nicely nested in
09:04 - its own little
09:06 - scope let me just do the same for this
09:09 - one down here before i
09:10 - show you what exactly happens and what
09:12 - the live template looks like
09:14 - so i'm going to call this one get bank
09:16 - with a singular
09:19 - of course introduce this import that
09:22 - makes it a bit easier
09:24 - apparently it cannot show the context
09:26 - actions while it's still
09:28 - it still wants me to add something here
09:31 - so
09:31 - let's get this done and then let's
09:34 - import this one
09:36 - and i'm going to move the test case in
09:37 - our nested class
09:40 - and then this one also has its own nice
09:42 - little scope
09:44 - all right so with that done let's run
09:46 - the tests again
09:48 - and let's see what happens and we see
09:51 - that we see
09:52 - nothing if this happens so what we
09:54 - expect is that the display name
09:56 - getbanks would be shown here instead of
09:58 - this more cryptic
10:00 - qualified class name however what you
10:03 - have to do
10:04 - to make this work in intellij is go to
10:07 - the settings and then in
10:10 - gradle or under the build execution and
10:13 - deployment
10:14 - you have to run the tests using intellij
10:16 - idea
10:17 - and i think even you have to also build
10:19 - the project using intellij
10:22 - you can try without but for now to be
10:24 - sure i'm going to do it like this
10:26 - and then if i run them again it should
10:28 - work
10:29 - unfortunately at the moment if you run
10:31 - your test using gradle
10:33 - it basically doesn't expose this
10:35 - information to the ide
10:37 - so for some reason it's still running
10:38 - the tests with gradle you can see it
10:41 - even says open the gradle test report so
10:44 - i think what i have to do is just
10:45 - restart the ide
10:47 - and maybe even invalidate the caches you
10:50 - might face the same problem so i'm going
10:52 - to show it here
10:53 - so restart and it will tell you can also
10:56 - invalidate the caches and restart or
10:58 - just restart
11:00 - to make sure let's try invalidate and
11:01 - restart and then let's see
11:03 - if we can get it to work so if you chose
11:06 - invalidate
11:07 - of course it's going to take some time
11:09 - now to index everything again and
11:11 - rebuild the cache
11:13 - but hopefully that will get it to work
11:16 - it's a bit unfortunate that there are
11:18 - sometimes a few hoops
11:20 - we have to jump through but it's just a
11:22 - tooling issue
11:23 - and also i think even if you don't care
11:25 - about the display name
11:27 - the nested classes are just a separate
11:30 - feature so
11:31 - you can also use them obviously without
11:33 - a display name
11:34 - and they still give you a nice scope for
11:36 - your tests
11:38 - you can also use them for defining the
11:42 - test prerequisites so here i'm using
11:44 - them
11:45 - each for a different endpoint or a
11:47 - different method here
11:49 - but what you can also do if you have
11:50 - different for instance state based tests
11:54 - is you can have nested classes that
11:56 - build up your
11:57 - test prerequisites so something like
12:01 - given a valid request and then given
12:04 - invalid request and so on
12:06 - um this way you really know where you're
12:09 - currently at
12:10 - when you're looking at a test case
12:12 - because you can just look at the
12:14 - classes that it's nested into another
12:17 - advantage of this kind of nesting
12:19 - is if you look at the outline view in
12:21 - your ide
12:22 - it gives you this really nice way to
12:24 - browse through your test cases
12:26 - and see what's already being tested get
12:28 - an overview
12:29 - which can be otherwise really hard if
12:32 - you have
12:32 - a long test class which can happen quite
12:35 - easily
12:36 - so so much for why the nested classes
12:38 - are really nice feature i think
12:40 - um if you want to do the same in terms
12:43 - of
12:43 - live templates again just go to your
12:46 - live templates
12:47 - and then under cotton you can add a new
12:49 - one
12:50 - and this nested one looks like this over
12:54 - here
12:55 - um so yeah basically you saw it you have
12:58 - these kind of
13:00 - placeholders for the display name the
13:02 - class name and then the
13:03 - body and this one should be applicable
13:06 - in a class realm because you're creating
13:09 - inner class
13:10 - um an object declaration maybe and then
13:13 - also other
13:14 - so really well you don't want it in
13:16 - comments
13:17 - but just make sure it's class that's the
13:19 - the one where you're actually going to
13:20 - use it in
13:22 - you can probably skip the other two but
13:24 - it doesn't really hurt either
13:26 - all right so now without further ado
13:27 - let's just hope that it works now
13:29 - um running with uh and also building
13:33 - with intellij
13:34 - all right finally yeah so sometimes you
13:37 - have to restart
13:38 - intellij or even invalidate the caches
13:41 - but now it's running the tests
13:43 - uh not using gradle and you can see the
13:45 - display names here
13:47 - of course you can also have spaces in
13:50 - between
13:51 - just like with the test names and
13:53 - actually i just noticed i haven't really
13:55 - talked about this yet
13:57 - but in kotlin you can use backticks in
13:59 - your
14:00 - method names and then have these kinds
14:02 - of names
14:03 - with spaces for instance obviously this
14:06 - is really nice for test cases but
14:08 - please don't use this in your production
14:10 - code it's not a good function name in
14:13 - general but it's really great for
14:14 - writing tests
14:16 - all right so here we are we have our
14:18 - running tests and we have
14:20 - the tests that we have so far nested
14:22 - into
14:23 - their specific scopes now what i wanted
14:26 - to do is add another test case here
14:29 - saying that it should return not found
14:33 - if the account number
14:36 - does not exist so given
14:40 - an account number of
14:43 - let's say does not exist so it's always
14:46 - nice to make your
14:47 - test data very readable then i want to
14:50 - have
14:50 - again this combined when then block
14:54 - so when i say dot moccambc.get
14:59 - api bank's account number
15:02 - and i should extract this to a variable
15:05 - because i'm using it
15:06 - three times already now so this will be
15:09 - a
15:10 - let's say base url
15:14 - and obviously i don't want it just here
15:15 - i want it at the very
15:17 - top because it's also relevant for all
15:20 - the nested classes
15:22 - and then here i can just say when i get
15:24 - the base url
15:26 - and over here when i request
15:30 - base url slash account number and the
15:32 - same here
15:34 - then first of all i'm again gonna print
15:37 - out what's happening
15:38 - and i expect that the status code in
15:42 - this case
15:42 - is not found and to make this error test
15:45 - case stand out a bit more
15:47 - i'm actually going to write this in
15:49 - uppercase
15:50 - so let's run it again and see what
15:52 - happens
15:54 - all right here we are we have a failing
15:56 - test again i think it's actually also
15:57 - useful
15:58 - to select here the first test that
16:01 - failed
16:02 - when all the tests have run then it
16:04 - would already
16:05 - mark this one so let's see what's
16:08 - happening
16:09 - down here collection contains no element
16:12 - matching the predicate that's what we
16:14 - expect
16:14 - however it just says request request
16:18 - processing failed so it's really just
16:20 - throwing an exception
16:22 - and just completely failing instead of
16:24 - giving a proper response with a proper
16:27 - not found status code so now we get to
16:30 - another interesting topic in spring boot
16:32 - which is error handling
16:34 - so for this one there are multiple ways
16:36 - to solve it
16:38 - for this tutorial series i'm going to
16:40 - use a very
16:41 - easy one so in our bank controller what
16:44 - you can do is you can
16:45 - also define an exception handler
16:48 - and what we really want to do here is in
16:51 - our controller
16:52 - we want to map any internal exceptions
16:55 - that may have occurred
16:57 - like the no such element exception we
17:00 - want to map those to the appropriate
17:02 - status codes
17:04 - and so springboot has this really nice
17:06 - capability where you just say you have
17:08 - an exception handler
17:10 - for some type of internal exception
17:12 - that's not really
17:14 - or shouldn't be exposed to the outside
17:16 - and here we looked it up it was the no
17:19 - such element exception
17:20 - the one actually coming from kotlin not
17:23 - from java util
17:24 - and then here again this will be an
17:26 - annotation on a method
17:28 - and i'm going to call this handle not
17:30 - found
17:31 - because you can give it any name you
17:32 - want but this of course should signify
17:35 - also what you're trying to do
17:37 - and then it gets a parameter which
17:39 - should be the same type as the
17:41 - exception that you're handling so here
17:44 - i'm going to pass in this no such
17:46 - element exception
17:47 - so spring boot will be responsible for
17:50 - basically
17:51 - catching that exception and providing it
17:53 - to this method
17:55 - and it's going to return a response
17:58 - entity
17:59 - so really just a response a proper
18:02 - response with
18:02 - our 404 response code
18:06 - and here i'm going to create a simple
18:08 - response entity
18:10 - using the exceptions message and the
18:13 - status code not
18:14 - found so with just three lines of code
18:17 - we've achieved that spring boot will
18:19 - handle any no such element exception
18:21 - that bubbles its way up into the
18:23 - controller
18:24 - it's gonna provide it to our handle not
18:26 - found method
18:28 - and we're going to respond with this
18:31 - response entity that we have
18:33 - so let's go ahead and run the tests
18:34 - again and see if it's already working as
18:36 - we expect it to
18:38 - all right perfect so now in this test
18:41 - case here
18:42 - when springboot encounters the account
18:45 - number that doesn't exist
18:46 - it will go into our mockbank data source
18:49 - and the first method here will throw a
18:52 - no such element exception
18:54 - which is going to bubble up into our
18:56 - data source
18:58 - which is again going to bubble up into
19:00 - our service
19:02 - and then finally it's going to bubble up
19:04 - to our bank controller
19:07 - and here we have this exception handler
19:09 - so like i said there are different ways
19:11 - to do this in spring boot
19:13 - if you have many controllers you don't
19:15 - really want to define this in each and
19:17 - every controller
19:18 - so there's also way to do it for your
19:20 - entire springboot application
19:23 - but again for these tutorials this is
19:25 - just fine
19:26 - and in fact you can also look it up here
19:28 - in the
19:30 - output so the response now has error
19:33 - code
19:33 - 404 and even you get the really nice
19:36 - response body collection contains no
19:38 - element matching the predicate
19:40 - of course you could also extract this
19:43 - away a bit
19:43 - or abstract it to no such bank was found
19:48 - in fact let's go ahead and just do this
19:49 - so you know how to so
19:51 - in our mock bank data source instead of
19:53 - just calling first
19:55 - we can also say first or null but then
19:58 - if it is indeed null what we're going to
19:59 - do is we're going to throw our own no
20:01 - such element exception
20:03 - and now we can define our own message so
20:06 - to give a more useful answer in our
20:07 - response we can say could not find a
20:10 - bank
20:10 - with account number and then pass
20:14 - the account number and then this way if
20:17 - we run the tests again
20:18 - we're not really checking the response
20:21 - body but we could
20:22 - for now let's just look it up in the
20:24 - logs here so
20:26 - for this test case could not find a bank
20:28 - with the account number
20:29 - does not exist and obviously this is a
20:32 - more useful response for
20:34 - your users because it's more related to
20:36 - your domain with the banks with the
20:37 - account number
20:38 - and not just a super generic error
20:41 - message
20:43 - all right really nice so now all that's
20:44 - left is to jump back
20:46 - into postman and just see if it also
20:48 - works
20:49 - here so really we already have our
20:52 - automated tests
20:53 - but it's always nice to see it manually
20:55 - as well
20:56 - of course i should also start the
20:58 - application first if i want to do this
21:02 - and once we have that then i can go to
21:04 - postman and let's see what happens
21:07 - all right so i get my bank with account
21:08 - number one two three four
21:10 - also if i try something that doesn't
21:12 - exist here
21:13 - i will get could not find a bank with
21:15 - this account number
21:17 - all right perfect so everything working
21:18 - as expected
21:20 - so in this video you really learned
21:21 - quite a few new things
21:23 - starting with the get mapping that
21:26 - actually provides a path variable
21:28 - then of course also using um the
21:32 - mock mvc to test the non-happy path
21:35 - which also led us to explore some of the
21:38 - exception handling capabilities of
21:40 - spring boot
21:42 - and obviously just how to create a new
21:44 - endpoint
21:45 - this time top down going through the
21:48 - service then going through the data
21:49 - source
21:50 - and then also implementing that one so i
21:53 - hope you've learned something in this
21:54 - video if you did please leave a like
21:56 - check out the links in the description
21:59 - and also let us know in the comments
22:00 - what other topics you might be
22:02 - interested in in the future
22:04 - and then i'll see you again in the next
22:05 - video