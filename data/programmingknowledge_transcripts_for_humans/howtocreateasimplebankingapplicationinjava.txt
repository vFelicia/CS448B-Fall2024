With timestamps:

00:00 - so so I guess this is the right time to
00:03 - begin our project
00:04 - our project number one is a simple
00:06 - banking application
00:08 - okay so till now we have covered only
00:11 - the loops uh some basic basic concepts
00:14 - of the Java and we are not right now uh
00:17 - Deep dive into the oops concept and that
00:19 - will be doing after this project once we
00:22 - complete this project so this project is
00:26 - simply a console based project uh so no
00:28 - GUI into the interaction will be there
00:31 - in this project once we move into the
00:33 - advanced section of the Java where we'll
00:36 - be seeing some Java applets or swing
00:39 - there we can convert this project into
00:41 - the GUI based project okay so so for
00:44 - till now uh I will be doing all this
00:48 - stuffs inside the console okay
00:50 - so for this I have plan what I have
00:52 - planned I will write down the points URL
00:55 - so first we will display a
00:58 - one welcome welcome message to the user
01:01 - okay
01:02 - welcome
01:03 - message
01:05 - to user okay so that is our the first
01:08 - first call okay
01:10 - and okay and then
01:13 - let me just get here
01:16 - okay for second number
01:18 - oh
01:22 - second
01:24 - will be looking into the
01:26 - give me a we are giving five options to
01:29 - the user okay so first option will be uh
01:32 - something known as deposit
01:36 - where user can deposit the money inside
01:39 - this bank account okay and then
01:43 - after that
01:45 - the third option second option will be
01:48 - something known as withdraw
01:52 - okay where user can withdraw the money
01:55 - from his account okay then the third uh
01:59 - feature we will be carrying is get
02:06 - previous
02:10 - transactions okay so here in this
02:14 - feature uh user will uh get to know what
02:17 - what is this previous times the actions
02:19 - what you have done
02:21 - in the past transaction okay and uh
02:24 - again one more feature is there that is
02:27 - not not a feature it it basically uh
02:31 - your menu which shows to the user okay
02:34 - so here we are showing the menu to the
02:36 - user according to that by seeing that
02:38 - when new user will give input to our
02:40 - program and program will behave
02:42 - according to that input okay
02:44 - so when
02:46 - to the user okay and uh at last
02:49 - we will execute
02:54 - execute our
02:56 - code
02:58 - okay so these are some steps that we
03:00 - will be following uh following inside
03:02 - this project
03:03 - okay at first user came and see the
03:06 - welcome message okay and then based on
03:10 - the user input we'll be performing some
03:13 - functions okay that is deposit withdraw
03:16 - that previous and vaccine show the menu
03:18 - and execute our code okay so I hope you
03:21 - understand the overview of the project
03:23 - so let me just get into into my IDE and
03:26 - I will creating the new class name as
03:30 - banking application
03:35 - oops sorry linking application
03:39 - okay and let me increase the font size
03:44 - yes and I will include my public static
03:47 - wall with me
03:49 - okay and inside main uh this project
03:53 - required input from the user so that's
03:55 - why I had to import the scanner class
03:57 - also and I will be using this new
04:00 - keyword scanner so
04:03 - system Dot in so okay basic stuff
04:09 - now
04:10 - I know we have the not covered started
04:13 - oops concept so that's why
04:16 - you will
04:18 - at some point you will not get some
04:20 - concept so bear with me I will be
04:23 - telling you what those concepts are okay
04:26 - so this is pretty much about the setup
04:28 - okay and now since we are doing all this
04:32 - uh let me show you all this deposit with
04:35 - action show menu and execute our code
04:37 - all this functionality in a one place so
04:41 - I guess this is the right time to
04:43 - introduce you with the oops concept
04:47 - known as method okay so I will oops of
04:52 - method and class okay so I will create
04:54 - another class known as the banking
04:59 - uh bank accounts which is more
05:02 - appropriate I guess
05:06 - AWC over your bank account
05:10 - okay okay
05:12 - so this is nothing but I have created
05:15 - one another class name as bank account
05:16 - where I will be covering all those
05:19 - functionality in inside this class and
05:21 - we will create one object of this blank
05:23 - bank account class inside this banking
05:26 - application class okay uh oops I have
05:29 - written this class inside class that is
05:33 - okay
05:35 - now it's okay
05:37 - okay so this is one class our public
05:41 - class and inside which our main method
05:43 - is there and this is another class where
05:46 - we'll be covering all these
05:48 - functionalities which are required in
05:49 - our uh project okay
05:52 - so inside this
05:54 - uh I will show you how this class and
05:57 - objects steps are created so bear with
06:00 - me and for first uh functionality of our
06:04 - project is deposit so we will be
06:07 - covering that first okay for so you you
06:12 - so you are pretty much aware about this
06:14 - for depositing the value uh something
06:17 - money inside our account we we need one
06:19 - variable which is known as balance
06:21 - because we are updating that balance
06:23 - after deposit occurs inside our
06:28 - account okay and we will require another
06:31 - variable normal name as previous
06:33 - transaction which will hold the value
06:36 - value and the information about the
06:39 - transaction that happened in inside past
06:41 - recently okay so I will be creating
06:45 - those two
06:47 - variables name as balance and another
06:50 - one as previous transaction
06:58 - okay
06:59 - and now I will create one method uh so
07:03 - this method doesn't return anything so
07:05 - that's why I have written void uh I know
07:08 - you are not getting some concept what is
07:10 - wired what is ain't okay not in in you
07:13 - know what is it is right and void and my
07:17 - method name is
07:19 - deposit
07:22 - okay and my method is going to accept
07:25 - one way
07:28 - when
07:30 - when parameter that is amount okay
07:33 - amount so method is nothing but one
07:36 - particular
07:37 - instruction of the lines of codes which
07:41 - will execute uh which will you will
07:44 - require again and again for the
07:46 - execution and then those setup
07:48 - instruction you are right inside of one
07:50 - method and you will call that method
07:51 - again and again to perform that task
07:54 - okay so we will be covering in depth
07:57 - about the methods what are the types in
07:59 - the oops concepts for but for now uh you
08:02 - know
08:03 - you know what is methods okay uh we will
08:07 - be creating one method known as deposit
08:09 - and inside that method I will be writing
08:11 - now uh if I want to deposit my money I
08:15 - have to check uh whether my amount
08:19 - that is uh given by the user and this is
08:22 - the
08:23 - parameters that this method will be
08:26 - accepting this method will accept amount
08:28 - that which is given by the user to
08:31 - deposit inside a bank account okay so I
08:34 - will be checking whether my amount is
08:36 - not equals to 0. okay so this uh if the
08:41 - user user inputs a given input as zero
08:44 - so that doesn't make sense because 0
08:47 - cannot be added inside the bank account
08:49 - okay that doesn't make any sense so we
08:52 - are checking on base basically base
08:53 - condition over here whether my amount
08:56 - amount which is a given input by the
08:59 - user should not be equals to the zero
09:01 - okay
09:02 - if it is not equal to 0 this uh if
09:05 - condition is evaluated at true and
09:07 - inside that uh I will update my balance
09:09 - okay so my I will tell balance
09:13 - is equal to
09:16 - Plus
09:17 - amount okay I will update my balance
09:20 - variable and I will have also updated my
09:23 - previous transaction variable as amount
09:26 - okay and so that tells that my previous
09:29 - transaction which then by the user is
09:32 - the amount that means the deposit
09:35 - to the bank account okay
09:37 - so this is pretty much about this and of
09:41 - the project okay so in this video we'll
09:45 - be discussing about the functionality
09:47 - which is withdraw and the get previous
09:49 - transaction so we will be implementing
09:51 - the two methods so for the one method is
09:53 - for the Vedra and one method is for the
09:54 - previous transactions okay
09:56 - so I hope you have watched the previous
09:59 - videos where we will be implemented our
10:02 - deposit function method and now in this
10:05 - video we'll be covering our withdraw and
10:07 - get previous transaction functionality
10:09 - okay
10:10 - so okay before we get into code think
10:14 - about it uh whenever I want to withdraw
10:17 - some money from my account got changes
10:19 - and first of all what I have required as
10:22 - the input to this method okay so let's
10:25 - think about it so for this I will be
10:28 - requiring one amount that is the amount
10:31 - of money that I want to withdraw from my
10:33 - account so the amount is the parameter
10:38 - which will be passing through the
10:39 - withdrawal functions and again one base
10:41 - condition should be there okay so think
10:44 - about it one what what will be the best
10:46 - condition again the same base condition
10:48 - uh like we have done for the deposit
10:51 - method that is amount should not be
10:52 - equal to the zero because deposit
10:54 - depositing the zero rupees or the zero
10:57 - dollars from an account
10:58 - doesn't make any sense okay so we'll be
11:01 - implementing that also
11:02 - and I guess this is a bit pretty much
11:06 - stuff that we have you want to do inside
11:08 - the withdrawal function okay so let's
11:10 - just get and implement this we draw
11:13 - method okay
11:16 - since our method is doesn't returning
11:19 - anything that's why the return type
11:21 - should be avoid uh void avoid is the
11:24 - return type there are many different
11:26 - types as such as int uh care strings are
11:29 - there uh method is doesn't returning
11:32 - anything it it is just performing some
11:34 - basic math calculation and it will
11:36 - returning some value to the user okay
11:39 - not value it is performing some task
11:42 - okay
11:43 - so withdraw I will name this as withdraw
11:48 - and as we have discussed it will accept
11:51 - one parameter known as amount amount of
11:54 - money that we have to we draw a formal
11:56 - account okay and again one of the base
11:58 - condition should be base condition
12:00 - should be there that my amount should
12:02 - not
12:04 - be equals to the
12:06 - zero if it is equal to zero that doesn't
12:08 - make any sense okay and inside this uh I
12:12 - will update my balance because after
12:14 - we're drawing some money my when that
12:17 - amount that much amount of money should
12:18 - be deducted from a balance that for my
12:22 - account
12:22 - balance okay so balance
12:25 - minus amount
12:29 - okay and now after that I I also have to
12:32 - update my previous transaction
12:35 - as amount
12:40 - okay minus amount okay
12:43 - so I guess this is pretty much that we
12:46 - have to do
12:47 - inside the withdrawal functionality and
12:51 - after that we will be performing
12:55 - another functionality that is get
12:58 - previous transaction so
13:01 - this I have writing the previous
13:02 - generation previous and action we have
13:04 - to implement that method inside this
13:07 - class name as bank account okay and so
13:11 - since
13:12 - previous get previous transaction it
13:14 - doesn't
13:16 - return anything so that's why I will
13:18 - write void as the return type and I will
13:21 - write get
13:24 - previous
13:26 - transaction
13:30 - okay
13:31 - uh wait guys
13:34 - okay so sorry for the introduction guys
13:37 - okay so where we are avoid get previous
13:41 - transaction reaction okay so this method
13:43 - uh doesn't require any parameters
13:45 - and it doesn't return anything okay so
13:49 - inside this I will write one if
13:51 - condition
13:52 - if my previous standard action value
13:55 - is greater than 0.
13:58 - okay when the value will be uh will have
14:01 - to press the previous election will be
14:03 - greater than uh
14:05 - 0 when we have done any deposit uh in
14:10 - our account okay so in that case I will
14:12 - print
14:15 - deposited
14:20 - and I will concat it with
14:23 - previous interactions value okay and uh
14:27 - again
14:28 - one else if condition should be there to
14:31 - check
14:32 - else if
14:35 - my the value of the previous transaction
14:39 - it's less than zero in that case when we
14:44 - draw means one withdrawal should be
14:47 - there for my account so in that case I
14:50 - will write
14:53 - sorry
14:55 - with drawn
14:59 - be drawn
15:02 - the amount should be there and one thing
15:06 - I will do here is math Dot abstract
15:12 - okay and I will pass it to the value of
15:15 - the previous transaction so you'll ask
15:18 - me what we have done here what is this
15:20 - map.aps right and we are passing uh
15:23 - three ways of the actual value to it
15:24 - okay
15:25 - so this is the enable class inside the
15:30 - Java so here you can if you hover over
15:32 - the cursor over here you can see Java
15:35 - dot line language package inside which
15:38 - math class is there and one abs abs
15:42 - method should be there inside that math
15:44 - class if you if I click here and here
15:46 - you can see public static int areas so
15:49 - what this uh method does it will accept
15:53 - one parameter
15:55 - okay so as you here you can see it is
15:57 - accepting one parameter which is integer
15:59 - a and it is returning something uh
16:02 - in in format okay
16:04 - so what it does is uh since the value of
16:08 - the previous election is less than zero
16:11 - that is the negative one like minus
16:14 - something known as minus 50 or guess
16:17 - minus 400 so we don't want this values
16:22 - to be reflected in our console because
16:24 - negative values should not be there
16:26 - inside any account okay so we are doing
16:28 - this match dot abstract function and it
16:30 - will convert that negative value inside
16:32 - the positive to its corresponding
16:35 - positive value that is equal to it will
16:37 - convert the minus 50 x 50 and uh minus
16:40 - 400 as 400 okay so this is the work of
16:44 - the max dot abstracts abstract function
16:46 - okay or method uh then here I will write
16:51 - else
16:52 - if both the condition will not get
16:55 - satisfied in that case I will write
16:59 - no transaction is occurred
17:03 - no
17:04 - transaction
17:07 - it's
17:08 - upgrade
17:11 - okay
17:13 - so I guess this is pretty much about the
17:15 - previous transaction method where we
17:18 - will checking if the value is greater
17:20 - than zero that is a deposit deposit
17:22 - method is getting run inside our
17:24 - application and if the value is less
17:27 - than zero that is withdraw is done
17:29 - inside our bank account if nothing none
17:33 - of this statement get executed then else
17:36 - will execute and it will show that no
17:38 - transaction is occurred inside our
17:40 - account okay
17:42 - so this is pretty much about the
17:43 - withdraw and get previous function so
17:45 - today in this video we will be covering
17:47 - uh our next functionality of the project
17:49 - that is the show many projects so this
17:52 - is the main uh method which will hold
17:55 - the all uh functionality of our banking
17:59 - application it will call all those
18:00 - methods which you have uh which we have
18:03 - written in our previous videos that is
18:05 - withdraw our previous transaction and
18:06 - the deposit and it will perform all
18:09 - those
18:11 - functionality of our project I guess
18:14 - okay banking application okay so in this
18:17 - video we will be writing this show menu
18:19 - method okay so for this I will cover I
18:24 - will write another
18:27 - method name show menu
18:30 - and this may this method will doesn't
18:32 - require any
18:34 - parameter and it doesn't return anything
18:37 - okay yeah so inside this menu show menu
18:42 - show menu function where method will uh
18:44 - basically do all those printing part
18:47 - printing stuff inside that console okay
18:49 - so for that uh
18:50 - I will be carrying one uh declaring one
18:53 - character
18:55 - okay now so character variable name is
18:59 - option and I will initially write his
19:02 - ads slash Studio okay so that represents
19:06 - null
19:07 - okay
19:09 - again uh oh I I guess I have declared
19:12 - the scanner class over here so that is
19:14 - inside this main uh another class so I
19:18 - have to I guess I have to declare one
19:21 - scanner I guess
19:24 - scanner SC
19:26 - is equals to new scanner
19:30 - system dot in
19:34 - okay let's go I have imported this kind
19:36 - of
19:37 - over here and now uh I have to create
19:42 - that
19:43 - console
19:44 - step here okay now so I will just oops
19:48 - sorry I will just sound one thing that
19:51 - is
19:53 - to welcome
19:57 - Plus
20:00 - cost
20:03 - name
20:05 - so this time uh IntelliJ IDEA is telling
20:09 - me that hey what is customer name you
20:11 - have it doesn't have declare it anywhere
20:13 - okay so for that uh I will be creating
20:17 - one
20:19 - variable over here
20:21 - that is of type
20:24 - this is customer name so that is of type
20:26 - string
20:27 - because customer name is in string
20:29 - format and I will write
20:32 - same customer name and one more thing I
20:35 - will be requiring is as customer ID okay
20:38 - and I will also declare it as a spring
20:41 - customer ID
20:45 - Okay so
20:48 - whenever the object of this class is
20:50 - created uh I I want the user to give me
20:56 - the customer name and the customer ID so
20:59 - that I can print that name and the
21:01 - customer ID over here okay so for this
21:04 - one more concept was there of the book
21:06 - of oops object of object oriented
21:08 - programming language that is Constructor
21:11 - so what basically Constructor does is it
21:14 - will get automatically called whenever
21:16 - the object of the class is created okay
21:20 - whenever I create the object of the
21:22 - class the Constructor is getting called
21:24 - and the Constructor name should always
21:27 - base as same as that of the class name
21:29 - okay so what is the class name bank
21:31 - account
21:32 - and this Constructor should accept the
21:35 - two parameters that is the customer name
21:37 - and the customer ID so that we can print
21:39 - that customer name and customer ID
21:41 - inside the console okay and so the name
21:45 - should be in the format of string string
21:48 - names
21:54 - and I will write string
21:58 - CID that is the customer I
22:02 - okay don't worry about this Constructor
22:04 - for deal for just now uh know that
22:09 - whenever we create the object of that
22:11 - class the Constructor get automatically
22:13 - called okay so this line number 15 to 17
22:17 - and inside this Constructor whatever I
22:19 - write it will get automatically called
22:21 - whenever we create object of this
22:23 - background class okay so whenever I
22:27 - create this uh update of this class I
22:30 - just want to assign the customer name uh
22:33 - as the C name which is given input by
22:36 - the
22:37 - C name
22:39 - by the user and I just want that
22:42 - customer ID should be equals to the CI
22:47 - okay so that is pretty much about this
22:50 - Constructor I guess
22:51 - and now we can move to the towards our
22:55 - show menu function and start again this
22:58 - okay so I will write again one South
23:01 - statement over you should be there and I
23:03 - will write
23:05 - your
23:07 - your ID is
23:11 - this and I will write
23:14 - customer ID
23:17 - okay so after this I want a new line
23:21 - should get painted on the console so for
23:23 - that I will write this out
23:25 - hit empty nothing should be there so
23:27 - that the new line should be there and
23:29 - which looks
23:31 - nice okay
23:33 - and again
23:34 - I want one option number a so we have
23:39 - discussed over here the options of that
23:41 - our application that is deposit we draw
23:43 - we address and reaction at the show menu
23:46 - okay so we will be covering that over
23:48 - here
23:49 - we will write
23:51 - check balance
23:57 - okay uh then
24:00 - again one more functionality should be
24:03 - there that is B Dot
24:05 - deposit
24:08 - if the user want to get put deposit some
24:11 - money inside this account
24:13 - and again C is retro
24:21 - withdraw
24:25 - and again one more shout man
24:29 - and now option number D to get the
24:34 - previous strand
24:38 - transaction
24:43 - okay and now last option
24:46 - if either want to get exit from this
24:48 - hour application you want
24:51 - our user to click key
24:54 - so that we can exit from our application
24:55 - and so
24:58 - now one thing you you should notice this
25:01 - show menu method show will display all
25:05 - the these steps inside the console okay
25:07 - and we don't want the user to get uh
25:10 - multiple times click on this run button
25:12 - run button and execute over this code
25:14 - again and again so we can what we can do
25:16 - is we can provide one uh
25:18 - Loop to the user wherein user can look
25:22 - iterate or iterate this functionalities
25:25 - or use this functionalities again and
25:27 - again as much time you want and whenever
25:30 - a user has done with all the
25:32 - application uses and then simply user
25:36 - can type e to exit from our application
25:38 - okay so for this I will be using one do
25:42 - while loop and inside do I will just
25:46 - first of all I will
25:48 - print one
25:50 - statement so it will look nice
25:54 - okay
25:55 - and then one more sound statement should
25:58 - be there
26:00 - which will tell the user to enter
26:03 - the option
26:04 - [Music]
26:07 - okay
26:08 - enter the option
26:11 - and after that one more sub statement
26:13 - should be there
26:15 - this line number 60 and line number 62
26:18 - is just you for the getting the console
26:21 - such a nice look okay and after that I
26:26 - will be doing option is equals to
26:29 - scan
26:31 - s is the object sorry SC Dot
26:36 - next
26:38 - Dot
26:40 - carat index 0. and I will be doing two
26:46 - I guess I can't do this here and let it
26:50 - be we will cover in the next upcoming
26:52 - video so in this way in this part I have
26:55 - taken one uh input from the user at the
26:58 - string and I will be returning the first
27:00 - character of that string okay uh so I
27:04 - have declared here the character as a
27:06 - layer of option and I'm storing that
27:10 - user input inside this option and so
27:13 - user can input e d e c a b a b c d e any
27:16 - option that you either want that gets
27:19 - stored inside this
27:20 - option variable okay
27:23 - so now inside this I will create one
27:26 - switch
27:27 - and so for switch I will be passing
27:30 - option as the parameter
27:33 - so we have covered switch I hope you
27:36 - guys remember this
27:37 - how switch works and how what is switch
27:40 - okay so we'll be carrying one case
27:45 - for first case
27:48 - we will be passing a we will be writing
27:51 - the functionality if the user clicks a
27:53 - that is the check balance
27:56 - okay for that I will come inside this
27:59 - case and I will first of all print
28:04 - this line okay so this line is basically
28:08 - just to give that
28:11 - nice look to our application okay so
28:13 - again inside that I will write
28:17 - Sound system.out.pin Table and I will
28:20 - simply print
28:23 - balance it's
28:27 - and I will contact it with
28:31 - balance
28:33 - okay and at last
28:36 - I will be printing again this just to
28:39 - give our application a nice look
28:42 - and I will print one sub statement so
28:44 - that one extra line should be there
28:46 - between
28:47 - the switch next case okay
28:51 - so after that this is pretty much about
28:53 - the check balance I will just write
28:57 - foreign
29:02 - but the next case we have
29:06 - case number B if these are given as B
29:11 - and I will just
29:13 - copy this statement over here
29:17 - just to give it
29:20 - oops sorry
29:22 - copy
29:25 - oh sorry guys
29:30 - me okay and what is the BP part uh B
29:34 - part is the deposit okay so when the
29:36 - user gives input as B we have to deposit
29:39 - the amount inside our
29:41 - account okay so it's out
29:45 - go either enter
29:47 - the
29:49 - amount
29:51 - to
29:54 - deposit
29:56 - okay
29:57 - so after this I will again print this
30:01 - line so that it will look nicer in our
30:05 - application
30:08 - okay
30:10 - now
30:11 - what I can do is
30:13 - int
30:16 - amount I will declare one variable
30:18 - nameless amount and using strot next end
30:24 - I will receive that
30:28 - in input from the user and I will call
30:32 - deposit
30:34 - method inside this and we will pass that
30:37 - amount value to the deposit function
30:39 - deposit method okay and after that
30:43 - I will just print One new line
30:45 - and I guess that that is pretty much we
30:48 - have to do inside this case number B
30:51 - right
30:52 - so what I have done uh
30:55 - and printed this on the console and I
30:58 - have taken one input from the user and
31:01 - showed it inside the amount variable and
31:02 - I have passed that amount variable to
31:04 - the deposit method and we have written
31:07 - this deposit method over here here you
31:09 - can see and this deposit method will
31:11 - update the balance of the in our account
31:15 - and update the previous transaction
31:17 - value also okay
31:19 - so after that
31:21 - moving forward
31:23 - to the case number c
31:30 - k c
31:33 - okay so what is Case C withdraw okay so
31:36 - we have to implement the withdrawal
31:37 - functionality over here so I will just
31:40 - simply uh
31:41 - copy this and paste code paste it over
31:44 - here enter the amount to
31:48 - withdraw okay
31:50 - after that
31:52 - again I will create one
31:55 - variable name amount two because amount
31:58 - is declared above already declared about
32:01 - SC Dot
32:04 - next
32:05 - int
32:07 - and for doing the withdraw stuff we have
32:11 - written one method withdraw and we will
32:14 - accept one parameter name is amount so
32:16 - we are passing that amount that that
32:19 - this should be withdraw from our account
32:21 - and then again I will simply just print
32:23 - a new line so that it looks nice in the
32:26 - console
32:27 - and I guess this is pretty much we have
32:29 - to do inside this case
32:33 - okay so our next case is case
32:38 - D and let me just look what we have to
32:41 - do AST that is the previous time the
32:43 - action uh we have to perform the
32:46 - previous time vaccine inside this case
32:48 - and again I will just copy this because
32:51 - this is
32:52 - step that I required every time okay
32:55 - and inside this
32:58 - I don't require this because
33:01 - I don't need to print anything inside
33:03 - the console or getting input from the
33:06 - user that's why and inside this I will
33:09 - call the get previous transaction method
33:11 - and this call will be uh go to here
33:15 - to a this method get creation reaction
33:18 - and this method will check this
33:21 - condition and according to that it will
33:22 - print that corresponding statement okay
33:25 - over here so
33:27 - okay so I guess this is the pretty much
33:29 - we have to do inside this case and after
33:31 - that
33:32 - I will just print One new line
33:34 - and I will break this condition okay
33:42 - now I have to write again one more
33:45 - condition
33:46 - that is the E condition that is in exit
33:49 - condition what if the user write e okay
33:53 - so in that case
33:55 - user want to get exit from this Loop so
33:58 - they will simply just print
34:01 - this statement
34:03 - and after this statement we will do
34:08 - break okay and
34:11 - this is all we have handled all those
34:14 - cases and
34:16 - we will sorry one default case which
34:20 - will handle and inside default case
34:24 - uh we should do print something like
34:29 - when we'll get a default condition get
34:32 - hit when the user will enter uh doesn't
34:35 - enter a b c d e and other characters
34:39 - okay so in that case we just have to
34:42 - print
34:44 - invalid
34:46 - option
34:54 - please
34:55 - try
34:58 - again
35:00 - okay and I will simply
35:04 - create this
35:06 - okay so I guess this is pretty much we
35:10 - have to do insert the switch
35:12 - okay so we have implemented this switch
35:16 - after that
35:19 - I will write while because this is this
35:22 - do while loop and inside while I will
35:25 - check the options value should not be
35:29 - equals to
35:31 - character P because if it is a e that
35:35 - that means user don't want to use our
35:37 - application anymore any more and you
35:41 - don't want to exit our phone or
35:42 - application okay so this is pretty much
35:45 - about the show menu
35:48 - I guess we have done let me just zoom
35:51 - out so that you can see whole method
35:54 - inside one View
35:56 - okay I guess this is and one
36:00 - one pretty simple mistake was there
36:02 - inside this method I want you to think
36:05 - about it and let me know today we are
36:08 - containing our project number one that
36:10 - is banking application and in this video
36:13 - we will finishing it okay so in our
36:16 - previous video we have discussed about
36:18 - the show menu functionality of our
36:21 - application and I have to told you over
36:23 - there when there is mistake is there
36:25 - inside this method that is what if
36:29 - we are checking the cases for the this
36:32 - letter that is uh
36:34 - capital letters capital a capital b
36:36 - capital c capital D and the capital E
36:40 - okay
36:41 - one minute
36:44 - okay so where we are uh I told you that
36:47 - one mistake is there inside this code
36:48 - that is we are checking this case case
36:51 - for the capital letter set is capital a
36:52 - capital a Capital C D and E and what if
36:55 - the user is entering this small small
36:58 - letters okay so that is a b c d e uh
37:05 - because this switch switch is comparing
37:07 - that case using the Sky asci value of
37:11 - that characters okay so the Sky value of
37:13 - the capital A and as a capital small a
37:17 - are different so that's why user will
37:19 - doesn't know what is happening why the
37:22 - code is not getting run for the case
37:24 - number a because either I entered the
37:27 - small letters okay instead of entering
37:30 - this capital letter so this is the
37:32 - problem
37:33 - so what we can do whether the user will
37:36 - enter that characters in in a small
37:38 - letter or the capital letter and we are
37:41 - showing that inside the option option
37:42 - variable we will convert that input into
37:46 - capital letters okay so what we can do
37:49 - is there is one uh inbuilt class inside
37:52 - Java which is character and which has
37:54 - one function that to
37:57 - upper case and this will accept one
38:00 - character and which is which character
38:02 - is options okay
38:04 - so what this will do let me just
38:07 - increase the font size so that you can
38:08 - see clearly
38:10 - this will uh get that options input from
38:14 - this option and it will conver apply the
38:17 - two uh apply not apply it will pass that
38:21 - options or the letter whether it is in a
38:25 - small or capital letter
38:27 - to the upper case method and uppercase
38:29 - method will return the capitalize form
38:33 - of that character okay so let me just
38:35 - show you this implementation of this
38:38 - here you can see the public static
38:40 - method Etc inside the Java this is the
38:42 - document uh inbuilt methods which are
38:45 - written inside the Java and here you can
38:46 - see what we what it is returning it is
38:48 - returning to uppercase of that character
38:52 - okay
38:53 - so I guess this will remove the problem
38:57 - that we have inside our application
38:59 - and let me just okay so now I guess we
39:04 - have done all the part that we have we
39:07 - want to do inside our bank account class
39:10 - and we have implemented all the
39:12 - functionalities inside this and now we
39:15 - have to run this and we know from uh
39:18 - where our program will get executed
39:21 - inside this main method okay so inside
39:24 - that this is class banking application
39:26 - and this is class bank account so both
39:28 - classes are different and all our
39:30 - functionalities are written inside this
39:31 - bank account class and we now we have to
39:35 - tell this Bank application class that
39:37 - there is a bank account class is there
39:39 - and we have to create one object of that
39:41 - class okay so how to create the object
39:43 - of the class
39:44 - we will simply write bank account don't
39:48 - worry for time being just remember uh be
39:52 - with me uh I will cover all those
39:54 - classes first class object inside all
39:56 - upcoming queries inside that oops
39:58 - Concepts okay a bank account and we will
40:01 - give a name to the object okay so let me
40:04 - just write
40:06 - as Bank One whatever you can you can
40:10 - simply give your name also okay overages
40:13 - it doesn't make any sense okay but
40:16 - normal convention is that you should
40:19 - give object name as
40:21 - so that's you can understand by looking
40:25 - at the object name what we have done
40:27 - inside this okay so we'll create a new
40:30 - bank account
40:32 - and here you can see intelligent idea is
40:35 - telling me that this
40:37 - object will require one two parameter
40:41 - that is C name and CID so I have in the
40:44 - previous videos I have told you that
40:46 - this is the Constructor which accepts a
40:48 - c name and CID and I have told you that
40:51 - whenever you create an object of the
40:53 - class it it calls the Constructor of the
40:57 - class and we have written our
40:58 - Constructor over an error discussion to
41:00 - accept the two parameters so that's why
41:03 - we have to give two parameters to this
41:06 - program so let me just give the customer
41:09 - name as xyl you can give your name also
41:12 - as a customer name if you want
41:14 - and again
41:17 - second parameter is CID
41:20 - so let's suppose customer ID is
41:24 - let's suppose one
41:27 - zero one okay this is the customer ID
41:31 - okay uh
41:32 - this is pretty much that we have to do
41:35 - and
41:37 - we can now the object is created for
41:39 - that class name bank account okay so
41:42 - using that object we can call any method
41:45 - written inside the bank account class
41:48 - okay so what whatever written inside
41:50 - this is why deposit void withdraw void
41:53 - Gateway send action world show menu so
41:56 - one thing you tell me or you you decide
41:59 - which method I can call so that all the
42:02 - functionality of our application will be
42:05 - done inside that
42:06 - so I think there is only one method
42:09 - which uh which is there show menu method
42:12 - and which will Implement all these
42:16 - functionalities of our application here
42:18 - itself okay so I will call that method
42:22 - using the object name so for calling
42:25 - that method we will write object name
42:28 - that is bank 1 Dot
42:31 - now you can see show menu is there so
42:34 - many okay
42:35 - so this will call that show menu uh
42:38 - method okay inside this okay so I guess
42:41 - this is pretty much that we have to do
42:43 - inside this project so I hope
42:46 - and this will run let me just run this
42:51 - okay it's running and now here you can
42:53 - see it is asking me the enter the number
42:55 - of terms you want
42:57 - in the series uh wait
43:02 - I guess this running the previous
43:07 - sorry sorry guys this is running the
43:09 - previous class Java class I guess and
43:12 - now I have to run this Java class itself
43:14 - ah yes now see here you can see welcome
43:17 - XYZ your ID is zero one how this is
43:20 - doing uh we are passing x y z and zero
43:23 - one to this class Constructor and this
43:26 - Constructor is assigning that c name and
43:28 - CID value to the customer name and
43:30 - customer ID is over here okay and those
43:32 - customer IDs and customer name are
43:35 - getting printed in on the console here
43:36 - customer name and custom ID so I hope
43:38 - you guys are getting this
43:40 - and now it is asking for the option uh
43:43 - so let's suppose we have to check the
43:44 - balance and deposit the balance and
43:45 - withdraw the previous transaction okay
43:47 - so we'll go one by one okay I will type
43:50 - A
43:51 - okay so we will check first of all let
43:54 - me check the error that we have
43:55 - rectified over here okay if I give small
43:58 - a and if I hit enter the check button
44:01 - should be there so heat was selling
44:02 - invalid option should be invalid option
44:04 - is there uh because I guess this is not
44:08 - working here
44:10 - all right why it is not working I don't
44:13 - get it okay let it be uh I will Rectify
44:16 - this error and let you know in the
44:18 - upcoming videos okay uh for time now
44:21 - being we will give the capitalized
44:23 - inputs to the other application okay
44:24 - capital a
44:26 - so now here you can see balance is zero
44:28 - it's showing balance is zero because we
44:30 - don't have any uh done uh deposit or
44:33 - withdrawal from our account and
44:35 - initially the value of the balance
44:37 - variable that we have declared over here
44:40 - is
44:41 - 0 okay that's why it is printing 0 in
44:45 - this
44:46 - console okay
44:49 - uh okay now let me just increase the
44:52 - size of the console uh and now if I do B
44:55 - B what is the B deposit uh enter the
44:58 - amount that you want to deposit let's
45:00 - suppose I have to deposit 1000 rupees or
45:02 - thousand dollars in my account okay and
45:04 - then if I hit enter
45:07 - uh now 1000 rupees or thousand dollars I
45:10 - uh deposited in my account now if I do
45:13 - option A that is view balance now here
45:17 - you can see balance is thousand
45:18 - previously it was telling that balance
45:20 - is zero now the balance is 1000 okay
45:23 - uh one second guys
45:29 - so now we have checked the balance that
45:32 - is 1000
45:33 - so we have implemented the check balance
45:36 - and deposit now if I want to withdraw
45:38 - money from my account I have to give
45:40 - input as C
45:42 - P America C and uh
45:49 - okay now it suppose not thousand five
45:53 - hundred and now if I check the balance
45:55 - for checking balance um balance is
45:58 - hundred and now at last I want to check
46:01 - the previous suggestion that I have done
46:03 - d
46:05 - so here you can see if I type D
46:07 - withdrawn 500 that is the thing that I
46:10 - have done previously
46:12 - so that is withdrawal for the 500 from
46:15 - the account okay
46:17 - so I guess we have implemented all those
46:20 - checks now at last I have to implement e
46:25 - if I press enter
46:27 - now here you can see process finished
46:29 - with exit code 0 that is our code will
46:32 - get
46:33 - ended and you will get out of this main
46:37 - method okay so this is pretty much about
46:40 - this project I hope you have enjoyed
46:41 - this project and you know upcoming
46:44 - tutorial series we will be starting
46:46 - oops concept from the
46:49 - onwards videos okay thank you for
46:51 - watching this video

Cleaned transcript:

so so I guess this is the right time to begin our project our project number one is a simple banking application okay so till now we have covered only the loops uh some basic basic concepts of the Java and we are not right now uh Deep dive into the oops concept and that will be doing after this project once we complete this project so this project is simply a console based project uh so no GUI into the interaction will be there in this project once we move into the advanced section of the Java where we'll be seeing some Java applets or swing there we can convert this project into the GUI based project okay so so for till now uh I will be doing all this stuffs inside the console okay so for this I have plan what I have planned I will write down the points URL so first we will display a one welcome welcome message to the user okay welcome message to user okay so that is our the first first call okay and okay and then let me just get here okay for second number oh second will be looking into the give me a we are giving five options to the user okay so first option will be uh something known as deposit where user can deposit the money inside this bank account okay and then after that the third option second option will be something known as withdraw okay where user can withdraw the money from his account okay then the third uh feature we will be carrying is get previous transactions okay so here in this feature uh user will uh get to know what what is this previous times the actions what you have done in the past transaction okay and uh again one more feature is there that is not not a feature it it basically uh your menu which shows to the user okay so here we are showing the menu to the user according to that by seeing that when new user will give input to our program and program will behave according to that input okay so when to the user okay and uh at last we will execute execute our code okay so these are some steps that we will be following uh following inside this project okay at first user came and see the welcome message okay and then based on the user input we'll be performing some functions okay that is deposit withdraw that previous and vaccine show the menu and execute our code okay so I hope you understand the overview of the project so let me just get into into my IDE and I will creating the new class name as banking application oops sorry linking application okay and let me increase the font size yes and I will include my public static wall with me okay and inside main uh this project required input from the user so that's why I had to import the scanner class also and I will be using this new keyword scanner so system Dot in so okay basic stuff now I know we have the not covered started oops concept so that's why you will at some point you will not get some concept so bear with me I will be telling you what those concepts are okay so this is pretty much about the setup okay and now since we are doing all this uh let me show you all this deposit with action show menu and execute our code all this functionality in a one place so I guess this is the right time to introduce you with the oops concept known as method okay so I will oops of method and class okay so I will create another class known as the banking uh bank accounts which is more appropriate I guess AWC over your bank account okay okay so this is nothing but I have created one another class name as bank account where I will be covering all those functionality in inside this class and we will create one object of this blank bank account class inside this banking application class okay uh oops I have written this class inside class that is okay now it's okay okay so this is one class our public class and inside which our main method is there and this is another class where we'll be covering all these functionalities which are required in our uh project okay so inside this uh I will show you how this class and objects steps are created so bear with me and for first uh functionality of our project is deposit so we will be covering that first okay for so you you so you are pretty much aware about this for depositing the value uh something money inside our account we we need one variable which is known as balance because we are updating that balance after deposit occurs inside our account okay and we will require another variable normal name as previous transaction which will hold the value value and the information about the transaction that happened in inside past recently okay so I will be creating those two variables name as balance and another one as previous transaction okay and now I will create one method uh so this method doesn't return anything so that's why I have written void uh I know you are not getting some concept what is wired what is ain't okay not in in you know what is it is right and void and my method name is deposit okay and my method is going to accept one way when when parameter that is amount okay amount so method is nothing but one particular instruction of the lines of codes which will execute uh which will you will require again and again for the execution and then those setup instruction you are right inside of one method and you will call that method again and again to perform that task okay so we will be covering in depth about the methods what are the types in the oops concepts for but for now uh you know you know what is methods okay uh we will be creating one method known as deposit and inside that method I will be writing now uh if I want to deposit my money I have to check uh whether my amount that is uh given by the user and this is the parameters that this method will be accepting this method will accept amount that which is given by the user to deposit inside a bank account okay so I will be checking whether my amount is not equals to 0. okay so this uh if the user user inputs a given input as zero so that doesn't make sense because 0 cannot be added inside the bank account okay that doesn't make any sense so we are checking on base basically base condition over here whether my amount amount which is a given input by the user should not be equals to the zero okay if it is not equal to 0 this uh if condition is evaluated at true and inside that uh I will update my balance okay so my I will tell balance is equal to Plus amount okay I will update my balance variable and I will have also updated my previous transaction variable as amount okay and so that tells that my previous transaction which then by the user is the amount that means the deposit to the bank account okay so this is pretty much about this and of the project okay so in this video we'll be discussing about the functionality which is withdraw and the get previous transaction so we will be implementing the two methods so for the one method is for the Vedra and one method is for the previous transactions okay so I hope you have watched the previous videos where we will be implemented our deposit function method and now in this video we'll be covering our withdraw and get previous transaction functionality okay so okay before we get into code think about it uh whenever I want to withdraw some money from my account got changes and first of all what I have required as the input to this method okay so let's think about it so for this I will be requiring one amount that is the amount of money that I want to withdraw from my account so the amount is the parameter which will be passing through the withdrawal functions and again one base condition should be there okay so think about it one what what will be the best condition again the same base condition uh like we have done for the deposit method that is amount should not be equal to the zero because deposit depositing the zero rupees or the zero dollars from an account doesn't make any sense okay so we'll be implementing that also and I guess this is a bit pretty much stuff that we have you want to do inside the withdrawal function okay so let's just get and implement this we draw method okay since our method is doesn't returning anything that's why the return type should be avoid uh void avoid is the return type there are many different types as such as int uh care strings are there uh method is doesn't returning anything it it is just performing some basic math calculation and it will returning some value to the user okay not value it is performing some task okay so withdraw I will name this as withdraw and as we have discussed it will accept one parameter known as amount amount of money that we have to we draw a formal account okay and again one of the base condition should be base condition should be there that my amount should not be equals to the zero if it is equal to zero that doesn't make any sense okay and inside this uh I will update my balance because after we're drawing some money my when that amount that much amount of money should be deducted from a balance that for my account balance okay so balance minus amount okay and now after that I I also have to update my previous transaction as amount okay minus amount okay so I guess this is pretty much that we have to do inside the withdrawal functionality and after that we will be performing another functionality that is get previous transaction so this I have writing the previous generation previous and action we have to implement that method inside this class name as bank account okay and so since previous get previous transaction it doesn't return anything so that's why I will write void as the return type and I will write get previous transaction okay uh wait guys okay so sorry for the introduction guys okay so where we are avoid get previous transaction reaction okay so this method uh doesn't require any parameters and it doesn't return anything okay so inside this I will write one if condition if my previous standard action value is greater than 0. okay when the value will be uh will have to press the previous election will be greater than uh 0 when we have done any deposit uh in our account okay so in that case I will print deposited and I will concat it with previous interactions value okay and uh again one else if condition should be there to check else if my the value of the previous transaction it's less than zero in that case when we draw means one withdrawal should be there for my account so in that case I will write sorry with drawn be drawn the amount should be there and one thing I will do here is math Dot abstract okay and I will pass it to the value of the previous transaction so you'll ask me what we have done here what is this map.aps right and we are passing uh three ways of the actual value to it okay so this is the enable class inside the Java so here you can if you hover over the cursor over here you can see Java dot line language package inside which math class is there and one abs abs method should be there inside that math class if you if I click here and here you can see public static int areas so what this uh method does it will accept one parameter okay so as you here you can see it is accepting one parameter which is integer a and it is returning something uh in in format okay so what it does is uh since the value of the previous election is less than zero that is the negative one like minus something known as minus 50 or guess minus 400 so we don't want this values to be reflected in our console because negative values should not be there inside any account okay so we are doing this match dot abstract function and it will convert that negative value inside the positive to its corresponding positive value that is equal to it will convert the minus 50 x 50 and uh minus 400 as 400 okay so this is the work of the max dot abstracts abstract function okay or method uh then here I will write else if both the condition will not get satisfied in that case I will write no transaction is occurred no transaction it's upgrade okay so I guess this is pretty much about the previous transaction method where we will checking if the value is greater than zero that is a deposit deposit method is getting run inside our application and if the value is less than zero that is withdraw is done inside our bank account if nothing none of this statement get executed then else will execute and it will show that no transaction is occurred inside our account okay so this is pretty much about the withdraw and get previous function so today in this video we will be covering uh our next functionality of the project that is the show many projects so this is the main uh method which will hold the all uh functionality of our banking application it will call all those methods which you have uh which we have written in our previous videos that is withdraw our previous transaction and the deposit and it will perform all those functionality of our project I guess okay banking application okay so in this video we will be writing this show menu method okay so for this I will cover I will write another method name show menu and this may this method will doesn't require any parameter and it doesn't return anything okay yeah so inside this menu show menu show menu function where method will uh basically do all those printing part printing stuff inside that console okay so for that uh I will be carrying one uh declaring one character okay now so character variable name is option and I will initially write his ads slash Studio okay so that represents null okay again uh oh I I guess I have declared the scanner class over here so that is inside this main uh another class so I have to I guess I have to declare one scanner I guess scanner SC is equals to new scanner system dot in okay let's go I have imported this kind of over here and now uh I have to create that console step here okay now so I will just oops sorry I will just sound one thing that is to welcome Plus cost name so this time uh IntelliJ IDEA is telling me that hey what is customer name you have it doesn't have declare it anywhere okay so for that uh I will be creating one variable over here that is of type this is customer name so that is of type string because customer name is in string format and I will write same customer name and one more thing I will be requiring is as customer ID okay and I will also declare it as a spring customer ID Okay so whenever the object of this class is created uh I I want the user to give me the customer name and the customer ID so that I can print that name and the customer ID over here okay so for this one more concept was there of the book of oops object of object oriented programming language that is Constructor so what basically Constructor does is it will get automatically called whenever the object of the class is created okay whenever I create the object of the class the Constructor is getting called and the Constructor name should always base as same as that of the class name okay so what is the class name bank account and this Constructor should accept the two parameters that is the customer name and the customer ID so that we can print that customer name and customer ID inside the console okay and so the name should be in the format of string string names and I will write string CID that is the customer I okay don't worry about this Constructor for deal for just now uh know that whenever we create the object of that class the Constructor get automatically called okay so this line number 15 to 17 and inside this Constructor whatever I write it will get automatically called whenever we create object of this background class okay so whenever I create this uh update of this class I just want to assign the customer name uh as the C name which is given input by the C name by the user and I just want that customer ID should be equals to the CI okay so that is pretty much about this Constructor I guess and now we can move to the towards our show menu function and start again this okay so I will write again one South statement over you should be there and I will write your your ID is this and I will write customer ID okay so after this I want a new line should get painted on the console so for that I will write this out hit empty nothing should be there so that the new line should be there and which looks nice okay and again I want one option number a so we have discussed over here the options of that our application that is deposit we draw we address and reaction at the show menu okay so we will be covering that over here we will write check balance okay uh then again one more functionality should be there that is B Dot deposit if the user want to get put deposit some money inside this account and again C is retro withdraw and again one more shout man and now option number D to get the previous strand transaction okay and now last option if either want to get exit from this hour application you want our user to click key so that we can exit from our application and so now one thing you you should notice this show menu method show will display all the these steps inside the console okay and we don't want the user to get uh multiple times click on this run button run button and execute over this code again and again so we can what we can do is we can provide one uh Loop to the user wherein user can look iterate or iterate this functionalities or use this functionalities again and again as much time you want and whenever a user has done with all the application uses and then simply user can type e to exit from our application okay so for this I will be using one do while loop and inside do I will just first of all I will print one statement so it will look nice okay and then one more sound statement should be there which will tell the user to enter the option okay enter the option and after that one more sub statement should be there this line number 60 and line number 62 is just you for the getting the console such a nice look okay and after that I will be doing option is equals to scan s is the object sorry SC Dot next Dot carat index 0. and I will be doing two I guess I can't do this here and let it be we will cover in the next upcoming video so in this way in this part I have taken one uh input from the user at the string and I will be returning the first character of that string okay uh so I have declared here the character as a layer of option and I'm storing that user input inside this option and so user can input e d e c a b a b c d e any option that you either want that gets stored inside this option variable okay so now inside this I will create one switch and so for switch I will be passing option as the parameter so we have covered switch I hope you guys remember this how switch works and how what is switch okay so we'll be carrying one case for first case we will be passing a we will be writing the functionality if the user clicks a that is the check balance okay for that I will come inside this case and I will first of all print this line okay so this line is basically just to give that nice look to our application okay so again inside that I will write Sound system.out.pin Table and I will simply print balance it's and I will contact it with balance okay and at last I will be printing again this just to give our application a nice look and I will print one sub statement so that one extra line should be there between the switch next case okay so after that this is pretty much about the check balance I will just write foreign but the next case we have case number B if these are given as B and I will just copy this statement over here just to give it oops sorry copy oh sorry guys me okay and what is the BP part uh B part is the deposit okay so when the user gives input as B we have to deposit the amount inside our account okay so it's out go either enter the amount to deposit okay so after this I will again print this line so that it will look nicer in our application okay now what I can do is int amount I will declare one variable nameless amount and using strot next end I will receive that in input from the user and I will call deposit method inside this and we will pass that amount value to the deposit function deposit method okay and after that I will just print One new line and I guess that that is pretty much we have to do inside this case number B right so what I have done uh and printed this on the console and I have taken one input from the user and showed it inside the amount variable and I have passed that amount variable to the deposit method and we have written this deposit method over here here you can see and this deposit method will update the balance of the in our account and update the previous transaction value also okay so after that moving forward to the case number c k c okay so what is Case C withdraw okay so we have to implement the withdrawal functionality over here so I will just simply uh copy this and paste code paste it over here enter the amount to withdraw okay after that again I will create one variable name amount two because amount is declared above already declared about SC Dot next int and for doing the withdraw stuff we have written one method withdraw and we will accept one parameter name is amount so we are passing that amount that that this should be withdraw from our account and then again I will simply just print a new line so that it looks nice in the console and I guess this is pretty much we have to do inside this case okay so our next case is case D and let me just look what we have to do AST that is the previous time the action uh we have to perform the previous time vaccine inside this case and again I will just copy this because this is step that I required every time okay and inside this I don't require this because I don't need to print anything inside the console or getting input from the user that's why and inside this I will call the get previous transaction method and this call will be uh go to here to a this method get creation reaction and this method will check this condition and according to that it will print that corresponding statement okay over here so okay so I guess this is the pretty much we have to do inside this case and after that I will just print One new line and I will break this condition okay now I have to write again one more condition that is the E condition that is in exit condition what if the user write e okay so in that case user want to get exit from this Loop so they will simply just print this statement and after this statement we will do break okay and this is all we have handled all those cases and we will sorry one default case which will handle and inside default case uh we should do print something like when we'll get a default condition get hit when the user will enter uh doesn't enter a b c d e and other characters okay so in that case we just have to print invalid option please try again okay and I will simply create this okay so I guess this is pretty much we have to do insert the switch okay so we have implemented this switch after that I will write while because this is this do while loop and inside while I will check the options value should not be equals to character P because if it is a e that that means user don't want to use our application anymore any more and you don't want to exit our phone or application okay so this is pretty much about the show menu I guess we have done let me just zoom out so that you can see whole method inside one View okay I guess this is and one one pretty simple mistake was there inside this method I want you to think about it and let me know today we are containing our project number one that is banking application and in this video we will finishing it okay so in our previous video we have discussed about the show menu functionality of our application and I have to told you over there when there is mistake is there inside this method that is what if we are checking the cases for the this letter that is uh capital letters capital a capital b capital c capital D and the capital E okay one minute okay so where we are uh I told you that one mistake is there inside this code that is we are checking this case case for the capital letter set is capital a capital a Capital C D and E and what if the user is entering this small small letters okay so that is a b c d e uh because this switch switch is comparing that case using the Sky asci value of that characters okay so the Sky value of the capital A and as a capital small a are different so that's why user will doesn't know what is happening why the code is not getting run for the case number a because either I entered the small letters okay instead of entering this capital letter so this is the problem so what we can do whether the user will enter that characters in in a small letter or the capital letter and we are showing that inside the option option variable we will convert that input into capital letters okay so what we can do is there is one uh inbuilt class inside Java which is character and which has one function that to upper case and this will accept one character and which is which character is options okay so what this will do let me just increase the font size so that you can see clearly this will uh get that options input from this option and it will conver apply the two uh apply not apply it will pass that options or the letter whether it is in a small or capital letter to the upper case method and uppercase method will return the capitalize form of that character okay so let me just show you this implementation of this here you can see the public static method Etc inside the Java this is the document uh inbuilt methods which are written inside the Java and here you can see what we what it is returning it is returning to uppercase of that character okay so I guess this will remove the problem that we have inside our application and let me just okay so now I guess we have done all the part that we have we want to do inside our bank account class and we have implemented all the functionalities inside this and now we have to run this and we know from uh where our program will get executed inside this main method okay so inside that this is class banking application and this is class bank account so both classes are different and all our functionalities are written inside this bank account class and we now we have to tell this Bank application class that there is a bank account class is there and we have to create one object of that class okay so how to create the object of the class we will simply write bank account don't worry for time being just remember uh be with me uh I will cover all those classes first class object inside all upcoming queries inside that oops Concepts okay a bank account and we will give a name to the object okay so let me just write as Bank One whatever you can you can simply give your name also okay overages it doesn't make any sense okay but normal convention is that you should give object name as so that's you can understand by looking at the object name what we have done inside this okay so we'll create a new bank account and here you can see intelligent idea is telling me that this object will require one two parameter that is C name and CID so I have in the previous videos I have told you that this is the Constructor which accepts a c name and CID and I have told you that whenever you create an object of the class it it calls the Constructor of the class and we have written our Constructor over an error discussion to accept the two parameters so that's why we have to give two parameters to this program so let me just give the customer name as xyl you can give your name also as a customer name if you want and again second parameter is CID so let's suppose customer ID is let's suppose one zero one okay this is the customer ID okay uh this is pretty much that we have to do and we can now the object is created for that class name bank account okay so using that object we can call any method written inside the bank account class okay so what whatever written inside this is why deposit void withdraw void Gateway send action world show menu so one thing you tell me or you you decide which method I can call so that all the functionality of our application will be done inside that so I think there is only one method which uh which is there show menu method and which will Implement all these functionalities of our application here itself okay so I will call that method using the object name so for calling that method we will write object name that is bank 1 Dot now you can see show menu is there so many okay so this will call that show menu uh method okay inside this okay so I guess this is pretty much that we have to do inside this project so I hope and this will run let me just run this okay it's running and now here you can see it is asking me the enter the number of terms you want in the series uh wait I guess this running the previous sorry sorry guys this is running the previous class Java class I guess and now I have to run this Java class itself ah yes now see here you can see welcome XYZ your ID is zero one how this is doing uh we are passing x y z and zero one to this class Constructor and this Constructor is assigning that c name and CID value to the customer name and customer ID is over here okay and those customer IDs and customer name are getting printed in on the console here customer name and custom ID so I hope you guys are getting this and now it is asking for the option uh so let's suppose we have to check the balance and deposit the balance and withdraw the previous transaction okay so we'll go one by one okay I will type A okay so we will check first of all let me check the error that we have rectified over here okay if I give small a and if I hit enter the check button should be there so heat was selling invalid option should be invalid option is there uh because I guess this is not working here all right why it is not working I don't get it okay let it be uh I will Rectify this error and let you know in the upcoming videos okay uh for time now being we will give the capitalized inputs to the other application okay capital a so now here you can see balance is zero it's showing balance is zero because we don't have any uh done uh deposit or withdrawal from our account and initially the value of the balance variable that we have declared over here is 0 okay that's why it is printing 0 in this console okay uh okay now let me just increase the size of the console uh and now if I do B B what is the B deposit uh enter the amount that you want to deposit let's suppose I have to deposit 1000 rupees or thousand dollars in my account okay and then if I hit enter uh now 1000 rupees or thousand dollars I uh deposited in my account now if I do option A that is view balance now here you can see balance is thousand previously it was telling that balance is zero now the balance is 1000 okay uh one second guys so now we have checked the balance that is 1000 so we have implemented the check balance and deposit now if I want to withdraw money from my account I have to give input as C P America C and uh okay now it suppose not thousand five hundred and now if I check the balance for checking balance um balance is hundred and now at last I want to check the previous suggestion that I have done d so here you can see if I type D withdrawn 500 that is the thing that I have done previously so that is withdrawal for the 500 from the account okay so I guess we have implemented all those checks now at last I have to implement e if I press enter now here you can see process finished with exit code 0 that is our code will get ended and you will get out of this main method okay so this is pretty much about this project I hope you have enjoyed this project and you know upcoming tutorial series we will be starting oops concept from the onwards videos okay thank you for watching this video
