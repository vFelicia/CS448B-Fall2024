With timestamps:

00:00 - hey guys in this video i'm going to show
00:02 - you how you can set up the support for
00:04 - python on visual studio code on your
00:07 - windows operating system
00:10 - so i'm assuming that you have already
00:12 - installed visual studio code and python
00:15 - on your windows operating system
00:17 - if you don't know how to install visual
00:19 - studio code or python i will provide the
00:23 - link of those videos in the description
00:26 - so you can watch those videos and then
00:29 - come to this video right
00:31 - so once you already have python and
00:35 - visual studio code on your windows
00:37 - operating system we are ready to go
00:40 - so first of all we can check the version
00:42 - of python for example so just write cmd
00:46 - on your terminal
00:47 - and if you have a python installed then
00:51 - this python
00:52 - version command is going to give you the
00:55 - version of python in my case it's
00:58 - 3.10.0
00:59 - in your case it can be different
01:01 - depending on when you have installed
01:04 - python on your windows operating system
01:07 - as you can see i also have visual studio
01:09 - code
01:11 - now let me open the terminal once again
01:13 - and let me
01:14 - just start from the basics so i'm
01:17 - assuming you are totally new and you
01:19 - just want to create the first python
01:22 - project in your visual studio code and
01:25 - debug it and run it
01:27 - and then use
01:29 - python script inside your visual studio
01:32 - code
01:33 - so let's say i want to create a folder
01:37 - which will be my project folder on the
01:39 - desktop right so i'm going to just cd
01:44 - to
01:44 - the desktop here in my command prompt
01:47 - and then press enter
01:49 - and here i can create a folder let's say
01:53 - i want to create a folder named
01:56 - work so i can just type mkdir command
01:59 - which is uh the
02:01 - command line option to create a folder
02:04 - in your command prompt on windows
02:06 - operating system
02:07 - and then the name of your folder so
02:09 - let's say in my case i want to create a
02:11 - work directory on my desktop
02:15 - so i can just press enter
02:17 - and you can see this directory is
02:19 - created
02:20 - i will cd into this directory
02:23 - and then press enter once again so now
02:25 - i'm in my work directory and let's say
02:28 - here i want to create all the python
02:31 - script for my project
02:34 - so now here i can just type code space
02:37 - dot
02:39 - and then press enter which is going to
02:41 - open my work directory
02:44 - in visual studio code you can see the
02:46 - name of the directory here
02:49 - this name will always appear in capital
02:51 - letters so if you are wondering you have
02:54 - created this directory in all small
02:57 - letters but this directory is created in
03:01 - capital letters
03:02 - here on visual studio code you will
03:04 - always see the directory name in in all
03:07 - capital letters so now let's create a
03:09 - python file you can create a python file
03:11 - by just right clicking on
03:14 - the
03:14 - explorer here or you can click on this
03:17 - option which says
03:19 - new file or you can create the file
03:22 - by just clicking on the file and then
03:24 - click on new file so whatever option is
03:26 - easier for you just use that option and
03:29 - then just create your python file i'm
03:32 - going to name my file as
03:34 - test dot py and then press enter
03:37 - now as soon as i create a python file
03:42 - visual studio code is going to recognize
03:44 - that i want to create python projects or
03:48 - python scripts
03:49 - and it's going to give me the suggestion
03:51 - for installing the extension for python
03:54 - you can see do you want to install the
03:56 - recommended extension for python
03:59 - you can click on the install button
04:01 - which is going to install the support
04:03 - for python
04:04 - otherwise what you can do you can click
04:07 - on the extensions icon here
04:10 - and then it's going to show you the list
04:12 - of all the popular extensions
04:14 - and you can also search for the
04:15 - extensions so let's say i want the
04:17 - python extension so i will type python
04:19 - here
04:20 - and
04:21 - it's going to show me all the extensions
04:24 - related to python
04:26 - now you will also see these options are
04:29 - sorted by their popularity right
04:32 - so you can see the number of downloads
04:35 - for this first option is 48 million then
04:38 - 3.8 million then 2.6 million so i'm
04:42 - going to select the first option because
04:44 - it's mostly used
04:46 - here you can see who has developed this
04:49 - extension so it's developed by microsoft
04:51 - that's good because visual studio code
04:54 - is developed by microsoft so
04:56 - this will be the best extension for the
04:59 - support of python
05:01 - and then i can also see the ratings here
05:04 - and the number of downloads once again i
05:06 - can click on the install button which is
05:09 - going to install this extension
05:12 - which in turn is going to add the
05:15 - support for python in visual studio code
05:18 - so once this extension is installed you
05:22 - will be able to see these two options
05:24 - here you have the option to uninstall
05:26 - this uh extension and you have the
05:28 - option to disable this extension so if
05:30 - in future you want to develop let's say
05:33 - java or some other language you can
05:36 - maybe disable python support or totally
05:39 - uninstall it using these two options
05:42 - you can also uh just scroll down and
05:45 - read how you can use this extension
05:48 - right
05:48 - so once this extension is installed
05:51 - then
05:52 - we are ready to write some code also you
05:55 - will observe so let me just move to the
05:57 - explorer
05:59 - you will observe here your python
06:02 - interpreter right
06:03 - so as you might have seen
06:07 - i have python
06:09 - 3.10.0 installed
06:11 - so visual studio code is going to
06:13 - recognize
06:14 - my python interpreter and it's going to
06:17 - show this interpreter here if i have
06:21 - multiple versions of python installed or
06:24 - if i have python installed in multiple
06:26 - places on my windows 11 operating system
06:29 - then visual studio code is going to
06:31 - recognize that and it's going to show
06:33 - all these options here so when i click
06:35 - on this interpreter option i have only
06:38 - one
06:39 - python installation which is recognized
06:41 - by visual studio code
06:42 - but if i have multiple installation and
06:45 - multiple versions of python i will be
06:48 - able to select a particular interpreter
06:52 - for my python script if i have anaconda
06:55 - installed then also i will be able to
06:57 - see the
06:59 - anaconda related
07:01 - options here so you can choose the
07:03 - interpreter from here
07:05 - also when you type control shift p you
07:09 - will be able to see this kind of search
07:12 - bar
07:13 - here when you type
07:14 - python you will be able to see all these
07:18 - options
07:19 - related to python so you can see create
07:21 - a terminal configure tests
07:23 - debug python file enable disable linting
07:27 - go to python object
07:29 - so you can see
07:30 - you have all the options here on this
07:33 - command palette here so you can search
07:36 - all the options related to
07:38 - python
07:40 - now
07:41 - if you want to open
07:43 - the integrated terminal to just run your
07:46 - script you have this option which says
07:48 - terminal and then when you click on new
07:51 - terminal
07:52 - it's going to open the terminal inside
07:55 - the visual studio code
07:57 - and you will be able to see which
07:59 - terminal is opened so you can see it's a
08:01 - powershell terminal you can also see
08:03 - this here if you want to open the
08:05 - command prompt and not powershell you
08:07 - can just choose it from here so you can
08:09 - click here and then click on command
08:11 - prompt and it's going to open the
08:13 - command prompt and you will be able to
08:15 - see the list of all the
08:17 - command prompter terminal which are
08:20 - opened on your visual studio code now
08:22 - let me add a very simple python script
08:25 - here which have two numbers and
08:28 - i'm just comparing them using if
08:31 - statement so once you have your script
08:33 - you have multiple options to run your
08:36 - script so you can right click on the
08:38 - same editor in which you are writing
08:40 - your code
08:41 - and then you can see you have this
08:44 - option to run a python file in the
08:46 - terminal
08:47 - you also have the
08:49 - run current file in the interactive
08:51 - window so you have all these options
08:53 - here
08:54 - also you have this run button which is
08:57 - going to run your python file or if you
09:00 - are a fan of command prompt or terminal
09:02 - then you can directly type your command
09:06 - for example python
09:07 - and then the name of the file which is
09:09 - going to run your
09:11 - python script in this terminal so let's
09:14 - say i'm going to choose this option to
09:16 - run my python script i'm going to press
09:19 - this button you can see my python script
09:22 - is executed
09:23 - and the result is here right so it's
09:27 - going to uh just select the
09:29 - interpreter from here and then the
09:31 - complete path of the file and it's going
09:34 - to run
09:35 - this file and then give you the out
09:38 - let's say i want to just uh run this
09:40 - script using terminal i can just type
09:42 - python here and then
09:44 - the name of the file which is test dot
09:46 - py and it's going to give me the output
09:49 - which is a lot cleaner than using this
09:53 - terminal because it's going to show you
09:56 - all the complete parts of the python
09:58 - executable and your file right so
10:01 - whatever option seems to be useful for
10:03 - you you can use that option now let's
10:05 - say you ran your python script and let's
10:08 - say you want to debug your python script
10:10 - so you can
10:12 - just go to your script and then add the
10:15 - breakpoint
10:16 - on your python script
10:19 - using
10:20 - these red dots right so you can just
10:22 - hover over the line on which you want to
10:24 - set the breakpoint and then just click
10:27 - there and you will see
10:29 - this kind of red
10:30 - dot here that means the breakpoint is
10:33 - set on the third line
10:35 - now on the left hand side you have this
10:38 - debug and run icon here so you can click
10:42 - on debug and run
10:44 - and here at the bottom you will be able
10:46 - to see all break points uh you have set
10:49 - so right now i only have one breakpoint
10:52 - i can set multiple breakpoints here and
10:54 - i will be able to see the list of all
10:56 - the breakpoints here
10:58 - from here i can disable all the
11:00 - breakpoints by just clicking on this
11:02 - icon which means all the breakpoints are
11:05 - there but they are disabled right
11:08 - if i want to remove all the breakpoints
11:10 - i can click on the remove all
11:12 - breakpoints icon here and it's going to
11:15 - remove all the breakpoints so let me add
11:17 - the breakpoint once again
11:20 - now
11:21 - for the first time when you are
11:22 - debugging your python script
11:26 - when you click on the debug uh
11:29 - icon here you will see this run and
11:32 - debug button here and also you will see
11:35 - uh this option which says to customize
11:37 - run and debug you can create a launch
11:42 - dot json file so here you will be able
11:44 - to customize
11:46 - your debug file for example which
11:48 - debugger you want to use for your
11:51 - debugging which python interpreter you
11:54 - want to use which file you want to
11:57 - use for debugging so all these options
12:00 - you can
12:01 - give in the launch.json file
12:04 - let me just click on run and debug
12:06 - option
12:07 - which is going to give me all these
12:09 - options i want to choose the first
12:11 - option which is python file
12:13 - and once i click on that
12:16 - i will be able to see that my debugger
12:18 - is running
12:20 - and my program execution will stop at
12:23 - the break point here so you can see
12:26 - my execution is stopped at the break
12:28 - point
12:29 - i can see all the debugging related
12:32 - options here so when i click on this
12:34 - continue button my
12:36 - program will run normally
12:39 - i can just
12:41 - step over i can step into a function i
12:44 - can come out of the function and i can
12:47 - rerun my debugger using this option and
12:49 - i can stop this debugger using this icon
12:53 - here right
12:54 - when you see this pink kind of bar here
12:59 - that means your debugger is running
13:01 - right
13:02 - if you stop it
13:04 - you will see
13:05 - that this pink uh bar is gone right so
13:09 - this is kind of a trick uh to observe
13:13 - when your debugger is running or not
13:15 - right
13:16 - so let me rerun it once again you can
13:19 - see
13:21 - the debugger is running program
13:23 - execution is stopped at this breakpoint
13:26 - i will be able to see the list of all
13:27 - the local variables on the left hand
13:30 - side
13:31 - i can watch some variables let's say i
13:33 - want to watch a variable b
13:35 - i can just type b and then press enter
13:38 - and it's going to give me the value of
13:40 - the variable
13:42 - which i want to watch here
13:45 - i can also see the globals here so you
13:48 - can see all the global variable values
13:50 - are here
13:52 - and
13:53 - i can just step over right so i can just
13:58 - go to the next execution point and see
14:01 - what's happening in my script
14:03 - so this is how you can debug your script
14:06 - let me just stop the debugger
14:08 - i can once again go to my folder
14:10 - explorer now once you have added the
14:14 - python extension you will be able to see
14:17 - that
14:18 - the python
14:19 - intellisense is also there so when you
14:21 - type
14:22 - some letters
14:24 - of a method let's say it's going to show
14:26 - you all the
14:28 - methods which you can use uh related to
14:31 - what you have typed in
14:34 - your editor so when i type pri it's
14:37 - going to show me all the print related
14:39 - options right
14:40 - i can also when i just
14:43 - write one
14:44 - parenthesis it's going to complete that
14:47 - i can print the value of let's say b
14:50 - right
14:51 - so all the intellisense options are
14:54 - available for me once i have installed
14:57 - my
14:58 - python extension i can just save my
15:00 - script by just pressing ctrl s which is
15:03 - going to save my script now let's say
15:05 - you are an advanced user and you want to
15:07 - use a python virtual and
15:10 - in your project right
15:12 - so normally let's say whenever you want
15:15 - to uh install a python pip package you
15:18 - can do it directly but if you want to
15:19 - create a virtual env for your project
15:22 - you can also do it easily in visual
15:25 - studio code
15:26 - so let me create a new test file let me
15:29 - name it as test2.py
15:31 - and here in my test2.py i have this very
15:35 - simple
15:36 - python script which uses a package
15:39 - called be crypt right
15:42 - right now you can see this
15:44 - yellow squiggly a line here which says
15:47 - import decrypt could not be resolved
15:50 - because we haven't installed this
15:53 - package using pip on our
15:56 - project so let me just close all these
15:59 - terminals i just want to use one
16:01 - terminal which is the command prompt and
16:03 - let me uh
16:04 - clear this command prompt here right so
16:07 - in order to create a new virtual
16:09 - environment you can type
16:11 - this command so python hyphen m
16:14 - then
16:15 - v
16:16 - n and then
16:18 - n
16:19 - and then press enter
16:20 - which is going to create a new virtual
16:23 - end for us and you will be able to see
16:25 - uh this warning which says we noticed a
16:28 - new virtual
16:29 - environment has been created do you want
16:32 - to select it for the workspace folder
16:35 - so when i choose yes here see what
16:38 - happens when i choose yes
16:40 - you will be able to see this virtual env
16:43 - is listed here so with my python
16:46 - interpreter this end
16:48 - is also visible you can see and we end
16:52 - right so now i can choose between the
16:55 - virtual and also from this interpreter
16:58 - list okay so you can choose your virtual
17:01 - and also so to activate this virtual and
17:05 - i can give this command and then press
17:07 - enter which is going to activate my uh
17:10 - virtual end and you will be able to
17:12 - recognize using this so if you see
17:15 - the name end here then
17:18 - you have activated the virtual and so if
17:21 - you see the name of your virtual
17:23 - environment that means it's activated
17:26 - and then we can just install this
17:29 - package here
17:30 - so i can just write pip
17:32 - space hyphen q install bcrypt which is
17:34 - my package which i want to install and
17:37 - once i have installed this package
17:40 - you can see the squiggly line is gone
17:42 - that means i can
17:44 - just use this decrypter package in my
17:47 - script easily now right so now i can
17:50 - just uh type python command and then the
17:53 - name of the file which is test
17:56 - 2 dot p1 py right so that is test2.py
18:01 - and then press enter which is going to
18:03 - run this script and it runs successfully
18:06 - also when you are done you can just type
18:09 - deactivate which is going to deactivate
18:11 - your virtual environment so i can type
18:13 - deactivate and then press enter
18:16 - and now i'm in my normal command prompt
18:19 - also once you have created the virtual
18:21 - environment you will be able to see this
18:23 - directory here and right so
18:26 - all the configuration you will be able
18:28 - to see here and of course you will have
18:30 - the track of your files in your version
18:32 - control inside your visual studio code
18:35 - editor using the source control option
18:37 - so if you have installed git it's going
18:40 - to show you what changes you have made
18:42 - and it's going to help you to commit
18:44 - your code push your code pull your code
18:47 - from github or any other repository
18:49 - easily inside the visual studio code
18:53 - the last option which i want to show
18:54 - here is let's say you don't want to just
18:57 - run and debug you want to create a
18:59 - launch
19:00 - dot json file for debugging you can
19:02 - click on the create a launch dot json
19:04 - file
19:05 - and then click on python
19:07 - file and it's going to create this
19:09 - launch.json file so as i said so as i
19:12 - said you have the information about the
19:15 - console here the program which you want
19:17 - to run
19:19 - and then
19:20 - the request is here the type is
19:23 - python the name will be
19:25 - python current file and if you have
19:28 - created multiple
19:29 - debug files you will be able to choose
19:33 - those
19:34 - files or configurations
19:36 - using this uh list right and when you go
19:39 - to the explorer you will be able to see
19:42 - this
19:42 - uh launch.the json file which is created
19:45 - under dot vs code
19:48 - uh folder so this is a hidden directory
19:51 - and you will be able to change
19:53 - the content inside it using
19:55 - this launch dot json file
19:58 - so that's it for this video i hope you
20:01 - have understood the basics of getting
20:04 - started with python on visual studio
20:07 - code
20:08 - i hope you've enjoyed this video and i
20:09 - will see you in the next video

Cleaned transcript:

hey guys in this video i'm going to show you how you can set up the support for python on visual studio code on your windows operating system so i'm assuming that you have already installed visual studio code and python on your windows operating system if you don't know how to install visual studio code or python i will provide the link of those videos in the description so you can watch those videos and then come to this video right so once you already have python and visual studio code on your windows operating system we are ready to go so first of all we can check the version of python for example so just write cmd on your terminal and if you have a python installed then this python version command is going to give you the version of python in my case it's 3.10.0 in your case it can be different depending on when you have installed python on your windows operating system as you can see i also have visual studio code now let me open the terminal once again and let me just start from the basics so i'm assuming you are totally new and you just want to create the first python project in your visual studio code and debug it and run it and then use python script inside your visual studio code so let's say i want to create a folder which will be my project folder on the desktop right so i'm going to just cd to the desktop here in my command prompt and then press enter and here i can create a folder let's say i want to create a folder named work so i can just type mkdir command which is uh the command line option to create a folder in your command prompt on windows operating system and then the name of your folder so let's say in my case i want to create a work directory on my desktop so i can just press enter and you can see this directory is created i will cd into this directory and then press enter once again so now i'm in my work directory and let's say here i want to create all the python script for my project so now here i can just type code space dot and then press enter which is going to open my work directory in visual studio code you can see the name of the directory here this name will always appear in capital letters so if you are wondering you have created this directory in all small letters but this directory is created in capital letters here on visual studio code you will always see the directory name in in all capital letters so now let's create a python file you can create a python file by just right clicking on the explorer here or you can click on this option which says new file or you can create the file by just clicking on the file and then click on new file so whatever option is easier for you just use that option and then just create your python file i'm going to name my file as test dot py and then press enter now as soon as i create a python file visual studio code is going to recognize that i want to create python projects or python scripts and it's going to give me the suggestion for installing the extension for python you can see do you want to install the recommended extension for python you can click on the install button which is going to install the support for python otherwise what you can do you can click on the extensions icon here and then it's going to show you the list of all the popular extensions and you can also search for the extensions so let's say i want the python extension so i will type python here and it's going to show me all the extensions related to python now you will also see these options are sorted by their popularity right so you can see the number of downloads for this first option is 48 million then 3.8 million then 2.6 million so i'm going to select the first option because it's mostly used here you can see who has developed this extension so it's developed by microsoft that's good because visual studio code is developed by microsoft so this will be the best extension for the support of python and then i can also see the ratings here and the number of downloads once again i can click on the install button which is going to install this extension which in turn is going to add the support for python in visual studio code so once this extension is installed you will be able to see these two options here you have the option to uninstall this uh extension and you have the option to disable this extension so if in future you want to develop let's say java or some other language you can maybe disable python support or totally uninstall it using these two options you can also uh just scroll down and read how you can use this extension right so once this extension is installed then we are ready to write some code also you will observe so let me just move to the explorer you will observe here your python interpreter right so as you might have seen i have python 3.10.0 installed so visual studio code is going to recognize my python interpreter and it's going to show this interpreter here if i have multiple versions of python installed or if i have python installed in multiple places on my windows 11 operating system then visual studio code is going to recognize that and it's going to show all these options here so when i click on this interpreter option i have only one python installation which is recognized by visual studio code but if i have multiple installation and multiple versions of python i will be able to select a particular interpreter for my python script if i have anaconda installed then also i will be able to see the anaconda related options here so you can choose the interpreter from here also when you type control shift p you will be able to see this kind of search bar here when you type python you will be able to see all these options related to python so you can see create a terminal configure tests debug python file enable disable linting go to python object so you can see you have all the options here on this command palette here so you can search all the options related to python now if you want to open the integrated terminal to just run your script you have this option which says terminal and then when you click on new terminal it's going to open the terminal inside the visual studio code and you will be able to see which terminal is opened so you can see it's a powershell terminal you can also see this here if you want to open the command prompt and not powershell you can just choose it from here so you can click here and then click on command prompt and it's going to open the command prompt and you will be able to see the list of all the command prompter terminal which are opened on your visual studio code now let me add a very simple python script here which have two numbers and i'm just comparing them using if statement so once you have your script you have multiple options to run your script so you can right click on the same editor in which you are writing your code and then you can see you have this option to run a python file in the terminal you also have the run current file in the interactive window so you have all these options here also you have this run button which is going to run your python file or if you are a fan of command prompt or terminal then you can directly type your command for example python and then the name of the file which is going to run your python script in this terminal so let's say i'm going to choose this option to run my python script i'm going to press this button you can see my python script is executed and the result is here right so it's going to uh just select the interpreter from here and then the complete path of the file and it's going to run this file and then give you the out let's say i want to just uh run this script using terminal i can just type python here and then the name of the file which is test dot py and it's going to give me the output which is a lot cleaner than using this terminal because it's going to show you all the complete parts of the python executable and your file right so whatever option seems to be useful for you you can use that option now let's say you ran your python script and let's say you want to debug your python script so you can just go to your script and then add the breakpoint on your python script using these red dots right so you can just hover over the line on which you want to set the breakpoint and then just click there and you will see this kind of red dot here that means the breakpoint is set on the third line now on the left hand side you have this debug and run icon here so you can click on debug and run and here at the bottom you will be able to see all break points uh you have set so right now i only have one breakpoint i can set multiple breakpoints here and i will be able to see the list of all the breakpoints here from here i can disable all the breakpoints by just clicking on this icon which means all the breakpoints are there but they are disabled right if i want to remove all the breakpoints i can click on the remove all breakpoints icon here and it's going to remove all the breakpoints so let me add the breakpoint once again now for the first time when you are debugging your python script when you click on the debug uh icon here you will see this run and debug button here and also you will see uh this option which says to customize run and debug you can create a launch dot json file so here you will be able to customize your debug file for example which debugger you want to use for your debugging which python interpreter you want to use which file you want to use for debugging so all these options you can give in the launch.json file let me just click on run and debug option which is going to give me all these options i want to choose the first option which is python file and once i click on that i will be able to see that my debugger is running and my program execution will stop at the break point here so you can see my execution is stopped at the break point i can see all the debugging related options here so when i click on this continue button my program will run normally i can just step over i can step into a function i can come out of the function and i can rerun my debugger using this option and i can stop this debugger using this icon here right when you see this pink kind of bar here that means your debugger is running right if you stop it you will see that this pink uh bar is gone right so this is kind of a trick uh to observe when your debugger is running or not right so let me rerun it once again you can see the debugger is running program execution is stopped at this breakpoint i will be able to see the list of all the local variables on the left hand side i can watch some variables let's say i want to watch a variable b i can just type b and then press enter and it's going to give me the value of the variable which i want to watch here i can also see the globals here so you can see all the global variable values are here and i can just step over right so i can just go to the next execution point and see what's happening in my script so this is how you can debug your script let me just stop the debugger i can once again go to my folder explorer now once you have added the python extension you will be able to see that the python intellisense is also there so when you type some letters of a method let's say it's going to show you all the methods which you can use uh related to what you have typed in your editor so when i type pri it's going to show me all the print related options right i can also when i just write one parenthesis it's going to complete that i can print the value of let's say b right so all the intellisense options are available for me once i have installed my python extension i can just save my script by just pressing ctrl s which is going to save my script now let's say you are an advanced user and you want to use a python virtual and in your project right so normally let's say whenever you want to uh install a python pip package you can do it directly but if you want to create a virtual env for your project you can also do it easily in visual studio code so let me create a new test file let me name it as test2.py and here in my test2.py i have this very simple python script which uses a package called be crypt right right now you can see this yellow squiggly a line here which says import decrypt could not be resolved because we haven't installed this package using pip on our project so let me just close all these terminals i just want to use one terminal which is the command prompt and let me uh clear this command prompt here right so in order to create a new virtual environment you can type this command so python hyphen m then v n and then n and then press enter which is going to create a new virtual end for us and you will be able to see uh this warning which says we noticed a new virtual environment has been created do you want to select it for the workspace folder so when i choose yes here see what happens when i choose yes you will be able to see this virtual env is listed here so with my python interpreter this end is also visible you can see and we end right so now i can choose between the virtual and also from this interpreter list okay so you can choose your virtual and also so to activate this virtual and i can give this command and then press enter which is going to activate my uh virtual end and you will be able to recognize using this so if you see the name end here then you have activated the virtual and so if you see the name of your virtual environment that means it's activated and then we can just install this package here so i can just write pip space hyphen q install bcrypt which is my package which i want to install and once i have installed this package you can see the squiggly line is gone that means i can just use this decrypter package in my script easily now right so now i can just uh type python command and then the name of the file which is test 2 dot p1 py right so that is test2.py and then press enter which is going to run this script and it runs successfully also when you are done you can just type deactivate which is going to deactivate your virtual environment so i can type deactivate and then press enter and now i'm in my normal command prompt also once you have created the virtual environment you will be able to see this directory here and right so all the configuration you will be able to see here and of course you will have the track of your files in your version control inside your visual studio code editor using the source control option so if you have installed git it's going to show you what changes you have made and it's going to help you to commit your code push your code pull your code from github or any other repository easily inside the visual studio code the last option which i want to show here is let's say you don't want to just run and debug you want to create a launch dot json file for debugging you can click on the create a launch dot json file and then click on python file and it's going to create this launch.json file so as i said so as i said you have the information about the console here the program which you want to run and then the request is here the type is python the name will be python current file and if you have created multiple debug files you will be able to choose those files or configurations using this uh list right and when you go to the explorer you will be able to see this uh launch.the json file which is created under dot vs code uh folder so this is a hidden directory and you will be able to change the content inside it using this launch dot json file so that's it for this video i hope you have understood the basics of getting started with python on visual studio code i hope you've enjoyed this video and i will see you in the next video
