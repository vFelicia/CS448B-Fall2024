With timestamps:

00:00 - hey guys welcome in the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in this video we will discuss
00:07 - about image pyramids in open CV so till
00:11 - now normally when we have used images we
00:15 - have used the images of constant size
00:17 - but sometimes we need to work with the
00:21 - images of different resolution so for
00:25 - example if I have an image and I want to
00:29 - search the face inside an image this
00:33 - face can be of different sizes so using
00:38 - image pyramids we just create the images
00:43 - of different resolutions and then we
00:47 - search for the object for example face
00:51 - in all of these images so pyramid or
00:55 - pyramid representation is a type of
00:58 - multi scale signal representation in
01:01 - which a signal or an image is subject to
01:05 - repeated smoothing and sub sampling so a
01:10 - normal pyramid when you create a pyramid
01:13 - of images it will look like this so
01:16 - let's say this is the original image at
01:19 - the bottom then when you are down scale
01:22 - an image using a pyramid function it's
01:26 - going to give you this image which have
01:30 - the half resolution than the original
01:33 - image and then when you further go up
01:36 - it's going to give you the one-fourth of
01:39 - the original image and then so on so 1/8
01:43 - or 1/16 of an image now there are two
01:49 - types of image pyramids which are
01:52 - available in OpenCV first is called
01:55 - gaussian pyramid and second is called
01:58 - laplacian pyramid so first we will
02:01 - discuss about the gaussian pyramid so
02:04 - gaussian pyramid is nothing but a repeat
02:07 - filtering and subsampling of an image
02:11 - now there are two functions
02:13 - available for the Gaussian pyramid which
02:18 - is called pared down and paired up so
02:21 - let's see them one by one so I have this
02:26 - sample code which is just reading an
02:29 - image and then showing it using the I am
02:32 - show method now in order to use this
02:35 - period down function you can just define
02:38 - a variable let's say L R for lower
02:42 - resolution and then you can use CB to
02:46 - dot pair down so there are two functions
02:50 - you can see pair down and pair up so
02:53 - first of all we will see pair down and
02:56 - then we are going to pass our image as
03:00 - an argument here so I'm going to just
03:02 - pass our image as an argument and we are
03:06 - already showing the original image and
03:09 - let's show the image after we have
03:12 - reduced the resolution of this image
03:14 - using the Piltdown method so pair down
03:18 - is going to reduce the resolution of an
03:21 - image so I'm going to just use LR here
03:27 - and let's say this is the pair down one
03:31 - image okay so let's run this code and
03:34 - let's see what happens so you can see
03:37 - this is the original image and this is
03:40 - about you can see one-fourth of this
03:45 - original image right so this pair down
03:49 - method is going to reduce the resolution
03:51 - of an image when you apply the same
03:55 - method on the second image so let's say
04:01 - this is LR 1 and then we create a second
04:06 - variable error LR 2 and when we pass LR
04:10 - 1 as an argument for this method to
04:15 - create the LR 2 method to image then
04:18 - let's see what happens so this will be L
04:21 - R 1 and let's just say this is going to
04:26 - give
04:27 - lr2 the resolution of image will reduce
04:32 - further so let's see what happens so
04:35 - this was the original image this was the
04:39 - image which we got from the first period
04:43 - down method and then we get this image
04:45 - which we which is further reduced in
04:49 - resolution so this is the image after
04:54 - applying the pared-down method second
04:57 - time on the LR one image okay so you can
05:02 - see the resolution of image is reducing
05:06 - and it's creating a kind of pyramid and
05:09 - that's why it's called the image pyramid
05:12 - now there is a method called pair up
05:15 - also available in OpenCV so let's see
05:19 - what this pair up method do so as you
05:23 - can expect it's going to increase the
05:25 - resolution of the image so here I'm
05:29 - going to just say H R for higher
05:32 - resolution and then I'm going to just
05:35 - see me two dot pair up okay and it's
05:40 - going to increase the resolution of an
05:42 - image now let's say we want to increase
05:45 - the resolution of of this image which is
05:49 - the smallest image which we got using
05:53 - the pared-down method right so we are
05:56 - going to apply the pair up on the last
06:00 - image which we got using the pair down
06:03 - method and let's see what happens so
06:06 - when I'm going to use this hr2 here and
06:11 - this we got from pair up method and
06:15 - let's say this is the pair up one and
06:18 - I'm going to just run this code and you
06:22 - are going to see that we have converted
06:25 - this image which was the smallest image
06:28 - to a higher resolution which resulted in
06:32 - this image but when you see this image
06:37 - carefully so let me just move this
06:40 - to this side and this was the original
06:42 - image so let me just minimize this so
06:46 - this image we have converted to this
06:49 - image using the pair up method so
06:51 - ideally this image should look like this
06:57 - but you have to remember that this pair
07:00 - up image is not going to be equal to
07:03 - this image because once you decrease the
07:07 - resolution using the pair down method
07:10 - you lose the information about that
07:13 - image so when you use pair up to just
07:17 - increase the resolution of this image
07:20 - then you can see the result looks little
07:25 - bit blurred because some of the
07:27 - information is loosed using the pair
07:31 - down method so you have to keep this in
07:34 - mind that many you want to increase the
07:37 - resolution after you have reduced the
07:41 - resolution you're not going to get the
07:43 - same result as you might expect that
07:47 - this image should look like this but
07:49 - they are not equal images so this image
07:53 - is just a higher resolution of this
07:56 - image and it has nothing to do with this
07:59 - image so these are the two methods which
08:02 - are available in Gaussian pyramid now if
08:06 - you want to create a pyramid of multiple
08:11 - resolution instead of just using this
08:15 - pair up or pared down method repeatedly
08:17 - what you can do here is I'm going to
08:20 - just remove this and remove this code
08:24 - also so what I'm going to do is I'm
08:26 - going to copy the image into a new
08:30 - variable so I'm going to just say Lear
08:33 - is equal to I am G dot copy there is a
08:38 - method available for copying the image
08:42 - which is copy and then I'm going to
08:45 - create the Gaussian pyramid array okay
08:51 - so I'm going to just create a variable
08:53 - called
08:54 - GP for a Gaussian pyramid is equal to
08:58 - then in square bracket I'm going to just
09:01 - pass this image here as the first
09:05 - element of this list then what I can do
09:09 - is I can use a for loop instead of just
09:12 - rewriting this pair down method again
09:15 - and again and you might already know how
09:18 - to use for loop in Python so for I in
09:22 - range and here we can provide any range
09:26 - so let's say we want to create five
09:29 - image pyramid okay so five times we want
09:33 - to reduce the resolution so we are going
09:36 - to give six here because range goes the
09:41 - number minus one so whatever you give
09:44 - you minus one right so now what we are
09:48 - going to do is we are going to just use
09:51 - our layer parameter once again and then
09:55 - we are going to just call C v2 dot
09:58 - pared-down method so pair it down and
10:02 - then we want to just say layer okay and
10:08 - then we want to append to the Gaussian
10:13 - pyramid list okay so we are going to
10:17 - just say GP dot append and we are going
10:20 - to append the result of this pair down
10:26 - to our list which we have created here
10:29 - okay so this is going to just append
10:33 - this image to our list of images and
10:37 - then let's just show this image using
10:42 - cb2 dot I am show method so see v2 dot I
10:47 - am sure and here we can just say s ter
10:53 - for converting the integer to the string
10:57 - because the first parameter you'd give
11:00 - to I am sure is a string parameter and
11:03 - that's why I'm converting the integer to
11:05 - the string and the second parameter
11:08 - is the image so let's pass this layer
11:10 - here okay so you have the original image
11:14 - which will be shown using this line of
11:17 - code and then you will see multiple
11:19 - number of images of different resolution
11:22 - using this code so let's run this code
11:24 - and let's see what happens so I'm going
11:26 - to run this code and you can see there
11:30 - are different images resulted using that
11:34 - code which we have written so this was
11:38 - the first image which is zero and then
11:42 - this is the second image and then this
11:45 - is the third fourth fifth and sixth
11:48 - so sixth you can see have a very small
11:52 - resolution so this is how you can use
11:56 - pared-down method multiple times using a
11:59 - for loop now what our Laplace and
12:03 - pyramids so laplacian pyramids are
12:05 - formed from the gaussian pyramids there
12:09 - is no exclusive function for creating
12:14 - the laplacian pyramid so as you have
12:16 - seen that in gaussian pyramids there are
12:20 - two methods available pair up and pair
12:22 - down but there is no exclusive function
12:25 - for creating the laplacian pyramid so
12:29 - how we can create a laplacian pyramid if
12:32 - there is no function available for
12:34 - creating them so you can create a
12:38 - laplacian pyramid or a level of
12:41 - laplacian pyramid is formed by the
12:45 - difference between that level in the
12:48 - gaussian pyramid and the extended
12:51 - version of its upper level in the
12:55 - gaussian pyramid so this definition
12:57 - might be confusing to you guys so let me
13:00 - explain you with the code what I mean by
13:04 - this definition so what I'm going to do
13:08 - is first of all I'm going to take the
13:11 - top level layer of the Gaussian pyramid
13:15 - so top level layer of the Gaussian
13:18 - pyramid is the last image
13:21 - which is generated using this for loop
13:23 - so let's say we have six images or five
13:28 - images using this for loop so what we
13:32 - are going to do is because we have
13:34 - appended each and every image to this
13:38 - list right so we have all the images
13:41 - inside this list so we can just get the
13:47 - last image using the indexing so again
13:52 - I'm going to use the layer variable and
13:56 - then I'm going to just say GP for
14:00 - Gaussian pyramid list and then there is
14:04 - the index five because last image will
14:08 - be available at the index five of this
14:12 - list so we get the last image of that
14:17 - Gaussian pyramid and then let's show
14:20 - this image so I'm going to just say cb2
14:24 - dot I am sure and this is the upper
14:28 - level or the last image so I'm going to
14:31 - say upper level Gaussian pyramid and
14:33 - then we are going to pass this layer
14:36 - variable here so this is going to show
14:38 - just the last image of this list and
14:42 - let's just comment this code out because
14:45 - we don't want to see all the images and
14:48 - then I'm going to create a new list for
14:51 - laplacian pyramid so I'm going to just
14:54 - say LP for laplacian pyramid and then
14:57 - I'm going to create a list using the
15:01 - layer variable itself as we have done
15:04 - for the Gaussian pyramid list also so
15:08 - the first element here is the layer
15:11 - variable itself and now we are going to
15:14 - use the for loop and then I in range and
15:20 - this time what we are going to do is you
15:23 - might already know how to use the range
15:26 - function and if you don't know you can
15:29 - see you can give the stop integer here
15:33 - or you can
15:35 - give multiple parameters here so you can
15:39 - see there is one more implementation of
15:42 - this range function so you can give the
15:46 - start parameter and the stop range so
15:50 - start is the starting point stop is the
15:54 - stopping point and also you can give the
15:57 - steps so this step means in what number
16:02 - you want to reduce okay so let's say we
16:05 - want to start from 5 and then we want to
16:09 - go until zero and we want to reduce in
16:13 - the step of minus 1 okay so 5 4 3 2 1 so
16:20 - let's print the value of I first of all
16:22 - if you might be interested in the result
16:26 - of this range function then let's just
16:29 - run this code and let's see what happens
16:32 - so this is the images which we get but
16:36 - we are not interested in these images we
16:39 - are interested in the print function
16:41 - output so you can see the output of this
16:44 - print function code is 5 4 3 2 1
16:48 - as I said the lower limit is not reached
16:53 - or if you give 0 here then it's going to
16:56 - go until 1 and not 0 if you give 6 here
17:00 - then it's going to go until 5 not 6 so
17:04 - let me repeat the definition of
17:06 - laplacian pyramid once again so
17:09 - laplacian pyramid is formed by the
17:11 - difference between that level in the
17:15 - gaussian pyramid and the extended
17:18 - version of its upper level in the
17:22 - gaussian pyramid
17:24 - so let's first create the extended
17:26 - version of that level so we are going to
17:30 - just create a variable called gaussian
17:34 - extend or extended and then we are going
17:38 - to extend the level of that image which
17:42 - are there in the gaussian pyramid list
17:45 - by using si
17:48 - the to dot dot pair up method and here
17:52 - what you need to give is the Gaussian
17:55 - pyramid list and then we just need to
17:59 - get the index I from this so this line
18:02 - gives us the extended version of the
18:05 - upper level in Gaussian pyramid now
18:08 - let's create the laplacian prima pyramid
18:11 - so Laplace here is equal to c v2 dot
18:15 - subtract because we want to find out the
18:17 - difference between that level in the
18:21 - gaussian pyramid and the extended
18:23 - version of its upper level so I'm going
18:27 - to just say GP for Gaussian pyramid and
18:30 - then we are going to just say I minus
18:34 - one as the first parameter and the
18:37 - second parameter is the extended version
18:40 - of the Gaussian upper limit and now we
18:44 - can use the I am show method to show all
18:48 - these laplacian images so I'm going to
18:51 - just say see v2 dot I am sure and once
18:55 - again I'm going to use STR function to
18:57 - convert from a number to string and then
19:01 - in the next parameter I'm going to just
19:04 - pass the laplacian parameter here as an
19:08 - image source so what do you think will
19:11 - this code work so let's see what happens
19:15 - when we are going to run this code so
19:18 - you can see the laplacian pyramid looks
19:21 - just like the edge detection so all the
19:25 - edges are shown here on every image this
19:30 - is the first level this is the second
19:33 - level third level fourth fifth level so
19:36 - these images are called the laplacian
19:39 - pyramid now what is the use of creating
19:44 - those laplacian pyramids or the gaussian
19:48 - pyramids
19:48 - so the laplacian and gaussian pyramid
19:52 - helps us to blend the images and the
19:55 - reconstruction of the images so these
19:58 - are the two benefits of creating
20:02 - those laplacian and the gaussian
20:04 - pyramids so in the next video we are
20:06 - going to see how we can blend the images
20:09 - or how can we reconstruct the images
20:12 - using the opencv and the image pyramids
20:17 - so stay tuned and I will see you in the
20:20 - next video
20:29 - you

Cleaned transcript:

hey guys welcome in the next video on open CV tutorial for beginners using Python in this video we will discuss about image pyramids in open CV so till now normally when we have used images we have used the images of constant size but sometimes we need to work with the images of different resolution so for example if I have an image and I want to search the face inside an image this face can be of different sizes so using image pyramids we just create the images of different resolutions and then we search for the object for example face in all of these images so pyramid or pyramid representation is a type of multi scale signal representation in which a signal or an image is subject to repeated smoothing and sub sampling so a normal pyramid when you create a pyramid of images it will look like this so let's say this is the original image at the bottom then when you are down scale an image using a pyramid function it's going to give you this image which have the half resolution than the original image and then when you further go up it's going to give you the onefourth of the original image and then so on so 1/8 or 1/16 of an image now there are two types of image pyramids which are available in OpenCV first is called gaussian pyramid and second is called laplacian pyramid so first we will discuss about the gaussian pyramid so gaussian pyramid is nothing but a repeat filtering and subsampling of an image now there are two functions available for the Gaussian pyramid which is called pared down and paired up so let's see them one by one so I have this sample code which is just reading an image and then showing it using the I am show method now in order to use this period down function you can just define a variable let's say L R for lower resolution and then you can use CB to dot pair down so there are two functions you can see pair down and pair up so first of all we will see pair down and then we are going to pass our image as an argument here so I'm going to just pass our image as an argument and we are already showing the original image and let's show the image after we have reduced the resolution of this image using the Piltdown method so pair down is going to reduce the resolution of an image so I'm going to just use LR here and let's say this is the pair down one image okay so let's run this code and let's see what happens so you can see this is the original image and this is about you can see onefourth of this original image right so this pair down method is going to reduce the resolution of an image when you apply the same method on the second image so let's say this is LR 1 and then we create a second variable error LR 2 and when we pass LR 1 as an argument for this method to create the LR 2 method to image then let's see what happens so this will be L R 1 and let's just say this is going to give lr2 the resolution of image will reduce further so let's see what happens so this was the original image this was the image which we got from the first period down method and then we get this image which we which is further reduced in resolution so this is the image after applying the pareddown method second time on the LR one image okay so you can see the resolution of image is reducing and it's creating a kind of pyramid and that's why it's called the image pyramid now there is a method called pair up also available in OpenCV so let's see what this pair up method do so as you can expect it's going to increase the resolution of the image so here I'm going to just say H R for higher resolution and then I'm going to just see me two dot pair up okay and it's going to increase the resolution of an image now let's say we want to increase the resolution of of this image which is the smallest image which we got using the pareddown method right so we are going to apply the pair up on the last image which we got using the pair down method and let's see what happens so when I'm going to use this hr2 here and this we got from pair up method and let's say this is the pair up one and I'm going to just run this code and you are going to see that we have converted this image which was the smallest image to a higher resolution which resulted in this image but when you see this image carefully so let me just move this to this side and this was the original image so let me just minimize this so this image we have converted to this image using the pair up method so ideally this image should look like this but you have to remember that this pair up image is not going to be equal to this image because once you decrease the resolution using the pair down method you lose the information about that image so when you use pair up to just increase the resolution of this image then you can see the result looks little bit blurred because some of the information is loosed using the pair down method so you have to keep this in mind that many you want to increase the resolution after you have reduced the resolution you're not going to get the same result as you might expect that this image should look like this but they are not equal images so this image is just a higher resolution of this image and it has nothing to do with this image so these are the two methods which are available in Gaussian pyramid now if you want to create a pyramid of multiple resolution instead of just using this pair up or pared down method repeatedly what you can do here is I'm going to just remove this and remove this code also so what I'm going to do is I'm going to copy the image into a new variable so I'm going to just say Lear is equal to I am G dot copy there is a method available for copying the image which is copy and then I'm going to create the Gaussian pyramid array okay so I'm going to just create a variable called GP for a Gaussian pyramid is equal to then in square bracket I'm going to just pass this image here as the first element of this list then what I can do is I can use a for loop instead of just rewriting this pair down method again and again and you might already know how to use for loop in Python so for I in range and here we can provide any range so let's say we want to create five image pyramid okay so five times we want to reduce the resolution so we are going to give six here because range goes the number minus one so whatever you give you minus one right so now what we are going to do is we are going to just use our layer parameter once again and then we are going to just call C v2 dot pareddown method so pair it down and then we want to just say layer okay and then we want to append to the Gaussian pyramid list okay so we are going to just say GP dot append and we are going to append the result of this pair down to our list which we have created here okay so this is going to just append this image to our list of images and then let's just show this image using cb2 dot I am show method so see v2 dot I am sure and here we can just say s ter for converting the integer to the string because the first parameter you'd give to I am sure is a string parameter and that's why I'm converting the integer to the string and the second parameter is the image so let's pass this layer here okay so you have the original image which will be shown using this line of code and then you will see multiple number of images of different resolution using this code so let's run this code and let's see what happens so I'm going to run this code and you can see there are different images resulted using that code which we have written so this was the first image which is zero and then this is the second image and then this is the third fourth fifth and sixth so sixth you can see have a very small resolution so this is how you can use pareddown method multiple times using a for loop now what our Laplace and pyramids so laplacian pyramids are formed from the gaussian pyramids there is no exclusive function for creating the laplacian pyramid so as you have seen that in gaussian pyramids there are two methods available pair up and pair down but there is no exclusive function for creating the laplacian pyramid so how we can create a laplacian pyramid if there is no function available for creating them so you can create a laplacian pyramid or a level of laplacian pyramid is formed by the difference between that level in the gaussian pyramid and the extended version of its upper level in the gaussian pyramid so this definition might be confusing to you guys so let me explain you with the code what I mean by this definition so what I'm going to do is first of all I'm going to take the top level layer of the Gaussian pyramid so top level layer of the Gaussian pyramid is the last image which is generated using this for loop so let's say we have six images or five images using this for loop so what we are going to do is because we have appended each and every image to this list right so we have all the images inside this list so we can just get the last image using the indexing so again I'm going to use the layer variable and then I'm going to just say GP for Gaussian pyramid list and then there is the index five because last image will be available at the index five of this list so we get the last image of that Gaussian pyramid and then let's show this image so I'm going to just say cb2 dot I am sure and this is the upper level or the last image so I'm going to say upper level Gaussian pyramid and then we are going to pass this layer variable here so this is going to show just the last image of this list and let's just comment this code out because we don't want to see all the images and then I'm going to create a new list for laplacian pyramid so I'm going to just say LP for laplacian pyramid and then I'm going to create a list using the layer variable itself as we have done for the Gaussian pyramid list also so the first element here is the layer variable itself and now we are going to use the for loop and then I in range and this time what we are going to do is you might already know how to use the range function and if you don't know you can see you can give the stop integer here or you can give multiple parameters here so you can see there is one more implementation of this range function so you can give the start parameter and the stop range so start is the starting point stop is the stopping point and also you can give the steps so this step means in what number you want to reduce okay so let's say we want to start from 5 and then we want to go until zero and we want to reduce in the step of minus 1 okay so 5 4 3 2 1 so let's print the value of I first of all if you might be interested in the result of this range function then let's just run this code and let's see what happens so this is the images which we get but we are not interested in these images we are interested in the print function output so you can see the output of this print function code is 5 4 3 2 1 as I said the lower limit is not reached or if you give 0 here then it's going to go until 1 and not 0 if you give 6 here then it's going to go until 5 not 6 so let me repeat the definition of laplacian pyramid once again so laplacian pyramid is formed by the difference between that level in the gaussian pyramid and the extended version of its upper level in the gaussian pyramid so let's first create the extended version of that level so we are going to just create a variable called gaussian extend or extended and then we are going to extend the level of that image which are there in the gaussian pyramid list by using si the to dot dot pair up method and here what you need to give is the Gaussian pyramid list and then we just need to get the index I from this so this line gives us the extended version of the upper level in Gaussian pyramid now let's create the laplacian prima pyramid so Laplace here is equal to c v2 dot subtract because we want to find out the difference between that level in the gaussian pyramid and the extended version of its upper level so I'm going to just say GP for Gaussian pyramid and then we are going to just say I minus one as the first parameter and the second parameter is the extended version of the Gaussian upper limit and now we can use the I am show method to show all these laplacian images so I'm going to just say see v2 dot I am sure and once again I'm going to use STR function to convert from a number to string and then in the next parameter I'm going to just pass the laplacian parameter here as an image source so what do you think will this code work so let's see what happens when we are going to run this code so you can see the laplacian pyramid looks just like the edge detection so all the edges are shown here on every image this is the first level this is the second level third level fourth fifth level so these images are called the laplacian pyramid now what is the use of creating those laplacian pyramids or the gaussian pyramids so the laplacian and gaussian pyramid helps us to blend the images and the reconstruction of the images so these are the two benefits of creating those laplacian and the gaussian pyramids so in the next video we are going to see how we can blend the images or how can we reconstruct the images using the opencv and the image pyramids so stay tuned and I will see you in the next video you
