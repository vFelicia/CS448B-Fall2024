With timestamps:

00:01 - hello guys welcome to the next video
00:02 - tutorial on Java programming for
00:04 - beginners and in this video we will see
00:07 - what is an abstract class and why and
00:11 - where we will use abstract classes in
00:16 - Java so what is an abstract class an
00:20 - abstract class is a class which cannot
00:23 - be
00:25 - instantiated so for
00:27 - example if you uh make some class as
00:32 - abstract class you cannot make an object
00:36 - of this class and what is the reason
00:40 - behind this is for example I have been
00:44 - showing you uh this Bank class uh in the
00:49 - last two videos for showing the
00:52 - polymorphism example so I have this
00:55 - super class called Base bank which is my
00:59 - super class which contains a
01:01 - method and I have a
01:05 - subclass which extends from my super
01:07 - class which is inheriting the super
01:10 - class and it also contains a method okay
01:14 - which is get interest
01:16 - rate now a bank is abstract in a way
01:23 - that uh bank is a general term or we can
01:27 - say Bank itself is is very abstract word
01:32 - because we cannot uh you know deduce
01:35 - which bank we are talking about from uh
01:38 - this class bank but we have Bank ABC
01:43 - which have some name and this can uh you
01:46 - know give you some interest rates or
01:50 - whatever uh other facilities which can
01:54 - be related to the bank right so in a way
01:59 - this Bank class
02:02 - is serving as an abstract for other
02:06 - classes so it's just
02:09 - facilitating uh to the other classes its
02:13 - uh method or member variables okay so
02:18 - for example we don't want this class to
02:21 - be instantiated we just want that this
02:24 - class should be used by the other
02:28 - classes to uh have its functionality for
02:33 - example we can add uh some more function
02:36 - uh to the abstract bank and we can add
02:40 - those method or when we can use those
02:43 - method using the inheritance property in
02:47 - our sub classes okay so bank is a very
02:52 - abstract
02:53 - class and these kind of class sometimes
02:57 - we don't want the other us user to make
03:01 - and you know make the instance of this
03:05 - class because whenever you make the
03:07 - instance of the class
03:10 - the interest rate here for example we
03:13 - are returning zero which means no
03:15 - interest right so whenever we make an
03:19 - instance of this class like this and
03:21 - when we run the program it gives us zero
03:24 - which uh doesn't really uh mean anything
03:29 - right
03:30 - so if we Define this class an abstract
03:33 - so how to define a class as an abstract
03:36 - class you just need to
03:39 - write abstract keyword before your class
03:43 - so this keyword when you add to a class
03:46 - it makes your class abstract and as as
03:50 - soon as you add this keyword to uh your
03:53 - super class which is a bank you see here
03:57 - that this object creation is not
04:01 - possible
04:02 - anymore because this is the basic
04:05 - property of abstract class that you
04:08 - cannot create any object from the
04:12 - abstract class but you can create a
04:16 - reference from its sub classes okay so
04:20 - you can create a reference which points
04:23 - to the sub classes because Bank ABC is
04:27 - not an abstract class so you can use
04:29 - this Bank ABC like this okay and this
04:34 - error will be gone okay so you can make
04:38 - an a reference which points to the class
04:40 - which is not abstract but indirectly
04:44 - this Bank class is an abstract class
04:48 - which cannot be instantiated or we
04:51 - cannot make an object so indirectly we
04:53 - are restricting the access to this class
04:57 - from other users
05:00 - now we don't even have or we uh not only
05:06 - have abstract classes but we also have
05:09 - abst abstract
05:12 - methods and Abstract method whenever you
05:15 - define a method as
05:17 - abstract this method should be
05:21 - implemented by the subclasses which is
05:25 - inheriting the
05:26 - class okay so the there are two
05:30 - condition to make a method abstract one
05:35 - is the
05:37 - method wherever it's present so this
05:41 - method is present in my bank class this
05:44 - class should be abstract to make this
05:46 - method abstract so we can make this
05:49 - method abstract and whenever you make an
05:53 - a method abstract you don't need its
05:56 - instantiation or definition so
06:00 - so the most basic condition is the class
06:05 - in which this abstract method is present
06:08 - this should be also abstract so class
06:10 - should be abstract then only you can
06:13 - make a method abstract and whenever you
06:16 - make an uh method abstract you need to
06:21 - give the implementation of this method
06:24 - in your sub classes because Bank class
06:30 - is our super class and B ABC is
06:33 - inheriting from our super class we need
06:36 - to give the implementation of all the
06:39 - abstract method which are present in our
06:43 - abstract class so we need to give the
06:47 - definition of this method in here so
06:53 - whatever classes which are inheriting
06:55 - from this you need to give the
06:58 - definition here here and here for
07:01 - example I just comment
07:05 - this in the this method Bank ABC method
07:11 - which is extending from the bank class
07:13 - then this class will give the error that
07:18 - the type Bank ABC must uh implement the
07:22 - inherited abstract method right so you
07:26 - cannot compile a program if you don't
07:30 - implement the abstract method in the
07:34 - subass okay so if you make any method
07:38 - abstract you need to implement it in
07:41 - your sub classes if you are inheriting
07:44 - from this
07:46 - class so this uh is how abstract uh
07:50 - classes and Abstract method
07:52 - works the other thing is uh you may
07:56 - encounter a keyword called concrete
08:00 - and the concrete class is literally or
08:05 - it almost opposite to the abstract class
08:10 - so if the abstract class cannot be
08:14 - instantiated the concrete class can be
08:18 - instantiated and
08:20 - so this class which is inheriting the
08:24 - abstract class we haven't added abstract
08:27 - keyword here but we don't even need to
08:30 - give concrete keyword in order to make
08:32 - it concrete you just need to uh you know
08:37 - you don't need to give anything you just
08:39 - need to give public or
08:42 - uh private or whatever class you want to
08:45 - declare and this makes your class AB uh
08:49 - concrete so if you don't
08:52 - add uh abstract keyword before a class
08:55 - it's concrete because it's uh uh it can
08:58 - be in instantiate it and if you add a
09:02 - keyword abstract before a class it makes
09:05 - the class abstract which cannot be
09:08 - instantiated so I hope you have
09:09 - understood the basic concept of abstract
09:11 - and concrete classes and I hope you have
09:14 - enjoyed this video please rate comment
09:16 - and subscribe and bye for

Cleaned transcript:

hello guys welcome to the next video tutorial on Java programming for beginners and in this video we will see what is an abstract class and why and where we will use abstract classes in Java so what is an abstract class an abstract class is a class which cannot be instantiated so for example if you uh make some class as abstract class you cannot make an object of this class and what is the reason behind this is for example I have been showing you uh this Bank class uh in the last two videos for showing the polymorphism example so I have this super class called Base bank which is my super class which contains a method and I have a subclass which extends from my super class which is inheriting the super class and it also contains a method okay which is get interest rate now a bank is abstract in a way that uh bank is a general term or we can say Bank itself is is very abstract word because we cannot uh you know deduce which bank we are talking about from uh this class bank but we have Bank ABC which have some name and this can uh you know give you some interest rates or whatever uh other facilities which can be related to the bank right so in a way this Bank class is serving as an abstract for other classes so it's just facilitating uh to the other classes its uh method or member variables okay so for example we don't want this class to be instantiated we just want that this class should be used by the other classes to uh have its functionality for example we can add uh some more function uh to the abstract bank and we can add those method or when we can use those method using the inheritance property in our sub classes okay so bank is a very abstract class and these kind of class sometimes we don't want the other us user to make and you know make the instance of this class because whenever you make the instance of the class the interest rate here for example we are returning zero which means no interest right so whenever we make an instance of this class like this and when we run the program it gives us zero which uh doesn't really uh mean anything right so if we Define this class an abstract so how to define a class as an abstract class you just need to write abstract keyword before your class so this keyword when you add to a class it makes your class abstract and as as soon as you add this keyword to uh your super class which is a bank you see here that this object creation is not possible anymore because this is the basic property of abstract class that you cannot create any object from the abstract class but you can create a reference from its sub classes okay so you can create a reference which points to the sub classes because Bank ABC is not an abstract class so you can use this Bank ABC like this okay and this error will be gone okay so you can make an a reference which points to the class which is not abstract but indirectly this Bank class is an abstract class which cannot be instantiated or we cannot make an object so indirectly we are restricting the access to this class from other users now we don't even have or we uh not only have abstract classes but we also have abst abstract methods and Abstract method whenever you define a method as abstract this method should be implemented by the subclasses which is inheriting the class okay so the there are two condition to make a method abstract one is the method wherever it's present so this method is present in my bank class this class should be abstract to make this method abstract so we can make this method abstract and whenever you make an a method abstract you don't need its instantiation or definition so so the most basic condition is the class in which this abstract method is present this should be also abstract so class should be abstract then only you can make a method abstract and whenever you make an uh method abstract you need to give the implementation of this method in your sub classes because Bank class is our super class and B ABC is inheriting from our super class we need to give the implementation of all the abstract method which are present in our abstract class so we need to give the definition of this method in here so whatever classes which are inheriting from this you need to give the definition here here and here for example I just comment this in the this method Bank ABC method which is extending from the bank class then this class will give the error that the type Bank ABC must uh implement the inherited abstract method right so you cannot compile a program if you don't implement the abstract method in the subass okay so if you make any method abstract you need to implement it in your sub classes if you are inheriting from this class so this uh is how abstract uh classes and Abstract method works the other thing is uh you may encounter a keyword called concrete and the concrete class is literally or it almost opposite to the abstract class so if the abstract class cannot be instantiated the concrete class can be instantiated and so this class which is inheriting the abstract class we haven't added abstract keyword here but we don't even need to give concrete keyword in order to make it concrete you just need to uh you know you don't need to give anything you just need to give public or uh private or whatever class you want to declare and this makes your class AB uh concrete so if you don't add uh abstract keyword before a class it's concrete because it's uh uh it can be in instantiate it and if you add a keyword abstract before a class it makes the class abstract which cannot be instantiated so I hope you have understood the basic concept of abstract and concrete classes and I hope you have enjoyed this video please rate comment and subscribe and bye for
