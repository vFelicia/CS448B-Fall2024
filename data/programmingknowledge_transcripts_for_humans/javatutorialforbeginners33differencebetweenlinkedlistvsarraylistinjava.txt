With timestamps:

00:01 - hello guys welcome to the next video
00:02 - tutorial on Java programming for
00:04 - beginners in this video we will see what
00:06 - is the difference between array list and
00:10 - Link list we have seen both kind of list
00:15 - in the last two videos and now we will
00:18 - see what is the difference between them
00:21 - and when we can use
00:24 - them so let's see the first
00:28 - difference first difference say link
00:31 - list element insertion is faster
00:35 - compared to array list so whenever you
00:39 - try to add element or your frequent
00:44 - operation in your program is
00:48 - insertion then it's better to use Link
00:52 - list okay so when you want to use Fe
00:57 - frequent uh insertions or adding of
01:00 - element in your list then link lists are
01:06 - preferred now why insertion is faster in
01:10 - link list in compared to array list
01:14 - because link list are
01:18 - doubly
01:20 - uh link list so link list uses dou link
01:27 - list you can Google what is double link
01:29 - link
01:30 - list basically it means that it
01:34 - maintains two pointer one is right
01:38 - before the element and one is right
01:40 - after the element so the insertion is
01:45 - faster but whenever you try to add
01:49 - something to the array list it has to
01:52 - resize it size and it has to shift the
01:57 - element because uh it us uses index
02:01 - based list so that's why link list as is
02:07 - faster in terms of
02:09 - insertion in a same way whenever you
02:12 - want to delete something or your
02:16 - frequent operation is deletion I'm
02:20 - talking about frequent word here and I'm
02:25 - stressing on this frequent word because
02:29 - uh
02:30 - in normal condition where you have to
02:34 - add you know hardly once or twice or I
02:37 - mean not more than 10 times both
02:41 - performance wise you cannot measure but
02:44 - the frequent operation uh by frequent
02:49 - operation I
02:50 - mean somewhere around 10 to the power
02:54 - five addition or deletion or something
02:57 - like this so it's frequent quent right
03:01 - so whenever you have frequent deletion
03:05 - also link lists are faster than array
03:09 - list okay so whenever you have frequent
03:13 - deletion operation or whenever you have
03:16 - frequent insertion
03:18 - operator operation in your uh program
03:22 - then use linked list okay
03:28 - now when array lists are are good to use
03:33 - so whenever your frequent operation is
03:37 - searching in the list then array lists
03:41 - are better so array list search
03:45 - operation is pretty fast compared to
03:47 - link list search operation search
03:51 - operation means whenever you want to get
03:54 - some value from your list which is quite
03:58 - big and your frequent operation is
04:01 - searching inside the list for example
04:03 - your list
04:05 - is 10 the^ 5 Element so your list
04:10 - contain 10 the^ five elements and you
04:13 - want to get exactly the element at the
04:16 - middle of the list then this array list
04:21 - is faster because AR list Ive already
04:25 - said that it's indexed index based right
04:29 - and it's faster to get the index uh of
04:32 - the array list than to uh you know
04:36 - retrieve it using iterator because link
04:40 - list I already told you uses these W
04:43 - link list that means it uses double
04:47 - pointers and for that you need iterator
04:50 - but array list are only index based
04:55 - okay so whenever you have search
04:58 - operations
05:00 - you use array list but these search
05:04 - operation if they have frequent search
05:06 - operations right now fourth and last
05:11 - difference is link list has more memory
05:16 - overhead because link list work on
05:21 - pointers or doubly link list
05:24 - pointers they uh have more memory
05:28 - overhead and because array lists are you
05:33 - know index based uh list and they only
05:39 - uh you know contain or they only uses
05:42 - the number of element or addresses equal
05:46 - to the number of element that's why Aris
05:51 - consumes lesser memory than link list
05:55 - okay so link list has more me memory
05:58 - overhead than array list because in
06:01 - Array list each index only hold actual
06:05 - object right but in link list each node
06:10 - holds both the data address of next and
06:15 - pre previous node this is the basic
06:18 - concept of Link W link list which is the
06:21 - pointer which holds next and previous
06:24 - value
06:25 - okay so whenever you are concerned about
06:30 - memory then use array list okay so these
06:34 - are the four differ main or major
06:38 - differences between link list now how
06:41 - can we prove these four
06:44 - points what I have done is I have made a
06:47 - program
06:49 - here and
06:52 - I will try to insert 10 to the^ 7
06:58 - element 10 1 E7 means 10 ^ 7 elements
07:04 - I'm I will try to insert into the list
07:07 - also and insert into the link list also
07:12 - so array list and Link list I will
07:14 - insert same number of elements and I
07:17 - will compare the time taken by them and
07:21 - then I will see which is faster and this
07:25 - is not a small number 10 ^ 7 is quite
07:28 - big right
07:30 - so I'm going to see how much time in
07:33 - millisecond it takes so I uh am
07:36 - measuring time using this current time
07:39 - in millisecond using system. current
07:41 - time in
07:42 - millisecond and then I'm printing the
07:46 - time using the current time minus the
07:50 - time uh I have recorded before this
07:53 - insertion in the same way I am doing the
07:56 - same for the link list and I will
08:00 - see the time taken by them
08:03 - okay similarly I'm trying to remove the
08:08 - values from my list so once I insert
08:12 - some value in the list I will try to
08:15 - remove the value and let's try to remove
08:18 - the value from the middle of the list
08:22 - okay so you can uh say 10 ^ 7 Let's uh
08:30 - remove the value from
08:33 - 1
08:35 - e 1 E five for example so 1
08:40 - E5 okay not the middle but it's quite
08:44 - random and you know uh it has to do lot
08:49 - some work to find this value right to
08:52 - remove it okay and then I will try to
08:57 - search some value in inside the uh list
09:02 - okay so these three operation I'm going
09:06 - to do and I will try to run this program
09:09 - and see what is the time taken by all
09:12 - three
09:15 - operations so now I get the insert
09:19 - result and deletion result and the uh
09:24 - search result so insertion you can see
09:28 - the result in insert operation array
09:31 - list take
09:33 - 6114
09:34 - millisecond and in insert link list
09:38 - takes 1617
09:41 - millisecond right that means link list
09:44 - is faster in insertion operation
09:50 - right now in case of uh deletion it's it
09:56 - should be a link list should take less
09:59 - uh
10:00 - time than uh this array list but
10:03 - sometimes uh it can happen but this
10:07 - operation I have was not doing frequent
10:09 - right deletion I have only called only
10:13 - once here right not I have done any
10:17 - frequent operation so only one deletion
10:20 - takes uh lesser time in aray list in
10:24 - this case but more time in link list but
10:27 - this if the remove operation is uh
10:32 - frequent then the faster will be the
10:36 - link list right so let's try to remove
10:39 - the first uh element itself and then see
10:43 - what happens so in removal once again
10:48 - arist take more time which is 11
10:50 - millisecond and
10:52 - delete of a link list for the first
10:56 - element takes 0 Mill almost 0 Mill
10:59 - millisecond that is link list is faster
11:03 - for the removal also or deletion if you
11:07 - have frequent deletion
11:09 - right now in the third operation what I
11:13 - was doing is I was searching in the list
11:17 - basically I was searching in the list uh
11:20 - exactly the middle element in the list
11:25 - so this search operation gives me the
11:28 - results something like this
11:30 - whenever I try to get some value which
11:33 - is exactly at the middle or whose index
11:37 - is exactly at the middle of uh the size
11:41 - of the array then it the array list
11:44 - takes less time which is almost 0
11:47 - millisecond but link list you see takes
11:51 - more time okay so this
11:54 - proves more or less our Point deletion
11:59 - and insertion link list is better but
12:03 - whenever you want to search then uh this
12:07 - is better which one link AR list is
12:11 - better okay so these are the difference
12:14 - between AR list and Link list I hope you
12:16 - have enjoyed this video please write
12:18 - comment and subscribe and bye for now

Cleaned transcript:

hello guys welcome to the next video tutorial on Java programming for beginners in this video we will see what is the difference between array list and Link list we have seen both kind of list in the last two videos and now we will see what is the difference between them and when we can use them so let's see the first difference first difference say link list element insertion is faster compared to array list so whenever you try to add element or your frequent operation in your program is insertion then it's better to use Link list okay so when you want to use Fe frequent uh insertions or adding of element in your list then link lists are preferred now why insertion is faster in link list in compared to array list because link list are doubly uh link list so link list uses dou link list you can Google what is double link link list basically it means that it maintains two pointer one is right before the element and one is right after the element so the insertion is faster but whenever you try to add something to the array list it has to resize it size and it has to shift the element because uh it us uses index based list so that's why link list as is faster in terms of insertion in a same way whenever you want to delete something or your frequent operation is deletion I'm talking about frequent word here and I'm stressing on this frequent word because uh in normal condition where you have to add you know hardly once or twice or I mean not more than 10 times both performance wise you cannot measure but the frequent operation uh by frequent operation I mean somewhere around 10 to the power five addition or deletion or something like this so it's frequent quent right so whenever you have frequent deletion also link lists are faster than array list okay so whenever you have frequent deletion operation or whenever you have frequent insertion operator operation in your uh program then use linked list okay now when array lists are are good to use so whenever your frequent operation is searching in the list then array lists are better so array list search operation is pretty fast compared to link list search operation search operation means whenever you want to get some value from your list which is quite big and your frequent operation is searching inside the list for example your list is 10 the^ 5 Element so your list contain 10 the^ five elements and you want to get exactly the element at the middle of the list then this array list is faster because AR list Ive already said that it's indexed index based right and it's faster to get the index uh of the array list than to uh you know retrieve it using iterator because link list I already told you uses these W link list that means it uses double pointers and for that you need iterator but array list are only index based okay so whenever you have search operations you use array list but these search operation if they have frequent search operations right now fourth and last difference is link list has more memory overhead because link list work on pointers or doubly link list pointers they uh have more memory overhead and because array lists are you know index based uh list and they only uh you know contain or they only uses the number of element or addresses equal to the number of element that's why Aris consumes lesser memory than link list okay so link list has more me memory overhead than array list because in Array list each index only hold actual object right but in link list each node holds both the data address of next and pre previous node this is the basic concept of Link W link list which is the pointer which holds next and previous value okay so whenever you are concerned about memory then use array list okay so these are the four differ main or major differences between link list now how can we prove these four points what I have done is I have made a program here and I will try to insert 10 to the^ 7 element 10 1 E7 means 10 ^ 7 elements I'm I will try to insert into the list also and insert into the link list also so array list and Link list I will insert same number of elements and I will compare the time taken by them and then I will see which is faster and this is not a small number 10 ^ 7 is quite big right so I'm going to see how much time in millisecond it takes so I uh am measuring time using this current time in millisecond using system. current time in millisecond and then I'm printing the time using the current time minus the time uh I have recorded before this insertion in the same way I am doing the same for the link list and I will see the time taken by them okay similarly I'm trying to remove the values from my list so once I insert some value in the list I will try to remove the value and let's try to remove the value from the middle of the list okay so you can uh say 10 ^ 7 Let's uh remove the value from 1 e 1 E five for example so 1 E5 okay not the middle but it's quite random and you know uh it has to do lot some work to find this value right to remove it okay and then I will try to search some value in inside the uh list okay so these three operation I'm going to do and I will try to run this program and see what is the time taken by all three operations so now I get the insert result and deletion result and the uh search result so insertion you can see the result in insert operation array list take 6114 millisecond and in insert link list takes 1617 millisecond right that means link list is faster in insertion operation right now in case of uh deletion it's it should be a link list should take less uh time than uh this array list but sometimes uh it can happen but this operation I have was not doing frequent right deletion I have only called only once here right not I have done any frequent operation so only one deletion takes uh lesser time in aray list in this case but more time in link list but this if the remove operation is uh frequent then the faster will be the link list right so let's try to remove the first uh element itself and then see what happens so in removal once again arist take more time which is 11 millisecond and delete of a link list for the first element takes 0 Mill almost 0 Mill millisecond that is link list is faster for the removal also or deletion if you have frequent deletion right now in the third operation what I was doing is I was searching in the list basically I was searching in the list uh exactly the middle element in the list so this search operation gives me the results something like this whenever I try to get some value which is exactly at the middle or whose index is exactly at the middle of uh the size of the array then it the array list takes less time which is almost 0 millisecond but link list you see takes more time okay so this proves more or less our Point deletion and insertion link list is better but whenever you want to search then uh this is better which one link AR list is better okay so these are the difference between AR list and Link list I hope you have enjoyed this video please write comment and subscribe and bye for now
