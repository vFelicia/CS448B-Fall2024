With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - nest
00:03 - js tutorial for beginners in the
00:06 - previous videos we have seen how we can
00:08 - create
00:08 - our nest js project and how we can
00:12 - add the end points uh to
00:15 - our nest js framework now in this video
00:18 - we are going to discuss about how we can
00:21 - add the mongodb support
00:23 - to our nest js api so we are going to
00:27 - start
00:27 - with the installation of the required
00:31 - packages so i'm going to just write npm
00:34 - i
00:34 - hyphen hyphen save and then you need to
00:38 - add
00:38 - these two packages which is nest
00:41 - js forward slash mongoose
00:45 - and the mongoose package itself so
00:49 - mongoose okay and then press enter
00:52 - now once you are done with the
00:54 - installation of the packages
00:56 - we are going to go to the main
00:59 - app.module.ps so this is the
01:02 - app.module.ts
01:04 - and here we are going to first of all
01:06 - import
01:08 - some packages from the nest
01:11 - mongoose package and which
01:15 - module we want here we want to uh
01:18 - import the mongoose module from the
01:22 - nest js mongoose package
01:25 - okay and once you have this you can
01:29 - use this mongoose module in order to
01:32 - connect to your
01:34 - mongodb database so here you can see
01:37 - under modules we have imported already
01:39 - our car
01:40 - module which we have created previously
01:43 - and now we can also add the support
01:47 - for the mongoose module so just
01:50 - copy this mongoose module dot
01:53 - in mongoose module you have a few
01:56 - methods
01:56 - so we are going to use this method which
01:59 - is called for
02:00 - root which is going to take your mongodb
02:04 - uri
02:04 - as an argument so if you are familiar
02:07 - with mongoose
02:08 - or mongodb we can connect to our
02:12 - database using this uris so
02:16 - here as the uri i'm going to just write
02:20 - mongodb and then colon forward
02:23 - forward slash localhost because i will
02:26 - be using my
02:27 - uh mongodb which is running on my
02:30 - uh local host and then
02:34 - the name of your database so let's name
02:37 - our database
02:38 - as a car manager
02:42 - okay also you can add some of the
02:44 - options
02:45 - which mongoose takes at the time of the
02:48 - connection
02:49 - but we are going to add these later if
02:51 - we require
02:52 - them okay now what i uh i'm using is i'm
02:56 - using
02:57 - the docker instance of mongodb
03:01 - you can install mongodb locally or if
03:03 - you are running
03:04 - a mongodb on a server you can provide
03:08 - the uri
03:08 - of that server also right so
03:12 - for now i will be using the docker
03:15 - to use on my mac machine
03:18 - and the command for this is docker run
03:21 - hyphen p
03:23 - this is the port mapping of on
03:25 - which
03:26 - we are going to listen using the local
03:28 - host and this will
03:30 - be the location where we are going to
03:32 - save
03:33 - our data in our local machine
03:37 - using the docker right so let's
03:41 - run this you can also write the hyphen d
03:44 - here
03:44 - to run this mongodb container in
03:48 - the detached mode but i will run it
03:52 - as a separate instance so you can see
03:53 - it's running and now i'm going to open
03:56 - a new terminal and i will just write
04:01 - docker ps here and you can see this
04:05 - mongodb instance is already running
04:08 - so i'm going to just write docker exact
04:11 - hyphen i t and the name of the container
04:14 - or container id also you can give
04:16 - and then space bash so using this
04:19 - command we are just
04:20 - opening the bash terminal inside the
04:23 - container
04:24 - right now i can just give
04:28 - the command in order to connect
04:31 - to my mongodb and here i can just
04:35 - say show dbs and it's going to show me
04:38 - the list of all the databases so right
04:40 - now it has
04:41 - these three databases which are
04:44 - created by default and when we are going
04:47 - to run
04:48 - our app it's going to create this uh
04:50 - database
04:51 - also okay so now we have
04:54 - our database connection
04:57 - now we are going to create the schema
05:00 - for
05:00 - our mongodb so for that
05:04 - i can create a separate file inside this
05:07 - car
05:08 - directory or i will create a folder
05:12 - let's say
05:12 - and i will name it as schemas and inside
05:15 - the schemas folder i will add all my
05:18 - schemas so
05:19 - the first schema will be car
05:23 - schema dot ts for example
05:27 - and here i will first of all import
05:30 - the mongoose package
05:34 - so import asterix as
05:38 - mongoose from
05:41 - mongoose right so because we want to
05:45 - create the db uh schema using
05:49 - mongoose we will import
05:50 - this package and then we are going to
05:53 - just create the schema so i'm going to
05:55 - just write
05:57 - export then const
06:00 - and then the name of my schema will be
06:03 - let's say
06:04 - car schema
06:07 - and we are going to create a new schema
06:10 - so i'm going to just write new
06:12 - mongoose dot uh schema
06:17 - and then we are going to uh add our
06:20 - schema inside
06:21 - these parenthesis so i'm going to just
06:24 - add
06:24 - these curly brackets and then we can add
06:28 - our schema here
06:29 - so what we have in our schema so in our
06:32 - schema we have
06:34 - we can see the dto so we are going to
06:37 - use the same
06:38 - attributes inside our schema so we can
06:40 - just copy and paste
06:41 - them here and for now i'm going to
06:44 - remove this read only attribute from
06:48 - here and because it's a json object we
06:51 - need to replace
06:53 - this semicolon by the commas
06:56 - right we can also fix all the auto
06:59 - fixable
07:00 - problems and this will be
07:04 - capital number because we are creating
07:06 - the
07:08 - db schema using mongoose right so
07:11 - you will use these data types
07:14 - now i can also add the car interface
07:18 - which i will use for the mongodb
07:22 - model or mongoose model so
07:25 - let's uh create the interfaces folder
07:29 - inside our car
07:30 - uh directory so i'm going to just write
07:34 - interfaces and then press enter which is
07:37 - going to
07:38 - just create this interfaces uh folder
07:42 - and inside the interfaces folder i'm
07:45 - going to just write car
07:47 - dot interface
07:50 - dot ts here i'm going to import the
07:53 - documents from the mongoose
07:58 - package so let's add a mongoose package
08:01 - and then we will add this document from
08:02 - mongoose
08:03 - and then i'm going to create an
08:06 - interface called
08:07 - icar for example so let's name it as
08:10 - i car which will extend
08:15 - so extends from
08:18 - document and here we can
08:21 - add the interface types which are id
08:26 - brand color and model same as our
08:29 - dto okay so once we have our
08:33 - uh interface and schema we can go to our
08:36 - services card.services.ts file and we
08:40 - are not going to
08:41 - uh use this logic anymore we will add
08:44 - the mongodb logic but first of all we
08:47 - need to
08:48 - add our schema and our
08:51 - interface right so let's add
08:54 - those things so i'm going to just import
08:58 - so first of all i'm going to import the
09:01 - model from the mongoose
09:04 - package and then i'm going to
09:08 - import the nest js
09:11 - mongoose package right so let me just
09:15 - add this next js mongoose package and
09:18 - from here i'm going to
09:19 - import the inject model okay
09:23 - and the next thing we want to
09:26 - import is the interface which we have
09:30 - created
09:31 - so i'm going to just import that
09:34 - interface and this will be the car
09:38 - interface and what we need to uh import
09:41 - icar and also let's import the dto
09:45 - because we are going to use that
09:47 - dto so let's import that
09:50 - which is called car dto and we need
09:53 - to import the car dto from there now in
09:56 - the constructor of our service so let's
09:59 - first of all delete all this logic which
10:01 - we have created
10:03 - in the previous video when we have seen
10:07 - how we can add
10:08 - the logic for all these uh
10:12 - method which are put car by id delete
10:16 - car by id
10:17 - post and then get cards right
10:20 - so let's remove all the logic from here
10:24 - and also we don't need this cars
10:27 - mock data so we can just remove that
10:30 - also so first of all we are going to add
10:34 - the constructor here and in the
10:36 - constructor in order to
10:38 - import the mongodb model which we have
10:42 - created
10:43 - using the schema we need to
10:46 - just add this decorator which is inject
10:50 - model and then inside these brackets we
10:53 - need to give
10:55 - the schema name which is
10:58 - car in our case i think so we are going
11:01 - to just write
11:02 - car here and then we are going to just
11:04 - write
11:05 - private read only
11:09 - the name of our model will be car
11:13 - model for example and the type of this
11:16 - uh
11:17 - model will be the model which we have
11:19 - imported from the mongoose
11:21 - and then we can just write
11:25 - the i car here okay and also we need to
11:28 - add
11:29 - these curly brackets so this is how you
11:31 - can inject this car model
11:33 - inside your service and then we can
11:36 - implement car
11:37 - get cars method logic using
11:40 - this model so i'm going to just write
11:43 - const
11:45 - curves for example and then we can just
11:48 - write this
11:49 - dot car model which we have just
11:52 - injected
11:54 - and then we can use different methods
11:57 - so we want to find out all the cars so
12:00 - we can just write
12:01 - find and then we can just write
12:05 - exact and it's going to give us
12:08 - uh the list of all the cars and then
12:11 - we can just return this card so let's
12:15 - return this
12:16 - now of course you can again add the
12:18 - error handling
12:20 - here so here if the car is not
12:24 - found so if there is no
12:27 - cars and then also we can check
12:30 - if the first element is there inside
12:33 - our cars array otherwise it's not an
12:36 - array right so we can just check that
12:40 - and if we don't find this then
12:43 - we need to throw an error so we can just
12:46 - write through
12:48 - new uh http
12:52 - exception right and we can just
12:55 - uh give the first argument which is uh
12:58 - not uh found and the
13:01 - second argument will be 404 which is the
13:04 - status code
13:05 - right so this is how you can also add
13:08 - the error handling for your get cars
13:12 - now in the post car method
13:15 - what we want to do we want to post the
13:19 - or save our car object so
13:22 - here we are going to just write const
13:26 - car is equal to await because
13:30 - we are using mongoose using async await
13:34 - so we need to add a sink here and then
13:38 - a weight here and then this dot car
13:42 - model dot whatever
13:45 - object we want to pass here so we want
13:47 - to pass
13:49 - the car so we have created the new
13:53 - car object and now we just need to save
13:57 - this data so i can just write
13:59 - return car
14:03 - dot save and this is going to save this
14:06 - data
14:07 - and here as an argument we can just
14:09 - write
14:10 - a new car because the name here is
14:14 - conflicting right so i'm going to just
14:16 - write new
14:18 - car here and then pass this parameter
14:21 - here
14:22 - so this conflict can be solved also i
14:25 - forgot
14:25 - to add a sink away here in the get cars
14:29 - so i'm going
14:30 - to just add that and then it's going to
14:33 - work
14:33 - now for the get car by id also we're
14:36 - going to use this kind of
14:38 - code so let's uh copy this code from
14:41 - here
14:42 - and also add a sink
14:45 - here and instead of using find
14:48 - we will just use a finder
14:52 - one method we just need to change uh
14:54 - find
14:55 - to find one because we want to
14:58 - find on the basis of the id so using
15:00 - this curly bracket
15:02 - i will just use id here and it's going
15:05 - to
15:05 - find the data based on this id
15:09 - because we are just searching for only
15:12 - one
15:12 - data so it will not be an array so we
15:15 - can use
15:16 - other logic for that which is like this
15:18 - if there is no car found then we can
15:21 - throw an error otherwise we will return
15:24 - the result
15:25 - you can use the same code for delete car
15:28 - by id
15:29 - we just need to add a sync
15:33 - here and instead of find one
15:36 - we use delete one
15:40 - delete one right how do we know that the
15:43 - car is deleted
15:44 - we know this by using car dot delete
15:48 - count so car dot delete
15:51 - [Music]
15:52 - count if this delete count is equal to 0
15:55 - that means our
15:57 - data is not deleted then we can throw
15:59 - the
16:00 - not found error otherwise we can return
16:03 - the car right and the last method will
16:07 - be once again put carbide so a sink
16:10 - here once again we can use the same
16:13 - logic we just need to
16:14 - change this method here so let's use
16:17 - this
16:18 - logic instead of using find one we will
16:21 - just use
16:22 - find one and update method so just right
16:25 - find one and
16:27 - update and we want to find
16:31 - the result by id which is
16:34 - ok and the second argument here will be
16:37 - what we want to update so we want to
16:39 - update
16:39 - a single property inside that object
16:43 - right so
16:43 - based upon the property name we will be
16:46 - able to change it
16:48 - so i'm going to just add this
16:51 - curly bracket and then i'm going to
16:54 - add the square bracket and based upon
16:56 - the property name
16:57 - i want to change the value from here let
17:00 - me fix
17:01 - all the eslint errors
17:04 - and now we have all the methods also if
17:07 - you want to add
17:08 - the type to your car
17:12 - parameter here to the postcard argument
17:15 - you can add the type to your car right
17:19 - also we can add the promise type here
17:22 - also so i'm going to just write
17:25 - promise and the type here will be
17:29 - car dto but it will be an array of
17:32 - card dto right and in the get
17:36 - [Music]
17:37 - cards by id we are returning only the
17:40 - car
17:41 - d2 which is the same single uh result
17:44 - right
17:44 - so in car get cars we are returning the
17:46 - array of car dto
17:48 - type and in the get car by id we are
17:51 - returning
17:52 - a car same you can do for a delete car
17:55 - by id
17:57 - and you can do the same for the put car
18:00 - by id
18:01 - now there is one last step which is
18:03 - remaining which we want to
18:05 - do in the car.module.ts file so
18:08 - go to the car.module.ts file
18:11 - and here we are going to import
18:15 - some nest packages and we are going to
18:19 - first of all
18:20 - import the nest js mongoose
18:24 - and from the nesgus mongoose we want to
18:26 - import
18:27 - a module called mongoose module
18:30 - and also we need to import our schema
18:34 - right so we will just go to
18:37 - our schemas and import our mongodb
18:41 - schema from there
18:43 - so car schema and then we can just
18:46 - import this and and now we can import
18:50 - our mongodb schema inside our car
18:53 - module so you can just add imports
18:57 - and using this square bracket
19:00 - you can add the mongoose module
19:04 - and mongoose module and then inside
19:07 - mongoose module you need to
19:08 - use the for feature method
19:12 - and then as the parameter for this for
19:15 - feature
19:16 - we need to add the parameters as an
19:19 - array so the first element here will be
19:22 - the name
19:23 - say name is a car in our case and the
19:26 - second argument here will be the
19:28 - schema so schema is the schema which we
19:32 - have imported which is card schema
19:35 - and also add the comma here and
19:38 - we can just resolve all eslint
19:42 - problems hopefully it's going to work so
19:44 - let's run
19:45 - our code and let's see if everything
19:48 - works or not
19:49 - so i'm going to just write npm start
19:52 - and let's see if it works or not right
19:54 - now
19:55 - our app is started we can go to our
19:59 -  client also and see if there is
20:02 - any database created or not so right now
20:05 - till now
20:06 - until the start of the app there is
20:08 - nothing created here so let's uh
20:12 - use our uh postman to post
20:15 - something so i'm going to just post
20:19 - one other car with the id 2
20:22 - and brand color and model let's send
20:24 - this request
20:26 - and you can see that now
20:29 - we have added this into our database
20:33 - and we also get the result with the id
20:36 - and hyphen hyphen v also so now this
20:41 - data is added to our database we can
20:43 - check it so
20:44 - once again i will just write show dbs
20:46 - now i can
20:47 - see that this database is created so i
20:50 - can use
20:50 - use car managers and then
20:54 - we can just write show
20:57 - collections to see all the collections
20:59 - we only have one collection which is
21:01 - cars which is okay
21:03 - and then we can write db dot our
21:06 - collection name which is
21:07 - cars dot find which is going to show you
21:11 - all the
21:13 - elements of your collection right
21:16 - so you can see there is one data which
21:18 - is added to our database which
21:20 - is the brand vw color red
21:23 - and model polo which we have added
21:26 - using this post request let's
21:30 - add one more element with id1 let's say
21:34 - brand will be bmw
21:37 - and the color will be something
21:41 - and the model will be bmw
21:45 - x and now i'm going to just send this
21:49 - request
21:50 - and you can see it's also added and
21:54 - now i can just use this find
21:57 - and now we can see there are two
21:58 - documents inside our
22:00 - mongodb collection so the put method is
22:03 - working
22:04 - let's see if get cars method is going to
22:08 - work so it's going to give us
22:09 - a list of all the cars and it works you
22:12 - can see
22:12 - we are getting the list of all the cars
22:16 - now we want to use the get car by id so
22:19 - i want to
22:22 - send this request which is for the car
22:25 - with the id one and it's going to give
22:27 - me
22:28 - the result that's working let's uh query
22:31 - for the car
22:32 - with the id2 it also works
22:36 - now i want to do some
22:39 - put method so let's say i want to change
22:42 - the
22:43 - property name color in the car id 2
22:46 - with the blue color right now the car id
22:49 - to have the color red
22:50 - right so let's send this request
22:54 - and you can see it's working or not
22:58 - working
22:59 - so still the color is red
23:02 - and we can also query here and
23:06 - here the color is changed to blue okay
23:09 - so this edit is working
23:13 - but somehow the result here is
23:16 - red because we are
23:20 - just sending let's go to the service
23:24 - because we are just sending our car
23:27 - which is found right so you can see
23:31 - our method name here is find one so it's
23:34 - going to find
23:36 - the uh document by id so it has found
23:39 - the document
23:40 - by id and return us the document which
23:43 - will be changed and then it will update
23:47 - the property okay so this is also
23:50 - working as expected right so
23:53 - inside our database its uh color is blue
23:56 - which is
23:57 - okay and let's use the delete method to
24:00 - delete
24:00 - this document so i want to delete the
24:03 - document
24:04 - with the id 2. let's send this request
24:07 - and you can see deleted count is equal
24:11 - to 1 that means
24:12 - it's deleted and that means when we go
24:15 - and query our database you can see
24:18 - we have only one document here okay so
24:21 - delete is also
24:23 - working this one little annoying thing
24:26 - which is you can see when we query for
24:29 - our data the default id which is created
24:33 - is also coming and this hyphen hyphen v
24:37 - is also coming
24:38 - so let's say we want to filter out these
24:40 - two things because
24:42 - for us these four elements are important
24:44 - and this
24:45 - is the unwanted data which is
24:49 - coming from the mongodb right so
24:52 - for this we can create the projections
24:56 - so in the car service go at the top
25:00 - and then we are going to just write
25:03 - const car
25:08 - projection and then is equal to
25:11 - curly bracket and here we can just add
25:14 - whatever
25:15 - projection we want so we want to filter
25:17 - out hyphen hyphen v
25:19 - so we can just write hyphen knife and v
25:22 - false also we want to
25:26 - filter out the id so underscore id
25:30 - and then it will be also false
25:33 - okay so this is our projection and this
25:36 - projection
25:38 - we can add to the get cards methods
25:42 - here as the second argument so we are
25:44 - going to just
25:46 - add a blank curly bracket here and as
25:50 - the second argument of the find
25:52 - we can add this projection also in the
25:55 - get
25:55 - cards by id we can add as the second
25:58 - argument
25:58 - the scars projection or this projection
26:01 - is going to filter out the underscore
26:03 - underscore v and underscore id
26:05 - from your result so let's run our
26:09 - app once again i'm going to stop and
26:11 - rerun it
26:13 - and once it's going to run we will see
26:15 - if our projection is working or not
26:19 - so it's running now let's get all the
26:22 - data
26:23 - so previously as you can see we were
26:25 - getting underscore underscore id
26:27 - and underscore hyphen v let's send this
26:30 - again
26:30 - now we have only the data which we want
26:34 - because we have added the filter for
26:36 - that using projections
26:37 - right so i think that's it for this
26:40 - video
26:41 - i hope you enjoyed this video and i will
26:43 - see you in the next video

Cleaned transcript:

hey guys welcome to the next video on nest js tutorial for beginners in the previous videos we have seen how we can create our nest js project and how we can add the end points uh to our nest js framework now in this video we are going to discuss about how we can add the mongodb support to our nest js api so we are going to start with the installation of the required packages so i'm going to just write npm i hyphen hyphen save and then you need to add these two packages which is nest js forward slash mongoose and the mongoose package itself so mongoose okay and then press enter now once you are done with the installation of the packages we are going to go to the main app.module.ps so this is the app.module.ts and here we are going to first of all import some packages from the nest mongoose package and which module we want here we want to uh import the mongoose module from the nest js mongoose package okay and once you have this you can use this mongoose module in order to connect to your mongodb database so here you can see under modules we have imported already our car module which we have created previously and now we can also add the support for the mongoose module so just copy this mongoose module dot in mongoose module you have a few methods so we are going to use this method which is called for root which is going to take your mongodb uri as an argument so if you are familiar with mongoose or mongodb we can connect to our database using this uris so here as the uri i'm going to just write mongodb and then colon forward forward slash localhost because i will be using my uh mongodb which is running on my uh local host and then the name of your database so let's name our database as a car manager okay also you can add some of the options which mongoose takes at the time of the connection but we are going to add these later if we require them okay now what i uh i'm using is i'm using the docker instance of mongodb you can install mongodb locally or if you are running a mongodb on a server you can provide the uri of that server also right so for now i will be using the docker to use on my mac machine and the command for this is docker run hyphen p this is the port mapping of on which we are going to listen using the local host and this will be the location where we are going to save our data in our local machine using the docker right so let's run this you can also write the hyphen d here to run this mongodb container in the detached mode but i will run it as a separate instance so you can see it's running and now i'm going to open a new terminal and i will just write docker ps here and you can see this mongodb instance is already running so i'm going to just write docker exact hyphen i t and the name of the container or container id also you can give and then space bash so using this command we are just opening the bash terminal inside the container right now i can just give the command in order to connect to my mongodb and here i can just say show dbs and it's going to show me the list of all the databases so right now it has these three databases which are created by default and when we are going to run our app it's going to create this uh database also okay so now we have our database connection now we are going to create the schema for our mongodb so for that i can create a separate file inside this car directory or i will create a folder let's say and i will name it as schemas and inside the schemas folder i will add all my schemas so the first schema will be car schema dot ts for example and here i will first of all import the mongoose package so import asterix as mongoose from mongoose right so because we want to create the db uh schema using mongoose we will import this package and then we are going to just create the schema so i'm going to just write export then const and then the name of my schema will be let's say car schema and we are going to create a new schema so i'm going to just write new mongoose dot uh schema and then we are going to uh add our schema inside these parenthesis so i'm going to just add these curly brackets and then we can add our schema here so what we have in our schema so in our schema we have we can see the dto so we are going to use the same attributes inside our schema so we can just copy and paste them here and for now i'm going to remove this read only attribute from here and because it's a json object we need to replace this semicolon by the commas right we can also fix all the auto fixable problems and this will be capital number because we are creating the db schema using mongoose right so you will use these data types now i can also add the car interface which i will use for the mongodb model or mongoose model so let's uh create the interfaces folder inside our car uh directory so i'm going to just write interfaces and then press enter which is going to just create this interfaces uh folder and inside the interfaces folder i'm going to just write car dot interface dot ts here i'm going to import the documents from the mongoose package so let's add a mongoose package and then we will add this document from mongoose and then i'm going to create an interface called icar for example so let's name it as i car which will extend so extends from document and here we can add the interface types which are id brand color and model same as our dto okay so once we have our uh interface and schema we can go to our services card.services.ts file and we are not going to uh use this logic anymore we will add the mongodb logic but first of all we need to add our schema and our interface right so let's add those things so i'm going to just import so first of all i'm going to import the model from the mongoose package and then i'm going to import the nest js mongoose package right so let me just add this next js mongoose package and from here i'm going to import the inject model okay and the next thing we want to import is the interface which we have created so i'm going to just import that interface and this will be the car interface and what we need to uh import icar and also let's import the dto because we are going to use that dto so let's import that which is called car dto and we need to import the car dto from there now in the constructor of our service so let's first of all delete all this logic which we have created in the previous video when we have seen how we can add the logic for all these uh method which are put car by id delete car by id post and then get cards right so let's remove all the logic from here and also we don't need this cars mock data so we can just remove that also so first of all we are going to add the constructor here and in the constructor in order to import the mongodb model which we have created using the schema we need to just add this decorator which is inject model and then inside these brackets we need to give the schema name which is car in our case i think so we are going to just write car here and then we are going to just write private read only the name of our model will be car model for example and the type of this uh model will be the model which we have imported from the mongoose and then we can just write the i car here okay and also we need to add these curly brackets so this is how you can inject this car model inside your service and then we can implement car get cars method logic using this model so i'm going to just write const curves for example and then we can just write this dot car model which we have just injected and then we can use different methods so we want to find out all the cars so we can just write find and then we can just write exact and it's going to give us uh the list of all the cars and then we can just return this card so let's return this now of course you can again add the error handling here so here if the car is not found so if there is no cars and then also we can check if the first element is there inside our cars array otherwise it's not an array right so we can just check that and if we don't find this then we need to throw an error so we can just write through new uh http exception right and we can just uh give the first argument which is uh not uh found and the second argument will be 404 which is the status code right so this is how you can also add the error handling for your get cars now in the post car method what we want to do we want to post the or save our car object so here we are going to just write const car is equal to await because we are using mongoose using async await so we need to add a sink here and then a weight here and then this dot car model dot whatever object we want to pass here so we want to pass the car so we have created the new car object and now we just need to save this data so i can just write return car dot save and this is going to save this data and here as an argument we can just write a new car because the name here is conflicting right so i'm going to just write new car here and then pass this parameter here so this conflict can be solved also i forgot to add a sink away here in the get cars so i'm going to just add that and then it's going to work now for the get car by id also we're going to use this kind of code so let's uh copy this code from here and also add a sink here and instead of using find we will just use a finder one method we just need to change uh find to find one because we want to find on the basis of the id so using this curly bracket i will just use id here and it's going to find the data based on this id because we are just searching for only one data so it will not be an array so we can use other logic for that which is like this if there is no car found then we can throw an error otherwise we will return the result you can use the same code for delete car by id we just need to add a sync here and instead of find one we use delete one delete one right how do we know that the car is deleted we know this by using car dot delete count so car dot delete count if this delete count is equal to 0 that means our data is not deleted then we can throw the not found error otherwise we can return the car right and the last method will be once again put carbide so a sink here once again we can use the same logic we just need to change this method here so let's use this logic instead of using find one we will just use find one and update method so just right find one and update and we want to find the result by id which is ok and the second argument here will be what we want to update so we want to update a single property inside that object right so based upon the property name we will be able to change it so i'm going to just add this curly bracket and then i'm going to add the square bracket and based upon the property name i want to change the value from here let me fix all the eslint errors and now we have all the methods also if you want to add the type to your car parameter here to the postcard argument you can add the type to your car right also we can add the promise type here also so i'm going to just write promise and the type here will be car dto but it will be an array of card dto right and in the get cards by id we are returning only the car d2 which is the same single uh result right so in car get cars we are returning the array of car dto type and in the get car by id we are returning a car same you can do for a delete car by id and you can do the same for the put car by id now there is one last step which is remaining which we want to do in the car.module.ts file so go to the car.module.ts file and here we are going to import some nest packages and we are going to first of all import the nest js mongoose and from the nesgus mongoose we want to import a module called mongoose module and also we need to import our schema right so we will just go to our schemas and import our mongodb schema from there so car schema and then we can just import this and and now we can import our mongodb schema inside our car module so you can just add imports and using this square bracket you can add the mongoose module and mongoose module and then inside mongoose module you need to use the for feature method and then as the parameter for this for feature we need to add the parameters as an array so the first element here will be the name say name is a car in our case and the second argument here will be the schema so schema is the schema which we have imported which is card schema and also add the comma here and we can just resolve all eslint problems hopefully it's going to work so let's run our code and let's see if everything works or not so i'm going to just write npm start and let's see if it works or not right now our app is started we can go to our client also and see if there is any database created or not so right now till now until the start of the app there is nothing created here so let's uh use our uh postman to post something so i'm going to just post one other car with the id 2 and brand color and model let's send this request and you can see that now we have added this into our database and we also get the result with the id and hyphen hyphen v also so now this data is added to our database we can check it so once again i will just write show dbs now i can see that this database is created so i can use use car managers and then we can just write show collections to see all the collections we only have one collection which is cars which is okay and then we can write db dot our collection name which is cars dot find which is going to show you all the elements of your collection right so you can see there is one data which is added to our database which is the brand vw color red and model polo which we have added using this post request let's add one more element with id1 let's say brand will be bmw and the color will be something and the model will be bmw x and now i'm going to just send this request and you can see it's also added and now i can just use this find and now we can see there are two documents inside our mongodb collection so the put method is working let's see if get cars method is going to work so it's going to give us a list of all the cars and it works you can see we are getting the list of all the cars now we want to use the get car by id so i want to send this request which is for the car with the id one and it's going to give me the result that's working let's uh query for the car with the id2 it also works now i want to do some put method so let's say i want to change the property name color in the car id 2 with the blue color right now the car id to have the color red right so let's send this request and you can see it's working or not working so still the color is red and we can also query here and here the color is changed to blue okay so this edit is working but somehow the result here is red because we are just sending let's go to the service because we are just sending our car which is found right so you can see our method name here is find one so it's going to find the uh document by id so it has found the document by id and return us the document which will be changed and then it will update the property okay so this is also working as expected right so inside our database its uh color is blue which is okay and let's use the delete method to delete this document so i want to delete the document with the id 2. let's send this request and you can see deleted count is equal to 1 that means it's deleted and that means when we go and query our database you can see we have only one document here okay so delete is also working this one little annoying thing which is you can see when we query for our data the default id which is created is also coming and this hyphen hyphen v is also coming so let's say we want to filter out these two things because for us these four elements are important and this is the unwanted data which is coming from the mongodb right so for this we can create the projections so in the car service go at the top and then we are going to just write const car projection and then is equal to curly bracket and here we can just add whatever projection we want so we want to filter out hyphen hyphen v so we can just write hyphen knife and v false also we want to filter out the id so underscore id and then it will be also false okay so this is our projection and this projection we can add to the get cards methods here as the second argument so we are going to just add a blank curly bracket here and as the second argument of the find we can add this projection also in the get cards by id we can add as the second argument the scars projection or this projection is going to filter out the underscore underscore v and underscore id from your result so let's run our app once again i'm going to stop and rerun it and once it's going to run we will see if our projection is working or not so it's running now let's get all the data so previously as you can see we were getting underscore underscore id and underscore hyphen v let's send this again now we have only the data which we want because we have added the filter for that using projections right so i think that's it for this video i hope you enjoyed this video and i will see you in the next video
