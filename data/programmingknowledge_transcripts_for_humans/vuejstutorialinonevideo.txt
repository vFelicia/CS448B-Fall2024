With timestamps:

00:00 - hello everyone welcome to new tutorial
00:01 - series on ujs
00:03 - so vue.js is a progressive javascript
00:05 - framework
00:06 - so why we just get started github link
00:09 - you can move to the github repository of
00:11 - the ujs
00:13 - and before we start this tutorial uh
00:15 - what view js provides us
00:16 - like vue.js is used at front-end
00:20 - or you can say is also say at
00:22 - client-side development
00:24 - so you just use that front-end or
00:26 - client-side development
00:28 - and it is approachable since you already
00:30 - know html and css for vanilla javascript
00:33 - you can read the guide and start
00:34 - building apps within things in no time
00:37 - once it does it like you can use a view
00:39 - js between a library or a fully
00:42 - featured framework so it's up to your
00:44 - choice that what
00:45 - how do you want to use the new js uh it
00:47 - is you you can use it as a library or a
00:49 - fully featured web framework
00:52 - uh it is performant it has a 20 kb
00:54 - minimum size
00:55 - uh blazing fast virtual dom that is a
00:58 - document object model
00:59 - and minimal operation of minimum of
01:02 - optimization
01:02 - efforts so like it's
01:06 - easy to use quick learning uh view js
01:09 - is incompatible in competition with
01:12 - angular
01:12 - and react and the quality view gs has it
01:16 - that it has fast learning curve that you
01:19 - can
01:19 - very fastly learn view just start
01:22 - building apps in no time
01:23 - and it is comparatively easy to learn
01:26 - uh than other frameworks so that was
01:28 - that is the quality view js has
01:30 - so it's up to you you can use any
01:32 - front-end framework like angular react
01:34 - view
01:35 - but view js has like it's up to you but
01:37 - uh view js has a
01:38 - better learning curve that you can learn
01:40 - view in a very fast way and start
01:43 - building
01:43 - apps and this would give you the
01:45 - architecture
01:46 - about how client side development of
01:49 - content development is done
01:50 - so next before we start this tutorial
01:54 - so you can refer to this github link
01:57 - this is the repository where you can
01:58 - refer all the codes
02:00 - for this tutorial for this series the
02:03 - title would be getting started
02:04 - with vujs and description will
02:08 - will be like we will learn how to
02:10 - install view js and render a simple view
02:12 - comp component
02:13 - at front end so you can create a
02:17 - folder in your vs code and start with
02:19 - the html file that is index1.html
02:23 - so before that what you can do uh you
02:26 - can
02:27 - start html page like uh
02:32 - you can simply start with html tag an
02:35 - html tag will have a header
02:38 - and this header is like learn
02:41 - view perfectly fine
02:46 - learn view inside this you can
02:49 - put this inside title
02:54 - okay so i'll cut this paste it
02:58 - yes and you can right click here and
03:02 - what you can do you can click on format
03:04 - document
03:05 - for the better orientation and then you
03:07 - can have a body type
03:11 - perfectly fine and inside like
03:15 - you can type paragraph is equal to hello
03:18 - world
03:19 - i like hello vue.js
03:22 - a simple paragraph and you can come to
03:25 - this page and refresh this page so you
03:27 - will see hello vue.js
03:29 - uh so this is just foreign this is very
03:32 - static
03:33 - so we can render this the same component
03:35 - via view js
03:36 - and for that we would render a view
03:38 - component on our front end
03:40 - so what we can do you can start on get
03:42 - start page
03:44 - and you will find the view function so
03:47 - just
03:47 - make sure this you are browsing for
03:48 - documentation to point x
03:50 - uh because we will start learning with
03:53 - view js to point
03:54 - x and then we will uh like when we
03:58 - advance a level then we can see how the
04:00 - implementation three three point x is
04:02 - done but basically
04:03 - for your learning you can refer the view
04:06 - change to point x
04:07 - so what you can do you can uh here
04:10 - on the left hand side you can see the
04:12 - installation part and
04:14 - you can click on installation so the
04:16 - simplest way to install vue.js
04:18 - is to just copy the cdn so cdn is works
04:21 - as
04:21 - like a javascript uh script source
04:25 - but like there are two types of seed in
04:27 - here the one
04:28 - is like for prototyping or learning
04:30 - purposes you can use the latest version
04:33 - and for the production we recommend this
04:35 - uh like
04:36 - just what's the difference between the
04:37 - prototyping and learning purpose is like
04:39 - this will show the uh errors at your
04:42 - side
04:43 - like if you are using uh the what we
04:46 - like if you're using for the development
04:48 - so here you can see with full warnings
04:50 - and debug mode
04:52 - okay so like development version has
04:54 - with full warnings and debug mode
04:56 - the debug mode and in the production
04:59 - version we have warning script
05:00 - plus it is performed wise optimal but uh
05:03 - just in different
05:04 - mode when you are in like development
05:06 - mode or development version you can use
05:08 - one with the full warnings and debug
05:10 - mode it will help your code
05:12 - it will help you to debug your code very
05:14 - faster so you can copy this
05:17 - this one you can copy this and put this
05:20 - inside your body tag
05:21 - but make sure you put this at the end of
05:23 - the body
05:24 - okay now for like i'll show you
05:28 - uh just for the like view appearance
05:32 - you said zoom yes so here you can see
05:34 - you i've put this
05:35 - at the end of my body now i'll zoom this
05:38 - for the better view
05:39 - of see okay now you can see uh
05:42 - yeah now you can see uh i have put this
05:45 - at the end of my body
05:46 - okay and now i'll put a
05:51 - another script tag script
05:56 - and i'll type
06:03 - uh i'll start with this
06:06 - console dot log
06:10 - script just for my
06:13 - learning purpose script started
06:18 - and when i move to my browser i'll
06:21 - refresh this play
06:22 - page and i'll press ctrl shift i
06:25 - either you can do inspect or ctrl shift
06:27 - i when i see here it says script started
06:30 - and you can see
06:31 - download the view depth tools extension
06:33 - of that experience and like
06:35 - it's it is now the view js is opening in
06:37 - development mode
06:38 - so that's particularly particularly fine
06:40 - so just for the confirmation you can see
06:43 - that the view js has been installed and
06:44 - now it's running now how
06:48 - a particular now before we get uh before
06:51 - we
06:51 - get to this so first i create a div
06:54 - inside my body
06:56 - and what i'll give div
07:00 - id is able to my app
07:05 - and what i'll do i close this day
07:08 - so i have a div with id my app now i'll
07:11 - i'll
07:12 - for this now id is very important with
07:14 - respect to vue.js
07:16 - i'll render a view component referring
07:18 - to this id
07:20 - so just for the demonstration
07:25 - my view js component
07:28 - will point towards the id okay
07:32 - so it will point towards the id in the
07:34 - html
07:36 - page okay so
07:39 - here you can see my view js component
07:41 - will
07:42 - will point towards the id in the html
07:44 - page and will render the component for
07:47 - the same
07:47 - okay so this is you can make a note of
07:50 - this thing that ugs
07:51 - component will point towards the id in
07:53 - the html page and will render a
07:55 - component for that only
07:56 - okay now so that's perfectly fine
08:00 - so let's move to the code now what you
08:03 - can do
08:04 - you'll create a component view js
08:07 - component so how will
08:08 - how we will we will do that so i'll show
08:11 - you how
08:12 - now what you can do uh just for
08:15 - this tutorial i'm creating a script
08:17 - inside the html page
08:19 - so this would give you a better view
08:22 - okay now what you can do
08:27 - constant my
08:30 - view component constant my view
08:34 - component
08:37 - okay so this is work as a uh like it
08:41 - will have a new
08:43 - view it will have a view constructor
08:46 - and it will take a json object so inside
08:49 - a json object i will have
08:51 - three things like one is going to the
08:55 - element which would refer to the id okay
08:58 - this would refer to the id
09:00 - then i would have a data
09:03 - data so data would be like uh have a
09:06 - json object so it will have all the data
09:10 - and then third thing i would have a
09:12 - method
09:15 - so this is how a particular view
09:18 - component looks like
09:20 - so my view component is a new view okay
09:23 - it calls a view constructor and it will
09:25 - take a json object
09:26 - and it will have an element would you
09:28 - refer to the id
09:29 - it will have a data and it will have
09:31 - methods okay
09:33 - so what you can do uh my element would
09:36 - refer to the
09:36 - id so the id is my app so i would copy
09:40 - this
09:40 - i have simply pasted here my app now i
09:43 - will have a title
09:46 - title is equal to learn
09:50 - view learn view js
09:54 - okay you done ugs
09:59 - and you can also have a
10:02 - like paragraph graph
10:08 - okay inside
10:11 - vs code okay or you can say learn ugs
10:17 - using vs code okay now
10:20 - let the methods will remain empty before
10:22 - this time and
10:23 - inside my app what i can do when i have
10:26 - my view component refers to the id
10:30 - so this is my id my app now i can render
10:33 - this
10:34 - data inside of that id that i can
10:37 - render this view component inside that
10:39 - id so
10:41 - i will put title here
10:45 - and i'll use h1 tag title
10:48 - perfectly sorry
10:52 - so this is the title and for this i'll
10:56 - use
10:56 - paragraph and i'll use para
11:00 - graph okay graph is like
11:03 - this so now this should work perfectly
11:06 - fine i'll refresh this page
11:09 - okay cannot find the element my app okay
11:12 - i did a mistake
11:14 - since this was an id i had used to i
11:16 - used to like
11:17 - what i told you that this production
11:19 - version sorry this
11:20 - uh really sorry for this this
11:22 - development version
11:23 - is left with full warnings and demo mode
11:25 - so since this is in development mode so
11:28 - it will provide all the warnings and
11:30 - in the all the warnings and it will be
11:32 - in double debug mode
11:33 - so you can click on this line
11:36 - so this would like you can
11:40 - refer to this so where it has shown
11:42 - error
11:43 - and cannot find the element my app so
11:45 - let's put a
11:46 - sense it was an id you had to put a hash
11:48 - symbol
11:50 - okay let's refresh this page so here you
11:52 - can see
11:54 - learning view js using vs code so
11:57 - this is perfectly fine i've got my
11:59 - result and the script had started
12:01 - and to make sure what you can do you can
12:04 - also copy this and say
12:08 - script
12:10 - like script ended
12:14 - okay so let's refresh this bit it says
12:17 - script started as script
12:18 - ended and you can refer to this client
12:20 - it will show you console.block script
12:22 - ended
12:23 - and this is like how our view component
12:25 - looked
12:26 - so you can also click on my view
12:28 - component
12:30 - and when i type this here you can see
12:32 - you get whole
12:33 - lot of things and inside here
12:37 - you can see that element is given my app
12:39 - so here it refers to this
12:40 - id and this is how you can
12:44 - have a look at this and myviewcomponent
12:50 - dot dollar sign you can put
12:53 - data and here you can see that i have a
12:57 - data
12:58 - and it says a paragraph and title
13:02 - so you can refer to this my view
13:04 - component
13:06 - dot data dot
13:09 - title and see you guys
13:13 - learn new js now i'll show you one thing
13:15 - you can put put the upper
13:16 - key arrow key and i'll put
13:20 - a new title new title
13:24 - and you will see that as soon as i press
13:27 - enter
13:28 - this title would change without
13:30 - refreshing the page
13:31 - so it will only prepare the day see
13:35 - i'll put it yes yes as soon as i click
13:39 - my view component.data.title is a new
13:41 - title
13:42 - and changes to new title once again in
13:44 - the same way
13:46 - you can change the paragraph also so you
13:49 - can refer to this github
13:50 - link that is github.com pro software
13:53 - development
13:54 - learn view you will get all the codes
13:56 - related to this series
13:57 - video series on this repository the
14:00 - title this
14:00 - video is working with the view component
14:03 - and we will learn how to bind id data
14:05 - and methods
14:06 - inside a view component so let's get
14:08 - started with this tutorial
14:10 - before i start i'll give you a quick
14:11 - reminder how view js works
14:14 - so basically vue.js
14:18 - has a has a component
14:22 - component uh which is a view component
14:26 - okay i'll say a view js has a view
14:28 - component
14:30 - which refers to the id of the html
14:35 - html page to render it
14:39 - uh why we refer to id because its id is
14:42 - a unique thing
14:43 - so we don't have any conflict that which
14:46 - we
14:47 - don't have any ambiguity to avoid
14:49 - ambiguity we have an id that is unique
14:51 - for the html element so it helps the
14:54 - view component to
14:56 - render on the html part using an id so
14:59 - that's pretty simple
15:01 - now what you can do you will create a
15:04 - new html page that
15:05 - index.html in the previous tutorial i
15:08 - had created index1.html and you can
15:10 - add the vue.js script inside your it
15:14 - inside your body tag but make sure that
15:17 - it should be at the end of the body tag
15:18 - not before it
15:20 - so this makes like it will perfectly
15:23 - render everything
15:24 - so the title is learn youtube and we
15:27 - will give a create a view component
15:30 - constant
15:33 - view component to okay i'll say
15:37 - constant view
15:40 - component 2
15:43 - is equal to new view it will call the
15:46 - view constructor
15:47 - and the view constructor has a json
15:49 - object perfectly fine
15:51 - so now you can see it has a json object
15:53 - now and what i'll do
15:54 - i'll press enter it has three things
15:56 - that element
15:59 - which will have the id
16:02 - and then it will have a data
16:07 - which will be in in itself a json object
16:12 - and then it will have methods
16:16 - uh methods will be also a json object so
16:19 - if
16:20 - i remember all those three all these
16:22 - three things to put
16:23 - you are perfectly fine with the uh your
16:26 - view component
16:27 - so inside this i'll put a counter
16:34 - is equal to zero and inside this
16:38 - i'll call the method uh i'll call it
16:42 - increment counter
16:46 - okay and what i'll do uh
16:50 - i'll call them at a method increment
16:52 - counter and
16:53 - assuming just for example in the case
16:55 - that forget this as a view component uh
16:58 - treat it as a treat this as a class
17:01 - so if this is a class if this is a class
17:05 - so what you can that if this is a class
17:08 - and if you want to access the data
17:10 - of this class you can you access this
17:12 - wire this pointer
17:14 - so this dot
17:17 - counter
17:20 - plus plus so every time i click on it
17:23 - i'll increase the counter
17:25 - so to show this on the front end what
17:28 - i'll do i'll make a div
17:30 - div id is equal to my app too
17:36 - and then i'll close this day
17:39 - perfectly fine and what i'll do i'll
17:43 - i'll create a counter variable
17:47 - using the handles and i'll give this as
17:50 - h1 tag so i hope this is fine
17:54 - now what i'll do uh i'll
17:57 - what i'll do now what i'll do uh i have
18:00 - to refer this element
18:02 - to this id that is hash my app
18:05 - 2 now i'll go to the
18:08 - page and i'll refresh this
18:12 - it says 0 as a counter perfectly fine
18:15 - but
18:15 - uh what does does something happen on
18:17 - the click nothing happens because
18:19 - for this i have to define a click
18:22 - function
18:23 - which can be defined as an add digit
18:25 - click is equal to
18:28 - increment counter
18:31 - so when i click on this it will
18:34 - increment
18:35 - the count i'll refresh this page
18:40 - and when i click this here you can see
18:42 - the count gets increased
18:44 - one by one by one so this is how you
18:47 - increment the counter
18:48 - now by this function that is at the
18:50 - click and the red click function
18:53 - you can achieve the same using v on
18:55 - click functionality as well
18:58 - okay now i'll show you a small example
19:01 - uh
19:02 - let me add another thing that is
19:05 - text is equal to hello
19:08 - world that is hello world
19:12 - and what you can do also you can add a
19:16 - flag is equal to false
19:22 - but you can click on flag is equal to
19:26 - true
19:27 - so what you can do you can call a method
19:31 - hide
19:35 - hide method and
19:38 - you what you can do a hide method can
19:41 - will change this flag okay
19:45 - this if
19:48 - the if condition here it will change
19:50 - that
19:51 - if this dot
19:54 - flag visible is equal to true
19:59 - then this dot flag is equal to false
20:06 - now this would change our flag if this
20:09 - dot flag is equal is equal to true then
20:11 - this dot flag is equal to false
20:13 - and how do you want to click
20:16 - that you can change this to okay first
20:19 - i'll show you one thing
20:20 - i'll change this to text
20:27 - okay perfectly fine now
20:30 - what i'll do i'll comment
20:34 - this out so the this code remains as
20:36 - well
20:37 - and okay actually there's no need to
20:41 - comment so
20:42 - let me remind this as it is so when i
20:44 - refresh this page
20:48 - uh okay this is the previous code
20:50 - working so as soon as i click the
20:51 - counter gets increased incremented
20:53 - so this is the previous code working
20:55 - when i refresh this page the new
20:57 - code gets our display so we get a text
20:59 - hello world but
21:00 - what i want to do i want to hide this on
21:02 - click
21:03 - so what i'll do i click
21:06 - hide method if this dot flag is equal to
21:09 - equal to true then this dot flag is
21:11 - equal to false
21:12 - and what i'll do here that
21:16 - at the on and the right click function
21:19 - i will call
21:22 - hide method perfectly fine
21:26 - but i'll put another condition that v
21:29 - if is equal to flat
21:32 - if this is true can i show this heading
21:35 - else
21:38 - if this is true then i show
21:41 - okay if it's false then i don't show and
21:44 - when this will turn into a chain
21:46 - turn to false when i click the hide
21:48 - method
21:49 - okay let me refresh this page i click
21:52 - here you go it's it's been hidden and
21:55 - how you can get back to this
21:57 - you can right click here and click on
22:00 - inspect
22:02 - so this would open the chrome inspector
22:04 - tools and
22:05 - inside this what you can do you can
22:08 - refer to this view component what do you
22:12 - look
22:13 - view okay
22:18 - you can refer this view component to
22:20 - dollar data
22:21 - dot flat which will return your the
22:24 - existing value
22:26 - okay so what you can do
22:29 - in just a second sorry
22:35 - i'll click on console new component
22:39 - to dollar data
22:43 - dollar flag which is false
22:47 - and i'll change this to true
22:50 - and i'll get the value back when i
22:52 - change this to false
22:54 - it gets hidden again so the true false
22:56 - stock value was
22:58 - done by this high method functionality
23:01 - so let's get started with today's
23:02 - tutorial so you can move to your vs code
23:06 - and like in the previous two tutorials
23:09 - we created
23:10 - this uh like index1.html and index2.html
23:14 - what you can do you can copy this
23:17 - content
23:19 - and paste it here and what we will do
23:23 - we would change this to learn view three
23:27 - and we will remove this body tag
23:31 - okay what i'll do i'll click on view
23:33 - appearance
23:34 - and reset zone so this would reset my
23:38 - zoom and
23:39 - so that i can show you what's the best
23:42 - possible view so we have a
23:45 - template index three index three dot
23:48 - html so we will continue with the third
23:51 - tutorial today so that is the index
23:53 - three dot html and learn view three
23:55 - like this is the tutorial number three
23:57 - so
23:58 - you can refer to your browser and
24:01 - refresh the page
24:02 - and you will get the page as desired
24:04 - result and you can right click here
24:07 - inspect element and you will see the
24:09 - development version of the
24:11 - vue.js is running in the console so
24:14 - let's get started with this
24:16 - so what you can do
24:21 - you can create a div with an id
24:26 - dave id okay i'll zoom this
24:30 - yes dave id
24:34 - is equal to oh you can define a
24:38 - div for the ids such as
24:41 - my app three and you can now close the
24:45 - div
24:47 - and now you can create a view component
24:51 - referring to this
24:52 - id it's a constant
24:56 - view component so
25:00 - what i'll give a short notation bc3
25:03 - so this is view component three is all
25:06 - the new view
25:10 - okay you can give this on any name so
25:12 - i'll give a decent name
25:13 - view
25:17 - component okay so this is view component
25:22 - so yeah perfectly fine now i have three
25:25 - things
25:26 - element which refers to
25:31 - hash my app3
25:35 - then i have a data
25:39 - refers to uh you can have a data
25:43 - plus the methods
25:47 - plus the methods
25:50 - okay so let's uh we can
25:53 - keep a simple data that is
25:56 - we should keep a simple data that is
25:59 - uh text
26:02 - is equal to hello world hello
26:06 - and we will render this data inside this
26:09 - date
26:12 - so when we refresh this page we would
26:15 - see the data here
26:16 - that is hello perfectly fine now what we
26:19 - are going to do
26:21 - what we are going to do we are learning
26:24 - the form binding
26:26 - so what we can insist on that
26:29 - we can create a form element the most
26:33 - simple being is
26:35 - input type is equal to text so let's
26:38 - do thing this this
26:43 - we will create an input input
26:47 - type is equal to text okay
26:51 - and what i'm going to do i'm going to
26:53 - remove this for the confusion
26:55 - to avoid any confusion and let this
26:59 - placeholder says
27:02 - uh like place orders enter
27:06 - enter something this is this
27:10 - and i can close this input
27:14 - perfectly fine okay when i refresh this
27:17 - page
27:17 - i'll see i have a input which says enter
27:21 - something and i have my console running
27:22 - at the right hand side
27:24 - now what you can do you can create
27:28 - something a variable known as message
27:32 - okay or my message
27:37 - which is empty okay and you can
27:42 - we model this message v
27:45 - model is equal to
27:49 - my message so when you give model this
27:53 - my message
27:54 - so it now binds this data
27:57 - to this input type is equal to text so
28:00 - what you can do
28:03 - uh what you can do you can do one thing
28:07 - you can move to the next line and
28:10 - what you can say yeah
28:14 - and what you can do you can click on
28:18 - my message so i hope what you i'm
28:21 - getting my point that uh
28:24 - in this input type text we i have binded
28:28 - this
28:28 - data to be modular to my message and i'm
28:31 - usually performing that
28:32 - my message is equal to this okay so
28:36 - what you can do also just for the sake
28:40 - i'll comment this out first i'll comment
28:42 - this out
28:44 - so that i give you a better idea of this
28:48 - okay now i'll change this my message to
28:52 - hello hello view
28:56 - js
28:59 - hello view gs
29:04 - and it says yeah okay i'm having some
29:08 - issue on this let me
29:14 - yes yeah now it's perfect comment yeah
29:18 - so now it was hello vue.js perfectly
29:20 - fine
29:21 - but what if i want to keep this dynamic
29:25 - how do i keep this dynamic let this be
29:27 - an empty string
29:28 - okay just to just i'll change this to
29:31 - hello
29:33 - js so this would refresh to hello gs
29:36 - perfectly fine
29:38 - now i'll keep this as dynamic
29:42 - i'll come uncomment out this
29:46 - and this also now
29:50 - i'll put this under the heading tag
29:54 - to give good view
30:06 - h1
30:09 - now as soon as that tends uh and also
30:12 - i'll do one thing as soon as i
30:14 - type something you will see this in the
30:16 - heading
30:17 - hello world
30:20 - it looks pretty good on the typing now
30:23 - i'll do
30:25 - type some text
30:29 - here java
30:32 - js programming
30:36 - and javascript programming and yeah here
30:38 - you can see that as soon as i type
30:39 - something and as soon as i type
30:41 - backspace you will remove something so
30:44 - this is one thing
30:46 - now another you can do is
30:49 - for check box so what you need to do you
30:51 - need to define
30:52 - input type here to check box
30:56 - placeholder doesn't exist in checkbox
31:00 - and in this now the data types becomes a
31:03 - boolean value
31:05 - so you type my flag
31:09 - is equal to false and you will remodel
31:14 - this
31:14 - with my flag and i'll
31:19 - say the value of my flag
31:23 - this is by default false now becomes
31:25 - true false
31:27 - true false true false true so this is
31:30 - just how you can
31:32 - check box uh you can be model with the
31:34 - checkbox
31:35 - so this is like basic for the
31:38 - uh this is like the basic part of the
31:41 - binding
31:42 - so we will carry on with some more
31:44 - binding in the next tutorial so thank
31:45 - you everyone
31:46 - for watching this tutorial you can try
31:50 - this out on one as well that is text
31:53 - area so i'll quickly show you
31:56 - text area so for
32:00 - that you can do v
32:03 - model is equal to
32:07 - text area message
32:10 - so text area message needs to be defined
32:13 - here
32:15 - inside the heading
32:21 - plus i need to define this here also
32:28 - yeah so here you can see
32:32 - hello java programming when i move to
32:36 - new line hello world so it gives the
32:38 - space
32:39 - so you can configure these things
32:42 - in depth also with working with the text
32:45 - area
32:46 - so this is how it works so this is like
32:50 - the what you can do so this is like
32:52 - pretty good for
32:54 - us like you can define all so hello
32:56 - world
32:57 - js programming
33:02 - so you can edit this thing plus you can
33:04 - increase the size of the text box
33:06 - like this so working with multiple check
33:08 - boxes in view this is the
33:10 - title of a video and the description is
33:12 - like we will how
33:13 - we will learn how to bind form having
33:16 - multiple check boxes
33:17 - component using view so today we will
33:20 - complete
33:21 - this in this tutorial and we will see
33:24 - how we can achieve this
33:26 - so what you can do uh you can
33:30 - what you can do so like we had made a
33:33 - few
33:34 - html files in the previous tutorials so
33:37 - we would
33:37 - we are going to continue with that and
33:41 - let's move with the tutorial so what you
33:43 - can do
33:45 - you can create an html uh heading
33:49 - and inside this you can give a head
33:51 - attack so from today we
33:52 - will try to we'll try to implement from
33:55 - scratch
33:55 - using in this in this era so this would
33:58 - help you
33:59 - help us to get back with the things so
34:02 - this is the title you can give
34:03 - and you can give this as learn view 4
34:06 - so this could be anything you can i'll
34:09 - give this a learn
34:10 - view for a view tutorial
34:13 - tutorial uh like all this blonde view
34:17 - tutorial tutorial
34:21 - number four so this is perfect
34:25 - so now inside the heading after the head
34:28 - we can have the
34:29 - body tag so body tag is this sorry
34:35 - so here comes the body tag and inside
34:38 - the body tag
34:39 - we'll put a script tag which would be
34:42 - this
34:44 - so yeah now we can run this page
34:49 - uh in our browser so let's uh
34:52 - move ahead and run this page in the
34:54 - browser so what we can do
34:56 - we can right click here and uh
34:59 - degree in file explorer so this would
35:02 - open the file in the explorer and then
35:04 - we can double click on this
35:07 - and we can open the uh our html file
35:10 - using the browser so here you can see
35:13 - that we can see the view tools uh
35:15 - the view you are running the view in
35:17 - development mode
35:18 - so this is perfectly fine what you can
35:21 - do now
35:22 - so we have a view just running so let's
35:25 - create a form
35:26 - and then we will have multiple check
35:28 - boxes in that form
35:30 - so let's do this so what you can i can
35:32 - do i can hide this
35:34 - yeah so perfectly fine so let's
35:37 - create a form first we'll create it
35:40 - there
35:41 - id is equal to fruits
35:45 - so this would have all the fruits in
35:47 - that so the option of the fruits so div
35:50 - id is equal to fruits
35:52 - and let's create a form so form
35:56 - uh so uh even what you can do
35:59 - we can for the timing you can ignore
36:01 - this form
36:02 - so okay if you want to uh like
36:06 - you can give it a form or like
36:09 - so let's uh so first what we can do
36:12 - let's let's do this without a form so
36:15 - first we'll
36:16 - give an input type is equal to check box
36:19 - so input
36:22 - type is able to check box id
36:28 - you can give this id is equal to apple
36:32 - and value
36:36 - value is equal to
36:40 - value is equal to you will get this
36:42 - apple
36:44 - okay and what you can do
36:49 - uh yeah perfectly fine and then
36:54 - you can give this a label so label is
36:58 - with respect to the id
37:00 - so label for
37:04 - apple and you can give this
37:07 - a label as apple
37:10 - so perfectly fine all right let's do let
37:12 - us
37:13 - give it a smaller so when you refresh
37:16 - this page
37:19 - so here you can see that we have got the
37:21 - apple check box that is here
37:23 - so perfectly fine so let's create a
37:27 - another check box for the
37:30 - other another foods that is input
37:35 - type is able to check box id is equal to
37:39 - mango
37:43 - and value will give a value
37:46 - value is equal to mango so perfectly
37:49 - fine and we will give
37:50 - a label label for
37:54 - mango and let's
37:57 - give this a value with a small mango and
38:00 - let's
38:01 - add another fruit uh we can add another
38:05 - fruit that is
38:06 - pineapple so that would be easy
38:10 - so let's add this yeah
38:15 - so input type
38:19 - again check box id is equal to pineapple
38:26 - and value is equal to find
38:30 - apple
38:33 - so though we can add a label for that
38:40 - and let's continue with the pineapple
38:46 - so perfectly fine so let's refresh this
38:48 - page
38:49 - here you can see we have three check
38:50 - boxes that is apple mango and
38:53 - pineapple so what we need to do so
38:56 - we need to render a view component
38:59 - with respect to this so let's
39:02 - do one thing so let's
39:06 - add a script tag
39:10 - so this is the script we have now
39:14 - what we can do constant view component
39:19 - component is what new view
39:23 - so we call the view constructor inside
39:25 - this view constructor we have a json
39:26 - object and that
39:28 - json object will have three elements
39:31 - okay
39:31 - so uh that is the element
39:36 - so we will define the id okay
39:40 - and that will have a data
39:43 - a data will have a json object perfectly
39:46 - fine
39:47 - and then we will have methods
39:54 - methods
39:56 - so so let's
40:00 - uh okay so let's give this id
40:03 - here we will do hash
40:06 - roots and then we refresh this page
40:12 - let us see okay
40:15 - so we can also do one thing we can do
40:18 - console
40:19 - dot log this view
40:22 - component
40:26 - so let's yeah now here you can see that
40:29 - i have console.log
40:30 - and it will have a dollar data
40:34 - uh yeah here you can see dollar data
40:36 - here this so this is perfectly fine
40:39 - so so this is perfectly fine
40:43 - what we can do we can have a data is
40:46 - equal to
40:48 - checked roots
40:52 - and this is going to be an empty array
40:56 - okay now we can again refresh this page
41:00 - and inside the dollar data we can see
41:04 - yeah this is this so yeah so we have an
41:08 - option check through statism
41:09 - of type array and the length here it is
41:12 - zero
41:13 - so what we can do we can we model this
41:17 - so what we need to do we need to add a
41:20 - line
41:21 - we because form winding is done using
41:24 - the v
41:25 - model command we can add v model is
41:27 - equal to
41:29 - checked roots so
41:33 - we can add this in the other three as
41:35 - well
41:41 - okay now what we can do
41:44 - we can add a heading h1
41:50 - and what we can do and add a break
41:53 - statement here
41:57 - and i'll render this
42:02 - and i'll put the value here
42:05 - checked fruits so let's refresh this
42:09 - page
42:11 - yeah so as i click on apple i get apple
42:13 - mango
42:14 - pineapple i remove pineapple i remove
42:18 - mango and
42:18 - remove apple so here you can bind the
42:21 - form
42:22 - uh sorry here you can like using check
42:25 - boxes you can achieve this
42:27 - and apple mango pineapple
42:31 - so i removed mango perfectly fine apple
42:34 - removed yeah
42:35 - pineapple removed pineapple added mango
42:37 - added
42:38 - apple so you can achieve this and
42:42 - what if i could give this replace this
42:44 - with the form so
42:45 - so let's try this out yeah
42:52 - so it works perfectly fine with the form
42:54 - as well
42:56 - okay so this is very much helpful in the
42:58 - form as well
43:00 - apple discrete mango pineapple yeah
43:05 - in this tutorial we are going to learn
43:06 - with working with radio button
43:08 - and select in view so we will learn how
43:11 - to bind a form
43:12 - having radio button and select component
43:14 - using view
43:16 - so we will let's start with the tutorial
43:18 - so
43:19 - you can create click on the button new
43:21 - file in your
43:22 - directory and you can name this as index
43:26 - 5 dot html so
43:29 - since this is a since we have
43:33 - like created a this is our fifth
43:35 - tutorial so we have
43:36 - we have worked on this so yeah
43:40 - so sorry for the interruption yeah so
43:43 - let's
43:43 - carry on with the tutorial so what we
43:46 - can do
43:47 - we can uh from the previous template we
43:49 - can
43:50 - control copy this select all using ctrl
43:54 - a and we can paste it here
43:57 - and what we'll do we'll do to change
43:58 - this to learn view tutorial number
44:01 - five and when we
44:04 - and we will remove all this script tag
44:08 - okay so we remove this script tag and we
44:11 - also remove the
44:12 - this body tag so yeah so let me
44:16 - close this file explorer yeah so
44:19 - we have a like a simple rock and
44:22 - raw html page with uh this view script
44:25 - added
44:26 - so what we can do so we can click on
44:29 - this
44:29 - open and reveal in file explorer
44:33 - and you can double click on this and
44:35 - close this
44:37 - so this will open the page in your yeah
44:40 - browser so like perfectly fine so what
44:43 - you can do you can
44:44 - click on right click and inspect to
44:46 - check whether view js is running or not
44:49 - on the console yeah it's perfectly
44:50 - running so what we need to do
44:52 - today we will learn about the radio
44:54 - buttons
44:56 - so what you can do
44:59 - yeah so you can add a radio button
45:03 - so let's create a div
45:07 - we'll create a form so form
45:11 - id is equal to
45:14 - so let this be my form
45:18 - and you can also do this without a form
45:20 - just for
45:21 - it will also work div id is equal to my
45:24 - form
45:25 - we can close this div
45:28 - yeah so what you can do
45:32 - what you can do uh you can create
45:35 - a uh like what you can do you can do
45:38 - input type
45:42 - is equal to radio and
45:45 - id
45:48 - easier to uh you can give it
45:52 - any id depending on your value so
45:56 - let's took this as male
45:59 - and because we are corresponding to the
46:01 - gender
46:02 - and the value is equal to male
46:06 - okay now what you can do
46:09 - we can create
46:15 - for mail
46:18 - and you can
46:21 - perfectly fine so this is mail
46:26 - and you in the same way uh you can do
46:29 - input type
46:32 - is equal to female oh sorry input type
46:35 - is go to radio
46:38 - and id would be female
46:45 - and what you can do id is about female
46:48 - and value
46:52 - is equal to female
46:56 - and you can do label
47:00 - for and this label could
47:04 - depend on the id so female would be the
47:06 - id
47:07 - and you can give the value email
47:15 - so this looks perfectly fine so when i
47:18 - move to the page
47:20 - i would refresh this
47:23 - and here you can see i have two options
47:26 - but
47:26 - you can right now you have you can see
47:30 - the this option isn't
47:33 - working with like the radio button out
47:35 - of the radio button it is like multiple
47:37 - choice question
47:38 - so you can select only one out of the
47:41 - choices
47:41 - now the choices could be any number of
47:44 - choices
47:45 - but you can choose only one so
47:48 - this isn't working right now the reason
47:50 - being
47:51 - that we have not used like
47:55 - what you can do one thing i'll tell you
47:57 - uh
47:58 - one thing you can do you can put a name
48:01 - tag
48:02 - and name is go to gender and you can put
48:05 - this name is called
48:06 - gender here also
48:10 - so okay just a minute
48:14 - i'll show you one thing okay let it just
48:17 - be this form
48:19 - so i'll close the editor yeah so right
48:22 - now
48:23 - i'll refresh this page so i can click
48:26 - uh all the choices that's and that isn't
48:29 - that
48:29 - is not that is not the use case of a
48:31 - radio button in the radio button you can
48:32 - choose select
48:33 - only one choice of the multiple only you
48:36 - can select only one choice
48:38 - of the multiple choices given to you so
48:40 - it is like a mcq multiple if you have an
48:42 - mcp question that is multiple choices
48:44 - you can choose and only one option so
48:47 - but this time we are you you're choosing
48:48 - to so this is invalid to remove that
48:50 - what you can do you can add a name you
48:52 - could just enter
48:53 - and name zero gender and you can refresh
48:56 - this page
48:56 - and now you can select only one
49:00 - out of the two but we are going to
49:02 - implement the same functionality using
49:04 - vue.js
49:05 - what we can do first we will create a
49:07 - view component constant
49:09 - view okay but before that we are going
49:12 - to create a script tag
49:15 - okay yeah perfectly fine so we'll look
49:18 - at the script tag
49:21 - yes so here is our script type and we'll
49:24 - do constant
49:27 - view component
49:31 - is equal to new so
49:35 - like spelling is wrong component
49:41 - so constant view component is go to new
49:44 - view
49:46 - and it will have a json object we all
49:49 - know it will have an element
49:51 - e02 and we will give the id as
49:55 - my form and the data
50:00 - is going to be there and in the same way
50:04 - the method it's going to be there
50:09 - so let's refresh this page so the page
50:13 - works perfectly fine and we can do
50:15 - console
50:18 - block also console.log
50:22 - new component so dash refresh
50:26 - space so perfectly fine now what i'm
50:28 - going to do
50:29 - we i'll make a data
50:33 - uh my choice
50:37 - okay so what you can do we can pick a
50:40 - data
50:41 - my choice
50:44 - and uh you can create this
50:47 - my choice uh okay
50:51 - you can choose this to be null
50:54 - okay so my choice in the beginning is
50:57 - null
50:58 - and what you can do instead of this
51:01 - gender
51:03 - or you can choose this to be gender
51:07 - let this be gender and
51:11 - we can we model this we
51:14 - model equal to gender so
51:18 - this is perfectly fine and now we can
51:21 - refresh this page
51:25 - and what you can do you can
51:31 - print this value or render this value on
51:35 - the component
51:36 - so let's refresh this when i click on
51:39 - female it's female when i click on male
51:41 - it is male
51:42 - female or male and female male okay so
51:45 - first we
51:46 - did that did using the name but now we
51:48 - did using the v
51:49 - model so that's perfectly fine so so
51:53 - that is a component having select and
51:55 - multiple select
51:56 - component using view so we will render
51:58 - this component using ugs on our
52:01 - html file so let's get started with the
52:04 - tutorial
52:04 - so very easy we can create an index six
52:07 - dot html5
52:08 - and in this index six dot html we can
52:11 - copy the content of index five dot html
52:14 - and let's change this learn view
52:16 - tutorial number
52:18 - six and then we can remove this script
52:21 - tag
52:23 - perfectly fine and if we can remove this
52:25 - body
52:27 - and we can refresh this page and you
52:29 - will see that we
52:30 - are running a view in development mode
52:32 - so perfectly fine our development mode
52:34 - gives you
52:36 - uh like it gives you all the warnings
52:39 - and the like uh notifications uh in the
52:42 - sense
52:43 - that uh like this would give you all the
52:46 - warnings and
52:47 - notifications if you are doing something
52:49 - wrong in development so this profits
52:51 - perfectly fine
52:52 - for using in in development one so let's
52:56 - continue that tutorial so let's create a
53:00 - view component okay before creating a
53:02 - view company let's create a
53:03 - form so you can insert a form you can
53:07 - use a div
53:08 - but it works perfectly i'll show you in
53:10 - the end
53:11 - dev id is equal to games and you can
53:15 - select a game here
53:17 - and what you can do you can do select
53:23 - and inside the select you will have an
53:26 - option
53:30 - so this is football
53:33 - football uh you can have an option it's
53:36 - good to
53:37 - click it and we will keep it simple
53:42 - cricket and
53:46 - you can do this as or you can choose any
53:49 - game that is
53:51 - tennis okay i'm running out of battery
53:54 - sorry for the disturbance
53:57 - just a second
54:00 - yeah so what you can do you can
54:03 - create 10 s
54:07 - and what you can do we can give a value
54:13 - so we can give the value here as well
54:17 - and here
54:21 - so what you can do you have to give the
54:23 - value
54:24 - and you will give this as football
54:28 - cricket and
54:31 - tennis
54:35 - okay so now what you can do you can add
54:38 - the value
54:39 - and you can render the form
54:42 - on the front let's refresh this page
54:46 - the football click it and tennis
54:48 - perfectly fine
54:51 - so now what we can do
54:56 - we model
54:59 - okay we will v model
55:03 - is equal to my choice
55:07 - so let's perfectly find wheel constant i
55:10 - will add a script
55:12 - yes so script is already added constant
55:15 - view component
55:17 - so is equal to new view
55:21 - a view constructor with the json object
55:25 - that has element is equal to
55:28 - hash games
55:31 - uh already have will have a methods
55:35 - and a data so the method says
55:47 - the data is this
55:50 - perfectly fine
55:54 - so we'll give this data is equal to
55:58 - my choice is equal to none
56:02 - and we can
56:06 - put this output here
56:10 - my choice
56:15 - so this is perfectly fine we can refresh
56:17 - the page
56:19 - and when you click on football we have a
56:21 - choices cricket
56:23 - and tennis okay perfectly fine
56:26 - now we can work with multiple select so
56:29 - for multiple select
56:31 - what can you can do
56:36 - what you can do
56:41 - you can add a multiple component
56:45 - here in the select multiple is equal to
56:48 - so this would have the multiple
56:50 - component but now
56:52 - let me refresh this page
56:56 - here you can see
56:59 - here you can see okay
57:02 - okay this now it says and expects an
57:05 - array value for its binding but got
57:08 - null okay so this should be an array
57:11 - because now we are expecting a multiple
57:14 - so see how smartly this ugs works
57:16 - football
57:17 - click it tennis uh
57:21 - so to choose multiple i'll show you what
57:24 - you can do when you click on a single
57:25 - option so this would give you football
57:29 - cricket tennis but choose multiple two
57:32 - okay
57:32 - type this
57:39 - to select multiple
57:47 - hold ctrl key
57:52 - key on your keyboard
58:00 - so now this forms make sense to select
58:02 - multiple hold ctrl key on your keyboard
58:05 - so when i ctrl key press the ctrl key on
58:07 - your keyboard that is football
58:09 - cricket and tennis here you can see i
58:10 - have the arrow value
58:12 - so this is how you render select and
58:15 - multiple select on
58:16 - using view js so this is a very good
58:19 - option to
58:20 - explore so very good learning part of
58:23 - the process
58:24 - so this is works perfectly fine
58:27 - okay one more thing we can learn also
58:31 - we can use okay
58:34 - so what you can do
58:39 - okay
58:44 - we can add a new uh we can also learn
58:47 - one more thing
58:49 - that is let's make option
58:53 - clear data clear
58:59 - data okay so now when we call this
59:03 - function
59:04 - clear data
59:09 - okay i'll show you one thing but if we
59:12 - have an
59:13 - array a let
59:16 - a is equal to array of values one two
59:19 - three okay uh let me
59:23 - type a i'll get this and a dot
59:27 - uh you will have
59:31 - a dot beer okay sorry
59:34 - let me uh just a second
59:44 - okay when you type uh
59:49 - okay okay what you can do
59:52 - okay just a second what you can do add a
59:55 - dot length root
59:56 - three and array is equal to this so
60:00 - this would clear the array so we i'm
60:02 - trying to create an
60:03 - event so this
60:07 - dot my choice
60:13 - this dot my choice
60:19 - sorry this dot my choice
60:22 - is equal to null okay so i'm trying to
60:26 - invoke a clear data event on this dot
60:28 - microsoft
60:29 - null but for that i'll create a button
60:34 - button and what i'll do
60:39 - clear data
60:43 - and i'm going to call this function
60:48 - okay so like in the previous like i must
60:52 - have shown you
60:53 - how you can click the using this at the
60:55 - right click is equal to
60:57 - you can call the method so
61:00 - we're going to copy this and we are
61:03 - going to call
61:04 - at the rate click is equal to
61:09 - clear data
61:13 - so when this clear data is called so
61:15 - first we will do console
61:17 - dot log to make sure
61:21 - that this event is called clear
61:24 - data perfectly fine so let's
61:27 - refresh this page so when i click clear
61:30 - data score
61:31 - operating line now i'd select football
61:34 - cricket
61:34 - tennis and click on clear data is empty
61:39 - tennis cricket football clear data add
61:42 - is empty
61:43 - so this is how we can also call the
61:44 - functionality a very good example to
61:46 - learn
61:47 - in this tutorial we are starting with a
61:49 - to-do app using vue.js
61:51 - and we will learn how to create an app
61:54 - to do app using the create read and
61:56 - delete functionality
61:57 - and we will also add a mark as done
62:00 - functionality in this app
62:01 - so let's get started with this tutorial
62:03 - so here we can see
62:05 - that we are going to start with the
62:06 - to-do app using view js
62:08 - so we have all uh learn the basic
62:11 - components of
62:12 - you now we will apply them to make an
62:14 - application
62:16 - so you can move to this github link that
62:17 - is github.com
62:20 - style and view and this would help you
62:23 - to get
62:23 - a more of the code and working uh files
62:26 - which are maintained in in this video
62:28 - series so let's get started
62:30 - tutorial uh this is the official website
62:34 - of you
62:35 - from here you can get the uh like
62:38 - documentation
62:39 - plus you can also get the like
62:41 - installation part how you can install it
62:43 - on your on your machine so you can click
62:46 - on this button get started
62:48 - and you will get a production version
62:51 - plus a development version
62:52 - uh developing versions will always give
62:54 - you console warnings
62:55 - which are helpful in development phase
62:58 - uh this is bootstrap 5 page
63:00 - where you can get all the components of
63:02 - bootstrap 5
63:03 - it has like a beta version and which is
63:05 - an upgradation to the bootstrap 4
63:08 - and here you can click on the get
63:09 - started template like getting started
63:12 - and what you can do click on here start
63:14 - a template
63:15 - and you can copy this and uh paste it on
63:18 - your machine
63:19 - uh sorry on your html page so here you
63:21 - can see
63:22 - and when we refresh the page so here you
63:25 - can see you
63:26 - get the like you get the thing started
63:30 - so let's uh what we can do so let's uh
63:34 - let's start with our application so what
63:36 - we can do
63:38 - we can first change the title of this we
63:41 - can try
63:44 - view js
63:47 - what we can type like view
63:50 - view js to do app
63:55 - so perfectly fine and we can like give
63:58 - the heading
63:59 - h1 is equal to hello world instead of
64:01 - this we can give
64:03 - this the same heading view js2 to app
64:07 - and we can like we can paste this
64:10 - and we can put
64:13 - style okay we'll put the styling later
64:16 - on
64:17 - and so i'll okay i'll
64:20 - i'll actually close explorer yeah now
64:23 - this looks perfectly fine
64:24 - so these are the optional with how you
64:27 - want to use the bootstrap but this one
64:28 - is perfectly fine
64:29 - you can move this option to remove this
64:31 - option too this will
64:32 - create a bit of confusion and this is
64:35 - option one we are using
64:36 - i'll clean the code so it's for the
64:38 - betterment and this is like required
64:40 - meta text and bootstrap css
64:43 - so what we can do uh
64:46 - like we can refresh this page and you
64:48 - can see vue.js to do app
64:51 - and what we can do we can use a
64:54 - now we can create first create a div and
64:57 - inside the div we can first
64:58 - create a form so let's create a form
65:02 - first and then we will proceed with our
65:04 - or like
65:05 - we will proceed with the logic part so
65:08 - the first we can create
65:11 - a div
65:15 - id is equal to app
65:18 - so this is our this is going to be our
65:20 - main div
65:21 - and inside this div what we can do
65:25 - we can create a form
65:29 - okay and we can create a form
65:32 - okay and inside this form you will try
65:35 - to create the
65:36 - like we will try to build the like text
65:39 - field
65:40 - and then we will click you'll create a
65:42 - submit button
65:43 - so okay let me change the like
65:47 - okay i'll change the color scheme
65:53 - i hope this is fine yeah so this is
65:55 - perfectly fine
65:56 - so okay uh we i can uh also
65:59 - like i change the color scheme for the
66:01 - better visualization
66:03 - so now inside this form what we can add
66:06 - we can add a like input type is equal to
66:09 - a
66:09 - text so let's add this and before that
66:12 - i'll give div
66:14 - class is equal to uh i'll add a
66:17 - input input
66:21 - type
66:24 - and i'll give this as as a text
66:31 - and i'll close this input type
66:35 - perfectly fine now uh i'll
66:38 - refresh this page i'll go back to the
66:40 - page yeah
66:42 - so here you can see i have an input type
66:44 - is equal to text
66:46 - so we'll do all the styling later so
66:49 - what we can do
66:50 - uh plus
66:53 - i'll give the name as is equal to name
66:56 - is equal to
66:58 - to do
67:01 - to do text and i'll give this
67:04 - as the id also and this is going to be
67:07 - the same
67:08 - to do text
67:12 - and for this i'll give a label
67:17 - okay i'll give this as a label label
67:22 - for to do text
67:26 - and what you can add
67:31 - add your to-do
67:35 - error okay
67:39 - so so this is the label i've given
67:43 - and i hope this is fine then i can
67:46 - refresh this page and you can i have
67:48 - added to do here to mix more responsive
67:51 - what you can do
67:53 - you can move to the form
67:57 - like form controls and you can go to
68:00 - this page
68:02 - and you can add this class is equal to
68:04 - form control
68:08 - here class
68:11 - is equal to form control
68:15 - and you can add this classes to
68:18 - form label here so you can add this
68:24 - i hope this is fine yeah so you can
68:27 - refresh this page and here you can see
68:29 - now you can press ctrl shift i or
68:31 - inspect
68:33 - okay and what i'll do i'll move this to
68:36 - the right
68:37 - yes so here i have the like
68:40 - responsive design and i'll write move
68:44 - talk to the right
68:45 - yeah that's perfectly fine so it's more
68:47 - responsive we'll try to make it more
68:49 - responsive
68:50 - so this is perfectly fine and this is
68:52 - the console
68:54 - so this is we can create a form
68:58 - now the very first thing what we can do
69:00 - is create
69:01 - a script so let's create a script here
69:05 - script and source
69:08 - is equal to index dot js
69:15 - and yeah perfectly fine but before this
69:18 - script we need to add a view
69:20 - js and with that is going to be in the
69:22 - development version
69:24 - so let's yeah
69:27 - so let's i'll add this
69:32 - i'll copy this and i'll paste it here
69:34 - before this script
69:37 - so when i refresh this page uh you will
69:40 - see
69:41 - that uh like this is saying that you are
69:44 - running a view in development mode this
69:46 - is all we have wanted now what we can do
69:50 - uh we can create a new file
69:53 - uh like instance
69:56 - html we can create a new file in this
69:59 - folder
70:00 - and let's name this as to do
70:04 - app dot js
70:08 - so perfectly fine okay and
70:11 - what we can do
70:15 - i'll what i can do uh i'll try to
70:18 - maintain them inside a folder
70:22 - so and now i have uh like i've used the
70:25 - cut command and i'll make a new folder
70:29 - to do app perfectly fine now inside this
70:32 - to do app
70:33 - i'll paste them so now
70:37 - now you can see that i am inside a
70:38 - folder to do app and now they have two
70:40 - files due to app.html and to do app.js
70:44 - so uh so i am inside a folder so
70:47 - that should give you a better idea when
70:49 - you view the repository that the tool
70:51 - app would be inside the
70:53 - app.html and to do app.js so
70:56 - i can change this to
71:02 - i can change this to to
71:05 - app.js so this is perfectly fine
71:10 - sorry
71:13 - to do app george yes
71:17 - perfectly fine okay now what we can do
71:21 - uh so let me refresh this page
71:27 - okay file not found yeah i'm i know why
71:31 - why the file will not be found because i
71:33 - made a new folder
71:34 - now when i go to the directory
71:38 - so here you can see i have a to-do app
71:41 - and inside the tool i have to do
71:43 - app.html so it works perfectly fine
71:46 - so one thing what we can do next is so
71:50 - we can add console
71:53 - dot dot
71:59 - inside this i can type script
72:04 - started so when i refresh this
72:08 - i right click here inspect element and i
72:11 - can
72:12 - refresh i can see script started and
72:14 - this is from to
72:15 - app.js so the title is adding add a task
72:19 - or a to-do functionality
72:20 - in view to do app so we are creating a
72:23 - ugs to do app and
72:24 - now today we are going to add a
72:26 - functionality to add a task or a to do
72:28 - which is the like the backbone of our
72:30 - app so
72:31 - creating add a test task functionality
72:34 - so this is going to be a method
72:36 - and also submitting the data for the
72:38 - same through form
72:39 - okay so let's refresh this page
72:42 - so okay
72:46 - unexpected token let me say okay
72:49 - so just for a second you can i can i
72:52 - will remove this and i will refresh the
72:54 - page
72:54 - so here you can see the script started
72:56 - now our our first thing we need to do
72:59 - we need to render the component view
73:01 - component and for that
73:03 - what we'll do first we'll create the uh
73:06 - we'll create the a view constructor
73:10 - so constant app is equal to new view
73:14 - so i told you the the view uh
73:17 - view component has three things first is
73:20 - the
73:20 - like element so this is the json object
73:23 - inside the constructor
73:25 - and inside this it will have the element
73:27 - uh
73:29 - data this is the data
73:32 - and the next we are going to have is
73:34 - methods
73:36 - so methods is this yeah perfectly fine
73:39 - so we need to define all the three
73:41 - things uh one by one
73:43 - so this would help us to render the
73:45 - component
73:47 - okay let's see how we render them so
73:50 - this is the id is going to
73:51 - have and we need to define them and id
73:53 - is signified using the hash
73:55 - symbol so hash app perfectly fine
73:59 - so we'll put a comma yeah so data is an
74:02 - empty json object
74:04 - uh for the time being we'll remove yeah
74:07 - and method is an empty json object for
74:09 - the timing and we look
74:10 - yeah so let's refresh this page and we
74:13 - think yeah
74:14 - script started and what we can do just
74:17 - for our
74:18 - like so the we can now we know the since
74:21 - the script has started and the crypt
74:23 - script is working perfectly fine so we
74:25 - can
74:26 - for the timing we can keep this and when
74:28 - we are done so we can
74:30 - uh remove this okay so first
74:33 - very simple thing what we are going to
74:35 - render is the heading
74:37 - heading is
74:41 - to do app using
74:44 - view js okay
74:48 - so this is our this is the like heading
74:51 - and i'll copy this now
74:53 - okay okay okay what i'll do and now i'll
74:57 - render this
74:59 - so what we'll do uh i can remove this
75:03 - h1 okay now
75:06 - what i'll do i'll put h1 tag here
75:11 - and i i'll use the like the template
75:13 - i'll use the
75:14 - how we render the value using this
75:17 - double curly braces
75:20 - heading and now i'll put the double
75:23 - curly bits again
75:24 - now what i'm trying to say that this
75:27 - heading
75:27 - should be rendered in here and we would
75:29 - get the value and plus we will get to
75:31 - know that our
75:32 - app has now binded successfully with the
75:34 - component
75:35 - okay then we can just put the starting
75:37 - let me define style
75:40 - is equal to text align is able to center
75:43 - okay
75:43 - so now let's refresh this page yeah
75:46 - perfectly fine to do app using vgs
75:48 - and we have got the value okay now
75:52 - we will try to make this app a
75:54 - responsive
75:56 - yeah so yeah yeah
75:59 - so what we can do so dev id is a google
76:03 - app and we can get this
76:05 - app as a class is equal to call md6
76:10 - so that we get it here in the center and
76:14 - we are going to define as a style is
76:16 - equal to margin
76:19 - zero auto yeah
76:22 - so this would align themselves to the
76:24 - center okay
76:27 - now now now you can see that it has a
76:31 - width of
76:32 - all md6 and everything is aligned to the
76:34 - center
76:35 - and we can do one thing
76:40 - we can add a padding here padding is
76:43 - equal to
76:44 - one rim
76:48 - yeah now i refresh this page i use the
76:52 - while view yeah now here you can see
76:53 - it's perfectly fine
76:55 - and now i have a like i have a padding
76:58 - so it's like perfectly fine
77:00 - so let me do one check on this yeah
77:04 - so yeah so so like this is perfectly
77:08 - fine
77:09 - okay now i'll do one thing
77:13 - okay yeah so this is fine
77:17 - so this is all we wanted so this one is
77:20 - perfectly fine and
77:21 - it looks good to get carrying with this
77:24 - okay
77:25 - now i'll close this yeah so
77:28 - you can add this label add your to-do
77:31 - here and you can
77:32 - this is perfectly fine okay now what you
77:35 - can do
77:36 - you can also put this inside a style tag
77:39 - side due to text align is equal to
77:41 - center so this would also align
77:43 - themselves to center as well
77:46 - okay indeed align them to center okay
77:49 - label for text and i'm going to
77:54 - center and i'll put this as a margin 0
77:58 - auto so margin 0
78:01 - auto
78:06 - okay let me inspect this element
78:15 - yeah so what you can
78:18 - we can do is we can move the styling
78:22 - from here and if you want you
78:26 - can add a style is equal to text align
78:29 - is equal to center here
78:31 - so this would work perfectly fine yeah
78:33 - so now it's in the center we are good to
78:35 - go
78:36 - now we need to add a button
78:40 - so we need to add a button
78:43 - and for this we are going to simply copy
78:46 - this
78:47 - and we are going to paste it here okay
78:50 - i'll show how you you can type this
78:53 - so
78:57 - input type
79:01 - is equal to submit perfectly fine
79:04 - and class is equal to button
79:08 - button primary
79:16 - and i will close this let me refresh
79:19 - this page
79:20 - yeah so here i have a button and
79:24 - i can style this as a
79:27 - display block
79:30 - if you want or i can do i can do display
79:33 - block or i can do style is due to
79:37 - margin 0 auto so this would align the
79:40 - button to the center
79:42 - margin 0 auto
79:45 - okay and the value is add
79:52 - a to-do
79:56 - okay add my tool
80:01 - so this is perfectly fine and we can
80:04 - give
80:05 - instead of zero let's make it as one oh
80:08 - sorry
80:10 - okay let's make this as one ram and this
80:14 - would give a margin top
80:15 - so perfectly fine we are good to go with
80:17 - the form as well
80:18 - so this is a very simple form and we are
80:21 - good
80:22 - carry on good with this and now what we
80:25 - can do
80:26 - okay now we can do one thing so
80:30 - uh like like we need to store them
80:35 - inside an array so heading is perfectly
80:38 - fine
80:39 - so we need to initialize id is equal to
80:41 - one
80:42 - so because our first tool starts with
80:44 - the id one
80:45 - so this is like we are initializing the
80:47 - values
80:49 - and now we are doing title
80:54 - this is good to nothing let this remain
80:56 - this i you can
80:58 - empty string because we don't want
81:00 - something new
81:01 - any title to be given already and
81:04 - done is going to be false
81:08 - because for when we added to do so we
81:11 - make sure that it's already it is marked
81:13 - as done as also
81:14 - we'll make it as true when we complete
81:17 - it
81:18 - and we store all this in an array
81:21 - named doodles so we'll store all this
81:24 - inside a json object so basically what i
81:26 - meant to say that
81:28 - we're going to make the json object
81:31 - of id title and done
81:35 - so this is a json object and this json
81:37 - object is going to be stored in this
81:39 - doodles array so perfectly fine okay
81:42 - so so let me put a comma here so i hope
81:46 - everything is perfect
81:47 - and when i refresh this page ctrl shift
81:49 - i console
81:50 - is perfectly fine so this is how we
81:53 - initialize the value so
81:55 - and we can add to create a method add to
81:58 - do
81:59 - so we'll look how to
82:02 - do complete this function so title is
82:05 - the video is completing our to-do method
82:07 - and rendering them on
82:09 - end we will submit the data to the form
82:11 - and solve them inside the json array
82:13 - so let's get start to this tutorial so
82:16 - like this is a continuation to the
82:18 - previous tutorial and we will complete
82:20 - the active do method
82:21 - so let's get started with this okay
82:25 - i told we had created the method method
82:27 - add to do
82:28 - and this was a title so we need to bind
82:31 - this
82:32 - title with the to do text for your
82:34 - simplicity what we can do
82:36 - we can copy this and let this instead of
82:40 - to do title let this be as a to-do text
82:44 - so i hope this this is a pretty much
82:47 - good idea
82:47 - so this would keep the things same now
82:50 - to bind them
82:51 - we need to use a functionality that is v
82:54 - model
82:55 - so v model is going to bind them and i
82:58 - have discussed
82:59 - earlier what is the model and i will
83:01 - give you the idea of the same
83:03 - right now also so like we need to bind
83:06 - them
83:08 - using v model that is v model
83:12 - is is equal to to do text
83:16 - okay and just for the simplicity what we
83:19 - can do
83:22 - we can type okay first i'll okay first
83:25 - i'll refresh the page
83:27 - so i'll show you that this has been
83:28 - binded so let me
83:30 - refresh the page okay
83:34 - yeah so let's get to this video
83:37 - the refresh page this is script started
83:40 - now what we can do we can bind this
83:43 - and for the simplicity i can do one
83:45 - thing
83:47 - i can add a paragraph
83:51 - and i can now
83:54 - you typed typing
84:00 - this this is dot and we can add a typing
84:03 - to do text
84:07 - so what i'm going to show
84:10 - is this to do text has been binded
84:14 - with a js file that is this thing due to
84:16 - text
84:17 - which is empty so type into
84:20 - text and this will be model so let's
84:22 - refresh this
84:24 - and i'll as soon as i type something you
84:26 - can see
84:27 - here live changes come here okay
84:31 - so i've got so this is how when i have i
84:33 - have binded this
84:35 - and typing to do text and
84:38 - uh i'll type to do text
84:42 - help me something like this and you can
84:46 - see that this has been binded
84:48 - now to submit the form we would create a
84:51 - submit action
84:52 - and before that what we can do
84:56 - is like i'll show you one thing
85:00 - this the method uh
85:04 - the like since this is uh
85:07 - what you can do you can do autocomplete
85:13 - is go to off and we need to define
85:16 - a add direct submit i did it submit
85:21 - dot prevent so this is like to prevent
85:24 - is to use to like
85:26 - uh prevent the default action so this
85:28 - added submit dot prevent is able to add
85:31 - to do
85:33 - okay i hope this is fine
85:36 - and i'll add add to do option here
85:41 - add to do okay
85:44 - now before i do something else first
85:46 - i'll i'll do
85:48 - console dot log
85:53 - and i'll type
85:56 - submit okay
85:59 - submit it okay and this is to ensure
86:03 - that this has been submitted
86:04 - so let's refresh this page i'm inside my
86:06 - console
86:09 - and it's taking a oh yeah so typing is
86:12 - working perfectly fine so this
86:14 - is this let me type submitted again
86:16 - deleted
86:17 - submitted twice i hope you can see this
86:20 - number two
86:21 - and this is this three four five six so
86:24 - it's being submitted so this is
86:26 - perfectly fine
86:28 - so this is i wanted to show you that the
86:30 - submit method has been called
86:32 - and now what we can do
86:35 - the first thing we need to do is we need
86:38 - to
86:38 - uh build a good logic so how we ensure
86:41 - the functionality
86:42 - and for the for the same what we can do
86:46 - uh so here you can see as we
86:49 - hit the submit button the counter keeps
86:51 - on keeps on going
86:53 - so we need to ensure the same in the act
86:56 - add to do method
86:57 - okay so uh
87:02 - so let's do one thing and let's
87:06 - so
87:09 - we can do method
87:13 - so let to do
87:17 - is equal to json object this dot id
87:22 - okay so this dot id
87:25 - and what i can do one thing i'll do one
87:29 - thing get
87:29 - id is equal to this dot id
87:34 - perfectly fine and
87:39 - title okay
87:42 - since we remove title so two root text
87:44 - was the name for that to root text
87:47 - is called this dot
87:50 - this dot to do text
87:55 - perfectly fine now done
88:01 - is equal to this dot
88:06 - done and we can add
88:12 - console
88:20 - okay so let's first
88:23 - add something okay
88:27 - learn view so this is my first to do
88:30 - so this object has been created object
88:33 - done is usually false id is good
88:34 - one due to text is good to learn view
88:38 - let's do one thing another ad learn
88:40 - react
88:43 - so this is object with the id one done
88:46 - false
88:46 - to do text learn react so let me do
88:48 - another learn
88:50 - angular
88:53 - so here you can see object id is one
88:57 - done is false and to do texas learn
88:59 - angular so one thing we observe
89:00 - now for that as soon as we add a to do
89:03 - the id id is not increased
89:07 - okay so we need to ensure
89:10 - that something uh like we need to ensure
89:13 - that this id makes a
89:15 - the id is uh like the id gets a new
89:19 - thing and then we can make sure that we
89:22 - are perfectly working fine with that
89:25 - okay so let's
89:29 - okay yeah so let's create a reset method
89:33 - so which will make ensure that we
89:36 - our method works perfectly fine so let's
89:39 - create a method
89:41 - reset okay
89:44 - and let's
89:47 - yeah so we need to add the comma
89:52 - tag so this would do
89:55 - this dot id plus plus
90:01 - this dot title
90:04 - okay this dot to do text
90:07 - is equal to null another string
90:11 - and this dot done
90:14 - is equal to false
90:19 - so because we need to just i'm just
90:21 - going to
90:22 - this like this is the mandatory part
90:24 - these two are optional but just for the
90:26 - simplicity and the like
90:27 - we don't keep a bug so i i mean to like
90:31 - after like i'll now explain this
90:33 - console. to do
90:37 - this now added to do this
90:40 - dot to do's dot push
90:44 - to do okay so i wanted to show you one
90:48 - thing
90:49 - now i'll call this dot reset
90:56 - okay so okay if this looks
90:59 - something confusing so i'll do
91:04 - i'll change this to increment id
91:06 - increment
91:09 - id okay and
91:13 - okay let this be reset okay this looks
91:15 - perfectly fine
91:16 - again now what i do let together is
91:19 - equal to ids with this dot id to do text
91:22 - is desktop to root text and download
91:24 - this dot done i have print this to do i
91:27 - add this to do in the array i store it
91:30 - in an array then i call the reset
91:32 - function
91:33 - and what does this reset function do
91:35 - let's increment the id
91:37 - and changes the to-do text to default
91:39 - state and this dot done is known as
91:41 - fault
91:42 - so i'll show you one thing now i refresh
91:45 - the page
91:46 - now i'll add something add my to-do and
91:49 - you see
91:49 - as soon as i added to do the this text
91:52 - box becomes empty
91:54 - which was not happening earlier the text
91:57 - box didn't become empty after adding a
91:59 - to do
91:59 - and i did increment so learn react
92:04 - this id2 text box will contain empty
92:08 - learn learn angular
92:12 - and i either to do text box becomes and
92:15 - text box becomes empty and the id
92:18 - becomes free
92:19 - so i'll do learn python
92:25 - id becomes four unknown python and learn
92:30 - learn js so this id becomes file and
92:34 - launch here
92:35 - so we will use the disk group and this
92:37 - group item to render the same so let's
92:40 - continue with the tutorial so we can
92:43 - move to our directory
92:45 - and this is our app and we can
92:49 - like uh i can open like you can
92:53 - reveal in file explorer
92:56 - you can click here here and you can copy
92:58 - this path
93:00 - and you can paste this path in your
93:02 - browser
93:04 - and you will have two files that is to
93:06 - do dot app.html and youtube.js
93:09 - so first we are going to carry on with
93:11 - the to-do app.html
93:13 - so we had completed the part i'll show
93:16 - you
93:17 - first we can type in something learn
93:21 - view add my to-do here you can see the
93:24 - object has been added a json object has
93:26 - been added
93:27 - and then i can add another to do learn
93:29 - [Music]
93:31 - react and at the same time as soon as we
93:34 - added to
93:35 - the text at the text box gets
93:37 - disappeared
93:39 - and then learn angular
93:42 - so i have added three to do's and you
93:44 - can you can
93:46 - access them and i have object that is
93:50 - i have like youtube.js and that is
93:52 - constant app
93:54 - so one thing i can show you also
94:00 - app this is an app object
94:03 - and here you can see that it will have
94:06 - this function add to do function reset
94:10 - and what i can show you that it also has
94:13 - a data
94:14 - so data is this id heading to do then to
94:18 - do text
94:19 - so inside inside this array this is an
94:22 - json array which has three json objects
94:24 - that is one is with this second and
94:27 - third
94:28 - so this was i was telling you that we
94:30 - all are adding this json object inside
94:32 - this array so we use this dot to lose
94:34 - dot push
94:35 - to to do to because we create a to-do
94:38 - object here
94:39 - so you can also rename this as a to-do
94:41 - object for your simplicity
94:43 - and then we push this uh like this
94:47 - works as a to-do object this is a to-do
94:50 - json object
94:51 - and when and so we push this to json
94:54 - object inside this two-door's array
94:56 - so then we get a json array then i have
94:59 - called a reset method
95:00 - which removes the to do text and mark
95:03 - cells are done as a false which was
95:05 - already default as a false
95:07 - and then this dot id is incremented by
95:09 - one
95:10 - to make sure that every uh to do object
95:12 - has a different id
95:14 - so let's continue with our tutorial so
95:17 - i'll create a new method
95:19 - that is i'll show you one we can create
95:22 - a new method
95:23 - uh like one is mark as done
95:25 - functionality and remove to do
95:28 - so before we do that let us create uh
95:31 - first we
95:31 - like first i'll render the tools on the
95:34 - front end
95:34 - so what i can do simply i'll collapse
95:38 - this file explorer
95:39 - yeah and this also is perfectly fine
95:42 - so now like what i can do that i'm
95:45 - inside my app
95:46 - and when i move out to the form i get
95:49 - to do's so this will
95:53 - print the json array on the front end
95:55 - let me show you
95:57 - yeah so now the arrow is empty so let me
95:59 - do learn
96:01 - view yeah so this is the json object
96:05 - i've got
96:06 - then learn react
96:11 - yes second json object has been added
96:12 - and learn
96:14 - angular but this is not the correct way
96:17 - to show them on the front end
96:19 - so we will use a functionality that is a
96:21 - for loop
96:22 - that will traverse to each json object
96:24 - and then we will add them
96:26 - then we will render them sequentially so
96:28 - for that what we can do
96:32 - you will we will use the unordered list
96:36 - your class is
96:36 - going to list group
96:40 - list group and this is the default
96:43 - bootstrap class we are giving
96:45 - and then we will use a for loop but for
96:49 - that for loop what are we going to we
96:50 - are going to use a list
96:52 - so li so for that we are going to use
96:56 - li class is go to list group
97:00 - item and this is a particular item
97:05 - and for that what we do
97:08 - we can add a key okay and we have to use
97:12 - a for loop
97:13 - so we use v4
97:16 - to do in to-do's
97:20 - so this is our i mutation to do first
97:22 - singular
97:23 - into two rules was an array so for every
97:26 - to do in two do's
97:27 - we need to define uh we will render them
97:30 - plus we need to define a key
97:32 - so that a for loop has a unique id
97:35 - and for that we are given to do dot id
97:37 - because it is always unique
97:39 - and then what we can do
97:42 - we can print
97:46 - we can print
97:50 - to do dot to do text
97:55 - okay so when i refresh this page i get
97:59 - empty array then learn view
98:02 - so you here you can see that i have got
98:04 - a list group item
98:05 - then learn react
98:09 - yeah so this is now looks perfectly fine
98:12 - and
98:12 - learn angular
98:16 - so this all we get in in our list view
98:18 - so this looks perfectly fine
98:20 - so i'll remove all the render part and
98:22 - console.log statement
98:23 - when we uh when we are fully done with
98:25 - the development
98:26 - so that the it's it's like optimized so
98:30 - now what we can do we can
98:34 - add two things one is a checks box
98:39 - so we will add this inside this and
98:42 - before that what we can do we can style
98:45 - this a little bit
98:47 - style is good text align is equal to
98:49 - center and
98:50 - and font weight would be bold
98:54 - won't wait
98:58 - would be bold so when we refresh this
99:02 - and add something we get bold and in the
99:05 - center
99:06 - now we can to add two things one is a
99:10 - button
99:14 - so this button
99:18 - will add a button and this would be
99:22 - for the delete functionality
99:25 - uh this is for the delete functionality
99:27 - sorry for the spinning mistake
99:30 - delete functionality and we'll have
99:34 - input input
99:38 - type is able to check box or mark as
99:40 - done functionality
99:43 - so when i refresh this page what i see
99:48 - yeah so i'll add it to do something
99:50 - random text here so this is a delete
99:51 - button and
99:52 - input type due to checks check this is a
99:55 - check box to make it mark as done
99:57 - or delete so what i can do
100:01 - i can add a label for this input type is
100:04 - equal to check box
100:07 - or i can i can add a text here
100:15 - click on check
100:18 - box to mark
100:22 - as done or
100:26 - click on delete
100:29 - to remove i hope this is fine
100:33 - click on delete to remove so
100:36 - when i click this so yeah i get uh
100:40 - so click on check box to mark as done or
100:43 - click on delete to remove
100:44 - so this is a temporary text and
100:47 - you can align this to the center as well
100:54 - style is equal to we need to add this
100:57 - style style
100:58 - is equal to text align center
101:02 - yeah so perfectly fine so
101:05 - let me add something yeah so we have two
101:08 - buttons
101:08 - in checkbox to complete or delete so
101:12 - we can uh like we will continue
101:16 - this in the next tutorial so for that
101:19 - what we are going to do
101:20 - we are going to create a function that
101:23 - is
101:24 - delete to do
101:28 - and this would be like
101:33 - did to do we have to complete this
101:35 - function and i'll put a comma sign here
101:38 - so delete
101:41 - sorry for the mistake yeah so we will
101:44 - complete this delete to do
101:45 - function and input type is equal to
101:47 - check box
101:48 - and what we are planning to add that as
101:50 - soon as we make it mark has done the
101:52 - background changes it to the green
101:54 - so in this tutorial we are going to
101:56 - complete remove to do
101:58 - and mark has done functionality and we
102:00 - will complete the remove to do method
102:02 - and also delete
102:03 - also or bind a class which changes the
102:06 - color background to
102:07 - green on completion so this is the part
102:10 - of the marker stun functionality
102:12 - and this is the remove to do method
102:14 - which we had created earlier
102:16 - by the name delete to do so that this
102:18 - means the same thing we will complete
102:20 - that method
102:21 - and then we will make sure that we
102:24 - that our app works perfectly fine so
102:27 - let's carry on with the code
102:30 - first we can add input type is google
102:33 - checkbox which we have already added
102:35 - so we can add a class to here that is
102:38 - form check input so i'll add this
102:42 - class form check input
102:48 - and let me refresh the page
102:51 - and add a random to do and here you can
102:52 - see it's not count looks pretty decent
102:55 - as compared to the earlier one
102:57 - and for this what we can do
103:00 - class is equal to button
103:05 - button
103:08 - danger so this would mark the button as
103:12 - red and let me add it to do
103:15 - yeah so here you can see now both of
103:17 - them have been marked
103:18 - this is my red and this looks pretty
103:20 - decent so what we can do
103:24 - we can style them both of them style is
103:27 - equal to
103:28 - margin 0 auto
103:32 - and we would style the same as
103:38 - text align is equal to center
103:41 - and the display would be the block
103:46 - let me check with this this works
103:48 - perfectly fine or not
103:50 - so yeah this is now in center and now we
103:52 - would apply the same styling to the
103:54 - button as well
103:56 - and this would be text display block
103:59 - would be to center
104:02 - and now when i refresh the page and add
104:05 - a simple
104:06 - to do so here you can see the both of
104:08 - them are in the center
104:10 - and to avoid a spacing between them but
104:13 - between the two
104:14 - you can change either this to one ram or
104:16 - auto or other to the same
104:19 - let me add another to do yeah now we are
104:21 - done with the style perfectly fine
104:24 - now what i plan to do is first
104:27 - i would call the uh like
104:30 - i'll do one thing
104:34 - first i would bind the check box to this
104:38 - i'll show you to do app.js
104:41 - so this dot uh
104:44 - this is the down functionality and
104:46 - download functionality is either false
104:48 - or true
104:49 - so this represents our check box because
104:52 - we are making sure that the check box is
104:55 - binded with this done functionality
104:57 - which is true or false
104:59 - so now what we can do we can bind this
105:02 - to
105:02 - our check box and we can this would add
105:04 - the functionality
105:05 - okay so i'll show you one thing
105:09 - first what i'll do
105:12 - i'll print to do
105:17 - dot done here okay this is just for the
105:21 - debug portion because this would help
105:23 - you so this is false when i clicked on
105:25 - checkbook this should turn out to be
105:26 - true
105:27 - so what i can do i would add done
105:30 - functionality
105:31 - using the bind method what i can do
105:34 - first
105:34 - i'll add this a name name is equal to
105:38 - done
105:39 - and i'll add id
105:43 - id is same as done so
105:46 - this is option uh this is like i'm
105:49 - hiding name and
105:50 - id this is html part but now comes the
105:52 - view part
105:54 - i'll add v model
105:57 - v model v
106:00 - model is equal to
106:06 - dot done okay now i have binded
106:10 - successfully
106:10 - now i'll refresh the page added to do
106:13 - when i click on this
106:14 - it will turn out to be true this pause
106:16 - button will be true
106:17 - true perfectly fine even there you can
106:19 - see it refreshes itself
106:21 - so this is a true when i click pause
106:24 - to false true false true false okay now
106:27 - what i want to do i want to add a class
106:32 - which turns the background to the green
106:34 - okay so
106:35 - what i can do i can add
106:42 - a style component here
106:48 - and okay so i'll complete this so a
106:52 - style component has been added there so
106:54 - first we remove the complete the tool uh
106:56 - done uh
106:57 - the remove functionality that is using
107:00 - the delete button
107:01 - so so what we can do we should call at
107:04 - the
107:04 - right at the right click function click
107:06 - delete click functionality using
107:08 - android click functionality so we will
107:10 - add at the right click
107:13 - in the button so this should be in the
107:16 - middle something yeah
107:17 - so this is fine okay
107:20 - okay i'll add here
107:24 - in just a second sorry
107:27 - i'll cut this v model done since this is
107:30 - an important part it should be visible
107:32 - clearly
107:34 - yes so this is perfectly fine and i'll
107:36 - add the little click add that
107:38 - click is equal to
107:42 - so what was the name of our method that
107:45 - is was delete to do
107:46 - right so this was the name delete to do
107:53 - and we are passing
107:57 - i told you that we use a for loop for
108:00 - every list component that is
108:02 - to do into do's right so this was our v
108:05 - for
108:05 - to do introduce which key is your two
108:07 - dot id now we are passing a to do
108:10 - we are passing a to do here to delete
108:13 - so that it could pass to the delete
108:15 - functionality and
108:16 - it could delete it okay right so for
108:20 - that what we are going to do
108:22 - we are using going to use the splice
108:24 - method
108:25 - of js so
108:29 - remove to do so like delete to do
108:33 - and this is first we get the index
108:38 - constant index
108:43 - is equal to this dot to do's
108:49 - dot index
108:53 - of to do so
108:56 - first we get the particular index using
108:59 - this method
109:00 - and then what we do this
109:04 - dot to do's dot slice
109:09 - okay dot supplies index
109:13 - comma one uh this one represents how
109:15 - many delete strong number
109:16 - so that is one we need to only remove
109:18 - the one okay
109:20 - now we refresh the page let us
109:24 - start with the console i had to do
109:26 - delete perfectly fine
109:28 - add to loop i had to do i had to do
109:32 - now we delete all delete delete and
109:35 - delete
109:36 - so we delete everything one by one so
109:38 - this is i'll explain you again
109:39 - once again so this was the index so this
109:42 - was this dot to loose dot index off to
109:45 - do
109:45 - first we got the index and then we
109:47 - remove using this price method
109:49 - that at this particular index we want to
109:51 - pop that item out
109:52 - so this was the removal now
109:56 - we need to add a class that would change
109:58 - the background to the green
109:59 - and for that what we are going to use we
110:02 - are going to use v
110:03 - bind method so this is very simple
110:06 - so we wind method is like
110:10 - like we bind a class like if this is
110:14 - true
110:15 - okay so by we which we mean that if this
110:18 - is true then
110:19 - binder class we bind
110:22 - class is equal to
110:28 - okay so now we add a class
110:33 - done done class
110:36 - on the functionality to do dot done
110:40 - because i told you that if this is true
110:42 - then this class should be active
110:44 - okay then we will make a done class here
110:48 - done class
110:53 - okay and i'll add first font
110:56 - size uh okay one size is equal to
111:01 - 100 pixel just for the just for the sake
111:03 - i'm just trying out if this is working
111:05 - or not
111:07 - i do done class is this
111:12 - okay true is this right
111:16 - okay i'll get to know i'll click on
111:18 - inspect
111:22 - so when i click true
111:27 - okay
111:30 - so we can add background
111:38 - wait a second i'll do color is equal to
111:40 - green
111:46 - and refresh this page
111:52 - so here you can see when i click on true
111:55 - so the color is green
111:57 - so that functionality was not working
111:58 - but now it works perfectly fine color is
112:00 - equal to green
112:02 - and the background color should be also
112:04 - green
112:05 - background color should be green let me
112:07 - mark this background also as green
112:11 - and this should become
112:16 - uh this should become white i hope this
112:19 - is fine
112:22 - okay and yeah
112:26 - okay so added to do
112:30 - okay mark is done so here you can see
112:32 - the background changes out to be green
112:34 - and the text becomes white
112:35 - when i do false the default color is
112:38 - back
112:39 - so this is now we have completed our
112:41 - to-do app
112:43 - you can add to those and delete them as
112:45 - well delete
112:47 - add mark is done green so this one is
112:50 - white
112:51 - marker then it also becomes green okay
112:54 - added to do this one is white so you can
112:56 - delete it delete this one
112:58 - and perfectly fine so app works
112:59 - perfectly fine so thank you for watching
113:01 - this tutorial
113:02 - uh we will learn a new concept in the
113:04 - next video thank you everyone

Cleaned transcript:

hello everyone welcome to new tutorial series on ujs so vue.js is a progressive javascript framework so why we just get started github link you can move to the github repository of the ujs and before we start this tutorial uh what view js provides us like vue.js is used at frontend or you can say is also say at clientside development so you just use that frontend or clientside development and it is approachable since you already know html and css for vanilla javascript you can read the guide and start building apps within things in no time once it does it like you can use a view js between a library or a fully featured framework so it's up to your choice that what how do you want to use the new js uh it is you you can use it as a library or a fully featured web framework uh it is performant it has a 20 kb minimum size uh blazing fast virtual dom that is a document object model and minimal operation of minimum of optimization efforts so like it's easy to use quick learning uh view js is incompatible in competition with angular and react and the quality view gs has it that it has fast learning curve that you can very fastly learn view just start building apps in no time and it is comparatively easy to learn uh than other frameworks so that was that is the quality view js has so it's up to you you can use any frontend framework like angular react view but view js has like it's up to you but uh view js has a better learning curve that you can learn view in a very fast way and start building apps and this would give you the architecture about how client side development of content development is done so next before we start this tutorial so you can refer to this github link this is the repository where you can refer all the codes for this tutorial for this series the title would be getting started with vujs and description will will be like we will learn how to install view js and render a simple view comp component at front end so you can create a folder in your vs code and start with the html file that is index1.html so before that what you can do uh you can start html page like uh you can simply start with html tag an html tag will have a header and this header is like learn view perfectly fine learn view inside this you can put this inside title okay so i'll cut this paste it yes and you can right click here and what you can do you can click on format document for the better orientation and then you can have a body type perfectly fine and inside like you can type paragraph is equal to hello world i like hello vue.js a simple paragraph and you can come to this page and refresh this page so you will see hello vue.js uh so this is just foreign this is very static so we can render this the same component via view js and for that we would render a view component on our front end so what we can do you can start on get start page and you will find the view function so just make sure this you are browsing for documentation to point x uh because we will start learning with view js to point x and then we will uh like when we advance a level then we can see how the implementation three three point x is done but basically for your learning you can refer the view change to point x so what you can do you can uh here on the left hand side you can see the installation part and you can click on installation so the simplest way to install vue.js is to just copy the cdn so cdn is works as like a javascript uh script source but like there are two types of seed in here the one is like for prototyping or learning purposes you can use the latest version and for the production we recommend this uh like just what's the difference between the prototyping and learning purpose is like this will show the uh errors at your side like if you are using uh the what we like if you're using for the development so here you can see with full warnings and debug mode okay so like development version has with full warnings and debug mode the debug mode and in the production version we have warning script plus it is performed wise optimal but uh just in different mode when you are in like development mode or development version you can use one with the full warnings and debug mode it will help your code it will help you to debug your code very faster so you can copy this this one you can copy this and put this inside your body tag but make sure you put this at the end of the body okay now for like i'll show you uh just for the like view appearance you said zoom yes so here you can see you i've put this at the end of my body now i'll zoom this for the better view of see okay now you can see uh yeah now you can see uh i have put this at the end of my body okay and now i'll put a another script tag script and i'll type uh i'll start with this console dot log script just for my learning purpose script started and when i move to my browser i'll refresh this play page and i'll press ctrl shift i either you can do inspect or ctrl shift i when i see here it says script started and you can see download the view depth tools extension of that experience and like it's it is now the view js is opening in development mode so that's particularly particularly fine so just for the confirmation you can see that the view js has been installed and now it's running now how a particular now before we get uh before we get to this so first i create a div inside my body and what i'll give div id is able to my app and what i'll do i close this day so i have a div with id my app now i'll i'll for this now id is very important with respect to vue.js i'll render a view component referring to this id so just for the demonstration my view js component will point towards the id okay so it will point towards the id in the html page okay so here you can see my view js component will will point towards the id in the html page and will render the component for the same okay so this is you can make a note of this thing that ugs component will point towards the id in the html page and will render a component for that only okay now so that's perfectly fine so let's move to the code now what you can do you'll create a component view js component so how will how we will we will do that so i'll show you how now what you can do uh just for this tutorial i'm creating a script inside the html page so this would give you a better view okay now what you can do constant my view component constant my view component okay so this is work as a uh like it will have a new view it will have a view constructor and it will take a json object so inside a json object i will have three things like one is going to the element which would refer to the id okay this would refer to the id then i would have a data data so data would be like uh have a json object so it will have all the data and then third thing i would have a method so this is how a particular view component looks like so my view component is a new view okay it calls a view constructor and it will take a json object and it will have an element would you refer to the id it will have a data and it will have methods okay so what you can do uh my element would refer to the id so the id is my app so i would copy this i have simply pasted here my app now i will have a title title is equal to learn view learn view js okay you done ugs and you can also have a like paragraph graph okay inside vs code okay or you can say learn ugs using vs code okay now let the methods will remain empty before this time and inside my app what i can do when i have my view component refers to the id so this is my id my app now i can render this data inside of that id that i can render this view component inside that id so i will put title here and i'll use h1 tag title perfectly sorry so this is the title and for this i'll use paragraph and i'll use para graph okay graph is like this so now this should work perfectly fine i'll refresh this page okay cannot find the element my app okay i did a mistake since this was an id i had used to i used to like what i told you that this production version sorry this uh really sorry for this this development version is left with full warnings and demo mode so since this is in development mode so it will provide all the warnings and in the all the warnings and it will be in double debug mode so you can click on this line so this would like you can refer to this so where it has shown error and cannot find the element my app so let's put a sense it was an id you had to put a hash symbol okay let's refresh this page so here you can see learning view js using vs code so this is perfectly fine i've got my result and the script had started and to make sure what you can do you can also copy this and say script like script ended okay so let's refresh this bit it says script started as script ended and you can refer to this client it will show you console.block script ended and this is like how our view component looked so you can also click on my view component and when i type this here you can see you get whole lot of things and inside here you can see that element is given my app so here it refers to this id and this is how you can have a look at this and myviewcomponent dot dollar sign you can put data and here you can see that i have a data and it says a paragraph and title so you can refer to this my view component dot data dot title and see you guys learn new js now i'll show you one thing you can put put the upper key arrow key and i'll put a new title new title and you will see that as soon as i press enter this title would change without refreshing the page so it will only prepare the day see i'll put it yes yes as soon as i click my view component.data.title is a new title and changes to new title once again in the same way you can change the paragraph also so you can refer to this github link that is github.com pro software development learn view you will get all the codes related to this series video series on this repository the title this video is working with the view component and we will learn how to bind id data and methods inside a view component so let's get started with this tutorial before i start i'll give you a quick reminder how view js works so basically vue.js has a has a component component uh which is a view component okay i'll say a view js has a view component which refers to the id of the html html page to render it uh why we refer to id because its id is a unique thing so we don't have any conflict that which we don't have any ambiguity to avoid ambiguity we have an id that is unique for the html element so it helps the view component to render on the html part using an id so that's pretty simple now what you can do you will create a new html page that index.html in the previous tutorial i had created index1.html and you can add the vue.js script inside your it inside your body tag but make sure that it should be at the end of the body tag not before it so this makes like it will perfectly render everything so the title is learn youtube and we will give a create a view component constant view component to okay i'll say constant view component 2 is equal to new view it will call the view constructor and the view constructor has a json object perfectly fine so now you can see it has a json object now and what i'll do i'll press enter it has three things that element which will have the id and then it will have a data which will be in in itself a json object and then it will have methods uh methods will be also a json object so if i remember all those three all these three things to put you are perfectly fine with the uh your view component so inside this i'll put a counter is equal to zero and inside this i'll call the method uh i'll call it increment counter okay and what i'll do uh i'll call them at a method increment counter and assuming just for example in the case that forget this as a view component uh treat it as a treat this as a class so if this is a class if this is a class so what you can that if this is a class and if you want to access the data of this class you can you access this wire this pointer so this dot counter plus plus so every time i click on it i'll increase the counter so to show this on the front end what i'll do i'll make a div div id is equal to my app too and then i'll close this day perfectly fine and what i'll do i'll i'll create a counter variable using the handles and i'll give this as h1 tag so i hope this is fine now what i'll do uh i'll what i'll do now what i'll do uh i have to refer this element to this id that is hash my app 2 now i'll go to the page and i'll refresh this it says 0 as a counter perfectly fine but uh what does does something happen on the click nothing happens because for this i have to define a click function which can be defined as an add digit click is equal to increment counter so when i click on this it will increment the count i'll refresh this page and when i click this here you can see the count gets increased one by one by one so this is how you increment the counter now by this function that is at the click and the red click function you can achieve the same using v on click functionality as well okay now i'll show you a small example uh let me add another thing that is text is equal to hello world that is hello world and what you can do also you can add a flag is equal to false but you can click on flag is equal to true so what you can do you can call a method hide hide method and you what you can do a hide method can will change this flag okay this if the if condition here it will change that if this dot flag visible is equal to true then this dot flag is equal to false now this would change our flag if this dot flag is equal is equal to true then this dot flag is equal to false and how do you want to click that you can change this to okay first i'll show you one thing i'll change this to text okay perfectly fine now what i'll do i'll comment this out so the this code remains as well and okay actually there's no need to comment so let me remind this as it is so when i refresh this page uh okay this is the previous code working so as soon as i click the counter gets increased incremented so this is the previous code working when i refresh this page the new code gets our display so we get a text hello world but what i want to do i want to hide this on click so what i'll do i click hide method if this dot flag is equal to equal to true then this dot flag is equal to false and what i'll do here that at the on and the right click function i will call hide method perfectly fine but i'll put another condition that v if is equal to flat if this is true can i show this heading else if this is true then i show okay if it's false then i don't show and when this will turn into a chain turn to false when i click the hide method okay let me refresh this page i click here you go it's it's been hidden and how you can get back to this you can right click here and click on inspect so this would open the chrome inspector tools and inside this what you can do you can refer to this view component what do you look view okay you can refer this view component to dollar data dot flat which will return your the existing value okay so what you can do in just a second sorry i'll click on console new component to dollar data dollar flag which is false and i'll change this to true and i'll get the value back when i change this to false it gets hidden again so the true false stock value was done by this high method functionality so let's get started with today's tutorial so you can move to your vs code and like in the previous two tutorials we created this uh like index1.html and index2.html what you can do you can copy this content and paste it here and what we will do we would change this to learn view three and we will remove this body tag okay what i'll do i'll click on view appearance and reset zone so this would reset my zoom and so that i can show you what's the best possible view so we have a template index three index three dot html so we will continue with the third tutorial today so that is the index three dot html and learn view three like this is the tutorial number three so you can refer to your browser and refresh the page and you will get the page as desired result and you can right click here inspect element and you will see the development version of the vue.js is running in the console so let's get started with this so what you can do you can create a div with an id dave id okay i'll zoom this yes dave id is equal to oh you can define a div for the ids such as my app three and you can now close the div and now you can create a view component referring to this id it's a constant view component so what i'll give a short notation bc3 so this is view component three is all the new view okay you can give this on any name so i'll give a decent name view component okay so this is view component so yeah perfectly fine now i have three things element which refers to hash my app3 then i have a data refers to uh you can have a data plus the methods plus the methods okay so let's uh we can keep a simple data that is we should keep a simple data that is uh text is equal to hello world hello and we will render this data inside this date so when we refresh this page we would see the data here that is hello perfectly fine now what we are going to do what we are going to do we are learning the form binding so what we can insist on that we can create a form element the most simple being is input type is equal to text so let's do thing this this we will create an input input type is equal to text okay and what i'm going to do i'm going to remove this for the confusion to avoid any confusion and let this placeholder says uh like place orders enter enter something this is this and i can close this input perfectly fine okay when i refresh this page i'll see i have a input which says enter something and i have my console running at the right hand side now what you can do you can create something a variable known as message okay or my message which is empty okay and you can we model this message v model is equal to my message so when you give model this my message so it now binds this data to this input type is equal to text so what you can do uh what you can do you can do one thing you can move to the next line and what you can say yeah and what you can do you can click on my message so i hope what you i'm getting my point that uh in this input type text we i have binded this data to be modular to my message and i'm usually performing that my message is equal to this okay so what you can do also just for the sake i'll comment this out first i'll comment this out so that i give you a better idea of this okay now i'll change this my message to hello hello view js hello view gs and it says yeah okay i'm having some issue on this let me yes yeah now it's perfect comment yeah so now it was hello vue.js perfectly fine but what if i want to keep this dynamic how do i keep this dynamic let this be an empty string okay just to just i'll change this to hello js so this would refresh to hello gs perfectly fine now i'll keep this as dynamic i'll come uncomment out this and this also now i'll put this under the heading tag to give good view h1 now as soon as that tends uh and also i'll do one thing as soon as i type something you will see this in the heading hello world it looks pretty good on the typing now i'll do type some text here java js programming and javascript programming and yeah here you can see that as soon as i type something and as soon as i type backspace you will remove something so this is one thing now another you can do is for check box so what you need to do you need to define input type here to check box placeholder doesn't exist in checkbox and in this now the data types becomes a boolean value so you type my flag is equal to false and you will remodel this with my flag and i'll say the value of my flag this is by default false now becomes true false true false true false true so this is just how you can check box uh you can be model with the checkbox so this is like basic for the uh this is like the basic part of the binding so we will carry on with some more binding in the next tutorial so thank you everyone for watching this tutorial you can try this out on one as well that is text area so i'll quickly show you text area so for that you can do v model is equal to text area message so text area message needs to be defined here inside the heading plus i need to define this here also yeah so here you can see hello java programming when i move to new line hello world so it gives the space so you can configure these things in depth also with working with the text area so this is how it works so this is like the what you can do so this is like pretty good for us like you can define all so hello world js programming so you can edit this thing plus you can increase the size of the text box like this so working with multiple check boxes in view this is the title of a video and the description is like we will how we will learn how to bind form having multiple check boxes component using view so today we will complete this in this tutorial and we will see how we can achieve this so what you can do uh you can what you can do so like we had made a few html files in the previous tutorials so we would we are going to continue with that and let's move with the tutorial so what you can do you can create an html uh heading and inside this you can give a head attack so from today we will try to we'll try to implement from scratch using in this in this era so this would help you help us to get back with the things so this is the title you can give and you can give this as learn view 4 so this could be anything you can i'll give this a learn view for a view tutorial tutorial uh like all this blonde view tutorial tutorial number four so this is perfect so now inside the heading after the head we can have the body tag so body tag is this sorry so here comes the body tag and inside the body tag we'll put a script tag which would be this so yeah now we can run this page uh in our browser so let's uh move ahead and run this page in the browser so what we can do we can right click here and uh degree in file explorer so this would open the file in the explorer and then we can double click on this and we can open the uh our html file using the browser so here you can see that we can see the view tools uh the view you are running the view in development mode so this is perfectly fine what you can do now so we have a view just running so let's create a form and then we will have multiple check boxes in that form so let's do this so what you can i can do i can hide this yeah so perfectly fine so let's create a form first we'll create it there id is equal to fruits so this would have all the fruits in that so the option of the fruits so div id is equal to fruits and let's create a form so form uh so uh even what you can do we can for the timing you can ignore this form so okay if you want to uh like you can give it a form or like so let's uh so first what we can do let's let's do this without a form so first we'll give an input type is equal to check box so input type is able to check box id you can give this id is equal to apple and value value is equal to value is equal to you will get this apple okay and what you can do uh yeah perfectly fine and then you can give this a label so label is with respect to the id so label for apple and you can give this a label as apple so perfectly fine all right let's do let us give it a smaller so when you refresh this page so here you can see that we have got the apple check box that is here so perfectly fine so let's create a another check box for the other another foods that is input type is able to check box id is equal to mango and value will give a value value is equal to mango so perfectly fine and we will give a label label for mango and let's give this a value with a small mango and let's add another fruit uh we can add another fruit that is pineapple so that would be easy so let's add this yeah so input type again check box id is equal to pineapple and value is equal to find apple so though we can add a label for that and let's continue with the pineapple so perfectly fine so let's refresh this page here you can see we have three check boxes that is apple mango and pineapple so what we need to do so we need to render a view component with respect to this so let's do one thing so let's add a script tag so this is the script we have now what we can do constant view component component is what new view so we call the view constructor inside this view constructor we have a json object and that json object will have three elements okay so uh that is the element so we will define the id okay and that will have a data a data will have a json object perfectly fine and then we will have methods methods so so let's uh okay so let's give this id here we will do hash roots and then we refresh this page let us see okay so we can also do one thing we can do console dot log this view component so let's yeah now here you can see that i have console.log and it will have a dollar data uh yeah here you can see dollar data here this so this is perfectly fine so so this is perfectly fine what we can do we can have a data is equal to checked roots and this is going to be an empty array okay now we can again refresh this page and inside the dollar data we can see yeah this is this so yeah so we have an option check through statism of type array and the length here it is zero so what we can do we can we model this so what we need to do we need to add a line we because form winding is done using the v model command we can add v model is equal to checked roots so we can add this in the other three as well okay now what we can do we can add a heading h1 and what we can do and add a break statement here and i'll render this and i'll put the value here checked fruits so let's refresh this page yeah so as i click on apple i get apple mango pineapple i remove pineapple i remove mango and remove apple so here you can bind the form uh sorry here you can like using check boxes you can achieve this and apple mango pineapple so i removed mango perfectly fine apple removed yeah pineapple removed pineapple added mango added apple so you can achieve this and what if i could give this replace this with the form so so let's try this out yeah so it works perfectly fine with the form as well okay so this is very much helpful in the form as well apple discrete mango pineapple yeah in this tutorial we are going to learn with working with radio button and select in view so we will learn how to bind a form having radio button and select component using view so we will let's start with the tutorial so you can create click on the button new file in your directory and you can name this as index 5 dot html so since this is a since we have like created a this is our fifth tutorial so we have we have worked on this so yeah so sorry for the interruption yeah so let's carry on with the tutorial so what we can do we can uh from the previous template we can control copy this select all using ctrl a and we can paste it here and what we'll do we'll do to change this to learn view tutorial number five and when we and we will remove all this script tag okay so we remove this script tag and we also remove the this body tag so yeah so let me close this file explorer yeah so we have a like a simple rock and raw html page with uh this view script added so what we can do so we can click on this open and reveal in file explorer and you can double click on this and close this so this will open the page in your yeah browser so like perfectly fine so what you can do you can click on right click and inspect to check whether view js is running or not on the console yeah it's perfectly running so what we need to do today we will learn about the radio buttons so what you can do yeah so you can add a radio button so let's create a div we'll create a form so form id is equal to so let this be my form and you can also do this without a form just for it will also work div id is equal to my form we can close this div yeah so what you can do what you can do uh you can create a uh like what you can do you can do input type is equal to radio and id easier to uh you can give it any id depending on your value so let's took this as male and because we are corresponding to the gender and the value is equal to male okay now what you can do we can create for mail and you can perfectly fine so this is mail and you in the same way uh you can do input type is equal to female oh sorry input type is go to radio and id would be female and what you can do id is about female and value is equal to female and you can do label for and this label could depend on the id so female would be the id and you can give the value email so this looks perfectly fine so when i move to the page i would refresh this and here you can see i have two options but you can right now you have you can see the this option isn't working with like the radio button out of the radio button it is like multiple choice question so you can select only one out of the choices now the choices could be any number of choices but you can choose only one so this isn't working right now the reason being that we have not used like what you can do one thing i'll tell you uh one thing you can do you can put a name tag and name is go to gender and you can put this name is called gender here also so okay just a minute i'll show you one thing okay let it just be this form so i'll close the editor yeah so right now i'll refresh this page so i can click uh all the choices that's and that isn't that is not that is not the use case of a radio button in the radio button you can choose select only one choice of the multiple only you can select only one choice of the multiple choices given to you so it is like a mcq multiple if you have an mcp question that is multiple choices you can choose and only one option so but this time we are you you're choosing to so this is invalid to remove that what you can do you can add a name you could just enter and name zero gender and you can refresh this page and now you can select only one out of the two but we are going to implement the same functionality using vue.js what we can do first we will create a view component constant view okay but before that we are going to create a script tag okay yeah perfectly fine so we'll look at the script tag yes so here is our script type and we'll do constant view component is equal to new so like spelling is wrong component so constant view component is go to new view and it will have a json object we all know it will have an element e02 and we will give the id as my form and the data is going to be there and in the same way the method it's going to be there so let's refresh this page so the page works perfectly fine and we can do console block also console.log new component so dash refresh space so perfectly fine now what i'm going to do we i'll make a data uh my choice okay so what you can do we can pick a data my choice and uh you can create this my choice uh okay you can choose this to be null okay so my choice in the beginning is null and what you can do instead of this gender or you can choose this to be gender let this be gender and we can we model this we model equal to gender so this is perfectly fine and now we can refresh this page and what you can do you can print this value or render this value on the component so let's refresh this when i click on female it's female when i click on male it is male female or male and female male okay so first we did that did using the name but now we did using the v model so that's perfectly fine so so that is a component having select and multiple select component using view so we will render this component using ugs on our html file so let's get started with the tutorial so very easy we can create an index six dot html5 and in this index six dot html we can copy the content of index five dot html and let's change this learn view tutorial number six and then we can remove this script tag perfectly fine and if we can remove this body and we can refresh this page and you will see that we are running a view in development mode so perfectly fine our development mode gives you uh like it gives you all the warnings and the like uh notifications uh in the sense that uh like this would give you all the warnings and notifications if you are doing something wrong in development so this profits perfectly fine for using in in development one so let's continue that tutorial so let's create a view component okay before creating a view company let's create a form so you can insert a form you can use a div but it works perfectly i'll show you in the end dev id is equal to games and you can select a game here and what you can do you can do select and inside the select you will have an option so this is football football uh you can have an option it's good to click it and we will keep it simple cricket and you can do this as or you can choose any game that is tennis okay i'm running out of battery sorry for the disturbance just a second yeah so what you can do you can create 10 s and what you can do we can give a value so we can give the value here as well and here so what you can do you have to give the value and you will give this as football cricket and tennis okay so now what you can do you can add the value and you can render the form on the front let's refresh this page the football click it and tennis perfectly fine so now what we can do we model okay we will v model is equal to my choice so let's perfectly find wheel constant i will add a script yes so script is already added constant view component so is equal to new view a view constructor with the json object that has element is equal to hash games uh already have will have a methods and a data so the method says the data is this perfectly fine so we'll give this data is equal to my choice is equal to none and we can put this output here my choice so this is perfectly fine we can refresh the page and when you click on football we have a choices cricket and tennis okay perfectly fine now we can work with multiple select so for multiple select what can you can do what you can do you can add a multiple component here in the select multiple is equal to so this would have the multiple component but now let me refresh this page here you can see here you can see okay okay this now it says and expects an array value for its binding but got null okay so this should be an array because now we are expecting a multiple so see how smartly this ugs works football click it tennis uh so to choose multiple i'll show you what you can do when you click on a single option so this would give you football cricket tennis but choose multiple two okay type this to select multiple hold ctrl key key on your keyboard so now this forms make sense to select multiple hold ctrl key on your keyboard so when i ctrl key press the ctrl key on your keyboard that is football cricket and tennis here you can see i have the arrow value so this is how you render select and multiple select on using view js so this is a very good option to explore so very good learning part of the process so this is works perfectly fine okay one more thing we can learn also we can use okay so what you can do okay we can add a new uh we can also learn one more thing that is let's make option clear data clear data okay so now when we call this function clear data okay i'll show you one thing but if we have an array a let a is equal to array of values one two three okay uh let me type a i'll get this and a dot uh you will have a dot beer okay sorry let me uh just a second okay when you type uh okay okay what you can do okay just a second what you can do add a dot length root three and array is equal to this so this would clear the array so we i'm trying to create an event so this dot my choice this dot my choice sorry this dot my choice is equal to null okay so i'm trying to invoke a clear data event on this dot microsoft null but for that i'll create a button button and what i'll do clear data and i'm going to call this function okay so like in the previous like i must have shown you how you can click the using this at the right click is equal to you can call the method so we're going to copy this and we are going to call at the rate click is equal to clear data so when this clear data is called so first we will do console dot log to make sure that this event is called clear data perfectly fine so let's refresh this page so when i click clear data score operating line now i'd select football cricket tennis and click on clear data is empty tennis cricket football clear data add is empty so this is how we can also call the functionality a very good example to learn in this tutorial we are starting with a todo app using vue.js and we will learn how to create an app to do app using the create read and delete functionality and we will also add a mark as done functionality in this app so let's get started with this tutorial so here we can see that we are going to start with the todo app using view js so we have all uh learn the basic components of you now we will apply them to make an application so you can move to this github link that is github.com style and view and this would help you to get a more of the code and working uh files which are maintained in in this video series so let's get started tutorial uh this is the official website of you from here you can get the uh like documentation plus you can also get the like installation part how you can install it on your on your machine so you can click on this button get started and you will get a production version plus a development version uh developing versions will always give you console warnings which are helpful in development phase uh this is bootstrap 5 page where you can get all the components of bootstrap 5 it has like a beta version and which is an upgradation to the bootstrap 4 and here you can click on the get started template like getting started and what you can do click on here start a template and you can copy this and uh paste it on your machine uh sorry on your html page so here you can see and when we refresh the page so here you can see you get the like you get the thing started so let's uh what we can do so let's uh let's start with our application so what we can do we can first change the title of this we can try view js what we can type like view view js to do app so perfectly fine and we can like give the heading h1 is equal to hello world instead of this we can give this the same heading view js2 to app and we can like we can paste this and we can put style okay we'll put the styling later on and so i'll okay i'll i'll actually close explorer yeah now this looks perfectly fine so these are the optional with how you want to use the bootstrap but this one is perfectly fine you can move this option to remove this option too this will create a bit of confusion and this is option one we are using i'll clean the code so it's for the betterment and this is like required meta text and bootstrap css so what we can do uh like we can refresh this page and you can see vue.js to do app and what we can do we can use a now we can create first create a div and inside the div we can first create a form so let's create a form first and then we will proceed with our or like we will proceed with the logic part so the first we can create a div id is equal to app so this is our this is going to be our main div and inside this div what we can do we can create a form okay and we can create a form okay and inside this form you will try to create the like we will try to build the like text field and then we will click you'll create a submit button so okay let me change the like okay i'll change the color scheme i hope this is fine yeah so this is perfectly fine so okay uh we i can uh also like i change the color scheme for the better visualization so now inside this form what we can add we can add a like input type is equal to a text so let's add this and before that i'll give div class is equal to uh i'll add a input input type and i'll give this as as a text and i'll close this input type perfectly fine now uh i'll refresh this page i'll go back to the page yeah so here you can see i have an input type is equal to text so we'll do all the styling later so what we can do uh plus i'll give the name as is equal to name is equal to to do to do text and i'll give this as the id also and this is going to be the same to do text and for this i'll give a label okay i'll give this as a label label for to do text and what you can add add your todo error okay so so this is the label i've given and i hope this is fine then i can refresh this page and you can i have added to do here to mix more responsive what you can do you can move to the form like form controls and you can go to this page and you can add this class is equal to form control here class is equal to form control and you can add this classes to form label here so you can add this i hope this is fine yeah so you can refresh this page and here you can see now you can press ctrl shift i or inspect okay and what i'll do i'll move this to the right yes so here i have the like responsive design and i'll write move talk to the right yeah that's perfectly fine so it's more responsive we'll try to make it more responsive so this is perfectly fine and this is the console so this is we can create a form now the very first thing what we can do is create a script so let's create a script here script and source is equal to index dot js and yeah perfectly fine but before this script we need to add a view js and with that is going to be in the development version so let's yeah so let's i'll add this i'll copy this and i'll paste it here before this script so when i refresh this page uh you will see that uh like this is saying that you are running a view in development mode this is all we have wanted now what we can do uh we can create a new file uh like instance html we can create a new file in this folder and let's name this as to do app dot js so perfectly fine okay and what we can do i'll what i can do uh i'll try to maintain them inside a folder so and now i have uh like i've used the cut command and i'll make a new folder to do app perfectly fine now inside this to do app i'll paste them so now now you can see that i am inside a folder to do app and now they have two files due to app.html and to do app.js so uh so i am inside a folder so that should give you a better idea when you view the repository that the tool app would be inside the app.html and to do app.js so i can change this to i can change this to to app.js so this is perfectly fine sorry to do app george yes perfectly fine okay now what we can do uh so let me refresh this page okay file not found yeah i'm i know why why the file will not be found because i made a new folder now when i go to the directory so here you can see i have a todo app and inside the tool i have to do app.html so it works perfectly fine so one thing what we can do next is so we can add console dot dot inside this i can type script started so when i refresh this i right click here inspect element and i can refresh i can see script started and this is from to app.js so the title is adding add a task or a todo functionality in view to do app so we are creating a ugs to do app and now today we are going to add a functionality to add a task or a to do which is the like the backbone of our app so creating add a test task functionality so this is going to be a method and also submitting the data for the same through form okay so let's refresh this page so okay unexpected token let me say okay so just for a second you can i can i will remove this and i will refresh the page so here you can see the script started now our our first thing we need to do we need to render the component view component and for that what we'll do first we'll create the uh we'll create the a view constructor so constant app is equal to new view so i told you the the view uh view component has three things first is the like element so this is the json object inside the constructor and inside this it will have the element uh data this is the data and the next we are going to have is methods so methods is this yeah perfectly fine so we need to define all the three things uh one by one so this would help us to render the component okay let's see how we render them so this is the id is going to have and we need to define them and id is signified using the hash symbol so hash app perfectly fine so we'll put a comma yeah so data is an empty json object uh for the time being we'll remove yeah and method is an empty json object for the timing and we look yeah so let's refresh this page and we think yeah script started and what we can do just for our like so the we can now we know the since the script has started and the crypt script is working perfectly fine so we can for the timing we can keep this and when we are done so we can uh remove this okay so first very simple thing what we are going to render is the heading heading is to do app using view js okay so this is our this is the like heading and i'll copy this now okay okay okay what i'll do and now i'll render this so what we'll do uh i can remove this h1 okay now what i'll do i'll put h1 tag here and i i'll use the like the template i'll use the how we render the value using this double curly braces heading and now i'll put the double curly bits again now what i'm trying to say that this heading should be rendered in here and we would get the value and plus we will get to know that our app has now binded successfully with the component okay then we can just put the starting let me define style is equal to text align is able to center okay so now let's refresh this page yeah perfectly fine to do app using vgs and we have got the value okay now we will try to make this app a responsive yeah so yeah yeah so what we can do so dev id is a google app and we can get this app as a class is equal to call md6 so that we get it here in the center and we are going to define as a style is equal to margin zero auto yeah so this would align themselves to the center okay now now now you can see that it has a width of all md6 and everything is aligned to the center and we can do one thing we can add a padding here padding is equal to one rim yeah now i refresh this page i use the while view yeah now here you can see it's perfectly fine and now i have a like i have a padding so it's like perfectly fine so let me do one check on this yeah so yeah so so like this is perfectly fine okay now i'll do one thing okay yeah so this is fine so this is all we wanted so this one is perfectly fine and it looks good to get carrying with this okay now i'll close this yeah so you can add this label add your todo here and you can this is perfectly fine okay now what you can do you can also put this inside a style tag side due to text align is equal to center so this would also align themselves to center as well okay indeed align them to center okay label for text and i'm going to center and i'll put this as a margin 0 auto so margin 0 auto okay let me inspect this element yeah so what you can we can do is we can move the styling from here and if you want you can add a style is equal to text align is equal to center here so this would work perfectly fine yeah so now it's in the center we are good to go now we need to add a button so we need to add a button and for this we are going to simply copy this and we are going to paste it here okay i'll show how you you can type this so input type is equal to submit perfectly fine and class is equal to button button primary and i will close this let me refresh this page yeah so here i have a button and i can style this as a display block if you want or i can do i can do display block or i can do style is due to margin 0 auto so this would align the button to the center margin 0 auto okay and the value is add a todo okay add my tool so this is perfectly fine and we can give instead of zero let's make it as one oh sorry okay let's make this as one ram and this would give a margin top so perfectly fine we are good to go with the form as well so this is a very simple form and we are good carry on good with this and now what we can do okay now we can do one thing so uh like like we need to store them inside an array so heading is perfectly fine so we need to initialize id is equal to one so because our first tool starts with the id one so this is like we are initializing the values and now we are doing title this is good to nothing let this remain this i you can empty string because we don't want something new any title to be given already and done is going to be false because for when we added to do so we make sure that it's already it is marked as done as also we'll make it as true when we complete it and we store all this in an array named doodles so we'll store all this inside a json object so basically what i meant to say that we're going to make the json object of id title and done so this is a json object and this json object is going to be stored in this doodles array so perfectly fine okay so so let me put a comma here so i hope everything is perfect and when i refresh this page ctrl shift i console is perfectly fine so this is how we initialize the value so and we can add to create a method add to do so we'll look how to do complete this function so title is the video is completing our todo method and rendering them on end we will submit the data to the form and solve them inside the json array so let's get start to this tutorial so like this is a continuation to the previous tutorial and we will complete the active do method so let's get started with this okay i told we had created the method method add to do and this was a title so we need to bind this title with the to do text for your simplicity what we can do we can copy this and let this instead of to do title let this be as a todo text so i hope this this is a pretty much good idea so this would keep the things same now to bind them we need to use a functionality that is v model so v model is going to bind them and i have discussed earlier what is the model and i will give you the idea of the same right now also so like we need to bind them using v model that is v model is is equal to to do text okay and just for the simplicity what we can do we can type okay first i'll okay first i'll refresh the page so i'll show you that this has been binded so let me refresh the page okay yeah so let's get to this video the refresh page this is script started now what we can do we can bind this and for the simplicity i can do one thing i can add a paragraph and i can now you typed typing this this is dot and we can add a typing to do text so what i'm going to show is this to do text has been binded with a js file that is this thing due to text which is empty so type into text and this will be model so let's refresh this and i'll as soon as i type something you can see here live changes come here okay so i've got so this is how when i have i have binded this and typing to do text and uh i'll type to do text help me something like this and you can see that this has been binded now to submit the form we would create a submit action and before that what we can do is like i'll show you one thing this the method uh the like since this is uh what you can do you can do autocomplete is go to off and we need to define a add direct submit i did it submit dot prevent so this is like to prevent is to use to like uh prevent the default action so this added submit dot prevent is able to add to do okay i hope this is fine and i'll add add to do option here add to do okay now before i do something else first i'll i'll do console dot log and i'll type submit okay submit it okay and this is to ensure that this has been submitted so let's refresh this page i'm inside my console and it's taking a oh yeah so typing is working perfectly fine so this is this let me type submitted again deleted submitted twice i hope you can see this number two and this is this three four five six so it's being submitted so this is perfectly fine so this is i wanted to show you that the submit method has been called and now what we can do the first thing we need to do is we need to uh build a good logic so how we ensure the functionality and for the for the same what we can do uh so here you can see as we hit the submit button the counter keeps on keeps on going so we need to ensure the same in the act add to do method okay so uh so let's do one thing and let's so we can do method so let to do is equal to json object this dot id okay so this dot id and what i can do one thing i'll do one thing get id is equal to this dot id perfectly fine and title okay since we remove title so two root text was the name for that to root text is called this dot this dot to do text perfectly fine now done is equal to this dot done and we can add console okay so let's first add something okay learn view so this is my first to do so this object has been created object done is usually false id is good one due to text is good to learn view let's do one thing another ad learn react so this is object with the id one done false to do text learn react so let me do another learn angular so here you can see object id is one done is false and to do texas learn angular so one thing we observe now for that as soon as we add a to do the id id is not increased okay so we need to ensure that something uh like we need to ensure that this id makes a the id is uh like the id gets a new thing and then we can make sure that we are perfectly working fine with that okay so let's okay yeah so let's create a reset method so which will make ensure that we our method works perfectly fine so let's create a method reset okay and let's yeah so we need to add the comma tag so this would do this dot id plus plus this dot title okay this dot to do text is equal to null another string and this dot done is equal to false so because we need to just i'm just going to this like this is the mandatory part these two are optional but just for the simplicity and the like we don't keep a bug so i i mean to like after like i'll now explain this console. to do this now added to do this dot to do's dot push to do okay so i wanted to show you one thing now i'll call this dot reset okay so okay if this looks something confusing so i'll do i'll change this to increment id increment id okay and okay let this be reset okay this looks perfectly fine again now what i do let together is equal to ids with this dot id to do text is desktop to root text and download this dot done i have print this to do i add this to do in the array i store it in an array then i call the reset function and what does this reset function do let's increment the id and changes the todo text to default state and this dot done is known as fault so i'll show you one thing now i refresh the page now i'll add something add my todo and you see as soon as i added to do the this text box becomes empty which was not happening earlier the text box didn't become empty after adding a to do and i did increment so learn react this id2 text box will contain empty learn learn angular and i either to do text box becomes and text box becomes empty and the id becomes free so i'll do learn python id becomes four unknown python and learn learn js so this id becomes file and launch here so we will use the disk group and this group item to render the same so let's continue with the tutorial so we can move to our directory and this is our app and we can like uh i can open like you can reveal in file explorer you can click here here and you can copy this path and you can paste this path in your browser and you will have two files that is to do dot app.html and youtube.js so first we are going to carry on with the todo app.html so we had completed the part i'll show you first we can type in something learn view add my todo here you can see the object has been added a json object has been added and then i can add another to do learn react and at the same time as soon as we added to the text at the text box gets disappeared and then learn angular so i have added three to do's and you can you can access them and i have object that is i have like youtube.js and that is constant app so one thing i can show you also app this is an app object and here you can see that it will have this function add to do function reset and what i can show you that it also has a data so data is this id heading to do then to do text so inside inside this array this is an json array which has three json objects that is one is with this second and third so this was i was telling you that we all are adding this json object inside this array so we use this dot to lose dot push to to do to because we create a todo object here so you can also rename this as a todo object for your simplicity and then we push this uh like this works as a todo object this is a todo json object and when and so we push this to json object inside this twodoor's array so then we get a json array then i have called a reset method which removes the to do text and mark cells are done as a false which was already default as a false and then this dot id is incremented by one to make sure that every uh to do object has a different id so let's continue with our tutorial so i'll create a new method that is i'll show you one we can create a new method uh like one is mark as done functionality and remove to do so before we do that let us create uh first we like first i'll render the tools on the front end so what i can do simply i'll collapse this file explorer yeah and this also is perfectly fine so now like what i can do that i'm inside my app and when i move out to the form i get to do's so this will print the json array on the front end let me show you yeah so now the arrow is empty so let me do learn view yeah so this is the json object i've got then learn react yes second json object has been added and learn angular but this is not the correct way to show them on the front end so we will use a functionality that is a for loop that will traverse to each json object and then we will add them then we will render them sequentially so for that what we can do you will we will use the unordered list your class is going to list group list group and this is the default bootstrap class we are giving and then we will use a for loop but for that for loop what are we going to we are going to use a list so li so for that we are going to use li class is go to list group item and this is a particular item and for that what we do we can add a key okay and we have to use a for loop so we use v4 to do in todo's so this is our i mutation to do first singular into two rules was an array so for every to do in two do's we need to define uh we will render them plus we need to define a key so that a for loop has a unique id and for that we are given to do dot id because it is always unique and then what we can do we can print we can print to do dot to do text okay so when i refresh this page i get empty array then learn view so you here you can see that i have got a list group item then learn react yeah so this is now looks perfectly fine and learn angular so this all we get in in our list view so this looks perfectly fine so i'll remove all the render part and console.log statement when we uh when we are fully done with the development so that the it's it's like optimized so now what we can do we can add two things one is a checks box so we will add this inside this and before that what we can do we can style this a little bit style is good text align is equal to center and and font weight would be bold won't wait would be bold so when we refresh this and add something we get bold and in the center now we can to add two things one is a button so this button will add a button and this would be for the delete functionality uh this is for the delete functionality sorry for the spinning mistake delete functionality and we'll have input input type is able to check box or mark as done functionality so when i refresh this page what i see yeah so i'll add it to do something random text here so this is a delete button and input type due to checks check this is a check box to make it mark as done or delete so what i can do i can add a label for this input type is equal to check box or i can i can add a text here click on check box to mark as done or click on delete to remove i hope this is fine click on delete to remove so when i click this so yeah i get uh so click on check box to mark as done or click on delete to remove so this is a temporary text and you can align this to the center as well style is equal to we need to add this style style is equal to text align center yeah so perfectly fine so let me add something yeah so we have two buttons in checkbox to complete or delete so we can uh like we will continue this in the next tutorial so for that what we are going to do we are going to create a function that is delete to do and this would be like did to do we have to complete this function and i'll put a comma sign here so delete sorry for the mistake yeah so we will complete this delete to do function and input type is equal to check box and what we are planning to add that as soon as we make it mark has done the background changes it to the green so in this tutorial we are going to complete remove to do and mark has done functionality and we will complete the remove to do method and also delete also or bind a class which changes the color background to green on completion so this is the part of the marker stun functionality and this is the remove to do method which we had created earlier by the name delete to do so that this means the same thing we will complete that method and then we will make sure that we that our app works perfectly fine so let's carry on with the code first we can add input type is google checkbox which we have already added so we can add a class to here that is form check input so i'll add this class form check input and let me refresh the page and add a random to do and here you can see it's not count looks pretty decent as compared to the earlier one and for this what we can do class is equal to button button danger so this would mark the button as red and let me add it to do yeah so here you can see now both of them have been marked this is my red and this looks pretty decent so what we can do we can style them both of them style is equal to margin 0 auto and we would style the same as text align is equal to center and the display would be the block let me check with this this works perfectly fine or not so yeah this is now in center and now we would apply the same styling to the button as well and this would be text display block would be to center and now when i refresh the page and add a simple to do so here you can see the both of them are in the center and to avoid a spacing between them but between the two you can change either this to one ram or auto or other to the same let me add another to do yeah now we are done with the style perfectly fine now what i plan to do is first i would call the uh like i'll do one thing first i would bind the check box to this i'll show you to do app.js so this dot uh this is the down functionality and download functionality is either false or true so this represents our check box because we are making sure that the check box is binded with this done functionality which is true or false so now what we can do we can bind this to our check box and we can this would add the functionality okay so i'll show you one thing first what i'll do i'll print to do dot done here okay this is just for the debug portion because this would help you so this is false when i clicked on checkbook this should turn out to be true so what i can do i would add done functionality using the bind method what i can do first i'll add this a name name is equal to done and i'll add id id is same as done so this is option uh this is like i'm hiding name and id this is html part but now comes the view part i'll add v model v model v model is equal to dot done okay now i have binded successfully now i'll refresh the page added to do when i click on this it will turn out to be true this pause button will be true true perfectly fine even there you can see it refreshes itself so this is a true when i click pause to false true false true false okay now what i want to do i want to add a class which turns the background to the green okay so what i can do i can add a style component here and okay so i'll complete this so a style component has been added there so first we remove the complete the tool uh done uh the remove functionality that is using the delete button so so what we can do we should call at the right at the right click function click delete click functionality using android click functionality so we will add at the right click in the button so this should be in the middle something yeah so this is fine okay okay i'll add here in just a second sorry i'll cut this v model done since this is an important part it should be visible clearly yes so this is perfectly fine and i'll add the little click add that click is equal to so what was the name of our method that is was delete to do right so this was the name delete to do and we are passing i told you that we use a for loop for every list component that is to do into do's right so this was our v for to do introduce which key is your two dot id now we are passing a to do we are passing a to do here to delete so that it could pass to the delete functionality and it could delete it okay right so for that what we are going to do we are using going to use the splice method of js so remove to do so like delete to do and this is first we get the index constant index is equal to this dot to do's dot index of to do so first we get the particular index using this method and then what we do this dot to do's dot slice okay dot supplies index comma one uh this one represents how many delete strong number so that is one we need to only remove the one okay now we refresh the page let us start with the console i had to do delete perfectly fine add to loop i had to do i had to do now we delete all delete delete and delete so we delete everything one by one so this is i'll explain you again once again so this was the index so this was this dot to loose dot index off to do first we got the index and then we remove using this price method that at this particular index we want to pop that item out so this was the removal now we need to add a class that would change the background to the green and for that what we are going to use we are going to use v bind method so this is very simple so we wind method is like like we bind a class like if this is true okay so by we which we mean that if this is true then binder class we bind class is equal to okay so now we add a class done done class on the functionality to do dot done because i told you that if this is true then this class should be active okay then we will make a done class here done class okay and i'll add first font size uh okay one size is equal to 100 pixel just for the just for the sake i'm just trying out if this is working or not i do done class is this okay true is this right okay i'll get to know i'll click on inspect so when i click true okay so we can add background wait a second i'll do color is equal to green and refresh this page so here you can see when i click on true so the color is green so that functionality was not working but now it works perfectly fine color is equal to green and the background color should be also green background color should be green let me mark this background also as green and this should become uh this should become white i hope this is fine okay and yeah okay so added to do okay mark is done so here you can see the background changes out to be green and the text becomes white when i do false the default color is back so this is now we have completed our todo app you can add to those and delete them as well delete add mark is done green so this one is white marker then it also becomes green okay added to do this one is white so you can delete it delete this one and perfectly fine so app works perfectly fine so thank you for watching this tutorial uh we will learn a new concept in the next video thank you everyone
