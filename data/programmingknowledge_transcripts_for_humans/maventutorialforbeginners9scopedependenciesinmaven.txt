With timestamps:

00:00 - hello guys welcome to the next video on
00:02 - maven tutorial for beginners in this
00:04 - video we will learn about scope which is
00:07 - one more interesting and important
00:11 - concept in dependency management so
00:15 - let's get started so in the previous
00:18 - videos we have seen how to add an
00:20 - dependencies in our pom dot XML file
00:24 - let's say we have this dependency J unit
00:27 - which we have added for our tests and we
00:32 - want that this dependency will only be
00:36 - you know related to our tests and not to
00:41 - our source file because J unit we are
00:43 - not going to use probably in our source
00:48 - code so we want to limit the scope of
00:51 - this J unit or to the level of scope so
00:55 - what we can do is just below the version
00:58 - you can add one more element here and
01:01 - then you can say scope ok so just write
01:06 - scope and inside the scope you can just
01:09 - write test here and this basically means
01:13 - is that this J unit is only limited to
01:18 - our test source file and not to the
01:23 - compile source files right so in a way
01:26 - we are limiting the scope of our J unit
01:30 - dependency up to only our test now there
01:34 - are different kind of scopes which are
01:37 - possible in dependency management so
01:41 - this is one kind of scope which is test
01:44 - then there is one more kind of scope
01:48 - which is for example compile and compile
01:53 - is the default scope so if you don't
01:56 - define any scope by default it's a
01:59 - compile so compile is available in your
02:04 - source code also and in the test files
02:07 - also or any other files also now there
02:11 - is one more
02:14 - scope called
02:16 - run time and this means is that this J
02:21 - unit will only available at the run time
02:25 - so this scope indicates that the
02:28 - dependency is not required for the
02:31 - compilation but it is required for the
02:35 - execution of the jar file for example so
02:39 - this jar file will be present in the run
02:43 - time and test class part but not in
02:46 - compiled class parts okay so this is how
02:51 - you use run time scope now there is one
02:55 - more type of scope which is called
02:59 - provided okay
03:02 - and this provided scope is much like
03:05 - compiled but it indicates that you
03:08 - expect the JDK or a container to provide
03:13 - the dependency at runtime for example
03:16 - when building a web application for Java
03:20 - EE you would set the dependency on the
03:24 - Soviet API and the related Java EE API
03:29 - to scope provided because the web
03:33 - container provides those classes right
03:36 - so this scope is only available on the
03:39 - compilation and test class plot but it's
03:43 - not available in transitive okay so this
03:47 - is how you can use cope in dependency
03:51 - management these scopes like runtime and
03:55 - other scopes are important when you want
03:59 - to create an API which has an interface
04:04 - and the implementation
04:06 - so basically when a developer develops
04:09 - an application he wants to segregate his
04:13 - API in to you know different segments
04:18 - one is the interface and other is the
04:22 - implementation and this is done because
04:26 - the implementation if the developer want
04:29 - to change at any time he can change it
04:31 - and he don't need to change the
04:33 - interface and also the vice versa is
04:36 - also possible easily so I hoped you have
04:40 - enjoyed this video please rate comment
04:42 - subscribe and bye for now

Cleaned transcript:

hello guys welcome to the next video on maven tutorial for beginners in this video we will learn about scope which is one more interesting and important concept in dependency management so let's get started so in the previous videos we have seen how to add an dependencies in our pom dot XML file let's say we have this dependency J unit which we have added for our tests and we want that this dependency will only be you know related to our tests and not to our source file because J unit we are not going to use probably in our source code so we want to limit the scope of this J unit or to the level of scope so what we can do is just below the version you can add one more element here and then you can say scope ok so just write scope and inside the scope you can just write test here and this basically means is that this J unit is only limited to our test source file and not to the compile source files right so in a way we are limiting the scope of our J unit dependency up to only our test now there are different kind of scopes which are possible in dependency management so this is one kind of scope which is test then there is one more kind of scope which is for example compile and compile is the default scope so if you don't define any scope by default it's a compile so compile is available in your source code also and in the test files also or any other files also now there is one more scope called run time and this means is that this J unit will only available at the run time so this scope indicates that the dependency is not required for the compilation but it is required for the execution of the jar file for example so this jar file will be present in the run time and test class part but not in compiled class parts okay so this is how you use run time scope now there is one more type of scope which is called provided okay and this provided scope is much like compiled but it indicates that you expect the JDK or a container to provide the dependency at runtime for example when building a web application for Java EE you would set the dependency on the Soviet API and the related Java EE API to scope provided because the web container provides those classes right so this scope is only available on the compilation and test class plot but it's not available in transitive okay so this is how you can use cope in dependency management these scopes like runtime and other scopes are important when you want to create an API which has an interface and the implementation so basically when a developer develops an application he wants to segregate his API in to you know different segments one is the interface and other is the implementation and this is done because the implementation if the developer want to change at any time he can change it and he don't need to change the interface and also the vice versa is also possible easily so I hoped you have enjoyed this video please rate comment subscribe and bye for now
