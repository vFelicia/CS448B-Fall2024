With timestamps:

00:00 - welcome to programming knowledge so in
00:03 - this video we are going to continue with
00:05 - our daily task planner app
00:07 - and without further ado let's directly
00:09 - get into it
00:11 - so up until the previous video we have
00:13 - created task
00:15 - stored them and also retrieved them now
00:18 - let's display them on the screen okay so
00:21 - for that i'll remove this
00:23 - text that we have over here
00:28 - okay so or better that instead of
00:31 - removing i do conditional rendering that
00:34 - means
00:35 - if this tasks is empty then the
00:39 - center widget will be there otherwise we
00:41 - will display some other widget okay so
00:47 - if tasks is equal to null that means we
00:50 - don't have any task then this
00:52 - center with that seems appropriate and
00:55 - if we have something
00:57 - then let's display it so for that i'll
01:00 - use a column
01:03 - you can use a list view also
01:06 - i feel more comfortable with columns so
01:09 - in column we have children the children
01:11 - is
01:13 - task dot
01:16 - map
01:20 - dot to list so we have already discussed
01:22 - this method in
01:24 - one of the video where we were
01:25 - discussing about columns
01:27 - so for now let's return a container
01:32 - okay now the container will have a
01:36 - height of let's say
01:38 - 70 and the width will be the
01:42 - entire bits of the screen media query
01:45 - and dot off context
01:54 - dot size dot width
01:58 - okay
02:02 - i don't know why it is yes so the error
02:04 - is gone
02:06 - now along with this
02:10 - inside it will have a child and the
02:12 - child will be a row
02:15 - or for now just let it simply be the
02:18 - text and that text is
02:21 - e dot task
02:24 - okay so the task
02:28 - now let's format this save this and
02:32 - see how it appears
02:38 - so we can see all the tasks and it looks
02:41 - pretty ugly let's
02:42 - add some decoration to it so we'll
02:46 - call the decoration parameter we'll have
02:49 - boxer decoration
02:55 - okay now inside this we will first
02:58 - add the border radius so border radius
03:03 - dot circular
03:08 - and then from all sides i wanted to be
03:10 - circular by
03:12 - five degrees or
03:16 - okay and then let's add a border
03:18 - decoration style so
03:21 - border and the border we'll use the
03:24 - widget border dot all
03:26 - means that refers to all the sides
03:30 - now let's add color to this border the
03:32 - color color of border will be black
03:35 - colors dot black and it can be of width
03:39 - uh 0.5 let's see
03:44 - now let's format it save it and see how
03:46 - it looks
03:47 - i hope it looks better okay so
03:51 - it is looking better but still it needs
03:54 - a lot more refining
03:56 - let's add margin margin
04:00 - we always use const because we don't
04:03 - want this to
04:04 - re-render every time we call every time
04:07 - the set is state
04:10 - every time the set state method is
04:12 - called
04:13 - okay because it is not necessary
04:17 - so let's add a margin from all the sides
04:20 - to be
04:21 - 10 pixel okay so it looks
04:24 - better maybe i can change this to
04:26 - symmetric
04:28 - and horizontally we have 10
04:34 - pixel of margin but
04:37 - vertically i think only 5 will do so
04:40 - let's see
04:46 - yes this looks better now
04:50 - the text should be in center so for that
04:53 - we have another widget that is alignment
04:56 - and then it also has an enum alignment
04:59 - dot center center left
05:03 - okay let's format this save this
05:08 - okay now let's add some padding over
05:11 - here
05:14 - so for that i'll simply copy this in vs
05:16 - code we have a shortcut
05:18 - shift option and down button then the
05:21 - all selected things are copied just
05:23 - below it
05:24 - and i'll change this to padding
05:28 - and instead of symmetric it will be only
05:34 - and this will be left i'm sorry
05:39 - and now since we have only one parameter
05:41 - we don't need a comma it can be a
05:43 - one-liner widget and let's save this
05:47 - and some padding is there okay
05:51 - now i think we were using the font mont
05:55 - sarat over here i think yes so we are
05:58 - using monster at so i need to add that
06:01 - over here as well style
06:05 - google fonts
06:08 - dot mont serrat
06:17 - okay let's format this
06:21 - now let's save this
06:24 - and the text is in
06:28 - the font of montessorite
06:31 - okay so now the basic ui is done
06:34 - now all we need to do is add a radio
06:37 - button over here and as soon as it is
06:39 - ticked mark instead of radio button we
06:42 - can use a check box as soon as it is
06:44 - checked we will remove this task
06:47 - item from here
06:50 - okay and also from the shared
06:52 - preferences so for that i need to wrap
06:55 - this text around the row
06:58 - okay so like this let's save this now
07:02 - yes so there is no changing ui that's
07:04 - good
07:06 - now i'll add a check box
07:17 - okay now this checkbox needs
07:21 - some parameter for now i'll just give
07:24 - the required parameter because ui is my
07:26 - major concern
07:28 - the parameter value is required so let's
07:31 - add some value
07:32 - for now all will be false that means
07:35 - unchecked
07:37 - okay let's see what else is required
07:47 - i'll have to check it like this only
07:54 - might need to give it a key
08:00 - let's say the key key takes a value of
08:04 - any type so let's say
08:08 - global key and over here we can
08:13 - leave it like this so let's format this
08:16 - save this it will
08:17 - show what is required or what not okay
08:21 - so we have the check box over here now
08:24 - we want
08:25 - this to go over here so for
08:28 - that we can either leave
08:31 - add a size box in between that is the
08:34 - inefficient method the efficient method
08:36 - would be to
08:37 - change the alignment domain access
08:39 - alignment and the main axis alignment
08:41 - would be
08:43 - space between so it will leave all the
08:46 - space possible in between
08:48 - the two items okay so now you can see
08:51 - all are perfectly aligned to the right
08:54 - and all the tasks are perfectly aligned
08:56 - to the
08:57 - left so with this we complete the ui
09:01 - now we'll add functionality in the
09:05 - coming parts so let me add it to version
09:20 - control
09:27 - you

Cleaned transcript:

welcome to programming knowledge so in this video we are going to continue with our daily task planner app and without further ado let's directly get into it so up until the previous video we have created task stored them and also retrieved them now let's display them on the screen okay so for that i'll remove this text that we have over here okay so or better that instead of removing i do conditional rendering that means if this tasks is empty then the center widget will be there otherwise we will display some other widget okay so if tasks is equal to null that means we don't have any task then this center with that seems appropriate and if we have something then let's display it so for that i'll use a column you can use a list view also i feel more comfortable with columns so in column we have children the children is task dot map dot to list so we have already discussed this method in one of the video where we were discussing about columns so for now let's return a container okay now the container will have a height of let's say 70 and the width will be the entire bits of the screen media query and dot off context dot size dot width okay i don't know why it is yes so the error is gone now along with this inside it will have a child and the child will be a row or for now just let it simply be the text and that text is e dot task okay so the task now let's format this save this and see how it appears so we can see all the tasks and it looks pretty ugly let's add some decoration to it so we'll call the decoration parameter we'll have boxer decoration okay now inside this we will first add the border radius so border radius dot circular and then from all sides i wanted to be circular by five degrees or okay and then let's add a border decoration style so border and the border we'll use the widget border dot all means that refers to all the sides now let's add color to this border the color color of border will be black colors dot black and it can be of width uh 0.5 let's see now let's format it save it and see how it looks i hope it looks better okay so it is looking better but still it needs a lot more refining let's add margin margin we always use const because we don't want this to rerender every time we call every time the set is state every time the set state method is called okay because it is not necessary so let's add a margin from all the sides to be 10 pixel okay so it looks better maybe i can change this to symmetric and horizontally we have 10 pixel of margin but vertically i think only 5 will do so let's see yes this looks better now the text should be in center so for that we have another widget that is alignment and then it also has an enum alignment dot center center left okay let's format this save this okay now let's add some padding over here so for that i'll simply copy this in vs code we have a shortcut shift option and down button then the all selected things are copied just below it and i'll change this to padding and instead of symmetric it will be only and this will be left i'm sorry and now since we have only one parameter we don't need a comma it can be a oneliner widget and let's save this and some padding is there okay now i think we were using the font mont sarat over here i think yes so we are using monster at so i need to add that over here as well style google fonts dot mont serrat okay let's format this now let's save this and the text is in the font of montessorite okay so now the basic ui is done now all we need to do is add a radio button over here and as soon as it is ticked mark instead of radio button we can use a check box as soon as it is checked we will remove this task item from here okay and also from the shared preferences so for that i need to wrap this text around the row okay so like this let's save this now yes so there is no changing ui that's good now i'll add a check box okay now this checkbox needs some parameter for now i'll just give the required parameter because ui is my major concern the parameter value is required so let's add some value for now all will be false that means unchecked okay let's see what else is required i'll have to check it like this only might need to give it a key let's say the key key takes a value of any type so let's say global key and over here we can leave it like this so let's format this save this it will show what is required or what not okay so we have the check box over here now we want this to go over here so for that we can either leave add a size box in between that is the inefficient method the efficient method would be to change the alignment domain access alignment and the main axis alignment would be space between so it will leave all the space possible in between the two items okay so now you can see all are perfectly aligned to the right and all the tasks are perfectly aligned to the left so with this we complete the ui now we'll add functionality in the coming parts so let me add it to version control you
