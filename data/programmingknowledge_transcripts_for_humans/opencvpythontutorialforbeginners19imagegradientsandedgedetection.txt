With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in this video we will talk about
00:07 - image gradients in open CV so first of
00:12 - all what is an image gradient so an
00:15 - image gradient is a directional change
00:19 - in the intensity or the teller inside
00:23 - the image now the image gradient of an
00:26 - image is one of the fundamental building
00:29 - blocks in image processing for example
00:32 - we use image gradients inside the image
00:35 - to find the edges inside an image now
00:40 - there are several image gradient methods
00:43 - available in open CV and we are going to
00:47 - see three of them first is the laplacian
00:51 - derivatives second is the Sobel X method
00:55 - and third one will be the Sobel Y
00:58 - methods and all these methods which I
01:02 - mentioned are different gradient
01:04 - functions which uses different
01:08 - mathematical operations to produce the
01:11 - required image so the laplacian
01:14 - calculates the laplacian derivatives
01:16 - where as Sobel method is joint Gaussian
01:21 - and differentiation operations but don't
01:24 - be overwhelmed with the details you just
01:28 - need to keep in mind that these are just
01:30 - the functions which we use for finding
01:34 - out the gradients of an image to analyze
01:38 - the image so let's use the first method
01:40 - which is called the laplacian gradient
01:44 - now to start with I have this initial
01:47 - code and you might already know what
01:49 - this code is doing so first of all I'm
01:52 - just reading this image messy five dot
01:55 - jpg in the grayscale mode using the I am
01:59 - read method and then I'm just loading
02:02 - this image using the matplotlib window
02:06 - so let's first see how the result looks
02:09 - like so this is going to look like this
02:13 - this is just a normal image of Messi and
02:17 - let's see how we can apply the laplacian
02:21 - method to find out the laplacian
02:24 - gradient of an image so for that we are
02:28 - going to declare a variable called lap
02:32 - and then there is a function available
02:37 - inside your cb2 library which is called
02:42 - laplacian and this laplacian method
02:46 - takes few argument first argument is the
02:49 - image the second argument here will be
02:52 - the data type which we are going to use
02:56 - which is called CV to dot C V underscore
03:02 - 64 F so CV to dot C V underscores 64 F
03:08 - is just a data type and we are using a
03:13 - 64 bit float due to the negative slope
03:17 - induced by transforming the image from
03:20 - white to black so you just need to keep
03:23 - in mind that this is just a data type
03:25 - which is 64 bit float and it supports
03:30 - the negative numbers which we will be
03:33 - dealing with when that laplacian method
03:37 - is run on our image now in the next line
03:42 - what we are going to do is we are going
03:43 - to take the absolute value of our
03:46 - laplacian image transformation and we
03:50 - are going to convert this value back to
03:53 - the unsigned 8-bit integer which is
03:57 - suitable for our output so I'm going to
04:00 - just write lap and then using the numpy
04:04 - you int methods and P dot you int 8 and
04:09 - as an argument we are going to pass an P
04:13 - dot absolute and then inside the
04:18 - absolute method we are going to just
04:20 - pass our image which is going to give us
04:22 - the absolute value of our laplacian
04:25 - image transformation
04:26 - which is going to convert this into the
04:30 - unsigned 8-bit integer now let's see the
04:33 - result of this laplacian gradient so I'm
04:37 - going to just add a new title to my
04:40 - title array which is called laplacian
04:43 - and also inside the images list I'm
04:48 - going to add this lap variable which
04:53 - contains this image right after the
04:56 - laplacian gradient is applied here and
04:59 - here the range will be two and we are
05:03 - going to see it in one by two format on
05:06 - the mat plot lib window so here you can
05:11 - see the original image which is this one
05:13 - and after the laplacian gradient method
05:18 - is applied on this image you can see all
05:21 - the edges which are detected by this
05:25 - method when we applied this method on
05:28 - this messy five dot jpg image and an
05:32 - image gradient as I said is the
05:35 - directional change in the intensity or
05:37 - the color in an image so let's close
05:42 - this window and there is one more
05:45 - argument you can provide here which is
05:48 - the kernel size so you can just say K
05:52 - size is equal to five this is the kernel
05:55 - size and I'm going to just run this
05:57 - program once again and you can see the
06:01 - kernel size is increased but our result
06:04 - is deteriorated right so let's reduce it
06:08 - to three and then once again run this
06:12 - program and the result could looks fine
06:15 - and if you apply K size is equal to one
06:19 - let's see the result and you can see you
06:23 - get the better result I think so for now
06:27 - I'm going to just use K size is equal to
06:30 - three and now let's use the other two
06:35 - image gradient methods which are Sobel X
06:39 - and Sobel
06:41 - so these methods which are called Sobel
06:45 - X and Sobel why are also called a Sobel
06:48 - gradient representation so let's just
06:51 - use them and then we will discuss how
06:54 - they are useful so first of all I'm
06:58 - going to declare a variable called Sobel
07:01 - X and then I'm going to use the method
07:06 - inside this cb2 library we just called
07:11 - so bell so this is the method which
07:14 - takes again few arguments first is the
07:17 - image second is again this data type
07:21 - which is CV to dot CV underscore a 64
07:27 - and the third argument here will be the
07:32 - DX so when you write one here this value
07:36 - can be 1 or 0 so when you write 1 here
07:40 - that means we want to use the Sobel X
07:44 - method okay and then the fourth argument
07:48 - here is the D Y value okay so this is DX
07:55 - which is for the X direction and this is
08:00 - for the dy which is for the Y direction
08:04 - and DX stands for the order of
08:07 - derivative X and the dy stands for order
08:12 - of derivative Y now once again we are
08:16 - going to declare the Sobel Y variable so
08:22 - let's declare the Sobel Y and then C we
08:26 - to dot so bail and this also takes a few
08:31 - arguments here the difference will be
08:34 - only the third and fourth argument so
08:37 - I'm going to just use the second
08:40 - argument same the third argument will be
08:43 - 0 for Sobel Y and the fourth argument
08:46 - will be 1 right so this is the order of
08:51 - derivative X if it's 1
08:54 - is called the order of derivative which
08:56 - is in the X direction and in the second
09:00 - case it is in the Y direction and the
09:03 - fifth argument here can be the case eyes
09:06 - as we have seen in the laplacian method
09:08 - so if you want you can provide the
09:11 - kernel size also here as the fifth
09:14 - argument but we are going to skip it for
09:17 - now now again we are going to convert
09:20 - these values into the unsigned int as we
09:26 - have done in the case of laplacian so
09:30 - what we are going to do is we are going
09:32 - to once again overwrite this variable
09:35 - Sobel X and then we are going to use NP
09:39 - dot you in eighth and in that
09:43 - parentheses we are going to just write n
09:45 - P dot absolute and then we are going to
09:50 - just pass the value inside the Sobel X
09:53 - variable same way we are going to do
09:55 - with the Sobel Y variable and now let's
09:59 - see the result how the result looks like
10:02 - so I'm going to just add these elements
10:06 - inside the title and the image list so
10:10 - let's add the Sobel X and Sobel Y here
10:14 - and here also so Sobel why and now let's
10:22 - increase the range to four and let's see
10:25 - it in the form of two by two matrix on
10:29 - the matplotlib
10:31 - window so I'm going to just run this
10:33 - code and you can see the result here so
10:38 - original image laplacian gradient and
10:42 - then Sobel X and so blue Y so you can
10:46 - see when you apply the Sobel X gradient
10:49 - method the direction or the change in
10:53 - direction in the intensity is in the X
10:56 - direction and when you apply the Sobel Y
11:00 - method the change in direction in the
11:03 - intensity is in the Y direction
11:07 - so this is like horizontal and this is
11:11 - in the vertical direction I have one
11:15 - more image which will illustrate this
11:18 - sobolik sensible Y gradient method in a
11:22 - better way I think and this is called
11:25 - Sudoku so I'm going to just write so
11:28 - Doku dot PNG file file and hopefully I
11:33 - didn't do any mistake in the naming yes
11:37 - it works so you can see the laplacian
11:41 - result here and then so blue X and so
11:44 - blue Y result here so in the Sobel X you
11:49 - can see more vertical lines so because
11:53 - so blue Y is good for the directional
11:56 - change in the vertical direction so you
11:58 - can see more change in intensity in the
12:02 - vertical direction and using the Sobel Y
12:05 - you can see the directional change in
12:08 - the intensity in the horizontal
12:10 - direction or the y axis you can also
12:13 - combine the result of Sobel X and Sobel
12:17 - Y images and how we can do this let's
12:20 - see so to combine these two result I'm
12:23 - going to just create one more method
12:25 - which is called Sobel combined is equal
12:30 - to CB - dot we are going to use the
12:35 - bitwise or operator in order to merge
12:39 - these two images so we are going to just
12:42 - write bitwise or and then we are going
12:45 - to provide the two sources one is Sobel
12:48 - X and the other is the Sobel Y image so
12:53 - this is going to give us the bitwise or
12:57 - result of these two images and then we
13:01 - are going to just add this into the
13:04 - tidal list so let's say Sobel combined
13:07 - and also in the image list so like this
13:12 - and let's just increase the range to
13:15 - five and let's see it in the form of two
13:19 - by three on Matt plot
13:21 - so I'm going to just run this once again
13:25 - and you can see the result now so this
13:30 - here is the combination of Sobel
13:33 - extensible Y method and you can see now
13:37 - you can see the directional change in
13:40 - the vertical as well as in the
13:43 - horizontal direction because this is the
13:46 - combination of Sobel Y and Sobel X
13:49 - images so this is how you can use the
13:52 - image gradients inside OpenCV in the
13:56 - next video we are going to see how we
13:59 - can use canny edge detection method to
14:02 - find out the edges in an image so stay
14:06 - tuned and please rate comment and
14:09 - subscribe and I will see you in the next
14:11 - video
14:20 - you

Cleaned transcript:

hey guys welcome to the next video on open CV tutorial for beginners using Python in this video we will talk about image gradients in open CV so first of all what is an image gradient so an image gradient is a directional change in the intensity or the teller inside the image now the image gradient of an image is one of the fundamental building blocks in image processing for example we use image gradients inside the image to find the edges inside an image now there are several image gradient methods available in open CV and we are going to see three of them first is the laplacian derivatives second is the Sobel X method and third one will be the Sobel Y methods and all these methods which I mentioned are different gradient functions which uses different mathematical operations to produce the required image so the laplacian calculates the laplacian derivatives where as Sobel method is joint Gaussian and differentiation operations but don't be overwhelmed with the details you just need to keep in mind that these are just the functions which we use for finding out the gradients of an image to analyze the image so let's use the first method which is called the laplacian gradient now to start with I have this initial code and you might already know what this code is doing so first of all I'm just reading this image messy five dot jpg in the grayscale mode using the I am read method and then I'm just loading this image using the matplotlib window so let's first see how the result looks like so this is going to look like this this is just a normal image of Messi and let's see how we can apply the laplacian method to find out the laplacian gradient of an image so for that we are going to declare a variable called lap and then there is a function available inside your cb2 library which is called laplacian and this laplacian method takes few argument first argument is the image the second argument here will be the data type which we are going to use which is called CV to dot C V underscore 64 F so CV to dot C V underscores 64 F is just a data type and we are using a 64 bit float due to the negative slope induced by transforming the image from white to black so you just need to keep in mind that this is just a data type which is 64 bit float and it supports the negative numbers which we will be dealing with when that laplacian method is run on our image now in the next line what we are going to do is we are going to take the absolute value of our laplacian image transformation and we are going to convert this value back to the unsigned 8bit integer which is suitable for our output so I'm going to just write lap and then using the numpy you int methods and P dot you int 8 and as an argument we are going to pass an P dot absolute and then inside the absolute method we are going to just pass our image which is going to give us the absolute value of our laplacian image transformation which is going to convert this into the unsigned 8bit integer now let's see the result of this laplacian gradient so I'm going to just add a new title to my title array which is called laplacian and also inside the images list I'm going to add this lap variable which contains this image right after the laplacian gradient is applied here and here the range will be two and we are going to see it in one by two format on the mat plot lib window so here you can see the original image which is this one and after the laplacian gradient method is applied on this image you can see all the edges which are detected by this method when we applied this method on this messy five dot jpg image and an image gradient as I said is the directional change in the intensity or the color in an image so let's close this window and there is one more argument you can provide here which is the kernel size so you can just say K size is equal to five this is the kernel size and I'm going to just run this program once again and you can see the kernel size is increased but our result is deteriorated right so let's reduce it to three and then once again run this program and the result could looks fine and if you apply K size is equal to one let's see the result and you can see you get the better result I think so for now I'm going to just use K size is equal to three and now let's use the other two image gradient methods which are Sobel X and Sobel so these methods which are called Sobel X and Sobel why are also called a Sobel gradient representation so let's just use them and then we will discuss how they are useful so first of all I'm going to declare a variable called Sobel X and then I'm going to use the method inside this cb2 library we just called so bell so this is the method which takes again few arguments first is the image second is again this data type which is CV to dot CV underscore a 64 and the third argument here will be the DX so when you write one here this value can be 1 or 0 so when you write 1 here that means we want to use the Sobel X method okay and then the fourth argument here is the D Y value okay so this is DX which is for the X direction and this is for the dy which is for the Y direction and DX stands for the order of derivative X and the dy stands for order of derivative Y now once again we are going to declare the Sobel Y variable so let's declare the Sobel Y and then C we to dot so bail and this also takes a few arguments here the difference will be only the third and fourth argument so I'm going to just use the second argument same the third argument will be 0 for Sobel Y and the fourth argument will be 1 right so this is the order of derivative X if it's 1 is called the order of derivative which is in the X direction and in the second case it is in the Y direction and the fifth argument here can be the case eyes as we have seen in the laplacian method so if you want you can provide the kernel size also here as the fifth argument but we are going to skip it for now now again we are going to convert these values into the unsigned int as we have done in the case of laplacian so what we are going to do is we are going to once again overwrite this variable Sobel X and then we are going to use NP dot you in eighth and in that parentheses we are going to just write n P dot absolute and then we are going to just pass the value inside the Sobel X variable same way we are going to do with the Sobel Y variable and now let's see the result how the result looks like so I'm going to just add these elements inside the title and the image list so let's add the Sobel X and Sobel Y here and here also so Sobel why and now let's increase the range to four and let's see it in the form of two by two matrix on the matplotlib window so I'm going to just run this code and you can see the result here so original image laplacian gradient and then Sobel X and so blue Y so you can see when you apply the Sobel X gradient method the direction or the change in direction in the intensity is in the X direction and when you apply the Sobel Y method the change in direction in the intensity is in the Y direction so this is like horizontal and this is in the vertical direction I have one more image which will illustrate this sobolik sensible Y gradient method in a better way I think and this is called Sudoku so I'm going to just write so Doku dot PNG file file and hopefully I didn't do any mistake in the naming yes it works so you can see the laplacian result here and then so blue X and so blue Y result here so in the Sobel X you can see more vertical lines so because so blue Y is good for the directional change in the vertical direction so you can see more change in intensity in the vertical direction and using the Sobel Y you can see the directional change in the intensity in the horizontal direction or the y axis you can also combine the result of Sobel X and Sobel Y images and how we can do this let's see so to combine these two result I'm going to just create one more method which is called Sobel combined is equal to CB dot we are going to use the bitwise or operator in order to merge these two images so we are going to just write bitwise or and then we are going to provide the two sources one is Sobel X and the other is the Sobel Y image so this is going to give us the bitwise or result of these two images and then we are going to just add this into the tidal list so let's say Sobel combined and also in the image list so like this and let's just increase the range to five and let's see it in the form of two by three on Matt plot so I'm going to just run this once again and you can see the result now so this here is the combination of Sobel extensible Y method and you can see now you can see the directional change in the vertical as well as in the horizontal direction because this is the combination of Sobel Y and Sobel X images so this is how you can use the image gradients inside OpenCV in the next video we are going to see how we can use canny edge detection method to find out the edges in an image so stay tuned and please rate comment and subscribe and I will see you in the next video you
