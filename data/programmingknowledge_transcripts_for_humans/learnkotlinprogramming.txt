With timestamps:

00:00 - okay so now we will jump right into with
00:04 - starting with kotlin so in this training
00:08 - we will like mostly structure this as we
00:11 - will study first about kotlin we will
00:14 - master kotlin and then we will go to the
00:18 - Android studio and build some app Okay
00:20 - so
00:22 - what is a program
00:24 - let's let's go to the basics
00:28 - so you can think of a program as a
00:31 - series of instruction for the system to
00:33 - perform some action
00:35 - okay so I give some instruction a series
00:39 - of instruction such as a is equals to
00:42 - this B is equals to this and then
00:43 - perform a plus b
00:45 - and then print what is a plus b so this
00:48 - is a program for example you could write
00:50 - a program that creates a birthday card
00:52 - in the program you could write an
00:54 - instruction to print congratulatory text
00:57 - or calculate someone's age from their
00:59 - birth year
01:00 - okay so that is a program
01:03 - what is a programming language
01:05 - just like you use human language to
01:08 - communicate with another person you use
01:10 - programming language to communicate with
01:12 - the operating system of the computer
01:15 - fortunately programming language are
01:17 - less complex than human languages and
01:19 - quite logical so you might be thinking
01:21 - that English or Hindi is very easy why
01:24 - do we need to study C plus plus or
01:26 - kotlin or Java
01:28 - they are not they are very typical so
01:32 - they are not typical when we will end
01:34 - this
01:36 - journey of our kotlin you you will be
01:39 - very you will be master in kotlin
01:43 - so and they are logical
01:46 - like when I say A is equals to 5. that
01:49 - means a is equals to 5 that does not
01:51 - mean anything else okay so Android apps
01:53 - are written in kotlin programming
01:55 - language kotlin is a modern language
01:57 - created to develop created to help
02:00 - developers write code efficiently with
02:03 - a few errors as possible
02:06 - okay so that's why we have choosed
02:07 - kotlin so what was the creation of
02:09 - hotline why was
02:11 - you might have seen in the previous
02:14 - video that in 2019 the the kotlin was
02:18 - made as a official language for the app
02:21 - development so how the kotlin was
02:24 - created kotlin was invented to solve a
02:26 - developer's challenge of chat print
02:29 - they needed a simpler tool than Java to
02:32 - work with their main product called
02:34 - IntelliJ IDEA
02:36 - totally written in it the guys
02:38 - investigated the Alternatives stayed
02:41 - unsatisfied and decided to invent their
02:44 - own language so uh
02:46 - at the start
02:48 - the Android apps were made in C plus
02:52 - and then they move to Java and they were
02:54 - pretty comfortable in Java but what was
02:57 - the problem was the problem was the main
02:59 - problem was the Java code in Java was
03:01 - very determinant and there were many
03:03 - problems so one day Google called jet
03:07 - wins that they should look into the
03:09 - matter
03:10 - so what jet brains does did they
03:14 - invented their own language
03:16 - so kotwin was invented to solve
03:18 - developer challenge of jet planes
03:21 - they needed a simpler tool than Java to
03:24 - work with their main product called
03:25 - IntelliJ IDEA
03:26 - the guys investigated the alternative so
03:29 - they invented their own language okay
03:33 - so the main key features of kotlin are
03:36 - the kotlin offer a number of advantage
03:39 - in using or learning it okay cotton
03:42 - programmers have access to all Java
03:45 - Frameworks and libraries while having
03:47 - the ability to write more clear and
03:50 - concise code so kotlin is like just a
03:53 - kid of java so it has all the Frameworks
03:56 - all the libraries of java and it has a
03:59 - more it is a modern language so it is a
04:01 - it has a less
04:03 - a clear and concise quote
04:05 - they can use both languages while
04:07 - building a mobile solution
04:09 - and easily migrate their projects if
04:11 - needed so if I am writing a code
04:15 - in particularly in kotlin like I am
04:17 - building a mobile app
04:20 - so I can build a mobile app while using
04:23 - cotton and Java both simultaneously I
04:26 - can write one code in Java another code
04:29 - in kotlin and mix matches if if needed
04:32 - okay so why are we using kotlin
04:37 - so the main reasons are
04:39 - kotlin is Java based
04:42 - kotlin has a familiar program kotlin has
04:45 - string insertion
04:47 - kotlin uses Auto casts
04:50 - kotlin has arguments and equals kotlin
04:54 - has expression and property so I'll be
04:56 - explaining each of them what what does
04:58 - Java based mean coding programming like
05:00 - kotlin programming language is a uh
05:03 - is
05:05 - uh more recognizably uh like it has a
05:11 - Java based
05:13 - programming language
05:15 - so
05:17 - it is more usable like Java is a very
05:20 - old programming language and Java
05:23 - environment and platform in Scotland
05:25 - basically runs on Java environment and
05:27 - platform
05:28 - okay this means that existing Java based
05:32 - project can seamlessly run on this
05:34 - language
05:36 - okay so what is familiar program so the
05:39 - syntax or and the basic structure of
05:41 - this programming language are extremely
05:44 - easy and familiar
05:46 - the reason being kotlin is a Java based
05:49 - programming language and the syntax
05:51 - makes use of
05:53 - domain object oriented programming
05:55 - domain
05:57 - okay these are the most familiar syntax
05:59 - and language of coding
06:02 - so what is string insertion we we will
06:04 - be looking into it in next videos but
06:09 - I'll cover it
06:12 - so ah
06:15 - like
06:17 - um
06:18 - the string used in kotlin is same as
06:20 - Java and very simple and familiar way of
06:23 - making changes in coding
06:26 - okay so the other three we will be
06:29 - looking into it in a while
06:31 - so just hang on
06:34 - okay so the features of kotlin
06:38 - okay
06:39 - we have
06:41 - learned we have studied the uh
06:45 - definition or kotlin or we have studied
06:48 - kotlin in the second video or the third
06:51 - video
06:52 - okay so it has very
06:55 - um very own technical terms like kotlin
06:57 - is a cross platform statistically typed
07:00 - general purpose programming language
07:01 - with type inference
07:03 - okay so we will be looking into these
07:06 - terms now
07:07 - so what is a cross-platform language
07:09 - so a cross-platform language can be used
07:12 - in any operating system so the code
07:14 - written in kotlin on Windows can be
07:16 - executed on Mac OS as well as Linux as
07:18 - well as
07:19 - uh any other operating system and vice
07:22 - versa okay
07:24 - and there is statistically typed so what
07:27 - is a statistically typed language
07:30 - so a statically typed language is a
07:33 - language where variables variable types
07:36 - are known at the compile time such as
07:39 - Java C or C plus plus in most of these
07:41 - languages
07:42 - type must be expressed in expressively
07:45 - indicated by the programmer
07:48 - ok so before compiling the code
07:50 - the we have we know the
07:53 - variables variable type use
07:56 - okay so this means that the language is
07:58 - able to tell the data type of any
08:00 - variable during the compile time and
08:02 - does not allow a variable to have values
08:05 - of different data types in a simple
08:06 - program
08:07 - so I have defined an integer a is equals
08:12 - to 5. so before compiling the program
08:15 - the compiler knows that a is an integer
08:18 - that simply means that okay so what is
08:21 - Type inference this means that the
08:23 - language can automatically detect the
08:25 - data type
08:26 - so when I Define any variable a is
08:29 - equals to 5 the language is able to uh
08:33 - able to detect the data type such as the
08:36 - data type of a is an integer okay
08:40 - what is a jvm Java virtual machine so
08:42 - jvm is an extract machine
08:45 - it is a specification that provides
08:47 - runtime environment in which Java byte
08:49 - code can be executed so we will be
08:52 - looking more into it in a while
08:54 - but
08:56 - overall jvm is a virtual machine an
08:59 - abstract machine
09:01 - that provides a runtime environment for
09:04 - Java so Java Java code is executed in it
09:07 - by it
09:09 - so that it enables the computer to run
09:13 - Java programs or similar language such
09:15 - as kotlin that are also compiled by Java
09:18 - byte code so it helps run the program
09:21 - jvm are available for many hardware and
09:23 - software platform
09:25 - that is jvm platform dependent jvm is
09:28 - platform dependent
09:30 - okay
09:31 - so what are the operations of jvm the
09:33 - jvm loads code like I have written the
09:36 - code in the compiler what now the jvm
09:38 - loads the code the it verifies the code
09:40 - it executes the code and it provides the
09:43 - runtime environment
09:45 - okay so that's all for this video stay
09:47 - tuned where do we write code in the
09:49 - kotlin language
09:51 - so I have told you that we use the IDE
09:54 - as the Android Studio for development of
09:56 - Android apps that is XML and kotlin both
09:59 - work simultaneously on Android Studio
10:02 - and
10:03 - now we have to focus only on kotlin
10:07 - so therefore we need an another IDE for
10:11 - writing only kotlin code and that ID is
10:14 - IntelliJ IDEA
10:16 - so what is intelligent idea used for
10:18 - IntelliJ IDEA is an integrated
10:21 - integrated development environment IDE
10:23 - or jvm languages
10:26 - including Java kotlin designed to
10:29 - maximize developers productivity
10:31 - okay
10:32 - so just like Android Studio uses SDK
10:36 - software development kit similarly
10:38 - individual idea uses jdk Java
10:40 - development kit or that we we will be
10:44 - installing in the next video
10:47 - and I will be explaining what jdk is in
10:50 - the next video so now let's move to
10:52 - install IntelliJ IDEA and for Linux and
10:55 - Mac users just note that after opening
10:58 - the installer all steps would be the
11:01 - same okay so uh just go to the Google
11:10 - and
11:14 - type IntelliJ IDEA
11:19 - IntelliJ IDEA download
11:23 - click the first link
11:25 - download IntelliJ IDEA
11:30 - and download the community version for
11:33 - Mac OS and Linux user continue from here
11:37 - and for Windows user download the
11:39 - community version
11:41 - okay so we will wait for it to download
11:48 - okay so the installer is downloaded for
11:52 - the
11:54 - intelligent area we will open it
11:58 - the exe file
12:04 - a setup is loading
12:10 - Okay click yes
12:21 - click next
12:23 - click next
12:26 - uh here click intelligent idea Community
12:29 - Edition
12:31 - and here click dot KT
12:36 - and then click next
12:37 - install
12:41 - so we will wait for the
12:43 - IntelliJ IDEA to install
12:47 - okay so the
12:49 - IDE has been installed here click on run
12:52 - and then finish
12:55 - so now we will just wait for
12:58 - the intelligent idea to run
13:07 - so here is the IntelliJ IDEA Community
13:10 - Edition
13:12 - you can see my version here 20 21.3 is
13:15 - my version
13:17 - and
13:18 - jetblen is the company
13:20 - for developing it
13:23 - so here it is already
13:26 - loading my project
13:29 - foreign
13:35 - you have to create on file
13:42 - you have to create on file
13:45 - and new
13:46 - and project
13:51 - so you might be looking at a screen like
13:53 - this
13:54 - so what you have to do is you just have
13:57 - to go to uh
14:00 - kotlin
14:02 - and then
14:04 - you have to choose a
14:07 - any uh folder
14:12 - okay
14:24 - so I have to choose any
14:28 - folder here
14:30 - I have just made a new folder kotlin
14:34 - and I choose this folder
14:37 - okay and I'll name my project as project
14:41 - one or new project
14:43 - the new project
14:49 - and just
14:51 - click on next
14:54 - finish
15:00 - and the Gradle is
15:03 - finishing up the process and
15:07 - it loaded our new project
15:12 - okay so it has already loaded a loader
15:15 - file with the function of hello world
15:19 - so what I'll do is I'll just remove it
15:22 - and here you have the main.kt file where
15:25 - you can write the code
15:27 - okay so we will be writing the code
15:30 - uh in next of our videos right now we
15:34 - have not installed the jdk in our system
15:38 - so
15:39 - um
15:40 - if we have
15:42 - since if we have if we would run the
15:45 - code itself it will not be running
15:48 - okay
15:50 - and let the Gradle
15:52 - build all the files
15:55 - okay then you can close the intelligent
15:58 - idea thank you for watching this video
16:01 - so in this in the previous video we have
16:04 - seen that we have to write code in
16:06 - kotlin and we have installed IntelliJ
16:09 - IDEA
16:10 - but as I said we require just as just
16:15 - like we require uh SDK for Android
16:18 - Studio we require jdk for
16:20 - um
16:21 - intelligent idea so what is jdk jdk or
16:25 - the Java development kit is across
16:27 - platform software development
16:29 - environment that that offers a
16:31 - collection of tools and libraries
16:33 - necessary for developing Java based
16:35 - software application and applets so I'll
16:38 - explain in basic words uh so I have have
16:42 - given you an analogy for SDK if you
16:45 - remember like just like we need
16:49 - groceries
16:50 - so you can think of jdk or SDK as
16:54 - grocery store
16:55 - and you can think of the IntelliJ IDEA
16:58 - or the IDE as kitchen
17:01 - so we need groceries from the grocery
17:03 - store to prepare food in the kitchen
17:06 - similarly we need some libraries or some
17:10 - tools from the jdk or the SDK to prepare
17:13 - code in here to develop here to run a
17:16 - code in
17:18 - the IDE
17:19 - okay so the jdk is one of the Three core
17:22 - technology package used in Java
17:24 - programming
17:25 - along with jvm and JRE jvm is the Java
17:29 - virtual machine JRE is the Java runtime
17:31 - environment
17:32 - okay
17:34 - so the jvm
17:37 - is the Java platform component that
17:39 - executes program
17:42 - jvm is is the uh please plays role in
17:47 - the execution of program the GRE is the
17:50 - on disk part of java that creates the
17:53 - jvm okay so basically the jvm JRE jvm is
17:58 - a part of JRE
17:59 - and the jdk allows developer to create
18:01 - Java programs that can be executive and
18:04 - run by the jvm and JRE
18:07 - so he will be so it will be more pretty
18:10 - clear by this the jdk contains the JRE
18:13 - and some development tools the JRE
18:15 - contains the jvm and some Library
18:17 - classes and the jvm
18:20 - executes the code
18:24 - the distinction between jdk and JRE is
18:26 - that jdk is a package of tool for
18:28 - developing Java based software whereas
18:30 - JRE is a package of tool for running
18:33 - Java code
18:34 - so the jdk is a tool for developing the
18:37 - Java based software and JRE is for
18:40 - running
18:42 - okay the jdk requires JRE because
18:45 - running Job Program is a part of
18:47 - developing them so now we will be
18:48 - proceeding
18:50 - to install the
18:53 - jdk before installing the jdk go to this
18:57 - PC or my computer click on properties
19:00 - and we are just seeing if your operating
19:03 - system is a 64-bit or a 32-bit so my
19:07 - operating system is a 64-bit operating
19:09 - system if yours yours is a 34 32-bit
19:12 - please note that now we will go to
19:14 - Google
19:16 - and we'll type
19:18 - Java
19:21 - sorry jdk
19:24 - for
19:26 - windows
19:28 - okay so we will click the link of java
19:31 - downloads by Oracle
19:33 - and if you are using Linux or Mac OS
19:36 - please download from here for Windows
19:38 - user please go to Windows Tab and for 64
19:42 - installer download the 64 installer
19:45 - and here it is downloading
19:48 - so uh
19:50 - while that downloads for Mac OS users
19:53 - please download from here and for Linux
19:57 - users
19:58 - install the
20:00 - jdk from here
20:02 - so as it is installed open the jdk
20:15 - click on yes
20:23 - wait for the installer to open
20:29 - click on next
20:31 - click on next
20:33 - and the
20:35 - Java is installing on here
20:38 - device
20:40 - so now as Java is installed successfully
20:42 - we have to close this close the close
20:46 - this also
20:48 - so now we what we have to do is
20:50 - we have to check where Java is in on is
20:53 - in our system or not so what we'll do is
20:56 - we will go to the run and type CMD here
20:59 - okay and we will type the command Java C
21:04 - so it is directly installed in my
21:07 - computer but if you are not seeing this
21:10 - if you are seeing that it is not not a
21:12 - recognizable command then what you what
21:14 - you do is you will go to this PC or my
21:17 - computer
21:19 - okay you will go to Windows C
21:23 - you will go to the program files
21:26 - and find Java in it
21:29 - click on the jdk
21:31 - click on the bin folder copy the path
21:33 - from here Ctrl C click on the above part
21:37 - and Ctrl C
21:38 - okay go to this PC again
21:41 - go to the properties
21:45 - and here go to Advanced system settings
21:50 - in advanced system settings go to
21:51 - environment variables
21:53 - so
21:55 - if you are not seeing it
21:58 - it must be not in your environment
22:01 - variable so what you
22:03 - want to do is in the user variables
22:07 - click new and here create Java and give
22:11 - the variable value this okay then click
22:13 - ok
22:15 - and then click OK and ok
22:18 - and now we will when will you when you
22:20 - will type in the CMD command Java C
22:24 - then it will be showing this
22:27 - okay in this video we are going to write
22:31 - our first program which is hello world
22:35 - program
22:36 - and uh
22:39 - so we have opened intelligent idea for
22:41 - that and we will the first the program
22:45 - structure goes like Function One Main
22:48 - I'll be explaining the program to you in
22:50 - a while
22:52 - parental in
22:55 - is a command for printing a statement
22:56 - and hello world
23:00 - okay so when I run this program
23:04 - this gives me okay so you can run a
23:07 - program from here and here also so I
23:10 - prefer running program from here
23:12 - okay so this gives me an output as hello
23:15 - world
23:17 - okay so what it does is like uh what I
23:22 - will be explaining you the part of the
23:25 - program so what is the fun the fun is a
23:28 - word in Pro kotlin programming language
23:30 - or many programming language and fun
23:32 - stands for function a function is
23:35 - section of program that performs a
23:37 - specific task so I can create another
23:40 - function in the same program so
23:43 - this is a the fund represents a function
23:46 - and main main is the name of this
23:49 - function this particular function has a
23:51 - name Main
23:53 - function have names so they can be
23:55 - distinguished from each other the
23:58 - function is called main because it is
24:00 - the first or the main function that is
24:02 - called when you run the program so when
24:04 - I whenever I run in the program
24:06 - it search for the main function and that
24:08 - is run
24:10 - every time you run the so fun Main
24:15 - is
24:17 - the function Min function
24:20 - okay the function name is always
24:22 - followed by a parenthesis this is the
24:24 - parenthesis open and close parenthesis
24:25 - inside the parenthesis you can put
24:27 - information
24:30 - for the function to use
24:33 - okay so whatever information the
24:34 - function is using you can put it there
24:37 - now there are curly braces outside this
24:40 - one main so these curly braces inside
24:44 - these curly braces we are we write the
24:46 - task we have to perform
24:50 - now
24:51 - this line prints the
24:54 - text hello world okay print Alliance
24:57 - tells the system to print a line of text
25:01 - inside the parenthesis these parentheses
25:05 - okay
25:06 - you put the text to be printed notice
25:10 - that the text to be printed is
25:12 - surrounded by quotes these are the codes
25:14 - this tells the system that everything
25:16 - inside the quotation mark should be this
25:19 - this should be everything inside the
25:21 - quotation marks would be printed exactly
25:23 - as it is
25:24 - so to actually print the text the whole
25:28 - printable instruction has to be inside
25:30 - the main function okay
25:31 - so so far that is clear
25:35 - now uh we will be learning more about
25:39 - the print function what about we don't
25:41 - write Ln here when what what happens
25:45 - when we run this program
25:46 - so when we run this program the we will
25:49 - find that the output is same to same
25:51 - there is no change in the output
25:53 - so what is the difference between print
25:55 - and print Ln
25:56 - when I add one more line here and that's
26:00 - a print
26:03 - hi
26:05 - and when I run this program you can you
26:08 - will find the difference
26:11 - so
26:13 - this this
26:15 - high is printed just right after the
26:18 - hello world even if I have wrote and
26:21 - wrote it in the next line and when I
26:24 - give the command print Ln here then what
26:28 - will happen
26:30 - so I have run this program
26:32 - and
26:34 - we will let it compile
26:36 - now you can see that high is printed on
26:38 - the next line so we can conclude that
26:40 - the Ln in the println stands for next
26:45 - line or we can say when we use parental
26:48 - in the the text inside the quotation
26:51 - mark is printed in the next line
26:55 - so for this you can also use the the
27:00 - black backslash n or the escape sequence
27:03 - so I'll be demonstrating that so in this
27:07 - quote under this quotation mark when I
27:10 - use black says backslash n here and run
27:13 - this program
27:16 - so here we can find that again the high
27:20 - is under the hello world
27:22 - so what this backslash n command tells
27:25 - you or the escape sequence tells the
27:27 - program when I enter into the print
27:29 - hello world and then this backslash n
27:31 - tells me to go to the next line and then
27:34 - print hi okay so that that's about the
27:37 - backslash n command
27:39 - now we will talk about some comments in
27:41 - kotlin so uh I have to write here that
27:45 - this is
27:46 - my first
27:49 - code
27:51 - so how I write here and when I write the
27:55 - this thing here this text here this has
27:58 - no effect on the code
28:00 - so after using this to slash
28:06 - uh this program this this sentence is
28:09 - not a part of code so the symbol slash
28:12 - slash
28:13 - represents a single line comment which
28:16 - tells the compiler to ignore everything
28:18 - from this symbol to the end of the line
28:21 - okay typically signal signal line
28:23 - comment is used to make a quick comment
28:25 - about a single line of code
28:27 - so comments are very important in any
28:30 - code because after some time after one
28:33 - month two month or three month when I
28:35 - will be looking in the code I will not
28:36 - be recognizing anything in it or I can
28:40 - say that when I when me and my friend
28:43 - are working on a project
28:45 - and I have to share my codes code with
28:47 - him
28:48 - so he also should understand the thing
28:52 - which I have to use in code and why I am
28:54 - use use that in code so that's why
28:57 - these are important comment okay so what
29:00 - if I have to write a multi-line command
29:04 - such that I have to write three four
29:07 - lines of command
29:09 - so I have you I I will use this this
29:13 - um
29:14 - symbol and this pair of symbols denotes
29:18 - a multi-line comment so it tells the
29:21 - compiler that everything that comes
29:23 - under this and this uh symbol should be
29:27 - ignored
29:28 - okay
29:30 - so these are about the comment in the
29:33 - last video we have uh write our first
29:36 - program and printed hello world
29:39 - so now what we are gonna going to do we
29:42 - are going to uh study how to initialize
29:46 - a variable or a value in kotlin so now
29:50 - we are going to create a new file so we
29:52 - are going to file
29:53 - and then go on U then go on kotlin class
29:56 - comma file slash file click on that
30:00 - click on file I am going to name this as
30:04 - variable
30:05 - and then hit enter
30:08 - okay so firstly I am going to write a
30:13 - program one main
30:16 - where a is equals to 20.
30:21 - okay so uh I have mentioned in the last
30:23 - video that I prefer to run program from
30:26 - here not here so what happens when I run
30:30 - the program from here
30:31 - so when I run program from here
30:35 - just let it build
30:37 - yeah so when I run program from here
30:39 - please note that the last program we
30:42 - wrote gets executed
30:44 - the hello world program
30:46 - and when I run program from here so the
30:49 - variable KT program runs and process
30:53 - finished and exited with code 0. so uh
30:56 - now we will discuss how to declare a
30:58 - variable in kotlin so to declare a
31:00 - variable in kotlin either where or well
31:03 - keyword is used so
31:05 - I have wrote where keyword and now I
31:09 - will use Val keyword
31:13 - okay
31:15 - so these are two ways for declaring a
31:18 - variable
31:21 - so uh by while mentioning the kotlin or
31:26 - starting with kotlin I have mentioned
31:27 - that kotlin has a statically typed
31:29 - language and it has a type inference so
31:32 - what does what did I mean by statically
31:34 - typed so before running the program
31:37 - before compiling the program
31:39 - the type of the variable is explicitly
31:44 - known by the compiler
31:46 - so when I compile the program the type
31:50 - of the variable is known by the compiler
31:51 - so the type of this isn't I'll be
31:53 - explaining that in a while
31:55 - and uh kotlin has a type inference so
31:59 - what does that mean uh so when I hover
32:02 - over a
32:04 - so it tells me variable a is int
32:08 - so in kotlin uh
32:11 - the variable automatically tells its
32:14 - types that what type it is variable or
32:16 - value
32:17 - okay so uh
32:21 - now what is the difference between where
32:24 - and well
32:25 - so well has an immutable reference so
32:28 - when I declared a well value so when I
32:32 - go and change the value of B to 13.
32:37 - okay so it gives it
32:40 - underlines it by red and gives an error
32:45 - so what did event hover over it and it
32:48 - says that well cannot be reassigned
32:50 - so I am going going to come to that and
32:54 - hit alt plus enter
32:57 - and when I hit alt plus enter it gives a
32:59 - gave us a number of choices
33:01 - to proceed with and I click enter so
33:04 - what it does is it converts well to
33:07 - where so that I can reassign the value
33:12 - okay
33:13 - so we have uh
33:16 - now discovered what is where and well
33:19 - difference
33:20 - so where where variable has a mutable
33:23 - reference so the variable declared using
33:25 - where keyword can be changed later in
33:28 - the program
33:30 - and the variable declared using Val
33:32 - keyword cannot be changed and
33:36 - it is similar to final variable in Java
33:38 - if some of you might have learned Java
33:42 - okay
33:43 - so uh what if I don't know the initial
33:48 - value of the variable so here I have
33:51 - initialized the variable a with some
33:53 - value but what if I don't know its value
33:55 - so if I have a variable
34:00 - name okay and I don't know what its
34:04 - value is but I do know it holds a string
34:07 - so I'll mention a colon and then type
34:11 - string
34:12 - so here we have created a variable with
34:16 - a type string that can be defined later
34:18 - at any point so now I want that the name
34:23 - should have a value uh
34:26 - p k so I will give that give that the
34:29 - value
34:31 - okay
34:32 - so it now you can see that it is
34:34 - underlining is paid by yellow so let's
34:39 - see what it is telling so now we are
34:41 - going to hit alt plus enter
34:43 - and it's saying that
34:45 - uh create a two value because it is not
34:49 - going to change so it is
34:52 - saying that it we can create it to Value
34:55 - also uh now when I hit alt plus enter on
34:58 - going to the name it created the
35:01 - initialization initialization within
35:03 - itself
35:04 - why did it lose that because
35:09 - the name was assigned just after the
35:13 - variable declaration so it don't have a
35:16 - sense and it makes the course code of
35:18 - more line
35:20 - okay
35:22 - so
35:23 - now we have understood that how to
35:26 - declare a variable
35:28 - there are two ways where and where
35:30 - keyword
35:31 - and how to declare it beforehand and not
35:35 - initialize it okay so how does that this
35:38 - code work so we are going to under a
35:40 - function which is which is has a name
35:42 - main okay so when I go to this where a
35:47 - equals to 20 so it creates a variable
35:50 - and a is the identifier by which this
35:53 - value has been identified
35:55 - okay so uh it is uh like a common
36:00 - nomenclature we follow for naming the
36:04 - identifiers so what we do is like when a
36:08 - variable has a short reference like in a
36:12 - function
36:13 - where the variable is used and at the
36:16 - end of function the variable is
36:17 - destroyed so we we can use their short
36:20 - variable such as a b c i yeah in for
36:23 - Loop we use a variable and it is
36:25 - destroyed after the for Loop is
36:27 - concluded so we can use short variable
36:30 - short identifier there but when we
36:34 - make a large code so we uh we should it
36:40 - is a common practice that we should name
36:42 - the variable that such that we should
36:45 - name the identifier such that when we
36:48 - come after three or four months through
36:50 - the code three or four months when we
36:51 - wrote the code
36:53 - so we should know that why we why we
36:56 - created that variable and what the what
36:58 - that variables variable hold
37:02 - so I'll just introduce some common
37:05 - factors such that I have a application
37:10 - that stores a stores the mobile number
37:14 - so what I can do is I can
37:18 - create a identifier such as mobile
37:21 - number mobile
37:24 - number
37:28 - in from application
37:34 - okay so it is a string that initially
37:36 - holds a number
37:39 - okay so uh what I did here is I started
37:45 - with a small letter
37:47 - and then after every word I created a
37:52 - capital letter
37:53 - okay so it's just a common practice we
37:56 - recommend you to make your identifiers
37:59 - in this way okay otherwise that's fine
38:01 - you can use underscore uh so
38:05 - your variable identifier should start
38:09 - with a small case letter and it should
38:12 - not contain any other special letters
38:16 - other than any other special letters
38:19 - other than
38:21 - underscore
38:23 - so again you only use underscore and
38:25 - your variable identifier cannot start
38:28 - with an underscore
38:30 - okay so I hope that you like this video
38:33 - in the next video we are going to cover
38:35 - the data types and then we will proceed
38:38 - further thank you
38:42 - in the last video we have discussed
38:44 - about the variables in kotlin
38:47 - so now we are going to move further and
38:50 - discuss the data types in kotlin
38:56 - okay so uh as I have already mentioned
39:01 - cotton is a statically typed language
39:04 - that is the variable of
39:06 - uh the variable is already known during
39:10 - the compile time
39:14 - so uh there are
39:16 - a few type of
39:18 - variables in kotlin so I'll just
39:21 - start a function
39:23 - so when I uh so there are four mainly
39:28 - four types there are numbers
39:30 - there are characters
39:33 - there are booleans
39:35 - and there are
39:37 - arrays
39:39 - I'll cover then one by one so firstly
39:44 - I'll go to the number type so number in
39:46 - kotlin are similar to Java and any other
39:49 - programming knowledge a programming
39:50 - language
39:51 - so there are six built-in types
39:53 - representing number so the six are bite
39:57 - short int long float and double so out
40:03 - of them Milling we were we will be using
40:05 - int and double
40:07 - most of the time
40:10 - so what is byte
40:12 - so I can create one ah
40:15 - buy it for you so I'll create well
40:19 - range
40:22 - and I'll mention its type byte
40:26 - I'll mention it as 112. so
40:30 - the byte is a is one byte is eight bits
40:34 - you might already know that so there are
40:37 - totally eight bit
40:39 - and 8 sine bit two two's complement
40:43 - integer
40:44 - so byte data can have values from minus
40:47 - 128 to 127
40:50 - so when I have a concise data
40:55 - and it has a concise value between 0 to
40:58 - 100 or such that then I use byte so what
41:01 - it does is instead of using an integer
41:03 - or a long end or a double so it it
41:08 - concise the code in very small space it
41:10 - requires a very less space
41:13 - so uh when I assign it a value of 200
41:18 - so it gives it shows and right underline
41:21 - and when I hover over it it says that
41:23 - the integer literal does not confirm the
41:26 - expect to the expected type byte so what
41:29 - it says basically it is uh it is out of
41:32 - the range out of the bound
41:33 - so when I go and print
41:37 - the range
41:40 - so it will be
41:44 - printing 112 as we expect so
41:50 - foreign
41:56 - okay so we will move on and next is
41:58 - short under the number the short is a
42:01 - data type having a 16 so I'll mention
42:05 - here it is having
42:07 - eight eight bit eight bit one bit is
42:11 - eight one byte is eight bit so the short
42:14 - is having
42:16 - uh
42:18 - the the values can be assigned to a 16
42:22 - bit 16-bit signed
42:26 - sign complement integer two is
42:28 - complement integer so the the data is
42:31 - short data type can have values from
42:33 - minus 3 to 768 to 32767 we don't have to
42:38 - remember that or know that just for
42:41 - knowledge sake I am telling you this so
42:44 - the short has a capacity
42:47 - or we can say it uses 16 bit data okay
42:53 - so next we will move to enter so int is
42:58 - a 32-bit signed two's complement integer
43:01 - and mainly we will be using INT in uh
43:04 - most of our codes
43:06 - so in data type can have values from
43:08 - minus to the power 31. 2 2 to the power
43:11 - 30 1 minus 1. okay so any uh value I
43:16 - assigned to a
43:18 - is by default stored as an INT and I
43:22 - hover over a it shows that it is an INT
43:25 - okay so it is also a default value
43:30 - so next is long
43:34 - so what happens when I have a integer of
43:38 - value more than 2 to the power 31 so we
43:41 - can store it in long so basically long
43:44 - has a 64 bit signed a 2's complement
43:47 - integer
43:49 - okay so when I have a long integer we
43:53 - will store it is long so the keyword
43:56 - used for it is I'll just mention uh
43:59 - one value
44:01 - say long end
44:05 - and I'll mention it as long
44:10 - and it can have any value okay
44:14 - so moving on we have double
44:17 - so double is a
44:20 - data type with double Precision of
44:23 - 64-bit floating point
44:27 - so whenever I Define any uh
44:31 - decimal as a
44:34 - value
44:35 - suppose 1.23 so it automatically
44:39 - is defined as a
44:42 - double
44:44 - okay as we can see here
44:47 - so
44:48 - if I print decimal it will be printing
44:50 - 1.23
44:53 - now what is float
44:55 - we have seen about double so the ball
44:57 - has also also 64-bit so float data type
45:01 - is a single Precision 32-bit floating
45:04 - point
45:05 - okay so uh there was in that was getting
45:10 - by default assigned and there was byte
45:13 - and short
45:14 - that concise the storage so whenever we
45:18 - want to acquire it less storage we can
45:21 - use float so how to define float so we
45:25 - can Define it as well
45:28 - uh decimal
45:32 - float
45:37 - in this way also
45:42 - okay
45:44 - but
45:46 - so we could have
45:48 - by the
45:50 - by the thing we are going to the seeing
45:55 - like we Define it in this way but it is
45:59 - not true
46:00 - so what I what if I have to define a
46:03 - float so what I do is I just Define it
46:07 - as decimal and then put f
46:13 - so what it does is it convert it convert
46:17 - it to float so it is now a float
46:19 - so when I print
46:23 - uh
46:24 - decimal float
46:27 - so what it does is it will be printing
46:30 - 1.23 when only 1.123 and not the f
46:35 - so what it says is it is a float okay
46:40 - and nothing else
46:42 - so uh we have used
46:47 - 1.123 F instead of 1.123 in the above in
46:52 - the program it is because
46:54 - 1.123 is a double literal and you cannot
46:57 - assign double value inside a type of
46:59 - float
47:01 - okay so I can now I can here mention
47:04 - float so it will not giving any error
47:09 - okay
47:12 - so uh what if I am not sure about the
47:16 - uh the
47:18 - what if I am not sure about what number
47:21 - value a variable will assign in the
47:23 - program so I can what I can do is I can
47:26 - use a number data type
47:29 - so I will Define where test
47:33 - and assign it number data type
47:37 - okay
47:38 - so I can put anything into like I can
47:42 - put a string
47:43 - into the okay sorry I can put a string
47:47 - into test
47:49 - foreign
47:51 - integer into text
47:54 - oh sorry number so I can go to integer
47:56 - into test I can put a decimal into test
47:58 - I can put anything into test if I have
48:02 - this I defined it data type as number
48:04 - so now we have completed our numbers
48:07 - data type now we will move on to
48:09 - characters
48:10 - to represent character in kotlin uh care
48:13 - data types are used so
48:16 - uh what I'll do is I'll just create a
48:19 - letter where
48:20 - ah letter
48:22 - and
48:24 - what I do is I Define its value as
48:28 - Square
48:29 - so the cad that I was used
48:31 - so I can assign it any
48:35 - character so please note that the
48:37 - character will be in single quotation
48:39 - marks
48:41 - okay
48:44 - so I have defined a character now the
48:46 - next data type is booleans so what
48:49 - booleans are booleans are simply either
48:52 - true either false they have only two
48:54 - possible values
48:56 - so when I Define a Boolean variable
49:01 - Boolean
49:05 - so I'll name it as flag
49:08 - and it has a data types Boolean
49:11 - so I can either
49:14 - give flag value to Tru E2 okay
49:20 - or a false okay
49:24 - so it has only two values
49:27 - so booleans are used generally used in
49:30 - decision making statement that we will
49:32 - be using in our later discussion
49:34 - okay then further we have arrays
49:38 - so we will be discussing arrays in a
49:40 - separate topic but just to Define it an
49:43 - array is a container that hold value of
49:46 - a of one single type for example you can
49:49 - create an array that can hold 100 values
49:51 - of n type
49:52 - okay then we have string so just for
49:55 - defining purpose I will Define a string
49:57 - like well
49:59 - name I have already defined it but okay
50:03 - so this is my name
50:07 - okay so please note that the string must
50:10 - be in double quotation mark
50:13 - okay thank you for watching this video
50:15 - we have now covered the data types in
50:17 - kotlin
50:20 - in this video we are going to cover the
50:23 - operators in
50:25 - kotlin so I have already registered the
50:29 - type of operators and the operators
50:31 - here so the first type of operators are
50:35 - arithmetic operators
50:38 - so here is the list of arithmetic
50:40 - operators the first one is the addition
50:43 - so whenever I use the plus sign we are
50:46 - going to use it for addition so the
50:49 - addition can be of two integers or it
50:52 - can be of two strings also it is known
50:55 - as string or constant concatenation and
50:59 - we will be knowing about it in a while
51:02 - so another arithmetic operator is the
51:05 - minus sign or the subtraction
51:08 - so it is a subtraction of subtraction
51:10 - operator when I use it it generally
51:13 - subtract one integer from other or one
51:16 - variable from other okay the other is
51:18 - the multiplication operator
51:21 - okay it is self-explanatory so when I
51:24 - use it it is used to multiply the
51:28 - data type the other is uh division data
51:32 - type so whenever I use the division
51:34 - operator so whenever I use the Slash so
51:39 - it generally means that we have to
51:41 - Define we have to divide one variable
51:44 - from other so here interesting part is
51:46 - the uh the percentage sign or the
51:49 - modulus operator
51:51 - so the modulus operator Returns the
51:56 - remainder
51:57 - so I'll just make a function and explain
52:01 - all this to you
52:03 - so I will create a value
52:08 - a equals to 15 and b equals to
52:15 - to five
52:17 - ok so I'll just print
52:21 - all these the result of all these
52:24 - operators so a plus b
52:28 - and I'll just copy it
52:36 - okay
52:38 - so
52:40 - plus minus
52:42 - multiplication
52:45 - the division and the modulus operator
52:49 - so you can already guess the result and
52:53 - we will be seeing it in a while so the
52:57 - result of this will be 20 the result of
52:59 - this will be 10 the result of this will
53:01 - be 15 into 5 the result of this will be
53:04 - 15 divided by 5 that is 3 what will be
53:06 - the result of this the result of this
53:08 - will be 0. so it Returns the uh
53:13 - the
53:14 - remainder when a is divided by V
53:18 - so I'll just so these are explainable
53:22 - what I'll do is I'll make it 17 here and
53:27 - run the program again
53:29 - so now what will be the uh well the
53:32 - result the printed so it is 2 so when 17
53:36 - is divided by 5
53:38 - it is 3 times 5 plus 2 so the remainder
53:41 - is 2 so the result of the modulus
53:43 - operator is 2 okay I hope it is clear so
53:47 - moving on we have a comparison operators
53:51 - so
53:55 - okay before that okay so uh we have
54:00 - comparison operators
54:02 - so the first one is we the uh
54:07 - the
54:09 - less than sign
54:11 - so whenever uh a is less than b so I'll
54:15 - just make
54:18 - so can you guess what will be the result
54:21 - of n comparison operator
54:24 - it will be a Boolean
54:27 - so whenever I'll compare
54:29 - a less than b
54:33 - okay so when I run this program
54:36 - what will be the result
54:38 - is a is less than b no so the result
54:41 - will be false okay so mostly the result
54:45 - of the comparison operator is a Boolean
54:47 - so first is less than operator second is
54:50 - the greater than operator third is the
54:52 - less than or equals to operator okay
54:54 - fourth is the greater than or equal to
54:56 - operator this is the equal to equal to
54:59 - operator so let's check whether a is
55:01 - equals to b or not is equal to operator
55:03 - this is this is is not equal to operator
55:05 - so when I Define both as 5 and 5
55:11 - foreign
55:13 - when I this do this println a is equals
55:17 - to equals to B so what will be the
55:18 - result what will be the output so the
55:20 - output would be true as a is equals to B
55:24 - okay
55:25 - so these are the comparison operators
55:29 - now we will move on to the uh
55:32 - assignment operator
55:34 - so we have already used assignment
55:36 - operator here
55:37 - okay so the assignment operator used
55:40 - here is the equal to operator
55:44 - okay we have also plus equal to minus
55:47 - equal to into equal to divided by equal
55:49 - to and modulus equal to
55:53 - okay so what are the basic functionality
55:57 - of this
55:58 - so I'll explain that
56:00 - so what if I
56:02 - create a variable X which is equals to
56:07 - a
56:10 - which is equals to A okay so I can do
56:13 - that
56:15 - now I'll print the value of
56:19 - println X
56:22 - okay
56:24 - now what I I will do is I'll
56:27 - assign X as X plus equals to A
56:32 - and now I'll print the value of x what
56:36 - I'll do is now I'll assign X as x minus
56:39 - equals to A
56:41 - and now I'll print the value of x now X
56:46 - ah into equals to A
56:50 - and now print the value of x now X
56:53 - divided by equals to A
57:03 - okay so you can guess the result or we
57:08 - will see them and then I'll explain them
57:09 - to you
57:12 - so the results are 5 10 5 5 25 5 0 okay
57:16 - so first was x equals to eighth of
57:19 - Financial and X so the value of a was
57:21 - five basically
57:23 - so here x is equals to five okay so here
57:27 - the value of x was 5.
57:33 - so what I did is I did X plus equals to
57:36 - A so this basically mean a means that X
57:40 - should be equal to X plus a
57:47 - okay so the value of x was 5 and I
57:52 - assign reassigned the value of x as X
57:54 - plus a so the value of x here would be
57:58 - 10 okay I hope it was clear to you so
58:03 - the basically the meaning of X plus
58:05 - equals to A is x equals to X plus a okay
58:08 - so the value of x was already 5 and I
58:10 - here reassigned the value of x as X plus
58:13 - a so 5 plus 5 that is 10.
58:16 - now the here the value of x is 10 and
58:20 - this implies that X should be equals to
58:23 - x minus a
58:25 - okay so X was 10
58:28 - and X was 10 and a was five so I I
58:32 - reassigned the value of x is 10 minus 5
58:34 - so here the value of x should be 5 okay
58:39 - and we can check that also
58:41 - so here the value of x is 5 and I
58:45 - to create reassign the value of x such
58:48 - that X is X should be equal to X into a
58:51 - so X is 5 a is 5 so here the reassign
58:55 - value of x should be 25 okay so it is
58:58 - pretty easy and interesting and I hope
59:01 - that should be clear to you so here the
59:05 - value of reassign value of x should be x
59:09 - divided by a so X was 25
59:12 - a was 5 so X the new value of x should
59:17 - again be 5.
59:19 - okay and we are also seeing that it is
59:22 - true
59:24 - now it means that the reassign value of
59:28 - x should be the remainder when X is
59:31 - divided by a
59:33 - so now X is 5 a is also 5 the remainder
59:36 - is 0 when X is divided by a so here the
59:39 - reassign value of a is 0. okay so we
59:43 - have now completed the arithmetic
59:45 - comparison and assignment operator now
59:47 - we will move on to the increment and the
59:50 - decrement operator
59:51 - so what I do I'll do is I'll just
59:56 - so here what is the value of x x is 0.
60:01 - okay
60:03 - so now what I'll do is I'll just
60:06 - increase
60:08 - the value of x as X plus plus
60:11 - okay
60:12 - and then I'll print the value of x and
60:15 - then I'll do x minus minus and then
60:17 - again print the value of x
60:19 - okay so uh when I have to comment this
60:23 - all out
60:25 - okay no problem
60:27 - when if I have to comment all this out
60:30 - so what I can do is I can just press
60:32 - Ctrl and the slash button
60:35 - so it it is all commented out okay so
60:39 - the value of x is a and it is 5 so value
60:43 - of x is 5 when I run this program
60:46 - when I run this program
60:48 - so the output is ah
60:52 - output is 6 and 5. so here the value of
60:55 - x was 5 and I did X plus plus the Inc I
60:58 - incremented the value of x and then
61:00 - printed it so it is 6 and then I
61:03 - decremented the value of f x and then
61:05 - printed it so it is 5.
61:07 - okay so I hope
61:10 - that all is clear to you and before the
61:14 - video ends I like you to uh make a
61:17 - program
61:18 - foreign
61:24 - that prints the sum of two number
61:30 - okay I hope that would be easy and you
61:33 - will do it
61:35 - some of the
61:36 - that prints the
61:39 - sum of two numbers
61:41 - okay thank you for watching this video I
61:43 - hope you enjoyed and learned
61:45 - thank you
61:47 - in the previous video we have discussed
61:49 - about the various operators in kotlin
61:52 - so now we will discuss about what
61:56 - happens if one or more than one two or
62:00 - more than two operators occur
62:02 - simultaneously in the same statement
62:06 - what I mean to say is uh
62:09 - like I'll just mention a function
62:15 - having well variable
62:18 - or value X as having 20
62:24 - value y having
62:27 - 30 and variable Z having a value of 40.
62:33 - so
62:35 - I am asking you that what happens when
62:41 - okay I'll just make it where what
62:43 - happens when I'll assign reassign X
62:46 - plus equals to
62:49 - Z
62:51 - into y
62:53 - what happens then
62:55 - and I'll then print l
63:00 - so what would be the output of this
63:02 - particular function
63:04 - how can we decide that there are two
63:08 - equal
63:09 - two operators simultaneously like we are
63:13 - assigning the value of x as X Plus Z
63:18 - into y so we cannot say that we here use
63:22 - the
63:25 - okay
63:26 - so what we do here how we determine the
63:30 - output so we there is a order of
63:34 - Precedence
63:35 - so we can treat it like the preference
63:37 - order
63:38 - so the post fix has the most preference
63:42 - order
63:43 - so I'll just quickly explain to you what
63:46 - is postpicks and prefix so we have
63:49 - discussed how the increment and the
63:50 - decrement operator right the plus plus
63:52 - and the minus minus operator that
63:54 - increase or decrease the value by 1. so
63:57 - the postwiz and the prefix increment and
63:59 - decrement operator
64:01 - R A plus plus and plus plus a
64:04 - so a plus plus is the post fix and plus
64:07 - plus a is the prefix increment operator
64:09 - okay so the original value of a is
64:12 - returned at first and then a is
64:14 - incremented by one
64:16 - so just read it out and I'll be
64:20 - explaining it in more detail at later
64:22 - part of this video okay so I'll just
64:25 - continue with this so the higher highest
64:28 - preference is of the most fix
64:30 - uh
64:32 - operator and the second highest
64:35 - preference is of prefix operator the
64:39 - multiplicative operator is the into the
64:42 - divide and the modulus okay it has the
64:44 - third most
64:46 - or or preference okay
64:50 - and then comes the additive operator of
64:52 - the plus and the minus and then comes
64:53 - the comparison operator when we do the
64:55 - comparison and all and then comes the
64:58 - equality operator and at last there are
65:01 - the assignment operators okay so this
65:05 - has the least priority okay
65:09 - so here your bodmas logic would be true
65:12 - but if it would be into equals to and Z
65:17 - Plus y it won't be true so I'll just
65:20 - quickly run the program and uh
65:24 - till then we will discuss
65:27 - what would be the value of x
65:30 - so ah as we can see that the
65:33 - multiplicative operator has the higher
65:35 - preference so the
65:38 - okay so the output is 10 20 uh 1220 okay
65:42 - so we can see that the multiplicative
65:45 - operator has the higher preference so
65:47 - firstly the
65:50 - multiplication would happen and the code
65:53 - will look will look like X plus equals
65:55 - to Z into Y what is z into y it is 120
65:59 - 1200 okay so X plus equals to uh 1 1200
66:06 - so the reassigned value of x should be
66:09 - the
66:10 - previous value of x plus the 1200 and
66:13 - what is the previous value of x the
66:14 - previous value of x is twenty so the
66:16 - reassigned value of x is 1220 as we saw
66:19 - in the output
66:21 - okay
66:23 - so it is I guess it is clear to all of
66:26 - you so we will just work on one more
66:30 - uh search example
66:33 - where variable a is 40 variable B is
66:37 - also 40.0 okay so it is a double type
66:40 - and
66:42 - there is a value C that is equals to
66:45 - plus plus a minus minus minus B
66:51 - okay so now what is b
66:54 - so now we will discuss first and then we
66:57 - will see the output
66:59 - so here a is 40 B is 40.0 a is 40.0 now
67:04 - we can see that the prefix operator has
67:07 - the most uh the highest order
67:11 - okay also we have seen here that in the
67:15 - prefix the value of a is in incremented
67:18 - by 1 and then it Returns the value okay
67:21 - in the post fit post fix the value of a
67:24 - is written in the first and then the
67:27 - a is incremented by one so what I am
67:31 - saying trying to say here is that here
67:35 - the the plus plus a Returns the
67:37 - incremented value okay so the plus plus
67:40 - a is the incremented value
67:44 - so it has the highest
67:47 - order of Precedence
67:50 - so like I can say that c is equals to
67:53 - plus plus a will be 41.0
67:57 - and minus minus B would be 39.0
68:03 - so when I run this program
68:06 - I should be able to see the output as
68:09 - 2.0 okay and here it is so we were right
68:15 - so we can conclude the order of
68:18 - Precedence
68:19 - and we can say that it's just a
68:22 - preference order by which the operators
68:24 - are designed this decided okay
68:26 - now we will come to this increment and
68:30 - decrement operator
68:34 - and what is the what is the meaning of
68:36 - prefix or postfix operator so when I
68:40 - Define uh
68:42 - a variable
68:45 - um Alpha
68:46 - and assign its value as 23 okay and what
68:52 - I'll do is I'll just
68:54 - print Ln and
68:57 - a plus plus
68:59 - sorry Alpha plus plus
69:02 - so what result do you expect so mostly
69:06 - you would be expecting
69:09 - 24. but that's not true
69:12 - the output is 23 isn't that shocking so
69:18 - what I mentioned about the post phase
69:21 - operator was that the original value of
69:23 - a is written at first so when I run this
69:26 - program the alpha plus plus Returns the
69:29 - original value of alpha but at the end
69:32 - of this line or at the starting of the
69:35 - next line the value of alpha is
69:37 - incremented by one so when I print the
69:41 - value of alpha here
69:43 - what will happen is so here it at line
69:47 - 36 the the output would be 30 24 or 23
69:52 - and here at line 37 the output will be
69:55 - 24.
69:57 - okay that's just because the prefix and
69:59 - the post fix
70:01 - so what would happen if instead of alpha
70:05 - plus plus I'll print the value of plus
70:09 - plus Alpha
70:11 - okay so uh
70:15 - the prefix operator increases the value
70:19 - instantly by 1 and then Returns the
70:21 - value so the output of this would be
70:25 - 24 only
70:27 - okay because it is a prefix operator
70:30 - okay it is 25 because after that the
70:34 - alpha of well the value of alpha is
70:37 - changed to 24 and then we have increased
70:40 - it one more time so it is 25 okay so you
70:43 - can note here that it is implemented and
70:46 - then returned and in the post fix it is
70:49 - written and then
70:50 - incremented okay now we will move to the
70:54 - type conversion so what do you mean by
70:57 - type conversion basically if I know
71:00 - nothing about cotton I just know English
71:02 - so what what one should mean by type
71:04 - conversion one should one would mean
71:07 - that we have to convert the type
71:09 - okay so uh what I what will happen if I
71:14 - have to convert like I have a is as 40
71:17 - and I have to convert it into an integer
71:20 - so how will I do so so I will con uh
71:24 - create a variable and name it as a int
71:31 - okay
71:32 - and give it a value of
71:35 - a which is the original operator and
71:40 - add two int function to it
71:43 - okay so what it did what it what it did
71:46 - is it created the value of a into two
71:52 - into
71:53 - so it just transferred the value of a to
71:56 - int so now the a into variable is of
71:59 - integer type
72:01 - okay so when I print the value of
72:05 - end
72:11 - okay just I'll just hide this code
72:14 - and when I print the value of a int it
72:17 - should be 40 instead of 40.0
72:21 - okay so uh
72:24 - the it it is used many times so when I
72:28 - suppose I have a someone's phone number
72:30 - uh stored uh like an integer
72:34 - phone number
72:37 - as integer
72:41 - okay so now what I have to do is I have
72:44 - to store this integer
72:47 - store this integer
72:49 - as a string because
72:52 - um
72:53 - but just I have to do so so what I'll do
72:56 - is I'll just uh
72:58 - create a another variable
73:02 - which is phone string
73:06 - and
73:07 - what I'll do is I'll just give it a
73:09 - value of phone number dot to string
73:13 - okay and I'll when I hover over it and
73:15 - it has the data type of string
73:18 - so you might all have uh somewhat
73:22 - somewhere heard about the ski values
73:27 - a s c i s Sky values
73:30 - if you haven't heard about it just
73:32 - Google it and then resume the video okay
73:36 - so what what if I have a character
73:39 - any character I have uh any character
73:43 - and I want its Sky Value what will I do
73:49 - so I have a character suppose a and I
73:53 - want its Sky Value so what I'll do is
73:55 - I'll just print Ln and a DOT oh sorry
74:00 - character dot to enter
74:03 - so
74:10 - it will
74:11 - when I run this program
74:14 - it will just show the Sky value of a
74:19 - okay so the Sky value of a is 97 when I
74:23 - want the Sky value of exclamation mark
74:24 - I'll run the program and the Sky value
74:28 - of x termination Mark is
74:31 - 33. okay so that's all for this video
74:35 - guys thank you for watching this video
74:36 - and stay tuned for me
74:40 - in the previous two videos we have
74:41 - covered uh operators and the data type
74:45 - conversion so in this video uh we will
74:48 - be covering the string and the string
74:51 - templates
74:52 - so what is basically a string so string
74:55 - is a sequence of characters
74:58 - okay uh so I'll go ahead and make a
75:03 - function
75:04 - in which I'll mention a variable a and
75:11 - give it a value this is a
75:17 - coder exclamation mark okay so uh this
75:21 - is a coder and with three spaces and an
75:25 - exclamation mark comprises uh the these
75:29 - all character comprises a string okay so
75:32 - remember string is always quoted in
75:35 - double quotes
75:36 - okay and the space and the punctuation
75:40 - are also characters which are part of
75:43 - the string
75:46 - so uh uh the first character in the
75:51 - string has an index 0. okay so in this
75:54 - string the T has a character Zero as a
75:58 - index 0 okay so as we move forward with
76:01 - the string so this is a coder uh the
76:04 - index increases by one okay and each and
76:07 - every space and each and every
76:09 - punctuation mark has its own index okay
76:13 - so when I mention the index and the
76:16 - string just one above the other and
76:18 - mention it it in a table so that is
76:21 - called an index table
76:22 - okay so I have just mentioned the part
76:25 - of index table here okay so uh it's it
76:30 - says that which character has what index
76:32 - okay
76:34 - so uh in this the C character has a
76:37 - index of 10.
76:39 - okay
76:41 - so this is the basic about string we
76:44 - know we already know how to initialize a
76:46 - string okay so there is also a second
76:50 - method yeah second we can say that it is
76:53 - a second uh method to initialize a
76:56 - string we can do that string variable B
76:59 - string we we will mention the data type
77:01 - of that string beforehand
77:04 - okay we can do that also
77:07 - so we can Define the string in two ways
77:10 - okay so we will be covering uh most of
77:15 - the string functions in the later part
77:17 - of video but I'll be mentioning one
77:19 - string function in this video uh that is
77:22 - the length function so uh remember this
77:27 - a string having index from 0 to 15 has a
77:30 - length of 16 okay it has 16 characters
77:34 - in it including zero okay so what if I
77:38 - have to uh like I have a value I that
77:43 - stores the uh the store the length of
77:46 - string a
77:48 - so uh I'll just mention a DOT length
77:53 - okay
77:54 - and this uh this length function
77:57 - measures the length of any string
78:00 - so I'll go ahead go ahead and print the
78:03 - value of uh
78:05 - I
78:07 - so when I run this program I expect the
78:10 - result to expect the output to be 16.
78:15 - okay
78:20 - so
78:22 - yeah so the output is 16 so the length
78:25 - of string a is 16 okay so what if I have
78:31 - to mention I have to get the output as
78:35 - the length
78:39 - of the string
78:43 - is
78:45 - 16 okay so I have to print this
78:48 - statement and
78:51 - uh that value here is I so what I can do
78:56 - is I can go ahead and write a print
78:58 - statement which contains a string that
79:02 - the string is the value of string is
79:06 - okay the value of the the length of
79:08 - string is so I'll just go ahead and
79:11 - print this
79:12 - okay the length of string and then what
79:15 - I can do is I can in the next line I
79:18 - will mention a println statement and
79:20 - that contains I
79:23 - okay
79:24 - so when I go ahead and run this program
79:28 - what I will find in the output is the
79:32 - output will be the length of string is
79:34 - 16 but it but don't you think it's a bit
79:37 - lengthier
79:38 - and there must be a shorter way so you
79:41 - are thinking right so what I'll do here
79:44 - is I can use string function string
79:48 - template here so string template is
79:50 - nothing but a dollar sign okay so what
79:52 - is a string template so uh while
79:56 - mentioning a string
79:58 - what I can do is
80:01 - I can so I will just mention it print Ln
80:05 - yeah so after the uh mention after the
80:09 - uh the string I have to put inside the
80:12 - string the value of I so what I can do
80:15 - is I can just put the dollar sign and
80:18 - the I okay when I hover over it it says
80:23 - very very value I int okay
80:27 - so it has the value of I so when I go
80:30 - through this line it will print the
80:32 - string the length of the string is and
80:35 - inside the string it has the value I
80:38 - so before so it does not print the
80:41 - length of the string is dollar I dollar
80:43 - sign I it does not print that what it
80:45 - print is we will see when I run this
80:47 - program
80:48 - okay
80:49 - so uh
80:52 - yeah it prints the the length of string
80:55 - is uh and instead of dollar I it puts
80:58 - just the value of I
81:00 - okay so what if I have to uh print I
81:05 - have I have not defined up any value I
81:08 - okay
81:09 - and I have to print the length so I have
81:13 - not defined I'll just make this go and
81:16 - yeah so now what I will do
81:20 - I have a string and I have two printed
81:23 - value and inside the string
81:27 - I have a I can I can do one thing I can
81:31 - just go and instead of print Ln I'll do
81:36 - here print and in the next line what I
81:39 - can do is I can go print Ln and here put
81:43 - I can put a dot length
81:45 - okay so when I run this program it will
81:48 - be giving an output the length of string
81:50 - is a DOT length and which is 16.
81:53 - okay
81:55 - so it is correct but now here also it is
81:59 - redundant and more of course like more
82:03 - lines are used it is redundant because
82:05 - we are using the print function twice
82:07 - so in kotlin we do not do that so what I
82:10 - will do is
82:11 - I can use the string template here also
82:14 - but
82:15 - but when I use the string template
82:18 - without any uh something
82:21 - so what happens is I'll mention just a
82:24 - DOT length so it automatically
82:27 - insert it into curly braces okay so I
82:31 - was trying to establish my point here
82:33 - the point was that whenever there is an
82:37 - expression in a string template we put
82:40 - it inside a curly brace okay so when I
82:43 - run this program it automatically puts
82:47 - the length of string a inside this
82:50 - template and we have the output as the
82:54 - length of string is 16.
82:56 - okay so that's all for this video in the
83:00 - next video we will be covering uh the
83:02 - various type of string functions that
83:04 - are available in kotlin thank you very
83:06 - much
83:09 - uh in the previous video we have covered
83:11 - about string and string function in this
83:14 - video we are going to learn about more
83:17 - string functions such as the length
83:19 - function we discussed about in the
83:21 - previous video okay so uh the string
83:24 - functions are the function which will be
83:26 - implemented on string as the name
83:28 - suggests
83:29 - so the first function is the length
83:31 - function I have discussed it in the last
83:33 - video but still I will discuss it in
83:36 - this video also so I'll go ahead and
83:39 - create a function Main in which I'll
83:43 - Define a
83:45 - string
83:47 - of value a is equals to
83:51 - hello
83:53 - um
83:55 - okay
83:57 - I'll not leave space and
84:01 - value B is equals to
84:05 - this is a
84:08 - coder
84:10 - and I'll Define another
84:13 - um
84:14 - value C
84:17 - and another string with a
84:21 - value and my
84:23 - age is and I'll Define another value
84:28 - D and it is an integer which is with the
84:32 - value of 90. okay so I have three
84:36 - strings and a
84:38 - uh integer so firstly I am going to
84:42 - discuss the length function okay
84:44 - so ah
84:46 - what about what if I have to get the
84:50 - length of the the value of the string b
84:55 - or the string a okay so I'll just go
84:59 - ahead and write the print statement
85:01 - okay so the value the
85:08 - length of
85:12 - a is
85:14 - and I have discussed about the string
85:17 - template in the previous video so I am
85:20 - going to use that here okay and the
85:23 - length of a is a DOT length
85:27 - okay
85:28 - so the length function is used here as a
85:32 - DOT length so whatever I have to see the
85:35 - length of B whatever I have to see the
85:37 - length of C so just I am going to
85:41 - uh
85:44 - copy this and paste and instead of B
85:48 - I'll do c so uh when I run this program
85:52 - I should find the length of a b and c
85:57 - as the output
86:00 - okay
86:01 - so this is the use of the length
86:03 - function
86:04 - so as in the output we can see the
86:06 - length of a is 5 the length of a is 15
86:08 - okay so I here did not change the
86:13 - values okay so length of a is 5 the
86:16 - length of B is 15 and the length of C is
86:19 - 13. we can verify from here also but
86:24 - uh yeah I guess you are you have now a
86:28 - clarity about the length function the
86:30 - second function we are going to talk
86:32 - about is the get index function so get
86:34 - index function Returns the character at
86:36 - the specific index within the bracket
86:39 - now uh I have already told about you the
86:42 - index so in this hello string I will
86:45 - just mention h e l l o so the H here has
86:52 - a index 0 the E has index 1 the L has an
86:55 - index 2 and another L as a as an index 3
86:58 - and the O has an index 4
87:01 - okay so what the get index function does
87:05 - it Returns the character at a specific
87:08 - at a specific index specified within the
87:11 - bracket
87:12 - so I will just
87:15 - mention a print function and I have to
87:18 - get what is the character at index 4 of
87:23 - B
87:25 - string
87:27 - so the character
87:31 - the character at index 4 of B is what
87:38 - I'll do is I'll just go B uh okay so
87:41 - I'll first use string template and the
87:45 - ah so the function is get in bracket
87:49 - index so I'll use the string template
87:51 - and I'll just mention the string that is
87:54 - B and the function that is get index
87:58 - okay and then the index so I have to
88:01 - find the index at 4 okay
88:05 - so when I run this program
88:07 - what is the expected output so at 4 it
88:11 - has a space
88:13 - okay so it gives us space uh so I'll
88:16 - just go ahead and change it to 5.
88:20 - and when I run this program
88:23 - we can see that
88:25 - the output is the character at index 4
88:28 - of B is index 5 of B is uh I so yeah it
88:35 - is pretty clear from here that the index
88:39 - at index 4
88:41 - of string B is I so here it is
88:46 - underlined by a
88:48 - yellow line so what I will do is I will
88:50 - go here and hit alt plus enter
88:53 - and it suggests that replace get call
88:56 - with indexing operator so what is an
88:57 - indexing operator
88:59 - so I'll just show you that
89:02 - okay so instead of doing this what I can
89:05 - do is I can just
89:07 - mention B and that and then in the
89:11 - bracket I'll square bracket I'll mention
89:13 - five
89:14 - okay so when I run this program I will
89:17 - get the same output
89:19 - so instead of using get function or a
89:21 - bigger code I'll just do is what is what
89:26 - b square bracket and the index okay it
89:28 - gives us the same results so I guess
89:32 - the get index function is also pretty
89:34 - clear
89:35 - now what about the subsequence so as the
89:37 - name suggests it provides a sequence
89:40 - which is a part of the mainstream
89:43 - okay so the the function goes like sub
89:47 - sequence start index and N index so
89:50 - between start index and end index it
89:52 - prints all the uh the string okay so it
89:55 - Returns the substring between the start
89:57 - index and the end index but excluding
90:00 - the index in N index it is a main point
90:02 - one of the main point okay so it
90:04 - excludes the N index so what if I uh I
90:09 - go and say put the print the substring
90:13 - from one to three
90:15 - of a so I have to mention one two four
90:20 - okay because it excludes the N index so
90:24 - I'll just go ahead and print for the uh
90:27 - better understanding
90:29 - so print Ln
90:31 - the substring
90:35 - is I'll go with the string template and
90:41 - for a I have to mention
90:44 - and the function is subsequence and the
90:48 - start index is
90:50 - one
90:51 - and the end index is 4.
90:54 - okay so what happens when I run this
90:57 - program what will be the output
91:01 - so when I run this program it gives ell
91:05 - but at the fourth index there is o
91:09 - so why is all is why o is not printed
91:12 - because it excludes the excludes the
91:16 - character at the index last index
91:18 - mentioned here okay so keeping that in
91:21 - mind uh just predict the result uh after
91:27 - pausing the video of the substring ah
91:31 - of B uh 2 to 7. okay
91:36 - so what will be the substring of B Dot
91:40 - subsequence
91:41 - uh 2 comma seven just pause the video
91:44 - and uh think about it and write it on a
91:48 - paper or something okay and then now you
91:50 - can play the video and check so it is is
91:53 - space is
91:56 - now we will go ahead and check so uh
92:00 - this so the second is here second uh
92:04 - index is here okay third index is here
92:06 - and fourth fifth sixth seventh so
92:09 - seventh is a space so uh it is not
92:12 - clearly visible here but the space is
92:13 - not printed here okay it stopped at the
92:16 - uh s okay I'll just go ahead and make
92:20 - that nine
92:21 - so it would be more clear
92:23 - okay so not nine I'll make that 11.
92:31 - so uh we can see that at the 11th index
92:35 - the letter the character o is there but
92:38 - in the output we cannot see o because
92:41 - the uh last index is not printed there
92:44 - so I hope the subsequence function is
92:47 - also clear to you
92:49 - okay so we have now till now covered the
92:51 - three functions which are mostly usable
92:54 - now uh we will be we will be moving to
92:57 - some less usable function okay so there
92:59 - is a comparative function so the
93:01 - compared to function compares the object
93:04 - with the specified object of order
93:08 - okay so it just compare two strings it
93:12 - returns 0 if the object is equal it
93:15 - returns a negative number if it is less
93:17 - than the other okay so like what will be
93:20 - the um
93:21 - I have to compare the okay what will be
93:25 - what will it be comparing it will be
93:27 - comparing the length of the two strings
93:29 - so uh what I'll do is I'll just print Ln
93:33 - and print a DOT compared to B
93:38 - okay so I am comparing here A to B
93:42 - so uh like it is the specified other
93:46 - object is B here the specified other
93:48 - object is B and the object our main
93:51 - object is uh a
93:54 - okay so if it is less than the other it
93:58 - gives a negative number and if it is
94:00 - greater than the other it gives a
94:01 - positive number so you can guess the
94:03 - output here and while I run the program
94:07 - so when a is compared to B it provides a
94:11 - negative number that means that a is
94:13 - lesser than a smaller than b okay it is
94:16 - pretty clear from here that b is a
94:18 - larger string
94:21 - so I will just go ahead and compare also
94:25 - compare
94:26 - B from
94:29 - C
94:33 - okay so you can guess the output here
94:37 - has B is a larger string so it gives a
94:42 - positive
94:43 - okay and what I'll do is I'll just
94:46 - create for uh the sake of just com
94:50 - comparing the function uh
94:53 - a variable a value F and just change
94:58 - some characters in it
95:01 - and
95:05 - okay and now I'll
95:08 - do is what I'll do is I'll just compare
95:13 - C compared to
95:16 - f
95:18 - and now I'll run the program and the
95:20 - expected output is zero because the two
95:23 - strings are of equal length
95:28 - okay
95:32 - but it gives a a positive number why so
95:37 - because it it just not compares the
95:41 - length Okay it compares the object
95:44 - specified within the string
95:48 - so the object the object f is uh
95:53 - greater than the object C
95:56 - okay so uh if I have the same string
96:00 - here then it will be 0 but if I have the
96:05 - purpose of me stating that was just that
96:08 - if I have the same string then only it
96:10 - will be 0 if I don't have the same
96:12 - string then the output could be Z
96:15 - positive or negative we cannot Define
96:17 - that as per as of now okay so thank you
96:20 - for watching this video in the next
96:21 - video we will be covering more string
96:23 - temp string functions okay
96:27 - in the previous video we were discussing
96:30 - about string functions and in this video
96:32 - we are going to continue with the
96:33 - discussion okay so uh in the previous
96:36 - video we have discussed about the uh the
96:41 - the length function the get index
96:43 - function the subsequence function and
96:45 - the compare to function okay
96:47 - so uh in
96:49 - I think that should be clear to you
96:53 - okay so now next is the equals function
96:57 - so the equal function indicates whether
97:01 - some object is equal to the other object
97:04 - or not okay
97:07 - so uh it is just like the comparison
97:10 - operator equals to equals to okay
97:13 - so what I'll do is I'll just
97:17 - uh
97:19 - okay so you can guess the return type of
97:21 - the the function is Boolean okay because
97:24 - it returns that whether it is equal to
97:27 - or not so when I uh say a
97:32 - equals to equals okay so it is equals
97:36 - and I say B
97:40 - ah B
97:43 - and when I
97:46 - when I run this so you can guess the
97:51 - output the output is false
97:55 - because they are not equal
97:57 - [Music]
98:08 - okay so as you can see here the output
98:09 - is false
98:11 - because they are not equal and when I do
98:14 - c and d
98:17 - C
98:19 - and I compare it with d and again when I
98:23 - run the program
98:26 - uh now the output must be 2 because they
98:30 - are equal
98:31 - okay no it is false why it is false
98:35 - uh okay so I have done some mistake I
98:40 - have to compare uh
98:43 - C with f okay sorry
98:48 - so yeah when I compared C with the D the
98:51 - data type is only not same
98:53 - one is string and other isn't so there
98:56 - is no chance of them being equal so it
98:59 - is true now what happens when I uh
99:01 - change one index
99:03 - in the string
99:08 - so you can see the output is false so it
99:11 - is only true when both string are equal
99:13 - in each and every manner possible now it
99:17 - is having some suggestion now we will go
99:19 - to it and plus press alt plus enter it
99:22 - is suggesting that we should replace it
99:23 - with equals to equals to sign as I
99:26 - already mentioned that it is nothing but
99:28 - the comparison operator equal to equal
99:30 - to
99:31 - okay moving on to Hash code the hash
99:34 - code returns a hash code value for the
99:37 - object okay so you might be wondering
99:39 - what what the hash code is uh I'll
99:42 - suggest just go to the Google type hash
99:44 - code of a string and you will get to
99:46 - know
99:47 - okay so uh I want the hash code of
99:52 - uh let's say string
99:55 - C
99:56 - so I'll just type c dot hash code
100:01 - okay and when I run this program I'll
100:03 - get the hash code for C string
100:06 - so as you can see in the output screen
100:09 - the hash code for C string is this okay
100:12 - when is let's say I want hash code for
100:15 - all the strings possible
100:16 - okay so I'll just
100:18 - mention all the strings
100:22 - A B C and F we have four strings
100:27 - a
100:29 - B
100:31 - C and
100:33 - [Music]
100:35 - F okay
100:36 - so when I run this program
100:47 - it gives the hash code for all these
100:50 - string now if you note
100:54 - that these two values are negative and
100:57 - these two values are positive so why is
100:59 - that the hash code could be positive
101:01 - negative or any value
101:03 - okay it's just a representation
101:05 - okay so now next is the plus operator
101:09 - plus function so what the plus function
101:11 - does is
101:14 - okay when I use the plus function
101:17 - let's say uh I have print Ln
101:23 - a
101:25 - Plus
101:27 - B now uh the a plus b is another string
101:33 - okay so I can
101:35 - make another function use on this string
101:39 - also so I can use the plus function
101:41 - again also okay and it's the plus
101:45 - function is not restricted to string
101:48 - only so I can use the plus function and
101:50 - use any data type you can I can use your
101:53 - D also
101:54 - okay so when I uh run this program
101:57 - so you can see the addition of all this
102:00 - a b c and d
102:05 - so it gives like hello this is a coder
102:09 - and my age is 19. okay so what there is
102:12 - a mistake that there is no space given
102:14 - because I have not given any spaces here
102:17 - here or here if I give give spaces here
102:20 - then it would be a perfect code
102:23 - so that was all about the plus function
102:26 - now instead of using dot plus I can also
102:29 - do that I just
102:32 - I can just do a plus b
102:36 - Plus
102:38 - C okay
102:40 - and when I run this program
102:44 - I can find that it gives hello this is a
102:48 - coder and my H now this is string
102:52 - concatenation okay
102:54 - it it is nothing but it just contatinate
102:58 - the string it means that it puts three
103:01 - two or three string or many string
103:03 - together and make it a new string okay
103:06 - so plus function returns a string
103:08 - obtained by concatenating the string
103:11 - with the string representation of the
103:13 - given other object okay
103:16 - so that was all about the plus function
103:17 - next is the two string function so we
103:20 - have already uh talked about the two
103:23 - string or two end or two all the data
103:26 - type conversion function so it's it is
103:28 - nothing but suppose I have a uh I have a
103:34 - integer uh
103:39 - that has a value that has a phone number
103:41 - okay
103:43 - so
103:45 - oh
103:46 - also okay a is already defined I'll just
103:50 - give it name as phone okay so I want to
103:53 - store this in a string
103:56 - so what I can do is I can just write
103:59 - phone and then Dot tostring
104:04 - two string
104:07 - so what it does is it converts the phone
104:10 - this into a string so when I print this
104:14 - when I go ahead and
104:17 - print this
104:21 - then you can expect the result it is a
104:24 - string so you you can see nothing in the
104:27 - result the result would be same the
104:28 - output is just the number itself but it
104:31 - is a string okay so two string function
104:36 - um returns a string representation of
104:38 - any object
104:39 - okay then there is last index function
104:42 - the last index function Returns the
104:43 - index of the last character in the
104:47 - character sequence n minus 1 if it is
104:49 - empty so I have here like
104:53 - like in these two string I'll try C and
104:56 - so what I'll do is uh
104:59 - I'll just go to the end and yeah so I'll
105:04 - print the
105:06 - last index of C first okay so I'll just
105:09 - type c Dot
105:11 - last index
105:13 - okay and I'll also print the
105:17 - last index of f
105:22 - and now I'll run this program meanwhile
105:25 - I'll go to the CNF strings
105:29 - now as we can see in the output the
105:33 - first one is 13 and the second one is
105:36 - 12. so the last index which is this
105:41 - so this is 0 then 1 2 3 4 5 6 7 8 9 10
105:48 - 11 12 and 13. so the index of the last
105:51 - character is 13 in the string and the
105:54 - index of last character is 12 in this
105:56 - string
105:57 - F so it just Returns the index of the
106:01 - last character okay so now you must have
106:06 - no doubt in the
106:08 - last index function okay the next is
106:12 - index of function
106:14 - so the index of function Returns the
106:16 - index within its string of first
106:19 - occurrence occurrence of a specified
106:21 - character starting from the specified
106:24 - start index
106:25 - okay so index of
106:27 - function has three parameters basically
106:31 - the first is the string so that is a b
106:34 - or c whichever string I am providing it
106:36 - second is the start index okay so from
106:39 - which index I should be looking for the
106:41 - character
106:42 - so suppose I'll just explain it and
106:45 - third is the ignore case uh just ignore
106:47 - that so it is just telling the uh it
106:51 - should be false Okay so
106:54 - okay it is a Boolean you know cases
106:55 - Boolean so uh the basically what is in
106:59 - index of so I I'll say that index of I
107:03 - and string in string B
107:07 - okay
107:08 - and starting start index is zero so it
107:12 - will give the third eye
107:14 - okay and when I'll give the start index
107:17 - of three value three so it will give me
107:21 - this I okay so I'll just go ahead and
107:24 - use the function
107:26 - so I'll print
107:30 - uh in string B I can do
107:35 - what was that
107:37 - index of
107:41 - okay and now I'll mention the character
107:43 - which which are of which index I am
107:45 - finding so I'll mention the character as
107:47 - I
107:48 - okay and then I'll mention the uh
107:52 - start index okay so uh note that it is
107:55 - giving a red I in Red so why is that
107:58 - because I I haven't mentioned the
108:01 - character in single quote okay so I
108:03 - should uh only mention the character or
108:05 - character in single code and string in
108:07 - double quotes Okay so then I'll mention
108:10 - the uh
108:11 - string start index so I'll mention the
108:14 - start index at 0 at first and the ignore
108:17 - case is false okay
108:19 - so now I now I'll go ahead and run this
108:22 - program
108:24 - so the output of this is 2. so now I'll
108:28 - I'll go to the B string and uh so at at
108:32 - 0 1 2 at index 2 there is an i
108:36 - okay so now what if I start with in
108:39 - index 3 and see what is the output okay
108:42 - I'll start with index 3.
108:45 - and run this program so I can see in the
108:49 - output that
108:52 - the result is the output is 5 so I
108:56 - started with this this index and this is
108:59 - the third index then fourth index is
109:02 - empty and then fifth index is has an I
109:04 - so the answer is I uh the the I is at
109:08 - the fifth index starting from the third
109:10 - index okay so it just found the first I
109:13 - from the start index and ignore the rest
109:15 - of it so I'll just find D from any index
109:19 - okay
109:20 - so finding D from an index doesn't
109:23 - change anything okay because D is only
109:26 - mentioned one time it it matters when D
109:29 - is when the start index is after 11 okay
109:33 - after 12 because D is at the 12th index
109:37 - so the index of just gives the index of
109:41 - the mentioned character from any index
109:44 - okay so I hope all the functions should
109:47 - be clear to you by now okay
109:50 - so thank you for watching this video in
109:52 - the next video we will be covering
109:54 - functions thank you
109:58 - till now we have discussed about string
110:00 - string function operator now we will
110:02 - discuss about functions in kotlin so we
110:05 - have already used a function named a
110:09 - main function okay in each of each and
110:12 - every code okay
110:13 - this is the main function that we have
110:15 - used so what is a function function is a
110:17 - collection of code that is written some
110:20 - result okay so despite of the main
110:23 - function we are talking about other
110:25 - functions okay so uh we will firstly
110:28 - discuss about the syntax of the function
110:31 - of any function so the syntax of any
110:34 - function is given by Fun that is the
110:37 - keyword for declaring any function then
110:39 - comes the function name the function
110:41 - name should be same as the identifiers
110:44 - defined by me in at the starting of
110:48 - variables okay so the same thing should
110:50 - be used and
110:52 - uh the function name should be
110:54 - self-explanatory so after two or three
110:58 - months when you look at the code you
110:59 - should know that uh
111:02 - Y is the function named like this okay
111:05 - then comes argument one type 1 comma
111:09 - argument 2 colon type 2 comma and so on
111:12 - okay so what is an argument arguments
111:15 - are the data that a function needs to
111:19 - use so Suppose there is a function uh
111:22 - which takes two input two integer and
111:26 - provides it sums so there is a function
111:29 - which provides the sum of two integers
111:32 - so the function name should be sum of
111:35 - two number okay with s small o capital s
111:38 - u m small o capital F small uh n n
111:42 - capital and uh everything small okay so
111:46 - that is the best way of naming it and
111:50 - then comes the argument so it provides
111:52 - the sum of two integer
111:54 - so the argument one should be a or any
111:57 - name of the argument of the variable and
112:01 - the type is integer so it is a colon
112:05 - integer and comma comma B colon integer
112:09 - so that's the argument and then comes
112:12 - the return type so we have to mention
112:13 - the written type the written type is
112:15 - nothing but expected
112:18 - data type of the result
112:20 - okay so when I write the code right when
112:25 - I write a function to uh give the result
112:28 - as some of the two numbers so the return
112:31 - type is also int
112:33 - so here I am here I will mention the
112:35 - return type that is hint
112:37 - okay then comes the lines of code and
112:40 - then it there is written result
112:43 - okay so here we use the written keyword
112:46 - and uh
112:48 - give the result what is the result okay
112:50 - so I'll go ahead and
112:54 - so every function is every new function
112:57 - is made is coded outside the main
113:01 - function okay so I'll go ahead and
113:04 - make a function
113:06 - I'll name it as
113:09 - new function
113:13 - okay now I want this function to print
113:18 - and statement so what are the argument
113:21 - given to him given to the
113:24 - function so there is no argument given
113:28 - when I have to print the
113:32 - the running lines so I'll just keep it
113:37 - empty so when there is no return type so
113:41 - the the function is just printing it is
113:45 - not returning anything so then the
113:49 - ah the written type is mentioned as unit
113:52 - okay and then I'll open the function and
113:57 - I'll just write print Ln
114:00 - I am a new
114:02 - function
114:04 - okay so here we have defined a new
114:06 - function which prints I am a new
114:07 - function so the function is defined as
114:11 - per the syntax now what if we have to
114:14 - call the function so as you might know
114:16 - the main function is only executed
114:19 - so we have to call the function to the
114:21 - main function so what I'll do is I'll
114:24 - just name the function here which is new
114:26 - function and just keep it empty if there
114:29 - were any arguments so I'll mention the
114:31 - arguments here okay so I'll go ahead and
114:34 - just run the function
114:39 - the code our code
114:42 - so
114:47 - as you can see in the output screen we
114:50 - have successfully printed a function
114:52 - which says I am a new function okay so
114:55 - we have now a function we are now
114:57 - capable of making a function which
115:00 - prints something okay so as no arguments
115:04 - are used so no data is used by the
115:07 - function okay so it is kept blank
115:10 - okay so no return type is there but
115:13 - therefore the unit is used so when I
115:16 - hover over unit so it says that the type
115:18 - with only one value the unit object okay
115:21 - this corresponds to void type in Java
115:24 - okay so the written statement is never
115:27 - used because we are not returning
115:29 - anything in this function you might
115:30 - notice that we have not used any written
115:32 - the written um
115:34 - uh keyword is not used okay so what is a
115:37 - unit unit is used when a fund does not
115:41 - return any meaningful result
115:43 - so it is it it we might call it as the
115:46 - default data type of in any function
115:49 - okay so uh till now we have discussed
115:52 - what is a function what is the syntax of
115:54 - function okay so this is a block body of
115:58 - the syntax okay there is also expression
116:00 - body which we will discuss later
116:03 - so we have discussed the syntax we have
116:05 - made a function that prints that I am a
116:08 - new function and that's all for the
116:10 - video we will continue with functions in
116:13 - later videos thank you
116:18 - in the last video we have discussed
116:20 - about the functions and
116:24 - what is a function the block body syntax
116:26 - of a function and we have also created a
116:29 - new function that prints
116:31 - a string okay and we have also called
116:34 - the that function okay so in this video
116:37 - we are going to create a function
116:41 - that uh
116:44 - that prints
116:46 - the double of that that Returns the
116:49 - double of an integer okay so function
116:54 - that doubles an integer okay so uh we
116:58 - are going to use the uh
117:02 - block body as of now so what was in the
117:05 - blog body so we have first uh use we
117:09 - have to use the fun keyword and then we
117:12 - have to name the function such that when
117:14 - we refer it after a long time it should
117:17 - be clear to me that why I named the
117:20 - function and what the function does so
117:23 - as the function doubles an integer so I
117:25 - can name it as double
117:29 - and
117:30 - integer
117:33 - okay and then I have to pass the
117:37 - argument in the open and close
117:39 - parenthesis
117:41 - so uh
117:43 - like I have to pass pass an argument and
117:46 - then it's type so I'll name the argument
117:49 - as a and it type its type is int
117:53 - okay and next I have to mention the
117:56 - return type so the return type of an
117:58 - integer would the written type of and
118:01 - double of an integer would be also int
118:04 - so I am going to mention int now we have
118:09 - to open the function and
118:12 - write the code okay so we have a now
118:17 - what we have to do we have to just
118:19 - multiply a by 2 so I have I can write a
118:23 - is equals to A into 2
118:28 - okay and then
118:31 - I could written
118:33 - if
118:35 - okay
118:37 - so now it is showing a red underline
118:42 - uh inside a
118:44 - and it is showing that Val cannot be
118:46 - reassigned so what the problem is like
118:50 - when I Define a function the variable or
118:53 - the argument
118:55 - that I Define is a value parameter not a
118:58 - variable parameter okay so I cannot
119:02 - multiply and reassign it okay
119:05 - so what I can do is I can just return a
119:09 - into 2 here
119:12 - okay
119:13 - so uh when it enters a function the
119:16 - balance integer it is passed in argument
119:19 - and integer and the return type is an
119:22 - integer and the function returns a into
119:25 - two so I am just going to go into the
119:28 - main function and call the double n
119:32 - integer function so I am going to write
119:34 - double and integer and pass the
119:37 - integer in it so
119:40 - let's say I have passed equals to 4. now
119:46 - when I run this program
119:48 - I am not going I am not I will not be
119:51 - able to print anything
119:54 - because uh I have I have not used print
119:57 - statement anywhere
119:59 - okay
120:01 - so uh let me just like
120:07 - so yeah when I will run this program uh
120:09 - it is not going to print anything
120:11 - because I have never used the print
120:13 - statement anywhere so what I'm going to
120:15 - do is I am going to just add print Ln
120:19 - here
120:20 - and what it will do is it will print the
120:24 - output of that function okay so uh when
120:28 - I run this program uh we can see that
120:32 - the output is 8.
120:34 - so we have made a function that doubles
120:37 - an integer
120:38 - now we will move ahead and see what
120:41 - expression body is expression bodies
120:43 - another Syntax for writing a function so
120:46 - when I write a function it just written
120:49 - double of an integer it is quite a long
120:53 - syntax okay so instead of these this
120:56 - block body expression body is used for
120:59 - this type of syntaxes so what is
121:03 - expression body is
121:05 - so in expression body also we will
121:08 - firstly use the keyword fun and then we
121:12 - will give the function name
121:14 - and then we will pass the argument and
121:17 - then we will pass the return type so uh
121:21 - starting is a
121:23 - similar to The Block body and after
121:27 - passing the return type instead of
121:29 - opening curly braces we will just write
121:32 - equals to and then the expression
121:35 - so I'll just write the function uh
121:39 - double integer
121:42 - in expression body so I'll pass argument
121:46 - X
121:48 - as an integer and the return type would
121:52 - be also an integer
121:54 - and now instead of
121:57 - opening and closing of curly brushes
121:59 - I'll just write equals to and then I'll
122:03 - just write X into
122:07 - okay and now I'll go ahead in the main
122:10 - function and write print Ln
122:15 - and
122:17 - double integer and then I'll give value
122:21 - 46.
122:23 - now when I run this program
122:27 - it gives output as 8 and 92 so the
122:32 - program works just fine
122:35 - so what expression body did is it it
122:39 - reduced the length of the code
122:42 - and it made the code much easier
122:45 - to read
122:47 - okay so now calling and invoking of a
122:50 - function
122:51 - uh what is calling and invoking of
122:54 - function so uh when I called the
122:57 - function here double an integer okay it
122:59 - is called the calling of a function
123:02 - so calling the new function inside the
123:05 - main function is the calling of a
123:07 - function
123:08 - and
123:10 - how how can I do that
123:13 - we have to just write the function name
123:16 - and pass the argument in the parenthesis
123:19 - okay
123:21 - so I guess now we have completed it with
123:24 - the function in the previous videos we
123:27 - have learned about functions in Cotton
123:30 - so before proceeding further I would
123:33 - like you to solve the problem this this
123:36 - problem which says that write a function
123:38 - which Compares two numbers and return
123:39 - the maximum of two so uh one way of
123:43 - doing this is using IF else statement
123:46 - and the control statements so we don't
123:49 - know that for now so what we will do is
123:53 - we will use a function Max in kotlin dot
123:57 - math dot Max Library
123:59 - so how to access this library and this
124:03 - function so for accessing this library
124:05 - and this function what we will do is we
124:07 - will import the library
124:10 - so I'll use the keyword import and then
124:14 - write the name of the Library kotlin dot
124:18 - math dot Max
124:21 - now
124:22 - the library is successfully imported so
124:26 - what this Max function does is it takes
124:29 - input of two integers and Returns the
124:33 - maximum of the two
124:35 - okay so I'll just go ahead and create a
124:38 - main function
124:40 - and then outside the main function I'll
124:42 - just create
124:44 - a function and name it as maximum
124:48 - now what would be the input of this
124:51 - maximum function the input must be two
124:53 - integers
124:54 - so I'll name the integer one as a and
124:58 - the integer 2 as B so I have provided
125:03 - two input to this maximum function now
125:06 - uh what would be the return type of this
125:09 - function
125:10 - so the max function provides the maximum
125:14 - integer out of two integer so the return
125:16 - type would also be an integer now I'll
125:19 - just use the math function Max function
125:21 - which is Max of a comma B
125:24 - okay so inside the main function I will
125:27 - go ahead and
125:29 - print the
125:31 - maximum
125:33 - and maximum of 13 and 25. okay so when I
125:38 - run this
125:40 - program
125:42 - what I will find is it prints the
125:44 - maximum of 13 and 25 which is 25.
125:47 - okay
125:48 - so uh kotlin has many such libraries
125:52 - which would be used further and it would
125:57 - make our task very easy
125:59 - instead of using long codes I just used
126:04 - a library and its function and it become
126:08 - it became very easy
126:10 - okay
126:11 - so the code is compiling
126:15 - and it is starting
126:18 - okay so I have run my previous code
126:22 - in just a second I'll run test.kt
126:27 - and yeah it prints 25 which is the
126:30 - maximum of 13 and 25. okay moving
126:33 - further just I will comment it out
126:36 - okay moving further in this video we are
126:39 - going to particularly particularly focus
126:41 - on arrays
126:42 - so
126:44 - arrays in kotlin
126:46 - are mutable but have fixed sizes so uh
126:51 - suppose I declared an array of let's say
126:55 - four elements
126:57 - so it it is going to be of four elements
127:00 - at every time
127:02 - we cannot add or delete an element from
127:06 - it
127:07 - although we can change the element
127:12 - change any element from an array
127:14 - so
127:16 - data structure that contains a group of
127:18 - elements mostly of same data type are
127:21 - arrays okay so it is not a boundation
127:24 - that the the data the elements must have
127:28 - same data type but yeah mostly the
127:31 - elements have the same data type
127:33 - commonly used to organize data so why
127:36 - are arrays used basically when I have 20
127:40 - integers suppose let's say so I have to
127:43 - store 20 integers in one variable so
127:45 - what I'll do is I'll create an array so
127:48 - in that way the data is more organized
127:51 - now the string is an is a collection of
127:55 - characters
127:57 - or we can say that it is an array of
127:59 - characters
128:01 - okay so it is different characters and
128:05 - they are combined together
128:06 - so it can be also called as a array of
128:10 - characters so what is the syntax of uh
128:12 - creating an array so just like we create
128:15 - any variable we use the where or well
128:18 - keyword and then we will give the name
128:20 - of array and naming array is same as
128:24 - naming a function or a variable okay
128:27 - then we will write the funk keyword
128:30 - array of and we will specify the type if
128:32 - any and then we will write the elements
128:35 - okay so now let's just go ahead and
128:39 - create an array
128:42 - so I'll write about where
128:46 - array 1
128:47 - and
128:49 - I'll write the keyword array of
128:53 - now
128:54 - uh suppose I have to
128:58 - create an array of characters so I'll
129:02 - provide the type care and now I'll
129:06 - provide the elements so I'll provide a
129:10 - B
129:13 - C
129:15 - d
129:17 - e okay so we have now successfully
129:21 - created an array which contains five
129:23 - elements and all the five are
129:26 - the letters a b c d and e
129:30 - okay so uh what if I have to create an
129:33 - array which contains a integer a
129:36 - character uh and a string and uh
129:40 - and a Boolean so I'll just go ahead and
129:44 - create an array
129:47 - of all type
129:50 - of all type
129:53 - so I have named it and I'll just
129:56 - use the Crea function array of and I'll
130:01 - just
130:02 - so it contains an integer
130:04 - and double
130:07 - and Boolean
130:09 - character
130:11 - and
130:15 - a string
130:19 - so away the variable array of all type
130:22 - is an array which contains an integer
130:25 - and an a float Point number a Boolean
130:30 - character and a string okay
130:34 - so uh now we have now we can
130:37 - successfully create any array moving
130:39 - forward in kotlin once you declare any
130:42 - array you can only change the content of
130:45 - the array and not the size as I
130:46 - mentioned earlier so the size of this is
130:49 - fixed until and unless I have changed
130:51 - the size from here okay the size is
130:54 - fixed I can change the elements of an
130:56 - array however but I cannot change the
131:00 - size of the array
131:01 - okay so now let's just copy this code
131:06 - and
131:08 - just understand that
131:12 - okay so the code says that
131:16 - there is a variable array 1 that is an
131:20 - array of a b c d and e
131:23 - okay and there is an array 2 which is a
131:27 - value and that is a array of E F G H and
131:30 - I okay so when I do array 1 is equals to
131:33 - array 2. so array 1 is a variable
131:37 - and that can be uh reassigned so that
131:42 - that that is reassigned a value of error
131:45 - 2 so that can be done but this this line
131:48 - shows an error why this line shows
131:50 - another because array 2 is in value so
131:53 - we cannot reassign a value
131:57 - okay so that's why it shows an error
132:00 - moving forward
132:02 - uh so yeah there is a value array too
132:07 - and which contains
132:09 - the elements E F G H and I
132:12 - so however we cannot reassign the array
132:16 - to we can change the elements of array
132:19 - 2. this is a major point to note
132:22 - okay
132:23 - so we have already understood array with
132:26 - different data types
132:28 - okay so arrays are mutable but have
132:31 - fixed sizes as I already said
132:34 - and
132:36 - so uh what if I have to print any
132:40 - element of an array so suppose I have to
132:43 - print
132:45 - the third element of array one
132:49 - so what I mean by Third element is the
132:53 - the first element the a is the zeroth
132:56 - element
132:57 - okay as as we've done the indexing in
133:00 - the string
133:01 - similarly the indexing is done in the
133:04 - arrays
133:06 - so when I have to print the
133:09 - third element of array 1 what I'll do is
133:12 - I'll just write array 1
133:15 - and open a square bracket and write 3
133:18 - here
133:19 - and when I run this code
133:22 - we can see that
133:25 - the third element of array 1 is printed
133:32 - okay
133:35 - and there is a problem okay
133:40 - so uh
133:42 - when I run this program
133:47 - we can see that the third element of
133:51 - array one so what what happened here is
133:54 - I reassigned the array one as array 2.
133:57 - so the third element of array two is
133:59 - printed here e is the zeroth f is the
134:01 - first G is the second and H is the third
134:04 - so I'll just delete this code
134:08 - and again run this code
134:10 - so I'll find the third
134:14 - element of array 1 that is D okay
134:18 - so now what if I have to reassign the
134:22 - the third element of array 2. so we will
134:26 - try it on array 2 because array 2 is a
134:29 - value
134:30 - so I'll just
134:32 - type array to
134:35 - so I'll just reassign the zeroth element
134:37 - of array 2 as a string
134:40 - 3
134:43 - assigned
134:46 - now it shows an error
134:48 - so what error this is what that there is
134:51 - a type mismatch
134:52 - so it was an uh
134:55 - it was in character and now we are
134:58 - reassigning it as a string
135:01 - so that is not possible in kotlin so
135:03 - what I'll do is I'll just reassign it
135:05 - with the character
135:07 - and now I'll
135:10 - print
135:12 - the first element
135:16 - of array the zeroth element of array 2.
135:20 - so now when I run this program
135:24 - I can see that
135:26 - R is presented so even in a value
135:31 - even in a value
135:33 - of an array
135:35 - the the
135:37 - the element of an array can be
135:39 - reassigned even if it is a value not a
135:41 - variable
135:42 - okay so that's all for this video stay
135:45 - tuned for
135:49 - in the previous video we have discussed
135:50 - about arrays in kotlin and in this
135:53 - particular video we are going to learn
135:56 - about arrays of strain
135:59 - okay or an array of strings
136:02 - so uh I'll just go ahead and create a
136:06 - main function and inside the main
136:08 - function I'll just
136:10 - create a variable
136:13 - string named string array
136:16 - and
136:18 - so if you remember for creating an array
136:21 - we have to use array of function and if
136:26 - we have to
136:28 - specify the data types we will use the
136:31 - less than and greater than sign and then
136:34 - we will use the open and close
136:35 - parenthesis and inside the open and
136:37 - close parenthesis we will
136:40 - use the
136:44 - the things that we have to add to this
136:46 - okay so I'll just create a string the
136:51 - array of string
136:53 - containing some strings so I'll just
136:56 - write High
136:57 - this and again a string is
137:02 - and again a string
137:05 - programming
137:09 - knowledge
137:11 - okay
137:12 - so uh it is a string
137:16 - it is an array of string containing four
137:18 - strings
137:21 - okay
137:22 - so specifically it is called an array of
137:24 - strings
137:25 - so what if I have to get a particular uh
137:31 - at a particular index so what if I have
137:34 - to get the string at a particular index
137:36 - so I can use a function
137:40 - that is
137:41 - the name of string that is string array
137:44 - and then Dot
137:47 - get
137:49 - and then open and close parenthesis and
137:51 - then zero
137:52 - okay so what this function get does it
137:57 - does that it just gets the
138:02 - in particular string at the particular
138:05 - index mentioned so when it shows a green
138:10 - line so when I go to it and hit alt plus
138:14 - enter
138:15 - it shows that replace get call with
138:17 - indexing operator and when I hit enter
138:19 - it
138:22 - chooses the open and close square box
138:26 - square bracket so the get function is
138:29 - the same as the square bracket that we
138:31 - used in the previous video
138:33 - okay so now if we if I just skip that
138:37 - and
138:40 - okay
138:42 - and uh
138:44 - so what if I have to change the change
138:48 - the string at a particular index so as I
138:51 - mentioned in the previous video what I
138:53 - have to do is write the name of the
138:56 - string
138:57 - that is the write the name of the array
139:00 - and then use the square bracket
139:04 - and if I have to change the
139:08 - string at the zero index
139:11 - so I will just
139:14 - right here
139:16 - hold up
139:18 - okay so uh it changes the
139:23 - string at the zeroth index okay
139:27 - so when I print
139:31 - the
139:33 - string array
139:35 - what it does is
139:39 - so what happens when I print the whole
139:41 - array instead of printing a particular
139:45 - particular index of the array so it
139:48 - prints the this thing it prints L Java
139:52 - Lang string
139:54 - semicolon and this is an address
139:57 - so when I String when I print a
139:59 - particular array it it shows that it it
140:03 - is an array of containing strings and it
140:06 - shows its address
140:07 - that at this address the string is
140:09 - stored
140:10 - but it does not print that array
140:13 - so I'll just go ahead and print the
140:16 - zeroth element or the a string at
140:20 - element at index 0.
140:23 - so we can see that the
140:26 - string at particular index has changed
140:29 - now what if I have to
140:32 - get the
140:34 - size of an particular array so for
140:36 - getting the size of a particular array
140:38 - is we use the function dot size
140:42 - so I will just print write the print
140:45 - statement and then I'll write the string
140:48 - name sorry the array name and I'll just
140:52 - write dot size
140:54 - now when I run this
140:57 - program
140:58 - this the seventh line
141:00 - prints the size of an array
141:04 - okay and we can see that the size of an
141:06 - array is
141:09 - size of this array is 4.
141:13 - so that's correct now what if I have to
141:18 - make a whole string from array of string
141:22 - like I have to make this a particular
141:25 - string
141:27 - so I'll just name a value
141:30 - that should be string
141:34 - and make that equal to so I'll just
141:37 - write the
141:40 - array name and I'll just
141:44 - type the
141:46 - function that is content to string
141:50 - now the string variable is a string that
141:56 - contains the
141:58 - the
141:59 - content of the string array convert it
142:02 - to a string
142:04 - okay so content 2 string is a function
142:07 - that converts a an array to n string now
142:11 - let's go ahead and print this
142:15 - string
142:17 - okay so when I run this function
142:26 - it prints hola this is programming
142:29 - knowledge but it shows that as an array
142:32 - why
142:34 - because we have converted it to string
142:36 - and string should be
142:37 - the value string should be n string
142:41 - so it is in string but when I print this
142:45 - and also we can note that I have left
142:47 - spaces here so it also left leaves
142:50 - spaces here
142:51 - so whatever I not leave spaces here
142:55 - so it automatically detects that that it
142:58 - should be a string with four different
143:00 - words or four different string
143:03 - so it automatically leaves the
143:06 - spaces out of there
143:07 - so when I want to print a particular
143:11 - string particular array of string
143:14 - so I'll just instead of doing all this
143:18 - I'll just
143:21 - um write the print statement
143:23 - and in the print statement I'll write
143:25 - the string name and then content to
143:27 - string so when I write only the string
143:31 - array
143:32 - it does not print the array it prints
143:35 - that this is an array and it contains it
143:38 - contains string and the location of the
143:40 - array is this the location at which the
143:42 - array is stored is this
143:44 - so for printing the whole string array
143:47 - we use this
143:49 - okay so that's all for this video stay
143:51 - tuned
143:54 - in this video we are going to cover the
143:57 - if else statements in kotlin
144:00 - so if you don't have any particular idea
144:03 - about if else statement what NFL
144:05 - statement does is
144:07 - it checks and it it checks in condition
144:11 - that if this condition is true then it
144:14 - goes to the particular body and then
144:17 - perform some operation and if that
144:18 - condition is not true it just skips the
144:21 - whole body and
144:23 - goes to the else statement
144:25 - and then it performs the operation
144:27 - mentioned in the else statement so it
144:30 - basically is like if this is true then
144:32 - this then do this and if else do this
144:36 - okay so uh we will just go through the
144:39 - syntax of the cell statement so it is
144:42 - the block body of an FL statement
144:45 - so when I write if some condition
144:49 - and then I'll so I'll write if is a
144:53 - keyword and then I'll open a parenthesis
144:57 - and write condition in there and I'll
145:00 - close this parenthesis and I'll open
145:02 - curly braces and I'll write function or
145:06 - we can say the operation we have to
145:07 - perform there and we will write we will
145:10 - close the curly place and we will write
145:12 - the the keyword else and then we will
145:15 - open the braces and
145:18 - then I'll mention the operation or the
145:22 - function or the code that I have to
145:24 - perform
145:25 - and then I close the
145:28 - braces okay so this is the block body
145:33 - now I'll go ahead and create a main
145:36 - function
145:39 - and outside the main function I'll
145:41 - create a function named block body
145:45 - because there are three types in which I
145:48 - can determine the if else statements so
145:52 - I'll just go one by one
145:54 - so for Block body
145:57 - so we will take an example of finding a
146:00 - maximum from A and B okay so we will
146:05 - have to give the input a integer and
146:10 - B
146:14 - integer
146:16 - and
146:17 - the output the written type of this
146:20 - would also be an end because it Returns
146:22 - the maximum
146:25 - so moving forward
146:28 - so I'll write the block body of fl's
146:32 - statement here so if a is greater than b
146:37 - okay then what happens is so I'll just
146:40 - create a
146:42 - variable also here
146:44 - that is called max value
146:49 - okay
146:51 - so when a is greater than b
146:55 - what happens is
147:01 - when a is greater than b the maximum
147:04 - value is
147:07 - a okay
147:11 - and else
147:14 - when so else B would be greater than a
147:17 - so the maximum value would be
147:20 - B
147:23 - and we would return
147:27 - the maximum value which is Max value
147:30 - okay so when I go in the main function
147:33 - and call the
147:36 - a block body function
147:38 - and find try to find the maximum of 23
147:43 - and 45 and run this function so it
147:46 - should be printing the
147:49 - so it should not print anything because
147:51 - I haven't mentioned the print function
147:54 - so when I mention the print function
147:56 - here also
147:58 - and run the function again
148:02 - so it should mention here 45
148:05 - okay and it is correct so this might
148:09 - have give you this might have given you
148:10 - the basic understanding of the if else
148:13 - working okay so if a is greater than b
148:16 - then the max value should be equals to A
148:19 - and else if a is not greater than b else
148:23 - the max value should be equals to V
148:26 - okay
148:27 - so now I'll go ahead and
148:30 - give you the idea of expression body
148:34 - so
148:37 - what is expression body
148:41 - so also in this I will be printing the
148:43 - maximum of the two so I'll just
148:48 - mention
148:51 - the A and B integer and the return type
148:53 - as in
148:55 - now in the expression body I mentioned
148:58 - the variable variable
149:01 - a max value
149:04 - and give it a value of f so here only I
149:10 - start from F function
149:12 - so if a is greater than b
149:15 - then the max value is a
149:18 - and
149:19 - okay a and else
149:24 - the max value is B
149:27 - now we can see that
149:30 - okay I have to also return the max value
149:35 - so now now we can see that we have
149:38 - assigned we have defined a variable
149:40 - named max value
149:42 - that is equals to if a is greater than B
149:45 - that is equals to A and else that is
149:47 - equals to B so this is called the
149:49 - expression body so now if I replace the
149:53 - block body with the X
149:55 - expression body
149:57 - and run this again
150:00 - so it should be working fine and it
150:02 - should print 45
150:05 - so yeah it is working fine
150:07 - so
150:08 - if if you see this type of code written
150:12 - anywhere it is also an if else statement
150:15 - now there is another type of file
150:18 - statement that is a also short shorter
150:20 - than this and it is also called short
150:23 - so now I'll just mention a function
150:26 - short it will also be
150:30 - comparing two integers
150:32 - so I'll just
150:35 - initialize the function
150:37 - now
150:39 - it should be equals to
150:42 - no before that okay I should open it and
150:45 - I'll just return already
150:48 - written if
150:50 - a is greater than b
150:55 - K is greater than b
151:00 - foreign
151:06 - and else
151:09 - written B
151:12 - so now we can see that we have directly
151:15 - mentioned the written function and
151:17 - written a if a is greater than b and
151:20 - written B if a is not written only so
151:23 - what it it means that okay so instead of
151:27 - expression body when I mentioned
151:29 - short
151:32 - and I run this function I run this code
151:37 - I can see that the answer is again 45 so
151:41 - in this video we have learned about the
151:44 - block body the expression body and the
151:46 - short
151:47 - of if else expression and we have
151:51 - um
151:51 - a pretty thorough idea about the if else
151:54 - statement
151:56 - okay thank you
152:00 - then in the previous video we have uh we
152:03 - have seen that what happens if we use an
152:07 - apple statement so if we have some
152:10 - condition we use an apple statement
152:13 - so what about if I have multiple
152:15 - conditions like
152:18 - if condition 1 is 2 then I have to
152:20 - execute particular code and then if
152:22 - condition 2 is true then I have to
152:24 - execute a particular code and then if
152:26 - condition 3 is true and then I have to
152:29 - execute a particular block of code
152:31 - so this can be this could be
152:36 - done via
152:37 - an else if
152:40 - keyword okay so what I'll do is I'll
152:43 - just create a main function and inside
152:46 - the main function
152:48 - I'll create a variable that is equals to
152:52 - 5
152:55 - and
152:56 - what I'll do is I will create some
152:59 - conditions
153:02 - such as if
153:05 - I is equals to 5
153:08 - then I have to
153:11 - print
153:14 - that
153:15 - I is
153:17 - 5.
153:19 - okay
153:20 - and then again
153:23 - else if I'll use the keyword else if and
153:27 - then pass the
153:28 - condition if I is equals to 4
153:32 - else if I is equals to 4 I have to print
153:39 - I is 4.
153:42 - okay
153:44 - so I can do that and there could be as
153:48 - many number of fl's block as required
153:51 - so I can
153:53 - use like here
153:56 - as many if else block I required
153:59 - else if block I required
154:03 - so I'll just
154:06 - make that
154:09 - I is 3 okay then again
154:12 - I'll use the keyword else if
154:15 - I is equals to 2 then I have to
154:20 - print that
154:23 - I is 2 then again
154:27 - else if
154:30 - I is equals to 1 then I have to print
154:38 - I is 1 okay so at the end of the uh if
154:44 - else
154:45 - a blog or else if block uh we should
154:50 - most end with end it with a uh else
154:53 - statement so like what I am trying to
154:56 - say is else block is optional as said
154:59 - for equal statement so we can skip the
155:02 - else Block in if else statement as well
155:05 - as when we use the if else ladder or the
155:09 - lcip blocks okay so I can here include
155:12 - the else statement
155:15 - or I can choose to skip that
155:18 - print I can choose the else statement
155:21 - like print I is not in
155:26 - not in one to five
155:29 - okay
155:32 - so uh I'll just
155:36 - change the value of i26 and then
155:39 - run this program
155:48 - so the
156:07 - so we can see here that
156:09 - the output is I is not in one to five as
156:13 - mentioned in the else statement so when
156:15 - I change the value to 5 it will print
156:18 - that I is 5.
156:21 - so the conditions are evaluated
156:23 - sequentially from top to bottom
156:25 - and if a condition is evaluated as false
156:28 - the condition the execution continues
156:31 - with the evaluation of subsequent
156:33 - condition
156:34 - okay so from here the the we enter in
156:38 - this code and we enter in this equals
156:41 - ladder
156:42 - so the first condition is evaluated and
156:45 - if the first condition is true then we
156:47 - get out of the if else ladder and if the
156:51 - first condition is false we evaluate
156:53 - with the subsequent and this or the
156:55 - second condition
156:57 - okay and if the second condition if the
156:59 - uh and if any condition is true the
157:03 - corresponding block against the
157:05 - statement
157:06 - is executed and we are out of the fs
157:10 - ladder and if none of the conditions
157:12 - evaluate to two runtime minutes runtime
157:15 - executes else block
157:17 - and that too if else block is present so
157:21 - as I change the value of i26 the else
157:26 - prox else block get gets executed
157:28 - because
157:29 - um
157:30 - every condition is false in that
157:33 - particular case
157:34 - so that was if else ladder cotton if
157:38 - else later
157:39 - so we can see here that the ID is
157:41 - underlining this with a green
157:45 - so uh what it's what it is saying when I
157:48 - hover over it it's saying that Cascade
157:49 - if should be replaced with when
157:52 - so don't you think that this code is a
157:55 - little bit of redundant like we are
157:57 - using LCB elsewhere else if a lot of
157:59 - times
158:00 - and suppose that I have 20 conditions
158:03 - so then I have to repeat 20 if else
158:06 - relative blocks
158:09 - so when I go to
158:13 - if a statement and it shows that we
158:17 - should use when so now we will move on
158:20 - and study the
158:22 - keyword when
158:24 - so instead of uh doing this I'll just
158:28 - comment it out what I can do is I can
158:31 - use the keyword when
158:34 - and then
158:37 - and then what to Checkers so like I'll
158:41 - just open parenthesis and
158:44 - write the variable that I have to check
158:46 - okay so when I okay
158:50 - and then
158:52 - I'll open this
158:55 - code and
158:59 - then I'll provide the values of I
159:02 - and if I is 1 okay so then I'll uh just
159:08 - use hyphen and integrate greater than
159:10 - sign
159:11 - and
159:12 - then I'll open a code block and then
159:17 - I'll write
159:19 - print value
159:23 - I is 1.
159:25 - okay so what this when block does is
159:29 - when I went enter this when when
159:32 - statement uh it assigns
159:36 - a condition that when I is 1 okay so
159:41 - when I write uh below that
159:44 - two
159:45 - and then I open a code block
159:49 - okay so whatever what it will do is
159:53 - it will
159:56 - pass the pass it will execute this
159:59 - statement when I is 2.
160:02 - okay so like this is just one liner code
160:05 - so I have to write just print code so I
160:09 - will not use the curly braces I'll just
160:13 - type that when I is 3 printed on I is 3
160:17 - okay when I is 4
160:20 - print Ln IES
160:23 - 4 and when I is 5
160:28 - print Ln is 5 okay so after all of this
160:34 - what I can do is I can just use an else
160:38 - statement so what if any of this is not
160:42 - true like I is not equals to 1 2 3 or 4
160:45 - or 5. okay so I'll just use l statement
160:48 - and I'll I'll also have to use the
160:51 - hyphen and the greater than sign for
160:52 - that okay and I can use the curly
160:55 - brushes if I want
160:57 - and I can write that I is
161:02 - not in like this not in one to five
161:08 - okay so when I execute this code
161:11 - when I execute this code
161:13 - so I is 5
161:15 - and then we enter this when I block and
161:20 - then it checks that whether I is 1 or
161:22 - not then whether I is 2 or not then
161:25 - either I is 3 or not so after checking
161:28 - and getting this is false it's exactly
161:31 - whether I is 5 or not so I is 5 in this
161:34 - case and then it prints that is 5 and
161:36 - then it gets out of this when
161:39 - [Music]
161:40 - then flow function or when keyword okay
161:43 - so when I provide that I is equals to 6.
161:49 - okay
161:50 - and run this
161:52 - so I have not mentioned here what to
161:56 - print when is6 but I have mentioned that
161:59 - what to print when I is not in one to
162:01 - five which is the else statement so
162:04 - that prevents that but what happens when
162:07 - I it doesn't don't use the else else
162:09 - keyword
162:11 - okay so uh when I don't use the else
162:15 - keyword and the I is 6.
162:19 - what happens is the codes get executed
162:22 - and it is it does not print anything so
162:26 - when else keyword is not required so I
162:30 - don't have to mention else keyword and
162:33 - it is not necessary but it is a good
162:35 - practice as uh if the condition is not
162:38 - true if any condition is not true there
162:41 - is something to execute
162:42 - otherwise nothing will be executed
162:46 - okay so after that uh we have nested
162:52 - effects so what happens if I have uh
162:56 - condition one
162:57 - and condition two so I have like uh
163:02 - condition one is true then I have to
163:05 - check second condition
163:07 - so in that case we use next state Ethans
163:11 - we can Nest an if else statement inside
163:14 - another FL statement
163:16 - when when we say if else in this context
163:20 - it could be if statement or Apel
163:22 - statement or if else if statement okay
163:26 - so uh I'll just use an example
163:31 - for this enlisted effects
163:36 - so if
163:38 - I is
163:41 - 5.
163:42 - okay
163:43 - I'll use to okay if I is 5 and then I
163:48 - have to check that if I is odd or not so
163:51 - that doesn't make sense but for
163:53 - understanding purpose it should make
163:55 - sense so if I is divisible by if if I is
164:00 - divisible by 2 I have to check that so
164:02 - if I
164:03 - divided by 2 is 0.
164:06 - so then I is even
164:09 - so I have to print
164:11 - and then that
164:13 - I is 5 and
164:17 - even
164:18 - okay
164:20 - and I can just do that also but uh as I
164:25 - mentioned that using an else statement
164:26 - is a good practice
164:28 - so else
164:30 - printable
164:32 - I
164:33 - is 5 and odd
164:37 - and I can again use an else statement
164:40 - here that
164:44 - print Helen
164:46 - I is not equal to
164:51 - 5.
164:53 - okay so when I run this
164:56 - function or run this code
164:59 - what I'll find is it prints the
165:02 - statement I is not equal to 5 because I
165:04 - have mentioned that I is equal to 6 I'll
165:06 - just go ahead and change the variable I
165:08 - is equals to 5. and then again run the
165:11 - statement
165:13 - okay so I can find the output is um I is
165:17 - 5 and odd because I is 5 by Naught okay
165:20 - so uh here you can see that I have
165:24 - nested an FL statement under NFL
165:26 - statement okay so if this is the case
165:29 - then I have to check that if this is the
165:31 - case or not and if this is not the case
165:34 - then I have to print this okay so this
165:37 - is the example for nested if else and in
165:41 - this video we have covered what is
165:42 - nested appears what is if else ladder
165:45 - and when to use when keyword thank you
165:48 - for watching this video
167:01 - and in this video we are going to use
167:04 - the logical operator with if else
167:07 - so what are logical operators logical
167:10 - operators help us make logical decision
167:13 - so logical operators are basically of
167:16 - three types logical or logical not or
167:19 - logic and logical and
167:22 - so uh
167:24 - the result of any logical operator is
167:28 - always an Boolean value
167:31 - okay and logical operators are mostly
167:34 - used to evaluate two conditions
167:37 - so uh I'll just mention the logical or
167:45 - operator so we will use this sign for
167:48 - logical or operators and for logical and
167:51 - operators we will use the Ampersand two
167:55 - times
167:57 - and we will use the this sign for
167:59 - logical and operators and for logical
168:01 - not operator I'll use the exclamation
168:04 - mark
168:07 - so let's just go ahead and understand
168:10 - about these objectives
168:13 - so
168:14 - um
168:15 - I'll just create a main function and
168:18 - then inside the main function
168:20 - I'll create a if if block so I have to
168:26 - evaluate a condition
168:29 - like if this is true or that is true
168:32 - okay so if I is equals to 5 before that
168:37 - I have I have to just mention the
168:39 - variable I
168:40 - is equals to 3 okay so if I is equals to
168:43 - 5 or
168:47 - I is equals to
168:49 - 3.
168:51 - okay in that case I'll print
168:55 - that I is
168:58 - I
169:00 - is either
169:02 - 5 or 3 okay
169:06 - so that is the basic meaning of an or
169:09 - operator
169:11 - okay so when I use an or operator
169:15 - um what it does is
169:16 - it checks the first condition and it
169:19 - saves the second condition Also let's
169:21 - let's say that first condition is I
169:23 - equals to 5 and second condition is I is
169:25 - equals to 3. so when I use the or
169:27 - logical or operator if the first
169:29 - condition is true
169:31 - and the second condition is true then
169:34 - the output is also true
169:36 - and if the first condition is true and
169:40 - the second condition is false then also
169:42 - the output is true if the first
169:44 - condition is true and if this first
169:46 - condition is false and the second
169:48 - condition is false then also the output
169:50 - is
169:52 - true
169:53 - and only in the case when both the
169:56 - conditioner false then only the output
169:58 - is false okay so let's just go ahead and
170:03 - run this program and get a better
170:07 - understanding of what I said Okay so
170:11 - here I is 3 3 so this is 2 and but this
170:15 - is not
170:16 - but you we can see that the output of
170:19 - this this condition this condition as a
170:23 - whole is true
170:25 - so I'll just go ahead and change the
170:28 - value of is4
170:30 - now I can see that both of the
170:33 - conditions are false
170:35 - so it's just it does not go into the if
170:38 - block and just skips that it is because
170:41 - the the both conditions are false then
170:44 - only the uh
170:48 - the code does not get executed okay so
170:51 - I'll just go ahead and create a new
170:53 - variable a and give it that value as 5.
170:58 - now uh I'll use the end operator and
171:01 - logical operator
171:03 - okay
171:05 - so if I is 5 and a is
171:09 - Faith then print
171:12 - I is 5 and a is 3.
171:18 - okay
171:19 - now uh just we will just understand this
171:23 - so what is an logical operator
171:26 - so it it should it should say that
171:29 - um the my condition 1 should be true and
171:32 - my condition 2 should be true
171:35 - okay so here my condition 1 is is 5 and
171:40 - the karma condition 2 is a is fine so
171:42 - when both conditions are true then only
171:45 - the output is true
171:46 - now suppose any one of my condition is
171:49 - false and another condition is 2.
171:52 - then
171:53 - the output of this is false because
171:57 - when I check this that I is equals I
172:01 - should be equal to 5 and a should be
172:03 - equals to 5 but when I is not 5 and a is
172:06 - 5 uh the if if block is not executed
172:09 - because
172:11 - when I use the end operator if block is
172:14 - only executed when both conditions are
172:16 - true okay and if both conditions are
172:18 - false then then also it will not get
172:21 - executed so when I run this program
172:25 - I can I can predict that it does not get
172:29 - into the if if block and yes it does not
172:33 - get into the if block so I'll just
172:36 - change the value of I is 5.
172:42 - and I can see that okay so my bad
172:46 - and yes
172:48 - the if block gets executed when both
172:51 - conditions are true
172:52 - so that was about the N logical operator
172:55 - now what about the not logical operator
172:58 - so when I use the note of uh
173:02 - logical operator like uh you you can
173:06 - remember when I was
173:09 - covering operators I used exclamation
173:13 - mark equal to that represents not equal
173:15 - to okay so when I use I
173:18 - not equal to 5 and I change here I 7
173:23 - so the if block will get executed here
173:27 - because I is not equal to 5. as simple
173:30 - as that
173:31 - okay so the logical not is used to
173:36 - negate the condition whenever the
173:38 - condition is true the output is false
173:40 - and whenever the condition is false the
173:42 - output is true
173:44 - okay
173:46 - so
173:47 - um
173:50 - like till now we have covered The
173:53 - Logical operators in if else
173:57 - and
173:59 - the
174:01 - if else ladder the nested effects
174:05 - okay in the next video we will cover
174:10 - another topic
174:13 - and in this video we are going to learn
174:17 - about the in operator in kotlin language
174:18 - so uh to study the in operator uh
174:23 - we I would like to consider the example
174:26 - to declare a variable and check if it is
174:29 - it lies within a specific range
174:32 - okay so I have a main function
174:37 - and inside the main function I will
174:39 - create a value
174:41 - n is equals to 5.
174:44 - and I have to check that if the values
174:47 - lie in 1 to 10 or if the value is lies
174:50 - in to 11 to 20. so I'll just create a if
174:55 - statement if n is greater than 0
175:00 - uh or I can say that greater than equals
175:04 - to 1
175:06 - and
175:07 - so I'll just introduce the logical
175:10 - operator and
175:13 - and
175:15 - should be less than or equal to 10.
175:17 - okay so if that's the case
175:20 - then I should
175:23 - print
175:25 - that
175:27 - n is in 1 to 10. okay and
175:33 - else if
175:37 - um n is less than n is greater than
175:40 - equals to 11 and
175:44 - N is
175:47 - ah less than equal to 20
175:51 - so I have to
175:53 - print that
175:56 - and is in
175:59 - is in 11 to 20.
176:04 - or I can
176:06 - introduce an else statement as well
176:09 - which prints that and
176:13 - is not in
176:16 - 1 to 20. okay so when I go ahead and run
176:21 - this function or this code what I'll
176:25 - find is
176:26 - the the function checks if the variable
176:30 - lies within a specific range
176:34 - okay so our variable or the value n was
176:37 - equals to 5
176:39 - and
176:40 - it lies in 1 to 10. so just if we let
176:44 - the
176:47 - code to finish okay so it prints that
176:50 - analyzer n is in 1 to 10.
176:54 - okay
176:55 - so when I see the code it underlines
176:59 - this with a line okay so when I hover
177:02 - over it and hit alt plus enter
177:05 - it says that convert to a range check
177:08 - okay so when I click on that it it
177:11 - prints n in 1.10
177:15 - okay so uh the in operate this is the in
177:19 - operator
177:20 - uh we are going to study okay so instead
177:24 - of uh this whole thing n is greater than
177:27 - 11 and uh logical operator and N is less
177:31 - than equals to 20 what we can do is we
177:33 - can use the in operator
177:36 - okay so what in operator does is in the
177:38 - in operator
177:39 - the
177:41 - hydrates or I can say
177:44 - um
177:45 - checks the in the range okay so what I
177:49 - can do here is I can just write n in 11
177:53 - dot dot 20.
177:55 - so it automatically uh
177:59 - introduce this signs and it states that
178:05 - and we will check n in 11 to 20 and both
178:10 - will include
178:12 - the equal to sign okay so instead of
178:15 - using now when I see the if statement
178:19 - it also
178:21 - uh is underlined so when I hover over it
178:24 - it shows that Cascade F should be
178:27 - replaced with when and when I go uh on
178:30 - it and hit alt plus enter it shows
178:32 - replace if with one and then I hit enter
178:36 - it replaces it with the when statement
178:39 - okay
178:40 - so the kotlin or the I can say the
178:43 - intelligent idea is very useful and it
178:47 - suggests most of the things
178:49 - to make the code easier and readable and
178:52 - less redundant
178:54 - okay
178:55 - so that was it for this video stay tuned
179:02 - and in this video we are going to study
179:04 - about the loops in kotlin
179:07 - so before studying the loops the first
179:10 - question that should arise is why are
179:13 - the loops used or why should we use the
179:17 - loop
179:18 - so when I have to print the numbers from
179:23 - 1 to 10
179:24 - uh or I have to print uh a variable that
179:30 - is I and increase the variable after
179:33 - each print statement so what I can do is
179:36 - I can write a variable
179:38 - that is equals to 1. okay and then I can
179:41 - write a print statement
179:44 - to print I and then I can increase the I
179:48 - okay and
179:51 - I can repeat the same block of code
179:54 - again and again to
179:57 - execute the statement okay so if I said
180:02 - if I said I have to print all the
180:04 - natural numbers from 1 to 10. so firstly
180:08 - I have to repeat the particular block of
180:11 - code again and again and I cannot know
180:14 - where to stop
180:16 - or I have to manually
180:19 - count the number of iterations
180:22 - so uh like I have here you written the
180:25 - code and it prints all the natural
180:27 - numbers from one to five so this is a
180:31 - redundant coat and it requires a lot of
180:36 - lot of
180:38 - like I have to count the the number of
180:43 - iterations and it is a redundant code so
180:45 - uh what could we do
180:47 - to make it less redundant
180:50 - and short code and organized code so we
180:54 - can use Loops instead of repeating the
180:56 - same block of code again and again so
180:59 - what is a loop a loop is something
181:02 - repeating itself okay so when you listen
181:05 - to song you put them on Loop so what it
181:08 - does it it it repeats the song
181:12 - after the song is completed
181:15 - okay so there are three types of looping
181:18 - Loops in kotlin for Loop while loop and
181:21 - do while loop
181:22 - so let's say we want to print all the
181:26 - natural numbers from 1 to 10.
181:29 - okay
181:30 - so firstly uh we can see what is the
181:35 - Syntax for for Loop
181:38 - so the syntax is
181:42 - 4 and here is the condition
181:45 - and then the loop starts
181:48 - okay and then the code ends
181:53 - and between this there is a particular
181:57 - code sequence
182:00 - that got that gets repeated in each
182:03 - iteration okay so we use the keyword for
182:06 - and then we introduced some parameters
182:08 - that checks the the condition and
182:12 - increase the iterator and initialize the
182:15 - iterator okay and then at the end we
182:18 - close the curly braces and
182:21 - the code inside the curly braces gets
182:24 - repeated
182:25 - at each iteration
182:28 - okay
182:30 - so
182:31 - let's say we want to print all the
182:34 - natural numbers from 1 to 10. okay so we
182:37 - know that Loop repeats a particular code
182:39 - sequence now we also need something to
182:42 - count from 1 to 10. hence a counter is
182:45 - needed
182:46 - that must be incremented incremented at
182:49 - each iteration
182:51 - okay so as we have already discussed the
182:55 - Syntax for for Loop let's go ahead and
182:58 - make a code to print all the natural
183:00 - numbers from 1 to 10. okay so I'll write
183:03 - for now
183:06 - remember we have learned about the ins
183:08 - in in uh statement in kotlin
183:12 - so I will introduce the iterator here
183:16 - okay so for
183:24 - if it is not initialized outside the for
183:27 - Loop it is okay so I'll initial I'll
183:29 - initialize I here
183:31 - and use the in operator okay so I in now
183:35 - 1 to 10
183:36 - okay as I mentioned if I have to uh
183:41 - for particular condition 1 to 10 I use
183:44 - the in operator and the two dots okay so
183:47 - for I in 1 to 10
183:49 - okay and then I have to just go ahead
183:52 - and print I
183:54 - okay so when I run this function
183:59 - or on this particular block of code I
184:02 - can see that it prints all the natural
184:05 - numbers from 1 to 10. okay
184:10 - so uh
184:12 - there are some points that I would like
184:15 - to point out like for in the for Loop
184:18 - there is no need to initialize the
184:19 - iterator as I already mentioned
184:22 - and there is no need to increase the
184:25 - operator in for Loop okay so you can see
184:28 - that I haven't have not write the I plus
184:30 - plus here
184:32 - okay because when I write I plus plus
184:35 - here we can show we can see that there
184:37 - is a
184:39 - error and it shows that well cannot be
184:41 - reassigned so whenever I enter in the
184:44 - for Loop
184:45 - I very value I is created and it is
184:48 - assigned the
184:50 - particular number that that the loop is
184:54 - giving going on okay so it is a value
184:57 - not a variable in for Loop the I
185:00 - although its value changes after each
185:02 - iteration but it is a value not an
185:05 - variable okay so the default increment
185:07 - of an iterator is
185:09 - one
185:11 - so as you might have seen that uh
185:15 - iterator after each iteration increased
185:17 - by one not by two not by three so
185:19 - whatever I have to print all the odd
185:22 - numbers in 1 to 20. so then I have to um
185:26 - iterate I in 1 to 20. and I have to also
185:30 - increase the iterator by two so for
185:33 - increasing the iterator by 2 we need to
185:36 - use the step function so I'll just write
185:39 - here step two now what the step function
185:41 - does is it increases the height
185:43 - requirement so when I go ahead and run
185:45 - this function
185:47 - we can see that after each iteration the
185:50 - iterator increases by 2 and hence prints
185:52 - all the odd numbers from 1 to 20.
185:56 - okay
185:57 - now whatever I have to uh
186:01 - print all the natural numbers from 10 to
186:04 - 1. not from 1 to 10. so you might think
186:08 - that I can write here 10.1
186:12 - okay
186:14 - so when I go ahead and run this function
186:23 - you can see that it just exits it just
186:27 - exits with uh
186:30 - core zero okay why why why it happens
186:33 - because
186:34 - at the particular point when it enters
186:37 - the for Loop it is assigned the
186:40 - it is checked that if it is in 10 or 10
186:43 - to 1 okay
186:44 - it must be greater than or equal to 10
186:47 - and less than or equal to 1 so there is
186:51 - no integer that is greater than equal to
186:53 - 10 or less than equal to 1. okay and I
186:56 - would like to mention one thing also
186:58 - whenever I Define anything like this
187:01 - okay I just mention it 11. so whenever I
187:03 - have defined anything like this the by
187:06 - default
187:07 - um value assigned to I is the first
187:10 - value here okay so in this case the by
187:13 - default value assigned to I is 10 now
187:16 - getting back to our original question
187:18 - that what if I have to
187:20 - print all the statements from 10 to it
187:23 - so I'll use the down to function
187:25 - so for out I in 1
187:30 - I in 10 I in 10
187:34 - instead of the two dots I'll use Down 2
187:36 - and 1. so in this we can see that the I
187:42 - should be less than equals to 10 and
187:45 - greater than equals to 1 so now when I
187:47 - go ahead and print this
187:51 - uh
187:52 - we can see that it prints all the
187:55 - natural numbers from 10 to 1. so that is
187:58 - about the down to function
188:01 - okay
188:04 - so
188:06 - in the next video we will see about the
188:09 - while and the DUI loops and cotton this
188:11 - is all for this video thank you
188:15 - in this video uh we are going to discuss
188:17 - about the while and the do while loop in
188:19 - kotlin okay so in the previous video we
188:22 - discussed about the for Loop and cotton
188:23 - and the basic idea of loop so Loop is
188:26 - used in programming to repeat a specific
188:28 - block of code until certain condition is
188:31 - met okay
188:33 - so Loops are what makes computer
188:35 - interesting machine imagine you need to
188:37 - print a sentence 50 times on your screen
188:39 - you can do it by using a print statement
188:44 - 50 times or you can use loops
188:48 - so we will start with the while loop and
188:52 - firstly we will discuss the syntax of
188:55 - the while loop okay so for while loop we
188:59 - will first write the keyword file and
189:04 - inside and open a parenthesis and inside
189:07 - the parenthesis we will write the text
189:10 - expression or I can say the
189:13 - condition okay so when the condition is
189:16 - true uh it enters the the code block
189:21 - and there is a code sequence
189:25 - and
189:26 - after this there is a we close the
189:29 - parenthesis okay so the curly braces
189:32 - okay so
189:34 - um
189:35 - whenever the text expression is true
189:38 - it enters into the code sequence and the
189:40 - particular code sequence is repeated
189:43 - okay so test expression inside the
189:45 - parenthesis is a Boolean expression if
189:47 - the test expression is evaluated to true
189:50 - statement inside the while loop are
189:53 - executed then the test expression is
189:56 - evaluated again this process goes on
189:58 - until the test expression is evaluated
190:00 - to false if the test expression is
190:03 - evaluated to false while loop is
190:05 - terminated okay
190:07 - so uh now we will
190:10 - take an example of while loop in which
190:13 - we will print
190:16 - um
190:17 - line five times or ten times okay
190:21 - so uh I'll in the main function I'll
190:25 - just introduce a variable
190:28 - so unlike a for Loop
190:31 - we have to initialize and increment the
190:33 - variable in while loop okay then I'll
190:36 - use the while keyboard and while I is
190:40 - less than or equal to 10 okay
190:43 - I have to
190:45 - print
190:47 - I and at the end of the loop I have to
190:51 - increase I also
190:53 - okay I have to increment the value of I
190:56 - if I have not incremented the value of I
190:59 - the the Y Loop couldn't have ended okay
191:04 - so when I run the program the output is
191:18 - okay so when I run the program the
191:20 - output is okay instead of I is 5 I have
191:24 - to make I is 1
191:28 - and when I run the program the output is
191:33 - one two three four five six seven eight
191:35 - and ten okay
191:37 - so notice that plus plus I statement
191:40 - yeah or I plus plus statement inside the
191:42 - while loop
191:44 - okay so we have incremented i at the end
191:47 - of our loop after 10 iteration I will be
191:49 - incremented to 11 okay so if I uh print
191:54 - the value of I here
191:57 - so I would be equal to 11 at this
192:00 - particular case Okay uh so it goes back
192:04 - to the test rate test statement and the
192:07 - condition I is less than equals to 10 is
192:10 - false okay
192:12 - so therefore the loop terminates
192:15 - so if the body of loop has only one
192:17 - statement uh it is not necessary to use
192:21 - a curly place
192:22 - as we did in the if and the uh when
192:26 - statements
192:29 - so now we will move forward to the do
192:32 - while loop
192:34 - so
192:36 - the Syntax for the Dubai Loop is
192:41 - uh there is a
192:45 - so we will firstly write the do
192:50 - okay I'll just remove this we will
192:52 - firstly write the do keyword and then
192:55 - uh
192:57 - and then write a code sequence
193:00 - and
193:02 - after this we will end this and after
193:06 - this code sequence I'll write while
193:09 - file keyword and then here I will write
193:12 - the test expression
193:16 - okay
193:18 - so we will first
193:21 - discussed the that how do while loop
193:24 - work so the code inside the body of do
193:27 - construct is executed once without
193:30 - checking the test expression then the
193:33 - test expression is checked if the test
193:35 - expression is so the code is executed
193:38 - once and then the text expression is
193:40 - checked okay so if the test expression
193:42 - is evaluated to True code inside the
193:45 - body of the loops are executed once
193:48 - again
193:48 - okay and the test expression is
193:51 - evaluated again the process goes on and
193:53 - on until the test test expression is
193:56 - evaluated to false okay so when the test
193:59 - expression is evaluated to false do
194:01 - while loop terminates so what is the
194:03 - main difference between while and the do
194:05 - value is
194:07 - in do I Loop the code sequence is
194:10 - executed at least one time
194:13 - and even if the test expression is false
194:17 - okay
194:18 - as not in the while loop because in by
194:21 - Loop it will first check the condition
194:24 - and if the test expression is false it
194:27 - will just go on to the it will just
194:29 - terminate the loop okay it will not go
194:30 - on in the body of the loop
194:33 - so now we will go ahead and try the same
194:38 - with the do while loop and
194:41 - print the
194:43 - natural numbers from 1 to 10 so I'll
194:47 - write do and then in the code sequence
194:49 - I'll write print statement and
194:53 - before writing the print statement I
194:55 - have also I have to also initialize a
194:58 - variable that is I
195:00 - and then inside the print statement I
195:02 - have to print the variable and increment
195:05 - the
195:06 - variable because if I had not
195:09 - incremented the variable the loop will
195:11 - go on and on and on and will not stop
195:15 - okay so then I'll use the while keyboard
195:17 - and inside the while keyword I'll write
195:19 - I is less than equals to 10. okay and
195:22 - then when I run this
195:24 - program
195:26 - I can find that the output is
195:31 - 1 to 10 okay
195:33 - so now what if I had not incremented
195:37 - this
195:38 - and I had just used the print statement
195:40 - as I mentioned the loop will go on and
195:43 - on and on and it will not stop on its
195:45 - own so now what to do if the loops goes
195:47 - on and on so in the command prompt you
195:50 - will just do control plus c
195:53 - okay all you can do is terminate the
195:56 - loop from here the stop
196:00 - okay so take care in mind that the loop
196:05 - will not continue to infinite
196:07 - and mention the increment statement here
196:11 - so till now we have covered about about
196:14 - the loops and basic example not I I will
196:18 - not say example we have just learned the
196:20 - syntax from here okay so you might have
196:23 - a pretty good understanding of loops
196:26 - okay thank you
196:28 - and in this video we are going to learn
196:31 - about the break expression in kotlin
196:34 - okay so uh suppose you are working with
196:38 - loops and it is sometimes desirable to
196:41 - terminate the loop immediately without
196:43 - checking the test expression okay
196:46 - so I have to terminate the loop at some
196:48 - point
196:50 - so what I can do is in such cases I can
196:53 - use the break statement okay so I'll
196:55 - just go with the random example like I I
196:59 - started a loop and uh if the something
197:03 - occurs then I have to break the loop
197:06 - okay so then I have to use the break
197:08 - statement for terminating the loop
197:11 - without checking the test expression
197:15 - okay so the break statement terminates
197:18 - the nearest enclosing Loop when
197:21 - encountered without checking the test
197:23 - expression
197:24 - okay so how break works it uh it is
197:28 - almost always
197:29 - used with if else statement
197:32 - okay
197:33 - so I'll just
197:37 - introduce you with the syntax of
197:41 - this break so what what I will do is uh
197:45 - in the for there is a for Loop okay in
197:48 - which there is a for Loop in which if
197:51 - there is some test expression
197:57 - if there is some test expression then I
197:59 - have to
198:00 - break the loop
198:03 - I have to terminate the loop so I'll use
198:05 - the break statement
198:06 - okay
198:09 - and I'll use okay
198:13 - so if test expression is evaluated to
198:16 - True break is executed which terminates
198:19 - the for Loop
198:21 - okay
198:23 - so uh now I'll go explain you with an
198:27 - example
198:28 - so I'll create a main function and
198:30 - inside the main function I'll create a
198:33 - for Loop which iterates from
198:36 - 1 to 10
198:38 - okay and in this if I is equals to 5
198:43 - if I is equals to 5 then I have to
198:47 - terminate the loop
198:48 - okay so I'll use just the break
198:51 - statement here
198:53 - and I'll print Ln
198:56 - I just to know that what is happening in
199:00 - the loop so when I go ahead and run this
199:03 - function
199:04 - what I can see is
199:08 - the the what I can see is one to four is
199:11 - printed
199:12 - so uh when the value of I is equals to 5
199:15 - okay so we enter in the for loop I is
199:18 - assigned value equals to 1. and then it
199:22 - checks whether the I is 5 or not so I is
199:24 - not 5 then it prints I and then in it
199:27 - increases I equals to 2 and then it
199:30 - again checks that if I is equals to 2 or
199:32 - 2 5 or not so it is not equals to 5 and
199:35 - then again it prints the
199:37 - value 2 as soon as the I as soon as I
199:42 - becomes 5 in the for Loop
199:46 - inside if is evaluated to true
199:49 - and break is executed this terminates
199:52 - the for Loop
199:55 - okay
199:57 - so
199:58 - um
200:02 - what is lab so we will move ahead and
200:06 - learn about labeled break in kotlin
200:10 - so what we have learned till now is an
200:13 - unlabeled from form of brick which
200:15 - terminates the nearest enclosing Loop
200:17 - there is another way to wave break can
200:20 - be used to terminate desired Loop okay
200:23 - or I can say the two terminate an outer
200:25 - loop
200:26 - so how does a label break works
200:30 - okay
200:33 - so there is a
200:34 - um
200:35 - there is a while loop in in a while loop
200:39 - and there is a so there are basically
200:41 - two loops
200:43 - okay
200:45 - so label in kotlin starts with an
200:48 - identifier which is followed by an at
200:50 - the rate
200:51 - okay so here uh when I
200:56 - I okay I can make a
201:01 - code for that syntax okay so I can make
201:04 - test at the rate
201:06 - while
201:08 - and there is some test expression
201:15 - and inside this while loop
201:18 - there is some codes
201:25 - and inside this with the codes there is
201:28 - another while loop
201:30 - which contains another test expression
201:39 - and
201:40 - this while Loops contains some
201:44 - codes and with this code it contains an
201:47 - if statement
201:49 - and there is a condition
201:55 - to break
201:59 - in this if statement and if this
202:02 - condition is true uh what it does is it
202:05 - it will break and I'll use the Ampersand
202:09 - sign and then I'll write test okay
202:12 - so now I will go ahead and close all the
202:16 - parenthesis
202:18 - now here is one and
202:22 - here is another
202:25 - okay
202:26 - so now we will understand the syntax
202:31 - so here test at the rate is a label
202:34 - marked at the outer while loop okay so
202:37 - this is the outer while loop and test at
202:40 - the rate is a label marked at the outer
202:41 - while loop
202:43 - okay so now by using break with a label
202:46 - uh test at the rate break at the rate
202:49 - test in this case you can break a
202:51 - specific Loop
202:52 - so uh as soon as my condition to break
202:56 - is true inside the while this while
202:58 - inner while it will break the test this
203:03 - outer loop okay so what if I had not
203:06 - used the test test
203:09 - so it will break this while loop okay it
203:12 - wouldn't have break the outer while loop
203:13 - okay so it would be more clear with an
203:16 - example if it is not clear till now I'll
203:19 - use First
203:22 - as an identifier
203:24 - for a for Loop
203:27 - which iterates in 1 to 4
203:31 - 1 2 4
203:34 - and inside this for Loop there is a
203:37 - another for Loop and I'll
203:40 - just I identify with the
203:43 - SEC o and the second
203:46 - and I'll use at the rate and there is
203:49 - there will be another for Loop
203:52 - and I'll iterate it in one to two
203:57 - okay
203:59 - so inside this second for Loop I'll
204:01 - write a print statement just to know
204:04 - that
204:06 - what is the
204:08 - status of the loop
204:10 - so
204:12 - you must remember about the
204:14 - the string templates okay so I am going
204:18 - to use everything I have said till now
204:20 - okay so I is equals to I'll use the amps
204:23 - and sign a dollar sign and DUI so this
204:26 - prints the value of I okay and then
204:29 - semicolon
204:34 - semicolon
204:37 - J
204:38 - is equals to
204:42 - dollar J okay so the semicolon is going
204:45 - to print and I is equals to the value of
204:47 - I and J is equals to the value of J so I
204:49 - am just going to put into the
204:52 - value okay so if the value of I
204:56 - is 2 then I have to break the first Loop
205:00 - okay
205:01 - so I will use the break statement and
205:04 - use the at the rate and mention first
205:08 - now if I run this code
205:17 - okay I can see that I is equals to 1 and
205:20 - then J is equal to 1 then Isaac 4i is
205:23 - equals to 1 day is equals to 2 okay
205:25 - so let's just see what is happening
205:27 - right okay so we first enter the for
205:30 - Loop the first for Loop okay so there I
205:32 - is assigned the value 1.
205:34 - then we enter the second for Loop and
205:38 - there J is assigned the value 1. okay
205:40 - then the print statement is executed and
205:43 - I and J both with the value 1 is printed
205:46 - and the statement if I is equal to 2 is
205:50 - executed and as I is not equal to 2 it
205:52 - is 1 it is false and then it continues
205:55 - with the second for Loop okay for I is
205:58 - equals to 1 this Loop is executed two
206:00 - times because j i iterates in one two
206:02 - two
206:03 - okay then for I is equals to 2 okay so
206:10 - when this exit this is executed two
206:12 - times we reach the end of this Loop the
206:14 - first Loop and then I is incremented and
206:17 - I is equals I becomes two now uh it
206:21 - enters the second for Loop and for uh
206:24 - the I equals to 2 J is assigned the
206:27 - value 1.
206:28 - and then the print statement is executed
206:30 - and value of I is equals to 2 and J is
206:33 - equals to 1 is printed and after that
206:37 - the if statement is executed and
206:40 - when I is equals to 2 x expression is
206:43 - evaluated to True break at the rate
206:45 - first is executed which terminates the
206:47 - loop marked with label at the rate first
206:51 - okay or first at the rate so it
206:54 - terminates the first Loop now uh what if
206:57 - what if I have to break the loop as soon
207:00 - as I become 2
207:02 - and not when
207:04 - after printing J okay so I I have to
207:07 - just remove this statement so I can just
207:10 - uh
207:11 - copy and cut and paste it before the
207:14 - print statement so before the print
207:16 - statement the first Loop is going to be
207:19 - terminated and hence
207:23 - the third print statement is not
207:26 - executed so I can just do a little
207:30 - variation in this program okay in the
207:32 - previous program
207:33 - so instead of break at the rate first
207:36 - I'll do break at the rate
207:40 - second
207:44 - now
207:46 - when I run this program
207:49 - okay
207:53 - when I run this program
208:01 - I can see that I is equals to 1 I is
208:03 - equal J is equals to one so the whole
208:05 - Loop is executed
208:09 - no the whole Loop is not executed since
208:12 - break statement is used to terminate the
208:15 - innermost Loop of program okay so the
208:19 - second Loop of program I have broke so
208:22 - when I I was to
208:24 - when I was to
208:26 - J was one okay so that was printed I was
208:29 - two J was one and then the condition was
208:31 - evaluated and the second Loop was bred
208:34 - so it it reached the end it reached to
208:37 - the end okay and at the end of this uh
208:40 - the the iterator for first Loop that is
208:43 - I is executed okay
208:46 - so uh if I have to
208:49 - um
208:50 - like code for this I need not write
208:54 - first advert or second at the rate
208:55 - because
208:57 - um
208:59 - foreign
209:02 - statement as it is is for uh terminating
209:07 - the innermost Loop okay so if I had not
209:10 - right at the rate at any point it gives
209:14 - me the
209:15 - same output
209:18 - okay so that was it for this video thank
209:21 - you
209:23 - in this video we will see what is uh
209:26 - continue in kotlin continue in kotlin
209:30 - and then we will see an example uh to
209:33 - calculate the sum of N natural number
209:35 - using for Loop okay
209:39 - so uh what is continue
209:43 - and in which cases continue is used
209:47 - so suppose you are working with loops
209:49 - and uh sometimes you want to skip the
209:53 - current iteration of the loop okay
209:56 - so in such case continuous use the
209:58 - continue construct skips the current
210:01 - iteration of the enclosing Loop and the
210:04 - control of program jumps to
210:07 - the end body of the loop okay
210:10 - so let us now see that how continue
210:13 - works
210:15 - so yeah
210:17 - uh it is almost always used with if else
210:21 - construct so for example there is a file
210:26 - some X test expression
210:33 - and test expression one I can say and
210:36 - then there is a loop which has some code
210:39 - this one okay and then after some set of
210:44 - code there is a statement that if test
210:47 - expression
210:50 - 2 is true okay
210:52 - uh then I have to I I'll say I have to
210:56 - continue
210:58 - and
211:01 - I'll just end the loop here and then the
211:03 - if statement here and there is some
211:05 - another block of code say code two
211:09 - okay
211:10 - so what is happening here okay I'll just
211:14 - end my
211:15 - while loop okay so what is happening
211:18 - here is uh if the test Expression 2 is
211:21 - evaluated to if the text Expression 2 is
211:24 - evaluated to True uh continue is
211:26 - executed which skips all the cores
211:28 - inside the while loop after the
211:30 - iteration which is the code to block
211:31 - okay
211:33 - so uh
211:36 - like uh there is some code one that is
211:39 - going to be executed after the while
211:41 - statement and then
211:43 - if the test Expression 2 is true then it
211:46 - is going to go to the end of this wild
211:49 - block
211:50 - and skip the code too okay
211:54 - so uh
211:56 - and if there is something with the
212:01 - if there is a do do while loop okay so
212:05 - there would be a do by Loop like do
212:07 - code one if it has Expression 2 is 2 uh
212:11 - continue and then there is another set
212:13 - of code and there is a then there is a
212:16 - while statement while
212:19 - test
212:20 - expression
212:22 - one so now what what happens when when
212:27 - the test Expression 2 is true that the
212:31 - the container is going to be called and
212:33 - then it is going to be skipped to the
212:36 - while statement and then the test
212:38 - expression one is going to be checked
212:39 - and then it if it holds true then it
212:43 - will go to the uh do Loop okay so let us
212:46 - go through the
212:48 - example of continue in kotlin
212:52 - over okay
212:54 - so uh Suppose there is a for Loop uh
212:58 - from one to five
213:01 - and uh if I is
213:06 - if I is greater than 1 or less than 5
213:09 - yeah if I is greater than 1 and less
213:11 - than 5 we have to continue
213:14 - okay so I'll just uh
213:18 - writes the code
213:21 - one main
213:25 - thank you
213:27 - for
213:28 - I in
213:32 - for
213:34 - i n one two five
213:39 - and then if
213:42 - uh okay
213:44 - I I'll include print Allen
213:51 - um
213:53 - I
213:55 - always
213:58 - printed
214:02 - Okay then if
214:09 - I is greater than 1
214:14 - and
214:18 - I is less than
214:20 - 5.
214:22 - okay which is equal in all case except
214:25 - when I is 1 and 5 okay
214:30 - so in this case I will say that continue
214:36 - okay and then I'll again write a print
214:40 - statement which says print Ln
214:44 - uh
214:47 - dollar I not always
214:52 - print
214:53 - okay so when I go ahead and run this
214:58 - program
215:02 - what I can see is when when we run the
215:05 - program
215:07 - um
215:17 - okay so when we can when we run this
215:20 - program it says that one always wanted
215:22 - one not always printed two always
215:24 - printed three always printed four always
215:25 - printed five always printed and then
215:28 - five not always printed
215:30 - okay so when the value of I is greater
215:34 - than 1 and less than 5 continue is
215:36 - executed which skips the execution of
215:39 - this this this code print Ln I is not
215:43 - always printed okay however the
215:46 - statement this this statement print Ln I
215:48 - is always printed is executed in each
215:51 - iteration of the loop because this this
215:52 - statement this extra this statement
215:55 - exists before the uh continue construct
215:58 - okay
216:00 - so now now we will see a some uh like
216:05 - real life example of it so let's say I
216:08 - have to uh I have to calculate
216:12 - the sum of
216:16 - positive numbers only
216:23 - so uh before that we will
216:26 - calculate
216:28 - the sum of
216:31 - first and natural numbers
216:37 - okay so for calculating the sum of first
216:39 - and natural numbers uh
216:42 - the the what we can do is
216:45 - we can use a for Loop or any kind of
216:48 - loop okay
216:49 - so uh let's say I I have to make a
216:52 - program using the for Loop so I'll write
216:55 - the code and explain
216:57 - okay so let's say uh I I'll I have I am
217:01 - declaring the variable num
217:05 - and I am giving the value of 100 okay so
217:08 - I have to calculate the sum of first 100
217:10 - natural numbers okay so there is a value
217:13 - and uh let's say there is a variable sum
217:16 - which is initialized as 0 for the in the
217:19 - starting okay
217:22 - so for
217:24 - I in
217:25 - 1 to num
217:28 - okay so I in one to num now what what uh
217:32 - what are we going to do is I'll I am
217:34 - going to uh do sum is equals to sum plus
217:37 - I okay so I am going to add I in some
217:40 - and equate it with it so uh in order to
217:45 - write the code of it sum plus equals to
217:48 - I
217:50 - so this is the
217:52 - sum equals to sum plus I so now whenever
217:56 - the loop iterates every time the
217:59 - particular number is going to add with
218:01 - the sum okay so at the end I'll
218:05 - print
218:07 - the sum
218:09 - so uh I'll print
218:12 - [Music]
218:15 - sum is equals to
218:19 - sum
218:20 - now when I run this program
218:23 - I should see the uh sum of first
218:27 - 100 natural numbers
218:30 - so the sum of 400 natural number is uh
218:33 - five zero five zero
218:35 - okay
218:36 - so uh now I have to
218:39 - calculate the sum of only positive
218:42 - numbers from 1 to 100. so now I have to
218:45 - do make some changes in this program so
218:49 - what I will do is
218:51 - uh I'll
218:54 - this this block of code is fine okay so
218:58 - uh there is some integer
219:02 - and
219:08 - okay
219:10 - so uh
219:14 - from 0 to 100 I have to calculate the
219:17 - sum of uh positive numbers only
219:20 - so if before including the sum
219:24 - if the number is uh
219:29 - okay sorry
219:30 - I have to mention here odd okay my bad I
219:35 - have to calculate the sum of odd numbers
219:36 - only so from 1 to 100 I have to
219:38 - calculate the sum of odd odd numbers so
219:41 - if the number is even I have to
219:44 - continue okay I have no I have to skip
219:48 - the last of code so what is the
219:50 - condition for for a number to be even so
219:53 - the condition is number
219:55 - must be
219:58 - when the number is divided by 2 the
220:00 - remainder must be 0.
220:02 - okay so when the number is even
220:04 - I should continue
220:10 - and now when I run this program
220:23 - okay so if I if I should be even then I
220:28 - uh when divided by 2 the remainder
220:30 - should be zero okay
220:32 - so when I divided by 2 and I is even we
220:36 - should continue and when I is not even
220:38 - that is odd we will skip to this block
220:41 - of code and calculate the sum so when I
220:43 - run this program I can see that the sum
220:46 - of odd numbers from 1 to 100 is 2500
220:49 - okay so that's all for this video stay
220:53 - tuned
220:54 - in this video firstly we are going to
220:57 - see what is the scope of a variable and
221:00 - then we we will cover some ah few
221:03 - examples which which will help you get a
221:06 - better Clarity of all those all those
221:08 - Concepts that we have learned in the
221:10 - particular playlist of introduction to
221:13 - kotlin okay
221:14 - so what is scope of a variable a scope
221:17 - of a variable is its visibility or a
221:21 - visibility of a particular variable
221:22 - within a piece of code
221:24 - so let us understand with it with this
221:27 - with the example okay so suppose uh this
221:31 - is a block when block of code one okay
221:35 - so
221:37 - and then there is a for Loop and then if
221:40 - between in inside the for Loop there is
221:42 - a block of code two so as the variable a
221:47 - is defined in the main function outside
221:50 - the for Loop so the variable a is
221:54 - visible to code 1 as well as the code 2.
221:58 - okay so the code one is this thing and
222:00 - the code 2 is particularly this thing
222:02 - okay or I can say the code one includes
222:05 - this also so basically The Core 2 is the
222:07 - for Loop
222:09 - and uh
222:12 - because the variable B is uh initialized
222:16 - in the for Loop
222:18 - inside the loop body
222:21 - and uh so it is visible to visible only
222:25 - to the code B and not the code one and
222:29 - hence it should be used by this Loop
222:32 - body only okay
222:35 - so the variable B cannot be used outside
222:37 - so I cannot use uh B is equals to 20
222:41 - here
222:43 - okay when I uh do so it shows an error
222:47 - here because the B variable is not
222:50 - visible to outside the loop okay
222:54 - similarly when I Define a function okay
222:57 - a function outside the main function and
223:01 - I use some variables in the uh the other
223:05 - function so the variables which I have
223:07 - used in the other function are not
223:09 - visible to the main function and the
223:11 - body and the and the body of the main
223:14 - function okay so this is about the
223:17 - uh scope of variable okay so now moving
223:21 - forward uh we will uh write a kotlin
223:24 - program to
223:26 - find a
223:28 - factorial of a particular number of a of
223:31 - a particular number Okay so kotlin
223:35 - program to
223:38 - find
223:40 - factorial
223:45 - of a
223:47 - number
223:49 - so in this program you will learn to
223:51 - find the factorial of a number using for
223:54 - Loop or you can use while loop also
223:58 - and okay so what is a factorial so a
224:01 - factorial of a number n can be given by
224:04 - n factorial
224:06 - and it it is equals to 1 into 2 into 3
224:12 - into 4
224:14 - and so on till
224:17 - and okay
224:20 - so uh now we have to think that how
224:24 - should we proceed in this particular
224:26 - question so uh for thinking this uh I
224:30 - firstly I should think that uh one Loop
224:33 - is required okay we cannot manually
224:35 - multiply the number with two and three
224:37 - and four okay also uh the the particular
224:41 - Factor should be multiplied with the I
224:44 - with the incrementer
224:47 - okay
224:49 - so uh in this program we should we
224:52 - should use a loop
224:55 - to Loop through all the numbers between
224:57 - one to the given number
224:58 - okay whichever number has been given and
225:01 - uh the product of each number till the
225:04 - number is stored within a variable it
225:08 - must be stored within a variable
225:10 - okay so as we did in the uh as we did
225:14 - for finally finding the sum so uh
225:17 - initially I'll declare the main function
225:20 - okay inside the main function there is a
225:23 - value num and that is defined time so I
225:27 - have to find the factorial for the
225:29 - particular number 10.
225:32 - now I should Define a particular
225:35 - variable let's say factorial okay
225:40 - variable let's say factorial in which
225:43 - the factorial is going to be
225:45 - stored
225:48 - okay
225:49 - now this factorial
225:52 - uh okay instead of 10 I I'll do it 5.
225:57 - okay so this factorial uh should be
226:01 - equals to 1 on in the starting because
226:03 - this is multiplication if this is if
226:06 - this was a sum as we did in the sum of N
226:08 - natural numbers we would have
226:09 - initialized it with zero because uh it
226:12 - we would be adding something to it now
226:14 - we would be multiplying something to it
226:16 - so we have initialized initialized it as
226:19 - one because anything multiplied to 1 is
226:21 - the particular thing okay similarly
226:24 - anything added to the the zero is the
226:27 - particular number
226:28 - okay now after declaring a factorial
226:31 - variable uh we should decl we should use
226:34 - the for Loop okay so for now from where
226:37 - we have to iterate so I have to iterate
226:40 - from 1 to
226:43 - the number particular okay
226:46 - so from I to the number
226:49 - uh the factorial okay the factorial is
226:54 - equals to
226:55 - the
226:56 - factorial into number
227:00 - okay so uh from starting we can see that
227:04 - uh what is 2 factorial
227:07 - or what is one factorial I'll say one
227:10 - factorial one factorial is one okay now
227:13 - what is 2 factorial
227:15 - 2 factorial is
227:17 - 2 into 1 factorial
227:21 - and what is 3 factorial
227:24 - three factorial is 3 into 2 into 1 and 2
227:28 - into 1 is uh any basically two factorial
227:30 - now what is four factorial 4 factorial
227:34 - is
227:35 - 4 into 3 into 2 into 1 now what is 4
227:38 - into 3 into 2 into 1 4 4 into 3 into 2
227:41 - into 1 so what is three into two into
227:42 - one three into two into one is three
227:43 - factorial
227:45 - okay so I can see that I can say that
227:49 - the factorial is equals to the previous
227:52 - factorial into the current number
227:54 - or instead of number I should have said
227:56 - here I okay that was my fault
227:59 - so um what I can do here is I can just
228:02 - write factorial
228:04 - ah into equals to
228:07 - I
228:09 - okay clear
228:12 - and
228:13 - at the end
228:15 - I should write the print function
228:18 - so print Ln
228:20 - uh
228:22 - fact
228:23 - orial
228:26 - of
228:29 - the number
228:34 - is equals to
228:38 - um factorial so the factorial variable
228:43 - now
228:45 - what I should do is I should run this
228:47 - program
228:49 - okay
228:51 - so what is pi factorial Pi factorial is
228:53 - basically 120 4 factorial is 24. okay so
228:57 - this program gives that factorial of 5
228:59 - is 120 so we have successfully uh
229:04 - made a program which prints the
229:06 - factorial of a particular number okay so
229:08 - that that is all for this video stay
229:10 - tuned
229:14 - in this video uh we we would do some
229:18 - examples on the uh on the things we have
229:21 - learned okay so what I would recommend
229:24 - is uh you just pause the video when I uh
229:28 - announce the problem statement and then
229:30 - do it by your yourself
229:32 - and then you can play it again and check
229:35 - the solution okay so we would continue
229:38 - with our first example to
229:41 - um
229:42 - count number of digits
229:47 - in an integer
229:52 - okay so uh
229:54 - like
229:56 - there is some integer or a number given
229:59 - okay suppose one two three four
230:01 - so
230:03 - I have to count the number of digits in
230:06 - the number
230:08 - so let's
230:10 - code for that
230:13 - so I'll write the main function and
230:16 - inside the main function uh
230:19 - there is a number
230:25 - and suppose that number is one two three
230:27 - four five six seven okay now uh I'll
230:32 - declare a count
230:34 - I'll declare account and in at every
230:36 - Loop I'll increase the count by one okay
230:39 - so count is equals to zero at the start
230:44 - so uh
230:46 - what is the basic logic behind this like
230:51 - we have to use Loop and iterate the loop
230:54 - until
230:56 - some some condition or something is
230:58 - evaluated to false okay so I I can use
231:03 - while loop I can use any Loop in this
231:05 - but I'll I'll use while loop okay so uh
231:10 - and Counting of Digit okay so at every
231:13 - tens place there is a new digit every
231:15 - tens hundredth place so when I divide
231:18 - the number by 10
231:20 - so the number of digits get reduced by
231:23 - one
231:25 - okay
231:26 - and
231:29 - when I divide by 10 divided by 10 you
231:33 - know there is no decimal
231:35 - anything taking place because the number
231:38 - is integer okay so when I divide one two
231:41 - three four five six seven by uh 10 the
231:44 - answer is one two three four five six
231:46 - not one two three five six point five
231:47 - seven okay so I'll use while loop
231:51 - and the condition would be number uh not
231:55 - equal to zero okay so while the number
231:58 - is not equal to 0
232:00 - I'll
232:02 - I'll divide the number by 10.
232:05 - and store it in number or num and I'll
232:09 - increase the
232:10 - count
232:13 - okay
232:15 - so uh what happens here is after first
232:19 - iteration num will be divided by 10 and
232:21 - its value will be uh one two three four
232:24 - five six
232:26 - then the count is incremented to 1.
232:28 - after the second iteration the value num
232:32 - would be
232:34 - um one two three four five and the that
232:37 - is incremented to to after the third
232:40 - iteration the number would be
232:41 - incremented to one two three four and so
232:43 - on so after the seventh iteration the
232:46 - number would be increment after the six
232:48 - iteration number would be incremented to
232:49 - one number would be uh one and the count
232:53 - is incremented to six and again at the
232:58 - seventh iteration the encounter is
233:01 - incremented to seven and the num becomes
233:03 - zero so again when when uh then then the
233:07 - test expression is evaluated to false
233:09 - and the loop terminates okay
233:11 - so I can write a print statement here
233:18 - number of digits
233:23 - in Num is or I can say in
233:28 - um
233:33 - is
233:36 - count
233:38 - okay so when I run this program
233:42 - the answer the or the output should be
233:45 - seven
233:48 - so let's see
234:08 - [Music]
234:10 - okay so the number of digits in zero now
234:14 - why it is showing 0 here because we have
234:16 - done all the calculation and num we have
234:19 - divided num by 10 and so on and then num
234:22 - becomes zero so what I will do is I will
234:24 - change here
234:27 - I'll
234:28 - take a value number
234:32 - that would be equal to one two three
234:33 - four five six seven it is the input and
234:36 - then
234:38 - I'll uh introduce a variable num that
234:42 - would be equal to our number
234:45 - okay and now here I can do number
234:49 - now when I run this program
234:53 - I can see that
234:56 - it works on pretty well the number of
234:58 - digital one two three four five six
235:00 - seven is seven
235:01 - okay moving forward
235:08 - in the next example we would write a
235:12 - kotlin program to reverse a number
235:18 - okay so uh what I should do for
235:21 - reversing a number
235:25 - for reversing a number uh I can do is
235:29 - what I can do is I can
235:31 - uh
235:33 - introduce a lot of variables okay so it
235:37 - is not a right choice because we don't
235:40 - know
235:41 - the
235:44 - count of count uh the number of digits
235:48 - in the in the integer okay so what would
235:51 - we do is uh
235:53 - we would first like when we divide the
235:57 - number by 10
235:59 - okay so the remainder
236:02 - the remainder we get is like when we
236:04 - divide one to three plus five six seven
236:05 - by ten so the remainder is 7 here
236:08 - okay when we divide it by 10.
236:12 - so uh
236:14 - like this is the this must be this would
236:17 - be the first digit of the reverse number
236:21 - so let's go ahead and think as we code
236:24 - so there is a variable number this which
236:27 - is the output which is the input let's
236:29 - say it's one two three four okay so then
236:32 - I'll introduce a variable num
236:36 - which is equals to the number
236:38 - now uh I'll increase the variable
236:42 - reversed
236:45 - and for now it is 0.
236:48 - okay so I'll introduce a while loop
236:51 - while
236:52 - uh num is
236:54 - not equal to zero
236:57 - okay now uh
237:01 - I'll introduce a value variable digit
237:08 - okay and digit this digit is equals to
237:13 - num this is equal to the remainder when
237:17 - num num is divided by 10. okay
237:20 - now
237:22 - this is the uh last digit or the four in
237:26 - in the first iteration
237:28 - so uh the reverse number
237:33 - the reverse pin number
237:36 - would be equals to the old reverse
237:38 - number which is 0 for now
237:40 - okay into 10
237:43 - into 10
237:45 - and plus the digit
237:49 - so now when we come to the second
237:51 - iteration so the old reverse number is
237:54 - multiplied to 10
237:55 - and shifted one bit left side and then
238:00 - the digit is added okay so for from this
238:03 - the number could be reversed and at the
238:05 - end I divide the number by 10 okay
238:09 - so it helps in like when in the next
238:13 - slide question okay
238:15 - so I'll just explain this code once
238:17 - again in this program while loop is used
238:20 - to reverse a number as given uh as uh
238:24 - I'll say uh
238:26 - first the remainder of num divided by 10
238:29 - is stored in the variable digit now
238:32 - digit contains the last digit of num
238:34 - that is 4.
238:36 - then the digit is added
238:40 - to the variable reversed after
238:41 - multiplying it by 10 so multiplication
238:44 - by 10 adds a new place in the reverse
238:47 - number
238:48 - one place multiplied by 10 gives you
238:51 - 10th Place okay so tenth place gives you
238:53 - 100 and so on so in this case uh reverse
238:57 - contains 0 into 10 plus 4 equals to 4.
239:01 - so num is then divided by 10
239:04 - so that now it contains the first three
239:07 - digit as is one two three after second
239:09 - iteration digit equals to three reverse
239:12 - equals to 4 into 10 plus 343 and num is
239:16 - equals to 12. after third iteration the
239:19 - digit equals to 2
239:20 - okay and reverse equals to 43 into 10
239:24 - plus 2 that is 432 and num is equals to
239:27 - 1 and after the fourth iteration the
239:30 - digit equals to 1 reverse equals to 4
239:33 - and 432 into 10 plus 1 that is 4 3 2 1
239:36 - and num is equal to zero now as num
239:38 - equals to 0 the test expression fails
239:41 - and while loop exists exits and revolves
239:44 - reverse already contains the reverse
239:46 - number that is four two three one okay
239:48 - so before running this program
239:51 - I'll write a print statement
239:54 - print
239:59 - the Reversed number is
240:08 - okay now I am in this program
240:15 - I can see that the reverse number is
240:17 - 4231 okay so this is all for this video
240:20 - stay connected
240:24 - and in this video uh we are going to uh
240:27 - do some example uh so in this in the
240:30 - example we will we are going to
240:32 - calculate uh Power of a number using the
240:36 - using the power function and without
240:38 - using the power function so we will
240:41 - calculate
240:42 - calculate the
240:44 - power of a number
240:50 - so uh like uh so through this video uh
240:54 - what we will do is we will practice some
240:57 - Concepts and also I'll mention some
241:00 - things that I have missed or some new
241:03 - functions that are useful okay so uh
241:07 - there is a power function that I will
241:09 - introduce in the later part of this
241:10 - video okay
241:12 - so how to calculate a power of a number
241:14 - okay so Suppose there is 3 to the power
241:17 - 4 so uh 3 to the power 4 is 3 into 3
241:20 - into 3 into 3 4 times okay so uh 3 is
241:24 - the base in 3 to the power 4 and 4 is
241:25 - the exponent so I'll go ahead and in the
241:28 - main function I'll uh create a value
241:32 - base and give it a value 3 and a
241:36 - variable exponent
241:38 - [Music]
241:41 - and give it a value 4 okay and I'll make
241:45 - a result because
241:47 - we have to multiply something in the
241:49 - result uh I'll make a variable result
241:54 - and make it equals to 1 okay
241:58 - if I had to sum it up I I will make it
242:01 - as 0. okay now we have to multiply three
242:04 - four times okay so uh I'll use a while
242:09 - loop okay we have to use a loop that's
242:11 - clear okay so I'll use a while loop and
242:14 - till exponent
242:16 - exponent is not equal to zero
242:19 - okay I'll what I'll do is in each Loop
242:22 - I'll decrease the exponent
242:25 - okay so till exponent is not equals to
242:27 - zero uh I'll uh what I'll do is I'll
242:31 - make result equals to the uh
242:35 - previous result
242:38 - into
242:39 - the base value
242:42 - okay I think that's clear and I'll make
242:46 - it uh
242:48 - [Music]
242:49 - into equals to okay now uh I'll decrease
242:53 - the exponent
242:56 - and
242:58 - okay now I think that's it okay huh yeah
243:01 - that's it and I'll just print
243:04 - all in the
243:08 - print Allen though answer
243:13 - is equals to the result
243:17 - so dollar sign and result
243:21 - now when I run this program
243:24 - uh I expect my result to be 81
243:31 - and
243:33 - yeah we can see that answer is it here
243:35 - so in this program base and exponent are
243:38 - assigned values three and four
243:39 - respectively okay uh using the while
243:42 - loop we keep on multiplying result by
243:45 - base until exponent becomes zero in this
243:47 - case we may multiply uh we multiply
243:50 - result by base four times in total okay
243:55 - so result is equals to one into three
243:57 - into three into three into three that is
243:59 - equals to 81 okay
244:02 - so there is also a pow function
244:07 - so we don't have to do do this all thing
244:10 - we can just use the power function
244:13 - instead of this while loop and this
244:15 - result I can directly uh
244:20 - I can directly
244:22 - write the result as value result equals
244:25 - to uh there is a math library in which
244:28 - there is a power function
244:30 - okay now we can see that there is two
244:32 - double
244:34 - okay so the input that has been given is
244:37 - Con has has to be converted to double
244:40 - Okay then if uh then only it will take
244:44 - it as an input okay so I'll have to
244:47 - convert the base to double
244:52 - and I'll have to also convert the
244:55 - exponent
244:57 - to double
245:00 - okay now I have the uh power function
245:04 - and then base and then exponent so it
245:06 - will calculate 3 to the power 4 okay now
245:09 - when I run this program
245:13 - thank you
245:16 - I can see the answer is 81.0 now I can
245:20 - use I can use whatever the base and
245:23 - exponent I want I can use negative ways
245:25 - as well as negative exponent as well as
245:27 - decimal base as well as decimal exponent
245:29 - so we will go ahead and try that
245:32 - okay so let's say I have to calculate 3
245:36 - to the power minus 4.
245:39 - so is that possible
245:41 - yes it is possible okay suppose I have
245:44 - to calculate 3 to the power minus four
245:46 - point two five three four three four
245:48 - five okay now uh it is double only okay
245:51 - the exponent is double whenever when I
245:54 - our over it it says double so I can go
245:56 - ahead and remove this two double part
245:59 - now when I run this
246:07 - okay I can see my answer and it must be
246:09 - right so this is the use of the power
246:13 - function okay so in this program we used
246:16 - standard Library function math dot power
246:19 - to calculate power of Base okay we also
246:22 - need to convert base and exponent to
246:24 - double because the power function or the
246:26 - power power function only accepts double
246:30 - parameters
246:32 - okay so uh in this video uh we have
246:36 - covered how to calculate the power of
246:38 - one function using the power function
246:40 - and without the power function okay uh
246:49 - in this video we will write a kotlin
246:51 - program to convert binary number to
246:53 - decimal and vice versa okay
246:56 - convert binary
247:00 - to
247:01 - decimal and
247:03 - device
247:06 - okay so uh if you don't know uh binary
247:10 - is the uh the language that we talk to
247:13 - computers about and decimal is the is
247:16 - the number system we generally use okay
247:18 - so uh the binaries are the are is the
247:22 - number system of zeros and ones
247:24 - okay
247:25 - so in this program you will learn to
247:27 - convert binary number to a decimal
247:29 - number
247:30 - so firstly we will write a program to
247:33 - convert binary to decimal now uh let me
247:36 - create a main function
247:39 - now what we have to do when we have to
247:41 - converter
247:42 - a binary number or decimal number so
247:44 - binary number let's say there is one one
247:47 - so the one at the uh least significant
247:52 - bit has the power took the power to the
247:54 - power zero and at the most significant
247:57 - bit has two to the power 1 so it is 2 to
248:00 - the power 1 into 1 plus 2 to the power 0
248:02 - into 1 and it is equals to three okay
248:06 - so let's say I have a binary number I'll
248:11 - declare a binary number uh
248:14 - num and
248:17 - I'll declare its data type as long
248:20 - because it could be as long as one one
248:23 - zero one one zero one one
248:25 - okay now I'll declare a decimal number
248:29 - so I'll declare a valued SML and what
248:33 - I'll do is
248:34 - before this I'll uh instead of doing all
248:39 - the calculations here
248:41 - outside the main function I'll make a
248:44 - function which to to convert a binary
248:49 - binary
248:54 - 2 decimal
249:00 - okay now this function has to take
249:03 - something as an input okay so let's say
249:06 - it's it takes input a num and its data
249:10 - type is long okay now after that we have
249:13 - to declare its output output is int okay
249:17 - output type now we start the code block
249:20 - okay now uh inside the code block we
249:24 - have to
249:25 - what convert the binary to the decimal
249:28 - okay now uh
249:32 - so we have to use Loop
249:34 - okay and
249:37 - um like we have to
249:44 - okay so uh the decimal uh base 10 and
249:49 - number system has possible value 0 to 9
249:51 - for each place value okay in contrast
249:54 - the binary base two number system has
249:57 - two possible values zero and one okay
250:00 - so
250:02 - how to con so for converting this
250:06 - converting a decimal to Binary is like I
250:09 - have okay I have to show like this okay
250:12 - I have one one zero one one zero one one
250:15 - okay
250:20 - so the least significant bit here is uh
250:23 - this uh the most significant bit here is
250:27 - the first one and this is the least
250:29 - significant significant bit so the least
250:31 - significant bit holds 2 to the power
250:33 - zero two to the power zero is one okay
250:35 - and then the next bit holds the value
250:38 - two okay and again the next bit holds
250:40 - the value uh four okay and so on it
250:44 - holds the value 8.
250:47 - now it holds the value 16.
250:52 - okay
250:57 - and
250:59 - this bit holds the value 32 this bit
251:01 - holds the value uh 64. so for
251:05 - calculating so for converting this into
251:08 - the decimal I have to multiply these two
251:11 - so I have to multiply 1 into 1 and then
251:14 - multiply 2 into 1 and then multiply 4
251:16 - into 1 and then multiply 8 into 0 and
251:19 - then multiply 16 into 1 and then add the
251:22 - whole thing okay so I I guess this is
251:24 - pretty clear how to convert a decimal
251:28 - number to Binary okay
251:30 - so now we will move forward to how to
251:32 - write the code okay so uh
251:36 - firstly I'll declare declare the
251:39 - variable uh num which is equals to the
251:43 - num input that we have introduced okay
251:46 - now I have I'll declare a decimal number
251:49 - which will be our output
251:51 - the decimal number
251:54 - and for starting we will declare it as 0
251:57 - because we have to add all the numbers
252:00 - okay I have uh introduced earlier that
252:03 - when we have to add all those number we
252:05 - will initialize it as 0 and we have when
252:07 - we have to multiply all all some numbers
252:09 - we will initialize it as one okay now uh
252:13 - I'll introduce an iterator and that
252:18 - would be 0 for starting
252:20 - now I'll introduce a variable remainder
252:30 - remained
252:33 - and
252:36 - data type as its data type as log
252:42 - okay
252:55 - just a second
253:01 - so continuing with the
253:04 - the problem for converting binary okay
253:07 - so it is clear that how to how we can
253:09 - convert
253:10 - um
253:12 - binary to decimal okay so uh after
253:16 - decree declaring the remainder uh I I
253:19 - will run a loop Okay so
253:22 - running okay
253:26 - a while loop so while uh now the number
253:30 - the number is binary okay
253:34 - so
253:37 - uh okay so number is long okay so I will
253:39 - convert the uh long to end and then I'll
253:47 - numb to end
253:49 - and then when it is not equal to 0 till
253:51 - then I have to run this group
253:54 - now inside this Loop uh so I have I'll
253:57 - divide the the uh the binary number by
254:00 - 10 okay so what will happen is
254:04 - um no yeah and the remainder uh that
254:07 - will be uh
254:10 - so when I divide this number by 10 the
254:12 - remainder is the last digit okay so I
254:16 - I'll uh collect the last digit by
254:19 - dividing this number Okay so
254:22 - uh the remainder
254:30 - uh is equals to uh the
254:34 - remainder when the number is divided to
254:37 - 10 okay so now we have the last digit
254:40 - and for continuation
254:43 - I'll divide the num and provide it to
254:48 - the okay so as we did in the previous
254:51 - video we will do and the decimal number
254:54 - decimal number would now be equal to
254:57 - uh the old decimal number
255:00 - so I'll equal I'll give it plus equals
255:03 - to and it will be equal to all decimal
255:06 - numbers plus remainder
255:09 - remainder into
255:15 - math dot pow
255:19 - I'll have to do the power and power of 2
255:24 - 2 is the base
255:26 - 2.0
255:27 - and the iterator
255:30 - what is happening okay and the iterator
255:33 - uh that is I
255:36 - and I'll convert it to double
255:43 - [Music]
255:47 - two double and
255:49 - then I have to convert this whole to end
255:52 - because the decimal number is an integer
255:55 - so to int
255:58 - now I have to increase the iterator
256:03 - and then at the end of this loop I have
256:06 - to return the
256:09 - decimal number
256:13 - okay so what we did in this
256:17 - part of code is uh while the
256:21 - the decim the binary number
256:24 - is not equal to d0 because we have we
256:27 - are dividing the binary number by 10 in
256:29 - every iteration okay so why this is not
256:31 - equal to 0 uh the number
256:34 - the remainder is calculated and the
256:37 - remainder into 2 to the power 0 to the
256:41 - power 1 to the power 2 is then
256:43 - calculated and then multiplied to the
256:45 - remainder and then add it to the decimal
256:48 - number okay
256:50 - so as I have explained this how to con
256:52 - uh the conversion of this and then I
256:55 - have to call this function okay so
256:57 - calling this function I I'll introduce a
257:01 - value decimal
257:04 - decimal that would be equals to convert
257:10 - convert
257:15 - binary
257:18 - to
257:20 - the
257:24 - decimal and then the input would be
257:33 - okay
257:35 - what happened here is
257:37 - uh
257:41 - foreign
257:51 - okay
257:53 - and then I I'll print
257:59 - that
258:02 - number
258:04 - in
258:06 - binary
258:08 - is equals to
258:11 - decimal
258:15 - in the C
258:21 - okay so when I go ahead and run this
258:23 - program
258:26 - oh I can see the output
258:30 - okay the grid is building
258:48 - so I can see here the output is uh one
258:51 - one zero one one zero one one in binary
258:53 - is 439 in uh decimal okay so you can
258:57 - also check that this is correct now
258:59 - instead of doing this whole thing there
259:02 - is uh there is a integer to Binary
259:05 - string method to convert a decimal
259:07 - number into binary okay
259:10 - so what we can do is inside the main
259:12 - function uh
259:15 - for converting decimal to Binary okay so
259:18 - binary decimal this is only the way okay
259:21 - so if if I have to convert
259:25 - uh and decimal to binary
259:27 - I'll create a main function
259:30 - and then inside the main function there
259:33 - would be a number let's say 19. and then
259:38 - i l converting decimal
259:44 - to binary
259:47 - now uh value binary
259:52 - is equals to
259:54 - integer
259:57 - dot to Binary string
260:01 - and then I'll place here num okay now if
260:05 - I print
260:08 - that
260:12 - num in decimal
260:19 - is equals to
260:20 - binary
260:22 - in binary
260:25 - okay so when I run this program
260:36 - I can see that 19 decimal is one zero
260:38 - zero one one in binary okay so that is
260:41 - all for this video uh stay tuned
260:45 - in this video we will learn about multi
260:49 - uh dimensional arrays or we will learn
260:52 - it by an example of uh writing a Content
260:56 - program to add two metrics using
260:58 - multi-dimensional arrays
261:01 - okay so uh
261:04 - let's say there is a main function
261:09 - and inside the main function there is a
261:13 - value of rows
261:16 - let's say it is 2 and value of
261:20 - columns
261:23 - let's say it is 3
261:26 - now there is a value and I have to
261:29 - define a
261:31 - array okay so I hope you remember how to
261:34 - define an array
261:36 - now uh the value
261:39 - first
261:41 - Matrix
261:43 - and it is and
261:46 - array of
261:49 - um
261:50 - now array of two small errors okay so uh
261:55 - it is an array of two arrays okay so
261:59 - this is the multi-dimensional array okay
262:00 - so I'll just Define int array
262:04 - of
262:06 - now let's say two three four now this is
262:10 - a multi-dimensional array because there
262:12 - are arrays
262:14 - there is an array of different arrays
262:17 - okay there is two errors two three four
262:19 - and uh let's say uh five to three okay I
262:23 - I learned another array uh
262:26 - let's say five to three so the first
262:29 - Matrix is an array of two different
262:32 - Matrix two int Matrix
262:34 - okay similarly uh let's say I have a
262:39 - second Matrix
262:42 - e c o n d
262:46 - Matrix okay so let's say it is an array
262:51 - of
262:52 - uh
262:54 - enter
262:57 - minus 4
262:59 - 5 3 and let's say int array
263:05 - of
263:07 - 5 6
263:09 - and 3. okay so we have two
263:12 - multi-dimensional arrays so first Matrix
263:14 - and second Matrix now uh we have to
263:17 - write a program to uh add these two
263:19 - metrics
263:20 - okay so for adding these two
263:27 - matrices
263:31 - uh what I'll do is
263:33 - uh so what is adding off to Matrix if
263:37 - you remember in mathematics the adding
263:39 - if there is a matrix one two three okay
263:42 - okay I have to comment it out
263:46 - uh
263:50 - okay so if there is a matrix one two
263:53 - three and uh four two three four so I I
263:57 - have to add this Matrix within a matrix
264:00 - with a matrix let's say five six seven
264:03 - and let's say
264:06 - uh seven
264:08 - eight nine
264:13 - okay now
264:16 - um
264:17 - what what I will do is I'll add one with
264:20 - five okay two with six three with seven
264:24 - two with seven three with eight and four
264:26 - with nine respectively okay so this is
264:28 - the addition of Matrix now for adding
264:30 - these two Matrix what I can do is I can
264:33 - introduce a variable sum which is equals
264:36 - to the uh array
264:42 - array
264:46 - rows of the
264:49 - int
264:52 - rows X just a second rows of
264:56 - int area
265:00 - and then
265:02 - columns okay so what I did here is
265:07 - uh
265:09 - we firstly uh the two metrics are stored
265:12 - in a 2d array namely first Matrix and
265:14 - second Matrix you have also defined
265:16 - defined the number of rows and columns
265:18 - and store them in variable rows and
265:19 - columns respectively then we initialized
265:22 - a new array
265:24 - uh then we can then we will initialize a
265:26 - new array of the given rows and columns
265:30 - called sum okay so the sum is the
265:34 - given rows and The Columns of uh this
265:38 - the 2 and 3 which is defined
265:41 - okay so the sum is basically int array
265:45 - rows and entire columns
265:49 - okay because uh these array this array
265:52 - has two rows okay
265:53 - and
265:55 - inside these two in inside this there is
265:58 - a two indirect and each entire is
266:00 - contains the number of columns which is
266:02 - three okay so I have defined the sum
266:05 - here which is 2 comma 3 let's say so uh
266:09 - for
266:12 - I
266:14 - in
266:15 - 0 to rows
266:20 - uh minus 1.
266:22 - okay
266:25 - and inside this
266:28 - uh so uh
266:31 - like we Loop through each index of both
266:35 - arrays to add Stone add store the result
266:39 - add and store the result okay so for uh
266:42 - going through each area so we will go
266:45 - through the first array for this and
266:48 - inside this I'll introduce another for
266:50 - Loop
266:51 - for the columns so for J in 0 to
266:56 - columns minus one
266:59 - okay
267:01 - so by this we can iterate in the whole
267:03 - array or whole Matrix I can say so some
267:07 - I and J
267:12 - okay because sum is what sum is
267:14 - basically this thing
267:16 - so some i j is equals to
267:19 - first Matrix
267:21 - of i j
267:22 - I and plus Matrix J and then
267:28 - sum of first Matrix and second Matrix
267:33 - so what is happening here I can I will
267:35 - explain it again to make it very much
267:39 - clear for you okay so uh let's see here
267:44 - okay so the first Matrix let's see here
267:47 - okay
267:52 - yeah so the one here I can call the one
267:55 - as first Matrix one one okay I can call
267:58 - it as first Matrix one two so for
268:00 - iterating in i j so I have introduced
268:04 - two for loops and the first is called
268:07 - zero zeroth element second is called the
268:10 - second element third is called the third
268:11 - element that's why it is row minus one
268:13 - and column minus one okay so the sum
268:15 - will be the addition of two matrices
268:17 - will be pretty clear for you
268:20 - okay so finally we looped through each
268:23 - element in the sum
268:24 - some array using uh for Loop to print uh
268:28 - so yeah so for printing or displaying
268:31 - the result
268:32 - uh we have to display the result also
268:34 - right
268:36 - display the result
268:39 - so for displaying the result I'll uh
268:42 - print the
268:45 - firstly some
268:48 - of
268:49 - the two
268:52 - my devices is
268:56 - okay now what is the sum
268:59 - so for printing the sum we have again
269:02 - used again uh we have we again have to
269:04 - use the loops so for Row in some
269:09 - okay
269:10 - and inside this I have to uh again
269:14 - introduce a for Loop for column and sum
269:19 - column in sum
269:22 - I have to
269:23 - print
269:26 - not println I have to print the value of
269:29 - column
269:34 - and then some spaces
269:38 - okay so I have printed the column and
269:40 - then again iterated and then again print
269:42 - another column
269:44 - okay and then
269:47 - print Ln
269:49 - okay so when I go ahead and
269:56 - run this
270:03 - okay there is some problem with it
270:06 - let me see what is
270:14 - okay yeah so
270:16 - when I uh run this program
270:19 - uh I can see that the sum of two
270:22 - matrices uh is minus two eight seven ten
270:25 - eight six oh all right I can cross check
270:28 - it also uh with this 2 minus 4 3 plus 5
270:34 - 4 plus 3 2 plus 5 plus 5 2 plus 6 and 3
270:38 - plus 3 okay so this is correct uh so in
270:41 - this video we have learned about the
270:43 - multi-dimensional arrays and how to add
270:45 - two matrices we have coded the
270:49 - uh code in content okay so thank you for
270:51 - watching this video stay tuned
270:54 - this video uh we are going to calculate
270:56 - uh we are going to write a program
271:02 - uh to find a
271:04 - to find
271:06 - transpose of a matrix
271:12 - as you should be aware about what is a
271:15 - transpose of a matrix uh so uh like if
271:20 - there is a
271:22 - if there is a matrix
271:25 - just let me
271:27 - comment
271:29 - if there is a matrix let's say
271:33 - uh
271:35 - a b c
271:37 - and
271:39 - a b c
271:42 - and then d e f okay and so the transpose
271:48 - of this
271:50 - transposed Matrix so transpose of this
271:53 - given Matrix would be uh a b c
271:59 - and then here
272:04 - d
272:05 - e f okay
272:08 - so we are going to write the program for
272:11 - doing the same
272:13 - okay so uh firstly uh
272:18 - I would
272:20 - initialize the main function
272:22 - and inside the main function
272:26 - I'll declare the columns
272:29 - and rows so row is equals to 2 and value
272:36 - column is equals to
272:40 - c o l u column is equals to 3 okay now
272:46 - uh I'll take a matrix let's say the
272:49 - Matrix is uh array of
272:57 - array of int array
273:01 - uh two three four
273:04 - and again entire
273:07 - of let's say five four five six four
273:11 - okay
273:13 - now uh
273:15 - uh firstly we will display the current
273:17 - Matrix
273:19 - so so far displaying the
273:22 - current Matrix
273:24 - uh instead of using the for Loop or the
273:27 - loops that we used in the last video uh
273:31 - we will just use the keyword display and
273:35 - then I'll pass the Matrix okay so uh
273:40 - uh in the program display function is
273:43 - only used to print contents of a matrix
273:47 - okay
273:48 - and now I'll initialize the
273:52 - uh the display function
273:55 - okay
273:58 - okay
273:59 - so
274:01 - now inside the display function what
274:04 - I'll do is I have to print the display
274:07 - function okay so as we did in the last
274:11 - video I'll print Ln
274:17 - The Matrix is
274:21 - and then colon
274:24 - okay and then for
274:27 - row N Matrix
274:32 - and
274:33 - then
274:35 - for
274:37 - column
274:42 - in Matrix
274:47 - now I have to
274:50 - print
274:54 - I have to print
274:58 - [Music]
274:58 - um
275:04 - column
275:06 - and then some spaces
275:09 - now outside this first for Loop I will
275:14 - print Ln
275:16 - okay so uh this is the code to uh
275:19 - display the Matrix as we did in the last
275:21 - video
275:22 - so we have displayed the particular
275:24 - Matrix
275:26 - now what we can do is uh we can what we
275:30 - will do is we will transpose The Matrix
275:32 - so
275:34 - for Trans
275:36 - posing The Matrix
275:39 - what we have to do is we have to uh like
275:42 - I can introduce another
275:45 - Matrix called transpose
275:49 - and
275:52 - Let It Be equals to the array column
276:01 - and then
276:03 - enter a
276:05 - row
276:07 - so what this particular line means is
276:09 - the column in the transpose is equals to
276:14 - the column in the array okay
276:17 - so and
276:21 - so when I hover over it
276:23 - it's a Well column end okay and when I
276:26 - hover over this this is the array and
276:28 - then this is size
276:31 - and then this is in it and then there is
276:33 - an end okay
276:34 - so it it what it does is it decides the
276:39 - size of the particular uh array okay so
276:43 - sorry a matrix so for uh
276:47 - I in
276:49 - 0 to rho minus 1
276:56 - uh and inside this I'll uh
277:01 - I'll take another
277:03 - uh for statement for I in02 column minus
277:07 - one
277:09 - and inside this what I'll do is uh I'll
277:12 - make transpose
277:15 - the uh when the transpose one one okay
277:18 - trans pause
277:22 - so I'll do j i in here because uh
277:28 - sorry here here would be J
277:31 - because
277:33 - the transpose 1 1 is equals to the
277:37 - transpose of 1 1 is equal to one when
277:38 - the transpose of two one is one two okay
277:40 - so the transpose of 2 1 is Matrix of 1
277:43 - 2. so I can here do I and then J
277:48 - okay
277:54 - now we have transpose The Matrix so
277:58 - finally we have to display the
278:00 - transposed okay so this
278:03 - uh display
278:05 - transpose
278:09 - and I have already declared the display
278:12 - function so I'll display the transpose
278:15 - and I'll go ahead and run this
278:22 - okay
278:29 - okay there is again some problem
278:33 - okay here it should be uh column in row
278:37 - not
278:38 - column and Matrix so when I run this
278:48 - yeah I can see that this is the Matrix
278:51 - in the starting and this is the
278:54 - transpose Matrix okay so in this video
278:57 - we have basically uh
279:00 - transposed a matrix
279:03 - okay so that's all for this video stay
279:05 - tuned
279:06 - and in this video we are going to cover
279:08 - lists
279:10 - um
279:10 - so uh what are lists basically in kotlin
279:14 - okay so what what are what were arrays
279:16 - arrays are mutable
279:18 - but it cannot take a new entry okay so
279:21 - if there is an array I defined array of
279:23 - let's say 10 entries so let's say the
279:25 - entries in an array is one two three
279:27 - four five six seven eight nine ten
279:28 - respectively and uh so what I can do is
279:31 - I can change the value 2 to 15. okay but
279:35 - I cannot add a new entry let's say 11 2
279:38 - at the end okay so uh the problem of
279:42 - fixed arrays is solved by lists okay so
279:45 - in lists we can
279:47 - uh add uh new entries okay
279:53 - so uh arrays had a problem
279:57 - that
279:59 - mutable that these are mutable
280:03 - but not
280:06 - but cannot
280:09 - take
280:11 - a new entry
280:14 - now uh
280:16 - this this problem
280:19 - salt was solved by
280:23 - lifts
280:26 - so now what is a list a list can store
280:28 - Many Items of same or the different data
280:31 - types just like errors okay so just like
280:34 - arrays
280:39 - okay it can store uh any items of same
280:43 - or different data types so there are two
280:46 - types of
280:48 - list one is mutable
280:50 - and another is immutable
280:56 - so immutable as the name suggests it it
280:59 - are it it is it is for a fixed sized and
281:03 - fixed values okay so uh and so why why
281:08 - we why do we use immutables
281:11 - so we use the immutable list because
281:14 - um when we work with a lot of data uh
281:17 - and by chance some data uh gets changed
281:22 - by a programmer and it passes the same
281:26 - program to another programmer so uh this
281:29 - whole thing becomes a flop okay and when
281:33 - we debug when we debug that it would
281:37 - take a lot of time in understanding that
281:39 - where was the root of the problem so uh
281:43 - that's why we use immutable list
281:44 - whenever uh the the data is not required
281:47 - to be muted
281:49 - okay because
281:50 - to avoid errors so the second is mutable
281:54 - list as the name suggests the element
281:56 - can be added as well as altered
281:59 - okay so uh firstly in this video we will
282:03 - cover the immutable list okay
282:07 - so uh immutable lists are defined using
282:09 - the
282:11 - immutable lists
282:14 - are defined using the list of
282:19 - keyword okay
282:21 - so let's see the syntax I'll declare a
282:25 - main function and then inside the main
282:27 - function uh I'll declare a list so I can
282:31 - declare it as value or a variable it
282:34 - doesn't matter it is an immutable list
282:35 - so I I'll declare it as a variable for
282:38 - now now the name of the list so let's
282:41 - say I'll name it as
282:43 - immutable
282:45 - list one okay now uh
282:49 - I'll use the list of
282:53 - data type okay now this inside this
282:57 - greater than a less than sign I have to
282:59 - mention the data type of the particular
283:01 - list so uh and we can skip this also
283:05 - okay if I not mention if I will not
283:07 - mention this there is no problem okay so
283:10 - uh I can mention this hi
283:13 - uh this
283:20 - is
283:21 - so I'll mention a character here a okay
283:25 - I'll mention two or three character here
283:27 - B
283:28 - and then also
283:32 - seven numbers okay so uh it is an
283:35 - immutable list
283:38 - okay
283:40 - so uh
283:42 - what happens when
283:44 - uh I'll do immutable lists one uh
283:49 - number one is equals to uh
283:53 - hello
283:57 - okay now instead of this I will say zero
284:00 - so what happens is the parenthesis in is
284:03 - in red it's throws an error
284:06 - [Music]
284:08 - so yeah uh it's it it makes it red and
284:12 - when I hover over it it says unresolved
284:15 - reference and none of this following
284:18 - candidate is applicable because the
284:19 - receiver type mismatch okay so it
284:21 - basically says that uh it is an
284:24 - immutable list so we cannot mutate it
284:26 - okay
284:27 - so this is not possible
284:29 - not
284:31 - possible okay
284:34 - now uh there are some basic commands in
284:36 - list uh same as the strings or the uh
284:41 - the array so one is the get index
284:45 - immutable list one dot get index
284:50 - sorry get index to get in bracket index
284:52 - is zero okay
284:55 - uh and I'll just
284:59 - parental in this
285:15 - okay and what happens when I print the
285:18 - list also you can see here
285:24 - okay so when I run this program we will
285:28 - see that in the first line we have the
285:30 - list and in the second line we have the
285:32 - uh add index 0 what we have here is
285:36 - okay
285:38 - so we can see here it this this is the
285:41 - list
285:41 - and this is the zeroth index okay the
285:44 - another command uh commonly used is the
285:47 - index of element command Okay as you
285:50 - might remember or if not uh I'll I'll
285:52 - explain it uh the index of
285:56 - and then I'll mention a particular
285:58 - element let's say uh a
286:02 - okay
286:04 - immutable list without
286:08 - okay so any metable list I will check
286:10 - the index of a
286:12 - so when I run this program
286:15 - it will print me that what is the index
286:18 - of this particular element
286:20 - okay so the answer is 3 0 1 2 3. okay
286:23 - the another command is the last index of
286:26 - element okay
286:28 - so uh
286:31 - when I mentioned the last index of and
286:33 - then one
286:35 - okay and then run this program so what
286:38 - it will do is it will
286:40 - mention the index last index whenever
286:43 - the one is available so if I mention one
286:48 - two three one two two or three more
286:51 - times so it will mention the index of
286:53 - the last one available
286:55 - okay
286:57 - and there is a last index last sub list
287:00 - size okay there is uh these many cons
287:04 - okay so one or two I'll mention and uh
287:08 - I'll mention all of them and I'll I
287:11 - would recommend you to go through the
287:13 - Google and check about all these
287:16 - commands
287:17 - because as I already mentioned the
287:19 - Google is best friend of any programmer
287:20 - so the size uh the dot size mentions the
287:24 - size of an um
287:26 - list or um uh any anything spring or a
287:31 - array okay another is the last index
287:35 - okay
287:37 - so when I mentioned the last
287:39 - index
287:41 - and I run this program so it will just
287:45 - mention whatever thing is present at the
287:47 - last index of the
287:49 - um
287:51 - uh the the list or an array okay
287:55 - so uh emittable lists are generally used
287:58 - to store static inform information in a
288:01 - program okay as I already mentioned uh
288:04 - it is generally used to store static in
288:07 - formation why is it so because uh we
288:10 - don't we cannot uh change the data
288:14 - okay
288:16 - so uh that is all for this video in the
288:20 - next video uh we will cover the mutable
288:23 - list
288:24 - and some problems or some examples upon
288:27 - that so stay tuned

Cleaned transcript:

okay so now we will jump right into with starting with kotlin so in this training we will like mostly structure this as we will study first about kotlin we will master kotlin and then we will go to the Android studio and build some app Okay so what is a program let's let's go to the basics so you can think of a program as a series of instruction for the system to perform some action okay so I give some instruction a series of instruction such as a is equals to this B is equals to this and then perform a plus b and then print what is a plus b so this is a program for example you could write a program that creates a birthday card in the program you could write an instruction to print congratulatory text or calculate someone's age from their birth year okay so that is a program what is a programming language just like you use human language to communicate with another person you use programming language to communicate with the operating system of the computer fortunately programming language are less complex than human languages and quite logical so you might be thinking that English or Hindi is very easy why do we need to study C plus plus or kotlin or Java they are not they are very typical so they are not typical when we will end this journey of our kotlin you you will be very you will be master in kotlin so and they are logical like when I say A is equals to 5. that means a is equals to 5 that does not mean anything else okay so Android apps are written in kotlin programming language kotlin is a modern language created to develop created to help developers write code efficiently with a few errors as possible okay so that's why we have choosed kotlin so what was the creation of hotline why was you might have seen in the previous video that in 2019 the the kotlin was made as a official language for the app development so how the kotlin was created kotlin was invented to solve a developer's challenge of chat print they needed a simpler tool than Java to work with their main product called IntelliJ IDEA totally written in it the guys investigated the Alternatives stayed unsatisfied and decided to invent their own language so uh at the start the Android apps were made in C plus and then they move to Java and they were pretty comfortable in Java but what was the problem was the problem was the main problem was the Java code in Java was very determinant and there were many problems so one day Google called jet wins that they should look into the matter so what jet brains does did they invented their own language so kotwin was invented to solve developer challenge of jet planes they needed a simpler tool than Java to work with their main product called IntelliJ IDEA the guys investigated the alternative so they invented their own language okay so the main key features of kotlin are the kotlin offer a number of advantage in using or learning it okay cotton programmers have access to all Java Frameworks and libraries while having the ability to write more clear and concise code so kotlin is like just a kid of java so it has all the Frameworks all the libraries of java and it has a more it is a modern language so it is a it has a less a clear and concise quote they can use both languages while building a mobile solution and easily migrate their projects if needed so if I am writing a code in particularly in kotlin like I am building a mobile app so I can build a mobile app while using cotton and Java both simultaneously I can write one code in Java another code in kotlin and mix matches if if needed okay so why are we using kotlin so the main reasons are kotlin is Java based kotlin has a familiar program kotlin has string insertion kotlin uses Auto casts kotlin has arguments and equals kotlin has expression and property so I'll be explaining each of them what what does Java based mean coding programming like kotlin programming language is a uh is uh more recognizably uh like it has a Java based programming language so it is more usable like Java is a very old programming language and Java environment and platform in Scotland basically runs on Java environment and platform okay this means that existing Java based project can seamlessly run on this language okay so what is familiar program so the syntax or and the basic structure of this programming language are extremely easy and familiar the reason being kotlin is a Java based programming language and the syntax makes use of domain object oriented programming domain okay these are the most familiar syntax and language of coding so what is string insertion we we will be looking into it in next videos but I'll cover it so ah like um the string used in kotlin is same as Java and very simple and familiar way of making changes in coding okay so the other three we will be looking into it in a while so just hang on okay so the features of kotlin okay we have learned we have studied the uh definition or kotlin or we have studied kotlin in the second video or the third video okay so it has very um very own technical terms like kotlin is a cross platform statistically typed general purpose programming language with type inference okay so we will be looking into these terms now so what is a crossplatform language so a crossplatform language can be used in any operating system so the code written in kotlin on Windows can be executed on Mac OS as well as Linux as well as uh any other operating system and vice versa okay and there is statistically typed so what is a statistically typed language so a statically typed language is a language where variables variable types are known at the compile time such as Java C or C plus plus in most of these languages type must be expressed in expressively indicated by the programmer ok so before compiling the code the we have we know the variables variable type use okay so this means that the language is able to tell the data type of any variable during the compile time and does not allow a variable to have values of different data types in a simple program so I have defined an integer a is equals to 5. so before compiling the program the compiler knows that a is an integer that simply means that okay so what is Type inference this means that the language can automatically detect the data type so when I Define any variable a is equals to 5 the language is able to uh able to detect the data type such as the data type of a is an integer okay what is a jvm Java virtual machine so jvm is an extract machine it is a specification that provides runtime environment in which Java byte code can be executed so we will be looking more into it in a while but overall jvm is a virtual machine an abstract machine that provides a runtime environment for Java so Java Java code is executed in it by it so that it enables the computer to run Java programs or similar language such as kotlin that are also compiled by Java byte code so it helps run the program jvm are available for many hardware and software platform that is jvm platform dependent jvm is platform dependent okay so what are the operations of jvm the jvm loads code like I have written the code in the compiler what now the jvm loads the code the it verifies the code it executes the code and it provides the runtime environment okay so that's all for this video stay tuned where do we write code in the kotlin language so I have told you that we use the IDE as the Android Studio for development of Android apps that is XML and kotlin both work simultaneously on Android Studio and now we have to focus only on kotlin so therefore we need an another IDE for writing only kotlin code and that ID is IntelliJ IDEA so what is intelligent idea used for IntelliJ IDEA is an integrated integrated development environment IDE or jvm languages including Java kotlin designed to maximize developers productivity okay so just like Android Studio uses SDK software development kit similarly individual idea uses jdk Java development kit or that we we will be installing in the next video and I will be explaining what jdk is in the next video so now let's move to install IntelliJ IDEA and for Linux and Mac users just note that after opening the installer all steps would be the same okay so uh just go to the Google and type IntelliJ IDEA IntelliJ IDEA download click the first link download IntelliJ IDEA and download the community version for Mac OS and Linux user continue from here and for Windows user download the community version okay so we will wait for it to download okay so the installer is downloaded for the intelligent area we will open it the exe file a setup is loading Okay click yes click next click next uh here click intelligent idea Community Edition and here click dot KT and then click next install so we will wait for the IntelliJ IDEA to install okay so the IDE has been installed here click on run and then finish so now we will just wait for the intelligent idea to run so here is the IntelliJ IDEA Community Edition you can see my version here 20 21.3 is my version and jetblen is the company for developing it so here it is already loading my project foreign you have to create on file you have to create on file and new and project so you might be looking at a screen like this so what you have to do is you just have to go to uh kotlin and then you have to choose a any uh folder okay so I have to choose any folder here I have just made a new folder kotlin and I choose this folder okay and I'll name my project as project one or new project the new project and just click on next finish and the Gradle is finishing up the process and it loaded our new project okay so it has already loaded a loader file with the function of hello world so what I'll do is I'll just remove it and here you have the main.kt file where you can write the code okay so we will be writing the code uh in next of our videos right now we have not installed the jdk in our system so um if we have since if we have if we would run the code itself it will not be running okay and let the Gradle build all the files okay then you can close the intelligent idea thank you for watching this video so in this in the previous video we have seen that we have to write code in kotlin and we have installed IntelliJ IDEA but as I said we require just as just like we require uh SDK for Android Studio we require jdk for um intelligent idea so what is jdk jdk or the Java development kit is across platform software development environment that that offers a collection of tools and libraries necessary for developing Java based software application and applets so I'll explain in basic words uh so I have have given you an analogy for SDK if you remember like just like we need groceries so you can think of jdk or SDK as grocery store and you can think of the IntelliJ IDEA or the IDE as kitchen so we need groceries from the grocery store to prepare food in the kitchen similarly we need some libraries or some tools from the jdk or the SDK to prepare code in here to develop here to run a code in the IDE okay so the jdk is one of the Three core technology package used in Java programming along with jvm and JRE jvm is the Java virtual machine JRE is the Java runtime environment okay so the jvm is the Java platform component that executes program jvm is is the uh please plays role in the execution of program the GRE is the on disk part of java that creates the jvm okay so basically the jvm JRE jvm is a part of JRE and the jdk allows developer to create Java programs that can be executive and run by the jvm and JRE so he will be so it will be more pretty clear by this the jdk contains the JRE and some development tools the JRE contains the jvm and some Library classes and the jvm executes the code the distinction between jdk and JRE is that jdk is a package of tool for developing Java based software whereas JRE is a package of tool for running Java code so the jdk is a tool for developing the Java based software and JRE is for running okay the jdk requires JRE because running Job Program is a part of developing them so now we will be proceeding to install the jdk before installing the jdk go to this PC or my computer click on properties and we are just seeing if your operating system is a 64bit or a 32bit so my operating system is a 64bit operating system if yours yours is a 34 32bit please note that now we will go to Google and we'll type Java sorry jdk for windows okay so we will click the link of java downloads by Oracle and if you are using Linux or Mac OS please download from here for Windows user please go to Windows Tab and for 64 installer download the 64 installer and here it is downloading so uh while that downloads for Mac OS users please download from here and for Linux users install the jdk from here so as it is installed open the jdk click on yes wait for the installer to open click on next click on next and the Java is installing on here device so now as Java is installed successfully we have to close this close the close this also so now we what we have to do is we have to check where Java is in on is in our system or not so what we'll do is we will go to the run and type CMD here okay and we will type the command Java C so it is directly installed in my computer but if you are not seeing this if you are seeing that it is not not a recognizable command then what you what you do is you will go to this PC or my computer okay you will go to Windows C you will go to the program files and find Java in it click on the jdk click on the bin folder copy the path from here Ctrl C click on the above part and Ctrl C okay go to this PC again go to the properties and here go to Advanced system settings in advanced system settings go to environment variables so if you are not seeing it it must be not in your environment variable so what you want to do is in the user variables click new and here create Java and give the variable value this okay then click ok and then click OK and ok and now we will when will you when you will type in the CMD command Java C then it will be showing this okay in this video we are going to write our first program which is hello world program and uh so we have opened intelligent idea for that and we will the first the program structure goes like Function One Main I'll be explaining the program to you in a while parental in is a command for printing a statement and hello world okay so when I run this program this gives me okay so you can run a program from here and here also so I prefer running program from here okay so this gives me an output as hello world okay so what it does is like uh what I will be explaining you the part of the program so what is the fun the fun is a word in Pro kotlin programming language or many programming language and fun stands for function a function is section of program that performs a specific task so I can create another function in the same program so this is a the fund represents a function and main main is the name of this function this particular function has a name Main function have names so they can be distinguished from each other the function is called main because it is the first or the main function that is called when you run the program so when I whenever I run in the program it search for the main function and that is run every time you run the so fun Main is the function Min function okay the function name is always followed by a parenthesis this is the parenthesis open and close parenthesis inside the parenthesis you can put information for the function to use okay so whatever information the function is using you can put it there now there are curly braces outside this one main so these curly braces inside these curly braces we are we write the task we have to perform now this line prints the text hello world okay print Alliance tells the system to print a line of text inside the parenthesis these parentheses okay you put the text to be printed notice that the text to be printed is surrounded by quotes these are the codes this tells the system that everything inside the quotation mark should be this this should be everything inside the quotation marks would be printed exactly as it is so to actually print the text the whole printable instruction has to be inside the main function okay so so far that is clear now uh we will be learning more about the print function what about we don't write Ln here when what what happens when we run this program so when we run this program the we will find that the output is same to same there is no change in the output so what is the difference between print and print Ln when I add one more line here and that's a print hi and when I run this program you can you will find the difference so this this high is printed just right after the hello world even if I have wrote and wrote it in the next line and when I give the command print Ln here then what will happen so I have run this program and we will let it compile now you can see that high is printed on the next line so we can conclude that the Ln in the println stands for next line or we can say when we use parental in the the text inside the quotation mark is printed in the next line so for this you can also use the the black backslash n or the escape sequence so I'll be demonstrating that so in this quote under this quotation mark when I use black says backslash n here and run this program so here we can find that again the high is under the hello world so what this backslash n command tells you or the escape sequence tells the program when I enter into the print hello world and then this backslash n tells me to go to the next line and then print hi okay so that that's about the backslash n command now we will talk about some comments in kotlin so uh I have to write here that this is my first code so how I write here and when I write the this thing here this text here this has no effect on the code so after using this to slash uh this program this this sentence is not a part of code so the symbol slash slash represents a single line comment which tells the compiler to ignore everything from this symbol to the end of the line okay typically signal signal line comment is used to make a quick comment about a single line of code so comments are very important in any code because after some time after one month two month or three month when I will be looking in the code I will not be recognizing anything in it or I can say that when I when me and my friend are working on a project and I have to share my codes code with him so he also should understand the thing which I have to use in code and why I am use use that in code so that's why these are important comment okay so what if I have to write a multiline command such that I have to write three four lines of command so I have you I I will use this this um symbol and this pair of symbols denotes a multiline comment so it tells the compiler that everything that comes under this and this uh symbol should be ignored okay so these are about the comment in the last video we have uh write our first program and printed hello world so now what we are gonna going to do we are going to uh study how to initialize a variable or a value in kotlin so now we are going to create a new file so we are going to file and then go on U then go on kotlin class comma file slash file click on that click on file I am going to name this as variable and then hit enter okay so firstly I am going to write a program one main where a is equals to 20. okay so uh I have mentioned in the last video that I prefer to run program from here not here so what happens when I run the program from here so when I run program from here just let it build yeah so when I run program from here please note that the last program we wrote gets executed the hello world program and when I run program from here so the variable KT program runs and process finished and exited with code 0. so uh now we will discuss how to declare a variable in kotlin so to declare a variable in kotlin either where or well keyword is used so I have wrote where keyword and now I will use Val keyword okay so these are two ways for declaring a variable so uh by while mentioning the kotlin or starting with kotlin I have mentioned that kotlin has a statically typed language and it has a type inference so what does what did I mean by statically typed so before running the program before compiling the program the type of the variable is explicitly known by the compiler so when I compile the program the type of the variable is known by the compiler so the type of this isn't I'll be explaining that in a while and uh kotlin has a type inference so what does that mean uh so when I hover over a so it tells me variable a is int so in kotlin uh the variable automatically tells its types that what type it is variable or value okay so uh now what is the difference between where and well so well has an immutable reference so when I declared a well value so when I go and change the value of B to 13. okay so it gives it underlines it by red and gives an error so what did event hover over it and it says that well cannot be reassigned so I am going going to come to that and hit alt plus enter and when I hit alt plus enter it gives a gave us a number of choices to proceed with and I click enter so what it does is it converts well to where so that I can reassign the value okay so we have uh now discovered what is where and well difference so where where variable has a mutable reference so the variable declared using where keyword can be changed later in the program and the variable declared using Val keyword cannot be changed and it is similar to final variable in Java if some of you might have learned Java okay so uh what if I don't know the initial value of the variable so here I have initialized the variable a with some value but what if I don't know its value so if I have a variable name okay and I don't know what its value is but I do know it holds a string so I'll mention a colon and then type string so here we have created a variable with a type string that can be defined later at any point so now I want that the name should have a value uh p k so I will give that give that the value okay so it now you can see that it is underlining is paid by yellow so let's see what it is telling so now we are going to hit alt plus enter and it's saying that uh create a two value because it is not going to change so it is saying that it we can create it to Value also uh now when I hit alt plus enter on going to the name it created the initialization initialization within itself why did it lose that because the name was assigned just after the variable declaration so it don't have a sense and it makes the course code of more line okay so now we have understood that how to declare a variable there are two ways where and where keyword and how to declare it beforehand and not initialize it okay so how does that this code work so we are going to under a function which is which is has a name main okay so when I go to this where a equals to 20 so it creates a variable and a is the identifier by which this value has been identified okay so uh it is uh like a common nomenclature we follow for naming the identifiers so what we do is like when a variable has a short reference like in a function where the variable is used and at the end of function the variable is destroyed so we we can use their short variable such as a b c i yeah in for Loop we use a variable and it is destroyed after the for Loop is concluded so we can use short variable short identifier there but when we make a large code so we uh we should it is a common practice that we should name the variable that such that we should name the identifier such that when we come after three or four months through the code three or four months when we wrote the code so we should know that why we why we created that variable and what the what that variables variable hold so I'll just introduce some common factors such that I have a application that stores a stores the mobile number so what I can do is I can create a identifier such as mobile number mobile number in from application okay so it is a string that initially holds a number okay so uh what I did here is I started with a small letter and then after every word I created a capital letter okay so it's just a common practice we recommend you to make your identifiers in this way okay otherwise that's fine you can use underscore uh so your variable identifier should start with a small case letter and it should not contain any other special letters other than any other special letters other than underscore so again you only use underscore and your variable identifier cannot start with an underscore okay so I hope that you like this video in the next video we are going to cover the data types and then we will proceed further thank you in the last video we have discussed about the variables in kotlin so now we are going to move further and discuss the data types in kotlin okay so uh as I have already mentioned cotton is a statically typed language that is the variable of uh the variable is already known during the compile time so uh there are a few type of variables in kotlin so I'll just start a function so when I uh so there are four mainly four types there are numbers there are characters there are booleans and there are arrays I'll cover then one by one so firstly I'll go to the number type so number in kotlin are similar to Java and any other programming knowledge a programming language so there are six builtin types representing number so the six are bite short int long float and double so out of them Milling we were we will be using int and double most of the time so what is byte so I can create one ah buy it for you so I'll create well range and I'll mention its type byte I'll mention it as 112. so the byte is a is one byte is eight bits you might already know that so there are totally eight bit and 8 sine bit two two's complement integer so byte data can have values from minus 128 to 127 so when I have a concise data and it has a concise value between 0 to 100 or such that then I use byte so what it does is instead of using an integer or a long end or a double so it it concise the code in very small space it requires a very less space so uh when I assign it a value of 200 so it gives it shows and right underline and when I hover over it it says that the integer literal does not confirm the expect to the expected type byte so what it says basically it is uh it is out of the range out of the bound so when I go and print the range so it will be printing 112 as we expect so foreign okay so we will move on and next is short under the number the short is a data type having a 16 so I'll mention here it is having eight eight bit eight bit one bit is eight one byte is eight bit so the short is having uh the the values can be assigned to a 16 bit 16bit signed sign complement integer two is complement integer so the the data is short data type can have values from minus 3 to 768 to 32767 we don't have to remember that or know that just for knowledge sake I am telling you this so the short has a capacity or we can say it uses 16 bit data okay so next we will move to enter so int is a 32bit signed two's complement integer and mainly we will be using INT in uh most of our codes so in data type can have values from minus to the power 31. 2 2 to the power 30 1 minus 1. okay so any uh value I assigned to a is by default stored as an INT and I hover over a it shows that it is an INT okay so it is also a default value so next is long so what happens when I have a integer of value more than 2 to the power 31 so we can store it in long so basically long has a 64 bit signed a 2's complement integer okay so when I have a long integer we will store it is long so the keyword used for it is I'll just mention uh one value say long end and I'll mention it as long and it can have any value okay so moving on we have double so double is a data type with double Precision of 64bit floating point so whenever I Define any uh decimal as a value suppose 1.23 so it automatically is defined as a double okay as we can see here so if I print decimal it will be printing 1.23 now what is float we have seen about double so the ball has also also 64bit so float data type is a single Precision 32bit floating point okay so uh there was in that was getting by default assigned and there was byte and short that concise the storage so whenever we want to acquire it less storage we can use float so how to define float so we can Define it as well uh decimal float in this way also okay but so we could have by the by the thing we are going to the seeing like we Define it in this way but it is not true so what I what if I have to define a float so what I do is I just Define it as decimal and then put f so what it does is it convert it convert it to float so it is now a float so when I print uh decimal float so what it does is it will be printing 1.23 when only 1.123 and not the f so what it says is it is a float okay and nothing else so uh we have used 1.123 F instead of 1.123 in the above in the program it is because 1.123 is a double literal and you cannot assign double value inside a type of float okay so I can now I can here mention float so it will not giving any error okay so uh what if I am not sure about the uh the what if I am not sure about what number value a variable will assign in the program so I can what I can do is I can use a number data type so I will Define where test and assign it number data type okay so I can put anything into like I can put a string into the okay sorry I can put a string into test foreign integer into text oh sorry number so I can go to integer into test I can put a decimal into test I can put anything into test if I have this I defined it data type as number so now we have completed our numbers data type now we will move on to characters to represent character in kotlin uh care data types are used so uh what I'll do is I'll just create a letter where ah letter and what I do is I Define its value as Square so the cad that I was used so I can assign it any character so please note that the character will be in single quotation marks okay so I have defined a character now the next data type is booleans so what booleans are booleans are simply either true either false they have only two possible values so when I Define a Boolean variable Boolean so I'll name it as flag and it has a data types Boolean so I can either give flag value to Tru E2 okay or a false okay so it has only two values so booleans are used generally used in decision making statement that we will be using in our later discussion okay then further we have arrays so we will be discussing arrays in a separate topic but just to Define it an array is a container that hold value of a of one single type for example you can create an array that can hold 100 values of n type okay then we have string so just for defining purpose I will Define a string like well name I have already defined it but okay so this is my name okay so please note that the string must be in double quotation mark okay thank you for watching this video we have now covered the data types in kotlin in this video we are going to cover the operators in kotlin so I have already registered the type of operators and the operators here so the first type of operators are arithmetic operators so here is the list of arithmetic operators the first one is the addition so whenever I use the plus sign we are going to use it for addition so the addition can be of two integers or it can be of two strings also it is known as string or constant concatenation and we will be knowing about it in a while so another arithmetic operator is the minus sign or the subtraction so it is a subtraction of subtraction operator when I use it it generally subtract one integer from other or one variable from other okay the other is the multiplication operator okay it is selfexplanatory so when I use it it is used to multiply the data type the other is uh division data type so whenever I use the division operator so whenever I use the Slash so it generally means that we have to Define we have to divide one variable from other so here interesting part is the uh the percentage sign or the modulus operator so the modulus operator Returns the remainder so I'll just make a function and explain all this to you so I will create a value a equals to 15 and b equals to to five ok so I'll just print all these the result of all these operators so a plus b and I'll just copy it okay so plus minus multiplication the division and the modulus operator so you can already guess the result and we will be seeing it in a while so the result of this will be 20 the result of this will be 10 the result of this will be 15 into 5 the result of this will be 15 divided by 5 that is 3 what will be the result of this the result of this will be 0. so it Returns the uh the remainder when a is divided by V so I'll just so these are explainable what I'll do is I'll make it 17 here and run the program again so now what will be the uh well the result the printed so it is 2 so when 17 is divided by 5 it is 3 times 5 plus 2 so the remainder is 2 so the result of the modulus operator is 2 okay I hope it is clear so moving on we have a comparison operators so okay before that okay so uh we have comparison operators so the first one is we the uh the less than sign so whenever uh a is less than b so I'll just make so can you guess what will be the result of n comparison operator it will be a Boolean so whenever I'll compare a less than b okay so when I run this program what will be the result is a is less than b no so the result will be false okay so mostly the result of the comparison operator is a Boolean so first is less than operator second is the greater than operator third is the less than or equals to operator okay fourth is the greater than or equal to operator this is the equal to equal to operator so let's check whether a is equals to b or not is equal to operator this is this is is not equal to operator so when I Define both as 5 and 5 foreign when I this do this println a is equals to equals to B so what will be the result what will be the output so the output would be true as a is equals to B okay so these are the comparison operators now we will move on to the uh assignment operator so we have already used assignment operator here okay so the assignment operator used here is the equal to operator okay we have also plus equal to minus equal to into equal to divided by equal to and modulus equal to okay so what are the basic functionality of this so I'll explain that so what if I create a variable X which is equals to a which is equals to A okay so I can do that now I'll print the value of println X okay now what I I will do is I'll assign X as X plus equals to A and now I'll print the value of x what I'll do is now I'll assign X as x minus equals to A and now I'll print the value of x now X ah into equals to A and now print the value of x now X divided by equals to A okay so you can guess the result or we will see them and then I'll explain them to you so the results are 5 10 5 5 25 5 0 okay so first was x equals to eighth of Financial and X so the value of a was five basically so here x is equals to five okay so here the value of x was 5. so what I did is I did X plus equals to A so this basically mean a means that X should be equal to X plus a okay so the value of x was 5 and I assign reassigned the value of x as X plus a so the value of x here would be 10 okay I hope it was clear to you so the basically the meaning of X plus equals to A is x equals to X plus a okay so the value of x was already 5 and I here reassigned the value of x as X plus a so 5 plus 5 that is 10. now the here the value of x is 10 and this implies that X should be equals to x minus a okay so X was 10 and X was 10 and a was five so I I reassigned the value of x is 10 minus 5 so here the value of x should be 5 okay and we can check that also so here the value of x is 5 and I to create reassign the value of x such that X is X should be equal to X into a so X is 5 a is 5 so here the reassign value of x should be 25 okay so it is pretty easy and interesting and I hope that should be clear to you so here the value of reassign value of x should be x divided by a so X was 25 a was 5 so X the new value of x should again be 5. okay and we are also seeing that it is true now it means that the reassign value of x should be the remainder when X is divided by a so now X is 5 a is also 5 the remainder is 0 when X is divided by a so here the reassign value of a is 0. okay so we have now completed the arithmetic comparison and assignment operator now we will move on to the increment and the decrement operator so what I do I'll do is I'll just so here what is the value of x x is 0. okay so now what I'll do is I'll just increase the value of x as X plus plus okay and then I'll print the value of x and then I'll do x minus minus and then again print the value of x okay so uh when I have to comment this all out okay no problem when if I have to comment all this out so what I can do is I can just press Ctrl and the slash button so it it is all commented out okay so the value of x is a and it is 5 so value of x is 5 when I run this program when I run this program so the output is ah output is 6 and 5. so here the value of x was 5 and I did X plus plus the Inc I incremented the value of x and then printed it so it is 6 and then I decremented the value of f x and then printed it so it is 5. okay so I hope that all is clear to you and before the video ends I like you to uh make a program foreign that prints the sum of two number okay I hope that would be easy and you will do it some of the that prints the sum of two numbers okay thank you for watching this video I hope you enjoyed and learned thank you in the previous video we have discussed about the various operators in kotlin so now we will discuss about what happens if one or more than one two or more than two operators occur simultaneously in the same statement what I mean to say is uh like I'll just mention a function having well variable or value X as having 20 value y having 30 and variable Z having a value of 40. so I am asking you that what happens when okay I'll just make it where what happens when I'll assign reassign X plus equals to Z into y what happens then and I'll then print l so what would be the output of this particular function how can we decide that there are two equal two operators simultaneously like we are assigning the value of x as X Plus Z into y so we cannot say that we here use the okay so what we do here how we determine the output so we there is a order of Precedence so we can treat it like the preference order so the post fix has the most preference order so I'll just quickly explain to you what is postpicks and prefix so we have discussed how the increment and the decrement operator right the plus plus and the minus minus operator that increase or decrease the value by 1. so the postwiz and the prefix increment and decrement operator R A plus plus and plus plus a so a plus plus is the post fix and plus plus a is the prefix increment operator okay so the original value of a is returned at first and then a is incremented by one so just read it out and I'll be explaining it in more detail at later part of this video okay so I'll just continue with this so the higher highest preference is of the most fix uh operator and the second highest preference is of prefix operator the multiplicative operator is the into the divide and the modulus okay it has the third most or or preference okay and then comes the additive operator of the plus and the minus and then comes the comparison operator when we do the comparison and all and then comes the equality operator and at last there are the assignment operators okay so this has the least priority okay so here your bodmas logic would be true but if it would be into equals to and Z Plus y it won't be true so I'll just quickly run the program and uh till then we will discuss what would be the value of x so ah as we can see that the multiplicative operator has the higher preference so the okay so the output is 10 20 uh 1220 okay so we can see that the multiplicative operator has the higher preference so firstly the multiplication would happen and the code will look will look like X plus equals to Z into Y what is z into y it is 120 1200 okay so X plus equals to uh 1 1200 so the reassigned value of x should be the previous value of x plus the 1200 and what is the previous value of x the previous value of x is twenty so the reassigned value of x is 1220 as we saw in the output okay so it is I guess it is clear to all of you so we will just work on one more uh search example where variable a is 40 variable B is also 40.0 okay so it is a double type and there is a value C that is equals to plus plus a minus minus minus B okay so now what is b so now we will discuss first and then we will see the output so here a is 40 B is 40.0 a is 40.0 now we can see that the prefix operator has the most uh the highest order okay also we have seen here that in the prefix the value of a is in incremented by 1 and then it Returns the value okay in the post fit post fix the value of a is written in the first and then the a is incremented by one so what I am saying trying to say here is that here the the plus plus a Returns the incremented value okay so the plus plus a is the incremented value so it has the highest order of Precedence so like I can say that c is equals to plus plus a will be 41.0 and minus minus B would be 39.0 so when I run this program I should be able to see the output as 2.0 okay and here it is so we were right so we can conclude the order of Precedence and we can say that it's just a preference order by which the operators are designed this decided okay now we will come to this increment and decrement operator and what is the what is the meaning of prefix or postfix operator so when I Define uh a variable um Alpha and assign its value as 23 okay and what I'll do is I'll just print Ln and a plus plus sorry Alpha plus plus so what result do you expect so mostly you would be expecting 24. but that's not true the output is 23 isn't that shocking so what I mentioned about the post phase operator was that the original value of a is written at first so when I run this program the alpha plus plus Returns the original value of alpha but at the end of this line or at the starting of the next line the value of alpha is incremented by one so when I print the value of alpha here what will happen is so here it at line 36 the the output would be 30 24 or 23 and here at line 37 the output will be 24. okay that's just because the prefix and the post fix so what would happen if instead of alpha plus plus I'll print the value of plus plus Alpha okay so uh the prefix operator increases the value instantly by 1 and then Returns the value so the output of this would be 24 only okay because it is a prefix operator okay it is 25 because after that the alpha of well the value of alpha is changed to 24 and then we have increased it one more time so it is 25 okay so you can note here that it is implemented and then returned and in the post fix it is written and then incremented okay now we will move to the type conversion so what do you mean by type conversion basically if I know nothing about cotton I just know English so what what one should mean by type conversion one should one would mean that we have to convert the type okay so uh what I what will happen if I have to convert like I have a is as 40 and I have to convert it into an integer so how will I do so so I will con uh create a variable and name it as a int okay and give it a value of a which is the original operator and add two int function to it okay so what it did what it what it did is it created the value of a into two into so it just transferred the value of a to int so now the a into variable is of integer type okay so when I print the value of end okay just I'll just hide this code and when I print the value of a int it should be 40 instead of 40.0 okay so uh the it it is used many times so when I suppose I have a someone's phone number uh stored uh like an integer phone number as integer okay so now what I have to do is I have to store this integer store this integer as a string because um but just I have to do so so what I'll do is I'll just uh create a another variable which is phone string and what I'll do is I'll just give it a value of phone number dot to string okay and I'll when I hover over it and it has the data type of string so you might all have uh somewhat somewhere heard about the ski values a s c i s Sky values if you haven't heard about it just Google it and then resume the video okay so what what if I have a character any character I have uh any character and I want its Sky Value what will I do so I have a character suppose a and I want its Sky Value so what I'll do is I'll just print Ln and a DOT oh sorry character dot to enter so it will when I run this program it will just show the Sky value of a okay so the Sky value of a is 97 when I want the Sky value of exclamation mark I'll run the program and the Sky value of x termination Mark is 33. okay so that's all for this video guys thank you for watching this video and stay tuned for me in the previous two videos we have covered uh operators and the data type conversion so in this video uh we will be covering the string and the string templates so what is basically a string so string is a sequence of characters okay uh so I'll go ahead and make a function in which I'll mention a variable a and give it a value this is a coder exclamation mark okay so uh this is a coder and with three spaces and an exclamation mark comprises uh the these all character comprises a string okay so remember string is always quoted in double quotes okay and the space and the punctuation are also characters which are part of the string so uh uh the first character in the string has an index 0. okay so in this string the T has a character Zero as a index 0 okay so as we move forward with the string so this is a coder uh the index increases by one okay and each and every space and each and every punctuation mark has its own index okay so when I mention the index and the string just one above the other and mention it it in a table so that is called an index table okay so I have just mentioned the part of index table here okay so uh it's it says that which character has what index okay so uh in this the C character has a index of 10. okay so this is the basic about string we know we already know how to initialize a string okay so there is also a second method yeah second we can say that it is a second uh method to initialize a string we can do that string variable B string we we will mention the data type of that string beforehand okay we can do that also so we can Define the string in two ways okay so we will be covering uh most of the string functions in the later part of video but I'll be mentioning one string function in this video uh that is the length function so uh remember this a string having index from 0 to 15 has a length of 16 okay it has 16 characters in it including zero okay so what if I have to uh like I have a value I that stores the uh the store the length of string a so uh I'll just mention a DOT length okay and this uh this length function measures the length of any string so I'll go ahead go ahead and print the value of uh I so when I run this program I expect the result to expect the output to be 16. okay so yeah so the output is 16 so the length of string a is 16 okay so what if I have to mention I have to get the output as the length of the string is 16 okay so I have to print this statement and uh that value here is I so what I can do is I can go ahead and write a print statement which contains a string that the string is the value of string is okay the value of the the length of string is so I'll just go ahead and print this okay the length of string and then what I can do is I can in the next line I will mention a println statement and that contains I okay so when I go ahead and run this program what I will find in the output is the output will be the length of string is 16 but it but don't you think it's a bit lengthier and there must be a shorter way so you are thinking right so what I'll do here is I can use string function string template here so string template is nothing but a dollar sign okay so what is a string template so uh while mentioning a string what I can do is I can so I will just mention it print Ln yeah so after the uh mention after the uh the string I have to put inside the string the value of I so what I can do is I can just put the dollar sign and the I okay when I hover over it it says very very value I int okay so it has the value of I so when I go through this line it will print the string the length of the string is and inside the string it has the value I so before so it does not print the length of the string is dollar I dollar sign I it does not print that what it print is we will see when I run this program okay so uh yeah it prints the the length of string is uh and instead of dollar I it puts just the value of I okay so what if I have to uh print I have I have not defined up any value I okay and I have to print the length so I have not defined I'll just make this go and yeah so now what I will do I have a string and I have two printed value and inside the string I have a I can I can do one thing I can just go and instead of print Ln I'll do here print and in the next line what I can do is I can go print Ln and here put I can put a dot length okay so when I run this program it will be giving an output the length of string is a DOT length and which is 16. okay so it is correct but now here also it is redundant and more of course like more lines are used it is redundant because we are using the print function twice so in kotlin we do not do that so what I will do is I can use the string template here also but but when I use the string template without any uh something so what happens is I'll mention just a DOT length so it automatically insert it into curly braces okay so I was trying to establish my point here the point was that whenever there is an expression in a string template we put it inside a curly brace okay so when I run this program it automatically puts the length of string a inside this template and we have the output as the length of string is 16. okay so that's all for this video in the next video we will be covering uh the various type of string functions that are available in kotlin thank you very much uh in the previous video we have covered about string and string function in this video we are going to learn about more string functions such as the length function we discussed about in the previous video okay so uh the string functions are the function which will be implemented on string as the name suggests so the first function is the length function I have discussed it in the last video but still I will discuss it in this video also so I'll go ahead and create a function Main in which I'll Define a string of value a is equals to hello um okay I'll not leave space and value B is equals to this is a coder and I'll Define another um value C and another string with a value and my age is and I'll Define another value D and it is an integer which is with the value of 90. okay so I have three strings and a uh integer so firstly I am going to discuss the length function okay so ah what about what if I have to get the length of the the value of the string b or the string a okay so I'll just go ahead and write the print statement okay so the value the length of a is and I have discussed about the string template in the previous video so I am going to use that here okay and the length of a is a DOT length okay so the length function is used here as a DOT length so whatever I have to see the length of B whatever I have to see the length of C so just I am going to uh copy this and paste and instead of B I'll do c so uh when I run this program I should find the length of a b and c as the output okay so this is the use of the length function so as in the output we can see the length of a is 5 the length of a is 15 okay so I here did not change the values okay so length of a is 5 the length of B is 15 and the length of C is 13. we can verify from here also but uh yeah I guess you are you have now a clarity about the length function the second function we are going to talk about is the get index function so get index function Returns the character at the specific index within the bracket now uh I have already told about you the index so in this hello string I will just mention h e l l o so the H here has a index 0 the E has index 1 the L has an index 2 and another L as a as an index 3 and the O has an index 4 okay so what the get index function does it Returns the character at a specific at a specific index specified within the bracket so I will just mention a print function and I have to get what is the character at index 4 of B string so the character the character at index 4 of B is what I'll do is I'll just go B uh okay so I'll first use string template and the ah so the function is get in bracket index so I'll use the string template and I'll just mention the string that is B and the function that is get index okay and then the index so I have to find the index at 4 okay so when I run this program what is the expected output so at 4 it has a space okay so it gives us space uh so I'll just go ahead and change it to 5. and when I run this program we can see that the output is the character at index 4 of B is index 5 of B is uh I so yeah it is pretty clear from here that the index at index 4 of string B is I so here it is underlined by a yellow line so what I will do is I will go here and hit alt plus enter and it suggests that replace get call with indexing operator so what is an indexing operator so I'll just show you that okay so instead of doing this what I can do is I can just mention B and that and then in the bracket I'll square bracket I'll mention five okay so when I run this program I will get the same output so instead of using get function or a bigger code I'll just do is what is what b square bracket and the index okay it gives us the same results so I guess the get index function is also pretty clear now what about the subsequence so as the name suggests it provides a sequence which is a part of the mainstream okay so the the function goes like sub sequence start index and N index so between start index and end index it prints all the uh the string okay so it Returns the substring between the start index and the end index but excluding the index in N index it is a main point one of the main point okay so it excludes the N index so what if I uh I go and say put the print the substring from one to three of a so I have to mention one two four okay because it excludes the N index so I'll just go ahead and print for the uh better understanding so print Ln the substring is I'll go with the string template and for a I have to mention and the function is subsequence and the start index is one and the end index is 4. okay so what happens when I run this program what will be the output so when I run this program it gives ell but at the fourth index there is o so why is all is why o is not printed because it excludes the excludes the character at the index last index mentioned here okay so keeping that in mind uh just predict the result uh after pausing the video of the substring ah of B uh 2 to 7. okay so what will be the substring of B Dot subsequence uh 2 comma seven just pause the video and uh think about it and write it on a paper or something okay and then now you can play the video and check so it is is space is now we will go ahead and check so uh this so the second is here second uh index is here okay third index is here and fourth fifth sixth seventh so seventh is a space so uh it is not clearly visible here but the space is not printed here okay it stopped at the uh s okay I'll just go ahead and make that nine so it would be more clear okay so not nine I'll make that 11. so uh we can see that at the 11th index the letter the character o is there but in the output we cannot see o because the uh last index is not printed there so I hope the subsequence function is also clear to you okay so we have now till now covered the three functions which are mostly usable now uh we will be we will be moving to some less usable function okay so there is a comparative function so the compared to function compares the object with the specified object of order okay so it just compare two strings it returns 0 if the object is equal it returns a negative number if it is less than the other okay so like what will be the um I have to compare the okay what will be what will it be comparing it will be comparing the length of the two strings so uh what I'll do is I'll just print Ln and print a DOT compared to B okay so I am comparing here A to B so uh like it is the specified other object is B here the specified other object is B and the object our main object is uh a okay so if it is less than the other it gives a negative number and if it is greater than the other it gives a positive number so you can guess the output here and while I run the program so when a is compared to B it provides a negative number that means that a is lesser than a smaller than b okay it is pretty clear from here that b is a larger string so I will just go ahead and compare also compare B from C okay so you can guess the output here has B is a larger string so it gives a positive okay and what I'll do is I'll just create for uh the sake of just com comparing the function uh a variable a value F and just change some characters in it and okay and now I'll do is what I'll do is I'll just compare C compared to f and now I'll run the program and the expected output is zero because the two strings are of equal length okay but it gives a a positive number why so because it it just not compares the length Okay it compares the object specified within the string so the object the object f is uh greater than the object C okay so uh if I have the same string here then it will be 0 but if I have the purpose of me stating that was just that if I have the same string then only it will be 0 if I don't have the same string then the output could be Z positive or negative we cannot Define that as per as of now okay so thank you for watching this video in the next video we will be covering more string temp string functions okay in the previous video we were discussing about string functions and in this video we are going to continue with the discussion okay so uh in the previous video we have discussed about the uh the the length function the get index function the subsequence function and the compare to function okay so uh in I think that should be clear to you okay so now next is the equals function so the equal function indicates whether some object is equal to the other object or not okay so uh it is just like the comparison operator equals to equals to okay so what I'll do is I'll just uh okay so you can guess the return type of the the function is Boolean okay because it returns that whether it is equal to or not so when I uh say a equals to equals okay so it is equals and I say B ah B and when I when I run this so you can guess the output the output is false because they are not equal okay so as you can see here the output is false because they are not equal and when I do c and d C and I compare it with d and again when I run the program uh now the output must be 2 because they are equal okay no it is false why it is false uh okay so I have done some mistake I have to compare uh C with f okay sorry so yeah when I compared C with the D the data type is only not same one is string and other isn't so there is no chance of them being equal so it is true now what happens when I uh change one index in the string so you can see the output is false so it is only true when both string are equal in each and every manner possible now it is having some suggestion now we will go to it and plus press alt plus enter it is suggesting that we should replace it with equals to equals to sign as I already mentioned that it is nothing but the comparison operator equal to equal to okay moving on to Hash code the hash code returns a hash code value for the object okay so you might be wondering what what the hash code is uh I'll suggest just go to the Google type hash code of a string and you will get to know okay so uh I want the hash code of uh let's say string C so I'll just type c dot hash code okay and when I run this program I'll get the hash code for C string so as you can see in the output screen the hash code for C string is this okay when is let's say I want hash code for all the strings possible okay so I'll just mention all the strings A B C and F we have four strings a B C and F okay so when I run this program it gives the hash code for all these string now if you note that these two values are negative and these two values are positive so why is that the hash code could be positive negative or any value okay it's just a representation okay so now next is the plus operator plus function so what the plus function does is okay when I use the plus function let's say uh I have print Ln a Plus B now uh the a plus b is another string okay so I can make another function use on this string also so I can use the plus function again also okay and it's the plus function is not restricted to string only so I can use the plus function and use any data type you can I can use your D also okay so when I uh run this program so you can see the addition of all this a b c and d so it gives like hello this is a coder and my age is 19. okay so what there is a mistake that there is no space given because I have not given any spaces here here or here if I give give spaces here then it would be a perfect code so that was all about the plus function now instead of using dot plus I can also do that I just I can just do a plus b Plus C okay and when I run this program I can find that it gives hello this is a coder and my H now this is string concatenation okay it it is nothing but it just contatinate the string it means that it puts three two or three string or many string together and make it a new string okay so plus function returns a string obtained by concatenating the string with the string representation of the given other object okay so that was all about the plus function next is the two string function so we have already uh talked about the two string or two end or two all the data type conversion function so it's it is nothing but suppose I have a uh I have a integer uh that has a value that has a phone number okay so oh also okay a is already defined I'll just give it name as phone okay so I want to store this in a string so what I can do is I can just write phone and then Dot tostring two string so what it does is it converts the phone this into a string so when I print this when I go ahead and print this then you can expect the result it is a string so you you can see nothing in the result the result would be same the output is just the number itself but it is a string okay so two string function um returns a string representation of any object okay then there is last index function the last index function Returns the index of the last character in the character sequence n minus 1 if it is empty so I have here like like in these two string I'll try C and so what I'll do is uh I'll just go to the end and yeah so I'll print the last index of C first okay so I'll just type c Dot last index okay and I'll also print the last index of f and now I'll run this program meanwhile I'll go to the CNF strings now as we can see in the output the first one is 13 and the second one is 12. so the last index which is this so this is 0 then 1 2 3 4 5 6 7 8 9 10 11 12 and 13. so the index of the last character is 13 in the string and the index of last character is 12 in this string F so it just Returns the index of the last character okay so now you must have no doubt in the last index function okay the next is index of function so the index of function Returns the index within its string of first occurrence occurrence of a specified character starting from the specified start index okay so index of function has three parameters basically the first is the string so that is a b or c whichever string I am providing it second is the start index okay so from which index I should be looking for the character so suppose I'll just explain it and third is the ignore case uh just ignore that so it is just telling the uh it should be false Okay so okay it is a Boolean you know cases Boolean so uh the basically what is in index of so I I'll say that index of I and string in string B okay and starting start index is zero so it will give the third eye okay and when I'll give the start index of three value three so it will give me this I okay so I'll just go ahead and use the function so I'll print uh in string B I can do what was that index of okay and now I'll mention the character which which are of which index I am finding so I'll mention the character as I okay and then I'll mention the uh start index okay so uh note that it is giving a red I in Red so why is that because I I haven't mentioned the character in single quote okay so I should uh only mention the character or character in single code and string in double quotes Okay so then I'll mention the uh string start index so I'll mention the start index at 0 at first and the ignore case is false okay so now I now I'll go ahead and run this program so the output of this is 2. so now I'll I'll go to the B string and uh so at at 0 1 2 at index 2 there is an i okay so now what if I start with in index 3 and see what is the output okay I'll start with index 3. and run this program so I can see in the output that the result is the output is 5 so I started with this this index and this is the third index then fourth index is empty and then fifth index is has an I so the answer is I uh the the I is at the fifth index starting from the third index okay so it just found the first I from the start index and ignore the rest of it so I'll just find D from any index okay so finding D from an index doesn't change anything okay because D is only mentioned one time it it matters when D is when the start index is after 11 okay after 12 because D is at the 12th index so the index of just gives the index of the mentioned character from any index okay so I hope all the functions should be clear to you by now okay so thank you for watching this video in the next video we will be covering functions thank you till now we have discussed about string string function operator now we will discuss about functions in kotlin so we have already used a function named a main function okay in each of each and every code okay this is the main function that we have used so what is a function function is a collection of code that is written some result okay so despite of the main function we are talking about other functions okay so uh we will firstly discuss about the syntax of the function of any function so the syntax of any function is given by Fun that is the keyword for declaring any function then comes the function name the function name should be same as the identifiers defined by me in at the starting of variables okay so the same thing should be used and uh the function name should be selfexplanatory so after two or three months when you look at the code you should know that uh Y is the function named like this okay then comes argument one type 1 comma argument 2 colon type 2 comma and so on okay so what is an argument arguments are the data that a function needs to use so Suppose there is a function uh which takes two input two integer and provides it sums so there is a function which provides the sum of two integers so the function name should be sum of two number okay with s small o capital s u m small o capital F small uh n n capital and uh everything small okay so that is the best way of naming it and then comes the argument so it provides the sum of two integer so the argument one should be a or any name of the argument of the variable and the type is integer so it is a colon integer and comma comma B colon integer so that's the argument and then comes the return type so we have to mention the written type the written type is nothing but expected data type of the result okay so when I write the code right when I write a function to uh give the result as some of the two numbers so the return type is also int so here I am here I will mention the return type that is hint okay then comes the lines of code and then it there is written result okay so here we use the written keyword and uh give the result what is the result okay so I'll go ahead and so every function is every new function is made is coded outside the main function okay so I'll go ahead and make a function I'll name it as new function okay now I want this function to print and statement so what are the argument given to him given to the function so there is no argument given when I have to print the the running lines so I'll just keep it empty so when there is no return type so the the function is just printing it is not returning anything so then the ah the written type is mentioned as unit okay and then I'll open the function and I'll just write print Ln I am a new function okay so here we have defined a new function which prints I am a new function so the function is defined as per the syntax now what if we have to call the function so as you might know the main function is only executed so we have to call the function to the main function so what I'll do is I'll just name the function here which is new function and just keep it empty if there were any arguments so I'll mention the arguments here okay so I'll go ahead and just run the function the code our code so as you can see in the output screen we have successfully printed a function which says I am a new function okay so we have now a function we are now capable of making a function which prints something okay so as no arguments are used so no data is used by the function okay so it is kept blank okay so no return type is there but therefore the unit is used so when I hover over unit so it says that the type with only one value the unit object okay this corresponds to void type in Java okay so the written statement is never used because we are not returning anything in this function you might notice that we have not used any written the written um uh keyword is not used okay so what is a unit unit is used when a fund does not return any meaningful result so it is it it we might call it as the default data type of in any function okay so uh till now we have discussed what is a function what is the syntax of function okay so this is a block body of the syntax okay there is also expression body which we will discuss later so we have discussed the syntax we have made a function that prints that I am a new function and that's all for the video we will continue with functions in later videos thank you in the last video we have discussed about the functions and what is a function the block body syntax of a function and we have also created a new function that prints a string okay and we have also called the that function okay so in this video we are going to create a function that uh that prints the double of that that Returns the double of an integer okay so function that doubles an integer okay so uh we are going to use the uh block body as of now so what was in the blog body so we have first uh use we have to use the fun keyword and then we have to name the function such that when we refer it after a long time it should be clear to me that why I named the function and what the function does so as the function doubles an integer so I can name it as double and integer okay and then I have to pass the argument in the open and close parenthesis so uh like I have to pass pass an argument and then it's type so I'll name the argument as a and it type its type is int okay and next I have to mention the return type so the return type of an integer would the written type of and double of an integer would be also int so I am going to mention int now we have to open the function and write the code okay so we have a now what we have to do we have to just multiply a by 2 so I have I can write a is equals to A into 2 okay and then I could written if okay so now it is showing a red underline uh inside a and it is showing that Val cannot be reassigned so what the problem is like when I Define a function the variable or the argument that I Define is a value parameter not a variable parameter okay so I cannot multiply and reassign it okay so what I can do is I can just return a into 2 here okay so uh when it enters a function the balance integer it is passed in argument and integer and the return type is an integer and the function returns a into two so I am just going to go into the main function and call the double n integer function so I am going to write double and integer and pass the integer in it so let's say I have passed equals to 4. now when I run this program I am not going I am not I will not be able to print anything because uh I have I have not used print statement anywhere okay so uh let me just like so yeah when I will run this program uh it is not going to print anything because I have never used the print statement anywhere so what I'm going to do is I am going to just add print Ln here and what it will do is it will print the output of that function okay so uh when I run this program uh we can see that the output is 8. so we have made a function that doubles an integer now we will move ahead and see what expression body is expression bodies another Syntax for writing a function so when I write a function it just written double of an integer it is quite a long syntax okay so instead of these this block body expression body is used for this type of syntaxes so what is expression body is so in expression body also we will firstly use the keyword fun and then we will give the function name and then we will pass the argument and then we will pass the return type so uh starting is a similar to The Block body and after passing the return type instead of opening curly braces we will just write equals to and then the expression so I'll just write the function uh double integer in expression body so I'll pass argument X as an integer and the return type would be also an integer and now instead of opening and closing of curly brushes I'll just write equals to and then I'll just write X into okay and now I'll go ahead in the main function and write print Ln and double integer and then I'll give value 46. now when I run this program it gives output as 8 and 92 so the program works just fine so what expression body did is it it reduced the length of the code and it made the code much easier to read okay so now calling and invoking of a function uh what is calling and invoking of function so uh when I called the function here double an integer okay it is called the calling of a function so calling the new function inside the main function is the calling of a function and how how can I do that we have to just write the function name and pass the argument in the parenthesis okay so I guess now we have completed it with the function in the previous videos we have learned about functions in Cotton so before proceeding further I would like you to solve the problem this this problem which says that write a function which Compares two numbers and return the maximum of two so uh one way of doing this is using IF else statement and the control statements so we don't know that for now so what we will do is we will use a function Max in kotlin dot math dot Max Library so how to access this library and this function so for accessing this library and this function what we will do is we will import the library so I'll use the keyword import and then write the name of the Library kotlin dot math dot Max now the library is successfully imported so what this Max function does is it takes input of two integers and Returns the maximum of the two okay so I'll just go ahead and create a main function and then outside the main function I'll just create a function and name it as maximum now what would be the input of this maximum function the input must be two integers so I'll name the integer one as a and the integer 2 as B so I have provided two input to this maximum function now uh what would be the return type of this function so the max function provides the maximum integer out of two integer so the return type would also be an integer now I'll just use the math function Max function which is Max of a comma B okay so inside the main function I will go ahead and print the maximum and maximum of 13 and 25. okay so when I run this program what I will find is it prints the maximum of 13 and 25 which is 25. okay so uh kotlin has many such libraries which would be used further and it would make our task very easy instead of using long codes I just used a library and its function and it become it became very easy okay so the code is compiling and it is starting okay so I have run my previous code in just a second I'll run test.kt and yeah it prints 25 which is the maximum of 13 and 25. okay moving further just I will comment it out okay moving further in this video we are going to particularly particularly focus on arrays so arrays in kotlin are mutable but have fixed sizes so uh suppose I declared an array of let's say four elements so it it is going to be of four elements at every time we cannot add or delete an element from it although we can change the element change any element from an array so data structure that contains a group of elements mostly of same data type are arrays okay so it is not a boundation that the the data the elements must have same data type but yeah mostly the elements have the same data type commonly used to organize data so why are arrays used basically when I have 20 integers suppose let's say so I have to store 20 integers in one variable so what I'll do is I'll create an array so in that way the data is more organized now the string is an is a collection of characters or we can say that it is an array of characters okay so it is different characters and they are combined together so it can be also called as a array of characters so what is the syntax of uh creating an array so just like we create any variable we use the where or well keyword and then we will give the name of array and naming array is same as naming a function or a variable okay then we will write the funk keyword array of and we will specify the type if any and then we will write the elements okay so now let's just go ahead and create an array so I'll write about where array 1 and I'll write the keyword array of now uh suppose I have to create an array of characters so I'll provide the type care and now I'll provide the elements so I'll provide a B C d e okay so we have now successfully created an array which contains five elements and all the five are the letters a b c d and e okay so uh what if I have to create an array which contains a integer a character uh and a string and uh and a Boolean so I'll just go ahead and create an array of all type of all type so I have named it and I'll just use the Crea function array of and I'll just so it contains an integer and double and Boolean character and a string so away the variable array of all type is an array which contains an integer and an a float Point number a Boolean character and a string okay so uh now we have now we can successfully create any array moving forward in kotlin once you declare any array you can only change the content of the array and not the size as I mentioned earlier so the size of this is fixed until and unless I have changed the size from here okay the size is fixed I can change the elements of an array however but I cannot change the size of the array okay so now let's just copy this code and just understand that okay so the code says that there is a variable array 1 that is an array of a b c d and e okay and there is an array 2 which is a value and that is a array of E F G H and I okay so when I do array 1 is equals to array 2. so array 1 is a variable and that can be uh reassigned so that that that is reassigned a value of error 2 so that can be done but this this line shows an error why this line shows another because array 2 is in value so we cannot reassign a value okay so that's why it shows an error moving forward uh so yeah there is a value array too and which contains the elements E F G H and I so however we cannot reassign the array to we can change the elements of array 2. this is a major point to note okay so we have already understood array with different data types okay so arrays are mutable but have fixed sizes as I already said and so uh what if I have to print any element of an array so suppose I have to print the third element of array one so what I mean by Third element is the the first element the a is the zeroth element okay as as we've done the indexing in the string similarly the indexing is done in the arrays so when I have to print the third element of array 1 what I'll do is I'll just write array 1 and open a square bracket and write 3 here and when I run this code we can see that the third element of array 1 is printed okay and there is a problem okay so uh when I run this program we can see that the third element of array one so what what happened here is I reassigned the array one as array 2. so the third element of array two is printed here e is the zeroth f is the first G is the second and H is the third so I'll just delete this code and again run this code so I'll find the third element of array 1 that is D okay so now what if I have to reassign the the third element of array 2. so we will try it on array 2 because array 2 is a value so I'll just type array to so I'll just reassign the zeroth element of array 2 as a string 3 assigned now it shows an error so what error this is what that there is a type mismatch so it was an uh it was in character and now we are reassigning it as a string so that is not possible in kotlin so what I'll do is I'll just reassign it with the character and now I'll print the first element of array the zeroth element of array 2. so now when I run this program I can see that R is presented so even in a value even in a value of an array the the the element of an array can be reassigned even if it is a value not a variable okay so that's all for this video stay tuned for in the previous video we have discussed about arrays in kotlin and in this particular video we are going to learn about arrays of strain okay or an array of strings so uh I'll just go ahead and create a main function and inside the main function I'll just create a variable string named string array and so if you remember for creating an array we have to use array of function and if we have to specify the data types we will use the less than and greater than sign and then we will use the open and close parenthesis and inside the open and close parenthesis we will use the the things that we have to add to this okay so I'll just create a string the array of string containing some strings so I'll just write High this and again a string is and again a string programming knowledge okay so uh it is a string it is an array of string containing four strings okay so specifically it is called an array of strings so what if I have to get a particular uh at a particular index so what if I have to get the string at a particular index so I can use a function that is the name of string that is string array and then Dot get and then open and close parenthesis and then zero okay so what this function get does it does that it just gets the in particular string at the particular index mentioned so when it shows a green line so when I go to it and hit alt plus enter it shows that replace get call with indexing operator and when I hit enter it chooses the open and close square box square bracket so the get function is the same as the square bracket that we used in the previous video okay so now if we if I just skip that and okay and uh so what if I have to change the change the string at a particular index so as I mentioned in the previous video what I have to do is write the name of the string that is the write the name of the array and then use the square bracket and if I have to change the string at the zero index so I will just right here hold up okay so uh it changes the string at the zeroth index okay so when I print the string array what it does is so what happens when I print the whole array instead of printing a particular particular index of the array so it prints the this thing it prints L Java Lang string semicolon and this is an address so when I String when I print a particular array it it shows that it it is an array of containing strings and it shows its address that at this address the string is stored but it does not print that array so I'll just go ahead and print the zeroth element or the a string at element at index 0. so we can see that the string at particular index has changed now what if I have to get the size of an particular array so for getting the size of a particular array is we use the function dot size so I will just print write the print statement and then I'll write the string name sorry the array name and I'll just write dot size now when I run this program this the seventh line prints the size of an array okay and we can see that the size of an array is size of this array is 4. so that's correct now what if I have to make a whole string from array of string like I have to make this a particular string so I'll just name a value that should be string and make that equal to so I'll just write the array name and I'll just type the function that is content to string now the string variable is a string that contains the the content of the string array convert it to a string okay so content 2 string is a function that converts a an array to n string now let's go ahead and print this string okay so when I run this function it prints hola this is programming knowledge but it shows that as an array why because we have converted it to string and string should be the value string should be n string so it is in string but when I print this and also we can note that I have left spaces here so it also left leaves spaces here so whatever I not leave spaces here so it automatically detects that that it should be a string with four different words or four different string so it automatically leaves the spaces out of there so when I want to print a particular string particular array of string so I'll just instead of doing all this I'll just um write the print statement and in the print statement I'll write the string name and then content to string so when I write only the string array it does not print the array it prints that this is an array and it contains it contains string and the location of the array is this the location at which the array is stored is this so for printing the whole string array we use this okay so that's all for this video stay tuned in this video we are going to cover the if else statements in kotlin so if you don't have any particular idea about if else statement what NFL statement does is it checks and it it checks in condition that if this condition is true then it goes to the particular body and then perform some operation and if that condition is not true it just skips the whole body and goes to the else statement and then it performs the operation mentioned in the else statement so it basically is like if this is true then this then do this and if else do this okay so uh we will just go through the syntax of the cell statement so it is the block body of an FL statement so when I write if some condition and then I'll so I'll write if is a keyword and then I'll open a parenthesis and write condition in there and I'll close this parenthesis and I'll open curly braces and I'll write function or we can say the operation we have to perform there and we will write we will close the curly place and we will write the the keyword else and then we will open the braces and then I'll mention the operation or the function or the code that I have to perform and then I close the braces okay so this is the block body now I'll go ahead and create a main function and outside the main function I'll create a function named block body because there are three types in which I can determine the if else statements so I'll just go one by one so for Block body so we will take an example of finding a maximum from A and B okay so we will have to give the input a integer and B integer and the output the written type of this would also be an end because it Returns the maximum so moving forward so I'll write the block body of fl's statement here so if a is greater than b okay then what happens is so I'll just create a variable also here that is called max value okay so when a is greater than b what happens is when a is greater than b the maximum value is a okay and else when so else B would be greater than a so the maximum value would be B and we would return the maximum value which is Max value okay so when I go in the main function and call the a block body function and find try to find the maximum of 23 and 45 and run this function so it should be printing the so it should not print anything because I haven't mentioned the print function so when I mention the print function here also and run the function again so it should mention here 45 okay and it is correct so this might have give you this might have given you the basic understanding of the if else working okay so if a is greater than b then the max value should be equals to A and else if a is not greater than b else the max value should be equals to V okay so now I'll go ahead and give you the idea of expression body so what is expression body so also in this I will be printing the maximum of the two so I'll just mention the A and B integer and the return type as in now in the expression body I mentioned the variable variable a max value and give it a value of f so here only I start from F function so if a is greater than b then the max value is a and okay a and else the max value is B now we can see that okay I have to also return the max value so now now we can see that we have assigned we have defined a variable named max value that is equals to if a is greater than B that is equals to A and else that is equals to B so this is called the expression body so now if I replace the block body with the X expression body and run this again so it should be working fine and it should print 45 so yeah it is working fine so if if you see this type of code written anywhere it is also an if else statement now there is another type of file statement that is a also short shorter than this and it is also called short so now I'll just mention a function short it will also be comparing two integers so I'll just initialize the function now it should be equals to no before that okay I should open it and I'll just return already written if a is greater than b K is greater than b foreign and else written B so now we can see that we have directly mentioned the written function and written a if a is greater than b and written B if a is not written only so what it it means that okay so instead of expression body when I mentioned short and I run this function I run this code I can see that the answer is again 45 so in this video we have learned about the block body the expression body and the short of if else expression and we have um a pretty thorough idea about the if else statement okay thank you then in the previous video we have uh we have seen that what happens if we use an apple statement so if we have some condition we use an apple statement so what about if I have multiple conditions like if condition 1 is 2 then I have to execute particular code and then if condition 2 is true then I have to execute a particular code and then if condition 3 is true and then I have to execute a particular block of code so this can be this could be done via an else if keyword okay so what I'll do is I'll just create a main function and inside the main function I'll create a variable that is equals to 5 and what I'll do is I will create some conditions such as if I is equals to 5 then I have to print that I is 5. okay and then again else if I'll use the keyword else if and then pass the condition if I is equals to 4 else if I is equals to 4 I have to print I is 4. okay so I can do that and there could be as many number of fl's block as required so I can use like here as many if else block I required else if block I required so I'll just make that I is 3 okay then again I'll use the keyword else if I is equals to 2 then I have to print that I is 2 then again else if I is equals to 1 then I have to print I is 1 okay so at the end of the uh if else a blog or else if block uh we should most end with end it with a uh else statement so like what I am trying to say is else block is optional as said for equal statement so we can skip the else Block in if else statement as well as when we use the if else ladder or the lcip blocks okay so I can here include the else statement or I can choose to skip that print I can choose the else statement like print I is not in not in one to five okay so uh I'll just change the value of i26 and then run this program so the so we can see here that the output is I is not in one to five as mentioned in the else statement so when I change the value to 5 it will print that I is 5. so the conditions are evaluated sequentially from top to bottom and if a condition is evaluated as false the condition the execution continues with the evaluation of subsequent condition okay so from here the the we enter in this code and we enter in this equals ladder so the first condition is evaluated and if the first condition is true then we get out of the if else ladder and if the first condition is false we evaluate with the subsequent and this or the second condition okay and if the second condition if the uh and if any condition is true the corresponding block against the statement is executed and we are out of the fs ladder and if none of the conditions evaluate to two runtime minutes runtime executes else block and that too if else block is present so as I change the value of i26 the else prox else block get gets executed because um every condition is false in that particular case so that was if else ladder cotton if else later so we can see here that the ID is underlining this with a green so uh what it's what it is saying when I hover over it it's saying that Cascade if should be replaced with when so don't you think that this code is a little bit of redundant like we are using LCB elsewhere else if a lot of times and suppose that I have 20 conditions so then I have to repeat 20 if else relative blocks so when I go to if a statement and it shows that we should use when so now we will move on and study the keyword when so instead of uh doing this I'll just comment it out what I can do is I can use the keyword when and then and then what to Checkers so like I'll just open parenthesis and write the variable that I have to check okay so when I okay and then I'll open this code and then I'll provide the values of I and if I is 1 okay so then I'll uh just use hyphen and integrate greater than sign and then I'll open a code block and then I'll write print value I is 1. okay so what this when block does is when I went enter this when when statement uh it assigns a condition that when I is 1 okay so when I write uh below that two and then I open a code block okay so whatever what it will do is it will pass the pass it will execute this statement when I is 2. okay so like this is just one liner code so I have to write just print code so I will not use the curly braces I'll just type that when I is 3 printed on I is 3 okay when I is 4 print Ln IES 4 and when I is 5 print Ln is 5 okay so after all of this what I can do is I can just use an else statement so what if any of this is not true like I is not equals to 1 2 3 or 4 or 5. okay so I'll just use l statement and I'll I'll also have to use the hyphen and the greater than sign for that okay and I can use the curly brushes if I want and I can write that I is not in like this not in one to five okay so when I execute this code when I execute this code so I is 5 and then we enter this when I block and then it checks that whether I is 1 or not then whether I is 2 or not then either I is 3 or not so after checking and getting this is false it's exactly whether I is 5 or not so I is 5 in this case and then it prints that is 5 and then it gets out of this when then flow function or when keyword okay so when I provide that I is equals to 6. okay and run this so I have not mentioned here what to print when is6 but I have mentioned that what to print when I is not in one to five which is the else statement so that prevents that but what happens when I it doesn't don't use the else else keyword okay so uh when I don't use the else keyword and the I is 6. what happens is the codes get executed and it is it does not print anything so when else keyword is not required so I don't have to mention else keyword and it is not necessary but it is a good practice as uh if the condition is not true if any condition is not true there is something to execute otherwise nothing will be executed okay so after that uh we have nested effects so what happens if I have uh condition one and condition two so I have like uh condition one is true then I have to check second condition so in that case we use next state Ethans we can Nest an if else statement inside another FL statement when when we say if else in this context it could be if statement or Apel statement or if else if statement okay so uh I'll just use an example for this enlisted effects so if I is 5. okay I'll use to okay if I is 5 and then I have to check that if I is odd or not so that doesn't make sense but for understanding purpose it should make sense so if I is divisible by if if I is divisible by 2 I have to check that so if I divided by 2 is 0. so then I is even so I have to print and then that I is 5 and even okay and I can just do that also but uh as I mentioned that using an else statement is a good practice so else printable I is 5 and odd and I can again use an else statement here that print Helen I is not equal to 5. okay so when I run this function or run this code what I'll find is it prints the statement I is not equal to 5 because I have mentioned that I is equal to 6 I'll just go ahead and change the variable I is equals to 5. and then again run the statement okay so I can find the output is um I is 5 and odd because I is 5 by Naught okay so uh here you can see that I have nested an FL statement under NFL statement okay so if this is the case then I have to check that if this is the case or not and if this is not the case then I have to print this okay so this is the example for nested if else and in this video we have covered what is nested appears what is if else ladder and when to use when keyword thank you for watching this video and in this video we are going to use the logical operator with if else so what are logical operators logical operators help us make logical decision so logical operators are basically of three types logical or logical not or logic and logical and so uh the result of any logical operator is always an Boolean value okay and logical operators are mostly used to evaluate two conditions so uh I'll just mention the logical or operator so we will use this sign for logical or operators and for logical and operators we will use the Ampersand two times and we will use the this sign for logical and operators and for logical not operator I'll use the exclamation mark so let's just go ahead and understand about these objectives so um I'll just create a main function and then inside the main function I'll create a if if block so I have to evaluate a condition like if this is true or that is true okay so if I is equals to 5 before that I have I have to just mention the variable I is equals to 3 okay so if I is equals to 5 or I is equals to 3. okay in that case I'll print that I is I is either 5 or 3 okay so that is the basic meaning of an or operator okay so when I use an or operator um what it does is it checks the first condition and it saves the second condition Also let's let's say that first condition is I equals to 5 and second condition is I is equals to 3. so when I use the or logical or operator if the first condition is true and the second condition is true then the output is also true and if the first condition is true and the second condition is false then also the output is true if the first condition is true and if this first condition is false and the second condition is false then also the output is true and only in the case when both the conditioner false then only the output is false okay so let's just go ahead and run this program and get a better understanding of what I said Okay so here I is 3 3 so this is 2 and but this is not but you we can see that the output of this this condition this condition as a whole is true so I'll just go ahead and change the value of is4 now I can see that both of the conditions are false so it's just it does not go into the if block and just skips that it is because the the both conditions are false then only the uh the code does not get executed okay so I'll just go ahead and create a new variable a and give it that value as 5. now uh I'll use the end operator and logical operator okay so if I is 5 and a is Faith then print I is 5 and a is 3. okay now uh just we will just understand this so what is an logical operator so it it should it should say that um the my condition 1 should be true and my condition 2 should be true okay so here my condition 1 is is 5 and the karma condition 2 is a is fine so when both conditions are true then only the output is true now suppose any one of my condition is false and another condition is 2. then the output of this is false because when I check this that I is equals I should be equal to 5 and a should be equals to 5 but when I is not 5 and a is 5 uh the if if block is not executed because when I use the end operator if block is only executed when both conditions are true okay and if both conditions are false then then also it will not get executed so when I run this program I can I can predict that it does not get into the if if block and yes it does not get into the if block so I'll just change the value of I is 5. and I can see that okay so my bad and yes the if block gets executed when both conditions are true so that was about the N logical operator now what about the not logical operator so when I use the note of uh logical operator like uh you you can remember when I was covering operators I used exclamation mark equal to that represents not equal to okay so when I use I not equal to 5 and I change here I 7 so the if block will get executed here because I is not equal to 5. as simple as that okay so the logical not is used to negate the condition whenever the condition is true the output is false and whenever the condition is false the output is true okay so um like till now we have covered The Logical operators in if else and the if else ladder the nested effects okay in the next video we will cover another topic and in this video we are going to learn about the in operator in kotlin language so uh to study the in operator uh we I would like to consider the example to declare a variable and check if it is it lies within a specific range okay so I have a main function and inside the main function I will create a value n is equals to 5. and I have to check that if the values lie in 1 to 10 or if the value is lies in to 11 to 20. so I'll just create a if statement if n is greater than 0 uh or I can say that greater than equals to 1 and so I'll just introduce the logical operator and and should be less than or equal to 10. okay so if that's the case then I should print that n is in 1 to 10. okay and else if um n is less than n is greater than equals to 11 and N is ah less than equal to 20 so I have to print that and is in is in 11 to 20. or I can introduce an else statement as well which prints that and is not in 1 to 20. okay so when I go ahead and run this function or this code what I'll find is the the function checks if the variable lies within a specific range okay so our variable or the value n was equals to 5 and it lies in 1 to 10. so just if we let the code to finish okay so it prints that analyzer n is in 1 to 10. okay so when I see the code it underlines this with a line okay so when I hover over it and hit alt plus enter it says that convert to a range check okay so when I click on that it it prints n in 1.10 okay so uh the in operate this is the in operator uh we are going to study okay so instead of uh this whole thing n is greater than 11 and uh logical operator and N is less than equals to 20 what we can do is we can use the in operator okay so what in operator does is in the in operator the hydrates or I can say um checks the in the range okay so what I can do here is I can just write n in 11 dot dot 20. so it automatically uh introduce this signs and it states that and we will check n in 11 to 20 and both will include the equal to sign okay so instead of using now when I see the if statement it also uh is underlined so when I hover over it it shows that Cascade F should be replaced with when and when I go uh on it and hit alt plus enter it shows replace if with one and then I hit enter it replaces it with the when statement okay so the kotlin or the I can say the intelligent idea is very useful and it suggests most of the things to make the code easier and readable and less redundant okay so that was it for this video stay tuned and in this video we are going to study about the loops in kotlin so before studying the loops the first question that should arise is why are the loops used or why should we use the loop so when I have to print the numbers from 1 to 10 uh or I have to print uh a variable that is I and increase the variable after each print statement so what I can do is I can write a variable that is equals to 1. okay and then I can write a print statement to print I and then I can increase the I okay and I can repeat the same block of code again and again to execute the statement okay so if I said if I said I have to print all the natural numbers from 1 to 10. so firstly I have to repeat the particular block of code again and again and I cannot know where to stop or I have to manually count the number of iterations so uh like I have here you written the code and it prints all the natural numbers from one to five so this is a redundant coat and it requires a lot of lot of like I have to count the the number of iterations and it is a redundant code so uh what could we do to make it less redundant and short code and organized code so we can use Loops instead of repeating the same block of code again and again so what is a loop a loop is something repeating itself okay so when you listen to song you put them on Loop so what it does it it it repeats the song after the song is completed okay so there are three types of looping Loops in kotlin for Loop while loop and do while loop so let's say we want to print all the natural numbers from 1 to 10. okay so firstly uh we can see what is the Syntax for for Loop so the syntax is 4 and here is the condition and then the loop starts okay and then the code ends and between this there is a particular code sequence that got that gets repeated in each iteration okay so we use the keyword for and then we introduced some parameters that checks the the condition and increase the iterator and initialize the iterator okay and then at the end we close the curly braces and the code inside the curly braces gets repeated at each iteration okay so let's say we want to print all the natural numbers from 1 to 10. okay so we know that Loop repeats a particular code sequence now we also need something to count from 1 to 10. hence a counter is needed that must be incremented incremented at each iteration okay so as we have already discussed the Syntax for for Loop let's go ahead and make a code to print all the natural numbers from 1 to 10. okay so I'll write for now remember we have learned about the ins in in uh statement in kotlin so I will introduce the iterator here okay so for if it is not initialized outside the for Loop it is okay so I'll initial I'll initialize I here and use the in operator okay so I in now 1 to 10 okay as I mentioned if I have to uh for particular condition 1 to 10 I use the in operator and the two dots okay so for I in 1 to 10 okay and then I have to just go ahead and print I okay so when I run this function or on this particular block of code I can see that it prints all the natural numbers from 1 to 10. okay so uh there are some points that I would like to point out like for in the for Loop there is no need to initialize the iterator as I already mentioned and there is no need to increase the operator in for Loop okay so you can see that I haven't have not write the I plus plus here okay because when I write I plus plus here we can show we can see that there is a error and it shows that well cannot be reassigned so whenever I enter in the for Loop I very value I is created and it is assigned the particular number that that the loop is giving going on okay so it is a value not a variable in for Loop the I although its value changes after each iteration but it is a value not an variable okay so the default increment of an iterator is one so as you might have seen that uh iterator after each iteration increased by one not by two not by three so whatever I have to print all the odd numbers in 1 to 20. so then I have to um iterate I in 1 to 20. and I have to also increase the iterator by two so for increasing the iterator by 2 we need to use the step function so I'll just write here step two now what the step function does is it increases the height requirement so when I go ahead and run this function we can see that after each iteration the iterator increases by 2 and hence prints all the odd numbers from 1 to 20. okay now whatever I have to uh print all the natural numbers from 10 to 1. not from 1 to 10. so you might think that I can write here 10.1 okay so when I go ahead and run this function you can see that it just exits it just exits with uh core zero okay why why why it happens because at the particular point when it enters the for Loop it is assigned the it is checked that if it is in 10 or 10 to 1 okay it must be greater than or equal to 10 and less than or equal to 1 so there is no integer that is greater than equal to 10 or less than equal to 1. okay and I would like to mention one thing also whenever I Define anything like this okay I just mention it 11. so whenever I have defined anything like this the by default um value assigned to I is the first value here okay so in this case the by default value assigned to I is 10 now getting back to our original question that what if I have to print all the statements from 10 to it so I'll use the down to function so for out I in 1 I in 10 I in 10 instead of the two dots I'll use Down 2 and 1. so in this we can see that the I should be less than equals to 10 and greater than equals to 1 so now when I go ahead and print this uh we can see that it prints all the natural numbers from 10 to 1. so that is about the down to function okay so in the next video we will see about the while and the DUI loops and cotton this is all for this video thank you in this video uh we are going to discuss about the while and the do while loop in kotlin okay so in the previous video we discussed about the for Loop and cotton and the basic idea of loop so Loop is used in programming to repeat a specific block of code until certain condition is met okay so Loops are what makes computer interesting machine imagine you need to print a sentence 50 times on your screen you can do it by using a print statement 50 times or you can use loops so we will start with the while loop and firstly we will discuss the syntax of the while loop okay so for while loop we will first write the keyword file and inside and open a parenthesis and inside the parenthesis we will write the text expression or I can say the condition okay so when the condition is true uh it enters the the code block and there is a code sequence and after this there is a we close the parenthesis okay so the curly braces okay so um whenever the text expression is true it enters into the code sequence and the particular code sequence is repeated okay so test expression inside the parenthesis is a Boolean expression if the test expression is evaluated to true statement inside the while loop are executed then the test expression is evaluated again this process goes on until the test expression is evaluated to false if the test expression is evaluated to false while loop is terminated okay so uh now we will take an example of while loop in which we will print um line five times or ten times okay so uh I'll in the main function I'll just introduce a variable so unlike a for Loop we have to initialize and increment the variable in while loop okay then I'll use the while keyboard and while I is less than or equal to 10 okay I have to print I and at the end of the loop I have to increase I also okay I have to increment the value of I if I have not incremented the value of I the the Y Loop couldn't have ended okay so when I run the program the output is okay so when I run the program the output is okay instead of I is 5 I have to make I is 1 and when I run the program the output is one two three four five six seven eight and ten okay so notice that plus plus I statement yeah or I plus plus statement inside the while loop okay so we have incremented i at the end of our loop after 10 iteration I will be incremented to 11 okay so if I uh print the value of I here so I would be equal to 11 at this particular case Okay uh so it goes back to the test rate test statement and the condition I is less than equals to 10 is false okay so therefore the loop terminates so if the body of loop has only one statement uh it is not necessary to use a curly place as we did in the if and the uh when statements so now we will move forward to the do while loop so the Syntax for the Dubai Loop is uh there is a so we will firstly write the do okay I'll just remove this we will firstly write the do keyword and then uh and then write a code sequence and after this we will end this and after this code sequence I'll write while file keyword and then here I will write the test expression okay so we will first discussed the that how do while loop work so the code inside the body of do construct is executed once without checking the test expression then the test expression is checked if the test expression is so the code is executed once and then the text expression is checked okay so if the test expression is evaluated to True code inside the body of the loops are executed once again okay and the test expression is evaluated again the process goes on and on until the test test expression is evaluated to false okay so when the test expression is evaluated to false do while loop terminates so what is the main difference between while and the do value is in do I Loop the code sequence is executed at least one time and even if the test expression is false okay as not in the while loop because in by Loop it will first check the condition and if the test expression is false it will just go on to the it will just terminate the loop okay it will not go on in the body of the loop so now we will go ahead and try the same with the do while loop and print the natural numbers from 1 to 10 so I'll write do and then in the code sequence I'll write print statement and before writing the print statement I have also I have to also initialize a variable that is I and then inside the print statement I have to print the variable and increment the variable because if I had not incremented the variable the loop will go on and on and on and will not stop okay so then I'll use the while keyboard and inside the while keyword I'll write I is less than equals to 10. okay and then when I run this program I can find that the output is 1 to 10 okay so now what if I had not incremented this and I had just used the print statement as I mentioned the loop will go on and on and on and it will not stop on its own so now what to do if the loops goes on and on so in the command prompt you will just do control plus c okay all you can do is terminate the loop from here the stop okay so take care in mind that the loop will not continue to infinite and mention the increment statement here so till now we have covered about about the loops and basic example not I I will not say example we have just learned the syntax from here okay so you might have a pretty good understanding of loops okay thank you and in this video we are going to learn about the break expression in kotlin okay so uh suppose you are working with loops and it is sometimes desirable to terminate the loop immediately without checking the test expression okay so I have to terminate the loop at some point so what I can do is in such cases I can use the break statement okay so I'll just go with the random example like I I started a loop and uh if the something occurs then I have to break the loop okay so then I have to use the break statement for terminating the loop without checking the test expression okay so the break statement terminates the nearest enclosing Loop when encountered without checking the test expression okay so how break works it uh it is almost always used with if else statement okay so I'll just introduce you with the syntax of this break so what what I will do is uh in the for there is a for Loop okay in which there is a for Loop in which if there is some test expression if there is some test expression then I have to break the loop I have to terminate the loop so I'll use the break statement okay and I'll use okay so if test expression is evaluated to True break is executed which terminates the for Loop okay so uh now I'll go explain you with an example so I'll create a main function and inside the main function I'll create a for Loop which iterates from 1 to 10 okay and in this if I is equals to 5 if I is equals to 5 then I have to terminate the loop okay so I'll use just the break statement here and I'll print Ln I just to know that what is happening in the loop so when I go ahead and run this function what I can see is the the what I can see is one to four is printed so uh when the value of I is equals to 5 okay so we enter in the for loop I is assigned value equals to 1. and then it checks whether the I is 5 or not so I is not 5 then it prints I and then in it increases I equals to 2 and then it again checks that if I is equals to 2 or 2 5 or not so it is not equals to 5 and then again it prints the value 2 as soon as the I as soon as I becomes 5 in the for Loop inside if is evaluated to true and break is executed this terminates the for Loop okay so um what is lab so we will move ahead and learn about labeled break in kotlin so what we have learned till now is an unlabeled from form of brick which terminates the nearest enclosing Loop there is another way to wave break can be used to terminate desired Loop okay or I can say the two terminate an outer loop so how does a label break works okay so there is a um there is a while loop in in a while loop and there is a so there are basically two loops okay so label in kotlin starts with an identifier which is followed by an at the rate okay so here uh when I I okay I can make a code for that syntax okay so I can make test at the rate while and there is some test expression and inside this while loop there is some codes and inside this with the codes there is another while loop which contains another test expression and this while Loops contains some codes and with this code it contains an if statement and there is a condition to break in this if statement and if this condition is true uh what it does is it it will break and I'll use the Ampersand sign and then I'll write test okay so now I will go ahead and close all the parenthesis now here is one and here is another okay so now we will understand the syntax so here test at the rate is a label marked at the outer while loop okay so this is the outer while loop and test at the rate is a label marked at the outer while loop okay so now by using break with a label uh test at the rate break at the rate test in this case you can break a specific Loop so uh as soon as my condition to break is true inside the while this while inner while it will break the test this outer loop okay so what if I had not used the test test so it will break this while loop okay it wouldn't have break the outer while loop okay so it would be more clear with an example if it is not clear till now I'll use First as an identifier for a for Loop which iterates in 1 to 4 1 2 4 and inside this for Loop there is a another for Loop and I'll just I identify with the SEC o and the second and I'll use at the rate and there is there will be another for Loop and I'll iterate it in one to two okay so inside this second for Loop I'll write a print statement just to know that what is the status of the loop so you must remember about the the string templates okay so I am going to use everything I have said till now okay so I is equals to I'll use the amps and sign a dollar sign and DUI so this prints the value of I okay and then semicolon semicolon J is equals to dollar J okay so the semicolon is going to print and I is equals to the value of I and J is equals to the value of J so I am just going to put into the value okay so if the value of I is 2 then I have to break the first Loop okay so I will use the break statement and use the at the rate and mention first now if I run this code okay I can see that I is equals to 1 and then J is equal to 1 then Isaac 4i is equals to 1 day is equals to 2 okay so let's just see what is happening right okay so we first enter the for Loop the first for Loop okay so there I is assigned the value 1. then we enter the second for Loop and there J is assigned the value 1. okay then the print statement is executed and I and J both with the value 1 is printed and the statement if I is equal to 2 is executed and as I is not equal to 2 it is 1 it is false and then it continues with the second for Loop okay for I is equals to 1 this Loop is executed two times because j i iterates in one two two okay then for I is equals to 2 okay so when this exit this is executed two times we reach the end of this Loop the first Loop and then I is incremented and I is equals I becomes two now uh it enters the second for Loop and for uh the I equals to 2 J is assigned the value 1. and then the print statement is executed and value of I is equals to 2 and J is equals to 1 is printed and after that the if statement is executed and when I is equals to 2 x expression is evaluated to True break at the rate first is executed which terminates the loop marked with label at the rate first okay or first at the rate so it terminates the first Loop now uh what if what if I have to break the loop as soon as I become 2 and not when after printing J okay so I I have to just remove this statement so I can just uh copy and cut and paste it before the print statement so before the print statement the first Loop is going to be terminated and hence the third print statement is not executed so I can just do a little variation in this program okay in the previous program so instead of break at the rate first I'll do break at the rate second now when I run this program okay when I run this program I can see that I is equals to 1 I is equal J is equals to one so the whole Loop is executed no the whole Loop is not executed since break statement is used to terminate the innermost Loop of program okay so the second Loop of program I have broke so when I I was to when I was to J was one okay so that was printed I was two J was one and then the condition was evaluated and the second Loop was bred so it it reached the end it reached to the end okay and at the end of this uh the the iterator for first Loop that is I is executed okay so uh if I have to um like code for this I need not write first advert or second at the rate because um foreign statement as it is is for uh terminating the innermost Loop okay so if I had not right at the rate at any point it gives me the same output okay so that was it for this video thank you in this video we will see what is uh continue in kotlin continue in kotlin and then we will see an example uh to calculate the sum of N natural number using for Loop okay so uh what is continue and in which cases continue is used so suppose you are working with loops and uh sometimes you want to skip the current iteration of the loop okay so in such case continuous use the continue construct skips the current iteration of the enclosing Loop and the control of program jumps to the end body of the loop okay so let us now see that how continue works so yeah uh it is almost always used with if else construct so for example there is a file some X test expression and test expression one I can say and then there is a loop which has some code this one okay and then after some set of code there is a statement that if test expression 2 is true okay uh then I have to I I'll say I have to continue and I'll just end the loop here and then the if statement here and there is some another block of code say code two okay so what is happening here okay I'll just end my while loop okay so what is happening here is uh if the test Expression 2 is evaluated to if the text Expression 2 is evaluated to True uh continue is executed which skips all the cores inside the while loop after the iteration which is the code to block okay so uh like uh there is some code one that is going to be executed after the while statement and then if the test Expression 2 is true then it is going to go to the end of this wild block and skip the code too okay so uh and if there is something with the if there is a do do while loop okay so there would be a do by Loop like do code one if it has Expression 2 is 2 uh continue and then there is another set of code and there is a then there is a while statement while test expression one so now what what happens when when the test Expression 2 is true that the the container is going to be called and then it is going to be skipped to the while statement and then the test expression one is going to be checked and then it if it holds true then it will go to the uh do Loop okay so let us go through the example of continue in kotlin over okay so uh Suppose there is a for Loop uh from one to five and uh if I is if I is greater than 1 or less than 5 yeah if I is greater than 1 and less than 5 we have to continue okay so I'll just uh writes the code one main thank you for I in for i n one two five and then if uh okay I I'll include print Allen um I always printed Okay then if I is greater than 1 and I is less than 5. okay which is equal in all case except when I is 1 and 5 okay so in this case I will say that continue okay and then I'll again write a print statement which says print Ln uh dollar I not always print okay so when I go ahead and run this program what I can see is when when we run the program um okay so when we can when we run this program it says that one always wanted one not always printed two always printed three always printed four always printed five always printed and then five not always printed okay so when the value of I is greater than 1 and less than 5 continue is executed which skips the execution of this this this code print Ln I is not always printed okay however the statement this this statement print Ln I is always printed is executed in each iteration of the loop because this this statement this extra this statement exists before the uh continue construct okay so now now we will see a some uh like real life example of it so let's say I have to uh I have to calculate the sum of positive numbers only so uh before that we will calculate the sum of first and natural numbers okay so for calculating the sum of first and natural numbers uh the the what we can do is we can use a for Loop or any kind of loop okay so uh let's say I I have to make a program using the for Loop so I'll write the code and explain okay so let's say uh I I'll I have I am declaring the variable num and I am giving the value of 100 okay so I have to calculate the sum of first 100 natural numbers okay so there is a value and uh let's say there is a variable sum which is initialized as 0 for the in the starting okay so for I in 1 to num okay so I in one to num now what what uh what are we going to do is I'll I am going to uh do sum is equals to sum plus I okay so I am going to add I in some and equate it with it so uh in order to write the code of it sum plus equals to I so this is the sum equals to sum plus I so now whenever the loop iterates every time the particular number is going to add with the sum okay so at the end I'll print the sum so uh I'll print sum is equals to sum now when I run this program I should see the uh sum of first 100 natural numbers so the sum of 400 natural number is uh five zero five zero okay so uh now I have to calculate the sum of only positive numbers from 1 to 100. so now I have to do make some changes in this program so what I will do is uh I'll this this block of code is fine okay so uh there is some integer and okay so uh from 0 to 100 I have to calculate the sum of uh positive numbers only so if before including the sum if the number is uh okay sorry I have to mention here odd okay my bad I have to calculate the sum of odd numbers only so from 1 to 100 I have to calculate the sum of odd odd numbers so if the number is even I have to continue okay I have no I have to skip the last of code so what is the condition for for a number to be even so the condition is number must be when the number is divided by 2 the remainder must be 0. okay so when the number is even I should continue and now when I run this program okay so if I if I should be even then I uh when divided by 2 the remainder should be zero okay so when I divided by 2 and I is even we should continue and when I is not even that is odd we will skip to this block of code and calculate the sum so when I run this program I can see that the sum of odd numbers from 1 to 100 is 2500 okay so that's all for this video stay tuned in this video firstly we are going to see what is the scope of a variable and then we we will cover some ah few examples which which will help you get a better Clarity of all those all those Concepts that we have learned in the particular playlist of introduction to kotlin okay so what is scope of a variable a scope of a variable is its visibility or a visibility of a particular variable within a piece of code so let us understand with it with this with the example okay so suppose uh this is a block when block of code one okay so and then there is a for Loop and then if between in inside the for Loop there is a block of code two so as the variable a is defined in the main function outside the for Loop so the variable a is visible to code 1 as well as the code 2. okay so the code one is this thing and the code 2 is particularly this thing okay or I can say the code one includes this also so basically The Core 2 is the for Loop and uh because the variable B is uh initialized in the for Loop inside the loop body and uh so it is visible to visible only to the code B and not the code one and hence it should be used by this Loop body only okay so the variable B cannot be used outside so I cannot use uh B is equals to 20 here okay when I uh do so it shows an error here because the B variable is not visible to outside the loop okay similarly when I Define a function okay a function outside the main function and I use some variables in the uh the other function so the variables which I have used in the other function are not visible to the main function and the body and the and the body of the main function okay so this is about the uh scope of variable okay so now moving forward uh we will uh write a kotlin program to find a factorial of a particular number of a of a particular number Okay so kotlin program to find factorial of a number so in this program you will learn to find the factorial of a number using for Loop or you can use while loop also and okay so what is a factorial so a factorial of a number n can be given by n factorial and it it is equals to 1 into 2 into 3 into 4 and so on till and okay so uh now we have to think that how should we proceed in this particular question so uh for thinking this uh I firstly I should think that uh one Loop is required okay we cannot manually multiply the number with two and three and four okay also uh the the particular Factor should be multiplied with the I with the incrementer okay so uh in this program we should we should use a loop to Loop through all the numbers between one to the given number okay whichever number has been given and uh the product of each number till the number is stored within a variable it must be stored within a variable okay so as we did in the uh as we did for finally finding the sum so uh initially I'll declare the main function okay inside the main function there is a value num and that is defined time so I have to find the factorial for the particular number 10. now I should Define a particular variable let's say factorial okay variable let's say factorial in which the factorial is going to be stored okay now this factorial uh okay instead of 10 I I'll do it 5. okay so this factorial uh should be equals to 1 on in the starting because this is multiplication if this is if this was a sum as we did in the sum of N natural numbers we would have initialized it with zero because uh it we would be adding something to it now we would be multiplying something to it so we have initialized initialized it as one because anything multiplied to 1 is the particular thing okay similarly anything added to the the zero is the particular number okay now after declaring a factorial variable uh we should decl we should use the for Loop okay so for now from where we have to iterate so I have to iterate from 1 to the number particular okay so from I to the number uh the factorial okay the factorial is equals to the factorial into number okay so uh from starting we can see that uh what is 2 factorial or what is one factorial I'll say one factorial one factorial is one okay now what is 2 factorial 2 factorial is 2 into 1 factorial and what is 3 factorial three factorial is 3 into 2 into 1 and 2 into 1 is uh any basically two factorial now what is four factorial 4 factorial is 4 into 3 into 2 into 1 now what is 4 into 3 into 2 into 1 4 4 into 3 into 2 into 1 so what is three into two into one three into two into one is three factorial okay so I can see that I can say that the factorial is equals to the previous factorial into the current number or instead of number I should have said here I okay that was my fault so um what I can do here is I can just write factorial ah into equals to I okay clear and at the end I should write the print function so print Ln uh fact orial of the number is equals to um factorial so the factorial variable now what I should do is I should run this program okay so what is pi factorial Pi factorial is basically 120 4 factorial is 24. okay so this program gives that factorial of 5 is 120 so we have successfully uh made a program which prints the factorial of a particular number okay so that that is all for this video stay tuned in this video uh we we would do some examples on the uh on the things we have learned okay so what I would recommend is uh you just pause the video when I uh announce the problem statement and then do it by your yourself and then you can play it again and check the solution okay so we would continue with our first example to um count number of digits in an integer okay so uh like there is some integer or a number given okay suppose one two three four so I have to count the number of digits in the number so let's code for that so I'll write the main function and inside the main function uh there is a number and suppose that number is one two three four five six seven okay now uh I'll declare a count I'll declare account and in at every Loop I'll increase the count by one okay so count is equals to zero at the start so uh what is the basic logic behind this like we have to use Loop and iterate the loop until some some condition or something is evaluated to false okay so I I can use while loop I can use any Loop in this but I'll I'll use while loop okay so uh and Counting of Digit okay so at every tens place there is a new digit every tens hundredth place so when I divide the number by 10 so the number of digits get reduced by one okay and when I divide by 10 divided by 10 you know there is no decimal anything taking place because the number is integer okay so when I divide one two three four five six seven by uh 10 the answer is one two three four five six not one two three five six point five seven okay so I'll use while loop and the condition would be number uh not equal to zero okay so while the number is not equal to 0 I'll I'll divide the number by 10. and store it in number or num and I'll increase the count okay so uh what happens here is after first iteration num will be divided by 10 and its value will be uh one two three four five six then the count is incremented to 1. after the second iteration the value num would be um one two three four five and the that is incremented to to after the third iteration the number would be incremented to one two three four and so on so after the seventh iteration the number would be increment after the six iteration number would be incremented to one number would be uh one and the count is incremented to six and again at the seventh iteration the encounter is incremented to seven and the num becomes zero so again when when uh then then the test expression is evaluated to false and the loop terminates okay so I can write a print statement here number of digits in Num is or I can say in um is count okay so when I run this program the answer the or the output should be seven so let's see okay so the number of digits in zero now why it is showing 0 here because we have done all the calculation and num we have divided num by 10 and so on and then num becomes zero so what I will do is I will change here I'll take a value number that would be equal to one two three four five six seven it is the input and then I'll uh introduce a variable num that would be equal to our number okay and now here I can do number now when I run this program I can see that it works on pretty well the number of digital one two three four five six seven is seven okay moving forward in the next example we would write a kotlin program to reverse a number okay so uh what I should do for reversing a number for reversing a number uh I can do is what I can do is I can uh introduce a lot of variables okay so it is not a right choice because we don't know the count of count uh the number of digits in the in the integer okay so what would we do is uh we would first like when we divide the number by 10 okay so the remainder the remainder we get is like when we divide one to three plus five six seven by ten so the remainder is 7 here okay when we divide it by 10. so uh like this is the this must be this would be the first digit of the reverse number so let's go ahead and think as we code so there is a variable number this which is the output which is the input let's say it's one two three four okay so then I'll introduce a variable num which is equals to the number now uh I'll increase the variable reversed and for now it is 0. okay so I'll introduce a while loop while uh num is not equal to zero okay now uh I'll introduce a value variable digit okay and digit this digit is equals to num this is equal to the remainder when num num is divided by 10. okay now this is the uh last digit or the four in in the first iteration so uh the reverse number the reverse pin number would be equals to the old reverse number which is 0 for now okay into 10 into 10 and plus the digit so now when we come to the second iteration so the old reverse number is multiplied to 10 and shifted one bit left side and then the digit is added okay so for from this the number could be reversed and at the end I divide the number by 10 okay so it helps in like when in the next slide question okay so I'll just explain this code once again in this program while loop is used to reverse a number as given uh as uh I'll say uh first the remainder of num divided by 10 is stored in the variable digit now digit contains the last digit of num that is 4. then the digit is added to the variable reversed after multiplying it by 10 so multiplication by 10 adds a new place in the reverse number one place multiplied by 10 gives you 10th Place okay so tenth place gives you 100 and so on so in this case uh reverse contains 0 into 10 plus 4 equals to 4. so num is then divided by 10 so that now it contains the first three digit as is one two three after second iteration digit equals to three reverse equals to 4 into 10 plus 343 and num is equals to 12. after third iteration the digit equals to 2 okay and reverse equals to 43 into 10 plus 2 that is 432 and num is equals to 1 and after the fourth iteration the digit equals to 1 reverse equals to 4 and 432 into 10 plus 1 that is 4 3 2 1 and num is equal to zero now as num equals to 0 the test expression fails and while loop exists exits and revolves reverse already contains the reverse number that is four two three one okay so before running this program I'll write a print statement print the Reversed number is okay now I am in this program I can see that the reverse number is 4231 okay so this is all for this video stay connected and in this video uh we are going to uh do some example uh so in this in the example we will we are going to calculate uh Power of a number using the using the power function and without using the power function so we will calculate calculate the power of a number so uh like uh so through this video uh what we will do is we will practice some Concepts and also I'll mention some things that I have missed or some new functions that are useful okay so uh there is a power function that I will introduce in the later part of this video okay so how to calculate a power of a number okay so Suppose there is 3 to the power 4 so uh 3 to the power 4 is 3 into 3 into 3 into 3 4 times okay so uh 3 is the base in 3 to the power 4 and 4 is the exponent so I'll go ahead and in the main function I'll uh create a value base and give it a value 3 and a variable exponent and give it a value 4 okay and I'll make a result because we have to multiply something in the result uh I'll make a variable result and make it equals to 1 okay if I had to sum it up I I will make it as 0. okay now we have to multiply three four times okay so uh I'll use a while loop okay we have to use a loop that's clear okay so I'll use a while loop and till exponent exponent is not equal to zero okay I'll what I'll do is in each Loop I'll decrease the exponent okay so till exponent is not equals to zero uh I'll uh what I'll do is I'll make result equals to the uh previous result into the base value okay I think that's clear and I'll make it uh into equals to okay now uh I'll decrease the exponent and okay now I think that's it okay huh yeah that's it and I'll just print all in the print Allen though answer is equals to the result so dollar sign and result now when I run this program uh I expect my result to be 81 and yeah we can see that answer is it here so in this program base and exponent are assigned values three and four respectively okay uh using the while loop we keep on multiplying result by base until exponent becomes zero in this case we may multiply uh we multiply result by base four times in total okay so result is equals to one into three into three into three into three that is equals to 81 okay so there is also a pow function so we don't have to do do this all thing we can just use the power function instead of this while loop and this result I can directly uh I can directly write the result as value result equals to uh there is a math library in which there is a power function okay now we can see that there is two double okay so the input that has been given is Con has has to be converted to double Okay then if uh then only it will take it as an input okay so I'll have to convert the base to double and I'll have to also convert the exponent to double okay now I have the uh power function and then base and then exponent so it will calculate 3 to the power 4 okay now when I run this program thank you I can see the answer is 81.0 now I can use I can use whatever the base and exponent I want I can use negative ways as well as negative exponent as well as decimal base as well as decimal exponent so we will go ahead and try that okay so let's say I have to calculate 3 to the power minus 4. so is that possible yes it is possible okay suppose I have to calculate 3 to the power minus four point two five three four three four five okay now uh it is double only okay the exponent is double whenever when I our over it it says double so I can go ahead and remove this two double part now when I run this okay I can see my answer and it must be right so this is the use of the power function okay so in this program we used standard Library function math dot power to calculate power of Base okay we also need to convert base and exponent to double because the power function or the power power function only accepts double parameters okay so uh in this video uh we have covered how to calculate the power of one function using the power function and without the power function okay uh in this video we will write a kotlin program to convert binary number to decimal and vice versa okay convert binary to decimal and device okay so uh if you don't know uh binary is the uh the language that we talk to computers about and decimal is the is the number system we generally use okay so uh the binaries are the are is the number system of zeros and ones okay so in this program you will learn to convert binary number to a decimal number so firstly we will write a program to convert binary to decimal now uh let me create a main function now what we have to do when we have to converter a binary number or decimal number so binary number let's say there is one one so the one at the uh least significant bit has the power took the power to the power zero and at the most significant bit has two to the power 1 so it is 2 to the power 1 into 1 plus 2 to the power 0 into 1 and it is equals to three okay so let's say I have a binary number I'll declare a binary number uh num and I'll declare its data type as long because it could be as long as one one zero one one zero one one okay now I'll declare a decimal number so I'll declare a valued SML and what I'll do is before this I'll uh instead of doing all the calculations here outside the main function I'll make a function which to to convert a binary binary 2 decimal okay now this function has to take something as an input okay so let's say it's it takes input a num and its data type is long okay now after that we have to declare its output output is int okay output type now we start the code block okay now uh inside the code block we have to what convert the binary to the decimal okay now uh so we have to use Loop okay and um like we have to okay so uh the decimal uh base 10 and number system has possible value 0 to 9 for each place value okay in contrast the binary base two number system has two possible values zero and one okay so how to con so for converting this converting a decimal to Binary is like I have okay I have to show like this okay I have one one zero one one zero one one okay so the least significant bit here is uh this uh the most significant bit here is the first one and this is the least significant significant bit so the least significant bit holds 2 to the power zero two to the power zero is one okay and then the next bit holds the value two okay and again the next bit holds the value uh four okay and so on it holds the value 8. now it holds the value 16. okay and this bit holds the value 32 this bit holds the value uh 64. so for calculating so for converting this into the decimal I have to multiply these two so I have to multiply 1 into 1 and then multiply 2 into 1 and then multiply 4 into 1 and then multiply 8 into 0 and then multiply 16 into 1 and then add the whole thing okay so I I guess this is pretty clear how to convert a decimal number to Binary okay so now we will move forward to how to write the code okay so uh firstly I'll declare declare the variable uh num which is equals to the num input that we have introduced okay now I have I'll declare a decimal number which will be our output the decimal number and for starting we will declare it as 0 because we have to add all the numbers okay I have uh introduced earlier that when we have to add all those number we will initialize it as 0 and we have when we have to multiply all all some numbers we will initialize it as one okay now uh I'll introduce an iterator and that would be 0 for starting now I'll introduce a variable remainder remained and data type as its data type as log okay just a second so continuing with the the problem for converting binary okay so it is clear that how to how we can convert um binary to decimal okay so uh after decree declaring the remainder uh I I will run a loop Okay so running okay a while loop so while uh now the number the number is binary okay so uh okay so number is long okay so I will convert the uh long to end and then I'll numb to end and then when it is not equal to 0 till then I have to run this group now inside this Loop uh so I have I'll divide the the uh the binary number by 10 okay so what will happen is um no yeah and the remainder uh that will be uh so when I divide this number by 10 the remainder is the last digit okay so I I'll uh collect the last digit by dividing this number Okay so uh the remainder uh is equals to uh the remainder when the number is divided to 10 okay so now we have the last digit and for continuation I'll divide the num and provide it to the okay so as we did in the previous video we will do and the decimal number decimal number would now be equal to uh the old decimal number so I'll equal I'll give it plus equals to and it will be equal to all decimal numbers plus remainder remainder into math dot pow I'll have to do the power and power of 2 2 is the base 2.0 and the iterator what is happening okay and the iterator uh that is I and I'll convert it to double two double and then I have to convert this whole to end because the decimal number is an integer so to int now I have to increase the iterator and then at the end of this loop I have to return the decimal number okay so what we did in this part of code is uh while the the decim the binary number is not equal to d0 because we have we are dividing the binary number by 10 in every iteration okay so why this is not equal to 0 uh the number the remainder is calculated and the remainder into 2 to the power 0 to the power 1 to the power 2 is then calculated and then multiplied to the remainder and then add it to the decimal number okay so as I have explained this how to con uh the conversion of this and then I have to call this function okay so calling this function I I'll introduce a value decimal decimal that would be equals to convert convert binary to the decimal and then the input would be okay what happened here is uh foreign okay and then I I'll print that number in binary is equals to decimal in the C okay so when I go ahead and run this program oh I can see the output okay the grid is building so I can see here the output is uh one one zero one one zero one one in binary is 439 in uh decimal okay so you can also check that this is correct now instead of doing this whole thing there is uh there is a integer to Binary string method to convert a decimal number into binary okay so what we can do is inside the main function uh for converting decimal to Binary okay so binary decimal this is only the way okay so if if I have to convert uh and decimal to binary I'll create a main function and then inside the main function there would be a number let's say 19. and then i l converting decimal to binary now uh value binary is equals to integer dot to Binary string and then I'll place here num okay now if I print that num in decimal is equals to binary in binary okay so when I run this program I can see that 19 decimal is one zero zero one one in binary okay so that is all for this video uh stay tuned in this video we will learn about multi uh dimensional arrays or we will learn it by an example of uh writing a Content program to add two metrics using multidimensional arrays okay so uh let's say there is a main function and inside the main function there is a value of rows let's say it is 2 and value of columns let's say it is 3 now there is a value and I have to define a array okay so I hope you remember how to define an array now uh the value first Matrix and it is and array of um now array of two small errors okay so uh it is an array of two arrays okay so this is the multidimensional array okay so I'll just Define int array of now let's say two three four now this is a multidimensional array because there are arrays there is an array of different arrays okay there is two errors two three four and uh let's say uh five to three okay I I learned another array uh let's say five to three so the first Matrix is an array of two different Matrix two int Matrix okay similarly uh let's say I have a second Matrix e c o n d Matrix okay so let's say it is an array of uh enter minus 4 5 3 and let's say int array of 5 6 and 3. okay so we have two multidimensional arrays so first Matrix and second Matrix now uh we have to write a program to uh add these two metrics okay so for adding these two matrices uh what I'll do is uh so what is adding off to Matrix if you remember in mathematics the adding if there is a matrix one two three okay okay I have to comment it out uh okay so if there is a matrix one two three and uh four two three four so I I have to add this Matrix within a matrix with a matrix let's say five six seven and let's say uh seven eight nine okay now um what what I will do is I'll add one with five okay two with six three with seven two with seven three with eight and four with nine respectively okay so this is the addition of Matrix now for adding these two Matrix what I can do is I can introduce a variable sum which is equals to the uh array array rows of the int rows X just a second rows of int area and then columns okay so what I did here is uh we firstly uh the two metrics are stored in a 2d array namely first Matrix and second Matrix you have also defined defined the number of rows and columns and store them in variable rows and columns respectively then we initialized a new array uh then we can then we will initialize a new array of the given rows and columns called sum okay so the sum is the given rows and The Columns of uh this the 2 and 3 which is defined okay so the sum is basically int array rows and entire columns okay because uh these array this array has two rows okay and inside these two in inside this there is a two indirect and each entire is contains the number of columns which is three okay so I have defined the sum here which is 2 comma 3 let's say so uh for I in 0 to rows uh minus 1. okay and inside this uh so uh like we Loop through each index of both arrays to add Stone add store the result add and store the result okay so for uh going through each area so we will go through the first array for this and inside this I'll introduce another for Loop for the columns so for J in 0 to columns minus one okay so by this we can iterate in the whole array or whole Matrix I can say so some I and J okay because sum is what sum is basically this thing so some i j is equals to first Matrix of i j I and plus Matrix J and then sum of first Matrix and second Matrix so what is happening here I can I will explain it again to make it very much clear for you okay so uh let's see here okay so the first Matrix let's see here okay yeah so the one here I can call the one as first Matrix one one okay I can call it as first Matrix one two so for iterating in i j so I have introduced two for loops and the first is called zero zeroth element second is called the second element third is called the third element that's why it is row minus one and column minus one okay so the sum will be the addition of two matrices will be pretty clear for you okay so finally we looped through each element in the sum some array using uh for Loop to print uh so yeah so for printing or displaying the result uh we have to display the result also right display the result so for displaying the result I'll uh print the firstly some of the two my devices is okay now what is the sum so for printing the sum we have again used again uh we have we again have to use the loops so for Row in some okay and inside this I have to uh again introduce a for Loop for column and sum column in sum I have to print not println I have to print the value of column and then some spaces okay so I have printed the column and then again iterated and then again print another column okay and then print Ln okay so when I go ahead and run this okay there is some problem with it let me see what is okay yeah so when I uh run this program uh I can see that the sum of two matrices uh is minus two eight seven ten eight six oh all right I can cross check it also uh with this 2 minus 4 3 plus 5 4 plus 3 2 plus 5 plus 5 2 plus 6 and 3 plus 3 okay so this is correct uh so in this video we have learned about the multidimensional arrays and how to add two matrices we have coded the uh code in content okay so thank you for watching this video stay tuned this video uh we are going to calculate uh we are going to write a program uh to find a to find transpose of a matrix as you should be aware about what is a transpose of a matrix uh so uh like if there is a if there is a matrix just let me comment if there is a matrix let's say uh a b c and a b c and then d e f okay and so the transpose of this transposed Matrix so transpose of this given Matrix would be uh a b c and then here d e f okay so we are going to write the program for doing the same okay so uh firstly uh I would initialize the main function and inside the main function I'll declare the columns and rows so row is equals to 2 and value column is equals to c o l u column is equals to 3 okay now uh I'll take a matrix let's say the Matrix is uh array of array of int array uh two three four and again entire of let's say five four five six four okay now uh uh firstly we will display the current Matrix so so far displaying the current Matrix uh instead of using the for Loop or the loops that we used in the last video uh we will just use the keyword display and then I'll pass the Matrix okay so uh uh in the program display function is only used to print contents of a matrix okay and now I'll initialize the uh the display function okay okay so now inside the display function what I'll do is I have to print the display function okay so as we did in the last video I'll print Ln The Matrix is and then colon okay and then for row N Matrix and then for column in Matrix now I have to print I have to print um column and then some spaces now outside this first for Loop I will print Ln okay so uh this is the code to uh display the Matrix as we did in the last video so we have displayed the particular Matrix now what we can do is uh we can what we will do is we will transpose The Matrix so for Trans posing The Matrix what we have to do is we have to uh like I can introduce another Matrix called transpose and Let It Be equals to the array column and then enter a row so what this particular line means is the column in the transpose is equals to the column in the array okay so and so when I hover over it it's a Well column end okay and when I hover over this this is the array and then this is size and then this is in it and then there is an end okay so it it what it does is it decides the size of the particular uh array okay so sorry a matrix so for uh I in 0 to rho minus 1 uh and inside this I'll uh I'll take another uh for statement for I in02 column minus one and inside this what I'll do is uh I'll make transpose the uh when the transpose one one okay trans pause so I'll do j i in here because uh sorry here here would be J because the transpose 1 1 is equals to the transpose of 1 1 is equal to one when the transpose of two one is one two okay so the transpose of 2 1 is Matrix of 1 2. so I can here do I and then J okay now we have transpose The Matrix so finally we have to display the transposed okay so this uh display transpose and I have already declared the display function so I'll display the transpose and I'll go ahead and run this okay okay there is again some problem okay here it should be uh column in row not column and Matrix so when I run this yeah I can see that this is the Matrix in the starting and this is the transpose Matrix okay so in this video we have basically uh transposed a matrix okay so that's all for this video stay tuned and in this video we are going to cover lists um so uh what are lists basically in kotlin okay so what what are what were arrays arrays are mutable but it cannot take a new entry okay so if there is an array I defined array of let's say 10 entries so let's say the entries in an array is one two three four five six seven eight nine ten respectively and uh so what I can do is I can change the value 2 to 15. okay but I cannot add a new entry let's say 11 2 at the end okay so uh the problem of fixed arrays is solved by lists okay so in lists we can uh add uh new entries okay so uh arrays had a problem that mutable that these are mutable but not but cannot take a new entry now uh this this problem salt was solved by lifts so now what is a list a list can store Many Items of same or the different data types just like errors okay so just like arrays okay it can store uh any items of same or different data types so there are two types of list one is mutable and another is immutable so immutable as the name suggests it it are it it is it is for a fixed sized and fixed values okay so uh and so why why we why do we use immutables so we use the immutable list because um when we work with a lot of data uh and by chance some data uh gets changed by a programmer and it passes the same program to another programmer so uh this whole thing becomes a flop okay and when we debug when we debug that it would take a lot of time in understanding that where was the root of the problem so uh that's why we use immutable list whenever uh the the data is not required to be muted okay because to avoid errors so the second is mutable list as the name suggests the element can be added as well as altered okay so uh firstly in this video we will cover the immutable list okay so uh immutable lists are defined using the immutable lists are defined using the list of keyword okay so let's see the syntax I'll declare a main function and then inside the main function uh I'll declare a list so I can declare it as value or a variable it doesn't matter it is an immutable list so I I'll declare it as a variable for now now the name of the list so let's say I'll name it as immutable list one okay now uh I'll use the list of data type okay now this inside this greater than a less than sign I have to mention the data type of the particular list so uh and we can skip this also okay if I not mention if I will not mention this there is no problem okay so uh I can mention this hi uh this is so I'll mention a character here a okay I'll mention two or three character here B and then also seven numbers okay so uh it is an immutable list okay so uh what happens when uh I'll do immutable lists one uh number one is equals to uh hello okay now instead of this I will say zero so what happens is the parenthesis in is in red it's throws an error so yeah uh it's it it makes it red and when I hover over it it says unresolved reference and none of this following candidate is applicable because the receiver type mismatch okay so it basically says that uh it is an immutable list so we cannot mutate it okay so this is not possible not possible okay now uh there are some basic commands in list uh same as the strings or the uh the array so one is the get index immutable list one dot get index sorry get index to get in bracket index is zero okay uh and I'll just parental in this okay and what happens when I print the list also you can see here okay so when I run this program we will see that in the first line we have the list and in the second line we have the uh add index 0 what we have here is okay so we can see here it this this is the list and this is the zeroth index okay the another command uh commonly used is the index of element command Okay as you might remember or if not uh I'll I'll explain it uh the index of and then I'll mention a particular element let's say uh a okay immutable list without okay so any metable list I will check the index of a so when I run this program it will print me that what is the index of this particular element okay so the answer is 3 0 1 2 3. okay the another command is the last index of element okay so uh when I mentioned the last index of and then one okay and then run this program so what it will do is it will mention the index last index whenever the one is available so if I mention one two three one two two or three more times so it will mention the index of the last one available okay and there is a last index last sub list size okay there is uh these many cons okay so one or two I'll mention and uh I'll mention all of them and I'll I would recommend you to go through the Google and check about all these commands because as I already mentioned the Google is best friend of any programmer so the size uh the dot size mentions the size of an um list or um uh any anything spring or a array okay another is the last index okay so when I mentioned the last index and I run this program so it will just mention whatever thing is present at the last index of the um uh the the list or an array okay so uh emittable lists are generally used to store static inform information in a program okay as I already mentioned uh it is generally used to store static in formation why is it so because uh we don't we cannot uh change the data okay so uh that is all for this video in the next video uh we will cover the mutable list and some problems or some examples upon that so stay tuned
