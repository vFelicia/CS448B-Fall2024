With timestamps:

00:00 - hello guys in this video I'm going to
00:02 - show you how you can set up a very
00:04 - simple junit test for your Java
00:08 - program now what is junit junit is a
00:13 - unit testing framework for Java
00:16 - programming language and it has been
00:19 - important in development of test driven
00:23 - development process so using junit you
00:26 - can set up uh test for your program so
00:30 - that uh you know if your program is
00:33 - really large and you don't have the time
00:36 - to test each and every function manually
00:40 - junit can be used for this these kind of
00:44 - test or J unit test can be used for
00:48 - nightly test so that you can uh write
00:51 - your code in the uh in the day and you
00:55 - can run these uh junit in the night so
00:58 - that you can check uh if your program is
01:03 - uh you know correctly working with other
01:06 - you know classes or not so let's uh
01:09 - create a simple junit test first of all
01:11 - we will create a simple uh project for
01:14 - Java and then we will create uh junit uh
01:18 - test cases for this project so go to
01:22 - files
01:24 - new and Java project and first of all we
01:28 - will create our new jav project and I
01:31 - will name it as my class for
01:34 - example okay and make sure this option
01:37 - in Project layout use project folder as
01:40 - root for sources and class files is
01:44 - selected click next next and click
01:48 - finish so this will create a simple
01:51 - project for us and in here we are going
01:55 - to create a package first so just right
01:59 - click your your project and click new
02:02 - package and this package we will name it
02:07 - as for
02:09 - example
02:13 - um
02:16 - programming knowledge Okay click
02:20 - finish and inside this package we will
02:23 - create a class so create new
02:28 - class and uh this class name we will
02:32 - name it
02:34 - as
02:38 - my
02:40 - J unit
02:44 - class okay and click finish so this will
02:48 - create a class for us and in here we can
02:52 - uh write our program right so let's
02:57 - create uh some simple function inside
03:00 - this class for
03:02 - example public
03:05 - int add so we are going to add two
03:09 - numbers int
03:12 - a int B
03:16 - and it's just going to
03:23 - return the addition of a + b okay uh and
03:29 - let's create one more function and
03:33 - that's going to give us the
03:34 - concatenation of two strings
03:46 - so so these are very simple functions uh
03:50 - the purpose of uh this uh video is not
03:54 - uh you know not to show how to write
03:57 - functions or other things but how to set
04:00 - up a simple uh junit test on our
04:04 - functions okay so now we have created uh
04:07 - simple class and some functions inside
04:11 - our class and now let's uh set up some
04:14 - junit test on this uh these functions so
04:20 - what uh you can do is you
04:23 - can just go to your project and go to
04:28 - new and in here you will be able to see
04:31 - a section called junit test
04:36 - case and these cases you can Define
04:39 - multiple cases for multiple functions
04:43 - okay and these test case combined
04:47 - together to make a suit so you can also
04:50 - create a suit for your test cases so
04:53 - just first of all we will create this
04:55 - junit test case for us and uh you can
05:01 - you know give the name to the test case
05:04 - and in here you can choose uh which uh
05:08 - junit uh Library you want to use new
05:12 - junit 3 test or new junit 4 test we are
05:15 - going to leave it as default which is
05:17 - junit 4 for now and we name our test as
05:23 - my class
05:26 - test
05:27 - okay or Let's uh precisely name our test
05:32 - as ADD test because we are going to use
05:36 - this for this function for adding two
05:40 - integers okay so now what we can do here
05:46 - is Click finish and it's going to ask
05:49 - the which Library you want to uh use and
05:53 - it's going to prompt us that junit 4 is
05:57 - not on build-in part do you want want to
05:59 - add it yes we want to add it and now we
06:04 - have created a simple uh you know test
06:07 - case for us junit test case and this
06:10 - test you can change the name of this
06:13 - test as ADD test for example because we
06:17 - are going to test the add function here
06:21 - and in here you can call your class so
06:25 - we have created this class right J unit
06:29 - test class okay and in here uh we have
06:34 - two functions so we are going to test
06:37 - first function for now right so in this
06:41 - ADD test we will Define our class and we
06:45 - will name it
06:46 - as junit for example is equal to
06:52 - new my junit test class and then we can
06:57 - use this to call the add function inside
07:01 - our J unit class my junit class right so
07:07 - we are expecting int as a
07:12 - result
07:13 - result is equal to
07:18 - J
07:20 - unit
07:21 - dot add
07:24 - okay and in here let's uh pass some
07:28 - numbers 100
07:30 - and 200 okay now this result will be the
07:36 - summation of these two because we are
07:39 - adding uh these two numbers using this
07:42 - function so we can uh just check for the
07:46 - equality
07:48 - using assert
07:52 - equal okay and the first argument of
07:56 - this assert equal function takes the
07:59 - value you are expecting for example 300
08:02 - because we know that the addition of 100
08:05 - and 200 is 300 and then we will pass the
08:09 - result of uh the function which uh which
08:13 - is returned by add function right so
08:17 - this is uh simple test uh we have
08:19 - written for our add function you can uh
08:22 - Define more test cases there are more
08:26 - functions to test the functionality of
08:29 - uh your functions and classes but this
08:32 - is really simple stuff uh I want to show
08:36 - right now now in order to run your test
08:40 - what you need to do is you just need to
08:42 - go to your uh add test. Java which is
08:46 - our junit test case right click on it
08:50 - and now then debug as junit test okay so
08:56 - right click and debug as junit test
08:59 - and what you what are the source file
09:02 - you want to add in it you can leave them
09:05 - as default click
09:07 - okay and now it shows the result here in
09:11 - green line here and it says zero error
09:15 - zero failure so that means our unit test
09:18 - has passed which we have written for the
09:22 - add function in my junit class right now
09:27 - let's uh Define some unexpected result
09:31 - for example we are expecting
09:34 - 3001 and the addition of uh this is 300
09:40 - so this test should fail right so once
09:44 - again we are going to go to our add
09:47 - test. Java and right click and debug as
09:51 - junit okay and now your test fails
09:55 - because the result is 300 and we
09:59 - expecting 3001 so obviously the test
10:02 - will fail
10:04 - right now uh let's define uh second test
10:08 - for uh our second class or second
10:11 - function in the class so just go to your
10:14 - project new junit test and
10:19 - then
10:22 - conat test for example click
10:27 - finish and in have you can change the
10:30 - name of your function
10:32 - as concat test okay and we will delete
10:37 - this and for now let's uh copy the same
10:42 - code from the earlier test and paste it
10:47 - here and we are just going to change uh
10:51 - this result here now we are testing
10:55 - concatenation function which returns
10:58 - string
11:00 - and this will
11:03 - be junit
11:07 - Dot concat and we will pass two strings
11:11 - here for
11:12 - example
11:20 - hello world okay and as a result we are
11:26 - expecting hello world this is uh you
11:29 - know case we have defined this is the
11:32 - case we have defined for our concatenate
11:35 - function right now let's try and run our
11:40 - second test
11:44 - case I forgot to add this semicolon here
11:48 - once again right click your project
11:51 - debug as uh junit test
11:55 - okay and our test passes okay now uh
12:01 - let's create a test suit for our two
12:04 - test so we have written two test for our
12:07 - two functions and now you can define a
12:10 - test suit for all your tests right so
12:14 - right click on your project go to new
12:17 - and in here go to other and in here you
12:21 - will be able to see a category called
12:25 - Java and inside this Java category there
12:28 - is a category called junit and in here
12:31 - just choose this junit test suit click
12:36 - next
12:38 - and here we are uh you know choosing uh
12:43 - Source folder and the name of your suit
12:48 - is all test for example and then you can
12:53 - even choose your package name for
12:56 - example programming knowledge
12:59 - and in here you can choose your test so
13:02 - we going to add both the classes ADD
13:06 - test and concatenate test for uh this
13:10 - suit and click finish so it has created
13:15 - a test suit for us with uh both the test
13:18 - classes ADD test and concatenate test
13:22 - class okay now you can run this all
13:25 - test. Java file right click debug as
13:29 - junit test and it runs your Java suit uh
13:34 - test suit junit test suit and in here
13:37 - you it says both test passes and you
13:42 - know you can see both are green here so
13:46 - in this way you can create a simple
13:47 - junit test for your Java program I hope
13:50 - you have enjoyed this video please wait
13:51 - comment subscribe and bye for

Cleaned transcript:

hello guys in this video I'm going to show you how you can set up a very simple junit test for your Java program now what is junit junit is a unit testing framework for Java programming language and it has been important in development of test driven development process so using junit you can set up uh test for your program so that uh you know if your program is really large and you don't have the time to test each and every function manually junit can be used for this these kind of test or J unit test can be used for nightly test so that you can uh write your code in the uh in the day and you can run these uh junit in the night so that you can check uh if your program is uh you know correctly working with other you know classes or not so let's uh create a simple junit test first of all we will create a simple uh project for Java and then we will create uh junit uh test cases for this project so go to files new and Java project and first of all we will create our new jav project and I will name it as my class for example okay and make sure this option in Project layout use project folder as root for sources and class files is selected click next next and click finish so this will create a simple project for us and in here we are going to create a package first so just right click your your project and click new package and this package we will name it as for example um programming knowledge Okay click finish and inside this package we will create a class so create new class and uh this class name we will name it as my J unit class okay and click finish so this will create a class for us and in here we can uh write our program right so let's create uh some simple function inside this class for example public int add so we are going to add two numbers int a int B and it's just going to return the addition of a + b okay uh and let's create one more function and that's going to give us the concatenation of two strings so so these are very simple functions uh the purpose of uh this uh video is not uh you know not to show how to write functions or other things but how to set up a simple uh junit test on our functions okay so now we have created uh simple class and some functions inside our class and now let's uh set up some junit test on this uh these functions so what uh you can do is you can just go to your project and go to new and in here you will be able to see a section called junit test case and these cases you can Define multiple cases for multiple functions okay and these test case combined together to make a suit so you can also create a suit for your test cases so just first of all we will create this junit test case for us and uh you can you know give the name to the test case and in here you can choose uh which uh junit uh Library you want to use new junit 3 test or new junit 4 test we are going to leave it as default which is junit 4 for now and we name our test as my class test okay or Let's uh precisely name our test as ADD test because we are going to use this for this function for adding two integers okay so now what we can do here is Click finish and it's going to ask the which Library you want to uh use and it's going to prompt us that junit 4 is not on buildin part do you want want to add it yes we want to add it and now we have created a simple uh you know test case for us junit test case and this test you can change the name of this test as ADD test for example because we are going to test the add function here and in here you can call your class so we have created this class right J unit test class okay and in here uh we have two functions so we are going to test first function for now right so in this ADD test we will Define our class and we will name it as junit for example is equal to new my junit test class and then we can use this to call the add function inside our J unit class my junit class right so we are expecting int as a result result is equal to J unit dot add okay and in here let's uh pass some numbers 100 and 200 okay now this result will be the summation of these two because we are adding uh these two numbers using this function so we can uh just check for the equality using assert equal okay and the first argument of this assert equal function takes the value you are expecting for example 300 because we know that the addition of 100 and 200 is 300 and then we will pass the result of uh the function which uh which is returned by add function right so this is uh simple test uh we have written for our add function you can uh Define more test cases there are more functions to test the functionality of uh your functions and classes but this is really simple stuff uh I want to show right now now in order to run your test what you need to do is you just need to go to your uh add test. Java which is our junit test case right click on it and now then debug as junit test okay so right click and debug as junit test and what you what are the source file you want to add in it you can leave them as default click okay and now it shows the result here in green line here and it says zero error zero failure so that means our unit test has passed which we have written for the add function in my junit class right now let's uh Define some unexpected result for example we are expecting 3001 and the addition of uh this is 300 so this test should fail right so once again we are going to go to our add test. Java and right click and debug as junit okay and now your test fails because the result is 300 and we expecting 3001 so obviously the test will fail right now uh let's define uh second test for uh our second class or second function in the class so just go to your project new junit test and then conat test for example click finish and in have you can change the name of your function as concat test okay and we will delete this and for now let's uh copy the same code from the earlier test and paste it here and we are just going to change uh this result here now we are testing concatenation function which returns string and this will be junit Dot concat and we will pass two strings here for example hello world okay and as a result we are expecting hello world this is uh you know case we have defined this is the case we have defined for our concatenate function right now let's try and run our second test case I forgot to add this semicolon here once again right click your project debug as uh junit test okay and our test passes okay now uh let's create a test suit for our two test so we have written two test for our two functions and now you can define a test suit for all your tests right so right click on your project go to new and in here go to other and in here you will be able to see a category called Java and inside this Java category there is a category called junit and in here just choose this junit test suit click next and here we are uh you know choosing uh Source folder and the name of your suit is all test for example and then you can even choose your package name for example programming knowledge and in here you can choose your test so we going to add both the classes ADD test and concatenate test for uh this suit and click finish so it has created a test suit for us with uh both the test classes ADD test and concatenate test class okay now you can run this all test. Java file right click debug as junit test and it runs your Java suit uh test suit junit test suit and in here you it says both test passes and you know you can see both are green here so in this way you can create a simple junit test for your Java program I hope you have enjoyed this video please wait comment subscribe and bye for
