With timestamps:

00:00 - hello guys welcome to the first video on
00:03 - Android escal database tutorial for
00:05 - beginners in this video series I'm going
00:08 - to show you how you can get started with
00:10 - escolite using Android we will look uh
00:14 - in this video series how we can create a
00:18 - database and perform some database uh
00:22 - queries like insertion updation or
00:26 - deletion or other basic queries on
00:30 - database using
00:32 - Android so let's get started and let's
00:35 - see uh some important stuff regarding SQ
00:39 - light on
00:41 - Android so first of all what is SQ light
00:46 - as you all know sqlite is a database
00:49 - which is a open-source database so you
00:51 - can use it for free and it's a
00:55 - relational database okay and the most
01:00 - important feature about sqli database is
01:04 - it's a local database so it doesn't
01:07 - require any server or any odbc or jdbc
01:12 - queries for query or connection for its
01:16 - uh you know functionality it's just you
01:19 - can say it saves its data into a text
01:22 - file and it's saved locally on your uh
01:27 - you can say mobile uh device or your
01:30 - tablet or whatever Android device you
01:33 - are using and Android comes with the
01:37 - built-in eslite database implementation
01:40 - so you don't need to install any extra
01:43 - uh libraries to use site with
01:48 - Android and the last uh point is to
01:52 - create update a database in your Android
01:56 - application you can create a subass of a
01:59 - class called
02:01 - escolite open helper this is a class
02:05 - which will help us to create and you
02:08 - know manage our sqlite database now
02:12 - enough uh of the theory let's go to the
02:16 - Practical part and let's start with
02:20 - creating uh our app from scratch so just
02:24 - open your Android Studio we are going to
02:27 - start a new Android application and we
02:29 - will name our application
02:32 - as
02:33 - escolite app for example and then click
02:37 - next or select your minimum SDK as you
02:42 - already know how to select it click next
02:45 - and I'm going to select a blank activity
02:48 - next and Main activity is okay for me so
02:52 - I'm going to finish now once your basic
02:55 - uh app is created what we are going to
02:58 - do is we are going to create a
03:02 - class for handling the sqlite database
03:07 - so go to your app folder and in the app
03:10 - folder go to the Java folder and inside
03:14 - here go to the
03:16 - package in which your main activity is
03:19 - there so this is a package in which my
03:22 - main activity is there so just go to the
03:24 - package and right click this package and
03:27 - we are going to create a new Java class
03:30 - and uh we will name it
03:33 - as
03:36 - database helper class okay and click
03:41 - okay and this is a basic uh blank uh
03:45 - class and in here as we have discussed
03:49 - we want to uh create or we want to
03:53 - extend this uh class using our escolite
03:58 - open helper
04:00 - so just uh go here and just write extend
04:05 - escolite open helper okay and uh it will
04:11 - uh show some error because we haven't uh
04:14 - imported the classes related to this
04:18 - escolite open helper so just click Alt
04:21 - Enter and just click this uh button
04:25 - called import class and it's going to
04:28 - import this uh class okay still it's
04:32 - showing error because we need to create
04:36 - or Implement some of the method from it
04:40 - so you will be able to see a small bulb
04:43 - red bulb here you just need to click
04:46 - this uh bulb and then you just need to
04:51 - click Implement methods and there are
04:53 - two important method related to this
04:55 - class which are on Create and on upgrade
04:59 - you are going to select both of them and
05:01 - click
05:02 - okay and one more thing which is
05:06 - required is to create a default
05:08 - Constructor so once again click this red
05:12 - bulb here
05:14 - and just choose create Constructor
05:17 - matching super okay and we are going to
05:20 - select first of them and just create it
05:24 - okay so we have successfully created our
05:27 - database helper class which EX extends
05:30 - from our esite open helper which is the
05:34 - main class for handling
05:37 - site and we have some basic uh methods
05:40 - here and a
05:42 - Constructor now for creating uh database
05:47 - first of all we need a database name now
05:52 - let's uh see how we can you know how we
05:56 - are going to create a database and what
05:58 - will be the name of of our database and
06:01 - uh all other stuff so for uh this for
06:06 - example to start with we are going to
06:08 - create a escal database like this and
06:13 - the name of the database will be
06:15 - student. DB
06:18 - the escolite database is not case
06:22 - sensitive so you can use upper cases and
06:25 - smaller cases uh together and it's not
06:29 - not case sensitive so case doesn't
06:31 - matter in escolite okay so our database
06:34 - name will be as student. DB and it's
06:38 - going to contain four columns first for
06:41 - ID for the student second is the name
06:44 - for the student third is the surname or
06:47 - last name for the student and fourth
06:50 - column will be the marks scored by the
06:52 - student and we are going to create
06:55 - database uh or insert some data like
06:58 - this so ID will can be 1 2 3 4 for
07:01 - example name surnames and marks coded by
07:06 - this student and in this video we will
07:08 - just see how we can create this database
07:11 - which is
07:12 - student. DB and create the table this
07:15 - table for our database
07:19 - okay so now what we are going to do is
07:23 - Let's uh declare some variables so that
07:27 - uh we can Define the name of our
07:29 - database so let's declare our uh
07:32 - variable which we are going to assign
07:35 - the database name okay so let's declare
07:39 - public static final string and let's
07:42 - declare a variable name called
07:45 - database uncore name and we will assign
07:49 - the name of our database for
07:52 - example student.
07:55 - DB student. DB and I have told you uh
08:00 - that case doesn't matter you can you
08:03 - know write student. DB like this or in
08:07 - capital it doesn't matter it's going to
08:10 - uh treat them as same okay
08:16 - and second what we are going to do is we
08:19 - are going to declare our table name so
08:23 - this will be our
08:25 - table name and let's uh give the name to
08:30 - our table
08:33 - as student data table or student table
08:38 - which will resonate perfectly with our
08:43 - table and as we have discussed this
08:47 - table is going to contain four columns 1
08:50 - 2 3 4 and for Simplicity Let's uh keep
08:55 - all the uh variables as string First
08:58 - Column name name was ID okay so
09:04 - ID for the student and the table name is
09:08 - uh column name is ID right so or you can
09:13 - do something like this call underscore 1
09:16 - column one is ID and similarly column 2
09:21 - column 3 column 4 so like this column 2
09:25 - column 3 column 4 first is First Column
09:30 - was ID second column was name third
09:33 - column was
09:38 - surname and fourth column was
09:44 - marks okay so these are the four columns
09:47 - this is our table name and this is our
09:50 - database name now in order to uh create
09:54 - our database first what we are going to
09:57 - do is we are are going to uh in the
10:00 - Constructor we are going to create our
10:04 - database so we need to call a function
10:06 - which creates the database
10:10 - right so for Simplicity let's reduce our
10:14 - Constructor which only takes uh this
10:18 - context okay and as you can see here the
10:22 - super class uh we can just give the name
10:26 - of our database so our database name is
10:29 - this variable pass it here third is
10:32 - Factory we are going to pass null here
10:36 - and the version for example version is
10:39 - equal to one now whenever this
10:42 - Constructor is called your datab base
10:45 - will be
10:46 - created
10:52 - okay

Cleaned transcript:

hello guys welcome to the first video on Android escal database tutorial for beginners in this video series I'm going to show you how you can get started with escolite using Android we will look uh in this video series how we can create a database and perform some database uh queries like insertion updation or deletion or other basic queries on database using Android so let's get started and let's see uh some important stuff regarding SQ light on Android so first of all what is SQ light as you all know sqlite is a database which is a opensource database so you can use it for free and it's a relational database okay and the most important feature about sqli database is it's a local database so it doesn't require any server or any odbc or jdbc queries for query or connection for its uh you know functionality it's just you can say it saves its data into a text file and it's saved locally on your uh you can say mobile uh device or your tablet or whatever Android device you are using and Android comes with the builtin eslite database implementation so you don't need to install any extra uh libraries to use site with Android and the last uh point is to create update a database in your Android application you can create a subass of a class called escolite open helper this is a class which will help us to create and you know manage our sqlite database now enough uh of the theory let's go to the Practical part and let's start with creating uh our app from scratch so just open your Android Studio we are going to start a new Android application and we will name our application as escolite app for example and then click next or select your minimum SDK as you already know how to select it click next and I'm going to select a blank activity next and Main activity is okay for me so I'm going to finish now once your basic uh app is created what we are going to do is we are going to create a class for handling the sqlite database so go to your app folder and in the app folder go to the Java folder and inside here go to the package in which your main activity is there so this is a package in which my main activity is there so just go to the package and right click this package and we are going to create a new Java class and uh we will name it as database helper class okay and click okay and this is a basic uh blank uh class and in here as we have discussed we want to uh create or we want to extend this uh class using our escolite open helper so just uh go here and just write extend escolite open helper okay and uh it will uh show some error because we haven't uh imported the classes related to this escolite open helper so just click Alt Enter and just click this uh button called import class and it's going to import this uh class okay still it's showing error because we need to create or Implement some of the method from it so you will be able to see a small bulb red bulb here you just need to click this uh bulb and then you just need to click Implement methods and there are two important method related to this class which are on Create and on upgrade you are going to select both of them and click okay and one more thing which is required is to create a default Constructor so once again click this red bulb here and just choose create Constructor matching super okay and we are going to select first of them and just create it okay so we have successfully created our database helper class which EX extends from our esite open helper which is the main class for handling site and we have some basic uh methods here and a Constructor now for creating uh database first of all we need a database name now let's uh see how we can you know how we are going to create a database and what will be the name of of our database and uh all other stuff so for uh this for example to start with we are going to create a escal database like this and the name of the database will be student. DB the escolite database is not case sensitive so you can use upper cases and smaller cases uh together and it's not not case sensitive so case doesn't matter in escolite okay so our database name will be as student. DB and it's going to contain four columns first for ID for the student second is the name for the student third is the surname or last name for the student and fourth column will be the marks scored by the student and we are going to create database uh or insert some data like this so ID will can be 1 2 3 4 for example name surnames and marks coded by this student and in this video we will just see how we can create this database which is student. DB and create the table this table for our database okay so now what we are going to do is Let's uh declare some variables so that uh we can Define the name of our database so let's declare our uh variable which we are going to assign the database name okay so let's declare public static final string and let's declare a variable name called database uncore name and we will assign the name of our database for example student. DB student. DB and I have told you uh that case doesn't matter you can you know write student. DB like this or in capital it doesn't matter it's going to uh treat them as same okay and second what we are going to do is we are going to declare our table name so this will be our table name and let's uh give the name to our table as student data table or student table which will resonate perfectly with our table and as we have discussed this table is going to contain four columns 1 2 3 4 and for Simplicity Let's uh keep all the uh variables as string First Column name name was ID okay so ID for the student and the table name is uh column name is ID right so or you can do something like this call underscore 1 column one is ID and similarly column 2 column 3 column 4 so like this column 2 column 3 column 4 first is First Column was ID second column was name third column was surname and fourth column was marks okay so these are the four columns this is our table name and this is our database name now in order to uh create our database first what we are going to do is we are are going to uh in the Constructor we are going to create our database so we need to call a function which creates the database right so for Simplicity let's reduce our Constructor which only takes uh this context okay and as you can see here the super class uh we can just give the name of our database so our database name is this variable pass it here third is Factory we are going to pass null here and the version for example version is equal to one now whenever this Constructor is called your datab base will be created okay
