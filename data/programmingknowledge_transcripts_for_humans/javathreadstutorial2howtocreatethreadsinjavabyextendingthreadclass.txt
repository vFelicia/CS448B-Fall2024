With timestamps:

00:01 - hello guys welcome to the next video on
00:03 - Java thread tutorial for beginners in
00:05 - the last video I have given you the
00:07 - overview of threads in Java and I have
00:11 - told you in the last video that you can
00:13 - create threads in Java in two ways one
00:17 - is by subclassing from thread class and
00:22 - other way is by implementing the
00:25 - runnable interface and in both cases you
00:28 - need to implement this run method so in
00:33 - this video I'm going to show you this
00:35 - first way of creating class by
00:38 - subclassing from the thread class so
00:41 - let's uh go to our Eclipse IDE here I
00:45 - have a blank project whose name is
00:48 - thread demo and inside this uh project
00:51 - I'm going to create a package and I will
00:53 - name it as lesson one for example and
00:56 - inside this lesson one package I'm going
00:59 - to create create a class called demo and
01:02 - it's going to have this main method and
01:05 - I'm going to finish it now as I told you
01:09 - we want to extend from the thread class
01:12 - in order to create a thread so I will
01:15 - create a class and this class I will
01:19 - name it as my class which extends from a
01:24 - thread class second thing we have
01:26 - learned that we need to implement run
01:30 - method in order to create a class right
01:33 - so to implement this run method you can
01:37 - just write click and go to source and in
01:41 - Source you can go to overwrite SL
01:44 - Implement methods and in here you can
01:47 - see all the method you can override or
01:50 - Implement and the method which we want
01:52 - to override is this run method so click
01:56 - this and click okay and it's going to
01:58 - implement it now right now we don't
02:01 - really need all this uh you know
02:04 - autogenerated code so you can delete it
02:08 - or leave it it's on you what I want to
02:11 - do is I want to uh for example perform
02:15 - some code for example I want to print
02:17 - some number 10 times right so int I is
02:22 - equal to 0o and I should be less than
02:27 - zero and I ++ and I want to print the
02:33 - value of I 10 times this is very simple
02:36 - so I will just write thisis out and in
02:39 - here I want to print the value for
02:41 - example Value Plus I and what this is
02:46 - going to do it's going to just print the
02:49 - value of I right so now we will go to
02:53 - our main method in our demo class but
02:56 - first of all let me correct this it
02:57 - should be less than 10 I should be less
03:01 - than 10 right it should not be less than
03:03 - zero so let's go to our main method in
03:07 - our demo class and we can create an
03:09 - instance of this my
03:11 - class and we can call it
03:14 - my class is equal to
03:18 - new my class and you can use this my
03:21 - class object and call a method called
03:25 - start on it so remember you don't need
03:27 - to call run method
03:30 - from your my class but you need to call
03:33 - a start method if you call run on your
03:37 - my class object it's going to run like a
03:40 - normal program no thread will be created
03:43 - but if you call the start method on your
03:47 - my class object which extend from the
03:49 - thread class is going to create a thread
03:52 - and then it's going to call this run
03:55 - method automatically so let's uh run our
03:59 - Pro program now so just run it and what
04:03 - it does it prints 10 numbers right or 0
04:07 - to 9 right so nothing special how will
04:09 - you know that uh threads is really
04:13 - running so what we can do is we can
04:16 - create a second instance of my class and
04:20 - we can call it my class one for example
04:24 - so we have created two instance of my
04:26 - class one is this one and one is this
04:28 - one right and and now let's run the
04:31 - program and what it does it's printing
04:35 - value zero two times value one two times
04:39 - and here you can see threads in effect
04:43 - right so what's going on you have
04:46 - created first thread and you can have
04:49 - created second thread and first thread
04:52 - is called first and then second thread
04:55 - is called first and then they are
04:57 - running congruently to print print the
05:00 - number values now how will you know
05:03 - which thread is calling which value here
05:07 - so in order to know that there is a
05:10 - function in the thread class which we
05:13 - are going to call in our this print line
05:16 - method or system out method uh and just
05:20 - call thread. current thread. get ID okay
05:24 - and it's going to give you the current
05:26 - tread ID okay and then you will know
05:30 - which thread is running or which thread
05:32 - is printing which value so let Let's uh
05:36 - run the program once again let's run it
05:39 - and now you can see what is happening
05:42 - here so here you can see the thread
05:46 - number so the number is given to the
05:50 - thread and in this case the number 10 is
05:53 - given to the thread one and number 11 is
05:56 - given to the thread 2 right and it's
05:59 - using thread 1 and printing value 1 2 3
06:03 - 4 5 6 until 9 and it's going to take the
06:06 - thread two and it's printing the value
06:09 - from 0 to 9 right but they are running
06:11 - in sequence right now now in order to
06:14 - check further that these uh threads can
06:18 - run in
06:20 - concurrency uh what we can do is we can
06:23 - use a method CL called thread sleep so
06:26 - just use a method thread do sleep leap
06:30 - and what it does is it takes an argument
06:33 - which takes milliseconds so for for
06:36 - example we want to pause this thread for
06:39 - 100 milliseconds it's going to pause
06:42 - this uh you know method for 100
06:45 - milliseconds but when you uh call this
06:48 - method it's going to ask to enclose it
06:51 - in the TR catch uh block because it can
06:54 - throw okay so I just click this small
06:59 - but bub here and then just click this
07:02 - surround with try catch and it's going
07:04 - to surround it by try catch right and
07:08 - now let's run it once again so let's run
07:10 - the program once again and now you can
07:13 - see first of all first thread is called
07:17 - and then the value zero then second
07:20 - value zero then first then second then
07:23 - first then second so in this way you
07:27 - know that they are running in
07:29 - concurrency or so in this way you can
07:32 - create a thread or create different
07:35 - threads by extending from the thread
07:38 - class in the next video I'm going to
07:41 - show you how you can implement this
07:43 - runnable interface to create the same
07:48 - threads so I hope you have enjoyed this
07:50 - video please rate comment and subscribe
07:52 - and bye

Cleaned transcript:

hello guys welcome to the next video on Java thread tutorial for beginners in the last video I have given you the overview of threads in Java and I have told you in the last video that you can create threads in Java in two ways one is by subclassing from thread class and other way is by implementing the runnable interface and in both cases you need to implement this run method so in this video I'm going to show you this first way of creating class by subclassing from the thread class so let's uh go to our Eclipse IDE here I have a blank project whose name is thread demo and inside this uh project I'm going to create a package and I will name it as lesson one for example and inside this lesson one package I'm going to create create a class called demo and it's going to have this main method and I'm going to finish it now as I told you we want to extend from the thread class in order to create a thread so I will create a class and this class I will name it as my class which extends from a thread class second thing we have learned that we need to implement run method in order to create a class right so to implement this run method you can just write click and go to source and in Source you can go to overwrite SL Implement methods and in here you can see all the method you can override or Implement and the method which we want to override is this run method so click this and click okay and it's going to implement it now right now we don't really need all this uh you know autogenerated code so you can delete it or leave it it's on you what I want to do is I want to uh for example perform some code for example I want to print some number 10 times right so int I is equal to 0o and I should be less than zero and I ++ and I want to print the value of I 10 times this is very simple so I will just write thisis out and in here I want to print the value for example Value Plus I and what this is going to do it's going to just print the value of I right so now we will go to our main method in our demo class but first of all let me correct this it should be less than 10 I should be less than 10 right it should not be less than zero so let's go to our main method in our demo class and we can create an instance of this my class and we can call it my class is equal to new my class and you can use this my class object and call a method called start on it so remember you don't need to call run method from your my class but you need to call a start method if you call run on your my class object it's going to run like a normal program no thread will be created but if you call the start method on your my class object which extend from the thread class is going to create a thread and then it's going to call this run method automatically so let's uh run our Pro program now so just run it and what it does it prints 10 numbers right or 0 to 9 right so nothing special how will you know that uh threads is really running so what we can do is we can create a second instance of my class and we can call it my class one for example so we have created two instance of my class one is this one and one is this one right and and now let's run the program and what it does it's printing value zero two times value one two times and here you can see threads in effect right so what's going on you have created first thread and you can have created second thread and first thread is called first and then second thread is called first and then they are running congruently to print print the number values now how will you know which thread is calling which value here so in order to know that there is a function in the thread class which we are going to call in our this print line method or system out method uh and just call thread. current thread. get ID okay and it's going to give you the current tread ID okay and then you will know which thread is running or which thread is printing which value so let Let's uh run the program once again let's run it and now you can see what is happening here so here you can see the thread number so the number is given to the thread and in this case the number 10 is given to the thread one and number 11 is given to the thread 2 right and it's using thread 1 and printing value 1 2 3 4 5 6 until 9 and it's going to take the thread two and it's printing the value from 0 to 9 right but they are running in sequence right now now in order to check further that these uh threads can run in concurrency uh what we can do is we can use a method CL called thread sleep so just use a method thread do sleep leap and what it does is it takes an argument which takes milliseconds so for for example we want to pause this thread for 100 milliseconds it's going to pause this uh you know method for 100 milliseconds but when you uh call this method it's going to ask to enclose it in the TR catch uh block because it can throw okay so I just click this small but bub here and then just click this surround with try catch and it's going to surround it by try catch right and now let's run it once again so let's run the program once again and now you can see first of all first thread is called and then the value zero then second value zero then first then second then first then second so in this way you know that they are running in concurrency or so in this way you can create a thread or create different threads by extending from the thread class in the next video I'm going to show you how you can implement this runnable interface to create the same threads so I hope you have enjoyed this video please rate comment and subscribe and bye
