With timestamps:

00:00 - and in this video guys we're going to
00:01 - discuss and i'm going to teach you how
00:03 - to
00:04 - implement functions in our c program so
00:07 - basically guys a c function is a
00:10 - self-contained block of statements
00:12 - that can be executed repeatedly whenever
00:15 - we need it so
00:17 - if you think about it it is just you
00:19 - know a group
00:20 - of statements that we could um call and
00:23 - we could use
00:24 - repeatedly within our c program
00:27 - so in this particular video guys we're
00:29 - going to discuss the benefits
00:30 - of using the functions in c program
00:34 - we will also discuss
00:37 - two types of functions in c
00:41 - also the parts of function the function
00:44 - prototype
00:45 - the function definition and of course
00:48 - we're going to
00:50 - discuss also how to call a function
00:53 - inside our c
00:54 - program and lastly we will implement a
00:56 - basic program to illustrate
00:58 - the addition of two numbers using user
01:02 - defined
01:03 - function so if you're excited guys
01:05 - please make sure to watch the full video
01:07 - you will learn more in this particular
01:10 - video tutorial
01:11 - and by the way guys if you are new here
01:13 - in our youtube channel
01:14 - and you like content about programming
01:17 - so go ahead
01:18 - make sure to subscribe and press the
01:20 - notification bell
01:21 - so you'll get updated whenever we have a
01:24 - new upload regarding
01:25 - different programmings or different
01:26 - topics so we have topics python
01:29 - java javafx c programming and
01:33 - many many other topics regarding
01:36 - programming
01:36 - so now let's try to talk about benefits
01:39 - of
01:40 - using function in c so there are a lot
01:43 - of functions
01:44 - that you know we could associate in
01:47 - using function inside rc program so the
01:50 - first one is modularity
01:54 - so when we are using functions it could
01:56 - provide modularity
01:58 - in our code so it means that we could
02:02 - you know define different functions we
02:03 - could
02:04 - uh readily call our functions and
02:08 - we could call this particular function
02:11 - if
02:12 - we need it or we need to execute certain
02:14 - statements
02:16 - and of course guys the function also
02:18 - provides you reusable call me
02:21 - it will save us a lot of space
02:24 - and you know it could be our code could
02:28 - be you know read
02:29 - more readable by using this particular
02:33 - function feature
02:35 - so that's readable or usable code
02:41 - and then in large programs debugging
02:45 - and editing tasks is easy with the use
02:48 - of functions so functions
02:51 - uh make it easy for us to implement our
02:54 - programs so the program can be
02:57 - modularized into smaller parts
02:59 - that's what i have said earlier that we
03:02 - could you know
03:03 - develop a certain module inside our c
03:06 - program
03:07 - and then we can call that particular
03:08 - module or statements
03:10 - or group of statements if we need in a
03:13 - particular situation
03:15 - and number um the the next one is
03:18 - separate function independently can be
03:21 - developed
03:22 - according to the need so so for example
03:24 - guess we could group our statements
03:26 - depending on the need or you know
03:28 - depending on the
03:30 - the function or or the purpose of that
03:33 - statement so we could group that
03:35 - statements
03:36 - and uh place it inside our c function
03:39 - so actually guys there are two types of
03:41 - functions in c
03:43 - so the first one is
03:46 - let me type it here type of functions
03:52 - we have the first one built in
03:55 - function
03:59 - okay so built-in function um
04:02 - of course the system provided these
04:04 - functions and stored in the library
04:07 - therefore it is called um library
04:10 - functions
04:11 - so we have like we are using scanf
04:14 - printf str strc py
04:19 - um crlwr strc
04:22 - mp cr then sdr cut
04:26 - and many more functions that are already
04:29 - available for us
04:30 - whenever we try to run a program so from
04:33 - the
04:34 - previous tutorials we have used the
04:35 - printf
04:37 - so as you can see this particular
04:38 - function we did not
04:41 - implement this the system provided it
04:44 - for us the printf
04:45 - and this particular function will let us
04:47 - display
04:49 - um certain um objects
04:53 - or statements that we want is we want to
04:55 - display
04:56 - inside our c program so to use this
04:59 - functions
05:00 - you just need to include the appropriate
05:03 - c header file so that's why we have here
05:06 - the include statement at the top of our
05:10 - program
05:11 - so basically we're including all the
05:13 - necessary function that we could use
05:16 - inside our c program
05:19 - and of course guys the the second type
05:22 - of
05:23 - [Music]
05:24 - method is what we call the user-defined
05:29 - functions user-defined functions
05:34 - okay so user-defined user-defined
05:37 - functions these are the functions that
05:39 - are
05:39 - defined by the user at the time of
05:42 - writing the
05:43 - program so that's basically us or the
05:45 - programmer
05:47 - that you know define the
05:51 - functions okay and then of course the
05:53 - same with the
05:56 - built-in function we could you know
05:57 - really use this particular functions
06:00 - inside rc program now there are there
06:03 - are
06:03 - also parts of our function
06:06 - in c programming language we have the
06:10 - function declaration
06:14 - we also have the definition
06:18 - and we also have the function call
06:22 - so this is basically the actual flow
06:26 - of the function we have the function
06:29 - declaration
06:30 - declaration and then we have the
06:33 - definition we have
06:34 - of course the function called if you
06:36 - want to use
06:37 - that particular function so we have here
06:42 - for example syntax for
06:45 - function declaration so we could um
06:48 - [Music]
06:49 - this will be the function declaration
06:56 - this is just an example guys on how you
06:58 - can
06:59 - declare a certain function so the syntax
07:03 - for that
07:03 - is data type and then
07:07 - function name and then of course
07:11 - open and close parenthesis and then in
07:13 - here you can specify
07:15 - the parameter list okay or
07:18 - the variables that we want to use inside
07:21 - this particular function
07:25 - so our example of that is like this
07:28 - in which is the data type and of course
07:31 - addition
07:32 - which is the uh name of our function
07:36 - so addition and then the return type is
07:39 - int
07:40 - and then of course the list of
07:42 - parameters and
07:43 - in this case we don't have any parameter
07:46 - in this particular function addition
07:49 - so we also have the function definition
07:52 - this is actually what
07:54 - um the actual function would look like
07:59 - so this will be function declaration or
08:01 - i mean function
08:03 - definition okay
08:06 - so we could uh this the basic syntax to
08:09 - this
08:10 - is return type
08:15 - and then the function name
08:18 - and then function arguments
08:24 - and then curly braces
08:28 - so it should include the close or open
08:31 - and close curly braces
08:32 - and then inside here is the body of the
08:34 - function
08:36 - or simply the statements that we want to
08:39 - execute
08:40 - inside this particular function so
08:41 - whenever we want to call this
08:44 - function this will be the statements
08:47 - that
08:48 - that you know would be executed inside
08:50 - this particular
08:52 - function so in order for us to call a
08:55 - function inside our c
08:56 - program we just need to specify
09:00 - the method name and of course we need to
09:04 - supply parameters if there's a if there
09:07 - are any
09:08 - and we would also need to specify the
09:11 - return type of
09:12 - our function so now let's try to
09:16 - implement a simple program that you know
09:18 - that could
09:19 - uh illustrate the addition of two
09:22 - numbers
09:23 - um using user defined function so we
09:26 - have here the main function right
09:28 - and then in here after the main or after
09:32 - the closing curly brace of our main
09:34 - function
09:35 - we could create we could create
09:38 - our own function right here
09:41 - let me close this first so you can you
09:44 - know see better
09:47 - so we could add a function here
09:50 - returning the total
09:54 - of two numbers okay
09:57 - so we could declare it like this in and
09:59 - then
10:02 - addition
10:04 - open and close cur uh parenthesis and
10:07 - then open and close curly braces and
10:09 - of course guys as i've said this is this
10:11 - will be the body of our function
10:13 - so in here we could um
10:16 - define local variables
10:21 - okay so local variables
10:27 - so for example we have in num
10:31 - one it was 10
10:34 - and then num 2 equals 5
10:38 - right so these are local variables
10:41 - meaning these are the variables that are
10:44 - declared
10:45 - and defined inside the addition method
10:48 - or
10:48 - function okay so we can say here
10:52 - return and then num1
10:55 - plus num2 okay
10:58 - so that's the statement that we want to
11:00 - execute when
11:02 - whenever we try to call the addition
11:05 - method where i mean function so inside
11:08 - our main function we could call this
11:10 - um method addition so we could
11:14 - declare a variable here in answer
11:18 - and then we could say answer equals
11:22 - and then the addition so basically
11:26 - whatever the
11:27 - return value of this addition
11:30 - method it will be assigned into our
11:32 - answer
11:33 - variable and of course we could print
11:37 - or display this particular value so we
11:40 - could
11:41 - say the total of
11:44 - two numbers yes
11:48 - and then the format specifier just you
11:51 - know percent d
11:53 - and then the answer
11:56 - which is the answer variable
12:00 - okay so we could you know build and run
12:03 - our application
12:04 - application and then we have here the
12:08 - output the total
12:10 - of two numbers is 15
12:14 - okay so that's how the function works
12:16 - and as you can see here
12:18 - we have defined our function
12:21 - with the statements inside our c
12:24 - function to return the total
12:26 - of the number one in number two
12:29 - and then inside our main function we
12:32 - have
12:32 - declared the answer and then the type is
12:36 - in of course because the in is should
12:39 - correspond to the return type
12:41 - of this particular function and then
12:43 - answer
12:44 - equals the addition and then the last
12:47 - thing
12:48 - that we need here is to display
12:51 - the total of two numbers and in this
12:54 - case
12:55 - 10 and five which makes
12:58 - it you know the value or the output
13:02 - is 15. so we're going to learn how to
13:04 - use
13:05 - c function arguments or parameters
13:08 - inside
13:09 - our function so from the previous
13:12 - tutorial we have learned how to define
13:15 - and declare our function inside our c
13:17 - program
13:18 - and of course we have learned how to use
13:20 - the basic syntax
13:21 - to create a function and implemented a
13:24 - simple
13:25 - function that could add two numbers
13:29 - okay so as i've said guys in this video
13:31 - we're going to focus on
13:32 - the function arguments or function
13:34 - parameters
13:35 - so while calling a function the
13:37 - arguments can be passed
13:39 - to a function in two ways so there
13:42 - there are two ways on how we could
13:45 - pass the parameters or the arguments
13:48 - into the
13:49 - function so the first one will be call
13:53 - by value and the second one
13:56 - is call by reference
14:00 - okay so in call by value
14:03 - way the actual parameter is passed to a
14:06 - function
14:07 - and then new memory area created for
14:10 - that particular past parameters
14:12 - and then it can be used only within that
14:15 - function
14:16 - and the actual parameters cannot be
14:18 - modified
14:19 - in the call by value uh
14:22 - way of you know passing the the argument
14:25 - into our function while call by
14:28 - reference
14:29 - so instead of copying a variable an
14:31 - address is passed to
14:33 - a function as parameter and then
14:36 - we could use the address operator which
14:39 - is the ampersand symbol
14:41 - i know if you're already familiar with
14:43 - this
14:44 - so address operator is used in the
14:47 - parameter of
14:48 - the called function and of course the
14:51 - changes in the function
14:53 - reflect the change of the original
14:55 - values
14:56 - so we could uh understand this better if
14:59 - we try to implement
15:00 - our function by you know creating a
15:04 - simple project or simple
15:06 - application that could demonstrate the
15:08 - call by value or
15:10 - call by reference so first let's try to
15:13 - create a program
15:18 - that would pass the argument us or
15:21 - it could call by value so the first
15:24 - thing that we're going to need is of
15:25 - course
15:26 - to it's actually the same
15:29 - with the program or i mean
15:32 - function that we have created from the
15:35 - previous tutorial
15:36 - but the difference is that in this
15:39 - particular video we're going to use
15:40 - parameter or argument so the first
15:44 - variable that we're going to declare
15:46 - here is
15:48 - the answer so the type is in
15:52 - and then we have the variable
15:56 - name num1 so the value is 5
16:01 - and then in num2 and then the value is
16:07 - okay and of course guys we could declare
16:12 - the function
16:13 - so for example we could
16:16 - um create the
16:19 - function right after this closing curly
16:22 - brace of our main function
16:24 - so the first thing of course is the
16:27 - return type
16:29 - and in this case in and then the name of
16:31 - our function which is addition
16:34 - and we could say here in a
16:38 - and in b basically
16:41 - it means that this particular function
16:44 - would accept
16:45 - two parameter in b and
16:49 - uh int a okay and then in here we could
16:52 - return the value or
16:54 - the total value of this two parameters
16:56 - so a
16:57 - plus b okay and of course guys
17:01 - we could declare the function right here
17:04 - so we could you know
17:06 - add the function declaration here
17:09 - function
17:10 - declaration so you could say here
17:14 - in addition and then this particular
17:17 - function
17:18 - is going to take two parameters in num1
17:21 - and in
17:22 - num2 so as you can see here guys this is
17:25 - only the function declaration
17:27 - okay and this is the function
17:30 - definition function definition
17:39 - again this is function declaration
17:42 - declaration
17:44 - and function definition
17:47 - so now we could try to call
17:50 - our function by value so for example you
17:54 - can say here
17:56 - [Music]
17:58 - answer and then it was
18:01 - um addition which is the method or the
18:05 - function
18:05 - that we have created here and then we
18:09 - could
18:09 - pass along the values of num1
18:13 - and num2 okay so let me explain this
18:17 - first for you so it would be clear for
18:19 - you
18:20 - so we have here the parameter num1 num2
18:23 - as i've said in call by value
18:26 - the actual parameters cannot be modified
18:30 - because
18:30 - num1 and num2 is it won't
18:33 - change um even if we
18:37 - you know change the parameters here
18:39 - between a and b
18:41 - so the value of num1 and num2 would not
18:44 - change even if we try to modify this
18:46 - in a and b inside our addition
18:50 - function so the actual parameter is
18:53 - passed to a function
18:54 - and then new memory will be created for
18:57 - our parameters e
18:59 - uh in a n in b
19:02 - okay and of course
19:06 - um we could display here the result so
19:09 - printf and then of course
19:13 - the statement the addition
19:16 - or you could say the total
19:20 - of two numbers yes
19:25 - and then the format specifier percent d
19:28 - and then the variable answer
19:31 - okay and then we could you know clean
19:34 - and build
19:35 - our application or build and run
19:38 - and it should display the output
19:41 - something like this the total
19:42 - of two numbers is 15
19:46 - okay so you get the point this is the
19:49 - calling of function by value
19:52 - okay now if we want to try to
19:55 - call a function by reference as i've
19:58 - said
19:59 - we're going to use the
20:02 - ampersand symbol so ampersand
20:06 - symbol or it is the address operator
20:10 - and we're going to use that in our
20:12 - parameter
20:13 - of the called function so let's uh let's
20:16 - try
20:16 - to implement a function that you know
20:20 - could call by reference and you should
20:23 - see
20:23 - by now how you how uh the
20:26 - call by reference and call by value is
20:29 - different
20:30 - so the same thing we're going to declare
20:33 - the
20:35 - method here the return type is in and
20:38 - then the name is
20:40 - addition and then it's going to take two
20:42 - parameters
20:43 - with type in okay and then we could
20:47 - also use this in answer and then
20:50 - the same value for example
20:53 - and now guys instead of just using this
20:57 - num1 and num2 we could add the address
21:00 - operator
21:03 - the ampersand symbol or the address
21:05 - operator in c programming
21:07 - so basically guys uh we're sending
21:11 - or we're passing the address
21:14 - of this particular variable into our
21:16 - function so
21:18 - so whenever we change this value inside
21:21 - our function it's going to reflect
21:23 - the value of our num1 and num2
21:27 - okay so um
21:30 - we have here the ampersand or
21:33 - address operator and then we call the
21:37 - um function right here
21:40 - and then display the answer and of
21:42 - course we need to add
21:43 - the asterisk symbol
21:48 - for this variable here
21:53 - or the argument and then
21:57 - one for the other variable b so this
22:00 - means that
22:01 - it is the operator that is used as a
22:03 - pointer to a variable
22:05 - so it's going to point the address to
22:08 - that particular
22:10 - value of num1 or num2
22:13 - so of course we need to add this also in
22:15 - here
22:17 - and of course for our variable
22:21 - okay and then as i've said if we want to
22:25 - change the value
22:26 - of num 2 here in
22:29 - inside our function we could do that and
22:31 - it's going to reflect the changes
22:33 - of this num2 and num1 variable okay
22:37 - and of course we could still use the
22:40 - asterisk symbol here and
22:43 - let's try to run our program for now
22:47 - so build and run and it's going to
22:49 - answer or it's going to the output this
22:51 - way
22:52 - the total of two numbers is 15.
22:56 - okay so let's try to modify the
23:00 - um num1 and num2
23:04 - okay for example inside this
23:08 - particular function we're going to
23:10 - change
23:11 - the value of our
23:15 - variable a so instead of
23:18 - 5 it's going to like maybe
23:21 - okay so we could do that
23:24 - by using this particular
23:28 - um variable argument
23:32 - we could add here the
23:36 - um variable a and then we could say
23:39 - six then semicolon semicolon at the end
23:43 - and we could try to display the value of
23:47 - our a
23:48 - so the value
23:52 - of a and then percent d
23:55 - and it should you know the variable a
23:58 - correspond to the variable num1 right so
24:02 - we could
24:02 - copy and paste this so notice that num1
24:05 - equals to five here
24:06 - okay so let's see what's the output of
24:10 - this
24:10 - so build and run our program
24:14 - so as you can see we have here the the
24:16 - output
24:18 - the total of two numbers is 16
24:21 - and the value of a is
24:24 - six but as you can see here a
24:27 - corresponds to the num one right num one
24:30 - so we have here num one
24:32 - plus the five and then we change the
24:34 - value of
24:35 - num1 by using the the reference of
24:38 - variable a
24:39 - and then we set it to six that's why
24:41 - we're getting six here
24:42 - and then the total of our addition is
24:45 - six
24:46 - okay so i think that's all there is to
24:48 - it guys for this tutorial and if you
24:50 - have questions please let me know in the
24:52 - comment section below
24:53 - and again guys thank you for watching
24:55 - and see you in the next video

Cleaned transcript:

and in this video guys we're going to discuss and i'm going to teach you how to implement functions in our c program so basically guys a c function is a selfcontained block of statements that can be executed repeatedly whenever we need it so if you think about it it is just you know a group of statements that we could um call and we could use repeatedly within our c program so in this particular video guys we're going to discuss the benefits of using the functions in c program we will also discuss two types of functions in c also the parts of function the function prototype the function definition and of course we're going to discuss also how to call a function inside our c program and lastly we will implement a basic program to illustrate the addition of two numbers using user defined function so if you're excited guys please make sure to watch the full video you will learn more in this particular video tutorial and by the way guys if you are new here in our youtube channel and you like content about programming so go ahead make sure to subscribe and press the notification bell so you'll get updated whenever we have a new upload regarding different programmings or different topics so we have topics python java javafx c programming and many many other topics regarding programming so now let's try to talk about benefits of using function in c so there are a lot of functions that you know we could associate in using function inside rc program so the first one is modularity so when we are using functions it could provide modularity in our code so it means that we could you know define different functions we could uh readily call our functions and we could call this particular function if we need it or we need to execute certain statements and of course guys the function also provides you reusable call me it will save us a lot of space and you know it could be our code could be you know read more readable by using this particular function feature so that's readable or usable code and then in large programs debugging and editing tasks is easy with the use of functions so functions uh make it easy for us to implement our programs so the program can be modularized into smaller parts that's what i have said earlier that we could you know develop a certain module inside our c program and then we can call that particular module or statements or group of statements if we need in a particular situation and number um the the next one is separate function independently can be developed according to the need so so for example guess we could group our statements depending on the need or you know depending on the the function or or the purpose of that statement so we could group that statements and uh place it inside our c function so actually guys there are two types of functions in c so the first one is let me type it here type of functions we have the first one built in function okay so builtin function um of course the system provided these functions and stored in the library therefore it is called um library functions so we have like we are using scanf printf str strc py um crlwr strc mp cr then sdr cut and many more functions that are already available for us whenever we try to run a program so from the previous tutorials we have used the printf so as you can see this particular function we did not implement this the system provided it for us the printf and this particular function will let us display um certain um objects or statements that we want is we want to display inside our c program so to use this functions you just need to include the appropriate c header file so that's why we have here the include statement at the top of our program so basically we're including all the necessary function that we could use inside our c program and of course guys the the second type of method is what we call the userdefined functions userdefined functions okay so userdefined userdefined functions these are the functions that are defined by the user at the time of writing the program so that's basically us or the programmer that you know define the functions okay and then of course the same with the builtin function we could you know really use this particular functions inside rc program now there are there are also parts of our function in c programming language we have the function declaration we also have the definition and we also have the function call so this is basically the actual flow of the function we have the function declaration declaration and then we have the definition we have of course the function called if you want to use that particular function so we have here for example syntax for function declaration so we could um this will be the function declaration this is just an example guys on how you can declare a certain function so the syntax for that is data type and then function name and then of course open and close parenthesis and then in here you can specify the parameter list okay or the variables that we want to use inside this particular function so our example of that is like this in which is the data type and of course addition which is the uh name of our function so addition and then the return type is int and then of course the list of parameters and in this case we don't have any parameter in this particular function addition so we also have the function definition this is actually what um the actual function would look like so this will be function declaration or i mean function definition okay so we could uh this the basic syntax to this is return type and then the function name and then function arguments and then curly braces so it should include the close or open and close curly braces and then inside here is the body of the function or simply the statements that we want to execute inside this particular function so whenever we want to call this function this will be the statements that that you know would be executed inside this particular function so in order for us to call a function inside our c program we just need to specify the method name and of course we need to supply parameters if there's a if there are any and we would also need to specify the return type of our function so now let's try to implement a simple program that you know that could uh illustrate the addition of two numbers um using user defined function so we have here the main function right and then in here after the main or after the closing curly brace of our main function we could create we could create our own function right here let me close this first so you can you know see better so we could add a function here returning the total of two numbers okay so we could declare it like this in and then addition open and close cur uh parenthesis and then open and close curly braces and of course guys as i've said this is this will be the body of our function so in here we could um define local variables okay so local variables so for example we have in num one it was 10 and then num 2 equals 5 right so these are local variables meaning these are the variables that are declared and defined inside the addition method or function okay so we can say here return and then num1 plus num2 okay so that's the statement that we want to execute when whenever we try to call the addition method where i mean function so inside our main function we could call this um method addition so we could declare a variable here in answer and then we could say answer equals and then the addition so basically whatever the return value of this addition method it will be assigned into our answer variable and of course we could print or display this particular value so we could say the total of two numbers yes and then the format specifier just you know percent d and then the answer which is the answer variable okay so we could you know build and run our application application and then we have here the output the total of two numbers is 15 okay so that's how the function works and as you can see here we have defined our function with the statements inside our c function to return the total of the number one in number two and then inside our main function we have declared the answer and then the type is in of course because the in is should correspond to the return type of this particular function and then answer equals the addition and then the last thing that we need here is to display the total of two numbers and in this case 10 and five which makes it you know the value or the output is 15. so we're going to learn how to use c function arguments or parameters inside our function so from the previous tutorial we have learned how to define and declare our function inside our c program and of course we have learned how to use the basic syntax to create a function and implemented a simple function that could add two numbers okay so as i've said guys in this video we're going to focus on the function arguments or function parameters so while calling a function the arguments can be passed to a function in two ways so there there are two ways on how we could pass the parameters or the arguments into the function so the first one will be call by value and the second one is call by reference okay so in call by value way the actual parameter is passed to a function and then new memory area created for that particular past parameters and then it can be used only within that function and the actual parameters cannot be modified in the call by value uh way of you know passing the the argument into our function while call by reference so instead of copying a variable an address is passed to a function as parameter and then we could use the address operator which is the ampersand symbol i know if you're already familiar with this so address operator is used in the parameter of the called function and of course the changes in the function reflect the change of the original values so we could uh understand this better if we try to implement our function by you know creating a simple project or simple application that could demonstrate the call by value or call by reference so first let's try to create a program that would pass the argument us or it could call by value so the first thing that we're going to need is of course to it's actually the same with the program or i mean function that we have created from the previous tutorial but the difference is that in this particular video we're going to use parameter or argument so the first variable that we're going to declare here is the answer so the type is in and then we have the variable name num1 so the value is 5 and then in num2 and then the value is okay and of course guys we could declare the function so for example we could um create the function right after this closing curly brace of our main function so the first thing of course is the return type and in this case in and then the name of our function which is addition and we could say here in a and in b basically it means that this particular function would accept two parameter in b and uh int a okay and then in here we could return the value or the total value of this two parameters so a plus b okay and of course guys we could declare the function right here so we could you know add the function declaration here function declaration so you could say here in addition and then this particular function is going to take two parameters in num1 and in num2 so as you can see here guys this is only the function declaration okay and this is the function definition function definition again this is function declaration declaration and function definition so now we could try to call our function by value so for example you can say here answer and then it was um addition which is the method or the function that we have created here and then we could pass along the values of num1 and num2 okay so let me explain this first for you so it would be clear for you so we have here the parameter num1 num2 as i've said in call by value the actual parameters cannot be modified because num1 and num2 is it won't change um even if we you know change the parameters here between a and b so the value of num1 and num2 would not change even if we try to modify this in a and b inside our addition function so the actual parameter is passed to a function and then new memory will be created for our parameters e uh in a n in b okay and of course um we could display here the result so printf and then of course the statement the addition or you could say the total of two numbers yes and then the format specifier percent d and then the variable answer okay and then we could you know clean and build our application or build and run and it should display the output something like this the total of two numbers is 15 okay so you get the point this is the calling of function by value okay now if we want to try to call a function by reference as i've said we're going to use the ampersand symbol so ampersand symbol or it is the address operator and we're going to use that in our parameter of the called function so let's uh let's try to implement a function that you know could call by reference and you should see by now how you how uh the call by reference and call by value is different so the same thing we're going to declare the method here the return type is in and then the name is addition and then it's going to take two parameters with type in okay and then we could also use this in answer and then the same value for example and now guys instead of just using this num1 and num2 we could add the address operator the ampersand symbol or the address operator in c programming so basically guys uh we're sending or we're passing the address of this particular variable into our function so so whenever we change this value inside our function it's going to reflect the value of our num1 and num2 okay so um we have here the ampersand or address operator and then we call the um function right here and then display the answer and of course we need to add the asterisk symbol for this variable here or the argument and then one for the other variable b so this means that it is the operator that is used as a pointer to a variable so it's going to point the address to that particular value of num1 or num2 so of course we need to add this also in here and of course for our variable okay and then as i've said if we want to change the value of num 2 here in inside our function we could do that and it's going to reflect the changes of this num2 and num1 variable okay and of course we could still use the asterisk symbol here and let's try to run our program for now so build and run and it's going to answer or it's going to the output this way the total of two numbers is 15. okay so let's try to modify the um num1 and num2 okay for example inside this particular function we're going to change the value of our variable a so instead of 5 it's going to like maybe okay so we could do that by using this particular um variable argument we could add here the um variable a and then we could say six then semicolon semicolon at the end and we could try to display the value of our a so the value of a and then percent d and it should you know the variable a correspond to the variable num1 right so we could copy and paste this so notice that num1 equals to five here okay so let's see what's the output of this so build and run our program so as you can see we have here the the output the total of two numbers is 16 and the value of a is six but as you can see here a corresponds to the num one right num one so we have here num one plus the five and then we change the value of num1 by using the the reference of variable a and then we set it to six that's why we're getting six here and then the total of our addition is six okay so i think that's all there is to it guys for this tutorial and if you have questions please let me know in the comment section below and again guys thank you for watching and see you in the next video
