With timestamps:

00:00 - hello guys in this video I'm going to
00:02 - teach you about operator overloading in
00:05 - C++ so we all know that C++ has some
00:09 - operators which we can use to perform
00:12 - some uh algorithmic task or you can
00:16 - perform some comparison task from these
00:18 - operator so for example we have some of
00:22 - these kind of operator which you can see
00:24 - here so we have this plus operator equal
00:27 - to operator minus or estx or this black
00:30 - back slash percentage and we also have
00:34 - these comparison operators in C++ and by
00:37 - these operator we can use this operator
00:41 - to for example we can use this plus
00:43 - operator to add two integer values or
00:46 - two double values or two float values
00:49 - right
00:52 - so we can use it like this we
00:55 - have two integer for example X and Y we
00:58 - can use this plus operator to add these
01:03 - X and Y and store it into this Zed uh
01:09 - variable and this is also equal to
01:11 - operator and an equal to operator we use
01:13 - it for assigning the value so these are
01:16 - the some of the inherent uh properties
01:20 - of these operators so C++ s def find
01:23 - that we can use plus to add two values
01:25 - or equal to to assign the values but for
01:29 - example
01:30 - we can we have some values or we have
01:34 - some object which we want to add for
01:38 - example so for example I have this class
01:41 - called vector and I want to add the two
01:44 - object of uh this class okay so I will
01:48 - Define two vectors like this Vector one
01:51 - which has object uh V one and second uh
01:56 - class object back two and I want to add
02:00 - these V one and v two and assign it in
02:03 - the third Vector called V 3 is it
02:07 - possible uh using
02:10 - C++ well when I compile it and when I
02:14 - see it it's it will give me an error
02:17 - because C++ doesn't know that there is a
02:22 - class called Vector so C++ libraries
02:25 - doesn't have these kind this class this
02:27 - class is user defined class right so it
02:30 - doesn't know if we use plus it has to
02:34 - add these two uh two object of the class
02:38 - okay so we can use a concept called
02:42 - operator overloading and Sim it's same
02:47 - as method overloading what is Method
02:49 - overloading we can Define two functions
02:53 - of same name and these two functions can
02:57 - perform two different tasks but but they
03:00 - can have the same name and this is
03:02 - called op uh function overloading in the
03:05 - same way we can use operator overloading
03:10 - to perform the same or perform two
03:14 - different tasks from from a same
03:17 - operator for example I want to add these
03:20 - two object I can do this whenever I uh
03:25 - can def I Define uh a operator which can
03:29 - be overloaded
03:30 - so let's see how we can do this so for
03:34 - example I want to add two Vector values
03:38 - which are the cartisan values and I will
03:41 - give you an example so for example I
03:44 - want to add these two cartisan values
03:47 - for example 4 comma 2 and 2 comma 2 I
03:51 - can do it in in mathematics done by like
03:55 - this so 4 + 2 which is 4 + 2 is equal to
03:59 - 6 6 right and this Y 2 + 2 here 2 + 2 is
04:06 - equal 4 so I want to add these two ctis
04:09 - value using a class and I want to use
04:13 - plus operator for that and I want the
04:16 - result like this can we do this let's
04:20 - see uh if we can do this by operator
04:22 - overloading we can certainly do that by
04:25 - oper operator
04:26 - overloading so let's see I have defined
04:30 - this class called Vector it
04:33 - has two public member variable which are
04:36 - integer X and Y and I have this default
04:40 - Constructor which uh doesn't take any
04:42 - values in it okay so what I'm going to
04:46 - do is I am going to Define one more
04:51 - Constructor so I will overload this
04:55 - Constructor so this is the default
04:57 - Constructor and I will overload this
04:59 - Constructor
05:00 - this is the same concept as function
05:03 - overloading right so we can use the same
05:06 - Constructor of same name to perform two
05:08 - different task and I can write
05:12 - int
05:14 - a comma
05:17 - int B so what it's doing it is initial
05:21 - I'm initializing this Vector Constructor
05:23 - by two values A and B and these two A
05:26 - and B the value of a and b i will assign
05:30 - to X and Y so X is equal to
05:35 - a
05:36 - and Y is equal to B okay so this is
05:42 - simply doing this okay and now how we
05:46 - can Define operator overloading so
05:50 - whenever you want to Define operator
05:52 - overloading what you need to do is first
05:55 - of all you need to make a prototype of
05:59 - this
06:00 - and
06:01 - operator uh overloading returns when you
06:04 - define operator overloading it Returns
06:07 - the same class as uh your class so we
06:11 - are in vector class so we it will return
06:14 - operator Vector right and then we
06:19 - specify that we want to do Operator
06:22 - overloading by the keyword
06:24 - called
06:26 - operator and then just after this
06:29 - operator keyword we need to give the
06:33 - operator from for which you want to
06:36 - operate uh overload this so for example
06:38 - we want to overload plus operator okay
06:42 - and we want to add these two ctis in
06:45 - values with this plus
06:47 - operator so I will use plus you
06:51 - can use some other operators like minus
06:55 - here or this percentage here or any
06:59 - other operator which you can see here or
07:02 - any other operator which uh exist in C++
07:06 - you can use all these operator instead
07:10 - of this plus which I'm using in this
07:13 - case Okay and
07:15 - then I will pass uh argument here which
07:21 - will
07:22 - be the class okay so I will write con
07:28 - and the class class object so I will
07:31 - just copy the name of the class and I
07:34 - will use this address of the class
07:38 - okay so this is the Prototype of
07:42 - operator so we want to overload plus
07:45 - right now in order
07:47 - to define or uh write the source for
07:51 - this operator what we can do we can just
07:55 - we also need okay we can just uh copy
07:59 - this uh prototype from here and just
08:03 - outside your class we can
08:05 - Define this here right so I will just
08:09 - copy
08:11 - this and paste it here and I will write
08:15 - definition of this function or operator
08:19 - okay and because I have already told you
08:23 - in the last video we need to give the
08:27 - scope for this operator right right so
08:30 - we need to give this class of the
08:33 - operator in which class exist and then
08:36 - these two double colon which are scope
08:39 - resolution operators right so now you
08:43 - know that this by seeing this Vector
08:46 - colon colon you know that this operator
08:49 - is a part of this class which is a
08:52 - vector class okay now we can write the
08:57 - definition of uh in this uh Vector
09:01 - function
09:03 - so I will copy the same class here and I
09:07 - will name it as uh temp so I created a
09:12 - temp object of this class and what I
09:15 - want to do I want to do the addition of
09:19 - the two vectors using this so I will use
09:23 - temp do
09:27 - X this one which is a member variable of
09:30 - the class is equal
09:33 - to is equal to
09:38 - X+ temp or param which I have to pass
09:43 - here p a
09:46 - m parameter okay so which whatever
09:50 - parameter we will pass which will be uh
09:53 - object or an object of this Vector we
09:57 - can use it like this
10:01 - dot X
10:04 - okay so what this is doing this is also
10:08 - an object of class vector and this is
10:11 - also an object of class Vector right and
10:14 - whatever we pass here we want to add it
10:17 - to our temporary object which is this
10:20 - one okay similarly I want to do the same
10:25 - for the Y variable y member variable
10:29 - so I will do y y and Y because we have
10:36 - two coordinates right and what I want to
10:40 - do next because this is expecting the uh
10:44 - Vector object return I will return this
10:47 - temp like this
10:51 - so return
10:55 - temp like this okay so what what this
10:59 - code will do it will just
11:03 - add the parameter which you pass here to
11:08 - the temp and it will return okay and
11:11 - this
11:12 - operator will over I mean addition
11:16 - operator will be overloaded by this one
11:20 - okay now how to use this in the
11:23 - class so in the same way I can
11:27 - Define two
11:29 - object of a vector
11:32 - class so
11:34 - V one and I'm going to use this
11:38 - Constructor which takes two integer
11:41 - values okay so I will pass two integer
11:45 - values I'll pass first coordinate here
11:48 - so 4 comma 2 here okay 4 comma
11:52 - 2 so I'll pass
11:55 - 4 comma 2 and I I will make second
12:01 - vector
12:03 - and I
12:06 - will pass my second value here so Vector
12:10 - 2 and my second value is 2 comma 2 for
12:14 - example
12:16 - right and I can add these two values in
12:21 - a
12:22 - third Vector so I will
12:25 - say
12:27 - vector
12:31 - result and I can add these two vectors
12:35 - like this
12:37 - result is equal to vac
12:42 - 1 plus W two okay and this will now not
12:50 - give you an error because we are we
12:54 - already told uh the our C++ libraries
12:59 - that there exist a plus operator which
13:02 - is able to add two classes or two object
13:07 - of the class Vector okay now we can U
13:12 - display the result for example like this
13:15 - see
13:16 - out and how we want to display the
13:19 - result let's see see out and we can
13:27 - say in the
13:29 - quotes
13:32 - the result
13:35 - is and in the bracket we want to give
13:41 - first of all
13:42 - the
13:44 - X so I will say
13:48 - result dot
13:51 - X okay and then I want to give the comma
13:55 - so I will give this once again and
13:57 - double quotes I we'll say
14:01 - comma and
14:03 - then the value of y okay so
14:08 - result dot
14:12 - y okay so now result dox and result doy
14:17 - will contain the addition of these two 6
14:20 - comma 4 in our case Okay and then once
14:24 - again I will use this bracket to close
14:27 - it
14:29 - and I will use end L to end the
14:36 - line and first of all we forgot this
14:41 - okay so now this will show the result
14:45 - like this let's uh try to compile and
14:48 - check whether it it's okay or
14:52 - not so this is showing the error let's
14:55 - see what's the error
14:57 - is okay so this spelling of const is
15:02 - wrong it should be like this I will
15:05 - explain you what this const mean what is
15:08 - the um I mean purpose of using this
15:11 - const but for now just uh take it as it
15:15 - is okay I will recompile my program once
15:18 - again and yeah same
15:22 - spelling once
15:24 - again okay so our program runs
15:27 - successfully or compil successfully and
15:29 - let's try to run this and you see the
15:33 - result is 6a
15:35 - 4 so we have successfully added two
15:40 - Vector object using this plus operator
15:44 - in C++ okay so in the same way you can
15:48 - subtract or you can use all the
15:51 - operators which you have in C++ to
15:55 - overload you can overload equal to or
15:58 - double equal to or estx or whatever we
16:02 - have in C++ we can overload okay so I
16:07 - hope you have understood the basic
16:08 - concept of operator overloading and I
16:12 - hope you have enjoyed this video please
16:13 - RIT comment and subscribe and by for now

Cleaned transcript:

hello guys in this video I'm going to teach you about operator overloading in C++ so we all know that C++ has some operators which we can use to perform some uh algorithmic task or you can perform some comparison task from these operator so for example we have some of these kind of operator which you can see here so we have this plus operator equal to operator minus or estx or this black back slash percentage and we also have these comparison operators in C++ and by these operator we can use this operator to for example we can use this plus operator to add two integer values or two double values or two float values right so we can use it like this we have two integer for example X and Y we can use this plus operator to add these X and Y and store it into this Zed uh variable and this is also equal to operator and an equal to operator we use it for assigning the value so these are the some of the inherent uh properties of these operators so C++ s def find that we can use plus to add two values or equal to to assign the values but for example we can we have some values or we have some object which we want to add for example so for example I have this class called vector and I want to add the two object of uh this class okay so I will Define two vectors like this Vector one which has object uh V one and second uh class object back two and I want to add these V one and v two and assign it in the third Vector called V 3 is it possible uh using C++ well when I compile it and when I see it it's it will give me an error because C++ doesn't know that there is a class called Vector so C++ libraries doesn't have these kind this class this class is user defined class right so it doesn't know if we use plus it has to add these two uh two object of the class okay so we can use a concept called operator overloading and Sim it's same as method overloading what is Method overloading we can Define two functions of same name and these two functions can perform two different tasks but but they can have the same name and this is called op uh function overloading in the same way we can use operator overloading to perform the same or perform two different tasks from from a same operator for example I want to add these two object I can do this whenever I uh can def I Define uh a operator which can be overloaded so let's see how we can do this so for example I want to add two Vector values which are the cartisan values and I will give you an example so for example I want to add these two cartisan values for example 4 comma 2 and 2 comma 2 I can do it in in mathematics done by like this so 4 + 2 which is 4 + 2 is equal to 6 6 right and this Y 2 + 2 here 2 + 2 is equal 4 so I want to add these two ctis value using a class and I want to use plus operator for that and I want the result like this can we do this let's see uh if we can do this by operator overloading we can certainly do that by oper operator overloading so let's see I have defined this class called Vector it has two public member variable which are integer X and Y and I have this default Constructor which uh doesn't take any values in it okay so what I'm going to do is I am going to Define one more Constructor so I will overload this Constructor so this is the default Constructor and I will overload this Constructor this is the same concept as function overloading right so we can use the same Constructor of same name to perform two different task and I can write int a comma int B so what it's doing it is initial I'm initializing this Vector Constructor by two values A and B and these two A and B the value of a and b i will assign to X and Y so X is equal to a and Y is equal to B okay so this is simply doing this okay and now how we can Define operator overloading so whenever you want to Define operator overloading what you need to do is first of all you need to make a prototype of this and operator uh overloading returns when you define operator overloading it Returns the same class as uh your class so we are in vector class so we it will return operator Vector right and then we specify that we want to do Operator overloading by the keyword called operator and then just after this operator keyword we need to give the operator from for which you want to operate uh overload this so for example we want to overload plus operator okay and we want to add these two ctis in values with this plus operator so I will use plus you can use some other operators like minus here or this percentage here or any other operator which you can see here or any other operator which uh exist in C++ you can use all these operator instead of this plus which I'm using in this case Okay and then I will pass uh argument here which will be the class okay so I will write con and the class class object so I will just copy the name of the class and I will use this address of the class okay so this is the Prototype of operator so we want to overload plus right now in order to define or uh write the source for this operator what we can do we can just we also need okay we can just uh copy this uh prototype from here and just outside your class we can Define this here right so I will just copy this and paste it here and I will write definition of this function or operator okay and because I have already told you in the last video we need to give the scope for this operator right right so we need to give this class of the operator in which class exist and then these two double colon which are scope resolution operators right so now you know that this by seeing this Vector colon colon you know that this operator is a part of this class which is a vector class okay now we can write the definition of uh in this uh Vector function so I will copy the same class here and I will name it as uh temp so I created a temp object of this class and what I want to do I want to do the addition of the two vectors using this so I will use temp do X this one which is a member variable of the class is equal to is equal to X+ temp or param which I have to pass here p a m parameter okay so which whatever parameter we will pass which will be uh object or an object of this Vector we can use it like this dot X okay so what this is doing this is also an object of class vector and this is also an object of class Vector right and whatever we pass here we want to add it to our temporary object which is this one okay similarly I want to do the same for the Y variable y member variable so I will do y y and Y because we have two coordinates right and what I want to do next because this is expecting the uh Vector object return I will return this temp like this so return temp like this okay so what what this code will do it will just add the parameter which you pass here to the temp and it will return okay and this operator will over I mean addition operator will be overloaded by this one okay now how to use this in the class so in the same way I can Define two object of a vector class so V one and I'm going to use this Constructor which takes two integer values okay so I will pass two integer values I'll pass first coordinate here so 4 comma 2 here okay 4 comma 2 so I'll pass 4 comma 2 and I I will make second vector and I will pass my second value here so Vector 2 and my second value is 2 comma 2 for example right and I can add these two values in a third Vector so I will say vector result and I can add these two vectors like this result is equal to vac 1 plus W two okay and this will now not give you an error because we are we already told uh the our C++ libraries that there exist a plus operator which is able to add two classes or two object of the class Vector okay now we can U display the result for example like this see out and how we want to display the result let's see see out and we can say in the quotes the result is and in the bracket we want to give first of all the X so I will say result dot X okay and then I want to give the comma so I will give this once again and double quotes I we'll say comma and then the value of y okay so result dot y okay so now result dox and result doy will contain the addition of these two 6 comma 4 in our case Okay and then once again I will use this bracket to close it and I will use end L to end the line and first of all we forgot this okay so now this will show the result like this let's uh try to compile and check whether it it's okay or not so this is showing the error let's see what's the error is okay so this spelling of const is wrong it should be like this I will explain you what this const mean what is the um I mean purpose of using this const but for now just uh take it as it is okay I will recompile my program once again and yeah same spelling once again okay so our program runs successfully or compil successfully and let's try to run this and you see the result is 6a 4 so we have successfully added two Vector object using this plus operator in C++ okay so in the same way you can subtract or you can use all the operators which you have in C++ to overload you can overload equal to or double equal to or estx or whatever we have in C++ we can overload okay so I hope you have understood the basic concept of operator overloading and I hope you have enjoyed this video please RIT comment and subscribe and by for now
