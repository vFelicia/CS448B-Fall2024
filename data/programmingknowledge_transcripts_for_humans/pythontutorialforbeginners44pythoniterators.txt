With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - python tutorial for beginners in this
00:04 - video I'm going to show you what our
00:06 - iterators in Python and how to use
00:09 - iterators in Python and at the end I'm
00:13 - also going to show you how you can
00:14 - create your custom iterator class in
00:17 - Python so let's get started and let's
00:21 - see first of all what is an iterator but
00:25 - before that we need to understand what
00:27 - is iteration so what is iteration an act
00:31 - of going over a collection is called
00:35 - iteration now what kind of collections
00:38 - we are talking about we have already
00:40 - seen some kind of collections like lists
00:43 - tuples dictionaries sets and other kind
00:47 - of collections and till now what we have
00:50 - seen is we can use a for loop to iterate
00:53 - over a collection so till now what we
00:56 - have learned is for example I am going
00:58 - to declare a collection which is lists
01:01 - in this case and I'm going to just add
01:04 - some values inside the list and once I
01:07 - declare the list I can iterate over this
01:10 - list using a for loop so let's say for I
01:14 - in the collection name and then you can
01:18 - just write print here to print each and
01:21 - every value of this collection a so this
01:24 - for loop iterates over each and every
01:26 - element in the collection and then print
01:30 - the value using this print statement now
01:33 - let's talk about the iterators so what
01:37 - is an iterator iterator is an object
01:40 - which can be used to iterate over our
01:44 - collection
01:45 - now this iterator object has two special
01:48 - methods first is underscore underscore
01:52 - ITER underscore underscore and second is
01:56 - underscore underscore next underscore
01:59 - underscore so iterators have these two
02:02 - special methods one is eater and this
02:05 - eater method is going to get you the
02:08 - iterator and the next method is going to
02:12 - give you the next
02:13 - when you using this iterator now
02:16 - collections like lists or dictionary or
02:19 - tuples are all iterate able collections
02:23 - that means we can iterate over them and
02:27 - all these collection objects have a
02:29 - special method called eater which is
02:32 - used to get the iterator from these
02:36 - collections so let me show you first of
02:38 - all these two methods inside our
02:41 - collection so when you use dir inbuilt
02:45 - function and give any collection as an
02:48 - argument here and when I press Enter
02:51 - you will see a list of functions here
02:52 - and when I scroll a little bit right
02:56 - here you will see a special function
02:58 - which is ITER so all these collections
03:02 - like lists or dictionary or tuple have
03:05 - this ITER method and we can call this
03:09 - IDR method to get the object of the
03:13 - iterator and we can call this underscore
03:16 - underscore ITER method using a special
03:19 - method called ITER without underscore in
03:22 - front and back of it so let me just show
03:26 - you what I'm saying so I'm going to
03:29 - declare a variable I T which stands for
03:32 - iterator and then I'm going to use a
03:34 - special method called ITER without
03:38 - underscore and this ITER method is used
03:42 - to get the iterator so I can just pass
03:46 - my collection here as an argument and
03:49 - this iterator method is going to give me
03:52 - the iterator object of this collection
03:56 - which I was talking about which is
03:57 - underscore underscore eater underscore
04:01 - underscore so let me just press ENTER
04:03 - and now we have the iterator object and
04:07 - this iterator object we can use to call
04:09 - all the values in the collection so
04:12 - let's once again print the values of our
04:15 - A List and this has these six values and
04:20 - now I can use a special method called
04:22 - Next here to get the first value of this
04:26 - collection
04:27 - so I'm going to just pass the ite
04:30 - which is the iterator which we have got
04:32 - from this eater method and then press
04:36 - ENTER and you will see it will print the
04:38 - first value of your list now once again
04:42 - when you call this next using this ite
04:47 - variable is going to give you the next
04:50 - value of the list and when you call it
04:53 - again and again it's going to iterate
04:56 - over your list and give you the values
04:59 - of the list one by one so let's get all
05:03 - the values so this is the second last
05:05 - value which is nine and then at last
05:07 - it's going to print the last value which
05:10 - is seven now at this point iterator has
05:12 - iterated over all these six values after
05:16 - that when you call this next method once
05:19 - again over this IT variable then it's
05:22 - going to give you this exception which
05:25 - says stop iteration so when your
05:29 - iterator is exhausted then it's going to
05:32 - give you the exception which is stop
05:35 - iteration now as I said the collections
05:37 - like list dictionary or tuple have this
05:40 - iterate able object that means we can
05:43 - use the for loop to iterate over these
05:47 - collections so for loop uses the same
05:50 - iterator mechanism to iterate over all
05:54 - these elements of the collection now
05:57 - many a times in your programming
05:59 - development career you will have to
06:01 - write a class in order to iterate over
06:05 - some kind of collection so let me show
06:08 - you how you can create your custom
06:09 - iterator class so let me minimize this
06:12 - Python console in the PyCharm IDE and I
06:17 - will just comment these two methods so
06:20 - as I said an iterator always have these
06:24 - two special methods one is underscore
06:27 - underscore eater underscore underscore
06:29 - and the second is underscore underscore
06:32 - next underscore underscore so in order
06:36 - to create your own iterator class you
06:39 - need to implement
06:40 - both these methods so let's create an
06:43 - iterator class and I'm going to just
06:45 - name my class as list iterator class and
06:49 - in this list iterator class first of all
06:51 - I'm going to define init method and this
06:56 - init method is going to take any type of
06:59 - list or any type of collection which is
07:01 - iterate table and then inside this init
07:04 - method I'm going to just call a self to
07:07 - create member variable here and I'm
07:10 - going to name my member variable as dot
07:13 - underscore underscore list and I'm going
07:17 - to just pass the value of a let's name
07:19 - this a as list also so we will be clear
07:23 - so list is equal to list the second
07:26 - member variable which I want to create
07:28 - here is the index variable so the second
07:31 - variable is the index variable which is
07:34 - the index of the list or the collection
07:37 - and let's give the initial value of this
07:40 - index now as I said in order to create
07:42 - an iterator class you need to implement
07:44 - these two methods which are underscore
07:47 - underscore ITER method first of all and
07:51 - in this method we are just going to
07:52 - return the value of self so this
07:56 - underscore underscore ITER method is
07:59 - going to give you the iterator and let's
08:02 - also implement the method which is
08:05 - underscore underscore next now in this
08:08 - next method first of all when this next
08:11 - method is called what we want to do is
08:14 - we want to increase the value of index
08:17 - so let's call our index member variable
08:19 - and let's increase the value of index by
08:22 - one and the next thing which we want to
08:25 - do here is we want to send the value at
08:28 - this index so we can just return so let
08:31 - me call return first of all and then
08:33 - self dot your list name whatever is your
08:38 - list and then inside these square
08:40 - brackets we call the index which we have
08:43 - incremented by one so self dot
08:46 - underscore underscore index so this
08:49 - statement is going to give you the
08:51 - current value at this index right
08:54 - now and that's basically it so I'm going
08:57 - to just say my list is equal to list
09:01 - iterator and this list iterator takes an
09:03 - argument which is a collection right so
09:06 - let me create a list collection and I'm
09:09 - going to name my list as a and here I'm
09:13 - going to provide some values inside the
09:16 - list so let's say we have these six
09:19 - values inside the list and now we can
09:22 - just pass this list as an argument of
09:26 - our list iterator so once we have this
09:29 - list iterator object we can call ITER
09:34 - method in order to get the iterator
09:37 - object which is this one so let me
09:39 - create one more variable which is I T
09:42 - and then I'm going to call this ITER
09:46 - method and I'm going to pass my my list
09:48 - object as an argument of this ITER
09:51 - method so now I have the iterator object
09:53 - of this list using this list iterator
09:57 - class and now I can use the print method
10:00 - so let me call a print method and then I
10:04 - can call the next method to iterate over
10:07 - the list using the ID variable so let's
10:11 - run this code once again and you will
10:13 - see it's going to print the first value
10:16 - of the list which is one let's print it
10:20 - two more times and let's run the code
10:23 - once again and you can see it's going to
10:25 - give you the next two values of the list
10:27 - so now we know that this next is going
10:29 - to call every time the next value from
10:32 - this list so let's print all the values
10:36 - of the list using this next method and
10:39 - you can see it prints all the values of
10:42 - this list now when I want to go beyond
10:45 - this after the list iterator is
10:48 - exhausted and let's run the code you
10:51 - will see it's going to give me this
10:53 - error which says list index out of range
10:56 - but this is not the problem of the
10:59 - iterator is the problem of the list now
11:02 - what I have shown you when I have shown
11:04 - you the example of this
11:08 - iterator in the Python console whenever
11:11 - your iterator is exhausted it throws the
11:14 - stop iteration error or exception so
11:18 - let's raise the same kind of stop
11:20 - iteration exception using our class also
11:23 - so I will go to the next method of my
11:26 - class and here I can give a condition
11:30 - and this condition checks whether the
11:33 - value of index so self dot underscore
11:36 - underscore index is greater than or
11:39 - equal to the length of your list so
11:43 - length and the list name is self dot
11:47 - underscore underscore list and when this
11:50 - condition is true we are going to raise
11:53 - an exception so let's use the raised
11:56 - keyword and the exception which we want
11:58 - to raise here is the top iteration
12:00 - exception so let's throw this exception
12:03 - or raise this exception and what this
12:05 - condition is basically going to do is
12:07 - until the last index which is for
12:10 - example in this list the last index is 5
12:14 - so on this until the last index
12:16 - everything will be ok but as soon as
12:19 - this index becomes 6 which is the length
12:22 - of your list also so the length of the
12:26 - list which have 6 element is 6 but index
12:30 - will go up to 5 because the index starts
12:33 - from 0 so as soon as this index becomes
12:36 - is equal to the length which means the
12:39 - iterator has been exhausted we can also
12:41 - write double equals to here as soon as
12:44 - the value of index becomes the length of
12:46 - the list we can throw this exception so
12:50 - let's run this code once again and you
12:53 - can see we have used this next method
12:56 - seven times so at the last print
12:58 - statement is going to give us the error
13:00 - so first of all let me remove the last
13:03 - statement and let's run the code is
13:05 - going to run fine so you can see
13:07 - everything is fine but as soon as I call
13:10 - this last next method and I know that my
13:14 - iterator is exhausted and when I run the
13:17 - code once again it's going to raise an
13:19 - exception which is
13:21 - iteration now one more thing which I
13:24 - said which you can use with your
13:26 - iterators is the for loop so let's try
13:30 - to use this for loop and I'm going to
13:32 - just write for I in your iterator which
13:36 - is I T which we have got using this ITER
13:39 - method and let me comment this code also
13:43 - and now I can print each and every
13:45 - element inside the list a so I'm going
13:49 - to just write print I here and let me
13:51 - remove this code from here so you can
13:54 - see the list also and this for loop also
13:57 - and I'm going to run this code once
13:59 - again and you can see this for loop has
14:02 - iterated over our list which we have
14:05 - provided as an argument of this list
14:08 - iterator class and you can see all the
14:11 - values inside the list have been printed
14:15 - using this for loop so in this way you
14:18 - can create your own iterator class in
14:21 - Python I hope you have enjoyed this
14:23 - video and I will see you in the next
14:26 - video
14:34 - you

Cleaned transcript:

hey guys welcome to the next video on python tutorial for beginners in this video I'm going to show you what our iterators in Python and how to use iterators in Python and at the end I'm also going to show you how you can create your custom iterator class in Python so let's get started and let's see first of all what is an iterator but before that we need to understand what is iteration so what is iteration an act of going over a collection is called iteration now what kind of collections we are talking about we have already seen some kind of collections like lists tuples dictionaries sets and other kind of collections and till now what we have seen is we can use a for loop to iterate over a collection so till now what we have learned is for example I am going to declare a collection which is lists in this case and I'm going to just add some values inside the list and once I declare the list I can iterate over this list using a for loop so let's say for I in the collection name and then you can just write print here to print each and every value of this collection a so this for loop iterates over each and every element in the collection and then print the value using this print statement now let's talk about the iterators so what is an iterator iterator is an object which can be used to iterate over our collection now this iterator object has two special methods first is underscore underscore ITER underscore underscore and second is underscore underscore next underscore underscore so iterators have these two special methods one is eater and this eater method is going to get you the iterator and the next method is going to give you the next when you using this iterator now collections like lists or dictionary or tuples are all iterate able collections that means we can iterate over them and all these collection objects have a special method called eater which is used to get the iterator from these collections so let me show you first of all these two methods inside our collection so when you use dir inbuilt function and give any collection as an argument here and when I press Enter you will see a list of functions here and when I scroll a little bit right here you will see a special function which is ITER so all these collections like lists or dictionary or tuple have this ITER method and we can call this IDR method to get the object of the iterator and we can call this underscore underscore ITER method using a special method called ITER without underscore in front and back of it so let me just show you what I'm saying so I'm going to declare a variable I T which stands for iterator and then I'm going to use a special method called ITER without underscore and this ITER method is used to get the iterator so I can just pass my collection here as an argument and this iterator method is going to give me the iterator object of this collection which I was talking about which is underscore underscore eater underscore underscore so let me just press ENTER and now we have the iterator object and this iterator object we can use to call all the values in the collection so let's once again print the values of our A List and this has these six values and now I can use a special method called Next here to get the first value of this collection so I'm going to just pass the ite which is the iterator which we have got from this eater method and then press ENTER and you will see it will print the first value of your list now once again when you call this next using this ite variable is going to give you the next value of the list and when you call it again and again it's going to iterate over your list and give you the values of the list one by one so let's get all the values so this is the second last value which is nine and then at last it's going to print the last value which is seven now at this point iterator has iterated over all these six values after that when you call this next method once again over this IT variable then it's going to give you this exception which says stop iteration so when your iterator is exhausted then it's going to give you the exception which is stop iteration now as I said the collections like list dictionary or tuple have this iterate able object that means we can use the for loop to iterate over these collections so for loop uses the same iterator mechanism to iterate over all these elements of the collection now many a times in your programming development career you will have to write a class in order to iterate over some kind of collection so let me show you how you can create your custom iterator class so let me minimize this Python console in the PyCharm IDE and I will just comment these two methods so as I said an iterator always have these two special methods one is underscore underscore eater underscore underscore and the second is underscore underscore next underscore underscore so in order to create your own iterator class you need to implement both these methods so let's create an iterator class and I'm going to just name my class as list iterator class and in this list iterator class first of all I'm going to define init method and this init method is going to take any type of list or any type of collection which is iterate table and then inside this init method I'm going to just call a self to create member variable here and I'm going to name my member variable as dot underscore underscore list and I'm going to just pass the value of a let's name this a as list also so we will be clear so list is equal to list the second member variable which I want to create here is the index variable so the second variable is the index variable which is the index of the list or the collection and let's give the initial value of this index now as I said in order to create an iterator class you need to implement these two methods which are underscore underscore ITER method first of all and in this method we are just going to return the value of self so this underscore underscore ITER method is going to give you the iterator and let's also implement the method which is underscore underscore next now in this next method first of all when this next method is called what we want to do is we want to increase the value of index so let's call our index member variable and let's increase the value of index by one and the next thing which we want to do here is we want to send the value at this index so we can just return so let me call return first of all and then self dot your list name whatever is your list and then inside these square brackets we call the index which we have incremented by one so self dot underscore underscore index so this statement is going to give you the current value at this index right now and that's basically it so I'm going to just say my list is equal to list iterator and this list iterator takes an argument which is a collection right so let me create a list collection and I'm going to name my list as a and here I'm going to provide some values inside the list so let's say we have these six values inside the list and now we can just pass this list as an argument of our list iterator so once we have this list iterator object we can call ITER method in order to get the iterator object which is this one so let me create one more variable which is I T and then I'm going to call this ITER method and I'm going to pass my my list object as an argument of this ITER method so now I have the iterator object of this list using this list iterator class and now I can use the print method so let me call a print method and then I can call the next method to iterate over the list using the ID variable so let's run this code once again and you will see it's going to print the first value of the list which is one let's print it two more times and let's run the code once again and you can see it's going to give you the next two values of the list so now we know that this next is going to call every time the next value from this list so let's print all the values of the list using this next method and you can see it prints all the values of this list now when I want to go beyond this after the list iterator is exhausted and let's run the code you will see it's going to give me this error which says list index out of range but this is not the problem of the iterator is the problem of the list now what I have shown you when I have shown you the example of this iterator in the Python console whenever your iterator is exhausted it throws the stop iteration error or exception so let's raise the same kind of stop iteration exception using our class also so I will go to the next method of my class and here I can give a condition and this condition checks whether the value of index so self dot underscore underscore index is greater than or equal to the length of your list so length and the list name is self dot underscore underscore list and when this condition is true we are going to raise an exception so let's use the raised keyword and the exception which we want to raise here is the top iteration exception so let's throw this exception or raise this exception and what this condition is basically going to do is until the last index which is for example in this list the last index is 5 so on this until the last index everything will be ok but as soon as this index becomes 6 which is the length of your list also so the length of the list which have 6 element is 6 but index will go up to 5 because the index starts from 0 so as soon as this index becomes is equal to the length which means the iterator has been exhausted we can also write double equals to here as soon as the value of index becomes the length of the list we can throw this exception so let's run this code once again and you can see we have used this next method seven times so at the last print statement is going to give us the error so first of all let me remove the last statement and let's run the code is going to run fine so you can see everything is fine but as soon as I call this last next method and I know that my iterator is exhausted and when I run the code once again it's going to raise an exception which is iteration now one more thing which I said which you can use with your iterators is the for loop so let's try to use this for loop and I'm going to just write for I in your iterator which is I T which we have got using this ITER method and let me comment this code also and now I can print each and every element inside the list a so I'm going to just write print I here and let me remove this code from here so you can see the list also and this for loop also and I'm going to run this code once again and you can see this for loop has iterated over our list which we have provided as an argument of this list iterator class and you can see all the values inside the list have been printed using this for loop so in this way you can create your own iterator class in Python I hope you have enjoyed this video and I will see you in the next video you
