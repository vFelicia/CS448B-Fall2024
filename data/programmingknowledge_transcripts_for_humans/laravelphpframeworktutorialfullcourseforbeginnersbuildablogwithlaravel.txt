With timestamps:

00:00 - hey what's going on guys welcome back to
00:01 - our YouTube channel and as promised
00:04 - we're finally going to get into laravel
00:07 - we have had some requests to this
00:10 - tutorial so this year's we were going
00:12 - everywhere not just going to be covering
00:14 - the fundamentals of laravel we'll also
00:16 - be building a project from start to
00:18 - finish and in this video we're going to
00:21 - take a look at what we will be building
00:23 - and we're also going to talk a little
00:26 - bit about laravel and some of the things
00:28 - that it can do by the way guys if you
00:31 - are new to this YouTube channel and you
00:33 - want contents about programming
00:35 - tutorials so we have a lot of topics
00:37 - like Java PHP Python and other topics
00:42 - available so I highly suggest that you
00:45 - subscribe to this YouTube channel and
00:47 - press the notification bell so you'll
00:49 - get updated whenever we have a new
00:51 - upload all right so before we get into
00:54 - what we will be doing let's talk a
00:56 - little bit about what laravel is so
01:00 - laravel is an open source page B
01:02 - framework and creators of laravel upset
01:05 - many times that we aim to make the
01:09 - development process pleasing without
01:12 - sacrificing equality so laravel is very
01:16 - elegant and things just kind of seem to
01:18 - work together very nicely also laravel
01:23 - is not only popular but also respected
01:26 - today and laravel uses the MVC or modal
01:32 - view controller design pattern so well
01:34 - we will be talking about that throughout
01:37 - the entire series but the basic idea is
01:40 - that the model deals with the database
01:43 - the view is the user interface that
01:46 - displays in the browser and the
01:48 - controller handles requests which come
01:51 - from either URL or forms such as the
01:55 - post get delete and other requests
02:00 - coming from URL and forms all right guys
02:06 - this are the topics that are included in
02:09 - this particular series so I think we
02:12 - already cover
02:13 - the first one which is the laravel
02:15 - overview so we have discussed some of
02:18 - the strong points of using this PHP
02:21 - framework and also some of the
02:24 - advantages of using laravel also I'm
02:27 - going to guide you in the installation
02:29 - or set up so we could get up and running
02:32 - with this laravel framework in our local
02:36 - development machine and also in this
02:39 - series we're going to build a website in
02:41 - a blog application with authentication
02:44 - and access control and of course at the
02:47 - end of this series we should be able to
02:49 - deploy our own or our very own laravel
02:52 - application alright so now that we get
02:56 - that out of the way let's talk about
02:58 - what laravel actually does for us so why
03:02 - would we choose to build an application
03:04 - with laravel over just building it
03:07 - straight up from scratch so actually
03:09 - there is too many reasons to list so I
03:13 - listed here the important ones
03:17 - so laravel handles routes in an
03:20 - extremely simple way you can simply
03:24 - define what URL and what type of request
03:26 - that you want to handle now most MVC PHP
03:31 - frameworks do this as well as you know
03:33 - such as CodeIgniter cakephp but some of
03:39 - them some of the routing files are
03:41 - really difficult when it comes with
03:43 - expressions and then AMA keywords and
03:46 - things like that
03:47 - so laravel makes everything very very
03:50 - simple which make it a great candidate
03:54 - for restful api and also level adds a
03:59 - security layer to your application so it
04:02 - automatically escapes what it needs to
04:05 - and it also implements cross-site
04:08 - protection with forms and submitting to
04:11 - the database so whenever we are
04:13 - submitting data to our database nerville
04:17 - takes care of the intricacies of the
04:20 - security inside our application so among
04:23 - other things working with database is
04:25 - also easy
04:26 - very easy laravel is shipped with an
04:30 - awesome command-line tool called artisan
04:33 - and it lets us do pretty incredible
04:37 - things with just a single command so one
04:39 - of those things is to create database
04:42 - migrations laravel also uses the blade
04:46 - template engine to display views so it
04:50 - means that we can extend layouts we can
04:53 - use control structures like loops and
04:55 - conditionals right inside the HTML so
04:59 - there's also there's many different ways
05:03 - to implement authentication but laravel
05:05 - sets that up for us to automatically
05:09 - create migrations and to create the user
05:11 - table and all we have to do is run a
05:14 - simple artisan command to enable
05:17 - everything and enable authentication
05:20 - also larvell can can handle sessions so
05:24 - we're going to do that or we're going to
05:27 - discuss that later
05:28 - in this series and also larval provides
05:33 - us with mechanism to compile assets with
05:37 - all the intricacies of storage and file
05:39 - management and also it comes with error
05:43 - handling so error handling is very
05:46 - important especially with bigger
05:48 - projects and it is very important to
05:54 - have this type of module or type of
05:58 - feature in a framework when it comes to
06:01 - handling errors and also we have the
06:04 - unit testing but I think we're not going
06:08 - to touch that in this series but it
06:11 - worth mentioning that clarabelle comes
06:14 - with unit testing mechanism also email
06:18 - configuration for smtp so if you wanted
06:21 - to have like a verification email sent
06:24 - from your application and things like
06:26 - that
06:27 - and laravel also handles cache pretty
06:30 - well so this are just some of the things
06:32 - that some of the benefits to using this
06:36 - framework so as far as the environment
06:37 - goes our development environment
06:40 - I'm going to be using windows and we're
06:43 - going to use one which gives us an
06:46 - Apache server PHP and MySQL on our local
06:50 - machine but laravel is completely
06:54 - cross-platform so even if you are using
06:56 - map or using Linux you can use some or
07:01 - you can use something like them or mom
07:03 - for your development and solan laravel
07:07 - is also pretty easy we're going to use
07:10 - composer which is a dependency manager
07:13 - so this is kind of like an NPM if you
07:17 - are a GS developer so we're going to
07:21 - install that and then we're going to run
07:23 - this simple command to create a new
07:25 - laravel project so by the way you can
07:29 - download the composer from get composer
07:32 - that or website I think I have already
07:36 - mentioned that laravel comes with the
07:38 - artisan CLI so it will enable us to
07:42 - handle many tasks so the number one is
07:46 - to create controllers and models we can
07:48 - use artisan CLI command for that when we
07:52 - are trying to create controllers and
07:55 - models and later on I'll be showing
07:57 - showing you some of the example commands
08:02 - that we can use for this particular task
08:07 - so creating database migration files and
08:10 - running migrations also we can we can
08:12 - use the artisan CLA for that create
08:15 - providers events jobs form requests and
08:19 - other tasks related to this and also we
08:24 - can show the routes we can also issue
08:29 - session commands we can also run tinker
08:33 - and also we can create custom commands
08:37 - by using the artisan CLI and these are
08:41 - the examples of artists and commands so
08:45 - we have the PHP artisan list we also
08:48 - have artisan help migrate
08:53 - also artists and make controller and you
08:58 - controller and here is the one if we
09:03 - want to make a model so our design make
09:06 - Colin and then model and then the name
09:09 - of the model and - M or - M and also we
09:17 - have the page we artists and my great
09:20 - and last example here is artisan tinker
09:25 - so all of these commands or some of
09:28 - these commands were going to use later
09:29 - and this tutorial series and other
09:33 - commands that probably we need in our
09:37 - development process and for today's
09:40 - video we're going to talk all about the
09:44 - environment setup and a lot of its
09:47 - relation so this is the second part of
09:50 - our laravel tutorial series so first
09:55 - thing first we need this tools so we're
09:59 - going to install wampserver for our
10:02 - server so this will provide us with the
10:06 - PHP the Apache server and the MySQL
10:10 - installation another tool that we're
10:13 - going to need is the composer so
10:17 - accordingly it is a dependency manager
10:20 - for PHP so if you don't have already the
10:24 - composer in your installation or in your
10:26 - environment in your local machine so you
10:29 - can go ahead and install the composer to
10:33 - your local environment or local machine
10:36 - so I'm gonna be putting the link in the
10:41 - description so that you'll be able to
10:44 - follow along or you don't be able to
10:47 - install the composer and as well as the
10:49 - webserver
10:49 - so again if you're using another or
10:53 - other platforms such as Mac Linux
10:56 - environment so you can see use other
11:00 - version of the web server I think they
11:03 - have the alum and D mom
11:06 - so you can use that as well so for this
11:09 - tutorial we're going to use web server
11:10 - the composer right and we also have the
11:16 - gate so you can download this as well
11:20 - and install in your local machine so
11:22 - we're going to use these tools later on
11:24 - and also if you want you can also
11:28 - download and install the add-on code
11:32 - editor but any I do any editor will do
11:36 - but for this particular tutorial series
11:39 - were going to use the atom that IO or
11:42 - atom editor code editor so it is
11:46 - available for Windows so you can go
11:53 - ahead and install this also so once you
11:56 - have downloaded and install this
11:59 - software's or tools you're ready to
12:03 - install and set up your environment and
12:07 - also install the laravel for your
12:10 - projects alright our next step is to
12:13 - create our laravel project and in order
12:16 - for us to do that we need bash or get
12:19 - but actually we can use the windows
12:23 - powershell for that for as long as the
12:26 - composer is integrated to that
12:28 - particular command line or command
12:31 - prompt or the windows powershell so
12:34 - let's open up our windows powershell
12:37 - there you go
12:39 - and i'm just going to change the font
12:43 - here so that you can see what I am
12:46 - typing here so instead of 12 let's make
12:50 - it like 24 hey I think that's better and
12:57 - great you were here at this directory
13:01 - users and an admin so we want to change
13:05 - this directory and go to our localhost
13:11 - directory so silly that that
13:18 - another one so if we try to check our
13:23 - director we have here the 164 so make
13:29 - sure you have installed already or
13:31 - wampserver
13:33 - so I have here the one and also the
13:38 - directory for our server which is Joe
13:41 - the triple W so now let's create our
13:45 - project here by typing the command
13:50 - composer and then create project and
13:59 - then the keyword larval slash laravel
14:05 - and the name of our application or the
14:10 - name of our directory so say for example
14:13 - if you have a project learning
14:15 - management system so you might want to
14:19 - name your project as LMS like that or in
14:25 - our case because this is for programming
14:27 - knowledge so this is programming
14:31 - knowledge project something like that
14:35 - and then enter press enter and then we
14:40 - will just wait for a few seconds or
14:43 - minutes and allow the installation to
14:47 - finish so I'm just going to pause the
14:50 - video and there we have it after a few
14:55 - minutes or a few seconds we already have
14:57 - operated our laravel project and then we
15:01 - try to check this project in our code
15:05 - editor which is the atom but like I've
15:09 - said you can use other code editor that
15:11 - you prefer so some of you I think prefer
15:14 - is sublime
15:16 - and me personally I prefer the atom code
15:21 - editor so let's go ahead and try to
15:24 - track this project in our code editor so
15:28 - here we are at our code editor and let's
15:31 - try to open up the project
15:33 - our very own laravel project so let's go
15:37 - to file and open folder and let's try to
15:41 - find the peak a project or programming
15:46 - project and then select folder so this
15:48 - is how the project looks like in our
15:52 - file system and if you try to check if
15:58 - we try to open up this in our browser so
16:04 - let's check this let's just close this
16:08 - and let's try to go to localhost and
16:12 - then DK project so as you can see we can
16:20 - see the structure of the directory of
16:25 - our project which is the PK project that
16:28 - we have created by using the composer so
16:32 - this is a security issue because we can
16:34 - see the how of the project is structured
16:38 - but we don't want that we want to see
16:42 - the home page of our application so if
16:46 - you try to type in public poconos PT
16:55 - project / public so this is the page
16:59 - that we want to see this is the home
17:01 - page of our currently created project a
17:05 - lot of them in order for us to configure
17:08 - this project properly we need to add a
17:13 - virtual host and if we try later on if
17:17 - you tried to browse to our project we
17:19 - shouldn't see this file structure right
17:22 - here so this is some something like our
17:25 - s somewhat ugly for us to see the file
17:29 - structure
17:30 - here so let's go to localhost by typing
17:33 - in localhost and then here we can see
17:38 - the configuration of our one server
17:41 - there you can see and under tools we
17:46 - have here an option to add a virtual
17:49 - host there you go and we just need to
17:54 - add the name of our virtual hosts also
17:57 - for example project ek project that
18:09 - location or that LOC and then probably
18:15 - we need to type in us well the complete
18:19 - absolute path of our virtual host folder
18:23 - so it just literally means that we need
18:25 - to provide the complete path of our
18:29 - project folder so 64 and triple w slash
18:35 - the name of our project which is the PK
18:41 - project
18:42 - programming knowledge project and slash
18:47 - public folder so it means that whenever
18:50 - we have or whenever we browse our
18:53 - project by typing in PK project that LOC
18:57 - it should redirect us to the public
19:01 - folder where in which we can see the
19:03 - home page of our application so there's
19:06 - an option here at the bottom to add a
19:12 - port or listen port but this option or
19:15 - this field is optional for now so let's
19:18 - try to start and create the virtual host
19:21 - here so the files have been modified and
19:26 - virtual host PK project that LLC was
19:30 - created so we need to refresh our or we
19:34 - need to restart our server or one server
19:36 - or the Apache itself so you can go ahead
19:40 - and try to restart
19:43 - here restart all services so that the
19:47 - virtual host that we have created will
19:51 - be added to the server or the WAMP
19:56 - server so after a few seconds we can go
19:59 - to the browser and try to browse our
20:03 - virtual host which is PK project that ll
20:06 - see there you go
20:07 - and where is a PK project equip rod Jack
20:16 - so there's an option here that did you
20:19 - mean to go to peek a project that LOC
20:22 - yes of course and there you go you can
20:27 - see our project PK project that that LOC
20:31 - and redirected to the home page of our
20:33 - project and this is what we see so
20:37 - instead of this ugly fine structure of
20:42 - our project so we can see here the
20:44 - server of our project and and this is
20:49 - the third part of our laravel tutorial
20:52 - series and in this video we're going to
20:55 - talk all about the basic routing and
20:58 - controllers but before we do that let's
21:02 - just run through the code or structure
21:04 - of our project right now so as we have
21:06 - mentioned before laravel uses the Model
21:10 - View controller or MVC format or
21:13 - structure so here in our project there
21:16 - is specific areas for those types of
21:19 - things so there's specific areas for the
21:24 - model there is a specific area for the
21:26 - view and specific area for our
21:29 - controllers so we're going to get to
21:31 - that later on on this video and if we
21:35 - try to open the app folder here we can
21:38 - see the user that PHP file which is this
21:44 - is actually a model and we won't go
21:46 - through the code right now but this
21:48 - particular file is a user or I mean a
21:52 - model user that PHP and
21:54 - can add all the models here inside the
21:58 - app folder but we can actually use or we
22:02 - can actually have a another folder here
22:06 - so you can add project folder here and
22:10 - try to name it as small dance if we have
22:13 - if we have like 50 or have 100 models
22:16 - for our project so we can add a
22:18 - subfolder for this app folder but if you
22:23 - have only maybe less than 10 or less
22:25 - than 20 models you can just leave it
22:28 - here inside the app folder and also if
22:33 - you try to open up the app folder and
22:37 - under HTTP and then controllers here we
22:42 - can see the base controller that page we
22:46 - which is extending the base controller
22:49 - and all the methods and functions of
22:52 - this base controller we can use it in
22:55 - our controller files and also laravel
22:59 - creates a folder for the other
23:04 - controllers such as the lagging
23:06 - controller register controller and reset
23:10 - password controller so all of these
23:12 - controllers we can use we can use this
23:15 - readily if we try to enable the oath for
23:19 - our project and if we try to create a
23:25 - controller we can actually manually
23:27 - create a file here or that PHP file
23:31 - which is for our controller and also we
23:33 - can use or we can create a modal by just
23:37 - manually adding it here but the best way
23:40 - for adding controllers and and the model
23:44 - is by using the artisan now if you're
23:47 - wondering what is this namespace name
23:49 - space app so this is just basically
23:53 - grouping our classes or our code so this
23:57 - is a pretty common especially if you're
23:59 - working the object-oriented way of
24:02 - programming so we're just basically
24:06 - grouping or
24:08 - our glasses and try to distinguish
24:12 - between different classes and the same
24:15 - glasses inside this directory and also
24:19 - if you see the illuminate here don't get
24:22 - confused it is just basically a core
24:26 - files or core functions coming from the
24:29 - laravel so don't worry about this now
24:33 - views are gonna be on the resources
24:36 - folder and under resources views and
24:40 - then here we have the Welcome that laid
24:43 - that PHP and as we all know that laravel
24:47 - uses the great computing system so it is
24:51 - just basically a an HTML with dynamic
24:55 - mechanism in them so we can see if
24:59 - statement we can see loops we can see
25:03 - variables by using the great tableting
25:08 - system ok so now that we get that out of
25:13 - the way we can go to basic routing for
25:17 - our project so basically we what we want
25:20 - is to add a page controller in where we
25:23 - can add we about pages home pages
25:28 - contact or any other page that we want
25:32 - to add in our project so if you try to
25:35 - go to our project and routes here and
25:43 - when you can see we can see here that we
25:47 - have gear out and Colin Colin and then
25:50 - the type of request that we want and
25:53 - then the URL and of course the function
25:55 - that return something or put a lot of
26:01 - operation inside is
26:05 - so try that for now and let's try to
26:07 - open up our project in a browser so here
26:11 - is our project and peak a project that
26:14 - LOC slash so here's the home page where
26:17 - we can see all the links and the title
26:21 - laravel now let's try and go back to our
26:24 - code and try to edit and instead of
26:30 - returning the Welcome we can just return
26:33 - something like attacks or string so
26:38 - return hello world something like this
26:43 - and then save and let's go back to our
26:47 - browser and refresh so as you can see we
26:51 - have here the low world tax that we can
26:55 - see and it is coming from our router or
27:01 - kraut and get and then the URL which is
27:06 - these slashes represent the home page of
27:08 - our project and of course the string
27:11 - hello world okay so for now let's copy
27:16 - this and let's just return this to the
27:22 - original or our index so this is the
27:26 - home page of our app or application and
27:29 - this will be the hello page of our
27:34 - project so this is basically we're just
27:37 - going to display hello world and we can
27:41 - just can also add HTML tag in here so
27:46 - just like that and then save and let's
27:53 - go back to our browser and in refresh so
28:02 - P key project that LOC this will be the
28:05 - home page right and we try to add hello
28:10 - here it will display our update and
28:14 - hello world string and this
28:18 - is with dh1 tab now if you are trying to
28:23 - submit the form or you are going to
28:27 - delete something so you can just change
28:32 - this into post if you are submitting by
28:36 - a forum so working with the route is
28:40 - very easy so say for example we have
28:42 - pages in our project and let's try to go
28:47 - to where is it resources and then we
28:53 - want to separate our pages here so let's
28:57 - just add a pages folder and in this
29:02 - folder we're going to create another
29:04 - fine which is the name of our file will
29:07 - be the about about lady that PHP okay so
29:21 - in our about that way that page people
29:24 - can just say about okay save that one
29:28 - and let's go back to our route file and
29:31 - instead of I think we're just going to
29:34 - change this and to get then let's just
29:38 - stop to pee and paste this here so
29:41 - instead of hello so we're just going to
29:45 - name it about or the URL will be slash
29:50 - about in the set of returning the HTML
29:55 - so we're going to return the view now
29:57 - and notice that we have the the about
30:02 - view inside our pages folder so we're
30:07 - just going to add pages and then add
30:09 - that or period there there and then the
30:13 - keyword about so let's try it save the
30:18 - file and let's go back to our browser
30:20 - okay so here we are at our browser and
30:23 - instead of using the low let's change it
30:27 - into a cloud so as you can see here we
30:30 - have the above
30:32 - word here that is coming from our about
30:38 - that late that page be fine and also
30:43 - there are times that we need to submit
30:45 - dynamic values in our requests so say
30:48 - for example we want to submit or we want
30:50 - to request user with this particular ID
30:54 - so let's go back to our web page B file
30:56 - and let's just copy this so instead of
31:01 - just using the about let's changed it
31:03 - and I think for a change the two users
31:06 - and then in order for us to be able to
31:12 - submit an ID so we can just add a
31:15 - placeholder here and this will represent
31:19 - our ID and inside our function it should
31:22 - have a parameter ID that represents the
31:25 - idea of the user so instead of returning
31:28 - the view for now let's just display this
31:32 - is a user and then we're just going to
31:39 - add the name or the ID of the user so
31:44 - let's just save this and go back to our
31:46 - browser and refresh so instead of using
31:51 - the about so let's go ahead and try to
31:56 - open up the users and let's try to
31:59 - submit each team so this is a user 15 or
32:06 - so for example name name of the user as
32:09 - Jo this is a user is Jo but most of most
32:15 - of the time warriors we were requesting
32:19 - a particular ID and then based on that
32:23 - ID we can clearly that into our database
32:27 - and welcome to this laravel for
32:30 - beginners tutorials and in this video
32:33 - guys we're going to discuss how to work
32:37 - with controllers inside our neural
32:39 - project and as a sort of review a recap
32:42 - in the previous video we work on
32:45 - how to use the basic routings
32:49 - so we have discussed basic routing in
32:52 - the previous tutorial and like I've said
32:54 - in this tutorial we're going to discuss
32:56 - controllers but firstly we need some
32:59 - configurations especially if you are if
33:03 - you're using the atom code editor so
33:09 - basically we're going to install some
33:11 - packages required for us to continue
33:14 - working with our laravel project so one
33:17 - thing that we need is the terminal
33:20 - because by default terminal or the
33:23 - built-in terminal of atom is not
33:27 - currently installed so we need to
33:29 - install the atom terminal for this
33:33 - particular code editor so in order for
33:35 - us to do that we need to go to file and
33:39 - then settings and then under packages we
33:45 - can see all the packages installed here
33:48 - in our code editor and in order for us
33:53 - to install so let's go here in the
33:56 - installed section and then we need to
34:00 - search for atom terminal and then we're
34:05 - going to use this terminal for us to
34:07 - issue a command by using the artist and
34:10 - for us to create controllers
34:12 - automatically so there are a lot of
34:15 - terminal available if we search for
34:18 - terminal inside the atom code editor but
34:24 - I'm using this one this is Adam -
34:28 - terminal 0.8.0 so accordingly it open
34:34 - terminal terminal the current files
34:36 - directory so whenever we activated this
34:38 - terminal it will be inside the current
34:41 - files directory so go ahead and try to
34:45 - install that so it is developed by Karin
34:48 - so as you can see here and this will be
34:50 - our basis and this will be we will be
34:53 - using this to issue commands by using
34:56 - the artisan - to create our control
34:58 - automatically so after installing the
35:01 - terminal we can finally issues artisan
35:04 - commands by using the built in atom
35:06 - terminal and in order for us to activate
35:09 - that we need to press alt shift e in our
35:14 - keyboard so ctrl or alt shift e and then
35:18 - this will be or this will open the
35:21 - current files directory which is the
35:24 - name of our project currently is M or PK
35:27 - project and then from here we can issue
35:30 - the artisan command to create the
35:33 - controllers of our project so let's try
35:38 - to issue commands or others issue
35:41 - artisan command to create our controller
35:43 - so the key word for that is we need to
35:45 - use the PHP and then artisan and of
35:48 - course the keyword make next to that is
35:51 - the controller keyword and of course the
35:54 - name of our controller which is pages so
35:57 - for example using pages and then pages
36:00 - controller so you might want to use this
36:04 - code or I mean the naming notation so
36:09 - all the first letter of the word or any
36:13 - word is capitalized so example for this
36:16 - the P in the pages is capitalized and of
36:19 - course the C in controller is
36:21 - capitalized so every first letter of
36:24 - words in our controller must be like
36:27 - this like a naming convention for our
36:30 - controller so after that just need to
36:33 - press ENTER and then wait for a few
36:36 - seconds and there you have it controller
36:39 - created successfully and then if we try
36:41 - to check our app directory inside here
36:45 - and there HTTP and then controllers and
36:50 - then there you can see the pages
36:53 - controller that page we file has been
36:55 - generated with all the necessary terms
36:59 - and code included so we have here the
37:02 - name namespace of HTTP controllers and
37:06 - also it automatically added the
37:08 - illuminate HTTP request and
37:11 - created the class pages controllers
37:14 - which extends the controller class and
37:18 - any controller that you created should
37:20 - extend the controller class and inside
37:24 - here we can create a function or method
37:27 - so a function inside the class is can be
37:30 - called a method also so public function
37:34 - and then index okay so public means that
37:40 - we can access this outside of this class
37:42 - so for now let's just say it will return
37:46 - a tax or word index and let's go back to
37:51 - our routes folder and web dot PHP so we
37:56 - have here the index setup like this so
38:01 - instead of using this so I'm just gonna
38:04 - go ahead and comment this out and then
38:12 - paste it here so instead of using this
38:16 - function to return our index so let's
38:21 - just try the pages controller or we'll
38:26 - try to use our pages controller here
38:28 - so first let's use the occultations
38:33 - pages controller and add symbol and of
38:37 - course the method or the function that
38:40 - we have defined which is the index and
38:43 - now let's try this in our browser so I'm
38:47 - just gonna save this web dot PHP and go
38:51 - back to our browser and try to refresh
38:55 - so as you can see we are on the root
38:59 - folder or the root directory of our file
39:01 - or our project and then it says the
39:03 - index which is coming from our pages
39:06 - controller and index method so now we
39:10 - want to return the view index instead of
39:15 - this string index so let's go back to
39:18 - our code editor and in here let's go to
39:22 - pages controller
39:24 - instead of returning the index we just
39:27 - need to return the view and of course it
39:30 - should be under the pages and then the
39:33 - file index so currently I think I think
39:41 - we don't have yet the index dot PHP file
39:44 - so let's just go ahead and create that
39:46 - so under resources so we have here the
39:49 - views so under pages let's just go ahead
39:54 - and create a new file so this should be
39:58 - index that laid that PHP and let's just
40:04 - try to copy all the HTML from welcome
40:10 - that way dot PHP to our index that laid
40:12 - that PHP and just we're just going to
40:16 - delete this content from here and I
40:21 - think also the Styles all the stylings
40:23 - available here that's just it this and
40:26 - of course this font and for the title
40:33 - we're going to get back on this later on
40:36 - but for now let's just define a tag here
40:41 - each one and then welcome to larva for
40:48 - beginners right there beginners from
40:57 - programming knowledge and then
41:03 - paragraphs there you go this is a larval
41:12 - tutorial series okay so if you try to
41:18 - open up the dot env file it holds all
41:23 - the connection like the values for our
41:27 - database connection the database name
41:29 - the password username and all other
41:33 - values and also it holds the app name of
41:36 - our project so it
41:38 - it it says laravel its instead of
41:42 - laudable I'm just going to rename the
41:44 - speak a project or programming knowledge
41:47 - project and save that and go back to our
41:52 - index that later at the HP so instead of
41:54 - using the laravel as title here let's
41:58 - just use the config file so config and
42:01 - then open closed parenthesis and app
42:07 - that name and if that is not available
42:11 - let's just use PK project okay
42:16 - and save that and let's go back to our
42:20 - browser and refresh our page so as you
42:26 - can see here we have the new HTML coming
42:29 - from our index that page B welcome to
42:31 - laravel for beginners from programming
42:34 - knowledge so this is a laravel tutorial
42:36 - series and this reflects all the content
42:39 - from our index dot PHP file so as you
42:44 - can see here the code or the HTML code
42:46 - behind this page okay so for now let's
42:50 - just do the same for our about page so
42:53 - let's just copy this and go talk about
42:57 - that way that PHP file so instead of
43:00 - using the about so let's just paste the
43:03 - HTML and let's just change this instead
43:07 - of welcome to level for beginners it
43:10 - should be about and let's just say here
43:17 - that this is the about page and while
43:22 - we're at it we're just going to do the
43:24 - same for our services so we need to add
43:26 - a new page so this will be services that
43:30 - laid that PHP and paste the HTML and of
43:37 - course change this into services right
43:41 - and this is the services page right so
43:46 - save that and I think I have misspelled
43:50 - the blade so
43:52 - name this in too late instead of bleeded
43:55 - and for our page controller pages
43:59 - controller we need to define functions
44:01 - as well two other functions for our
44:04 - services and about so instead of index
44:08 - this should be for about so pages that
44:12 - about and this will be for our services
44:16 - so services save that and in our route
44:24 - file stead of using this routing
44:29 - mechanism so let's just replace them
44:31 - with our newly updated functions from
44:35 - pages controllers so let's just copy
44:37 - this this will be for about and of
44:41 - course change this into the above method
44:44 - and this will be for our services and
44:49 - this will be services as well so save
44:53 - this and let's go back to our browser
44:55 - and try to check if all are working ok
45:02 - so try to refresh and then let's go to
45:05 - our about page so as you can see here we
45:10 - have updated our about page and of
45:14 - course if we try to go to our services
45:16 - page so services and there you have it
45:21 - this is the service page of our
45:23 - application so I think that's all there
45:27 - is to it for this tutorial and in the
45:29 - next video we're going to discuss how to
45:31 - go about blade template nning because
45:34 - currently we are using or HTML for our
45:37 - about for our services and for our index
45:40 - that PHP file so we want to reuse and
45:45 - reduce the code for this particular file
45:49 - so we're going to look at how to go
45:52 - about via templating and in this video
45:54 - we're going to talk about blade
45:56 - templates and of course a sort of recap
45:59 - from the previous video we work with the
46:03 - controllers and we set up control
46:05 - by using the artisan and as I've said in
46:09 - this video we're going to talk about
46:10 - blade templates so let's go ahead and
46:12 - create a new folder inside our resources
46:16 - folder and under views so we're going to
46:19 - create here a layout directory so new
46:26 - folder and then we're just going to name
46:29 - it layouts because as you can see if we
46:34 - try to open up our pages the about the
46:38 - index and services you can see we have
46:41 - repeating HTML for our services page our
46:45 - index page and our about page so we'll
46:49 - try to minimize that by using our layout
46:54 - files so under layouts this is under
46:59 - view so under layout we will create a
47:01 - new file called up that laid that PHP
47:06 - and then we're going to substitute or
47:08 - we're going to add some keywords here
47:12 - that will enable us to minimize this
47:14 - repeating HTML and inside here we're
47:19 - just going to copy the HTML from our
47:23 - about Veda HP and paste it here in our
47:26 - app that laid that PHP and in here we'll
47:30 - just say add symbol and then yield and
47:37 - and then keyword content so save this
47:43 - and inside our index dot PHP so instead
47:49 - of using all this HTML we'll just delete
47:52 - this and we'll just leave this h1 and
47:57 - paragraph tag and at the top we'll just
48:01 - say extends and then open in close
48:05 - single quote and then layouts that so
48:11 - the reason behind we we put layout set
48:15 - up because this particularly out
48:19 - Long's or under layouts folder and the
48:23 - name of the layout s app so that's why
48:26 - we extend layout that up here and of
48:30 - course let's just delete this also the
48:33 - body and HTML tagged and in here was
48:36 - just gonna put a section and it should
48:43 - be the content right there and in here
48:49 - let's we'll just end the section okay
48:54 - there you go
48:56 - let us save this and copy all this code
48:59 - or maybe here and then go tour about
49:04 - that page P so instead of using all this
49:06 - HTML we'll just replace that and put the
49:11 - end section there same thing with our
49:14 - services so remove all that HTML and
49:19 - type in the end section here so let's go
49:25 - ahead and try to preview if all of our
49:29 - code are working so here we are at our
49:35 - index let's just refresh that and as you
49:38 - can see our index dot PHP file is still
49:42 - working with all the h1 and paragraph
49:47 - tag there and if we try to go to about
49:51 - it should work as well and of course the
49:54 - services okay so this is the index right
50:00 - so maybe we'll just change the stacks
50:03 - and try to see if it's working or if
50:09 - it's really working or not so let's go
50:12 - back to our code editor and index that
50:17 - laid that PHP so welcome to laravel for
50:20 - beginners and we'll just delete that
50:23 - save our file and let's go back to our
50:26 - browser mmm refresh there you go as you
50:31 - can see
50:32 - the h1 tag only contains now D welcome
50:35 - to laravel for beginners tax so in that
50:39 - manner we won't have to repeat all the
50:41 - ugly HTML that we had before and now
50:45 - let's try if we want to pass some values
50:49 - or parameters to our blade templates so
50:52 - let's go to our pages controller in the
50:56 - app HTTP and then under controllers so
51:01 - pages controllers and let's try to pass
51:05 - some values or parameters to our layout
51:09 - by just using this mechanism here so
51:13 - let's just say title and then welcome to
51:20 - programming knowledge something like
51:23 - this programming knowledge there you go
51:27 - and actually there's two ways on how to
51:30 - do this but I will show you both ways on
51:33 - passing values to our template so the
51:39 - first way is this so let's just pass
51:43 - parameters so view and then compact
51:48 - compact there and pass in the title as
51:52 - the parameter and let's go to our index
51:55 - so instead of using this text here let's
51:58 - type in curly braces and then tighten
52:06 - there we go and let's try to save this
52:08 - and go back to our browser so this is
52:13 - the original text welcome to larval for
52:15 - beginners and let's refresh our page so
52:20 - I think we have an error use of
52:22 - undefined constant title assumed so I
52:24 - think we forgot to type in the dollar
52:27 - sign or money sign so instead of only
52:31 - the title we'll type in the dollar sign
52:34 - for our placeholder and then save that
52:38 - and refresh there you go as you can see
52:42 - welcome to
52:44 - gramming knowledge so let's just just to
52:50 - make sure let's just change something
52:53 - here in our text so instead of the title
52:58 - let's just say welcome to programming
53:02 - knowledge and then let's try to add a
53:06 - mark there or at the exclamation mark
53:08 - and refresh our page and there you can
53:11 - see welcome to programming knowledge
53:13 - with the exclamation mark another way of
53:17 - passing parameters to our layout is by
53:20 - using the keyword width so instead of
53:23 - using this let's just comment this out
53:25 - and paste it here and also change this
53:30 - instead up compact let's just say with
53:34 - and of course the title keyword and the
53:39 - actual variable title let's just go
53:43 - ahead and do the same thing for our
53:46 - about pages so in here we can pass in
53:51 - the about us tax and this should be with
53:57 - and of course title with the actual
54:02 - variable title here and also in this
54:05 - particular method we can pass in
54:08 - multiple data by using array and instead
54:13 - of using the title variable so let's
54:16 - just say data and then we will define an
54:19 - array here array and inside this array
54:25 - let's just say we have a title here and
54:29 - then services okay and of course we need
54:36 - to pass this to our services page or
54:40 - services layout with the keyword with
54:44 - let's just not forget the greater than
54:47 - sign in of course we can use the data
54:52 - variable and let's just go to our pages
54:58 - be about so instead of using the about
55:04 - here let's just go ahead and type in the
55:07 - title and also for our services here we
55:14 - can just say tie it down there you go
55:20 - so about and our services and including
55:24 - our index that made that made that PHP
55:27 - and let's try to refresh our page and
55:30 - let's go to our about page as you can
55:34 - see we have here the updated about page
55:36 - and also the services with I think we
55:42 - have misspelled a bit so let's try to
55:44 - change that in our code editor so
55:47 - services I think it's in our pages
55:51 - controller and of course by deleting the
55:56 - D because we have misspelled there and
55:59 - refresh and there you have it
56:02 - services this is the service page and
56:05 - for today's video we're going to discuss
56:07 - about how to compile assets in our
56:09 - laravel project but first let us try to
56:12 - pass data as an array of values so last
56:15 - time we pass parameter as array but what
56:20 - if try to pass data or an array of data
56:25 - inside an array so we'll try to do that
56:28 - here in this video and let's go ahead
56:30 - and instead of passing only the title
56:34 - we'll just pass another array of data
56:37 - here so services and then we're going to
56:40 - add we're going to add regular array
56:43 - here for our services so number one will
56:47 - be web design second one is programming
56:55 - third will be SEO all right so since
57:02 - we're passing this services inside the
57:05 - data array so we should be able to
57:08 - access that in our services that laid
57:10 - that PHP file
57:12 - and in order for us to do that we need
57:14 - to check if there is if the services are
57:18 - a contains something so we could add a
57:23 - logic here so if count and then the
57:26 - services is greater than zero and below
57:38 - here let's try to add the and if there
57:44 - you go
57:44 - and of course we need to iterate our
57:47 - services array if it is not empty so add
57:50 - for each for each and then the services
57:55 - as service and we need to add also the
58:02 - end of our 4-h and of course inside
58:07 - inside this for each we need to like if
58:10 - we need to add the Li for our service
58:14 - something like that and then we need to
58:17 - get the server's itself and we need to
58:21 - add the UL for our or inside this if
58:27 - statement so you will here
58:36 - save and let's try to preview our page
58:42 - this is the home page of our application
58:44 - and if you try to go to services we can
58:49 - see here we have the data coming from
58:52 - our pages controller and we're passing
58:55 - the data including the web design
58:58 - programming and SEO now let's talk about
59:01 - compiling or how to compile assets in
59:04 - our laravel project so before we proceed
59:07 - let's download first the node genius so
59:10 - if your Windows user or Mac OS X user so
59:16 - there is available and solar for you and
59:18 - you can have the 32-bit 64-bit options
59:25 - but we'll just try to install it by
59:28 - using this means Windows installer and
59:31 - install it in our local machine so after
59:37 - downloading we can just install it right
59:39 - away open up the installation package
59:43 - and then try to click on next and then
59:47 - accept the terms and the license
59:50 - agreement
59:51 - so next and then the installation path
59:55 - the next and then make sure to enable
59:58 - all this options here the node.js
60:01 - runtime the NPM package manager online
60:05 - the commendation shortcuts and then add
60:08 - to our environment path in the next and
60:13 - there's an option here the to
60:14 - automatically install the necessary
60:16 - tools and there is a note that this will
60:21 - also install the chocolaty and the
60:24 - script will pop up in a new window after
60:26 - installation process so to save us from
60:28 - trouble so let's just enable this and
60:31 - then next and install and then we'll
60:36 - just wait for a few seconds to enable
60:40 - the nodejs installation to complete and
60:43 - then after installation we should be
60:47 - able to like for example include
60:49 - strap in our project to include other
60:53 - dependencies for a project and so on and
60:57 - now that the installation is complete so
61:01 - let's go back to our project here we are
61:05 - we can try to open up our PowerShell
61:08 - window and then let's try to see the
61:14 - version of our nodejs so we have the V
61:18 - version 12.13.12 can see the version for
61:24 - our NPM which is also 6.12 point one so
61:32 - by this time we can already include our
61:34 - bootstrap insulation for our project now
61:38 - we just want to run the command composer
61:41 - require laravel and then /uy and then
61:46 - we're just going to wait for a few
61:47 - seconds to allow the installation to
61:50 - complete and we should be able to
61:52 - incorporate the necessary libraries for
61:56 - our laravel UI so as you can see this
62:00 - will also install the bootstrap in our
62:03 - laravel project so we can already use
62:06 - that if we have a successful
62:10 - installation for our laravel UI and now
62:16 - that the installation for our laravel UI
62:18 - has been completed so we need to run
62:21 - also or to include also the dependencies
62:24 - for our oath so this will include the
62:27 - login and register view so PHP artisan
62:30 - and then UI views - - oath and this will
62:37 - install the log in register and after
62:40 - that we need to run the command npm
62:42 - install to compile the CSS and other
62:46 - dependences of our project so we should
62:48 - be able to see the login register and
62:52 - other views included for our UI and view
62:57 - oath or auth dependencies so I'll try to
63:01 - show you that
63:03 - after this installation so we're just
63:07 - going to wait for a few seconds for it
63:10 - to complete and then we should be able
63:13 - to see the changes in our browser by the
63:16 - way if you can see here at the top
63:17 - there's a prompt here that the layout
63:21 - app blade that PHP view already exists
63:24 - so do you want to replace it so in my
63:26 - case I have said or I have set it to N
63:30 - or no but you can try to accept it or to
63:36 - replace the existing layout of our app
63:40 - that late at page please so you can try
63:42 - to answer yes for that and then the
63:45 - layout of our project will be changed
63:47 - according to this update and this layout
63:52 - balloon will also include the old the
63:54 - login and then register as I've
63:59 - mentioned before and as you can see here
64:01 - I have here the layout view already
64:04 - exist and do you want to replace it and
64:06 - I just answer it why or yes for that so
64:10 - I just want to replace the existing app
64:13 - that rate that page way that we have
64:14 - been working on in the previous tutorial
64:17 - and after that you need to run also the
64:20 - command npm run dev to compile all the
64:24 - necessary assets that we have so here we
64:26 - have the app that CSS and app dot j s
64:30 - and after running this command we should
64:35 - be able to see the changes of our
64:37 - project so i'm going to show you the
64:40 - project now and what it looks like so
64:44 - this is our project should look right
64:46 - now and as you can see we have here the
64:48 - CSS folder that contains the app that
64:51 - CSS or generated app that CSS that
64:54 - contains all twitter bootstrap styles
64:58 - necessary to apply to our project and we
65:02 - also have the J's file or GS directory
65:05 - with the app that J s file as you can
65:09 - see with all the scripts needed for our
65:13 - project so this is the compiled versions
65:15 - of all the
65:16 - scripture scripts for our project and as
65:20 - you can see here the resources we have
65:22 - here the op GS and the bootstrap Jas and
65:27 - as I've mentioned before we also include
65:29 - the oath files so it should be the log
65:36 - in that Lagoon blade at the HP register
65:39 - blade that PHP and verify that they are
65:42 - verified that blade that PHP and of
65:45 - course we also have this files for our
65:48 - passwords so confirm email and reset and
65:52 - now let's try to preview our code in our
65:54 - browser so this is the home page of our
65:56 - project right now and if we try to go to
65:58 - about section so we can still see the
66:02 - about us and then this is the about page
66:05 - tax and of course we can also see the
66:09 - services with all the services included
66:11 - the web design programming and SEO so
66:14 - this are the pages that we have added
66:18 - the login and then register if you try
66:20 - to click on that so as you can see we
66:23 - have here the ready-made
66:24 - login form and the same thing with our
66:28 - register and in this video we're going
66:31 - to discuss how to work with models and
66:35 - migrations but before going into models
66:38 - and database migrations let's try to add
66:41 - first the about and services links here
66:45 - in our navigation bar so let's go ahead
66:49 - and try to do that in our code editor
66:51 - and in here we can try to open up our
66:54 - app that laid out by HP so let's go
66:57 - ahead under views and then layout up
67:01 - that late at HP and as you can see here
67:05 - we have here the links of the login and
67:08 - register so all we have to do now is
67:12 - just copy this and paste it here so
67:15 - we'll just add the links so for example
67:19 - for our home
67:21 - let's just put slash there for our home
67:25 - and then copy that for our services so
67:32 - the link for our services is slash
67:35 - services and the same thing with our
67:39 - about page that there and change this
67:44 - link into slash about and then let's
67:48 - just go ahead save this and let's
67:54 - refresh our page and there you go we can
67:59 - see that we have the Home Services and
68:03 - About section but I think we need to
68:06 - modify the layout because we want this
68:10 - home services and about to align with
68:13 - login and register so in order for us to
68:16 - do that let's go back to our code editor
68:19 - and in here instead of having one nav
68:23 - item so let's make it free for our home
68:30 - and then the same thing for our services
68:35 - close the list item tag and paste
68:40 - another one so save this and here
68:45 - refresh so as you can see now we have
68:50 - the home services about login and
68:53 - register links aligned together and if
68:57 - you try to click any of these links it
69:00 - should work for all of them so the about
69:04 - services home and also the login and
69:08 - register links one last thing that we
69:12 - will modify here is that we need to add
69:14 - some class to our content to properly
69:19 - position our text services and also the
69:23 - about Us section let's go back to our
69:26 - code editor and try to modify this and
69:31 - in here let's go to
69:34 - the main element and it has a class of B
69:38 - why - for for now so let's add a
69:41 - container class for this and then say go
69:44 - back to our browser and refresh there
69:49 - you go you can see that the about or
69:53 - this elements are slightly indented from
69:58 - the left so about us and also with the
70:02 - services now that we have that covered
70:06 - let's try to go to the topic models and
70:09 - database migrations so the first thing
70:12 - that we're gonna need is the page with
70:14 - my admin if you are using one or Sam or
70:18 - any versions of the wampserver
70:21 - so the page with my admin is embedded
70:25 - into that and included on the
70:28 - installation process and I hope that you
70:31 - included that during the installation
70:33 - process of the one server or lamp or any
70:36 - version or any variation of the
70:39 - wampserver
70:40 - now we need page beam admin because
70:43 - we're going we're going to add a
70:44 - database here so all we have to do is
70:48 - click the new and then we're just going
70:51 - to name our database as PK project there
70:55 - you go and then great now we don't want
71:01 - to create tables here because we want
71:03 - our laravel project to automatically
71:06 - create table for us so let's go back to
71:08 - our code editor and make some changes
71:11 - and add controllers add borders for our
71:15 - project and in here let's try to open
71:18 - our terminal so I'll shift e so this
71:22 - will open up our integrated terminal for
71:24 - our atom code editor and from here we
71:28 - can issue commands or run commands
71:32 - artisan commands page P comments or any
71:34 - other commands that we need so the first
71:38 - thing that we're going to need is to
71:40 - create a controller for our post so the
71:43 - key word for that is
71:46 - PHP artisan make and then Colin and then
71:51 - controller and of course the name of our
71:55 - controller which is post controller and
71:57 - then enter and we're just going to wait
72:03 - for a few seconds to allow the
72:05 - insulations are to allow the generation
72:08 - of files so there you go
72:09 - controller created successfully and the
72:13 - next thing is we need to we need to add
72:15 - a controller or I mean a modal but for
72:19 - now let's try to check first if the
72:21 - controller has been generated for us
72:23 - here in our project so as you can see we
72:28 - have here the post controller the deck
72:30 - extends controllers and readily use the
72:35 - illuminate coming from the laravel and
72:39 - added the namespace controllers so the
72:42 - next thing that we're going to generate
72:44 - is a modal so in order for us to do that
72:47 - just like the controller is to issue
72:51 - command PHP artisan and then make and
72:54 - then instead of controller we're going
72:56 - to use a modal and try to generate a
73:02 - post modal so as you can see we need to
73:05 - or I think the best way here is to use a
73:09 - singular form of post so here we are
73:14 - using post and then enter and before
73:19 - that we need to add /m because we're
73:23 - going to use the migrations so this will
73:26 - enable us to generate the table from our
73:28 - laravel project so - M and then enter
73:31 - and there you go model created
73:34 - successfully and created migration post
73:39 - tables as you can see if we try to go to
73:42 - our database view database and then
73:45 - migrations we have here the create post
73:49 - table a great post table migrations
73:53 - so as you can see it extends migration
73:55 - class and then it has the two function
73:59 - up
74:00 - and down and then we need to modify this
74:02 - method function up because currently
74:07 - this particular function create a post
74:10 - table with this attribute ID which is
74:14 - Auto incremented and also it includes
74:17 - the time stamps for created add and
74:20 - update and add which will be
74:22 - automatically filled in when we try to
74:24 - run the migration command and since
74:26 - we're dealing with post we probably need
74:29 - to more algebra which are title and body
74:33 - so in order for us to do that is we need
74:35 - to add it here in our app function so
74:39 - table and then string and then of course
74:43 - we need to name our attributes such as
74:47 - title there you go and another one for
74:51 - our body so table and then we want to
74:59 - make sure that we use the medium text
75:02 - here because usually the body of I post
75:06 - tends to be longer than the title right
75:08 - so medium tags and then this will be the
75:12 - body of our post so save this and as you
75:16 - can see here if we try to go to
75:17 - migrations we also have the migration or
75:22 - create users table migration for our
75:24 - users
75:25 - so we including all the attributes ID
75:28 - name email password and all other
75:32 - attributes included here now we will
75:36 - make few changes here before we run the
75:39 - migration and create our table so let's
75:42 - try to go to our ENB
75:44 - file to input our database details so we
75:50 - have here the database the username and
75:53 - the password
75:54 - so I think the username and password are
75:58 - already set but we have to update the
76:02 - database name which is in our case we
76:04 - have used the Vicki project there you go
76:08 - and then save this
76:11 - so before we run the migration command
76:14 - and generate the tables I'm going to
76:17 - show you a quick change that I made in
76:20 - providers app servers for Ryder dot PHP
76:23 - so under provider app folder or
76:26 - providers directory and then app servers
76:28 - provider dot PHP
76:30 - make sure to import the illuminate
76:32 - support passage and a facade and then
76:35 - schema and inside this function boot
76:38 - make sure to add this schema default
76:40 - string land which is 191 and if you have
76:44 - added that already we're good to go and
76:47 - we're now going to issue the PHP artisan
76:51 - migrate command so PHP artisan and then
76:55 - migrate and if we try to check our page
77:04 - with my admin and refresh our project
77:09 - core PK project so as you can see we
77:11 - have here all the tables generated
77:15 - coming from our project or PK project so
77:18 - we have here the post inside this post
77:21 - we have the ID which is the
77:23 - auto-generated ID and the title which is
77:28 - the land is 191 so we have set this in
77:33 - our code and the body and of course the
77:37 - time stamps they created that and update
77:39 - that and in this video we're going to
77:43 - discuss how to fetch data with eluc rent
77:46 - and also we're going to populate our
77:50 - database by use by using the tinker
77:53 - command and in order for us to do that
77:56 - let's open or integrate the terminal of
77:58 - our atom editor so in order for us to do
78:02 - that is we have to press shift alt and T
78:06 - and there you go we have opened our
78:09 - integrated terminal and in here we can
78:12 - type we can run the finger commands from
78:15 - here and also we can populate our
78:19 - database by using the tinker so all we
78:21 - have to do now is
78:23 - type in PHP artisan and then tinker and
78:30 - as you can see we have here the brackets
78:32 - that let us know that we are inside the
78:36 - tinker program and from here we can
78:39 - directly work with our database and
78:42 - directly work with our models so for now
78:46 - let's bring in the post model so app and
78:50 - backslash and then post and then we can
78:54 - have a function and here so say for
78:58 - example count and it will return in zero
79:02 - which means we don't have yet a post in
79:05 - our post table or post model so now
79:10 - let's create a new instance of our post
79:12 - so in order for us to do that as defined
79:15 - a variable dollar sign post and then
79:18 - equal sign and then our in model and
79:22 - then new app backslash and then post
79:27 - then semicolon and make sure you have
79:31 - the backslash instead of forward slash
79:34 - so this will be the backslash and enter
79:40 - so now we have a instance or an instance
79:45 - of our post model so it is being saved
79:47 - in our memory and by that we can use
79:51 - that in order for us to move forward and
79:54 - add a post to our post table so now we
79:59 - can use the post instance and then set
80:02 - the title for our first post so let's
80:05 - just make it the title into post one and
80:09 - then semicolon there we go and then of
80:14 - course for our post body let's just do
80:18 - the same for our post body so this is
80:23 - this is the post body semicolon and then
80:31 - there you go this is the post body and
80:34 - then after that one we can save this
80:37 - save the information for our title and
80:42 - our body so post and then save and then
80:48 - enter and it returned it returns true
80:52 - which means that we have saved a certain
80:55 - post to our post table now if we try to
80:59 - check our database inside our PHP
81:02 - myadmin
81:03 - we can see here that we have a post and
81:06 - of course we have the the first post
81:09 - which is which has the idea of one that
81:12 - I tell we have set this into post one
81:15 - and of course we have set the body
81:18 - content this is the post body and it
81:22 - also have the created at and updated at
81:26 - fields which has automatically populated
81:29 - for us so let's try to add another one
81:32 - and first let us create a new instance
81:34 - of our post model so new and then app
81:40 - backslash and then post this will create
81:44 - another instance and then we're going to
81:49 - set the title for this this is post two
81:54 - and the post body also we need to set a
82:01 - value for this this is the second post
82:06 - body there we go and we will say finally
82:13 - we will save this values so our database
82:20 - so it returns true again which means
82:24 - that we have now have to post in our
82:28 - post table in our database so refresh
82:33 - here and then you can see we have two
82:36 - posts or two records of our post table
82:40 - so post two and then this is the second
82:43 - post body with D created at and updated
82:47 - at fields now if you try to go back into
82:50 - our project and if you want to add a
82:54 - functionality here for our create read
82:57 - update and delete we're going to need to
83:00 - have different functions and different
83:03 - routes in our laravel project so let's
83:07 - go back to our code editor and try to
83:10 - edit our post controller let us open our
83:15 - post controller and as you can see here
83:19 - it is pretty much empty for now so in
83:23 - order for us to add the functionality
83:25 - for our create read update and delete I
83:28 - think we're gonna need functions or
83:30 - several functions from here so we need
83:33 - the first one is index so it is just a
83:37 - way of listing all our posts from our
83:39 - database another one is create and I'm
83:44 - just going to type it in here you don't
83:47 - need to follow this time so store to
83:51 - actually save our data into our database
83:54 - and then we have the function to add it
83:58 - and also we have a function that should
84:02 - be updating our data and of course we
84:06 - have also show and of course the last
84:11 - one to delete our record from our
84:15 - database so we could actually create
84:19 - this functions manually but we'll try to
84:23 - create this by using some commands so I
84:29 - think I haven't shown you this yet so I
84:33 - think I just have to delete this post
84:38 - controller for now and generate another
84:41 - one so I have deleted the post
84:49 - controller for now and I'm going to
84:53 - generate it again by using some commands
84:59 - so in order for us to do that let's run
85:02 - the command PHP
85:04 - all righty sign and then make and then
85:12 - controller and of course the name of our
85:15 - controller is post controller with s
85:19 - post controller and then we're just
85:22 - gonna add the resource keyword here and
85:26 - then we're just going to wait for a few
85:28 - seconds to allow the generation of our
85:32 - controller so there you go controller
85:36 - generate that are created successfully
85:38 - and if we try to open up the new post
85:42 - controller we can see that all the
85:44 - functions that we have listed earlier
85:47 - has been generated successfully so we
85:50 - have here the function index so display
85:54 - a listing of the resource and some of
85:57 - the functions here don't need or doesn't
86:01 - need the parameters but there are also
86:05 - functions that need the parameter so say
86:11 - for example this one we have D create so
86:13 - show the form for creating a new
86:16 - resource and then the store has this
86:19 - parameter request and we're going to
86:22 - define some of the logic later on inside
86:26 - this function and also we have the show
86:29 - so it has the ID that will identify the
86:33 - record that we wanna show here and also
86:36 - we have the edit the same thing it has
86:38 - the ID parameter and also we have the
86:41 - update that requires two parameters the
86:46 - request and of course the ID of the
86:49 - resource and of course the destroy
86:52 - function that will enable us to delete
86:56 - based on the ID of the resource so now
87:00 - that we have laid out all these
87:01 - functions in our controller we need to
87:04 - have a route for each functions right so
87:10 - we're going to add or we're going to go
87:13 - to the web page P of
87:15 - routes and as you can see we have here
87:20 - the route that we have currently and if
87:23 - you try to go to our command or our
87:25 - terminal let's try to list our routes
87:29 - for now so PHP artisan and then route
87:33 - and then list so these are the currently
87:39 - generated routes for our project so as
87:42 - you can see we have heared laggy in the
87:44 - home the password the register and all
87:49 - other functions or all other routes that
87:51 - we have set and now let's try to add a
87:57 - route for all our functions because it
88:00 - is a kind of pain in the ass if you try
88:02 - to generate individual routes for our
88:08 - functions right
88:10 - so let's try to generate route for all
88:13 - our resource in our post controller so
88:17 - route and then resource and of course
88:23 - the name will be post and of course the
88:30 - name of our controller which is post
88:33 - controller and then we're going to save
88:37 - this for now save and then let's go back
88:40 - to our terminal and try to run another
88:43 - one PHP artisan and then route and then
88:53 - list so let's try to find our resource
88:59 - or generate that routes for our post
89:03 - controller so as you can see we have
89:04 - here all the the routes related to our
89:09 - post controller so we have here the post
89:11 - store post index post create post show
89:17 - and of course post update and all other
89:21 - functions are all other routes that we
89:24 - that we need in our post controller in
89:27 - the previous video we have
89:29 - work with the controller or post
89:32 - controllers we have added their outs so
89:34 - you've tried to open the web dot PHP in
89:38 - our routes folder so as you can see we
89:40 - have defined here route and then the
89:43 - resource and then the name is post and
89:46 - our controller which is post controller
89:49 - and then we also added or generated the
89:53 - post controller class so as you can see
89:56 - here we have here all the functions that
89:59 - we need in order for us to work with our
90:03 - code or create read update and delete
90:07 - functionality of our project and in this
90:10 - video we're going to continue working
90:12 - with our post controller and try to
90:13 - fetch data coming from our database and
90:16 - display it on our browser by the way
90:20 - guys if you try to open our post model
90:23 - so as you can see we haven't done much
90:25 - here and if you want to change the table
90:29 - name you can change it here and also you
90:31 - can change the primary key so it's a for
90:35 - example you want to change the table
90:36 - name here
90:37 - so for table name and then protected and
90:44 - of course the variable table equals the
90:49 - new name or the name of your table that
90:54 - you want in your database and of course
90:58 - you can also change the primary key
90:59 - because by default we have we are using
91:02 - the ID auto increment ID so you can also
91:06 - change that in here so protected say for
91:09 - example protected and then the primary
91:11 - key primary key it was ID there you go
91:19 - or you can change it into public so
91:24 - public primary key and then safer some
91:27 - value if you want to name it as item
91:31 - underscore so for example you want to
91:34 - name it as item underscore ID as the
91:37 - primary key so you can do that also by
91:40 - by default were using the ID
91:42 - right and also if you want to change or
91:46 - if you don't want to include the
91:48 - timestamps that we have or that has been
91:52 - added automatically for us so timestamps
91:57 - remember that created at and updated at
92:00 - fields so we can set it to false to not
92:06 - include that in our database so you can
92:10 - do that here but I'm going to show you
92:14 - now how to display the data coming from
92:18 - our database into our page or post page
92:20 - because let's open our project in our
92:24 - breath so this is the home page right
92:28 - and if you try to go to the post section
92:33 - and page is currently now blank but we
92:38 - can change it because currently it is
92:41 - loading the index function coming from
92:46 - our post controller which is now
92:48 - returning or it doesn't return anything
92:51 - for now so we will change this and we
92:54 - will return the view for our index so
92:57 - we're just going to edit this so instead
93:00 - of returning empty it should return a
93:03 - view so it should be a file under post
93:08 - directory and then the name should be
93:11 - indexed at late that PHP so there you go
93:14 - so we need to create that in our view so
93:18 - resources and then views and then we
93:22 - need to create a new folder here so it
93:26 - should be post and there should be a
93:31 - file here that says index that laid that
93:39 - PHP so there you go and in here let's
93:43 - just extend the layout coming from early
93:46 - outs folder so layouts and
93:50 - app and of course we need to add the
93:54 - suction content for our content to be
93:58 - here especially the post so and section
94:05 - you need to add end of the section here
94:09 - and of course we are going to place an
94:13 - h1 to have our post there and now let's
94:17 - try to preview our post page so as you
94:23 - can see we have the navigation bar and
94:26 - the h1 post and now let's try to get all
94:30 - the posts coming from our database so in
94:34 - our post controller instead of returning
94:36 - just the post index so we can return the
94:43 - actual post so we can use the post model
94:49 - because we're using the eloquent so it
94:52 - is basically just a object relational
94:55 - mapper and in here we can just say post
94:58 - double colon and then all so it will
95:01 - return all the records or all the posts
95:05 - coming from our database so I just
95:10 - comment this one out and also this and
95:15 - also this one so save and then review
95:19 - our code so refresh this page and we
95:24 - have some sort of error here so class
95:26 - HTTP controllers post not found so
95:30 - that's because we then click or use the
95:36 - app post here so we're just going to add
95:39 - that so use app back slash and then post
95:43 - and then semicolon and then save that
95:47 - and let's go back to our browser and
95:49 - refresh so there you go you can see that
95:53 - all the posts coming from our post table
95:55 - in our database has been loaded and it
95:58 - is an array so let's go back to our post
96:01 - page and try
96:03 - to iterate this array to actually
96:06 - display the title so instead of
96:11 - returning the just the pose so we're
96:13 - just going to return the actual variable
96:17 - post so this will be returned view with
96:21 - and of course the name is post and our
96:26 - actual variable is post so it should be
96:29 - s or with s because this variable should
96:34 - contain all the poles coming from our
96:35 - database to save this and in our index
96:39 - that laid that PHP we're going to
96:41 - iterate all the posts coming from our
96:44 - database so let's just do that and in
96:48 - here we'll be adding a condition so at
96:53 - if and then count so first we're going
96:57 - to check if the post array has an
97:01 - element so pose is greater than one and
97:04 - then we're just going to have an else
97:08 - here and of course the end of our if
97:13 - statement if there's an element inside
97:16 - the post array so we're going to iterate
97:20 - that by using the for each and then post
97:26 - and individual posts there and we're
97:31 - just going to use the bootstrap element
97:36 - for a division so and if for now or end
97:41 - of our for each and of course this one
97:46 - is coming from our bootstrap
97:50 - implementation so class well and it
97:53 - should contain the h3 it will hold the
97:58 - title of our post so post and then the
98:03 - title of course and let's try to preview
98:07 - this in our browser so save this one and
98:11 - refresh
98:13 - so there you go we have the post one in
98:16 - post two so we can add also decorated
98:21 - add variable or created add attribute in
98:25 - this so we can see that when it is
98:29 - created and also we can make this title
98:32 - as link so we can actually click on this
98:35 - and then redirect it to another page
98:38 - specifying the ID and then we can see
98:41 - all the details of that particular post
98:44 - so let's go back to our code and and in
98:48 - here let's add an element so small so
98:52 - this will hold the date that the post
98:55 - has been created so small and then it
99:00 - should be written on then double braces
99:07 - the post variable and of course
99:12 - decorated add attribute so save this and
99:16 - preview our page in a browser and
99:19 - refresh so as you can see we have the
99:24 - post one post over and of course the day
99:26 - that when it is created and let's make
99:31 - this post one or post two as a link so
99:34 - let's go back to our code editor and
99:36 - instead of just returning the h3 here
99:39 - we're going to add a link element so H
99:43 - or h3 and inside that is the link
99:47 - element so each raft and then double
99:50 - code so we should close this one here so
99:54 - a four-hour link and then of course it
99:59 - should be redirecting into the post page
100:03 - specifying the post ID so and then ID
100:10 - let's try that save this and let's go
100:14 - back to our browser and refresh so as
100:19 - you can see the post one and post o
100:21 - title has been converted into link and
100:24 - then we can actually
100:26 - click on this and we can see that is
100:30 - blank for now because we haven't
100:33 - configured yet this particular page and
100:36 - in this video we're going to cover how
100:38 - to display the information coming from
100:42 - our database and using the Luke went
100:44 - over em so we're going to display our
100:47 - post so basically from the previous
100:50 - tutorial we have worked with our
100:52 - controller post controller and our post
100:54 - modal and of course we have laid out the
100:58 - basic layout of our index that laid that
101:01 - PHP we're in which we already iterated
101:04 - the post coming from our database and
101:07 - also making our title as link so that we
101:11 - could click on that link and then be
101:14 - redirected to another page where in
101:16 - which you can see the full details of
101:18 - that particular post and also we have
101:20 - added the created at or written on date
101:24 - and then I have realized that we are we
101:28 - use the class well which is not included
101:31 - in in bootstrap anymore so we're going
101:35 - to use card for this class and in our
101:40 - app that laid that PHP file we're going
101:42 - to add the post page so we have here all
101:48 - the items are all the links from our
101:52 - navigation so home services and about so
101:55 - we're going to add another link or
101:57 - another item in our navigation bar so
102:01 - this should be all about the blog which
102:06 - contains all the post and of course this
102:09 - should be all about post so let's go
102:12 - back to our browser and try to preview
102:14 - and let's try to refresh the page so as
102:18 - you can see we now have the home
102:19 - services and of course the blog which is
102:22 - added recently so click on that and you
102:26 - can see we have here a deposed and I
102:28 - think we can take this further so
102:30 - instead as you can see this is somewhat
102:33 - ugly for now so let's try to modify this
102:37 - in our code editor so let's go back
102:40 - here in our index that played that PHP
102:43 - and yet as you can see we have here with
102:45 - the card right but instead of using a
102:49 - ch3 I think we're gonna use the UL for
102:52 - now so this is coming from our bootstrap
102:56 - integration on so so you L so inside
103:01 - this and it should have the class list
103:05 - group and then list group
103:10 - flush flush there you go and then of
103:16 - course inside here is the list item
103:19 - which has the title of our post so it
103:23 - should have a class list group item and
103:27 - in here we're going to place instead of
103:30 - using the h3 so we're going to or I
103:36 - think we could keep this h3 in this area
103:41 - so h3 so there you go instead of using h
103:49 - say only so we're basing the title
103:53 - endocrine created at the inside a list
103:58 - item we should reiterate the list item
104:03 - so let's go back and try to add or
104:08 - remove this and add it here and so with
104:14 - the closing dave and closing l unordered
104:22 - list tag so there you go and then save
104:26 - that and refresh so as you can see we
104:30 - have now a slightly different version of
104:33 - our post so if you try to click on this
104:38 - post so we still have a blank page so
104:43 - we'll try to work on that for now and
104:45 - let's go back to our code editor so
104:48 - let's go to our post controller and as
104:51 - you can see we have here a from
104:53 - that says show that takes in a parameter
104:57 - ID so we can just edit this function and
105:02 - try to return a single post so return
105:06 - and then post and of course you can use
105:10 - a function here called fine and then
105:14 - specifying the ID and let's just save
105:18 - this and try to preview in our page so
105:20 - refresh and here you can see that this
105:26 - is the post one and this is the body of
105:29 - the post one so let's try to check and
105:32 - click on the post to so there you go the
105:35 - idea is to and the title is postal and
105:39 - now let's take this further and try to
105:41 - beautify this instead of just seeing the
105:44 - array of data so let's go back to our
105:47 - code editor and instead of returning
105:51 - basically just the post so we're going
105:54 - to return a view just like what we have
105:58 - in our index function so post and then
106:02 - we're going to return a certain view so
106:06 - this view will be a post or under the
106:12 - folder post or directory post with the
106:16 - show that blade that PHP file name and
106:20 - this should go with our post variable so
106:28 - and then the actual variable post and of
106:32 - course we can try to get this on our
106:39 - post as show file so let's try to create
106:42 - that on our post directory so let's try
106:48 - to create a new file here so this should
106:51 - be show that laid that PHP okay and then
106:57 - we're just going to copy the mark-up
107:00 - from this index that laid that PHP and
107:03 - paste it here and then we're going to
107:05 - extend the layout
107:06 - as well and of course you can get rid of
107:10 - this because we're not dealing with
107:13 - we're not dealing with an array so we
107:15 - can just have or we can just use the
107:18 - post variable and then you can get the
107:20 - title from there and of course we can
107:24 - also get the other attributes so the
107:28 - post body and of course the created on
107:32 - attribute so we're going to add it here
107:36 - by placing it inside a small tag so this
107:41 - should be written on and of course
107:45 - double curly braces and then in our post
107:49 - variable width D created on attribute
107:53 - and I think we can add a char here so H
108:00 - our horizontal rule and then of course
108:03 - we're going to add the body or the post
108:07 - body of the particular post so post and
108:12 - then the body of the post so let's try
108:16 - to save this and preview on our page so
108:23 - this is the current version all we see
108:25 - is an array of values coming from a
108:28 - particular post but if we try to refresh
108:31 - this now we can see the post title and
108:35 - the post body and of course the I think
108:41 - we misspelled instead of using created
108:44 - on I think it is created underscore AET
108:50 - or add and then save that and refresh so
108:56 - we have here all the information the
108:59 - post title post body and of course d
109:02 - created at date so post one and then
109:07 - post two and I think we could also add a
109:11 - button or back button here so let's do
109:14 - that so above the post title we'll just
109:19 - try to add
109:20 - a back button here so it should be a
109:23 - link that goes to the post and of course
109:29 - it should go
109:30 - it should say go back and it should have
109:34 - a class of a button so BTN and then BTN
109:39 - default so save and refresh so we have
109:45 - here a link that tells us to go back to
109:50 - the post or to the page where all the
109:53 - posts are displayed so I there you go
109:56 - post two and then post one and then
110:02 - let's go back so what if you want to
110:05 - sort by
110:06 - maybe title or I T ascending or
110:10 - descending so let's try that on our
110:13 - index function of our post controller so
110:17 - as you can see we are doing the post and
110:21 - then post modal and then double double
110:24 - colon and then all so we can actually
110:29 - sort by title or ID so whatever you want
110:34 - to sort by so say for example let's just
110:38 - comment this one out and try to copy
110:40 - that suppose we can say here order by
110:48 - and then the attribute that you want
110:52 - your records to be sorted by so title
110:56 - say for example in this case title and
110:58 - we can say descending or the d es e and
111:04 - of course we need to say get and refresh
111:10 - here so as you can see now the post o is
111:14 - the first one to appear here instead of
111:17 - the post one and if you try to go as
111:21 - sort by ascending sort by title as
111:25 - ascending there you go refresh so the
111:31 - post one is the first one two
111:34 - appear here in our post page and
111:37 - actually you can also use the SQL
111:39 - commands or SQL statement and our
111:43 - controller to get all the post coming
111:45 - from our database so all you have to do
111:48 - is use the DB class so actually I'm
111:50 - going to show you that real quick
111:51 - because it it is very easy to get all
111:54 - the records coming from our database by
111:57 - using the DB class so we're just going
112:00 - to use DB and of course and here we're
112:06 - going to comment that one out right now
112:10 - and use this as our variable per opposed
112:15 - so post and then equals DB and of course
112:21 - the Select function and our SQL command
112:26 - which is select all from host and then
112:31 - let's just save this and refresh so we
112:36 - still have all the post coming from our
112:38 - database so post one and post all and in
112:42 - this video we're going to discuss forms
112:44 - and how to save data and if you try to
112:47 - go to the create or peak a project that
112:52 - LOC create and then you can see that we
112:56 - have a 404 not found because it is
113:01 - loading the create function of our post
113:05 - controller and as you can see we don't
113:07 - have any logic from here yet so all we
113:11 - have to do now is modify this function
113:14 - and to actually return a view so this
113:18 - should return a view coming from our
113:20 - post directory and create template and
113:27 - let's go ahead and and create that
113:30 - inside our post directory so new file
113:35 - and of course the name of our template
113:40 - is create blade great blade that for HP
113:46 - and then we're just going to copy the
113:49 - mark up from this index that laid that
113:52 - PHP and paste it here and it should say
113:56 - great post instead of just saying post
114:03 - and then we're going to get rid of all
114:06 - this mark up here because we're going to
114:10 - use a form for us to save information
114:15 - coming from a form into our database and
114:20 - for now let us save this and try to
114:23 - preview in our browser so refresh so as
114:28 - you can see we still have the peak a
114:30 - project that LOC create and we're
114:33 - getting a 404 not found that's because I
114:39 - think we need to specify first the post
114:42 - here before they create so post and then
114:47 - create and there you see the create post
114:51 - h1 that we have added in our create that
114:55 - plate that PHP file so let's try to add
114:58 - a form into this page and we're going to
115:03 - use laravel collective for that so they
115:05 - have a some sort of a template for forms
115:08 - and we just need to install and add some
115:13 - dependencies into our project so we can
115:17 - see here HTML so laravel collective and
115:24 - we can also open up their website
115:28 - laravel collective and here we can see
115:31 - the different versions so for example
115:34 - 6.0 so installation for the lateral
115:40 - collective is here so composer require
115:44 - laravel collective slash HTML so we're
115:47 - going to do that in our code editor Adam
115:51 - and we're going to open up the
115:56 - the great the terminal from more code
115:59 - editor Adam and then paste jazz the
116:01 - composer required laravel collective so
116:05 - there you go and then enter we're just
116:09 - going to wait for a few seconds and now
116:11 - the installation is complete let's go
116:13 - back to the website and in here we have
116:15 - a guide on how to open up a form inside
116:21 - inside our template so we have here
116:24 - opening our form and then we can just
116:27 - copy and paste this one and paste it in
116:30 - our create that blade dot PHP so below
116:35 - here let's just paste this code and try
116:41 - to change this in because this is how
116:45 - the default on how to open up a form by
116:48 - specifying the URL and where to submit
116:51 - the data coming from this form but we
116:54 - can actually change this so in here
116:57 - we're going to specify the action
117:00 - instead of the URL so the action for
117:04 - this one is post controller and then at
117:12 - symbol and of course the store function
117:15 - inside our post controller class and we
117:18 - can also specify the method from here so
117:22 - it should be method and of course method
117:27 - with single code and the equal and
117:30 - greater than sign and here we specify
117:33 - the method which is post also in here we
117:37 - can specify a division with a class form
117:44 - group so this is actually coming from a
117:46 - bootstrap so we can also add a form
117:51 - label here so this will be form in the
117:54 - label and specifying that this is a
118:00 - label for our title and the actual label
118:07 - of our title field
118:09 - and of course we can also specify here
118:12 - the actual input so form and then tax we
118:17 - can specify the name of our input which
118:21 - is title and then the value so this is a
118:28 - create form so we should not specify a
118:32 - default value and of course we can also
118:36 - specify classes here or additional
118:39 - attributes so for classes or for classes
118:44 - for this particular input and this
118:52 - should have a class form control and of
118:56 - course a placeholder for this particular
118:59 - input so equal sign and then greater
119:04 - than and the actual placeholder which
119:08 - has title so let's try to save this for
119:12 - now and let's go back to our browser to
119:14 - preview and try to see here we have the
119:22 - actual label an input field which has
119:28 - the placeholder title by rating we don't
119:32 - have yet the correct classes for our
119:36 - input so it looks ugly for now so let's
119:39 - go back to our code editor and try to
119:41 - see so we have here instead of class we
119:46 - have specified classes so save that and
119:49 - try to refresh and there you go we have
119:54 - a much much better input for our title
119:58 - and then we can also the same or we can
120:02 - also do the same for our body so we're
120:06 - just going to copy this and instead of
120:08 - title we're going to say body and of
120:12 - course this is for body also and by d2
120:18 - and so with this placeholder
120:23 - and of course instead of tax or using
120:26 - tax it should be taxed area there you go
120:30 - and save that and refresh our page so we
120:35 - have a title and a body now and the last
120:40 - part is to add a submit button for our
120:42 - form so before the closing tag of our
120:46 - form let's add the button submit which
120:49 - is form and then submit and of course we
120:54 - need to specify some values here also so
120:57 - submit and then of course the class for
121:01 - our button which has class and then we
121:08 - can specify the BTN class with the n
121:11 - primary to signify that it is a button
121:16 - so save and refresh so now we have a
121:22 - complete form with all the field and of
121:26 - course the submit button and if we try
121:28 - to submit now so it redirect to another
121:32 - page and basically we're not doing
121:35 - anything for now because we should
121:38 - modify also the store function of our
121:43 - post controller so let's go back first
121:45 - or code editor and edit our post
121:49 - controller so inside here I'm just going
121:52 - to close this real quick and in here we
121:56 - need to add some logic to actually save
121:59 - our data coming from the form we can
122:00 - also add the validation from this
122:03 - function also so we can specify this and
122:09 - then the function validate and of course
122:14 - we need to have the request here and
122:18 - also the area of the rules
122:21 - which is for our title it should be
122:25 - required ok so it should be required and
122:31 - also the body tag or the body or the
122:34 - body of our post should be also
122:36 - acquired so and then we're just going to
122:41 - return a number for now so 143 something
122:46 - like that say this and go back to our
122:49 - browser refresh and then try to submit
122:53 - so it is not allowing us to submit or
122:56 - any data because area is empty for now
122:58 - so but we don't have a message that it
123:02 - it is submitting an empty information
123:06 - but if we try to have an information
123:10 - here and then submit so as you can see
123:13 - we now have the return information on
123:16 - one for three so in this video we're
123:20 - going to continue working on with this
123:22 - form and let's try to add some template
123:27 - for our messages inside our create page
123:32 - so let's go to our views and let's
123:37 - create another directory here so this
123:41 - should be in a and C and then this we
123:48 - will create a new file here called
123:50 - messages that blade that PHP and then
123:54 - we're going to include this file into
123:56 - our app that blade that PHP so we're
123:59 - just going to configure first this
124:01 - messages that laid that page wait for
124:03 - now and first let's just check if the
124:12 - count for errors is greater than zero so
124:18 - let's just close first the if statement
124:23 - and we're going to define a for each
124:27 - here and let's just close the for each
124:32 - below and inside this for each as we're
124:37 - going to iterate the errors and this is
124:41 - an object so all and then as error
124:47 - and of course we're going to define a
124:52 - very basic alert to our user by using
124:56 - the bootstrap alert element so this
125:00 - should have your class alert and of
125:04 - course because this is an error so it
125:07 - should be danger right and of course the
125:13 - error itself display and also we're
125:18 - going to check for messages for session
125:28 - coming from our page so session and then
125:34 - if it has a success value so we're just
125:41 - going to end the end if here so just
125:45 - bear with me guys because I'm just going
125:47 - I'm just laying out the messages or the
125:51 - feedback to our user if they have
125:55 - something or if there's if there were
125:58 - errors during the process of submitting
126:00 - the information so div and then of
126:04 - course it should have the alert also
126:07 - alert success and the value of our
126:14 - session and success and then we're just
126:23 - going to do the same for our error
126:26 - coming from the session so they should
126:30 - be error also and instead of success it
126:35 - should be danger and also here is the
126:40 - error okay so we need to include this
126:46 - inside our layout that laid out by HP so
126:51 - I think somewhere before the main
126:57 - container
127:00 - okay or after the container element so
127:05 - we're just going to include the messages
127:08 - here so add and then include and of
127:12 - course the directory and the template
127:17 - messages so save this one and try to
127:19 - let's try to preview it in our page so
127:23 - refresh and then submit so there you go
127:27 - we can see the title field is required
127:31 - and also the body field is required and
127:33 - try to populate the title and then only
127:37 - the body field is required because we
127:39 - don't have the because we did not
127:42 - populate the body of our post so now
127:46 - let's go back to our post controller and
127:48 - continue working with our store function
127:53 - so you remember that we use tinker
127:57 - before to populate our database so we
128:01 - can actually use that also in here so
128:06 - post and then equal and a new post and
128:12 - we can use that instance for now so post
128:16 - and then set the title for our post
128:18 - which has the request or the value
128:22 - coming from a request and technically it
128:25 - is the value coming from the forum so we
128:28 - we should specify the input which has
128:31 - the title and then of course we can
128:34 - actually get the value of our body the
128:40 - same thing as the titles or requests and
128:43 - then the input and of course the body
128:49 - and save this supposed and then save
128:56 - then we can read the req to another page
129:04 - or to the post page so return in the
129:07 - redirect to the post page
129:13 - and it should have additional
129:17 - information so with and then of course
129:21 - success so remember we have defined this
129:25 - in our messages that laid that PHP file
129:29 - and this is how you set the value of the
129:33 - message so post created and then
129:37 - something like that and try to save this
129:39 - and let's go back to our browser and try
129:43 - to preview it so refresh and then let's
129:47 - try third post because technically this
129:52 - is the third post so post three and then
129:58 - this is the body
130:01 - d post number three and then submit so
130:10 - it is now redirected to the post page
130:14 - and it has a feedback post created so
130:18 - the alert message that we have created
130:21 - in our messages that made that PHP so
130:23 - now we have three records in our
130:28 - database post one post two and post E
130:31 - and then if you try to click any of this
130:33 - post we can redirect to another page
130:37 - with all the information included or
130:40 - displayed in this post and now I wanted
130:44 - to add a link to create a post because
130:48 - for now we don't have any link here that
130:50 - says we can create a post so let's go
130:54 - back to our app that laid that PHP file
130:56 - and then we can see here all the links
131:00 - from our navigation the home services
131:02 - blog and about and this is the right
131:05 - side of our navigation so I think we can
131:09 - just copy this now item here and then
131:13 - paste it on this left side of our
131:17 - navigation so this is create post or we
131:21 - can just say add post post and
131:26 - it should redirect into post create so
131:32 - let's try this so save and then let's go
131:36 - back to our browser and refresh so as
131:40 - you can see we now have the ad post link
131:43 - here and it should redirect us to deform
131:46 - once we click it so we have a working
131:51 - link to add post now and I think it's
131:56 - high time for me to add a sin tax
131:59 - highlighter for now for the blade
132:03 - templating because as you can see we
132:06 - have all the syntax here or all the
132:10 - scripts for our blade templates here but
132:12 - we don't have a syntax highlighter for
132:14 - that all we see is a white tax and then
132:18 - I think it's not readable for us so
132:22 - let's go to file and then settings and
132:26 - then packages and then let's try to
132:30 - install or try to go here in in install
132:34 - and search the package language and
132:41 - played so language blade so it is a
132:47 - syntax highlighter for the blade
132:49 - templating engine used in laravel so
132:52 - we're just going to install this so it
132:56 - should enable us to read the syntax of
133:02 - our blade or syntax of the blade much
133:05 - easily so let's try this and then let's
133:09 - just wait for a few seconds to allow the
133:13 - installation to complete and I think
133:15 - it's it is now complete let's go back to
133:17 - our file and as you can see we do have
133:21 - now the syntax highlighter or syntax
133:24 - highlighting for raid templates and it
133:26 - will it will be only activated on files
133:29 - that has blade that PHP file extensions
133:34 - and in this video we're going to discuss
133:36 - or we're going to talk about how to
133:39 - enabled editing and deleting of
133:42 - information or deleting of our data
133:44 - coming from our database so in the
133:47 - previous video we have worked with our
133:49 - post or our blog right so we can now
133:53 - have or you can now see all the posts
133:55 - coming from our database and of course
133:58 - we can also go into details by clicking
134:01 - the specific post in this particular
134:06 - page so there you go we have here the
134:09 - post tree and of course we have post too
134:13 - with all the details and now let's try
134:16 - to add the added functionality and also
134:19 - the delete functionality of this
134:22 - particular post so if there are several
134:25 - post here
134:27 - on this particular page so we have an
134:30 - option to edit or even delete that
134:32 - particular post so in order for us to do
134:36 - that we need to go to our code editor
134:37 - and try to modify our show page so as
134:46 - you can see we have the resources the
134:51 - views and of course the page and we also
134:56 - have here the files for our post so we
135:01 - have here - oh that lady at the HP and
135:04 - in here we need to add a link so right
135:08 - after the written ion information so we
135:14 - need to add a link for our edit so let's
135:18 - just try to add furs and HR element to
135:22 - have a separation of these two elements
135:27 - they are small and of course the link
135:29 - that we are going to add so this link
135:32 - should redirect to post and then the ID
135:38 - of our post and of course the edit
135:47 - and then it should say edit and it
135:53 - should have a class VPN and VPN default
136:00 - so if you try to save this and go back
136:04 - to our browser and refresh so we now
136:10 - have the Edit link here and you try to
136:13 - click on this one we are being
136:15 - redirected to this page
136:18 - PK project that LOC slash post and then
136:23 - slash one and then add it so now let's
136:27 - go back to our code editor and try to
136:29 - modify our post controller so up and
136:35 - then HTTP controllers and of course our
136:39 - post controller so we have here the
136:43 - store function and of course we have
136:46 - also the show before or from the
136:50 - previous video we have worked with show
136:53 - and then we're just getting the post so
136:55 - we're just going to do that also for our
136:58 - edit function and also we can just copy
137:02 - this line and just modify instead of
137:07 - saying show it should have the Edit
137:11 - keyword and of course we're also passing
137:14 - the post variable to our edit page so
137:19 - let's go back to our resources and then
137:23 - post we need to create a new file here
137:26 - to say edit blade that PHP okay and
137:34 - we're going to copy the mark-up from
137:38 - create blade that PHP because I think
137:42 - there are almost the same so in this
137:45 - page were creating a post and of course
137:47 - in this page they're editing the
137:52 - particular post so instead of saying
137:55 - create a post it should be edit post
137:59 - and of course in here yes we need to say
138:04 - instead of empty we need to say post and
138:07 - of course the title of our post the same
138:12 - with the body of our post
138:14 - so post and body of the post and since
138:20 - we're editing a particular post we need
138:23 - to include or submit also the post ID so
138:28 - instead of just passing the post
138:31 - controller at store so we need to make
138:34 - it an array to pass also the ID of our
138:40 - post so that's a post ID there you go
138:48 - and as you can see we have here the post
138:52 - method but if you try to view our route
138:55 - list by opening our terminal so let's
139:00 - try to view first our list so that's the
139:08 - HP artisan and then route list so we
139:16 - have here all the route for our project
139:20 - and as you can see we have here the
139:22 - update right so post and then of course
139:26 - the idea of our post and as you can see
139:29 - the method for this particular route as
139:37 - put or patch but we can't directly say
139:41 - here put so we need to have some kind of
139:47 - mechanism to enable to say put so in
139:54 - here we need to pass in some hidden
139:56 - field so form and then he then and of
140:03 - course the underscore method give word
140:08 - so this is somewhat like a bypass the
140:12 - we cannot directly go here and say put
140:15 - so instead it should be post here and
140:18 - then here we can say the method should
140:24 - be put for our update route so save this
140:30 - and then I'm just going to close that
140:32 - terminal and let's go back to our post
140:36 - controller and try to update our update
140:41 - function here so in here in our update
140:45 - function we could just copy the logic
140:47 - coming from our store function so we can
140:51 - copy all this lines and paste it here
140:56 - there you go and we just need to change
141:01 - the post because we're not doing or we
141:07 - know or not creating a new post we're
141:09 - editing the post so what we need here is
141:11 - to find the particular post fine and
141:16 - then passing in the ID of the post and
141:19 - of course instead of saying post updated
141:23 - or post created it should be post
141:26 - updated so there you go
141:30 - save our post controller that PHP and
141:33 - let's go back to our browser and in here
141:37 - refresh so we have here the Edit post
141:42 - page so let's try to go back to our blog
141:46 - first and then try to see post too and
141:50 - then this is the post oh and then if you
141:53 - try to click on edit we can see that the
141:56 - title is postal and we can just edit the
142:01 - body here so this is the second post
142:03 - body and this is updated by a certain
142:09 - user just to make sure just to show that
142:13 - we have updated this particular post so
142:17 - submit
142:21 - so we're getting this exception so the
142:23 - put method is not supported for this
142:26 - route so I think we need to change
142:29 - something here so oh there you go so
142:34 - instead of using store it should be
142:36 - update here so save that and let's go
142:42 - back to our page so Doug and then post
142:48 - two and then edit this is the second
142:52 - post buddy and this is updated and then
142:56 - submit so there you go post updated and
143:01 - then if you try to go see depose two we
143:05 - can now see that the pose has been
143:07 - updated so now let's add the delete
143:11 - function just like what we have in our
143:14 - edit function or edit form we need to
143:18 - submit also the post ID for our edit
143:21 - function and also specify the move
143:24 - method so in that manner we need to also
143:27 - make our delete function as a form so we
143:33 - need to add a form here instead of just
143:37 - a pure link so that's form form and then
143:48 - open and the action of our form that
143:58 - will be post controller and then I
144:08 - destroy because we're using this for
144:12 - particular function to delete our post
144:16 - and then of course the idea of our post
144:20 - post ID specify the post ID and then for
144:28 - this we need to specify the method here
144:31 - so method
144:33 - and of course this should be post and we
144:42 - need to add a class here for our form so
144:51 - class all right because we want this to
144:57 - float right side of our Edit link so
145:01 - pull right and then we're going to close
145:05 - this one close our form and in here we
145:14 - need to add two things the method or the
145:20 - spoofing method that we have the same
145:24 - like for our edit so we need to add
145:28 - hidden field so underscore method and of
145:34 - course the keyword delete and of course
145:40 - here we also need to add the submit so
145:45 - form and then submit open and close and
145:50 - then delete this is our submit button so
145:55 - delete and we need to add a class here
146:00 - for our button so that's BTN and then
146:08 - BTN danger so let's try this refresh so
146:17 - we're getting syntax error and expected
146:20 - period so let's go back to our editor
146:22 - and identify the oh there you go so post
146:30 - it should be the post ID so save let's
146:39 - go back to our page
146:43 - Oh
146:44 - three so it says undefined class
146:51 - constant closed so I think we also
146:54 - missed that instead of closed so it
146:59 - should have the open and closed
147:00 - parenthesis so let's go back to our page
147:05 - post three and then delete so now we are
147:11 - being redirected to the destroy function
147:14 - of our post controller so let's go to
147:16 - that function so destroy and in here we
147:21 - just need to find the post just like
147:26 - what we have in our update and show so
147:30 - find the post and then of course we need
147:33 - to delete the post using that function
147:37 - and then we need to redirect to our post
147:41 - page so that's post post and of course
147:48 - we need to pass in a message
147:53 - so that's success and then the post
148:01 - remove so save that and then refresh or
148:08 - maybe it's better to go to our post
148:11 - first so blog and then post three and
148:15 - then press the delete so as you can see
148:19 - we have removed the post number three
148:21 - and we have the message here post remove
148:25 - so we have successfully created our
148:28 - create read update and delete but as a
148:31 - sort of review in the previous tutorials
148:33 - we have worked with our create read
148:36 - update delete functionality for our
148:40 - project so as I've said in this video
148:43 - we're going to discuss user
148:44 - authentication so as you can see we have
148:47 - here the log in register functions and
148:50 - if tried to go to our database we can
148:53 - see we have already created or populated
148:57 - our you
148:57 - users table with the attributes ID name
149:03 - email email verified password token and
149:08 - the created and updated fields or
149:12 - attributes so let's go back to our code
149:14 - editor and try to add more features to
149:19 - our project and add the user
149:22 - authentication and perhaps the user
149:26 - access control to our project so let's
149:28 - go back to our code editor and let's try
149:30 - to see the views in the views we have
149:35 - already this file right so as you can
149:41 - see we have different options and
149:42 - different menus the home services blog
149:46 - the about and of course we have added
149:51 - the login and register links so that we
149:54 - will be able to log in and of course we
149:57 - will be able to register it to our
149:59 - project and for now let's just copy this
150:03 - because we're going to overwrite this
150:08 - file so let's do that by creating a new
150:12 - file as a sort of back up and let's
150:16 - start to open up our command line so
150:20 - that we'll be able to create the
150:23 - authentication or user authentication
150:25 - for our project so in here let's just
150:30 - type in PHP artisan and then make Colin
150:38 - and then the keyword oath and then let's
150:42 - just try to wait for a few seconds to
150:46 - enable the so as you can see we have
150:53 - here a problem command make both is not
150:56 - defined so I think we have also instead
150:59 - of using the artisan make oath so I
151:02 - think we need to run the command PHP
151:05 - artisan instead and then you I and then
151:08 - all
151:10 - so this will enable the authentication
151:12 - or user authentication for our project
151:15 - and we have here a prompt that says the
151:18 - oath plug-in that laid that page review
151:22 - already exists do you want to replace it
151:24 - so for now let's just say yes because
151:28 - you want them to be replaced with a new
151:32 - version of the login dot PHP the play
151:37 - that page be email that PHP and I'm just
151:44 - gonna answer yes to this prompt verify
151:48 - so this will again override our old
151:53 - files so authentication scaffolding
151:57 - generated successfully so if we try to
152:00 - run our project right now let's say
152:05 - refresh okay so as you can see we have
152:11 - already all right or every than our our
152:17 - old files and as you can see we don't
152:19 - have any additional options here for our
152:24 - blog services and adding the post so we
152:28 - need to add that in our app that laid
152:30 - that PHP files so as you can see we have
152:33 - the map app for our app that blade that
152:36 - page we file and we have here the new
152:39 - one okay so all we have to do is just
152:44 - you can just copy the for example the
152:48 - link from here so starting from here to
152:55 - the the first navigation item for our
152:58 - home and then paste it here here we go
153:05 - and of course we need to add also the
153:09 - navigation for adding a post so you l
153:16 - left side of our navigation
153:21 - okay so we have here the option to add
153:28 - post and of course guys we can make the
153:36 - navigation bar instead of light you can
153:40 - say inverse just gonna remove this so
153:46 - navigation bar inverse and then save
153:49 - this one and let's go back to our
153:51 - browser and then refresh so as you can
153:56 - see we have added all the options to add
154:00 - post we also have the Home Services blog
154:05 - about and of course the login and
154:08 - register pages and as you can see we
154:12 - need to fix this display right here
154:15 - because I think it's not indented so
154:19 - let's go back to our code editor and try
154:21 - to modify that so index for our content
154:30 - so we don't have here the div container
154:34 - so we need to add that in our up that
154:36 - way that PHP file okay so we have here
154:40 - the content yielding of content but we
154:44 - need to add the container class or
154:46 - container div with a class on container
154:52 - okay so this should solve the problem of
154:57 - the intention or the margin left for our
155:04 - project refresh so as you can see now
155:08 - the content is indented and if we try to
155:12 - go to register we can already we can
155:14 - already register here by using our names
155:17 - of our example Tom saw and an email
155:24 - let's just say Tom at gmail.com and then
155:28 - password
155:36 - okay and then register and as you can
155:42 - see we have redirected and so our home
155:45 - and prompted that we are now not in
155:50 - South second see we have enabled the
155:56 - user authentication and the laravel
155:59 - takes care of all the intricacies of
156:03 - using the user authentication within our
156:06 - project okay now so we can close this
156:10 - and let's try to edit our home that
156:15 - played that PHP so instead of just
156:17 - showing your now login let's just say we
156:20 - can add a post here so that will be post
156:27 - and then click yeah great and a host and
156:35 - then we're just going to add a class for
156:38 - our button or link BT and BT and primary
156:42 - and let's just say here your blog posts
156:50 - let me say this try to preview and then
156:56 - refresh so we have here the updated
157:00 - dashboard or home page then we can just
157:03 - create a post but if you try to look up
157:07 - in our database post suppose because we
157:14 - want to add the ID of the user that has
157:17 - posted the certain post so we need to
157:20 - make immigration for that at the
157:23 - attribute ID of our user so now let's
157:27 - add the migration for adding our user ID
157:30 - into our database table so in here we
157:36 - need to run the command PHP make PHP
157:42 - artisan then make and then
157:45 - Rayshawn and then in the name of our
157:48 - migration is add user ID to post okay so
157:58 - PHP artisan make : in the migration add
158:01 - user ID to post and it says it created
158:08 - the migration so if we try to go back to
158:12 - our file and then under database and
158:17 - then migrations you now have the
158:21 - migration add user ID to post okay so if
158:27 - you try to run our migration right now
158:29 - that nothing will happen because we
158:32 - don't have any logic inside the app and
158:35 - the down function so in order for us to
158:39 - add the ID to the user table in our
158:43 - database we need to have some logic here
158:46 - and also around the migration so inside
158:49 - here we need to say table and then
158:54 - integer because the value of the user ID
158:57 - is of integer type so user and then
159:02 - underscore ID and semicolon and of
159:09 - course whenever we want to roll back the
159:12 - changes that we've made in our
159:14 - migrations we can just say table and
159:17 - then drop column and then specifying the
159:24 - column user ID so okay so after that one
159:30 - save this and then let's just say PHP
159:34 - artisan migrate so migrating user ID
159:41 - post and it says migrated so let's track
159:44 - our PHP my admin so inside here in our
159:46 - database we can see we have already the
159:49 - user underscore ID and for now let's
159:51 - just say it belongs to user 1 this
159:56 - particular post
159:58 - and also this one it belongs to the user
160:01 - one so it just it belongs to someone
160:04 - okay
160:05 - so now let's try to edit the controller
160:09 - for our post because whenever we need
160:13 - whenever we add a certain post we want
160:15 - the user ID or grab the user ID and add
160:18 - that along with the other information of
160:21 - the post so let's just go to http and
160:26 - then controllers and then post
160:29 - controllers okay so oh so inside our
160:35 - store function we just need to have the
160:39 - user ID or pass in the is ready so here
160:44 - post and then user ID equals and this
160:51 - time we're not gonna use the request
160:53 - because the user ID doesn't come from
160:56 - the user our I mean doesn't come from
161:00 - request it comes from the user both so
161:03 - it should say oath and then user and
161:07 - then we're just going to have or you
161:10 - grab the ID hey and then save so here
161:14 - refresh
161:17 - at post then certain title of a post new
161:26 - body of a pose and then submit
161:31 - so we have now the certain title of a
161:34 - post and if you try to check the third
161:38 - post we can see that the user ID has
161:41 - been populated by value of 1 which means
161:45 - that this particular post belongs to the
161:48 - user with the ID 1 and in this video
161:53 - we're going to add or we're going to
161:55 - discuss the modal relationships so in
161:59 - the previous video we work with the user
162:02 - ID so where we added the user ID to our
162:05 - database and the I think it's from the
162:11 - post so we've added our user underscore
162:15 - ID by using the migration and in this
162:19 - video we're going to add the
162:21 - relationships relationship to this user
162:23 - ID to the actual users ID here in this
162:30 - table so that will enable us to only
162:33 - limit the blogs or the posts that are
162:36 - belonging to a certain user so so for
162:39 - example we're going to try to view the
162:42 - post so we all one or what we want is to
162:47 - only display the posts that are created
162:52 - by the logged in user in order for us to
162:56 - do that let's go back to our code editor
162:58 - and try to add the model in our models
163:05 - okay so let's open up our post modal so
163:12 - all we have to do here is to add a
163:15 - certain function so it is it is very
163:18 - simple and relationships in laravel so
163:21 - as I've said all we have to do is add a
163:24 - function here so for example public
163:27 - function and then user and then return
163:33 - this and then belongs to the app
163:42 - and then backslash user and the same
163:48 - thing with our user modal let's add a
163:55 - function here so public function and
164:00 - then post and then this should return
164:06 - has many relationship because a user can
164:13 - have many posts right so the user can
164:18 - post like thousands or hundreds of posts
164:24 - and let's go ahead open up our dashboard
164:32 - controller or home controller because
164:35 - that's where we were trying to display
164:40 - the post so in here we just need to get
164:43 - the user ID by using the oath and then
164:48 - user function and then supplying the ID
164:54 - or I think it's like that one start up
164:59 - using it as parameter so user ID equals
165:03 - old and then user and then the ID
165:06 - attribute and then let's find the user
165:12 - fine and the user ID and then we need to
165:17 - pass in this user post into the home so
165:24 - that's good and then close so it means
165:30 - that this post or this post are
165:33 - belonging to this political particular
165:36 - user supposed and comma and user post
165:44 - okay so if we go to the home home view
165:55 - so resources and then views and then
165:59 - home
165:59 - so after lagging in or after the user
166:05 - lag in so we need to display a table
166:10 - here that display or that will display
166:14 - all the posts belonging to the lag
166:16 - end-user
166:17 - so that's tabled and then class is table
166:24 - table stripe and then we're just going
166:29 - to define the headers or header for our
166:35 - table
166:37 - so that's eh and then I tell each and
166:47 - we're just going to add two other pH
166:52 - here for our edit and delete button so
166:55 - th this is going to be just empty
166:59 - because this is going to be populated
167:02 - with ID or I'm in the edit and button
167:08 - [Music]
167:09 - edit and delete button so that's the age
167:14 - so in here so I think you just need to
167:18 - check if the actual post add if and then
167:26 - count the post so if it is greater than
167:32 - zero then we need to display the table
167:34 - right table and here
167:39 - we need to add the else and of course we
167:47 - need to say if the count of post is not
167:54 - greater than zero then we have to say
167:57 - you have no
167:59 - no post and then and our if statement
168:10 - and yes and of course in here we also
168:16 - need to populate the table rows so the
168:23 - title should be getting the title from
168:26 - the post
168:27 - so it's post and then the title
168:33 - of our post so there you go and then in
168:39 - here we just need to add the edit button
168:43 - first
168:44 - so a track and then the a track is post
168:52 - and then slash the post ID so that's
168:59 - basically post and then the IP and then
169:07 - we're just going to say slash edit and
169:11 - [Music]
169:14 - so just let's just add a class for this
169:17 - so a class with the end with the end
169:21 - default and then this should say edit
169:28 - so let's try that refresh our page so
169:33 - let's go back to the home page refresh
169:36 - and then we need to log in so I think we
169:41 - forgot the user password let's try
169:50 - logging in so Tom a gmail.com and then
169:59 - the password so that in
170:07 - we're just going to wait for a few
170:09 - seconds just to allow the lag in so we
170:14 - have an error user not found in our home
170:18 - controller because I think we need to
170:20 - add that which one
170:24 - so home controller 27 home controller
170:29 - there you go
170:30 - so we need to add here the class so
170:37 - that's app and then backslash user okay
170:44 - let's try that save and refresh app user
170:52 - constant okay so I think we need to to
170:58 - remove the single code for that work and
171:04 - then refresh defined variable posts in
171:11 - home that laid that PHP so let's try to
171:18 - solve that home blade at the HP so it
171:23 - says here that we don't have access to
171:27 - the post for the actual post okay so I
171:33 - think we need to either it first in here
171:36 - to actually have the individual post so
171:41 - that's for each and then the post
171:45 - variable as single post and then let's
171:51 - just add the end of our for each here
171:55 - for each pair no so save and then
172:02 - refresh so we have here the new and
172:07 - updated view of our post so we can see
172:12 - the title which is post one post to a
172:15 - certain title of a post so let's try to
172:18 - I
172:18 - a new user so that in the user to or
172:25 - make sure let's just say theme to solve
172:34 - and then theme at gmail.com and then the
172:39 - password let's just apply a certain
172:41 - password okay and then register so as
172:48 - you can see the home or the location
172:51 - home it says you have no post because we
172:56 - just want the post to show if the
173:01 - certain user lackin and then he has a or
173:06 - he has post so it should be displayed
173:10 - here but in case of our new user team so
173:13 - he has no posts or let's try to add a
173:16 - new post first post team saw the body
173:26 - body of the post of team's
173:29 - sock and then submit so this page
173:37 - displays all the post but if we try to
173:40 - go to the project application and then
173:43 - home it only displaced the first post or
173:49 - the single post are or a new user team
173:52 - saw and in the previous video we have
173:56 - worked with user authentication and we
173:59 - have laid the modal relationships and in
174:03 - this video we're going to discuss about
174:05 - how to actually implement the user
174:09 - access control so basically we're just
174:11 - going to add a feature that will just
174:14 - enable as to control which pages will
174:17 - our user be able to access so in here
174:22 - let's try to see we have here in our
174:26 - project or home page of our project and
174:29 - as you can see we can always
174:33 - access the post great so if you go to
174:39 - post and then great so we can already
174:44 - create a pose even if we have or we are
174:48 - not login right so currently we're not
174:51 - login with our account and we can create
174:56 - certain post but we don't want that the
175:00 - user should log in first before they can
175:01 - create a post so also you can see that
175:08 - if we go to blood and then click the
175:12 - post we can see the buttons and edit and
175:16 - delete even if you are not logged in as
175:19 - a user so again we don't want that we
175:22 - want the user to login first before they
175:24 - can modify you can delete and create a
175:27 - post so in order for us to do that let's
175:30 - go back to our code editor and try to
175:32 - modify our project if we go to the
175:36 - controller of our homepage so app and
175:39 - then HTTP controllers and then home
175:43 - controller we can see here we're adding
175:46 - the middle we're both in this construct
175:49 - method so we're just going to copy this
175:52 - for our other controllers so copy and
175:56 - then we're going to do the same thing
175:59 - for our post controller so that's post
176:04 - and then we're just going to paste the
176:08 - construct method or function coming from
176:12 - the home controller class again we're
176:15 - doing this just to control the access of
176:18 - the non log end users so if you try to
176:22 - go back to our browser so if you try to
176:26 - go to slash a post and then create so we
176:32 - won't be able to create a post right now
176:34 - and it booted us out from the create
176:37 - forum or create post forum so it says
176:41 - that we need to log in but there's a
176:45 - problem with
176:46 - this because if you try to go to our
176:48 - blog so it says that we need to login
176:51 - just to view the blogs right so we don't
176:54 - want that and we just want to limit the
176:58 - access when we try to create a post so
177:02 - let's try to accept the other pages for
177:06 - that so in here we need to pass in an
177:09 - array so this will be an array of pages
177:14 - that will be accepted so accept and then
177:19 - the array or the actual array of pages
177:23 - so it's going to be the index and of
177:26 - course the show page sort of save that
177:32 - and go to our browser so we should be
177:37 - able to view the blog so this are the
177:42 - post and we can you just we can't access
177:48 - the create for now
177:50 - right because we're not login oh should
177:56 - be post and then great so I've tried to
178:01 - login by using our account so login
178:06 - there you go we can access the create
178:10 - post and now let's just solve the
178:12 - problem with the individual post if you
178:16 - try to go to a single post you can see
178:19 - even if we did lag out from this page
178:25 - log and then post we can see the edit
178:28 - and delete buttons and we don't want
178:31 - that we just want to see the post
178:35 - without these buttons edit and delete so
178:40 - in order for us to do that let's go to
178:42 - the post so that's
178:48 - where is it resources and then views and
178:53 - post and then show
178:56 - so where's let's go to this part right
178:59 - here when displaying the edit and delete
179:03 - button so I think we're just going to
179:05 - add a certain if statement here so oath
179:09 - and then not guess and then let's just
179:19 - say and if here so basically we're just
179:25 - limiting the access to these buttons and
179:29 - it should be gone there for now so if
179:36 - you are not logged in and you go to a
179:40 - single post you can not edit and delete
179:43 - the post but if you try to log in by
179:46 - using our account so basically we should
179:50 - be able to have D yeah edit and delete
179:57 - button so you log out and go back to
180:01 - that particular post now edit and delete
180:05 - button but also we need to change
180:09 - something here because we need to only
180:14 - show those edit and delete buttons if
180:16 - you are the owner of that particular
180:18 - post so let's go back to the show that
180:22 - laid that PHP and in here we need to add
180:24 - another if so that will be if and then
180:29 - o'the user
180:32 - so basically we're good we're just going
180:34 - to check if the currently that end user
180:37 - is the owner of this particular post so
180:41 - that will be post and then the user ID
180:44 - so remember we are we added that
180:47 - particular attribute user ID by using
180:50 - the migration so and we're going to end
180:55 - the if statement here
180:58 - so there you go so you won't be able to
181:04 - access the edit and delete button even
181:09 - if you are logged in if you're not the
181:12 - owner of that particular post so so for
181:17 - example this one so we're not the owner
181:19 - or the currently logged in user is not
181:21 - the owner of this particular post so but
181:25 - this one is the one posted this
181:29 - particular post so he should be able to
181:32 - edit and delete this post but we need to
181:37 - solve another problem here so as you can
181:40 - see we can edit this particular post but
181:44 - if we try to have like five here this is
181:49 - a post from another user so right so we
181:53 - don't need or we don't want this actual
181:57 - user or this particular user to be
181:59 - editing other posts or other users post
182:05 - so what we need is to go to our post
182:10 - controller and in our edit in our ad
182:16 - function we need to have a some sort of
182:23 - check in here so below this one we need
182:28 - to check if the user or authenticated
182:33 - user meaning the login user ID is not
182:42 - equal to the post user ID so again we're
182:49 - just checking if this particular login
182:53 - user is the owner or not the owner of
182:55 - the post so if it's not the owner of the
183:01 - post so it should return read the wreck
183:04 - and then we need to pass in the post it
183:10 - should redirect to the post page
183:12 - and then with an error message so error
183:17 - and then it should say an authorized an
183:26 - authorized page okay so save that and
183:30 - let's go back to our browser and try to
183:34 - go to blog and then first post so the ID
183:40 - is 6 and then edit so if you try to have
183:45 - or put 5 in here so it should say or it
183:50 - should redirect into the post page but I
183:55 - think we don't have the error message
183:57 - here so let's try to add that in our
184:00 - layout so that will be from the layout
184:06 - and then half that lane that PHP we have
184:10 - to include the error messages or
184:12 - messages here in our page so it should
184:16 - be here
184:17 - so in here let's just add the messages
184:22 - layout so include and then i NC folder
184:30 - and then messages so it will refer to
184:33 - the I NC and then messages that laid
184:37 - that PHP so save this and let's go back
184:40 - to the browser and post indeed five so
184:49 - it should say an authorized page because
184:53 - we're not authorized to access this post
184:58 - or this particular post and we cannot
185:00 - edit this because this is not the post
185:04 - or this is not a post of this team so
185:07 - user so I think we need to do the same
185:11 - with the delete button also so let's go
185:15 - to the post controller and then we also
185:18 - have the destroy here so I think we're
185:22 - just going to copy the illogic that we
185:25 - have
185:26 - using our edit function and paste it
185:28 - here in our destroy function so after
185:34 - that so pose so if all user ID is not
185:41 - equal to the post user ID so it should
185:44 - redirect to the post page and with an
185:47 - error message of delete and as a sort of
185:51 - review in the last videos we have added
185:55 - the access control for the post or blog
185:59 - post available in our project and we
186:03 - also limit the edit and delete buttons
186:08 - for those owners of the actual post so
186:13 - in this video we're going to add a file
186:15 - upload so in here so for example if we
186:19 - add post so in here what we want is to
186:23 - add a file upload where we can actually
186:28 - upload an image so we will be able to do
186:32 - that
186:32 - and let's try to go back to our code
186:35 - editor and open up our create that laid
186:38 - that PHP and we'll try to add the file
186:43 - upload capability in our project so
186:47 - under resources and then use post and
186:53 - then create that blade that PHP so we
186:55 - have here deform that enables us to add
186:59 - a post so we're just going to add here
187:03 - the element for our file upload so in
187:08 - here we need to add the live with class
187:12 - form group and of course we need to add
187:17 - the actual form element which is we're
187:22 - going to use the lot of electives for
187:26 - that so form and then file and then
187:30 - we're just going to name it as a cover
187:33 - image
187:34 - okay so in order for us to submit or
187:38 - upload the file in this particular form
187:41 - we need to change also the ink type for
187:46 - this form in this particular part we
187:49 - need to add another element which is the
187:54 - ink type for our form and then it should
188:00 - say multi-part multi-part slash data and
188:11 - then save let's try to preview that
188:16 - refresh and then you can see here the
188:20 - file upload element where we can browse
188:23 - the actual file in our file system but
188:28 - if we try to select an image here and
188:33 - then submit it's not it's not going
188:36 - anywhere for now it's not saving to our
188:38 - database and it's not saving into our
188:41 - project because this is only the user
188:44 - interface and there's nothing logic or
188:47 - there's no logic behind this file
188:51 - element so in order for us to have the
188:55 - actual logic we need to go back to our
188:58 - editor
188:59 - code editor and open up the controller
189:02 - so HTTP controllers and then inside our
189:09 - post controller but before we forgot I
189:15 - think we need to add first the attribute
189:18 - or in the field into our database so
189:21 - let's open up our database and try to
189:30 - add the field first by using our
189:34 - migration so I'm just going to show you
189:37 - here so inter post structure and we
189:44 - don't have yet the field for our email
189:48 - or cover image so we need to add that by
189:51 - using our migration so open up the
189:57 - terminal first and here we need to run
190:04 - the command PHP PHP artisan and then
190:11 - make migration and then the name of this
190:15 - regulation is odd cover image to the
190:20 - post okay okay so the migration has been
190:30 - created so let's open up it here in our
190:34 - database and then migrations so odd
190:37 - cover image to post and we need to add
190:42 - logic here to actually add the cover
190:46 - image attribute so table and then string
190:51 - this will just add the cover image into
190:56 - our post table and of course in here we
191:01 - also have the down functions okay so
191:09 - we're just going to drop column in here
191:14 - so drop column and then we're just going
191:19 - to say cover image and after that we
191:24 - need to run the migration so PHP artisan
191:28 - and then migrate so migrated if you try
191:36 - to go back to our page me my admin and
191:39 - then refresh our structure so we can see
191:43 - here the cover image field or attribute
191:47 - so now let's go add the logic to
191:49 - actually upload the file into our file
191:52 - system and also save the file name into
191:57 - our database so in our file upload as
192:00 - I've said there are two
192:01 - that would happen so we need to add the
192:05 - string path or the the name of the file
192:09 - in here in our cover image attribute or
192:12 - field and then we also need to upload
192:14 - the actual file into our project so now
192:20 - let's go back to our post controller
192:23 - open up our post controller and and here
192:29 - we need to modify
192:32 - let's just go close the terminal for now
192:35 - [Music]
192:37 - let's just close this and then we need
192:40 - to modify the store function so we need
192:45 - to add the validation for our cover
192:48 - image first so the cover image should be
192:55 - image and then it is nullable meaning
193:01 - the user can have the option to upload
193:04 - or not upload a file for their cover
193:08 - image and also we're going to set the
193:11 - maximum size of the file in to 1999
193:15 - because most common page settings
193:19 - they're allowing only two MB of file
193:24 - upload so we're going to set the maximum
193:28 - size of our image in to 1999 which is
193:32 - almost 2 MB or 2 megabytes and then in
193:39 - here we need to setup few things so
193:42 - we're going to handle the under file
193:46 - upload under the file upload and in here
193:56 - we have to say request and then pass
194:02 - file we're just going to check if the
194:05 - user has opted to upload the file so
194:10 - else
194:12 - we need to set the file name file name
194:16 - to store is no image that JPEG so this
194:23 - isn't going to be the default image for
194:27 - our user if he has opted to not upload
194:31 - cover image for for himself so this will
194:34 - be the default so if the user has opted
194:39 - to submit or upload the file so it
194:43 - should say here we need to get fire we
194:46 - need to get the file name with the
194:48 - extension in here so get file name with
194:52 - extension to get file in with extensions
195:00 - okay and then it should say file name
195:05 - with ext is close to the request and
195:11 - then the file which has the name of
195:17 - cover image and we're just going to get
195:20 - client original original image okay and
195:28 - then we're just going to get just the
195:31 - file name the file in order for us to do
195:36 - that so file name and then path info and
195:41 - then we're going to pass in parameters
195:43 - in here finally name with extension and
195:47 - we're just going to get the plat info
195:51 - underscore file name so in this video
195:54 - guys we're going to continue working
195:56 - with our file image upload so in the
196:00 - previous video we have laid out this
196:03 - logic here which is we're checking if
196:06 - the user has submitted a cover image or
196:11 - uploaded an image and then we're getting
196:14 - the filename and extension here and also
196:18 - we're getting the file name from the
196:22 - actual image that has been uploaded
196:25 - and now let's continue adding to this
196:29 - logic so we have here define name and
196:32 - then the next step is to get the
196:35 - extension okay so in order for us to do
196:39 - that we need to add a new variable
196:42 - extension and then by using the request
196:46 - object we're going to use the file
196:52 - method and then cover image and we're
196:58 - going to get the original client
197:07 - extension okay and next is we need to
197:13 - define a file name that we're going to
197:15 - store into our database so file name to
197:20 - store that will be path and then or
197:29 - first we need yeah file name
197:33 - finally file name to store equals the
197:40 - finding filing that we got from the
197:44 - actual file and then we're going to
197:47 - concatenate with an underscore and then
197:51 - time and then another concatenation with
197:59 - the extension so this will be extension
198:05 - we're doing this because we're just
198:09 - we're just trying to avoid if say for
198:12 - example the user uploads a file or an
198:16 - image with the same file name so in
198:21 - order for us to solve that is we get the
198:24 - file name and then we're adding
198:26 - underscore and then we're adding the
198:29 - time so it won't be a problem for us if
198:33 - the user will upload files or image that
198:37 - has the same
198:37 - me and the last part of that is we need
198:41 - to actually upload the image so that
198:45 - will be upload image we need to get the
198:49 - path and request and then file again
198:58 - cover image and need to store this store
199:08 - us we're going to store this on our
199:12 - public folder so public and then cover
199:15 - images we need to create this directory
199:19 - and then the new file name will be final
199:25 - name to store and now whatever the user
199:31 - upload the file so let's try to see the
199:36 - base resources and then we have here the
199:41 - storage and then app and then we have
199:46 - this public folder so it will create the
199:50 - cover underscore images directory here
199:53 - but the problem is this public directory
199:58 - is not accessible when you try to open
200:01 - up this directory in our browser so we
200:06 - need to make sure that all the changes
200:09 - that we are making here is reflected to
200:14 - the public folder here because this is a
200:17 - accessible to the web browser so in
200:20 - order for us to do that let's open up
200:21 - our terminal and we need to run a
200:27 - command to link this storage a public
200:31 - folder into our actual public folder so
200:35 - the command for that is PHP artisan and
200:39 - storage then link so there you go the
200:45 - public storage directory has been linked
200:48 - so whatever changes that we're making
200:50 - here in our store
200:51 - or storage directory will be reflected
200:55 - here in a public directory now the last
200:58 - thing that we want to do here is to
201:01 - actually save the file name to store so
201:05 - that will be post and then the cover
201:09 - image equals the file name to store okay
201:16 - save this and let's try it in our
201:19 - browser so refresh and then add post so
201:23 - you post with an image this will be the
201:28 - body of the post with an image then
201:34 - we're just going to select a certain
201:36 - image and open and then submit so we're
201:41 - getting an error here the cover image
201:43 - must be an image so I think the problem
201:48 - with this is here in our create laid
201:52 - that PHP so multi-part slash it should
201:58 - be form data so there you go save and
202:03 - refresh so new post image test
202:09 - body and then browse for the abstract
202:13 - image and then submit so we're getting
202:19 - get client original image does not exist
202:23 - so we have a typo here so I think we're
202:30 - going to use instead of get client
202:32 - original image so we're going to use get
202:35 - client original name so that will be
202:39 - post controller and get client original
202:42 - name so right then post it image test
202:50 - browse the image and submit so we're
202:57 - getting path in info underscore file
203:01 - name so undefined constant so
203:05 - we need to change that instead of just
203:08 - file it should say file name let's go
203:15 - back and refresh just to make sure and
203:22 - then new post test and browse the image
203:26 - and then submit so again we're getting
203:31 - the get original kind except extension
203:33 - that's not exist so I think we also have
203:37 - a typo so we're just going to copy this
203:39 - get client original extension so let's
203:43 - go back to our code editor and replace
203:49 - this with get client original extension
203:53 - so save that let's go back refresh and
204:01 - save another one so I hope it it will be
204:04 - successful this time so browse and then
204:09 - submit so there you go post created so
204:14 - the new post with image has been created
204:18 - and the next step that we're going to
204:20 - take is to display the image in our show
204:24 - post and also in our new post with image
204:29 - where we can actually see the individual
204:32 - post since we have successfully uploaded
204:34 - an image we can see here in our storage
204:37 - and then the cover image directory has
204:41 - been created and we can see here the
204:45 - link of our storage directory with also
204:49 - the cover under underscore images with
204:52 - the actual file or image that we have
204:55 - uploaded so let's try to view that in
204:58 - our PHP myadmin so in here so post and
205:08 - we have new post and then the body and
205:14 - of course the link or the file name of
205:17 - the
205:18 - uploaded file and actually we're just
205:20 - going to get rid of this records with no
205:24 - cover image so we're just going to
205:27 - delete that and let us now try to
205:32 - display the images coming from the
205:36 - database into our show and index plate
205:40 - that PHP so that will be resources and
205:46 - then views and then index dot PHP so we
205:53 - have here displayed the post so before
205:58 - that it's just going to add a new live
206:05 - wrote so this is just a bootstrap tag
206:08 - and we're going to add another DEATH
206:12 - this will be column MD for and also
206:18 - another one for another column so it
206:25 - should be eight and we can just copy and
206:33 - paste this here and also you can look
206:40 - and remove this I think and just remove
206:43 - that and here we need to display the
206:50 - image so that will be image and then the
206:53 - source is coming from the storage
206:56 - directory and cover images and the file
207:05 - name so this will be coming from our
207:09 - post and cover image and I'm just going
207:15 - to add style here for our image which is
207:19 - the wave should be 100% 100% so save
207:28 - this
207:29 - so refresh and then lug so we're not
207:37 - getting any post here and if we tried to
207:40 - go to our post we have one record so
207:45 - let's try to check our code here so
207:49 - index that way dot PHP and we have here
207:52 - if greater than one and we have one
207:56 - record right now so it should be greater
207:58 - than zero so refresh so there you go we
208:04 - have the image and then we have the
208:06 - title here and also the written on
208:11 - information and in this video we're
208:14 - going to continue working on with our
208:16 - image feature so in the previous video
208:20 - we have added the display image and
208:23 - actually added the feature of uploading
208:26 - an image by creating a post so when
208:30 - adding a post we can have we now have
208:32 - the option to browse on image and then
208:35 - include that image and save that into
208:39 - our database so now let's continue
208:42 - working on with this so if we try to
208:45 - view the actual post so we want to also
208:50 - add the image here and the individual
208:55 - post so let's go back to our code editor
208:58 - and try to add that so this is the index
209:04 - template that PHP and then we're just
209:07 - going to open up the shoulder yeah show
209:12 - that laid dot PHP so in here we have
209:18 - displayed we're displaying the post
209:21 - title and the post body of our post so
209:27 - again we're just going to add the image
209:31 - on top of our post so in order for us to
209:34 - do that let's just add a div here so
209:39 - this will be I think before the body tag
209:42 - so Dave
209:43 - and then the shop this will be row and
209:47 - another column or therefore a column so
209:52 - called MD shelve and then we're just
209:57 - going to add the image here or you can
210:01 - just copy the dad coming from here so
210:07 - then the width is hundred percent and
210:10 - then we're getting the actual or the
210:15 - physical image coming from our cover
210:18 - underscore images directory so let's try
210:22 - to preview this in refresh so now we
210:27 - have the image so the title and then the
210:30 - image of our post and of course the body
210:33 - of your post and then the method to add
210:36 - meta information which is the written on
210:41 - with a date okay so another thing for
210:46 - this feature is that we need to add this
210:50 - in our create or edit because for now we
210:53 - don't have the element to edit or update
210:57 - the image that has been uploaded so
211:00 - let's go back to our code editor and add
211:04 - the final element in here so the same
211:09 - with the crate that laid that base me
211:13 - we're just going to copy this form group
211:17 - and then Eddie near and it that way that
211:23 - PHP and just before the submission of
211:29 - the page we can paste the cover image
211:33 - file input element and then of course we
211:37 - need to change the something here for
211:41 - our Inc type so it should be of course
211:48 - multi-part for data so we're just going
211:52 - to copy this one
211:55 - paste it here so ink type equals this
212:03 - multi-part slash form - data so we're
212:10 - just going to save this and refresh our
212:12 - page to show that we have already added
212:15 - the input file element so refresh so in
212:23 - here we have now the browse file input
212:29 - element we need to add some logic into
212:32 - our edit function from our post
212:35 - controller so let's go ahead and try to
212:38 - open up our post controller that PHP and
212:42 - inside here in our edit function so
212:48 - we're going to add yeah the logic of our
212:53 - edit function or actually we're not
212:57 - editing the function edit we're actually
213:00 - going to modify the update function so
213:04 - all we have to do here is I think we
213:07 - just have to copy all the logic that we
213:10 - have in the store function so validate
213:21 - and then update okay so we're just going
213:27 - to paste here the validation and of
213:31 - course all the logic that will handle
213:33 - our file upload so this is going to be a
213:37 - bit different from the store logic
213:40 - because we're not going to have this
213:45 - line here which means that we don't want
213:48 - to update when the user has not uploaded
213:54 - the image so remove that and then we're
214:00 - just going to have another check here if
214:06 - the user has submitted the file or
214:09 - the files of the request if the request
214:12 - has fine
214:14 - so another cover image here that's the
214:20 - name of our file input element and then
214:23 - we're just going to get or set the cover
214:27 - image by using the file name to store so
214:34 - okay and save this so refresh view first
214:44 - opposed so we have here the post and
214:46 - then we have the actual post and then we
214:51 - can edit that one and if we try to
214:54 - submit without selecting any image then
214:59 - we can just update the post but not
215:02 - updating the image right here but let's
215:06 - try to update the image so let's browse
215:11 - another image and then open and then
215:14 - submit post has been updated and as you
215:18 - can see the image share has been updated
215:21 - also because we have updated or uploaded
215:26 - an image coming from our edit page so
215:30 - the next thing is or delete okay so if
215:35 - we try to go to a post and we have this
215:38 - delete so whenever we have to delete
215:42 - this post we want to actually delete
215:45 - also this file coming from our project
215:49 - so if we try to open up or our project
215:52 - in our browser or aim in our file
215:56 - directory we can see that we have here
216:02 - the public and then storage and then the
216:06 - cover images so this are the uploaded
216:10 - files in our project right
216:14 - so whenever a user wants to delete the
216:18 - post we we would also want our project
216:22 - to actually do
216:23 - this files right here so in order for us
216:26 - to do that let's go back to our post
216:29 - controller and edit the delete function
216:34 - or destroy function right here so we're
216:38 - going to bring in first the storage
216:42 - library so we're going to use illuminate
216:48 - slash support and then back slash visage
216:54 - back slash storage okay and then in our
217:00 - destroy function below so we're going to
217:05 - check if the user has uploaded the file
217:12 - for this particular post so that will be
217:15 - if this post cover image it's not equal
217:24 - to it's not equal to host and then user
217:31 - I mean not equal to no image that JPEG
217:38 - or jpg so this will be our default image
217:42 - when the user has not uploaded a file
217:47 - for their particular post so we don't
217:52 - want this to be deleted if the user
217:57 - hasn't uploaded a file so this will be
218:02 - storage and then delete so we're going
218:08 - to public and then cover images and of
218:14 - course the actual file name of our cover
218:22 - image so save this and then try to
218:27 - delete this post post has been removed
218:33 - or removed and as you can see the image
218:36 - from the cover images directory has been
218:39 - deleted one last concern also is if we
218:45 - try to go to our blog and add post salsa
218:50 - for example we're going to add first
218:53 - post here first posed by the first post
218:58 - and then we're going to browse an image
219:02 - ok submit and also another one so second
219:12 - post body of second pose and then we're
219:17 - not going to browse or upload an image
219:21 - here so submit so as you can see we have
219:25 - here a broken image icon which means
219:29 - that the user has not uploaded image for
219:33 - this particular post so we don't we
219:36 - don't want that and we want to have a
219:39 - default image here so or default no
219:44 - image so let's go and search for a new
219:47 - image picture so that you will be able
219:51 - to have a default no image here so after
219:54 - finding a default no image so make sure
219:58 - to copy and paste that in your cover
220:00 - underscore images directory and this is
220:05 - what I have chosen from from a new no
220:09 - image default and the file name is that
220:13 - J eg so we should be able to display
220:21 - this in our page so make sure to change
220:28 - this also to the right file extension
220:31 - and then save and refresh so there you
220:38 - go we have now the no available image as
220:41 - our default image of our posts so I
220:46 - think that
220:47 - all there is to it for this tutorial and
220:49 - this will end our tutorial for beginners
220:52 - tutorial and I hope you have learned
220:55 - something from this series and in this
220:57 - videos so thank you for watching our
221:01 - videos and if you're new here in our
221:03 - youtube channel and you want content
221:04 - about programming programming knowledge
221:06 - and more so I am inviting you to
221:09 - subscribe and press the notification
221:11 - bell so you'll get updated whenever we
221:13 - have a new upload thanks

Cleaned transcript:

hey what's going on guys welcome back to our YouTube channel and as promised we're finally going to get into laravel we have had some requests to this tutorial so this year's we were going everywhere not just going to be covering the fundamentals of laravel we'll also be building a project from start to finish and in this video we're going to take a look at what we will be building and we're also going to talk a little bit about laravel and some of the things that it can do by the way guys if you are new to this YouTube channel and you want contents about programming tutorials so we have a lot of topics like Java PHP Python and other topics available so I highly suggest that you subscribe to this YouTube channel and press the notification bell so you'll get updated whenever we have a new upload all right so before we get into what we will be doing let's talk a little bit about what laravel is so laravel is an open source page B framework and creators of laravel upset many times that we aim to make the development process pleasing without sacrificing equality so laravel is very elegant and things just kind of seem to work together very nicely also laravel is not only popular but also respected today and laravel uses the MVC or modal view controller design pattern so well we will be talking about that throughout the entire series but the basic idea is that the model deals with the database the view is the user interface that displays in the browser and the controller handles requests which come from either URL or forms such as the post get delete and other requests coming from URL and forms all right guys this are the topics that are included in this particular series so I think we already cover the first one which is the laravel overview so we have discussed some of the strong points of using this PHP framework and also some of the advantages of using laravel also I'm going to guide you in the installation or set up so we could get up and running with this laravel framework in our local development machine and also in this series we're going to build a website in a blog application with authentication and access control and of course at the end of this series we should be able to deploy our own or our very own laravel application alright so now that we get that out of the way let's talk about what laravel actually does for us so why would we choose to build an application with laravel over just building it straight up from scratch so actually there is too many reasons to list so I listed here the important ones so laravel handles routes in an extremely simple way you can simply define what URL and what type of request that you want to handle now most MVC PHP frameworks do this as well as you know such as CodeIgniter cakephp but some of them some of the routing files are really difficult when it comes with expressions and then AMA keywords and things like that so laravel makes everything very very simple which make it a great candidate for restful api and also level adds a security layer to your application so it automatically escapes what it needs to and it also implements crosssite protection with forms and submitting to the database so whenever we are submitting data to our database nerville takes care of the intricacies of the security inside our application so among other things working with database is also easy very easy laravel is shipped with an awesome commandline tool called artisan and it lets us do pretty incredible things with just a single command so one of those things is to create database migrations laravel also uses the blade template engine to display views so it means that we can extend layouts we can use control structures like loops and conditionals right inside the HTML so there's also there's many different ways to implement authentication but laravel sets that up for us to automatically create migrations and to create the user table and all we have to do is run a simple artisan command to enable everything and enable authentication also larvell can can handle sessions so we're going to do that or we're going to discuss that later in this series and also larval provides us with mechanism to compile assets with all the intricacies of storage and file management and also it comes with error handling so error handling is very important especially with bigger projects and it is very important to have this type of module or type of feature in a framework when it comes to handling errors and also we have the unit testing but I think we're not going to touch that in this series but it worth mentioning that clarabelle comes with unit testing mechanism also email configuration for smtp so if you wanted to have like a verification email sent from your application and things like that and laravel also handles cache pretty well so this are just some of the things that some of the benefits to using this framework so as far as the environment goes our development environment I'm going to be using windows and we're going to use one which gives us an Apache server PHP and MySQL on our local machine but laravel is completely crossplatform so even if you are using map or using Linux you can use some or you can use something like them or mom for your development and solan laravel is also pretty easy we're going to use composer which is a dependency manager so this is kind of like an NPM if you are a GS developer so we're going to install that and then we're going to run this simple command to create a new laravel project so by the way you can download the composer from get composer that or website I think I have already mentioned that laravel comes with the artisan CLI so it will enable us to handle many tasks so the number one is to create controllers and models we can use artisan CLI command for that when we are trying to create controllers and models and later on I'll be showing showing you some of the example commands that we can use for this particular task so creating database migration files and running migrations also we can we can use the artisan CLA for that create providers events jobs form requests and other tasks related to this and also we can show the routes we can also issue session commands we can also run tinker and also we can create custom commands by using the artisan CLI and these are the examples of artists and commands so we have the PHP artisan list we also have artisan help migrate also artists and make controller and you controller and here is the one if we want to make a model so our design make Colin and then model and then the name of the model and M or M and also we have the page we artists and my great and last example here is artisan tinker so all of these commands or some of these commands were going to use later and this tutorial series and other commands that probably we need in our development process and for today's video we're going to talk all about the environment setup and a lot of its relation so this is the second part of our laravel tutorial series so first thing first we need this tools so we're going to install wampserver for our server so this will provide us with the PHP the Apache server and the MySQL installation another tool that we're going to need is the composer so accordingly it is a dependency manager for PHP so if you don't have already the composer in your installation or in your environment in your local machine so you can go ahead and install the composer to your local environment or local machine so I'm gonna be putting the link in the description so that you'll be able to follow along or you don't be able to install the composer and as well as the webserver so again if you're using another or other platforms such as Mac Linux environment so you can see use other version of the web server I think they have the alum and D mom so you can use that as well so for this tutorial we're going to use web server the composer right and we also have the gate so you can download this as well and install in your local machine so we're going to use these tools later on and also if you want you can also download and install the addon code editor but any I do any editor will do but for this particular tutorial series were going to use the atom that IO or atom editor code editor so it is available for Windows so you can go ahead and install this also so once you have downloaded and install this software's or tools you're ready to install and set up your environment and also install the laravel for your projects alright our next step is to create our laravel project and in order for us to do that we need bash or get but actually we can use the windows powershell for that for as long as the composer is integrated to that particular command line or command prompt or the windows powershell so let's open up our windows powershell there you go and i'm just going to change the font here so that you can see what I am typing here so instead of 12 let's make it like 24 hey I think that's better and great you were here at this directory users and an admin so we want to change this directory and go to our localhost directory so silly that that another one so if we try to check our director we have here the 164 so make sure you have installed already or wampserver so I have here the one and also the directory for our server which is Joe the triple W so now let's create our project here by typing the command composer and then create project and then the keyword larval slash laravel and the name of our application or the name of our directory so say for example if you have a project learning management system so you might want to name your project as LMS like that or in our case because this is for programming knowledge so this is programming knowledge project something like that and then enter press enter and then we will just wait for a few seconds or minutes and allow the installation to finish so I'm just going to pause the video and there we have it after a few minutes or a few seconds we already have operated our laravel project and then we try to check this project in our code editor which is the atom but like I've said you can use other code editor that you prefer so some of you I think prefer is sublime and me personally I prefer the atom code editor so let's go ahead and try to track this project in our code editor so here we are at our code editor and let's try to open up the project our very own laravel project so let's go to file and open folder and let's try to find the peak a project or programming project and then select folder so this is how the project looks like in our file system and if you try to check if we try to open up this in our browser so let's check this let's just close this and let's try to go to localhost and then DK project so as you can see we can see the structure of the directory of our project which is the PK project that we have created by using the composer so this is a security issue because we can see the how of the project is structured but we don't want that we want to see the home page of our application so if you try to type in public poconos PT project / public so this is the page that we want to see this is the home page of our currently created project a lot of them in order for us to configure this project properly we need to add a virtual host and if we try later on if you tried to browse to our project we shouldn't see this file structure right here so this is some something like our s somewhat ugly for us to see the file structure here so let's go to localhost by typing in localhost and then here we can see the configuration of our one server there you can see and under tools we have here an option to add a virtual host there you go and we just need to add the name of our virtual hosts also for example project ek project that location or that LOC and then probably we need to type in us well the complete absolute path of our virtual host folder so it just literally means that we need to provide the complete path of our project folder so 64 and triple w slash the name of our project which is the PK project programming knowledge project and slash public folder so it means that whenever we have or whenever we browse our project by typing in PK project that LOC it should redirect us to the public folder where in which we can see the home page of our application so there's an option here at the bottom to add a port or listen port but this option or this field is optional for now so let's try to start and create the virtual host here so the files have been modified and virtual host PK project that LLC was created so we need to refresh our or we need to restart our server or one server or the Apache itself so you can go ahead and try to restart here restart all services so that the virtual host that we have created will be added to the server or the WAMP server so after a few seconds we can go to the browser and try to browse our virtual host which is PK project that ll see there you go and where is a PK project equip rod Jack so there's an option here that did you mean to go to peek a project that LOC yes of course and there you go you can see our project PK project that that LOC and redirected to the home page of our project and this is what we see so instead of this ugly fine structure of our project so we can see here the server of our project and and this is the third part of our laravel tutorial series and in this video we're going to talk all about the basic routing and controllers but before we do that let's just run through the code or structure of our project right now so as we have mentioned before laravel uses the Model View controller or MVC format or structure so here in our project there is specific areas for those types of things so there's specific areas for the model there is a specific area for the view and specific area for our controllers so we're going to get to that later on on this video and if we try to open the app folder here we can see the user that PHP file which is this is actually a model and we won't go through the code right now but this particular file is a user or I mean a model user that PHP and can add all the models here inside the app folder but we can actually use or we can actually have a another folder here so you can add project folder here and try to name it as small dance if we have if we have like 50 or have 100 models for our project so we can add a subfolder for this app folder but if you have only maybe less than 10 or less than 20 models you can just leave it here inside the app folder and also if you try to open up the app folder and under HTTP and then controllers here we can see the base controller that page we which is extending the base controller and all the methods and functions of this base controller we can use it in our controller files and also laravel creates a folder for the other controllers such as the lagging controller register controller and reset password controller so all of these controllers we can use we can use this readily if we try to enable the oath for our project and if we try to create a controller we can actually manually create a file here or that PHP file which is for our controller and also we can use or we can create a modal by just manually adding it here but the best way for adding controllers and and the model is by using the artisan now if you're wondering what is this namespace name space app so this is just basically grouping our classes or our code so this is a pretty common especially if you're working the objectoriented way of programming so we're just basically grouping or our glasses and try to distinguish between different classes and the same glasses inside this directory and also if you see the illuminate here don't get confused it is just basically a core files or core functions coming from the laravel so don't worry about this now views are gonna be on the resources folder and under resources views and then here we have the Welcome that laid that PHP and as we all know that laravel uses the great computing system so it is just basically a an HTML with dynamic mechanism in them so we can see if statement we can see loops we can see variables by using the great tableting system ok so now that we get that out of the way we can go to basic routing for our project so basically we what we want is to add a page controller in where we can add we about pages home pages contact or any other page that we want to add in our project so if you try to go to our project and routes here and when you can see we can see here that we have gear out and Colin Colin and then the type of request that we want and then the URL and of course the function that return something or put a lot of operation inside is so try that for now and let's try to open up our project in a browser so here is our project and peak a project that LOC slash so here's the home page where we can see all the links and the title laravel now let's try and go back to our code and try to edit and instead of returning the Welcome we can just return something like attacks or string so return hello world something like this and then save and let's go back to our browser and refresh so as you can see we have here the low world tax that we can see and it is coming from our router or kraut and get and then the URL which is these slashes represent the home page of our project and of course the string hello world okay so for now let's copy this and let's just return this to the original or our index so this is the home page of our app or application and this will be the hello page of our project so this is basically we're just going to display hello world and we can just can also add HTML tag in here so just like that and then save and let's go back to our browser and in refresh so P key project that LOC this will be the home page right and we try to add hello here it will display our update and hello world string and this is with dh1 tab now if you are trying to submit the form or you are going to delete something so you can just change this into post if you are submitting by a forum so working with the route is very easy so say for example we have pages in our project and let's try to go to where is it resources and then we want to separate our pages here so let's just add a pages folder and in this folder we're going to create another fine which is the name of our file will be the about about lady that PHP okay so in our about that way that page people can just say about okay save that one and let's go back to our route file and instead of I think we're just going to change this and to get then let's just stop to pee and paste this here so instead of hello so we're just going to name it about or the URL will be slash about in the set of returning the HTML so we're going to return the view now and notice that we have the the about view inside our pages folder so we're just going to add pages and then add that or period there there and then the keyword about so let's try it save the file and let's go back to our browser okay so here we are at our browser and instead of using the low let's change it into a cloud so as you can see here we have the above word here that is coming from our about that late that page be fine and also there are times that we need to submit dynamic values in our requests so say for example we want to submit or we want to request user with this particular ID so let's go back to our web page B file and let's just copy this so instead of just using the about let's changed it and I think for a change the two users and then in order for us to be able to submit an ID so we can just add a placeholder here and this will represent our ID and inside our function it should have a parameter ID that represents the idea of the user so instead of returning the view for now let's just display this is a user and then we're just going to add the name or the ID of the user so let's just save this and go back to our browser and refresh so instead of using the about so let's go ahead and try to open up the users and let's try to submit each team so this is a user 15 or so for example name name of the user as Jo this is a user is Jo but most of most of the time warriors we were requesting a particular ID and then based on that ID we can clearly that into our database and welcome to this laravel for beginners tutorials and in this video guys we're going to discuss how to work with controllers inside our neural project and as a sort of review a recap in the previous video we work on how to use the basic routings so we have discussed basic routing in the previous tutorial and like I've said in this tutorial we're going to discuss controllers but firstly we need some configurations especially if you are if you're using the atom code editor so basically we're going to install some packages required for us to continue working with our laravel project so one thing that we need is the terminal because by default terminal or the builtin terminal of atom is not currently installed so we need to install the atom terminal for this particular code editor so in order for us to do that we need to go to file and then settings and then under packages we can see all the packages installed here in our code editor and in order for us to install so let's go here in the installed section and then we need to search for atom terminal and then we're going to use this terminal for us to issue a command by using the artist and for us to create controllers automatically so there are a lot of terminal available if we search for terminal inside the atom code editor but I'm using this one this is Adam terminal 0.8.0 so accordingly it open terminal terminal the current files directory so whenever we activated this terminal it will be inside the current files directory so go ahead and try to install that so it is developed by Karin so as you can see here and this will be our basis and this will be we will be using this to issue commands by using the artisan to create our control automatically so after installing the terminal we can finally issues artisan commands by using the built in atom terminal and in order for us to activate that we need to press alt shift e in our keyboard so ctrl or alt shift e and then this will be or this will open the current files directory which is the name of our project currently is M or PK project and then from here we can issue the artisan command to create the controllers of our project so let's try to issue commands or others issue artisan command to create our controller so the key word for that is we need to use the PHP and then artisan and of course the keyword make next to that is the controller keyword and of course the name of our controller which is pages so for example using pages and then pages controller so you might want to use this code or I mean the naming notation so all the first letter of the word or any word is capitalized so example for this the P in the pages is capitalized and of course the C in controller is capitalized so every first letter of words in our controller must be like this like a naming convention for our controller so after that just need to press ENTER and then wait for a few seconds and there you have it controller created successfully and then if we try to check our app directory inside here and there HTTP and then controllers and then there you can see the pages controller that page we file has been generated with all the necessary terms and code included so we have here the name namespace of HTTP controllers and also it automatically added the illuminate HTTP request and created the class pages controllers which extends the controller class and any controller that you created should extend the controller class and inside here we can create a function or method so a function inside the class is can be called a method also so public function and then index okay so public means that we can access this outside of this class so for now let's just say it will return a tax or word index and let's go back to our routes folder and web dot PHP so we have here the index setup like this so instead of using this so I'm just gonna go ahead and comment this out and then paste it here so instead of using this function to return our index so let's just try the pages controller or we'll try to use our pages controller here so first let's use the occultations pages controller and add symbol and of course the method or the function that we have defined which is the index and now let's try this in our browser so I'm just gonna save this web dot PHP and go back to our browser and try to refresh so as you can see we are on the root folder or the root directory of our file or our project and then it says the index which is coming from our pages controller and index method so now we want to return the view index instead of this string index so let's go back to our code editor and in here let's go to pages controller instead of returning the index we just need to return the view and of course it should be under the pages and then the file index so currently I think I think we don't have yet the index dot PHP file so let's just go ahead and create that so under resources so we have here the views so under pages let's just go ahead and create a new file so this should be index that laid that PHP and let's just try to copy all the HTML from welcome that way dot PHP to our index that laid that PHP and just we're just going to delete this content from here and I think also the Styles all the stylings available here that's just it this and of course this font and for the title we're going to get back on this later on but for now let's just define a tag here each one and then welcome to larva for beginners right there beginners from programming knowledge and then paragraphs there you go this is a larval tutorial series okay so if you try to open up the dot env file it holds all the connection like the values for our database connection the database name the password username and all other values and also it holds the app name of our project so it it it says laravel its instead of laudable I'm just going to rename the speak a project or programming knowledge project and save that and go back to our index that later at the HP so instead of using the laravel as title here let's just use the config file so config and then open closed parenthesis and app that name and if that is not available let's just use PK project okay and save that and let's go back to our browser and refresh our page so as you can see here we have the new HTML coming from our index that page B welcome to laravel for beginners from programming knowledge so this is a laravel tutorial series and this reflects all the content from our index dot PHP file so as you can see here the code or the HTML code behind this page okay so for now let's just do the same for our about page so let's just copy this and go talk about that way that PHP file so instead of using the about so let's just paste the HTML and let's just change this instead of welcome to level for beginners it should be about and let's just say here that this is the about page and while we're at it we're just going to do the same for our services so we need to add a new page so this will be services that laid that PHP and paste the HTML and of course change this into services right and this is the services page right so save that and I think I have misspelled the blade so name this in too late instead of bleeded and for our page controller pages controller we need to define functions as well two other functions for our services and about so instead of index this should be for about so pages that about and this will be for our services so services save that and in our route file stead of using this routing mechanism so let's just replace them with our newly updated functions from pages controllers so let's just copy this this will be for about and of course change this into the above method and this will be for our services and this will be services as well so save this and let's go back to our browser and try to check if all are working ok so try to refresh and then let's go to our about page so as you can see here we have updated our about page and of course if we try to go to our services page so services and there you have it this is the service page of our application so I think that's all there is to it for this tutorial and in the next video we're going to discuss how to go about blade template nning because currently we are using or HTML for our about for our services and for our index that PHP file so we want to reuse and reduce the code for this particular file so we're going to look at how to go about via templating and in this video we're going to talk about blade templates and of course a sort of recap from the previous video we work with the controllers and we set up control by using the artisan and as I've said in this video we're going to talk about blade templates so let's go ahead and create a new folder inside our resources folder and under views so we're going to create here a layout directory so new folder and then we're just going to name it layouts because as you can see if we try to open up our pages the about the index and services you can see we have repeating HTML for our services page our index page and our about page so we'll try to minimize that by using our layout files so under layouts this is under view so under layout we will create a new file called up that laid that PHP and then we're going to substitute or we're going to add some keywords here that will enable us to minimize this repeating HTML and inside here we're just going to copy the HTML from our about Veda HP and paste it here in our app that laid that PHP and in here we'll just say add symbol and then yield and and then keyword content so save this and inside our index dot PHP so instead of using all this HTML we'll just delete this and we'll just leave this h1 and paragraph tag and at the top we'll just say extends and then open in close single quote and then layouts that so the reason behind we we put layout set up because this particularly out Long's or under layouts folder and the name of the layout s app so that's why we extend layout that up here and of course let's just delete this also the body and HTML tagged and in here was just gonna put a section and it should be the content right there and in here let's we'll just end the section okay there you go let us save this and copy all this code or maybe here and then go tour about that page P so instead of using all this HTML we'll just replace that and put the end section there same thing with our services so remove all that HTML and type in the end section here so let's go ahead and try to preview if all of our code are working so here we are at our index let's just refresh that and as you can see our index dot PHP file is still working with all the h1 and paragraph tag there and if we try to go to about it should work as well and of course the services okay so this is the index right so maybe we'll just change the stacks and try to see if it's working or if it's really working or not so let's go back to our code editor and index that laid that PHP so welcome to laravel for beginners and we'll just delete that save our file and let's go back to our browser mmm refresh there you go as you can see the h1 tag only contains now D welcome to laravel for beginners tax so in that manner we won't have to repeat all the ugly HTML that we had before and now let's try if we want to pass some values or parameters to our blade templates so let's go to our pages controller in the app HTTP and then under controllers so pages controllers and let's try to pass some values or parameters to our layout by just using this mechanism here so let's just say title and then welcome to programming knowledge something like this programming knowledge there you go and actually there's two ways on how to do this but I will show you both ways on passing values to our template so the first way is this so let's just pass parameters so view and then compact compact there and pass in the title as the parameter and let's go to our index so instead of using this text here let's type in curly braces and then tighten there we go and let's try to save this and go back to our browser so this is the original text welcome to larval for beginners and let's refresh our page so I think we have an error use of undefined constant title assumed so I think we forgot to type in the dollar sign or money sign so instead of only the title we'll type in the dollar sign for our placeholder and then save that and refresh there you go as you can see welcome to gramming knowledge so let's just just to make sure let's just change something here in our text so instead of the title let's just say welcome to programming knowledge and then let's try to add a mark there or at the exclamation mark and refresh our page and there you can see welcome to programming knowledge with the exclamation mark another way of passing parameters to our layout is by using the keyword width so instead of using this let's just comment this out and paste it here and also change this instead up compact let's just say with and of course the title keyword and the actual variable title let's just go ahead and do the same thing for our about pages so in here we can pass in the about us tax and this should be with and of course title with the actual variable title here and also in this particular method we can pass in multiple data by using array and instead of using the title variable so let's just say data and then we will define an array here array and inside this array let's just say we have a title here and then services okay and of course we need to pass this to our services page or services layout with the keyword with let's just not forget the greater than sign in of course we can use the data variable and let's just go to our pages be about so instead of using the about here let's just go ahead and type in the title and also for our services here we can just say tie it down there you go so about and our services and including our index that made that made that PHP and let's try to refresh our page and let's go to our about page as you can see we have here the updated about page and also the services with I think we have misspelled a bit so let's try to change that in our code editor so services I think it's in our pages controller and of course by deleting the D because we have misspelled there and refresh and there you have it services this is the service page and for today's video we're going to discuss about how to compile assets in our laravel project but first let us try to pass data as an array of values so last time we pass parameter as array but what if try to pass data or an array of data inside an array so we'll try to do that here in this video and let's go ahead and instead of passing only the title we'll just pass another array of data here so services and then we're going to add we're going to add regular array here for our services so number one will be web design second one is programming third will be SEO all right so since we're passing this services inside the data array so we should be able to access that in our services that laid that PHP file and in order for us to do that we need to check if there is if the services are a contains something so we could add a logic here so if count and then the services is greater than zero and below here let's try to add the and if there you go and of course we need to iterate our services array if it is not empty so add for each for each and then the services as service and we need to add also the end of our 4h and of course inside inside this for each we need to like if we need to add the Li for our service something like that and then we need to get the server's itself and we need to add the UL for our or inside this if statement so you will here save and let's try to preview our page this is the home page of our application and if you try to go to services we can see here we have the data coming from our pages controller and we're passing the data including the web design programming and SEO now let's talk about compiling or how to compile assets in our laravel project so before we proceed let's download first the node genius so if your Windows user or Mac OS X user so there is available and solar for you and you can have the 32bit 64bit options but we'll just try to install it by using this means Windows installer and install it in our local machine so after downloading we can just install it right away open up the installation package and then try to click on next and then accept the terms and the license agreement so next and then the installation path the next and then make sure to enable all this options here the node.js runtime the NPM package manager online the commendation shortcuts and then add to our environment path in the next and there's an option here the to automatically install the necessary tools and there is a note that this will also install the chocolaty and the script will pop up in a new window after installation process so to save us from trouble so let's just enable this and then next and install and then we'll just wait for a few seconds to enable the nodejs installation to complete and then after installation we should be able to like for example include strap in our project to include other dependencies for a project and so on and now that the installation is complete so let's go back to our project here we are we can try to open up our PowerShell window and then let's try to see the version of our nodejs so we have the V version 12.13.12 can see the version for our NPM which is also 6.12 point one so by this time we can already include our bootstrap insulation for our project now we just want to run the command composer require laravel and then /uy and then we're just going to wait for a few seconds to allow the installation to complete and we should be able to incorporate the necessary libraries for our laravel UI so as you can see this will also install the bootstrap in our laravel project so we can already use that if we have a successful installation for our laravel UI and now that the installation for our laravel UI has been completed so we need to run also or to include also the dependencies for our oath so this will include the login and register view so PHP artisan and then UI views oath and this will install the log in register and after that we need to run the command npm install to compile the CSS and other dependences of our project so we should be able to see the login register and other views included for our UI and view oath or auth dependencies so I'll try to show you that after this installation so we're just going to wait for a few seconds for it to complete and then we should be able to see the changes in our browser by the way if you can see here at the top there's a prompt here that the layout app blade that PHP view already exists so do you want to replace it so in my case I have said or I have set it to N or no but you can try to accept it or to replace the existing layout of our app that late at page please so you can try to answer yes for that and then the layout of our project will be changed according to this update and this layout balloon will also include the old the login and then register as I've mentioned before and as you can see here I have here the layout view already exist and do you want to replace it and I just answer it why or yes for that so I just want to replace the existing app that rate that page way that we have been working on in the previous tutorial and after that you need to run also the command npm run dev to compile all the necessary assets that we have so here we have the app that CSS and app dot j s and after running this command we should be able to see the changes of our project so i'm going to show you the project now and what it looks like so this is our project should look right now and as you can see we have here the CSS folder that contains the app that CSS or generated app that CSS that contains all twitter bootstrap styles necessary to apply to our project and we also have the J's file or GS directory with the app that J s file as you can see with all the scripts needed for our project so this is the compiled versions of all the scripture scripts for our project and as you can see here the resources we have here the op GS and the bootstrap Jas and as I've mentioned before we also include the oath files so it should be the log in that Lagoon blade at the HP register blade that PHP and verify that they are verified that blade that PHP and of course we also have this files for our passwords so confirm email and reset and now let's try to preview our code in our browser so this is the home page of our project right now and if we try to go to about section so we can still see the about us and then this is the about page tax and of course we can also see the services with all the services included the web design programming and SEO so this are the pages that we have added the login and then register if you try to click on that so as you can see we have here the readymade login form and the same thing with our register and in this video we're going to discuss how to work with models and migrations but before going into models and database migrations let's try to add first the about and services links here in our navigation bar so let's go ahead and try to do that in our code editor and in here we can try to open up our app that laid out by HP so let's go ahead under views and then layout up that late at HP and as you can see here we have here the links of the login and register so all we have to do now is just copy this and paste it here so we'll just add the links so for example for our home let's just put slash there for our home and then copy that for our services so the link for our services is slash services and the same thing with our about page that there and change this link into slash about and then let's just go ahead save this and let's refresh our page and there you go we can see that we have the Home Services and About section but I think we need to modify the layout because we want this home services and about to align with login and register so in order for us to do that let's go back to our code editor and in here instead of having one nav item so let's make it free for our home and then the same thing for our services close the list item tag and paste another one so save this and here refresh so as you can see now we have the home services about login and register links aligned together and if you try to click any of these links it should work for all of them so the about services home and also the login and register links one last thing that we will modify here is that we need to add some class to our content to properly position our text services and also the about Us section let's go back to our code editor and try to modify this and in here let's go to the main element and it has a class of B why for for now so let's add a container class for this and then say go back to our browser and refresh there you go you can see that the about or this elements are slightly indented from the left so about us and also with the services now that we have that covered let's try to go to the topic models and database migrations so the first thing that we're gonna need is the page with my admin if you are using one or Sam or any versions of the wampserver so the page with my admin is embedded into that and included on the installation process and I hope that you included that during the installation process of the one server or lamp or any version or any variation of the wampserver now we need page beam admin because we're going we're going to add a database here so all we have to do is click the new and then we're just going to name our database as PK project there you go and then great now we don't want to create tables here because we want our laravel project to automatically create table for us so let's go back to our code editor and make some changes and add controllers add borders for our project and in here let's try to open our terminal so I'll shift e so this will open up our integrated terminal for our atom code editor and from here we can issue commands or run commands artisan commands page P comments or any other commands that we need so the first thing that we're going to need is to create a controller for our post so the key word for that is PHP artisan make and then Colin and then controller and of course the name of our controller which is post controller and then enter and we're just going to wait for a few seconds to allow the insulations are to allow the generation of files so there you go controller created successfully and the next thing is we need to we need to add a controller or I mean a modal but for now let's try to check first if the controller has been generated for us here in our project so as you can see we have here the post controller the deck extends controllers and readily use the illuminate coming from the laravel and added the namespace controllers so the next thing that we're going to generate is a modal so in order for us to do that just like the controller is to issue command PHP artisan and then make and then instead of controller we're going to use a modal and try to generate a post modal so as you can see we need to or I think the best way here is to use a singular form of post so here we are using post and then enter and before that we need to add /m because we're going to use the migrations so this will enable us to generate the table from our laravel project so M and then enter and there you go model created successfully and created migration post tables as you can see if we try to go to our database view database and then migrations we have here the create post table a great post table migrations so as you can see it extends migration class and then it has the two function up and down and then we need to modify this method function up because currently this particular function create a post table with this attribute ID which is Auto incremented and also it includes the time stamps for created add and update and add which will be automatically filled in when we try to run the migration command and since we're dealing with post we probably need to more algebra which are title and body so in order for us to do that is we need to add it here in our app function so table and then string and then of course we need to name our attributes such as title there you go and another one for our body so table and then we want to make sure that we use the medium text here because usually the body of I post tends to be longer than the title right so medium tags and then this will be the body of our post so save this and as you can see here if we try to go to migrations we also have the migration or create users table migration for our users so we including all the attributes ID name email password and all other attributes included here now we will make few changes here before we run the migration and create our table so let's try to go to our ENB file to input our database details so we have here the database the username and the password so I think the username and password are already set but we have to update the database name which is in our case we have used the Vicki project there you go and then save this so before we run the migration command and generate the tables I'm going to show you a quick change that I made in providers app servers for Ryder dot PHP so under provider app folder or providers directory and then app servers provider dot PHP make sure to import the illuminate support passage and a facade and then schema and inside this function boot make sure to add this schema default string land which is 191 and if you have added that already we're good to go and we're now going to issue the PHP artisan migrate command so PHP artisan and then migrate and if we try to check our page with my admin and refresh our project core PK project so as you can see we have here all the tables generated coming from our project or PK project so we have here the post inside this post we have the ID which is the autogenerated ID and the title which is the land is 191 so we have set this in our code and the body and of course the time stamps they created that and update that and in this video we're going to discuss how to fetch data with eluc rent and also we're going to populate our database by use by using the tinker command and in order for us to do that let's open or integrate the terminal of our atom editor so in order for us to do that is we have to press shift alt and T and there you go we have opened our integrated terminal and in here we can type we can run the finger commands from here and also we can populate our database by using the tinker so all we have to do now is type in PHP artisan and then tinker and as you can see we have here the brackets that let us know that we are inside the tinker program and from here we can directly work with our database and directly work with our models so for now let's bring in the post model so app and backslash and then post and then we can have a function and here so say for example count and it will return in zero which means we don't have yet a post in our post table or post model so now let's create a new instance of our post so in order for us to do that as defined a variable dollar sign post and then equal sign and then our in model and then new app backslash and then post then semicolon and make sure you have the backslash instead of forward slash so this will be the backslash and enter so now we have a instance or an instance of our post model so it is being saved in our memory and by that we can use that in order for us to move forward and add a post to our post table so now we can use the post instance and then set the title for our first post so let's just make it the title into post one and then semicolon there we go and then of course for our post body let's just do the same for our post body so this is this is the post body semicolon and then there you go this is the post body and then after that one we can save this save the information for our title and our body so post and then save and then enter and it returned it returns true which means that we have saved a certain post to our post table now if we try to check our database inside our PHP myadmin we can see here that we have a post and of course we have the the first post which is which has the idea of one that I tell we have set this into post one and of course we have set the body content this is the post body and it also have the created at and updated at fields which has automatically populated for us so let's try to add another one and first let us create a new instance of our post model so new and then app backslash and then post this will create another instance and then we're going to set the title for this this is post two and the post body also we need to set a value for this this is the second post body there we go and we will say finally we will save this values so our database so it returns true again which means that we have now have to post in our post table in our database so refresh here and then you can see we have two posts or two records of our post table so post two and then this is the second post body with D created at and updated at fields now if you try to go back into our project and if you want to add a functionality here for our create read update and delete we're going to need to have different functions and different routes in our laravel project so let's go back to our code editor and try to edit our post controller let us open our post controller and as you can see here it is pretty much empty for now so in order for us to add the functionality for our create read update and delete I think we're gonna need functions or several functions from here so we need the first one is index so it is just a way of listing all our posts from our database another one is create and I'm just going to type it in here you don't need to follow this time so store to actually save our data into our database and then we have the function to add it and also we have a function that should be updating our data and of course we have also show and of course the last one to delete our record from our database so we could actually create this functions manually but we'll try to create this by using some commands so I think I haven't shown you this yet so I think I just have to delete this post controller for now and generate another one so I have deleted the post controller for now and I'm going to generate it again by using some commands so in order for us to do that let's run the command PHP all righty sign and then make and then controller and of course the name of our controller is post controller with s post controller and then we're just gonna add the resource keyword here and then we're just going to wait for a few seconds to allow the generation of our controller so there you go controller generate that are created successfully and if we try to open up the new post controller we can see that all the functions that we have listed earlier has been generated successfully so we have here the function index so display a listing of the resource and some of the functions here don't need or doesn't need the parameters but there are also functions that need the parameter so say for example this one we have D create so show the form for creating a new resource and then the store has this parameter request and we're going to define some of the logic later on inside this function and also we have the show so it has the ID that will identify the record that we wanna show here and also we have the edit the same thing it has the ID parameter and also we have the update that requires two parameters the request and of course the ID of the resource and of course the destroy function that will enable us to delete based on the ID of the resource so now that we have laid out all these functions in our controller we need to have a route for each functions right so we're going to add or we're going to go to the web page P of routes and as you can see we have here the route that we have currently and if you try to go to our command or our terminal let's try to list our routes for now so PHP artisan and then route and then list so these are the currently generated routes for our project so as you can see we have heared laggy in the home the password the register and all other functions or all other routes that we have set and now let's try to add a route for all our functions because it is a kind of pain in the ass if you try to generate individual routes for our functions right so let's try to generate route for all our resource in our post controller so route and then resource and of course the name will be post and of course the name of our controller which is post controller and then we're going to save this for now save and then let's go back to our terminal and try to run another one PHP artisan and then route and then list so let's try to find our resource or generate that routes for our post controller so as you can see we have here all the the routes related to our post controller so we have here the post store post index post create post show and of course post update and all other functions are all other routes that we that we need in our post controller in the previous video we have work with the controller or post controllers we have added their outs so you've tried to open the web dot PHP in our routes folder so as you can see we have defined here route and then the resource and then the name is post and our controller which is post controller and then we also added or generated the post controller class so as you can see here we have here all the functions that we need in order for us to work with our code or create read update and delete functionality of our project and in this video we're going to continue working with our post controller and try to fetch data coming from our database and display it on our browser by the way guys if you try to open our post model so as you can see we haven't done much here and if you want to change the table name you can change it here and also you can change the primary key so it's a for example you want to change the table name here so for table name and then protected and of course the variable table equals the new name or the name of your table that you want in your database and of course you can also change the primary key because by default we have we are using the ID auto increment ID so you can also change that in here so protected say for example protected and then the primary key primary key it was ID there you go or you can change it into public so public primary key and then safer some value if you want to name it as item underscore so for example you want to name it as item underscore ID as the primary key so you can do that also by by default were using the ID right and also if you want to change or if you don't want to include the timestamps that we have or that has been added automatically for us so timestamps remember that created at and updated at fields so we can set it to false to not include that in our database so you can do that here but I'm going to show you now how to display the data coming from our database into our page or post page because let's open our project in our breath so this is the home page right and if you try to go to the post section and page is currently now blank but we can change it because currently it is loading the index function coming from our post controller which is now returning or it doesn't return anything for now so we will change this and we will return the view for our index so we're just going to edit this so instead of returning empty it should return a view so it should be a file under post directory and then the name should be indexed at late that PHP so there you go so we need to create that in our view so resources and then views and then we need to create a new folder here so it should be post and there should be a file here that says index that laid that PHP so there you go and in here let's just extend the layout coming from early outs folder so layouts and app and of course we need to add the suction content for our content to be here especially the post so and section you need to add end of the section here and of course we are going to place an h1 to have our post there and now let's try to preview our post page so as you can see we have the navigation bar and the h1 post and now let's try to get all the posts coming from our database so in our post controller instead of returning just the post index so we can return the actual post so we can use the post model because we're using the eloquent so it is basically just a object relational mapper and in here we can just say post double colon and then all so it will return all the records or all the posts coming from our database so I just comment this one out and also this and also this one so save and then review our code so refresh this page and we have some sort of error here so class HTTP controllers post not found so that's because we then click or use the app post here so we're just going to add that so use app back slash and then post and then semicolon and then save that and let's go back to our browser and refresh so there you go you can see that all the posts coming from our post table in our database has been loaded and it is an array so let's go back to our post page and try to iterate this array to actually display the title so instead of returning the just the pose so we're just going to return the actual variable post so this will be returned view with and of course the name is post and our actual variable is post so it should be s or with s because this variable should contain all the poles coming from our database to save this and in our index that laid that PHP we're going to iterate all the posts coming from our database so let's just do that and in here we'll be adding a condition so at if and then count so first we're going to check if the post array has an element so pose is greater than one and then we're just going to have an else here and of course the end of our if statement if there's an element inside the post array so we're going to iterate that by using the for each and then post and individual posts there and we're just going to use the bootstrap element for a division so and if for now or end of our for each and of course this one is coming from our bootstrap implementation so class well and it should contain the h3 it will hold the title of our post so post and then the title of course and let's try to preview this in our browser so save this one and refresh so there you go we have the post one in post two so we can add also decorated add variable or created add attribute in this so we can see that when it is created and also we can make this title as link so we can actually click on this and then redirect it to another page specifying the ID and then we can see all the details of that particular post so let's go back to our code and and in here let's add an element so small so this will hold the date that the post has been created so small and then it should be written on then double braces the post variable and of course decorated add attribute so save this and preview our page in a browser and refresh so as you can see we have the post one post over and of course the day that when it is created and let's make this post one or post two as a link so let's go back to our code editor and instead of just returning the h3 here we're going to add a link element so H or h3 and inside that is the link element so each raft and then double code so we should close this one here so a fourhour link and then of course it should be redirecting into the post page specifying the post ID so and then ID let's try that save this and let's go back to our browser and refresh so as you can see the post one and post o title has been converted into link and then we can actually click on this and we can see that is blank for now because we haven't configured yet this particular page and in this video we're going to cover how to display the information coming from our database and using the Luke went over em so we're going to display our post so basically from the previous tutorial we have worked with our controller post controller and our post modal and of course we have laid out the basic layout of our index that laid that PHP we're in which we already iterated the post coming from our database and also making our title as link so that we could click on that link and then be redirected to another page where in which you can see the full details of that particular post and also we have added the created at or written on date and then I have realized that we are we use the class well which is not included in in bootstrap anymore so we're going to use card for this class and in our app that laid that PHP file we're going to add the post page so we have here all the items are all the links from our navigation so home services and about so we're going to add another link or another item in our navigation bar so this should be all about the blog which contains all the post and of course this should be all about post so let's go back to our browser and try to preview and let's try to refresh the page so as you can see we now have the home services and of course the blog which is added recently so click on that and you can see we have here a deposed and I think we can take this further so instead as you can see this is somewhat ugly for now so let's try to modify this in our code editor so let's go back here in our index that played that PHP and yet as you can see we have here with the card right but instead of using a ch3 I think we're gonna use the UL for now so this is coming from our bootstrap integration on so so you L so inside this and it should have the class list group and then list group flush flush there you go and then of course inside here is the list item which has the title of our post so it should have a class list group item and in here we're going to place instead of using the h3 so we're going to or I think we could keep this h3 in this area so h3 so there you go instead of using h say only so we're basing the title endocrine created at the inside a list item we should reiterate the list item so let's go back and try to add or remove this and add it here and so with the closing dave and closing l unordered list tag so there you go and then save that and refresh so as you can see we have now a slightly different version of our post so if you try to click on this post so we still have a blank page so we'll try to work on that for now and let's go back to our code editor so let's go to our post controller and as you can see we have here a from that says show that takes in a parameter ID so we can just edit this function and try to return a single post so return and then post and of course you can use a function here called fine and then specifying the ID and let's just save this and try to preview in our page so refresh and here you can see that this is the post one and this is the body of the post one so let's try to check and click on the post to so there you go the idea is to and the title is postal and now let's take this further and try to beautify this instead of just seeing the array of data so let's go back to our code editor and instead of returning basically just the post so we're going to return a view just like what we have in our index function so post and then we're going to return a certain view so this view will be a post or under the folder post or directory post with the show that blade that PHP file name and this should go with our post variable so and then the actual variable post and of course we can try to get this on our post as show file so let's try to create that on our post directory so let's try to create a new file here so this should be show that laid that PHP okay and then we're just going to copy the markup from this index that laid that PHP and paste it here and then we're going to extend the layout as well and of course you can get rid of this because we're not dealing with we're not dealing with an array so we can just have or we can just use the post variable and then you can get the title from there and of course we can also get the other attributes so the post body and of course the created on attribute so we're going to add it here by placing it inside a small tag so this should be written on and of course double curly braces and then in our post variable width D created on attribute and I think we can add a char here so H our horizontal rule and then of course we're going to add the body or the post body of the particular post so post and then the body of the post so let's try to save this and preview on our page so this is the current version all we see is an array of values coming from a particular post but if we try to refresh this now we can see the post title and the post body and of course the I think we misspelled instead of using created on I think it is created underscore AET or add and then save that and refresh so we have here all the information the post title post body and of course d created at date so post one and then post two and I think we could also add a button or back button here so let's do that so above the post title we'll just try to add a back button here so it should be a link that goes to the post and of course it should go it should say go back and it should have a class of a button so BTN and then BTN default so save and refresh so we have here a link that tells us to go back to the post or to the page where all the posts are displayed so I there you go post two and then post one and then let's go back so what if you want to sort by maybe title or I T ascending or descending so let's try that on our index function of our post controller so as you can see we are doing the post and then post modal and then double double colon and then all so we can actually sort by title or ID so whatever you want to sort by so say for example let's just comment this one out and try to copy that suppose we can say here order by and then the attribute that you want your records to be sorted by so title say for example in this case title and we can say descending or the d es e and of course we need to say get and refresh here so as you can see now the post o is the first one to appear here instead of the post one and if you try to go as sort by ascending sort by title as ascending there you go refresh so the post one is the first one two appear here in our post page and actually you can also use the SQL commands or SQL statement and our controller to get all the post coming from our database so all you have to do is use the DB class so actually I'm going to show you that real quick because it it is very easy to get all the records coming from our database by using the DB class so we're just going to use DB and of course and here we're going to comment that one out right now and use this as our variable per opposed so post and then equals DB and of course the Select function and our SQL command which is select all from host and then let's just save this and refresh so we still have all the post coming from our database so post one and post all and in this video we're going to discuss forms and how to save data and if you try to go to the create or peak a project that LOC create and then you can see that we have a 404 not found because it is loading the create function of our post controller and as you can see we don't have any logic from here yet so all we have to do now is modify this function and to actually return a view so this should return a view coming from our post directory and create template and let's go ahead and and create that inside our post directory so new file and of course the name of our template is create blade great blade that for HP and then we're just going to copy the mark up from this index that laid that PHP and paste it here and it should say great post instead of just saying post and then we're going to get rid of all this mark up here because we're going to use a form for us to save information coming from a form into our database and for now let us save this and try to preview in our browser so refresh so as you can see we still have the peak a project that LOC create and we're getting a 404 not found that's because I think we need to specify first the post here before they create so post and then create and there you see the create post h1 that we have added in our create that plate that PHP file so let's try to add a form into this page and we're going to use laravel collective for that so they have a some sort of a template for forms and we just need to install and add some dependencies into our project so we can see here HTML so laravel collective and we can also open up their website laravel collective and here we can see the different versions so for example 6.0 so installation for the lateral collective is here so composer require laravel collective slash HTML so we're going to do that in our code editor Adam and we're going to open up the the great the terminal from more code editor Adam and then paste jazz the composer required laravel collective so there you go and then enter we're just going to wait for a few seconds and now the installation is complete let's go back to the website and in here we have a guide on how to open up a form inside inside our template so we have here opening our form and then we can just copy and paste this one and paste it in our create that blade dot PHP so below here let's just paste this code and try to change this in because this is how the default on how to open up a form by specifying the URL and where to submit the data coming from this form but we can actually change this so in here we're going to specify the action instead of the URL so the action for this one is post controller and then at symbol and of course the store function inside our post controller class and we can also specify the method from here so it should be method and of course method with single code and the equal and greater than sign and here we specify the method which is post also in here we can specify a division with a class form group so this is actually coming from a bootstrap so we can also add a form label here so this will be form in the label and specifying that this is a label for our title and the actual label of our title field and of course we can also specify here the actual input so form and then tax we can specify the name of our input which is title and then the value so this is a create form so we should not specify a default value and of course we can also specify classes here or additional attributes so for classes or for classes for this particular input and this should have a class form control and of course a placeholder for this particular input so equal sign and then greater than and the actual placeholder which has title so let's try to save this for now and let's go back to our browser to preview and try to see here we have the actual label an input field which has the placeholder title by rating we don't have yet the correct classes for our input so it looks ugly for now so let's go back to our code editor and try to see so we have here instead of class we have specified classes so save that and try to refresh and there you go we have a much much better input for our title and then we can also the same or we can also do the same for our body so we're just going to copy this and instead of title we're going to say body and of course this is for body also and by d2 and so with this placeholder and of course instead of tax or using tax it should be taxed area there you go and save that and refresh our page so we have a title and a body now and the last part is to add a submit button for our form so before the closing tag of our form let's add the button submit which is form and then submit and of course we need to specify some values here also so submit and then of course the class for our button which has class and then we can specify the BTN class with the n primary to signify that it is a button so save and refresh so now we have a complete form with all the field and of course the submit button and if we try to submit now so it redirect to another page and basically we're not doing anything for now because we should modify also the store function of our post controller so let's go back first or code editor and edit our post controller so inside here I'm just going to close this real quick and in here we need to add some logic to actually save our data coming from the form we can also add the validation from this function also so we can specify this and then the function validate and of course we need to have the request here and also the area of the rules which is for our title it should be required ok so it should be required and also the body tag or the body or the body of our post should be also acquired so and then we're just going to return a number for now so 143 something like that say this and go back to our browser refresh and then try to submit so it is not allowing us to submit or any data because area is empty for now so but we don't have a message that it it is submitting an empty information but if we try to have an information here and then submit so as you can see we now have the return information on one for three so in this video we're going to continue working on with this form and let's try to add some template for our messages inside our create page so let's go to our views and let's create another directory here so this should be in a and C and then this we will create a new file here called messages that blade that PHP and then we're going to include this file into our app that blade that PHP so we're just going to configure first this messages that laid that page wait for now and first let's just check if the count for errors is greater than zero so let's just close first the if statement and we're going to define a for each here and let's just close the for each below and inside this for each as we're going to iterate the errors and this is an object so all and then as error and of course we're going to define a very basic alert to our user by using the bootstrap alert element so this should have your class alert and of course because this is an error so it should be danger right and of course the error itself display and also we're going to check for messages for session coming from our page so session and then if it has a success value so we're just going to end the end if here so just bear with me guys because I'm just going I'm just laying out the messages or the feedback to our user if they have something or if there's if there were errors during the process of submitting the information so div and then of course it should have the alert also alert success and the value of our session and success and then we're just going to do the same for our error coming from the session so they should be error also and instead of success it should be danger and also here is the error okay so we need to include this inside our layout that laid out by HP so I think somewhere before the main container okay or after the container element so we're just going to include the messages here so add and then include and of course the directory and the template messages so save this one and try to let's try to preview it in our page so refresh and then submit so there you go we can see the title field is required and also the body field is required and try to populate the title and then only the body field is required because we don't have the because we did not populate the body of our post so now let's go back to our post controller and continue working with our store function so you remember that we use tinker before to populate our database so we can actually use that also in here so post and then equal and a new post and we can use that instance for now so post and then set the title for our post which has the request or the value coming from a request and technically it is the value coming from the forum so we we should specify the input which has the title and then of course we can actually get the value of our body the same thing as the titles or requests and then the input and of course the body and save this supposed and then save then we can read the req to another page or to the post page so return in the redirect to the post page and it should have additional information so with and then of course success so remember we have defined this in our messages that laid that PHP file and this is how you set the value of the message so post created and then something like that and try to save this and let's go back to our browser and try to preview it so refresh and then let's try third post because technically this is the third post so post three and then this is the body d post number three and then submit so it is now redirected to the post page and it has a feedback post created so the alert message that we have created in our messages that made that PHP so now we have three records in our database post one post two and post E and then if you try to click any of this post we can redirect to another page with all the information included or displayed in this post and now I wanted to add a link to create a post because for now we don't have any link here that says we can create a post so let's go back to our app that laid that PHP file and then we can see here all the links from our navigation the home services blog and about and this is the right side of our navigation so I think we can just copy this now item here and then paste it on this left side of our navigation so this is create post or we can just say add post post and it should redirect into post create so let's try this so save and then let's go back to our browser and refresh so as you can see we now have the ad post link here and it should redirect us to deform once we click it so we have a working link to add post now and I think it's high time for me to add a sin tax highlighter for now for the blade templating because as you can see we have all the syntax here or all the scripts for our blade templates here but we don't have a syntax highlighter for that all we see is a white tax and then I think it's not readable for us so let's go to file and then settings and then packages and then let's try to install or try to go here in in install and search the package language and played so language blade so it is a syntax highlighter for the blade templating engine used in laravel so we're just going to install this so it should enable us to read the syntax of our blade or syntax of the blade much easily so let's try this and then let's just wait for a few seconds to allow the installation to complete and I think it's it is now complete let's go back to our file and as you can see we do have now the syntax highlighter or syntax highlighting for raid templates and it will it will be only activated on files that has blade that PHP file extensions and in this video we're going to discuss or we're going to talk about how to enabled editing and deleting of information or deleting of our data coming from our database so in the previous video we have worked with our post or our blog right so we can now have or you can now see all the posts coming from our database and of course we can also go into details by clicking the specific post in this particular page so there you go we have here the post tree and of course we have post too with all the details and now let's try to add the added functionality and also the delete functionality of this particular post so if there are several post here on this particular page so we have an option to edit or even delete that particular post so in order for us to do that we need to go to our code editor and try to modify our show page so as you can see we have the resources the views and of course the page and we also have here the files for our post so we have here oh that lady at the HP and in here we need to add a link so right after the written ion information so we need to add a link for our edit so let's just try to add furs and HR element to have a separation of these two elements they are small and of course the link that we are going to add so this link should redirect to post and then the ID of our post and of course the edit and then it should say edit and it should have a class VPN and VPN default so if you try to save this and go back to our browser and refresh so we now have the Edit link here and you try to click on this one we are being redirected to this page PK project that LOC slash post and then slash one and then add it so now let's go back to our code editor and try to modify our post controller so up and then HTTP controllers and of course our post controller so we have here the store function and of course we have also the show before or from the previous video we have worked with show and then we're just getting the post so we're just going to do that also for our edit function and also we can just copy this line and just modify instead of saying show it should have the Edit keyword and of course we're also passing the post variable to our edit page so let's go back to our resources and then post we need to create a new file here to say edit blade that PHP okay and we're going to copy the markup from create blade that PHP because I think there are almost the same so in this page were creating a post and of course in this page they're editing the particular post so instead of saying create a post it should be edit post and of course in here yes we need to say instead of empty we need to say post and of course the title of our post the same with the body of our post so post and body of the post and since we're editing a particular post we need to include or submit also the post ID so instead of just passing the post controller at store so we need to make it an array to pass also the ID of our post so that's a post ID there you go and as you can see we have here the post method but if you try to view our route list by opening our terminal so let's try to view first our list so that's the HP artisan and then route list so we have here all the route for our project and as you can see we have here the update right so post and then of course the idea of our post and as you can see the method for this particular route as put or patch but we can't directly say here put so we need to have some kind of mechanism to enable to say put so in here we need to pass in some hidden field so form and then he then and of course the underscore method give word so this is somewhat like a bypass the we cannot directly go here and say put so instead it should be post here and then here we can say the method should be put for our update route so save this and then I'm just going to close that terminal and let's go back to our post controller and try to update our update function here so in here in our update function we could just copy the logic coming from our store function so we can copy all this lines and paste it here there you go and we just need to change the post because we're not doing or we know or not creating a new post we're editing the post so what we need here is to find the particular post fine and then passing in the ID of the post and of course instead of saying post updated or post created it should be post updated so there you go save our post controller that PHP and let's go back to our browser and in here refresh so we have here the Edit post page so let's try to go back to our blog first and then try to see post too and then this is the post oh and then if you try to click on edit we can see that the title is postal and we can just edit the body here so this is the second post body and this is updated by a certain user just to make sure just to show that we have updated this particular post so submit so we're getting this exception so the put method is not supported for this route so I think we need to change something here so oh there you go so instead of using store it should be update here so save that and let's go back to our page so Doug and then post two and then edit this is the second post buddy and this is updated and then submit so there you go post updated and then if you try to go see depose two we can now see that the pose has been updated so now let's add the delete function just like what we have in our edit function or edit form we need to submit also the post ID for our edit function and also specify the move method so in that manner we need to also make our delete function as a form so we need to add a form here instead of just a pure link so that's form form and then open and the action of our form that will be post controller and then I destroy because we're using this for particular function to delete our post and then of course the idea of our post post ID specify the post ID and then for this we need to specify the method here so method and of course this should be post and we need to add a class here for our form so class all right because we want this to float right side of our Edit link so pull right and then we're going to close this one close our form and in here we need to add two things the method or the spoofing method that we have the same like for our edit so we need to add hidden field so underscore method and of course the keyword delete and of course here we also need to add the submit so form and then submit open and close and then delete this is our submit button so delete and we need to add a class here for our button so that's BTN and then BTN danger so let's try this refresh so we're getting syntax error and expected period so let's go back to our editor and identify the oh there you go so post it should be the post ID so save let's go back to our page Oh three so it says undefined class constant closed so I think we also missed that instead of closed so it should have the open and closed parenthesis so let's go back to our page post three and then delete so now we are being redirected to the destroy function of our post controller so let's go to that function so destroy and in here we just need to find the post just like what we have in our update and show so find the post and then of course we need to delete the post using that function and then we need to redirect to our post page so that's post post and of course we need to pass in a message so that's success and then the post remove so save that and then refresh or maybe it's better to go to our post first so blog and then post three and then press the delete so as you can see we have removed the post number three and we have the message here post remove so we have successfully created our create read update and delete but as a sort of review in the previous tutorials we have worked with our create read update delete functionality for our project so as I've said in this video we're going to discuss user authentication so as you can see we have here the log in register functions and if tried to go to our database we can see we have already created or populated our you users table with the attributes ID name email email verified password token and the created and updated fields or attributes so let's go back to our code editor and try to add more features to our project and add the user authentication and perhaps the user access control to our project so let's go back to our code editor and let's try to see the views in the views we have already this file right so as you can see we have different options and different menus the home services blog the about and of course we have added the login and register links so that we will be able to log in and of course we will be able to register it to our project and for now let's just copy this because we're going to overwrite this file so let's do that by creating a new file as a sort of back up and let's start to open up our command line so that we'll be able to create the authentication or user authentication for our project so in here let's just type in PHP artisan and then make Colin and then the keyword oath and then let's just try to wait for a few seconds to enable the so as you can see we have here a problem command make both is not defined so I think we have also instead of using the artisan make oath so I think we need to run the command PHP artisan instead and then you I and then all so this will enable the authentication or user authentication for our project and we have here a prompt that says the oath plugin that laid that page review already exists do you want to replace it so for now let's just say yes because you want them to be replaced with a new version of the login dot PHP the play that page be email that PHP and I'm just gonna answer yes to this prompt verify so this will again override our old files so authentication scaffolding generated successfully so if we try to run our project right now let's say refresh okay so as you can see we have already all right or every than our our old files and as you can see we don't have any additional options here for our blog services and adding the post so we need to add that in our app that laid that PHP files so as you can see we have the map app for our app that blade that page we file and we have here the new one okay so all we have to do is just you can just copy the for example the link from here so starting from here to the the first navigation item for our home and then paste it here here we go and of course we need to add also the navigation for adding a post so you l left side of our navigation okay so we have here the option to add post and of course guys we can make the navigation bar instead of light you can say inverse just gonna remove this so navigation bar inverse and then save this one and let's go back to our browser and then refresh so as you can see we have added all the options to add post we also have the Home Services blog about and of course the login and register pages and as you can see we need to fix this display right here because I think it's not indented so let's go back to our code editor and try to modify that so index for our content so we don't have here the div container so we need to add that in our up that way that PHP file okay so we have here the content yielding of content but we need to add the container class or container div with a class on container okay so this should solve the problem of the intention or the margin left for our project refresh so as you can see now the content is indented and if we try to go to register we can already we can already register here by using our names of our example Tom saw and an email let's just say Tom at gmail.com and then password okay and then register and as you can see we have redirected and so our home and prompted that we are now not in South second see we have enabled the user authentication and the laravel takes care of all the intricacies of using the user authentication within our project okay now so we can close this and let's try to edit our home that played that PHP so instead of just showing your now login let's just say we can add a post here so that will be post and then click yeah great and a host and then we're just going to add a class for our button or link BT and BT and primary and let's just say here your blog posts let me say this try to preview and then refresh so we have here the updated dashboard or home page then we can just create a post but if you try to look up in our database post suppose because we want to add the ID of the user that has posted the certain post so we need to make immigration for that at the attribute ID of our user so now let's add the migration for adding our user ID into our database table so in here we need to run the command PHP make PHP artisan then make and then Rayshawn and then in the name of our migration is add user ID to post okay so PHP artisan make in the migration add user ID to post and it says it created the migration so if we try to go back to our file and then under database and then migrations you now have the migration add user ID to post okay so if you try to run our migration right now that nothing will happen because we don't have any logic inside the app and the down function so in order for us to add the ID to the user table in our database we need to have some logic here and also around the migration so inside here we need to say table and then integer because the value of the user ID is of integer type so user and then underscore ID and semicolon and of course whenever we want to roll back the changes that we've made in our migrations we can just say table and then drop column and then specifying the column user ID so okay so after that one save this and then let's just say PHP artisan migrate so migrating user ID post and it says migrated so let's track our PHP my admin so inside here in our database we can see we have already the user underscore ID and for now let's just say it belongs to user 1 this particular post and also this one it belongs to the user one so it just it belongs to someone okay so now let's try to edit the controller for our post because whenever we need whenever we add a certain post we want the user ID or grab the user ID and add that along with the other information of the post so let's just go to http and then controllers and then post controllers okay so oh so inside our store function we just need to have the user ID or pass in the is ready so here post and then user ID equals and this time we're not gonna use the request because the user ID doesn't come from the user our I mean doesn't come from request it comes from the user both so it should say oath and then user and then we're just going to have or you grab the ID hey and then save so here refresh at post then certain title of a post new body of a pose and then submit so we have now the certain title of a post and if you try to check the third post we can see that the user ID has been populated by value of 1 which means that this particular post belongs to the user with the ID 1 and in this video we're going to add or we're going to discuss the modal relationships so in the previous video we work with the user ID so where we added the user ID to our database and the I think it's from the post so we've added our user underscore ID by using the migration and in this video we're going to add the relationships relationship to this user ID to the actual users ID here in this table so that will enable us to only limit the blogs or the posts that are belonging to a certain user so so for example we're going to try to view the post so we all one or what we want is to only display the posts that are created by the logged in user in order for us to do that let's go back to our code editor and try to add the model in our models okay so let's open up our post modal so all we have to do here is to add a certain function so it is it is very simple and relationships in laravel so as I've said all we have to do is add a function here so for example public function and then user and then return this and then belongs to the app and then backslash user and the same thing with our user modal let's add a function here so public function and then post and then this should return has many relationship because a user can have many posts right so the user can post like thousands or hundreds of posts and let's go ahead open up our dashboard controller or home controller because that's where we were trying to display the post so in here we just need to get the user ID by using the oath and then user function and then supplying the ID or I think it's like that one start up using it as parameter so user ID equals old and then user and then the ID attribute and then let's find the user fine and the user ID and then we need to pass in this user post into the home so that's good and then close so it means that this post or this post are belonging to this political particular user supposed and comma and user post okay so if we go to the home home view so resources and then views and then home so after lagging in or after the user lag in so we need to display a table here that display or that will display all the posts belonging to the lag enduser so that's tabled and then class is table table stripe and then we're just going to define the headers or header for our table so that's eh and then I tell each and we're just going to add two other pH here for our edit and delete button so th this is going to be just empty because this is going to be populated with ID or I'm in the edit and button edit and delete button so that's the age so in here so I think you just need to check if the actual post add if and then count the post so if it is greater than zero then we need to display the table right table and here we need to add the else and of course we need to say if the count of post is not greater than zero then we have to say you have no no post and then and our if statement and yes and of course in here we also need to populate the table rows so the title should be getting the title from the post so it's post and then the title of our post so there you go and then in here we just need to add the edit button first so a track and then the a track is post and then slash the post ID so that's basically post and then the IP and then we're just going to say slash edit and so just let's just add a class for this so a class with the end with the end default and then this should say edit so let's try that refresh our page so let's go back to the home page refresh and then we need to log in so I think we forgot the user password let's try logging in so Tom a gmail.com and then the password so that in we're just going to wait for a few seconds just to allow the lag in so we have an error user not found in our home controller because I think we need to add that which one so home controller 27 home controller there you go so we need to add here the class so that's app and then backslash user okay let's try that save and refresh app user constant okay so I think we need to to remove the single code for that work and then refresh defined variable posts in home that laid that PHP so let's try to solve that home blade at the HP so it says here that we don't have access to the post for the actual post okay so I think we need to either it first in here to actually have the individual post so that's for each and then the post variable as single post and then let's just add the end of our for each here for each pair no so save and then refresh so we have here the new and updated view of our post so we can see the title which is post one post to a certain title of a post so let's try to I a new user so that in the user to or make sure let's just say theme to solve and then theme at gmail.com and then the password let's just apply a certain password okay and then register so as you can see the home or the location home it says you have no post because we just want the post to show if the certain user lackin and then he has a or he has post so it should be displayed here but in case of our new user team so he has no posts or let's try to add a new post first post team saw the body body of the post of team's sock and then submit so this page displays all the post but if we try to go to the project application and then home it only displaced the first post or the single post are or a new user team saw and in the previous video we have worked with user authentication and we have laid the modal relationships and in this video we're going to discuss about how to actually implement the user access control so basically we're just going to add a feature that will just enable as to control which pages will our user be able to access so in here let's try to see we have here in our project or home page of our project and as you can see we can always access the post great so if you go to post and then great so we can already create a pose even if we have or we are not login right so currently we're not login with our account and we can create certain post but we don't want that the user should log in first before they can create a post so also you can see that if we go to blood and then click the post we can see the buttons and edit and delete even if you are not logged in as a user so again we don't want that we want the user to login first before they can modify you can delete and create a post so in order for us to do that let's go back to our code editor and try to modify our project if we go to the controller of our homepage so app and then HTTP controllers and then home controller we can see here we're adding the middle we're both in this construct method so we're just going to copy this for our other controllers so copy and then we're going to do the same thing for our post controller so that's post and then we're just going to paste the construct method or function coming from the home controller class again we're doing this just to control the access of the non log end users so if you try to go back to our browser so if you try to go to slash a post and then create so we won't be able to create a post right now and it booted us out from the create forum or create post forum so it says that we need to log in but there's a problem with this because if you try to go to our blog so it says that we need to login just to view the blogs right so we don't want that and we just want to limit the access when we try to create a post so let's try to accept the other pages for that so in here we need to pass in an array so this will be an array of pages that will be accepted so accept and then the array or the actual array of pages so it's going to be the index and of course the show page sort of save that and go to our browser so we should be able to view the blog so this are the post and we can you just we can't access the create for now right because we're not login oh should be post and then great so I've tried to login by using our account so login there you go we can access the create post and now let's just solve the problem with the individual post if you try to go to a single post you can see even if we did lag out from this page log and then post we can see the edit and delete buttons and we don't want that we just want to see the post without these buttons edit and delete so in order for us to do that let's go to the post so that's where is it resources and then views and post and then show so where's let's go to this part right here when displaying the edit and delete button so I think we're just going to add a certain if statement here so oath and then not guess and then let's just say and if here so basically we're just limiting the access to these buttons and it should be gone there for now so if you are not logged in and you go to a single post you can not edit and delete the post but if you try to log in by using our account so basically we should be able to have D yeah edit and delete button so you log out and go back to that particular post now edit and delete button but also we need to change something here because we need to only show those edit and delete buttons if you are the owner of that particular post so let's go back to the show that laid that PHP and in here we need to add another if so that will be if and then o'the user so basically we're good we're just going to check if the currently that end user is the owner of this particular post so that will be post and then the user ID so remember we are we added that particular attribute user ID by using the migration so and we're going to end the if statement here so there you go so you won't be able to access the edit and delete button even if you are logged in if you're not the owner of that particular post so so for example this one so we're not the owner or the currently logged in user is not the owner of this particular post so but this one is the one posted this particular post so he should be able to edit and delete this post but we need to solve another problem here so as you can see we can edit this particular post but if we try to have like five here this is a post from another user so right so we don't need or we don't want this actual user or this particular user to be editing other posts or other users post so what we need is to go to our post controller and in our edit in our ad function we need to have a some sort of check in here so below this one we need to check if the user or authenticated user meaning the login user ID is not equal to the post user ID so again we're just checking if this particular login user is the owner or not the owner of the post so if it's not the owner of the post so it should return read the wreck and then we need to pass in the post it should redirect to the post page and then with an error message so error and then it should say an authorized an authorized page okay so save that and let's go back to our browser and try to go to blog and then first post so the ID is 6 and then edit so if you try to have or put 5 in here so it should say or it should redirect into the post page but I think we don't have the error message here so let's try to add that in our layout so that will be from the layout and then half that lane that PHP we have to include the error messages or messages here in our page so it should be here so in here let's just add the messages layout so include and then i NC folder and then messages so it will refer to the I NC and then messages that laid that PHP so save this and let's go back to the browser and post indeed five so it should say an authorized page because we're not authorized to access this post or this particular post and we cannot edit this because this is not the post or this is not a post of this team so user so I think we need to do the same with the delete button also so let's go to the post controller and then we also have the destroy here so I think we're just going to copy the illogic that we have using our edit function and paste it here in our destroy function so after that so pose so if all user ID is not equal to the post user ID so it should redirect to the post page and with an error message of delete and as a sort of review in the last videos we have added the access control for the post or blog post available in our project and we also limit the edit and delete buttons for those owners of the actual post so in this video we're going to add a file upload so in here so for example if we add post so in here what we want is to add a file upload where we can actually upload an image so we will be able to do that and let's try to go back to our code editor and open up our create that laid that PHP and we'll try to add the file upload capability in our project so under resources and then use post and then create that blade that PHP so we have here deform that enables us to add a post so we're just going to add here the element for our file upload so in here we need to add the live with class form group and of course we need to add the actual form element which is we're going to use the lot of electives for that so form and then file and then we're just going to name it as a cover image okay so in order for us to submit or upload the file in this particular form we need to change also the ink type for this form in this particular part we need to add another element which is the ink type for our form and then it should say multipart multipart slash data and then save let's try to preview that refresh and then you can see here the file upload element where we can browse the actual file in our file system but if we try to select an image here and then submit it's not it's not going anywhere for now it's not saving to our database and it's not saving into our project because this is only the user interface and there's nothing logic or there's no logic behind this file element so in order for us to have the actual logic we need to go back to our editor code editor and open up the controller so HTTP controllers and then inside our post controller but before we forgot I think we need to add first the attribute or in the field into our database so let's open up our database and try to add the field first by using our migration so I'm just going to show you here so inter post structure and we don't have yet the field for our email or cover image so we need to add that by using our migration so open up the terminal first and here we need to run the command PHP PHP artisan and then make migration and then the name of this regulation is odd cover image to the post okay okay so the migration has been created so let's open up it here in our database and then migrations so odd cover image to post and we need to add logic here to actually add the cover image attribute so table and then string this will just add the cover image into our post table and of course in here we also have the down functions okay so we're just going to drop column in here so drop column and then we're just going to say cover image and after that we need to run the migration so PHP artisan and then migrate so migrated if you try to go back to our page me my admin and then refresh our structure so we can see here the cover image field or attribute so now let's go add the logic to actually upload the file into our file system and also save the file name into our database so in our file upload as I've said there are two that would happen so we need to add the string path or the the name of the file in here in our cover image attribute or field and then we also need to upload the actual file into our project so now let's go back to our post controller open up our post controller and and here we need to modify let's just go close the terminal for now let's just close this and then we need to modify the store function so we need to add the validation for our cover image first so the cover image should be image and then it is nullable meaning the user can have the option to upload or not upload a file for their cover image and also we're going to set the maximum size of the file in to 1999 because most common page settings they're allowing only two MB of file upload so we're going to set the maximum size of our image in to 1999 which is almost 2 MB or 2 megabytes and then in here we need to setup few things so we're going to handle the under file upload under the file upload and in here we have to say request and then pass file we're just going to check if the user has opted to upload the file so else we need to set the file name file name to store is no image that JPEG so this isn't going to be the default image for our user if he has opted to not upload cover image for for himself so this will be the default so if the user has opted to submit or upload the file so it should say here we need to get fire we need to get the file name with the extension in here so get file name with extension to get file in with extensions okay and then it should say file name with ext is close to the request and then the file which has the name of cover image and we're just going to get client original original image okay and then we're just going to get just the file name the file in order for us to do that so file name and then path info and then we're going to pass in parameters in here finally name with extension and we're just going to get the plat info underscore file name so in this video guys we're going to continue working with our file image upload so in the previous video we have laid out this logic here which is we're checking if the user has submitted a cover image or uploaded an image and then we're getting the filename and extension here and also we're getting the file name from the actual image that has been uploaded and now let's continue adding to this logic so we have here define name and then the next step is to get the extension okay so in order for us to do that we need to add a new variable extension and then by using the request object we're going to use the file method and then cover image and we're going to get the original client extension okay and next is we need to define a file name that we're going to store into our database so file name to store that will be path and then or first we need yeah file name finally file name to store equals the finding filing that we got from the actual file and then we're going to concatenate with an underscore and then time and then another concatenation with the extension so this will be extension we're doing this because we're just we're just trying to avoid if say for example the user uploads a file or an image with the same file name so in order for us to solve that is we get the file name and then we're adding underscore and then we're adding the time so it won't be a problem for us if the user will upload files or image that has the same me and the last part of that is we need to actually upload the image so that will be upload image we need to get the path and request and then file again cover image and need to store this store us we're going to store this on our public folder so public and then cover images we need to create this directory and then the new file name will be final name to store and now whatever the user upload the file so let's try to see the base resources and then we have here the storage and then app and then we have this public folder so it will create the cover underscore images directory here but the problem is this public directory is not accessible when you try to open up this directory in our browser so we need to make sure that all the changes that we are making here is reflected to the public folder here because this is a accessible to the web browser so in order for us to do that let's open up our terminal and we need to run a command to link this storage a public folder into our actual public folder so the command for that is PHP artisan and storage then link so there you go the public storage directory has been linked so whatever changes that we're making here in our store or storage directory will be reflected here in a public directory now the last thing that we want to do here is to actually save the file name to store so that will be post and then the cover image equals the file name to store okay save this and let's try it in our browser so refresh and then add post so you post with an image this will be the body of the post with an image then we're just going to select a certain image and open and then submit so we're getting an error here the cover image must be an image so I think the problem with this is here in our create laid that PHP so multipart slash it should be form data so there you go save and refresh so new post image test body and then browse for the abstract image and then submit so we're getting get client original image does not exist so we have a typo here so I think we're going to use instead of get client original image so we're going to use get client original name so that will be post controller and get client original name so right then post it image test browse the image and submit so we're getting path in info underscore file name so undefined constant so we need to change that instead of just file it should say file name let's go back and refresh just to make sure and then new post test and browse the image and then submit so again we're getting the get original kind except extension that's not exist so I think we also have a typo so we're just going to copy this get client original extension so let's go back to our code editor and replace this with get client original extension so save that let's go back refresh and save another one so I hope it it will be successful this time so browse and then submit so there you go post created so the new post with image has been created and the next step that we're going to take is to display the image in our show post and also in our new post with image where we can actually see the individual post since we have successfully uploaded an image we can see here in our storage and then the cover image directory has been created and we can see here the link of our storage directory with also the cover under underscore images with the actual file or image that we have uploaded so let's try to view that in our PHP myadmin so in here so post and we have new post and then the body and of course the link or the file name of the uploaded file and actually we're just going to get rid of this records with no cover image so we're just going to delete that and let us now try to display the images coming from the database into our show and index plate that PHP so that will be resources and then views and then index dot PHP so we have here displayed the post so before that it's just going to add a new live wrote so this is just a bootstrap tag and we're going to add another DEATH this will be column MD for and also another one for another column so it should be eight and we can just copy and paste this here and also you can look and remove this I think and just remove that and here we need to display the image so that will be image and then the source is coming from the storage directory and cover images and the file name so this will be coming from our post and cover image and I'm just going to add style here for our image which is the wave should be 100% 100% so save this so refresh and then lug so we're not getting any post here and if we tried to go to our post we have one record so let's try to check our code here so index that way dot PHP and we have here if greater than one and we have one record right now so it should be greater than zero so refresh so there you go we have the image and then we have the title here and also the written on information and in this video we're going to continue working on with our image feature so in the previous video we have added the display image and actually added the feature of uploading an image by creating a post so when adding a post we can have we now have the option to browse on image and then include that image and save that into our database so now let's continue working on with this so if we try to view the actual post so we want to also add the image here and the individual post so let's go back to our code editor and try to add that so this is the index template that PHP and then we're just going to open up the shoulder yeah show that laid dot PHP so in here we have displayed we're displaying the post title and the post body of our post so again we're just going to add the image on top of our post so in order for us to do that let's just add a div here so this will be I think before the body tag so Dave and then the shop this will be row and another column or therefore a column so called MD shelve and then we're just going to add the image here or you can just copy the dad coming from here so then the width is hundred percent and then we're getting the actual or the physical image coming from our cover underscore images directory so let's try to preview this in refresh so now we have the image so the title and then the image of our post and of course the body of your post and then the method to add meta information which is the written on with a date okay so another thing for this feature is that we need to add this in our create or edit because for now we don't have the element to edit or update the image that has been uploaded so let's go back to our code editor and add the final element in here so the same with the crate that laid that base me we're just going to copy this form group and then Eddie near and it that way that PHP and just before the submission of the page we can paste the cover image file input element and then of course we need to change the something here for our Inc type so it should be of course multipart for data so we're just going to copy this one paste it here so ink type equals this multipart slash form data so we're just going to save this and refresh our page to show that we have already added the input file element so refresh so in here we have now the browse file input element we need to add some logic into our edit function from our post controller so let's go ahead and try to open up our post controller that PHP and inside here in our edit function so we're going to add yeah the logic of our edit function or actually we're not editing the function edit we're actually going to modify the update function so all we have to do here is I think we just have to copy all the logic that we have in the store function so validate and then update okay so we're just going to paste here the validation and of course all the logic that will handle our file upload so this is going to be a bit different from the store logic because we're not going to have this line here which means that we don't want to update when the user has not uploaded the image so remove that and then we're just going to have another check here if the user has submitted the file or the files of the request if the request has fine so another cover image here that's the name of our file input element and then we're just going to get or set the cover image by using the file name to store so okay and save this so refresh view first opposed so we have here the post and then we have the actual post and then we can edit that one and if we try to submit without selecting any image then we can just update the post but not updating the image right here but let's try to update the image so let's browse another image and then open and then submit post has been updated and as you can see the image share has been updated also because we have updated or uploaded an image coming from our edit page so the next thing is or delete okay so if we try to go to a post and we have this delete so whenever we have to delete this post we want to actually delete also this file coming from our project so if we try to open up or our project in our browser or aim in our file directory we can see that we have here the public and then storage and then the cover images so this are the uploaded files in our project right so whenever a user wants to delete the post we we would also want our project to actually do this files right here so in order for us to do that let's go back to our post controller and edit the delete function or destroy function right here so we're going to bring in first the storage library so we're going to use illuminate slash support and then back slash visage back slash storage okay and then in our destroy function below so we're going to check if the user has uploaded the file for this particular post so that will be if this post cover image it's not equal to it's not equal to host and then user I mean not equal to no image that JPEG or jpg so this will be our default image when the user has not uploaded a file for their particular post so we don't want this to be deleted if the user hasn't uploaded a file so this will be storage and then delete so we're going to public and then cover images and of course the actual file name of our cover image so save this and then try to delete this post post has been removed or removed and as you can see the image from the cover images directory has been deleted one last concern also is if we try to go to our blog and add post salsa for example we're going to add first post here first posed by the first post and then we're going to browse an image ok submit and also another one so second post body of second pose and then we're not going to browse or upload an image here so submit so as you can see we have here a broken image icon which means that the user has not uploaded image for this particular post so we don't we don't want that and we want to have a default image here so or default no image so let's go and search for a new image picture so that you will be able to have a default no image here so after finding a default no image so make sure to copy and paste that in your cover underscore images directory and this is what I have chosen from from a new no image default and the file name is that J eg so we should be able to display this in our page so make sure to change this also to the right file extension and then save and refresh so there you go we have now the no available image as our default image of our posts so I think that all there is to it for this tutorial and this will end our tutorial for beginners tutorial and I hope you have learned something from this series and in this videos so thank you for watching our videos and if you're new here in our youtube channel and you want content about programming programming knowledge and more so I am inviting you to subscribe and press the notification bell so you'll get updated whenever we have a new upload thanks
