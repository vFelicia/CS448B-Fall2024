With timestamps:

00:00 - hey everyone in the last video we
00:03 - discussed about some high game modules
00:05 - in brief
00:06 - now it's time we put that to use we
00:08 - would try displaying some text on pi
00:10 - game window
00:11 - let's get started i have initialized pi
00:14 - game as usual set up the screen and then
00:17 - is the new part
00:19 - i have used font module by pie game
00:22 - we have used cis font then
00:24 - which sticks in attributes like the font
00:26 - style size of font mentioning about the
00:29 - italics and bowls it is an option here
00:32 - if you are mentioning about italics and
00:34 - bolds
00:35 - but
00:36 - you have to mention the font style and
00:38 - the size of font otherwise you will get
00:40 - an error from cispond
00:42 - if you do not mention about the talix
00:44 - and bolts they are false by default
00:46 - we have a lot of system fonts
00:49 - let's take a look at them
00:50 - if you run this piece of code by
00:52 - game.fot.getfons
00:55 - you will
00:56 - get a list of all the fonts that are
00:58 - available in the system
01:00 - here it is you can use any of these
01:03 - fonts to design your text
01:07 - firstly i'll just walk you through the
01:09 - basic code after that we'll add some
01:11 - more functionalities
01:14 - so after creating a font object i
01:16 - declared a text variable which would
01:19 - create a new surface with given text
01:22 - rendered on it i hope you get this
01:25 - it would create a new surface with given
01:27 - text rendered on it then we call the
01:29 - direct class object to see the text on
01:32 - pikmin window
01:34 - last time we discussed
01:35 - direct class in detail i hope you get
01:38 - understand what is happening over here
01:40 - then is the infinite loop
01:43 - you will fill the screen with some
01:45 - random color use split from surface
01:48 - class to get the text and text checked
01:50 - on the window that is to draw text on
01:53 - extract okay
01:55 - after that we have event in pygame dot
01:58 - events which updates and runs given
02:00 - command until we quit okay
02:03 - so let's run this and see what we get
02:06 - so on running this code
02:08 - this is what we get we have the text at
02:11 - the extreme left of the screen
02:13 - but what if i need it in the center of
02:15 - the screen
02:16 - so
02:18 - let me change a little bit of
02:20 - it and
02:23 - see if i can
02:25 - bring the
02:27 - text in the center
02:29 - for that we have text rect dot center so
02:33 - i brought the rectangle surface to the
02:35 - center by using this method
02:38 - and i have specified the coordinates as
02:40 - the center of the screen i decide the
02:43 - size of the screen is 500 by 500 so i've
02:45 - divided it by 2 and we get to the center
02:49 - let's run this now and see what we get
02:53 - voila we have the text at the center
02:58 - now let's see what else we can do
03:00 - we can set a caption
03:02 - to the i game window
03:05 - we use pygame.display.setcaption
03:09 - we can also underline the text that we
03:11 - have
03:12 - by font.set underscore underline as true
03:18 - and
03:19 - let's run it and see what we get
03:24 - we have an underlying text
03:26 - and we have
03:28 - the caption pytheme text cool
03:34 - this was one program
03:36 - now let's try and move this text along
03:38 - the different axis on the window for
03:40 - that i have written a little code first
03:43 - i have initialized pi game then the
03:44 - screen with size 500 comma 500 then i
03:47 - have declared the font object with style
03:49 - times no new roman and size 30
03:53 - variable letter is used to render the so
03:55 - created font object
03:57 - then i have declared a variable i that
03:59 - decides the speed of the text how fast
04:01 - the text changes its coordinates please
04:04 - note that right now i am moving the word
04:06 - long x-axis only
04:09 - so entering the game loop now
04:11 - there is a condition
04:13 - if i is greater than 500 that is the
04:15 - length of the screen we see that the
04:18 - length of the screen is 500 when i is
04:21 - greater than 500
04:22 - i is equal to 0 we make i equal to 0
04:26 - this means once the text has traversed
04:29 - complete length of the screen we want to
04:31 - see it appearing from left again and the
04:33 - time gap gap between this action is of
04:36 - five milliseconds i have done this using
04:38 - the time module of my game
04:41 - so pygame.time.weight 500
04:44 - gives a gap of five milliseconds between
04:47 - these two
04:48 - actions
04:50 - then comes the win.fill
04:52 - so i have colored the background
04:54 - white with fill
04:56 - now comes the tricky part rather not
04:59 - tricky part but you would need to
05:01 - visualize it a little
05:03 - so here in blit
05:06 - we have used the font object and wrecked
05:08 - class object always
05:10 - but this time i have taken no rect class
05:13 - object as you can see
05:15 - but i have given coordinates
05:17 - i comma 0
05:19 - which shows the origin because i is
05:22 - equal to 0 for right now
05:25 - so
05:26 - that gives me the origin
05:28 - the extreme left upper corner of the
05:31 - screen
05:32 - once this runs i is increased by 80. so
05:35 - you must infer
05:37 - that larger i gives more speed as this
05:40 - is what is giving the difference between
05:41 - two consecutive spots of the text okay
05:45 - please try to visualize this
05:48 - and again
05:51 - there is a weight of five milliseconds
05:53 - after we run this event loop
05:56 - uh between the appearance of the text at
05:59 - two consecutive positions there is a
06:01 - weight of five milliseconds
06:04 - i have given a weight otherwise we won't
06:07 - be able to visualize the text moving it
06:09 - would move in a flash so let's see this
06:11 - running uh let's see what we get and how
06:14 - this text moves across the screen along
06:17 - x axis
06:18 - so now let's run this and see
06:21 - how the text moves along the x-axis
06:24 - yes so this is how it moves along the
06:27 - x-axis we can also move it along the
06:29 - y-axis for that i need to interchange
06:32 - these two coordinates
06:34 - i'd make it 0 comma i now so it would
06:37 - move along
06:39 - the left side of the screen so let's run
06:42 - it and see if it moves along the left
06:46 - side so yeah it does run okay cool
06:51 - you can even think about how we can make
06:54 - this text move along the bottom of the
06:56 - screen or along the right side of the
06:58 - screen for that you might need to change
07:01 - the 0 to something else
07:03 - maybe the size of the screen the y or
07:06 - the x axis
07:07 - so think about it and this is pretty
07:10 - much it for this video thank you

Cleaned transcript:

hey everyone in the last video we discussed about some high game modules in brief now it's time we put that to use we would try displaying some text on pi game window let's get started i have initialized pi game as usual set up the screen and then is the new part i have used font module by pie game we have used cis font then which sticks in attributes like the font style size of font mentioning about the italics and bowls it is an option here if you are mentioning about italics and bolds but you have to mention the font style and the size of font otherwise you will get an error from cispond if you do not mention about the talix and bolts they are false by default we have a lot of system fonts let's take a look at them if you run this piece of code by game.fot.getfons you will get a list of all the fonts that are available in the system here it is you can use any of these fonts to design your text firstly i'll just walk you through the basic code after that we'll add some more functionalities so after creating a font object i declared a text variable which would create a new surface with given text rendered on it i hope you get this it would create a new surface with given text rendered on it then we call the direct class object to see the text on pikmin window last time we discussed direct class in detail i hope you get understand what is happening over here then is the infinite loop you will fill the screen with some random color use split from surface class to get the text and text checked on the window that is to draw text on extract okay after that we have event in pygame dot events which updates and runs given command until we quit okay so let's run this and see what we get so on running this code this is what we get we have the text at the extreme left of the screen but what if i need it in the center of the screen so let me change a little bit of it and see if i can bring the text in the center for that we have text rect dot center so i brought the rectangle surface to the center by using this method and i have specified the coordinates as the center of the screen i decide the size of the screen is 500 by 500 so i've divided it by 2 and we get to the center let's run this now and see what we get voila we have the text at the center now let's see what else we can do we can set a caption to the i game window we use pygame.display.setcaption we can also underline the text that we have by font.set underscore underline as true and let's run it and see what we get we have an underlying text and we have the caption pytheme text cool this was one program now let's try and move this text along the different axis on the window for that i have written a little code first i have initialized pi game then the screen with size 500 comma 500 then i have declared the font object with style times no new roman and size 30 variable letter is used to render the so created font object then i have declared a variable i that decides the speed of the text how fast the text changes its coordinates please note that right now i am moving the word long xaxis only so entering the game loop now there is a condition if i is greater than 500 that is the length of the screen we see that the length of the screen is 500 when i is greater than 500 i is equal to 0 we make i equal to 0 this means once the text has traversed complete length of the screen we want to see it appearing from left again and the time gap gap between this action is of five milliseconds i have done this using the time module of my game so pygame.time.weight 500 gives a gap of five milliseconds between these two actions then comes the win.fill so i have colored the background white with fill now comes the tricky part rather not tricky part but you would need to visualize it a little so here in blit we have used the font object and wrecked class object always but this time i have taken no rect class object as you can see but i have given coordinates i comma 0 which shows the origin because i is equal to 0 for right now so that gives me the origin the extreme left upper corner of the screen once this runs i is increased by 80. so you must infer that larger i gives more speed as this is what is giving the difference between two consecutive spots of the text okay please try to visualize this and again there is a weight of five milliseconds after we run this event loop uh between the appearance of the text at two consecutive positions there is a weight of five milliseconds i have given a weight otherwise we won't be able to visualize the text moving it would move in a flash so let's see this running uh let's see what we get and how this text moves across the screen along x axis so now let's run this and see how the text moves along the xaxis yes so this is how it moves along the xaxis we can also move it along the yaxis for that i need to interchange these two coordinates i'd make it 0 comma i now so it would move along the left side of the screen so let's run it and see if it moves along the left side so yeah it does run okay cool you can even think about how we can make this text move along the bottom of the screen or along the right side of the screen for that you might need to change the 0 to something else maybe the size of the screen the y or the x axis so think about it and this is pretty much it for this video thank you
