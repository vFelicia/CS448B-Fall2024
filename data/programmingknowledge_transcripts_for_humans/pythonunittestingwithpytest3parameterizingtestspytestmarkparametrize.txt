With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - Python unit testing tutorial for
00:04 - beginners using PI tests in this video
00:06 - I'm going to show you how to use a
00:08 - special decorator which is parameterize
00:12 - so here I have on the left hand side a
00:16 - simple function which is add and on the
00:19 - right hand side I have written that test
00:21 - for this function and I have written
00:24 - three test function for the add function
00:27 - the first test function here tests the
00:31 - add function using the integer values
00:34 - the second test function I have written
00:37 - for the string values and the third test
00:40 - function I have written for the float
00:43 - values which I provided to the add
00:46 - function now one thing which you will
00:49 - notice here is I'm using the same add
00:52 - function three times here in all these
00:56 - three tests and there has to be a better
00:59 - way in which we just need to call this
01:02 - add function only once now you can say
01:05 - that why we need three functions I can
01:09 - just write three assert into the same
01:13 - function and I can just remove these two
01:16 - other test functions this is okay but
01:18 - still I have to call this odd function
01:21 - three times to test it with numbers
01:24 - strings and the float values and in
01:28 - those type of situations you can use a
01:30 - special decorator which is parameterize
01:33 - in which you need to call a same
01:36 - function to test it with the different
01:40 - type of values so here I have imported
01:43 - this PI a test module and then above my
01:47 - test function I will just call PI tests
01:51 - first of all then dot mark dot
01:55 - parameterize so we are testing this add
01:58 - function which takes two arguments so
02:00 - here in the parameter rise we just need
02:03 - to give the name of these two arguments
02:07 - you can just say that these two
02:09 - arguments will be X comma Y because I
02:12 - have given
02:13 - X comma Y here so I can just write into
02:16 - the single quotes X and then single
02:19 - quotes Y which will be the name of these
02:23 - two arguments so this name depends upon
02:26 - you you can say this is num1 and the y
02:31 - is let's say num2 or you can say this is
02:36 - r1 or r2 so these arguments names are
02:40 - user defined names you can give any
02:43 - names which you want to pass to your
02:46 - function so the number one variable name
02:50 - will be passed as the first argument and
02:53 - the number two variable name will be
02:55 - passed as the second argument now once
02:57 - again when you look closely to this
03:00 - assert you will see the variable values
03:03 - here our first argument second argument
03:06 - and the result so the same three values
03:10 - you need to give here so number one
03:11 - number two and the results so I'm going
03:15 - to just say that the third argument is
03:17 - result here and then as the fourth
03:20 - argument you give the iterate able list
03:23 - so the fourth argument will be a tray
03:27 - table list where you can provide the
03:29 - values of argument one argument two and
03:33 - the result so inside this list we are
03:37 - going to give this argument 1 2 and the
03:41 - result values using a tuple so here in
03:45 - the first test I have given 7 and 3 and
03:47 - the result is 10 we can give the same
03:51 - values here so 7 comma 3 and the result
03:55 - we are expecting is 10 so the 7 will be
03:59 - passed to the number one argument 3 will
04:02 - be passed to the number 2 argument and
04:04 - then will be passed to the result in a
04:08 - same way we can define multiple tuples
04:10 - here so the second test is for the
04:14 - string values so the first argument is
04:17 - hollow second argument is world and the
04:21 - expected value is this one which is
04:24 - result and the third
04:27 - test case or test scenario is 10.5 for
04:32 - the floating values , 25.5 and the
04:36 - expected value is 36 now once you have
04:40 - defined this parameterize decorator you
04:43 - don't need to call this add function
04:45 - multiple times what you need is you just
04:49 - need to define the same variable names
04:52 - which you have defined here in the
04:55 - parameterize so the first argument will
04:58 - be num1 the second argument will be num2
05:01 - and the third argument will be the
05:05 - result and then you just need to pass
05:09 - these values to the add function so the
05:12 - first number is the first argument the
05:14 - num2 is the second argument and the
05:17 - result is the third argument now what's
05:21 - going to happen when you run the test is
05:23 - this list which you have given here will
05:27 - be iterated over by your parameterize
05:30 - function and these values one by one
05:34 - will be assigned to number one number
05:36 - two and the result and the same value
05:39 - will be passed here as the first
05:42 - argument and the second argument and as
05:45 - the result for this assert statement and
05:49 - one last thing which I'm doing wrong
05:52 - here is I think you need to give these
05:56 - arguments name as the string separated
05:59 - by commas so you just need to give the
06:02 - string separated by these commas so the
06:06 - first argument of this parameterize is
06:08 - string in which you define the arguments
06:11 - which are taken by your function to test
06:14 - so num1 and num2 and the result and
06:17 - these arguments are separated by commas
06:22 - and all these values are inside the
06:25 - string so this thing you need to keep in
06:27 - mind that this is a one argument string
06:31 - and inside the string you define those
06:33 - values separated by comma so let's run
06:36 - the code and let's see what happens so
06:38 - you can see now that
06:41 - three tests were run and this first test
06:44 - was with the value seven and three and
06:48 - the expected result was ten and it
06:51 - passed second you will also see which
06:54 - arguments were passed so in the second
06:57 - test hello and world were passed and the
07:00 - expected result was hello world and in
07:03 - the third test case ten point five and
07:05 - twenty five point five was passed as the
07:09 - arguments and the expected result was 36
07:12 - so by using this parameter rise
07:15 - decorator you can just use or call your
07:18 - function which you want to test once and
07:21 - then pass different type of parameters
07:24 - into it using this parameterize
07:27 - decorator so that's it for this video I
07:30 - will see you in the next video

Cleaned transcript:

hey guys welcome to the next video on Python unit testing tutorial for beginners using PI tests in this video I'm going to show you how to use a special decorator which is parameterize so here I have on the left hand side a simple function which is add and on the right hand side I have written that test for this function and I have written three test function for the add function the first test function here tests the add function using the integer values the second test function I have written for the string values and the third test function I have written for the float values which I provided to the add function now one thing which you will notice here is I'm using the same add function three times here in all these three tests and there has to be a better way in which we just need to call this add function only once now you can say that why we need three functions I can just write three assert into the same function and I can just remove these two other test functions this is okay but still I have to call this odd function three times to test it with numbers strings and the float values and in those type of situations you can use a special decorator which is parameterize in which you need to call a same function to test it with the different type of values so here I have imported this PI a test module and then above my test function I will just call PI tests first of all then dot mark dot parameterize so we are testing this add function which takes two arguments so here in the parameter rise we just need to give the name of these two arguments you can just say that these two arguments will be X comma Y because I have given X comma Y here so I can just write into the single quotes X and then single quotes Y which will be the name of these two arguments so this name depends upon you you can say this is num1 and the y is let's say num2 or you can say this is r1 or r2 so these arguments names are user defined names you can give any names which you want to pass to your function so the number one variable name will be passed as the first argument and the number two variable name will be passed as the second argument now once again when you look closely to this assert you will see the variable values here our first argument second argument and the result so the same three values you need to give here so number one number two and the results so I'm going to just say that the third argument is result here and then as the fourth argument you give the iterate able list so the fourth argument will be a tray table list where you can provide the values of argument one argument two and the result so inside this list we are going to give this argument 1 2 and the result values using a tuple so here in the first test I have given 7 and 3 and the result is 10 we can give the same values here so 7 comma 3 and the result we are expecting is 10 so the 7 will be passed to the number one argument 3 will be passed to the number 2 argument and then will be passed to the result in a same way we can define multiple tuples here so the second test is for the string values so the first argument is hollow second argument is world and the expected value is this one which is result and the third test case or test scenario is 10.5 for the floating values , 25.5 and the expected value is 36 now once you have defined this parameterize decorator you don't need to call this add function multiple times what you need is you just need to define the same variable names which you have defined here in the parameterize so the first argument will be num1 the second argument will be num2 and the third argument will be the result and then you just need to pass these values to the add function so the first number is the first argument the num2 is the second argument and the result is the third argument now what's going to happen when you run the test is this list which you have given here will be iterated over by your parameterize function and these values one by one will be assigned to number one number two and the result and the same value will be passed here as the first argument and the second argument and as the result for this assert statement and one last thing which I'm doing wrong here is I think you need to give these arguments name as the string separated by commas so you just need to give the string separated by these commas so the first argument of this parameterize is string in which you define the arguments which are taken by your function to test so num1 and num2 and the result and these arguments are separated by commas and all these values are inside the string so this thing you need to keep in mind that this is a one argument string and inside the string you define those values separated by comma so let's run the code and let's see what happens so you can see now that three tests were run and this first test was with the value seven and three and the expected result was ten and it passed second you will also see which arguments were passed so in the second test hello and world were passed and the expected result was hello world and in the third test case ten point five and twenty five point five was passed as the arguments and the expected result was 36 so by using this parameter rise decorator you can just use or call your function which you want to test once and then pass different type of parameters into it using this parameterize decorator so that's it for this video I will see you in the next video
