With timestamps:

00:00 - hey guys in this video I'm going to show
00:02 - you what is Jason why do we use Jason
00:06 - and how we can create adjacent data so
00:10 - let's get started so first of all what
00:12 - is Jason now the name Jason stands for
00:17 - JavaScript object notation but despite
00:21 - the name which contains JavaScript jason
00:24 - is mostly language independent and it is
00:29 - specified in the terms of object as name
00:33 - value pairs now that's okay but what
00:38 - really is Jason you may ask right so a
00:42 - jason is a way of structuring data and
00:45 - it's essentially a data format so jason
00:50 - is a data format same as some kind of
00:54 - text formats for example XML or any
00:57 - other text format jason is also a data
01:01 - text format right now why just jason is
01:07 - really popular and how it's useful now
01:11 - first of all let me make it clear that
01:14 - jason can be used in most of the
01:18 - programming language if you want to use
01:20 - Jason in C++ Java JavaScript Python or
01:25 - any other language most probably the
01:28 - support for Jason will be present or any
01:31 - such library will be there in order to
01:36 - parse JSON or in order to create Jason's
01:39 - right so Jason is really language
01:42 - independent and most of the languages
01:45 - you will find libraries or parcels to
01:49 - support it right so as we have said that
01:52 - the jason is a data format so how we can
01:55 - use jason or how jason is used so let me
02:00 - give you an example so for example you
02:03 - have a browser and you want to get some
02:08 - information about the temperature in
02:11 - some particular city right
02:13 - so the browser has to make this request
02:18 - to a server which makes this data
02:22 - available to the browser or a client
02:25 - once again now there are some ways of
02:29 - sending this data from the client to the
02:32 - server right so you can say the most
02:35 - simplest way is to send a string format
02:39 - right and the server is going to get
02:42 - this string and then it's going to give
02:45 - you the result but it's not so easy
02:47 - right until and unless you have some
02:52 - data predefined format it's hard for the
02:56 - server to understand in which format
02:59 - this data is coming and that's where the
03:02 - Jason comes in
03:03 - so this Jason is a data format so your
03:09 - server knows that whatever client is
03:12 - sending to the server is in the JSON
03:15 - format so on the server side
03:17 - for example whatever language you are
03:18 - using in that language you can use a
03:22 - JSON parser in order to get this data or
03:26 - interpret this data and then according
03:30 - to the request you can just prepare this
03:34 - data in the form of JSON once again and
03:37 - send it to the client and then whatever
03:40 - a client sign language you are using
03:43 - most probably you will be using
03:44 - javascript and this javascript will be
03:48 - able to understand that that this data
03:51 - is in the JSON format so it's going to
03:54 - parse this data and then it's going to
03:57 - show you this data in the form of HTML
04:01 - using that JavaScript right so this is
04:04 - very simple kind of jason right so a
04:09 - jason has these curly brackets and then
04:13 - the values are defined like this so
04:18 - there is a key and the value for it so
04:21 - key here is a city and the value of a
04:25 - city is Paris for
04:27 - example right unit is a key and C
04:31 - capital C which stands for centigrade is
04:33 - the value of unit right in the same way
04:38 - once your server has some data it's
04:42 - going to send it in this format so here
04:45 - low means low temperature and so low is
04:49 - a key and 16 here is the value right
04:53 - high is the key and 23 is the value
04:58 - right so this is the format of very
05:01 - simple JSON which can be sent from the
05:04 - client to the server and then server to
05:07 - the client so jason is essentially a
05:10 - data format now the question arises that
05:13 - which kind of data you can send using
05:17 - JSON right so let's see what are the
05:20 - values you can use to send data so in
05:26 - Jason you can send this data in the form
05:30 - of these data type which are there in
05:33 - this picture so the key which I already
05:38 - explained you for example
05:40 - city was the key and it's always in the
05:44 - string format right so key will be in
05:47 - string format and the jason value you
05:50 - can see the jason value can be an object
05:54 - it can be an array it can be a number
05:57 - number means it can be an integer or a
06:00 - decimal value and string is a string and
06:03 - other three formats are true/false for
06:07 - boolean and if you had don't have any
06:09 - data you can send null okay so these are
06:13 - the data types which can be used to send
06:18 - the values in Jason so it can be object
06:22 - array number or a string or a boolean
06:25 - value or if you don't have any data then
06:29 - you can send null also okay now let me
06:33 - show you a simple example of a jason now
06:38 - for example you want to send
06:41 - employee data or the data of some person
06:45 - from a client to a server right so for
06:49 - example the first name is John here so
06:53 - its value is a string value right last
06:57 - name is myth it's also a string value
07:00 - this value you can see now age is 25
07:04 - this is a number right so there is no
07:07 - double quotation around it okay so
07:10 - number you can write directly like this
07:13 - now address can be a little bit complex
07:17 - because the address may contain a street
07:21 - and the city name and the state name for
07:24 - example and the zip code right so this
07:28 - data you can send in the form of object
07:32 - and what is an object so an object is
07:34 - also a combination of key value pair and
07:37 - you can see using this curly bracket you
07:42 - can define key value pairs and because
07:45 - it's in these curly bracket it becomes
07:48 - an object of address right so an object
07:52 - is nothing but the key value pairs
07:54 - itself the combination of these key
07:57 - value pairs and they are you know
08:00 - created using these curly brackets so
08:03 - this whole is a object the combination
08:07 - of Street city state and zip is an
08:11 - object right now let's come to the phone
08:15 - numbers right so a person can have
08:18 - multiple phone numbers okay and you can
08:22 - define these phone number in the form of
08:25 - array so you can see a square bracket
08:28 - here and inside the square bracket you
08:31 - have defined two object first object
08:35 - have a type home and number whatever
08:39 - number is right second object has type
08:43 - fax and the number whatever number is
08:46 - right so you are defining multiple
08:50 - object for the phone number and you can
08:54 - do this using this kind of arrived so
08:57 - you are essentially creating an array of
09:00 - object in this case now let's see how we
09:04 - can create a Jason so I have this text
09:07 - editor this is Visual Studio code but
09:10 - you can use any text editor to create a
09:14 - Jason file it's not you know essential
09:18 - that you need to use this kind of editor
09:21 - you can use any other editor to create a
09:24 - Jason file okay so to create a Jason
09:27 - file we just need to for example give a
09:31 - name to your Jason file for example
09:33 - sample and then you just add the
09:38 - extension Jason after dots here so
09:41 - sample dot jason is going to create a
09:44 - Jason file now a Jason will start with
09:48 - these curly brackets right now let's you
09:52 - know take an example of same employee
09:54 - data and that employee data contains for
09:58 - example name so we will define a key
10:01 - name here so this is called key name is
10:05 - the key and the value of this key is for
10:10 - example the name itself so for example
10:13 - mark is the name okay and this key is
10:19 - always a string as I already told you
10:22 - and you use double quotation to you know
10:26 - use strings in Jason now the key and the
10:30 - value are separated by this schoolin
10:33 - okay so this is a key this is a value
10:36 - because it's a string so we have
10:38 - included or we have added double
10:41 - quotation around it and the key and
10:44 - value are separated by this colon right
10:47 - now if you want to add more data you use
10:51 - this comma okay and this comma means you
10:54 - want to add some more data so for
10:56 - example I want to add surname here and
11:00 - then I want to just give this colon two
11:04 - separate key and value and then the
11:08 - some surname okay so for example some
11:11 - surname okay and then I want to add some
11:14 - more data and I add for example age here
11:19 - and this time because ages are number I
11:21 - can use directly a number notation here
11:24 - now this number can be a decimal value
11:29 - also so for example a person is 26 years
11:33 - and six months you can just give 26.5
11:38 - here and it's perfectly fine it can take
11:41 - an integer or a decimal value here okay
11:44 - now for address so let's define an
11:47 - address here so address because address
11:50 - can contain multiple key value pairs so
11:54 - we can define this address inside an
11:57 - object an object is a combination of key
12:01 - value pair inside these curly brackets
12:04 - so once you give these curly braket this
12:08 - value becomes an object and here you can
12:11 - once again give these key value pairs so
12:14 - for example address contains street here
12:18 - so you can just give the street and then
12:21 - the value of street some some value
12:24 - right and then next comes for example
12:27 - the city name so you can just give the
12:31 - city name this is also a most probably
12:34 - string in most of the cases and then you
12:37 - can give the zip code right so zip and
12:40 - in some cases it can be a number in some
12:43 - other countries it can be some string
12:45 - format right so let's say it's a number
12:48 - so you can just give this number like
12:51 - this now keep in mind that I haven't
12:53 - added comma and the last element right
12:58 - so I have added comma here I have added
13:00 - comma here but because zip is my last
13:05 - element of this address object so the
13:09 - last element doesn't contain any comma
13:12 - so when I add comma it's an error right
13:16 - so I don't need to add comma to the last
13:19 - element of an object right so you can
13:23 - say this is a big object this is one
13:26 - object and then address contains the sub
13:31 - object here okay
13:32 - now let's add the phone numbers here so
13:36 - for adding the phone number you need to
13:39 - add comma here after this curly bracket
13:41 - right because you are adding one more
13:44 - element here so let's add phone for
13:48 - example here and then these phone number
13:51 - for example a person can have multiple
13:54 - phone numbers right so in order to give
13:57 - the phone number you can directly define
14:01 - an array array means multiple values for
14:05 - the same key okay so for example a
14:09 - person contain the first number and then
14:12 - a person contain the second phone number
14:15 - and a person can contain the third phone
14:18 - number and it can contain multiple you
14:22 - know element in the array so you can
14:24 - have multiple elements in this array and
14:28 - these array values are also separated by
14:30 - these comma and the last value does not
14:33 - have the comma
14:34 - now one special quality about this array
14:37 - is it doesn't have any key here right
14:40 - the key is the phone and because the
14:45 - phone have multiple values we have used
14:48 - the array using this square bracket and
14:50 - the value are multiple so they are
14:54 - separated by this comma so your value
14:58 - does not have any key here the key is
15:02 - phone here and there are three values in
15:05 - the form of array and how you recognize
15:08 - array you can recognize array because
15:11 - you have used square brackets here so
15:15 - these are the most basic data types here
15:18 - okay you cannot use also for example if
15:22 - the person is married or not so single
15:25 - here and the value I can provide for
15:28 - example
15:29 - falls here if he is a not a single
15:33 - and if the person is single we can just
15:35 - define true here okay
15:37 - so you can define value as a boolean
15:40 - value and then a person can have some
15:43 - skills right so I can just write skill
15:46 - and for example for now he don't want to
15:48 - add any skill so he can add this null
15:51 - value here so if you don't want to give
15:55 - any value with the key you can define
15:59 - null and it will be considered as no
16:02 - value or null okay so this is no value
16:06 - so this is a simple jason here as values
16:11 - you can use strings as we have used here
16:15 - name and surname and then you can use
16:17 - numbers it can be decimal numbers or
16:20 - integers you can use object so you have
16:24 - this object under these curly brackets
16:27 - you can use array in these square
16:30 - brackets multiple values for the same
16:32 - key and then you can use true or false
16:35 - as a boolean value for some key or you
16:39 - can use null if you don't have any data
16:42 - for that key so this is how a simple
16:45 - jason is defined so I hope you've
16:47 - enjoyed this video please rate comment
16:49 - subscribe and bye for now

Cleaned transcript:

hey guys in this video I'm going to show you what is Jason why do we use Jason and how we can create adjacent data so let's get started so first of all what is Jason now the name Jason stands for JavaScript object notation but despite the name which contains JavaScript jason is mostly language independent and it is specified in the terms of object as name value pairs now that's okay but what really is Jason you may ask right so a jason is a way of structuring data and it's essentially a data format so jason is a data format same as some kind of text formats for example XML or any other text format jason is also a data text format right now why just jason is really popular and how it's useful now first of all let me make it clear that jason can be used in most of the programming language if you want to use Jason in C++ Java JavaScript Python or any other language most probably the support for Jason will be present or any such library will be there in order to parse JSON or in order to create Jason's right so Jason is really language independent and most of the languages you will find libraries or parcels to support it right so as we have said that the jason is a data format so how we can use jason or how jason is used so let me give you an example so for example you have a browser and you want to get some information about the temperature in some particular city right so the browser has to make this request to a server which makes this data available to the browser or a client once again now there are some ways of sending this data from the client to the server right so you can say the most simplest way is to send a string format right and the server is going to get this string and then it's going to give you the result but it's not so easy right until and unless you have some data predefined format it's hard for the server to understand in which format this data is coming and that's where the Jason comes in so this Jason is a data format so your server knows that whatever client is sending to the server is in the JSON format so on the server side for example whatever language you are using in that language you can use a JSON parser in order to get this data or interpret this data and then according to the request you can just prepare this data in the form of JSON once again and send it to the client and then whatever a client sign language you are using most probably you will be using javascript and this javascript will be able to understand that that this data is in the JSON format so it's going to parse this data and then it's going to show you this data in the form of HTML using that JavaScript right so this is very simple kind of jason right so a jason has these curly brackets and then the values are defined like this so there is a key and the value for it so key here is a city and the value of a city is Paris for example right unit is a key and C capital C which stands for centigrade is the value of unit right in the same way once your server has some data it's going to send it in this format so here low means low temperature and so low is a key and 16 here is the value right high is the key and 23 is the value right so this is the format of very simple JSON which can be sent from the client to the server and then server to the client so jason is essentially a data format now the question arises that which kind of data you can send using JSON right so let's see what are the values you can use to send data so in Jason you can send this data in the form of these data type which are there in this picture so the key which I already explained you for example city was the key and it's always in the string format right so key will be in string format and the jason value you can see the jason value can be an object it can be an array it can be a number number means it can be an integer or a decimal value and string is a string and other three formats are true/false for boolean and if you had don't have any data you can send null okay so these are the data types which can be used to send the values in Jason so it can be object array number or a string or a boolean value or if you don't have any data then you can send null also okay now let me show you a simple example of a jason now for example you want to send employee data or the data of some person from a client to a server right so for example the first name is John here so its value is a string value right last name is myth it's also a string value this value you can see now age is 25 this is a number right so there is no double quotation around it okay so number you can write directly like this now address can be a little bit complex because the address may contain a street and the city name and the state name for example and the zip code right so this data you can send in the form of object and what is an object so an object is also a combination of key value pair and you can see using this curly bracket you can define key value pairs and because it's in these curly bracket it becomes an object of address right so an object is nothing but the key value pairs itself the combination of these key value pairs and they are you know created using these curly brackets so this whole is a object the combination of Street city state and zip is an object right now let's come to the phone numbers right so a person can have multiple phone numbers okay and you can define these phone number in the form of array so you can see a square bracket here and inside the square bracket you have defined two object first object have a type home and number whatever number is right second object has type fax and the number whatever number is right so you are defining multiple object for the phone number and you can do this using this kind of arrived so you are essentially creating an array of object in this case now let's see how we can create a Jason so I have this text editor this is Visual Studio code but you can use any text editor to create a Jason file it's not you know essential that you need to use this kind of editor you can use any other editor to create a Jason file okay so to create a Jason file we just need to for example give a name to your Jason file for example sample and then you just add the extension Jason after dots here so sample dot jason is going to create a Jason file now a Jason will start with these curly brackets right now let's you know take an example of same employee data and that employee data contains for example name so we will define a key name here so this is called key name is the key and the value of this key is for example the name itself so for example mark is the name okay and this key is always a string as I already told you and you use double quotation to you know use strings in Jason now the key and the value are separated by this schoolin okay so this is a key this is a value because it's a string so we have included or we have added double quotation around it and the key and value are separated by this colon right now if you want to add more data you use this comma okay and this comma means you want to add some more data so for example I want to add surname here and then I want to just give this colon two separate key and value and then the some surname okay so for example some surname okay and then I want to add some more data and I add for example age here and this time because ages are number I can use directly a number notation here now this number can be a decimal value also so for example a person is 26 years and six months you can just give 26.5 here and it's perfectly fine it can take an integer or a decimal value here okay now for address so let's define an address here so address because address can contain multiple key value pairs so we can define this address inside an object an object is a combination of key value pair inside these curly brackets so once you give these curly braket this value becomes an object and here you can once again give these key value pairs so for example address contains street here so you can just give the street and then the value of street some some value right and then next comes for example the city name so you can just give the city name this is also a most probably string in most of the cases and then you can give the zip code right so zip and in some cases it can be a number in some other countries it can be some string format right so let's say it's a number so you can just give this number like this now keep in mind that I haven't added comma and the last element right so I have added comma here I have added comma here but because zip is my last element of this address object so the last element doesn't contain any comma so when I add comma it's an error right so I don't need to add comma to the last element of an object right so you can say this is a big object this is one object and then address contains the sub object here okay now let's add the phone numbers here so for adding the phone number you need to add comma here after this curly bracket right because you are adding one more element here so let's add phone for example here and then these phone number for example a person can have multiple phone numbers right so in order to give the phone number you can directly define an array array means multiple values for the same key okay so for example a person contain the first number and then a person contain the second phone number and a person can contain the third phone number and it can contain multiple you know element in the array so you can have multiple elements in this array and these array values are also separated by these comma and the last value does not have the comma now one special quality about this array is it doesn't have any key here right the key is the phone and because the phone have multiple values we have used the array using this square bracket and the value are multiple so they are separated by this comma so your value does not have any key here the key is phone here and there are three values in the form of array and how you recognize array you can recognize array because you have used square brackets here so these are the most basic data types here okay you cannot use also for example if the person is married or not so single here and the value I can provide for example falls here if he is a not a single and if the person is single we can just define true here okay so you can define value as a boolean value and then a person can have some skills right so I can just write skill and for example for now he don't want to add any skill so he can add this null value here so if you don't want to give any value with the key you can define null and it will be considered as no value or null okay so this is no value so this is a simple jason here as values you can use strings as we have used here name and surname and then you can use numbers it can be decimal numbers or integers you can use object so you have this object under these curly brackets you can use array in these square brackets multiple values for the same key and then you can use true or false as a boolean value for some key or you can use null if you don't have any data for that key so this is how a simple jason is defined so I hope you've enjoyed this video please rate comment subscribe and bye for now
