With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in this video we will discuss
00:07 - about smoothing or blurring images in
00:10 - open CV so smoothing which is also known
00:14 - as blurring is one of the most commonly
00:17 - used operation in image processing the
00:21 - most common use of smoothing operation
00:23 - is to remove noise in the images
00:27 - now when smoothing or blurring images we
00:29 - can use diverse linear filters because
00:32 - linear filters are easy to achieve and
00:35 - are also relatively fast now there are
00:38 - various kinds of filters available in
00:40 - open CV for example homogeneous gaussian
00:44 - median or bilateral filters which we
00:48 - will see one by one so first of all we
00:51 - will see the homogeneous filter so
00:55 - homogeneous filter is the most simple
00:58 - filter and in homogeneous filter each
01:00 - output pixel is the mean of its kernels
01:05 - neighbors now in homogeneous filter all
01:08 - pixels contribute with the equal weight
01:12 - and that's why they are called
01:14 - homogeneous filters now those of you who
01:16 - don't know what the kernel is I have
01:19 - explained about kernel in the last video
01:21 - so you can see the last video and in
01:23 - simple word a kernel is a shape which we
01:27 - can apply or convolve over an image and
01:31 - you can use for example numpy to create
01:34 - this kind of squared kernel so in
01:37 - homogeneous filter the kernel looks like
01:40 - this image which you see on your screen
01:43 - so in homogeneous filter kernel K is
01:46 - equal to 1 by the width of the kernel
01:49 - multiplied by the height of the kernel
01:52 - so let's say we want to use a kernel of
01:54 - 5 by 5 then using this formula we will
01:59 - have K is equal to 1 by 25 and then we
02:03 - will have our kernel matrix of 5 by 5
02:07 - once so let's create this kernel first
02:11 - of all and
02:13 - we will see how to use this kernel for
02:16 - the image filtering using 2d called
02:20 - involution or homogeneous filter so what
02:24 - I have right now here is the simple code
02:28 - which loads this image using matplotlib
02:31 - and this code you might already know
02:34 - because I have explained in detail how
02:37 - matplotlib works and how to read the
02:40 - images using OpenCV one thing to note
02:43 - here is I am just converting the image
02:46 - from BGR to RGB because matplotlib reads
02:52 - the images in the RGB format and OpenCV
02:56 - reads the images in BGR format so this
03:00 - conversion is necessary so let's define
03:03 - our kernel so I'm going to just say
03:05 - kernel is equal to NP dot once and then
03:11 - we are going to take the kernel of five
03:14 - by five so we are going to define this
03:16 - kernel five comma five of once so I'm
03:20 - going to just say n P dot float32 here
03:26 - and then we are going to divide this
03:29 - kernel by 25 because our kernel is of
03:33 - five by five because the formula which
03:36 - we have seen in that formula we have the
03:40 - kernel which was a matrix of once and
03:44 - then we have the multiplication of one
03:48 - divided by the width and height of the
03:51 - kernel so that's why the multiplication
03:55 - of the width and height is 25 that's why
03:57 - I have taken 25 here so now we have our
04:01 - kernel so we can define our destination
04:06 - image using this kernel and we are going
04:08 - to use CV to dot there is a method
04:12 - called filter 2d which we are going to
04:15 - use which is used for this homogeneous
04:18 - filter so here the first argument is the
04:23 - image the second argument is the desire
04:26 - depth of the destination image so for
04:30 - now we are going to take it as minus one
04:33 - the third argument is the kernel so now
04:37 - when we have applied this kernel on our
04:42 - image using 2d filter let's see what the
04:45 - output will look like so I will name
04:47 - this image as 2d convolution and the
04:54 - destination is the final image which we
04:58 - got using filter 2d and let's increase
05:02 - this range by two and let's say we want
05:05 - to show this image on matplotlib in 1 by
05:09 - 2 format okay so I'm going to just run
05:12 - this image so this is the result on the
05:14 - left hand side is the original image and
05:18 - on the right hand side is the 2d filter
05:22 - applied image so this is the image which
05:25 - we got by applying the homogeneous
05:28 - filter using filter 2d function so you
05:31 - can see on the corners here there is
05:34 - little build noise and after applying
05:38 - this to deconvolution over this image
05:43 - you can see all the corners are now
05:46 - smoothing and overall this image is now
05:49 - smooth and or blurred a little bit so
05:53 - these noises are removed or suppressed
05:58 - by this blurring so this is one way of
06:01 - blurring an image using filter 2d right
06:04 - filter to the function now as in
06:07 - one-dimensional signals images also can
06:10 - be filtered with various low-pass
06:12 - filters or high-pass filters etc so
06:17 - low-pass filter helps in removing the
06:19 - noise or blurring the image etc and
06:23 - high-pass filters helps in finding ages
06:26 - in the images now when you want to
06:29 - achieve image blurring we need to
06:32 - convert over the image with the low pass
06:36 - filter kernel
06:38 - now there are some algorithm as I said
06:41 - there are various kind of algorithm
06:43 - available in open CV so we will also see
06:47 - them one by one
06:48 - so first algorithm is the blur method or
06:52 - it's also called the averaging so what
06:55 - I'm going to do is I'm going to define a
06:57 - variable called blur and then I'm going
06:59 - to call a method called CB 2 dot blur
07:03 - okay so this is the method which we will
07:07 - use to apply averaging algorithm for
07:11 - blurring the image and this takes two
07:14 - argument one is the image and second is
07:18 - the kernel so the kernel we are going to
07:20 - apply is once again five by five and now
07:24 - we are going to just see with the result
07:27 - of this blurring method so we are going
07:30 - to just loaded using the matplotlib so
07:35 - range I'm going to increase it by 1 once
07:39 - again and let's see this these three
07:42 - images in one by three format on the
07:45 - matplotlib window so this is the result
07:49 - and you can see the original image the
07:54 - result which we got using the filter to
07:57 - the method and the result we got using
08:00 - the blur method which is also called
08:03 - averaging so the result is more or less
08:06 - looks the same to me because we have
08:10 - applied the same kind of kernel to both
08:13 - the functions so this is the result of
08:17 - filter 2d function and this is the
08:19 - result of the blur function now there
08:22 - are more functions which are available
08:25 - in open CV so let's see them so the next
08:29 - algorithm which we are going to see is
08:31 - the Gaussian filter algorithm so the
08:35 - Gaussian filter is nothing but using
08:37 - different weight kernel in both x and y
08:41 - direction so in the result pixels
08:44 - located in the middle of the kernel have
08:48 - the higher weight or bigger weight
08:51 - the weights decreases with distance from
08:55 - the neighborhood center so pixels
08:58 - located on the side have smaller weight
09:01 - and the pixels located on the center
09:05 - have the higher weight so when we take a
09:08 - 5x5 kernel its result is going to look
09:12 - like this which is shown in the image
09:15 - and now let's see how we can use this
09:18 - Gaussian blur in our open CV code so I'm
09:22 - going to remove this semicolon
09:24 - which I somehow added here and let's
09:28 - declare a variable called G blur for
09:32 - Gaussian blur and then we are going to
09:36 - use CB to dot Gaussian blur so the
09:39 - method name is Gaussian blur and the
09:43 - argument here they are same as the blur
09:46 - method so first argument is the image
09:49 - itself second argument is our kernel we
09:52 - are going to take the same kernel of
09:54 - five by five and the third argument here
09:58 - is the Sigma X value which we are going
10:00 - to take zero for now let's see the
10:03 - result of the Gaussian blur method when
10:06 - it's applied to an image so I'm going to
10:10 - just define one more title which is G
10:12 - blur or Gaussian blur or let's take this
10:15 - name which will be more clear and then
10:19 - our result image is G blur and let's
10:23 - increase the range to four and let's say
10:26 - we want to show this image in two by two
10:29 - format so two rows and two columns so
10:32 - I'm going to run this code and for
10:35 - OpenCV logo the results looks the same
10:41 - you can see for the 2d convolution of
10:45 - filter 2d method or blur method using
10:47 - the Gaussian blur you can see there is a
10:50 - little bit different between the blur
10:52 - method and Gaussian blur method results
10:56 - the Gaussian blur result is more better
10:59 - in my eyes than the blur method let's
11:04 - try this Gaussian blur
11:05 - with another image so I have this image
11:09 - called halftone underscore Gaussian
11:13 - underscore a blur and I'm going to run
11:16 - this code now with the new image and you
11:21 - can see the result now so this was the
11:26 - original image which have too much noise
11:29 - here so you can see the pixels here
11:33 - which have too much noise and after
11:36 - applying the Gaussian blur you can see
11:39 - this IMH in much better way and all the
11:44 - noise is removed so the Gaussian blur
11:47 - method is designed specifically for
11:50 - removing the high frequency noise from
11:54 - the image like this one now let's see
11:57 - the next method which is called the
11:59 - median filter so median filter is
12:03 - something that replaces each pixel value
12:07 - with the median of its neighboring pixel
12:10 - so this method is great when dealing
12:13 - with something which is called
12:15 - salt-and-pepper noise now if you don't
12:18 - know what the salt-and-pepper noise is
12:20 - you can open the Wikipedia and under
12:24 - this URL or just search for
12:26 - salt-and-pepper noise Wikipedia page and
12:29 - you can see more details about
12:33 - salt-and-pepper noise so you can see
12:35 - this is an image and there are some
12:38 - pixels which are distorted here so there
12:41 - are some pixels where the white dots are
12:46 - there or white noise is there and there
12:48 - are some places where the black noise is
12:51 - there so that's why it's called
12:53 - salt-and-pepper because we have white
12:56 - pixels which are distorted like salt and
12:59 - we have the black pixels which are which
13:03 - looks like pepper so that's why it's
13:05 - called salt-and-pepper noise so I have
13:09 - this same image which I'm going to use
13:12 - as a source now so it's called what are
13:16 - not PNG in my case and now let's
13:19 - how we can use the median blower method
13:22 - so I'm going to just define a new
13:25 - variable called median and then I'm
13:28 - going to use a CB 2 dot median method so
13:32 - this method is called median blur where
13:36 - the first argument is the image and the
13:39 - second argument here is the kernel size
13:42 - now one thing to note here is that the
13:46 - kernel size must be odd here so this
13:50 - must be a 3 or 5 or 7 and so on
13:53 - except one okay so when you just give 1
13:58 - it's going to show you the original
14:00 - image and let's say we just give 3 here
14:03 - as the kernel size or in our case we
14:07 - have the kernel size of 5 so let's take
14:10 - the 5 kernel size here so let's just
14:13 - show this result of the median filter in
14:17 - the matplotlib window so I'm going to
14:20 - just increase the range 5 and let's say
14:23 - this is 2 by 3 matrix now I'm going to
14:27 - run this code and now you can see the
14:30 - results of all the filtering method and
14:33 - you can see the best result you get
14:35 - using the median filter method so when
14:39 - you have this kind of salt-and-pepper
14:42 - dots on your images then you can use the
14:47 - median filter now let's see the last
14:49 - filter which is called the bilateral
14:51 - filter so by using all these filters for
14:55 - example homogeneous filter or averaging
14:57 - or the Gaussian or the median filter we
15:01 - not only dissolve the noise but we also
15:04 - smooth the edges and sometimes we need
15:08 - to preserve the edges that means we need
15:11 - that all the ages must remain sharp even
15:16 - if the image is blurred so let me show
15:20 - you one example so I have this Lenna dot
15:24 - PNG image so I'm going to define a
15:28 - variable called bilateral filter and
15:30 - then there
15:32 - a method called CB to dot bilateral
15:35 - filter and this bilateral filter takes
15:37 - the first argument which is the image
15:41 - the second argument is the diameter of
15:43 - each pixel neighborhood that is used
15:46 - during the filter so let's take it as a
15:50 - nine the third argument is the Sigma
15:54 - color and the fourth argument is the
15:57 - Sigma space so the speak Sigma color is
16:00 - the filter Sigma in the color space and
16:02 - Sigma space is the filter Sigma in the
16:06 - coordinate space so for this we are
16:09 - going to take this filter Sigma color
16:11 - and Sigma space as 75 and 75 here and
16:16 - let's see it in the result window so
16:21 - bilateral filter and then the result
16:25 - bilateral filter and this gives me error
16:27 - because this image is called Lena dot
16:30 - jpg not PNG so jpg and then we need to
16:35 - increase this range by one to see all
16:39 - the six images and let's run this code
16:42 - and let's see what happens so you can
16:44 - see the result now so let me make it a
16:47 - little bit bigger so you can see them
16:48 - and from here also so now you can see by
16:54 - applying the bilateral filter the edges
16:58 - are preserved in a much better way so
17:01 - here you can see the hat border is
17:05 - blurred but here you can see in the
17:08 - result the border of the Hat our rap is
17:12 - preserved so the images in which you
17:16 - need to preserve the borders then you
17:20 - can use the bilateral filter so
17:23 - bilateral filter is highly effective in
17:26 - noise removal while keeping the edge
17:28 - sharp so these are some of the methods
17:30 - and algorithms you can use to smoothen
17:34 - or blur your images using open CV I hope
17:39 - you've enjoyed this video and I will see
17:40 - you in the next video
17:49 - you

Cleaned transcript:

hey guys welcome to the next video on open CV tutorial for beginners using Python in this video we will discuss about smoothing or blurring images in open CV so smoothing which is also known as blurring is one of the most commonly used operation in image processing the most common use of smoothing operation is to remove noise in the images now when smoothing or blurring images we can use diverse linear filters because linear filters are easy to achieve and are also relatively fast now there are various kinds of filters available in open CV for example homogeneous gaussian median or bilateral filters which we will see one by one so first of all we will see the homogeneous filter so homogeneous filter is the most simple filter and in homogeneous filter each output pixel is the mean of its kernels neighbors now in homogeneous filter all pixels contribute with the equal weight and that's why they are called homogeneous filters now those of you who don't know what the kernel is I have explained about kernel in the last video so you can see the last video and in simple word a kernel is a shape which we can apply or convolve over an image and you can use for example numpy to create this kind of squared kernel so in homogeneous filter the kernel looks like this image which you see on your screen so in homogeneous filter kernel K is equal to 1 by the width of the kernel multiplied by the height of the kernel so let's say we want to use a kernel of 5 by 5 then using this formula we will have K is equal to 1 by 25 and then we will have our kernel matrix of 5 by 5 once so let's create this kernel first of all and we will see how to use this kernel for the image filtering using 2d called involution or homogeneous filter so what I have right now here is the simple code which loads this image using matplotlib and this code you might already know because I have explained in detail how matplotlib works and how to read the images using OpenCV one thing to note here is I am just converting the image from BGR to RGB because matplotlib reads the images in the RGB format and OpenCV reads the images in BGR format so this conversion is necessary so let's define our kernel so I'm going to just say kernel is equal to NP dot once and then we are going to take the kernel of five by five so we are going to define this kernel five comma five of once so I'm going to just say n P dot float32 here and then we are going to divide this kernel by 25 because our kernel is of five by five because the formula which we have seen in that formula we have the kernel which was a matrix of once and then we have the multiplication of one divided by the width and height of the kernel so that's why the multiplication of the width and height is 25 that's why I have taken 25 here so now we have our kernel so we can define our destination image using this kernel and we are going to use CV to dot there is a method called filter 2d which we are going to use which is used for this homogeneous filter so here the first argument is the image the second argument is the desire depth of the destination image so for now we are going to take it as minus one the third argument is the kernel so now when we have applied this kernel on our image using 2d filter let's see what the output will look like so I will name this image as 2d convolution and the destination is the final image which we got using filter 2d and let's increase this range by two and let's say we want to show this image on matplotlib in 1 by 2 format okay so I'm going to just run this image so this is the result on the left hand side is the original image and on the right hand side is the 2d filter applied image so this is the image which we got by applying the homogeneous filter using filter 2d function so you can see on the corners here there is little build noise and after applying this to deconvolution over this image you can see all the corners are now smoothing and overall this image is now smooth and or blurred a little bit so these noises are removed or suppressed by this blurring so this is one way of blurring an image using filter 2d right filter to the function now as in onedimensional signals images also can be filtered with various lowpass filters or highpass filters etc so lowpass filter helps in removing the noise or blurring the image etc and highpass filters helps in finding ages in the images now when you want to achieve image blurring we need to convert over the image with the low pass filter kernel now there are some algorithm as I said there are various kind of algorithm available in open CV so we will also see them one by one so first algorithm is the blur method or it's also called the averaging so what I'm going to do is I'm going to define a variable called blur and then I'm going to call a method called CB 2 dot blur okay so this is the method which we will use to apply averaging algorithm for blurring the image and this takes two argument one is the image and second is the kernel so the kernel we are going to apply is once again five by five and now we are going to just see with the result of this blurring method so we are going to just loaded using the matplotlib so range I'm going to increase it by 1 once again and let's see this these three images in one by three format on the matplotlib window so this is the result and you can see the original image the result which we got using the filter to the method and the result we got using the blur method which is also called averaging so the result is more or less looks the same to me because we have applied the same kind of kernel to both the functions so this is the result of filter 2d function and this is the result of the blur function now there are more functions which are available in open CV so let's see them so the next algorithm which we are going to see is the Gaussian filter algorithm so the Gaussian filter is nothing but using different weight kernel in both x and y direction so in the result pixels located in the middle of the kernel have the higher weight or bigger weight the weights decreases with distance from the neighborhood center so pixels located on the side have smaller weight and the pixels located on the center have the higher weight so when we take a 5x5 kernel its result is going to look like this which is shown in the image and now let's see how we can use this Gaussian blur in our open CV code so I'm going to remove this semicolon which I somehow added here and let's declare a variable called G blur for Gaussian blur and then we are going to use CB to dot Gaussian blur so the method name is Gaussian blur and the argument here they are same as the blur method so first argument is the image itself second argument is our kernel we are going to take the same kernel of five by five and the third argument here is the Sigma X value which we are going to take zero for now let's see the result of the Gaussian blur method when it's applied to an image so I'm going to just define one more title which is G blur or Gaussian blur or let's take this name which will be more clear and then our result image is G blur and let's increase the range to four and let's say we want to show this image in two by two format so two rows and two columns so I'm going to run this code and for OpenCV logo the results looks the same you can see for the 2d convolution of filter 2d method or blur method using the Gaussian blur you can see there is a little bit different between the blur method and Gaussian blur method results the Gaussian blur result is more better in my eyes than the blur method let's try this Gaussian blur with another image so I have this image called halftone underscore Gaussian underscore a blur and I'm going to run this code now with the new image and you can see the result now so this was the original image which have too much noise here so you can see the pixels here which have too much noise and after applying the Gaussian blur you can see this IMH in much better way and all the noise is removed so the Gaussian blur method is designed specifically for removing the high frequency noise from the image like this one now let's see the next method which is called the median filter so median filter is something that replaces each pixel value with the median of its neighboring pixel so this method is great when dealing with something which is called saltandpepper noise now if you don't know what the saltandpepper noise is you can open the Wikipedia and under this URL or just search for saltandpepper noise Wikipedia page and you can see more details about saltandpepper noise so you can see this is an image and there are some pixels which are distorted here so there are some pixels where the white dots are there or white noise is there and there are some places where the black noise is there so that's why it's called saltandpepper because we have white pixels which are distorted like salt and we have the black pixels which are which looks like pepper so that's why it's called saltandpepper noise so I have this same image which I'm going to use as a source now so it's called what are not PNG in my case and now let's how we can use the median blower method so I'm going to just define a new variable called median and then I'm going to use a CB 2 dot median method so this method is called median blur where the first argument is the image and the second argument here is the kernel size now one thing to note here is that the kernel size must be odd here so this must be a 3 or 5 or 7 and so on except one okay so when you just give 1 it's going to show you the original image and let's say we just give 3 here as the kernel size or in our case we have the kernel size of 5 so let's take the 5 kernel size here so let's just show this result of the median filter in the matplotlib window so I'm going to just increase the range 5 and let's say this is 2 by 3 matrix now I'm going to run this code and now you can see the results of all the filtering method and you can see the best result you get using the median filter method so when you have this kind of saltandpepper dots on your images then you can use the median filter now let's see the last filter which is called the bilateral filter so by using all these filters for example homogeneous filter or averaging or the Gaussian or the median filter we not only dissolve the noise but we also smooth the edges and sometimes we need to preserve the edges that means we need that all the ages must remain sharp even if the image is blurred so let me show you one example so I have this Lenna dot PNG image so I'm going to define a variable called bilateral filter and then there a method called CB to dot bilateral filter and this bilateral filter takes the first argument which is the image the second argument is the diameter of each pixel neighborhood that is used during the filter so let's take it as a nine the third argument is the Sigma color and the fourth argument is the Sigma space so the speak Sigma color is the filter Sigma in the color space and Sigma space is the filter Sigma in the coordinate space so for this we are going to take this filter Sigma color and Sigma space as 75 and 75 here and let's see it in the result window so bilateral filter and then the result bilateral filter and this gives me error because this image is called Lena dot jpg not PNG so jpg and then we need to increase this range by one to see all the six images and let's run this code and let's see what happens so you can see the result now so let me make it a little bit bigger so you can see them and from here also so now you can see by applying the bilateral filter the edges are preserved in a much better way so here you can see the hat border is blurred but here you can see in the result the border of the Hat our rap is preserved so the images in which you need to preserve the borders then you can use the bilateral filter so bilateral filter is highly effective in noise removal while keeping the edge sharp so these are some of the methods and algorithms you can use to smoothen or blur your images using open CV I hope you've enjoyed this video and I will see you in the next video you
