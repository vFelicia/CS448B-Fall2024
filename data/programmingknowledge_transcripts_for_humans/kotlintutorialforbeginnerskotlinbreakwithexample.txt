With timestamps:

00:00 - and in this video we are going to learn
00:02 - about the break expression in cotton
00:05 - okay
00:06 - so
00:08 - suppose you are working with loops and
00:10 - it is sometimes desirable to terminate
00:13 - the loop immediately without checking
00:14 - the test expression okay
00:17 - so i have to terminate the loop at some
00:19 - point
00:21 - so what i can do is in such cases i can
00:24 - use the break statement okay so i'll
00:26 - just
00:27 - go with a random example
00:29 - like i i started a loop and
00:33 - if
00:34 - the something occurs then i have to
00:36 - break the loop okay so then i have to
00:38 - use the break statement for terminating
00:41 - the loop
00:42 - without checking the test expression
00:46 - okay
00:47 - so the break statement
00:49 - terminates the nearest and closing loop
00:51 - when encountered without checking the
00:53 - test expression
00:55 - okay so how break works it
00:58 - it is almost always
01:00 - used with if else statement
01:03 - okay
01:04 - so
01:06 - i'll just
01:08 - introduce you with the syntax
01:10 - of this break
01:13 - so what what what i will do is uh in the
01:16 - for there is a for loop
01:18 - okay in which
01:20 - there is a for loop in which if
01:22 - there is some
01:24 - test expression
01:28 - if there is some test expression then i
01:30 - have to
01:32 - break the loop
01:34 - i have to terminate the loop so i'll use
01:36 - the break statement
01:37 - okay
01:40 - and
01:42 - i'll use
01:43 - okay
01:44 - so if test expression is evaluated to
01:47 - true break is executed which terminates
01:50 - the for loop
01:52 - okay so uh
01:55 - now i'll go
01:57 - explain you with an example
01:59 - so i'll create a main function and
02:01 - inside the main function
02:02 - i'll create a for loop
02:05 - which iterates
02:06 - from 1 to 10
02:09 - okay
02:10 - and
02:11 - in this if i is equals to 5
02:14 - if
02:15 - i is equals to 5
02:17 - then i have to terminate the loop
02:19 - okay so i'll use just the break
02:22 - statement here
02:24 - and i'll
02:25 - print ln
02:27 - i
02:28 - just to know that what is happening in
02:30 - the loop so when i go ahead and run this
02:34 - function
02:36 - what i can see is
02:39 - the the what i can see is 1 to 4 is
02:42 - printed
02:43 - so uh when the value of i is equals to 5
02:46 - okay so we enter in the for loop i is
02:49 - assigned value equals to 1
02:51 - and then
02:52 - it checks whether the i is 5 or not so i
02:55 - is not 5 then it prints i and then in it
02:58 - increases i equals to 2 and then it
03:00 - again checks that if i is equals to 2 or
03:03 - to five or not
03:04 - so it is not equals to five and then
03:06 - again it prints the
03:08 - value two as soon as the uh i as soon as
03:12 - i becomes five in the for loop
03:17 - uh inside if is evaluated to true
03:20 - and break is executed this terminates
03:23 - the
03:23 - for loop
03:26 - okay
03:27 - so um
03:33 - what is a label so we will move ahead
03:36 - and
03:37 - uh learn about labeled break in kotlin
03:41 - so what we have learned till now is an
03:44 - unlabeled from form of brick which
03:46 - terminates the nearest and closing loop
03:48 - there is another way to a way break can
03:51 - be used to terminate desired loop okay
03:54 - or i can say the to terminate an outer
03:56 - loop
03:57 - so
03:58 - how does a label break works
04:01 - okay
04:04 - so there is a
04:06 - there is a
04:08 - while loop in in a while loop and there
04:10 - is a so there are basically two loops
04:14 - okay
04:16 - so label in kotlin starts with an
04:18 - identifier which is followed by an add
04:21 - the rate
04:22 - okay so here
04:24 - when i
04:28 - okay i can make a
04:32 - code for that syntax okay so i can make
04:35 - test
04:36 - at the red
04:37 - while
04:40 - and there is some test expression
04:46 - and inside this while loop
04:49 - there is some codes
04:56 - and inside
04:57 - this with the codes there is another
04:59 - while loop
05:01 - which contains
05:02 - another test expression
05:10 - and
05:11 - this while loops contains
05:13 - some
05:15 - codes
05:16 - and with this code it contains an if
05:19 - statement
05:20 - and there is a condition
05:24 - condition
05:26 - to
05:27 - break
05:30 - in this
05:31 - if statement
05:32 - and if this condition is true
05:35 - what it does is it it will break
05:38 - and i'll use the m percent sign
05:40 - and then i'll write test okay
05:43 - so now i'll go ahead
05:45 - and close all the parentheses
05:49 - now here is one and
05:53 - here is another
05:56 - okay
05:57 - so
05:58 - now we will understand the syntax
06:02 - so here test at the red is a label
06:05 - marked at the outer while loop okay so
06:08 - this is the outer while loop and test at
06:11 - the rate is a label marked at the outer
06:12 - while loop
06:14 - okay so now by using break with a label
06:18 - test at the rate break at the red test
06:20 - in this case you can break a specific
06:22 - loop
06:23 - so uh as soon as my condition to break
06:26 - is true inside the vial this while in a
06:30 - while
06:31 - it will break the
06:32 - test this outer loop okay so what if i
06:36 - had not used the test
06:38 - test
06:40 - so it will break this while loop okay it
06:42 - wouldn't have break the outer while loop
06:45 - okay so
06:46 - it would be more clear with an example
06:47 - if it is not clear till now
06:50 - i'll
06:51 - use first
06:53 - as an identifier
06:55 - for a for loop
06:58 - which iterates in one two four
07:02 - one two four
07:05 - and inside this for loop there is
07:07 - a another for loop and
07:09 - i'll
07:11 - just i identify whether
07:14 - s e c o nd second
07:17 - and i'll use at the right and
07:20 - there is there will be another for loop
07:23 - and i'll iterate
07:25 - it in one two two
07:28 - okay
07:30 - so inside this second for loop i'll
07:32 - write a print statement just to know
07:35 - that
07:37 - what is the
07:39 - status of the loop
07:41 - so
07:43 - you must remember about the
07:45 - um the string templates okay so i i am
07:48 - going to use everything i have said till
07:51 - now okay so i is equals to i'll use the
07:54 - ampersand sign a dollar sign and use i
07:56 - so this prints the value of i
07:58 - okay
07:59 - and then
08:00 - semicolon
08:04 - uh
08:05 - semicolon
08:08 - j
08:10 - is equals to
08:14 - dollar j okay so the semicolon is going
08:16 - to print and i is equals to the value of
08:18 - i and j is equals to the value of j so i
08:20 - am just going to
08:21 - print the
08:23 - value okay so if the value of i
08:27 - is 2 then i have to
08:29 - break the first loop okay
08:32 - so i will use the break statement
08:35 - and use the add the rate and mention
08:38 - first
08:39 - now if i run this
08:41 - code
08:48 - okay i can see that i is equals to 1 and
08:51 - then j is equals to 1 then isaac for is
08:53 - equals to 1 there is equals to 2 okay
08:56 - so let's just see what is happening
08:58 - right ok so we first enter the for loop
09:01 - the first for loop okay so there i is
09:03 - assigned the value 1
09:05 - then we enter the second for loop and
09:08 - there j is assigned the value 1
09:11 - okay then the print statement is
09:13 - executed and inj
09:14 - both with the value 1 is printed
09:17 - and
09:18 - the statement if i is equals to 2 is
09:21 - executed and as i is not equal to 2 it
09:23 - is 1 it is false and then it continues
09:26 - with the second for loop
09:28 - okay for i is equals to 1 this loop is
09:30 - executed two times because j iterates in
09:32 - one to two
09:34 - okay then uh for i is equals to two okay
09:38 - so
09:40 - uh
09:41 - when this xe this is executed two times
09:43 - we reach the end of this loop the first
09:45 - loop and then i is incremented and i is
09:48 - equal equals i becomes 2
09:50 - now
09:52 - it enters the second for loop and for
09:55 - the i equals to 2 j is assigned the
09:57 - value 1
09:59 - and then the print statement is executed
10:01 - and value of i is equals to 2 and j is
10:04 - equals to 1 is printed and after that
10:08 - the if statement is executed and
10:11 - when i is equals to 2x expression is
10:13 - evaluated to true break at the rate
10:16 - first is executed which terminates the
10:18 - loop marked with label at the rate first
10:22 - okay or first at the red
10:24 - so it terminates the first loop now
10:27 - what if
10:28 - what if i have to
10:30 - break the loop as soon as i become two
10:33 - and not when
10:35 - after printing j okay so i i have to
10:38 - just remove this statement
10:40 - so i can just uh
10:42 - copy and cut and paste it before the
10:45 - print statement so before the print
10:47 - statement
10:48 - the first loop is going to be terminated
10:51 - and hence
10:54 - the
10:55 - third print statement is not executed so
10:58 - i can just do a little variation in this
11:02 - program okay in the previous program
11:04 - so instead of break at the rate first
11:07 - i'll do break at the rate
11:12 - second
11:15 - now
11:17 - when i run this program
11:20 - okay
11:24 - when i run this program
11:32 - i can see that
11:33 - i is equals to 1 is equal to j is equals
11:35 - to 1 so the whole loop is executed
11:40 - no
11:41 - the whole lip is not executed since
11:43 - break statement is used to terminate the
11:46 - innermost loop of program
11:48 - okay
11:49 - so the second loop of program i have
11:52 - broke so when i i was two
11:55 - when i was 2
11:57 - j was 1 ok so that was printed i was 2j
12:00 - was 1 and then the condition was
12:02 - evaluated and the second loop was break
12:05 - so it it reached the end it reached to
12:07 - the end
12:08 - okay and at the end of this uh the the
12:12 - the iterator for first loop that is i
12:15 - is executed okay
12:18 - so
12:18 - if i have to um
12:21 - like code for this
12:23 - i need not write first at the right or
12:25 - second at the red because
12:32 - okay because the break statement as it
12:35 - is is for
12:37 - terminating the innermost loop okay so
12:40 - if i had not write
12:42 - at the rate at any point
12:44 - it gives me the
12:46 - same output
12:49 - okay so that was it for this video thank
12:51 - you

Cleaned transcript:

and in this video we are going to learn about the break expression in cotton okay so suppose you are working with loops and it is sometimes desirable to terminate the loop immediately without checking the test expression okay so i have to terminate the loop at some point so what i can do is in such cases i can use the break statement okay so i'll just go with a random example like i i started a loop and if the something occurs then i have to break the loop okay so then i have to use the break statement for terminating the loop without checking the test expression okay so the break statement terminates the nearest and closing loop when encountered without checking the test expression okay so how break works it it is almost always used with if else statement okay so i'll just introduce you with the syntax of this break so what what what i will do is uh in the for there is a for loop okay in which there is a for loop in which if there is some test expression if there is some test expression then i have to break the loop i have to terminate the loop so i'll use the break statement okay and i'll use okay so if test expression is evaluated to true break is executed which terminates the for loop okay so uh now i'll go explain you with an example so i'll create a main function and inside the main function i'll create a for loop which iterates from 1 to 10 okay and in this if i is equals to 5 if i is equals to 5 then i have to terminate the loop okay so i'll use just the break statement here and i'll print ln i just to know that what is happening in the loop so when i go ahead and run this function what i can see is the the what i can see is 1 to 4 is printed so uh when the value of i is equals to 5 okay so we enter in the for loop i is assigned value equals to 1 and then it checks whether the i is 5 or not so i is not 5 then it prints i and then in it increases i equals to 2 and then it again checks that if i is equals to 2 or to five or not so it is not equals to five and then again it prints the value two as soon as the uh i as soon as i becomes five in the for loop uh inside if is evaluated to true and break is executed this terminates the for loop okay so um what is a label so we will move ahead and uh learn about labeled break in kotlin so what we have learned till now is an unlabeled from form of brick which terminates the nearest and closing loop there is another way to a way break can be used to terminate desired loop okay or i can say the to terminate an outer loop so how does a label break works okay so there is a there is a while loop in in a while loop and there is a so there are basically two loops okay so label in kotlin starts with an identifier which is followed by an add the rate okay so here when i okay i can make a code for that syntax okay so i can make test at the red while and there is some test expression and inside this while loop there is some codes and inside this with the codes there is another while loop which contains another test expression and this while loops contains some codes and with this code it contains an if statement and there is a condition condition to break in this if statement and if this condition is true what it does is it it will break and i'll use the m percent sign and then i'll write test okay so now i'll go ahead and close all the parentheses now here is one and here is another okay so now we will understand the syntax so here test at the red is a label marked at the outer while loop okay so this is the outer while loop and test at the rate is a label marked at the outer while loop okay so now by using break with a label test at the rate break at the red test in this case you can break a specific loop so uh as soon as my condition to break is true inside the vial this while in a while it will break the test this outer loop okay so what if i had not used the test test so it will break this while loop okay it wouldn't have break the outer while loop okay so it would be more clear with an example if it is not clear till now i'll use first as an identifier for a for loop which iterates in one two four one two four and inside this for loop there is a another for loop and i'll just i identify whether s e c o nd second and i'll use at the right and there is there will be another for loop and i'll iterate it in one two two okay so inside this second for loop i'll write a print statement just to know that what is the status of the loop so you must remember about the um the string templates okay so i i am going to use everything i have said till now okay so i is equals to i'll use the ampersand sign a dollar sign and use i so this prints the value of i okay and then semicolon uh semicolon j is equals to dollar j okay so the semicolon is going to print and i is equals to the value of i and j is equals to the value of j so i am just going to print the value okay so if the value of i is 2 then i have to break the first loop okay so i will use the break statement and use the add the rate and mention first now if i run this code okay i can see that i is equals to 1 and then j is equals to 1 then isaac for is equals to 1 there is equals to 2 okay so let's just see what is happening right ok so we first enter the for loop the first for loop okay so there i is assigned the value 1 then we enter the second for loop and there j is assigned the value 1 okay then the print statement is executed and inj both with the value 1 is printed and the statement if i is equals to 2 is executed and as i is not equal to 2 it is 1 it is false and then it continues with the second for loop okay for i is equals to 1 this loop is executed two times because j iterates in one to two okay then uh for i is equals to two okay so uh when this xe this is executed two times we reach the end of this loop the first loop and then i is incremented and i is equal equals i becomes 2 now it enters the second for loop and for the i equals to 2 j is assigned the value 1 and then the print statement is executed and value of i is equals to 2 and j is equals to 1 is printed and after that the if statement is executed and when i is equals to 2x expression is evaluated to true break at the rate first is executed which terminates the loop marked with label at the rate first okay or first at the red so it terminates the first loop now what if what if i have to break the loop as soon as i become two and not when after printing j okay so i i have to just remove this statement so i can just uh copy and cut and paste it before the print statement so before the print statement the first loop is going to be terminated and hence the third print statement is not executed so i can just do a little variation in this program okay in the previous program so instead of break at the rate first i'll do break at the rate second now when i run this program okay when i run this program i can see that i is equals to 1 is equal to j is equals to 1 so the whole loop is executed no the whole lip is not executed since break statement is used to terminate the innermost loop of program okay so the second loop of program i have broke so when i i was two when i was 2 j was 1 ok so that was printed i was 2j was 1 and then the condition was evaluated and the second loop was break so it it reached the end it reached to the end okay and at the end of this uh the the the iterator for first loop that is i is executed okay so if i have to um like code for this i need not write first at the right or second at the red because okay because the break statement as it is is for terminating the innermost loop okay so if i had not write at the rate at any point it gives me the same output okay so that was it for this video thank you
