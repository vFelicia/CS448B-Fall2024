With timestamps:

00:00 - hey guys welcome to the next video in
00:02 - Python tutorial for beginners in this
00:04 - video I'm going to show you how to
00:05 - handle Jason values in Python so first
00:09 - of all what is Jason so Jason is a text
00:12 - format which stands for JavaScript
00:15 - object notation and Jason is a syntax
00:19 - which is used for storing and exchanging
00:23 - data now if you want to know more about
00:26 - Jason what is Jason and how to create
00:29 - Jason's and what value you can store in
00:32 - Jason then I have created a whole video
00:35 - about that so you can watch that video
00:38 - and understand more about Jason so let's
00:41 - get started with this tutorial and let's
00:44 - see how we can use Jason in Python so to
00:47 - use Jason in Python you use inbuilt
00:51 - package which is called Jason so you
00:54 - need to import this inbuilt package
00:58 - which is Jason now let's say I have a
01:01 - Python dictionary so let me create a
01:03 - dictionary in Python which have and
01:06 - let's say
01:15 - so this is our dictionary in Python so
01:18 - in order to convert this dictionary into
01:21 - Jason you use this Jason keyword which
01:25 - we have imported here and then call a
01:28 - method called dumps so this dumps method
01:31 - we can call here to convert some Python
01:34 - values to our Jason value and we will
01:38 - pass this dictionary variable a here and
01:41 - in order to print the value of Jason we
01:44 - can use this print method so I'm going
01:46 - to enclose this json dot dumps method
01:50 - inside our print function now let's run
01:54 - this code and you will see that this
01:56 - jason dodd dumps function has converted
01:59 - your dictionary into our jason value so
02:05 - this is our json text format now the
02:07 - next question which can arise here is
02:09 - what datatypes this dumps function takes
02:13 - as an argument so it takes a dictionary
02:16 - we already know now but what are the
02:19 - other data types which we can pass as an
02:23 - argument to this dumps function so it
02:26 - turns out that you can provide majority
02:29 - of your collections and your data types
02:32 - as an argument to this dumps function so
02:35 - you can provide dictionary here list
02:37 - tuple string int float or a boolean
02:41 - value any value you can provide here I
02:44 - think sets you cannot provide as an
02:46 - argument here but other than sets you
02:48 - can provide any other format as an
02:52 - argument to this dumps methods so let me
02:56 - show you how you can provide all these
02:57 - values into this json dot dumps function
03:01 - so here in the first print statement i
03:04 - have provided the dictionary in the
03:07 - second print statement i have provided
03:08 - the list in the third we have provided
03:11 - tuple in the fourth statement we have
03:13 - provided the string and then the integer
03:15 - and then float values and then we have
03:18 - provided the two boolean values false
03:20 - and true and at last we have provided
03:23 - this none keyword to this dumps function
03:28 - so let's run the code and let's see what
03:30 - happens so everything runs fine so that
03:34 - means you can convert from this JSON dot
03:36 - dumps function a dictionary or a list or
03:40 - a tuple or a string or a decimal or a
03:43 - float or a boolean value into our JSON
03:46 - value and all these are valid JSON
03:50 - values now let me go once again to this
03:53 - dictionary method and here also as the
03:56 - JSON values you can provide any type of
04:00 - values which I have shown here so you
04:02 - can use inside this dictionary for
04:04 - example another dictionary so I can just
04:07 - write
04:13 - so we can also provide a topper layer so
04:15 - let's run this code and it's totally
04:18 - valid so you can see our dictionary is
04:20 - now converted to a Jason value now this
04:23 - dumps function also takes few other
04:26 - parameters also so we can also provide a
04:29 - parameter called indent here so you need
04:32 - to write indent is equal to and then
04:35 - after that you can write some number
04:37 - here so if you want to give the indent
04:39 - of four to each and every element of
04:42 - your jason then you can write indent is
04:45 - equal to four and let me run the code
04:47 - once again and now you can see this
04:50 - jason is printed into a pretty format
04:54 - and the indentation here indentation
04:57 - means this indentation is for spaces for
05:01 - each and every element of your jason so
05:04 - if you want to print your jason into a
05:06 - pretty format then you can just right
05:09 - indent is equal to and the number of
05:12 - indents you want to give so let's say I
05:14 - want to provide just two indents here
05:16 - and let me run the code once again and
05:18 - you will see now this only have the two
05:22 - indents for every element of this jason
05:25 - also you can provide a parameter called
05:28 - separators and as the separators let's
05:32 - say first value i want to provide here
05:34 - is a dot value and the space here and
05:37 - the second value i want to provide here
05:39 - is this equals to symbol so what this
05:42 - separators argument does is it will
05:45 - replace your commas with this dot
05:49 - notation and your colons with this
05:52 - equals two notation and when i run the
05:55 - code you can see now the colon is
05:59 - replaced by the equals two symbol and
06:03 - comma is replaced by this dot symbol so
06:06 - you can use separators like this also
06:09 - but I will not prefer to use these kind
06:12 - of notation the original notation is the
06:14 - one which I prefer to use which is with
06:17 - commas and these coolants one more thing
06:20 - you can use here is the sort keys so you
06:23 - can just write sort keys here and
06:26 - never you ride through here it's going
06:29 - to sort your Jason according to their
06:32 - alphabetical order so you can see right
06:35 - now your keys are assembled in non
06:39 - alphabetical order so they are assembled
06:42 - in random manner but when you give sort
06:45 - keys is equal to true here and I'm going
06:48 - to run the code you can see H comes
06:50 - first then the marks and then the name
06:53 - and then the object so now your keys are
06:56 - assembled or sorted in the alphabetical
07:00 - order when you use this kind of notation
07:02 - now let's try to save this Jason value
07:05 - into a JSON file so in the last video I
07:08 - have shown you you can use this width
07:10 - statement and then you can use open
07:14 - function and we can provide file name
07:18 - here for example demo dot Jason so jason
07:21 - file always have the extension dot jason
07:25 - and the second value we will provide
07:28 - here is the mode so we want to write to
07:31 - the file so that's why we have used w
07:34 - here as a fetch and then using this FH
07:38 - we can write to this file which we have
07:42 - created so we can pass this json dot
07:44 - dumps function here and now your
07:48 - dictionary a will be converted into a
07:50 - jason and then this jason will be saved
07:54 - into this demo dot JSON file you can see
07:57 - here i'm working inside this file
07:59 - handling project and here I only have
08:02 - dot py file and when I run this code you
08:06 - will see there is one more file which
08:08 - will be created here which is demo dot
08:11 - Jason so I can open this file here and
08:13 - here you will see all our JSON values
08:18 - are saved in this demo dot Jason file so
08:23 - we have provided these values into the
08:26 - demo dot JSON file
08:27 - let me just split the screen so you will
08:30 - be able to see it correctly so we have
08:32 - provided a name here so name is here age
08:35 - is here marks is here and then the
08:39 - object is he
08:40 - and also the pass is also here so this
08:45 - is how you can write your Jason values
08:47 - into a file now let's see how we can
08:50 - read the Jason values from a file so I'm
08:54 - going to remove this dictionary from
08:57 - here and instead of using this write
09:00 - mode I'm going to just use read mode
09:02 - which we use to read from the file and a
09:05 - file we already have so let's say we
09:07 - want to read all this data which we have
09:09 - written into this file and now instead
09:11 - of using this line I need to use FH dot
09:15 - read function here and to print the
09:19 - content what we have read from this file
09:21 - we can use the print function so I'm
09:23 - going to enclose this FX dot read into
09:27 - the print function and let's run the
09:29 - code first of all and when I run this
09:31 - code you can see it friends all the
09:34 - content of this jason now one thing
09:37 - which you need to observe here is this
09:39 - efetch dot read function is going to
09:42 - give you a string value so to confirm
09:44 - that we can just write type here and we
09:48 - will just see the type of this FX dot
09:51 - read function and I'm going to run the
09:53 - code let's see what's the answer so you
09:56 - can see this read replies you in the
09:59 - form of string so in order to convert
10:02 - this string into some possible format
10:04 - you use our function called jason dot
10:07 - loads so I'm going to save this string
10:09 - into our let's say a variable jason
10:13 - underscore str this is the variable name
10:16 - and we will assign whatever we read from
10:19 - the file into this variable and now what
10:22 - we can do here is we can convert the
10:25 - string into a jason value using a method
10:29 - called jason dot loads so let me create
10:31 - a variable once again so jason value is
10:35 - the variable name and then I can use
10:37 - this jason keyword which we have
10:39 - imported dot loads function so just use
10:44 - the loads function and then pass the
10:46 - string as an argument of this loads
10:49 - function so this loads function takes a
10:52 - string and converts
10:54 - into adjacent values so now let's print
10:57 - the type of the Jason values I'm going
11:00 - to just write print type and then we use
11:04 - the Jason value argument here and then
11:07 - once again run the code and you will see
11:10 - now the jason value data type is the
11:12 - dictionary so because now it's a
11:14 - dictionary we can pass some values from
11:17 - it so let's say from this Jason value
11:20 - dictionary we want to get the name so
11:24 - name here we have stored is max so we
11:28 - can just give the key here name and then
11:32 - run the code it's going to give us the
11:34 - value associated with the name which is
11:37 - max so this json dot loads function we
11:41 - use to convert from a jason or a string
11:45 - value into a Python dictionary so this
11:48 - is how you can handle Jason values in
11:50 - Python I hope you have enjoyed this
11:52 - video and I will see you in the next
11:54 - video

Cleaned transcript:

hey guys welcome to the next video in Python tutorial for beginners in this video I'm going to show you how to handle Jason values in Python so first of all what is Jason so Jason is a text format which stands for JavaScript object notation and Jason is a syntax which is used for storing and exchanging data now if you want to know more about Jason what is Jason and how to create Jason's and what value you can store in Jason then I have created a whole video about that so you can watch that video and understand more about Jason so let's get started with this tutorial and let's see how we can use Jason in Python so to use Jason in Python you use inbuilt package which is called Jason so you need to import this inbuilt package which is Jason now let's say I have a Python dictionary so let me create a dictionary in Python which have and let's say so this is our dictionary in Python so in order to convert this dictionary into Jason you use this Jason keyword which we have imported here and then call a method called dumps so this dumps method we can call here to convert some Python values to our Jason value and we will pass this dictionary variable a here and in order to print the value of Jason we can use this print method so I'm going to enclose this json dot dumps method inside our print function now let's run this code and you will see that this jason dodd dumps function has converted your dictionary into our jason value so this is our json text format now the next question which can arise here is what datatypes this dumps function takes as an argument so it takes a dictionary we already know now but what are the other data types which we can pass as an argument to this dumps function so it turns out that you can provide majority of your collections and your data types as an argument to this dumps function so you can provide dictionary here list tuple string int float or a boolean value any value you can provide here I think sets you cannot provide as an argument here but other than sets you can provide any other format as an argument to this dumps methods so let me show you how you can provide all these values into this json dot dumps function so here in the first print statement i have provided the dictionary in the second print statement i have provided the list in the third we have provided tuple in the fourth statement we have provided the string and then the integer and then float values and then we have provided the two boolean values false and true and at last we have provided this none keyword to this dumps function so let's run the code and let's see what happens so everything runs fine so that means you can convert from this JSON dot dumps function a dictionary or a list or a tuple or a string or a decimal or a float or a boolean value into our JSON value and all these are valid JSON values now let me go once again to this dictionary method and here also as the JSON values you can provide any type of values which I have shown here so you can use inside this dictionary for example another dictionary so I can just write so we can also provide a topper layer so let's run this code and it's totally valid so you can see our dictionary is now converted to a Jason value now this dumps function also takes few other parameters also so we can also provide a parameter called indent here so you need to write indent is equal to and then after that you can write some number here so if you want to give the indent of four to each and every element of your jason then you can write indent is equal to four and let me run the code once again and now you can see this jason is printed into a pretty format and the indentation here indentation means this indentation is for spaces for each and every element of your jason so if you want to print your jason into a pretty format then you can just right indent is equal to and the number of indents you want to give so let's say I want to provide just two indents here and let me run the code once again and you will see now this only have the two indents for every element of this jason also you can provide a parameter called separators and as the separators let's say first value i want to provide here is a dot value and the space here and the second value i want to provide here is this equals to symbol so what this separators argument does is it will replace your commas with this dot notation and your colons with this equals two notation and when i run the code you can see now the colon is replaced by the equals two symbol and comma is replaced by this dot symbol so you can use separators like this also but I will not prefer to use these kind of notation the original notation is the one which I prefer to use which is with commas and these coolants one more thing you can use here is the sort keys so you can just write sort keys here and never you ride through here it's going to sort your Jason according to their alphabetical order so you can see right now your keys are assembled in non alphabetical order so they are assembled in random manner but when you give sort keys is equal to true here and I'm going to run the code you can see H comes first then the marks and then the name and then the object so now your keys are assembled or sorted in the alphabetical order when you use this kind of notation now let's try to save this Jason value into a JSON file so in the last video I have shown you you can use this width statement and then you can use open function and we can provide file name here for example demo dot Jason so jason file always have the extension dot jason and the second value we will provide here is the mode so we want to write to the file so that's why we have used w here as a fetch and then using this FH we can write to this file which we have created so we can pass this json dot dumps function here and now your dictionary a will be converted into a jason and then this jason will be saved into this demo dot JSON file you can see here i'm working inside this file handling project and here I only have dot py file and when I run this code you will see there is one more file which will be created here which is demo dot Jason so I can open this file here and here you will see all our JSON values are saved in this demo dot Jason file so we have provided these values into the demo dot JSON file let me just split the screen so you will be able to see it correctly so we have provided a name here so name is here age is here marks is here and then the object is he and also the pass is also here so this is how you can write your Jason values into a file now let's see how we can read the Jason values from a file so I'm going to remove this dictionary from here and instead of using this write mode I'm going to just use read mode which we use to read from the file and a file we already have so let's say we want to read all this data which we have written into this file and now instead of using this line I need to use FH dot read function here and to print the content what we have read from this file we can use the print function so I'm going to enclose this FX dot read into the print function and let's run the code first of all and when I run this code you can see it friends all the content of this jason now one thing which you need to observe here is this efetch dot read function is going to give you a string value so to confirm that we can just write type here and we will just see the type of this FX dot read function and I'm going to run the code let's see what's the answer so you can see this read replies you in the form of string so in order to convert this string into some possible format you use our function called jason dot loads so I'm going to save this string into our let's say a variable jason underscore str this is the variable name and we will assign whatever we read from the file into this variable and now what we can do here is we can convert the string into a jason value using a method called jason dot loads so let me create a variable once again so jason value is the variable name and then I can use this jason keyword which we have imported dot loads function so just use the loads function and then pass the string as an argument of this loads function so this loads function takes a string and converts into adjacent values so now let's print the type of the Jason values I'm going to just write print type and then we use the Jason value argument here and then once again run the code and you will see now the jason value data type is the dictionary so because now it's a dictionary we can pass some values from it so let's say from this Jason value dictionary we want to get the name so name here we have stored is max so we can just give the key here name and then run the code it's going to give us the value associated with the name which is max so this json dot loads function we use to convert from a jason or a string value into a Python dictionary so this is how you can handle Jason values in Python I hope you have enjoyed this video and I will see you in the next video
