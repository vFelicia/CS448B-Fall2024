With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - python tutorial for beginners in this
00:04 - video we will discuss how to create
00:06 - modules in Python now in the previous
00:10 - videos I have already discussed briefly
00:14 - about built in modules and how to import
00:18 - a built-in module you use an import
00:20 - keyword and then you use the name of the
00:24 - built in module in Python built-in means
00:27 - this module is already present in Python
00:31 - so we can use these built in module in
00:33 - order to perform some functionality so
00:37 - for example this math module helps us to
00:40 - perform some mathematical operations now
00:43 - first of all what is a module so it
00:47 - turns out that a module is nothing but a
00:52 - Python file now to prove my point
00:56 - let me just hover over this math module
01:00 - and just press control and then hover
01:03 - over it so right now I am pressing
01:06 - control and I'm hovering my mouse over
01:09 - this mat on the pycharm IDE and now I'm
01:12 - going to click it and when I click it
01:15 - you will see this module is nothing but
01:18 - a file right and inside this module we
01:22 - have a number of functions which we can
01:26 - use for example a COS function
01:29 - or a tan function or many different
01:33 - functions which we can use from this
01:36 - math module so a module is nothing but a
01:40 - Python file now if a module is nothing
01:43 - but a Python file why don't we create a
01:46 - module and it turns out that Python
01:49 - allows us to create our own modules so
01:54 - let's create our own modules and let me
01:56 - show you how you can create your own
01:59 - module and right now you can see in my
02:02 - project there is only one file which is
02:04 - hello dot py and it's empty right now
02:08 - now to create a module I am going to
02:11 - just create a new file so right click
02:13 - and then new Python file and this module
02:16 - I'm going to name it as my functions and
02:20 - then press ok and this file is created
02:23 - so now I have two files in my project
02:26 - one is my functions and other is hello
02:29 - dot py so let's say I want to create
02:31 - some functions inside this my functions
02:34 - dot py file so let's create some
02:38 - function I'm going to very quickly
02:40 - create some very basic functions which
02:44 - you already know in Python so so let's
02:48 - say I add function which returns the
02:51 - addition of two numbers and also let's
02:54 - create let's say multiply function so
02:58 - multiply and this is going to just give
03:01 - the product of two numbers so let's say
03:04 - this is our module and it has two
03:07 - functions now somehow I need to use
03:11 - these two functions from my functions
03:15 - dot py file into this hello dot py file
03:19 - now as you can see these two files are
03:22 - in the same directory right so I can
03:26 - import this my functions file using
03:30 - import and then the name of the file
03:32 - which is my functions and that's it so
03:36 - in order to import a module you just
03:39 - write a keyword called import and then
03:42 - you just write the name of the file
03:44 - without the extension py ok so you don't
03:47 - need to provide any extension here and
03:50 - then I can use this function so let's
03:53 - say I want to print my function which is
03:56 - the file name so whatever file name you
04:00 - give here you need to use the file name
04:02 - here dot you will see all the functions
04:06 - in the file are now visible in the other
04:09 - file which is Hallowed py so let's use
04:11 - this add function and I'm going to just
04:15 - give two parameters here and also let's
04:18 - use the multiply function from my
04:21 - functions file so the file name and the
04:26 - method name or
04:27 - function name and let's give two
04:29 - parameters here also and that's it so
04:32 - it's that simple to create your own
04:35 - modules and import them in to other
04:39 - files in Python now when I run this
04:42 - program is going to give me the addition
04:45 - and the product of these two argument
04:49 - which I have provided here now let's say
04:52 - your my functions file is in some other
04:57 - directory so let me create a directory
05:00 - so I'm going to right click here and
05:02 - then I'm going to create a directory and
05:04 - I'm going to name it as dir and then
05:07 - click OK and now I'm going to move this
05:11 - my functions dot py file into the new
05:15 - directory so I'm going to just right
05:17 - click and cut from here this file and
05:19 - I'm going to just paste this file into
05:22 - the dir directory ok so let me just
05:26 - click OK here and as soon as I do this
05:29 - you will see here my charm is
05:31 - intelligent enough to refactor this code
05:34 - and now it has given us the correct
05:37 - import ok so if this my functions file
05:43 - is in some directory then you use this
05:46 - type of notation so you write from and
05:48 - then your directory name and then import
05:52 - keyword and then your file name so you
05:55 - can see this is the directory name and
05:57 - this is the file name so I use from
06:00 - directory name import file name and when
06:04 - I run the code once again it's going to
06:06 - give me the same answer now there is one
06:09 - more way of writing the same notation
06:12 - and that is using the import so use
06:16 - import keyword and then write the name
06:19 - of your directory dot the name of your
06:22 - file so directory dot the file name and
06:25 - then you use this name in place of your
06:31 - my function name ok and once again when
06:35 - you run the code it runs fine now
06:38 - sometimes you might feel that this is a
06:41 - law
06:41 - name and Python have the solution for it
06:45 - also so it turns out that you can rename
06:49 - your file using a keyword called as so
06:55 - after the import so import directory
06:58 - name dot file name as and then you can
07:02 - provide your name for example my
07:05 - functions I will just name it as MF ok
07:08 - and now I can use this MF name instead
07:12 - of this big name and this will also work
07:17 - fine so either you can import from your
07:21 - file which is inside the directory using
07:24 - this notation or you can use this
07:26 - notation you can also write as in front
07:30 - of this notation also so from directory
07:35 - name import file name as whatever name
07:38 - you want to give here and this you can
07:40 - use to call your function using this dot
07:44 - notation now this was the easy stuff and
07:47 - I have just written here the two
07:51 - functions and then imported these two
07:53 - functions into the other file
07:56 - but what if if I have multiple classes I
08:00 - haven't shown you how to import files
08:03 - which have classes in them so let's see
08:07 - how to import the Python files which
08:09 - have classes inside them so I'm going to
08:12 - close these two files and in the last
08:15 - video I have shown you how to use
08:18 - inheritance in Python and we have
08:21 - created this class polygon and two other
08:24 - classes which is triangle and the
08:27 - rectangle class and this might be right
08:29 - now the perfect candidate to import into
08:34 - some other file so I'm going to create
08:37 - two more file one is the rectangle file
08:41 - so I'm going to just right click and
08:42 - create a Python file and I'm going to
08:44 - name it as rectangle and I'm going to
08:48 - create one more file with the name of
08:50 - triangle so right-click new Python file
08:53 - and the name
08:55 - is triangle dot py and let me create the
08:59 - fourth file which I'm going to name it
09:01 - as main and this will be our main file
09:04 - in which we will import all these
09:07 - classes so in my polygons class I will
09:10 - just leave this polygon class and I will
09:13 - just transfer this rectangle class into
09:16 - the rectangle dot py file and this
09:20 - triangle class into triangle dot py file
09:24 - and also this was the instantiation of
09:28 - the rectangle and triangle class which
09:30 - we have done so I will transfer this
09:32 - code into our mean dot py file ok so now
09:37 - we have a polygon dot py file in which
09:41 - we have the polygon class and then we
09:44 - have the rectangle class inside
09:47 - rectangle dot py and also we have the
09:50 - triangle class into the triangle dot py
09:53 - file and rest of the code we have inside
09:57 - the main dot py now when you go to the
10:01 - rectangle dot py you will see that it's
10:04 - inheriting from the polygon class that
10:08 - means we need to import polygon class
10:11 - into the rectangle dot py file so how to
10:14 - import it you can use from and then the
10:18 - file name which is polygon and then use
10:21 - import keyword and use the name of the
10:25 - class which is polygon and you will see
10:27 - that this error is gone and same we will
10:31 - do inside the triangle dot py file in
10:35 - order to import the polygon class into
10:38 - that triangle dot py file so this is the
10:43 - file name so from file name import the
10:46 - class name now when I go to the polygon
10:49 - class we don't need to import anything
10:50 - here because it's a superclass and there
10:53 - is no import needed here let's go to the
10:56 - main dot py file and here you will see
10:58 - red squiggly line under rectangle and
11:02 - triangle class because we haven't
11:05 - imported this triangle dot py and the
11:08 - rectangle
11:09 - py into our main Python file so the
11:12 - procedure is same from your file name
11:16 - which is first of all rectangle import
11:20 - the name of the class which is rectangle
11:23 - same we will do for the triangle class
11:27 - so from the triangle file named triangle
11:31 - dot py and then import and then the name
11:35 - of the triangle class and you will see
11:37 - as soon as you do this the error is gone
11:41 - so now there is no red squiggly line
11:44 - under any of the code so now let's run
11:48 - the code so I'm going to just go to the
11:51 - main dot py file and I'm going to right
11:54 - click on this main dot py file and I'm
11:57 - going to just click on run mean which is
12:00 - going to run the program and it's going
12:02 - to print the result which is the area of
12:05 - rectangle and the area of the triangle
12:09 - so in this way you can import the py
12:12 - file which have classes inside them so
12:15 - this is how you create your own modules
12:18 - in Python and import them into other
12:22 - Python files I hope you have learned
12:24 - something new this time and I will see
12:27 - you in the next video

Cleaned transcript:

hey guys welcome to the next video on python tutorial for beginners in this video we will discuss how to create modules in Python now in the previous videos I have already discussed briefly about built in modules and how to import a builtin module you use an import keyword and then you use the name of the built in module in Python builtin means this module is already present in Python so we can use these built in module in order to perform some functionality so for example this math module helps us to perform some mathematical operations now first of all what is a module so it turns out that a module is nothing but a Python file now to prove my point let me just hover over this math module and just press control and then hover over it so right now I am pressing control and I'm hovering my mouse over this mat on the pycharm IDE and now I'm going to click it and when I click it you will see this module is nothing but a file right and inside this module we have a number of functions which we can use for example a COS function or a tan function or many different functions which we can use from this math module so a module is nothing but a Python file now if a module is nothing but a Python file why don't we create a module and it turns out that Python allows us to create our own modules so let's create our own modules and let me show you how you can create your own module and right now you can see in my project there is only one file which is hello dot py and it's empty right now now to create a module I am going to just create a new file so right click and then new Python file and this module I'm going to name it as my functions and then press ok and this file is created so now I have two files in my project one is my functions and other is hello dot py so let's say I want to create some functions inside this my functions dot py file so let's create some function I'm going to very quickly create some very basic functions which you already know in Python so so let's say I add function which returns the addition of two numbers and also let's create let's say multiply function so multiply and this is going to just give the product of two numbers so let's say this is our module and it has two functions now somehow I need to use these two functions from my functions dot py file into this hello dot py file now as you can see these two files are in the same directory right so I can import this my functions file using import and then the name of the file which is my functions and that's it so in order to import a module you just write a keyword called import and then you just write the name of the file without the extension py ok so you don't need to provide any extension here and then I can use this function so let's say I want to print my function which is the file name so whatever file name you give here you need to use the file name here dot you will see all the functions in the file are now visible in the other file which is Hallowed py so let's use this add function and I'm going to just give two parameters here and also let's use the multiply function from my functions file so the file name and the method name or function name and let's give two parameters here also and that's it so it's that simple to create your own modules and import them in to other files in Python now when I run this program is going to give me the addition and the product of these two argument which I have provided here now let's say your my functions file is in some other directory so let me create a directory so I'm going to right click here and then I'm going to create a directory and I'm going to name it as dir and then click OK and now I'm going to move this my functions dot py file into the new directory so I'm going to just right click and cut from here this file and I'm going to just paste this file into the dir directory ok so let me just click OK here and as soon as I do this you will see here my charm is intelligent enough to refactor this code and now it has given us the correct import ok so if this my functions file is in some directory then you use this type of notation so you write from and then your directory name and then import keyword and then your file name so you can see this is the directory name and this is the file name so I use from directory name import file name and when I run the code once again it's going to give me the same answer now there is one more way of writing the same notation and that is using the import so use import keyword and then write the name of your directory dot the name of your file so directory dot the file name and then you use this name in place of your my function name ok and once again when you run the code it runs fine now sometimes you might feel that this is a law name and Python have the solution for it also so it turns out that you can rename your file using a keyword called as so after the import so import directory name dot file name as and then you can provide your name for example my functions I will just name it as MF ok and now I can use this MF name instead of this big name and this will also work fine so either you can import from your file which is inside the directory using this notation or you can use this notation you can also write as in front of this notation also so from directory name import file name as whatever name you want to give here and this you can use to call your function using this dot notation now this was the easy stuff and I have just written here the two functions and then imported these two functions into the other file but what if if I have multiple classes I haven't shown you how to import files which have classes in them so let's see how to import the Python files which have classes inside them so I'm going to close these two files and in the last video I have shown you how to use inheritance in Python and we have created this class polygon and two other classes which is triangle and the rectangle class and this might be right now the perfect candidate to import into some other file so I'm going to create two more file one is the rectangle file so I'm going to just right click and create a Python file and I'm going to name it as rectangle and I'm going to create one more file with the name of triangle so rightclick new Python file and the name is triangle dot py and let me create the fourth file which I'm going to name it as main and this will be our main file in which we will import all these classes so in my polygons class I will just leave this polygon class and I will just transfer this rectangle class into the rectangle dot py file and this triangle class into triangle dot py file and also this was the instantiation of the rectangle and triangle class which we have done so I will transfer this code into our mean dot py file ok so now we have a polygon dot py file in which we have the polygon class and then we have the rectangle class inside rectangle dot py and also we have the triangle class into the triangle dot py file and rest of the code we have inside the main dot py now when you go to the rectangle dot py you will see that it's inheriting from the polygon class that means we need to import polygon class into the rectangle dot py file so how to import it you can use from and then the file name which is polygon and then use import keyword and use the name of the class which is polygon and you will see that this error is gone and same we will do inside the triangle dot py file in order to import the polygon class into that triangle dot py file so this is the file name so from file name import the class name now when I go to the polygon class we don't need to import anything here because it's a superclass and there is no import needed here let's go to the main dot py file and here you will see red squiggly line under rectangle and triangle class because we haven't imported this triangle dot py and the rectangle py into our main Python file so the procedure is same from your file name which is first of all rectangle import the name of the class which is rectangle same we will do for the triangle class so from the triangle file named triangle dot py and then import and then the name of the triangle class and you will see as soon as you do this the error is gone so now there is no red squiggly line under any of the code so now let's run the code so I'm going to just go to the main dot py file and I'm going to right click on this main dot py file and I'm going to just click on run mean which is going to run the program and it's going to print the result which is the area of rectangle and the area of the triangle so in this way you can import the py file which have classes inside them so this is how you create your own modules in Python and import them into other Python files I hope you have learned something new this time and I will see you in the next video
