With timestamps:

00:00 - so let's say I want to create a very
00:03 - simple hello world Java program here
00:06 - I can create a Java file using this icon
00:10 - or using file and then new file or I can
00:14 - simply right click here and then click
00:16 - on new file here
00:17 - so I'm going to name my file as hello
00:21 - dot Java
00:24 - and once I do that I will just press
00:27 - enter and once you create this file you
00:30 - can see Visual Studio code is going to
00:33 - automatically detect the file extension
00:37 - and you will be able to see this
00:40 - language here you can also see projects
00:43 - are imported into workspace
00:46 - so let me just create a very simple
00:49 - hello class in this hello.java file so
00:53 - I'm going to just type class here and
00:56 - you can see Visual Studio code is going
00:58 - to detect that you are trying to create
01:00 - a class in this hello.java file and when
01:04 - you just select the second option here
01:07 - you can see Visual Studio code has
01:10 - automatically created this hello class
01:14 - for me now in order to create a main
01:16 - method inside this hello class I can
01:19 - just type main here and once again
01:22 - Visual Studio code is going to show you
01:25 - intellisense and show you all these
01:27 - options and it has detected that I want
01:30 - to create the main method inside this
01:33 - class and I'm going to just select the
01:36 - first option here which is going to
01:38 - create the main method inside this hello
01:42 - class from me automatically so how
01:44 - simple this is right now let's say I
01:47 - want to just type hello world I can just
01:50 - write system dot out dot print line and
01:56 - at every step you will be able to see
01:58 - this intellisense so I will be able to
02:02 - complete my code faster
02:05 - and then let me just print hello
02:09 - volt here and it's that simple to create
02:12 - your first hello world Java program
02:15 - right now how you can run your Java
02:18 - programs so you for that you have few
02:20 - options here the obvious one is this one
02:23 - which is this run button and it's going
02:27 - to run your Java program the second
02:28 - option is to just right click on your
02:32 - Java file and when you scroll down and
02:35 - you will be able to see this run Java
02:37 - option and the bug Java option so you
02:40 - can use these two options to run and
02:42 - debug your Java program or you will see
02:47 - this option here on the top of your main
02:50 - method run or debug so you can also use
02:55 - one of these options to run your program
02:58 - or debug your program you also have this
03:02 - run option here and it's going to allow
03:05 - you to start debugging and
03:07 - all the other options related to
03:09 - debugging are available here also so
03:12 - let's run our program so I'm going to
03:14 - just click on this run button which is
03:17 - going to compile our Java program and
03:19 - for the first time it's going to show me
03:22 - this warning I'm going to just click on
03:24 - allow access and you can see Visual
03:27 - Studio code has already compiled our
03:30 - code and ran our code and the output is
03:33 - printed here now let's say you forget to
03:35 - type the semicolon here Visual Studio
03:37 - code is going to show you this red error
03:40 - and it's also going to show you what can
03:43 - be this error so you see it's a syntax
03:46 - error and we need to insert the
03:49 - semicolon at the last right so
03:52 - it's going to help you to detect the
03:55 - errors in your Java code also now let's
03:58 - say you have written the wrong code
04:00 - which will not compile but then also you
04:04 - want to just
04:05 - compile it then you will see this error
04:09 - here in the problems Tab and you will
04:12 - see the details of the error here right
04:15 - so the exact line number on which the
04:19 - error is coming and
04:21 - when you click on this error it's going
04:23 - to just redirect you to the particular
04:26 - line from which the error is coming
04:29 - so this is how you can detect the errors
04:32 - and fix them
04:34 - Also let's try to debug our code so you
04:37 - can click on this debug option here or
04:41 - you can click on this debug icon here on
04:45 - the left hand side and then you can
04:48 - click on run and debug option so I'm
04:51 - going to click on run and debug which is
04:53 - going to start the Java debugger and
04:56 - because I haven't added any breakpoint
04:59 - my debugger has ran successfully and it
05:04 - has printed hello world let's say I will
05:06 - just add a break point here
05:09 - all my break points I will be able to
05:11 - see here under breakpoints so I can add
05:14 - multiple breakpoints in my code using
05:18 - these red dots and I can keep the track
05:21 - of all the breakpoints under this
05:24 - breakpoints section I can disable all
05:28 - the breakpoint at once using this toggle
05:31 - active breakpoint button which is going
05:34 - to de-activate all the breakpoints if I
05:37 - want to remove all the breakpoints then
05:40 - I can just click on this icon which is
05:42 - going to remove all the breakpoints
05:44 - right
05:45 - let's say I have just added the
05:47 - breakpoint here
05:49 - and then run the debugger once again
05:53 - this time you can see the execution of
05:55 - my code has been stopped on the
05:59 - breakpoint and I will be able to see the
06:02 - argument values here and then I have all
06:06 - these options so I can continue using
06:10 - this button I can step over to the next
06:13 - line I can step into a method or I can
06:18 - step out from a method I can also
06:21 - restart my debugger stop my debugger and
06:25 - this option is for hot code replace
06:28 - option right
06:30 - so I have all these options here so now
06:33 - let me just stop this debugging from
06:36 - here and let me add some codes so let's
06:39 - say I just declared two number number
06:43 - one which will be equal to 5 let's say
06:46 - and then I'm going to declare a second
06:50 - variable which is called num2 and the
06:53 - value of it is 10 let's say right and
06:56 - I'm going to create a third
07:00 - variable which will be called let's say
07:03 - sum here
07:04 - and it will be the sum of num1 plus num
07:09 - 2 right so you will be able to see at
07:13 - each and every Point uh Visual Studio
07:15 - code is going to show us hint and
07:17 - intellisense to complete our code faster
07:20 - and now I want to just print the value
07:23 - of sum here right and now I have
07:27 - more debugging possibilities and let me
07:31 - just start the debugger once again I
07:34 - have added three break points here and
07:36 - here you can see
07:38 - that I will be able to keep the track of
07:41 - all the local variables here I can also
07:44 - watch for some variables here for
07:47 - example I want to watch for a variable
07:49 - called sum I can just add that but the
07:52 - program execution is still not there so
07:56 - right now cannot evaluate because of the
08:00 - compilation error right so let's step
08:03 - over to the next line you can see the
08:05 - value 5 is assigned to a variable num1
08:08 - step once again now num2 has 10 and then
08:14 - step over once again now we have the sum
08:17 - which is equal to 15 and this variable
08:20 - we were watching right so it was in a
08:23 - watch list so now it shows the value
08:26 - right so you can see the global and
08:30 - local variable lists here you can watch
08:33 - for some variables and you have the
08:37 - track of all these break points here
08:40 - right
08:41 - so this is how you can debug your Java
08:44 - code on your Visual Studio code also
08:48 - have the possibility so let me just stop
08:50 - this debugger so you also have the
08:53 - possibility to create a launch.json file
08:57 - and here you can provide the
08:59 - configuration related to debugging on
09:03 - this launch.json file so you can click
09:06 - on this create a launch dot Json file so
09:09 - just click on this launch.json file
09:12 - which is going to create this
09:14 - launch.json file and you can see all the
09:17 - configuration related to the Java
09:20 - debugging and when you click on the
09:22 - Explorer option you will be able to see
09:24 - this dot vs code folder is created and
09:28 - under that you have this launch dot Json
09:30 - file
09:31 - so this is good when you are just
09:35 - creating your program and then just
09:38 - pushing it to some GitHub repository and
09:41 - then somebody else will be able to take
09:43 - your launch configuration and he will be
09:47 - able to use it for debugging your Java
09:51 - program right you also have this GitHub
09:55 - versioning for your source code so when
09:58 - you have get installed Visual Studio
10:01 - code is going to track all the changes
10:04 - which you make on your project in your
10:07 - Java files and it will allow you to
10:09 - commit or post your code or pull some
10:12 - repository from GitHub or any other
10:15 - repository right you can also search for
10:19 - some code using the search option and if
10:23 - these extensions are not enough you can
10:26 - search more Java related Extensions by
10:30 - just typing Java and and then you will
10:32 - be able to find more Java related
10:34 - extensions here so you can install them
10:36 - and use them for developing different
10:40 - Java
10:42 - framework so let us say I want to add
10:44 - the support for spring so I can just
10:46 - install the this extension and then
10:50 - develop spring based app in my visual
10:53 - studio code editor so this is how you
10:55 - can set up and use Java in your Visual
10:58 - Studio code editor I hope you've enjoyed
11:01 - this video and I will see you in the
11:03 - next video

Cleaned transcript:

so let's say I want to create a very simple hello world Java program here I can create a Java file using this icon or using file and then new file or I can simply right click here and then click on new file here so I'm going to name my file as hello dot Java and once I do that I will just press enter and once you create this file you can see Visual Studio code is going to automatically detect the file extension and you will be able to see this language here you can also see projects are imported into workspace so let me just create a very simple hello class in this hello.java file so I'm going to just type class here and you can see Visual Studio code is going to detect that you are trying to create a class in this hello.java file and when you just select the second option here you can see Visual Studio code has automatically created this hello class for me now in order to create a main method inside this hello class I can just type main here and once again Visual Studio code is going to show you intellisense and show you all these options and it has detected that I want to create the main method inside this class and I'm going to just select the first option here which is going to create the main method inside this hello class from me automatically so how simple this is right now let's say I want to just type hello world I can just write system dot out dot print line and at every step you will be able to see this intellisense so I will be able to complete my code faster and then let me just print hello volt here and it's that simple to create your first hello world Java program right now how you can run your Java programs so you for that you have few options here the obvious one is this one which is this run button and it's going to run your Java program the second option is to just right click on your Java file and when you scroll down and you will be able to see this run Java option and the bug Java option so you can use these two options to run and debug your Java program or you will see this option here on the top of your main method run or debug so you can also use one of these options to run your program or debug your program you also have this run option here and it's going to allow you to start debugging and all the other options related to debugging are available here also so let's run our program so I'm going to just click on this run button which is going to compile our Java program and for the first time it's going to show me this warning I'm going to just click on allow access and you can see Visual Studio code has already compiled our code and ran our code and the output is printed here now let's say you forget to type the semicolon here Visual Studio code is going to show you this red error and it's also going to show you what can be this error so you see it's a syntax error and we need to insert the semicolon at the last right so it's going to help you to detect the errors in your Java code also now let's say you have written the wrong code which will not compile but then also you want to just compile it then you will see this error here in the problems Tab and you will see the details of the error here right so the exact line number on which the error is coming and when you click on this error it's going to just redirect you to the particular line from which the error is coming so this is how you can detect the errors and fix them Also let's try to debug our code so you can click on this debug option here or you can click on this debug icon here on the left hand side and then you can click on run and debug option so I'm going to click on run and debug which is going to start the Java debugger and because I haven't added any breakpoint my debugger has ran successfully and it has printed hello world let's say I will just add a break point here all my break points I will be able to see here under breakpoints so I can add multiple breakpoints in my code using these red dots and I can keep the track of all the breakpoints under this breakpoints section I can disable all the breakpoint at once using this toggle active breakpoint button which is going to deactivate all the breakpoints if I want to remove all the breakpoints then I can just click on this icon which is going to remove all the breakpoints right let's say I have just added the breakpoint here and then run the debugger once again this time you can see the execution of my code has been stopped on the breakpoint and I will be able to see the argument values here and then I have all these options so I can continue using this button I can step over to the next line I can step into a method or I can step out from a method I can also restart my debugger stop my debugger and this option is for hot code replace option right so I have all these options here so now let me just stop this debugging from here and let me add some codes so let's say I just declared two number number one which will be equal to 5 let's say and then I'm going to declare a second variable which is called num2 and the value of it is 10 let's say right and I'm going to create a third variable which will be called let's say sum here and it will be the sum of num1 plus num 2 right so you will be able to see at each and every Point uh Visual Studio code is going to show us hint and intellisense to complete our code faster and now I want to just print the value of sum here right and now I have more debugging possibilities and let me just start the debugger once again I have added three break points here and here you can see that I will be able to keep the track of all the local variables here I can also watch for some variables here for example I want to watch for a variable called sum I can just add that but the program execution is still not there so right now cannot evaluate because of the compilation error right so let's step over to the next line you can see the value 5 is assigned to a variable num1 step once again now num2 has 10 and then step over once again now we have the sum which is equal to 15 and this variable we were watching right so it was in a watch list so now it shows the value right so you can see the global and local variable lists here you can watch for some variables and you have the track of all these break points here right so this is how you can debug your Java code on your Visual Studio code also have the possibility so let me just stop this debugger so you also have the possibility to create a launch.json file and here you can provide the configuration related to debugging on this launch.json file so you can click on this create a launch dot Json file so just click on this launch.json file which is going to create this launch.json file and you can see all the configuration related to the Java debugging and when you click on the Explorer option you will be able to see this dot vs code folder is created and under that you have this launch dot Json file so this is good when you are just creating your program and then just pushing it to some GitHub repository and then somebody else will be able to take your launch configuration and he will be able to use it for debugging your Java program right you also have this GitHub versioning for your source code so when you have get installed Visual Studio code is going to track all the changes which you make on your project in your Java files and it will allow you to commit or post your code or pull some repository from GitHub or any other repository right you can also search for some code using the search option and if these extensions are not enough you can search more Java related Extensions by just typing Java and and then you will be able to find more Java related extensions here so you can install them and use them for developing different Java framework so let us say I want to add the support for spring so I can just install the this extension and then develop spring based app in my visual studio code editor so this is how you can set up and use Java in your Visual Studio code editor I hope you've enjoyed this video and I will see you in the next video
