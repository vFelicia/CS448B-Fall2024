With timestamps:

00:00 - hello guys welcome once again in this
00:02 - video I'm going to show you the
00:03 - difference between interfaces and
00:06 - Abstract classes so let's see the
00:09 - differences between abstract classes and
00:13 - interfaces first of all first difference
00:16 - between interface and abstract class is
00:19 - interface supports multiple inheritance
00:22 - whereas abstract classes does not does
00:25 - not support multiple inheritance so
00:28 - let's see what this means
00:30 - so in the earlier videos I have shown
00:33 - you that if you define two
00:36 - interfaces meter IM meter 1 and IM meter
00:39 - 2 you can inherit from both the
00:43 - interfaces like this meter 1 comma meter
00:47 - 2 right and this is valid so you can
00:51 - inherit from multiple interfaces but on
00:55 - the other hand if you want to inherit
00:57 - from a class normal class or abstract
01:00 - class doesn't matter you cannot inherit
01:04 - from
01:05 - multiple base classes okay for example
01:09 - you want to do something like this and
01:11 - you have one more class meter one you
01:14 - cannot write like this okay so
01:18 - interfaces support multiple inheritance
01:21 - whereas abstract classes does
01:23 - not the second difference is interfaces
01:28 - doesn't contain data m members or fields
01:31 - and Abstract classes contains data
01:34 - members so let's see what this mean your
01:38 - interface when I Define for example I
01:41 - want to Define some field in
01:44 - or int ABC for example some some some
01:49 - field it's not allowed in interface when
01:52 - you compile this program it will give
01:54 - you an error because you cannot Define
01:57 - fields in interfaces on the other hand
02:01 - if you want to Define fields in abstrct
02:04 - classes you can do so so you can just
02:07 - Define public in ABC and when you
02:11 - compile your program it will compile
02:15 - fine this error is not for this um field
02:19 - but you we I haven't provided the
02:22 - implementation of this abstract class so
02:24 - this error is for that but you can
02:28 - Define these Fe fields for abstract
02:32 - classes and you cannot Define fields for
02:35 - interfaces right the third difference
02:38 - is interfaces doesn't have Constructor
02:42 - and Abstract classes have Constructor
02:44 - right so it's easy uh by definition only
02:48 - you can see a class can have Constructor
02:52 - right but in interface is not a class
02:55 - and in that's why it doesn't have
02:59 - Constructor
03:00 - okay the fourth difference is interface
03:04 - contains only incomplete members whereas
03:08 - abstra abstract classes can contain
03:11 - incomplete member or complete members so
03:14 - in the earlier videos I have shown
03:17 - you that uh your interface for example
03:22 - this only contains the incomplete member
03:26 - you cannot D or define the definition of
03:29 - this print meter or other definition
03:34 - inside your interface you cannot define
03:37 - the definition of this method inside
03:38 - your interface right but on the other
03:41 - hand your abstract class can contain
03:44 - this kind of a method for example print
03:47 - meter which
03:50 - have like this and which can have
03:54 - definition if it's not an abstract
03:57 - method okay so you can have normal
04:00 - method inside your abstract class which
04:02 - can have definitions you can just print
04:05 - any message here right but you cannot
04:08 - provide definition or source code inside
04:12 - your interface method okay the fifth
04:17 - difference is an interface can have
04:20 - access
04:21 - modifiers by
04:23 - default that means all interface access
04:27 - members are public okay okay so
04:30 - interface cannot have access modifier on
04:32 - the other hand your abstract classes can
04:36 - have access modifiers Subs function
04:39 - properties
04:41 - so you can see the these method
04:44 - declaration and you can easily say that
04:46 - this access specifier public you can
04:49 - have access specifier in the abstract
04:53 - member declaration but when you try to
04:56 - Define
04:58 - this or when you trying to give public
05:01 - specifier to interface method it's not
05:05 - valid
05:07 - okay and let's see the last difference
05:11 - the member of interface can be cannot be
05:15 - static right
05:17 - but uh only complete members of abstract
05:21 - class have static method that means you
05:25 - cannot Define your interface method like
05:28 - this
05:30 - static okay it
05:33 - doesn't it's not allowed but on the
05:35 - other hand I can have static method
05:38 - inside my abstract class if it's not a
05:41 - abstract method this cannot have static
05:45 - me or this cannot be declared
05:48 - as like this because this should be
05:54 - static so it this abstract method cannot
05:57 - be defined as static but if you define a
06:02 - normal method inside a abstract class it
06:05 - can be static method right so this
06:09 - should be not like this but here static
06:13 - comes and it's totally valid but if your
06:18 - abstract class have abstract method this
06:22 - cannot be static but normal method
06:24 - inside the abstract class can be uh can
06:27 - be declared as static
06:29 - so these are some of the differences or
06:33 - you can
06:35 - say uh interface versus class uh
06:38 - differences in C I hope you have enjoyed
06:42 - this video please writ comment and
06:43 - subscribe and bye

Cleaned transcript:

hello guys welcome once again in this video I'm going to show you the difference between interfaces and Abstract classes so let's see the differences between abstract classes and interfaces first of all first difference between interface and abstract class is interface supports multiple inheritance whereas abstract classes does not does not support multiple inheritance so let's see what this means so in the earlier videos I have shown you that if you define two interfaces meter IM meter 1 and IM meter 2 you can inherit from both the interfaces like this meter 1 comma meter 2 right and this is valid so you can inherit from multiple interfaces but on the other hand if you want to inherit from a class normal class or abstract class doesn't matter you cannot inherit from multiple base classes okay for example you want to do something like this and you have one more class meter one you cannot write like this okay so interfaces support multiple inheritance whereas abstract classes does not the second difference is interfaces doesn't contain data m members or fields and Abstract classes contains data members so let's see what this mean your interface when I Define for example I want to Define some field in or int ABC for example some some some field it's not allowed in interface when you compile this program it will give you an error because you cannot Define fields in interfaces on the other hand if you want to Define fields in abstrct classes you can do so so you can just Define public in ABC and when you compile your program it will compile fine this error is not for this um field but you we I haven't provided the implementation of this abstract class so this error is for that but you can Define these Fe fields for abstract classes and you cannot Define fields for interfaces right the third difference is interfaces doesn't have Constructor and Abstract classes have Constructor right so it's easy uh by definition only you can see a class can have Constructor right but in interface is not a class and in that's why it doesn't have Constructor okay the fourth difference is interface contains only incomplete members whereas abstra abstract classes can contain incomplete member or complete members so in the earlier videos I have shown you that uh your interface for example this only contains the incomplete member you cannot D or define the definition of this print meter or other definition inside your interface you cannot define the definition of this method inside your interface right but on the other hand your abstract class can contain this kind of a method for example print meter which have like this and which can have definition if it's not an abstract method okay so you can have normal method inside your abstract class which can have definitions you can just print any message here right but you cannot provide definition or source code inside your interface method okay the fifth difference is an interface can have access modifiers by default that means all interface access members are public okay okay so interface cannot have access modifier on the other hand your abstract classes can have access modifiers Subs function properties so you can see the these method declaration and you can easily say that this access specifier public you can have access specifier in the abstract member declaration but when you try to Define this or when you trying to give public specifier to interface method it's not valid okay and let's see the last difference the member of interface can be cannot be static right but uh only complete members of abstract class have static method that means you cannot Define your interface method like this static okay it doesn't it's not allowed but on the other hand I can have static method inside my abstract class if it's not a abstract method this cannot have static me or this cannot be declared as like this because this should be static so it this abstract method cannot be defined as static but if you define a normal method inside a abstract class it can be static method right so this should be not like this but here static comes and it's totally valid but if your abstract class have abstract method this cannot be static but normal method inside the abstract class can be uh can be declared as static so these are some of the differences or you can say uh interface versus class uh differences in C I hope you have enjoyed this video please writ comment and subscribe and bye
