With timestamps:

00:01 - hey guys welcome back in this video we
00:03 - will talk about
00:04 - nest js so nest js framework
00:08 - is increasingly becoming popular among
00:11 - developers who want to build
00:13 - scalable server-side applications so
00:17 - those of you who don't know what nest js
00:20 - is
00:20 - you can go to this website which is nest
00:22 - js.com
00:24 - and according to this website ness js is
00:27 - a progressive
00:28 - node.js framework for building efficient
00:31 - reliable and scalable server side
00:34 - applications
00:35 - so nest js fully supports
00:39 - typescript and in the background it uses
00:42 - node.js framework and express so what we
00:46 - are going to do is we are going to
00:48 - learn how we can use nest js to build
00:52 - our rest application although nest js
00:54 - supports many
00:56 - different protocols but for start
00:59 - we are going to build a rest application
01:02 - using
01:02 - nest js now nest js have a very
01:06 - extensive
01:07 - and very good documentation so if you
01:09 - are thinking about starting
01:12 - nest chess you can click on the
01:14 - documentation
01:16 - tab and you will be able to see tons
01:19 - of good documentation so under the
01:22 - documentation you can see
01:24 - what nest js can do and what are the
01:27 - technologies it supports
01:29 - so you can see under the techniques it
01:32 - can support
01:33 - authentication database configuration
01:35 - validation caching
01:37 - so many things it can support also it
01:40 - can support
01:41 - graphql websockets micro services
01:44 - like redis mqtt rabbit and q
01:47 - kafka also it has the support for
01:51 - open api swagger ui and many other good
01:55 - stuff also if you can want to see
01:58 - how popular nest js is you can go to the
02:02 - github page for nest js
02:04 - and you can see as of today it has
02:07 - more than 31 000 stars so it's becoming
02:10 - really popular so let's talk about the
02:13 - prerequisites
02:14 - of learning nest js so
02:17 - knowledge of typescript and javascript
02:21 - will be very important for learning nest
02:23 - js
02:24 - if you have the experience of angular
02:27 - it will be a plus because it uses
02:30 - techniques
02:31 - which are already used in angular for
02:33 - example
02:34 - now because we are going to be building
02:36 - a restful api
02:38 - it's good to have a rest uh client
02:41 - such as postmen uh in order to test your
02:45 - arrest application also make sure you
02:47 - have the latest version of node.js
02:50 - installed on your operating system
02:53 - so once you have all these uh tools
02:56 - we are good to go and let's get started
03:00 - so what we are going to do we are going
03:03 - to
03:04 - just open our terminal and we are going
03:06 - to install some
03:08 - nest js packages so what i did is i
03:12 - created a directory so i am going to
03:15 - just
03:15 - go in that directory which is called
03:17 - work
03:18 - so the first step is to install nest js
03:22 - cli globally in order to create our nest
03:26 - js project with this cli tool
03:29 - so we are going to just give this
03:31 - command which is
03:32 - npmi hyphen g and then
03:35 - just write at the rate nest
03:38 - js forward slash cli
03:42 - and in my case because i want to install
03:46 - this globally i i need the sudo
03:48 - privileges
03:49 - also in your case it might not be
03:52 - necessary
03:52 - so i will just press enter and give my
03:56 - max password and now this cli is
03:59 - installed on my operating system
04:02 - so once this nest cli is
04:06 - installed we are ready to create our
04:08 - first project
04:09 - so in order to create a new nest
04:12 - project what you need to do is you just
04:15 - need to give this command nest
04:17 - because we have installed nest jscli uh
04:20 - globally
04:20 - this nest command is going to work and
04:23 - then write
04:24 - new and the name of your project so we
04:27 - are going to create a project
04:28 - called car manager
04:32 - so i'm going to give this name you can
04:34 - give any name
04:36 - for your nest js project and then press
04:39 - enter
04:40 - and it's going to create a new sjs
04:42 - project for you
04:44 - now first step here it's going to ask
04:46 - you which
04:47 - package manager you want to use npm or
04:50 - yarn so i'm going to just use
04:54 - npm for this so i'm going to just press
04:56 - enter which is going
04:57 - to create our project using this
05:00 - npm package manager so now you can see
05:03 - our nest
05:04 - js project is created and you can see it
05:07 - gives us hint
05:08 - also that we can cd into this directory
05:12 - and then we can just run our project
05:14 - using npm run start
05:16 - so what we are going to do i'm going to
05:17 - just do ls you can see
05:19 - this project is created inside this
05:22 - directory so i'm going to go inside
05:24 - this directory and then i'm going to
05:27 - open this project using visual studio
05:29 - code you can open this project with
05:31 - any other editor or ide of your choice
05:35 - i'm going to use visual studio code here
05:38 - so i'm going to just open this project
05:40 - using visual studio code and let me open
05:42 - the
05:43 - terminal also inside visual studio code
05:46 - now let's discuss about the nest
05:49 - js project structure so
05:53 - you will be able to see this package dot
05:55 - json where
05:56 - under script you will be able to see uh
05:59 - all these commands so
06:01 - we can start our web application using
06:04 - npm
06:05 - start which is going to essentially run
06:08 - nest start in order to start our
06:10 - application
06:11 - and you can see we can test our
06:14 - application using
06:16 - npm test under the hood it's going to
06:18 - use just for running our test
06:21 - you can also see how you can run
06:24 - different commands for running different
06:27 - kind of
06:27 - tests and coverages and running your
06:31 - application
06:32 - in different environment for example
06:34 - development or debug or production mode
06:36 - you can also run lint for linting your
06:41 - application files now let's talk about
06:44 - the source folder where our
06:48 - code is there so we are going to start
06:50 - with
06:51 - the main dot ts which is the main entry
06:55 - point
06:55 - of your nest js application
06:59 - so here you can see it's very simple
07:02 - it's going to
07:03 - just import this nest factory from the
07:06 - core
07:07 - nets js package and you just need to
07:10 - pass
07:11 - your app module which is there inside
07:15 - this app.module.ts file we are going to
07:18 - just
07:18 - see what's there in a bit but you just
07:21 - need to import
07:22 - this uh app module and you just need to
07:25 - pass this
07:26 - app module as as parameter
07:30 - in the create method and then you can
07:33 - just start your application on
07:37 - the port for example by default it's
07:39 - going to start on the
07:41 - port 3000 but you can change this port
07:44 - also so app.listen
07:46 - and it listens on the port 3000
07:49 - by default so now we are going to go
07:52 - inside the module.ts folder so
07:55 - app.module.ts which we have imported
07:58 - inside our main.ts
08:00 - so this app.module.ts
08:05 - file is going to contain the
08:07 - implementation of
08:08 - application root module now there are
08:12 - three important building blocks
08:15 - of a nest js application and these are
08:18 - called
08:19 - controllers providers and
08:22 - modules so three building blocks
08:25 - controllers
08:27 - providers and modules
08:30 - and you will be able to see one file for
08:33 - each component you will have
08:36 - the controller.ts file you will have the
08:39 - module.ts file
08:41 - and you will have the service.ts file so
08:44 - services
08:45 - are also called providers in
08:48 - nest js module.ts is going to contain
08:52 - the implementation
08:53 - of your application's root module
08:56 - and then app.controller.ts
09:01 - is going to contain the implementation
09:04 - of a basic nesjs controller
09:07 - with just one route so by default it's
09:09 - going to just uh
09:11 - listen on this get route and it's going
09:14 - to
09:14 - just uh return you hello world
09:18 - so controllers are used to
09:21 - just define your end points so it will
09:23 - be a main
09:25 - interface for your application so you
09:28 - can define
09:29 - endpoints into the controllers
09:33 - now the app.service app.service.ts
09:36 - file is going to contain the
09:38 - implementation
09:39 - for your endpoint for example so for
09:43 - example some
09:44 - rest request comes into your application
09:48 - it's going to just go here and
09:51 - then this controller in this controller
09:54 - you can see
09:55 - there is an instance of app service
09:58 - and whatever you want to return as a
10:01 - response for that
10:02 - rest request you can just provide the
10:04 - implementation of your response
10:06 - inside the service so let's go inside
10:09 - the service
10:10 - here we just define the
10:13 - implementation about your service
10:16 - methods
10:17 - right now also you will be able to see
10:21 - for example when you go to
10:23 - the app.modules.ts
10:26 - this kind of annotation
10:29 - here so these are called the decorators
10:32 - so if you are familiar with the angular
10:35 - you might have seen these kind of
10:37 - decorator decorators
10:38 - right so because we are in the module
10:42 - uh decorator here we just provided at
10:46 - the raid module
10:47 - and then inside the module you can
10:49 - provide the imports
10:51 - controllers and providers so provider
10:54 - essentially
10:55 - are the services right so we have
10:57 - imported
10:58 - the app.service and app.controller here
11:02 - and here we provide the mapping of
11:05 - all the controllers you have inside your
11:07 - application
11:08 - and all the providers you have in your
11:11 - application and sometimes you need to
11:13 - import
11:14 - different kind of uh files
11:17 - in your nest js and those imports we are
11:21 - going to
11:21 - do here so we are going to see uh more
11:24 - about imports
11:25 - in uh the later part of our
11:28 - uh application right so uh
11:31 - as i said you have services modules and
11:35 - controllers
11:36 - also you have the app.controller.spec.ts
11:41 - file
11:42 - so this will be uh your unit test
11:45 - file so here you can write your unit
11:48 - tests
11:49 - okay and you can also define for example
11:52 - service dot spec dot ts file for
11:56 - testing your services and
11:59 - for your integration test you have this
12:01 - test folder so here you can
12:05 - run your integration test and in next js
12:08 - it is called end-to-end test okay so
12:10 - here you can
12:11 - test your whole application using
12:15 - just and under the hood it uses
12:18 - super test for your integration tests so
12:21 - now let's
12:22 - run our application you just need to
12:25 - write an npm
12:26 - start here which is going to run our
12:29 - application and once you see this
12:31 - message which says
12:32 - nest application successfully started
12:34 - you can go to your browser
12:36 - and then just write localhost uh colon
12:39 - 3000 it's
12:40 - and it's going to return hello world
12:43 - right
12:43 - you might be wondering uh this is our
12:46 - typescript project so we haven't
12:48 - transpiled our typescript
12:51 - into the javascript code and how it's
12:54 - running
12:55 - uh directly using npm start in the
12:58 - background
12:59 - nest js is going to take care of
13:02 - transpiling
13:04 - and then running your application
13:06 - directly
13:07 - using npm start if you want to just
13:10 - explicitly build your project you can
13:12 - give this command
13:13 - npm run build it's going to transpile
13:16 - your tribescript files
13:17 - into javascript but if you
13:21 - directly use npm start also it's going
13:24 - to
13:24 - transpile directly your files and
13:27 - it's going to run your project for
13:29 - example i'm going to just
13:31 - stop this application i'm going to go to
13:33 - the service
13:34 - dot ts file and here we have the
13:37 - get hello world which is returning this
13:40 - hello world to us
13:41 - i'm going to just add hello world from
13:45 - me and then i'm going to just
13:49 - restart our application it's going to
13:51 - directly transpile our typescript code
13:54 - and it's going to start our application
13:56 - on the port
13:58 - 3000 so let's refresh this page now it
14:01 - says
14:02 - hello world from me so
14:05 - this is how you can create your first
14:08 - nest
14:09 - js application till now we have seen
14:12 - how we can create our first nest js
14:15 - project and we have seen a broad
14:18 - overview
14:18 - of our nest js project
14:22 - now we want to add some end points
14:26 - to our rest api so what
14:29 - my plan is let me show you uh the api
14:33 - uh documentation which i want to
14:36 - implement
14:37 - so our api name will be car
14:40 - manager api which will be able
14:44 - to add a car or read
14:47 - all the car information or read
14:50 - full data of an individual car or it's
14:53 - going to
14:54 - delete a car or it's going to update
14:58 - a single car and these are the routes or
15:01 - endpoints which
15:02 - i have defined so we are going to define
15:05 - a get
15:06 - cars route and then we are going to
15:09 - define
15:10 - post car get car by id
15:13 - put car by id and delete car by
15:17 - id so this is what we
15:20 - are going to do and by the way you can
15:22 - also create
15:24 - this kind of swagger documentation
15:27 - using your nest js
15:30 - framework but this is not the part of
15:33 - this demonstration i just created this
15:36 - swagger documentation
15:37 - separately for this demonstration
15:41 - but i'm not going to show you how you
15:43 - can create this using nest
15:45 - js so let's get started so because we
15:49 - have already downloaded the
15:50 - nest js cli we are going to use the nest
15:54 - jscli to create our module
15:57 - service and controller so uh the good
16:00 - thing about
16:01 - nest cli is we can create our module or
16:05 - service or controller or
16:07 - it can do many other things
16:09 - automatically so you don't need to
16:11 - write your modules or classes or
16:15 - typescript files uh from the scratch
16:18 - right so what we are going to do is
16:22 - we are going to generate a module a
16:24 - controller and
16:25 - the service for the car
16:28 - so as you can see these were the files
16:31 - which are
16:32 - automatically generated for us we are
16:34 - going to remove all these files
16:36 - once we have generated our car module
16:39 - controller and service
16:40 - and we are going to use that because we
16:43 - don't want to
16:44 - just send hello world for example and
16:47 - this
16:48 - route is not even required in our
16:52 - api right so process of creating the
16:55 - module controller and service is really
16:59 - simple using nest cli you just need to
17:02 - write
17:03 - nest and then you just need to give this
17:05 - flag g
17:06 - or you can just write
17:10 - generate here in the short form you can
17:12 - just write
17:13 - g and then you write what you want to
17:16 - create
17:17 - right so for example first of all we are
17:19 - going to create a module so i'm going to
17:21 - just write module here
17:23 - and then give the name of your module so
17:26 - we are going to create
17:28 - a car module so i'm going to just write
17:32 - car here
17:32 - okay so nest generate and
17:36 - the name of the component
17:39 - you want to generate and then the actual
17:42 - component name
17:43 - which you want to generate just press
17:45 - enter which is going to
17:47 - create a new module for you so when
17:51 - nest js create a module or controller
17:54 - or a service it's going to create
17:57 - a folder with the same name which you
18:00 - have
18:00 - given here so we have created the car
18:03 - module and inside this
18:05 - uh we have this car.module.ts file
18:08 - right now as i already mentioned uh
18:12 - this at the rate module is the decorator
18:17 - if you want to create this car module
18:19 - from the scratch
18:20 - you can simply create this without using
18:23 - this uh
18:24 - cli also you just need to add this
18:28 - module decorator on top of
18:31 - your module class name and this module
18:35 - is present in the nest js common
18:38 - package right so just write nest g
18:41 - controller and the name of your
18:43 - controller
18:44 - and then press enter and it's going to
18:46 - create a new controller for you so
18:49 - here you can see this controller is
18:51 - created for us
18:52 - and you can see for the controller you
18:56 - need to add
18:56 - this decorator controller and then you
18:59 - need
19:00 - to add the route which you want to
19:04 - add to your controller so we want
19:07 - this subroute which is car as you can
19:10 - see
19:11 - all our our route have car car car
19:14 - car we are going to create the get
19:17 - car route also we are not going to
19:19 - create extra
19:21 - cars module or controller uh i decided
19:24 - that
19:24 - we are going to just create a car
19:27 - uh route here not cars right so
19:30 - keep this in mind uh and
19:34 - now we are going to create a new service
19:37 - for our car
19:38 - so here you just need to write service
19:41 - so nest g service car and it's going to
19:44 - create a new
19:46 - car service for you okay so we have
19:49 - generated
19:50 - the module controller and the service
19:55 - ts files also two extra files are
19:58 - created for the unit test
20:02 - car.service.spec.ts which is the unit
20:04 - test
20:04 - file for the service dot ts file
20:09 - and you also have this
20:12 - card.controller.spec.ts
20:13 - this is the unit test file for your
20:16 - car.controller.ts file
20:18 - right so now you will also observe
20:22 - that in your main modules when you go to
20:25 - the main module you will see here that
20:29 - under the imports element there is a new
20:32 - mapping which is added
20:34 - here which is cars module and this code
20:36 - is also
20:37 - auto generated right so if you are
20:40 - creating your controller or module or
20:43 - your service manually without this
20:45 - command line
20:47 - you just need to add your module
20:50 - which you have created and
20:53 - you just need to import it under your
20:55 - main
20:57 - app.module.ts file right
20:59 - and now what i'm going to do is i'm
21:01 - going to remove
21:02 - the controller and provider which is the
21:05 - main app controller and main
21:07 - app service provider because we don't
21:09 - want
21:10 - this we just want the car module car
21:14 - controller and car service
21:17 - right so i can just remove
21:20 - this controller from here and this
21:23 - provider from here
21:24 - and remove these imports now let's go to
21:27 - the car
21:28 - dot t so i'm going to go to the
21:31 - car.module.ts
21:34 - here and you will see that
21:37 - inside this module we have imported
21:40 - the car service and the car controller
21:44 - okay so these files are also
21:47 - automatically generated
21:49 - and we have added the decorator here as
21:52 - i mentioned earlier
21:54 - and then under controller we are going
21:56 - to add all the controllers
21:58 - in our case we only have one controller
22:00 - which is car controller
22:01 - and under provider we are going to add
22:04 - all the
22:05 - uh services right so we only have car
22:08 - service right now
22:09 - and we are going to just export this
22:12 - module and this is the same module which
22:15 - we are
22:16 - importing in the app.module.ts file
22:19 - which is this one
22:21 - right also we don't need this
22:24 - main app.service file
22:27 - because we have removed uh this
22:29 - dependency so i can just right click and
22:32 - delete this service file also we can
22:35 - delete this
22:36 - controller also right so i'm going to
22:38 - right click and delete
22:40 - the controller for the main app and then
22:45 - app.controller.spec.ts file also i'm
22:47 - going to remove
22:48 - right so now we only have the car
22:52 - controller car module
22:53 - and car service and unit test files for
22:56 - that
22:56 - and we have this app.module.ts
22:59 - where we are just importing our car
23:02 - module
23:02 - and in the main.ts we are just importing
23:06 - our main module
23:07 - and we are just starting our
23:10 - application on the port 3000.
23:13 - so now what i'm going to do is i'm going
23:15 - to just clear this terminal and i'm
23:17 - going to
23:18 - just transpile my typescript file to see
23:22 - if everything is working correctly or
23:25 - not
23:25 - so i'm going to just write npm run
23:30 - build here and once all the files are
23:34 - built
23:34 - successfully and if i don't see any
23:36 - error we can move
23:38 - forward so as you can see there is no
23:40 - error in transpilation
23:42 - so we can move forward so what
23:45 - we are going to do is we are going to
23:47 - start
23:48 - from the controller here
23:51 - so let's create uh some of the end
23:54 - points
23:55 - in this controller so the first thing
23:59 - which we need to add to the controller
24:03 - is the service so we are going to inject
24:06 - the service which is the car service
24:09 - into our car controller so i'm going to
24:12 - just
24:13 - create a constructor here and
24:16 - inside this constructor we are going to
24:18 - just
24:19 - inject our service which is the car
24:22 - service so first let me just import the
24:26 - car service in car controller so i'm
24:29 - going to just write
24:30 - import and then i'm going to
24:34 - just import the card service which we
24:36 - have already generated right
24:38 - so just write dot forward slash
24:41 - and then car dot service right so once
24:44 - we have imported this car
24:46 - service you just need to add the
24:50 - car service name also here
24:54 - and because we have provided the same
24:56 - name here car service
24:58 - right so we are importing this inside
25:01 - our controller and now we are going to
25:05 - just
25:05 - inject this service instance
25:09 - in the constructor and now we are going
25:11 - to just inject
25:12 - this car service instance into
25:15 - our controller constructor right
25:19 - so i'm going to just name it
25:22 - as car service and also i'm going to
25:25 - remove this
25:26 - space from here so
25:30 - once again i'm going to go to my
25:32 - card.service.ts
25:34 - file and you can see in the service we
25:37 - have
25:37 - included this at the rate injectable
25:40 - decorator so
25:42 - whenever you create a car a service or
25:45 - any service
25:46 - manually you need to add this at the
25:48 - rate
25:49 - injectable decorator on top of
25:52 - your service right and that makes
25:56 - your service injectable and that's how
26:00 - nest js is going to recognize that this
26:02 - service is injectable
26:04 - so we can inject this service inside
26:07 - the constructor of the controller right
26:11 - now we are going to create some of the
26:14 - endpoint
26:15 - methods for our car controller
26:19 - so the first method will be get
26:22 - cars let's say so i'm going to just make
26:26 - this method
26:27 - a sync method and
26:30 - let's say that method name will be get
26:34 - cards and in the body
26:38 - of this method we are going to just
26:42 - call our service instance for now so
26:45 - card service this dot
26:46 - car service and we are going to create
26:49 - different
26:50 - methods uh later in the car service also
26:53 - and we are going to name this method
26:56 - same
26:57 - which will be car get cars so
27:00 - this method we are going to create in a
27:02 - moment in the
27:04 - service and also because this is
27:07 - an async await method so you can
27:10 - uh just write return
27:14 - here if you uh are not returning
27:16 - anything
27:17 - then you can also just write return
27:20 - without our bait here
27:22 - i'm sure you know uh this concept from
27:25 - before also
27:26 - right and then we are going to provide
27:29 - a new decorator and this decorator name
27:33 - will be get
27:34 - so at the rate get here you just need to
27:38 - add
27:38 - get here and you just need to import get
27:41 - uh from your nest just common
27:45 - package also so you can see get is here
27:47 - and we are adding this
27:49 - get decorator here and you just need to
27:52 - add
27:52 - these parentheses here and inside these
27:56 - parentheses you can provide
27:58 - any uh sub route so
28:01 - if you want to get the car by id you can
28:04 - just write
28:05 - id here or whatever routes you want to
28:08 - add here
28:09 - right so for now we just want to
28:13 - uh add the get method so when you
28:16 - just add this empty a get method
28:20 - this means that uh you are just calling
28:23 - the get method
28:24 - on this car route right
28:27 - so let's add this get cars
28:30 - in your service file also so i'm going
28:34 - to go to car.service.ts file
28:37 - and here i'm going to add the
28:40 - public method which will be
28:44 - a sync await method and i'm going to
28:47 - name it
28:47 - as get cards and in the body
28:51 - what i want to do is i want to return
28:53 - something
28:54 - for now i'm going to return empty
28:57 - object from here now we also need uh
29:00 - some kind of uh
29:01 - mock data for the cards so i'm going to
29:05 - create a new
29:06 - file here and i'm going to name
29:10 - this file as cars
29:13 - dot mock dot
29:16 - ts file okay so here in this mock file
29:20 - what i want to do is i want to return
29:23 - some kind of
29:24 - dummy car object array right
29:27 - so i'm going to just export
29:32 - const cars
29:35 - is equal to then some kind of dummy data
29:37 - which i already have
29:39 - so i want to add one
29:43 - object to my array which will be already
29:46 - available
29:47 - so this array will be a mock array which
29:51 - is going to return
29:53 - this one object which is already present
29:56 - here
29:57 - and the other object we are going to uh
30:00 - add
30:00 - dynamically to our array when some
30:03 - request
30:04 - comes right so what we have done till
30:06 - now we have added
30:08 - this get cars into our service
30:11 - and into our controller right and we are
30:14 - just calling
30:15 - or returning the get cars
30:19 - method from the car service inside
30:22 - your controller also inside this get
30:26 - cars
30:26 - method so inside the cars
30:30 - dot service we are going to import our
30:32 - mock
30:33 - also so let's import our
30:36 - mock which we have created which have
30:39 - the name
30:40 - cars here and we are going to import it
30:43 - from the mock
30:44 - file which we have created and now
30:47 - we can use this cars object which is our
30:50 - mock data
30:51 - inside our car service
30:55 - so i'm going to just write private
30:59 - and then cars here
31:02 - which will be equal to this cars which
31:05 - and then
31:06 - we can return this uh dot
31:09 - cars uh from the get cars method
31:13 - right so now we have uh just uh
31:16 - finished first endpoint and
31:19 - we can test our endpoint by just running
31:22 - npm
31:24 - start command once your application is
31:27 - running i'm going to
31:28 - just open my postman and then
31:32 - i will just write http colon forward
31:34 - slash localhost
31:36 - 1000 which is the port on which our
31:38 - application is running
31:39 - and then i'm going to just give this
31:42 - endpoint which is car here so
31:45 - essentially we are
31:46 - just sending get car uh
31:49 - request to our application let's uh
31:52 - send this data and you can see it sends
31:55 - us this kind of data which is sent
31:58 - using this get cars method which is
32:03 - there inside your service and we are
32:05 - just returning
32:06 - the mock which we have just created
32:08 - which is
32:09 - uh this one right and
32:12 - first of all this request reaches to
32:16 - your controller and it sees that
32:19 - your base route is car here
32:23 - and here we haven't added any sub route
32:25 - so that means
32:26 - we are just responding to the
32:29 - car get car request using
32:32 - this get cars method in this video we
32:36 - are going to add
32:37 - other end points like delete
32:40 - car by id get car by id
32:43 - and put car by id and also we are going
32:46 - to create a post
32:48 - method so what i'm going to do is i'm
32:51 - going to go to my car.service.ts file
32:54 - and
32:55 - here i'm going to create some methods
32:58 - so these are the method which i'm going
33:01 - to implement
33:02 - so i'm going to implement postcard
33:05 - for the post method i'm going to
33:10 - create a method called get car by id so
33:13 - if the user have the id of a particular
33:18 - car object then he will be able to get
33:21 - that data related to that id
33:24 - user will be able to delete a single car
33:29 - using the id of the car and also
33:32 - user will be able to put
33:36 - some data put means update the data
33:39 - if he have the id of the car
33:42 - element okay so there is no
33:45 - implementation there
33:47 - so i have added all these method inside
33:50 - the dot service dot ts file
33:53 - now uh i think for now the async
33:57 - is kind of overkill for now because we
34:01 - are not returning any uh promises
34:04 - uh here so i'm going to just remove
34:08 - this async from here
34:11 - so it's going to look like this and when
34:13 - we will require a sync await
34:16 - then we will add those async await
34:18 - methods
34:19 - right so for the post method what we
34:22 - want to do
34:23 - uh when the user sends some car related
34:27 - data
34:27 - for example he sends the brand
34:31 - color and the model and even the id
34:35 - then we just want to add this data to
34:39 - our cache which we have here
34:43 - which is cards right so in the post
34:46 - method what i want to do is
34:48 - i want to add cars element to my already
34:52 - existing
34:53 - cars array so this is by default
34:56 - our cars array object and i want to
35:00 - add some element like this uh into
35:03 - my cards array here right
35:07 - later maybe we will add mongodb
35:09 - functionality but for now
35:11 - uh i want to keep everything simple so
35:15 - what i'm going to do here is i'm going
35:18 - to
35:18 - just push the car
35:21 - object which is this one we are also
35:23 - going to define the data type of this
35:26 - car
35:26 - object in a few minutes
35:29 - but what here we can do we can just
35:32 - write
35:33 - this dot cars and if you
35:36 - uh already are familiar with the
35:40 - arrays in javascript or typescript you
35:42 - can use
35:43 - a push method and using this
35:47 - you can add data into
35:50 - your array okay and once you have pushed
35:54 - this data you can also
35:57 - return this data now for the get car by
36:00 - id method what
36:01 - we require is some kind of id so
36:04 - as you have seen here in this car
36:08 - object i have defined the id brand color
36:10 - and model right
36:12 - so let's say id is a number instead of
36:16 - this kind of string so it will be easier
36:19 - and let's start with
36:21 - the default id1 and we are going to add
36:24 - more elements to our are using this id
36:28 - and
36:28 - we'll be able to get the elements by id
36:32 - also right so now we know that id will
36:35 - be a number so i'm going to
36:37 - just define the data type here which
36:39 - will be
36:40 - our number and then we want to
36:44 - get the car by id so we have to first of
36:47 - all
36:47 - find the car by id so
36:51 - i'm going to just define const
36:54 - variable which is called car and then
36:58 - what we are going to do is we are going
36:59 - to find the car
37:01 - inside our array which we have here
37:03 - which is cars array so i'm going to just
37:05 - write
37:06 - this dot cars dot find
37:11 - and what we want to find we want to find
37:13 - the id
37:14 - right so i'm going to just write
37:18 - car and then we want to
37:21 - find the id when we call the find the
37:24 - method
37:25 - over an array we are going to get each
37:28 - and every element
37:29 - using this car element and then we can
37:33 - call
37:34 - car dot id so i'm going to just write
37:36 - car dot
37:37 - id and if this car dot id
37:41 - will be equal to the id which we are
37:44 - going to pass
37:45 - then we know that it's our car
37:49 - now here i can see this red squiggly
37:51 - line which says replace car with
37:53 - uh parentheses car so
37:56 - the nest just already have this es lint
38:00 - uh installed and this uh linter is
38:03 - suggesting
38:04 - us to just enclose this car inside
38:07 - the brackets right so now once we
38:10 - get the car by id we are going to just
38:13 - return this car right so we can just uh
38:17 - write return car and then
38:20 - it will just return the car object you
38:23 - can see
38:24 - this like this now of course you can add
38:27 - uh different kind of error handling so
38:29 - for example
38:31 - if you don't find any car inside this
38:34 - car array
38:35 - you can throw some kind of error but
38:37 - that logic we are going to
38:38 - uh add a little bit later for example
38:42 - or let's add that logic right now
38:45 - so let's say if we don't find
38:49 - any car inside our cars
38:52 - array what we want to do we want to
38:55 - throw a new error so i'm going to just
38:59 - write
39:00 - through new and then
39:03 - error so now in nest js
39:06 - there are different kind of errors which
39:09 - are defined
39:10 - in the nest common package
39:14 - so we are going to add one such uh
39:18 - error class which is http
39:21 - error error for example or http
39:24 - extension it's called
39:26 - okay so we are going to add this http
39:28 - extension and we are going to throw this
39:30 - http extension and you can see when you
39:33 - hover over
39:34 - this http extension you can
39:38 - just send the error string and also the
39:41 - status number
39:42 - so because we are throwing this error
39:46 - for
39:47 - the not found so we can just
39:51 - add not found here
39:54 - and then the status code will be 404 if
39:58 - you are aware with
40:00 - the http status codes right now let's
40:03 - move to
40:04 - the delete by id method
40:07 - so here also this logic will be same
40:10 - because we want to
40:11 - just find the car by its id so this
40:14 - logic we can
40:16 - keep it as same and it's
40:19 - going to be a number so we can define
40:22 - the data type of the id
40:23 - also and the return value of this delete
40:27 - car by id first we need to delete
40:29 - this car object from our array right
40:33 - so i can just write this dot
40:37 - cars and then we can use the splice
40:40 - method for example
40:42 - so just call this splice method
40:45 - and we want to first of all know the
40:48 - index
40:49 - right so if you want to splice some
40:52 - index from a car array
40:56 - what you can do here is instead of using
40:59 - this find
41:00 - you can just use find index
41:04 - method which is going to give you the
41:05 - index if
41:07 - this id is found inside an array
41:11 - so instead of the object you will get
41:14 - an index so i'm going to just write
41:17 - index here instead of the car
41:20 - and if there is uh no index so
41:23 - if the index is equal to let's say
41:27 - -1 then we are going to throw an
41:31 - error in this case right and
41:34 - if the index is present there we are
41:36 - going to splice that
41:38 - index uh from our
41:41 - cars array okay and then we are going to
41:45 - simply
41:45 - return our cards
41:48 - okay so i'm going to just write this
41:52 - dot cars which will be
41:56 - the array after the deletion of
41:59 - the object if we find the
42:02 - id uh there now for the put car what i
42:06 - want to do is
42:07 - i want to let's say i want to delete a
42:09 - single element
42:10 - from the object which i found
42:13 - out right so let's say i have this uh
42:18 - object and let's say i just want to
42:20 - update the brand
42:22 - if i find this id using the
42:25 - id of this object okay i don't want to
42:29 - uh
42:30 - edit the whole object i just want to add
42:33 - it
42:33 - or update the single element from
42:37 - an array right so how i can do this
42:41 - so as i have shown you this kind of
42:45 - swagger documentation as i go
42:48 - inside the put car i will just
42:52 - send the id of the car and in the
42:55 - query parameters i'm going to pass the
42:59 - property name and property value right
43:02 - so i want to pass property name and
43:04 - property value
43:05 - so property name will be in our case for
43:08 - example a brand
43:10 - color or model and the property value
43:13 - will be for example bmw
43:15 - or gold or the model value here
43:18 - right so we will also learn how to
43:21 - use the properties right so what i want
43:25 - to do here is
43:26 - we want to of course get the id which
43:29 - will be
43:30 - a number and then i want to
43:33 - uh use the property name
43:36 - and property value so we want to pass
43:40 - here property name which will be
43:43 - a string and also the property
43:47 - value for example and for simplicity i'm
43:50 - going to make it
43:51 - like camel case so property value
43:54 - and property name this will also be
44:00 - the string so for this what we are going
44:02 - to do
44:03 - we are going to once again find our
44:06 - element by id so we can use this
44:10 - this code again for finding the
44:13 - element inside an array by id so we are
44:16 - going to find the index
44:18 - of the element and if the index is not
44:22 - found
44:23 - then we are going to throw uh the error
44:25 - otherwise
44:26 - we want to edit that value so
44:29 - how we can edit that value because we
44:32 - already have cars so what we can do
44:36 - this dot cars and we are going to
44:40 - edit the car for that index so i'm going
44:43 - to just add
44:44 - the square bracket and i'm going to get
44:47 - the value
44:48 - of the element at that index and then
44:52 - i'm going to add it the value so we can
44:55 - use once again
44:56 - this square bracket and this will be the
45:00 - property name
45:01 - and we want to just uh replace
45:05 - the value by the value of which
45:08 - we are providing in the query request
45:10 - right
45:11 - and then once this value is edited
45:15 - we can just return the cars
45:19 - array once again okay so we have added
45:22 - the business logic
45:23 - inside our service.ts file now we are
45:26 - going to go to the car.controller.ts
45:29 - file and here we are going to add
45:31 - the end points which we want to add
45:34 - so i'm going to add all these empty
45:38 - methods here let me just also remove the
45:41 - async from here and i'm going to just
45:43 - make it public method so now let me add
45:47 - all those decorators here first of all
45:50 - for the post
45:51 - car i'm going to add
45:54 - post decorator and you can see
45:58 - it's automatically added in my imports
46:01 - right so if you don't uh see this just
46:04 - add it
46:05 - into your import also for get car by id
46:08 - i will just simply use the get
46:12 - decorator for delete i'm going to use
46:16 - the delete decorator
46:19 - and for the put request i'm going to use
46:22 - the put
46:23 - decorator right so you can see
46:27 - all these uh decorators are
46:30 - automatically imported in my case using
46:32 - visual studio code ide
46:35 - but if they are not automatically added
46:37 - you need to add
46:38 - those imports right now we also need
46:43 - to add all these uh parentheses here
46:47 - so let's add all these parentheses and
46:50 - then let's first of all implement this
46:53 - post
46:54 - method so inside this post method we
46:57 - don't have
46:58 - any sub route we just want to add
47:01 - the cars in the body so there is a
47:05 - decorator called at the rate body
47:08 - using which we can access the body
47:11 - of the post request so just write uh
47:15 - body here and you can see this body is
47:18 - also added
47:19 - in my imports and then this body will be
47:22 - the car
47:23 - right now if you want to add the type
47:26 - for this car
47:27 - you want to add this kind of type which
47:29 - have id
47:31 - brand color and model right so
47:34 - you can either define a simple type
47:38 - using typescript or in
47:41 - nest js they have a concept of dtos
47:45 - dto stands for data transfer object
47:48 - and dto is an object that defines
47:52 - how data will be sent over the network
47:55 - so we can define a dto
47:59 - file for example so let's define this
48:03 - dto dot ts file so
48:07 - this file name can be car dot dto for
48:10 - example so i'm going to just write
48:12 - car dot dto dot
48:16 - ts and inside this car car.dto.ts
48:20 - what we want to define we want to define
48:23 - the type of the car
48:25 - so we can just write export
48:29 - class and class will be
48:33 - the car class or car dto
48:37 - and then inside the car
48:41 - class we can define read-only
48:44 - id we can also define the type of id
48:48 - which is number then we will define read
48:52 - only brand
48:55 - and the type will be the string
49:00 - so once we have this kind of dto we can
49:02 - import
49:03 - this uh dto class you can also say
49:06 - this will be a car dto so you know that
49:11 - this is the dto and not the normal class
49:15 - and let me fix all the linting errors
49:18 - so let's name it car d2 instead of car
49:21 - right
49:22 - so now let's import this car d2 inside
49:25 - our controller
49:26 - so let's add this import
49:30 - and then we can just use this car d2
49:34 - as the type of our car okay
49:37 - and then we just need to simply call our
49:40 - service which is our car service and
49:43 - then we
49:44 - have the post car method which takes
49:47 - this uh car
49:50 - as a parameter so we just need to do
49:53 - that
49:53 - and we need to just uh return this value
49:57 - right so just write return here
50:00 - and we are good to go now as i can see
50:03 - here this
50:04 - body is giving me some kind of error
50:07 - and it says you need to add these
50:10 - parentheses so let me add
50:11 - those parentheses here in order to
50:14 - access
50:15 - the body correctly so this method is
50:20 - done now we need to move to the
50:23 - get car by id method so here
50:26 - we are going to add this route and we
50:29 - want to access the id
50:30 - right so it's similar to using express
50:34 - so whenever you want to
50:36 - access a parameter you can use
50:39 - colon and then the name of the parameter
50:43 - right so it will be like car colon id
50:47 - so let me show you this request real
50:49 - quick
50:50 - it will be like this car forward slash
50:53 - car forward slash a colon id
50:55 - and you can access the value of id
50:58 - using this controller so let me go back
51:02 - to
51:02 - my implementation and here to access the
51:05 - parameters
51:06 - you can use a decorator called
51:10 - param and you will see this decorator is
51:13 - also added
51:14 - in my imports and don't forget
51:17 - to add this parenthesis and how you can
51:21 - access the parameter so our parameter
51:23 - name will be
51:25 - id so you can just
51:28 - give this a quote
51:31 - and then we can access the parameter
51:34 - by its name which is id in our case and
51:37 - then
51:38 - the name of our variable will be id
51:41 - and let's say it will be a number right
51:45 - so it will be a number and we just need
51:48 - to simply return
51:50 - the value from our services so i'm going
51:53 - to just write return
51:55 - this dot card service
51:59 - dot get car by id and then
52:02 - we are going to just pass our id here
52:05 - right so once we have this get car by id
52:09 - method implemented
52:10 - we can move to the delete car by id
52:14 - method and we want to pass the similar
52:18 - kind of param here because we want to
52:20 - delete the car by id
52:21 - right so here also we want to access the
52:25 - parameter
52:26 - so once again we can use the same
52:29 - kind of arguments here and then we can
52:32 - just return the value of
52:34 - delete car by id method from the service
52:37 - right so car service dot
52:40 - delete car by id and we just need to
52:42 - pass our id
52:43 - to our method in the inside the service
52:48 - now we will move to the put method
52:52 - so also we will be passing the id
52:56 - as the parameter in our put method
53:00 - if you have seen this request
53:03 - body so we are going to pass the id and
53:06 - in the query we want to pass
53:08 - the parameter name or property name and
53:11 - property
53:12 - value right so this
53:15 - will be the parameter which is uh
53:19 - the id and now in order to access
53:22 - the query you need to add a decorator
53:26 - called query so
53:27 - how simple this is so you can just uh
53:31 - add the decorator query and then you can
53:34 - define
53:35 - your query parameters so let's say uh
53:38 - this will be
53:40 - the query variable name
53:43 - and now what we are going to do we are
53:46 - going to
53:47 - just return
53:51 - the value which is this
53:54 - dot service dot put
53:57 - car by id where we pass our id
54:01 - and we want to get the property name and
54:03 - property id right
54:05 - so i can just define
54:08 - const property name
54:11 - query dot uh the property name which we
54:15 - want to pass
54:16 - so let's say property name which we want
54:18 - to pass is
54:19 - a property underscore name from the
54:22 - query params
54:24 - so this will be the property uh value
54:27 - and let's extract this value from our
54:29 - query parameter which
54:31 - will be value right
54:34 - and we are going to pass this so this
54:36 - will be value
54:38 - and we are going to pass this as the
54:40 - second parameter
54:42 - and the third parameter of this method
54:44 - will be property value
54:46 - so now we have implemented all our
54:48 - methods
54:49 - and we just need to test them if they
54:52 - are actually working or not so let's
54:54 - test them one by one so i'm going to
54:56 - just write npm
54:58 - start so our api has started
55:01 - successfully so i'm going to go to
55:03 - my postman and here first of all i'm
55:07 - going to get
55:08 - the list of all the cars which is going
55:10 - to return us
55:11 - this kind of object which is the mock
55:14 - object which we have already defined now
55:17 - let's uh
55:18 - do the post requests so let me just
55:21 - add one more request here and this will
55:24 - be
55:24 - a post request and the route will be
55:28 - car in the body what we want to pass
55:32 - we want to pass the json value right
55:36 - so we are going to pass the json value
55:40 - and in the body i want to pass this uh
55:43 - kind of
55:43 - object so let's uh pass this kind of
55:47 - object from here and let's
55:50 - change the value so let's say id will be
55:52 - 2
55:54 - the brand will be vw
55:58 - the color will be red
56:02 - and the model will be let's say
56:05 - polo okay and let's uh do this request
56:08 - but this is the post request right so we
56:11 - just need to change the
56:12 - uh method here not here but
56:16 - we need to change the method here
56:19 - in our second tab so
56:22 - the body will be this body
56:25 - and let's uh do this request so send
56:29 - and it says 201 created
56:32 - that's okay and once
56:35 - we have posted our second element
56:38 - we can just get all the list of all the
56:42 - cars
56:43 - using get cars so i'm going to just send
56:46 - once again
56:47 - cars and we are going to see that now we
56:50 - have
56:51 - two elements inside our array first one
56:54 - was already there and this one we have
56:57 - uh
56:58 - added right now we are going to
57:02 - test our put method first of all
57:05 - so i'm going to just uh use the similar
57:08 - url
57:09 - uh but we also want to pass the
57:12 - id of the card so let's say i want to
57:14 - add it
57:15 - the id 2 so
57:18 - you see here it's id2 or let's say we
57:22 - just want to change the color
57:23 - of this vw car okay
57:27 - so i will just give the id which is a 2
57:29 - here
57:30 - and in the parameter value let me just
57:33 - change
57:33 - the method to put and we want to
57:37 - just add the query which will be
57:41 - the parameter value or property value so
57:47 - property underscore name
57:50 - will be the color
57:54 - and the property value will be so
57:56 - property
57:59 - value will be from red we want to
58:03 - change it to let's say blue right
58:06 - so right now we have the vw which is red
58:10 - in color and we want to change this
58:12 - value to uh
58:14 - blue right so this will be the whole
58:17 - query
58:17 - with the query parameters and
58:21 - let's uh do this uh query or
58:24 - let's send this and let's send this
58:27 - request
58:28 - so i'm going to send this request and it
58:30 - says 404
58:31 - so why this is happening we need to
58:34 - check it
58:35 - so i think the problem in our code is
58:38 - because we are not
58:39 - returning our result using promises
58:42 - that's why
58:43 - it's giving us this problem so i'm going
58:46 - to
58:46 - return the values from get car by id
58:50 - delete car by id and put car by id
58:52 - using the promises so let's do that so
58:55 - i'm going to
58:56 - just return the promise
58:59 - from the get car by id and the type
59:02 - to start with we can use any here and
59:05 - later you can
59:06 - add more specific type here and then
59:11 - what i'm going to do is first of all i
59:13 - will declare
59:14 - a const here and i want to check whether
59:17 - or
59:18 - the id is a number or not or and if it's
59:21 - not a number
59:22 - then i'm going to just convert it so
59:25 - cost car id is equal to
59:28 - number id and
59:32 - now we are going to pass this car id
59:34 - here
59:35 - right and then let's return the promise
59:38 - so
59:39 - return new promise
59:44 - and then we are going to add the
59:47 - resolve a value here and
59:51 - then using the arrow function
59:55 - we are going to return the code
59:58 - which we have written here so let's do
60:00 - that
60:01 - and then we can just use resolved
60:05 - to resolve this car object okay
60:08 - you can also add a return here
60:12 - and colon here okay so
60:16 - let's do the same for our delete
60:19 - car by id and put carbide id so
60:22 - let me add these return types here
60:26 - and here and also i'm going to add
60:30 - this code which will be same
60:34 - for both of them and then
60:37 - i'm going to just close this
60:41 - here and bracket here and also
60:45 - let's and also let's fix
60:48 - all these uh indentation problems
60:51 - and this car id now will come here and
60:55 - this car id
60:57 - in delete carbide will come here
61:00 - and also we need to resolve it right so
61:03 - we need to send
61:05 - the result using the resolve
61:08 - so let's do this here and also inside
61:11 - the putcar id function okay
61:15 - so now because our functions are
61:18 - returning
61:19 - promises inside our controller we can
61:22 - use async await also right
61:24 - so i'm going to go to the
61:26 - car.controller.ts file
61:28 - and here i can just write a sync
61:31 - also i can add this async here
61:35 - and i can add this async here okay
61:39 - if you want to be more uh specific
61:43 - you can also uh create a constant here
61:47 - and then
61:48 - write await and then return your
61:51 - value for example i can just write
61:54 - const result is equal to
61:59 - await and then i can return this value
62:02 - from
62:03 - here which will also be fine so
62:07 - i will just leave it like this because
62:10 - i think it's also going to work let's
62:12 - see and check
62:14 - if it works or not so i think uh
62:17 - that's all we want to do here i will
62:20 - just
62:21 - restart my app once again
62:24 - and i will go to uh my postman request
62:28 - so get cars is working let's post
62:31 - new car with id2 and now we can see
62:35 - we have two uh cars here and we want to
62:39 - add it
62:39 - this car which have the id 2 and we want
62:43 - to change the color to
62:44 - blue till now it's red
62:47 - right so let's do this and now
62:50 - you can see it's going to return this
62:52 - result
62:54 - and the color of
62:57 - this car is changed to the blue color
63:00 - also if you want what you can do
63:04 - because right now it's returning this
63:07 - service dot ts file we are
63:10 - just returning all the cards so instead
63:13 - of
63:13 - returning all the cars you can simply
63:17 - return
63:18 - the car property which you have changed
63:21 - so
63:22 - like this okay so let's
63:25 - run the app once again and let's see
63:28 - if it works so i will just go to my
63:31 - postman again i will just
63:33 - add this car by id once again and then
63:36 - when i send this request
63:38 - it's all only going to return us
63:41 - the element or the object which it has
63:44 - changed
63:45 - and we have changed specifically this
63:46 - value okay
63:48 - so this is working uh we also need to
63:51 - check uh if the get car by id and delete
63:55 - car by id is
63:56 - working or not so let's let's
63:59 - delete uh this car which have the id
64:02 - 2 so i'm going to just write
64:06 - delete and i think we don't need to um
64:10 - add any other uh parameters here
64:13 - right let's do the get request first and
64:16 - then we can do the delete so i'm going
64:18 - to just send this request and it's
64:20 - giving us the right response
64:23 - here you can also use one id one we have
64:28 - id one and two right so it's going to
64:30 - give us
64:31 - this value by id also if i want to
64:34 - delete
64:35 - the value so i will just use the same
64:38 - request
64:38 - let's say i want to delete the car by id
64:42 - 2 and i will use the method delete here
64:46 - and then i will just send this request
64:49 - and it gives us this result which
64:52 - is which means that it has deleted
64:56 - the element with the id2 and now
64:59 - we only have one uh car
65:02 - element inside our array so when you uh
65:05 - give the
65:06 - get all cars request it's going to
65:09 - only return us one car because the other
65:12 - car we have
65:13 - already deleted you can also change this
65:16 - response to
65:19 - something else you can do something like
65:22 - this that
65:23 - when the car is deleted you just send no
65:26 - response
65:27 - and you can also change the status codes
65:30 - here also
65:31 - so our basic api
65:34 - code is working now now in this video we
65:38 - are going to discuss about
65:39 - how we can add the mongodb support
65:42 - to our nest js api so we are going to
65:46 - start
65:46 - with the installation of the required
65:50 - packages so i'm going to just write npm
65:53 - i hyphen hyphen save and then
65:56 - you need to add these two packages which
65:59 - is
66:00 - nest js forward slash mongoose
66:04 - and the mongoose package itself so
66:08 - mongoose okay and then press enter
66:11 - now once you are done with the
66:14 - installation of the packages
66:16 - we are going to go to the main
66:19 - app.module.ts so this is the
66:21 - app.module.ts
66:23 - and here we are going to first of all
66:26 - import
66:27 - some packages from the nest
66:31 - mongoose package and which
66:34 - module we want here we want to
66:37 - import the mongoose module from the
66:41 - nest js mongoose package
66:44 - okay and once you have this you can
66:48 - use this mongoose module in order to
66:52 - connect
66:52 - to your mongodb database so here you can
66:56 - see under modules we have imported
66:58 - already our
66:59 - car module which we have created
67:01 - previously
67:02 - and now we can also add the support
67:06 - for the mongoose module so just
67:09 - copy this mongoose module dot
67:12 - in mongoose module you have a few
67:15 - methods so we are going to use
67:17 - this method which is called for root
67:20 - which is going to
67:21 - take your mongodb uri as
67:24 - an argument so if you are familiar with
67:26 - mongoose
67:28 - or mongodb we can connect to our
67:31 - database
67:32 - using this uri so here
67:36 - as the uri i'm going to just write
67:39 - mongodb and then colon forward slash
67:42 - forward slash
67:44 - local host because i will be using my uh
67:47 - mongodb which is running on my
67:50 - local host and then the name of
67:54 - your database so let's name our database
67:57 - as
67:58 - a car manager okay
68:01 - also you can add some of the options
68:04 - which mongoose takes
68:06 - at the time of the connection but we are
68:09 - going to add
68:10 - these later if we require them okay
68:13 - now what i uh i'm using is i'm using
68:16 - the docker instance of mongodb
68:20 - you can install mongodb locally or if
68:23 - you are running a mongodb
68:24 - on a server uh you can provide the uri
68:28 - of that server also right so
68:31 - for now i will be using the docker
68:34 - to use on my mac machine
68:38 - and the command for this is docker run
68:40 - hyphen p
68:42 - this is the port mapping of on
68:44 - which
68:45 - we are going to listen using the local
68:47 - host and this will
68:49 - be the location where we are going to
68:51 - save
68:52 - our data in our local machine
68:57 - using the docker right so let's run this
69:00 - you can also
69:01 - write the hyphen d here to run this
69:05 - mongodb container in the detached mode
69:08 - but
69:09 - i will run it as a separate instance so
69:12 - you can see it's running
69:14 - and now i'm going to open a new terminal
69:18 - and i will just write docker ps here
69:22 - and you can see this uh mongodb instance
69:26 - is already running so i'm going to just
69:29 - write docker exact
69:30 - hyphen i t and the name of the container
69:33 - or container id also you can give
69:36 - and then space bash so using this
69:38 - command we are just opening
69:40 - the bash terminal inside the container
69:44 - right now i can just give
69:47 - the command in order to connect
69:50 - to my mongodb and here i can just
69:54 - say show dbs and it's going to show me
69:58 - the list of all the databases so right
69:59 - now it has
70:00 - these three databases which are
70:03 - created by default and when we are going
70:06 - to run our
70:07 - app it's going to create this uh
70:10 - database also
70:11 - okay so now we have our
70:14 -  database connection now we are
70:17 - going to create
70:18 - the schema for our mongodb
70:22 - so for that i can create a separate file
70:26 - inside this car
70:27 - directory or i will create a folder
70:31 - let's say
70:31 - and i will name it as schemas and inside
70:35 - the schemas folder i will add all my
70:37 - schemas so
70:38 - the first schema will be car dot
70:44 - schema.ts for example
70:46 - and here i will first of all import
70:49 - the mongoose package
70:53 - so import asterix as
70:57 - mongoose from
71:01 - mongoose right so because we want to
71:04 - create the db uh schema
71:07 - using mongoose we will import this
71:10 - package
71:11 - and then we are going to just create the
71:13 - schema so i'm going to just write
71:16 - export then const
71:19 - and then the name of my schema will be
71:22 - let's say
71:24 - car
71:27 - and we are going to create a new schema
71:29 - so i'm going to just write new
71:31 - mongoose dot schema
71:36 - and then we are going to add our schema
71:40 - inside these parentheses so i'm going to
71:42 - just
71:43 - add these curly brackets and then
71:46 - we can add our schema here so what we
71:49 - have in our schema so
71:51 - in our schema we have we can see
71:54 - the dto so we are going to use the same
71:57 - attributes inside our schema so we can
71:59 - just copy and paste
72:01 - them here and for now i'm going to
72:04 - remove this read only attribute from
72:07 - here
72:07 - and because it's a json object we need
72:10 - to replace
72:12 - this semicolon by the
72:15 - commas right we can also fix all the
72:18 - auto fixable
72:19 - problems and this will be
72:23 - capital number because we are creating
72:26 - the
72:27 - uh db schema using mongoose right so
72:30 - you will use these uh data types
72:34 - now i can also add the car interface
72:37 - which i will use for the mongodb
72:41 - model or mongoose model so
72:44 - let's uh create the interfaces
72:47 - folder inside our car directory
72:51 - so i'm going to just write interfaces
72:55 - and then press enter which is going to
72:58 - just create this
72:59 - interfaces folder and inside the
73:03 - interfaces folder i'm going to just
73:04 - write car dot
73:08 - interface dot ts here i'm going to
73:11 - import the documents from
73:15 - the mongoose package so let's add a
73:18 - mongoose package
73:20 - and then we will add this document from
73:22 - mongoose and then i'm going to
73:24 - create an interface called icar for
73:27 - example so let's
73:28 - name it as i car which will
73:32 - extend so extends
73:37 - from document and here
73:40 - we can add the interface types
73:43 - which are id brand color and model same
73:47 - as
73:48 - our dto okay so once we have our
73:53 - interface and schema we can go to our
73:57 - servicescar.services.ts file and we are
73:59 - not going
74:00 - to uh use this logic anymore we will add
74:03 - the mongodb logic but first of all we
74:06 - need to
74:07 - add our schema and our
74:10 - interface right so let's add
74:13 - those things so i'm going to just import
74:17 - so first of all i'm going to import the
74:20 - model
74:21 - from the mongoose package
74:24 - and then i'm going to import
74:28 - the nest js mongoose
74:31 - package right so let me just add this
74:34 - next js mongoose package
74:36 - and from here i'm going to import the
74:39 - inject
74:40 - model okay and the
74:43 - next thing we want to import
74:46 - is the interface which we have created
74:50 - so i'm going to just import that
74:53 - interface and this will be the car
74:57 - interface
74:58 - and what we need to uh import icar
75:01 - and also let's import the dto because we
75:04 - are going to use that
75:06 - dto so let's import that which
75:10 - is called car dto and we need to import
75:13 - the car dto from there
75:15 - now in the constructor of our service so
75:18 - let's first of all delete all this logic
75:20 - which we have created
75:22 - in the previous video when we have seen
75:26 - how we can add
75:27 - the logic uh for all these uh
75:31 - method which are put car by id delete
75:35 - car by id
75:36 - post and then get cards
75:39 - right so let's remove all the logic from
75:42 - here
75:43 - and also we don't need this car's
75:46 - mock data so we can just remove that
75:50 - also
75:51 - so first of all we are going to add the
75:53 - constructor here
75:55 - and in the constructor in order to
75:58 - import
75:59 - the mongodb model which we have created
76:02 - using the schema we need to just
76:07 - add this decorator which is inject model
76:10 - and then inside these brackets we need
76:13 - to give
76:14 - the schema name which is
76:17 - car in our case i think so we are going
76:20 - to just write
76:21 - car here and then we are going to just
76:23 - write
76:24 - private read only
76:28 - the name of our model will be car
76:32 - model for example and the type of this
76:35 - uh
76:36 - model will be the model which we have
76:38 - imported from the mongoose
76:40 - and then we can just write
76:44 - the i car here okay and also we need to
76:48 - add
76:48 - these curly brackets so this is how you
76:51 - can inject this car model inside your
76:53 - service and then we can implement car
76:56 - get
76:57 - cars method logic using this model
77:01 - so i'm going to just write const
77:04 - curves for example and then we can just
77:08 - write this
77:08 - dot car model which we have just
77:11 - injected
77:13 - and then we can use a different methods
77:16 - so we want to find out all the cars so
77:19 - we can just write
77:20 - find and then we can just write
77:24 - exact and it's going to give us
77:28 - the list of all the cars and then we can
77:31 - just return this card so let's return
77:34 - this
77:35 - now of course you can again add the
77:38 - error handling
77:39 - here so here if the car is not found so
77:44 - if there is no cars
77:47 - and then also we can check if the first
77:50 - element
77:51 - is there inside our cars
77:54 - array otherwise it's not an array right
77:57 - so we can just
77:58 - check that and if we don't find this
78:01 - then we need to throw an error so we can
78:05 - just write through
78:07 - new uh http
78:11 - exception right and we can just
78:14 - uh give the first argument which is uh
78:17 - not found and the
78:20 - second argument will be 404 which is the
78:23 - status code
78:24 - right so this is uh how you can also add
78:27 - the error handling for your get cars
78:31 - now in the post car method
78:35 - what we want to do we want to post the
78:38 - or save our car object so
78:41 - here we are going to just write const
78:46 - car is equal to uh await because
78:49 - uh we are using mongoose uh using async
78:52 - await
78:53 - so we need to add a sync here and then
78:58 - a weight here and then this dot car
79:01 - model dot uh whatever
79:04 - object we want to pass here so we want
79:06 - to pass
79:08 - the car so we have created the new
79:12 - car object and now we just need to save
79:16 - this data so i can just write
79:19 - return uh car
79:22 - dot save and this is going to save this
79:25 - data
79:26 - and here as an argument we can just
79:29 - write a
79:30 - new car because the name here is
79:33 - conflicting right
79:34 - so i'm going to just write new car here
79:38 - and then pass this uh parameter here
79:41 - so this conflict can be solved also i
79:44 - forgot
79:44 - to add a sink away here in the get
79:48 - car so i'm going to just add that
79:51 - and then it's going to work now for the
79:53 - get car by id
79:55 - also we are going to use this kind of
79:57 - code so let's uh
79:59 - copy this code from here and also add
80:04 - a sink here and instead of using
80:07 - find we will just use a finder
80:11 - one method we just need to change find
80:14 - to find
80:15 - one because we want to find on the basis
80:18 - of the id so using this curly bracket
80:21 - i will just use id here and it's going
80:24 - to find
80:25 - the data based on this id because we are
80:29 - just
80:30 - searching for only one data so it will
80:33 - not be an array so we can use
80:35 - other logic for that which is like this
80:38 - if there is no car found then we can
80:40 - throw an error otherwise we will return
80:43 - the result
80:44 - you can use the same code for delete car
80:47 - by id
80:48 - we just need to add a sync
80:52 - here and instead of find one
80:56 - you use delete one
80:59 - delete one right how do we know that the
81:02 - car is deleted
81:03 - we know this by using car dot delete
81:07 - count so car dot delete
81:10 - [Music]
81:12 - count if this delete count is equal to
81:14 - zero that means our
81:16 - data is not deleted then we can throw
81:19 - the
81:19 - not found error otherwise we can return
81:22 - the car right and the last method will
81:26 - be
81:27 - once again put carb id so a sink here
81:30 - once again we can use the same logic we
81:32 - just need to
81:33 - change this method here so let's use
81:36 - this
81:37 - uh logic instead of using find one we
81:40 - will just use find
81:41 - one and update method so just write find
81:44 - one and
81:46 - update and we want to find
81:50 - the result by id which is
81:53 - ok and the second argument here will be
81:56 - what we want to update so we want to
81:58 - update
81:58 - a single property inside that object
82:02 - right so
82:03 - based upon the property name we will be
82:05 - able to change it
82:07 - so i'm going to just add this
82:10 - curly bracket and then i'm going to
82:13 - add the square bracket and based upon
82:15 - the property name i want to change
82:18 - the value from here let me fix all the
82:22 - eslint errors and now we have all the
82:25 - methods
82:26 - also if you want to add the type to your
82:30 - car parameter here to the postcard
82:34 - argument you can add the type to your
82:37 - car
82:37 - right also we can add the promise
82:41 - type here also so i'm going to just
82:43 - write
82:44 - promise and the type here will be
82:48 - car dto but it will be an array of
82:52 - card dto right and in the get
82:56 - cards by id we are returning only the
82:59 - car
83:00 - dto which is the same single uh result
83:03 - right
83:03 - so in car get cars we are returning the
83:06 - array of car dto
83:08 - type and in the get car by id we are
83:10 - returning
83:11 - a car same you can do for a delete car
83:14 - by id
83:16 - and you can do the same for the put car
83:19 - by id
83:20 - now there is one last step which is
83:22 - remaining which we want to
83:24 - do in the car.module.ts file so
83:28 - go to the car.module.ts file
83:31 - and here we are going to import
83:34 - some nest packages and we are going to
83:38 - first of all import
83:39 - the nest js mongoose
83:43 - and from the nesgus mongoose we want to
83:45 - import
83:46 - a module called mongoose module
83:50 - and also we need to import our schema
83:53 - right so we will just go
83:56 - to our schemas and import our mongodb
84:00 - schema from there
84:02 - so car schema and then we can just
84:06 - import this and and now we can import
84:09 - our mongodb schema inside our car module
84:13 - so you can just add imports and
84:17 - using this square bracket you can
84:21 - add the mongoose module and mongoose
84:24 - module
84:25 - and then inside mongoose module you need
84:27 - to use
84:29 - the for feature method and then as the
84:32 - parameter for this for
84:34 - feature we need to add the parameters
84:38 - as an array so the first uh element here
84:41 - will be the name
84:42 - say name is a car in our case and the
84:45 - second argument here will be the
84:48 - schema so schema is the schema which we
84:51 - have imported
84:52 - which is card schema and also
84:55 - add the comma here and we can just
84:59 - resolve all
85:00 - eslint problems hopefully it's going to
85:03 - work so let's
85:04 - run our code and let's see if everything
85:07 - works or not
85:08 - so i'm going to just write npm start and
85:11 - let's see if it works or not
85:13 - right now our app is started
85:16 - we can go to our client also
85:20 - and see if there is any database created
85:23 - or not so right now till now
85:25 - until the start of the app there is
85:28 - nothing created here so let's uh
85:31 - use our postman to post
85:34 - something so i'm going to just post
85:38 - one other car with the id 2
85:41 - and brand color and model let's send
85:43 - this request
85:45 - and you can see that now
85:48 - we have added this into our database
85:52 - and we also get the result with the id
85:56 - and hyphen hyphen v also so now this
86:00 - data is added to our database we can
86:02 - check it so
86:03 - once again i will just write show dbs
86:05 - now i can
86:06 - see that this database is created so i
86:09 - can use use
86:10 - car managers and then we can just write
86:14 - show
86:16 - collections to see all the collections
86:18 - we only have one collection which is
86:20 - cars which is okay
86:22 - and then we can write db dot our
86:25 - collection name which is
86:27 - cars dot find which is going to show you
86:30 - all the
86:31 - uh elements of your collection
86:34 - right so you can see there is one data
86:37 - which is added to our database which
86:39 - is the brand vw color red
86:42 - and model polo which we have added
86:46 - using this uh post request let's add one
86:50 - more element with
86:51 - id one let's say brand will be bmw
86:56 - and the color will be something
87:00 - and the model will be bmw
87:04 - x and now i'm going to just send this
87:08 - request
87:09 - and you can see it's also added and
87:13 - now i can just use this find
87:16 - and now we can see there are two
87:18 - documents inside our
87:19 - mongodb collection so the put method is
87:22 - working
87:23 - let's uh see if get cars method is going
87:27 - to work so it's going to give us
87:28 - a list of all the cars and it works you
87:31 - can see we
87:32 - are getting the list of all the cards
87:35 - now we want to use the get car by id so
87:38 - i want to
87:39 - uh send this request which is
87:43 - for the car with the id id1 and it's
87:46 - going to give me
87:47 - the result that's working let's query
87:50 - for the car with the id2
87:53 - it also works now i want to
87:57 - do some put method so let's say i want
88:01 - to change the
88:02 - property name color in the car id 2
88:05 - with the blue color right now the car id
88:08 - to have the color red
88:10 - right so let's send this request
88:13 - and you can see it's working or not
88:17 - working
88:18 - so still the color is red
88:21 - and we can also query here and
88:25 - here the color is changed to blue okay
88:28 - so this edit is working
88:32 - but somehow the result here is
88:35 - red because we are
88:39 - just sending let's go to the service
88:43 - because we are just sending our car
88:46 - which is found right so you can see
88:50 - our method name here is find one so it's
88:53 - going to find
88:55 - the document by id so it has found the
88:58 - document
88:59 - by id and return us the document which
89:02 - will be changed and then it
89:05 - will update the property okay so this is
89:09 - also
89:09 - working as expected right so
89:12 - inside our database its uh color is blue
89:16 - which is
89:16 - okay and let's use the delete method to
89:19 - delete
89:20 - this document so i want to delete the
89:23 - document with the id 2
89:25 - let's send this request and you can see
89:28 - deleted count is equal to 1 that means
89:31 - it's deleted
89:32 - and that means when we go and query our
89:36 - database you can see we have only one
89:39 - document here
89:40 - okay so delete is also working this one
89:43 - little annoying thing
89:45 - which is you can see when we query for
89:48 - our data the default id which is created
89:52 - is also coming and this hyphen hyphen v
89:56 - is also coming so let's say we want to
89:58 - filter out these two things because
90:01 - for us these four elements are important
90:03 - and this
90:04 - is the unwanted data which is
90:08 - coming from the mongodb right so
90:12 - for this we can create the projections
90:15 - so in the car service go at the top
90:19 - and then we are going to just write
90:22 - const car
90:27 - projection and then is equal to
90:30 - curly bracket and here we can just add
90:33 - whatever
90:34 - projection we want so we want to filter
90:36 - out hyphen hyphen v
90:38 - so we can just write hyphen f and v
90:41 - false also we want to
90:45 - filter out the id so underscore id
90:49 - and then it will be also false
90:52 - okay so this is our projection and this
90:55 - projection
90:57 - we can add to the get cards methods
91:01 - here as the second argument so we are
91:04 - going to just
91:05 - add a blank curly bracket here and
91:09 - as the second argument of the find we
91:11 - can add this projection
91:13 - also in the get cards by id we can add
91:16 - as the second argument the scars
91:18 - projection
91:20 - or this projection is going to filter
91:21 - out the underscore underscore v and
91:23 - underscore id
91:24 - from your result so let's uh run our
91:28 - app once again i'm going to stop and
91:31 - rerun it
91:32 - and once it's going to run we will see
91:35 - if
91:35 - our projection is working or not
91:38 - so it's running now let's get all the
91:41 - data
91:42 - so previously as you can see we were
91:44 - getting underscore underscore id
91:46 - and underscore hyphen v let's send this
91:49 - again
91:50 - now we have only the data which we want
91:53 - because we have added the filter for
91:55 - that using projections
91:56 - right so i think that's it for this
91:59 - video
92:00 - i hope you enjoyed this video and i will
92:02 - see you in the next video

Cleaned transcript:

hey guys welcome back in this video we will talk about nest js so nest js framework is increasingly becoming popular among developers who want to build scalable serverside applications so those of you who don't know what nest js is you can go to this website which is nest js.com and according to this website ness js is a progressive node.js framework for building efficient reliable and scalable server side applications so nest js fully supports typescript and in the background it uses node.js framework and express so what we are going to do is we are going to learn how we can use nest js to build our rest application although nest js supports many different protocols but for start we are going to build a rest application using nest js now nest js have a very extensive and very good documentation so if you are thinking about starting nest chess you can click on the documentation tab and you will be able to see tons of good documentation so under the documentation you can see what nest js can do and what are the technologies it supports so you can see under the techniques it can support authentication database configuration validation caching so many things it can support also it can support graphql websockets micro services like redis mqtt rabbit and q kafka also it has the support for open api swagger ui and many other good stuff also if you can want to see how popular nest js is you can go to the github page for nest js and you can see as of today it has more than 31 000 stars so it's becoming really popular so let's talk about the prerequisites of learning nest js so knowledge of typescript and javascript will be very important for learning nest js if you have the experience of angular it will be a plus because it uses techniques which are already used in angular for example now because we are going to be building a restful api it's good to have a rest uh client such as postmen uh in order to test your arrest application also make sure you have the latest version of node.js installed on your operating system so once you have all these uh tools we are good to go and let's get started so what we are going to do we are going to just open our terminal and we are going to install some nest js packages so what i did is i created a directory so i am going to just go in that directory which is called work so the first step is to install nest js cli globally in order to create our nest js project with this cli tool so we are going to just give this command which is npmi hyphen g and then just write at the rate nest js forward slash cli and in my case because i want to install this globally i i need the sudo privileges also in your case it might not be necessary so i will just press enter and give my max password and now this cli is installed on my operating system so once this nest cli is installed we are ready to create our first project so in order to create a new nest project what you need to do is you just need to give this command nest because we have installed nest jscli uh globally this nest command is going to work and then write new and the name of your project so we are going to create a project called car manager so i'm going to give this name you can give any name for your nest js project and then press enter and it's going to create a new sjs project for you now first step here it's going to ask you which package manager you want to use npm or yarn so i'm going to just use npm for this so i'm going to just press enter which is going to create our project using this npm package manager so now you can see our nest js project is created and you can see it gives us hint also that we can cd into this directory and then we can just run our project using npm run start so what we are going to do i'm going to just do ls you can see this project is created inside this directory so i'm going to go inside this directory and then i'm going to open this project using visual studio code you can open this project with any other editor or ide of your choice i'm going to use visual studio code here so i'm going to just open this project using visual studio code and let me open the terminal also inside visual studio code now let's discuss about the nest js project structure so you will be able to see this package dot json where under script you will be able to see uh all these commands so we can start our web application using npm start which is going to essentially run nest start in order to start our application and you can see we can test our application using npm test under the hood it's going to use just for running our test you can also see how you can run different commands for running different kind of tests and coverages and running your application in different environment for example development or debug or production mode you can also run lint for linting your application files now let's talk about the source folder where our code is there so we are going to start with the main dot ts which is the main entry point of your nest js application so here you can see it's very simple it's going to just import this nest factory from the core nets js package and you just need to pass your app module which is there inside this app.module.ts file we are going to just see what's there in a bit but you just need to import this uh app module and you just need to pass this app module as as parameter in the create method and then you can just start your application on the port for example by default it's going to start on the port 3000 but you can change this port also so app.listen and it listens on the port 3000 by default so now we are going to go inside the module.ts folder so app.module.ts which we have imported inside our main.ts so this app.module.ts file is going to contain the implementation of application root module now there are three important building blocks of a nest js application and these are called controllers providers and modules so three building blocks controllers providers and modules and you will be able to see one file for each component you will have the controller.ts file you will have the module.ts file and you will have the service.ts file so services are also called providers in nest js module.ts is going to contain the implementation of your application's root module and then app.controller.ts is going to contain the implementation of a basic nesjs controller with just one route so by default it's going to just uh listen on this get route and it's going to just uh return you hello world so controllers are used to just define your end points so it will be a main interface for your application so you can define endpoints into the controllers now the app.service app.service.ts file is going to contain the implementation for your endpoint for example so for example some rest request comes into your application it's going to just go here and then this controller in this controller you can see there is an instance of app service and whatever you want to return as a response for that rest request you can just provide the implementation of your response inside the service so let's go inside the service here we just define the implementation about your service methods right now also you will be able to see for example when you go to the app.modules.ts this kind of annotation here so these are called the decorators so if you are familiar with the angular you might have seen these kind of decorator decorators right so because we are in the module uh decorator here we just provided at the raid module and then inside the module you can provide the imports controllers and providers so provider essentially are the services right so we have imported the app.service and app.controller here and here we provide the mapping of all the controllers you have inside your application and all the providers you have in your application and sometimes you need to import different kind of uh files in your nest js and those imports we are going to do here so we are going to see uh more about imports in uh the later part of our uh application right so uh as i said you have services modules and controllers also you have the app.controller.spec.ts file so this will be uh your unit test file so here you can write your unit tests okay and you can also define for example service dot spec dot ts file for testing your services and for your integration test you have this test folder so here you can run your integration test and in next js it is called endtoend test okay so here you can test your whole application using just and under the hood it uses super test for your integration tests so now let's run our application you just need to write an npm start here which is going to run our application and once you see this message which says nest application successfully started you can go to your browser and then just write localhost uh colon 3000 it's and it's going to return hello world right you might be wondering uh this is our typescript project so we haven't transpiled our typescript into the javascript code and how it's running uh directly using npm start in the background nest js is going to take care of transpiling and then running your application directly using npm start if you want to just explicitly build your project you can give this command npm run build it's going to transpile your tribescript files into javascript but if you directly use npm start also it's going to transpile directly your files and it's going to run your project for example i'm going to just stop this application i'm going to go to the service dot ts file and here we have the get hello world which is returning this hello world to us i'm going to just add hello world from me and then i'm going to just restart our application it's going to directly transpile our typescript code and it's going to start our application on the port 3000 so let's refresh this page now it says hello world from me so this is how you can create your first nest js application till now we have seen how we can create our first nest js project and we have seen a broad overview of our nest js project now we want to add some end points to our rest api so what my plan is let me show you uh the api uh documentation which i want to implement so our api name will be car manager api which will be able to add a car or read all the car information or read full data of an individual car or it's going to delete a car or it's going to update a single car and these are the routes or endpoints which i have defined so we are going to define a get cars route and then we are going to define post car get car by id put car by id and delete car by id so this is what we are going to do and by the way you can also create this kind of swagger documentation using your nest js framework but this is not the part of this demonstration i just created this swagger documentation separately for this demonstration but i'm not going to show you how you can create this using nest js so let's get started so because we have already downloaded the nest js cli we are going to use the nest jscli to create our module service and controller so uh the good thing about nest cli is we can create our module or service or controller or it can do many other things automatically so you don't need to write your modules or classes or typescript files uh from the scratch right so what we are going to do is we are going to generate a module a controller and the service for the car so as you can see these were the files which are automatically generated for us we are going to remove all these files once we have generated our car module controller and service and we are going to use that because we don't want to just send hello world for example and this route is not even required in our api right so process of creating the module controller and service is really simple using nest cli you just need to write nest and then you just need to give this flag g or you can just write generate here in the short form you can just write g and then you write what you want to create right so for example first of all we are going to create a module so i'm going to just write module here and then give the name of your module so we are going to create a car module so i'm going to just write car here okay so nest generate and the name of the component you want to generate and then the actual component name which you want to generate just press enter which is going to create a new module for you so when nest js create a module or controller or a service it's going to create a folder with the same name which you have given here so we have created the car module and inside this uh we have this car.module.ts file right now as i already mentioned uh this at the rate module is the decorator if you want to create this car module from the scratch you can simply create this without using this uh cli also you just need to add this module decorator on top of your module class name and this module is present in the nest js common package right so just write nest g controller and the name of your controller and then press enter and it's going to create a new controller for you so here you can see this controller is created for us and you can see for the controller you need to add this decorator controller and then you need to add the route which you want to add to your controller so we want this subroute which is car as you can see all our our route have car car car car we are going to create the get car route also we are not going to create extra cars module or controller uh i decided that we are going to just create a car uh route here not cars right so keep this in mind uh and now we are going to create a new service for our car so here you just need to write service so nest g service car and it's going to create a new car service for you okay so we have generated the module controller and the service ts files also two extra files are created for the unit test car.service.spec.ts which is the unit test file for the service dot ts file and you also have this card.controller.spec.ts this is the unit test file for your car.controller.ts file right so now you will also observe that in your main modules when you go to the main module you will see here that under the imports element there is a new mapping which is added here which is cars module and this code is also auto generated right so if you are creating your controller or module or your service manually without this command line you just need to add your module which you have created and you just need to import it under your main app.module.ts file right and now what i'm going to do is i'm going to remove the controller and provider which is the main app controller and main app service provider because we don't want this we just want the car module car controller and car service right so i can just remove this controller from here and this provider from here and remove these imports now let's go to the car dot t so i'm going to go to the car.module.ts here and you will see that inside this module we have imported the car service and the car controller okay so these files are also automatically generated and we have added the decorator here as i mentioned earlier and then under controller we are going to add all the controllers in our case we only have one controller which is car controller and under provider we are going to add all the uh services right so we only have car service right now and we are going to just export this module and this is the same module which we are importing in the app.module.ts file which is this one right also we don't need this main app.service file because we have removed uh this dependency so i can just right click and delete this service file also we can delete this controller also right so i'm going to right click and delete the controller for the main app and then app.controller.spec.ts file also i'm going to remove right so now we only have the car controller car module and car service and unit test files for that and we have this app.module.ts where we are just importing our car module and in the main.ts we are just importing our main module and we are just starting our application on the port 3000. so now what i'm going to do is i'm going to just clear this terminal and i'm going to just transpile my typescript file to see if everything is working correctly or not so i'm going to just write npm run build here and once all the files are built successfully and if i don't see any error we can move forward so as you can see there is no error in transpilation so we can move forward so what we are going to do is we are going to start from the controller here so let's create uh some of the end points in this controller so the first thing which we need to add to the controller is the service so we are going to inject the service which is the car service into our car controller so i'm going to just create a constructor here and inside this constructor we are going to just inject our service which is the car service so first let me just import the car service in car controller so i'm going to just write import and then i'm going to just import the card service which we have already generated right so just write dot forward slash and then car dot service right so once we have imported this car service you just need to add the car service name also here and because we have provided the same name here car service right so we are importing this inside our controller and now we are going to just inject this service instance in the constructor and now we are going to just inject this car service instance into our controller constructor right so i'm going to just name it as car service and also i'm going to remove this space from here so once again i'm going to go to my card.service.ts file and you can see in the service we have included this at the rate injectable decorator so whenever you create a car a service or any service manually you need to add this at the rate injectable decorator on top of your service right and that makes your service injectable and that's how nest js is going to recognize that this service is injectable so we can inject this service inside the constructor of the controller right now we are going to create some of the endpoint methods for our car controller so the first method will be get cars let's say so i'm going to just make this method a sync method and let's say that method name will be get cards and in the body of this method we are going to just call our service instance for now so card service this dot car service and we are going to create different methods uh later in the car service also and we are going to name this method same which will be car get cars so this method we are going to create in a moment in the service and also because this is an async await method so you can uh just write return here if you uh are not returning anything then you can also just write return without our bait here i'm sure you know uh this concept from before also right and then we are going to provide a new decorator and this decorator name will be get so at the rate get here you just need to add get here and you just need to import get uh from your nest just common package also so you can see get is here and we are adding this get decorator here and you just need to add these parentheses here and inside these parentheses you can provide any uh sub route so if you want to get the car by id you can just write id here or whatever routes you want to add here right so for now we just want to uh add the get method so when you just add this empty a get method this means that uh you are just calling the get method on this car route right so let's add this get cars in your service file also so i'm going to go to car.service.ts file and here i'm going to add the public method which will be a sync await method and i'm going to name it as get cards and in the body what i want to do is i want to return something for now i'm going to return empty object from here now we also need uh some kind of uh mock data for the cards so i'm going to create a new file here and i'm going to name this file as cars dot mock dot ts file okay so here in this mock file what i want to do is i want to return some kind of dummy car object array right so i'm going to just export const cars is equal to then some kind of dummy data which i already have so i want to add one object to my array which will be already available so this array will be a mock array which is going to return this one object which is already present here and the other object we are going to uh add dynamically to our array when some request comes right so what we have done till now we have added this get cars into our service and into our controller right and we are just calling or returning the get cars method from the car service inside your controller also inside this get cars method so inside the cars dot service we are going to import our mock also so let's import our mock which we have created which have the name cars here and we are going to import it from the mock file which we have created and now we can use this cars object which is our mock data inside our car service so i'm going to just write private and then cars here which will be equal to this cars which and then we can return this uh dot cars uh from the get cars method right so now we have uh just uh finished first endpoint and we can test our endpoint by just running npm start command once your application is running i'm going to just open my postman and then i will just write http colon forward slash localhost 1000 which is the port on which our application is running and then i'm going to just give this endpoint which is car here so essentially we are just sending get car uh request to our application let's uh send this data and you can see it sends us this kind of data which is sent using this get cars method which is there inside your service and we are just returning the mock which we have just created which is uh this one right and first of all this request reaches to your controller and it sees that your base route is car here and here we haven't added any sub route so that means we are just responding to the car get car request using this get cars method in this video we are going to add other end points like delete car by id get car by id and put car by id and also we are going to create a post method so what i'm going to do is i'm going to go to my car.service.ts file and here i'm going to create some methods so these are the method which i'm going to implement so i'm going to implement postcard for the post method i'm going to create a method called get car by id so if the user have the id of a particular car object then he will be able to get that data related to that id user will be able to delete a single car using the id of the car and also user will be able to put some data put means update the data if he have the id of the car element okay so there is no implementation there so i have added all these method inside the dot service dot ts file now uh i think for now the async is kind of overkill for now because we are not returning any uh promises uh here so i'm going to just remove this async from here so it's going to look like this and when we will require a sync await then we will add those async await methods right so for the post method what we want to do uh when the user sends some car related data for example he sends the brand color and the model and even the id then we just want to add this data to our cache which we have here which is cards right so in the post method what i want to do is i want to add cars element to my already existing cars array so this is by default our cars array object and i want to add some element like this uh into my cards array here right later maybe we will add mongodb functionality but for now uh i want to keep everything simple so what i'm going to do here is i'm going to just push the car object which is this one we are also going to define the data type of this car object in a few minutes but what here we can do we can just write this dot cars and if you uh already are familiar with the arrays in javascript or typescript you can use a push method and using this you can add data into your array okay and once you have pushed this data you can also return this data now for the get car by id method what we require is some kind of id so as you have seen here in this car object i have defined the id brand color and model right so let's say id is a number instead of this kind of string so it will be easier and let's start with the default id1 and we are going to add more elements to our are using this id and we'll be able to get the elements by id also right so now we know that id will be a number so i'm going to just define the data type here which will be our number and then we want to get the car by id so we have to first of all find the car by id so i'm going to just define const variable which is called car and then what we are going to do is we are going to find the car inside our array which we have here which is cars array so i'm going to just write this dot cars dot find and what we want to find we want to find the id right so i'm going to just write car and then we want to find the id when we call the find the method over an array we are going to get each and every element using this car element and then we can call car dot id so i'm going to just write car dot id and if this car dot id will be equal to the id which we are going to pass then we know that it's our car now here i can see this red squiggly line which says replace car with uh parentheses car so the nest just already have this es lint uh installed and this uh linter is suggesting us to just enclose this car inside the brackets right so now once we get the car by id we are going to just return this car right so we can just uh write return car and then it will just return the car object you can see this like this now of course you can add uh different kind of error handling so for example if you don't find any car inside this car array you can throw some kind of error but that logic we are going to uh add a little bit later for example or let's add that logic right now so let's say if we don't find any car inside our cars array what we want to do we want to throw a new error so i'm going to just write through new and then error so now in nest js there are different kind of errors which are defined in the nest common package so we are going to add one such uh error class which is http error error for example or http extension it's called okay so we are going to add this http extension and we are going to throw this http extension and you can see when you hover over this http extension you can just send the error string and also the status number so because we are throwing this error for the not found so we can just add not found here and then the status code will be 404 if you are aware with the http status codes right now let's move to the delete by id method so here also this logic will be same because we want to just find the car by its id so this logic we can keep it as same and it's going to be a number so we can define the data type of the id also and the return value of this delete car by id first we need to delete this car object from our array right so i can just write this dot cars and then we can use the splice method for example so just call this splice method and we want to first of all know the index right so if you want to splice some index from a car array what you can do here is instead of using this find you can just use find index method which is going to give you the index if this id is found inside an array so instead of the object you will get an index so i'm going to just write index here instead of the car and if there is uh no index so if the index is equal to let's say 1 then we are going to throw an error in this case right and if the index is present there we are going to splice that index uh from our cars array okay and then we are going to simply return our cards okay so i'm going to just write this dot cars which will be the array after the deletion of the object if we find the id uh there now for the put car what i want to do is i want to let's say i want to delete a single element from the object which i found out right so let's say i have this uh object and let's say i just want to update the brand if i find this id using the id of this object okay i don't want to uh edit the whole object i just want to add it or update the single element from an array right so how i can do this so as i have shown you this kind of swagger documentation as i go inside the put car i will just send the id of the car and in the query parameters i'm going to pass the property name and property value right so i want to pass property name and property value so property name will be in our case for example a brand color or model and the property value will be for example bmw or gold or the model value here right so we will also learn how to use the properties right so what i want to do here is we want to of course get the id which will be a number and then i want to uh use the property name and property value so we want to pass here property name which will be a string and also the property value for example and for simplicity i'm going to make it like camel case so property value and property name this will also be the string so for this what we are going to do we are going to once again find our element by id so we can use this this code again for finding the element inside an array by id so we are going to find the index of the element and if the index is not found then we are going to throw uh the error otherwise we want to edit that value so how we can edit that value because we already have cars so what we can do this dot cars and we are going to edit the car for that index so i'm going to just add the square bracket and i'm going to get the value of the element at that index and then i'm going to add it the value so we can use once again this square bracket and this will be the property name and we want to just uh replace the value by the value of which we are providing in the query request right and then once this value is edited we can just return the cars array once again okay so we have added the business logic inside our service.ts file now we are going to go to the car.controller.ts file and here we are going to add the end points which we want to add so i'm going to add all these empty methods here let me just also remove the async from here and i'm going to just make it public method so now let me add all those decorators here first of all for the post car i'm going to add post decorator and you can see it's automatically added in my imports right so if you don't uh see this just add it into your import also for get car by id i will just simply use the get decorator for delete i'm going to use the delete decorator and for the put request i'm going to use the put decorator right so you can see all these uh decorators are automatically imported in my case using visual studio code ide but if they are not automatically added you need to add those imports right now we also need to add all these uh parentheses here so let's add all these parentheses and then let's first of all implement this post method so inside this post method we don't have any sub route we just want to add the cars in the body so there is a decorator called at the rate body using which we can access the body of the post request so just write uh body here and you can see this body is also added in my imports and then this body will be the car right now if you want to add the type for this car you want to add this kind of type which have id brand color and model right so you can either define a simple type using typescript or in nest js they have a concept of dtos dto stands for data transfer object and dto is an object that defines how data will be sent over the network so we can define a dto file for example so let's define this dto dot ts file so this file name can be car dot dto for example so i'm going to just write car dot dto dot ts and inside this car car.dto.ts what we want to define we want to define the type of the car so we can just write export class and class will be the car class or car dto and then inside the car class we can define readonly id we can also define the type of id which is number then we will define read only brand and the type will be the string so once we have this kind of dto we can import this uh dto class you can also say this will be a car dto so you know that this is the dto and not the normal class and let me fix all the linting errors so let's name it car d2 instead of car right so now let's import this car d2 inside our controller so let's add this import and then we can just use this car d2 as the type of our car okay and then we just need to simply call our service which is our car service and then we have the post car method which takes this uh car as a parameter so we just need to do that and we need to just uh return this value right so just write return here and we are good to go now as i can see here this body is giving me some kind of error and it says you need to add these parentheses so let me add those parentheses here in order to access the body correctly so this method is done now we need to move to the get car by id method so here we are going to add this route and we want to access the id right so it's similar to using express so whenever you want to access a parameter you can use colon and then the name of the parameter right so it will be like car colon id so let me show you this request real quick it will be like this car forward slash car forward slash a colon id and you can access the value of id using this controller so let me go back to my implementation and here to access the parameters you can use a decorator called param and you will see this decorator is also added in my imports and don't forget to add this parenthesis and how you can access the parameter so our parameter name will be id so you can just give this a quote and then we can access the parameter by its name which is id in our case and then the name of our variable will be id and let's say it will be a number right so it will be a number and we just need to simply return the value from our services so i'm going to just write return this dot card service dot get car by id and then we are going to just pass our id here right so once we have this get car by id method implemented we can move to the delete car by id method and we want to pass the similar kind of param here because we want to delete the car by id right so here also we want to access the parameter so once again we can use the same kind of arguments here and then we can just return the value of delete car by id method from the service right so car service dot delete car by id and we just need to pass our id to our method in the inside the service now we will move to the put method so also we will be passing the id as the parameter in our put method if you have seen this request body so we are going to pass the id and in the query we want to pass the parameter name or property name and property value right so this will be the parameter which is uh the id and now in order to access the query you need to add a decorator called query so how simple this is so you can just uh add the decorator query and then you can define your query parameters so let's say uh this will be the query variable name and now what we are going to do we are going to just return the value which is this dot service dot put car by id where we pass our id and we want to get the property name and property id right so i can just define const property name query dot uh the property name which we want to pass so let's say property name which we want to pass is a property underscore name from the query params so this will be the property uh value and let's extract this value from our query parameter which will be value right and we are going to pass this so this will be value and we are going to pass this as the second parameter and the third parameter of this method will be property value so now we have implemented all our methods and we just need to test them if they are actually working or not so let's test them one by one so i'm going to just write npm start so our api has started successfully so i'm going to go to my postman and here first of all i'm going to get the list of all the cars which is going to return us this kind of object which is the mock object which we have already defined now let's uh do the post requests so let me just add one more request here and this will be a post request and the route will be car in the body what we want to pass we want to pass the json value right so we are going to pass the json value and in the body i want to pass this uh kind of object so let's uh pass this kind of object from here and let's change the value so let's say id will be 2 the brand will be vw the color will be red and the model will be let's say polo okay and let's uh do this request but this is the post request right so we just need to change the uh method here not here but we need to change the method here in our second tab so the body will be this body and let's uh do this request so send and it says 201 created that's okay and once we have posted our second element we can just get all the list of all the cars using get cars so i'm going to just send once again cars and we are going to see that now we have two elements inside our array first one was already there and this one we have uh added right now we are going to test our put method first of all so i'm going to just uh use the similar url uh but we also want to pass the id of the card so let's say i want to add it the id 2 so you see here it's id2 or let's say we just want to change the color of this vw car okay so i will just give the id which is a 2 here and in the parameter value let me just change the method to put and we want to just add the query which will be the parameter value or property value so property underscore name will be the color and the property value will be so property value will be from red we want to change it to let's say blue right so right now we have the vw which is red in color and we want to change this value to uh blue right so this will be the whole query with the query parameters and let's uh do this uh query or let's send this and let's send this request so i'm going to send this request and it says 404 so why this is happening we need to check it so i think the problem in our code is because we are not returning our result using promises that's why it's giving us this problem so i'm going to return the values from get car by id delete car by id and put car by id using the promises so let's do that so i'm going to just return the promise from the get car by id and the type to start with we can use any here and later you can add more specific type here and then what i'm going to do is first of all i will declare a const here and i want to check whether or the id is a number or not or and if it's not a number then i'm going to just convert it so cost car id is equal to number id and now we are going to pass this car id here right and then let's return the promise so return new promise and then we are going to add the resolve a value here and then using the arrow function we are going to return the code which we have written here so let's do that and then we can just use resolved to resolve this car object okay you can also add a return here and colon here okay so let's do the same for our delete car by id and put carbide id so let me add these return types here and here and also i'm going to add this code which will be same for both of them and then i'm going to just close this here and bracket here and also let's and also let's fix all these uh indentation problems and this car id now will come here and this car id in delete carbide will come here and also we need to resolve it right so we need to send the result using the resolve so let's do this here and also inside the putcar id function okay so now because our functions are returning promises inside our controller we can use async await also right so i'm going to go to the car.controller.ts file and here i can just write a sync also i can add this async here and i can add this async here okay if you want to be more uh specific you can also uh create a constant here and then write await and then return your value for example i can just write const result is equal to await and then i can return this value from here which will also be fine so i will just leave it like this because i think it's also going to work let's see and check if it works or not so i think uh that's all we want to do here i will just restart my app once again and i will go to uh my postman request so get cars is working let's post new car with id2 and now we can see we have two uh cars here and we want to add it this car which have the id 2 and we want to change the color to blue till now it's red right so let's do this and now you can see it's going to return this result and the color of this car is changed to the blue color also if you want what you can do because right now it's returning this service dot ts file we are just returning all the cards so instead of returning all the cars you can simply return the car property which you have changed so like this okay so let's run the app once again and let's see if it works so i will just go to my postman again i will just add this car by id once again and then when i send this request it's all only going to return us the element or the object which it has changed and we have changed specifically this value okay so this is working uh we also need to check uh if the get car by id and delete car by id is working or not so let's let's delete uh this car which have the id 2 so i'm going to just write delete and i think we don't need to um add any other uh parameters here right let's do the get request first and then we can do the delete so i'm going to just send this request and it's giving us the right response here you can also use one id one we have id one and two right so it's going to give us this value by id also if i want to delete the value so i will just use the same request let's say i want to delete the car by id 2 and i will use the method delete here and then i will just send this request and it gives us this result which is which means that it has deleted the element with the id2 and now we only have one uh car element inside our array so when you uh give the get all cars request it's going to only return us one car because the other car we have already deleted you can also change this response to something else you can do something like this that when the car is deleted you just send no response and you can also change the status codes here also so our basic api code is working now now in this video we are going to discuss about how we can add the mongodb support to our nest js api so we are going to start with the installation of the required packages so i'm going to just write npm i hyphen hyphen save and then you need to add these two packages which is nest js forward slash mongoose and the mongoose package itself so mongoose okay and then press enter now once you are done with the installation of the packages we are going to go to the main app.module.ts so this is the app.module.ts and here we are going to first of all import some packages from the nest mongoose package and which module we want here we want to import the mongoose module from the nest js mongoose package okay and once you have this you can use this mongoose module in order to connect to your mongodb database so here you can see under modules we have imported already our car module which we have created previously and now we can also add the support for the mongoose module so just copy this mongoose module dot in mongoose module you have a few methods so we are going to use this method which is called for root which is going to take your mongodb uri as an argument so if you are familiar with mongoose or mongodb we can connect to our database using this uri so here as the uri i'm going to just write mongodb and then colon forward slash forward slash local host because i will be using my uh mongodb which is running on my local host and then the name of your database so let's name our database as a car manager okay also you can add some of the options which mongoose takes at the time of the connection but we are going to add these later if we require them okay now what i uh i'm using is i'm using the docker instance of mongodb you can install mongodb locally or if you are running a mongodb on a server uh you can provide the uri of that server also right so for now i will be using the docker to use on my mac machine and the command for this is docker run hyphen p this is the port mapping of on which we are going to listen using the local host and this will be the location where we are going to save our data in our local machine using the docker right so let's run this you can also write the hyphen d here to run this mongodb container in the detached mode but i will run it as a separate instance so you can see it's running and now i'm going to open a new terminal and i will just write docker ps here and you can see this uh mongodb instance is already running so i'm going to just write docker exact hyphen i t and the name of the container or container id also you can give and then space bash so using this command we are just opening the bash terminal inside the container right now i can just give the command in order to connect to my mongodb and here i can just say show dbs and it's going to show me the list of all the databases so right now it has these three databases which are created by default and when we are going to run our app it's going to create this uh database also okay so now we have our database connection now we are going to create the schema for our mongodb so for that i can create a separate file inside this car directory or i will create a folder let's say and i will name it as schemas and inside the schemas folder i will add all my schemas so the first schema will be car dot schema.ts for example and here i will first of all import the mongoose package so import asterix as mongoose from mongoose right so because we want to create the db uh schema using mongoose we will import this package and then we are going to just create the schema so i'm going to just write export then const and then the name of my schema will be let's say car and we are going to create a new schema so i'm going to just write new mongoose dot schema and then we are going to add our schema inside these parentheses so i'm going to just add these curly brackets and then we can add our schema here so what we have in our schema so in our schema we have we can see the dto so we are going to use the same attributes inside our schema so we can just copy and paste them here and for now i'm going to remove this read only attribute from here and because it's a json object we need to replace this semicolon by the commas right we can also fix all the auto fixable problems and this will be capital number because we are creating the uh db schema using mongoose right so you will use these uh data types now i can also add the car interface which i will use for the mongodb model or mongoose model so let's uh create the interfaces folder inside our car directory so i'm going to just write interfaces and then press enter which is going to just create this interfaces folder and inside the interfaces folder i'm going to just write car dot interface dot ts here i'm going to import the documents from the mongoose package so let's add a mongoose package and then we will add this document from mongoose and then i'm going to create an interface called icar for example so let's name it as i car which will extend so extends from document and here we can add the interface types which are id brand color and model same as our dto okay so once we have our interface and schema we can go to our servicescar.services.ts file and we are not going to uh use this logic anymore we will add the mongodb logic but first of all we need to add our schema and our interface right so let's add those things so i'm going to just import so first of all i'm going to import the model from the mongoose package and then i'm going to import the nest js mongoose package right so let me just add this next js mongoose package and from here i'm going to import the inject model okay and the next thing we want to import is the interface which we have created so i'm going to just import that interface and this will be the car interface and what we need to uh import icar and also let's import the dto because we are going to use that dto so let's import that which is called car dto and we need to import the car dto from there now in the constructor of our service so let's first of all delete all this logic which we have created in the previous video when we have seen how we can add the logic uh for all these uh method which are put car by id delete car by id post and then get cards right so let's remove all the logic from here and also we don't need this car's mock data so we can just remove that also so first of all we are going to add the constructor here and in the constructor in order to import the mongodb model which we have created using the schema we need to just add this decorator which is inject model and then inside these brackets we need to give the schema name which is car in our case i think so we are going to just write car here and then we are going to just write private read only the name of our model will be car model for example and the type of this uh model will be the model which we have imported from the mongoose and then we can just write the i car here okay and also we need to add these curly brackets so this is how you can inject this car model inside your service and then we can implement car get cars method logic using this model so i'm going to just write const curves for example and then we can just write this dot car model which we have just injected and then we can use a different methods so we want to find out all the cars so we can just write find and then we can just write exact and it's going to give us the list of all the cars and then we can just return this card so let's return this now of course you can again add the error handling here so here if the car is not found so if there is no cars and then also we can check if the first element is there inside our cars array otherwise it's not an array right so we can just check that and if we don't find this then we need to throw an error so we can just write through new uh http exception right and we can just uh give the first argument which is uh not found and the second argument will be 404 which is the status code right so this is uh how you can also add the error handling for your get cars now in the post car method what we want to do we want to post the or save our car object so here we are going to just write const car is equal to uh await because uh we are using mongoose uh using async await so we need to add a sync here and then a weight here and then this dot car model dot uh whatever object we want to pass here so we want to pass the car so we have created the new car object and now we just need to save this data so i can just write return uh car dot save and this is going to save this data and here as an argument we can just write a new car because the name here is conflicting right so i'm going to just write new car here and then pass this uh parameter here so this conflict can be solved also i forgot to add a sink away here in the get car so i'm going to just add that and then it's going to work now for the get car by id also we are going to use this kind of code so let's uh copy this code from here and also add a sink here and instead of using find we will just use a finder one method we just need to change find to find one because we want to find on the basis of the id so using this curly bracket i will just use id here and it's going to find the data based on this id because we are just searching for only one data so it will not be an array so we can use other logic for that which is like this if there is no car found then we can throw an error otherwise we will return the result you can use the same code for delete car by id we just need to add a sync here and instead of find one you use delete one delete one right how do we know that the car is deleted we know this by using car dot delete count so car dot delete count if this delete count is equal to zero that means our data is not deleted then we can throw the not found error otherwise we can return the car right and the last method will be once again put carb id so a sink here once again we can use the same logic we just need to change this method here so let's use this uh logic instead of using find one we will just use find one and update method so just write find one and update and we want to find the result by id which is ok and the second argument here will be what we want to update so we want to update a single property inside that object right so based upon the property name we will be able to change it so i'm going to just add this curly bracket and then i'm going to add the square bracket and based upon the property name i want to change the value from here let me fix all the eslint errors and now we have all the methods also if you want to add the type to your car parameter here to the postcard argument you can add the type to your car right also we can add the promise type here also so i'm going to just write promise and the type here will be car dto but it will be an array of card dto right and in the get cards by id we are returning only the car dto which is the same single uh result right so in car get cars we are returning the array of car dto type and in the get car by id we are returning a car same you can do for a delete car by id and you can do the same for the put car by id now there is one last step which is remaining which we want to do in the car.module.ts file so go to the car.module.ts file and here we are going to import some nest packages and we are going to first of all import the nest js mongoose and from the nesgus mongoose we want to import a module called mongoose module and also we need to import our schema right so we will just go to our schemas and import our mongodb schema from there so car schema and then we can just import this and and now we can import our mongodb schema inside our car module so you can just add imports and using this square bracket you can add the mongoose module and mongoose module and then inside mongoose module you need to use the for feature method and then as the parameter for this for feature we need to add the parameters as an array so the first uh element here will be the name say name is a car in our case and the second argument here will be the schema so schema is the schema which we have imported which is card schema and also add the comma here and we can just resolve all eslint problems hopefully it's going to work so let's run our code and let's see if everything works or not so i'm going to just write npm start and let's see if it works or not right now our app is started we can go to our client also and see if there is any database created or not so right now till now until the start of the app there is nothing created here so let's uh use our postman to post something so i'm going to just post one other car with the id 2 and brand color and model let's send this request and you can see that now we have added this into our database and we also get the result with the id and hyphen hyphen v also so now this data is added to our database we can check it so once again i will just write show dbs now i can see that this database is created so i can use use car managers and then we can just write show collections to see all the collections we only have one collection which is cars which is okay and then we can write db dot our collection name which is cars dot find which is going to show you all the uh elements of your collection right so you can see there is one data which is added to our database which is the brand vw color red and model polo which we have added using this uh post request let's add one more element with id one let's say brand will be bmw and the color will be something and the model will be bmw x and now i'm going to just send this request and you can see it's also added and now i can just use this find and now we can see there are two documents inside our mongodb collection so the put method is working let's uh see if get cars method is going to work so it's going to give us a list of all the cars and it works you can see we are getting the list of all the cards now we want to use the get car by id so i want to uh send this request which is for the car with the id id1 and it's going to give me the result that's working let's query for the car with the id2 it also works now i want to do some put method so let's say i want to change the property name color in the car id 2 with the blue color right now the car id to have the color red right so let's send this request and you can see it's working or not working so still the color is red and we can also query here and here the color is changed to blue okay so this edit is working but somehow the result here is red because we are just sending let's go to the service because we are just sending our car which is found right so you can see our method name here is find one so it's going to find the document by id so it has found the document by id and return us the document which will be changed and then it will update the property okay so this is also working as expected right so inside our database its uh color is blue which is okay and let's use the delete method to delete this document so i want to delete the document with the id 2 let's send this request and you can see deleted count is equal to 1 that means it's deleted and that means when we go and query our database you can see we have only one document here okay so delete is also working this one little annoying thing which is you can see when we query for our data the default id which is created is also coming and this hyphen hyphen v is also coming so let's say we want to filter out these two things because for us these four elements are important and this is the unwanted data which is coming from the mongodb right so for this we can create the projections so in the car service go at the top and then we are going to just write const car projection and then is equal to curly bracket and here we can just add whatever projection we want so we want to filter out hyphen hyphen v so we can just write hyphen f and v false also we want to filter out the id so underscore id and then it will be also false okay so this is our projection and this projection we can add to the get cards methods here as the second argument so we are going to just add a blank curly bracket here and as the second argument of the find we can add this projection also in the get cards by id we can add as the second argument the scars projection or this projection is going to filter out the underscore underscore v and underscore id from your result so let's uh run our app once again i'm going to stop and rerun it and once it's going to run we will see if our projection is working or not so it's running now let's get all the data so previously as you can see we were getting underscore underscore id and underscore hyphen v let's send this again now we have only the data which we want because we have added the filter for that using projections right so i think that's it for this video i hope you enjoyed this video and i will see you in the next video
