With timestamps:

00:00 - so hello guys
00:01 - in this video tutorial series we will be
00:04 - making an endless runner game for
00:06 - android devices using unity engine
00:09 - this series will be completely beginner
00:11 - friendly so if you haven't done any game
00:14 - development before then also you can
00:16 - follow along
00:18 - we will cover each and everything
00:20 - in this series from downloading and
00:22 - installing unity to exporting our
00:25 - project to android devices
00:27 - so first of all to download unity engine
00:31 - open up your browser
00:33 - and search
00:34 - unity
00:35 - download unity hub
00:38 - so
00:39 - click on this first link
00:42 - which is unity3d.com slash get unity
00:46 - slash download
00:47 - so on this page you can find
00:50 - a download button to download unity hub
00:53 - you can also download unity directly but
00:56 - unity hub will help us to manage our
00:58 - projects and
01:00 - other ui versions
01:01 - very easily
01:03 - which i will show you in a moment so
01:05 - click on this download unity hub
01:07 - button and download unity hub after that
01:11 - install unity hub i have already
01:13 - downloaded and installed it
01:15 - that's why i'm not going to do it again
01:18 - so it is as simple as downloading and
01:20 - installing any other software so it
01:22 - should be pretty straightforward
01:25 - so
01:26 - download unity hub after downloading
01:28 - unity hub it will look like this
01:32 - your projects feed would be empty
01:35 - because you would have not created any
01:37 - projects
01:38 - so we will quickly
01:40 - talk about some tabs
01:43 - so here it is a learn tab so here
01:46 - there are
01:48 - there are lots of tutorials
01:51 - which you can
01:52 - watch
01:54 - from unity
01:56 - and this is a community
01:59 - forums and blogs
02:01 - and here it is installs
02:03 - so here we can download
02:06 - different unity versions currently i
02:07 - have downloaded 2019.4.20
02:11 - f1 lts
02:12 - this lts means long term support
02:16 - so
02:17 - whenever we download any version
02:19 - it is recommended to download lts
02:21 - version so that we don't face any
02:23 - difficulties in future
02:25 - we will download
02:27 - a new version
02:28 - in a moment but first of all we have to
02:30 - do
02:31 - some
02:32 - necessary things so first of all we have
02:35 - to generate a license
02:37 - so click on this settings button
02:40 - and then here you can
02:42 - click on license management
02:45 - i have already activated a personal
02:47 - license but
02:49 - you you would not have this
02:52 - so you have to login in your unity
02:55 - account
02:56 - to generate license so click on login
03:00 - so it will
03:01 - prompt you to the
03:03 - [Music]
03:04 - so here you can sign in with your email
03:07 - and password
03:08 - if you haven't created unity id yet so
03:11 - click click here create one and you can
03:14 - create it easily it is as simple as
03:16 - creating a any gmail account
03:20 - so once i will login
03:22 - then i then we will continue
03:26 - so i have logged into my unity account
03:29 - so from here we can click on activate
03:32 - new license
03:34 - here we can choose either unity personal
03:36 - or unity pro
03:38 - for this series the personal would be
03:41 - more than enough
03:42 - if you are running any enterprise or
03:45 - big companies which is making
03:48 - more than 100 000 per year
03:51 - then you have to
03:53 - take subscription of unity but for in
03:56 - our case it is fine to download unity
03:59 - personnel
04:00 - and from here it will ask
04:03 - for these two options so just click on
04:06 - this i don't use unity in a professional
04:08 - capacity
04:09 - or if you use it
04:11 - for a professional capacity then
04:15 - click on this first option
04:17 - and
04:18 - click on done
04:19 - i have already
04:21 - activated my account
04:23 - so that's why i am not going to do it
04:24 - again
04:25 - but you have to just click on done and
04:27 - your license will be created
04:30 - so after doing that
04:32 - you would be able to download new unity
04:34 - versions
04:36 - so here click on install step
04:39 - and from here we can add new unity
04:41 - versions so click on add button here
04:46 - and it will ask you to
04:49 - download any of these versions
04:52 - so these are official releases and these
04:55 - are alpha releases
04:56 - and
04:59 - early versions of unity which are in
05:02 - testing mode
05:03 - so
05:04 - it is
05:06 - recommending us to download this lts
05:08 - version which is long term support
05:10 - version so we will click on next
05:14 - and from here
05:15 - if you have
05:17 - not installed any ide on your computer
05:20 - then click on this will download
05:22 - microsoft visual studio community
05:25 - edition
05:26 - 2019
05:27 - you can also use vs code with unity
05:30 - but for this series we will use visual
05:33 - studio so go ahead and download this
05:37 - click on this
05:38 - checkbox
05:40 - and we will be making
05:42 - this game for android so we need to
05:44 - install android build support
05:47 - so expand this and
05:49 - make sure you have selected this check
05:52 - boxes android sdk and ndk tools and open
05:55 - jdk
05:56 - so it your
05:58 - selection should look like this
06:01 - so if you are done
06:05 - then you can hit on next
06:08 - and
06:10 - it will ask us for
06:13 - accepting terms and condition so go
06:16 - ahead and read these terms and
06:17 - conditions
06:18 - and
06:20 - click on next and you will you will be
06:22 - able to download
06:24 - it will take some time to download this
06:28 - unity version on your computer
06:31 - after downloading this we will be able
06:33 - to create
06:35 - new projects i have i have already this
06:38 - version
06:39 - 2019.4.20 f1 which is fine because our
06:43 - game is not very complicated
06:46 - so
06:47 - the version will not matter that much so
06:51 - you can download any version
06:53 - so now we will click click on project
06:55 - step
06:57 - and from here we will create a new
06:59 - project so click on new
07:02 - [Music]
07:05 - and then it will ask
07:08 - us to create either 2d or 3d or there
07:12 - are many other options like universal
07:14 - render pipeline
07:16 - which is not the topic of this video so
07:18 - we will be making a 2d game
07:21 - so click on 2d
07:23 - and from here we can name our project so
07:26 - this this will be an endless runner game
07:29 - so go ahead and name you can name it
07:32 - whatever you want i will name it
07:34 - endless
07:39 - android
07:43 - and you can save your project anywhere
07:46 - i am going to save it in f drive
07:50 - and in unity projects 3d folder
07:54 - actually you can save it anywhere you
07:55 - want so go ahead and click on create so
07:58 - it will create a new project so in this
08:01 - video we will talk about different tabs
08:04 - in unity engine and we will get familiar
08:06 - with
08:07 - the editor
08:08 - so
08:10 - since we are developing our game for
08:12 - android
08:13 - then we have to change this aspect ratio
08:16 - so click on this game window this game
08:19 - window
08:20 - is a
08:22 - preview window for our game so
08:24 - whenever we hit this play button then
08:26 - our game will be played in this window
08:29 - so
08:30 - we will be developing this game in
08:32 - portrait mode so click on this
08:35 - free aspect and
08:37 - change it to
08:39 - 1920 by 1080 portrait
08:43 - so it will
08:44 - change itself from free aspect to
08:47 - portrait mode
08:49 - but
08:50 - when you click on this you will not get
08:52 - these many options
08:54 - because our current project is
08:57 - on a pc platform so you have to convert
09:02 - platform from pc to android so to
09:04 - convert the platform we have to first of
09:07 - all click on file and click on build
09:10 - settings
09:11 - then
09:12 - you will have this icon
09:14 - on this pc mac and linux standalone
09:17 - option
09:18 - so go ahead and click on android and hit
09:22 - switch platform here you will get switch
09:24 - platform button like this so
09:27 - click on android and hit switch platform
09:30 - so your platform will be switched
09:32 - from pc to android and then you will get
09:35 - these options
09:36 - for different aspect ratios
09:40 - so it will take some time to switch
09:42 - platforms so once you have switched the
09:45 - platform then
09:46 - [Music]
09:48 - turn it into
09:49 - a portrait mode
09:51 - so let's talk about different tabs so
09:54 - first of all it is a scene view
09:57 - so in the scene view
09:59 - we can add different game objects
10:01 - so everything in unity is game object
10:05 - so
10:06 - just like here it is main camera so it
10:09 - is also a game object
10:11 - which contains some transform properties
10:14 - like position rotation scale
10:17 - and every green object
10:20 - contains some components so
10:23 - for this game object main camera it has
10:26 - camera camera component we can add
10:30 - different components
10:32 - by clicking on add component unity has
10:35 - many components
10:37 - so
10:38 - this was a c view in which we can add
10:41 - our
10:43 - game objects
10:45 - uh it is then next comes our
10:48 - game view so i have already talked about
10:51 - it
10:52 - so the in this in the game view we can
10:54 - preview our game so whenever we hit play
10:56 - button then this will preview our game
10:59 - we can see the game being played here
11:03 - so
11:04 - next comes our hierarchy so in the in
11:07 - the hierarchy we can see
11:09 - the different game objects that we have
11:11 - created
11:12 - currently
11:13 - it has main camera
11:16 - and
11:16 - we can see as many
11:19 - game objects as we create here
11:22 - so like if i right click here and create
11:25 - an empty game object so i i will click
11:28 - on create empty
11:30 - so we can see that it is added in
11:33 - hierarchy
11:35 - next up is
11:37 - our project step here
11:39 - so in the project step there is an
11:41 - assets folder
11:43 - so in this assets folder we can
11:46 - keep our scenes scripts animation
11:50 - prefabs and etc
11:52 - so it will
11:53 - be more manageable
11:55 - for a bigger games so whenever our
11:58 - projects gets bigger
12:00 - we will be able to manage it efficiently
12:03 - so we will create some folders right now
12:06 - so that
12:08 - we can manage our project so
12:11 - click on this asset folder and
12:15 - right click and create
12:17 - then folder
12:19 - and we will name it
12:20 - prefabs
12:22 - prefabs
12:25 - so what are prefabs in unity so prefabs
12:28 - are
12:30 - like you have to create the prefabs only
12:32 - once
12:33 - and then you can use it as many time as
12:36 - you want and whenever you want to change
12:38 - the
12:40 - game objects
12:42 - that are prefabs then you have to only
12:44 - change the original prefab that you have
12:47 - here
12:48 - it is a little bit confusing but we will
12:51 - see it in
12:53 - upcoming videos
12:54 - so next up we will create another folder
12:57 - for
12:58 - scripts so create
13:01 - scripts folder
13:06 - in which we will
13:08 - add our scripts
13:11 - so next is our console tab
13:15 - so in the console
13:16 - we can see
13:18 - if
13:18 - our script has any error or warning it
13:22 - will be displayed here
13:24 - so we will be able to see and
13:28 - debug it
13:31 - so
13:32 - this was a brief instead of introduction
13:34 - uh and
13:36 - i forgot about this tab this is an
13:38 - inspector tab so in which we can see
13:42 - the properties of the game object so our
13:45 - game object
13:46 - let's click on main camera so main
13:49 - camera has some properties and
13:51 - components like
13:52 - transform
13:54 - camera component and audio listener
13:57 - so this camera component has some
13:59 - properties so
14:01 - these components and properties are
14:03 - displayed in this inspector view
14:06 - inspector tab
14:09 - so this was a quick introduction of the
14:12 - tabs in unity
14:14 - so to create our player we will right
14:17 - click on hierarchy
14:20 - and uh
14:22 - okay so first of all we will create our
14:25 - sprite for the player
14:27 - so
14:28 - go ahead and click on assets folder
14:31 - right click and create
14:33 - a new folder
14:34 - and call it sprites
14:41 - inside that right click and then create
14:46 - sprites and then square
14:50 - and let's keep
14:52 - the name as square
14:54 - now click on this sprite
14:56 - and change
14:59 - its sprite mode to single from polygon
15:03 - and
15:04 - hit on apply
15:07 - then we can drag and drop this
15:11 - square sprite in our scene view
15:14 - so drag and drop
15:17 - this into our scene and
15:19 - we will rename this to player so to
15:22 - rename any game object in unity
15:25 - we can hit f2
15:27 - so hit f2 and rename it to player
15:33 - so now we can change its color
15:37 - by
15:38 - changing the color value color property
15:40 - in the sprite renderer component
15:43 - of our player sprite so click on this
15:45 - color
15:47 - and you can
15:49 - give it
15:50 - any color you want i will
15:52 - give it slightly darker color
15:57 - so now we will create
15:59 - a ground so click on this player
16:02 - and press ctrl d
16:04 - so it will duplicate our player
16:07 - and rename it
16:09 - so press f2 and
16:11 - rename it to crown
16:17 - now we will change the position of our
16:19 - ground so first of all we will change
16:21 - the scale
16:22 - so
16:25 - y scale y scale should be 5
16:30 - and
16:31 - x scale would be 20
16:34 - and then
16:36 - go
16:37 - on to the same view and
16:40 - click on this move tool here there are
16:42 - different tools in unity like hand tool
16:45 - move tool rotate and scale
16:49 - in this are for ui rectangle tool
16:52 - so click on this move tool and press
16:55 - ctrl hold ctrl and
16:58 - drag our ground
17:00 - [Music]
17:01 - slightly below
17:03 - so now we can see that our ground is
17:06 - below the player
17:07 - so now click on the ground and we can
17:10 - change
17:11 - the color of ground also so click on
17:13 - this color
17:14 - and change
17:17 - its color from
17:20 - white to something
17:22 - oranges you can color it anything you
17:24 - want
17:26 - so
17:28 - now we will change the main camera color
17:32 - so which is this background color so to
17:34 - change this background color from blue
17:36 - to
17:37 - anything you want you have to click on
17:39 - this background
17:41 - and you can change it from here
17:44 - so
17:51 - let's make it
17:54 - white
17:56 - and we will change the ground color to
18:01 - it like this
18:03 - you can color it anything you want
18:08 - so we have now created our player and
18:10 - our round so in this video we will add
18:14 - jump functionality
18:16 - for our player
18:18 - so first of all
18:19 - we have to add colliders to our player
18:22 - and ground
18:23 - colliders we we add collider so that we
18:26 - can detect collisions between our player
18:29 - and ground and between our player and
18:31 - obstacles
18:33 - so click on this player and
18:36 - here in this inspector tab click on add
18:39 - component
18:40 - and search for
18:43 - box collider
18:45 - and click on this box collider 2d to add
18:50 - box collider 2d
18:52 - to our player
18:54 - next up we will also add box collateral
18:58 - to our ground
19:00 - so
19:01 - in the same view we can also see
19:03 - colliders
19:04 - so click on add component and hit
19:07 - box collider 2d
19:09 - so we can see this green line
19:12 - this green border is our box collider
19:16 - so
19:18 - for the player
19:19 - to detect ground we
19:21 - have to also
19:24 - add another collider
19:27 - so click on
19:28 - add component and
19:31 - click on box collider 2d
19:33 - so for this second collider
19:36 - click on same view and
19:39 - zoom in a little bit
19:41 - so that we can save our player
19:43 - and click on this edit collider button
19:47 - now you can edit the boundaries of our
19:50 - collider
19:51 - so click on this bottom
19:53 - [Music]
19:54 - edge and drag it little bit further
20:00 - so
20:01 - we are doing this to detect
20:03 - ground check so if our player
20:06 - is standing on ground then
20:09 - we will
20:10 - be able to
20:12 - retrieve
20:13 - the boolean value that it is
20:16 - grounded and if it is not
20:18 - on ground that means the player is
20:21 - currently in jump state then we will get
20:25 - is grounded to
20:26 - false
20:27 - so to detect
20:30 - the equalizer
20:31 - we have to make this second collider
20:34 - which is a little bit bigger
20:36 - then the first one we have to make it is
20:38 - trigger
20:39 - so whenever we make a collider it is
20:42 - triggered then
20:44 - we can
20:44 - [Music]
20:46 - we can
20:47 - retrieve the
20:49 - information
20:50 - of the game object that
20:53 - it hits
20:54 - so we will make it
20:56 - as is is trigger
20:59 - so now
21:01 - we will add some tags to our crown and
21:04 - our player
21:06 - so basically tags are used to identify
21:09 - the game object in our script
21:11 - so click on this ground
21:14 - and here uh in the tag uh
21:18 - click on this untapped and click on
21:21 - add tag
21:22 - and we will add
21:24 - a new tag
21:26 - so
21:27 - click on this plus icon and
21:29 - name it as ground
21:31 - [Music]
21:34 - and hit on save
21:37 - so now once again click on ground and
21:40 - change it
21:42 - from contact to numb
21:45 - now
21:46 - do the same for the player but
21:48 - this time we don't have to create a new
21:51 - tag because unity already has
21:53 - a player tag so click on this layer tag
21:57 - to edit
22:01 - so after adding player tag to the player
22:05 - we can create our movement script
22:07 - so click on the scripts folder
22:10 - and
22:11 - right click then create a new
22:13 - c sharp script
22:15 - and name it player movement
22:23 - and hit enter
22:25 - so the scripting language for unity is c
22:28 - sharp so we will
22:29 - write our game logic in this language
22:33 - now double click on this player moment
22:35 - script
22:40 - so if you have installed visual studio
22:43 - while
22:44 - installing unity then it will open up
22:47 - our script in visual studio
22:50 - but
22:52 - if you are using any other ide
22:55 - then it will open up
22:58 - this
23:00 - solution in that id if you have
23:02 - configured
23:03 - it with unity
23:05 - so we will quickly talk about these two
23:07 - functions
23:09 - which are
23:11 - void start and void update so void start
23:14 - is called
23:16 - uh at the beginning of
23:19 - our game so it is called only once
23:23 - and this wide update is called
23:26 - per frame means if you are if your game
23:29 - is running at 60 fps then it will be
23:32 - called
23:34 - uh 60 times per
23:36 - second
23:38 - so we will quickly make some variables
23:41 - for our player moment script
23:44 - first variable is private
23:46 - so private
23:50 - it will be a boolean so bull
23:53 - and
23:55 - is
23:57 - grounded
23:59 - so this
24:01 - is grounded variable
24:03 - will
24:04 - help us to determine whether our player
24:08 - is
24:08 - standing on
24:10 - ground or not
24:11 - so whenever our game starts
24:15 - our is grounded variable would be false
24:20 - by default
24:25 - and
24:25 - [Music]
24:29 - now we can create another variable
24:34 - for our players jump force
24:37 - so create private no this time we will
24:40 - make it public so that we can
24:43 - change its value from
24:45 - inspector
24:48 - so make private float
24:51 - jump
24:53 - force
24:56 - and
24:58 - we
24:58 - will add the jump force value from
25:01 - inspector
25:03 - so
25:04 - save this script and
25:07 - go into unity
25:09 - and now
25:10 - we can add this script
25:12 - to our player
25:16 - so click on player and add player
25:18 - movement script to
25:20 - the player
25:22 - now we can see that our jump force
25:24 - variable is visible here because we have
25:27 - made it public
25:29 - and
25:30 - our is grounded variable is private
25:33 - that's why it's not
25:35 - appearing here so whenever we make any
25:38 - variable private it is
25:41 - not visible in the inspector
25:43 - we can also add serializable field
25:47 - serializable field serialize field
25:49 - to make it visible in our inspector
25:54 - now you can see
25:56 - first of all we have to save the script
25:58 - and
25:59 - [Music]
26:00 - now
26:03 - our is grounded variable is also visible
26:06 - in our inspector so whenever you want to
26:09 - make any variable private and
26:11 - you also want to uh
26:13 - make it visible in the inspector then
26:15 - you have to add this serialize field
26:18 - so
26:19 - now we will
26:20 - add this
26:23 - we will add a rigid body component to
26:25 - our player
26:26 - so we can use unity's physics engine
26:30 - so what
26:31 - will it do is
26:34 - whenever we add a physics
26:37 - rigid body 2d component
26:39 - rigid body 2d
26:41 - so
26:42 - our player will be affected by gravity
26:45 - so right now
26:47 - if i hit play
26:48 - then you can see
26:50 - that our player will fall down
26:54 - like this
26:56 - so now we are using the unity's physics
26:59 - engine
27:01 - so click on this constraint and
27:04 - phrase rotation on z axis
27:07 - so our
27:08 - player
27:09 - does not
27:11 - our player will not be able to rotate on
27:15 - the z axis
27:18 - so now
27:19 - we can start creating our
27:23 - jump functionality
27:26 - so
27:26 - [Music]
27:27 - the unity has some functions for
27:31 - detecting
27:33 - collide collisions
27:35 - so
27:35 - [Music]
27:36 - make a
27:38 - private
27:40 - one trigger
27:43 - enter 2d
27:46 - so it will be called whenever
27:48 - our
27:49 - player will enter any
27:52 - uh
27:54 - our player will collide with any
27:57 - game object
27:58 - so whenever our
28:00 - player collides with
28:02 - any game object then we will check if
28:07 - if our
28:10 - our player
28:14 - here it is a collision so we will
28:18 - copy it and
28:20 - paste it our collision dot
28:22 - compare tag
28:26 - so
28:27 - if
28:30 - our player
28:31 - collides with ground
28:34 - with the game object with ground tag
28:39 - then we will make is grounded
28:45 - is equals to
28:46 - true
28:51 - and
28:52 - same as this we will create another
28:56 - function called on trigger exist
28:59 - exit
29:00 - so
29:02 - private void ontrigger accept 2d
29:05 - copy this if statement
29:08 - and paste
29:09 - it here
29:11 - we can
29:14 - make this
29:15 - is grounded variable false whenever
29:18 - our
29:20 - player
29:20 - exit from the
29:23 - whenever our player
29:24 - exists from
29:28 - our ground
29:29 - so make it false
29:34 - now
29:35 - we are able to
29:37 - detect the ground check so in the update
29:41 - function
29:42 - we will check for input so let's make an
29:46 - if statement
29:47 - and
29:49 - say in if input dot
29:52 - get mouse button down
29:57 - and
29:59 - in the
30:00 - brackets
30:06 - 0 and and we will also check for
30:11 - ground
30:12 - so if is grounded
30:16 - so
30:17 - what it want to say is that
30:21 - if
30:22 - the player presses
30:24 - uh
30:25 - right
30:26 - left mouse button and end is grounded so
30:29 - if both are true then and then this is
30:33 - if statement will be executed
30:35 - so
30:37 - uh this get mouse button down 0 also
30:40 - works with
30:42 - touch input so whenever we tap on this
30:45 - screen it will also
30:48 - take it as true
30:50 - so whenever
30:52 - this is
30:53 - done then we will add
30:55 - some force some upward force to our
30:58 - player so for that we have to get our
31:02 - players rigid body so
31:04 - let's make a private variable private
31:09 - rigid body 2d
31:12 - and
31:13 - name it as player
31:16 - so to get our
31:18 - players rigid for a 2d component we will
31:22 - go in start
31:24 - function and
31:26 - we will
31:27 - say
31:28 - player
31:32 - is equals to
31:33 - get component
31:37 - and the component we want to get is
31:39 - rigid body
31:43 - 2d
31:43 - and we will
31:46 - close this statement with semicolon
31:49 - so
31:50 - this statement will
31:53 - uh get our rigid body to the component
31:56 - from
31:56 - player
31:57 - and it will assign it to this player
32:00 - variable
32:01 - so now we can add
32:03 - an upward force to our player so
32:07 - type in player dot add force
32:12 - and it will take
32:14 - an argument as
32:16 - vector 2
32:17 - so
32:18 - make a new
32:20 - vector 2
32:22 - so vector 2
32:23 - has
32:24 - two
32:25 - two values which is x and y so
32:29 - we don't want to add any
32:31 - force in x axis so
32:34 - uh make it 0 and for
32:37 - y axis
32:39 - we will
32:40 - add jump force
32:44 - into
32:45 - we will multiply it with some scale
32:48 - factor so let's say 100
32:51 - so
32:52 - it will add
32:54 - this force
32:56 - in y-axis
32:58 - so our player movement script is uh
33:02 - completed
33:04 - so
33:04 - save it and go into the unity
33:10 - now
33:10 - click on player
33:13 - and
33:16 - add jump force value here so we will
33:20 - start with 5
33:22 - and let's hit play
33:28 - so whenever we hit
33:31 - our left mouse button then it will jump
33:35 - it will also work with a touch input
33:38 - so currently it is a bit high
33:41 - so we will make it three
33:44 - and hit play
33:49 - now
33:50 - okay let's make it 4.
33:55 - so
33:58 - we can see that
34:00 - currently whenever player is
34:02 - standing on ground then our is grounded
34:05 - variable is true
34:07 - and
34:08 - as as soon as i press the left mouse
34:11 - button it will jump and our is grounded
34:14 - variable will be
34:15 - false so
34:17 - now you can see it is false and whenever
34:19 - it touches the ground then it will be
34:22 - true
34:24 - so this was a
34:25 - jump functionality
34:28 - for our player so
34:29 - we have created
34:32 - player movement in this video so in this
34:34 - video we will create
34:35 - obstacles for our game
34:38 - so to create obstacle click on sprites
34:40 - folder
34:43 - and drag and drop the square sprite into
34:46 - the hierarchy
34:49 - so
34:50 - now we can see that our
34:53 - uh square sprite which is our obstacle
34:56 - so let's rename it to obstacle
34:59 - so it is above our player
35:02 - that's why we cannot see it
35:05 - so click on
35:06 - the player
35:09 - sorry click on the obstacle and
35:13 - drag it to the right of the player
35:17 - and we can also change its color
35:20 - so click on
35:22 - obstacle and then
35:24 - change its color
35:26 - from white
35:29 - to something red
35:33 - you can
35:35 - you can give it any color you want
35:40 - so
35:41 - now we can
35:43 - change the scale of the obstacle so make
35:46 - it
35:47 - 5 on the y axis
35:53 - and
35:56 - now
35:56 - that we have created our obstacle
36:00 - uh we can also add a box collider today
36:03 - to our obstacle
36:05 - so let's add the box called electrode
36:08 - and
36:09 - make it as is trigger
36:11 - so that we can detect
36:13 - the collisions with our player
36:18 - so
36:19 - now we can make our obstacle as a prefab
36:24 - so
36:26 - we can click on our prefab folder
36:29 - but before that
36:31 - click on the obstacle and reset its
36:34 - transform so click right click on
36:36 - transform and
36:38 - hit reset so it will set its position to
36:42 - 0 0 0
36:43 - and it will also reset its scale so
36:46 - click on
36:48 - a y-axis scale and
36:51 - change it to 5 once again so now click
36:54 - on this obstacle
36:56 - and drag and drop
36:57 - it into our prefabs folder
37:02 - so let's drag and drop it
37:04 - so now we can see
37:07 - that
37:08 - this obstacle has become has become
37:13 - blue so that means that it is now a
37:15 - prefab
37:18 - so
37:19 - now that we have created our obstacle we
37:22 - can delete it because we have created
37:25 - a prefab out of it
37:27 - so
37:29 - now we can create a spawner to spawn our
37:32 - obstacle
37:34 - so before we create our spawner let's
37:37 - create a
37:38 - uh
37:40 - obstacle script so right click and
37:42 - create a c subscript and name it as
37:45 - obstacle
37:48 - so
37:49 - obstacle and hit enter
37:51 - then open it up in visual studio
37:57 - so
38:00 - let's double click it and open it up in
38:03 - visual studio
38:05 - so now we will make some
38:08 - variables
38:10 - so now we will create some variables
38:13 - so we will create a speed variable for
38:16 - our of our obstacle so create public
38:19 - float
38:20 - speed
38:23 - and we will change its value from the
38:26 - inspector
38:27 - so now in the update method
38:29 - we can modify our obstacles position
38:34 - so
38:35 - to access the position we can
38:38 - write transform dot position
38:41 - so
38:43 - so that we can modify the position
38:46 - at each
38:48 - frame
38:49 - so
38:50 - write transform.position
38:53 - and we will make it
38:56 - equals to
38:59 - 3
39:00 - so let's make it equal to vector 3 dot
39:03 - left so that we can move our
39:06 - obstacle from right to left that means
39:10 - towards our player so let's make it
39:12 - vector 3 dot left
39:16 - and we can multiply this
39:18 - with our speed variable so let's
39:21 - multiply it
39:22 - with our speed variable
39:26 - and we can also multiply it
39:30 - with time dot delta time
39:33 - in fact we have to multiply it with time
39:35 - dot delta time
39:37 - so that we can make our game frame rate
39:40 - independent
39:42 - uh that means if our game is running at
39:45 - 60 fps
39:47 - then
39:48 - also our speed our speed
39:52 - would be constant and
39:54 - if our frame if our frame rate is higher
39:57 - than that then also our speed uh will be
40:01 - constant
40:02 - so it uh the frame rate will not affect
40:06 - our speed
40:07 - that's why we are multiplying our uh
40:11 - speed with
40:12 - time dot delta time
40:14 - so now we have to add plus sign in front
40:17 - of
40:18 - this equal so that we increment
40:23 - our position
40:25 - obstacles position
40:27 - to
40:28 - the speed variable each frame
40:31 - so after doing that we can save this
40:34 - script and
40:36 - go to the unity editor
40:38 - and now if we hit play
40:42 - so
40:44 - first of all let's
40:46 - drag
40:47 - let's add the script to our
40:51 - obstacle prefab so add component
40:55 - and search for obstacle and add it
40:57 - and for now we will
41:00 - uh
41:01 - make speed as
41:02 - 4
41:03 - so let's type in 4
41:06 - and
41:08 - then if we hit play then we can see that
41:11 - our
41:12 - obstacle will move from right to left
41:14 - but
41:15 - we can draw a dragon drop our obstacle
41:18 - and move it
41:19 - to the right
41:22 - and a little bit downwards
41:24 - so now if we hit on play
41:31 - so
41:32 - now we can see that our obstacle is
41:35 - moving from right to left
41:38 - so
41:40 - so that now we have created the obstacle
41:43 - we can create the spawner to spawn
41:46 - our obstacle at random height
41:50 - so
41:51 - to create a spawner
41:54 - we will right click in the hierarchy and
41:57 - create an empty game object
41:59 - and we will rename it to
42:02 - spawner so rename it to spawner
42:07 - and hit enter
42:09 - so
42:12 - now
42:13 - we will drag it to the right
42:16 - of the player
42:18 - so
42:19 - we will try we will
42:21 - make its y position to zero
42:24 - and zero position to zero
42:28 - and now we can create a script for it so
42:32 - create
42:32 - a new c subscript
42:34 - and call it
42:36 - spawner
42:39 - and
42:40 - hit enter
42:44 - and
42:45 - click on
42:46 - this spawner and drag and drop this
42:48 - script
42:49 - to it
42:50 - and now double click on spawner script
42:53 - to open it
42:55 - in visual studio
42:57 - now to instantiate our
43:00 - obstacle we need
43:02 - a reference
43:03 - so we will make a public game object
43:06 - because our obstacle is of type game
43:08 - object
43:09 - so we will name it as obstacle
43:13 - now we also need a minimum height and
43:16 - maximum height for our obstacle
43:19 - so
43:20 - let's create a public variable so that
43:23 - we can modify it in inspector so public
43:26 - float
43:27 - mean height
43:29 - and
43:30 - we will copy it
43:32 - so let's copy it
43:34 - and
43:36 - paste it
43:37 - and then we will change it to max height
43:41 - so
43:42 - [Music]
43:43 - for the
43:45 - min height for the max height
43:49 - we will
43:50 - say
43:52 - let's first add our first
43:56 - add our min height
43:58 - so we will default it to
44:01 - minus
44:02 - 3.5 f
44:05 - and for the max height
44:07 - we will say
44:08 - minus 5f
44:13 - so
44:13 - for the max height we will say minus 5f
44:19 - but
44:22 - here
44:27 - here we can see that
44:29 - our max height would be minus 3.5 f and
44:33 - mean height would be minus 5 because
44:37 - they have minus sign in front of them
44:41 - so
44:43 - in the update method
44:46 - we can
44:48 - make a timer to check
44:52 - to check the time intervals
44:55 - between each spawn
44:58 - so let's create a public variable
45:01 - so we will create a public variable
45:05 - so create public float
45:09 - public float
45:11 - and we will name it time to spawn
45:14 - so
45:15 - create time to spawn
45:20 - and we will default it to 1.5 seconds
45:24 - so after 1.5 seconds it will spawn a new
45:28 - obstacle
45:30 - so now create another variable
45:35 - as private
45:38 - float
45:41 - timer
45:43 - so that we can keep track of
45:47 - the timer
45:49 - so
45:50 - we will check
45:51 - in our update method
45:55 - that if
45:58 - our timer
46:01 - is greater than
46:03 - time to spawn
46:07 - then
46:09 - we will instantiate our obstacle so we
46:12 - will create a new game object and we
46:14 - will name it as
46:16 - new obstacle
46:18 - so we will name it as a new obstacle
46:24 - and now we will
46:26 - make it equal to instantiate
46:30 - and in the
46:31 - parenthesis we will say obstacle so it
46:34 - will instantiate
46:36 - the obstacle
46:38 - which is our obstacle prefab
46:41 - and after instantiating the new obstacle
46:44 - we can modify its position so we will
46:47 - say new object
46:49 - dot transform
46:51 - so the transform dot
46:54 - position
46:56 - is equals
46:57 - to transform dot position
47:00 - that means the
47:01 - position of this spawner
47:04 - and
47:05 - we will
47:06 - also add a new vector 3 so type in new
47:10 - vector 3
47:13 - and
47:14 - we don't want to modify its x
47:17 - value so make it as 0
47:20 - and
47:22 - we will
47:24 - make
47:25 - the y value
47:26 - between randomize between two numbers
47:29 - which is
47:31 - uh
47:32 - mean height and max height so that we
47:35 - can get a random height for our obstacle
47:39 - so let's pass in min height and max
47:42 - height
47:44 - and for the z we can pass in zero
47:48 - and now we also need to destroy this new
47:52 - obstacle
47:53 - after some time
47:55 - so we can do this by
47:59 - typing destroy
48:00 - the destroy is
48:02 - inbuilt method in unity so
48:05 - type in destroy
48:08 - then
48:09 - pass in the game object that we want to
48:11 - destroy so new obstacle
48:14 - and the time
48:16 - after which we want to destroy that
48:19 - so let's say 10 seconds
48:24 - so
48:25 - after doing all of this we can reset our
48:28 - timer
48:30 - to zero
48:33 - so
48:34 - now we can reset our timer to zero
48:37 - now we can save this script
48:43 - and
48:48 - so now go back to unity and
48:58 - we can save the script and
49:02 - click on this spawner
49:04 - and
49:06 - we can see that
49:08 - there is an obstacle field so drag and
49:10 - drop the obstacle prefab
49:13 - into that
49:14 - field and now
49:17 - we can hit play
49:20 - so
49:21 - it will spawn
49:23 - the obstacle
49:25 - at random height
49:26 - but it no it is not spawning so
49:30 - let's see what is the error
49:34 - so
49:37 - let's go to the vs visual studio code
49:42 - and
49:45 - let's find out what is happening
49:51 - so
49:52 - here after
49:55 - the if statement
49:57 - we
49:58 - we have to add
50:02 - one line which is
50:04 - time timer equals to
50:07 - timer plus equals to time dot delta time
50:11 - because we need to increment our timer
50:14 - uh on each frame
50:17 - so we will increment it by time dot
50:19 - delta time so now if we
50:22 - go back to unity
50:25 - and hit play
50:28 - then
50:29 - we can see that now
50:32 - our obstacles are spawning
50:35 - at random height but
50:37 - they are spawning
50:39 - in front of the ground right now
50:42 - so
50:45 - we can
50:46 - see that they are spawning in front of
50:48 - the ground
50:50 - that
50:51 - they are not spawning in front of the
50:53 - ground but they are rendering in front
50:55 - of the ground
50:57 - so now to make the obstacle
51:00 - spawn behind the ground we have to
51:03 - change the ordering layer
51:06 - of our ground so
51:10 - let's click on the
51:13 - obstacle no let's click on the ground
51:17 - and change its order in layer
51:21 - to
51:22 - 1 from 0 so let's change it to 1
51:26 - so that
51:27 - it renders above
51:29 - everything else
51:31 - so
51:32 - now
51:33 - if we hit play
51:35 - then we will be
51:36 - able to see that our
51:39 - obstacles are now spawning behind the
51:41 - ground
51:42 - so
51:44 - as you can see
51:46 - they are spawning behind the ground
51:52 - so
51:53 - in this video we have added our obstacle
51:55 - hello guys
51:56 - so now our obstacles are spawning at
51:59 - random height so when we hit play
52:03 - then we can see that our obstacles are
52:05 - spawning at random height and we can
52:07 - jump by
52:08 - clicking the
52:10 - left mouse button
52:12 - so currently the player is going through
52:15 - these obstacles
52:16 - so
52:17 - we don't want this we want
52:19 - that whenever our player collides with
52:22 - these obstacles then the game should be
52:25 - over
52:26 - so to manage the game over and pause
52:29 - game functionality we will create a game
52:32 - game manager object
52:35 - so right click and create an empty game
52:38 - object and we will rename it to game
52:40 - manager
52:42 - so rename it to
52:45 - game manager
52:47 - now we will create a game manager script
52:51 - for this game object so right click and
52:53 - create a new sharp script and name it
52:58 - as game
52:59 - manager
53:04 - now double click on it
53:13 - so now we will create a public variable
53:17 - for detecting the game over
53:20 - so
53:24 - so now we will write
53:28 - public
53:32 - static
53:34 - tool
53:36 - and we will name it as is
53:39 - game over
53:43 - so whenever our game is over
53:45 - then this variable
53:47 - will be true and at any other time this
53:51 - variable would be false so whenever our
53:54 - game starts this game over variable
53:57 - should be false so let's say is game
53:59 - over
54:01 - to false
54:08 - and
54:14 - now we can go into the obstacle script
54:19 - and here
54:20 - we can
54:22 - make
54:23 - a on trigger enter 2d method which is
54:26 - inbuilt method for detecting collisions
54:29 - in unity so type in ontrigger
54:33 - enter 2d
54:36 - and we will say if
54:40 - collision which is
54:42 - this variable
54:45 - this one
54:46 - so
54:48 - dot compare tag
54:57 - and we will say player
55:01 - player
55:04 - so
55:05 - what it want to say is that whenever
55:07 - our obstacle collides with any game
55:10 - object and if
55:12 - that game object
55:14 - contains this tag
55:16 - player then it will execute this if
55:19 - statement
55:20 - so we will write is game over to true
55:25 - so we can't directly access we have to
55:27 - write game
55:28 - manager
55:30 - which is the script that we just created
55:32 - dot is game over
55:35 - to true
55:39 - we can access this is chemo over
55:41 - variable like this because we have made
55:44 - it
55:45 - static in the
55:46 - game manager script
55:48 - so
55:49 - we can
55:50 - access this variable by
55:53 - writing the script name and dot then
55:56 - the variable name if that variable is
55:59 - static
56:01 - then
56:02 - here we will print a message so let's
56:05 - say debug.log
56:11 - and we will
56:12 - pass in the message that we want to
56:14 - print so we will say game over
56:21 - and now we can save this script
56:25 - and go back to the unity
56:29 - now we have to assign this script to the
56:31 - game manager
56:33 - so drag and drop the
56:35 - game manager script to
56:37 - the game manager game object
56:39 - and now
56:40 - when we
56:41 - save this project so hit ctrl s
56:44 - and if we hit play now
56:47 - we can see whenever our player collides
56:49 - with the obstacle
56:51 - the
56:52 - message
56:53 - will appear in the console that
56:56 - game is over
56:58 - so
56:59 - in the next video we will create a game
57:02 - over
57:03 - screen so that we can
57:06 - pause the game whenever the player
57:08 - collides with the obstacle and then
57:11 - we will ask the player if he wants to
57:14 - restart the game or
57:16 - if he wants to quit
57:17 - so thank you for watching this video
57:20 - [Music]
57:23 - so now we can see
57:25 - that whenever our player collides with
57:27 - any obstacle
57:30 - then
57:32 - we have this game over message in the
57:35 - console
57:37 - so now we will
57:38 - create a game over screen so whenever
57:41 - our player collides with the obstacle
57:44 - then the
57:45 - game will be freezed and our play our
57:48 - game over screen
57:50 - will appear so to create
57:53 - that screen we need to click on
57:56 - hierarchy
57:57 - and create a new ui element and we will
58:01 - create a panel
58:03 - so
58:05 - it will automatically create canvas and
58:07 - event system
58:08 - so to render any ui element in unity we
58:11 - need canvas
58:13 - click on this panel and rename it to
58:16 - game over panel
58:18 - so let's rename it to game over panel
58:25 - now we will right click on this game
58:27 - over panel and create a new ui
58:29 - element and we will this time create a
58:32 - button
58:33 - and we will rename this button to retry
58:40 - now
58:41 - we can see that our canvas is quite big
58:44 - bigger than our main camera so to fix
58:47 - that click on canvas
58:49 - and change its render mode from screen
58:52 - space overlay to screen space camera and
58:56 - click on this pixel perfect
58:58 - and as a render camera drag and drop our
59:01 - main camera into this slot
59:04 - and now you can see that our canvas is
59:06 - same as our main camera
59:09 - so now we will also change its ui scale
59:11 - mode so click on this ui scale mode and
59:14 - change it
59:15 - from constant pixel size to scale with
59:18 - screen size
59:20 - and we will give
59:21 - the reference resolution as 1920 by 1080
59:25 - so let's
59:26 - say 19
59:28 - 20
59:31 - by 1080
59:38 - so we will
59:40 - click on this match parameter and we
59:42 - will make it
59:44 - as 0.5
59:48 - so it will scale the ui elements
59:50 - according to the screen size
59:57 - now
59:59 - we will click on this text and
60:03 - we will rename it to retry
60:07 - now
60:08 - click on this red try button and
60:12 - change its width to
60:17 - let's say 600
60:20 - by 400
60:25 - or let's say
60:30 - 600 by 200
60:32 - now drag and drag this retry button
60:36 - slightly upward
60:39 - we can
60:40 - see that
60:43 - our ui elements are rendering behind
60:46 - this layer and everything else so to fix
60:49 - this
60:50 - click on the canvas and change its
60:52 - ordering layer to one
60:56 - now
60:59 - click on this text and
61:02 - we can change its font size
61:04 - so let's make it
61:07 - 100
61:08 - and now click on this best fit
61:12 - we can also make it bold
61:16 - and we will change its color
61:19 - so
61:23 - now we can also add
61:26 - shadow to this text so click on add
61:28 - component and
61:31 - add
61:32 - a shadow and
61:34 - we can set this effect distance
61:42 - now we can also give
61:44 - this shadow to this button
61:51 - and play with the effect distance to
61:54 - get the desired result
61:57 - now we will duplicate this retry button
61:59 - so press ctrl d
62:02 - and we will rename it to
62:04 - main
62:08 - now we will also change the text
62:12 - to main
62:16 - and we will
62:17 - drag this main
62:19 - button slightly below
62:28 - now we can
62:30 - go to the obstacle script
62:32 - and
62:33 - we will comment this
62:36 - debug.log line
62:41 - and now
62:43 - whenever our game
62:46 - is over then we will
62:48 - freeze our game so we will say time dot
62:52 - time scale
62:57 - is equals to zero
62:59 - so it will freeze our game
63:01 - now we can go to the game manager script
63:05 - and we will
63:06 - create a variable for our game over
63:09 - screen
63:11 - so create public game object
63:14 - and then game over screen
63:21 - game over screen
63:23 - so at the start of our game
63:26 - our game over screen would not be
63:29 - visible so let's say game was screen
63:34 - dot set active
63:36 - and pass in
63:38 - false
63:41 - now we will check
63:43 - for the game over in the update method
63:46 - so if
63:48 - this game over
63:50 - so
63:51 - when our
63:52 - game is over
63:54 - then we will copy this statement
63:58 - and
63:59 - we will paste it here and we will say
64:02 - game over screen dot set active to true
64:09 - and also whenever
64:11 - our game starts
64:13 - we will reset the time scale to 1
64:16 - so let's say time dot
64:19 - time scale
64:21 - is equals to
64:24 - 1. now we will also make a separate
64:28 - function for
64:30 - retry
64:32 - so let's make a new function
64:35 - public
64:37 - void
64:38 - and name it as retry
64:45 - now we will use unity scene management
64:48 - and to use that we need to add the name
64:51 - space
64:52 - at the top of the script
64:54 - so write using
64:58 - unity engine
65:01 - dot
65:02 - scene management
65:06 - and now whenever we press the retry
65:08 - button we can say
65:10 - scene management
65:12 - scene manager dot
65:21 - set active scene
65:24 - sorry we will say scene manager dot load
65:26 - scene to load the scene
65:29 - and we will pass in scene manager
65:32 - dot
65:33 - get active scene
65:37 - so it will get the current scene
65:40 - and we will get its name
65:45 - so
65:47 - now it will
65:48 - restart our
65:50 - scene
65:51 - and our game over screen
65:54 - will now
65:56 - become false
65:58 - so let's go back to the unity
66:03 - and
66:09 - here we can change the canvas
66:12 - reference resolution
66:14 - to 1080 by 1920
66:20 - 1080
66:21 - by 1920
66:24 - because it is
66:26 - portrait mode
66:29 - now
66:30 - we can drag and drop our
66:33 - game over panel to this game over screen
66:36 - field
66:38 - and now we can see that whenever we
66:41 - hit play
66:44 - then
66:47 - when we collide with the
66:49 - obstacle then
66:51 - the game will be freezed and
66:54 - our game over screen
66:56 - will appear
66:58 - now
66:59 - currently these buttons are not working
67:02 - so to make them work we need to click on
67:06 - this retry button
67:08 - and
67:10 - we will click on this on click
67:13 - list and
67:15 - we will hit this plus icon
67:17 - and
67:18 - in this slot we will drag our game
67:20 - manager
67:21 - game object
67:23 - and we will select
67:26 - retry function from the game manager
67:29 - script
67:30 - so whenever we click on this retry it
67:32 - will execute that function
67:34 - currently it will give us an error
67:36 - because we haven't added this scene to
67:39 - our project yet click on the file and
67:42 - build setting
67:43 - then click on
67:45 - scenes and add our sample scene to that
67:49 - to this window
67:51 - and now
67:53 - ctrl s to save
67:55 - and now when we hit play we can
67:58 - see that whenever we collide
68:00 - with the
68:02 - obstacle it brings up the
68:05 - game over screen and when we click on
68:06 - this retry it will
68:08 - restart the game
68:13 - so
68:14 - we can see that
68:16 - now currently this main
68:18 - menu button is not working but we will
68:20 - make it work hello guys so in the
68:23 - previous video we have created the
68:26 - game over screen
68:27 - so currently you can disable this
68:30 - game over panel
68:33 - like this
68:34 - now
68:36 - before we create the scoring system
68:39 - we will change some settings in this
68:42 - spawner
68:43 - so
68:45 - for the time to spawn i have assigned
68:47 - 1.8 and for main height minus 4 and for
68:52 - max height minus 2.2 you can play around
68:55 - with these values
68:56 - if you want
68:58 - but
68:59 - these are the values that i am going to
69:01 - use
69:02 - in this game
69:04 - so now to make this scoring system we
69:07 - will first make
69:09 - the ui for our
69:11 - score
69:13 - so right click on the canvas and create
69:16 - new ui element
69:17 - and this time create a text
69:21 - and we will rename it
69:23 - to
69:24 - score
69:27 - now
69:30 - click on this
69:32 - icon here
69:33 - and
69:35 - click here
69:36 - top center
69:38 - to anchor it
69:40 - on to the
69:41 - top center of our canvas
69:45 - now
69:46 - we will change its width and height
69:50 - so
69:52 - select this rect tool
69:55 - now we can change its width
69:58 - so we will make it
70:02 - as the
70:04 - width of the canvas
70:06 - and for the height
70:08 - we will
70:12 - type in 300
70:15 - or let's make it 200
70:18 - now
70:21 - move this
70:22 - score text
70:25 - to
70:26 - the upper side of our canvas
70:29 - and
70:31 - we will write score
70:37 - by default
70:38 - change it to bold and for the font size
70:44 - we will go with
70:48 - let's say 80
70:54 - now
70:55 - click on this alignment and align it
71:01 - horizontally and vertically
71:03 - to the center
71:05 - now
71:06 - click on this best fit
71:10 - now we will
71:12 - change its color to red
71:18 - we will give it an outline
71:20 - so
71:22 - type in outline
71:25 - now we will also give it a shadow
71:30 - and
71:31 - change the effect distance
71:48 - now
71:50 - we have created our ui for displaying
71:52 - this score
71:54 - so now
71:56 - go to the game manager script
71:58 - and we will make a public variable to
72:02 - refer to reference the
72:04 - score text
72:06 - so make a public text
72:10 - so if your
72:12 - if it doesn't suggest you this text then
72:15 - you have to include this
72:18 - name space here using unity engine dot
72:20 - ui
72:22 - so we will
72:23 - name our variable as
72:26 - score text
72:27 - score txt
72:32 - and we will also make another variable
72:34 - which is private
72:38 - float
72:40 - and
72:41 - score
72:43 - so it will keep track of our score
72:46 - so now
72:48 - at the beginning of our game our score
72:51 - would be zero
72:55 - so
72:56 - make it zero
72:58 - now
72:59 - in the update method
73:01 - we will increment our score variable so
73:05 - let's increment
73:07 - it by time dot delta time
73:12 - so time dot delta time
73:17 - now
73:20 - in the update method we will also change
73:23 - the
73:24 - score text so let's write score text
73:29 - dot text
73:31 - so we are accessing the
73:33 - text property of our
73:36 - score text component uh
73:39 - so
73:40 - let's go to the unity
73:42 - and click on this
73:44 - score text
73:46 - and we can say see that we are accessing
73:49 - this text
73:51 - property
73:52 - of this text
73:54 - component
73:56 - here
73:57 - so
73:59 - now we will make it equal to
74:04 - score
74:07 - plus
74:12 - our score variable
74:18 - so
74:19 - we are adding a string and
74:22 - if load
74:24 - so now let's save this script and
74:28 - go back to the unity
74:30 - and now
74:32 - we have to assign this score text to our
74:35 - game manager so let's drag and drop this
74:39 - score text to
74:41 - the game manager's score text field
74:44 - now hit play button
74:49 - and you will see that our
74:51 - score is
74:53 - increasing
74:54 - but it is displaying the float value
74:57 - so we have to convert this float
75:00 - into an integer
75:02 - so let's get back to the script
75:05 - and we will here
75:08 - type cast this score variable which is
75:10 - float into integer
75:13 - so let's
75:16 - type cast it
75:17 - from score from float to integer
75:20 - now save this script and go back to the
75:23 - unity
75:25 - now
75:26 - if we hit play
75:30 - then
75:31 - we can see that now it only displays
75:34 - the integer values
75:38 - so
75:39 - that's it for this video we have
75:41 - implemented the
75:43 - scoring system for our game
75:46 - so in this video we are going to create
75:48 - a pause menu
75:50 - so we are going to duplicate the game
75:53 - over screen to create our
75:55 - pause menu screen because it's quite
75:57 - similar
75:59 - so to first of all to create the pause
76:01 - menu we have to create a pause button
76:04 - so let's duplicate this retry button
76:08 - so press ctrl d to duplicate
76:10 - and drag it uh
76:13 - outside of this uh game over panel
76:17 - so
76:18 - now you can see
76:20 - let's rename it to pause
76:26 - and we will also rename its text
76:29 - so
76:31 - we will use this
76:32 - or kind of symbol
76:34 - for this pause button
76:36 - you can find this uh key on
76:40 - on the backward slash on the keyboard
76:43 - so after that we will resize this button
76:47 - so let's make it 100 by 100
76:52 - and we will also align it to
76:55 - left
76:57 - and
76:59 - now
77:01 - we will go into the scene view
77:03 - double click on the pause and
77:06 - we will resize this text
77:09 - boundaries so that it can fit well
77:21 - okay and we will also disable the shadow
77:24 - for the text
77:28 - now you can see it's
77:30 - it is looking like a pause button
77:33 - so
77:34 - now
77:35 - click on this move tool
77:38 - and we will
77:41 - actually let's just type in the values
77:44 - so click on the pause button and
77:46 - for the position x we will say 90
77:50 - and for the position y we will say minus
77:52 - 90
77:54 - so it will be positioned at
77:57 - the left left side of our screen
78:01 - so
78:02 - now that we have created the pause
78:05 - button
78:07 - we can
78:09 - go into the game manager script
78:13 - now we also have to create
78:16 - the
78:17 - reference for our
78:19 - button
78:20 - so let's make a public
78:23 - okay so since it's a button then we
78:27 - will call it by
78:29 - the on click event
78:31 - so let's make a public function
78:35 - public white
78:37 - pause game
78:44 - and
78:47 - here we will
78:51 - say that time dot time scale
78:58 - is equals to 0
78:59 - because we want to pause the game
79:02 - and
79:05 - we will also create a public variable
79:07 - for our pause menu
79:10 - public
79:12 - game object
79:14 - then pause
79:17 - menu
79:20 - and
79:24 - at the start of our game
79:27 - we will say
79:28 - pause menu
79:32 - dot
79:33 - set active
79:37 - set active to false
79:43 - and whenever we pause our game then we
79:45 - will say
79:48 - let's just copy this
79:51 - so
79:54 - copy
79:56 - and we will paste it here
79:59 - and we will say pause menu dot set
80:02 - active to true
80:08 - and we will also create two more
80:10 - functions
80:12 - so let's create a public
80:16 - void
80:19 - resume
80:23 - resume game
80:26 - so
80:28 - in this function
80:29 - we will first of all
80:31 - disable the pause menu screen so
80:34 - let's
80:35 - make it false
80:37 - now
80:40 - after setting it to false
80:43 - we have to also
80:45 - make this time dot time scale equal to
80:47 - one
80:48 - so let's make it one
80:51 - time dot
80:54 - time scale
80:56 - equal to one
80:58 - so whenever
81:00 - whenever we press the resume button
81:04 - our
81:05 - game will be resumed from the
81:08 - pause state
81:10 - so we will also create a quit function
81:14 - let's make a public
81:17 - void
81:19 - quit
81:21 - game
81:23 - for now there will be only two buttons
81:25 - in our pause menu so for the quit button
81:29 - we have to just type in application
81:32 - dot quit
81:36 - and
81:38 - whenever we
81:39 - press the quit button it will quit our
81:43 - game
81:45 - now we have created
81:47 - all
81:48 - the necessary functions for our pause
81:51 - menu
81:53 - now we have to create this pause menu ui
81:56 - so let's get back to the unity editor
82:01 - now
82:02 - we will duplicate this game over panel
82:05 - so
82:05 - press ctrl d
82:08 - and
82:09 - we will rename it to
82:12 - pause
82:14 - menu
82:19 - now
82:21 - make it active
82:24 - we forgot to
82:26 - save this script so let's save it
82:37 - now we will also change the
82:40 - text on these two buttons
82:43 - first of all let's rename this retry
82:45 - button to resume
82:52 - and this main button to
82:54 - quit
82:59 - and
83:00 - change
83:01 - the text
83:03 - to
83:04 - resume
83:08 - and
83:10 - quit
83:12 - to quit
83:18 - now we will make this squid button a
83:20 - little bit smaller
83:22 - so let's make it 500
83:29 - and
83:31 - we'll also
83:32 - adjust its
83:34 - shadow
83:40 - okay
83:42 - so
83:43 - now you can also
83:44 - change the background color of
83:47 - our
83:49 - pause menu
83:51 - panel
83:57 - okay
83:59 - so
84:00 - now we will assign the functions
84:03 - to the buttons
84:05 - now click on this pause button and
84:09 - here
84:11 - the game
84:12 - game manager object is already assigned
84:15 - so let's
84:17 - go to the game manager script and
84:22 - choose the pause game function
84:26 - now
84:28 - for the pause menu
84:30 - click on this resume button
84:33 - and
84:34 - we will choose
84:36 - resume game function
84:39 - for the quit
84:42 - we will add the
84:44 - on click event
84:46 - and drag and drop the game manager
84:49 - object
84:50 - and
84:52 - select quit game function
84:57 - now
84:59 - our pause menu is ready
85:02 - so
85:05 - we have to also assign this pause menu
85:08 - to
85:08 - the
85:10 - game manager object game object
85:13 - so let's drag and drop this
85:17 - and
85:18 - we will also disable this
85:21 - by default
85:24 - now save and now we can click on the
85:28 - play button
85:32 - and
85:33 - let's click on this pause so you can see
85:35 - that our game is paused
85:37 - now
85:38 - if we click on this quit button nothing
85:40 - will happen
85:41 - because we are in the editor mode
85:44 - so whenever we export our game to
85:47 - android device then we will be able to
85:50 - quit our game
85:52 - now let's click on the resume
85:54 - so it will resume
85:59 - hello guys so in this video we are going
86:02 - to create a main menu for our game
86:05 - in the previous video we have created
86:06 - this pause menu
86:09 - so that whenever we click on this pause
86:11 - button
86:12 - our game will be paused and we can
86:14 - resume or quit
86:16 - now we will create a main menu
86:19 - so that whenever we start the game
86:22 - the main menu will be shown first
86:25 - and then we can choose
86:27 - to play the game or quit
86:29 - currently we will implement only two
86:31 - functionalities
86:33 - quit and play
86:34 - but later on we can
86:36 - add high score and options
86:39 - so to create a main menu we have to
86:41 - create a new scene
86:44 - currently we have this sample scene you
86:46 - can also rename this to level or game
86:48 - whatever you want but we will create a
86:51 - new scene
86:52 - so let's create a new
86:55 - scene
86:59 - and we will name it as main
87:03 - menu
87:06 - now double click on it to open
87:10 - now
87:11 - we want to change the background color
87:13 - of this main menu
87:15 - so click on this background property
87:19 - and change it to
87:22 - something white
87:24 - you can make it
87:26 - like whatever you want
87:29 - we will also create a
87:32 - button here
87:33 - so let's go into the ui and then button
87:38 - it will automatically create the canvas
87:40 - and event system
87:42 - we have already talked about these two
87:45 - so we will choose
87:48 - screen space camera as our render mode
87:51 - and we will drag and drop our main
87:53 - camera
87:55 - and here we will click on this pixel
87:57 - perfect
88:00 - so for the
88:01 - ui scale mode we will go with
88:04 - scale with screen size so it will scale
88:06 - our canvas according to the
88:09 - screen resolution
88:11 - so we have to provide this reference
88:13 - resolution so let's say
88:16 - 1920 by 1080 then
88:19 - because we are in
88:20 - portrait mode then we have to give
88:23 - 1080 by 1920
88:27 - and here
88:29 - we will say
88:30 - 0.5
88:34 - now we will rename this button to play
88:39 - so let's rename it to play
88:45 - we will make it
88:47 - little bit bigger
88:51 - let's go with 300 by
89:01 - let's go with 400 by
89:07 - 200 okay
89:09 - now we will also change the text on the
89:11 - button
89:12 - so let's make it
89:14 - let's play
89:16 - we will choose the font style as our
89:18 - bold
89:20 - and
89:22 - let's increase the
89:25 - font size
89:27 - we can
89:28 - make it 200 and we can also click on
89:31 - this best fit
89:33 - so it will
89:35 - fit our text according to the size of
89:38 - this button
89:40 - now
89:42 - it is already centered
89:44 - we will also
89:47 - change its color
89:48 - if you want
89:50 - but
89:51 - let's change it to completely black
89:55 - now we will also
89:57 - give it a
89:58 - shadow
90:02 - and
90:06 - let's adjust this effect distance
90:16 - now you can also change the effect color
90:19 - of the shadow
90:20 - but
90:22 - this looks quite well
90:24 - now we will
90:26 - also give the shadow to
90:30 - our
90:31 - button
90:33 - and
90:36 - change the effect distance
90:44 - okay so now we will also reposition our
90:47 - button
90:50 - let's click on the button and
90:54 - okay so let's
90:56 - click on this move tool
90:57 - and drag it
91:00 - a little bit upward
91:03 - okay this is good
91:06 - now we will duplicate this button
91:09 - so let's press ctrl d
91:12 - and we will rename this to quit
91:17 - and we will also change the
91:22 - text on the button
91:25 - quit
91:29 - and let's reposition it
91:33 - okay so we have only selected the text
91:35 - you have to select this whole quit
91:37 - button
91:44 - okay so if we want to give a title to
91:46 - our game then
91:48 - we need to
91:50 - hold
91:51 - display and quit button slightly below
91:54 - so let's select them by holding shift
92:01 - and we will drag them
92:03 - downwards
92:08 - we can add the title if we want and we
92:10 - can also add high score
92:14 - now
92:16 - we will make this quit button
92:18 - little bit smaller
92:22 - okay
92:24 - so it's looking quite good
92:27 - now you can also
92:29 - add a title by just
92:31 - right clicking on canvas and
92:33 - adding a simple text element
92:36 - so we will call it as
92:39 - our
92:41 - first game
92:46 - or you can call it whatever you want
92:48 - and
92:52 - we will increase its size it is
92:54 - currently not visible because the text
92:56 - box is
92:58 - quite small
93:00 - let's click on this
93:02 - rect tool
93:04 - and we can
93:05 - expand this
93:08 - and
93:10 - we will also
93:11 - reposition our
93:15 - title
93:19 - so now
93:20 - click on this text and
93:22 - we will annoy align it to center both
93:25 - horizontally and vertically
93:28 - now you can see that
93:30 - it's looking quite good
93:32 - we can also change its color
93:36 - let's click on this best fit
93:38 - i can also
93:40 - change its color
93:43 - then we can also give it a shadow
93:49 - like this
93:56 - you can also increase the font size
94:04 - okay
94:05 - let's
94:06 - name it as endless runner
94:14 - okay
94:15 - that is good
94:17 - now that we have created the
94:20 - main ui of our main menu
94:23 - then we can
94:25 - save it
94:27 - and we have to also add this main menu
94:30 - scene to our build settings click on
94:33 - build settings and drag and drop this
94:36 - main menu
94:37 - to our
94:39 - build setting
94:40 - this scene
94:42 - list
94:44 - so now we can create a main menu script
94:48 - so click on the script folder right
94:50 - click
94:51 - create a new sharp script
94:53 - and call it as main
94:57 - menu
95:00 - double click on it to open it up
95:03 - individual studio
95:06 - now we are going to use unity's ui
95:09 - so using add this namespace using unity
95:13 - engine
95:16 - dot ui
95:22 - okay so
95:24 - we can
95:25 - we are also we are also going to use the
95:29 - scene management so let's
95:31 - include that as well
95:33 - unity engine
95:35 - dot scene management
95:39 - in fact we are
95:41 - we will not
95:42 - be using this
95:43 - ui
95:45 - unity engine dot ui namespace
95:48 - but we we are going to use this unity
95:50 - engine dot scene management
95:53 - so
95:54 - let's create some functions for our
95:56 - buttons
95:58 - let's create a public
96:02 - void
96:05 - play
96:06 - again
96:12 - and here we can say
96:14 - scene manager
96:19 - dot load scene
96:23 - and here we can pass in the name of
96:25 - our scene
96:27 - so
96:29 - in this
96:31 - we have to copy the scene name
96:36 - click on this sample scene click on f2
96:39 - ctrl c
96:41 - and then we can paste this
96:44 - scene name here
96:46 - you can also rename this sample scene to
96:49 - label or something like that
96:53 - and for the quit button which is
96:56 - quite simple
96:58 - public
97:00 - let's just copy it from our
97:03 - game manager script
97:05 - we have already created this quit button
97:08 - functionality here
97:10 - so let's copy it
97:17 - okay
97:20 - now we have created the main manuscript
97:24 - so let's get back to the unity
97:27 - and
97:28 - we can assign this main manuscript to
97:32 - our canvas
97:33 - so let's assign it
97:35 - now click on this
97:37 - button
97:40 - ctrl press ctrl and you can select both
97:42 - of them at the same time
97:45 - and we will add this on click event
97:49 - and
97:50 - drag and drop the canvas
97:53 - so for the play button
97:56 - we will choose the
97:58 - play function play game function
98:00 - and for the
98:02 - quit button we will choose
98:05 - quick but quit game function
98:08 - now our
98:10 - setup is ready so we can hit play
98:16 - the squid button will not work
98:18 - in the editor but once we export our
98:21 - game to android it will quit our game
98:23 - whenever we click on this
98:25 - let's click on play
98:32 - now we have to also
98:34 - assign our
98:37 - main menu
98:38 - a main menu button function
98:41 - that can
98:43 - redirect us to main menu whenever we
98:46 - lose the game
98:48 - so let's add that functionality also
98:52 - let's get back to the game manager
98:54 - script
98:56 - and here we will create a new function
99:02 - so let's create a public
99:05 - void
99:08 - name
99:12 - menu
99:17 - and here we will say scene manager
99:23 - dot load scene and
99:27 - we'll give it
99:29 - the name of our
99:31 - main menu scene
99:33 - which is
99:34 - main menu
99:35 - you have to type in the correct name
99:38 - otherwise it will not work
99:41 - so let's copy it from here
99:47 - paste it
99:50 - okay so it is
99:52 - done
99:53 - now save this script and go back to the
99:55 - unity
99:57 - and now we can
100:00 - go to the sample scene
100:03 - and
100:04 - in the pause menu
100:06 - we have
100:08 - a
100:09 - resume and quit button but in the game
100:12 - over panel we have this main button
100:15 - so let's add a on click event
100:19 - and
100:20 - drag and drop the game manager game
100:22 - object
100:23 - and select
100:25 - main menu
100:26 - function
100:28 - and it is done
100:30 - so now let's hit play
100:33 - and
100:35 - we can see that
100:38 - we can now
100:39 - go back to the main menu and we can play
100:42 - our game
100:44 - hello guys so in the previous video
100:48 - we have created this main menu in our
100:51 - game
100:52 - now in this video we are going to create
100:54 - some sound effects for our game like
100:57 - jump and hurt
100:59 - so for this we are going to use a
101:01 - software called
101:02 - bfxr which is used to make 8-bit sounds
101:07 - now to download this software
101:10 - open up your browser and search for bfxr
101:14 - download
101:15 - and
101:16 - click on this first link
101:19 - and from here we can download it
101:22 - either for windows or mac
101:25 - so click on windows
101:28 - and it will automatically download these
101:31 - you can install it as you install any
101:34 - other software it is pretty
101:36 - straightforward
101:38 - i have already downloaded and installed
101:40 - it
101:41 - so
101:42 - you can install it and after
101:44 - installing double click on it to open it
101:47 - up
101:51 - now you will see this kind of interface
101:54 - when you open
101:55 - this program
101:57 - there are various buttons there are some
102:00 - pre-built sounds
102:03 - that we get out of the box
102:06 - which is
102:07 - pickup coin laser
102:09 - explosion power etc
102:12 - we can also create a randomized sound
102:15 - by
102:16 - clicking on this randomize button
102:20 - and
102:21 - we can also
102:23 - we can also
102:25 - modify these properties for each sound
102:28 - apparently
102:30 - we are on this jump sound
102:33 - so we for the you can uh
102:36 - explore this software more
102:38 - but for our game we just need two sounds
102:41 - which is
102:42 - which are jump and
102:44 - hurt
102:45 - so we will use this
102:47 - prebuilt
102:49 - sounds
102:50 - now to create a new sound we just have
102:52 - to click on this
102:54 - button
102:56 - of the
102:57 - jump
102:59 - or
103:00 - heart
103:01 - or
103:02 - whichever you want to create
103:04 - currently the jump sound is already
103:07 - created
103:09 - but i will create it anyways
103:11 - so click on this jump button to create
103:14 - jump sound
103:16 - and you can click on this play to play
103:18 - the sound
103:20 - and you can preview it
103:22 - and you can also change the
103:25 - properties of this sound
103:28 - now i will delete delete this jump
103:32 - to and i will use this
103:35 - first one
103:37 - and i will also create uh
103:40 - now first of all we will export this
103:43 - created sound effect
103:46 - now to export any sound effect we have
103:48 - to click on this export wave
103:53 - now
103:54 - we will export it on our desktop so
103:57 - click on save
103:59 - you can see that
104:02 - our sound
104:03 - is
104:04 - exported
104:06 - now
104:08 - we will also create a heart sound for
104:11 - our game so let's click on this hit or
104:13 - heart
104:15 - you can preview this and modify it as
104:17 - always you can also choose different
104:21 - synths
104:22 - from here like triangle tangent or sine
104:27 - but i will use this default one so i
104:30 - will
104:32 - cancel this jump and export
104:35 - the heart sound
104:38 - so click on export wave
104:41 - and
104:42 - we will save it on the desktop
104:45 - now we can close this program you can of
104:48 - course
104:50 - explore this more if you want
104:53 - but
104:53 - it is the two these two sounds are
104:56 - enough for our game
104:58 - you can also create some other sounds if
105:00 - you want so after creating these sounds
105:05 - go back to the unity editor
105:07 - and here in the assets folder we will
105:09 - create a new
105:11 - folder for
105:12 - keeping our
105:14 - sounds so let's name it as
105:18 - sounds
105:20 - and in here
105:23 - let's drag and drop these two sounds so
105:27 - select these two and drag
105:31 - them into the
105:32 - unity editor and in the sounds folder
105:36 - it will import it
105:39 - now you can preview it from here also by
105:42 - clicking on this play button
105:45 - now
105:47 - we have to
105:48 - go into this
105:51 - sample scene you can rename this scene
105:54 - but i have not renamed it
105:56 - you can rename it to level one or
105:59 - something like that
106:00 - but for now it is okay so we will
106:04 - uh
106:05 - we are here in our main emcee
106:08 - so we will drag and drop these two
106:11 - sounds
106:12 - into our scene
106:16 - so shift and drag and drop these two and
106:20 - it will create
106:22 - two game objects and they will
106:25 - contain this
106:27 - audio source component
106:29 - and as the audio clip it will be our
106:32 - sound itself
106:34 - now these two are created on
106:37 - the position 0 zero zero which is
106:39 - totally fine you can put it anywhere you
106:42 - want
106:43 - and uh
106:44 - these components are these compare this
106:47 - component which is audio source is
106:48 - responsible
106:50 - for uh
106:51 - this uh playing this sound
106:54 - now our main camera
106:56 - already
106:57 - has a audio listener
107:00 - so
107:01 - which is used to
107:04 - listen the sound in our scene
107:07 - produced by the audio source
107:10 - now
107:12 - once we have created these two sounds
107:15 - to game objects
107:17 - then we will go to
107:19 - our player movement script
107:21 - and we will reference it
107:24 - so
107:25 - let's make a public variable
107:28 - so public
107:30 - audio source
107:32 - [Music]
107:35 - and you will name it as jump
107:39 - sound
107:40 - [Music]
107:43 - now let's
107:44 - save it
107:47 - and
107:53 - after that click on
107:55 - the player
108:02 - it is compiling
108:05 - so click on the player
108:07 - and
108:08 - you can see that the player movement
108:11 - script
108:12 - has this jump sound field
108:15 - so drag and drop the
108:19 - jump
108:20 - game object
108:22 - into
108:23 - this slot
108:25 - so now we will
108:28 - play this jump sound whenever our player
108:31 - jumps
108:32 - and
108:34 - we have to
108:37 - do few settings here
108:39 - we will see to select these two sound so
108:42 - select these two
108:44 - and
108:45 - take this play on awake
108:47 - so they will not play whenever our scene
108:50 - starts
108:52 - but they will play whenever we call them
108:55 - from our script
108:57 - so make sure that
108:59 - this play on awake is
109:01 - not selected
109:03 - for both of them
109:05 - now
109:06 - we will also give a tag to
109:09 - our obstacle
109:11 - so let's create a tag
109:14 - as
109:15 - o b s d
109:18 - you can
109:19 - create
109:20 - a tag with
109:22 - whichever name you want but i will
109:26 - create this stack with
109:28 - obst name
109:31 - now
109:32 - we will assign it to the obstacle return
109:39 - we want to
109:41 - play this sound whenever our player
109:43 - jumps so
109:45 - in the player movement script
109:47 - we will play whenever we tap on the
109:50 - screen
109:51 - so
109:53 - let's
109:56 - symptom sound.play
110:02 - now
110:05 - it will play the jump sound whenever our
110:08 - player jumps or we tap on the screen
110:12 - so
110:13 - now we want to play this
110:15 - jump
110:16 - hurt sound whenever our player collides
110:18 - with the
110:19 - obstacle
110:21 - so let's first of all reference this
110:26 - right sound so
110:28 - probably audio source
110:30 - with sound
110:38 - now we want to play
110:40 - if
110:41 - the
110:43 - collided
110:44 - object is
110:46 - [Music]
110:48 - uh
110:49 - obstacle so
110:50 - copy this if statement and paste it here
110:53 - and we will
110:55 - say equalizer dot compare tag to
110:58 - obs
110:58 - [Music]
111:00 - then we want to play this sound
111:03 - sound
111:10 - but it will not play the sound currently
111:12 - because we are making
111:14 - time dot time scale
111:17 - equal to zero
111:19 - in
111:20 - the obstacle script
111:23 - here
111:24 - so
111:25 - we will not make it 0
111:29 - so comment it
111:34 - now
111:36 - we can
111:38 - go back to the game manager script
111:40 - and here we can say that
111:43 - if
111:45 - the
111:46 - [Music]
111:56 - then we want to increase
111:58 - the score
112:04 - and
112:08 - now we will also make the
112:12 - obstacle
112:14 - speed
112:16 - to zero
112:18 - so to do this we will say
112:21 - if
112:24 - game manager because it is a static
112:26 - variable so we can access it from here
112:28 - also
112:30 - game manager dot is game over
112:32 - so
112:34 - if the game is not over
112:36 - then and then we want to
112:39 - increase the position of the obstacle
112:45 - so we will increment it
112:48 - whenever the game is not over
112:53 - now after that
112:58 - it will work
112:59 - so
113:01 - let's save this and go back to unity
113:04 - now we can click on this player
113:07 - and drag and drop this
113:12 - hit sound to this it's it's sound field
113:17 - now click on play
113:22 - and
113:25 - now it will play the sound
113:27 - whenever
113:28 - it collides with the obstacle
113:34 - now
113:36 - we can say we can see that the
113:39 - spawner is spawning the obstacles
113:49 - so we will also
113:52 - check here if the game is over or not
113:54 - so let's check
113:57 - if
113:59 - game manager
114:02 - dot
114:07 - include is north sign
114:09 - in front of it
114:12 - so we want to spawn the obstacle
114:14 - if the game is not over
114:18 - past it here
114:21 - save this script and
114:29 - now
114:30 - we can see that
114:32 - it will not spawn the obstacle if the
114:34 - game is over
114:42 - our sounds are working perfectly
114:46 - hello guys in the previous video we have
114:48 - created the sound effects for our game
114:50 - and in this video we are going to create
114:52 - a high score system for our game we are
114:54 - going to use uh unity's player flash for
114:57 - this
114:58 - it is an easy way to store the data on
115:00 - our device locally
115:03 - so we will first of all create the ui
115:06 - for high score so
115:07 - let's go into the main menu
115:09 - and expand this canvas object and in
115:12 - here
115:13 - duplicate this title text and we will
115:16 - rename it to high score so let's say
115:18 - name it
115:21 - now
115:22 - after that
115:23 - we will also reposition it to the bottom
115:25 - of the screen
115:28 - somewhere around here
115:31 - let's change the
115:32 - text
115:33 - to high score
115:38 - click on this best fit
115:42 - and
115:42 - let's also resize the text area
115:47 - to make it in one line
115:51 - and after that let's go into the main
115:53 - manuscript to
115:55 - reference this high school text
115:58 - create a variable public
116:00 - text
116:02 - i score txt
116:03 - [Music]
116:08 - and
116:09 - after that save this script
116:12 - and
116:13 - let's go back into the unity
116:16 - and
116:18 - wait for it to compile
116:20 - and after that click on the canvas and
116:22 - drag and drop the high score into the
116:25 - high score txt grid
116:28 - and now
116:29 - let's go into the game manager script
116:31 - and here when we are setting the score
116:35 - we will say player press
116:38 - dot
116:39 - set int
116:40 - you can also set float and string we
116:44 - will give it a string which is
116:46 - a key
116:48 - to access this which is high score and
116:52 - we will set it to the current score
116:56 - and the score is currently float so
116:59 - let's type cast it to integer
117:03 - now we want to
117:05 - change the high score only if the score
117:08 - is less than the high score
117:11 - so let's say if
117:13 - our score
117:15 - is
117:16 - less than
117:18 - i'm sorry it is greater than
117:20 - player price dot
117:23 - get it
117:24 - and we will get this particular key
117:27 - which we have created
117:29 - which is high score
117:32 - and we will also pass in the default
117:34 - value as 0
117:36 - so
117:37 - whenever our score is greater than the
117:40 - previous high score it will reset
117:43 - the
117:44 - high score key
117:46 - to that score
117:48 - now
117:49 - save this script
117:52 - and
117:53 - in the main manuscript
117:56 - we will say that high score text
117:59 - dot text
118:02 - is equals to
118:04 - is equals to player facts
118:10 - let's say player press
118:12 - dot
118:14 - get integer
118:15 - and we will
118:18 - get that key which we have created which
118:21 - is high score
118:22 - and we will also pass in the default
118:24 - value
118:25 - as zero
118:27 - and we also need to convert this into a
118:30 - string
118:31 - so let's
118:33 - say to string
118:34 - [Music]
118:36 - okay
118:39 - so
118:41 - now in the
118:43 - game manager script
118:45 - we have to also type cast the code to
118:48 - integer because it is currently float
118:50 - [Music]
118:53 - okay
118:57 - so save the script and go back to the
118:59 - unity
119:03 - and
119:04 - let's play the game
119:12 - we can see that our high score is 0
119:14 - but we want to also display the high
119:16 - score
119:18 - in front of the actual high score
119:20 - let me simplify it
119:23 - so we will
119:24 - add a
119:26 - high score
119:29 - string
119:31 - in front of the
119:33 - actual high score
119:36 - okay
119:38 - so
119:39 - that's it let's save it
119:41 - [Music]
119:43 - and go back to the unity
119:46 - now let's play the game
119:49 - now
119:50 - you can see that it is currently
119:52 - displaying high score as zero let's play
119:54 - the game
119:55 - and
120:08 - okay
120:09 - let's try again
120:12 - okay so now it is
120:14 - 4 so it will display s4
120:18 - and you can
120:21 - reset the player press by going into the
120:23 - edit and
120:25 - clear all player player preps and click
120:28 - on yes to delete all the
120:30 - player flaps
120:31 - and it will reset the
120:34 - data in the
120:36 - player tracks
120:38 - hello guys so in the previous video we
120:40 - have created the high school system for
120:42 - our game
120:43 - and in this video we are going to export
120:45 - our game to the
120:47 - android platform
120:49 - first of all we have to change some
120:51 - settings
120:52 - so click on the file
120:54 - and
120:55 - go into the build settings
120:58 - after that click on the player settings
121:01 - and in here
121:03 - we can change the company name
121:06 - currently it is default company
121:08 - you can also change it to whatever you
121:10 - want
121:11 - you can also change the name of the game
121:15 - and uh
121:17 - we can also change the
121:18 - version
121:20 - so every time you update the game
121:22 - you may want to increase this
121:25 - and
121:27 - let's uh
121:28 - select the icon for our game
121:32 - and i will select this
121:34 - [Music]
121:35 - knob icon
121:37 - which is a default one
121:40 - so you can also make your own custom
121:43 - icon
121:44 - obviously you will
121:45 - make your own icon for your game you can
121:48 - set it there
121:49 - now in the resolution and presentation
121:52 - uh
121:54 - make the default orientation as portrait
121:58 - so our game will be played in the
122:00 - portrait mode only
122:02 - and we are not going to publish this
122:04 - game so
122:06 - these settings are
122:08 - currently okay
122:10 - after that make sure you have installed
122:13 - the android build support while
122:15 - installing the
122:17 - and
122:18 - click on the build
122:20 - and you can save this
122:21 - apk wherever you want currently we are
122:24 - saving it into the desktop and in the
122:26 - new folder
122:28 - so save it
122:30 - and it will take some time
122:34 - to build the project
122:36 - make sure you have an active internet
122:38 - connection
122:40 - because it will require the internet
122:43 - connection to build our project
122:47 - so
122:48 - it may take some more time for you so
122:52 - please wait while it is building
122:55 - for now the this
122:57 - series this beginner series is completed
123:01 - we may add some extra things in the
123:03 - future like double jump functionality
123:06 - and simple store system etc
123:10 - but for now it is
123:13 - completed as a beginner series
123:18 - now let's wait for the gradle
123:21 - build to complete
123:25 - and after
123:26 - that you can see that our
123:29 - app is in the new folder and you can
123:31 - install this app
123:33 - into your android device
123:35 - and
123:36 - you can play it on your own device
123:41 - okay so that was it for this video
123:45 - thank you for watching this video

Cleaned transcript:

so hello guys in this video tutorial series we will be making an endless runner game for android devices using unity engine this series will be completely beginner friendly so if you haven't done any game development before then also you can follow along we will cover each and everything in this series from downloading and installing unity to exporting our project to android devices so first of all to download unity engine open up your browser and search unity download unity hub so click on this first link which is unity3d.com slash get unity slash download so on this page you can find a download button to download unity hub you can also download unity directly but unity hub will help us to manage our projects and other ui versions very easily which i will show you in a moment so click on this download unity hub button and download unity hub after that install unity hub i have already downloaded and installed it that's why i'm not going to do it again so it is as simple as downloading and installing any other software so it should be pretty straightforward so download unity hub after downloading unity hub it will look like this your projects feed would be empty because you would have not created any projects so we will quickly talk about some tabs so here it is a learn tab so here there are there are lots of tutorials which you can watch from unity and this is a community forums and blogs and here it is installs so here we can download different unity versions currently i have downloaded 2019.4.20 f1 lts this lts means long term support so whenever we download any version it is recommended to download lts version so that we don't face any difficulties in future we will download a new version in a moment but first of all we have to do some necessary things so first of all we have to generate a license so click on this settings button and then here you can click on license management i have already activated a personal license but you you would not have this so you have to login in your unity account to generate license so click on login so it will prompt you to the so here you can sign in with your email and password if you haven't created unity id yet so click click here create one and you can create it easily it is as simple as creating a any gmail account so once i will login then i then we will continue so i have logged into my unity account so from here we can click on activate new license here we can choose either unity personal or unity pro for this series the personal would be more than enough if you are running any enterprise or big companies which is making more than 100 000 per year then you have to take subscription of unity but for in our case it is fine to download unity personnel and from here it will ask for these two options so just click on this i don't use unity in a professional capacity or if you use it for a professional capacity then click on this first option and click on done i have already activated my account so that's why i am not going to do it again but you have to just click on done and your license will be created so after doing that you would be able to download new unity versions so here click on install step and from here we can add new unity versions so click on add button here and it will ask you to download any of these versions so these are official releases and these are alpha releases and early versions of unity which are in testing mode so it is recommending us to download this lts version which is long term support version so we will click on next and from here if you have not installed any ide on your computer then click on this will download microsoft visual studio community edition 2019 you can also use vs code with unity but for this series we will use visual studio so go ahead and download this click on this checkbox and we will be making this game for android so we need to install android build support so expand this and make sure you have selected this check boxes android sdk and ndk tools and open jdk so it your selection should look like this so if you are done then you can hit on next and it will ask us for accepting terms and condition so go ahead and read these terms and conditions and click on next and you will you will be able to download it will take some time to download this unity version on your computer after downloading this we will be able to create new projects i have i have already this version 2019.4.20 f1 which is fine because our game is not very complicated so the version will not matter that much so you can download any version so now we will click click on project step and from here we will create a new project so click on new and then it will ask us to create either 2d or 3d or there are many other options like universal render pipeline which is not the topic of this video so we will be making a 2d game so click on 2d and from here we can name our project so this this will be an endless runner game so go ahead and name you can name it whatever you want i will name it endless android and you can save your project anywhere i am going to save it in f drive and in unity projects 3d folder actually you can save it anywhere you want so go ahead and click on create so it will create a new project so in this video we will talk about different tabs in unity engine and we will get familiar with the editor so since we are developing our game for android then we have to change this aspect ratio so click on this game window this game window is a preview window for our game so whenever we hit this play button then our game will be played in this window so we will be developing this game in portrait mode so click on this free aspect and change it to 1920 by 1080 portrait so it will change itself from free aspect to portrait mode but when you click on this you will not get these many options because our current project is on a pc platform so you have to convert platform from pc to android so to convert the platform we have to first of all click on file and click on build settings then you will have this icon on this pc mac and linux standalone option so go ahead and click on android and hit switch platform here you will get switch platform button like this so click on android and hit switch platform so your platform will be switched from pc to android and then you will get these options for different aspect ratios so it will take some time to switch platforms so once you have switched the platform then turn it into a portrait mode so let's talk about different tabs so first of all it is a scene view so in the scene view we can add different game objects so everything in unity is game object so just like here it is main camera so it is also a game object which contains some transform properties like position rotation scale and every green object contains some components so for this game object main camera it has camera camera component we can add different components by clicking on add component unity has many components so this was a c view in which we can add our game objects uh it is then next comes our game view so i have already talked about it so the in this in the game view we can preview our game so whenever we hit play button then this will preview our game we can see the game being played here so next comes our hierarchy so in the in the hierarchy we can see the different game objects that we have created currently it has main camera and we can see as many game objects as we create here so like if i right click here and create an empty game object so i i will click on create empty so we can see that it is added in hierarchy next up is our project step here so in the project step there is an assets folder so in this assets folder we can keep our scenes scripts animation prefabs and etc so it will be more manageable for a bigger games so whenever our projects gets bigger we will be able to manage it efficiently so we will create some folders right now so that we can manage our project so click on this asset folder and right click and create then folder and we will name it prefabs prefabs so what are prefabs in unity so prefabs are like you have to create the prefabs only once and then you can use it as many time as you want and whenever you want to change the game objects that are prefabs then you have to only change the original prefab that you have here it is a little bit confusing but we will see it in upcoming videos so next up we will create another folder for scripts so create scripts folder in which we will add our scripts so next is our console tab so in the console we can see if our script has any error or warning it will be displayed here so we will be able to see and debug it so this was a brief instead of introduction uh and i forgot about this tab this is an inspector tab so in which we can see the properties of the game object so our game object let's click on main camera so main camera has some properties and components like transform camera component and audio listener so this camera component has some properties so these components and properties are displayed in this inspector view inspector tab so this was a quick introduction of the tabs in unity so to create our player we will right click on hierarchy and uh okay so first of all we will create our sprite for the player so go ahead and click on assets folder right click and create a new folder and call it sprites inside that right click and then create sprites and then square and let's keep the name as square now click on this sprite and change its sprite mode to single from polygon and hit on apply then we can drag and drop this square sprite in our scene view so drag and drop this into our scene and we will rename this to player so to rename any game object in unity we can hit f2 so hit f2 and rename it to player so now we can change its color by changing the color value color property in the sprite renderer component of our player sprite so click on this color and you can give it any color you want i will give it slightly darker color so now we will create a ground so click on this player and press ctrl d so it will duplicate our player and rename it so press f2 and rename it to crown now we will change the position of our ground so first of all we will change the scale so y scale y scale should be 5 and x scale would be 20 and then go on to the same view and click on this move tool here there are different tools in unity like hand tool move tool rotate and scale in this are for ui rectangle tool so click on this move tool and press ctrl hold ctrl and drag our ground slightly below so now we can see that our ground is below the player so now click on the ground and we can change the color of ground also so click on this color and change its color from white to something oranges you can color it anything you want so now we will change the main camera color so which is this background color so to change this background color from blue to anything you want you have to click on this background and you can change it from here so let's make it white and we will change the ground color to it like this you can color it anything you want so we have now created our player and our round so in this video we will add jump functionality for our player so first of all we have to add colliders to our player and ground colliders we we add collider so that we can detect collisions between our player and ground and between our player and obstacles so click on this player and here in this inspector tab click on add component and search for box collider and click on this box collider 2d to add box collider 2d to our player next up we will also add box collateral to our ground so in the same view we can also see colliders so click on add component and hit box collider 2d so we can see this green line this green border is our box collider so for the player to detect ground we have to also add another collider so click on add component and click on box collider 2d so for this second collider click on same view and zoom in a little bit so that we can save our player and click on this edit collider button now you can edit the boundaries of our collider so click on this bottom edge and drag it little bit further so we are doing this to detect ground check so if our player is standing on ground then we will be able to retrieve the boolean value that it is grounded and if it is not on ground that means the player is currently in jump state then we will get is grounded to false so to detect the equalizer we have to make this second collider which is a little bit bigger then the first one we have to make it is trigger so whenever we make a collider it is triggered then we can we can retrieve the information of the game object that it hits so we will make it as is is trigger so now we will add some tags to our crown and our player so basically tags are used to identify the game object in our script so click on this ground and here uh in the tag uh click on this untapped and click on add tag and we will add a new tag so click on this plus icon and name it as ground and hit on save so now once again click on ground and change it from contact to numb now do the same for the player but this time we don't have to create a new tag because unity already has a player tag so click on this layer tag to edit so after adding player tag to the player we can create our movement script so click on the scripts folder and right click then create a new c sharp script and name it player movement and hit enter so the scripting language for unity is c sharp so we will write our game logic in this language now double click on this player moment script so if you have installed visual studio while installing unity then it will open up our script in visual studio but if you are using any other ide then it will open up this solution in that id if you have configured it with unity so we will quickly talk about these two functions which are void start and void update so void start is called uh at the beginning of our game so it is called only once and this wide update is called per frame means if you are if your game is running at 60 fps then it will be called uh 60 times per second so we will quickly make some variables for our player moment script first variable is private so private it will be a boolean so bull and is grounded so this is grounded variable will help us to determine whether our player is standing on ground or not so whenever our game starts our is grounded variable would be false by default and now we can create another variable for our players jump force so create private no this time we will make it public so that we can change its value from inspector so make private float jump force and we will add the jump force value from inspector so save this script and go into unity and now we can add this script to our player so click on player and add player movement script to the player now we can see that our jump force variable is visible here because we have made it public and our is grounded variable is private that's why it's not appearing here so whenever we make any variable private it is not visible in the inspector we can also add serializable field serializable field serialize field to make it visible in our inspector now you can see first of all we have to save the script and now our is grounded variable is also visible in our inspector so whenever you want to make any variable private and you also want to uh make it visible in the inspector then you have to add this serialize field so now we will add this we will add a rigid body component to our player so we can use unity's physics engine so what will it do is whenever we add a physics rigid body 2d component rigid body 2d so our player will be affected by gravity so right now if i hit play then you can see that our player will fall down like this so now we are using the unity's physics engine so click on this constraint and phrase rotation on z axis so our player does not our player will not be able to rotate on the z axis so now we can start creating our jump functionality so the unity has some functions for detecting collide collisions so make a private one trigger enter 2d so it will be called whenever our player will enter any uh our player will collide with any game object so whenever our player collides with any game object then we will check if if our our player here it is a collision so we will copy it and paste it our collision dot compare tag so if our player collides with ground with the game object with ground tag then we will make is grounded is equals to true and same as this we will create another function called on trigger exist exit so private void ontrigger accept 2d copy this if statement and paste it here we can make this is grounded variable false whenever our player exit from the whenever our player exists from our ground so make it false now we are able to detect the ground check so in the update function we will check for input so let's make an if statement and say in if input dot get mouse button down and in the brackets 0 and and we will also check for ground so if is grounded so what it want to say is that if the player presses uh right left mouse button and end is grounded so if both are true then and then this is if statement will be executed so uh this get mouse button down 0 also works with touch input so whenever we tap on this screen it will also take it as true so whenever this is done then we will add some force some upward force to our player so for that we have to get our players rigid body so let's make a private variable private rigid body 2d and name it as player so to get our players rigid for a 2d component we will go in start function and we will say player is equals to get component and the component we want to get is rigid body 2d and we will close this statement with semicolon so this statement will uh get our rigid body to the component from player and it will assign it to this player variable so now we can add an upward force to our player so type in player dot add force and it will take an argument as vector 2 so make a new vector 2 so vector 2 has two two values which is x and y so we don't want to add any force in x axis so uh make it 0 and for y axis we will add jump force into we will multiply it with some scale factor so let's say 100 so it will add this force in yaxis so our player movement script is uh completed so save it and go into the unity now click on player and add jump force value here so we will start with 5 and let's hit play so whenever we hit our left mouse button then it will jump it will also work with a touch input so currently it is a bit high so we will make it three and hit play now okay let's make it 4. so we can see that currently whenever player is standing on ground then our is grounded variable is true and as as soon as i press the left mouse button it will jump and our is grounded variable will be false so now you can see it is false and whenever it touches the ground then it will be true so this was a jump functionality for our player so we have created player movement in this video so in this video we will create obstacles for our game so to create obstacle click on sprites folder and drag and drop the square sprite into the hierarchy so now we can see that our uh square sprite which is our obstacle so let's rename it to obstacle so it is above our player that's why we cannot see it so click on the player sorry click on the obstacle and drag it to the right of the player and we can also change its color so click on obstacle and then change its color from white to something red you can you can give it any color you want so now we can change the scale of the obstacle so make it 5 on the y axis and now that we have created our obstacle uh we can also add a box collider today to our obstacle so let's add the box called electrode and make it as is trigger so that we can detect the collisions with our player so now we can make our obstacle as a prefab so we can click on our prefab folder but before that click on the obstacle and reset its transform so click right click on transform and hit reset so it will set its position to 0 0 0 and it will also reset its scale so click on a yaxis scale and change it to 5 once again so now click on this obstacle and drag and drop it into our prefabs folder so let's drag and drop it so now we can see that this obstacle has become has become blue so that means that it is now a prefab so now that we have created our obstacle we can delete it because we have created a prefab out of it so now we can create a spawner to spawn our obstacle so before we create our spawner let's create a uh obstacle script so right click and create a c subscript and name it as obstacle so obstacle and hit enter then open it up in visual studio so let's double click it and open it up in visual studio so now we will make some variables so now we will create some variables so we will create a speed variable for our of our obstacle so create public float speed and we will change its value from the inspector so now in the update method we can modify our obstacles position so to access the position we can write transform dot position so so that we can modify the position at each frame so write transform.position and we will make it equals to 3 so let's make it equal to vector 3 dot left so that we can move our obstacle from right to left that means towards our player so let's make it vector 3 dot left and we can multiply this with our speed variable so let's multiply it with our speed variable and we can also multiply it with time dot delta time in fact we have to multiply it with time dot delta time so that we can make our game frame rate independent uh that means if our game is running at 60 fps then also our speed our speed would be constant and if our frame if our frame rate is higher than that then also our speed uh will be constant so it uh the frame rate will not affect our speed that's why we are multiplying our uh speed with time dot delta time so now we have to add plus sign in front of this equal so that we increment our position obstacles position to the speed variable each frame so after doing that we can save this script and go to the unity editor and now if we hit play so first of all let's drag let's add the script to our obstacle prefab so add component and search for obstacle and add it and for now we will uh make speed as 4 so let's type in 4 and then if we hit play then we can see that our obstacle will move from right to left but we can draw a dragon drop our obstacle and move it to the right and a little bit downwards so now if we hit on play so now we can see that our obstacle is moving from right to left so so that now we have created the obstacle we can create the spawner to spawn our obstacle at random height so to create a spawner we will right click in the hierarchy and create an empty game object and we will rename it to spawner so rename it to spawner and hit enter so now we will drag it to the right of the player so we will try we will make its y position to zero and zero position to zero and now we can create a script for it so create a new c subscript and call it spawner and hit enter and click on this spawner and drag and drop this script to it and now double click on spawner script to open it in visual studio now to instantiate our obstacle we need a reference so we will make a public game object because our obstacle is of type game object so we will name it as obstacle now we also need a minimum height and maximum height for our obstacle so let's create a public variable so that we can modify it in inspector so public float mean height and we will copy it so let's copy it and paste it and then we will change it to max height so for the min height for the max height we will say let's first add our first add our min height so we will default it to minus 3.5 f and for the max height we will say minus 5f so for the max height we will say minus 5f but here here we can see that our max height would be minus 3.5 f and mean height would be minus 5 because they have minus sign in front of them so in the update method we can make a timer to check to check the time intervals between each spawn so let's create a public variable so we will create a public variable so create public float public float and we will name it time to spawn so create time to spawn and we will default it to 1.5 seconds so after 1.5 seconds it will spawn a new obstacle so now create another variable as private float timer so that we can keep track of the timer so we will check in our update method that if our timer is greater than time to spawn then we will instantiate our obstacle so we will create a new game object and we will name it as new obstacle so we will name it as a new obstacle and now we will make it equal to instantiate and in the parenthesis we will say obstacle so it will instantiate the obstacle which is our obstacle prefab and after instantiating the new obstacle we can modify its position so we will say new object dot transform so the transform dot position is equals to transform dot position that means the position of this spawner and we will also add a new vector 3 so type in new vector 3 and we don't want to modify its x value so make it as 0 and we will make the y value between randomize between two numbers which is uh mean height and max height so that we can get a random height for our obstacle so let's pass in min height and max height and for the z we can pass in zero and now we also need to destroy this new obstacle after some time so we can do this by typing destroy the destroy is inbuilt method in unity so type in destroy then pass in the game object that we want to destroy so new obstacle and the time after which we want to destroy that so let's say 10 seconds so after doing all of this we can reset our timer to zero so now we can reset our timer to zero now we can save this script and so now go back to unity and we can save the script and click on this spawner and we can see that there is an obstacle field so drag and drop the obstacle prefab into that field and now we can hit play so it will spawn the obstacle at random height but it no it is not spawning so let's see what is the error so let's go to the vs visual studio code and let's find out what is happening so here after the if statement we we have to add one line which is time timer equals to timer plus equals to time dot delta time because we need to increment our timer uh on each frame so we will increment it by time dot delta time so now if we go back to unity and hit play then we can see that now our obstacles are spawning at random height but they are spawning in front of the ground right now so we can see that they are spawning in front of the ground that they are not spawning in front of the ground but they are rendering in front of the ground so now to make the obstacle spawn behind the ground we have to change the ordering layer of our ground so let's click on the obstacle no let's click on the ground and change its order in layer to 1 from 0 so let's change it to 1 so that it renders above everything else so now if we hit play then we will be able to see that our obstacles are now spawning behind the ground so as you can see they are spawning behind the ground so in this video we have added our obstacle hello guys so now our obstacles are spawning at random height so when we hit play then we can see that our obstacles are spawning at random height and we can jump by clicking the left mouse button so currently the player is going through these obstacles so we don't want this we want that whenever our player collides with these obstacles then the game should be over so to manage the game over and pause game functionality we will create a game game manager object so right click and create an empty game object and we will rename it to game manager so rename it to game manager now we will create a game manager script for this game object so right click and create a new sharp script and name it as game manager now double click on it so now we will create a public variable for detecting the game over so so now we will write public static tool and we will name it as is game over so whenever our game is over then this variable will be true and at any other time this variable would be false so whenever our game starts this game over variable should be false so let's say is game over to false and now we can go into the obstacle script and here we can make a on trigger enter 2d method which is inbuilt method for detecting collisions in unity so type in ontrigger enter 2d and we will say if collision which is this variable this one so dot compare tag and we will say player player so what it want to say is that whenever our obstacle collides with any game object and if that game object contains this tag player then it will execute this if statement so we will write is game over to true so we can't directly access we have to write game manager which is the script that we just created dot is game over to true we can access this is chemo over variable like this because we have made it static in the game manager script so we can access this variable by writing the script name and dot then the variable name if that variable is static then here we will print a message so let's say debug.log and we will pass in the message that we want to print so we will say game over and now we can save this script and go back to the unity now we have to assign this script to the game manager so drag and drop the game manager script to the game manager game object and now when we save this project so hit ctrl s and if we hit play now we can see whenever our player collides with the obstacle the message will appear in the console that game is over so in the next video we will create a game over screen so that we can pause the game whenever the player collides with the obstacle and then we will ask the player if he wants to restart the game or if he wants to quit so thank you for watching this video so now we can see that whenever our player collides with any obstacle then we have this game over message in the console so now we will create a game over screen so whenever our player collides with the obstacle then the game will be freezed and our play our game over screen will appear so to create that screen we need to click on hierarchy and create a new ui element and we will create a panel so it will automatically create canvas and event system so to render any ui element in unity we need canvas click on this panel and rename it to game over panel so let's rename it to game over panel now we will right click on this game over panel and create a new ui element and we will this time create a button and we will rename this button to retry now we can see that our canvas is quite big bigger than our main camera so to fix that click on canvas and change its render mode from screen space overlay to screen space camera and click on this pixel perfect and as a render camera drag and drop our main camera into this slot and now you can see that our canvas is same as our main camera so now we will also change its ui scale mode so click on this ui scale mode and change it from constant pixel size to scale with screen size and we will give the reference resolution as 1920 by 1080 so let's say 19 20 by 1080 so we will click on this match parameter and we will make it as 0.5 so it will scale the ui elements according to the screen size now we will click on this text and we will rename it to retry now click on this red try button and change its width to let's say 600 by 400 or let's say 600 by 200 now drag and drag this retry button slightly upward we can see that our ui elements are rendering behind this layer and everything else so to fix this click on the canvas and change its ordering layer to one now click on this text and we can change its font size so let's make it 100 and now click on this best fit we can also make it bold and we will change its color so now we can also add shadow to this text so click on add component and add a shadow and we can set this effect distance now we can also give this shadow to this button and play with the effect distance to get the desired result now we will duplicate this retry button so press ctrl d and we will rename it to main now we will also change the text to main and we will drag this main button slightly below now we can go to the obstacle script and we will comment this debug.log line and now whenever our game is over then we will freeze our game so we will say time dot time scale is equals to zero so it will freeze our game now we can go to the game manager script and we will create a variable for our game over screen so create public game object and then game over screen game over screen so at the start of our game our game over screen would not be visible so let's say game was screen dot set active and pass in false now we will check for the game over in the update method so if this game over so when our game is over then we will copy this statement and we will paste it here and we will say game over screen dot set active to true and also whenever our game starts we will reset the time scale to 1 so let's say time dot time scale is equals to 1. now we will also make a separate function for retry so let's make a new function public void and name it as retry now we will use unity scene management and to use that we need to add the name space at the top of the script so write using unity engine dot scene management and now whenever we press the retry button we can say scene management scene manager dot set active scene sorry we will say scene manager dot load scene to load the scene and we will pass in scene manager dot get active scene so it will get the current scene and we will get its name so now it will restart our scene and our game over screen will now become false so let's go back to the unity and here we can change the canvas reference resolution to 1080 by 1920 1080 by 1920 because it is portrait mode now we can drag and drop our game over panel to this game over screen field and now we can see that whenever we hit play then when we collide with the obstacle then the game will be freezed and our game over screen will appear now currently these buttons are not working so to make them work we need to click on this retry button and we will click on this on click list and we will hit this plus icon and in this slot we will drag our game manager game object and we will select retry function from the game manager script so whenever we click on this retry it will execute that function currently it will give us an error because we haven't added this scene to our project yet click on the file and build setting then click on scenes and add our sample scene to that to this window and now ctrl s to save and now when we hit play we can see that whenever we collide with the obstacle it brings up the game over screen and when we click on this retry it will restart the game so we can see that now currently this main menu button is not working but we will make it work hello guys so in the previous video we have created the game over screen so currently you can disable this game over panel like this now before we create the scoring system we will change some settings in this spawner so for the time to spawn i have assigned 1.8 and for main height minus 4 and for max height minus 2.2 you can play around with these values if you want but these are the values that i am going to use in this game so now to make this scoring system we will first make the ui for our score so right click on the canvas and create new ui element and this time create a text and we will rename it to score now click on this icon here and click here top center to anchor it on to the top center of our canvas now we will change its width and height so select this rect tool now we can change its width so we will make it as the width of the canvas and for the height we will type in 300 or let's make it 200 now move this score text to the upper side of our canvas and we will write score by default change it to bold and for the font size we will go with let's say 80 now click on this alignment and align it horizontally and vertically to the center now click on this best fit now we will change its color to red we will give it an outline so type in outline now we will also give it a shadow and change the effect distance now we have created our ui for displaying this score so now go to the game manager script and we will make a public variable to refer to reference the score text so make a public text so if your if it doesn't suggest you this text then you have to include this name space here using unity engine dot ui so we will name our variable as score text score txt and we will also make another variable which is private float and score so it will keep track of our score so now at the beginning of our game our score would be zero so make it zero now in the update method we will increment our score variable so let's increment it by time dot delta time so time dot delta time now in the update method we will also change the score text so let's write score text dot text so we are accessing the text property of our score text component uh so let's go to the unity and click on this score text and we can say see that we are accessing this text property of this text component here so now we will make it equal to score plus our score variable so we are adding a string and if load so now let's save this script and go back to the unity and now we have to assign this score text to our game manager so let's drag and drop this score text to the game manager's score text field now hit play button and you will see that our score is increasing but it is displaying the float value so we have to convert this float into an integer so let's get back to the script and we will here type cast this score variable which is float into integer so let's type cast it from score from float to integer now save this script and go back to the unity now if we hit play then we can see that now it only displays the integer values so that's it for this video we have implemented the scoring system for our game so in this video we are going to create a pause menu so we are going to duplicate the game over screen to create our pause menu screen because it's quite similar so to first of all to create the pause menu we have to create a pause button so let's duplicate this retry button so press ctrl d to duplicate and drag it uh outside of this uh game over panel so now you can see let's rename it to pause and we will also rename its text so we will use this or kind of symbol for this pause button you can find this uh key on on the backward slash on the keyboard so after that we will resize this button so let's make it 100 by 100 and we will also align it to left and now we will go into the scene view double click on the pause and we will resize this text boundaries so that it can fit well okay and we will also disable the shadow for the text now you can see it's it is looking like a pause button so now click on this move tool and we will actually let's just type in the values so click on the pause button and for the position x we will say 90 and for the position y we will say minus 90 so it will be positioned at the left left side of our screen so now that we have created the pause button we can go into the game manager script now we also have to create the reference for our button so let's make a public okay so since it's a button then we will call it by the on click event so let's make a public function public white pause game and here we will say that time dot time scale is equals to 0 because we want to pause the game and we will also create a public variable for our pause menu public game object then pause menu and at the start of our game we will say pause menu dot set active set active to false and whenever we pause our game then we will say let's just copy this so copy and we will paste it here and we will say pause menu dot set active to true and we will also create two more functions so let's create a public void resume resume game so in this function we will first of all disable the pause menu screen so let's make it false now after setting it to false we have to also make this time dot time scale equal to one so let's make it one time dot time scale equal to one so whenever whenever we press the resume button our game will be resumed from the pause state so we will also create a quit function let's make a public void quit game for now there will be only two buttons in our pause menu so for the quit button we have to just type in application dot quit and whenever we press the quit button it will quit our game now we have created all the necessary functions for our pause menu now we have to create this pause menu ui so let's get back to the unity editor now we will duplicate this game over panel so press ctrl d and we will rename it to pause menu now make it active we forgot to save this script so let's save it now we will also change the text on these two buttons first of all let's rename this retry button to resume and this main button to quit and change the text to resume and quit to quit now we will make this squid button a little bit smaller so let's make it 500 and we'll also adjust its shadow okay so now you can also change the background color of our pause menu panel okay so now we will assign the functions to the buttons now click on this pause button and here the game game manager object is already assigned so let's go to the game manager script and choose the pause game function now for the pause menu click on this resume button and we will choose resume game function for the quit we will add the on click event and drag and drop the game manager object and select quit game function now our pause menu is ready so we have to also assign this pause menu to the game manager object game object so let's drag and drop this and we will also disable this by default now save and now we can click on the play button and let's click on this pause so you can see that our game is paused now if we click on this quit button nothing will happen because we are in the editor mode so whenever we export our game to android device then we will be able to quit our game now let's click on the resume so it will resume hello guys so in this video we are going to create a main menu for our game in the previous video we have created this pause menu so that whenever we click on this pause button our game will be paused and we can resume or quit now we will create a main menu so that whenever we start the game the main menu will be shown first and then we can choose to play the game or quit currently we will implement only two functionalities quit and play but later on we can add high score and options so to create a main menu we have to create a new scene currently we have this sample scene you can also rename this to level or game whatever you want but we will create a new scene so let's create a new scene and we will name it as main menu now double click on it to open now we want to change the background color of this main menu so click on this background property and change it to something white you can make it like whatever you want we will also create a button here so let's go into the ui and then button it will automatically create the canvas and event system we have already talked about these two so we will choose screen space camera as our render mode and we will drag and drop our main camera and here we will click on this pixel perfect so for the ui scale mode we will go with scale with screen size so it will scale our canvas according to the screen resolution so we have to provide this reference resolution so let's say 1920 by 1080 then because we are in portrait mode then we have to give 1080 by 1920 and here we will say 0.5 now we will rename this button to play so let's rename it to play we will make it little bit bigger let's go with 300 by let's go with 400 by 200 okay now we will also change the text on the button so let's make it let's play we will choose the font style as our bold and let's increase the font size we can make it 200 and we can also click on this best fit so it will fit our text according to the size of this button now it is already centered we will also change its color if you want but let's change it to completely black now we will also give it a shadow and let's adjust this effect distance now you can also change the effect color of the shadow but this looks quite well now we will also give the shadow to our button and change the effect distance okay so now we will also reposition our button let's click on the button and okay so let's click on this move tool and drag it a little bit upward okay this is good now we will duplicate this button so let's press ctrl d and we will rename this to quit and we will also change the text on the button quit and let's reposition it okay so we have only selected the text you have to select this whole quit button okay so if we want to give a title to our game then we need to hold display and quit button slightly below so let's select them by holding shift and we will drag them downwards we can add the title if we want and we can also add high score now we will make this quit button little bit smaller okay so it's looking quite good now you can also add a title by just right clicking on canvas and adding a simple text element so we will call it as our first game or you can call it whatever you want and we will increase its size it is currently not visible because the text box is quite small let's click on this rect tool and we can expand this and we will also reposition our title so now click on this text and we will annoy align it to center both horizontally and vertically now you can see that it's looking quite good we can also change its color let's click on this best fit i can also change its color then we can also give it a shadow like this you can also increase the font size okay let's name it as endless runner okay that is good now that we have created the main ui of our main menu then we can save it and we have to also add this main menu scene to our build settings click on build settings and drag and drop this main menu to our build setting this scene list so now we can create a main menu script so click on the script folder right click create a new sharp script and call it as main menu double click on it to open it up individual studio now we are going to use unity's ui so using add this namespace using unity engine dot ui okay so we can we are also we are also going to use the scene management so let's include that as well unity engine dot scene management in fact we are we will not be using this ui unity engine dot ui namespace but we we are going to use this unity engine dot scene management so let's create some functions for our buttons let's create a public void play again and here we can say scene manager dot load scene and here we can pass in the name of our scene so in this we have to copy the scene name click on this sample scene click on f2 ctrl c and then we can paste this scene name here you can also rename this sample scene to label or something like that and for the quit button which is quite simple public let's just copy it from our game manager script we have already created this quit button functionality here so let's copy it okay now we have created the main manuscript so let's get back to the unity and we can assign this main manuscript to our canvas so let's assign it now click on this button ctrl press ctrl and you can select both of them at the same time and we will add this on click event and drag and drop the canvas so for the play button we will choose the play function play game function and for the quit button we will choose quick but quit game function now our setup is ready so we can hit play the squid button will not work in the editor but once we export our game to android it will quit our game whenever we click on this let's click on play now we have to also assign our main menu a main menu button function that can redirect us to main menu whenever we lose the game so let's add that functionality also let's get back to the game manager script and here we will create a new function so let's create a public void name menu and here we will say scene manager dot load scene and we'll give it the name of our main menu scene which is main menu you have to type in the correct name otherwise it will not work so let's copy it from here paste it okay so it is done now save this script and go back to the unity and now we can go to the sample scene and in the pause menu we have a resume and quit button but in the game over panel we have this main button so let's add a on click event and drag and drop the game manager game object and select main menu function and it is done so now let's hit play and we can see that we can now go back to the main menu and we can play our game hello guys so in the previous video we have created this main menu in our game now in this video we are going to create some sound effects for our game like jump and hurt so for this we are going to use a software called bfxr which is used to make 8bit sounds now to download this software open up your browser and search for bfxr download and click on this first link and from here we can download it either for windows or mac so click on windows and it will automatically download these you can install it as you install any other software it is pretty straightforward i have already downloaded and installed it so you can install it and after installing double click on it to open it up now you will see this kind of interface when you open this program there are various buttons there are some prebuilt sounds that we get out of the box which is pickup coin laser explosion power etc we can also create a randomized sound by clicking on this randomize button and we can also we can also modify these properties for each sound apparently we are on this jump sound so we for the you can uh explore this software more but for our game we just need two sounds which is which are jump and hurt so we will use this prebuilt sounds now to create a new sound we just have to click on this button of the jump or heart or whichever you want to create currently the jump sound is already created but i will create it anyways so click on this jump button to create jump sound and you can click on this play to play the sound and you can preview it and you can also change the properties of this sound now i will delete delete this jump to and i will use this first one and i will also create uh now first of all we will export this created sound effect now to export any sound effect we have to click on this export wave now we will export it on our desktop so click on save you can see that our sound is exported now we will also create a heart sound for our game so let's click on this hit or heart you can preview this and modify it as always you can also choose different synths from here like triangle tangent or sine but i will use this default one so i will cancel this jump and export the heart sound so click on export wave and we will save it on the desktop now we can close this program you can of course explore this more if you want but it is the two these two sounds are enough for our game you can also create some other sounds if you want so after creating these sounds go back to the unity editor and here in the assets folder we will create a new folder for keeping our sounds so let's name it as sounds and in here let's drag and drop these two sounds so select these two and drag them into the unity editor and in the sounds folder it will import it now you can preview it from here also by clicking on this play button now we have to go into this sample scene you can rename this scene but i have not renamed it you can rename it to level one or something like that but for now it is okay so we will uh we are here in our main emcee so we will drag and drop these two sounds into our scene so shift and drag and drop these two and it will create two game objects and they will contain this audio source component and as the audio clip it will be our sound itself now these two are created on the position 0 zero zero which is totally fine you can put it anywhere you want and uh these components are these compare this component which is audio source is responsible for uh this uh playing this sound now our main camera already has a audio listener so which is used to listen the sound in our scene produced by the audio source now once we have created these two sounds to game objects then we will go to our player movement script and we will reference it so let's make a public variable so public audio source and you will name it as jump sound now let's save it and after that click on the player it is compiling so click on the player and you can see that the player movement script has this jump sound field so drag and drop the jump game object into this slot so now we will play this jump sound whenever our player jumps and we have to do few settings here we will see to select these two sound so select these two and take this play on awake so they will not play whenever our scene starts but they will play whenever we call them from our script so make sure that this play on awake is not selected for both of them now we will also give a tag to our obstacle so let's create a tag as o b s d you can create a tag with whichever name you want but i will create this stack with obst name now we will assign it to the obstacle return we want to play this sound whenever our player jumps so in the player movement script we will play whenever we tap on the screen so let's symptom sound.play now it will play the jump sound whenever our player jumps or we tap on the screen so now we want to play this jump hurt sound whenever our player collides with the obstacle so let's first of all reference this right sound so probably audio source with sound now we want to play if the collided object is uh obstacle so copy this if statement and paste it here and we will say equalizer dot compare tag to obs then we want to play this sound sound but it will not play the sound currently because we are making time dot time scale equal to zero in the obstacle script here so we will not make it 0 so comment it now we can go back to the game manager script and here we can say that if the then we want to increase the score and now we will also make the obstacle speed to zero so to do this we will say if game manager because it is a static variable so we can access it from here also game manager dot is game over so if the game is not over then and then we want to increase the position of the obstacle so we will increment it whenever the game is not over now after that it will work so let's save this and go back to unity now we can click on this player and drag and drop this hit sound to this it's it's sound field now click on play and now it will play the sound whenever it collides with the obstacle now we can say we can see that the spawner is spawning the obstacles so we will also check here if the game is over or not so let's check if game manager dot include is north sign in front of it so we want to spawn the obstacle if the game is not over past it here save this script and now we can see that it will not spawn the obstacle if the game is over our sounds are working perfectly hello guys in the previous video we have created the sound effects for our game and in this video we are going to create a high score system for our game we are going to use uh unity's player flash for this it is an easy way to store the data on our device locally so we will first of all create the ui for high score so let's go into the main menu and expand this canvas object and in here duplicate this title text and we will rename it to high score so let's say name it now after that we will also reposition it to the bottom of the screen somewhere around here let's change the text to high score click on this best fit and let's also resize the text area to make it in one line and after that let's go into the main manuscript to reference this high school text create a variable public text i score txt and after that save this script and let's go back into the unity and wait for it to compile and after that click on the canvas and drag and drop the high score into the high score txt grid and now let's go into the game manager script and here when we are setting the score we will say player press dot set int you can also set float and string we will give it a string which is a key to access this which is high score and we will set it to the current score and the score is currently float so let's type cast it to integer now we want to change the high score only if the score is less than the high score so let's say if our score is less than i'm sorry it is greater than player price dot get it and we will get this particular key which we have created which is high score and we will also pass in the default value as 0 so whenever our score is greater than the previous high score it will reset the high score key to that score now save this script and in the main manuscript we will say that high score text dot text is equals to is equals to player facts let's say player press dot get integer and we will get that key which we have created which is high score and we will also pass in the default value as zero and we also need to convert this into a string so let's say to string okay so now in the game manager script we have to also type cast the code to integer because it is currently float okay so save the script and go back to the unity and let's play the game we can see that our high score is 0 but we want to also display the high score in front of the actual high score let me simplify it so we will add a high score string in front of the actual high score okay so that's it let's save it and go back to the unity now let's play the game now you can see that it is currently displaying high score as zero let's play the game and okay let's try again okay so now it is 4 so it will display s4 and you can reset the player press by going into the edit and clear all player player preps and click on yes to delete all the player flaps and it will reset the data in the player tracks hello guys so in the previous video we have created the high school system for our game and in this video we are going to export our game to the android platform first of all we have to change some settings so click on the file and go into the build settings after that click on the player settings and in here we can change the company name currently it is default company you can also change it to whatever you want you can also change the name of the game and uh we can also change the version so every time you update the game you may want to increase this and let's uh select the icon for our game and i will select this knob icon which is a default one so you can also make your own custom icon obviously you will make your own icon for your game you can set it there now in the resolution and presentation uh make the default orientation as portrait so our game will be played in the portrait mode only and we are not going to publish this game so these settings are currently okay after that make sure you have installed the android build support while installing the and click on the build and you can save this apk wherever you want currently we are saving it into the desktop and in the new folder so save it and it will take some time to build the project make sure you have an active internet connection because it will require the internet connection to build our project so it may take some more time for you so please wait while it is building for now the this series this beginner series is completed we may add some extra things in the future like double jump functionality and simple store system etc but for now it is completed as a beginner series now let's wait for the gradle build to complete and after that you can see that our app is in the new folder and you can install this app into your android device and you can play it on your own device okay so that was it for this video thank you for watching this video
