With timestamps:

00:00 - hello guys welcome once again in this
00:02 - video I'm going to teach you what are
00:04 - function templates and how we can use
00:07 - function templates in
00:09 - C++ so first of all what are
00:12 - templates a template or templates are
00:16 - the foundation of generic programming so
00:20 - for example you want to make your
00:22 - program more
00:24 - generic uh in order to you know increase
00:27 - the usability of uh the program
00:30 - then you use templates so let me give
00:33 - you an example for example I want to
00:37 - make a function which adds two values
00:42 - okay so this is simple you can make a
00:46 - function which will return an integer
00:49 - and we can add for example int a comma
00:54 - int B so we are passing two uh arguments
01:00 - to the function and we just
01:03 - return return
01:06 - A+ B this is simple right so we are
01:11 - making a calculator we want to make some
01:13 - uh function which calculates the
01:15 - addition of two
01:16 - values and we can do it like this and in
01:20 - our main we can just call two variables
01:24 - for example in um X is equal to
01:30 - 36 for example and
01:34 - in y is equal
01:37 - to
01:39 - 46 and you can just
01:42 - output this like
01:45 - this see
01:48 - out and then you can call this add
01:52 - function this is really simple stuff and
01:55 - you already know I think what I'm doing
01:58 - right
02:00 - and I'm just calling this function and
02:03 - then I will just end
02:09 - this and this will give me a result
02:12 - right so let me run this program compile
02:16 - and
02:22 - run so run the program and it gives the
02:26 - answer but for example you want to add
02:30 - so this is adding integers right you
02:33 - cannot use double values or float values
02:37 - or even string values with uh this
02:40 - function right because this is or the
02:44 - data type is fixed in this function okay
02:47 - so suppose you want to make a generic
02:50 - calculator and you want to uh make a
02:54 - calculator or function like this that it
02:56 - can accept float double and any other
03:00 - integer values so what you can do you
03:02 - can just overload this function for
03:05 - example with float for
03:08 - example
03:11 - float float float and here double for
03:17 - example
03:18 - [Music]
03:20 - double double double and this is also
03:23 - fine this will you know achieve the
03:26 - purpose of making a single function
03:30 - generic but it's taking too much lines
03:33 - of code and it's it makes your code
03:35 - lenier right now in order to make this
03:39 - function really generic we can use
03:43 - templates and this is the whole purpose
03:45 - of template to make a function uh
03:49 - generic so what we can do is we can use
03:54 - a keyword
03:57 - called template just above the function
04:00 - name and then in this angle brackets we
04:04 - can just write class is a keyword and
04:08 - then name of your type this is user
04:13 - defined name so for example I give my uh
04:16 - template class name
04:19 - data type this is given by me okay and
04:23 - what you just need to do you just need
04:25 - to replace your data type which is INT
04:28 - in our case int int int with this data
04:32 - type just copy this paste it here paste
04:35 - it here paste it here and this is the
04:38 - simple definition of a template okay and
04:42 - what uh this is doing is it's just uh
04:47 - telling C++ that we want to make this
04:50 - function uh generic using templates and
04:54 - this data type which we are using uh in
04:58 - here will be replaced
05:00 - by the
05:01 - initialization uh which is given to the
05:03 - function okay and let's build our
05:06 - program and run it it will still give
05:09 - the answer now for
05:11 - example we are adding two integer right
05:14 - now and we can change it to double
05:18 - values
05:19 - [Applause]
05:21 - double double and we can make it 36
05:24 - point some decimal points and 46 Point
05:28 - some decimal points points compile it
05:32 - and run it and it gives the answer okay
05:35 - or you can even make it float or any
05:38 - other values and it will give your uh
05:41 - result so this type of U template
05:47 - function templates can make your
05:50 - function really gen generic and you
05:53 - don't need to you know invest your time
05:55 - in rewriting the same code again and
05:58 - again unless and until until the purpose
06:00 - of this code is same
06:04 - right now there is a one little
06:08 - restriction uh when you use this
06:10 - template not a restriction but you can
06:12 - work around with but in this particular
06:16 - condition there is a restriction that if
06:18 - you define this data type here here and
06:22 - here this data type is same type type
06:25 - type type right so you cannot use int
06:29 - here and so now X is an integer and Y is
06:34 - a double value but here we have defined
06:37 - the template will be this data type
06:40 - which is same here data type data type
06:42 - data type and data type which is of same
06:45 - type so we cannot pass two different
06:48 - data type to a same function okay so it
06:52 - has to be similar data type if you
06:55 - define double then all the function
06:58 - argument takes double value values
06:59 - double and double or if you define or if
07:02 - you want to give integer values to a
07:04 - function you can just Define two integer
07:06 - values let's see
07:08 - what happens when we compile this and it
07:12 - gives the error and what is the
07:14 - error let's see what is the error and
07:17 - the error says no matching function to
07:20 - call add int and double right so always
07:24 - remember when you are using templates
07:27 - like this which in which you are passing
07:30 - two data type in a in in here and in
07:34 - here you just need to give the same data
07:37 - type or pass the same data type to your
07:40 - function okay there is a other ways of
07:44 - passing multiple parameters to a
07:46 - function using template and that I'm
07:49 - going to show you in the next video so
07:51 - stay tuned and please writ Comm And
07:53 - subscribe and bye for now

Cleaned transcript:

hello guys welcome once again in this video I'm going to teach you what are function templates and how we can use function templates in C++ so first of all what are templates a template or templates are the foundation of generic programming so for example you want to make your program more generic uh in order to you know increase the usability of uh the program then you use templates so let me give you an example for example I want to make a function which adds two values okay so this is simple you can make a function which will return an integer and we can add for example int a comma int B so we are passing two uh arguments to the function and we just return return A+ B this is simple right so we are making a calculator we want to make some uh function which calculates the addition of two values and we can do it like this and in our main we can just call two variables for example in um X is equal to 36 for example and in y is equal to 46 and you can just output this like this see out and then you can call this add function this is really simple stuff and you already know I think what I'm doing right and I'm just calling this function and then I will just end this and this will give me a result right so let me run this program compile and run so run the program and it gives the answer but for example you want to add so this is adding integers right you cannot use double values or float values or even string values with uh this function right because this is or the data type is fixed in this function okay so suppose you want to make a generic calculator and you want to uh make a calculator or function like this that it can accept float double and any other integer values so what you can do you can just overload this function for example with float for example float float float and here double for example double double double and this is also fine this will you know achieve the purpose of making a single function generic but it's taking too much lines of code and it's it makes your code lenier right now in order to make this function really generic we can use templates and this is the whole purpose of template to make a function uh generic so what we can do is we can use a keyword called template just above the function name and then in this angle brackets we can just write class is a keyword and then name of your type this is user defined name so for example I give my uh template class name data type this is given by me okay and what you just need to do you just need to replace your data type which is INT in our case int int int with this data type just copy this paste it here paste it here paste it here and this is the simple definition of a template okay and what uh this is doing is it's just uh telling C++ that we want to make this function uh generic using templates and this data type which we are using uh in here will be replaced by the initialization uh which is given to the function okay and let's build our program and run it it will still give the answer now for example we are adding two integer right now and we can change it to double values double double and we can make it 36 point some decimal points and 46 Point some decimal points points compile it and run it and it gives the answer okay or you can even make it float or any other values and it will give your uh result so this type of U template function templates can make your function really gen generic and you don't need to you know invest your time in rewriting the same code again and again unless and until until the purpose of this code is same right now there is a one little restriction uh when you use this template not a restriction but you can work around with but in this particular condition there is a restriction that if you define this data type here here and here this data type is same type type type type right so you cannot use int here and so now X is an integer and Y is a double value but here we have defined the template will be this data type which is same here data type data type data type and data type which is of same type so we cannot pass two different data type to a same function okay so it has to be similar data type if you define double then all the function argument takes double value values double and double or if you define or if you want to give integer values to a function you can just Define two integer values let's see what happens when we compile this and it gives the error and what is the error let's see what is the error and the error says no matching function to call add int and double right so always remember when you are using templates like this which in which you are passing two data type in a in in here and in here you just need to give the same data type or pass the same data type to your function okay there is a other ways of passing multiple parameters to a function using template and that I'm going to show you in the next video so stay tuned and please writ Comm And subscribe and bye for now
