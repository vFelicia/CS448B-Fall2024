With timestamps:

00:00 - hello guys welcome to the next video
00:02 - tutorial on C programming for beginners
00:04 - and in this video we will see what is a
00:08 - union and how we can use Union in
00:12 - C now in the last video we have seen how
00:15 - to use structures in C and Union
00:20 - functionally work like structure but
00:23 - there are some key differences between
00:25 - structures and Union which I'm going to
00:29 - discuss
00:31 - so first of all uh let's comment this
00:34 - structure for
00:36 - now
00:38 - and we are going to declare a union okay
00:42 - so as structure unions are also declared
00:46 - with a
00:48 - keyword Union and then you can give any
00:52 - name to the union for example
00:55 - my union and then comes the these curly
01:04 - braces like these and then this
01:08 - semicolon okay and in Here Comes Your
01:12 - variables like you declare in the
01:15 - structure
01:17 - okay
01:19 - and if you know whenever we declare a
01:24 - variable it has some size or depending
01:28 - upon the data type so integer has a size
01:32 - of four and character has a size of one
01:36 - bite okay so for example if we want to
01:41 - declare this Union Union Let's uh Define
01:45 - the union type
01:47 - also u u and I for
01:51 - example and now we declare a union
01:56 - here U and I and then we can
02:01 - use un and I to give values to our my
02:07 - int variable and my car care variable
02:12 - for example my int is equal to 4 and
02:15 - then un I dot
02:20 - my
02:22 - care is equal to 9
02:26 - okay and uh now let's compile if it
02:30 - works or not and you and I have the
02:34 - problem here so let's see what's the
02:37 - problem I should
02:39 - use something like this not here but un
02:44 - Union my union is equal to un and I okay
02:48 - now compile the program and it works
02:51 - fine okay so now we are going to print
02:54 - the value of my care and my int here so
02:56 - we will just write print
03:00 - and inside the bracket we will just
03:02 - write percentage
03:05 - i/n for next line and then we just print
03:09 - the value of my care first
03:12 - okay un do MyCare here and compile and
03:18 - run the
03:19 - program it here should be semicolon I
03:23 - forgot and run the
03:26 - program and what's a problem here
03:30 - the problem is warning implicit
03:32 - Declaration of
03:36 - something so problem is here in print f
03:40 - it should be print F and when I run the
03:42 - program it gives me five which is
03:44 - correct you uni. my care we have
03:48 - assigned the value of nine which is
03:49 - giving the answer but let's see what
03:53 - happens when we try to access the value
03:57 - of my int okay here we will try to
04:00 - access the value of my in instead of my
04:03 - care it gives us the same result which
04:07 - is nine which is not true so what's
04:10 - happening
04:12 - here so whenever you define a
04:15 - structure like
04:17 - this it allocates its variable or member
04:22 - variables to some memory space so for
04:26 - example you have defined uh variable
04:29 - Minds my int and my care in your my stru
04:34 - structure then it allocates four bytes
04:38 - of memory in some memory space in your
04:41 - computer for myint and it allocates uh
04:45 - one by of memory for this character in
04:48 - some other memory space so when we see
04:52 - in the memory uh map for example it'll
04:56 - look like
04:57 - this one
05:00 - 2 3 four so these
05:06 - fours byes are
05:10 - for your my
05:13 - int
05:16 - my int right my int variable or integer
05:20 - variable okay and this one byte is
05:28 - for car
05:32 - okay now whenever you use Union the
05:37 - memory mapping is little bit different
05:41 - so whenever you declare a union it has
05:45 - the size of the
05:48 - variable whose size is maximum so the
05:53 - maximum size of a variable inside this
05:56 - Union is four which is from integer my
06:00 - in because uh four is greater than one
06:03 - so the size of Union will be four in
06:06 - this case so Union allocates the size to
06:11 - itself from a variable whose size is
06:16 - maximum so the union size in this case
06:20 - is four so inside of a this
06:24 - is struct for example and for
06:28 - Union the memory Maps will be something
06:31 - like this one 2 three and four so it
06:36 - allocates memory this memory to the
06:41 - in
06:43 - integer and in a in the same memory it
06:48 - can
06:49 - allocate the one byte for the
06:52 - character okay
06:55 - so they share so members inside a union
06:59 - share this memory space or size but
07:03 - inside the structure they are allocated
07:06 - at different places okay so that's why
07:10 - whenever you assign four it will be
07:14 - assigned in these four bytes and so you
07:19 - have for the first time when you assign
07:21 - four in the integer it will be assigned
07:24 - here but as soon as you assign nine to
07:29 - this
07:30 - character then it will be
07:33 - overwritten to these four bytes okay
07:37 - that's why we are getting the answer
07:40 - nine
07:42 - here so this is the main difference
07:45 - between structure and Union structure
07:49 - allocates different memory location to
07:52 - its variable but Union allocates the me
07:56 - same memory location and the size of the
08:00 - Union is the maximum size of a variable
08:04 - inside it so if my int has the maximum
08:08 - size the size of the Union will be the
08:10 - same now to prove this we can
08:15 - uh just print the size of these
08:18 - structure and the union okay so let's
08:22 - try to to print the structure size and
08:26 - Union size okay so for for printing the
08:30 - structure
08:32 - size there is a function
08:35 - called size
08:38 - of and using this you
08:41 - can calculate the size of the
08:44 - structure so our structure name is
08:47 - record in this case so we will just
08:50 - calculate the size of record and in this
08:54 - in the union case our Union name is UN
08:58 - and I right
08:59 - so we can get the size of uni and let's
09:03 - uh
09:05 - say here the size of the SI
09:10 - size
09:13 - of
09:14 - struct and just below it we can say the
09:19 - size
09:23 - of Union okay and compile the program
09:27 - and run the program and it says the size
09:30 - of structure is 8 and the size of Union
09:35 - is four okay now you may be wondering
09:39 - that the size of structure should be
09:42 - five because the size of integer is four
09:47 - for integer variable and the size of
09:50 - character is one for the character
09:52 - variable where does this eight comes
09:55 - from as a size because whenever
09:59 - structure whenever you provide some
10:01 - variable to the structure it calculates
10:05 - the memory or size by adding the size of
10:09 - these variable plus it gives the padding
10:13 - plus it adds some padding so that it can
10:18 - become the multiple of uh four or eight
10:21 - or something like this that's why it the
10:24 - you are seeing eight here because five
10:27 - is not the multiple of of eight or four
10:32 - okay so structure provide or C provides
10:36 - some padding to uh the structure so that
10:41 - its size become eight instead of five
10:44 - but the size of Union is four as I have
10:47 - told you that the SI it's the size of
10:50 - the variable which has the maximum size
10:53 - so size of Union is four in this
10:57 - case and you may also wondering where we
11:01 - can use Union if they overwrite the
11:04 - stuff uh every time you you know ex try
11:07 - to access
11:08 - them the union are mainly used
11:13 - in embedded programming wherever you you
11:17 - know try to access some memory or
11:20 - something like this there uh it's mostly
11:23 - used but you need to read about this
11:27 - where can you Pro
11:29 - you know use this Union so I hope you
11:32 - have understood the basic concept of
11:34 - Union and I hope you have enjoyed this
11:36 - video please wait comment subscribe and
11:38 - bye for now

Cleaned transcript:

hello guys welcome to the next video tutorial on C programming for beginners and in this video we will see what is a union and how we can use Union in C now in the last video we have seen how to use structures in C and Union functionally work like structure but there are some key differences between structures and Union which I'm going to discuss so first of all uh let's comment this structure for now and we are going to declare a union okay so as structure unions are also declared with a keyword Union and then you can give any name to the union for example my union and then comes the these curly braces like these and then this semicolon okay and in Here Comes Your variables like you declare in the structure okay and if you know whenever we declare a variable it has some size or depending upon the data type so integer has a size of four and character has a size of one bite okay so for example if we want to declare this Union Union Let's uh Define the union type also u u and I for example and now we declare a union here U and I and then we can use un and I to give values to our my int variable and my car care variable for example my int is equal to 4 and then un I dot my care is equal to 9 okay and uh now let's compile if it works or not and you and I have the problem here so let's see what's the problem I should use something like this not here but un Union my union is equal to un and I okay now compile the program and it works fine okay so now we are going to print the value of my care and my int here so we will just write print and inside the bracket we will just write percentage i/n for next line and then we just print the value of my care first okay un do MyCare here and compile and run the program it here should be semicolon I forgot and run the program and what's a problem here the problem is warning implicit Declaration of something so problem is here in print f it should be print F and when I run the program it gives me five which is correct you uni. my care we have assigned the value of nine which is giving the answer but let's see what happens when we try to access the value of my int okay here we will try to access the value of my in instead of my care it gives us the same result which is nine which is not true so what's happening here so whenever you define a structure like this it allocates its variable or member variables to some memory space so for example you have defined uh variable Minds my int and my care in your my stru structure then it allocates four bytes of memory in some memory space in your computer for myint and it allocates uh one by of memory for this character in some other memory space so when we see in the memory uh map for example it'll look like this one 2 3 four so these fours byes are for your my int my int right my int variable or integer variable okay and this one byte is for car okay now whenever you use Union the memory mapping is little bit different so whenever you declare a union it has the size of the variable whose size is maximum so the maximum size of a variable inside this Union is four which is from integer my in because uh four is greater than one so the size of Union will be four in this case so Union allocates the size to itself from a variable whose size is maximum so the union size in this case is four so inside of a this is struct for example and for Union the memory Maps will be something like this one 2 three and four so it allocates memory this memory to the in integer and in a in the same memory it can allocate the one byte for the character okay so they share so members inside a union share this memory space or size but inside the structure they are allocated at different places okay so that's why whenever you assign four it will be assigned in these four bytes and so you have for the first time when you assign four in the integer it will be assigned here but as soon as you assign nine to this character then it will be overwritten to these four bytes okay that's why we are getting the answer nine here so this is the main difference between structure and Union structure allocates different memory location to its variable but Union allocates the me same memory location and the size of the Union is the maximum size of a variable inside it so if my int has the maximum size the size of the Union will be the same now to prove this we can uh just print the size of these structure and the union okay so let's try to to print the structure size and Union size okay so for for printing the structure size there is a function called size of and using this you can calculate the size of the structure so our structure name is record in this case so we will just calculate the size of record and in this in the union case our Union name is UN and I right so we can get the size of uni and let's uh say here the size of the SI size of struct and just below it we can say the size of Union okay and compile the program and run the program and it says the size of structure is 8 and the size of Union is four okay now you may be wondering that the size of structure should be five because the size of integer is four for integer variable and the size of character is one for the character variable where does this eight comes from as a size because whenever structure whenever you provide some variable to the structure it calculates the memory or size by adding the size of these variable plus it gives the padding plus it adds some padding so that it can become the multiple of uh four or eight or something like this that's why it the you are seeing eight here because five is not the multiple of of eight or four okay so structure provide or C provides some padding to uh the structure so that its size become eight instead of five but the size of Union is four as I have told you that the SI it's the size of the variable which has the maximum size so size of Union is four in this case and you may also wondering where we can use Union if they overwrite the stuff uh every time you you know ex try to access them the union are mainly used in embedded programming wherever you you know try to access some memory or something like this there uh it's mostly used but you need to read about this where can you Pro you know use this Union so I hope you have understood the basic concept of Union and I hope you have enjoyed this video please wait comment subscribe and bye for now
