With timestamps:

00:00 - hello everyone welcome to programming
00:01 - knowledge so again welcome here to
00:03 - programming knowledge
00:04 - so today we are going to start a new
00:06 - tutorial on some basic data structures
00:07 - in ruby
00:08 - so the most basic data structure and the
00:11 - like
00:11 - one of the most important also is rs so
00:14 - today
00:15 - we are going to continue with array in
00:17 - this tutorial
00:18 - and let's see how we like initialize
00:21 - some array in ruby
00:22 - so very basic method is to do nums is
00:25 - equal to 1
00:26 - 2 3 and now you can do and
00:29 - you can also initialize another array
00:32 - names
00:33 - is equal to joe
00:37 - john and jack
00:40 - so this is the one one is a area of nums
00:43 - and this is a
00:44 - of strings so these are like two data
00:47 - types you can initialize one is of
00:48 - integer type and one of string type
00:50 - and now we what we are going to do we
00:52 - are going to like
00:53 - see how we can for print this array the
00:55 - one way to print this do
00:57 - put test nums now let's run this file
01:00 - now here you can see i have printed the
01:02 - array another way
01:04 - is to like s names so this would like
01:08 - run the array like sorry print the array
01:10 - so this is one way of printing another
01:12 - way is you what you can do is
01:14 - you can treat this as a variable i have
01:16 - already told you like
01:17 - how we like like read the variables and
01:20 - print this
01:21 - and this is like this is also going to
01:23 - work
01:24 - and this is going to collect sorry
01:27 - this is going to print uh in horizontal
01:30 - direction so here you can see
01:32 - like this so same you can do with the
01:34 - names also
01:36 - okay and it looks good to go yeah
01:39 - so here you can do also this is the same
01:41 - thing now
01:43 - one way to also initialize the array is
01:46 - like you can use array dot new
01:50 - and this uh they're like this is like
01:54 - eric class which calls constructor
01:56 - and this is added dot new and this is
02:00 - joe john and jack so let's run this
02:04 - again and let's see it works perfectly
02:08 - fine and let's run this for nums also
02:12 - and let's see yeah so
02:16 - so here it also works perfectly fine so
02:18 - this is one way of
02:19 - printing the array in ruby so another
02:22 - way
02:22 - what we can opt for is like i told this
02:25 - new operator
02:27 - now what you can do you can also use the
02:30 - range operator as well
02:32 - and uh uh some i'll show you one thing
02:36 - you can we can comment this out now
02:39 - since this
02:39 - is not needed and i've all put this
02:41 - comment in comment so it's just for your
02:43 - reference
02:44 - so you can also i'll do this put test
02:48 - names let's put test nums
02:51 - so these two things are also not needed
02:54 - i can comment this yeah
02:55 - so now we can use another array
03:00 - let's take a variable m and let's give
03:03 - array
03:04 - dot new and i'm sending five
03:07 - times i want this word hello so when i
03:10 - do
03:11 - put s so hash m
03:14 - so it would give me
03:17 - hello five times inside the area so this
03:19 - is a trick
03:21 - now one thing you need to observe now
03:23 - i'll remove
03:24 - i'll remove uh like the same can also be
03:28 - initialized with an integer variable so
03:30 - like i'll do this
03:34 - so now it says five times i'll get the
03:36 - zero if you want to
03:37 - try some empty array with some
03:38 - particular value you can do this
03:41 - okay so i'll comment this out also sorry
03:44 - yeah so yeah so this looks perfect
03:47 - perfectly fine now what we can do is
03:51 - uh we can also
03:54 - use another range operator and for that
03:58 - what we are going to do at a this time
04:00 - we don't
04:01 - use the new operator we are not using
04:03 - this okay we will not use this and we
04:05 - give 20.30
04:07 - if you don't want to include factory put
04:09 - an extra dot i already pre
04:11 - put in this my previous tutorial that
04:13 - this would include the last element
04:15 - last range and this would not include
04:17 - the last range okay
04:19 - now put s hash
04:22 - m and let's go with this
04:26 - and oh here you can see i've got the
04:29 - array so make sure you don't put the new
04:30 - operator this time
04:32 - now some basic operations you can do
04:35 - with the arrays
04:36 - is like some basic operations you can do
04:39 - uh so like one is now let's create
04:43 - uh like some uh like dummy array
04:46 - a is equal to array
04:50 - what new and i'll say
04:53 - 1 1 two three let me
04:57 - try out some with random number 10 20 30
05:01 - 40 50. okay
05:05 - now uh you can
05:08 - uh i'll show you one thing also you can
05:11 - also what i'm trying to emulate here you
05:14 - can also
05:15 - run this on ah like irb command
05:18 - so that is rails interactive console so
05:20 - you can run this irb
05:22 - and then you can have an interactive
05:24 - rails console and you can run this or
05:26 - there also
05:27 - okay so let's some uh let some
05:30 - like let's move to the next thing then
05:32 - you can type exit and you can
05:34 - come out of this interactive console so
05:36 - i'll show you also how to work with
05:37 - interactive rails console
05:39 - and now what you can do you can do first
05:42 - the very basic command you can do put
05:43 - test a
05:44 - dot length okay so let's run this
05:50 - and when i run a dot n so it gives five
05:52 - the same thing can be a dot
05:54 - size also so when i run a dot size
05:58 - so it gives fives as well okay another
06:00 - thing
06:01 - we can run is uh like another thing we
06:04 - can run is
06:05 - a dot first and a dot last so a dot
06:08 - first would return
06:09 - me the first element now let's run this
06:12 - a dot first digit this gives 10
06:14 - now a dot last would give me the last
06:17 - element
06:19 - so that is 50. so a dot first returned
06:22 - with 10 8
06:23 - 50 and the size and length works
06:25 - perfectly fine
06:26 - okay so we can run these commands to
06:29 - like have a better overview
06:31 - another thing we can have is push and
06:34 - pop
06:35 - okay so i'll show you push and pau
06:40 - so hey everyone like this was like four
06:43 - operators we had seen
06:44 - like one was the first last uh
06:48 - and size and length so you can use all
06:50 - of them first
06:52 - okay you can also lose last and size
06:57 - and length okay so these are the four
07:00 - operators we can use uh one thing you
07:02 - could also use you can use
07:03 - a dot to underscore string so this would
07:06 - convert this to a string
07:08 - okay so i'll show you how this runs so
07:10 - here you can see
07:11 - so here we have got the string output of
07:13 - this it already looks like
07:15 - ruby gray ruby also does this behind the
07:18 - scenes like
07:18 - when we are using put s so it already
07:21 - does this behind the scene so
07:22 - we don't like i get intuition like this
07:24 - is happening okay
07:26 - so this is one thing we can also do so
07:28 - two operators like we can do use
07:31 - we can push 60 now we can print this
07:36 - and we get 60 okay now
07:40 - okay okay i did like okay i did one
07:44 - now we can do this sorry
07:49 - i had like then this like but it works
07:51 - perfectly fine not an issue
07:54 - but yeah this is the correct way to do
07:55 - it now i can do a dot pop
08:00 - also so the pop would remove
08:03 - the element i'll show you so basically
08:07 - pop removes the element from the last
08:09 - okay it
08:10 - uses like append so it works it has a
08:12 - similar behavior to the stack data
08:14 - structure
08:15 - so like it now
08:18 - basically it like pushes element from
08:21 - the back and
08:22 - pops the element from the back so it
08:23 - behaves like a stack data structure okay
08:25 - now we can move to like one last thing
08:28 - is
08:28 - uh there are various method in ruby like
08:31 - each with index
08:32 - and with index so the important one is a
08:35 - very important one is each
08:36 - with index because this works as a folly
08:40 - for each loop
08:41 - h with index i get two things in this
08:45 - one is the value and another in the
08:48 - index
08:48 - okay so i am
08:52 - going to type this put as a statement
08:55 - right the value
08:59 - add index okay
09:03 - now i'm going to put iadx is
09:06 - hash val okay
09:10 - so this is is going to print like five
09:12 - times or like
09:14 - so and this is like this is the one of
09:16 - the most so
09:17 - the value at index 0 is 10 valued index
09:19 - 1 is 20
09:20 - value at index 2 is 30 and value of
09:23 - index 3 is 40
09:24 - and the value at index 5 is 50.
09:28 - uh we could also
09:31 - like we could also move with some
09:34 - another methods
09:35 - so there are various methods and array
09:37 - you can like have a view
09:39 - so we can also like uh delete
09:44 - underscope add at zero
09:47 - so this would this should probably
09:51 - okay i forgot to print this sorry
09:54 - put s
09:57 - hash a okay now let's run this
10:01 - so basically delete at the index 0 okay
10:04 - now if you want to delete the particular
10:08 - element so you need to define 20
10:11 - so this would delete the one at 20 so
10:14 - see
10:14 - perfect so these are all like various
10:16 - methods we perform in ruby
10:18 - for arrow operations so thank you
10:20 - everyone for watching this i'll catch
10:21 - you in the next video

Cleaned transcript:

hello everyone welcome to programming knowledge so again welcome here to programming knowledge so today we are going to start a new tutorial on some basic data structures in ruby so the most basic data structure and the like one of the most important also is rs so today we are going to continue with array in this tutorial and let's see how we like initialize some array in ruby so very basic method is to do nums is equal to 1 2 3 and now you can do and you can also initialize another array names is equal to joe john and jack so this is the one one is a area of nums and this is a of strings so these are like two data types you can initialize one is of integer type and one of string type and now we what we are going to do we are going to like see how we can for print this array the one way to print this do put test nums now let's run this file now here you can see i have printed the array another way is to like s names so this would like run the array like sorry print the array so this is one way of printing another way is you what you can do is you can treat this as a variable i have already told you like how we like like read the variables and print this and this is like this is also going to work and this is going to collect sorry this is going to print uh in horizontal direction so here you can see like this so same you can do with the names also okay and it looks good to go yeah so here you can do also this is the same thing now one way to also initialize the array is like you can use array dot new and this uh they're like this is like eric class which calls constructor and this is added dot new and this is joe john and jack so let's run this again and let's see it works perfectly fine and let's run this for nums also and let's see yeah so so here it also works perfectly fine so this is one way of printing the array in ruby so another way what we can opt for is like i told this new operator now what you can do you can also use the range operator as well and uh uh some i'll show you one thing you can we can comment this out now since this is not needed and i've all put this comment in comment so it's just for your reference so you can also i'll do this put test names let's put test nums so these two things are also not needed i can comment this yeah so now we can use another array let's take a variable m and let's give array dot new and i'm sending five times i want this word hello so when i do put s so hash m so it would give me hello five times inside the area so this is a trick now one thing you need to observe now i'll remove i'll remove uh like the same can also be initialized with an integer variable so like i'll do this so now it says five times i'll get the zero if you want to try some empty array with some particular value you can do this okay so i'll comment this out also sorry yeah so yeah so this looks perfect perfectly fine now what we can do is uh we can also use another range operator and for that what we are going to do at a this time we don't use the new operator we are not using this okay we will not use this and we give 20.30 if you don't want to include factory put an extra dot i already pre put in this my previous tutorial that this would include the last element last range and this would not include the last range okay now put s hash m and let's go with this and oh here you can see i've got the array so make sure you don't put the new operator this time now some basic operations you can do with the arrays is like some basic operations you can do uh so like one is now let's create uh like some uh like dummy array a is equal to array what new and i'll say 1 1 two three let me try out some with random number 10 20 30 40 50. okay now uh you can uh i'll show you one thing also you can also what i'm trying to emulate here you can also run this on ah like irb command so that is rails interactive console so you can run this irb and then you can have an interactive rails console and you can run this or there also okay so let's some uh let some like let's move to the next thing then you can type exit and you can come out of this interactive console so i'll show you also how to work with interactive rails console and now what you can do you can do first the very basic command you can do put test a dot length okay so let's run this and when i run a dot n so it gives five the same thing can be a dot size also so when i run a dot size so it gives fives as well okay another thing we can run is uh like another thing we can run is a dot first and a dot last so a dot first would return me the first element now let's run this a dot first digit this gives 10 now a dot last would give me the last element so that is 50. so a dot first returned with 10 8 50 and the size and length works perfectly fine okay so we can run these commands to like have a better overview another thing we can have is push and pop okay so i'll show you push and pau so hey everyone like this was like four operators we had seen like one was the first last uh and size and length so you can use all of them first okay you can also lose last and size and length okay so these are the four operators we can use uh one thing you could also use you can use a dot to underscore string so this would convert this to a string okay so i'll show you how this runs so here you can see so here we have got the string output of this it already looks like ruby gray ruby also does this behind the scenes like when we are using put s so it already does this behind the scene so we don't like i get intuition like this is happening okay so this is one thing we can also do so two operators like we can do use we can push 60 now we can print this and we get 60 okay now okay okay i did like okay i did one now we can do this sorry i had like then this like but it works perfectly fine not an issue but yeah this is the correct way to do it now i can do a dot pop also so the pop would remove the element i'll show you so basically pop removes the element from the last okay it uses like append so it works it has a similar behavior to the stack data structure so like it now basically it like pushes element from the back and pops the element from the back so it behaves like a stack data structure okay now we can move to like one last thing is uh there are various method in ruby like each with index and with index so the important one is a very important one is each with index because this works as a folly for each loop h with index i get two things in this one is the value and another in the index okay so i am going to type this put as a statement right the value add index okay now i'm going to put iadx is hash val okay so this is is going to print like five times or like so and this is like this is the one of the most so the value at index 0 is 10 valued index 1 is 20 value at index 2 is 30 and value of index 3 is 40 and the value at index 5 is 50. uh we could also like we could also move with some another methods so there are various methods and array you can like have a view so we can also like uh delete underscope add at zero so this would this should probably okay i forgot to print this sorry put s hash a okay now let's run this so basically delete at the index 0 okay now if you want to delete the particular element so you need to define 20 so this would delete the one at 20 so see perfect so these are all like various methods we perform in ruby for arrow operations so thank you everyone for watching this i'll catch you in the next video
