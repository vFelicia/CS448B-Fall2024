With timestamps:

00:00 - today we are going to take a look at
00:02 - some of the important interview
00:05 - questions that can be asked from the C
00:08 - programming language so let's take a
00:11 - look first question is what is dynamic
00:17 - memory allocation increase so the answer
00:21 - is dynamic memory allocation is the
00:25 - process of allocating memory to the
00:28 - program and it's variable during runtime
00:31 - it involves three functions for
00:35 - allocating the memory and one function -
00:39 - free the used memory or the allocated so
00:43 - the three functions that are used to
00:45 - allocate the memory are malloc calloc
00:49 - and we allow the function that is used
00:53 - to reallocate the used memory is free
00:56 - all these functions have no parameters
01:01 - next question what do you mean by memory
01:05 - leak so memory leak can be defined as a
01:10 - situation where programmer allocates
01:13 - dynamic memory to the program but fails
01:17 - to free or delete the used memory after
01:20 - the completion of the code this is a
01:24 - harmful process if demons and servers
01:27 - are included in the program further if
01:30 - the memory is being allocated but is not
01:34 - being freed then it can cause a problem
01:38 - in the memory management so this is
01:41 - memory leak next question what is the
01:46 - difference between declaring a header
01:48 - file with angular brackets and double
01:51 - quotes if the header file is declared
01:56 - using the angular bracket then the
02:00 - compiler searches for the header file
02:02 - within the buildin part but if the
02:07 - header file is declared using the double
02:10 - hood
02:11 - then the compiler will search for the
02:14 - header file in the current working
02:16 - directory first and if it is not found
02:20 - over there then it searches for the file
02:22 - in the other location next question what
02:28 - is typecasting typecasting is a process
02:32 - of conversion of one data type into
02:36 - another it is a form of explicit
02:39 - conversion that is it is done after this
02:43 - choice and RIF of the user since that's
02:47 - what I casting is within thousand pieces
02:50 - you need to mention the target data type
02:53 - status the data type into which you want
02:57 - to convert your expression into and
03:00 - after that you write the expression and
03:03 - end the statement with a semicolon for
03:07 - example can pH is initialized with a so
03:13 - sweet is a character variable status
03:16 - holding the character capital it int Y
03:20 - is another integer variable in which we
03:23 - have casted this character variable so
03:28 - we have written int Val
03:31 - within parentheses int that is our
03:34 - target data type and then we have
03:37 - mentioned finish so this is explicit
03:40 - conversion using typecasting now one
03:44 - will do that type annual capital e which
03:48 - is nothing but 65 next question what is
03:54 - the hash fragment directive it is the
03:57 - preprocessor directive that can be used
04:00 - to turn on or off certain features in a
04:04 - C program it is a three type hash
04:08 - fragment start up hashtag Madrid and
04:12 - hash mark one hash tag must start up
04:17 - allows us to specify functions
04:20 - upon program starter that is when the
04:24 - program starts then what functions will
04:26 - be fired automatically hash fragment
04:30 - exit allows us to specify functions
04:33 - called upon the program equipped that is
04:36 - when the program is about to exit then
04:39 - what functions do we need to perform
04:42 - hash tag more warned tells whether to
04:45 - suppress any warning in the C program or
04:48 - not next question is what is null
04:53 - pointer in three nice is used to
04:57 - indicate that a pointer doesn't point to
05:01 - a valid location the pointers should be
05:05 - initialized as null if their value is
05:07 - unknown at the time of declaration or
05:10 - when the memory pointed by the pointer
05:14 - is being allocated within a program next
05:20 - question how will you print numbers from
05:23 - one to hundred without using a loop so
05:26 - we know that if we want to do something
05:28 - in a repeated fashion we use loop for
05:32 - that purpose but how can you print
05:35 - numbers from one to hundred without
05:37 - using a loop so one method is that you
05:42 - have to write the printf 1,800 times but
05:44 - that√≠s just a troublesome process so we
05:48 - have another process another method
05:51 - through which we can do so and that is
05:54 - known as recursion recursion is the
05:57 - repeated calling of a function by itself
06:00 - so here we have created a function whose
06:04 - return type is void the name of the
06:06 - function is print numbers and it accepts
06:10 - an integer argument n within the body of
06:13 - the function there is an if statement if
06:16 - n is greater than zero then it calls
06:20 - itself it calls
06:23 - print numbers and passes n minus 1 into
06:28 - it after the calling
06:31 - it will print the value of N so this
06:35 - print numbers function all itself and
06:39 - using that it will print the value of N
06:43 - and n will be supplied by the user so it
06:49 - is a recursive calling of prints numbers
06:51 - and using this we can print easily the
06:55 - numbers from one to hundred without
06:57 - using a loop so now we also know that
07:01 - using recursion anything that could be
07:04 - done through loop can be done easily
07:07 - next question what are local static
07:11 - variables and what is this use a local
07:16 - static variable is a variable whose
07:18 - lifetime doesn't end with a function
07:21 - call where it is declared extends for
07:25 - the lifetime of complete program all
07:29 - calls to the function share the same
07:31 - copy of local static variable static
07:36 - variables can be used to count the
07:39 - number of times of functional order the
07:43 - static variable with the default value
07:46 - as zero next question why preprocessor
07:53 - directive does not end with a semicolon
07:57 - so the answer is semicolons is treated
08:02 - by the compiler and as the name suggests
08:05 - the preprocessors are programs that
08:09 - preserves the source code before
08:11 - compilation even start therefore the use
08:16 - of semicolons in preprocessors is not
08:19 - needed next question what is the
08:24 - smallest possible executable code in a C
08:27 - programming language
08:29 - since the presence of main function is
08:33 - needed for a program to stop its
08:36 - execution for the smallest possible
08:40 - executable code in three it is mandatory
08:43 - to include a main function so the code
08:47 - will be void main parentheses open and
08:52 - close and graces open and close that
08:55 - means it will only contain a main
08:58 - function with parentheses but no
09:01 - arguments and no body so this code will
09:04 - be compiled on sue it would be executed
09:06 - also but it will not do anything this is
09:09 - a smallest possible equitable food in
09:12 - the C programming language so that's it
09:16 - thanks for watching

Cleaned transcript:

today we are going to take a look at some of the important interview questions that can be asked from the C programming language so let's take a look first question is what is dynamic memory allocation increase so the answer is dynamic memory allocation is the process of allocating memory to the program and it's variable during runtime it involves three functions for allocating the memory and one function free the used memory or the allocated so the three functions that are used to allocate the memory are malloc calloc and we allow the function that is used to reallocate the used memory is free all these functions have no parameters next question what do you mean by memory leak so memory leak can be defined as a situation where programmer allocates dynamic memory to the program but fails to free or delete the used memory after the completion of the code this is a harmful process if demons and servers are included in the program further if the memory is being allocated but is not being freed then it can cause a problem in the memory management so this is memory leak next question what is the difference between declaring a header file with angular brackets and double quotes if the header file is declared using the angular bracket then the compiler searches for the header file within the buildin part but if the header file is declared using the double hood then the compiler will search for the header file in the current working directory first and if it is not found over there then it searches for the file in the other location next question what is typecasting typecasting is a process of conversion of one data type into another it is a form of explicit conversion that is it is done after this choice and RIF of the user since that's what I casting is within thousand pieces you need to mention the target data type status the data type into which you want to convert your expression into and after that you write the expression and end the statement with a semicolon for example can pH is initialized with a so sweet is a character variable status holding the character capital it int Y is another integer variable in which we have casted this character variable so we have written int Val within parentheses int that is our target data type and then we have mentioned finish so this is explicit conversion using typecasting now one will do that type annual capital e which is nothing but 65 next question what is the hash fragment directive it is the preprocessor directive that can be used to turn on or off certain features in a C program it is a three type hash fragment start up hashtag Madrid and hash mark one hash tag must start up allows us to specify functions upon program starter that is when the program starts then what functions will be fired automatically hash fragment exit allows us to specify functions called upon the program equipped that is when the program is about to exit then what functions do we need to perform hash tag more warned tells whether to suppress any warning in the C program or not next question is what is null pointer in three nice is used to indicate that a pointer doesn't point to a valid location the pointers should be initialized as null if their value is unknown at the time of declaration or when the memory pointed by the pointer is being allocated within a program next question how will you print numbers from one to hundred without using a loop so we know that if we want to do something in a repeated fashion we use loop for that purpose but how can you print numbers from one to hundred without using a loop so one method is that you have to write the printf 1,800 times but that√≠s just a troublesome process so we have another process another method through which we can do so and that is known as recursion recursion is the repeated calling of a function by itself so here we have created a function whose return type is void the name of the function is print numbers and it accepts an integer argument n within the body of the function there is an if statement if n is greater than zero then it calls itself it calls print numbers and passes n minus 1 into it after the calling it will print the value of N so this print numbers function all itself and using that it will print the value of N and n will be supplied by the user so it is a recursive calling of prints numbers and using this we can print easily the numbers from one to hundred without using a loop so now we also know that using recursion anything that could be done through loop can be done easily next question what are local static variables and what is this use a local static variable is a variable whose lifetime doesn't end with a function call where it is declared extends for the lifetime of complete program all calls to the function share the same copy of local static variable static variables can be used to count the number of times of functional order the static variable with the default value as zero next question why preprocessor directive does not end with a semicolon so the answer is semicolons is treated by the compiler and as the name suggests the preprocessors are programs that preserves the source code before compilation even start therefore the use of semicolons in preprocessors is not needed next question what is the smallest possible executable code in a C programming language since the presence of main function is needed for a program to stop its execution for the smallest possible executable code in three it is mandatory to include a main function so the code will be void main parentheses open and close and graces open and close that means it will only contain a main function with parentheses but no arguments and no body so this code will be compiled on sue it would be executed also but it will not do anything this is a smallest possible equitable food in the C programming language so that's it thanks for watching
