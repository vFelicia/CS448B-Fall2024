With timestamps:

00:00 - hello and welcome back to the another
00:02 - video of the Java tutorial Series so
00:04 - today we will be covering super keyword
00:06 - in Java so the super keyword in Java is
00:08 - a reference variable to which it is used
00:11 - to refer the immediate parent class
00:13 - object whenever you create an instance
00:16 - of the subclass and instance of the
00:18 - parent class is created implicitly which
00:21 - is referred by the super reference
00:23 - keyword okay so it is nothing method it
00:26 - is super keyword is used to call the
00:29 - variables methods and the constructors
00:31 - of the super class okay so the user of
00:35 - this super cubes are super keyword is
00:38 - so this there are three uses it can be
00:42 - used to uh call the immediate parent
00:45 - class instance variable
00:48 - let me write it over here
00:51 - instance variable and it is super
00:54 - keyword is uh can be used to invoke the
00:57 - in immediate parent class method parent
01:00 - class method
01:04 - and again it is a super can be used to
01:07 - invoke the immediate parent class
01:09 - Constructor
01:13 - okay so these are the three uses of the
01:16 - super keyword we will see one by one
01:19 - each of them okay let me decrease the
01:22 - font size okay so first we will see how
01:26 - we can use the super keyword to refer
01:30 - the immediate parent class instance
01:31 - variable okay so let me get into my IDE
01:34 - and I will create one new Java sorry a
01:38 - new Java class I will name it as
01:44 - super
01:48 - keyword okay now in let me increase my
01:51 - font size and I will import my main
01:54 - method okay uh so let me take one
01:58 - example so that you guys can understand
02:00 - how we can use the parent class variable
02:05 - as in
02:06 - child's class okay
02:08 - uh let me
02:10 - declare my
02:13 - parent class over here
02:15 - I will
02:17 - write animal declare one class name as
02:21 - animal
02:22 - and I will write this okay now inside my
02:27 - animal class I am getting a difficult
02:30 - class from okay okay okay okay okay okay
02:32 - wait wait wait wait wait in our previous
02:35 - code we have used
02:38 - this
02:40 - animal class I guess that's why we are
02:42 - getting uh error over here
02:46 - okay okay let me change my class name so
02:51 - something else so that we can okay now
02:53 - now it's okay fine uh inside my animal
02:56 - class I will declare one string
03:01 - color and quit
03:06 - string
03:07 - col or color
03:10 - which is equals to
03:13 - White
03:15 - okay so this is my parent class and now
03:19 - I will create one class name as
03:24 - dog I guess
03:27 - you can take anyone any animal you want
03:30 - okay dog
03:31 - which is
03:33 - extending the
03:37 - enemy sorry animals class now inside
03:41 - this class I will write
03:44 - string
03:46 - color
03:48 - it is equals to
03:51 - black
03:53 - okay now uh wait a second I'm getting
03:57 - okay dog is also let me create it as
04:00 - stocks okay uh now I will write one
04:03 - method void
04:07 - print
04:08 - color
04:10 - which doesn't accept any parameters and
04:13 - inside this method I will write simply
04:18 - system.out.pentel in my color
04:20 - okay now and I will write one more
04:24 - Sprint statement and now this time I
04:26 - will write
04:28 - super dot color
04:30 - okay now you you will see what is
04:33 - different exactly difference between uh
04:35 - these two statements let me just create
04:38 - the object of the talks class
04:41 - Docs
04:43 - obj1
04:46 - is equals to new dogs okay and inside
04:49 - using this object so I will
04:53 - obj1
04:54 - Dot
04:57 - print color okay now if I run this
05:01 - you will see the difference between
05:03 - these two statements one is printing
05:05 - black and one is printing white why so
05:07 - because when we write system.out.print
05:09 - Ln color
05:11 - this this is referred as this line
05:14 - number six and this colors value of this
05:17 - color variable color variable is black
05:20 - and which is getting getting printed on
05:21 - the console and when we write super dot
05:23 - color this super this super keyword will
05:27 - call this call is getting called to the
05:31 - and parent class parent class is here
05:34 - class animals and whereas colors value
05:38 - is white okay so super dot color is
05:40 - white and color simply color when we
05:43 - write simply color the that means inside
05:46 - this class we have declared string color
05:48 - black so black is getting printed first
05:51 - and why it is getting basic printed
05:53 - second okay I hope you understood this
05:57 - concept of variables okay and now moving
06:00 - forward
06:01 - I will see how we can Super Key how we
06:06 - can use super keyword in class methods
06:08 - okay now
06:11 - uh I will make some changes in this code
06:14 - all itself okay now this time I don't
06:18 - need this string because we don't we and
06:21 - I will create void
06:24 - eight
06:26 - and inside this I will just simply write
06:32 - eating okay uh so this is the parent
06:34 - class method and now inside my dogs
06:37 - which is extending the animals class
06:39 - extends animal class uh I don't know I
06:42 - don't need this variable right now and I
06:45 - will declare this print I guess this
06:49 - also done
06:51 - need anymore okay now inside this I will
06:55 - write
06:56 - it
07:00 - and
07:01 - I will print
07:04 - okay it's eating
07:07 - such a random string okay and then right
07:12 - bark
07:15 - okay and I will simply print
07:19 - marking and I will declare one more
07:24 - method
07:26 - work
07:27 - okay
07:29 - and inside this I will write
07:33 - super
07:34 - Dot
07:37 - okay and now after this web method is
07:42 - done I will write
07:46 - bark
07:49 - okay so wait a second let me
07:54 - write this inside this
07:58 - okay now it's okay uh and we have
08:01 - declared one dog's class which is which
08:05 - extends the animal class and inside this
08:07 - we have written void eat and so this is
08:09 - the example of the method overriding as
08:11 - we have to discussed in our previous
08:12 - videos also so this it method will print
08:17 - dog is eating and this bark method will
08:19 - print barking uh now one more method is
08:22 - there name as work which is uh calling
08:26 - to methods okay super dot eat and now
08:29 - you will see
08:30 - what you what you guys thinking what
08:33 - should be printed over here why why not
08:35 - eat eat whether it is painting dog dog
08:37 - is eating or the eating
08:39 - you will see uh let me just comment this
08:42 - out and I mean next line I will write
08:45 - obj1 dot work
08:49 - and now if sorry I open it in debug mode
08:54 - wait wait wait wait
08:57 - now it's okay huh yes
09:00 - here you can see eating and barking is
09:01 - getting written on the console why so
09:03 - because when the call is at line number
09:06 - 21 super dot it will call the
09:08 - immediate parent class okay and each
09:11 - method we have declared in the parent
09:12 - class uh it is printing eating and
09:15 - that's why eating is getting printed on
09:17 - the console and when when we call Bark
09:19 - it's just simply called the method which
09:22 - is in inside the animal classic redox
09:24 - class itself okay that is the child
09:26 - class and which is printing barking okay
09:28 - so this is a this is the one use case of
09:31 - the super keyword uh to call the
09:34 - immediate parent class method okay now
09:37 - we will see uh how to call the immediate
09:39 - parent class Constructor invoke no call
09:43 - we will invoke okay so in this example
09:47 - itself I will do some changes so that
09:50 - you guys can understand
09:52 - it clear okay you know what let me
09:57 - comment this out
09:59 - okay and here
10:01 - I will come in this also okay now inside
10:06 - this uh parent class I will declare the
10:10 - Constructor for this class okay animals
10:13 - this is the Constructor
10:15 - and this Constructor is simply printing
10:22 - animals is
10:26 - create it okay and now inside this child
10:31 - class
10:32 - we'll write
10:35 - the Constructor for this class
10:39 - wait a second it's dogs not dog and
10:43 - inside this we'll write super
10:47 - and and again one print statement so
10:50 - that you guys can understand the code
10:53 - flow is going dog is created
11:00 - okay now if I comment this out and I
11:04 - will simply run this because here you
11:06 - can see I have not uh use that object
11:08 - and called any method and still now
11:11 - something is getting built on the
11:13 - console that that is because when as we
11:15 - have discussed in our Constructor video
11:17 - The Constructor will get uh called
11:19 - automatically whenever the object of
11:21 - that class is created okay so here we
11:22 - are creating the object of the class so
11:24 - that Constructor will get called
11:25 - automatically okay so what is happening
11:28 - over here uh in the line number 37
11:30 - whenever we create a object of that
11:31 - class obj1 the call is passed to this
11:35 - line number uh 28 okay now this line
11:38 - number 28 is executed November 29 we
11:41 - have written super okay and if you hover
11:44 - over this it says that animals class is
11:47 - there and this call is passed to this
11:50 - animals class Constructor and in this
11:53 - Constructor will get executed first okay
11:54 - and it is printing animals animals
11:57 - created so the first line is animal is
11:59 - created it is printed it and secondly it
12:02 - is printing uh dog is created that's why
12:05 - it it prints dog is created okay one
12:07 - more thing is there uh if you don't if
12:09 - you don't write this uh
12:11 - this super at line number 29 it
12:16 - that again it is writing animals is
12:18 - created why so because whenever you
12:21 - created whenever you create the child
12:23 - class object and if that child class is
12:27 - extending one parent class the then in
12:31 - that case whenever you create a create
12:33 - the child class uh Constructor it will
12:36 - automatically call The Constructor which
12:38 - is there inside the parent class okay so
12:41 - if I don't write this super super over
12:43 - here again it it will call the animals
12:47 - class Constructor if we are if you have
12:49 - declared this Constructor inside that
12:51 - class if you don't have declared it will
12:53 - not call
12:54 - okay so this is the idea behind the
12:57 - super keyword uh I hope you understand
13:00 - the super keyword in Java thank you for
13:02 - watching this video

Cleaned transcript:

hello and welcome back to the another video of the Java tutorial Series so today we will be covering super keyword in Java so the super keyword in Java is a reference variable to which it is used to refer the immediate parent class object whenever you create an instance of the subclass and instance of the parent class is created implicitly which is referred by the super reference keyword okay so it is nothing method it is super keyword is used to call the variables methods and the constructors of the super class okay so the user of this super cubes are super keyword is so this there are three uses it can be used to uh call the immediate parent class instance variable let me write it over here instance variable and it is super keyword is uh can be used to invoke the in immediate parent class method parent class method and again it is a super can be used to invoke the immediate parent class Constructor okay so these are the three uses of the super keyword we will see one by one each of them okay let me decrease the font size okay so first we will see how we can use the super keyword to refer the immediate parent class instance variable okay so let me get into my IDE and I will create one new Java sorry a new Java class I will name it as super keyword okay now in let me increase my font size and I will import my main method okay uh so let me take one example so that you guys can understand how we can use the parent class variable as in child's class okay uh let me declare my parent class over here I will write animal declare one class name as animal and I will write this okay now inside my animal class I am getting a difficult class from okay okay okay okay okay okay wait wait wait wait wait in our previous code we have used this animal class I guess that's why we are getting uh error over here okay okay let me change my class name so something else so that we can okay now now it's okay fine uh inside my animal class I will declare one string color and quit string col or color which is equals to White okay so this is my parent class and now I will create one class name as dog I guess you can take anyone any animal you want okay dog which is extending the enemy sorry animals class now inside this class I will write string color it is equals to black okay now uh wait a second I'm getting okay dog is also let me create it as stocks okay uh now I will write one method void print color which doesn't accept any parameters and inside this method I will write simply system.out.pentel in my color okay now and I will write one more Sprint statement and now this time I will write super dot color okay now you you will see what is different exactly difference between uh these two statements let me just create the object of the talks class Docs obj1 is equals to new dogs okay and inside using this object so I will obj1 Dot print color okay now if I run this you will see the difference between these two statements one is printing black and one is printing white why so because when we write system.out.print Ln color this this is referred as this line number six and this colors value of this color variable color variable is black and which is getting getting printed on the console and when we write super dot color this super this super keyword will call this call is getting called to the and parent class parent class is here class animals and whereas colors value is white okay so super dot color is white and color simply color when we write simply color the that means inside this class we have declared string color black so black is getting printed first and why it is getting basic printed second okay I hope you understood this concept of variables okay and now moving forward I will see how we can Super Key how we can use super keyword in class methods okay now uh I will make some changes in this code all itself okay now this time I don't need this string because we don't we and I will create void eight and inside this I will just simply write eating okay uh so this is the parent class method and now inside my dogs which is extending the animals class extends animal class uh I don't know I don't need this variable right now and I will declare this print I guess this also done need anymore okay now inside this I will write it and I will print okay it's eating such a random string okay and then right bark okay and I will simply print marking and I will declare one more method work okay and inside this I will write super Dot okay and now after this web method is done I will write bark okay so wait a second let me write this inside this okay now it's okay uh and we have declared one dog's class which is which extends the animal class and inside this we have written void eat and so this is the example of the method overriding as we have to discussed in our previous videos also so this it method will print dog is eating and this bark method will print barking uh now one more method is there name as work which is uh calling to methods okay super dot eat and now you will see what you what you guys thinking what should be printed over here why why not eat eat whether it is painting dog dog is eating or the eating you will see uh let me just comment this out and I mean next line I will write obj1 dot work and now if sorry I open it in debug mode wait wait wait wait now it's okay huh yes here you can see eating and barking is getting written on the console why so because when the call is at line number 21 super dot it will call the immediate parent class okay and each method we have declared in the parent class uh it is printing eating and that's why eating is getting printed on the console and when when we call Bark it's just simply called the method which is in inside the animal classic redox class itself okay that is the child class and which is printing barking okay so this is a this is the one use case of the super keyword uh to call the immediate parent class method okay now we will see uh how to call the immediate parent class Constructor invoke no call we will invoke okay so in this example itself I will do some changes so that you guys can understand it clear okay you know what let me comment this out okay and here I will come in this also okay now inside this uh parent class I will declare the Constructor for this class okay animals this is the Constructor and this Constructor is simply printing animals is create it okay and now inside this child class we'll write the Constructor for this class wait a second it's dogs not dog and inside this we'll write super and and again one print statement so that you guys can understand the code flow is going dog is created okay now if I comment this out and I will simply run this because here you can see I have not uh use that object and called any method and still now something is getting built on the console that that is because when as we have discussed in our Constructor video The Constructor will get uh called automatically whenever the object of that class is created okay so here we are creating the object of the class so that Constructor will get called automatically okay so what is happening over here uh in the line number 37 whenever we create a object of that class obj1 the call is passed to this line number uh 28 okay now this line number 28 is executed November 29 we have written super okay and if you hover over this it says that animals class is there and this call is passed to this animals class Constructor and in this Constructor will get executed first okay and it is printing animals animals created so the first line is animal is created it is printed it and secondly it is printing uh dog is created that's why it it prints dog is created okay one more thing is there uh if you don't if you don't write this uh this super at line number 29 it that again it is writing animals is created why so because whenever you created whenever you create the child class object and if that child class is extending one parent class the then in that case whenever you create a create the child class uh Constructor it will automatically call The Constructor which is there inside the parent class okay so if I don't write this super super over here again it it will call the animals class Constructor if we are if you have declared this Constructor inside that class if you don't have declared it will not call okay so this is the idea behind the super keyword uh I hope you understand the super keyword in Java thank you for watching this video
