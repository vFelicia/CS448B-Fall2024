With timestamps:

00:00 - in this video I'm going to show you how
00:01 - to use loops in Python and we will start
00:05 - with the while loop so first of all what
00:08 - is a loop so a loop allows us to repeat
00:13 - over some block of code again and again
00:17 - until and unless some condition is met
00:20 - now let's see how to use while loop in
00:23 - Python so let's say I'm going to declare
00:26 - a variable called I and I'm going to
00:28 - initialize it with the value 0 and to
00:32 - use a while loop you use this keyword
00:34 - and then you provide some condition so
00:37 - let's say I want to check whether the
00:40 - value inside the I variable is less than
00:45 - 5 or not okay and as in the case of if
00:50 - also we have seen we provide after the
00:52 - condition this colon symbol and then in
00:55 - the next line we write the code which we
00:59 - want to perform again and again until
01:03 - this while loop condition is true so
01:07 - let's say we want to just print
01:09 - something and we will print that the
01:12 - value of I is and then we will print the
01:17 - value of I like this also I want to
01:21 - change the value of I with every step so
01:24 - I will change the value of I using this
01:27 - expression which is I plus equals 1 this
01:32 - essentially mean that we want to just
01:35 - add 1 every time whenever this code is
01:40 - executed also we can say that we want to
01:43 - perform this operation I is equal to I
01:45 - plus 1 so this statement is similar to
01:50 - this statement let me provide some
01:51 - spaces here now in here also you will
01:54 - observe that I have provided some
01:56 - indentation here and indentation means
01:59 - that these two lines of code is the part
02:03 - of while loop ok so when I want to write
02:07 - something outside the while loop I will
02:09 - start from here with no indentation and
02:12 - let's
02:13 - I want to just print that we are
02:17 - finished and now let me run the code and
02:19 - let's see what's the result and you will
02:21 - see here first of all this string is
02:24 - executed which is the value of I is and
02:27 - then the value of I is printed which is
02:31 - 0 1 2 3 & 4 so as you can see here that
02:36 - we have initialized I is equal to 2 so
02:39 - the initial value of I is 0 now when we
02:42 - come to this code and when this
02:44 - condition is checked here the value of I
02:47 - is 0 which is less than 5 that means
02:51 - this condition is true and that means
02:54 - that these two lines of code which are
02:57 - under while loop will be executed so
03:00 - this line is executed where value of I
03:02 - is printed which is I is equal to 0 and
03:05 - this line of code increments the value
03:07 - of I by 1 so when this line of code is
03:10 - executed now the value of I becomes 1
03:14 - because previously it was 0 and once
03:17 - again this program flow goes to the
03:19 - starting to evaluate this condition and
03:22 - this time the value of I is 1 which is
03:25 - less than 5 and the condition is true
03:26 - once again and again this line is of
03:29 - code is executed and this line of code
03:32 - is executed and the value of I is
03:34 - incremented by 1 once again and the
03:37 - value of I becomes 2 here and this will
03:40 - happen again and again until the value
03:44 - of I becomes 5 and when the value of I
03:49 - becomes 5 this condition will be false
03:52 - and that means this code will not be
03:55 - executed this code will only be executed
03:59 - when the while loop condition is true
04:01 - and then at last this line of code is
04:04 - printed which is finished while loop now
04:08 - let me give you one more example of
04:10 - while loop and I will start from the top
04:12 - once again and this time I will declare
04:14 - a variable called num and I will
04:16 - initialize this value by 0 and also I
04:20 - will declare a variable called sum an
04:23 - initial value of sum is also 0 now here
04:26 - first
04:26 - all I will ask the user to enter a
04:29 - number so I'm going to just write and
04:31 - also I will ask the user if he or she
04:34 - wants to exit from the loop
04:38 - he can enter zeros and then in the next
04:41 - line I will start with my while loop and
04:43 - I will give the condition if the number
04:47 - so if the number I am going to write
04:49 - number is not equals to zero we want to
04:54 - perform some operations and what
04:57 - operation we want to perform we want to
04:59 - ask the user to provide any number and
05:02 - we will transfer this number into the
05:05 - variable num so here I will first of all
05:08 - write input and then I will ask the user
05:11 - to provide the number and when the user
05:13 - provides the number I want to convert it
05:15 - to a float value so I will just type
05:18 - cast this input to a float value and
05:21 - then this number will be assigned to the
05:25 - variable num now here don't forget to
05:28 - give the Kulin and in the next line what
05:30 - I will do is I will just use my some
05:33 - variable and I will just add the number
05:37 - value to the sum so I can just write sum
05:40 - is equal to sum plus num and this means
05:44 - that initially the value of sum will be
05:46 - zero and then this number will be added
05:49 - to the sum and until this loop runs we
05:53 - will get the sum of all the numbers
05:55 - which is entered by the user and at last
05:59 - I'm going to just print the value of sum
06:02 - so now what do you think will happen so
06:04 - in this condition we are evaluating that
06:07 - num should not be equal to zero and then
06:10 - only this code will be executed and we
06:14 - have provided the initial value of
06:16 - number is equal to zero so this
06:18 - condition will never be met and this
06:22 - statement will never be executed so we
06:26 - need to provide the initial value of num
06:29 - is equal to 1 and then whenever the user
06:32 - provides the value this one will be
06:36 - overwritten by the value which is
06:38 - provided by the you
06:40 - so this time when we run the code you
06:44 - can see first of all the program asked
06:46 - us to provide a number so I will provide
06:49 - 100 here and then press Enter
06:51 - and you can see the sum is printed which
06:55 - is equal to hundred once again we will
06:57 - provide some number and then press ENTER
06:59 - and now you can see sum is equal to 150
07:03 - once again we will provide one number
07:05 - and then press ENTER and now the sum is
07:09 - one zero five zero
07:11 - now let's say we provide a number is
07:13 - equal to zero and then press Enter
07:16 - you can see that our while loop is
07:18 - finished because zero is not equal to
07:21 - zero that means a false condition and
07:24 - then the flow of program comes out of
07:27 - the loop and then the other while loop
07:31 - will be executed which is this while
07:32 - loop and that's why this output is
07:35 - printed we can also write that sum is
07:39 - equal to so we know that this is the sum
07:42 - so sum equals and then after the comma
07:45 - we will print the value of sum and once
07:47 - again when we execute the code
07:51 - and once I want to exit from the code I
07:54 - can use zero to exit so zero and then
07:57 - press enter and I come out of this loop
08:00 - now Python also supports the else
08:02 - statement to be associated with the loop
08:06 - statement so what I mean by the else
08:09 - statement to be associated with the loop
08:12 - statement is that I can use after the
08:16 - end of this while loop condition I can
08:19 - use here else and after the Kulin I can
08:22 - provide some code which I want to
08:24 - execute once this loop is finished okay
08:28 - so I can write here that I want to print
08:31 - for example finished sum so let me run
08:35 - the code once again and I will quickly
08:38 - provide some numbers here and which will
08:41 - provide the sum and when I provide a
08:44 - zero here then we come out of the loop
08:47 - and you can see this finished some
08:49 - string is printed using this else so
08:52 - once your program comes out of the loop
08:54 - this else statement will be executed
08:57 - similarly we can go down and here also
09:00 - instead of writing this finished while
09:02 - loop we can also give else statement
09:05 - here so I'm going to just write else and
09:07 - after the colon here I need to provide
09:10 - the indentation so for space indentation
09:14 - one two three four and everything will
09:17 - be okay and once I run the code and
09:20 - first of all I will provide zero here to
09:22 - see if this is executed and you can see
09:25 - this else condition is called once your
09:29 - while loop is finished now also you can
09:32 - provide some condition here which is
09:35 - always true so for example I can write
09:37 - through here and this means that while
09:40 - loop evaluates to true every time and
09:44 - this means that this statement will be
09:47 - executed forever
09:49 - so this is also possible but you need to
09:51 - think carefully what do you want to do
09:54 - do you want to execute this code
09:57 - infinitely or do you want at some time
10:00 - that this condition will be false so
10:02 - this is how you can use while loops
10:05 - in Python how to use for loops in Python
10:08 - so first of all what are for loops so a
10:12 - for loop is used to iterate over a
10:15 - sequence and that sequence can be a list
10:19 - or a tuple or a dictionary or a set or a
10:23 - string so for that I'm going to declare
10:26 - some variables and the first variable is
10:29 - a which is a list second variable is B
10:32 - which is a couple third is C which is a
10:35 - set fourth is a string and fifth
10:39 - variable is e which is a dictionary now
10:42 - before seeing the syntax of for loop I'm
10:45 - going to show you how to use in operator
10:48 - in Python because it's used in for loop
10:51 - so I'm going to first of all use print
10:55 - and then I'm going to use 0 and then use
11:00 - in operator and then I'm going to use
11:02 - this first variable which is a which is
11:05 - a list right and let's see what happens
11:08 - when I try to run this code so it prints
11:11 - true so in operator will give you true
11:14 - or false depending upon whether this
11:18 - value is present in your sequence or not
11:21 - so for example when I write hundred here
11:24 - which is not present in the list it's
11:26 - going to return us false so this you can
11:28 - use with the tuple also let me just use
11:32 - it with tuple and let's use one here and
11:36 - I'm going to run the program it prints
11:39 - true
11:39 - once again
11:42 - also we can use in operator with strings
11:46 - so I can write D here but for that I
11:49 - need to convert this one into a string
11:52 - so now when I run the code it will give
11:55 - me true now let's see how to use a for a
11:58 - loop in Python so for loop as I said we
12:02 - can use with some sequence so let's use
12:05 - it with a which is a list so I can write
12:09 - X in E and E is a list in this case and
12:14 - then I can just print the value of x and
12:18 - let's see what happens first of all when
12:21 - we just write this kind of a for loop so
12:25 - we are going to run the program
12:26 - and what it does is it prints the values
12:29 - from 0 to 5 which is the element present
12:33 - inside the list so for loop is going to
12:37 - iterate over your list one by one and
12:40 - this in operator is going to check
12:42 - whether this value is there in your
12:45 - sequence or not in this case in our list
12:48 - or not so first of all when for loop
12:50 - start it will transfer the first value
12:52 - which is 0 into X and then it checks
12:56 - whether X is in this list a or not and
12:59 - then it's going to print the value of x
13:02 - which is 0 and once again programs
13:04 - sequence goes here and once again the
13:07 - next value is transferred to X which is
13:09 - 1 and once again this condition is
13:12 - validated if one is in this list a or
13:15 - not and then the value of x is printed
13:18 - which is 1 and this iteration goes on
13:20 - and on until 5 is reached which is the
13:24 - last value in the list so 5 is printed
13:26 - and after that there is nothing inside X
13:29 - and then the program flow comes out of
13:31 - this loop you can also use this for loop
13:34 - with the tupple also so let's try it
13:36 - with tuples and let's see what happens
13:38 - it's going to print the same values also
13:41 - with the set let's see what happens so
13:45 - I'm going to run the program once again
13:47 - and it prints 0 to 5 once again because
13:49 - these are the content of the set all so
13:52 - once again let's try to use this for
13:56 - loop with the string and let's see what
13:58 - happens and it's going to print out the
14:01 - content of this string which is 0 1 2 3
14:04 - 4 5 and it prints them one by one
14:08 - now with the dictionary we use this for
14:11 - loop in a little bit different way so
14:14 - for example I will write the variable
14:16 - name which is a dictionary and then
14:18 - let's say I want to just print all the
14:21 - keys inside this dictionary then I can
14:24 - write e dot keys and then we have all
14:28 - the keys using this function and when I
14:30 - run the code it's going to print all the
14:32 - keys inside your dictionary also when
14:36 - you use the function called dot values
14:39 - it's going to print out all the values
14:42 - inside your dictionary you can see max
14:44 - and the age 20 now let's say you want to
14:47 - print out all the key value pairs which
14:50 - are there in your dictionary you can use
14:53 - a function called items and this is
14:56 - going to give you keys and values right
14:58 - so I can just write key comma value here
15:03 - and then I can print the value of key
15:05 - first of all key and let's provide some
15:08 - space here and then let's print out the
15:11 - variable value here okay
15:14 - and when I run the code it's going to
15:16 - give you first of all key and then the
15:19 - value once again key and then the value
15:22 - so in order to print out the keys and
15:24 - values from a dictionary you can use
15:27 - this kind of notation now you can also
15:29 - use a function called range so let me
15:31 - show you how to use this function which
15:33 - is range which returns us the values
15:37 - starting from 0 so there is a function
15:39 - called range here and in here you can
15:43 - provide a number and this range is going
15:46 - to return the number starting from 0 to
15:50 - 5 so whatever number you write here the
15:52 - range array will be returned from 0
15:54 - until that number except whatever number
15:58 - you write here ok so let me just try to
16:01 - print out the values which is there in
16:03 - the X and when I try to print this it's
16:07 - going to return me from 0
16:09 - - five and you can see here six is not
16:11 - printed because the range will give us
16:14 - the value except that value which you
16:17 - write here you can also provide the
16:19 - start value here so let's say I want to
16:20 - start from two and I want to go until
16:23 - five I can write something like this and
16:26 - now you can see now it start printing
16:28 - from two to five also you can give a
16:31 - third parameter here which is a step
16:34 - parameter so I can give three here for
16:36 - example and let's say I want to write
16:39 - thirty here and let's run the code and
16:42 - now what is going to return is it starts
16:46 - from two because we have given the start
16:49 - value to here and it's going to go until
16:52 - twenty nine because we have given 30
16:54 - value here right and this is the step so
16:58 - every third value will be printed after
17:00 - two here so five will be printed then
17:04 - eight then 11 14 17 20 23 26 and 29
17:09 - every third value right if you write
17:12 - here
17:12 - - then we will increment in the step of
17:16 - - so this is how you can use range
17:18 - function with your for loop also as I
17:22 - said in the last video you can use else
17:24 - statement with your loops so I can also
17:28 - write else here and then after the : in
17:32 - the next line I can print something or I
17:35 - can execute some statement so for now I
17:38 - will just print finished and then I'm
17:42 - going to run the code and once the loop
17:45 - is finished you can see this else
17:46 - statement is executed which prints
17:49 - finished so else statement will be
17:52 - executed once your for loop is finished
17:54 - so in this way you can use for loops in
17:57 - Python how you can use break and
17:59 - continue keywords with your Python loops
18:02 - so to start with I have here two loops
18:05 - one is a for loop and other is a while
18:08 - loop now this for loop takes a list and
18:11 - then print every element out of this
18:14 - list using this print function in a
18:17 - similar way while loop evaluates the
18:20 - value of I if it's less
18:23 - than five then it's going to print the
18:25 - value of I and then increment the value
18:27 - of I by one now this is all normal and
18:31 - we have already seen this kind of code
18:33 - now you can use a break keyword with
18:37 - your loops in order to terminate the
18:40 - execution of loop immediately so let's
18:43 - see how we can use break keyword first
18:46 - and then we will see how to use continue
18:48 - keyword so here I'm going to give a
18:51 - condition inside my for loop and I'm
18:54 - going to just evaluate whether X is
18:56 - equal to 3 or not and if X is equal to 3
19:01 - I'm going to use this break keyword in a
19:05 - same way I'm going to use the safe
19:07 - condition inside my while loop also but
19:10 - instead this time I'm going to evaluate
19:12 - I is equal to 3 and F I is equal to 3
19:15 - then I'm going to use this break inside
19:18 - this if condition so let's run the code
19:20 - and let's see what happens and you can
19:23 - see in the for loop it has only printed
19:25 - 0 1 2 even though this for loop is
19:29 - supposed to print from 0 to 5 it has
19:32 - printed until 2 from 0 because as soon
19:37 - as this x value becomes 3 and we call
19:41 - break here the loop is terminated
19:44 - immediately and our program will come
19:47 - out of the loop immediately as soon as
19:49 - this break keyword is called
19:51 - in the case of this while loop also as
19:54 - soon as this I value becomes 3 we are
19:57 - calling the break keyword and as soon as
20:00 - this break keyword is called or loop is
20:03 - broken and the execution of code will
20:07 - come out of this loop so until 2
20:10 - everything was ok but as soon as the
20:13 - value becomes 3 this break is called
20:16 - and then we come out of the loop let me
20:19 - just print a line here in order to
20:23 - separate these two loops so we know that
20:27 - from where 1 is starting right so I'm
20:31 - going to once again run the code and you
20:33 - can see for loop prints from 0 to 2 and
20:35 - also while loop prints
20:37 - from zero to two if you change the value
20:40 - here for example here you want to
20:42 - evaluate X is equal to two or not and
20:45 - here you want to evaluate if X is equal
20:48 - to four or not and then you break out of
20:51 - the loop and once again when I run the
20:53 - code you can see the for loop runs only
20:56 - two iteration four zero and one and as
21:00 - soon as the value of X becomes two we
21:03 - call the break keyword and we come out
21:06 - of this loop and in the case of while
21:09 - loop as soon as this value of I becomes
21:11 - four we come out of the loop so the
21:15 - value from zero to three is printed now
21:18 - let's see how we can use a continue
21:20 - keyword instead of this break keyword so
21:23 - instead of this break keyword I will use
21:25 - a keyword called continue here and also
21:29 - in the while loop also I'm going to use
21:31 - this keyword called continue and I'm
21:34 - going to run the program and let's see
21:35 - what happens so now when you see here so
21:40 - you can see here for loop starts from
21:41 - printing zero one and as soon as the
21:45 - value of x becomes two this condition is
21:48 - met and this continue is called and as
21:52 - soon as this continue keyword is called
21:54 - everything whatever code comes after
21:58 - this continue keyword will be skipped
22:01 - and your program execution goes once
22:03 - again to a for loop for the next value
22:07 - so you can see in case where X is equal
22:11 - to two and continuing is called this
22:14 - statement is not executed because as
22:18 - soon as we execute continue in our loop
22:22 - then that iteration is skipped and all
22:25 - the code after the continue will not be
22:29 - executed okay so we go to the next
22:32 - iteration so that's why two is not
22:36 - printed because this was kept in case of
22:39 - two and then directly three is printed
22:41 - and then four and five is printed in
22:44 - case of while loop also as soon as the
22:47 - value of I becomes four you can see
22:51 - for is not printed here you can also
22:54 - change this value to two and then I'm
22:57 - going to run the program once again and
22:59 - you can see while loop prints zero one
23:02 - and why it prints zero and one so
23:04 - because as soon as the value of I
23:07 - becomes to this continue keyword is
23:10 - called and after that this iteration is
23:13 - skipped and also because this iteration
23:16 - is skipped these two lines of code are
23:19 - not executed and because this line of
23:23 - code is not executed that's why the
23:25 - value of I is not incremented and the
23:29 - value of I always remains too and that's
23:32 - why this becomes infinite loop right so
23:36 - instead of increment the value of I at
23:38 - the last line we can increment the value
23:41 - of I just after this condition check
23:45 - whether I is less than five or not and
23:48 - then we run the code now you can see it
23:51 - prints one three four and five so now
23:56 - what's happening here is initially the
23:59 - value of I is equal to zero and this
24:01 - condition is evaluated and then we first
24:05 - increment the value by one and that's
24:08 - why it starts with the printing of one
24:12 - by using this print function and as soon
24:14 - as I is equal to two this continue is
24:17 - called and that's why here too is not
24:20 - printed because as soon as the value of
24:23 - I becomes two this continue is called
24:25 - and every code or every statement after
24:29 - the continue will be skipped for that
24:32 - iteration that's why two is not printed
24:35 - here so in this way you can use break
24:37 - and continue keywords with loop I hope
24:41 - you have enjoyed this video and I will
24:42 - see you in the next video

Cleaned transcript:

in this video I'm going to show you how to use loops in Python and we will start with the while loop so first of all what is a loop so a loop allows us to repeat over some block of code again and again until and unless some condition is met now let's see how to use while loop in Python so let's say I'm going to declare a variable called I and I'm going to initialize it with the value 0 and to use a while loop you use this keyword and then you provide some condition so let's say I want to check whether the value inside the I variable is less than 5 or not okay and as in the case of if also we have seen we provide after the condition this colon symbol and then in the next line we write the code which we want to perform again and again until this while loop condition is true so let's say we want to just print something and we will print that the value of I is and then we will print the value of I like this also I want to change the value of I with every step so I will change the value of I using this expression which is I plus equals 1 this essentially mean that we want to just add 1 every time whenever this code is executed also we can say that we want to perform this operation I is equal to I plus 1 so this statement is similar to this statement let me provide some spaces here now in here also you will observe that I have provided some indentation here and indentation means that these two lines of code is the part of while loop ok so when I want to write something outside the while loop I will start from here with no indentation and let's I want to just print that we are finished and now let me run the code and let's see what's the result and you will see here first of all this string is executed which is the value of I is and then the value of I is printed which is 0 1 2 3 & 4 so as you can see here that we have initialized I is equal to 2 so the initial value of I is 0 now when we come to this code and when this condition is checked here the value of I is 0 which is less than 5 that means this condition is true and that means that these two lines of code which are under while loop will be executed so this line is executed where value of I is printed which is I is equal to 0 and this line of code increments the value of I by 1 so when this line of code is executed now the value of I becomes 1 because previously it was 0 and once again this program flow goes to the starting to evaluate this condition and this time the value of I is 1 which is less than 5 and the condition is true once again and again this line is of code is executed and this line of code is executed and the value of I is incremented by 1 once again and the value of I becomes 2 here and this will happen again and again until the value of I becomes 5 and when the value of I becomes 5 this condition will be false and that means this code will not be executed this code will only be executed when the while loop condition is true and then at last this line of code is printed which is finished while loop now let me give you one more example of while loop and I will start from the top once again and this time I will declare a variable called num and I will initialize this value by 0 and also I will declare a variable called sum an initial value of sum is also 0 now here first all I will ask the user to enter a number so I'm going to just write and also I will ask the user if he or she wants to exit from the loop he can enter zeros and then in the next line I will start with my while loop and I will give the condition if the number so if the number I am going to write number is not equals to zero we want to perform some operations and what operation we want to perform we want to ask the user to provide any number and we will transfer this number into the variable num so here I will first of all write input and then I will ask the user to provide the number and when the user provides the number I want to convert it to a float value so I will just type cast this input to a float value and then this number will be assigned to the variable num now here don't forget to give the Kulin and in the next line what I will do is I will just use my some variable and I will just add the number value to the sum so I can just write sum is equal to sum plus num and this means that initially the value of sum will be zero and then this number will be added to the sum and until this loop runs we will get the sum of all the numbers which is entered by the user and at last I'm going to just print the value of sum so now what do you think will happen so in this condition we are evaluating that num should not be equal to zero and then only this code will be executed and we have provided the initial value of number is equal to zero so this condition will never be met and this statement will never be executed so we need to provide the initial value of num is equal to 1 and then whenever the user provides the value this one will be overwritten by the value which is provided by the you so this time when we run the code you can see first of all the program asked us to provide a number so I will provide 100 here and then press Enter and you can see the sum is printed which is equal to hundred once again we will provide some number and then press ENTER and now you can see sum is equal to 150 once again we will provide one number and then press ENTER and now the sum is one zero five zero now let's say we provide a number is equal to zero and then press Enter you can see that our while loop is finished because zero is not equal to zero that means a false condition and then the flow of program comes out of the loop and then the other while loop will be executed which is this while loop and that's why this output is printed we can also write that sum is equal to so we know that this is the sum so sum equals and then after the comma we will print the value of sum and once again when we execute the code and once I want to exit from the code I can use zero to exit so zero and then press enter and I come out of this loop now Python also supports the else statement to be associated with the loop statement so what I mean by the else statement to be associated with the loop statement is that I can use after the end of this while loop condition I can use here else and after the Kulin I can provide some code which I want to execute once this loop is finished okay so I can write here that I want to print for example finished sum so let me run the code once again and I will quickly provide some numbers here and which will provide the sum and when I provide a zero here then we come out of the loop and you can see this finished some string is printed using this else so once your program comes out of the loop this else statement will be executed similarly we can go down and here also instead of writing this finished while loop we can also give else statement here so I'm going to just write else and after the colon here I need to provide the indentation so for space indentation one two three four and everything will be okay and once I run the code and first of all I will provide zero here to see if this is executed and you can see this else condition is called once your while loop is finished now also you can provide some condition here which is always true so for example I can write through here and this means that while loop evaluates to true every time and this means that this statement will be executed forever so this is also possible but you need to think carefully what do you want to do do you want to execute this code infinitely or do you want at some time that this condition will be false so this is how you can use while loops in Python how to use for loops in Python so first of all what are for loops so a for loop is used to iterate over a sequence and that sequence can be a list or a tuple or a dictionary or a set or a string so for that I'm going to declare some variables and the first variable is a which is a list second variable is B which is a couple third is C which is a set fourth is a string and fifth variable is e which is a dictionary now before seeing the syntax of for loop I'm going to show you how to use in operator in Python because it's used in for loop so I'm going to first of all use print and then I'm going to use 0 and then use in operator and then I'm going to use this first variable which is a which is a list right and let's see what happens when I try to run this code so it prints true so in operator will give you true or false depending upon whether this value is present in your sequence or not so for example when I write hundred here which is not present in the list it's going to return us false so this you can use with the tuple also let me just use it with tuple and let's use one here and I'm going to run the program it prints true once again also we can use in operator with strings so I can write D here but for that I need to convert this one into a string so now when I run the code it will give me true now let's see how to use a for a loop in Python so for loop as I said we can use with some sequence so let's use it with a which is a list so I can write X in E and E is a list in this case and then I can just print the value of x and let's see what happens first of all when we just write this kind of a for loop so we are going to run the program and what it does is it prints the values from 0 to 5 which is the element present inside the list so for loop is going to iterate over your list one by one and this in operator is going to check whether this value is there in your sequence or not in this case in our list or not so first of all when for loop start it will transfer the first value which is 0 into X and then it checks whether X is in this list a or not and then it's going to print the value of x which is 0 and once again programs sequence goes here and once again the next value is transferred to X which is 1 and once again this condition is validated if one is in this list a or not and then the value of x is printed which is 1 and this iteration goes on and on until 5 is reached which is the last value in the list so 5 is printed and after that there is nothing inside X and then the program flow comes out of this loop you can also use this for loop with the tupple also so let's try it with tuples and let's see what happens it's going to print the same values also with the set let's see what happens so I'm going to run the program once again and it prints 0 to 5 once again because these are the content of the set all so once again let's try to use this for loop with the string and let's see what happens and it's going to print out the content of this string which is 0 1 2 3 4 5 and it prints them one by one now with the dictionary we use this for loop in a little bit different way so for example I will write the variable name which is a dictionary and then let's say I want to just print all the keys inside this dictionary then I can write e dot keys and then we have all the keys using this function and when I run the code it's going to print all the keys inside your dictionary also when you use the function called dot values it's going to print out all the values inside your dictionary you can see max and the age 20 now let's say you want to print out all the key value pairs which are there in your dictionary you can use a function called items and this is going to give you keys and values right so I can just write key comma value here and then I can print the value of key first of all key and let's provide some space here and then let's print out the variable value here okay and when I run the code it's going to give you first of all key and then the value once again key and then the value so in order to print out the keys and values from a dictionary you can use this kind of notation now you can also use a function called range so let me show you how to use this function which is range which returns us the values starting from 0 so there is a function called range here and in here you can provide a number and this range is going to return the number starting from 0 to 5 so whatever number you write here the range array will be returned from 0 until that number except whatever number you write here ok so let me just try to print out the values which is there in the X and when I try to print this it's going to return me from 0 five and you can see here six is not printed because the range will give us the value except that value which you write here you can also provide the start value here so let's say I want to start from two and I want to go until five I can write something like this and now you can see now it start printing from two to five also you can give a third parameter here which is a step parameter so I can give three here for example and let's say I want to write thirty here and let's run the code and now what is going to return is it starts from two because we have given the start value to here and it's going to go until twenty nine because we have given 30 value here right and this is the step so every third value will be printed after two here so five will be printed then eight then 11 14 17 20 23 26 and 29 every third value right if you write here then we will increment in the step of so this is how you can use range function with your for loop also as I said in the last video you can use else statement with your loops so I can also write else here and then after the in the next line I can print something or I can execute some statement so for now I will just print finished and then I'm going to run the code and once the loop is finished you can see this else statement is executed which prints finished so else statement will be executed once your for loop is finished so in this way you can use for loops in Python how you can use break and continue keywords with your Python loops so to start with I have here two loops one is a for loop and other is a while loop now this for loop takes a list and then print every element out of this list using this print function in a similar way while loop evaluates the value of I if it's less than five then it's going to print the value of I and then increment the value of I by one now this is all normal and we have already seen this kind of code now you can use a break keyword with your loops in order to terminate the execution of loop immediately so let's see how we can use break keyword first and then we will see how to use continue keyword so here I'm going to give a condition inside my for loop and I'm going to just evaluate whether X is equal to 3 or not and if X is equal to 3 I'm going to use this break keyword in a same way I'm going to use the safe condition inside my while loop also but instead this time I'm going to evaluate I is equal to 3 and F I is equal to 3 then I'm going to use this break inside this if condition so let's run the code and let's see what happens and you can see in the for loop it has only printed 0 1 2 even though this for loop is supposed to print from 0 to 5 it has printed until 2 from 0 because as soon as this x value becomes 3 and we call break here the loop is terminated immediately and our program will come out of the loop immediately as soon as this break keyword is called in the case of this while loop also as soon as this I value becomes 3 we are calling the break keyword and as soon as this break keyword is called or loop is broken and the execution of code will come out of this loop so until 2 everything was ok but as soon as the value becomes 3 this break is called and then we come out of the loop let me just print a line here in order to separate these two loops so we know that from where 1 is starting right so I'm going to once again run the code and you can see for loop prints from 0 to 2 and also while loop prints from zero to two if you change the value here for example here you want to evaluate X is equal to two or not and here you want to evaluate if X is equal to four or not and then you break out of the loop and once again when I run the code you can see the for loop runs only two iteration four zero and one and as soon as the value of X becomes two we call the break keyword and we come out of this loop and in the case of while loop as soon as this value of I becomes four we come out of the loop so the value from zero to three is printed now let's see how we can use a continue keyword instead of this break keyword so instead of this break keyword I will use a keyword called continue here and also in the while loop also I'm going to use this keyword called continue and I'm going to run the program and let's see what happens so now when you see here so you can see here for loop starts from printing zero one and as soon as the value of x becomes two this condition is met and this continue is called and as soon as this continue keyword is called everything whatever code comes after this continue keyword will be skipped and your program execution goes once again to a for loop for the next value so you can see in case where X is equal to two and continuing is called this statement is not executed because as soon as we execute continue in our loop then that iteration is skipped and all the code after the continue will not be executed okay so we go to the next iteration so that's why two is not printed because this was kept in case of two and then directly three is printed and then four and five is printed in case of while loop also as soon as the value of I becomes four you can see for is not printed here you can also change this value to two and then I'm going to run the program once again and you can see while loop prints zero one and why it prints zero and one so because as soon as the value of I becomes to this continue keyword is called and after that this iteration is skipped and also because this iteration is skipped these two lines of code are not executed and because this line of code is not executed that's why the value of I is not incremented and the value of I always remains too and that's why this becomes infinite loop right so instead of increment the value of I at the last line we can increment the value of I just after this condition check whether I is less than five or not and then we run the code now you can see it prints one three four and five so now what's happening here is initially the value of I is equal to zero and this condition is evaluated and then we first increment the value by one and that's why it starts with the printing of one by using this print function and as soon as I is equal to two this continue is called and that's why here too is not printed because as soon as the value of I becomes two this continue is called and every code or every statement after the continue will be skipped for that iteration that's why two is not printed here so in this way you can use break and continue keywords with loop I hope you have enjoyed this video and I will see you in the next video
