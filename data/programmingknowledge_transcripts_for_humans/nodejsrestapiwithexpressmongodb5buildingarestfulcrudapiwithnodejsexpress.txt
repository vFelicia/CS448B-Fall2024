With timestamps:

00:00 - hi in this video we are going to learn
00:03 - how to build a REST API so before
00:06 - building the rest up here we have to
00:08 - download one or two teams that is first
00:11 - we have to download the postman postman
00:15 - you can download it from here and the
00:16 - second one is the come first
00:18 - when will they become first from here
00:20 - choose the platform that you have and
00:23 - the words women that is the stable one
00:25 - and after that we can go to our project
00:29 - in here that project is already being
00:33 - given and I have only added one property
00:39 - at this password and it will be there in
00:41 - a description the triple link of this
00:46 - project so now we are going to build the
00:49 - rest appear so before order believing
00:51 - elastic here and we are going to I'm
00:53 - going to so how can we how does it look
00:58 - like so let's say app dog cat request
01:02 - that we are given and the part and there
01:05 - is one callback function in which two
01:07 - parameters are there it is request and
01:09 - response in this we can responds back
01:13 - with response dot strand let's say
01:16 - testing and if we write testing here and
01:21 - after their thing we are going to run
01:22 - this file and then again we go to our
01:26 - browser and let's see a local most
01:28 - people and we can do it testing this
01:30 - year
01:31 - so let's now begin to build our
01:36 - recipient so before building the rest
01:39 - API in our teammate or chase we are
01:43 - going to export this line so for
01:48 - exporting this line we are going to use
01:50 - more module module sorry more to dot
01:57 - exports equal to user and after that we
02:04 - are going to require it from here
02:07 - so for requiring it from the TB file
02:12 - there
02:13 - use user and acquire it from the utils
02:21 - utils for mutants folder and MDE
02:24 - now we have required a user now if we
02:29 - are going to like create a user here so
02:34 - for creating a user we are going to use
02:36 - a force request so we are going to use
02:39 - post request in which we are going to
02:42 - send
02:42 - [Music]
02:43 - get the right apart as a slash users and
02:49 - we are going to use a synchronous
02:52 - process here so we are going to use
02:54 - async await methods so a sync await the
03:02 - async request response and what the data
03:13 - can be get from here so let's say
03:15 - console it from console dot log request
03:22 - dot party so now I have run the file but
03:33 - how can we see the request here so
03:36 - that's why we are going to use the
03:38 - postman a postman is like a browser
03:41 - request Center or anything that the
03:45 - project can do for sending any requested
03:48 - a server it can do the same thing
03:50 - firstly so let's say we are going to
03:54 - create a new collection so let's say for
03:57 - new collection let's say a mango
04:02 - Mongoose demo and in here we are going
04:07 - to create a new get request or a post
04:13 - request so add a request here let's say
04:16 - for create user so in here it's a
04:22 - I am going to close it down all the
04:25 - requests over here these are all the
04:28 - previous ones that I have used for
04:30 - another project so in here we are going
04:36 - through so now it's supposed request so
04:42 - we are going to say in the post and it's
04:45 - it's going to be a localhost 3,000 users
04:49 - and now we are going to use a body I
04:54 - mean here waving huge select row and we
04:58 - are going to send back back gate as a
05:01 - JSON file so in here if we send like
05:05 - name is like Shawn tow and AC is 21 now
05:18 - if we send it back to the chain here and
05:24 - now if we go to our here you can see
05:31 - that undefined is getting console.log
05:34 - out here so the problem is here that the
05:38 - request dot party that we get is not
05:42 - specified of which type so here we are
05:45 - going to use a new middleware AB dot use
05:49 - express dot JSON and what it will do
05:54 - that it will parse the request body that
05:59 - isn't a zone type and it will not pass
06:02 - any other type of request so now if we
06:07 - send back again the same request we can
06:12 - see the console log output so now if we
06:17 - again send it back now you will see that
06:22 - it will send the request at his name
06:25 - John Doe and has treatment now
06:27 - now we are going to build a API so we
06:34 - are going to use async
06:35 - wait a synchronous process so it's a
06:40 - very very useful purse very useful tool
06:43 - that JavaScript gives us
06:46 - so here the user for saving a user we
06:52 - are going to use a weight function which
06:54 - is a synchronous process so user dot
06:58 - save because for same we can use user
07:02 - dot save and in here we are going to
07:05 - just sing back a request dot party now
07:11 - if there is an error so for catching an
07:13 - error we are going to use try and catch
07:17 - block here so for an error it will use
07:21 - like this so we are going to use a try
07:27 - block here and if any error then
07:29 - responds back with ten status code of
07:34 - 400 and send back with nothing or a dot
07:39 - message and if user is being saved
07:43 - successfully we are going to use your
07:46 - response or here we are going to use
07:50 - also something called Const because here
07:54 - we are going to create a new user so
07:56 - here we are going to use the Const user
08:03 - is equal to new user request dot party
08:14 - and here we are going to simply write
08:20 - user dot Save now it's being saved and
08:28 - in here we are going to response that
08:31 - with status code of 201 which is a code
08:35 - for creating any collection or a
08:39 - document so we are going to same back
08:42 - with a user so let's say if we save it
08:49 - now and if we again send back with the
08:55 - proper properties let's say name is
09:00 - given as is given we also have to write
09:06 - for email so let's say John ate Timur
09:11 - calm and again password and for fossil
09:19 - we can type like 1 2 3 and now if we
09:25 - same back here you will see that a new
09:31 - user is being created here now how can
09:35 - we see in the you in the MongoDB
09:38 - collection so for death for this we have
09:41 - we have also downloaded the MongoDB come
09:45 - first so in here we are going to just
09:49 - copy and paste the URL that is the
09:53 - connection URL connection string URL so
09:56 - let's say let's just copy and paste copy
09:59 - from here and paste it and paste it here
10:07 - so if we paste it here and now if we
10:11 - connect it we will see that the new user
10:16 - is being created in here if we put it a
10:20 - paste end users
10:25 - yeah you can see that a new user has
10:27 - been created now we can also see if
10:35 - there is an affair if there is any
10:38 - failure in creating a new user so let's
10:41 - say the password here is of length 3 and
10:47 - which is required like you can see that
10:50 - in the message it is written that
10:52 - visible radiation fell because the
10:54 - phosphor is shorter than the minimum
10:55 - length is a long it is fun
10:58 - so the new user will not be created and
11:00 - it will go to the catch block so now we
11:05 - are going to see how can we get all the
11:09 - users so for getting the users we are
11:11 - going to create the new part that is
11:14 - which is the same part but only the
11:16 - request is different it is great request
11:18 - now it will also take the request and
11:21 - response and in here we are going to use
11:25 - a trying catch block and try and catch
11:29 - look if let's say if there isn't any
11:34 - server side of header so we can use 500
11:39 - of a turn and send it back with nothing
11:44 - on it now we can use a wait here and the
11:49 - user dot we are going to find all the
11:56 - find all the users so for finding we can
11:58 - just find 0 to find and here we can pass
12:03 - any filter out but we can simply right
12:08 - here like give any an empty object now
12:15 - if it to give users back so for this we
12:20 - can get the users and if there is no
12:23 - users here like we know users are being
12:27 - there so we can use if no choices and it
12:30 - could return back from here we spawn
12:32 - stock caters for 404 and stand back with
12:38 - nothing on it and if there is if it is
12:41 - successful then we can stand status of
12:44 - 200 and stand back with youjizz so let's
12:50 - check it out if it is right or if there
12:54 - is any mistake in here so in here we are
12:58 - going to create a new request here so we
13:02 - can create it from add a request and
13:05 - from here like here we can I get
13:08 - features
13:10 - and second one would be with Mongoose
13:13 - table now first of all we are going to
13:18 - like create more usual see so let's say
13:21 - if it is running odd not fool there is
13:23 - some error here I would oh we are going
13:26 - to use a weight so it is compulsory to
13:29 - add a sink in the function below so now
13:33 - if we go to put our postman and create a
13:38 - new user let's say Jessica and here like
13:46 - a string colonialist right let's say
13:51 - Jessica let's say your j 1 2 3 is fixed
13:59 - now if we send the request of post we
14:06 - will see on user is being created here
14:08 - and will create a classic here you can
14:11 - see the new user is been created now in
14:14 - the gate users we are going to fetch all
14:17 - you just it has been created here so we
14:20 - are going to use localhost 3 following
14:22 - place moves that is the path and it's a
14:25 - gate request so now if we saying the
14:29 - request we can see that all the UF is
14:31 - being created here so now now we are
14:36 - going to see how can you fetch it how
14:39 - can you fetch only one users so it's a
14:44 - great request and it will also go to the
14:47 - users but but here the ID of the user
14:52 - can be your friend can be anything so
14:54 - here you can use : ID and here it's a
15:00 - Singh process also so we are going to a
15:03 - sink request response and if we and also
15:09 - it is if it is going to be in a try and
15:12 - catch block now if it is an F there is
15:15 - an error we can send the header back
15:18 - response dot sent like 500 on
15:24 - sorry response dot status 500 dots and
15:31 - he got message now how can we use the
15:40 - idea so first of all we are going to see
15:45 - what we can in two years so it's a
15:48 - parameter so it's a it's going to the
15:51 - request or parents here so now if we
15:58 - consolidate console.log what's in here
16:02 - console.log cutler the classic patterns
16:05 - and for right now we are going features
16:09 - to come in get out here and now if we
16:12 - save it and go to yeah go to over this
16:21 - clock and we same like we get it from
16:25 - here and stand back here and if we speed
16:34 - and if we go to our project we can see
16:41 - that it will give an object requested
16:44 - pattern it is the object so now we are
16:51 - going to use the triangular cache block
16:53 - let's go me uncomment it out and if we
16:57 - you know we are going to cost user find
17:02 - by ID because we are finding it by ID
17:05 - sorry
17:07 - oh wait and loser dot fine by ID and for
17:15 - finding by day we can just stand there
17:18 - keep the request of parents dot ID here
17:23 - and now you know if there is a user of
17:29 - the request then it will send back 200
17:35 - that is the okay from okay
17:37 - and if it is not if it is not we can
17:40 - check it from here like if not future
17:44 - you can return back like we did the same
17:48 - thing in here so it will return back
17:51 - with response orchestrators 404 and
17:56 - stand back it's nothing and if he is
18:00 - true and and we can send this pawn start
18:03 - status of 200 and stand back the user
18:12 - now if we save it and now we can go to
18:18 - our first name and if we again in doing
18:24 - this thing you can see the user is being
18:31 - called out and we can get the user now
18:36 - we are going to see something called for
18:38 - how can we do the update so for updating
18:41 - any user we can use update dot fetch
18:44 - request which is an application request
18:47 - and in here
18:49 - we are going to use also the slash users
18:51 - and also we are going to use the
18:53 - parameter here and it will be a sync
18:57 - function and request or response and now
19:03 - it all and for updating something we
19:07 - also need a body because the browser or
19:11 - the client will say anything that they
19:13 - want to so it will be resetting in the
19:17 - body part so here from here we are going
19:22 - to use the try and fetch block try and
19:27 - catch clock in memory if there is an
19:30 - error we can see response dot status of
19:35 - 500 thank eat dot message so now if we
19:44 - can also use call future because there
19:48 - is only one user object ID
19:51 - English cider we are going to use a
19:54 - lathe and here we are going to use user
19:57 - dot find by ID and we are going to use
20:01 - this once and find by ID and update so
20:05 - here first it will take the request dot
20:10 - params dot ID and next one it will take
20:19 - the update we are going to do so request
20:23 - dot party that's it and if there is user
20:30 - of death type if there is a user then it
20:33 - will return if sorry if it is no there
20:37 - is no user of it of it then it will with
20:40 - churn of returning back with you turned
20:43 - out response always status or photophone
20:47 - 8404 difficult there is no found if
20:49 - found response start stained if nothing
20:55 - and everything responds back with the
21:00 - new update really three stages of to
21:05 - over thought stain of user but it will
21:12 - not work properly because it will it
21:16 - will it will not check if there is
21:18 - anybody a sort or not so it is optional
21:21 - properties reformed it is it will give
21:26 - the new user and it will say to look
21:29 - true and it will check for validation
21:33 - for running validator we are going to
21:36 - use run validator in here which is look
21:42 - like this this one will run the new and
21:46 - run validator and now if we save it and
21:51 - we can go to the postman I mean here we
21:58 - are going to create a new select new
22:00 - quiz that is
22:02 - and update user so we are going to
22:07 - update the user and we bring this thing
22:11 - to the moodini and now if we are going
22:14 - to fetch it here and localhost 3000 and
22:21 - we are going to use the this one this
22:27 - param and we are going to stand back
22:33 - with 40 and we are going to select that
22:36 - raw JSON and now let's say we are going
22:41 - to say update the ease of this user it
22:48 - will like 54 now if we send it back we
22:55 - can see that the user is being updated
22:59 - and as it has 34 and the critic very
23:02 - refreshed look here we can see that
23:05 - their eyes will suffer for now we are
23:09 - going to see the last one that is f dot
23:13 - till late how can we delete a user for
23:17 - deleting we can even spare your delete
23:19 - users small as ID and it will be a sync
23:25 - process and we are going to use request
23:29 - and response now we are going to use try
23:32 - and catch block here also and now we are
23:39 - going to see that if there is a user
23:42 - make this right then oh wait it will
23:47 - give the user wait user dot find by ID
23:55 - and delight and here we are going to
24:00 - faster fathoms of ID so the same thing
24:07 - that we have done in previous requested
24:10 - the if there is user then it is good and
24:14 - if it is not then we can send
24:16 - 404 messes so in here i really cannot
24:21 - forget france back with a message so now
24:27 - if we if we save it now if we see it and
24:39 - go to our postman and create an or let's
24:45 - say we are going to flag delayed here
24:48 - and we are going to delete this one and
24:52 - there is no but required here now if we
24:57 - send it we can see that you it will give
25:03 - the user and if we press it here we can
25:07 - see that the chontal user is being
25:11 - deleted so that's how the rest API works
25:16 - here so thank you

Cleaned transcript:

hi in this video we are going to learn how to build a REST API so before building the rest up here we have to download one or two teams that is first we have to download the postman postman you can download it from here and the second one is the come first when will they become first from here choose the platform that you have and the words women that is the stable one and after that we can go to our project in here that project is already being given and I have only added one property at this password and it will be there in a description the triple link of this project so now we are going to build the rest appear so before order believing elastic here and we are going to I'm going to so how can we how does it look like so let's say app dog cat request that we are given and the part and there is one callback function in which two parameters are there it is request and response in this we can responds back with response dot strand let's say testing and if we write testing here and after their thing we are going to run this file and then again we go to our browser and let's see a local most people and we can do it testing this year so let's now begin to build our recipient so before building the rest API in our teammate or chase we are going to export this line so for exporting this line we are going to use more module module sorry more to dot exports equal to user and after that we are going to require it from here so for requiring it from the TB file there use user and acquire it from the utils utils for mutants folder and MDE now we have required a user now if we are going to like create a user here so for creating a user we are going to use a force request so we are going to use post request in which we are going to send get the right apart as a slash users and we are going to use a synchronous process here so we are going to use async await methods so a sync await the async request response and what the data can be get from here so let's say console it from console dot log request dot party so now I have run the file but how can we see the request here so that's why we are going to use the postman a postman is like a browser request Center or anything that the project can do for sending any requested a server it can do the same thing firstly so let's say we are going to create a new collection so let's say for new collection let's say a mango Mongoose demo and in here we are going to create a new get request or a post request so add a request here let's say for create user so in here it's a I am going to close it down all the requests over here these are all the previous ones that I have used for another project so in here we are going through so now it's supposed request so we are going to say in the post and it's it's going to be a localhost 3,000 users and now we are going to use a body I mean here waving huge select row and we are going to send back back gate as a JSON file so in here if we send like name is like Shawn tow and AC is 21 now if we send it back to the chain here and now if we go to our here you can see that undefined is getting console.log out here so the problem is here that the request dot party that we get is not specified of which type so here we are going to use a new middleware AB dot use express dot JSON and what it will do that it will parse the request body that isn't a zone type and it will not pass any other type of request so now if we send back again the same request we can see the console log output so now if we again send it back now you will see that it will send the request at his name John Doe and has treatment now now we are going to build a API so we are going to use async wait a synchronous process so it's a very very useful purse very useful tool that JavaScript gives us so here the user for saving a user we are going to use a weight function which is a synchronous process so user dot save because for same we can use user dot save and in here we are going to just sing back a request dot party now if there is an error so for catching an error we are going to use try and catch block here so for an error it will use like this so we are going to use a try block here and if any error then responds back with ten status code of 400 and send back with nothing or a dot message and if user is being saved successfully we are going to use your response or here we are going to use also something called Const because here we are going to create a new user so here we are going to use the Const user is equal to new user request dot party and here we are going to simply write user dot Save now it's being saved and in here we are going to response that with status code of 201 which is a code for creating any collection or a document so we are going to same back with a user so let's say if we save it now and if we again send back with the proper properties let's say name is given as is given we also have to write for email so let's say John ate Timur calm and again password and for fossil we can type like 1 2 3 and now if we same back here you will see that a new user is being created here now how can we see in the you in the MongoDB collection so for death for this we have we have also downloaded the MongoDB come first so in here we are going to just copy and paste the URL that is the connection URL connection string URL so let's say let's just copy and paste copy from here and paste it and paste it here so if we paste it here and now if we connect it we will see that the new user is being created in here if we put it a paste end users yeah you can see that a new user has been created now we can also see if there is an affair if there is any failure in creating a new user so let's say the password here is of length 3 and which is required like you can see that in the message it is written that visible radiation fell because the phosphor is shorter than the minimum length is a long it is fun so the new user will not be created and it will go to the catch block so now we are going to see how can we get all the users so for getting the users we are going to create the new part that is which is the same part but only the request is different it is great request now it will also take the request and response and in here we are going to use a trying catch block and try and catch look if let's say if there isn't any server side of header so we can use 500 of a turn and send it back with nothing on it now we can use a wait here and the user dot we are going to find all the find all the users so for finding we can just find 0 to find and here we can pass any filter out but we can simply right here like give any an empty object now if it to give users back so for this we can get the users and if there is no users here like we know users are being there so we can use if no choices and it could return back from here we spawn stock caters for 404 and stand back with nothing on it and if there is if it is successful then we can stand status of 200 and stand back with youjizz so let's check it out if it is right or if there is any mistake in here so in here we are going to create a new request here so we can create it from add a request and from here like here we can I get features and second one would be with Mongoose table now first of all we are going to like create more usual see so let's say if it is running odd not fool there is some error here I would oh we are going to use a weight so it is compulsory to add a sink in the function below so now if we go to put our postman and create a new user let's say Jessica and here like a string colonialist right let's say Jessica let's say your j 1 2 3 is fixed now if we send the request of post we will see on user is being created here and will create a classic here you can see the new user is been created now in the gate users we are going to fetch all you just it has been created here so we are going to use localhost 3 following place moves that is the path and it's a gate request so now if we saying the request we can see that all the UF is being created here so now now we are going to see how can you fetch it how can you fetch only one users so it's a great request and it will also go to the users but but here the ID of the user can be your friend can be anything so here you can use ID and here it's a Singh process also so we are going to a sink request response and if we and also it is if it is going to be in a try and catch block now if it is an F there is an error we can send the header back response dot sent like 500 on sorry response dot status 500 dots and he got message now how can we use the idea so first of all we are going to see what we can in two years so it's a parameter so it's a it's going to the request or parents here so now if we consolidate console.log what's in here console.log cutler the classic patterns and for right now we are going features to come in get out here and now if we save it and go to yeah go to over this clock and we same like we get it from here and stand back here and if we speed and if we go to our project we can see that it will give an object requested pattern it is the object so now we are going to use the triangular cache block let's go me uncomment it out and if we you know we are going to cost user find by ID because we are finding it by ID sorry oh wait and loser dot fine by ID and for finding by day we can just stand there keep the request of parents dot ID here and now you know if there is a user of the request then it will send back 200 that is the okay from okay and if it is not if it is not we can check it from here like if not future you can return back like we did the same thing in here so it will return back with response orchestrators 404 and stand back it's nothing and if he is true and and we can send this pawn start status of 200 and stand back the user now if we save it and now we can go to our first name and if we again in doing this thing you can see the user is being called out and we can get the user now we are going to see something called for how can we do the update so for updating any user we can use update dot fetch request which is an application request and in here we are going to use also the slash users and also we are going to use the parameter here and it will be a sync function and request or response and now it all and for updating something we also need a body because the browser or the client will say anything that they want to so it will be resetting in the body part so here from here we are going to use the try and fetch block try and catch clock in memory if there is an error we can see response dot status of 500 thank eat dot message so now if we can also use call future because there is only one user object ID English cider we are going to use a lathe and here we are going to use user dot find by ID and we are going to use this once and find by ID and update so here first it will take the request dot params dot ID and next one it will take the update we are going to do so request dot party that's it and if there is user of death type if there is a user then it will return if sorry if it is no there is no user of it of it then it will with churn of returning back with you turned out response always status or photophone 8404 difficult there is no found if found response start stained if nothing and everything responds back with the new update really three stages of to over thought stain of user but it will not work properly because it will it will it will not check if there is anybody a sort or not so it is optional properties reformed it is it will give the new user and it will say to look true and it will check for validation for running validator we are going to use run validator in here which is look like this this one will run the new and run validator and now if we save it and we can go to the postman I mean here we are going to create a new select new quiz that is and update user so we are going to update the user and we bring this thing to the moodini and now if we are going to fetch it here and localhost 3000 and we are going to use the this one this param and we are going to stand back with 40 and we are going to select that raw JSON and now let's say we are going to say update the ease of this user it will like 54 now if we send it back we can see that the user is being updated and as it has 34 and the critic very refreshed look here we can see that their eyes will suffer for now we are going to see the last one that is f dot till late how can we delete a user for deleting we can even spare your delete users small as ID and it will be a sync process and we are going to use request and response now we are going to use try and catch block here also and now we are going to see that if there is a user make this right then oh wait it will give the user wait user dot find by ID and delight and here we are going to faster fathoms of ID so the same thing that we have done in previous requested the if there is user then it is good and if it is not then we can send 404 messes so in here i really cannot forget france back with a message so now if we if we save it now if we see it and go to our postman and create an or let's say we are going to flag delayed here and we are going to delete this one and there is no but required here now if we send it we can see that you it will give the user and if we press it here we can see that the chontal user is being deleted so that's how the rest API works here so thank you
