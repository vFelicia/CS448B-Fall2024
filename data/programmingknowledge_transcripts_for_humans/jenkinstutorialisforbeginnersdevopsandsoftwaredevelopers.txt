With timestamps:

00:00 - hey guys welcome to this course on
00:02 - jenkins tutorial for beginners
00:04 - so let's get started so first of all
00:07 - what is
00:08 - jenkins so jenkins is an open source
00:11 - automation server written in java one
00:14 - can also say that jenkins
00:16 - is a ci server where ci stands for
00:20 - continuous integration and what is ci
00:23 - we are going to see in details in the
00:25 - next slide
00:27 - now what jenkins does so jenkins
00:30 - is used to detect the changes whatever
00:33 - you commit
00:34 - using your version control system such
00:37 - as
00:38 - subversion or git or any other
00:40 - versioning system
00:42 - and it performs some tasks on your
00:45 - code when it detects some changes
00:49 - in your code so what tasks jenkins can
00:52 - perform repeatedly
00:54 - so jenkins can perform for example if
00:56 - you have a code it can
00:58 - build your code it can test your code
01:01 - it can even deploy your code and even
01:04 - package or integrate your code
01:07 - whenever it detects some changes in your
01:11 - version control system
01:13 - or in your code now let's talk about
01:16 - some of the history
01:18 - behind the jenkins so jenkins
01:21 - is a fork of original hudson project
01:25 - and it was under development since
01:28 - 2005. now hudson was the first release
01:33 - by a developer called kosuke kawaguchi
01:38 - of sun microsystem and in 2010
01:42 - oracle bought sun micro system due to
01:45 - this
01:45 - some naming dispute occurred and hudson
01:49 - was renamed to jenkins now oracle
01:53 - continued the development of hudson
01:57 - as a branch of the original and the
01:59 - jenkins became the folk of
02:01 - hudson now you can find more about
02:04 - jenkins on
02:05 - jenkins minusci.org but nowadays this
02:09 - website is transferred
02:11 - to a website called jenkins dot
02:14 - io so if you enter this url
02:17 - on your browser it will be redirected to
02:21 - jenkins dot io now before diving deep
02:24 - into jenkins we need to understand what
02:27 - is ci or continuous integration
02:31 - so the basic concept of ci is
02:34 - a ci server continuously integrates
02:38 - newly checked in code into a build
02:41 - that we have already discussed so
02:43 - jenkins detects
02:45 - those changes using the version
02:47 - controlled
02:48 - system and perform some tasks on them
02:52 - for example building or testing or
02:54 - integration test or
02:55 - deploying those builds and so on
02:59 - so you can see in the second step of
03:01 - continuous integration i have written
03:04 - it runs unit tests and rejects the build
03:08 - if they fail so a continuous integration
03:11 - system detects and runs the
03:14 - unit test and it detects the failure
03:18 - and if a failure occurs during the unit
03:21 - test or
03:22 - integration test or any kind of test
03:25 - it's going to reject that build and it's
03:27 - going to send the information to the
03:29 - developer
03:30 - or the maintainer of that code now for
03:33 - example
03:34 - your unit test or whatever test or your
03:37 - whatever build you are
03:38 - making is successful
03:41 - then a continuous integration system
03:45 - is going to deploy your build to other
03:48 - servers
03:49 - so continuous integration is also
03:52 - referred as build automation
03:55 - so you may ask what does this really
03:57 - mean
03:59 - so at regular interval or regular
04:02 - frequency ideally every commit you do
04:06 - in your version control system your
04:08 - continuous integration system is going
04:10 - to integrate
04:12 - your system that means all changes up
04:15 - until that point
04:16 - are combined into that project it's
04:19 - going to build your code so the code is
04:22 - compiled
04:22 - into a executable or a package
04:26 - it's going to test your code so you can
04:29 - automate
04:29 - your test and you can write your test
04:32 - suit which is going to be run
04:34 - by your continuous integration system
04:37 - and if all the previous steps are
04:40 - successful
04:41 - your code will be deployed that means it
04:44 - will be
04:44 - loaded onto a system where the developer
04:48 - can interact
04:49 - with it so now let's talk about some of
04:52 - the benefits or the advantages
04:56 - of a ci system so ci system
04:59 - enables us in immediate
05:02 - bug detection so bug will be detected if
05:05 - some
05:06 - test fails or your build fails and then
05:09 - the ca system is going to deploy
05:12 - your code if your test and your build
05:16 - passes so at any given point you have a
05:18 - deployable
05:20 - system now next is you have the record
05:22 - of
05:23 - evaluation of your project so for
05:25 - example how many times
05:27 - your build succeeded or your test
05:30 - succeeded
05:31 - and at what change or at what point your
05:34 - build failed or your unit test failed
05:37 - it's going to you know get the record of
05:40 - everything so you can see it later
05:44 - and you can just view the
05:47 - quality of your code now the next
05:50 - benefit
05:50 - of a ci system is it's going to detect
05:53 - the system development problem
05:55 - at very early stage so because
05:59 - you can run jenkins repeatedly
06:03 - for example our developer checks in his
06:06 - code using git
06:07 - or subversion or any versioning system
06:10 - it's going to run
06:11 - every job which you have made for
06:14 - example for
06:15 - building your code or your integration
06:18 - test or your unit test or
06:20 - any other test is going to run
06:23 - immediately
06:24 - and if anything fails you can even get
06:28 - the report of that using an email or it
06:32 - will generate
06:33 - some kind of message to
06:36 - your server so everybody will know some
06:39 - error has
06:39 - occurred during the build or the test of
06:43 - your code so everybody will be
06:46 - able to take the action at the earliest
06:49 - as a result
06:50 - you have the reduced risk of cost
06:53 - schedule and budget okay so when you
06:57 - detect the problem earlier
06:58 - obviously you you are going to save on
07:01 - cost and your
07:02 - time and your budget and the last but
07:05 - not the least
07:06 - is the measurable and visible code
07:09 - quality
07:10 - so using a jenkins or any other ci
07:13 - system you will be able to you know
07:16 - visibly see the code quality
07:19 - of your project now let's see using some
07:22 - picture
07:23 - how does it all happens
07:27 - so you can see here are your developers
07:31 - which are going to develop
07:32 - some code and they are going to commit
07:35 - their code
07:36 - into the code repositories such as
07:40 - mercurial or git or subversion
07:43 - and this commit of changes
07:47 - of code will be automatically detected
07:50 - by jenkins so whenever a developer
07:53 - commits his code
07:55 - is going to uh automatically be detected
07:59 - by
07:59 - the jenkins and what jenkins will do
08:03 - is going to run some tests whatever test
08:06 - you have
08:07 - created to run on jenkins for example
08:11 - the unit test or integration test or
08:13 - system test
08:15 - or any other kind of test is going to
08:18 - just run those tests
08:19 - and give you the test results and if
08:23 - the build is successful and tests are
08:25 - successful
08:26 - it's going to just you know transfer
08:30 - your
08:31 - executable file into some artifact
08:34 - repository or it's going to deploy your
08:37 - software
08:38 - onto some other server for examples
08:41 - on some cloud server where you
08:45 - want to use it so here the code is
08:48 - committed
08:49 - and then at a regular interval the
08:52 - jenkins tests the
08:54 - repository and then it runs the test
08:57 - on those codes using your repository
09:00 - and if everything is successful it's
09:03 - going to create the executable
09:05 - and then it will save those executable
09:09 - in your artifact repository
09:11 - or it will deploy your code onto
09:15 - some other server so now let's talk
09:17 - about
09:18 - why jenkins and not any other ci system
09:22 - there are many other ci system available
09:25 - but why
09:25 - jenkins so in jenkins you can create
09:28 - plugins so these plugins are very
09:32 - modular and jenkins plugin extensively
09:35 - makes jenkins to
09:36 - adopt to many systems so
09:39 - you can install jenkins on many
09:43 - systems for example linux or windows or
09:46 - mac operating operating system or any
09:49 - other system
09:50 - and its plug-in system is really modular
09:53 - so
09:54 - you can install whatever plug-in you
09:56 - want
09:57 - to support that kind of build or that
10:00 - kind of
10:01 - functionality whatever you want now the
10:04 - second
10:04 - is jenkins provide everything for a
10:07 - robust
10:08 - continuous integration system which
10:11 - helps
10:11 - a lot for team that practice agile
10:15 - now agile is a software development
10:19 - techniques which are used widely
10:22 - across many companies and many
10:26 - teams in order to coordinate their work
10:30 - so this is completely
10:32 - another topic agile methodology but if
10:35 - you are a software developer
10:37 - you may not know what agile is the next
10:40 - is jenkins continuously provides
10:43 - access to the working copies of the
10:45 - software which supports
10:47 - the agile principle once again so if
10:50 - your team is working in an
10:52 - agile environment such as sprints or
10:56 - you have scrums or any other agile
11:00 - methodology
11:01 - then jenkins will fit perfectly in
11:04 - your system the next is jenkins
11:07 - is released under mit license
11:11 - so it's an open source ci
11:14 - system that means you can use it
11:18 - freely the next is there is a large
11:20 - support of community
11:22 - and thorough documentation so
11:25 - whatever you need to know about jenkins
11:29 - most probably it will be answered by the
11:32 - support community
11:33 - or you will find it in the documentation
11:36 - of jenkins and the last point is
11:40 - as i already stated that it's really
11:42 - easy to write a plugin in jenkins
11:45 - and if you write a plugin in jenkins it
11:47 - can be used by other community members
11:50 - or everyone who will use jenkins that
11:52 - makes jenkins
11:54 - really powerful in a way that community
11:57 - members
11:57 - creates those plugins and they can be
12:00 - used
12:01 - by everybody who wants to use them and
12:04 - last point i want to add here
12:06 - is if anything goes wrong you can fix it
12:10 - so
12:10 - it's so modular jenkins is so modular
12:13 - that you can fix your problem by
12:16 - yourself
12:17 - so what jenkins can do jenkins can
12:21 - generate reports
12:22 - it can integrate with many different
12:25 - version control systems
12:27 - it can push to various artifact
12:30 - repositories it can deploy directly to
12:34 - your production or test environment
12:37 - it will notify the stakeholders of the
12:40 - build status
12:41 - using email or any other messaging
12:44 - system and many more so
12:47 - this is the brief introduction about
12:49 - jenkins
12:50 - and in the next video we will see how we
12:53 - can install
12:54 - jenkins on different operating systems
12:57 - and then we will go further
13:00 - hey guys in this video i'm going to show
13:02 - you how you can download and install
13:03 - jenkins on your windows 10 operating
13:05 - system
13:06 - so first of all let's talk about the
13:08 - prerequisite of
13:09 - installing jenkins on your windows 10
13:12 - operating system
13:13 - in order to install jenkins you need to
13:15 - have java 7 or
13:17 - above so make sure you have the latest
13:19 - version of java
13:20 - and then once you have java installed
13:23 - then you are ready to
13:24 - install jenkins so i have already
13:26 - installed java 10 on my windows 10
13:28 - operating system
13:29 - and i am assuming that you also have the
13:31 - latest version of java
13:33 - so once you have java installed just
13:35 - open your favorite browser and search
13:37 - for jenkins
13:38 - and the first link which will appear
13:39 - here will be from jenkins.io
13:41 - so we are going to click on this link so
13:44 - once you are on this
13:45 - jenkins website you just need to click
13:47 - on the downloads button here
13:49 - and on the downloads page you just need
13:51 - to scroll down a little
13:52 - don't click on downloads yet we are
13:54 - going to see
13:56 - which are the versions which are
13:58 - available for jenkins
13:59 - so when you scroll down you will see
14:02 - different versions
14:03 - of jenkins one is the lts version and
14:06 - other is the weekly
14:08 - release so we are going to use the
14:11 - long term support version and the latest
14:14 - version is 2.107.2
14:18 - and in here we are going to choose the
14:20 - windows
14:21 - option so here you will see the windows
14:24 - option
14:24 - now one thing you need to keep in mind
14:27 - is when you are installing jenkins on
14:29 - windows
14:30 - it is good to run jenkins as a service
14:32 - so it starts
14:34 - automatically without requiring any user
14:37 - to log
14:38 - in the easiest way to install jenkins on
14:42 - windows is
14:42 - by using a windows installer
14:46 - but if you are a advanced user you can
14:49 - also
14:49 - download the jenkins var file
14:53 - and then you can deploy it on
14:56 - servlets like glass fish or tomcat
14:59 - but for our purpose we want to just
15:02 - learn so
15:03 - we are going to use the windows
15:05 - installer
15:06 - so i'm going to just click on windows
15:08 - here and once you click on windows
15:10 - option you will see
15:12 - this message which says thank you for
15:13 - downloading windows stable installer
15:16 - and you can see here it will download it
15:18 - as a zip file so i'm going to wait for
15:20 - the download to complete
15:21 - so now the download of this zip file is
15:23 - completed so i'm going to minimize the
15:25 - browser and
15:26 - i'm going to go to my downloads folder
15:28 - where i have downloaded this zip file
15:31 - and now i'm going to just open this zip
15:33 - file
15:34 - and in here i will be able to see this
15:37 - windows
15:38 - installer package so i'm going to double
15:40 - click on this windows installer package
15:42 - which is going to start the jenkins
15:44 - installation so i'm going to minimize
15:46 - this folder explorer
15:48 - and you can see uh jenkins 2.107.2 setup
15:53 - window
15:54 - so on this welcome window we don't need
15:55 - to do anything we just need to click
15:57 - next here and this will be the default
16:00 - location where jenkins will be installed
16:02 - so if you don't have the good reason to
16:04 - change it
16:04 - just leave it as default and then click
16:07 - next
16:08 - and then click install and then just
16:10 - click
16:11 - yes we're just going to start installing
16:14 - jenkins
16:15 - and in the end you will see this message
16:16 - which says completed
16:18 - the jenkins setup wizard click finish
16:21 - button to exit the setup wizard so i'm
16:23 - going to click finish
16:24 - so now jenkins is installed on your
16:26 - system and it will ask
16:28 - in which browser you want to open it so
16:30 - i'm going to click
16:31 - on google chrome
16:35 - and you can see on a port localhost
16:38 - 8080 you will be able to see this kind
16:41 - of window
16:42 - so if this window doesn't open
16:44 - automatically
16:45 - you just need to go to your favorite
16:47 - browser and then just write localhost
16:50 - colon 8080 so let's copy this here
16:54 - and just paste it here so http
16:58 - colon forward slash forward slash
17:00 - localhost
17:01 - colon 8080 the default port is
17:04 - port 8080 and i'm going to just click on
17:06 - this
17:07 - and then you will be able to see this
17:09 - kind of window okay so if it doesn't
17:11 - open
17:12 - automatically you can just browse on
17:14 - localhost port 8080
17:16 - now first thing in order to unlock
17:18 - jenkins
17:19 - you just need to provide the initial
17:22 - admin password
17:23 - and this password is set in this
17:26 - directory
17:27 - so just copy this path here
17:31 - and then i'm going to open my folder
17:33 - explorer and i'm going to
17:34 - paste this path and you will see uh
17:37 - this file here which is initial admin
17:40 - password so you just need to open this
17:43 - initial
17:44 - admin password here so i'm going to just
17:48 - open it into my editor so i'm going to
17:50 - open it
17:51 - in the notepad and you just need to copy
17:54 - this initial password
17:55 - and then i'm going to minimize this
17:58 - window and i'm going to provide
18:00 - my initial password and then click
18:02 - continue now in the next step
18:04 - you will see a customize jenkins window
18:08 - so there are two options here install
18:10 - suggested plugins
18:12 - and the second option is select plugins
18:14 - to install
18:15 - so i'm going to choose this option which
18:17 - says install suggested plugins
18:19 - which is going to install the most
18:21 - suggested plugins
18:23 - in your jenkins installation so you can
18:26 - just
18:26 - click on install suggested plugins and
18:29 - this is going to start
18:30 - installing the suggested plugins so you
18:33 - can see
18:34 - there is a plugin for get here there is
18:37 - a plugin for
18:38 - subversion plugin for github ldap email
18:42 - extension and some other plugins
18:45 - so right now i don't have git installed
18:47 - on my system or ldap installed on my
18:50 - system
18:50 - or even ssh slave so if it shows some
18:54 - error it's okay
18:56 - so once all the plugins are successfully
18:58 - installed
18:59 - on your jenkins you will be
19:02 - automatically redirected
19:04 - to this page which says create first
19:07 - admin user so you just need to create
19:10 - the admin user credentials here so
19:13 - username let's say i'm going to take it
19:16 - as
19:17 - admin here and password whatever you
19:19 - want
19:20 - i'm going to give some password and then
19:23 - i'm going to confirm my password
19:26 - and here i'm going to give the full name
19:28 - for example
19:30 - admin once again and the next thing is
19:34 - email so i'm going to provide the email
19:36 - and after providing
19:37 - each and every credential you just need
19:39 - to click save and finish
19:41 - we're just going to say jenkins is ready
19:44 - start using jenkins
19:45 - so i'm going to just click on this
19:48 - button which says start using jenkins
19:51 - and you will see this kind of window so
19:54 - if you see this kind of window that
19:56 - means jenkins
19:58 - is fully installed on your system and
20:01 - jenkin is running on your system now if
20:04 - you want to
20:05 - see more about jenkins you will be able
20:08 - to see uh
20:09 - it inside your c directory and inside
20:12 - the c directory you just need to go to
20:14 - program files x86
20:16 - and there will be a jenkins folder here
20:18 - and inside jenkins folder
20:20 - all the plugins are there so you can see
20:22 - the plugins folder
20:24 - and all the plugins are here
20:27 - and all the files related to jenkins
20:31 - will be stored here so if you want to
20:33 - dig deeper into jenkins you can
20:35 - always come to this directory and see
20:38 - what's happening
20:39 - so this is how you can install jenkins
20:41 - on your windows 10 operating system
20:43 - hey guys in this video i'm going to show
20:45 - you how you can download and install
20:47 - jenkins
20:48 - on your ubuntu or debian based operating
20:51 - system
20:52 - so in order to install jenkins you need
20:54 - to have java installed on your system
20:57 - but we will look into the documentation
21:00 - which version of
21:01 - java is required to install jenkins
21:04 - from the jenkins website so first of all
21:08 - just open your favorite browser and
21:11 - search for jenkins
21:13 - and the first link which will appear
21:14 - here will be from jenkins dot io
21:17 - so i'm going to click on this link and
21:20 - once
21:21 - this website is open there is a
21:23 - documentation given
21:25 - to install jenkins on linux or debian
21:28 - based operating system
21:30 - and this documentation you can find in
21:32 - the documentation section
21:34 - so i'm going to click on the
21:35 - documentation section and then
21:38 - just click on use jenkins
21:41 - now when i scroll down a little
21:44 - under user handbook section i can see
21:48 - this section which says installing
21:50 - jenkins
21:51 - so i'm going to click on this link
21:55 - and then you will see this section which
21:57 - is installing jenkins
22:00 - i'm going to put this link in the
22:02 - description so you can directly click on
22:04 - this link
22:05 - and come to this page now let's see the
22:08 - prerequisite of installing jenkins
22:11 - so here these are some of the system
22:14 - requirements
22:15 - and then you can see software
22:17 - requirement
22:19 - and here you can see java 8 either java
22:22 - runtime environment
22:24 - or java development kit is fine right
22:28 - so first of all we are going to uh
22:30 - install java 8
22:32 - and then we are going to install the
22:35 - jenkins on our open operating system now
22:38 - when i scroll down a little you will see
22:41 - uh
22:42 - the installation process for different
22:44 - operating systems
22:45 - for example mac os or windows operating
22:48 - system
22:49 - and when you scroll a little bit more
22:51 - you will see the section for linux
22:54 - debian forward slash ubuntu and these
22:58 - are the steps
22:59 - you need to follow in order to install
23:02 - jenkins
23:03 - so we will execute these steps after we
23:06 - install
23:06 - the java version so i'm going to just
23:09 - minimize this browser and i'm going to
23:11 - open
23:12 - the terminal just press ctrl alt t in
23:14 - order to open the terminal or you can
23:16 - open the terminal from here
23:18 - also so once the terminal is
23:21 - open to install the java 8 i'm going to
23:24 - use the ppa
23:26 - and these command also i'm going to give
23:28 - you in the description
23:29 - so the first command is this sudo add
23:32 - minus apt minus repository ppa
23:36 - colon web up eight theme
23:39 - for slash java and then press enter
23:42 - and then give your ubuntu's password and
23:45 - then press enter
23:46 - and once again press enter and once this
23:49 - command is finished
23:50 - i'm going to paste the second command in
23:52 - order to install java 8. so this is the
23:54 - second command
23:55 - which is sudo apt install oracle hyphen
23:58 - java 8
23:59 - minus installer press enter in order to
24:02 - install java 8.
24:03 - so now we can see this message here
24:05 - which says oracle jdk8
24:08 - is installed on my system and then there
24:11 - is an important message here
24:14 - and this message says to set oracle java
24:17 - jdk
24:18 - 8 as default we need to install oracle
24:21 - minus java 8 minus set minus default
24:25 - so we are going to run this command
24:27 - which is given in the example
24:29 - which is this one so i'm going to just
24:31 - copy this command
24:33 - in order to set java 8 as the default
24:37 - java version so just copy this command
24:39 - which is sudo apt
24:40 - install oracle minus java 8 minus set
24:43 - minus default and paste
24:45 - onto your terminal and then press enter
24:50 - and then press y and once this command
24:52 - is finished we are going to check
24:54 - the java version so i'm going to just
24:56 - write java
24:58 - hyphen hyphen version and then press
25:01 - enter and this command gives us some
25:04 - problem
25:04 - i can see could not create java virtual
25:07 - machine so
25:08 - instead of giving double hyphen i think
25:11 - the command is
25:12 - java hyphen version and you can see this
25:15 - version java version 1.8.0 point
25:18 - something
25:19 - so if you see uh this version here that
25:21 - java 8 is installed on your system
25:24 - so let's clear the terminal so i'm going
25:27 - to clear the
25:28 - terminal so now let's start with the
25:30 - installation of
25:32 - jenkins so when you go to this page
25:35 - and you will see these commands somehow
25:37 - these commands
25:38 - did not work for me so i found on
25:41 - internet some commands
25:43 - which worked for me so the first command
25:46 - is this one so i'm not going to follow
25:49 - and copy and paste these commands
25:51 - because these did not work for me
25:54 - i'm going to copy these command and
25:57 - these commands i'm going to give you in
25:58 - the description also
26:01 - so we are going to give the first
26:02 - command and then press enter
26:04 - and then give your ubuntu's password
26:08 - and then the second command which is
26:10 - this one
26:11 - just copy and paste and then press enter
26:16 - and now the third command which is to
26:22 - update
26:24 - and now the fourth command which is to
26:27 - actually install
26:28 - jenkins which is sudo apt get
26:31 - installed jenkins and then press y
26:36 - and you can see this command is also
26:38 - finished
26:39 - so in order to check whether jenkins is
26:42 - really installed or not
26:43 - you can open your browser and here
26:46 - jenkins
26:47 - generally starts on localhost port 8080
26:51 - so
26:51 - i'm going to just write local host
26:55 - colon 8080 and then press enter
26:58 - and you will be able to see this kind of
27:00 - page which says unlock
27:02 - jenkins so here we are going to provide
27:06 - the initial password which is saved
27:09 - at this location so we are going to go
27:12 - to this location but first of all i want
27:15 - to show you some more command in order
27:17 - to
27:18 - just manage junkins on ubuntu
27:21 - so because jenkins is installed as a
27:24 - service on your ubuntu operating system
27:27 - you can always use a system
27:30 - ctl status for example if you want to
27:35 - uh check the status jenkins okay
27:39 - so with this system ctl command you can
27:42 - start jenkins or stop jenkins or see the
27:45 - status of jenkins
27:46 - or restart jenkins also so when i give
27:49 - this command sudo
27:51 - system ctl status jenkins and then press
27:53 - enter
27:54 - it's going to give me the status of
27:56 - jenkins and right now it's active
27:58 - and running and
28:01 - for example i want to restart or start
28:04 - my jenkins once again
28:06 - instead of status i can just write start
28:09 - if i want to restart it i can just write
28:12 - here
28:13 - restart and it's going to be restarted
28:17 - so all these commands are for future
28:19 - references if you want to restart or
28:21 - stop
28:22 - in order to stop you can just write stop
28:24 - here so just write
28:26 - stop and jenkins will be stopped so
28:29 - these commands
28:30 - are for the future reference whenever
28:32 - you want to
28:33 - just manage your junkies or stop or
28:35 - restart jenkins
28:36 - now let's finish the installation
28:38 - process so you can see on this page it
28:40 - says
28:41 - unlock jenkins and you will see uh this
28:44 - path here and on this path the initial
28:47 - admin password is saved
28:49 - so i'm going to just copy this path
28:52 - whole path
28:53 - and then go to the terminal once again
28:56 - and then i'm going to
28:57 - let's let me clear the terminal first of
29:00 - all
29:01 - and here i'm going to just write cat and
29:04 - then just paste this part
29:05 - which i have copied from here which is
29:08 - this one
29:09 - and in this file your initial password
29:12 - is there
29:12 - and cat is used to just output the
29:16 - content of the file so i'm going to just
29:19 - do this it says permission denied so i
29:21 - will do this
29:22 - with the sudo in front of it so i'm
29:25 - going to just write sudo and then press
29:27 - enter and you can see uh this password
29:30 - here
29:30 - so you can just directly copy this
29:32 - password
29:33 - right click copy or what you can do is
29:36 - you can also
29:37 - use the g edit command so instead of cat
29:41 - you can just write g add it this is the
29:44 - graphical
29:45 - editor and here you will find the same
29:49 - password and then you can just copy
29:52 - and then you just need to paste this
29:54 - password here
29:56 - so once you have pasted your initial
29:57 - password i'm going to just click
29:59 - continue and i don't want to save
30:02 - anything
30:03 - and in here i can see two options for
30:06 - customizing jenkins one
30:08 - is install suggested plugins and other
30:10 - is select
30:11 - plugins to install so i'm going to
30:14 - choose
30:14 - the first option which says install
30:16 - suggested plugins so i'm going to click
30:18 - on this option
30:19 - we're just going to start installing the
30:21 - suggested plugins here
30:23 - so you can see uh different kind of
30:25 - plugins will be installed
30:27 - for git for example subversion
30:30 - or ldap or gradle and
30:34 - other plugins now keep in mind i don't
30:37 - have a
30:38 - git or subversion or ldap yet installed
30:41 - on my ubuntu operating system so it's
30:44 - okay if you
30:44 - don't have these installed previously
30:48 - so we will just install the plugins and
30:51 - whenever we want some
30:53 - software for example git or subversion
30:56 - or ldap or anything
30:57 - we will install it later so i'm going to
31:00 - wait for
31:01 - this plugin installation to complete so
31:03 - now the installation of all the plugins
31:05 - are complete and
31:07 - this page is redirected to this window
31:10 - where it says create first admin user so
31:14 - we are going to create our first
31:16 - admin user so you can provide any name i
31:18 - am going to just
31:19 - provide username admin here you can
31:22 - provide any name
31:23 - and then give some password which you
31:27 - can remember and which is strong
31:29 - so i am going to give some password here
31:33 - and i am going to repeat my password and
31:36 - now i am going to
31:38 - give the name for example admin
31:41 - once again and now i am going to give
31:43 - the
31:44 - email id email address and then
31:47 - i am going to just press this button
31:49 - which says save and continue
31:52 - and you can see this message which says
31:55 - instance configuration
31:57 - jenkins url which is this one which is a
32:00 - localhost 8080 which is ok for
32:02 - us for now so just leave it as default
32:05 - and then press save and finish
32:07 - and you will be able to see this message
32:10 - which says jenkins is ready
32:12 - your jenkins setup is complete start
32:14 - using jenkins so we are going to just
32:16 - press this button which says start using
32:19 - jenkins and now if you see this kind of
32:24 - interface you know that jenkins is
32:27 - working fine on
32:28 - your system so this is how you can
32:31 - install a jenkins on your ubuntu
32:34 - operating system
32:36 - hey guys in this video i'm going to show
32:37 - you how you can download and install
32:39 - jenkins on your mac
32:41 - operating system now in order to install
32:43 - jenkins we need to have
32:45 - java installed on our system and we will
32:47 - see which version of java
32:50 - we are required to install jenkins on
32:53 - jenkins page
32:54 - so let's get started and let's see how
32:56 - we can do it
32:57 - so first of all open your favorite
32:59 - browser and search for
33:01 - jenkins and in here the first link which
33:03 - will appear here will be
33:05 - from jenkins dot io so i'm going to
33:07 - click on this link
33:09 - and once you are in this website
33:12 - you just need to go to the downloads
33:15 - button so i'm going to click on the
33:16 - downloads button
33:18 - and then you will come to this downloads
33:20 - webpage right
33:22 - let's see the requirements of installing
33:24 - jenkins
33:25 - on our mac so in order to see that you
33:28 - just need to go to
33:29 - the documentation page i'm going to open
33:31 - this documentation page
33:33 - on the next tab so documentation page
33:36 - and then
33:37 - use jenkins so just click on
33:38 - documentation and then click
33:40 - use jenkins and in here
33:43 - we will just scroll down a little and we
33:46 - will just
33:47 - find the section which says installing
33:50 - jenkins
33:51 - and i'm going to click on this and once
33:54 - you click on this
33:55 - we will see the prerequisite of
33:57 - installing jenkins
33:59 - so here you can see the system
34:00 - requirements and under this you can see
34:03 - the software requirements and the
34:05 - software requirement says
34:07 - java 8 either java runtime environment
34:10 - or
34:10 - java development kit is fine so we need
34:13 - to have
34:14 - java 8 installed in order to use
34:17 - jenkins on our mac so i already have
34:20 - java installed on my system
34:22 - if you don't you just need to install it
34:25 - now once you have done this
34:27 - we are ready to install jenkins so just
34:29 - come to the downloads page
34:32 - and then just scroll down a little don't
34:33 - click on the download button
34:35 - we will just go down and we will search
34:39 - for the section which says
34:40 - mac os x now you can see here
34:43 - there are two categories here one is the
34:46 - weekly
34:47 - build so this is the most latest uh
34:51 - build you can get for jenkins and other
34:54 - is the
34:55 - lts version which is long term support
34:57 - version
34:58 - so we are going to download and install
35:00 - the lts version
35:01 - so just go under the lts
35:04 - section and then choose the mac os x so
35:07 - just click on this mac os x
35:09 - and this is going to start the download
35:12 - of this jenkins 2.10
35:16 - which is the latest lts version dot pkg
35:20 - file so i'm going to wait for this
35:22 - download to complete
35:23 - so now the download of this uh dot pkg
35:26 - file is complete so i'm going to double
35:28 - click on this
35:28 - pkg file and now i'm going to minimize
35:32 - the browser
35:33 - and you can see here the installer for
35:34 - jenkins has been started so here i just
35:37 - need to
35:37 - click continue and the next step is to
35:40 - agree with
35:41 - the license terms and conditions so i'm
35:43 - going to just
35:44 - click on continue button and i'm going
35:47 - to just click agree and on this next
35:49 - step you will be asked
35:50 - how do you want to install the software
35:53 - install for all users of this computer
35:55 - so this is okay for me so i'm going to
35:57 - just click
35:58 - on continue and in the next step it says
36:00 - this will take around
36:02 - 74 megabyte of space on your computer
36:05 - and then click install to perform the
36:08 - standard installation so i'm going to
36:10 - just click
36:11 - on install button and here i just need
36:14 - to give my max password so i'm going to
36:16 - give my max password and i'm going to
36:18 - just say install software
36:20 - and this is going to start the
36:22 - installation process for
36:24 - jenkins so i'm going to wait for the
36:26 - installation to complete
36:32 - and once the installation is complete
36:34 - you will see directly on your default
36:36 - browser
36:37 - on the local host port 8080
36:41 - this jenkins page will start
36:44 - automatically
36:45 - and it will say please wait while
36:47 - jenkins is getting ready to work
36:49 - okay so it will start automatically on
36:53 - localhost port 8080 so if it doesn't
36:56 - start you can just
36:58 - write on your favorite browser localhost
37:01 - port 8080 and
37:02 - you will see this kind of jenkins page
37:06 - and the first step is to unlock jenkins
37:10 - so the initial admin password for
37:13 - jenkins
37:14 - which is uh required here is saved
37:17 - on this location so you need to
37:21 - just copy this initial admin password
37:24 - from this location and then you just
37:27 - need to
37:28 - paste it here in the admins password so
37:31 - i'm going to just copy
37:32 - this path and once you have copied this
37:35 - path
37:36 - just open your terminal and in here you
37:38 - just need to write sudo
37:40 - and then cat and then just paste this
37:43 - path
37:44 - and then press enter and give your max
37:46 - password here
37:48 - and then press enter and then you will
37:51 - see
37:51 - this password here so you just need to
37:54 - copy this password
37:55 - which is this one in your case it can be
37:58 - different
37:59 - and then just paste this password here
38:03 - and then press continue so just paste
38:04 - the password you have copied
38:06 - and then press continue now on the next
38:09 - step
38:09 - you will be asked to customize jenkins
38:12 - so there are
38:13 - two ways of doing this you can click
38:15 - this button which says install
38:17 - suggestive plugins or you can click this
38:20 - button which says select plugins to
38:22 - install so we will choose the first
38:23 - option which says
38:25 - install suggested plugins and i'm going
38:27 - to click on this button
38:29 - which is going to start installing the
38:31 - suggested plugins
38:33 - these plugins are for example git
38:37 - or ldap or subversion plugin or gradle
38:40 - plugin so these are some of the
38:42 - suggested plugins
38:43 - which are suggested by jenkins to us so
38:46 - i will just wait for the plugins to
38:49 - install it will take some time to
38:51 - install
38:52 - each and every plugin so i'm going to
38:54 - wait for that
38:55 - and once each and every plugin is
38:57 - installed
38:58 - we will be redirected to create our
39:01 - admin credentials so i'm going to wait
39:03 - for that
39:04 - so now all the plugins are installed on
39:06 - the jenkins
39:07 - and i will be redirected to this
39:10 - create first admin user page
39:13 - automatically
39:14 - so after installing all the plugins you
39:17 - will see
39:17 - this page which says create first admin
39:20 - user so i'm going to create the first
39:22 - admin user
39:23 - and i'm going to just say username is
39:26 - admin you can give any name
39:28 - here username here and then give any
39:30 - password here
39:32 - and then repeat the password and then
39:35 - give your full name i'm going to just
39:37 - write and win once again
39:39 - but you are free to give any name which
39:41 - you like
39:42 - and here you just need to give your
39:44 - email whatever you like so i have given
39:46 - my email address
39:48 - and then i'm going to just press save
39:50 - and finish which is going to save
39:52 - this admin user and password and i'm
39:56 - going to just say never for this website
39:58 - and you will see this message which says
40:01 - jenkins is ready start using jenkins
40:04 - so i'm going to just click on this
40:05 - button we say start using jenkins
40:09 - and you will see the jenkins interface
40:12 - here
40:13 - right so here you can create your first
40:15 - job by clicking this button
40:18 - and then you can install other plugins
40:21 - to manage the users
40:22 - which we will cover in the later videos
40:25 - i'm going to click on this
40:26 - uh link which says create new jobs
40:30 - and from here you can create a different
40:32 - kind of
40:33 - jobs for example freestyle project or
40:36 - pipeline or multi configuration project
40:39 - or any other kind of project so this we
40:42 - are going to see
40:43 - later so this is how you can download
40:46 - and install
40:46 - jenkins on your mac operating system hey
40:49 - guys welcome to the next video on
40:51 - jenkins tutorial for beginners in the
40:54 - last few videos we have seen
40:55 - how to install jenkins on variety of
40:58 - operating systems
40:59 - like windows mac os and
41:03 - linux operating system now moving
41:05 - forward
41:06 - i'm going to use my ubuntu operating
41:09 - system
41:10 - in order to demonstrate jenkins
41:12 - functionalities
41:13 - because most commonly and most
41:16 - frequently
41:17 - jenkins is used on a linux operating
41:20 - system
41:21 - but having said that if you are running
41:24 - jenkins on windows
41:25 - or mac operating system you can
41:29 - also follow along with this series
41:32 - because most of the time we will be
41:34 - working with this uh
41:36 - jenkins ui on a browser so it doesn't
41:39 - matter on which operating system
41:41 - i'm working on now if you want to
41:44 - uh practice jenkins on a linux
41:48 - machine it's also easy if you have
41:50 - windows or mac operating system
41:53 - what you can do is you can install
41:55 - virtualbox or vmware player
41:57 - which are the software using which you
42:00 - can
42:01 - install linux or any other operating
42:03 - system virtually
42:05 - on your mac or your windows operating
42:07 - system
42:08 - i have already made some videos on
42:12 - how you can install ubuntu on virtualbox
42:15 - and
42:16 - vmware player so if you want to use
42:18 - ubuntu or any other linux system
42:20 - virtually
42:21 - on windows then you can install
42:24 - virtualbox or vmware player
42:26 - and install linux and then install
42:29 - jenkins on it
42:30 - and you can follow along with this
42:33 - series so in this video i'm going to
42:35 - show you how you can create your first
42:37 - jenkins job so let's create our first
42:41 - jenkins job
42:42 - so what i'm going to do in this jenkins
42:45 - job is
42:45 - i have a java program on my operating
42:48 - system
42:49 - which i want to build and run using
42:52 - jenkins
42:53 - and i'm going to show you how you can do
42:55 - it using your first jenkins job
42:58 - so to create a jenkins job you can
43:00 - either click on this link which says
43:02 - create new jobs
43:04 - or you can click on this option which
43:06 - says new item
43:08 - so i'm going to click on this option
43:09 - which says create new job
43:11 - and then you will see here an interface
43:13 - which says enter
43:15 - and item names so i'm going to give my
43:18 - jenkins job
43:19 - name as hello world here
43:23 - okay now you will be able to see few
43:25 - options
43:26 - under this name so there is a
43:29 - free style project pipeline
43:31 - multi-configuration project
43:33 - folder and other options so to start
43:36 - with we are going to start with
43:38 - the free style project so just choose
43:40 - the freestyle project
43:41 - and then click ok and once your job is
43:44 - created
43:45 - you will be able to see this kind of a
43:48 - window here
43:49 - so first we need to configure our
43:52 - jenkins job so the first thing here
43:55 - is the general tab and here you can
43:58 - provide a simple description
44:00 - about your job so what this job is going
44:03 - to do
44:04 - is going to build and
44:08 - run java program let's say
44:12 - so here you can provide a simple
44:14 - description about your project
44:16 - and also you can preview your
44:20 - you know description here so it will be
44:22 - shown
44:23 - like this on your job window
44:26 - we can configure it and change this
44:29 - thing in the future
44:30 - so that we will be able to uh use the
44:34 - html tags also in the description
44:36 - and now let's move to the next section
44:39 - so
44:39 - under the description you will be able
44:41 - to see uh
44:42 - discard old bills when you build your
44:45 - jenkins job
44:46 - or github project or this project is
44:49 - parameterized
44:51 - for now we will not be using any of
44:54 - these options so just leave everything
44:56 - as unchecked and we will move to the
44:59 - next section which is
45:00 - source code management now by default
45:03 - you will see
45:04 - three options here one is none second
45:07 - is git and third is subversion so for
45:10 - now
45:10 - we will choose the none option because
45:12 - we will not be using
45:14 - any source control management system for
45:18 - this video but in future we will be
45:20 - using git
45:21 - or subversion in order to pull
45:25 - the source code from the github for
45:28 - example
45:29 - and then how to build or run the test on
45:32 - it
45:33 - so just choose the none option here and
45:35 - then we will move
45:36 - to the build triggers you can also
45:39 - click on this option which will just
45:42 - lead you
45:43 - to this category now here you will see
45:47 - few options first option is trigger
45:50 - bills
45:50 - remotely we will see this in the next
45:53 - video
45:54 - build after other projects are built
45:56 - this also we are going to see in the
45:57 - next video
45:58 - the third option is build periodically
46:01 - so we are going to choose this option
46:03 - for this video
46:04 - and the next option is github hook
46:06 - trigger for
46:07 - git scm polling and poll scm
46:10 - which is for the source code management
46:14 - system
46:15 - so these options we are going to see in
46:18 - the future
46:19 - when i'm going to show you how you can
46:21 - configure git
46:22 - and other options into your jenkins
46:26 - now by the name you can just guess that
46:28 - this option is going to build
46:30 - or you know run your test periodically
46:34 - but how we can configure our junkies to
46:37 - run periodically
46:38 - so for the help you can just
46:42 - click on this question mark here and
46:44 - then you will be able to see
46:47 - all the options which you can use here
46:50 - so you can see this field follows the
46:53 - syntax of
46:54 - chrome right so for example
46:57 - when i write s tricks asterisks
47:00 - asterisks asterix
47:01 - asterix using spaces so five extricts
47:05 - and between them i have used spaces this
47:08 - means that i want to run my jenkins job
47:11 - every minute and when you do this
47:14 - you will be able to see the hint here so
47:17 - it says do you really mean every minute
47:20 - when you say
47:22 - asterisks tricks as tricks asterisks and
47:24 - then it says
47:25 - perhaps you meant uh other option right
47:28 - so this when you write five-time
47:31 - asterisks with
47:32 - the spaces in between them it means that
47:34 - you want to run your jenkins job every
47:37 - minute now if you want to read more
47:39 - you can read this whole document
47:43 - so you can see in the help window here
47:45 - this
47:46 - asterisk means these five options
47:49 - so the first asterisk here means the
47:51 - minute the second x tricks is for the
47:54 - hour
47:55 - third is for the date of month fourth is
47:58 - the month and fifth is the day of the
48:00 - week
48:01 - right and you will be able to see also
48:04 - some examples here uh when you scroll
48:07 - down
48:08 - a little so for example if you want to
48:11 - run your junkies job
48:12 - every 15 minutes you can use this option
48:15 - for example so i'm going to just copy
48:18 - this and paste it here
48:20 - and now it says would last have run at
48:22 - saturday
48:24 - at this time and the next time will be
48:26 - 15 minutes after that
48:28 - okay so if you have any confusion you
48:31 - can read this document
48:33 - and you can also use uh these example
48:36 - in order to run your jenkins job so to
48:40 - start with we are going to
48:41 - start building our jenkins job
48:44 - every minute so we are going to just
48:48 - give
48:48 - five asterisks here okay and you can
48:51 - once again collapse this help
48:53 - window when you click on this question
48:55 - mark here once again
48:56 - now let's go to the build environment
48:59 - which is this option
49:01 - so the first option here is delete
49:03 - workspace before
49:05 - build starts so we don't want to delete
49:08 - our workspace
49:09 - so we will not check this option second
49:11 - is use secret text and file we will see
49:14 - this option later
49:16 - third is abort the build if it's stuck
49:19 - we can also use the
49:20 - use it later at timestamp on the console
49:24 - output this we can use it but
49:26 - i'm going to skip this for now because
49:28 - we want to build a very simple uh
49:30 - jenkins job
49:32 - and i'm going to skip also the last
49:34 - option so i don't want to
49:36 - check any of the check boxes in the
49:38 - build environment
49:40 - now the next option is the build option
49:43 - and here you can just choose which type
49:45 - of build you want to perform
49:47 - so if you are on windows you can choose
49:49 - this option which says execute
49:51 - windows batch command which is the
49:54 - windows terminal
49:56 - if you are on mac or linux you can
49:58 - choose this option which says
49:59 - execute shell which is like executing
50:02 - command
50:03 - on your terminal now what we want to do
50:07 - in this execute shell so let me show you
50:10 - what i want to build here
50:12 - so in my home folder i have a directory
50:15 - called
50:15 - javasample and in this directory i have
50:19 - a file called helloworld.java
50:22 - and when i open this file i have a
50:25 - simple
50:26 - hello world program written here which
50:28 - only prints hello world
50:30 - right so i want to build this program
50:33 - using jenkins so to build this program
50:38 - i know that i can use java c command to
50:41 - compile my java program
50:43 - so i'm going to just copy the path where
50:46 - this
50:46 - file is located which is in this
50:50 - location which is home my username and
50:53 - this
50:54 - jenkins sample project and i'm going to
50:57 - just cd
50:58 - to this directory so cd to the
51:02 - java samples directory now here i can
51:05 - just run
51:06 - java c command in order to compile my
51:09 - hello world
51:10 - dot java file right so this is going to
51:14 - compile
51:14 - my code and to run my
51:18 - hello world program i can just use java
51:21 - and then
51:22 - hello world which will be the executable
51:25 - file
51:26 - so these three lines what they are going
51:28 - to do first of all we are going to
51:30 - change directory
51:31 - to the java samples directory
51:34 - and then java c is going to compile my
51:37 - helloworld.java file
51:39 - and then java hello world is going to
51:42 - run
51:43 - my program so after doing this you can
51:46 - just
51:46 - press on save which is going to save
51:49 - your
51:50 - configuration and if you want to change
51:53 - this configuration in future
51:55 - you can always go to this option so on
51:58 - the left hand side you will be able to
52:00 - see
52:01 - this option which says configure and
52:04 - when you press on this option
52:06 - this configuration window will open once
52:08 - again where we have done
52:10 - our configuration right and when you
52:12 - click
52:13 - on this option which says jenkins you
52:15 - will come to
52:16 - the jenkins home page now
52:19 - in here you will see first of all that
52:23 - there is no build here and
52:26 - the status of this build is shown
52:30 - by this glowing sun right
52:33 - and our project name is or our jenkins
52:36 - job name is hello world
52:38 - now we have uh configured our
52:42 - jenkins job to run every minute right
52:45 - so i'm going to click on this jenkins
52:47 - job for now
52:49 - and you can see even if we haven't
52:52 - started
52:53 - any uh jenkins job it has
52:56 - already started my jenkins job
52:59 - and the status here is a red
53:02 - ball which means my job has
53:06 - failed okay so we will see how
53:09 - so we will see why my job has failed
53:13 - so what i can do here is i can click on
53:16 - this job you can just click on this
53:18 - and you will see this kind of window and
53:21 - it says
53:22 - red here which means failed and when you
53:25 - want to see
53:26 - more about your build status you can
53:28 - always go here which says
53:31 - console output which is going to show
53:33 - what
53:34 - exactly happened and now in the console
53:37 - output you will be able to see
53:39 - what happened while running your job and
53:42 - why
53:43 - your job failed so in here i can see uh
53:46 - this message so
53:47 - while performing this step which is java
53:50 - c
53:51 - helloworld.java it says this message so
53:55 - error is error while writing hello world
53:58 - hello world.class permission denied
54:02 - and this most probably happens when
54:04 - jenkins doesn't have
54:06 - permission as a pseudo user on a linux
54:09 - machine
54:10 - most probably on windows it will run
54:12 - fine but on linux we need to
54:15 - provide jenkins the sudo privileges
54:19 - so let's change the sudo privileges so
54:22 - let's go to the hello world and you can
54:24 - see
54:24 - already there are three builds because
54:26 - we have configured
54:28 - to run jenkins every minute so don't
54:30 - worry about this
54:32 - what we are going to do is we are going
54:34 - to open the terminal to open the
54:36 - terminal
54:37 - i can just go here and just search for
54:40 - the terminal or
54:41 - press ctrl alt t on my ubuntu operating
54:45 - system
54:46 - and first of all what i need to do here
54:48 - is i need to open
54:49 - a file using a pseudo privileges so just
54:53 - write
54:54 - sudo and then forward slash etc forward
54:57 - slash
54:58 - sudua okay so i'm going to give you this
55:01 - command in the description also
55:03 - so just write sudo and then any
55:06 - tool which can open and edit your file
55:10 - for me i'm going to use g edit
55:13 - or you can use nano or vi or the best
55:16 - would be sudo vi sudo okay
55:20 - so just write sudo g added forward slash
55:23 - etc
55:23 - for slash sudos and then press enter and
55:26 - then give
55:27 - your ubuntu's password or debian's
55:29 - password
55:30 - and then at the end i'm going to just
55:33 - give
55:34 - a little space here and then at the end
55:37 - i just need to just give jenkins user
55:42 - all the privileges and i want to just
55:46 - give no password here so that it will
55:48 - not ask for the password
55:50 - okay so just provide this line
55:54 - in your ubuntu operating system in order
55:56 - to provide jenkins
55:58 - the sudo command privileges right
56:01 - and then just save this and then
56:04 - close this and now i'm going to go to
56:07 - the configure
56:08 - section once again and in here instead
56:11 - of
56:12 - writing java c something like this
56:16 - i can always give a sudo to compile my
56:20 - program so just write sudo in front of
56:23 - java c and if you are on windows most
56:25 - probably you
56:26 - won't be needing the sudo command so
56:29 - just skip this sudo command if you are
56:31 - on windows
56:32 - right so i'm going to save this once
56:35 - again
56:36 - and i'm going to build my program so
56:38 - this button is going to build your
56:40 - program
56:41 - immediately so it will not wait for the
56:43 - pre periodic trigger
56:45 - to uh you know build your jenkins job it
56:48 - will
56:48 - build your jenkins job immediately so
56:51 - you can see now
56:52 - our job shows a blue uh
56:55 - ball this means the last build
56:59 - was successful so let's go inside
57:02 - this build and then go to the console
57:04 - output
57:05 - and you can see now it prints hello
57:07 - world right
57:08 - so once again i'm going to go to my job
57:12 - and you can see
57:14 - previous all the previous jobs have
57:16 - failed
57:17 - because we haven't provided jenkins the
57:20 - pseudo
57:21 - privileges but now you can see this is
57:24 - the periodic bill which has
57:26 - been started and it's successful so
57:29 - in this section you can see uh the times
57:32 - at which your bill started and what was
57:35 - the status of
57:36 - build using the color of these balls
57:40 - and when you go on the main page when
57:43 - you click on jenkins here
57:45 - you will be able to see blue ball here
57:48 - which means
57:49 - that last build was successful and when
57:53 - you see uh
57:54 - this kind of rainy cloud here
57:57 - and you when you hover over this cloud
57:59 - you will see
58:00 - the status of last five bills
58:04 - so you can see it says build stability
58:06 - three
58:07 - out of last five bills failed
58:10 - right and when i run this build
58:14 - few times once again so when i want to
58:16 - just
58:17 - run this jenkins job five times
58:21 - so that the last five builds will be
58:24 - successful
58:25 - so you can see four out of five are
58:28 - now successful and now you can see
58:31 - this icon has changed so now uh the icon
58:35 - is like sunny and little bit cloudy and
58:38 - it says
58:39 - uh one out of five build have failed
58:42 - right
58:42 - so it shows the last five build and one
58:45 - once
58:46 - your last five bills are successful
58:49 - or were successful then you will see
58:52 - the whole sun here so i'm going to
58:54 - refresh this
58:55 - page and i'm going to go to the build
58:58 - here
58:59 - and let's see if the build has been
59:02 - started or we will start it manually
59:04 - using build now button
59:06 - and it's going to uh start the build and
59:09 - you can see
59:10 - the last five builds are successful now
59:13 - and when i go to the jenkins homepage
59:15 - you can see this bright sun here and you
59:18 - can see
59:19 - the message here which says no recent
59:21 - build
59:22 - failed so here this uh
59:25 - icon always so shows the status of
59:28 - last five build and this will show
59:32 - uh if your job is in progress or it's
59:36 - already uh is failing or
59:39 - last build was successful if it's blue
59:42 - now in this table you will also see some
59:44 - other sections here
59:46 - so this is the section where last build
59:49 - occurred so for example 8.9 seconds ago
59:53 - last build was occurred and this was the
59:56 - build number
59:57 - 14 and last failure was three minutes
60:00 - ago
60:01 - which was in build number nine and by
60:04 - default this
60:05 - status doesn't refresh by itself
60:08 - there is a small option here on the
60:11 - right hand side
60:12 - top and you can click on this which says
60:15 - enable auto refresh
60:17 - and this is going to enable the auto
60:19 - refresh
60:20 - after a few seconds so you will be able
60:22 - to see the most uh
60:24 - refreshed status here okay so
60:28 - you can see it refreshes after a few
60:30 - seconds
60:31 - and you can see the status last build
60:34 - last success was
60:35 - 47 seconds ago and last failure was 4
60:38 - minutes 47
60:39 - seconds ago so this is how you can
60:41 - create your first jenkins job
60:44 - hey guys welcome to the next video on
60:46 - jenkins tutorial for beginners
60:48 - in the last video we have seen how we
60:51 - can create our first
60:52 - junkies job now in this video we are
60:55 - going to see
60:56 - how we can configure our jenkins job
60:59 - so that we can run our jenkins job
61:01 - remotely
61:03 - or how to chain the job execution
61:06 - so let's see them one by one so
61:10 - i have created this hello world jenkins
61:13 - job
61:13 - in the last video so i'm going to click
61:16 - on this
61:17 - job and then i'm going to click on
61:20 - configure
61:20 - to change the configuration of this
61:23 - jenkins
61:24 - job now when you reach in the
61:25 - configuration area just click on build
61:28 - triggers and what this build
61:30 - periodically trigger was doing is
61:33 - it was triggering our job
61:36 - in a periodic way depending on the crown
61:39 - scheme we have provided here now let's
61:42 - say we want to trigger our job
61:45 - remotely then for that we can choose
61:48 - this option which says trigger
61:50 - build remotely so i'm going to choose
61:52 - this check box
61:54 - and i'm going to uncheck this build
61:56 - periodically
61:58 - check box and here you can see
62:01 - this option which says authentication
62:03 - token
62:04 - and you will also see this message which
62:07 - is a very helpful message
62:09 - which says use the following url to
62:11 - trigger
62:12 - build remotely so this will be the url
62:16 - format you can use to trigger the build
62:19 - remotely
62:20 - so i'm going to copy this uh url and i'm
62:24 - going to paste it
62:25 - into the next tab so here first
62:29 - option here is jenkins url so here you
62:32 - can give
62:33 - the ip address of your server for
62:36 - example
62:36 - right now it's a local host so i can
62:38 - just write
62:40 - localhost and then the port is port
62:43 - 8080 or if you have the ip address
62:46 - of this server then you can write the ip
62:50 - address of this server
62:51 - so for the localhost instead of
62:52 - localhost i can just write 127.0.0.1
62:57 - or any other server ip address on which
63:00 - this server is working on now the next
63:03 - thing here
63:04 - is the token name in capital so this
63:08 - token name
63:09 - is i'm going to go to my jenkins job
63:11 - configuration
63:13 - and this token name is the token name
63:16 - which you will provide here
63:18 - so for example you can provide any
63:21 - complex password or anything here
63:25 - which will be your token name so let's
63:27 - say i
63:28 - just right here one two three four five
63:31 - and i'm going to save my configuration
63:35 - and then i'm going to go to my uh
63:38 - next tab and instead of the token name i
63:41 - will just provide the token name which i
63:43 - have given
63:44 - for my jenkins job which is one two
63:46 - three four five
63:47 - right now let's go to the jenkins job
63:51 - once again and i'm going to go to the
63:53 - home page of jenkins
63:54 - here you can see the last success was in
63:58 - build 24 and when i click on this
64:02 - job you will be able to see the build
64:04 - history so
64:05 - the last job was
64:08 - 24. so let me go to the next tab and i'm
64:11 - going to just
64:13 - give this url and then press enter which
64:16 - is going to execute
64:17 - my job so i'm going to just give
64:21 - my username and password here once again
64:25 - and then i'm going to just say remember
64:27 - me for this computer and then log in
64:29 - and once you do this and when you go to
64:33 - the junkies job and when you refresh it
64:36 - you can see the last build was
64:39 - built 25 which is triggered
64:42 - using this url okay so
64:46 - once again i'm going to refresh it and
64:49 - i'm going to just give this url once
64:52 - again on the next tab
64:54 - and then press enter and you will see
64:57 - in few seconds the new build occurs
65:00 - so this is how you can trigger your
65:02 - build remotely
65:04 - now the next thing i want to show here
65:06 - is how we can chain our jenkins job
65:09 - execution
65:10 - so let's say we have a scenario that
65:13 - we have created this jenkins job which
65:17 - was compiling the java program
65:20 - and running it right so let's say we
65:23 - want to create few jenkins job
65:25 - one jenkins job we want to create is to
65:28 - build
65:28 - our java program second
65:31 - is to run our java program and in the
65:34 - third jenkins job let's say we want to
65:36 - just display the success
65:38 - message so for that we need to create
65:41 - two more jenkins job and first of all we
65:44 - need to change the name of
65:46 - this jenkins job which is hello world so
65:49 - we
65:50 - will just rename it to uh
65:53 - hello world build first of all and then
65:55 - we will create hello world
65:57 - run jenkins job and hello world
66:00 - success message chenky's job or hello
66:03 - world message
66:04 - job so let me show you how you can
66:06 - rename your
66:07 - jenkins job so you can see the option
66:10 - here
66:10 - rename which you can use to rename your
66:13 - junkies job
66:14 - so instead of using hello world jenkins
66:16 - job name
66:17 - i want to rename it as hello world build
66:20 - so i'm going to just write hello world
66:22 - build and then i'm going to just
66:26 - click on rename which is going to rename
66:29 - my jenkins job to hello world
66:31 - build now let's create two more jenkins
66:34 - job
66:34 - one is hello world run so i'm going to
66:37 - just
66:38 - click on new item and here i'm going to
66:41 - give the name of my junkies job this
66:43 - will be the hello world
66:45 - run now one more way of creating the
66:47 - jenkins job
66:48 - if the jobs are relatively similar
66:52 - then you can copy the configuration of
66:54 - the old jenkins job
66:56 - into the new jenkins job using a copy
66:59 - feature
67:00 - and when you scroll down here you will
67:03 - see this option which says
67:05 - copy from and here we can just write
67:08 - hello world build which is the jenkins
67:10 - job
67:11 - from which we want to copy the
67:13 - configuration
67:14 - to hello world run job and when you
67:17 - click
67:18 - ok all the configuration of hello world
67:21 - build will be copied to this jenkins job
67:25 - which is hello world
67:26 - run and here we can just change the
67:30 - description so
67:30 - this job is only going to run the
67:34 - java program so i'm going to just change
67:36 - it to run java program
67:38 - and when i go down a little and in here
67:42 - i'm going to remove this line
67:43 - because this line was compiling or
67:46 - building
67:47 - our java program and this we are already
67:51 - doing
67:51 - in the hello world build change job
67:55 - and this is hello world run so i'm going
67:56 - to just remove this
67:58 - and i just want to run the executable
68:00 - file which was created by hello world
68:02 - build
68:03 - and this is the hello world run jenkins
68:06 - job
68:06 - and now i'm going to click on build
68:08 - triggers and instead
68:10 - of using this option which says trigger
68:12 - build remotely
68:14 - we want to build our jenkins job
68:17 - after the success of
68:20 - the previous job which is hello world
68:23 - build
68:24 - so i'm going to just uh copy the name of
68:27 - the jenkins job
68:28 - after which i want to execute this hello
68:31 - world
68:32 - run jenkins job so after hello world
68:34 - build
68:35 - i want to run hello world run jenkins
68:38 - job
68:39 - so just check this check box and just
68:41 - write the name of the jenkins job
68:43 - after which you want to execute your
68:46 - hello world
68:47 - run jenkins job and then i'm going to
68:49 - just
68:50 - save my configuration and i'm going to
68:53 - go to the home page
68:55 - and you can see there are two jobs now
68:57 - one is hello world build
68:59 - and another is hello world run i need to
69:02 - change the configuration of
69:03 - hello world build also because now we
69:06 - just want to
69:07 - build our java program using this
69:10 - jenkins job and not
69:12 - run it so i'm going to just remove the
69:14 - description here for
69:15 - run i just want to build java program
69:18 - and in the build trigger let's say
69:20 - we want to uh just trigger this build
69:23 - remotely
69:24 - or we will just click on the build now
69:26 - button and
69:27 - execute the build so i will not change
69:29 - this
69:30 - and when you scroll down a little from
69:32 - here i will just remove
69:34 - this java hello world command because
69:36 - this we are doing in
69:37 - hello world run jenkins jobs so i'm
69:40 - going to just
69:41 - remove this last command and save this
69:45 - so now both the jenkins job have been
69:48 - created you can create one more
69:50 - jenkins job and chain it in a similar
69:52 - fashion so let's create
69:53 - one more jenkins job and this jenkins
69:56 - job i want to name it as hello world
69:58 - let's say message okay so this is going
70:02 - to just print the message
70:04 - uh of the execution
70:07 - and i'm going to just say freestyle
70:10 - project
70:10 - and i'm going to just say okay i'm not
70:13 - going to copy the configuration
70:14 - and in the description i'm going to just
70:16 - display
70:18 - message and in the source code
70:21 - code management i will leave it as none
70:24 - in the build triggers
70:26 - this will be executed after the hello
70:29 - world
70:29 - run jenkins so i'm going to just check
70:31 - on this
70:32 - check box which says build after the
70:34 - other project build
70:35 - and here i'm going to just write hello
70:38 - world
70:39 - run i'm going to choose this option
70:41 - which says hello world run
70:43 - so this jenkins job will run after hello
70:47 - world
70:47 - run jenkins job is executed and now i
70:50 - will just scroll down a little
70:51 - and in the build section i will just
70:54 - choose
70:54 - execute shell and here i will just echo
70:58 - something so i will just write
70:59 - echo and in the double quotes i will
71:02 - just
71:03 - uh print something which i can recognize
71:06 - so i'm going to just
71:08 - print these echo messages
71:11 - and here in between the lines
71:14 - i want to just say success let's say
71:18 - and now i will just save my job
71:22 - and when i go to the home page now we
71:25 - have three
71:26 - jenkins job hello world build hello
71:28 - world run
71:30 - and hello world message so let's just
71:32 - start the build of hello world bill
71:34 - jenkins job
71:36 - so for that i can just click on this
71:38 - little arrow here
71:39 - and i can just say build now which is
71:42 - going to start the build of hello world
71:44 - bill
71:45 - and you will see after some time you can
71:48 - see
71:49 - this is in the queue so hello world run
71:52 - is in the queue so
71:53 - as soon as my hello world build is
71:56 - completed
71:57 - the hello world run will be executed and
72:00 - now you can see
72:00 - hello world messaging is in the queue
72:03 - because hello world
72:04 - run is completed so hello world message
72:08 - will be executed after the execution of
72:10 - hello world
72:11 - run and when i refresh this page now you
72:14 - can see
72:15 - here build number 27 last build was
72:18 - built number 26
72:20 - and then after this build was successful
72:23 - hello world run jenkins job was
72:26 - triggered
72:27 - and you can see the build number one was
72:29 - triggered
72:30 - and after the success of hello world run
72:34 - hello world message was triggered which
72:36 - is triggered by the success
72:38 - of the hello world run and let's see the
72:42 - messages also so let's go to the hello
72:45 - world bill first of all
72:47 - and then let's see build number 27 and
72:49 - console.log
72:51 - and just build the hello world java
72:54 - program and
72:55 - it says success and now let's go to the
72:58 - hello world run
72:59 - which is going to just execute our
73:01 - executable file
73:02 - and let's see in the console it prints
73:05 - hello world
73:06 - it execute our hello world executable
73:08 - file using java hello world command
73:11 - and in the last uh jenkins job which is
73:15 - going just to print some message we can
73:18 - just go here hello world message
73:20 - and then when we go to the console
73:22 - output of this you can see
73:24 - this echo command and it echoes success
73:28 - so this is how
73:28 - you can chain your job execution
73:32 - on success or failure of the last build
73:36 - hey guys welcome to the next video on
73:38 - jenkins tutorial for beginners
73:40 - in this video we will see how we can do
73:42 - the jenkins
73:43 - integration with git and github
73:47 - so let's get started i'm going to
73:48 - minimize the browser first of all
73:50 - and if you are following this video
73:52 - series in the last videos
73:54 - we have created this java samples
73:57 - project
73:58 - and inside this java samples project we
74:01 - have
74:01 - a hello world.java file and this is the
74:05 - output
74:05 - of that file now let's say we want to
74:09 - commit
74:10 - this project to git and then we want to
74:13 - push
74:14 - the changes to the github repository
74:17 - first of all i'm going to show you how
74:19 - you can do it and then
74:21 - we will see how we can create a jenkins
74:24 - job
74:24 - out of it now if you are new to git and
74:27 - github
74:28 - in the last video i have shown you how
74:30 - you can install git
74:31 - and configure github on your ubuntu
74:34 - operating system so just watch the last
74:36 - video of
74:36 - this series and you will be good to go
74:40 - so for committing my file on git uh let
74:43 - me open the terminal first of all so i'm
74:45 - going to just press ctrl alt t
74:47 - to open the terminal and first of all i
74:49 - will
74:50 - just cd to my java samples directory
74:54 - and in order to initialize a git project
74:57 - in this directory
74:58 - i can just give this command git init
75:01 - and then press enter and this directory
75:05 - will be added to the git
75:08 - now in order to see the status of all
75:11 - the file i can
75:13 - just give this command get status and
75:16 - then press
75:16 - enter and you will see this message
75:18 - which says
75:19 - untracked file because we haven't added
75:22 - and committed these files to git so
75:25 - let's do that so
75:26 - to add these files to git we just need
75:29 - to
75:30 - write git add and the file names one by
75:33 - one
75:34 - helloworld.class space helloworld.js
75:38 - and this will add both these files
75:41 - to the git and let's do git status was
75:44 - once again and now you will see both the
75:47 - files and the message is
75:49 - changes to be committed so let's commit
75:53 - these files so to commit on git
75:56 - you just need to give this command git
75:58 - commit
75:59 - minus m to give the message and
76:02 - here you can give any message which you
76:05 - want to provide
76:06 - for your commit so for example first
76:09 - java comment let's say
76:12 - or any other message which you like to
76:14 - give to your comment
76:16 - and once again we can commit these files
76:19 - one by one so just give the
76:21 - first file name and then space and then
76:24 - give the second file name
76:25 - and then press enter which is going to
76:28 - commit these files
76:30 - to the git now let's check the status
76:32 - once again so get status
76:35 - and you can see nothing to commit
76:37 - working
76:38 - tree clean so now we have committed
76:40 - these files to git
76:42 - but in order to push them to github we
76:44 - need to create a repository on github
76:47 - so i'm going to go to the browser and
76:50 - i'm going to go to
76:51 - github.com and log in with my
76:53 - credentials there
76:55 - and here i will just click on start a
76:58 - project
76:58 - let's say i just want to give the name
77:01 - java hello
77:02 - world and then you can give the
77:04 - description here which is optional
77:06 - but for now i'm going to leave
77:08 - everything as default and i'm going to
77:10 - just press
77:11 - on create repository which is going to
77:13 - create a blank
77:14 - repository for me now in here you will
77:17 - see uh
77:18 - two help messages one is to create a new
77:21 - repository
77:22 - on the command line and other is to push
77:25 - an existing repository from the command
77:28 - line
77:28 - so we have already created our git uh
77:32 - repository so we will push this
77:34 - repository
77:35 - using command line so we will choose the
77:37 - second option which is this one
77:39 - and for that we need these commands so
77:41 - i'm going to just copy
77:43 - the first command which is going to just
77:46 - add
77:46 - the remote origin to my project so
77:50 - this is my project and i have already
77:52 - committed these two files to my git
77:55 - and to add it to my remote origin
77:58 - i just need to give this command git
78:01 - remote add origin
78:02 - and the url of your git repository which
78:06 - is
78:06 - this one or simply you can copy this
78:10 - command
78:10 - which will be enough so once you have
78:14 - copied and pasted this command just
78:15 - press enter so this command is
78:17 - successful
78:18 - now let's copy the second command in
78:20 - order to push our changes
78:22 - to the repository so i'm going to just
78:24 - copy the second command
78:26 - and go to the terminal just right click
78:29 - paste
78:29 - and then press enter and this is going
78:32 - to
78:32 - push our changes to the github first of
78:35 - all we need to
78:36 - give our github credentials here
78:40 - so first of all the username and then
78:42 - press enter
78:44 - and second is the password and then
78:47 - press enter
78:48 - and now your files will be
78:51 - pushed to your repository so once you
78:55 - have done that
78:56 - i'm going to just go to uh this
78:58 - repository which i've created
79:01 - and i will see these two files which i
79:03 - have committed to the get
79:05 - in this folder which i'm working on
79:08 - so once you have created your repository
79:10 - on github
79:11 - you can go to jenkins and let's create a
79:14 - new project here
79:15 - and here i'm going to just give the same
79:18 - name which
79:19 - my repository has which is java hello
79:21 - world
79:22 - and then i'm going to choose the
79:24 - freestyle project and i'm going to click
79:26 - ok and in the description i will just
79:29 - say java hello world example
79:31 - and rest everything we will leave as
79:33 - default and now click on source code
79:36 - management and because we are working
79:38 - with git so now we will click
79:40 - on the get option and here
79:43 - you can give your git repository url
79:47 - so to get the git repository url you can
79:51 - just uh
79:52 - go to your repository and click on this
79:55 - green button which says clone or
79:57 - download and then
79:58 - just copy this url from here and then
80:02 - paste this url here which is
80:05 - repository url and now we will scroll
80:08 - down a little
80:09 - and here it says branches to the build
80:13 - so by default you can see there is only
80:16 - one branch
80:17 - in our git hub repository which is
80:20 - master branch so we will leave this
80:23 - as default but if you want to have
80:27 - multiple branches in your github
80:30 - and then you want to clone for example a
80:33 - development branch or any other branch
80:36 - you just need to give the branch name of
80:39 - your repository here which you want to
80:41 - clone
80:42 - okay so right now we only have the
80:44 - master branch so we will leave this as
80:46 - default
80:48 - and next option is repository browser so
80:51 - we will also
80:52 - leave it as default and now we will go
80:54 - to the build
80:55 - triggers and for now i will leave
80:57 - everything as default
80:59 - but we will see how we can choose this
81:02 - option which says poll
81:03 - scm or other get option in a moment
81:07 - but first of all i want to show the
81:08 - simple way of
81:10 - just cloning and building your jenkins
81:12 - job so just
81:14 - leave everything as default in your
81:16 - build triggers
81:17 - and then build in environment also i'm
81:20 - going to leave everything as default
81:22 - now in the build option we will choose
81:24 - execute
81:25 - shell here and here we will give the
81:27 - commands to compile
81:29 - our helloworld.java program so we will
81:32 - just say
81:33 - java c helloworld.java which is
81:38 - our java file which is this one
81:41 - so we want to compile this one and then
81:44 - we want to
81:45 - uh just run this file so for running
81:49 - we will just use java hello world and by
81:52 - now i think you already know what
81:54 - these commands are doing and let's go
81:58 - to the build environment once again
82:01 - so here in the build environment you
82:03 - will see a few options so first option
82:05 - is delete
82:05 - workspace before build start and this
82:08 - is important for us so i'm going to show
82:11 - you
82:12 - what this is in a moment but first let
82:14 - me
82:15 - save this job first of all and once your
82:18 - job is
82:19 - created let's go to the home page
82:23 - and in here let's build this uh job
82:26 - so i'm going to just click on this arrow
82:28 - button and i'm going to just say
82:30 - build now and now the build of
82:33 - this job will start we are going to just
82:36 - go inside
82:37 - this java hello world and you can see
82:39 - here our build is successful so i'm
82:41 - going to go inside
82:42 - this build and i'm going to go to the
82:44 - console output
82:45 - and here you will see more details
82:49 - so first of all you will see the
82:51 - location
82:52 - where your github repository is cloned
82:56 - and this is the location where your
82:58 - github repository is cloned right
83:01 - and you can see in the next command it
83:03 - has cloned
83:05 - our github repository and after the
83:07 - cloning
83:09 - these two command has been executed so
83:11 - first
83:12 - was the java c helloworld.java which
83:16 - is used to compile our hello world
83:19 - program
83:20 - and then java space hello world which
83:22 - have
83:23 - resulted in this output which is hello
83:26 - world and our job is
83:27 - finished with success so this is how you
83:31 - can
83:31 - clone your repository and you can
83:35 - just build your job using github
83:37 - repository now let's go to
83:39 - this location which is the default
83:41 - jenkins location
83:43 - where your repository has been
83:46 - cloned okay so i'm going to just
83:49 - just copy this path from here and i'm
83:52 - going to go to the terminal
83:54 - and open the next terminal and i'm going
83:56 - to just give cd
83:57 - and whatever path you have copied and
84:00 - i'm going to just press
84:01 - enter here and i'm going to do ls here
84:04 - and you can see
84:04 - both of your file are here so
84:08 - hello world.class is there and
84:10 - helloworld.java
84:12 - is there now let's see if some more
84:13 - configuration options
84:15 - for our jenkins job so i'm going to go
84:18 - to my
84:18 - janky's job and i'm going to go to the
84:21 - configuration now
84:23 - and once again in the configuration
84:26 - i'm going to go to the build environment
84:28 - and i'm going to choose this option
84:30 - which says
84:31 - delete workspace before bill start
84:35 - so this is going to delete this
84:38 - workspace before our bill starts so
84:41 - this is the workspace of jenkins
84:45 - and if you choose this option this is
84:47 - going to delete
84:48 - the workspace before this jenkins job
84:51 - starts
84:51 - right so i'm going to save the job and
84:54 - build it once again
84:56 - and hopefully this will also be
84:59 - successful and i'm going to go to my job
85:02 - and then
85:03 - see the console output and you can see
85:06 - uh
85:06 - building in workspace once again and
85:09 - then
85:09 - first of all it has deleted our
85:12 - workspace
85:13 - and once again cloned our repository
85:16 - okay so this is the extra step when you
85:18 - choose the delete
85:19 - workspace option now let's see
85:23 - some more configuration options so i'm
85:25 - going to go to the configuration
85:27 - of my jenkins job and this time i'm
85:30 - going to go to
85:32 - my build triggers and in the build
85:35 - triggers i'm going to choose this option
85:37 - which says
85:38 - poll scm and this option works similar
85:41 - to
85:42 - the build periodically option which
85:44 - works
85:45 - on the chrome mechanism so if you give
85:48 - five asterisks here this
85:52 - is going to pull every minute to your
85:54 - repository for any changes
85:56 - and if you have done any changes to your
85:58 - github repository
86:00 - this is going to detect your changes and
86:03 - if
86:03 - there is any change then it's going to
86:06 - build
86:07 - uh your job once again so let's uh
86:11 - save this job so to trigger this job now
86:14 - what we need to do is we need to do some
86:17 - changes
86:18 - to our github using git
86:21 - so in this project what i'm going to do
86:24 - is
86:24 - in my java samples project where i have
86:27 - committed my
86:28 - java hello world files using git i'm
86:31 - going to do ls once again
86:33 - and you can see there is no read me into
86:36 - my repository so i'm going to add
86:38 - a readme file into my repository so to
86:41 - do that
86:42 - i'm going to use the touch command so
86:44 - just write touch
86:46 - read me dot md which is the readme file
86:50 - name and then press enter and do ls
86:53 - and you can see this readme.md is
86:55 - created
86:56 - and to edit this file i'm going to just
86:59 - write
86:59 - g edit g edit is the editor you can
87:03 - choose any editor
87:04 - you want and then the file name which is
87:06 - readme.md
87:08 - and once this editor is open
87:12 - i will just copy and paste some readme
87:15 - content
87:16 - into this readme.md file
87:20 - and now i'm going to just give the
87:23 - gate status command so just give this
87:25 - git status
87:27 - and you can see this there is one file
87:29 - which is untracked
87:31 - so we are going to add this to the get
87:34 - first of all so get
87:35 - add and the file name once again and
87:38 - then i'm going to commit this file
87:40 - once again do the get status and then
87:44 - let's get commit so get commit
87:47 - minus m and in the message you can just
87:50 - write
87:52 - read me added and
87:55 - then the file which you want to commit
87:57 - which is readme.md and then press
88:00 - enter and now we just need to push our
88:02 - changes to github
88:04 - and for that we will use the get push
88:06 - minus u
88:07 - origin master command and then press
88:10 - enter
88:10 - and this will push our changes to github
88:13 - and once again give the
88:15 - github credentials and the password and
88:17 - then press
88:18 - enter and our changes are pushed
88:21 - to github so you can see here that
88:24 - this readme file is there and all the
88:27 - content of readme file is visible now
88:30 - and on the jenkins job when i refresh
88:33 - this
88:33 - you will see this third job is triggered
88:37 - and you can see it's working so you can
88:41 - just click on the third job and i will
88:44 - go to the console output
88:46 - and you can see it just says started by
88:50 - scm change which means it is started by
88:53 - the change
88:54 - in our repository which is polled
88:57 - every minute and once this
89:01 - change is detected then it's going to
89:04 - start
89:05 - the cloning of your git repository and
89:08 - your junkies job will be billed
89:10 - after that so this was the option to
89:13 - pull
89:13 - your github repository every one minute
89:16 - and if the changes are detected then
89:20 - it's going to trigger the build and
89:23 - your jenkins job will be executed
89:26 - so this is how you can integrate git and
89:28 - github with jenkins
89:31 - hey guys welcome to the next video on
89:33 - jenkins tutorial for beginners
89:35 - in this video i'm going to show you how
89:37 - we can create users
89:39 - in jenkins till now we only have one
89:42 - user
89:43 - which is admin user which we have
89:45 - created at the time
89:47 - of installation of jenkins now generally
89:50 - in
89:51 - teams we have different users with
89:54 - different roles so for example
89:57 - a software team can have a team lead
90:00 - which can be a
90:01 - admin then we have developers
90:04 - qa guys or testers or we can have the
90:08 - operations guys or
90:09 - devops guys who are responsible for the
90:12 - provisioning
90:13 - and the deployment of the software so
90:16 - for that we need to give the credentials
90:19 - to
90:20 - those users so they can log in with
90:23 - their account and then they will be able
90:25 - to configure and build
90:27 - their own jobs so let's see how we can
90:29 - create users and jenkins
90:31 - so just go to the home page of jenkins
90:35 - and then just click on manage jenkins
90:38 - and once this many jenkins page opens
90:42 - just scroll down until you have found
90:45 - the section which is called manage
90:49 - users so just click on the manage users
90:52 - and you can see there is only one user
90:56 - is there till now so we will create a
90:58 - new user
90:59 - to create a new user you just need to
91:01 - click on create user
91:04 - and then you just need to give the
91:06 - username of that user you can say
91:09 - user one and the password
91:13 - of that user and this password the user
91:16 - will be able to
91:17 - change later so you can just provide the
91:20 - initial password here
91:22 - and then just provide the confirmation
91:25 - of the password
91:26 - and then provide the full name of the
91:28 - user for example the user
91:30 - one once again and then provide the
91:33 - email address of the user
91:35 - and then click create user this is going
91:37 - to
91:38 - create the new user let's create one
91:41 - more user
91:42 - so this time this user will be user
91:46 - 2 and then i'm going to quickly provide
91:49 - the
91:50 - password confirm password and then the
91:53 - full name this will be user 2 for
91:57 - example
91:58 - and then the email id and then create
92:01 - user which is going to create the user
92:03 - so now we have two users so
92:07 - you can see we are logged in with the
92:09 - admin user so let's log out
92:12 - and then let's login with the user one
92:15 - credentials so just give the username
92:19 - and password of that user and then just
92:22 - log in
92:23 - and now you can see i'm logged in with
92:26 - the user one account
92:28 - now you can see a little arrow icon here
92:32 - beside the user one name so you just can
92:36 - click on that and just click on the
92:39 - configure
92:40 - option and once you click on that here
92:43 - you can
92:44 - provide some more configuration option
92:47 - for this user one account so
92:50 - some description what is his title or
92:52 - what is his job
92:54 - and then api token so you can see
92:58 - the api token this we will discuss
93:01 - in the later videos how we can use the
93:03 - api token
93:04 - for the user but you should know you can
93:07 - find this api token here
93:10 - and then the credentials the email id
93:13 - and the password can be changed later
93:16 - from here so user1
93:18 - can change his password from here and
93:22 - also the ssh
93:23 - public keys so if this user has to
93:25 - authenticate
93:26 - with his keys then you can provide the
93:29 - public key
93:30 - here and if you want some help you can
93:33 - just
93:34 - click on this question mark and you will
93:38 - be able to see
93:39 - some hint here so this says list ssh
93:42 - public keys that are associated with the
93:45 - user
93:46 - these keys can be used for example by
93:49 - jenkins
93:50 - cli so jenkins cli we are going to
93:53 - see how we can use jenkins cli in the
93:56 - later videos so
93:57 - if you are curious about jenkins cli
94:01 - then we will see it later so this is how
94:03 - you can provide the configuration
94:05 - for the user in jenkins and after the
94:09 - configuration you can just save the
94:11 - configuration
94:12 - and then the configuration will be saved
94:15 - let me log out once again and let me
94:18 - login with the admin credentials once
94:20 - again
94:21 - and you can see the admin have the
94:24 - access to view
94:26 - all the project and when i log in with
94:28 - the
94:29 - user one account or user two account
94:32 - he also have the access to view all the
94:36 - project here in addition you can see uh
94:38 - the manage
94:40 - jenkins option for the user one also and
94:42 - when i click on that
94:44 - this user have all the access to change
94:48 - the configuration of the system or
94:51 - change the
94:52 - global security or he have the access to
94:54 - do
94:55 - anything which admin user can do
94:58 - and this can be a problem for example
95:01 - this user one is a developer
95:03 - and he has all the admin rights and this
95:06 - is sometimes not desirable the admin
95:09 - right must
95:10 - lie in the hands of the admin only so
95:14 - for that
95:15 - we have the option to install some
95:17 - plugins
95:18 - and then provide the access to the roles
95:21 - which this user have so we will see how
95:25 - we can
95:25 - install this plugin to assign roles or
95:29 - manage
95:30 - roles or manage users in the next video
95:34 - hey guys welcome to the next video on
95:36 - jenkins tutorial for beginners
95:38 - in this video we will see how we can
95:40 - install plugins
95:42 - in jenkins now this video will be the
95:46 - continuation
95:47 - of the last video in which we have
95:49 - created
95:50 - the users and we faced a problem
95:54 - the problem was all users were having
95:58 - same access to all the projects
96:02 - and we wanted to restrict the access
96:05 - to the user based upon his
96:08 - role so for that we wanted to
96:12 - install some plugin and
96:15 - this plugin we will install in this
96:17 - video
96:18 - so to install plugins in jenkins we need
96:21 - to go to
96:22 - the manage jenkins page so just click on
96:25 - manage
96:26 - jenkins and then when you scroll down
96:29 - you will be able to see this section
96:31 - which says
96:32 - manage plugins so just click
96:35 - on the manage plugins section and you
96:38 - will be able to see uh
96:40 - four tabs here first tab
96:43 - is for updates so whatever plugins
96:46 - are already installed at the time of
96:48 - installation
96:50 - you will see uh the update information
96:53 - of the plugins which have the updates
96:56 - so if you want to update for example
96:59 - this apache http components client
97:03 - plugin you can just check on this
97:06 - and then you can say download now and
97:09 - install
97:10 - after restart but we want to install a
97:13 - new plugin
97:14 - so we will go into this section which
97:17 - says available
97:19 - so in available section there are many
97:22 - plugins which are available
97:24 - and for now to restrict the access of
97:26 - the project
97:28 - to the users and groups we need to
97:31 - install
97:31 - a plugin called role based
97:34 - authentication
97:34 - strategy so you can just filter the
97:38 - these plugins
97:39 - using this search box so just write
97:42 - role for example and all the
97:45 - plugins will be shown which have the
97:47 - keyword role
97:49 - and there is only one plugin available
97:51 - which is role
97:52 - based authentication strategy and this
97:55 - is the plugin we want to install so we
97:57 - will check
97:58 - this check box and if you want to know
98:00 - more about this role-based
98:01 - authentication strategy plug-in
98:03 - i will right-click on this link and i
98:05 - will open this
98:07 - in the next tab on new tab
98:10 - and you will be able to see more
98:11 - information about
98:13 - this plugin so you can see this is the
98:16 - website
98:18 - plugins.jenkins.io role
98:20 - strategy and you can see about this
98:23 - plugin
98:24 - and you can see the introduction about
98:26 - this plugin so this plugin adds a new
98:28 - role role-based strategy
98:30 - to use and fasten user management
98:34 - so it can create global roles it can
98:37 - create project roles it can create
98:39 - slave roles and also assigning these
98:42 - roles
98:42 - to the user so here also
98:46 - you will be able to find more
98:47 - information about this plugin
98:49 - and how to use this plugin also you will
98:52 - be able to see the documentation
98:54 - about this plugin when you scroll down
98:58 - now there are two ways of installing
99:00 - plugins
99:01 - one way is to search in your jenkins
99:04 - in the available tab and you will be
99:07 - able to find the plugin
99:09 - and then we will click this button which
99:11 - says
99:12 - download now and install after restart
99:16 - or the the second way of installing the
99:19 - plugin
99:19 - is i am going to show you so for example
99:22 - we want to
99:23 - install this dependency which says
99:25 - metrics authentication strategy i am
99:27 - going to
99:28 - open this in the next tab and in this
99:30 - tab you will be able to
99:32 - see when you scroll uh down the latest
99:35 - release of this plugin so i'm going to
99:38 - click on the latest release
99:40 - which is going to download the dot hpi
99:43 - file so this
99:44 - uh plugin is called matrix out dot
99:47 - hpi file is the plugin right so we are
99:51 - going to save this uh plugin
99:53 - and once this file is downloaded this
99:56 - hpi file is downloaded
99:58 - we will go to the jenkins and you will
100:00 - be able to see this advanced
100:02 - tab here and in the advanced tab when
100:04 - you scroll down a little
100:06 - you will be able to see this option
100:08 - which says upload
100:09 - plugins and you will be able to
100:12 - just click on this button which says
100:14 - browse and then just select your hpi
100:17 - file and upload this file and in this
100:21 - way you will be able to install that
100:23 - plugin also
100:24 - now we are going to install our plugin
100:27 - using
100:28 - the jenkins in the available tab so i'm
100:31 - going to
100:31 - once again search for the role based
100:35 - authentication strategy i'm going to
100:38 - just check
100:39 - on this check box and i'm going to click
100:41 - on this button which says
100:42 - download now and install after restart
100:46 - and then you will be able to see this
100:48 - page which says
100:49 - installing plugins or upgrades and then
100:52 - it says role based authentication
100:54 - strategy
100:56 - download it successfully we need to
100:58 - restart
100:59 - our jenkins so we will just check on
101:01 - this check box
101:02 - which says restart jenkins when
101:05 - installation
101:06 - is complete so i'm going to just check
101:08 - on this check box
101:09 - so it's going to restart the jenkins
101:12 - once this plugin
101:13 - is installed so i'm going to wait for
101:15 - some time until this jenkins is
101:17 - restarted
101:18 - and now i can see this message which
101:20 - says please wait while jenkins
101:22 - is getting ready to work after the
101:24 - restart
101:25 - and now the jenkins has been restarted i
101:27 - think so we need to log in with
101:29 - our credentials and i'm going to say
101:32 - login
101:32 - and after i logged into the jenkins i'm
101:35 - going to go
101:36 - to the manage jenkins section so i'm
101:39 - going to click on manage jenkins
101:42 - and then i will go to the manage plugins
101:45 - section
101:47 - and then once the plugin is installed
101:49 - you will be able to see it
101:51 - in the installed tab so i'm going to
101:53 - click on installed
101:55 - and then i'm going to search for role
101:57 - based
101:58 - authentication strategy you can see uh
102:01 - this
102:02 - plugin here which says role based
102:04 - authentication strategy
102:06 - so this plugin is now installed so now
102:08 - we can use this plugin
102:10 - and this we will see in the next video
102:13 - how we can use the role based
102:15 - authentication strategy plugin to
102:18 - restrict
102:19 - jenkins project access to the users
102:22 - and group using roles hey guys welcome
102:26 - to the next video on jenkins tutorial
102:27 - for beginners
102:29 - in this video i'm going to show you how
102:30 - to restrict jenkins project
102:32 - access to the users and group using
102:36 - roles now this video will be the
102:38 - continuation of the last video in which
102:41 - i have shown you how to install
102:43 - the plugins in jenkins and we have
102:45 - installed the special
102:47 - plugin to restrict the project access
102:50 - to the user which was role based
102:52 - authentication strategy plugin
102:55 - so you can see in many jenkins when you
102:58 - go to the manage
102:59 - plugins and then you will go to the
103:03 - installed
103:03 - section here and you can search for
103:07 - role here and if you have in your
103:10 - installed section
103:11 - this plugin which is role based
103:13 - authentication strategy
103:15 - then this video will be beneficial to
103:18 - you
103:18 - otherwise you need to install this
103:20 - plugin so once you have this plugin
103:23 - installed
103:24 - let's start using this plugin to
103:26 - restrict the project
103:28 - access to the user so once again i'm
103:30 - going to go to the manage
103:32 - jenkins and first of all let me create
103:35 - some users
103:36 - so that we can restrict the project
103:40 - access to them
103:41 - so i'm going to go to the manage users
103:43 - first of all so right now i have
103:46 - admin user and i have one more user
103:49 - which is user
103:50 - dot let me create some more users so i'm
103:54 - going to create
103:55 - reuser.2 and then
103:58 - the password for user 2
104:02 - and the full name i'm going to just
104:04 - leave it as
104:05 - same user.2 and the email address
104:09 - and then create user and i'm going to
104:12 - create one more user
104:13 - user3 and the password and the full name
104:16 - user.3
104:17 - same i will leave it as default and then
104:20 - the email id so now we have
104:24 - three users user.1 user.2
104:28 - and user.3 now let's go to
104:31 - the manage jenkins once again
104:34 - and this time just go to the section
104:37 - called
104:38 - configure global security and once you
104:40 - are in configure global security section
104:43 - make sure that
104:44 - this option is already checked which is
104:46 - enable security
104:48 - and then just scroll down and in the
104:51 - authentication section
104:53 - you will see a new option here which is
104:56 - role based
104:57 - strategy this will appear after the
104:59 - installation of the plugin which was
105:01 - role-based authentication strategy
105:04 - so we are going to check this option
105:08 - and then save it so once you have
105:11 - checked the option role-based strategy
105:13 - in configure global security when you
105:16 - will scroll down
105:17 - now you will see a new option which is
105:20 - manage
105:21 - and assign roles so i'm going to just
105:23 - click on this option which says
105:25 - manage and assign roles and here we have
105:29 - three options
105:30 - manage roles assign roles and role
105:33 - strategy
105:34 - macros so i'm going to go to the first
105:36 - section here
105:37 - and here you will see the global roles
105:39 - global roles
105:40 - are the roles which are globally
105:43 - configured
105:44 - for example admin is a global role let's
105:47 - create a new global role
105:48 - for example employee is
105:52 - a global role we will just add it and
105:54 - for employees
105:55 - we just want to give the overall read
105:58 - access
105:59 - to the global role employee and we
106:02 - want to give the view access to
106:05 - the employee role and all other access
106:08 - we don't want to give for example
106:10 - credentials or agent creation or job
106:13 - creation
106:14 - for the employees uh for now i'm not
106:17 - giving any uh access
106:19 - to the employee role now when i scroll
106:22 - down a little
106:24 - you will see project roles so under this
106:26 - project role section
106:27 - you can provide the project based
106:30 - roles and authentication so for example
106:34 - we have a
106:35 - java developer role so i'm going to just
106:37 - say java
106:38 - hyphen developer and in the pattern
106:42 - you can provide the access of the
106:45 - jenkins job
106:46 - based upon this pattern to the java
106:48 - developer for examples so let's say any
106:50 - project which start with
106:52 - the keyword java is accessible to
106:55 - this role java developer so i'm going to
106:58 - just write
106:58 - the pattern of that which is java
107:02 - dot strix this means
107:05 - that any name any jenkins
107:08 - job name which starts with java will be
107:10 - accessible
107:11 - to this role which is java developer so
107:14 - i'm going to add this
107:15 - role and i'm going to provide
107:18 - all the access for this
107:21 - jenkins job to the java developer
107:27 - so now the java developer role is
107:29 - created
107:30 - let's create one more role which is for
107:34 - example we have
107:34 - intern in our team so i'm going to just
107:37 - write
107:38 - in turn and in turn will have the access
107:42 - to the projects which start with
107:45 - hello so all the project which starts
107:48 - with hello
107:49 - in turn will have the access to only
107:52 - those
107:52 - projects i'm going to just give the
107:55 - access
107:56 - to the role intern now let's add one
107:59 - more
107:59 - project role here for example tester
108:03 - so the tester will have only the access
108:07 - of the project whose name start
108:10 - with a test for example okay
108:13 - so i'm going to just add this tester
108:15 - role and then i will
108:17 - provide the access to these type of
108:20 - project to the tester
108:22 - so once these roles are created and you
108:25 - have given all the access
108:26 - for these project to the
108:30 - roles then you can save your
108:33 - configurations
108:34 - and we will verify this configuration by
108:36 - just going again to the manage role
108:38 - section
108:40 - and you can see employee role is there
108:43 - and our three project roles are there
108:45 - also
108:46 - which will have the access to these kind
108:49 - of
108:49 - patterns now i will just
108:52 - come out i will just click on manage and
108:55 - assign roles once again
108:56 - and this time i will go to the assign
108:59 - role section
109:01 - and in here in the global roles we only
109:03 - have the user admin here so we will add
109:06 - some more users here for example user
109:09 - dot
109:10 - one is the first user we will add
109:13 - and then user dot
109:16 - 2 is the second user and user dot
109:21 - 3 is the third user and
109:24 - let's say all of them are employees so
109:28 - the global role we are assigning to user
109:31 - one user two and user three
109:33 - is employees so none of them have the
109:35 - admin
109:36 - role now i will scroll down
109:39 - and here under item roles i will once
109:42 - again
109:42 - add the users first of all so user
109:46 - dot one and then user
109:50 - dot two and user dot
109:54 - three now let's say user one is a java
109:57 - developer
109:58 - user two is an intern and user three
110:02 - is a tester so i will just check the
110:04 - roles which is belonging to
110:06 - the user and then i will save this
110:10 - configuration once again and i will
110:12 - verify this by just
110:13 - going again into the assign roles and
110:16 - you can see
110:17 - uh user one user two and user three have
110:20 - the employee global role
110:23 - and user one is a java developer user
110:26 - three is a tester
110:27 - and user two is an intern
110:30 - now once you have done that i will just
110:33 - go
110:34 - to my jenkins home page and you can see
110:37 - i'm logged in
110:38 - as an admin so i can see
110:41 - every project here and when i log out
110:44 - here
110:45 - and i will just log in with user one
110:48 - credential
110:49 - and i'm going to log in and you can see
110:52 - user1
110:53 - was a java developer so user1 can only
110:57 - see
110:57 - the project which start with the keyword
111:00 - java so java hello world and java job
111:05 - i'm going to log out and now
111:08 - i'm going to log in with the user 2
111:11 - credentials so user.2 and the password
111:14 - and login
111:16 - and you can see user 2 was an intern
111:19 - right so user 2 will have the access to
111:21 - all the junkies job which start with the
111:23 - keyword
111:24 - hello so hello world build hello world
111:27 - message hello world
111:29 - run and let's see what
111:32 - project does user three have so
111:35 - user.3 and then i'm going to log in with
111:38 - his credentials
111:39 - and user 3 doesn't have any
111:42 - project because we don't have any
111:45 - jenkins job
111:46 - related to the tester so when i log in
111:50 - with
111:50 - the admin credentials you can see
111:53 - there is no jenkins job which start with
111:56 - the keyword test so let's create one
111:59 - jenkins job so i'm going to just click
112:01 - on new
112:02 - item and i'm going to just say
112:05 - test project
112:08 - 1 okay so test project 1 and
112:12 - it will be a freestyle project and i'm
112:14 - going to just click ok
112:16 - and in the configuration i will leave
112:18 - this configuration as
112:20 - blank because we just want to test this
112:22 - jenkins job if the user 3 has
112:25 - the access to this jenkins job or not so
112:27 - i'm going to just save this
112:29 - jenkins job and i will go to the home
112:32 - page once again
112:33 - so now we can see we have one new
112:36 - jenkins job we start with
112:37 - the keyword test so i'm going to log out
112:41 - once again and i'm going to
112:42 - log in with the user3 credentials
112:46 - and now you can see user 3
112:49 - have the access to the project which
112:52 - start
112:53 - with the keyword test so in this way you
112:56 - can use
112:56 - the role based authentication strategy
112:59 - plugin
113:00 - and in this way you can restrict the
113:03 - jenkins
113:04 - project access to the users and group
113:07 - using their roles hey guys welcome to
113:11 - the next video on jenkins tutorial for
113:13 - beginners
113:14 - in this video we will see how to do some
113:16 - of the basic
113:17 - configurations in jenkins using
113:21 - a section called configure system in
113:23 - many
113:24 - jenkins so when i click on manage
113:26 - jenkins
113:27 - there is a section called configure
113:29 - system
113:31 - and here we can do some of the basic
113:34 - configurations
113:35 - about jenkins so we will start from the
113:38 - top
113:39 - the first option here is home directory
113:42 - and you will see the location of
113:46 - your jenkins home directory in
113:49 - the file system so when i copy this path
113:53 - and when i open the terminal and i will
113:55 - ct
113:56 - to this path you will be able to see
114:00 - all the you know configurations file
114:03 - or jenkins related files are
114:06 - present inside this directory so you
114:09 - will see config
114:10 - dot xml file you will see jobs
114:13 - directories
114:14 - nodes directories plugins directories
114:17 - where all the plugins
114:18 - will be installed or the users directory
114:22 - and the workspace directory so all the
114:25 - configurations related to jenkins
114:28 - you can do here and when i click
114:31 - on this question mark here beside this
114:34 - option you will be able to see
114:37 - more information about this option so by
114:39 - default
114:40 - jenkins stores all of its data in
114:43 - this directory on the file system
114:46 - there are few ways to change the jenkins
114:49 - home directory
114:50 - so this is the procedure which is given
114:52 - here to change the home directory
114:54 - of this jenkins so if you have the good
114:56 - reason to change it
114:58 - you can follow these instructions to
115:00 - change the home directory
115:02 - now second option here is system message
115:06 - so this is the message you can show on
115:09 - the home page of jenkins
115:11 - so for example i can just
115:14 - write some message here this is
115:18 - my jenkins home page
115:21 - let's see okay and i will just save
115:24 - this option and when i save this option
115:28 - you will be able to see
115:29 - this message is displayed on the top
115:32 - of your home page above all the
115:36 - jenkins job so i will once again go to
115:39 - the configure system
115:41 - and this system message also supports
115:44 - the html tags now you can see
115:47 - a little section here which says plain
115:50 - text
115:51 - this is the support format which
115:54 - this box will support now we can change
115:58 - it
115:58 - to support the html so for that we need
116:01 - to go to
116:02 - the manage jenkins option once again and
116:05 - then go to the configure
116:06 - global security and inside the configure
116:10 - global security you will be able to find
116:12 - a section called markup formatter
116:16 - and by default it's a plain text here
116:19 - selected
116:20 - we can choose the safe html here and
116:23 - then
116:24 - we can just save this option and once
116:27 - you save
116:28 - this option we can just refresh
116:31 - this configure page and now
116:35 - you will see here safe html is displayed
116:38 - here so this is the default
116:40 - format which this message will support
116:43 - so for example now
116:45 - i can use the html tags here for example
116:49 - i want to just show this message
116:52 - in h1 tag so i can just use this
116:56 - h1 tag here h1 and then i can preview
117:00 - this message
117:01 - from here so i can just click here and
117:03 - this message will be displayed
117:05 - like this on my home page let me save it
117:08 - and let's
117:09 - verify this so you can see it's shown in
117:11 - the h1
117:13 - tags now this uh system message
117:16 - so this is how you can just display the
117:19 - system message here
117:21 - now the next option here is the number
117:23 - of executors
117:25 - and for example this number is 2
117:28 - by default that means that two
117:32 - jobs can run parallelly on this
117:35 - jenkins right if i can change it to five
117:38 - then
117:39 - it will allow the five jobs to run
117:42 - parallelly
117:43 - so you can change this number from here
117:45 - number of executors
117:47 - the next option is labels this is a
117:49 - little bit detailed
117:50 - concept when we use the
117:54 - master slave concept and nodes we will
117:57 - see how to use
117:58 - labels so i'm going to leave this for
118:01 - now
118:02 - we will see how labels work in the
118:04 - future
118:05 - lectures now the next section here
118:08 - is the usage and by default the usage
118:12 - here is use this node as much as
118:15 - possible
118:16 - because we only have one jenkins node
118:19 - which is
118:20 - this node that's why the default option
118:24 - is use this node as much as possible
118:26 - but when we will learn how to create
118:29 - nodes and how to
118:30 - provide labels to our nodes then
118:34 - later we will be able to choose this
118:36 - option which says only build jobs
118:38 - with labels expression matching this
118:41 - node so this
118:43 - we will learn later when we will see how
118:46 - to create nodes and how to
118:48 - assign labels to our nodes so
118:51 - for now i will leave it as default for
118:53 - more information you can just click
118:55 - on this question mark and you will
118:58 - see some more description about this
119:02 - usage section so controls how jenkins
119:05 - schedules built on this node
119:08 - okay so you can read more about this
119:11 - option here now the next option is
119:15 - the quite period now the quiet period
119:19 - it's in second i'm going to just click
119:21 - on the question mark once again
119:23 - and here it says when this option is
119:26 - checked
119:27 - newly triggered bills of this project
119:30 - will be added to the queue but the
119:32 - jenkins will wait
119:34 - for the specified period of time
119:37 - before actually starting the bill so
119:39 - jenkins
119:41 - will wait for example for five second
119:44 - before starting this
119:46 - build so sometimes for example you use
119:48 - the source code management system
119:50 - and your committing will take some
119:54 - time or when you push your code it takes
119:57 - some
119:57 - some time to uh you know get into
120:00 - your github repository or for any other
120:03 - reason for example your
120:05 - jobs takes some time to start
120:08 - you can specify this quiet period here
120:11 - so that your jobs or your build will
120:15 - start
120:15 - after this specified period so
120:19 - by default it's five but you can change
120:22 - it
120:22 - in future when you feel that your
120:24 - jenkins will need more time to start
120:26 - so just uh provide the quiet
120:29 - period here this will be in seconds so
120:32 - after five seconds
120:33 - your build will start after the
120:36 - triggering
120:37 - of this job now the next option here is
120:40 - scm checkout retry count
120:44 - so this is the option where for example
120:47 - you are
120:48 - using your scm source code management
120:51 - system
120:52 - let me go to the home page and let me
120:54 - show you one
120:55 - example so i will go into one uh
120:58 - chenky's job here and i will go to the
121:01 - configuration section here
121:03 - and then i will scroll down for
121:06 - the build triggers and you will see
121:10 - pole scm option here so when i select
121:12 - this pole scm
121:14 - or github hook trigger for gitz
121:17 - scm polling then
121:20 - this is the option for number of tries
121:23 - so
121:24 - this jenkins will try to connect to your
121:28 - github for example this much number of
121:32 - times
121:32 - right now it's zero but for example you
121:35 - set it to
121:36 - five then jenkins will try five time to
121:39 - connect to your github
121:41 - before giving or showing some error
121:44 - now the next option is restrict project
121:47 - naming so let's see this option also so
121:50 - by default it's
121:51 - default now you can choose the pattern
121:55 - option here or you can choose a role
121:58 - based
121:59 - strategy option here also so let's see
122:02 - what this pattern option do
122:04 - so i'm going to click on this question
122:05 - mark and you can see
122:07 - some description here which is define a
122:10 - pattern
122:11 - or a regular expression to check whether
122:14 - the job name is valid or not so for
122:16 - example
122:18 - i define some pattern here for the
122:20 - naming of
122:21 - my jenkins job so let's say i define
122:24 - java.astrix that means my jenkins
122:28 - job which i will be able to create
122:31 - will start from java and not
122:34 - any other keyword so let me save this
122:37 - option
122:38 - and once this is saved let me try to
122:41 - create
122:41 - a new genghis job and let's say i
122:45 - just you know give some name here
122:48 - and instantly you will see this message
122:51 - which says dab
122:52 - does not match the job name convention
122:55 - pattern which is
122:56 - java dot asterisk which means that your
123:00 - jenkins job name should start with this
123:02 - java keyword
123:03 - so let's say i will just start the name
123:06 - with
123:06 - java keyword and now i can see
123:10 - that there is no warning here okay any
123:12 - other pattern it's going to
123:14 - show this warning here okay
123:17 - so this pattern option you can use to
123:21 - give some kind of pattern for the naming
123:24 - for now i will
123:26 - just choose it as default so i'm going
123:29 - to
123:29 - just revert it back to the default
123:33 - option
123:34 - but if you want you can just change it
123:38 - to anything you want in the future okay
123:42 - now next section here is the global
123:45 - properties
123:46 - and in the global properties you will
123:48 - see uh two options here one is
123:50 - environment variables so here you can
123:52 - give all the environment variables which
123:54 - you want to give
123:56 - to your jenkins job globally for example
123:59 - so let's say i want to give
124:03 - let's say java home environment variable
124:06 - i can give it
124:07 - from here so i can give the value of
124:10 - this java home environment variable and
124:12 - the name
124:13 - uh from here okay or any other
124:17 - environment variable which you want to
124:18 - use in your
124:20 - jenkins job execution you can give it
124:23 - from here
124:24 - now the next option here is the tool
124:28 - location so this is the tool location so
124:32 - for example you want to use
124:33 - some tool let's say git so the binary
124:37 - path for this git you can give it
124:40 - from here now the next section here is
124:43 - the pipeline speed
124:44 - durability settings and this we will see
124:47 - in the future videos i'm going to skip
124:50 - this section for now and then you have
124:53 - the usage
124:54 - statistics option which will help make
124:57 - jenkins better by
124:58 - sending the anonymous usage statistics
125:02 - and crash reports to the jenkins project
125:05 - so if you want
125:06 - this option you can check it or uncheck
125:08 - it
125:09 - according to your needs and then next
125:12 - section is the time
125:13 - stamper system clock time format and
125:16 - elapsed time format this is the format
125:19 - which jenkins will support but you can
125:23 - see in the details you can support any
125:26 - other format
125:27 - which is uh given here so here you can
125:30 - just define the time format which you
125:33 - want to
125:34 - show now in the next section you will be
125:36 - able to
125:37 - see the jenkins location before that
125:41 - there is administrative monitor
125:43 - configuration
125:44 - and you will be able to see uh this
125:47 - option which says enable
125:48 - administrative monitoring and here you
125:51 - can see administrative monitoring are
125:54 - the warnings
125:55 - shown to jenkins administrator about the
125:58 - state of jenkins
126:00 - interface so you can check these options
126:03 - whatever warning you want to see so for
126:04 - example
126:06 - you want to see the dependency warning
126:08 - or you want to see
126:09 - the invalid plug-in warning or if you
126:12 - want to see the disk usage
126:14 - warning all the warnings you can set up
126:17 - from here by default every warning is
126:19 - selected
126:20 - but let's say if you want to skip some
126:22 - warning you can just
126:23 - uncheck this option and then this
126:26 - warning will not be shown
126:28 - to you let's go to the next option here
126:31 - which is the jenkins
126:32 - location by default we are using the
126:35 - local host but
126:37 - you can give any host name uh
126:40 - instead of this local host now next
126:43 - option is the
126:44 - admin email address you can provide your
126:47 - admin email address here and then you
126:50 - have the github
126:52 - server option so if you want to add some
126:55 - keys for your github server you can
126:59 - provide those keys or you can give the
127:02 - name of your github server here and then
127:04 - provide
127:05 - the github servers credentials from here
127:09 - we will see this later how we can do it
127:13 - and then you have the github enterprise
127:16 - servers so if you are using some private
127:18 - servers
127:19 - to host your repositories like github
127:22 - private
127:22 - repository then you can add the
127:25 - information about that
127:26 - here now the next section is the
127:28 - pipeline model definition this we will
127:31 - see when we will
127:32 - see the pipelines how pipelines works
127:35 - then you have the build time mount
127:37 - plug-in
127:38 - options so whatever plugin you have just
127:41 - installed or whatever plugins
127:43 - there is in your jenkins
127:46 - there are some options you can set for
127:49 - those plugins
127:50 - here for example so get plugin or
127:53 - subversion plugin shell plugin extend
127:56 - email notification plugin
127:58 - and any other you know information you
128:02 - can give
128:03 - it here so you have the email
128:05 - notification smtp
128:07 - server configuration you can do it from
128:10 - here
128:11 - so these are some of the basic
128:13 - configuration
128:15 - you can do for your jenkins as an
128:18 - administrator hey guys welcome to the
128:20 - next video on jenkins tutorial for
128:22 - beginners
128:23 - in this video we will see how we can
128:25 - build or test a simple maven project
128:28 - using jenkins so let's see how we can do
128:31 - it
128:32 - so what i have is i have a simple maven
128:35 - project
128:36 - inside my maven workspace directory
128:39 - and the name of my maven project is my
128:42 - app
128:43 - this my app project i have created using
128:46 - the
128:46 - maven website so once you are on the
128:50 - maven dot apache dot org
128:52 - you can just go to use section here and
128:56 - inside this use section you will be able
128:57 - to see
128:58 - this this five minute test and i have
129:01 - used
129:02 - all the commands here to create a
129:04 - project so
129:05 - this section i have used so i have used
129:07 - this command
129:08 - which uh created the my app
129:11 - directory where my maven project
129:14 - is there so if you want to follow along
129:17 - you can just
129:18 - give this command and then this my app
129:21 - directory
129:22 - will be created with the maven project
129:25 - so once you have this project let's
129:29 - open the terminal first of all and i'm
129:30 - going to just go to this directory
129:33 - and uh what we can do here is for
129:36 - example
129:37 - we can give mvn clean
129:40 - and test command and then press
129:43 - enter which is going to clean our
129:46 - project and then
129:47 - run the test inside this pavement
129:50 - project
129:51 - and you can see all the tests are runs
129:53 - and there is no failure
129:54 - and bill is successful so let's say we
129:57 - want to
129:57 - execute this clean and test goals using
130:01 - jenkins and first of all we want to
130:03 - check our code
130:04 - into github and then we want to for
130:07 - example
130:08 - clone the code from the github
130:11 - repository into our jenkins and then
130:14 - execute these goals how we can do it
130:16 - let's see
130:17 - so first of all for that i need to
130:20 - create
130:21 - a github repository so i will go to the
130:23 - github
130:24 - and i will log in with my credentials
130:26 - here and once you are logged
130:28 - in with your credentials i'm going to
130:29 - just click on this button which says
130:32 - start a project
130:33 - and in the repository name i'm going to
130:35 - just write my app
130:36 - and now i'm going to just leave
130:40 - everything as default and i'm going to
130:41 - just
130:42 - click on create repository so now my
130:44 - github repository is created
130:47 - and now you can see you have two options
130:49 - here one is
130:50 - create a new repository on command line
130:53 - and second
130:53 - is push existing repository from the
130:56 - command line
130:58 - so we will use the first option here
131:00 - first of all we will
131:01 - uh initialize the git into our project
131:04 - and then we will commit everything and
131:05 - then
131:06 - push it to our git repository so let's
131:09 - do that
131:10 - if you want help then you can just
131:13 - follow
131:14 - these commands we will just execute the
131:17 - similar kind of commands
131:19 - on the terminal so this is our maven
131:22 - project
131:22 - i'm inside my maven project so i'm going
131:24 - to just write git
131:26 - init command which is going to
131:27 - initialize git inside this directory
131:30 - and then i'm going to just write get
131:33 - status to know the status of this
131:36 - directory so
131:37 - i can see there are two directories here
131:40 - and one file here so i'm going to add
131:42 - this
131:42 - to the git so i'm going to just write
131:44 - git add
131:46 - and then i'm going to just add a target
131:49 - for example and then
131:50 - source and then palm dot xml
131:54 - alternatively you can also write git add
131:58 - dot which is going to
131:59 - add everything which is there inside
132:02 - your
132:03 - project directory so i'm going to do
132:05 - that and then press enter
132:06 - and once again i'm going to give the git
132:08 - status command
132:10 - and you can see these all files are
132:13 - added
132:14 - to the git now so one thing which is
132:17 - remaining
132:18 - is to commit everything into the gate so
132:21 - we will do that
132:22 - i'm going to just write git commit
132:25 - minus m and then the message
132:29 - for the committing for example my
132:32 - first maven
132:35 - commit and then you can just give a
132:38 - space here and then write dot which is
132:41 - going to
132:42 - commit every file inside your
132:45 - project okay so get commit minus m then
132:48 - the message
132:49 - then this dot and then press enter and
132:52 - everything will be committed
132:54 - into git so i'm going to once again
132:57 - uh give the git status command and now
132:59 - you will see
133:00 - on the branch master everything is clean
133:03 - so we are ready to just push this
133:06 - project
133:07 - to our github repository now at this
133:10 - point you just need to copy
133:12 - this command which is git remote add
133:16 - and then whatever is your repository url
133:20 - dot
133:20 - get and this is going to add the remote
133:24 - origin
133:24 - for the github to your project
133:27 - okay so i'm going to just copy and paste
133:29 - this command which is git
133:31 - remote add origin and whatever is
133:34 - your repository url and then press enter
133:38 - and this repository is added
133:41 - and now i'm going to push everything to
133:44 - my github repository using this command
133:47 - which is
133:47 - git push minus you origin master
133:50 - and i'm going to just paste this command
133:52 - and then press enter
133:54 - and this is going to ask for my username
133:57 - for github
133:58 - and my password for the github and now
134:01 - everything will be pushed to my github
134:04 - repository
134:06 - so let's check whether everything is
134:08 - there or not
134:09 - so i'm going to just once again click on
134:12 - my repository which i have just created
134:15 - and now you will see
134:16 - everything is pushed to my github
134:18 - repository
134:19 - and this is the message which we have
134:22 - given at the time of committing and you
134:24 - can see
134:24 - we have committed this two minutes ago
134:27 - okay
134:28 - so now once your project is there on the
134:31 - github
134:32 - let's create a jenkins project first of
134:35 - all so i'm going to just click on new
134:37 - item and here i'm going to just write
134:40 - first maven project and i'm going to use
134:43 - the freestyle project for now
134:45 - there are plugins available on jenkins
134:48 - which makes it easier to create and run
134:52 - a maven on jenkins but for now i'm going
134:55 - to just use
134:57 - this option which says freestyle project
135:00 - and i'm going to click on ok and in the
135:02 - description i'm going to just write
135:04 - first maven project and then i'm going
135:06 - to
135:06 - just check this option which says github
135:09 - project
135:10 - and then i'm going to copy the url of my
135:13 - github repository
135:15 - and i'm going to just paste this url and
135:17 - then i'm going to leave everything as
135:19 - default
135:19 - and in the source code management i'm
135:21 - going to choose
135:23 - get option here and once again i can
135:26 - just
135:26 - go here and click on this green button
135:29 - and
135:30 - copy the url here for my repository
135:33 - and i can paste it here okay i don't
135:36 - need
135:36 - any credentials for now and the branch
135:40 - i'm using is the master branch you can
135:42 - see
135:43 - i only have one branch in my project
135:46 - which is the master branch
135:47 - but if you have different branches you
135:50 - can
135:51 - provide your branch name here instead of
135:54 - master
135:55 - and now i will leave everything as
135:56 - default and
135:58 - here you can choose different kind of
136:00 - build triggers
136:02 - for now i'm going to just choose this
136:05 - option which says github
136:06 - trigger for git hcm polling and then
136:09 - in the build environment i'm going to
136:12 - choose this option which says delete
136:13 - workspace before
136:15 - build start which is going to delete our
136:17 - workspace
136:18 - and then run the goals on our maven
136:21 - project
136:22 - okay so just check this checkbox and
136:25 - then
136:25 - we will move to the build section here
136:28 - and inside the build section
136:30 - there is a special section for maven
136:33 - which is this one
136:34 - which says invoke top level maven target
136:38 - so we are going to use this option here
136:40 - and if you want to see the more advanced
136:44 - option you can click on this
136:46 - button which says advanced and here you
136:48 - can give the perm
136:50 - file directory path if this file is
136:53 - located
136:54 - somewhere other than your default
136:57 - project path okay and then you have more
137:00 - options here for example jvm options or
137:03 - properties
137:04 - uh to give here for now we will just
137:06 - provide the goals for
137:08 - our maven project which is clean and
137:11 - test using the space here and then i'm
137:15 - going to save
137:16 - my jenkins job and let's run
137:20 - our junkies job and let's see if it
137:22 - works fine or not so i'm going to just
137:24 - click on this
137:25 - build now option which is going to start
137:28 - the jenkins build
137:29 - and then i'm going to click on the build
137:31 - history option
137:32 - which is going to show me my console
137:34 - output so i'm going to click on console
137:36 - output
137:38 - and you can see uh first of all we will
137:40 - see the
137:41 - default path where this project
137:44 - is uh checked out so you can see var liv
137:47 - jenkins workspace and then inside the
137:50 - workspace this
137:52 - project will be created genghis project
137:54 - and then
137:56 - our git repository will be cloned
137:59 - and you can see already maven is running
138:03 - the test here and once the tests are
138:05 - successful
138:06 - at the bottom we will see if it's
138:09 - successful we will see
138:10 - the message success otherwise we will
138:13 - see the message
138:14 - failure okay so once again i'm going to
138:17 - go back
138:18 - and i'm going to go to my project here
138:21 - and you can see this build is
138:23 - successful now so everything ran
138:26 - successfully
138:27 - now let's say we are going to define a
138:30 - goal
138:31 - which is uh not available
138:34 - inside your maven project so we will
138:37 - define
138:38 - some goal which doesn't exist and let's
138:41 - see what happens then so i'm going to
138:43 - just say
138:44 - some goal and i'm going to save this
138:49 - and then let's see what happens i'm
138:50 - going to just
138:52 - start the build again and i'm going to
138:55 - just go
138:55 - to the build history of this jenkins
138:59 - build
138:59 - and then console output and you can see
139:02 - once again
139:03 - the repository will be cloned
139:06 - and now you will see the failure because
139:08 - this some gold gold doesn't exist
139:10 - so it's going to show us this error
139:13 - message
139:14 - and then the last message here will be
139:18 - the failure
139:19 - and once we will go to the home page of
139:22 - jenkins
139:22 - now you will see this red ball icon here
139:25 - because
139:26 - our last build was unsuccessful
139:29 - okay so just give the proper
139:33 - goals here which are logical
139:36 - so clean and test are
139:39 - running for our maven project so we will
139:43 - just give
139:43 - those uh goals here and once again run
139:47 - the build
139:48 - and you will see the build will start
139:51 - and in the console output everything
139:54 - will be checked once again
139:56 - and then you can see success once again
140:00 - so this is how you can test and run a
140:02 - simple maven project
140:04 - on jenkins using github hey guys welcome
140:07 - to the next video on jenkins tutorial
140:09 - for beginners
140:10 - in this video i'm going to show you how
140:12 - you can send email notifications
140:14 - using jenkins so first of all in order
140:17 - to send
140:17 - email notifications using jenkins you
140:20 - need to know the smtp server details
140:23 - of your email provider which you want to
140:26 - use
140:27 - in your jenkins so this you can easily
140:30 - find on internet you just need to search
140:32 - for smtp server list
140:34 - and you will be able to find all the
140:36 - informations
140:38 - about the smtp server on one of
140:42 - the websites like this so let's say i
140:44 - want to use the gmail
140:46 - as my email provider
140:49 - to send the notifications so you can see
140:52 - smtp server details
140:53 - of gmail is given here so this
140:56 - information i'm going to use
140:58 - in order to configure the email
141:00 - notification in
141:01 - jenkins so i'm going to go to my jenkins
141:04 - home page
141:05 - and then i'm going to go to manage
141:08 - jenkins
141:09 - and inside this configure system window
141:12 - you will be able to find the email
141:13 - notification setting
141:15 - at the very bottom so you will be able
141:18 - to
141:19 - see this section which says email
141:21 - notification
141:23 - and just above this section you will be
141:25 - able to
141:26 - see this section also which is
141:29 - extended email notification so this
141:32 - extended email notification
141:35 - is a plugin which you have already
141:38 - installed at the installation
141:40 - of your jenkins so if you have chosen
141:43 - install suggested plugins then this
141:46 - plugin will be installed
141:48 - in your jenkins and you will be able to
141:50 - see this option
141:52 - but for now i'm going to use the default
141:55 - option which
141:55 - is the email notification option which
141:58 - is
141:59 - at the very bottom so here you will
142:02 - be able to see this option which says
142:05 - smtp server so smtp server for
142:10 - gmail is smtp.gmail.com so i'm going to
142:14 - just
142:15 - give this information here
142:18 - and then you just need to give the
142:21 - default
142:22 - user email suffix the default email user
142:25 - suffix of gmail is
142:27 - at the rate gmail.com
142:30 - and then you will be able to see this
142:32 - advanced
142:33 - setting button you just need to click it
142:36 - and then just check
142:37 - this check box which says use smtp
142:40 - authentication
142:41 - and now you just need to give your
142:44 - username and password
142:46 - username is your email address from
142:48 - which you want to send
142:50 - your emails so i will give my
142:54 - gmail address here so it can be anything
142:57 - for example example there gmail.com
143:01 - and then you need to give the password
143:04 - of
143:05 - that email address so i'm going to give
143:08 - the password
143:09 - of that email address and then
143:12 - i'm going to just check this checkbox
143:14 - which says use ssl
143:16 - and the smtp port let's see what is the
143:18 - smtp
143:19 - port for that so smtp port for uh this
143:22 - gmail
143:23 - server is 465 so i'm going to use uh
143:27 - this port here
143:28 - and then you will be able to see this
143:30 - section which says reply
143:32 - to i'm going to leave this as blank and
143:35 - you can also test
143:36 - your configuration for your email by
143:39 - sending a test email
143:41 - to any address so here
143:44 - in the test email recipient you just
143:47 - need to
143:48 - give the email address of the recipient
143:51 - so i'm going to give here the recipient
143:53 - email address
143:54 - and then i'm going to just press on this
143:56 - button which says test
143:58 - configuration and then it's going to
144:01 - send this email so you can see this
144:04 - message
144:05 - which says email was successfully sent
144:08 - now in some cases you may also encounter
144:11 - some errors
144:12 - which can be resolved by just going to
144:14 - your email account
144:16 - by turning on an option which is called
144:18 - allow
144:19 - less secure apps so you will be able to
144:22 - see
144:22 - this kind of option and you just need to
144:26 - turn it on and you will be able to send
144:29 - emails from your gmail account
144:32 - to any other email so once you have done
144:35 - the email notification configurations
144:38 - and you have tested
144:39 - your configurations you can just save
144:41 - your configurations
144:43 - and once your configuration is saved you
144:45 - can just go to the jenkins job
144:47 - in which you want to use this email
144:50 - notification
144:51 - so i'm going to just use
144:54 - this jenkins job it says hello world
144:57 - build
144:58 - and then i'm going to go to the
144:59 - configuration of this job
145:02 - and then i will scroll down and i will
145:05 - go to
145:06 - the section which is called post build
145:09 - actions and then when i
145:10 - just uh click on this list
145:14 - i will be able to see two options
145:16 - related to
145:17 - email notification one is editable email
145:20 - notification this is a plugin
145:22 - so we haven't configured this plugin yet
145:26 - so we will use this option which is
145:29 - email notification we have done the
145:30 - configuration for
145:32 - this op so just use this option which
145:34 - says email notification
145:36 - and then you will be able to see this
145:37 - kind of uh option
145:39 - for recipients so you can just
145:42 - give the email address to which you want
145:45 - to send
145:46 - an email when your build fails
145:49 - and you can see this is the option which
145:52 - is enabled by default which says
145:54 - send email for every unstable bill
145:57 - that means when your bill is failed
146:00 - then this email will be sent so i'm
146:02 - going to just save
146:04 - this configuration and let me just break
146:07 - the configuration
146:08 - also so my jenkins job will
146:11 - fail so right now uh let's say
146:15 - this bill is java c helloworld.java
146:19 - i'm going to just change the name of
146:22 - this file
146:23 - which doesn't even exist so this build
146:25 - will fail
146:26 - and then email notification will be sent
146:29 - so i'm going to just click on build now
146:32 - and you can see the build has been
146:34 - started i'm going to go inside this
146:35 - build
146:36 - and console output and you can see this
146:39 - build
146:39 - is failed and after
146:43 - this java c command is failed you will
146:45 - be able to see
146:47 - this option which says sending email to
146:50 - whatever email
146:51 - you have used and when you go to your
146:54 - gmail account you will be able to see
146:58 - this kind of email and then you will be
147:01 - able
147:02 - to find more details in this text here
147:05 - about your jenkins so this is one way of
147:08 - sending email notifications
147:10 - using jenkins the more advanced way can
147:13 - be
147:14 - by installing some plugin related to
147:18 - email notifications so you can once
147:21 - again go to manage jenkins
147:23 - and we have already installed a plugin
147:26 - at the time of installation which
147:28 - is email editable email notification
147:32 - right so i'm going to just scroll down
147:35 - where i will find editable email
147:38 - notification
147:40 - which is this option
147:43 - this one and here also you can give the
147:46 - same
147:48 - options for example for smtp you will be
147:51 - able to give
147:53 - smtp.gmail.com and then
147:55 - default user suffix is the same
147:59 - at the rate gmail.com
148:03 - and then in the advanced setting you
148:05 - will have the same type of settings
148:08 - for example this is your email address
148:11 - from which you want to send an email and
148:13 - then this
148:15 - is your password for your email
148:18 - and then this is the advanced email
148:21 - properties which i will leave
148:23 - as default and then i will choose use
148:26 - ssl
148:26 - check box and then in the smtp port i
148:29 - will just use
148:30 - 465 and you can
148:33 - do some more settings here one thing you
148:36 - can do here is you can add the default
148:39 - recipients here
148:40 - whatever recipients you want to use for
148:43 - your email
148:45 - so i'm going to add one recipient which
148:47 - i have also used
148:48 - in the last section and then i'm going
148:52 - to save
148:53 - this configuration and once my
148:55 - configuration is saved
148:57 - i can once again go to let's say i'm
149:00 - going to go to the next jenkins job now
149:03 - and then i'm going to go to the
149:05 - configuration of this jenkins job
149:08 - and then in the post build actions
149:11 - this time i will use this option which
149:13 - says editable
149:15 - email notification so just use this
149:18 - option
149:18 - and then you will be able to find all
149:21 - these fancy options which you can
149:24 - change at any time important for us is
149:27 - for example project recipient list here
149:31 - so by default it's default recipients
149:34 - you can
149:34 - give any other email address here and if
149:37 - you want to
149:38 - know more here you will be able to find
149:41 - more details here so it says you just
149:44 - need to add a
149:45 - cc colon here or bcc colon here
149:48 - so i'm going to add that cc
149:51 - and then colon and then the email
149:54 - address
149:54 - and then i will scroll down and in the
149:57 - advanced
149:58 - sec setting you will be able to find
150:00 - more settings so
150:02 - you can see trigger is failure
150:05 - and the email will go to the developers
150:09 - so we haven't uh
150:10 - added any developer email we have we
150:13 - have added
150:14 - the recipient email so i'm going to use
150:16 - this recipe
150:17 - email list and i'm going to remove the
150:20 - developers
150:21 - from here and then i'm going to just
150:23 - save this configuration
150:25 - and once your jenkins build will fail it
150:28 - will send
150:29 - the email to the recipient
150:32 - list so in this way you can configure
150:35 - your jenkins to send
150:36 - email notifications hey guys welcome to
150:40 - the next video on jenkins tutorial for
150:42 - beginners
150:43 - in this video we will see what is a
150:45 - jenkins
150:46 - pipeline and how to use pipelines
150:50 - in jenkins so first of all
150:53 - what is a jenkins pipeline
150:56 - so a jenkins pipeline is a suit of
151:00 - plugins
151:01 - which supports implementing and
151:03 - integrating
151:04 - continuous delivery pipelines in jenkins
151:08 - now to explain this i will reopen this
151:11 - diagram which i have shown you in the
151:14 - introduction
151:15 - of jenkins so every change which you
151:18 - make
151:18 - in your software so for example you are
151:21 - a developer
151:23 - and you make the changes in the software
151:27 - and you push those changes into your
151:30 - code repository
151:31 - in our case for example we will take the
151:34 - kit
151:34 - repository right now the job of jenkins
151:38 - here
151:38 - is to build your code in a reliable
151:42 - manner and then you may be having a
151:45 - different kind of
151:46 - testing for example unit testing or
151:48 - integration testing
151:49 - or different kind of testing so the job
151:52 - of jenkins is to
151:53 - test your code and then at last
151:56 - deploy your code and even transfer this
152:00 - code into
152:01 - a artifact repository and if you want to
152:04 - know more about
152:05 - jenkins pipeline the documentation
152:08 - on the jenkins website about pipeline
152:11 - is the best so just search for jenkins
152:14 - pipeline
152:16 - and then you will be able to see uh this
152:18 - url which is jenkins dot io for slash
152:21 - dock forward slash pipeline just click
152:23 - on
152:24 - this link and then you will be able to
152:27 - get all the details about pipeline on
152:30 - this page and when you scroll down you
152:33 - will be able to see
152:34 - uh this section which says what is a
152:37 - jenkins pipeline
152:39 - and then if you want to learn more about
152:42 - uh
152:43 - pipelines then you can read this section
152:46 - so in simple words a pipeline is
152:49 - a script which gives jenkins a series
152:53 - of jobs to do in a pipeline like
152:57 - manner and if you read this line the
152:59 - definition of jenkins pipeline
153:02 - is written into a text file
153:05 - called a jenkins file okay
153:08 - so we will create a jenkins file in our
153:11 - repository
153:12 - or jenkins allows us to write
153:15 - a jenkins file directly into the
153:18 - configuration
153:20 - of our jenkins job and there are two
153:23 - ways of writing this jenkins
153:27 - script which is declarative
153:30 - and scripted pipeline
153:33 - and you will be able to get more details
153:35 - about declarative
153:37 - script and scripted pipeline syntax here
153:40 - on this page itself so when you scroll
153:43 - down you will be able to see
153:44 - this flow diagram of jenkins and when
153:48 - you
153:48 - scroll down more you will be able to see
153:51 - this section which says declarative
153:54 - pipeline fundamentals
153:55 - and in this video i'm going to show you
153:57 - exactly this so how to use
153:59 - declarative pipeline in jenkins so in
154:02 - declarative pipeline syntax the pipeline
154:04 - block
154:05 - define all the work done throughout the
154:08 - entire pipeline
154:10 - so this is the simple syntax which
154:13 - allows us to define different stages
154:16 - and then inside the stages you can
154:18 - define different steps
154:20 - and all this starts with this keyword
154:23 - pipeline and then this is a groovy
154:26 - sandbox syntax so if you are familiar
154:29 - with that
154:30 - then it will be more helpful so you
154:34 - use the keyword pipeline and then in
154:36 - these curly brackets
154:38 - you use agent any and this means
154:42 - execute this pipeline or any of
154:45 - its stages on any available agent so
154:48 - every detail
154:50 - about the script you will be able to
154:52 - find
154:53 - here so for example there is
154:56 - a section called stages and inside the
154:58 - stages you can define different
155:00 - uh states so for example there is a
155:03 - stage for build here
155:04 - there is a stage for test here and there
155:07 - is a stage
155:08 - for deploy here right so we will be
155:12 - using this syntax into our jenkins
155:15 - job now let's take a real use case
155:18 - which we can implement on our jenkins
155:21 - job
155:22 - so if you remember we have created a
155:25 - maven project
155:26 - in the last videos and i have pushed
155:28 - this code onto
155:30 - the github repository so let's say
155:34 - we want to test this maven app
155:37 - and then we want to compile this maven
155:40 - app
155:40 - and we want to package this maven app
155:42 - using
155:43 - this jenkins pipeline how we can do this
155:47 - using jenkins let's see so i'm going to
155:50 - go to
155:51 - the jenkins homepage and i'm going to
155:53 - create a new
155:54 - item here and this new item will be
155:57 - for example pipe line demo for example
156:02 - and in here you will choose this section
156:04 - which says pipeline
156:06 - okay so give the name of your jenkins
156:08 - job
156:09 - and choose the pipeline section from
156:11 - here and then click
156:12 - ok which is going to create your jenkins
156:15 - job and then in the general you can
156:16 - provide any description about
156:18 - your project i'm going to skip all this
156:22 - and then here we are going to say
156:25 - our job is a github
156:28 - project so we are going to just click on
156:30 - this checkbox
156:32 - and then we can just copy this url
156:35 - and then paste it here so this is a
156:38 - project url
156:39 - and i'm going to scroll down we are
156:41 - going to skip this section for now which
156:43 - is build
156:44 - triggers you can define any triggers you
156:47 - want
156:48 - later but the most important section
156:51 - here
156:52 - is the pipeline section which we are
156:54 - going to use
156:55 - so in the definition you will be able to
156:57 - see two options here one is uh
156:59 - pipeline script another is pipeline
157:02 - script from
157:02 - scm so we are going to see the first
157:04 - option first of all
157:06 - which is pipeline script and this
157:09 - enables us to define the script
157:11 - here in this section if you choose
157:15 - the pipeline script from scm then you
157:18 - can define
157:19 - a jenkins file in your project itself so
157:22 - i have already defined
157:24 - this jenkins file in my project
157:28 - but for now i'm not going to use this
157:31 - jenkins file
157:32 - this jenkins file i'm going to show how
157:34 - to use this jenkins file
157:36 - from your github repository in the next
157:39 - video
157:40 - so for this video let's say this file
157:43 - doesn't exist
157:44 - so we are going to create this
157:47 - uh pipeline script here in our jenkins
157:51 - job configuration itself so
157:54 - for doing things faster i'm going to
157:57 - just
157:57 - copy this syntax which is given on the
158:01 - jenkins documentation page so i'm going
158:03 - to just copy this
158:05 - and i'm going to paste everything here
158:08 - so the basic syntax is pipeline and then
158:12 - these curly brackets and you write agent
158:15 - any
158:16 - and i'm going to make this a little bit
158:18 - bigger so you can see
158:19 - this in a better way and then you write
158:22 - stages
158:23 - and inside the stages you define your
158:25 - stages for example
158:27 - so let me uh just change this script and
158:30 - now
158:31 - so instead of build what i want to do is
158:33 - i want to clone
158:35 - my git repository so i'm going to just
158:38 - say
158:39 - clone repo here which is going to clone
158:42 - the github repository and inside the
158:45 - steps
158:45 - section you can define any uh
158:48 - shell script commands here so for
158:51 - example
158:52 - here you will write sh keyword before
158:55 - uh executing your command and this sh
158:58 - means uh your shell if you are running
159:01 - this jenkins on windows then you
159:03 - will write bat here which is the batch
159:07 - command okay so right now we are on
159:09 - linux so we will use
159:11 - sh but if you are on um windows you can
159:14 - write
159:15 - bat here okay so sh
159:18 - and then in the double quotes what we
159:20 - are going to do is we are going to clone
159:23 - our git repository so the command for
159:25 - that is get
159:27 - clone and then the url
159:30 - of your git repository so i'm going to
159:33 - just
159:33 - click on this green button copy this
159:36 - url from here and then paste it here so
159:39 - this is going to clone
159:41 - the repository now in the next step what
159:44 - we are going to do
159:45 - is we are going to clean our
159:48 - project using the maven clean command so
159:51 - i'm going to just write sh
159:53 - and then maven clean command is mvn
159:56 - clean and then you need to
160:00 - give the path of your project because
160:03 - when you clone your git project
160:06 - there will be a directory which is
160:08 - cloned which is
160:09 - my app and the path you can give
160:13 - here using this flag minus f
160:16 - and then the directory name which is my
160:20 - app in our case so the command is mbn
160:23 - clean minus f and then the path of
160:27 - this directory which is cloned this is
160:29 - the relative path
160:30 - that's why i haven't written the whole
160:32 - path here
160:33 - if you want to write the whole path or
160:35 - if you want to know the whole path
160:37 - i'm going to show you how to see the
160:39 - whole path also
160:40 - but just write this command here so this
160:43 - is going to clean our project
160:46 - now we are going to test our project now
160:48 - we are going to run
160:49 - the test on this project so for that
160:53 - we can just write sh and then we when
160:56 - we can just write mvn test
161:00 - minus f and then the path of your
161:03 - repository which is my app
161:05 - in our case and then to deploy
161:09 - i'm going to use the maven package
161:11 - command so
161:12 - sh and in the double quote i'm going to
161:15 - just write mvn
161:18 - package space minus f and then
161:21 - my app which is the part of this
161:24 - directory
161:25 - okay so in the first stage we are
161:28 - cloning this repository
161:30 - and cleaning it so let's uh just write
161:33 - and
161:34 - clean okay so clone repo and clean
161:37 - it and in the second stage we are going
161:40 - to
161:40 - run the test so we have written this
161:42 - command and in the third step we are
161:45 - going to deploy
161:46 - our project and i'm going to use this
161:49 - command for that which is
161:50 - main package and i'm going to repeat
161:53 - once again so if you
161:54 - are on windows this sh keyword will be
161:58 - replaced by
161:59 - ba t keyword okay
162:03 - so because i'm on linux i'm using sh
162:05 - command
162:06 - and now i'm going to just save my
162:09 - configuration
162:10 - and once my configuration is saved i'm
162:13 - going to
162:13 - just build my job using this button
162:16 - which says build now
162:18 - and now the build will start you can see
162:21 - build has been started let me just
162:23 - minimize this and you will be able to
162:25 - see your
162:26 - build stages here so this
162:29 - view will show you which stage
162:32 - is executed right now so the clone
162:36 - and cleaning is done so first step is
162:39 - successful
162:40 - because we are seeing the green box here
162:43 - and now you can see at the end of this
162:45 - step this step
162:46 - was successful and the second step was
162:49 - successful which
162:50 - was the test so the cleaning
162:53 - and the test was successful but our
162:56 - deploy command
162:57 - have failed and let's see what is the
163:00 - reason for that so for
163:02 - finding out the reason i'm going to just
163:05 - click on this build history
163:07 - and then i'm going to go to the console
163:09 - output
163:10 - and you can see this is the directory
163:12 - where
163:13 - this project is cloned so i'm going to
163:16 - open
163:16 - a new terminal i'm and i'm going to just
163:19 - write cd and this path
163:21 - and when i do ls here you can see there
163:24 - is
163:24 - a my app directory which is cloned here
163:28 - and then we have run the clean command
163:31 - which was successful you can see
163:33 - build was successful and then we ran
163:37 - the maven test command which was also
163:40 - successful you can see all the tests
163:42 - were run and
163:44 - build was successful but at the package
163:47 - stage some problem occurred and you can
163:50 - see directly
163:51 - here the mistake which i have made
163:54 - intentionally here so you can see the
163:57 - command was
163:58 - mvn package minus f and the path
164:02 - and the path is false here so you can
164:04 - see my
164:05 - minus ap one p is missing
164:09 - from this command so let's correct our
164:12 - mistake
164:13 - and then we will run our job once again
164:16 - so i'm going to go to the configuration
164:18 - once again
164:19 - and then we will correct our mistake
164:22 - which
164:22 - is correcting the spelling of the
164:25 - my app path and we are going to save
164:29 - this configuration once again and i'm
164:31 - going to run the build once again
164:33 - and then you will be able to see the
164:36 - second
164:36 - build and now you can see this build has
164:40 - failed miserably so let's see the reason
164:43 - behind
164:43 - this why this build failed
164:47 - so i'm going to just go to this build
164:49 - and then i'm going to go to
164:50 - the console output and then you can
164:54 - see the clone and then i can see this
164:57 - message
164:57 - which says fatal destination path my app
165:01 - already exists and is not empty
165:04 - directory so in our first build
165:07 - when we have cloned our project
165:11 - this directory was created and because
165:14 - this directory
165:15 - is already there the cloning
165:18 - once again will fail because
165:22 - this directory already exists so for
165:25 - this clone command to be successful
165:28 - we need to remove this directory and
165:30 - then once again
165:31 - clone it from the github repository so
165:35 - we are going to go
165:36 - to the configuration once again so i'm
165:38 - going to go to the configuration
165:40 - and then i'm going to go to the pipeline
165:42 - script once again i'm going to just
165:44 - maximize it and in the first step before
165:47 - the cloning
165:49 - what we can do here is we can just write
165:52 - sh and then we can just
165:55 - write rm which is the remove command
165:59 - and then i'm going to just add these
166:01 - flag rm minus
166:02 - rf which is going to recursively
166:06 - force the removal of all the files
166:09 - and then i'm going to give the name of
166:12 - my directory which is my app
166:15 - in our case so this command is going to
166:18 - remove
166:19 - this directory and then run the clone
166:22 - command
166:22 - so once again the cloning will take
166:25 - place and then this
166:27 - my app will be freshly created or
166:30 - freshly cloned into your
166:34 - jenkins directory so let's save our
166:36 - configuration and let's build
166:38 - the job once again so i'm going to just
166:40 - press on build now
166:42 - i'm going to minimize this browser once
166:45 - again
166:46 - and now i can see
166:50 - the build number here third build
166:53 - and then till now our
166:56 - cleaning and cloning is successful and
166:59 - now this test stage is also successful
167:02 - and now deploy stage is running and
167:05 - hopefully it will
167:06 - also be successful so once you see
167:09 - all the stages green here that means
167:12 - your
167:12 - jenkins build is successful and you can
167:16 - see
167:16 - uh the time which it took to
167:20 - execute every stage so for the cloning
167:23 - and cleaning stage
167:24 - it took six second for testing stage it
167:27 - took
167:27 - a second and for the package stage it
167:31 - took
167:31 - eight second as well now if you want to
167:34 - see
167:35 - more logs of every stage
167:38 - for example i want to see the logs of
167:40 - this stage i can hover over it
167:42 - and i can click on the log button here
167:46 - and you will see all the logs related to
167:49 - this stage so if you want to see the
167:52 - test logs then you can just click here
167:56 - and view all the logs related to the
167:59 - test stage
168:00 - which is similar to view console output
168:04 - okay so this console output is
168:08 - showing every log from every stage
168:11 - but if you want to see the individual
168:13 - log from
168:14 - every stage then you can see it from
168:16 - here
168:17 - okay and then you will have the
168:20 - good overview of your jenkins
168:24 - pipeline because you will see
168:27 - what happened in every stage which stage
168:30 - is failing
168:32 - and if some stage is failing what are
168:34 - the logs
168:35 - are showing here and based upon these
168:38 - logs you will be able
168:40 - to you know take some steps whatever
168:43 - stage is failing you can directly view
168:46 - that
168:46 - log and then you can take some steps
168:50 - and fix it so at last you will be able
168:53 - to see
168:54 - all the stages green that means
168:57 - your project is successfully billed
169:00 - tested and deployed so this is how you
169:03 - can use jenkins pipeline
169:04 - using your jenkins job configuration
169:08 - now in the next video i'm going to show
169:10 - you how you can
169:12 - add this jenkins file to your
169:15 - maven repository for example or any
169:18 - other repository
169:19 - and then how to use this jenkins file
169:22 - from your
169:23 - github into your jenkins
169:26 - job hey guys welcome to the next video
169:28 - on jenkins tutorial for beginners
169:31 - in the last video we have seen what is
169:34 - jenkins pipeline
169:36 - and we have also seen how to use
169:38 - pipelines in jenkins
169:40 - using this pipeline script which we have
169:44 - defined
169:44 - into our jenkins job configuration
169:48 - now in this video i'm going to show you
169:50 - the second option
169:52 - of using pipeline script
169:55 - which is pipeline script from hcm
169:58 - okay so in the last video i have shown
170:01 - you how you can create
170:03 - this kind of pipeline script inside your
170:06 - jenkins
170:07 - configuration now there is one more way
170:10 - of
170:11 - creating your jenkins file which is
170:14 - you can create your jenkins file into
170:16 - your github repository
170:19 - and then use the second option which
170:21 - says pipeline script from
170:23 - scm which is more convenient
170:26 - so let's see how we can use pipeline
170:28 - script from scm
170:30 - so we will take the same project which
170:33 - we have
170:34 - used in the last video which is the
170:36 - maven project
170:37 - and there is one special file which i
170:41 - have created here
170:42 - which is jenkins file this jenkins file
170:45 - name
170:46 - typically start with the capital j
170:49 - and without any spaces you just need to
170:52 - write
170:52 - jenkins file here and when i click
170:56 - on this file you will be able to see the
170:58 - pipeline script so this is the pipeline
171:00 - script which i have written
171:01 - into my jenkins file which resides
171:05 - in my maven project on my github
171:08 - repository so the syntax is uh
171:11 - almost same so your junkies file start
171:14 - with the keyword pipeline
171:17 - and then in these curly brackets you
171:19 - have the agent any
171:21 - and then you define the stages so in
171:25 - this script we have three stages
171:28 - one is maven clean other is the testing
171:32 - stage
171:33 - which is maven test and the last stage
171:36 - is
171:36 - maven package okay now if you notice
171:40 - here
171:41 - we haven't used any git clone command
171:45 - which we have used in the last video so
171:47 - let's compare these two script first of
171:50 - all
171:50 - so you can see in the first stage what i
171:54 - was doing is i was
171:56 - using the shell command first of all to
171:59 - remove
172:00 - the my app directory which is created by
172:04 - cloning
172:05 - our github repository and then
172:08 - we work loaning our github repository
172:11 - once again
172:13 - and then we were running the maven clean
172:16 - command
172:17 - into the specified folder which is my
172:20 - app now when you use jenkins file in
172:23 - your github repository
172:25 - you don't need to use this remove
172:28 - command you don't need to
172:30 - use this clone command because when you
172:32 - choose this option
172:34 - jenkins will allow you to give the path
172:37 - of the github repository from where
172:40 - it will clone your repository so we will
172:42 - see uh
172:43 - this example in few seconds but let's
172:47 - see the script first of all so you can
172:49 - see i have just
172:51 - run the maven clean command and
172:54 - that's it so this will work similar
172:58 - to this script which we have written in
173:00 - the configuration
173:01 - but with the lesser steps so we have
173:05 - removed these two steps and you don't
173:07 - even need
173:08 - to provide this minus f flag because
173:12 - this maven clean will be executed
173:15 - inside your my app directory
173:17 - automatically
173:18 - okay so syntax is also much more
173:22 - cleaner here just maven clean command
173:25 - maven
173:25 - test command and maven package command
173:28 - okay so let's see how we can use this
173:31 - jenkins
173:32 - file into our jenkins job
173:35 - so what i'm going to do here is i'm
173:37 - going to create a new jenkins job so we
173:40 - will see from the start how to
173:42 - use this jenkins file so i'm going to
173:44 - just name my
173:46 - changes job as pipeline demo 2
173:50 - and then i'm going to choose pipeline
173:52 - here and i'm going to choose ok
173:54 - so once your jenkins job is created we
173:57 - will
173:58 - just say it's a github project and we
174:00 - will give the url
174:02 - of our github repository here
174:05 - and then we will scroll down and
174:09 - in the pipeline section this time we
174:11 - will choose the second option which says
174:13 - pipeline script from scm and now you
174:16 - will see
174:16 - these configuration steps here and the
174:19 - first option here is
174:21 - scm so as scm we
174:24 - are going to choose the get scm so just
174:26 - choose
174:27 - get from here so once you choose get
174:29 - here you will be able to see
174:31 - this repository url so you can give
174:34 - your repository url here so i'm going to
174:37 - just
174:38 - copy my git repository url
174:41 - by clicking this button and copying the
174:44 - url
174:44 - and pasting here and then once you
174:48 - click anywhere outside this box you will
174:50 - be able to see
174:52 - this error is gone and the credential
174:55 - i don't need but you can set it from
174:57 - here and then
174:58 - you can see a branch specifier so
175:02 - by default my project have only one
175:05 - branch which is the master branch
175:07 - but if you have multiple branches then
175:11 - you can define whatever branch
175:14 - you want to use for this jenkins job so
175:16 - i'm going to leave this master
175:19 - as default but if you have some other
175:21 - branch you can specify
175:23 - here okay and now you will be able to
175:26 - see the script path
175:28 - so because our jenkins file script
175:31 - resides on the root of our project so we
175:35 - don't need to change
175:37 - the path of this script you can see once
175:40 - again
175:40 - this jenkins file resides on
175:44 - the root of my project so directly
175:46 - inside my
175:47 - my app directory if this jenkins file
175:51 - reside
175:52 - inside some folder or some complicated
175:54 - folder structure
175:56 - then you can give the relative
175:59 - path of your jenkins file script from
176:02 - here
176:03 - now last option here is lightweight
176:06 - checkout so
176:07 - i will leave this as default and now i'm
176:10 - going to just
176:11 - save my jenkins job and i will try to
176:15 - run
176:16 - my jenkins job so i'm going to just
176:18 - click on build now
176:20 - which is going to start my build and you
176:22 - can see
176:23 - all the stages one by one will be shown
176:26 - here so
176:27 - the checkout scm is successful
176:30 - and it took three seconds and now the
176:33 - mvn
176:34 - clean command is going on and it's also
176:37 - successful
176:38 - and it took seven seconds and now the
176:40 - test command is going on
176:42 - and it took 13 seconds to execute but
176:45 - it's successful
176:46 - and now the last stage which is the
176:49 - package stage
176:50 - is going on and once it's finished and
176:54 - if you see all the boxes green that
176:56 - means
176:57 - your jenkins job is successful and all
177:00 - four
177:01 - stages has been executed successfully
177:05 - you can also see the logs here
177:08 - and straight away you will observe that
177:10 - this option is
177:11 - more easier than using or creating your
177:15 - pipeline script
177:16 - into your jenkins configuration so the
177:19 - advantage of
177:20 - using the jenkins file into your project
177:23 - is you can change this jenkins script
177:27 - anytime and you can directly check
177:30 - your code or commit your code and push
177:32 - your code and
177:33 - if your build triggers are
177:37 - properly set you don't need to do
177:39 - anything jenkins will take care
177:41 - of everything and will automatically
177:44 - execute every stage
177:46 - and give you all the results so this is
177:49 - how
177:50 - you can use pipeline script from your
177:53 - github repository using jenkinsfile
177:56 - hey guys welcome to the next video on
177:58 - genki's tutorial for beginners
178:00 - in this video we will discuss about how
178:02 - we can create
178:04 - the slave nodes in jenkins and we will
178:07 - also see
178:08 - what is a master and slave node
178:12 - so let's get started so first of all
178:16 - what is a master node the master node is
178:19 - wherever your jenkins is running
178:23 - it's your master node now this
178:26 - single jenkins server which is a master
178:29 - node is not enough to meet certain
178:32 - requirements for example sometimes
178:34 - you might need several different
178:36 - environments to test
178:37 - your bills this cannot be done on your
178:40 - master slave for example
178:42 - and for that you may want to create
178:46 - a slave node one other scenario can be
178:49 - if you want to build a larger or heavier
178:52 - project
178:53 - on your jenkins job then your jenkins
178:57 - server cannot
178:58 - simply handle the entire load of that
179:00 - job
179:01 - so in that scenario you can also just
179:04 - create a dedicated
179:05 - slave node to run that heavy
179:09 - build on that node so let's see how we
179:13 - can create a slave
179:14 - node on our jenkins so just go to the
179:17 - home page of jenkins and we will go to
179:20 - the manage
179:20 - jenkins section and once this manage
179:23 - jenkins section
179:24 - is open you just need to search for
179:27 - the section which is called manage nodes
179:30 - so i'm going to just click on this
179:32 - option which says manage node
179:34 - and you can see there is a master node
179:37 - which
179:37 - is the jenkins on which you are working
179:40 - on
179:41 - this is already there and we need to
179:44 - create
179:45 - for example a slave node now for
179:48 - this example i will be using ssh
179:51 - methods so for example i have a extra
179:55 - machine here
179:56 - which is also an ubuntu machine and let
179:59 - me
179:59 - log inside this machine and i'm going to
180:02 - use this machine as a slave node
180:04 - and i will connect to this slave node
180:07 - using my master node
180:09 - on ssh so make sure that you have
180:12 - already installed open sss server on
180:16 - your slave node
180:17 - so your master can connect to
180:20 - it on ssh now we are going to create a
180:24 - new node so i'm going to just click on
180:25 - new
180:26 - node here and you can give any name to
180:29 - your node so for example i'm going to
180:31 - just write
180:31 - uh ubuntu underscore 16
180:35 - 4 because my ubuntu version
180:38 - is 16.4 on the slave and
180:41 - underscore agent for example okay so
180:44 - this will be the name
180:46 - of your node ubuntu 16.4 underscore
180:49 - agent and this will be a permanent agent
180:52 - so i'm going to just
180:53 - click on this option and then click ok
180:57 - which is going to create this node
181:00 - and here in the configuration section of
181:03 - this node you just need to provide some
181:06 - information
181:07 - so at the top you have the name of your
181:09 - node and next
181:10 - you can give some description about this
181:14 - node what it's going to do
181:15 - for example for example it's going to
181:17 - build some java job or maven
181:20 - bills or any other bills which it's
181:23 - going to
181:23 - execute the third option is number of
181:26 - executors so number of executor means
181:30 - number of parallel job which the slave
181:34 - can handle so for now we have a one job
181:38 - we can just enter two here which means
181:40 - it will be able to handle
181:42 - two jobs at the same time now the next
181:45 - option here
181:46 - is remote root directory so the remote
181:50 - root
181:50 - directory is the directory where you
181:52 - want to save all the
181:54 - jenkins related file on your slave
181:57 - node so i'm going to open my slave node
182:00 - and i'm inside my home folder here on
182:03 - the slave
182:04 - and let's create a directory which we
182:06 - are going to use
182:08 - in our master configuration so i'm going
182:10 - to just write mkdir
182:13 - jenkins on the slave node right so mkdir
182:17 - jenkins and then i'm going to just go to
182:20 - the jenkins file using cd jenkins
182:23 - and then i'm going to just write pwd and
182:26 - this is the location where i want to
182:28 - save
182:28 - all the files related to jenkins okay
182:32 - so this is on my slave this directory
182:35 - i'm going to just copy this path
182:37 - and i'm going to just paste this path as
182:39 - a remote
182:40 - root directory so all the jenkins
182:43 - related files
182:44 - or build information will be generated
182:48 - inside this directory on the slave node
182:51 - now next option here
182:52 - is a label so let's click on this
182:55 - question mark and let's see what our
182:57 - label is
182:58 - so label are used to group multiple
183:01 - agent
183:02 - into one logical group so this is a
183:05 - simple definition of a label so for
183:08 - example
183:08 - i'm going to create multiple ubuntu
183:11 - slaves
183:12 - so i can give a label here ubuntu
183:15 - okay so whenever i will use this label
183:18 - ubuntu
183:20 - one of the ubuntu node will be used
183:24 - to execute the jenkins jobs and here you
183:27 - can
183:28 - see for example if you have multiple
183:30 - windows agent
183:31 - and you have a job that must run on
183:34 - windows
183:35 - you can give this label on your jenkins
183:38 - job
183:38 - configuration and then one of
183:42 - the slave node which have the label
183:45 - windows will handle that job
183:49 - so labels are used to group multiple
183:52 - agent into one logical group for windows
183:56 - for example you can give windows level
183:58 - all of your ubuntu
184:00 - nodes you can give ubuntu label or any
184:02 - other logical
184:04 - label which you can use to group those
184:07 - kind of
184:08 - nodes so in my case i'm going to give
184:10 - this label ubuntu here
184:11 - and i'm going to just minimize uh this
184:14 - explanation
184:15 - and the next section here is the usage
184:18 - for now i'm going to use
184:20 - use this node as much as possible there
184:22 - are other option
184:23 - also for example this option which says
184:26 - only build job with
184:27 - label expression matching this node so
184:31 - if you
184:31 - use this one then if your jenkins
184:35 - configuration will have
184:36 - ubuntu label then only
184:39 - this node will be used to execute
184:43 - that job so i'm going to just use use
184:45 - this node as much
184:47 - as possible now the next option here is
184:50 - launch method and there are a few
184:52 - options here
184:53 - one is launch agent via execution
184:56 - of command on the master we are going to
185:00 - use
185:00 - the next option which is launch slave
185:03 - agent
185:04 - via ssh okay so i'm going to just use
185:07 - the second option
185:08 - which says launch slave agent via ssh
185:11 - so just select this option and then
185:14 - this is the host name so host name we
185:17 - will just go to
185:18 - our slave machine and here we can just
185:21 - give if
185:23 - config command and then press enter
185:26 - and here you will be able to see the
185:28 - host name which is the ip address of
185:30 - the slave machine and i'm going to just
185:34 - give this host ip
185:37 - address here now in order to verify if
185:40 - ssh
185:40 - is working from your slave to your
185:43 - master
185:44 - you can open the command line on the
185:46 - master
185:47 - and then you can just write ssh and then
185:50 - the username
185:51 - to which you want to connect so i want
185:52 - to connect for example
185:54 - this user which is a code bind here so
185:57 - i'm going to just write
185:59 - code bind at the rate
186:02 - the ip address which you have copied
186:04 - from the slave which is
186:08 - 192.168.1.4
186:09 - and now you will be able to see this
186:11 - kind of message i'm going to just say
186:13 - yes and then press
186:14 - enter which is going to ask for your
186:17 - slaves
186:18 - password so this is the login password
186:21 - which you use to login to your slave
186:23 - machine which is
186:25 - this machine okay so this machine's
186:27 - password you need to give here
186:29 - i'm going to give my slave machines
186:31 - password
186:32 - and now i'm logged in to my slave
186:35 - machine using ssh okay
186:38 - if this is working then this connection
186:41 - will also work
186:42 - so just use the host ip address here and
186:45 - in the credentials
186:46 - right now we don't have any credentials
186:48 - here so we will add some credentials so
186:50 - just
186:51 - click on add option here and then click
186:53 - on jenkins and when you
186:55 - just click here in front of kind there
186:58 - are few options here
186:59 - one is username with password other is
187:02 - docker option
187:04 - and next is ssh user name with private
187:07 - key
187:08 - so you can use any one of these method
187:11 - and for now we are going to just use the
187:14 - first method which is username and
187:16 - password so we will provide the username
187:18 - and the password so username is code
187:21 - bind this is the username of my slave
187:25 - machine
187:26 - and then i'm going to give the password
187:28 - of my
187:29 - slave machine which i use to log into
187:31 - the slave
187:32 - and then i'm going to just click add
187:35 - here and then i'm going to go to the
187:36 - credentials you can see by default
187:39 - none is selected here you just need to
187:41 - select the
187:43 - new credentials which you have recently
187:46 - created so i have created these
187:48 - credentials i'm going to just choose the
187:50 - credentials which i have created
187:52 - now the next option here is host key
187:55 - validation strategy
187:56 - so this is important you just need to
188:00 - just select this option which says
188:02 - manually trusted key verification
188:04 - strategy
188:05 - okay so just click on this option which
188:07 - says manually trusted key verification
188:10 - strategy
188:11 - in the option host key verification
188:14 - strategy
188:15 - and this step is important otherwise you
188:17 - will face the problem
188:19 - and the next option here is require
188:22 - manual verification of initial
188:24 - connection
188:24 - just leave this unchecked this is also
188:27 - important
188:28 - you just need to leave this as unchecked
188:32 - now the next option here is the
188:34 - availability
188:35 - if you want to see the advanced option
188:38 - you can just click
188:39 - on this option also for your launch
188:42 - method for example
188:44 - the port on which ssh is connected this
188:46 - can be different if you want
188:48 - and then the jvm options and java path
188:50 - and other options
188:52 - here if you want to set them you can set
188:54 - it from here
188:56 - now in the availability section you will
188:58 - be able to see three options i'm going
189:00 - to leave it as default
189:01 - which is keep this agent online as much
189:04 - as possible
189:05 - now the next section here is the node
189:07 - properties
189:08 - and here you can set the environment
189:10 - variables if you want
189:12 - on your slave node for example
189:15 - java home or maven home or any
189:18 - environment variable which you want you
189:20 - can set it from here
189:22 - on your slave and the next option here
189:24 - is the tool location
189:26 - and this tool location for example if
189:28 - you want to set the default
189:30 - git location of your slave here you can
189:34 - set it from here but i will leave
189:36 - both of them as default okay which is
189:39 - unchecked and then i'm going to just
189:41 - click on the save
189:42 - button and you will be able to see
189:45 - this option and it says
189:49 - the agent is offline some message will
189:52 - be
189:52 - displayed here and when you click on the
189:55 - nodes option here
189:56 - you will see this new node is created
189:58 - but it's offline
190:00 - and you will be able to see this big
190:02 - cross symbol in red
190:03 - which means your agent is still offline
190:07 - so to make it online you just need to
190:08 - click on this
190:10 - slave agent which you have created and
190:12 - then click
190:13 - on the launch agent button i'm going to
190:16 - just click on the launch agent button
190:18 - which is going to connect to my machine
190:21 - and you can see the authentication is
190:24 - successful here and i will scroll down a
190:27 - little
190:27 - and it's doing some work
190:31 - and it says agents successfully
190:33 - connected and online so
190:35 - at the end if you see this message which
190:37 - says agent successfully connected and
190:39 - online
190:40 - that means this agent is working fine
190:43 - and it's online so once again i'm going
190:46 - to click on this nodes option
190:48 - and now you will be able to see this red
190:51 - cross
190:51 - is gone and this agent is now online
190:55 - now one important thing to note here is
190:58 - you need to have java 8 or more
191:02 - installed on your slave machine so make
191:04 - sure
191:05 - that java version 8 or more is installed
191:09 - on your slave otherwise it will fail
191:11 - complaining about
191:13 - java version or something if you have
191:15 - the older version of
191:16 - java so once you're a slave agent is
191:19 - online we are going to see how we can
191:21 - create
191:22 - a jenkins job and use this slave agent
191:25 - so what i'm going to do is i'm going to
191:27 - create a new jenkins job
191:29 - and i'm going to just say test slave
191:34 - 1 for example and this will be a
191:36 - freestyle project and i'm going to just
191:38 - say
191:38 - okay and this jenkins job is created for
191:41 - now i'm going to just leave
191:43 - everything as default i'm not going to
191:45 - give any description here
191:47 - but when you scroll down you just need
191:50 - to
191:50 - choose this option which says restrict
191:53 - where this project can be
191:55 - run so this is important you just need
191:56 - to choose this
191:58 - option in order to select the name of
192:01 - your slave agent
192:02 - okay so your slave agent name
192:06 - is ubuntu 164 agent
192:09 - in my case this is the slave agent name
192:13 - and i can also see the label name okay
192:16 - so you can either give the label name
192:18 - of your slave agent or you can give the
192:21 - actual
192:22 - name of your slave agent i'm going to
192:24 - choose the second option here
192:25 - which is the slave agent name okay
192:29 - and then i will scroll down and
192:32 - for now i will just execute a simple
192:35 - shell command here
192:36 - on the slave agent and i'm going to just
192:38 - say echo
192:40 - and then i will just say this
192:43 - message is executed
192:48 - on slave node
192:51 - so i will just execute this message in
192:54 - my jenkins bill
192:55 - and i'm going to save this and for now
192:58 - what i'm going to do is i'm going to
193:00 - go to my slave and i'm going to just go
193:02 - to
193:03 - the jenkins location which is this
193:05 - location which i have set where all the
193:07 - files related to jenkins
193:10 - are saved and you can see slave.jar
193:13 - is already saved here when we have
193:16 - tried to connect to this slave right
193:19 - and there is a jdk directory also so now
193:23 - when i
193:23 - just build this job so now my job is
193:27 - building
193:28 - and i'm going to go and see the console
193:30 - log here
193:31 - and you can see everything is successful
193:34 - and this
193:35 - build was successful and now once again
193:38 - i'm going to go to my slave and do
193:40 - ls once again and you can see workspace
193:43 - directory is created when i have
193:44 - executed
193:45 - this build here and inside the workspace
193:48 - there will be my
193:51 - job name which is test slave one you can
193:54 - see the name of my jenkins job is
193:56 - testle one and on my slave node
193:59 - inside the jenkins directory which i
194:01 - have given
194:02 - inside the workspace this uh job name is
194:05 - also created there so that means
194:08 - everything is working fine and this job
194:10 - is executed
194:12 - on the slave machine and not on my
194:15 - master machine
194:16 - which is where my jenkins is actually
194:19 - running right so everything is executed
194:22 - on the slave machine now
194:24 - so this is how you can create a slave
194:26 - node using jenkins and you can connect
194:29 - to the slave node
194:30 - in jenkins hey guys welcome to the next
194:33 - video on jenkins tutorial for beginners
194:36 - in the last video we have seen how we
194:38 - can create a slave agent in jenkins
194:41 - and launch the slave agent via ssh
194:45 - now in this video i'm going to show you
194:47 - how we can create a slave agent
194:50 - and launch this slave agent via a
194:53 - method called java web start
194:57 - now in the last video we have seen how
194:59 - to create a linux slave agent
195:02 - and in this video i'm going to show you
195:04 - how you can create a
195:06 - windows slave agent so let's get started
195:10 - now before starting and before launching
195:13 - our slave agent
195:14 - via java web start we need to do some
195:18 - settings
195:19 - and i'm going to show you how to do
195:21 - these settings so first of all
195:23 - go to the manage jenkins section
195:28 - and once the manage jenkins section is
195:30 - open go to
195:31 - configure system settings so just click
195:34 - on configure system
195:36 - and once the configure system settings
195:38 - are open
195:39 - you just need to scroll down until you
195:42 - find
195:43 - this section which says jenkins location
195:47 - now by default this jenkins url
195:51 - is set to http colon forward slash
195:54 - forward slash
195:54 - localhost port 8080
195:58 - and you will see this small warning here
196:01 - also
196:01 - which says please set a valid host name
196:04 - instead of
196:05 - localhost so if you have the host name
196:09 - for your jenkins server then you can
196:12 - give
196:13 - this host name here otherwise we will
196:16 - give
196:16 - the local ip address of this
196:19 - server instead of the local host
196:23 - okay so to know the local ip address i'm
196:26 - going to just open the terminal and i'm
196:28 - going to just write
196:29 - if config command and then press enter
196:32 - which is going to give me the local
196:35 - ip address which is this one so i'm
196:37 - going to replace
196:39 - this local host by this ip address
196:43 - okay so if you have the host name
196:46 - for your jenkins server you can write
196:48 - the host name here
196:49 - if you have the ip address of your
196:52 - jenkins server just write the ip address
196:55 - here
196:55 - instead of localhost and this is
196:58 - important
196:59 - for this particular step to launch
197:02 - your slave agent via java web start
197:06 - and now i'm going to save my
197:08 - configurations
197:10 - and once the configurations are saved
197:13 - now we are ready to create
197:15 - our new slave node so once again i'm
197:18 - going to go to the manage jenkins
197:20 - section
197:21 - and i'm going to choose the section
197:23 - called manage
197:24 - nodes and you can see our master node is
197:28 - there
197:28 - and the second node is this node which
197:31 - is ubuntu which we have created in the
197:33 - last video which is offline right now
197:35 - because my slave is not running right
197:38 - now so that's why
197:39 - it's offline so let's create a new node
197:42 - so i'm going to just click on the new
197:44 - node option
197:46 - and here i'm going to give the name of
197:48 - my node i'm going to just
197:50 - give the name windows 8 because
197:54 - the slave is running on the windows 8
197:58 - operating system
197:59 - so i'm going to just give the name
198:01 - windows 8 underscore
198:03 - agent okay and then you can just choose
198:06 - this option which says
198:08 - permanent agent if you want to copy
198:11 - the existing node then you can also
198:13 - choose
198:14 - the option which is called copy existing
198:16 - node but right now we don't have any
198:19 - windows agent that's why i have just
198:21 - chosen
198:22 - this option which says permanent agent
198:25 - and now i'm going to just click on ok
198:28 - and you will see this section here so
198:31 - most of the options which are shown here
198:34 - we have discussed
198:35 - in the last video so i'm going to go
198:38 - through
198:38 - all of them one by one really fast so
198:41 - the name
198:42 - is windows 8 agent description whatever
198:45 - you want you can describe here
198:47 - number of executors we will take a
198:50 - number of executors as
198:52 - two which means that this windows agent
198:55 - will be able to run
198:57 - two parallel jobs and then
199:00 - we need to provide the remote root
199:02 - directory and this will be the directory
199:05 - where all
199:06 - of your jenkins related file will be
199:08 - saved
199:09 - on your windows slave agent so i
199:12 - already have created a directory
199:16 - inside my c folder on my windows slave
199:19 - agent
199:20 - and i'm going to just copy this path
199:23 - from my windows slave agent
199:24 - and i'm going to paste it here okay and
199:28 - the label we already know what is label
199:30 - from the last video so i'm going
199:32 - to just give this label here which is
199:35 - windows
199:36 - you are free to give any other label
199:38 - which you wish
199:39 - to provide here usage i'm going to just
199:43 - leave it as default which is use this
199:45 - node as much as possible
199:47 - and you will be able to see this option
199:50 - which is
199:51 - launch agent via java web start
199:54 - okay so if you don't see this option
199:58 - which is launch agent web start
200:01 - you just need to go to the settings once
200:03 - again so
200:04 - this is when you don't see this option
200:07 - which is
200:08 - a launch agent via web start you just
200:10 - need to go to your dashboard and once
200:12 - again go to
200:14 - manage jenkins and then go to
200:17 - configure global security and inside the
200:20 - configure global security options you
200:22 - just need to scroll down
200:24 - until you find the agents section
200:28 - so this is the agent section and by
200:30 - default
200:31 - this is disabled okay so what you need
200:35 - to do
200:36 - is you just need to choose the random
200:38 - option here
200:39 - otherwise if you want to provide the
200:41 - fixed port here
200:43 - you can just choose this option which is
200:45 - fixed
200:46 - and then you can just give any port
200:48 - which you want to use
200:50 - okay but i prefer using the random port
200:53 - so i'm going to just choose this option
200:55 - and i will suggest you to choose this
200:58 - option here
200:59 - and then only you will see this
201:02 - option in your node creation which is
201:06 - launch agent via web start
201:07 - okay so if this option is disabled you
201:10 - will not see
201:12 - the option in your launch method so i'm
201:15 - going to just save
201:17 - these settings and then once you see
201:20 - this method you just need to choose this
201:22 - method from here
201:24 - and then leave everything as default
201:27 - and the availability i'm going to just
201:30 - leave it as default
201:31 - also which is keep this agent online as
201:33 - much as possible
201:34 - and the environment variables and tool
201:36 - location we have discussed in the last
201:38 - video
201:39 - i'm going to leave them as default which
201:41 - is unchecked and i'm going to save
201:44 - all the settings and you can see windows
201:47 - 8
201:48 - agent is created and right now it's
201:51 - offline so i'm going to just click on
201:55 - this option and this text says connect
201:58 - agent
201:59 - to jenkins via one of these
202:02 - two methods so there are two method you
202:04 - can use
202:05 - to connect to your windows agent
202:08 - one is open this url
202:12 - on your windows agent and then click on
202:16 - this button
202:16 - which is going to connect to your
202:19 - jenkins server
202:20 - otherwise the second option is you just
202:23 - need to copy this command
202:25 - and run it onto your windows
202:28 - agent terminal so we are going to choose
202:31 - the second option
202:32 - and we are going to run this command
202:35 - onto our windows terminal
202:37 - so to open this jenkins server
202:40 - on the windows slave i can just
202:44 - use this ip address until
202:47 - windows 8 agent which is also this
202:50 - address but you need to replace this
202:51 - local host
202:53 - by the ip address of your jenkins slave
202:56 - or the host name
202:57 - of your jenkins slave okay so i'm going
203:00 - to copy this address
203:01 - until uh windows 8 agent
203:05 - like this and i'm going to open the
203:07 - browser on my windows slave agent
203:10 - so this is the browser which is running
203:11 - on my windows slave agent and i'm going
203:14 - to just
203:15 - paste this url there which is going to
203:18 - open this jenkins web page
203:21 - on your windows slave agent right
203:24 - now before using this command we need to
203:28 - save this agent.jar file which you can
203:31 - download
203:32 - from this link so you just need to click
203:34 - on this agent.jar link
203:37 - i will suggest you to just save this
203:40 - agent.jar on your jenkins folder
203:44 - wherever you have
203:46 - created your jenkins folder for saving
203:49 - all the jenkins related files so i'm
203:50 - going to save it
203:52 - here which i have provided as the root
203:55 - directory for my slave also okay
203:58 - so let me save this file so now what i'm
204:01 - going to do is i'm going to open the
204:02 - terminal on my windows slave agent so
204:05 - i have opened this terminal on my
204:07 - windows slave agent
204:09 - and first of all i will cd into
204:12 - this folder where i want to save all my
204:16 - jenkins related files which is c colon
204:18 - slash jenkins
204:19 - so once i'm into this folder where my
204:22 - agent.jar
204:23 - is there i'm going to just copy this
204:25 - command which
204:26 - i can see on my windows slave
204:30 - using the jenkins ip address okay
204:34 - so i'm going to just copy this command
204:36 - make sure
204:37 - that this is not localhost this is the
204:39 - host name
204:40 - or the ip address of your
204:43 - jenkins machine so i'm going to just
204:45 - copy this
204:46 - whole command and paste it into
204:50 - my windows terminal and then press enter
204:54 - and this is going to run this agent
204:57 - and once you see this info which says
205:00 - connected
205:01 - then your windows slave is connected
205:05 - to your jenkins server so make sure you
205:08 - see this connected message
205:10 - and then you can directly go to your
205:13 - jenkins
205:13 - master server which is this one
205:16 - and i'm going to open the nodes here so
205:19 - you can see we have created this node
205:21 - right now so i'm going to go to the
205:23 - nodes
205:23 - and you will see this cross symbol is
205:27 - removed from the windows 8 agent that
205:31 - means
205:32 - this agent is now online which is
205:34 - windows 8 agent
205:36 - so let's use this agent to create a
205:39 - jenkins job so i'm going to go to the
205:41 - home folder
205:42 - and i'm going to create a new job and
205:45 - let's say
205:46 - this will be my windows test
205:50 - one and then i'm going to choose the
205:52 - freestyle project and i'm going to just
205:54 - click ok which is going to create this
205:56 - job and once this job is created
205:59 - in the general settings i will leave
206:01 - description
206:02 - as default which is blank and then i'm
206:04 - going to scroll down a little
206:06 - and i'm going to choose this option
206:08 - which says restrict where this project
206:10 - can run
206:11 - and this time i'm going to use the label
206:14 - which i have given
206:15 - to my windows slave agent which is
206:18 - windows so this is the label you can
206:20 - also choose the agent name directly
206:23 - which is windows 8
206:24 - agent but this time i'm going to choose
206:26 - this one which is windows
206:28 - label okay so i have chosen this
206:32 - windows label here and then i will
206:34 - scroll down i will script
206:36 - everything i just want to test whether
206:38 - this slave is running or not
206:40 - so under the build section i'm going to
206:42 - just choose this option which says
206:45 - execute windows batch command so just
206:48 - choose this option which says
206:49 - execute windows badge command because we
206:52 - are running
206:53 - this jenkins job on our windows
206:55 - operating system
206:56 - okay and then i think windows understand
207:00 - the echo command so i'm going to just
207:02 - write echo
207:04 - this command
207:07 - will run on
207:10 - your windows slave so i'm going to just
207:14 - execute this command on my windows slave
207:16 - and if you want to see
207:18 - in which directory we are working in we
207:20 - can use the cd command
207:23 - cd command is same as pwd command
207:26 - in your linux operating system so this
207:30 - will print
207:30 - the present working directory on your
207:33 - windows
207:34 - operating system so now i'm going to
207:36 - save this
207:37 - job and once the job is created i'm
207:40 - going to just
207:41 - build this job which is going to start
207:43 - building the job
207:44 - and i will just go to the console output
207:47 - of this job
207:49 - and you will be able to see the output
207:51 - of the cd command
207:52 - you can see the cd command is executed
207:55 - and the cd command
207:56 - output is this one so
208:00 - we have chosen c colon slash
208:03 - jenkins as our root directory so this is
208:06 - the root directory
208:07 - and then jenkins will create a workspace
208:10 - directory inside
208:12 - your root directory and then you will
208:14 - see your jenkins job name which is
208:16 - windows test one
208:17 - in our case you can see here also
208:20 - and the next command we have executed is
208:23 - echo
208:24 - and whatever text we have written here
208:26 - which is
208:27 - also executed successfully so it has
208:30 - echoed
208:30 - the sentence and then at last we can see
208:33 - the success message
208:34 - that means our jenkins job is build
208:37 - successfully
208:39 - and on your windows slave you can also
208:42 - see
208:43 - that there will be a remoting directory
208:46 - created
208:46 - and there will be a workspace directory
208:48 - created
208:50 - and inside your workspace directory your
208:52 - jenkins
208:53 - job name directory will also be created
208:57 - so you can see windows
208:58 - test one is created which is same
209:01 - as your jenkins name
209:05 - so this is how you can create a jenkins
209:08 - slave
209:09 - and launch this slave agent via
209:12 - a method called java web start
209:15 - hey guys welcome to the next video on
209:17 - jenkins tutorial for beginners
209:19 - in this video i'm going to show you how
209:21 - you can parameterize your build
209:23 - in jenkins now sometimes it is necessary
209:27 - or
209:27 - useful to have bills to take
209:30 - one or more parameters and jenkins allow
209:34 - you to parameterize your build
209:37 - so that you can provide one or several
209:40 - parameters
209:41 - at the time of building your job
209:44 - so let's see how we can do it so we are
209:47 - going to create
209:48 - a new jenkins job so i'm going to just
209:51 - click
209:51 - on new item and then i'm going to give
209:54 - the name to my job which
209:56 - is parameterized project
209:59 - and then we are going to choose the
210:00 - freestyle project and i'm going to click
210:02 - ok here which is going to create our
210:05 - jenkins
210:06 - job so once your job is created i will
210:09 - leave
210:09 - this description as default which is
210:12 - blank
210:13 - and then to parameterize your build you
210:16 - will see in
210:18 - this general section under the
210:19 - description there is an
210:21 - option called this project is
210:23 - parameterized
210:25 - okay so you just need to choose this
210:27 - option which says
210:28 - this project is parameterized here you
210:31 - can
210:32 - add several type of parameters for
210:35 - example boolean parameter or
210:37 - choice parameter or credentials
210:38 - parameter and you can see there are
210:40 - several parameters which you can choose
210:43 - from this list so we are going to choose
210:46 - let's say string parameter for now
210:48 - and here let's say at the time of
210:52 - building our job we want the user to
210:54 - provide the platform on which
210:56 - this jenkins job is running so in the
210:58 - first option which asks us to provide
211:00 - the variable name we will
211:02 - just provide the platform a keyword here
211:05 - which is the variable name which we will
211:08 - use
211:09 - in our build and you can also provide
211:11 - the default value of
211:12 - this parameter let's say the default
211:15 - value
211:16 - of this parameter is linux it's optional
211:19 - so if you don't provide any default
211:21 - value
211:22 - it's okay but if you want you can
211:25 - provide the default value from here
211:27 - and also the description is also
211:29 - optional so if you want to provide the
211:31 - description you can provide it from here
211:33 - or you can leave it as default and there
211:36 - is one more option here which says trim
211:38 - the string if you check this
211:41 - option you can see what it does so strip
211:45 - white spaces from beginning and the end
211:47 - from the string
211:49 - so we have added one parameter
211:52 - to our jenkins build and then
211:56 - i will leave the other sections as
211:59 - default
212:00 - and in the build section i'm going to
212:01 - just choose this option which says
212:04 - execute shell
212:05 - if you are using windows you can choose
212:07 - execute windows
212:08 - batch command from here and here i'm
212:10 - going to just echo
212:12 - the parameter which is provided by
212:14 - jenkins to us
212:15 - so to echo a parameter on linux you can
212:19 - use dollar symbol and then the parameter
212:23 - name which is in our case the parameter
212:26 - name is platform
212:28 - okay so just copy this
212:31 - parameter name and after this dollar
212:34 - symbol
212:34 - just write your parameter name
212:38 - and this is going to just print the
212:42 - value
212:43 - which you will provide for your
212:45 - parameter
212:46 - so i'm going to save this job and once
212:49 - the job is saved
212:51 - i'm going to just execute this build
212:54 - so now one new thing you will see here
212:57 - is
212:58 - normally you will see this text as build
213:01 - but because we have provided some
213:04 - parameters for this build
213:06 - so it says here build with parameters
213:09 - okay so just click on this job
213:12 - and on the right hand side you will see
213:14 - here this build requires parameters
213:17 - and the default value of this variable
213:20 - or parameter platform we have given
213:22 - linux here
213:23 - so let's change this default value let's
213:26 - say we want to just give
213:28 - unix value for our platform variable and
213:32 - i'm going to just click
213:33 - on this build button which is going to
213:36 - build
213:37 - our job with that parameter and i'm
213:39 - going to just go to
213:41 - the console output to see if it's
213:43 - successful or not
213:45 - so you can see this echo command is
213:48 - executed
213:48 - with the parameter which we have
213:50 - provided
213:52 - which is unix okay so this is how you
213:55 - can provide
213:56 - the parameters to your jenkins
213:59 - build now i'm going to go to the
214:01 - configuration once again
214:03 - so if you have a different operating
214:06 - system
214:07 - some operating system for example if you
214:10 - are using
214:11 - the same uh echo command on
214:15 - your windows operating system you can
214:18 - use these modules symbol
214:22 - in front and the back of your
214:25 - parameters so on windows you need to
214:28 - provide this mod
214:29 - in front and at the end of your
214:31 - parameter
214:32 - then it will be executed without giving
214:35 - you problems so this is
214:36 - for windows so i'm going to just provide
214:39 - this hash which is a comment
214:41 - and i'm going to just write windows here
214:45 - so for
214:45 - windows you need to use this mod symbol
214:49 - in front and end and on mac i think this
214:52 - dollar will
214:53 - work if this dollar doesn't work then
214:57 - we can also use for example
215:00 - echo and then a dollar and in these
215:03 - curly brackets
215:05 - your parameter name which is a plate
215:08 - form
215:08 - so in some operating system this type of
215:10 - syntax is valid so you can also use
215:13 - this type of syntax now let's uh choose
215:16 - some
215:16 - more parameters from here so one
215:19 - parameter we have already
215:20 - provided which is a string parameter
215:23 - let's provide the second parameter
215:25 - and this parameter will be a choice
215:28 - parameter so you can
215:30 - choose from a list of the choices which
215:34 - you
215:34 - give here so the variable name i'm going
215:36 - to give here is
215:39 - choice itself and here you can give your
215:42 - choices so for example
215:44 - a b c
215:47 - d e something like this if you want to
215:50 - choose some other kind of variable name
215:52 - you can
215:53 - just choose linux and and then
215:57 - windows or mac or
216:00 - unix or any other so this type of
216:03 - choices you can provide in this choices
216:07 - box one by one on every line so
216:10 - every line is a choice here
216:13 - and i'm going to leave this description
216:15 - as default and let's echo this
216:17 - choice parameter also so i'm going to
216:19 - just write
216:21 - choice from here and then i'm going to
216:23 - just save this
216:24 - build and once again i'm going to click
216:26 - on build with parameters
216:28 - and you can see there are two parameters
216:30 - present now
216:32 - one is the platform parameter other is
216:34 - the choice parameter
216:36 - so platform i will leave as linux and
216:39 - the choice i will
216:40 - just choose d here and then i'm going to
216:43 - click on build
216:44 - which is going to build my job and then
216:47 - i'm
216:48 - going to go to the console output and
216:50 - you can see it has
216:52 - a code linux first of all and then a
216:54 - code d
216:55 - is executed which we have chosen from
216:58 - the choice
216:59 - parameters so this is how you can
217:01 - parameterize
217:02 - your job or build in jenkins
217:06 - hey guys welcome to the next video on
217:07 - jenkins tutorial for beginners
217:10 - in this video i'm going to show you how
217:12 - to use jenkins
217:13 - cli and more specifically i'm going to
217:16 - show you
217:17 - how you can run your jenkins job
217:21 - using jenkins cli so let's get started
217:24 - so first of all what i'm going to do is
217:26 - i'm going to just click on manage
217:28 - jenkins here and when you scroll down
217:31 - you will be able to see this option
217:32 - which says
217:33 - jenkins cli so once you are in this
217:37 - jenkins cli section you will be able to
217:39 - see this command which you can use
217:42 - to get help on using jenkins
217:46 - cli now when you want to
217:49 - use jenkins to for example build your
217:52 - job
217:53 - or add job to view or there is a list
217:56 - of command which you can use with
217:58 - jenkins cli
218:00 - you just need to click on the specific
218:02 - command which you want to execute
218:04 - for example i want to execute build
218:06 - command i can just
218:08 - click on this build command and then
218:10 - this is the command
218:12 - which i can use to build my job with
218:15 - some flags and the description of these
218:18 - flags
218:19 - are given here so let's uh
218:22 - use this uh jenkins cli command
218:26 - to build uh jenkins job so first of all
218:29 - you need to download this jenkins
218:32 - minus cli jar file and you can download
218:35 - it
218:35 - by clicking on this jenkins cli jar file
218:39 - and you can save it on your computer
218:41 - first of all
218:42 - and once this jenkins cli jar is
218:45 - downloaded
218:46 - you can copy this jenkins cli jar
218:50 - at the comfortable location and then use
218:53 - this ghr to execute the
218:56 - command which is given here so let me
218:59 - open the terminal first of all
219:00 - and i will first of all create a jenkins
219:04 - directory so
219:06 - mkdir jenkins
219:09 - and i want to move this jenkins cli
219:12 - uh jar file into this directory so this
219:15 - is in my downloads
219:17 - folder so i'm going to just write mv
219:21 - and then i will just move this
219:25 - jar file which i have downloaded from
219:28 - the downloads folder to this jenkins
219:32 - folder
219:33 - so i'm going to just give this command
219:34 - which is going to
219:36 - move this jar file into the jenkins
219:39 - folder
219:40 - so i'm going to just cd to the jenkins
219:42 - folder now
219:43 - and you can see this jenkins cli.jar is
219:47 - there
219:47 - so now i can use this command to build
219:51 - a job so let's see what job we can build
219:54 - so i have this job which is java hello
219:58 - world
219:59 - and let's build this job using the
220:02 - jenkins cli so
220:03 - the job name is java hello world
220:06 - so i'm going to just first of all copy
220:09 - this command
220:10 - up to job and then i'm going to just
220:14 - paste
220:14 - this command on my terminal and
220:17 - instead of job here you just need to
220:20 - give
220:20 - the name of your jenkins job which you
220:23 - want to build so the name of the jenkins
220:25 - job is java hello world
220:27 - which i will provide here and then press
220:30 - enter
220:31 - and of course this will fail because
220:34 - our jenkins require the permission so
220:38 - right now we are logged in with
220:39 - the admin credentials that's why we need
220:42 - to give the admin credentials
220:44 - in case you want to execute your job
220:47 - without the credentials you can go to
220:50 - manage
220:50 - jenkins and then go to configure
220:54 - global security and once you are in the
220:56 - configure global security
220:58 - there is a option under authentication
221:01 - we have previously chosen this option
221:04 - which is role based
221:05 - strategy right so if you want to disable
221:08 - this
221:09 - authentication you can choose this
221:11 - option which says anyone can do anything
221:14 - and save this configuration and once
221:17 - this configuration is saved
221:19 - this command will work because now
221:22 - we don't need any credentials to run
221:26 - the jenki's job so once again i'm going
221:28 - to give this
221:29 - command and this time you can see it's
221:33 - successful
221:34 - and it hasn't given any error to us
221:37 - but you can see this command doesn't
221:39 - give any result it just
221:41 - executes and then no result is printed
221:45 - and when you go to the location where
221:48 - your jenkins job is there on this
221:50 - jenkins ui
221:52 - you will see this jenkins job is
221:54 - executed
221:55 - but no result is printed here so for
221:58 - example you can see
221:59 - i have five bills right now and when i
222:02 - execute this command once again and i
222:05 - will
222:06 - refresh this web page you will be able
222:09 - to see
222:10 - a sixth build is executed successfully
222:13 - here
222:13 - so now in case you want to see the
222:15 - output
222:16 - of your build on the terminal itself
222:19 - what you can do is you can go to this
222:22 - command
222:23 - once again from where you have copied
222:25 - and you can see there are
222:27 - a bunch of flags you can provide so
222:30 - the flag minus f is going to show you
222:34 - the output of your jenkins job so i'm
222:38 - going to
222:39 - just give the minus f flag
222:42 - with my command and then press enter and
222:45 - you can see
222:46 - started java hello world build and you
222:49 - will be able to see uh
222:50 - here also the seventh build is
222:54 - executed successfully on the jenkins ui
222:57 - also and some output is printed here
223:00 - also
223:00 - it says started java hello world seventh
223:03 - build
223:04 - and the build status was successful now
223:07 - if you want to see
223:08 - more verbose output you can use
223:11 - this flag which is minus v and you can
223:14 - see this flag
223:15 - is used with minus s so we will
223:18 - give this flag which is minus v
223:21 - with minus s and then press enter
223:25 - and you can see started the build number
223:28 - eight
223:29 - and you will see all the console output
223:32 - which you
223:32 - see generally on your jenkins
223:36 - job so when i just refresh this and i
223:39 - will go to
223:40 - the console output here so this is the
223:43 - output
223:44 - which you see in the console output this
223:46 - output will be
223:48 - shown on the terminal also same output
223:51 - will be shown here
223:53 - and once again the build status is
223:55 - successful
223:56 - now in order to use this jenkins cli
223:59 - command with
224:00 - the authentication you just need to go
224:02 - to the manage
224:03 - jenkins section once again and then go
224:06 - to
224:06 - configure global security and this time
224:09 - we will enable
224:11 - in authentication the logged in user can
224:13 - do anything
224:14 - so you need to just choose this option
224:17 - which says
224:18 - logged in user can do anything and
224:21 - you also need to check this option which
224:23 - says allow anonymous
224:25 - read access so this is important you
224:27 - need to check
224:28 - this option and this option as well
224:32 - which is
224:32 - logged in user can do anything and then
224:35 - i'm going to save
224:36 - this configuration and this time
224:39 - with this command so let me clear the
224:41 - terminal first of all
224:43 - so i'm going to clear the terminal and
224:45 - with this command
224:46 - which we have used to build the
224:49 - java hello world jenkins job we will use
224:53 - the username
224:54 - so i'm going to just write minus minus
224:56 - user
224:57 - name and space the username is
225:01 - admin in my case and then to provide a
225:04 - password you just need to give
225:06 - this flag which is minus minus password
225:10 - and space your password so my password
225:13 - here is root so i'm going to give my
225:16 - password and then press
225:17 - enter and this is going to start the
225:20 - build you can see
225:21 - java hello world ninth build was
225:25 - started and it's ended successfully so
225:28 - the build status
225:29 - is success here so in order to provide
225:32 - the credentials you just need to
225:34 - use these two flag which is username
225:36 - your username
225:37 - and minus minus password your password
225:41 - so now let me show you one more thing
225:42 - which is to execute
225:44 - a parameterized jenkins job
225:47 - using command line so i'm going to go to
225:51 - my jenkins home here and i'm going to
225:54 - choose a project which i have created
225:56 - in the last video which shows how to use
225:59 - parameters
226:01 - in your jenkins job and its name was
226:04 - parameterized
226:05 - project now if you don't know how to
226:08 - create a parameterized
226:10 - jenkins job you need to see the last
226:13 - video so i'm not going to create a new
226:15 - uh
226:15 - job i'm just going to use the jenkins
226:18 - job which i have created earlier
226:20 - so in this uh jenkins job we have this
226:23 - build with parameters option
226:26 - and there are two parameters here one is
226:28 - platform
226:29 - and other is choice so i'm going to just
226:32 - use
226:33 - this jenkins job name first of all and
226:36 - i'm going to go to the terminal
226:38 - and let me clear the terminal and i'm
226:41 - going to
226:41 - use the same command but this time the
226:43 - project name is different so
226:45 - instead of java hello world the project
226:47 - name is
226:48 - parameterized project which is this one
226:52 - and in order to provide the parameters
226:55 - you need to
226:55 - give the flag which is minus p
226:59 - so at the end just add minus p
227:03 - and then your parameter name so the
227:06 - parameter name
227:07 - i have is first of all a plate form
227:10 - and it's better to use double quotes if
227:13 - you have single word
227:15 - then you can avoid these double quotes
227:18 - but i prefer to use
227:19 - these double quotes even if this is a
227:22 - single
227:23 - word string so here i'm going to just
227:26 - write linux
227:27 - now once again i'm going to just use
227:30 - minus p
227:31 - flag for providing the second parameter
227:34 - and the second parameter is a choice
227:36 - here so i'm going to once again
227:38 - use minus p choice which is the
227:40 - parameter name
227:42 - and then the parameter value so for
227:44 - example i want to just give c here
227:46 - as a choice and then i'm going to just
227:48 - press enter
227:50 - which is going to execute this job you
227:52 - can see
227:53 - the job is executed and you can see it
227:57 - has
227:57 - echoed the linux keyword
228:01 - and the c letter and the build was
228:05 - successful
228:06 - so this is how you can provide the
228:08 - parameters to
228:10 - your jenkins job using jenkins
228:13 - cli so this is how you can use jenkins
228:16 - cli
228:16 - to execute your jenkins build
228:20 - hey guys welcome to the next video on
228:21 - jenkins tutorial for beginners
228:23 - in this video i'm going to show you how
228:25 - we can create a multi multi-branch
228:27 - pipeline project
228:28 - in jenkins so first of all what is a
228:32 - multi-branch pipeline project
228:34 - so the multi-branch pipeline project
228:37 - type
228:37 - enables you to implement different
228:39 - jenkins files
228:41 - for the different branches of
228:44 - your project now generally in the
228:47 - software teams
228:48 - which is working on our project
228:51 - different developers can work
228:54 - on different features so let's say our
228:56 - team
228:57 - is working on a project called my app
229:00 - and we have a few developers in this
229:03 - team
229:04 - and master branch is generally the final
229:08 - product right which is going to be
229:11 - run in the production now when the
229:14 - developers work
229:15 - on some features they generally create a
229:18 - branch
229:19 - out of this git repository so
229:22 - for example here when you click on
229:25 - branches option here
229:26 - i have one a branch which is feature one
229:29 - so in a normal
229:30 - software project whenever some developer
229:33 - works on some feature he creates a
229:36 - branch
229:36 - and when this feature is implemented he
229:39 - or she merges
229:40 - this feature into the master branch now
229:43 - at the time when this feature
229:44 - is going on and the developer is working
229:47 - on
229:48 - how can he test this feature using
229:51 - jenkins
229:52 - as well as the master branch
229:55 - so multi branch pipeline project allows
229:58 - us to
229:59 - test all the branches of your project
230:02 - at the same time using jenkins
230:06 - so let's create a multi-branch pipeline
230:08 - project in jenkins and then we will see
230:10 - how it works so just click on a new item
230:14 - here
230:16 - and then give any name to your
230:19 - jenkins project for example multi
230:23 - pipeline project and then scroll down
230:26 - and you will be able to see this option
230:28 - which is multi
230:29 - branch pipeline so select this option
230:31 - and then click ok
230:33 - so my multi branch pipeline project is
230:35 - created
230:36 - and here you can give you some
230:38 - description about your project
230:40 - and in the branch source you can give
230:43 - the url of your github project so here
230:47 - you can just click on add
230:49 - source and click on git and then
230:52 - just copy the url of
230:55 - your github repository by just clicking
230:58 - on clone or
230:59 - download and then copy this url from
231:02 - here
231:02 - and then paste it here where it says
231:05 - project repository
231:07 - i don't need to provide any credentials
231:09 - because this project is publicly
231:12 - available
231:12 - but if you want to add your credentials
231:14 - you can add it from here
231:16 - and then in the next section you will
231:18 - see behaviors
231:20 - and there is this option which is
231:22 - automatically enabled
231:24 - which is discover branches so your
231:26 - jenkins job is going to automatically
231:29 - discover
231:30 - your branches and then run
231:34 - your test on all the branches now
231:37 - it's important to notice here is
231:40 - i have this jenkins file here in my
231:43 - project
231:44 - right so make sure that this jenkins
231:47 - file is there
231:47 - we have already seen how we can add this
231:50 - jenkins file to our github project in
231:52 - the previous video
231:54 - so i'm not going to tell you how to do
231:56 - this but make sure that
231:58 - your project have this jenkins file and
232:01 - then when you scroll down
232:03 - you will be able to see this section
232:05 - which says
232:06 - build configuration and in the mode you
232:09 - will be able to see only one option here
232:10 - which is jenkins file
232:12 - and you need to provide the path of your
232:14 - jenkins file here
232:16 - and because my jenkins file is on the
232:19 - root directory so i don't need to change
232:22 - the path
232:23 - of this jenkins file right now when you
232:26 - scroll down
232:26 - more you will be able to see scan multi
232:28 - branch uh
232:30 - pipeline trigger and for now we only
232:32 - have one trigger which is
232:34 - periodically if not otherwise run so
232:37 - when you check on this check box you can
232:41 - run the scan on your project every
232:44 - minute or every two minute or
232:46 - every uh you know this time period which
232:49 - is
232:50 - given in the list okay so for example i
232:53 - can
232:53 - just set it to every five minute then
232:56 - jenkins will scan
232:58 - your project every five minutes and
233:01 - it will just look whether your project
233:04 - have any extra branch or not
233:06 - and if you have committed any changes
233:08 - then it will run the test on
233:10 - every branch of your github project now
233:13 - rest of the thing i will leave
233:15 - them as default because we don't need to
233:18 - use them for now so orphan item strategy
233:22 - we will not be using and then health
233:25 - metrics we can just click on this
233:27 - and you can see there is a one health
233:29 - matrix which is
233:30 - child item with worst health pipeline
233:34 - libraries we don't have any pipeline
233:36 - library so we are going to leave this
233:38 - as default and then the pipeline model
233:42 - definition we also don't have
233:44 - any model definition so i'm going to
233:45 - leave it as default
233:47 - so what we have given here in the
233:49 - configuration
233:50 - the url of our project and make sure
233:53 - that you have the jenkins file
233:56 - in your github project so just choose or
233:58 - leave it as
233:59 - default which is jenkins file and then
234:02 - click on save button and as soon as you
234:06 - press the save
234:07 - button you will see a scan will start
234:11 - on your multi-branch project and this
234:13 - scan
234:14 - is scanning the branches
234:17 - in your github project and you will be
234:19 - able to see
234:20 - uh two tasks which are parallely running
234:23 - here
234:24 - one on the master branch you can see one
234:27 - on the master branch is running
234:28 - and other scan task is running on the
234:31 - feature branch
234:33 - and the same branches are available in
234:36 - my github project also so i have feature
234:38 - one
234:39 - branch and the master branch that's why
234:42 - there are two tasks running to scan them
234:45 - and when i click on my project here you
234:48 - will be able to see
234:49 - two jobs here which are running one
234:52 - is the master branch job and
234:56 - other is the feature branch job and you
234:58 - can
234:59 - individually click on every job so i'm
235:01 - going to click on the master job here
235:03 - and you can see this job is going on
235:06 - and you will be able to see the stages
235:09 - of this job which
235:10 - are currently running so this job is
235:12 - successful you can see
235:14 - and we can also go to the feature branch
235:17 - job also and you can see it's also
235:21 - successfully tested so that's why both
235:24 - of them
235:25 - showing the success now let me show you
235:27 - how you can create a new branch in git
235:30 - and push it to your github project and
235:32 - how
235:33 - this trigger works so i'm going to open
235:36 - the terminal first of all
235:38 - and then i'm going to cd to my project
235:41 - so
235:42 - i'm going to just cd to my
235:45 - project in which i'm working on i have
235:47 - already checked out
235:49 - my project here now to view
235:52 - all the branches in your project you can
235:54 - give this command git
235:56 - branch and then press enter and it's
235:59 - going to show you all the branches in
236:01 - your project so i have
236:02 - two branches right now in my project one
236:04 - is master and other is feature one
236:07 - so let's create one new branch so in
236:09 - order to create a new branch you just
236:11 - need to give this command git
236:12 - branch and your branch name so so let's
236:15 - say i'm going to
236:17 - create a feature branch 2 here so i'm
236:20 - going to write feature
236:21 - 2 and then press enter and now we are
236:25 - going to list all the branches once
236:26 - again
236:27 - and now you can see there are three
236:29 - branches in my project
236:31 - so one is master branch and other two
236:33 - are feature branches
236:35 - now in order to push this branch to your
236:37 - github repository you can give this
236:39 - command
236:40 - git push or region
236:44 - and then your branch name so my branch
236:46 - name is feature 2
236:47 - and then press enter and you can see
236:50 - this branch is now
236:51 - pushed to our github repository so we
236:54 - can verify it by going to our github
236:56 - repository
236:57 - and then refreshing this web page and
237:00 - i'm going to once again click on
237:01 - branches
237:02 - and you can see our new branches visible
237:04 - here which is feature
237:06 - two okay so now once we have the new
237:09 - branch
237:10 - we can trigger them with some web hooks
237:13 - like jira or git bucket but right now we
237:16 - don't have any
237:17 - web hook so we are going to just press
237:19 - on this button which says
237:21 - scan multi branch pipeline now so i'm
237:24 - going to just
237:25 - click on this and then i'm going to
237:26 - scroll down a little
237:28 - and you can see there is a new task
237:31 - running here which is for the feature
237:34 - branch
237:35 - 2 and when i refresh this web page so
237:37 - i'm going to refresh this jenkins web
237:39 - page
237:40 - and now you can see this feature branch
237:43 - 2 jenkins
237:44 - task is running right so when i click on
237:47 - this
237:47 - feature branch 2 this build is running
237:51 - and you can see all the tasks are
237:54 - here running and the build is successful
237:57 - now
237:57 - so now you have three branches and you
238:00 - can see
238:01 - the result of three branches in your
238:04 - jenkins repository
238:06 - so this is how you can create a
238:07 - multi-branch pipeline project in jenkins

Cleaned transcript:

hey guys welcome to this course on jenkins tutorial for beginners so let's get started so first of all what is jenkins so jenkins is an open source automation server written in java one can also say that jenkins is a ci server where ci stands for continuous integration and what is ci we are going to see in details in the next slide now what jenkins does so jenkins is used to detect the changes whatever you commit using your version control system such as subversion or git or any other versioning system and it performs some tasks on your code when it detects some changes in your code so what tasks jenkins can perform repeatedly so jenkins can perform for example if you have a code it can build your code it can test your code it can even deploy your code and even package or integrate your code whenever it detects some changes in your version control system or in your code now let's talk about some of the history behind the jenkins so jenkins is a fork of original hudson project and it was under development since 2005. now hudson was the first release by a developer called kosuke kawaguchi of sun microsystem and in 2010 oracle bought sun micro system due to this some naming dispute occurred and hudson was renamed to jenkins now oracle continued the development of hudson as a branch of the original and the jenkins became the folk of hudson now you can find more about jenkins on jenkins minusci.org but nowadays this website is transferred to a website called jenkins dot io so if you enter this url on your browser it will be redirected to jenkins dot io now before diving deep into jenkins we need to understand what is ci or continuous integration so the basic concept of ci is a ci server continuously integrates newly checked in code into a build that we have already discussed so jenkins detects those changes using the version controlled system and perform some tasks on them for example building or testing or integration test or deploying those builds and so on so you can see in the second step of continuous integration i have written it runs unit tests and rejects the build if they fail so a continuous integration system detects and runs the unit test and it detects the failure and if a failure occurs during the unit test or integration test or any kind of test it's going to reject that build and it's going to send the information to the developer or the maintainer of that code now for example your unit test or whatever test or your whatever build you are making is successful then a continuous integration system is going to deploy your build to other servers so continuous integration is also referred as build automation so you may ask what does this really mean so at regular interval or regular frequency ideally every commit you do in your version control system your continuous integration system is going to integrate your system that means all changes up until that point are combined into that project it's going to build your code so the code is compiled into a executable or a package it's going to test your code so you can automate your test and you can write your test suit which is going to be run by your continuous integration system and if all the previous steps are successful your code will be deployed that means it will be loaded onto a system where the developer can interact with it so now let's talk about some of the benefits or the advantages of a ci system so ci system enables us in immediate bug detection so bug will be detected if some test fails or your build fails and then the ca system is going to deploy your code if your test and your build passes so at any given point you have a deployable system now next is you have the record of evaluation of your project so for example how many times your build succeeded or your test succeeded and at what change or at what point your build failed or your unit test failed it's going to you know get the record of everything so you can see it later and you can just view the quality of your code now the next benefit of a ci system is it's going to detect the system development problem at very early stage so because you can run jenkins repeatedly for example our developer checks in his code using git or subversion or any versioning system it's going to run every job which you have made for example for building your code or your integration test or your unit test or any other test is going to run immediately and if anything fails you can even get the report of that using an email or it will generate some kind of message to your server so everybody will know some error has occurred during the build or the test of your code so everybody will be able to take the action at the earliest as a result you have the reduced risk of cost schedule and budget okay so when you detect the problem earlier obviously you you are going to save on cost and your time and your budget and the last but not the least is the measurable and visible code quality so using a jenkins or any other ci system you will be able to you know visibly see the code quality of your project now let's see using some picture how does it all happens so you can see here are your developers which are going to develop some code and they are going to commit their code into the code repositories such as mercurial or git or subversion and this commit of changes of code will be automatically detected by jenkins so whenever a developer commits his code is going to uh automatically be detected by the jenkins and what jenkins will do is going to run some tests whatever test you have created to run on jenkins for example the unit test or integration test or system test or any other kind of test is going to just run those tests and give you the test results and if the build is successful and tests are successful it's going to just you know transfer your executable file into some artifact repository or it's going to deploy your software onto some other server for examples on some cloud server where you want to use it so here the code is committed and then at a regular interval the jenkins tests the repository and then it runs the test on those codes using your repository and if everything is successful it's going to create the executable and then it will save those executable in your artifact repository or it will deploy your code onto some other server so now let's talk about why jenkins and not any other ci system there are many other ci system available but why jenkins so in jenkins you can create plugins so these plugins are very modular and jenkins plugin extensively makes jenkins to adopt to many systems so you can install jenkins on many systems for example linux or windows or mac operating operating system or any other system and its plugin system is really modular so you can install whatever plugin you want to support that kind of build or that kind of functionality whatever you want now the second is jenkins provide everything for a robust continuous integration system which helps a lot for team that practice agile now agile is a software development techniques which are used widely across many companies and many teams in order to coordinate their work so this is completely another topic agile methodology but if you are a software developer you may not know what agile is the next is jenkins continuously provides access to the working copies of the software which supports the agile principle once again so if your team is working in an agile environment such as sprints or you have scrums or any other agile methodology then jenkins will fit perfectly in your system the next is jenkins is released under mit license so it's an open source ci system that means you can use it freely the next is there is a large support of community and thorough documentation so whatever you need to know about jenkins most probably it will be answered by the support community or you will find it in the documentation of jenkins and the last point is as i already stated that it's really easy to write a plugin in jenkins and if you write a plugin in jenkins it can be used by other community members or everyone who will use jenkins that makes jenkins really powerful in a way that community members creates those plugins and they can be used by everybody who wants to use them and last point i want to add here is if anything goes wrong you can fix it so it's so modular jenkins is so modular that you can fix your problem by yourself so what jenkins can do jenkins can generate reports it can integrate with many different version control systems it can push to various artifact repositories it can deploy directly to your production or test environment it will notify the stakeholders of the build status using email or any other messaging system and many more so this is the brief introduction about jenkins and in the next video we will see how we can install jenkins on different operating systems and then we will go further hey guys in this video i'm going to show you how you can download and install jenkins on your windows 10 operating system so first of all let's talk about the prerequisite of installing jenkins on your windows 10 operating system in order to install jenkins you need to have java 7 or above so make sure you have the latest version of java and then once you have java installed then you are ready to install jenkins so i have already installed java 10 on my windows 10 operating system and i am assuming that you also have the latest version of java so once you have java installed just open your favorite browser and search for jenkins and the first link which will appear here will be from jenkins.io so we are going to click on this link so once you are on this jenkins website you just need to click on the downloads button here and on the downloads page you just need to scroll down a little don't click on downloads yet we are going to see which are the versions which are available for jenkins so when you scroll down you will see different versions of jenkins one is the lts version and other is the weekly release so we are going to use the long term support version and the latest version is 2.107.2 and in here we are going to choose the windows option so here you will see the windows option now one thing you need to keep in mind is when you are installing jenkins on windows it is good to run jenkins as a service so it starts automatically without requiring any user to log in the easiest way to install jenkins on windows is by using a windows installer but if you are a advanced user you can also download the jenkins var file and then you can deploy it on servlets like glass fish or tomcat but for our purpose we want to just learn so we are going to use the windows installer so i'm going to just click on windows here and once you click on windows option you will see this message which says thank you for downloading windows stable installer and you can see here it will download it as a zip file so i'm going to wait for the download to complete so now the download of this zip file is completed so i'm going to minimize the browser and i'm going to go to my downloads folder where i have downloaded this zip file and now i'm going to just open this zip file and in here i will be able to see this windows installer package so i'm going to double click on this windows installer package which is going to start the jenkins installation so i'm going to minimize this folder explorer and you can see uh jenkins 2.107.2 setup window so on this welcome window we don't need to do anything we just need to click next here and this will be the default location where jenkins will be installed so if you don't have the good reason to change it just leave it as default and then click next and then click install and then just click yes we're just going to start installing jenkins and in the end you will see this message which says completed the jenkins setup wizard click finish button to exit the setup wizard so i'm going to click finish so now jenkins is installed on your system and it will ask in which browser you want to open it so i'm going to click on google chrome and you can see on a port localhost 8080 you will be able to see this kind of window so if this window doesn't open automatically you just need to go to your favorite browser and then just write localhost colon 8080 so let's copy this here and just paste it here so http colon forward slash forward slash localhost colon 8080 the default port is port 8080 and i'm going to just click on this and then you will be able to see this kind of window okay so if it doesn't open automatically you can just browse on localhost port 8080 now first thing in order to unlock jenkins you just need to provide the initial admin password and this password is set in this directory so just copy this path here and then i'm going to open my folder explorer and i'm going to paste this path and you will see uh this file here which is initial admin password so you just need to open this initial admin password here so i'm going to just open it into my editor so i'm going to open it in the notepad and you just need to copy this initial password and then i'm going to minimize this window and i'm going to provide my initial password and then click continue now in the next step you will see a customize jenkins window so there are two options here install suggested plugins and the second option is select plugins to install so i'm going to choose this option which says install suggested plugins which is going to install the most suggested plugins in your jenkins installation so you can just click on install suggested plugins and this is going to start installing the suggested plugins so you can see there is a plugin for get here there is a plugin for subversion plugin for github ldap email extension and some other plugins so right now i don't have git installed on my system or ldap installed on my system or even ssh slave so if it shows some error it's okay so once all the plugins are successfully installed on your jenkins you will be automatically redirected to this page which says create first admin user so you just need to create the admin user credentials here so username let's say i'm going to take it as admin here and password whatever you want i'm going to give some password and then i'm going to confirm my password and here i'm going to give the full name for example admin once again and the next thing is email so i'm going to provide the email and after providing each and every credential you just need to click save and finish we're just going to say jenkins is ready start using jenkins so i'm going to just click on this button which says start using jenkins and you will see this kind of window so if you see this kind of window that means jenkins is fully installed on your system and jenkin is running on your system now if you want to see more about jenkins you will be able to see uh it inside your c directory and inside the c directory you just need to go to program files x86 and there will be a jenkins folder here and inside jenkins folder all the plugins are there so you can see the plugins folder and all the plugins are here and all the files related to jenkins will be stored here so if you want to dig deeper into jenkins you can always come to this directory and see what's happening so this is how you can install jenkins on your windows 10 operating system hey guys in this video i'm going to show you how you can download and install jenkins on your ubuntu or debian based operating system so in order to install jenkins you need to have java installed on your system but we will look into the documentation which version of java is required to install jenkins from the jenkins website so first of all just open your favorite browser and search for jenkins and the first link which will appear here will be from jenkins dot io so i'm going to click on this link and once this website is open there is a documentation given to install jenkins on linux or debian based operating system and this documentation you can find in the documentation section so i'm going to click on the documentation section and then just click on use jenkins now when i scroll down a little under user handbook section i can see this section which says installing jenkins so i'm going to click on this link and then you will see this section which is installing jenkins i'm going to put this link in the description so you can directly click on this link and come to this page now let's see the prerequisite of installing jenkins so here these are some of the system requirements and then you can see software requirement and here you can see java 8 either java runtime environment or java development kit is fine right so first of all we are going to uh install java 8 and then we are going to install the jenkins on our open operating system now when i scroll down a little you will see uh the installation process for different operating systems for example mac os or windows operating system and when you scroll a little bit more you will see the section for linux debian forward slash ubuntu and these are the steps you need to follow in order to install jenkins so we will execute these steps after we install the java version so i'm going to just minimize this browser and i'm going to open the terminal just press ctrl alt t in order to open the terminal or you can open the terminal from here also so once the terminal is open to install the java 8 i'm going to use the ppa and these command also i'm going to give you in the description so the first command is this sudo add minus apt minus repository ppa colon web up eight theme for slash java and then press enter and then give your ubuntu's password and then press enter and once again press enter and once this command is finished i'm going to paste the second command in order to install java 8. so this is the second command which is sudo apt install oracle hyphen java 8 minus installer press enter in order to install java 8. so now we can see this message here which says oracle jdk8 is installed on my system and then there is an important message here and this message says to set oracle java jdk 8 as default we need to install oracle minus java 8 minus set minus default so we are going to run this command which is given in the example which is this one so i'm going to just copy this command in order to set java 8 as the default java version so just copy this command which is sudo apt install oracle minus java 8 minus set minus default and paste onto your terminal and then press enter and then press y and once this command is finished we are going to check the java version so i'm going to just write java hyphen hyphen version and then press enter and this command gives us some problem i can see could not create java virtual machine so instead of giving double hyphen i think the command is java hyphen version and you can see this version java version 1.8.0 point something so if you see uh this version here that java 8 is installed on your system so let's clear the terminal so i'm going to clear the terminal so now let's start with the installation of jenkins so when you go to this page and you will see these commands somehow these commands did not work for me so i found on internet some commands which worked for me so the first command is this one so i'm not going to follow and copy and paste these commands because these did not work for me i'm going to copy these command and these commands i'm going to give you in the description also so we are going to give the first command and then press enter and then give your ubuntu's password and then the second command which is this one just copy and paste and then press enter and now the third command which is to update and now the fourth command which is to actually install jenkins which is sudo apt get installed jenkins and then press y and you can see this command is also finished so in order to check whether jenkins is really installed or not you can open your browser and here jenkins generally starts on localhost port 8080 so i'm going to just write local host colon 8080 and then press enter and you will be able to see this kind of page which says unlock jenkins so here we are going to provide the initial password which is saved at this location so we are going to go to this location but first of all i want to show you some more command in order to just manage junkins on ubuntu so because jenkins is installed as a service on your ubuntu operating system you can always use a system ctl status for example if you want to uh check the status jenkins okay so with this system ctl command you can start jenkins or stop jenkins or see the status of jenkins or restart jenkins also so when i give this command sudo system ctl status jenkins and then press enter it's going to give me the status of jenkins and right now it's active and running and for example i want to restart or start my jenkins once again instead of status i can just write start if i want to restart it i can just write here restart and it's going to be restarted so all these commands are for future references if you want to restart or stop in order to stop you can just write stop here so just write stop and jenkins will be stopped so these commands are for the future reference whenever you want to just manage your junkies or stop or restart jenkins now let's finish the installation process so you can see on this page it says unlock jenkins and you will see uh this path here and on this path the initial admin password is saved so i'm going to just copy this path whole path and then go to the terminal once again and then i'm going to let's let me clear the terminal first of all and here i'm going to just write cat and then just paste this part which i have copied from here which is this one and in this file your initial password is there and cat is used to just output the content of the file so i'm going to just do this it says permission denied so i will do this with the sudo in front of it so i'm going to just write sudo and then press enter and you can see uh this password here so you can just directly copy this password right click copy or what you can do is you can also use the g edit command so instead of cat you can just write g add it this is the graphical editor and here you will find the same password and then you can just copy and then you just need to paste this password here so once you have pasted your initial password i'm going to just click continue and i don't want to save anything and in here i can see two options for customizing jenkins one is install suggested plugins and other is select plugins to install so i'm going to choose the first option which says install suggested plugins so i'm going to click on this option we're just going to start installing the suggested plugins here so you can see uh different kind of plugins will be installed for git for example subversion or ldap or gradle and other plugins now keep in mind i don't have a git or subversion or ldap yet installed on my ubuntu operating system so it's okay if you don't have these installed previously so we will just install the plugins and whenever we want some software for example git or subversion or ldap or anything we will install it later so i'm going to wait for this plugin installation to complete so now the installation of all the plugins are complete and this page is redirected to this window where it says create first admin user so we are going to create our first admin user so you can provide any name i am going to just provide username admin here you can provide any name and then give some password which you can remember and which is strong so i am going to give some password here and i am going to repeat my password and now i am going to give the name for example admin once again and now i am going to give the email id email address and then i am going to just press this button which says save and continue and you can see this message which says instance configuration jenkins url which is this one which is a localhost 8080 which is ok for us for now so just leave it as default and then press save and finish and you will be able to see this message which says jenkins is ready your jenkins setup is complete start using jenkins so we are going to just press this button which says start using jenkins and now if you see this kind of interface you know that jenkins is working fine on your system so this is how you can install a jenkins on your ubuntu operating system hey guys in this video i'm going to show you how you can download and install jenkins on your mac operating system now in order to install jenkins we need to have java installed on our system and we will see which version of java we are required to install jenkins on jenkins page so let's get started and let's see how we can do it so first of all open your favorite browser and search for jenkins and in here the first link which will appear here will be from jenkins dot io so i'm going to click on this link and once you are in this website you just need to go to the downloads button so i'm going to click on the downloads button and then you will come to this downloads webpage right let's see the requirements of installing jenkins on our mac so in order to see that you just need to go to the documentation page i'm going to open this documentation page on the next tab so documentation page and then use jenkins so just click on documentation and then click use jenkins and in here we will just scroll down a little and we will just find the section which says installing jenkins and i'm going to click on this and once you click on this we will see the prerequisite of installing jenkins so here you can see the system requirements and under this you can see the software requirements and the software requirement says java 8 either java runtime environment or java development kit is fine so we need to have java 8 installed in order to use jenkins on our mac so i already have java installed on my system if you don't you just need to install it now once you have done this we are ready to install jenkins so just come to the downloads page and then just scroll down a little don't click on the download button we will just go down and we will search for the section which says mac os x now you can see here there are two categories here one is the weekly build so this is the most latest uh build you can get for jenkins and other is the lts version which is long term support version so we are going to download and install the lts version so just go under the lts section and then choose the mac os x so just click on this mac os x and this is going to start the download of this jenkins 2.10 which is the latest lts version dot pkg file so i'm going to wait for this download to complete so now the download of this uh dot pkg file is complete so i'm going to double click on this pkg file and now i'm going to minimize the browser and you can see here the installer for jenkins has been started so here i just need to click continue and the next step is to agree with the license terms and conditions so i'm going to just click on continue button and i'm going to just click agree and on this next step you will be asked how do you want to install the software install for all users of this computer so this is okay for me so i'm going to just click on continue and in the next step it says this will take around 74 megabyte of space on your computer and then click install to perform the standard installation so i'm going to just click on install button and here i just need to give my max password so i'm going to give my max password and i'm going to just say install software and this is going to start the installation process for jenkins so i'm going to wait for the installation to complete and once the installation is complete you will see directly on your default browser on the local host port 8080 this jenkins page will start automatically and it will say please wait while jenkins is getting ready to work okay so it will start automatically on localhost port 8080 so if it doesn't start you can just write on your favorite browser localhost port 8080 and you will see this kind of jenkins page and the first step is to unlock jenkins so the initial admin password for jenkins which is uh required here is saved on this location so you need to just copy this initial admin password from this location and then you just need to paste it here in the admins password so i'm going to just copy this path and once you have copied this path just open your terminal and in here you just need to write sudo and then cat and then just paste this path and then press enter and give your max password here and then press enter and then you will see this password here so you just need to copy this password which is this one in your case it can be different and then just paste this password here and then press continue so just paste the password you have copied and then press continue now on the next step you will be asked to customize jenkins so there are two ways of doing this you can click this button which says install suggestive plugins or you can click this button which says select plugins to install so we will choose the first option which says install suggested plugins and i'm going to click on this button which is going to start installing the suggested plugins these plugins are for example git or ldap or subversion plugin or gradle plugin so these are some of the suggested plugins which are suggested by jenkins to us so i will just wait for the plugins to install it will take some time to install each and every plugin so i'm going to wait for that and once each and every plugin is installed we will be redirected to create our admin credentials so i'm going to wait for that so now all the plugins are installed on the jenkins and i will be redirected to this create first admin user page automatically so after installing all the plugins you will see this page which says create first admin user so i'm going to create the first admin user and i'm going to just say username is admin you can give any name here username here and then give any password here and then repeat the password and then give your full name i'm going to just write and win once again but you are free to give any name which you like and here you just need to give your email whatever you like so i have given my email address and then i'm going to just press save and finish which is going to save this admin user and password and i'm going to just say never for this website and you will see this message which says jenkins is ready start using jenkins so i'm going to just click on this button we say start using jenkins and you will see the jenkins interface here right so here you can create your first job by clicking this button and then you can install other plugins to manage the users which we will cover in the later videos i'm going to click on this uh link which says create new jobs and from here you can create a different kind of jobs for example freestyle project or pipeline or multi configuration project or any other kind of project so this we are going to see later so this is how you can download and install jenkins on your mac operating system hey guys welcome to the next video on jenkins tutorial for beginners in the last few videos we have seen how to install jenkins on variety of operating systems like windows mac os and linux operating system now moving forward i'm going to use my ubuntu operating system in order to demonstrate jenkins functionalities because most commonly and most frequently jenkins is used on a linux operating system but having said that if you are running jenkins on windows or mac operating system you can also follow along with this series because most of the time we will be working with this uh jenkins ui on a browser so it doesn't matter on which operating system i'm working on now if you want to uh practice jenkins on a linux machine it's also easy if you have windows or mac operating system what you can do is you can install virtualbox or vmware player which are the software using which you can install linux or any other operating system virtually on your mac or your windows operating system i have already made some videos on how you can install ubuntu on virtualbox and vmware player so if you want to use ubuntu or any other linux system virtually on windows then you can install virtualbox or vmware player and install linux and then install jenkins on it and you can follow along with this series so in this video i'm going to show you how you can create your first jenkins job so let's create our first jenkins job so what i'm going to do in this jenkins job is i have a java program on my operating system which i want to build and run using jenkins and i'm going to show you how you can do it using your first jenkins job so to create a jenkins job you can either click on this link which says create new jobs or you can click on this option which says new item so i'm going to click on this option which says create new job and then you will see here an interface which says enter and item names so i'm going to give my jenkins job name as hello world here okay now you will be able to see few options under this name so there is a free style project pipeline multiconfiguration project folder and other options so to start with we are going to start with the free style project so just choose the freestyle project and then click ok and once your job is created you will be able to see this kind of a window here so first we need to configure our jenkins job so the first thing here is the general tab and here you can provide a simple description about your job so what this job is going to do is going to build and run java program let's say so here you can provide a simple description about your project and also you can preview your you know description here so it will be shown like this on your job window we can configure it and change this thing in the future so that we will be able to uh use the html tags also in the description and now let's move to the next section so under the description you will be able to see uh discard old bills when you build your jenkins job or github project or this project is parameterized for now we will not be using any of these options so just leave everything as unchecked and we will move to the next section which is source code management now by default you will see three options here one is none second is git and third is subversion so for now we will choose the none option because we will not be using any source control management system for this video but in future we will be using git or subversion in order to pull the source code from the github for example and then how to build or run the test on it so just choose the none option here and then we will move to the build triggers you can also click on this option which will just lead you to this category now here you will see few options first option is trigger bills remotely we will see this in the next video build after other projects are built this also we are going to see in the next video the third option is build periodically so we are going to choose this option for this video and the next option is github hook trigger for git scm polling and poll scm which is for the source code management system so these options we are going to see in the future when i'm going to show you how you can configure git and other options into your jenkins now by the name you can just guess that this option is going to build or you know run your test periodically but how we can configure our junkies to run periodically so for the help you can just click on this question mark here and then you will be able to see all the options which you can use here so you can see this field follows the syntax of chrome right so for example when i write s tricks asterisks asterisks asterix asterix using spaces so five extricts and between them i have used spaces this means that i want to run my jenkins job every minute and when you do this you will be able to see the hint here so it says do you really mean every minute when you say asterisks tricks as tricks asterisks and then it says perhaps you meant uh other option right so this when you write fivetime asterisks with the spaces in between them it means that you want to run your jenkins job every minute now if you want to read more you can read this whole document so you can see in the help window here this asterisk means these five options so the first asterisk here means the minute the second x tricks is for the hour third is for the date of month fourth is the month and fifth is the day of the week right and you will be able to see also some examples here uh when you scroll down a little so for example if you want to run your junkies job every 15 minutes you can use this option for example so i'm going to just copy this and paste it here and now it says would last have run at saturday at this time and the next time will be 15 minutes after that okay so if you have any confusion you can read this document and you can also use uh these example in order to run your jenkins job so to start with we are going to start building our jenkins job every minute so we are going to just give five asterisks here okay and you can once again collapse this help window when you click on this question mark here once again now let's go to the build environment which is this option so the first option here is delete workspace before build starts so we don't want to delete our workspace so we will not check this option second is use secret text and file we will see this option later third is abort the build if it's stuck we can also use the use it later at timestamp on the console output this we can use it but i'm going to skip this for now because we want to build a very simple uh jenkins job and i'm going to skip also the last option so i don't want to check any of the check boxes in the build environment now the next option is the build option and here you can just choose which type of build you want to perform so if you are on windows you can choose this option which says execute windows batch command which is the windows terminal if you are on mac or linux you can choose this option which says execute shell which is like executing command on your terminal now what we want to do in this execute shell so let me show you what i want to build here so in my home folder i have a directory called javasample and in this directory i have a file called helloworld.java and when i open this file i have a simple hello world program written here which only prints hello world right so i want to build this program using jenkins so to build this program i know that i can use java c command to compile my java program so i'm going to just copy the path where this file is located which is in this location which is home my username and this jenkins sample project and i'm going to just cd to this directory so cd to the java samples directory now here i can just run java c command in order to compile my hello world dot java file right so this is going to compile my code and to run my hello world program i can just use java and then hello world which will be the executable file so these three lines what they are going to do first of all we are going to change directory to the java samples directory and then java c is going to compile my helloworld.java file and then java hello world is going to run my program so after doing this you can just press on save which is going to save your configuration and if you want to change this configuration in future you can always go to this option so on the left hand side you will be able to see this option which says configure and when you press on this option this configuration window will open once again where we have done our configuration right and when you click on this option which says jenkins you will come to the jenkins home page now in here you will see first of all that there is no build here and the status of this build is shown by this glowing sun right and our project name is or our jenkins job name is hello world now we have uh configured our jenkins job to run every minute right so i'm going to click on this jenkins job for now and you can see even if we haven't started any uh jenkins job it has already started my jenkins job and the status here is a red ball which means my job has failed okay so we will see how so we will see why my job has failed so what i can do here is i can click on this job you can just click on this and you will see this kind of window and it says red here which means failed and when you want to see more about your build status you can always go here which says console output which is going to show what exactly happened and now in the console output you will be able to see what happened while running your job and why your job failed so in here i can see uh this message so while performing this step which is java c helloworld.java it says this message so error is error while writing hello world hello world.class permission denied and this most probably happens when jenkins doesn't have permission as a pseudo user on a linux machine most probably on windows it will run fine but on linux we need to provide jenkins the sudo privileges so let's change the sudo privileges so let's go to the hello world and you can see already there are three builds because we have configured to run jenkins every minute so don't worry about this what we are going to do is we are going to open the terminal to open the terminal i can just go here and just search for the terminal or press ctrl alt t on my ubuntu operating system and first of all what i need to do here is i need to open a file using a pseudo privileges so just write sudo and then forward slash etc forward slash sudua okay so i'm going to give you this command in the description also so just write sudo and then any tool which can open and edit your file for me i'm going to use g edit or you can use nano or vi or the best would be sudo vi sudo okay so just write sudo g added forward slash etc for slash sudos and then press enter and then give your ubuntu's password or debian's password and then at the end i'm going to just give a little space here and then at the end i just need to just give jenkins user all the privileges and i want to just give no password here so that it will not ask for the password okay so just provide this line in your ubuntu operating system in order to provide jenkins the sudo command privileges right and then just save this and then close this and now i'm going to go to the configure section once again and in here instead of writing java c something like this i can always give a sudo to compile my program so just write sudo in front of java c and if you are on windows most probably you won't be needing the sudo command so just skip this sudo command if you are on windows right so i'm going to save this once again and i'm going to build my program so this button is going to build your program immediately so it will not wait for the pre periodic trigger to uh you know build your jenkins job it will build your jenkins job immediately so you can see now our job shows a blue uh ball this means the last build was successful so let's go inside this build and then go to the console output and you can see now it prints hello world right so once again i'm going to go to my job and you can see previous all the previous jobs have failed because we haven't provided jenkins the pseudo privileges but now you can see this is the periodic bill which has been started and it's successful so in this section you can see uh the times at which your bill started and what was the status of build using the color of these balls and when you go on the main page when you click on jenkins here you will be able to see blue ball here which means that last build was successful and when you see uh this kind of rainy cloud here and you when you hover over this cloud you will see the status of last five bills so you can see it says build stability three out of last five bills failed right and when i run this build few times once again so when i want to just run this jenkins job five times so that the last five builds will be successful so you can see four out of five are now successful and now you can see this icon has changed so now uh the icon is like sunny and little bit cloudy and it says uh one out of five build have failed right so it shows the last five build and one once your last five bills are successful or were successful then you will see the whole sun here so i'm going to refresh this page and i'm going to go to the build here and let's see if the build has been started or we will start it manually using build now button and it's going to uh start the build and you can see the last five builds are successful now and when i go to the jenkins homepage you can see this bright sun here and you can see the message here which says no recent build failed so here this uh icon always so shows the status of last five build and this will show uh if your job is in progress or it's already uh is failing or last build was successful if it's blue now in this table you will also see some other sections here so this is the section where last build occurred so for example 8.9 seconds ago last build was occurred and this was the build number 14 and last failure was three minutes ago which was in build number nine and by default this status doesn't refresh by itself there is a small option here on the right hand side top and you can click on this which says enable auto refresh and this is going to enable the auto refresh after a few seconds so you will be able to see the most uh refreshed status here okay so you can see it refreshes after a few seconds and you can see the status last build last success was 47 seconds ago and last failure was 4 minutes 47 seconds ago so this is how you can create your first jenkins job hey guys welcome to the next video on jenkins tutorial for beginners in the last video we have seen how we can create our first junkies job now in this video we are going to see how we can configure our jenkins job so that we can run our jenkins job remotely or how to chain the job execution so let's see them one by one so i have created this hello world jenkins job in the last video so i'm going to click on this job and then i'm going to click on configure to change the configuration of this jenkins job now when you reach in the configuration area just click on build triggers and what this build periodically trigger was doing is it was triggering our job in a periodic way depending on the crown scheme we have provided here now let's say we want to trigger our job remotely then for that we can choose this option which says trigger build remotely so i'm going to choose this check box and i'm going to uncheck this build periodically check box and here you can see this option which says authentication token and you will also see this message which is a very helpful message which says use the following url to trigger build remotely so this will be the url format you can use to trigger the build remotely so i'm going to copy this uh url and i'm going to paste it into the next tab so here first option here is jenkins url so here you can give the ip address of your server for example right now it's a local host so i can just write localhost and then the port is port 8080 or if you have the ip address of this server then you can write the ip address of this server so for the localhost instead of localhost i can just write 127.0.0.1 or any other server ip address on which this server is working on now the next thing here is the token name in capital so this token name is i'm going to go to my jenkins job configuration and this token name is the token name which you will provide here so for example you can provide any complex password or anything here which will be your token name so let's say i just right here one two three four five and i'm going to save my configuration and then i'm going to go to my uh next tab and instead of the token name i will just provide the token name which i have given for my jenkins job which is one two three four five right now let's go to the jenkins job once again and i'm going to go to the home page of jenkins here you can see the last success was in build 24 and when i click on this job you will be able to see the build history so the last job was 24. so let me go to the next tab and i'm going to just give this url and then press enter which is going to execute my job so i'm going to just give my username and password here once again and then i'm going to just say remember me for this computer and then log in and once you do this and when you go to the junkies job and when you refresh it you can see the last build was built 25 which is triggered using this url okay so once again i'm going to refresh it and i'm going to just give this url once again on the next tab and then press enter and you will see in few seconds the new build occurs so this is how you can trigger your build remotely now the next thing i want to show here is how we can chain our jenkins job execution so let's say we have a scenario that we have created this jenkins job which was compiling the java program and running it right so let's say we want to create few jenkins job one jenkins job we want to create is to build our java program second is to run our java program and in the third jenkins job let's say we want to just display the success message so for that we need to create two more jenkins job and first of all we need to change the name of this jenkins job which is hello world so we will just rename it to uh hello world build first of all and then we will create hello world run jenkins job and hello world success message chenky's job or hello world message job so let me show you how you can rename your jenkins job so you can see the option here rename which you can use to rename your junkies job so instead of using hello world jenkins job name i want to rename it as hello world build so i'm going to just write hello world build and then i'm going to just click on rename which is going to rename my jenkins job to hello world build now let's create two more jenkins job one is hello world run so i'm going to just click on new item and here i'm going to give the name of my junkies job this will be the hello world run now one more way of creating the jenkins job if the jobs are relatively similar then you can copy the configuration of the old jenkins job into the new jenkins job using a copy feature and when you scroll down here you will see this option which says copy from and here we can just write hello world build which is the jenkins job from which we want to copy the configuration to hello world run job and when you click ok all the configuration of hello world build will be copied to this jenkins job which is hello world run and here we can just change the description so this job is only going to run the java program so i'm going to just change it to run java program and when i go down a little and in here i'm going to remove this line because this line was compiling or building our java program and this we are already doing in the hello world build change job and this is hello world run so i'm going to just remove this and i just want to run the executable file which was created by hello world build and this is the hello world run jenkins job and now i'm going to click on build triggers and instead of using this option which says trigger build remotely we want to build our jenkins job after the success of the previous job which is hello world build so i'm going to just uh copy the name of the jenkins job after which i want to execute this hello world run jenkins job so after hello world build i want to run hello world run jenkins job so just check this check box and just write the name of the jenkins job after which you want to execute your hello world run jenkins job and then i'm going to just save my configuration and i'm going to go to the home page and you can see there are two jobs now one is hello world build and another is hello world run i need to change the configuration of hello world build also because now we just want to build our java program using this jenkins job and not run it so i'm going to just remove the description here for run i just want to build java program and in the build trigger let's say we want to uh just trigger this build remotely or we will just click on the build now button and execute the build so i will not change this and when you scroll down a little from here i will just remove this java hello world command because this we are doing in hello world run jenkins jobs so i'm going to just remove this last command and save this so now both the jenkins job have been created you can create one more jenkins job and chain it in a similar fashion so let's create one more jenkins job and this jenkins job i want to name it as hello world let's say message okay so this is going to just print the message uh of the execution and i'm going to just say freestyle project and i'm going to just say okay i'm not going to copy the configuration and in the description i'm going to just display message and in the source code code management i will leave it as none in the build triggers this will be executed after the hello world run jenkins so i'm going to just check on this check box which says build after the other project build and here i'm going to just write hello world run i'm going to choose this option which says hello world run so this jenkins job will run after hello world run jenkins job is executed and now i will just scroll down a little and in the build section i will just choose execute shell and here i will just echo something so i will just write echo and in the double quotes i will just uh print something which i can recognize so i'm going to just print these echo messages and here in between the lines i want to just say success let's say and now i will just save my job and when i go to the home page now we have three jenkins job hello world build hello world run and hello world message so let's just start the build of hello world bill jenkins job so for that i can just click on this little arrow here and i can just say build now which is going to start the build of hello world bill and you will see after some time you can see this is in the queue so hello world run is in the queue so as soon as my hello world build is completed the hello world run will be executed and now you can see hello world messaging is in the queue because hello world run is completed so hello world message will be executed after the execution of hello world run and when i refresh this page now you can see here build number 27 last build was built number 26 and then after this build was successful hello world run jenkins job was triggered and you can see the build number one was triggered and after the success of hello world run hello world message was triggered which is triggered by the success of the hello world run and let's see the messages also so let's go to the hello world bill first of all and then let's see build number 27 and console.log and just build the hello world java program and it says success and now let's go to the hello world run which is going to just execute our executable file and let's see in the console it prints hello world it execute our hello world executable file using java hello world command and in the last uh jenkins job which is going just to print some message we can just go here hello world message and then when we go to the console output of this you can see this echo command and it echoes success so this is how you can chain your job execution on success or failure of the last build hey guys welcome to the next video on jenkins tutorial for beginners in this video we will see how we can do the jenkins integration with git and github so let's get started i'm going to minimize the browser first of all and if you are following this video series in the last videos we have created this java samples project and inside this java samples project we have a hello world.java file and this is the output of that file now let's say we want to commit this project to git and then we want to push the changes to the github repository first of all i'm going to show you how you can do it and then we will see how we can create a jenkins job out of it now if you are new to git and github in the last video i have shown you how you can install git and configure github on your ubuntu operating system so just watch the last video of this series and you will be good to go so for committing my file on git uh let me open the terminal first of all so i'm going to just press ctrl alt t to open the terminal and first of all i will just cd to my java samples directory and in order to initialize a git project in this directory i can just give this command git init and then press enter and this directory will be added to the git now in order to see the status of all the file i can just give this command get status and then press enter and you will see this message which says untracked file because we haven't added and committed these files to git so let's do that so to add these files to git we just need to write git add and the file names one by one helloworld.class space helloworld.js and this will add both these files to the git and let's do git status was once again and now you will see both the files and the message is changes to be committed so let's commit these files so to commit on git you just need to give this command git commit minus m to give the message and here you can give any message which you want to provide for your commit so for example first java comment let's say or any other message which you like to give to your comment and once again we can commit these files one by one so just give the first file name and then space and then give the second file name and then press enter which is going to commit these files to the git now let's check the status once again so get status and you can see nothing to commit working tree clean so now we have committed these files to git but in order to push them to github we need to create a repository on github so i'm going to go to the browser and i'm going to go to github.com and log in with my credentials there and here i will just click on start a project let's say i just want to give the name java hello world and then you can give the description here which is optional but for now i'm going to leave everything as default and i'm going to just press on create repository which is going to create a blank repository for me now in here you will see uh two help messages one is to create a new repository on the command line and other is to push an existing repository from the command line so we have already created our git uh repository so we will push this repository using command line so we will choose the second option which is this one and for that we need these commands so i'm going to just copy the first command which is going to just add the remote origin to my project so this is my project and i have already committed these two files to my git and to add it to my remote origin i just need to give this command git remote add origin and the url of your git repository which is this one or simply you can copy this command which will be enough so once you have copied and pasted this command just press enter so this command is successful now let's copy the second command in order to push our changes to the repository so i'm going to just copy the second command and go to the terminal just right click paste and then press enter and this is going to push our changes to the github first of all we need to give our github credentials here so first of all the username and then press enter and second is the password and then press enter and now your files will be pushed to your repository so once you have done that i'm going to just go to uh this repository which i've created and i will see these two files which i have committed to the get in this folder which i'm working on so once you have created your repository on github you can go to jenkins and let's create a new project here and here i'm going to just give the same name which my repository has which is java hello world and then i'm going to choose the freestyle project and i'm going to click ok and in the description i will just say java hello world example and rest everything we will leave as default and now click on source code management and because we are working with git so now we will click on the get option and here you can give your git repository url so to get the git repository url you can just uh go to your repository and click on this green button which says clone or download and then just copy this url from here and then paste this url here which is repository url and now we will scroll down a little and here it says branches to the build so by default you can see there is only one branch in our git hub repository which is master branch so we will leave this as default but if you want to have multiple branches in your github and then you want to clone for example a development branch or any other branch you just need to give the branch name of your repository here which you want to clone okay so right now we only have the master branch so we will leave this as default and next option is repository browser so we will also leave it as default and now we will go to the build triggers and for now i will leave everything as default but we will see how we can choose this option which says poll scm or other get option in a moment but first of all i want to show the simple way of just cloning and building your jenkins job so just leave everything as default in your build triggers and then build in environment also i'm going to leave everything as default now in the build option we will choose execute shell here and here we will give the commands to compile our helloworld.java program so we will just say java c helloworld.java which is our java file which is this one so we want to compile this one and then we want to uh just run this file so for running we will just use java hello world and by now i think you already know what these commands are doing and let's go to the build environment once again so here in the build environment you will see a few options so first option is delete workspace before build start and this is important for us so i'm going to show you what this is in a moment but first let me save this job first of all and once your job is created let's go to the home page and in here let's build this uh job so i'm going to just click on this arrow button and i'm going to just say build now and now the build of this job will start we are going to just go inside this java hello world and you can see here our build is successful so i'm going to go inside this build and i'm going to go to the console output and here you will see more details so first of all you will see the location where your github repository is cloned and this is the location where your github repository is cloned right and you can see in the next command it has cloned our github repository and after the cloning these two command has been executed so first was the java c helloworld.java which is used to compile our hello world program and then java space hello world which have resulted in this output which is hello world and our job is finished with success so this is how you can clone your repository and you can just build your job using github repository now let's go to this location which is the default jenkins location where your repository has been cloned okay so i'm going to just just copy this path from here and i'm going to go to the terminal and open the next terminal and i'm going to just give cd and whatever path you have copied and i'm going to just press enter here and i'm going to do ls here and you can see both of your file are here so hello world.class is there and helloworld.java is there now let's see if some more configuration options for our jenkins job so i'm going to go to my janky's job and i'm going to go to the configuration now and once again in the configuration i'm going to go to the build environment and i'm going to choose this option which says delete workspace before bill start so this is going to delete this workspace before our bill starts so this is the workspace of jenkins and if you choose this option this is going to delete the workspace before this jenkins job starts right so i'm going to save the job and build it once again and hopefully this will also be successful and i'm going to go to my job and then see the console output and you can see uh building in workspace once again and then first of all it has deleted our workspace and once again cloned our repository okay so this is the extra step when you choose the delete workspace option now let's see some more configuration options so i'm going to go to the configuration of my jenkins job and this time i'm going to go to my build triggers and in the build triggers i'm going to choose this option which says poll scm and this option works similar to the build periodically option which works on the chrome mechanism so if you give five asterisks here this is going to pull every minute to your repository for any changes and if you have done any changes to your github repository this is going to detect your changes and if there is any change then it's going to build uh your job once again so let's uh save this job so to trigger this job now what we need to do is we need to do some changes to our github using git so in this project what i'm going to do is in my java samples project where i have committed my java hello world files using git i'm going to do ls once again and you can see there is no read me into my repository so i'm going to add a readme file into my repository so to do that i'm going to use the touch command so just write touch read me dot md which is the readme file name and then press enter and do ls and you can see this readme.md is created and to edit this file i'm going to just write g edit g edit is the editor you can choose any editor you want and then the file name which is readme.md and once this editor is open i will just copy and paste some readme content into this readme.md file and now i'm going to just give the gate status command so just give this git status and you can see this there is one file which is untracked so we are going to add this to the get first of all so get add and the file name once again and then i'm going to commit this file once again do the get status and then let's get commit so get commit minus m and in the message you can just write read me added and then the file which you want to commit which is readme.md and then press enter and now we just need to push our changes to github and for that we will use the get push minus u origin master command and then press enter and this will push our changes to github and once again give the github credentials and the password and then press enter and our changes are pushed to github so you can see here that this readme file is there and all the content of readme file is visible now and on the jenkins job when i refresh this you will see this third job is triggered and you can see it's working so you can just click on the third job and i will go to the console output and you can see it just says started by scm change which means it is started by the change in our repository which is polled every minute and once this change is detected then it's going to start the cloning of your git repository and your junkies job will be billed after that so this was the option to pull your github repository every one minute and if the changes are detected then it's going to trigger the build and your jenkins job will be executed so this is how you can integrate git and github with jenkins hey guys welcome to the next video on jenkins tutorial for beginners in this video i'm going to show you how we can create users in jenkins till now we only have one user which is admin user which we have created at the time of installation of jenkins now generally in teams we have different users with different roles so for example a software team can have a team lead which can be a admin then we have developers qa guys or testers or we can have the operations guys or devops guys who are responsible for the provisioning and the deployment of the software so for that we need to give the credentials to those users so they can log in with their account and then they will be able to configure and build their own jobs so let's see how we can create users and jenkins so just go to the home page of jenkins and then just click on manage jenkins and once this many jenkins page opens just scroll down until you have found the section which is called manage users so just click on the manage users and you can see there is only one user is there till now so we will create a new user to create a new user you just need to click on create user and then you just need to give the username of that user you can say user one and the password of that user and this password the user will be able to change later so you can just provide the initial password here and then just provide the confirmation of the password and then provide the full name of the user for example the user one once again and then provide the email address of the user and then click create user this is going to create the new user let's create one more user so this time this user will be user 2 and then i'm going to quickly provide the password confirm password and then the full name this will be user 2 for example and then the email id and then create user which is going to create the user so now we have two users so you can see we are logged in with the admin user so let's log out and then let's login with the user one credentials so just give the username and password of that user and then just log in and now you can see i'm logged in with the user one account now you can see a little arrow icon here beside the user one name so you just can click on that and just click on the configure option and once you click on that here you can provide some more configuration option for this user one account so some description what is his title or what is his job and then api token so you can see the api token this we will discuss in the later videos how we can use the api token for the user but you should know you can find this api token here and then the credentials the email id and the password can be changed later from here so user1 can change his password from here and also the ssh public keys so if this user has to authenticate with his keys then you can provide the public key here and if you want some help you can just click on this question mark and you will be able to see some hint here so this says list ssh public keys that are associated with the user these keys can be used for example by jenkins cli so jenkins cli we are going to see how we can use jenkins cli in the later videos so if you are curious about jenkins cli then we will see it later so this is how you can provide the configuration for the user in jenkins and after the configuration you can just save the configuration and then the configuration will be saved let me log out once again and let me login with the admin credentials once again and you can see the admin have the access to view all the project and when i log in with the user one account or user two account he also have the access to view all the project here in addition you can see uh the manage jenkins option for the user one also and when i click on that this user have all the access to change the configuration of the system or change the global security or he have the access to do anything which admin user can do and this can be a problem for example this user one is a developer and he has all the admin rights and this is sometimes not desirable the admin right must lie in the hands of the admin only so for that we have the option to install some plugins and then provide the access to the roles which this user have so we will see how we can install this plugin to assign roles or manage roles or manage users in the next video hey guys welcome to the next video on jenkins tutorial for beginners in this video we will see how we can install plugins in jenkins now this video will be the continuation of the last video in which we have created the users and we faced a problem the problem was all users were having same access to all the projects and we wanted to restrict the access to the user based upon his role so for that we wanted to install some plugin and this plugin we will install in this video so to install plugins in jenkins we need to go to the manage jenkins page so just click on manage jenkins and then when you scroll down you will be able to see this section which says manage plugins so just click on the manage plugins section and you will be able to see uh four tabs here first tab is for updates so whatever plugins are already installed at the time of installation you will see uh the update information of the plugins which have the updates so if you want to update for example this apache http components client plugin you can just check on this and then you can say download now and install after restart but we want to install a new plugin so we will go into this section which says available so in available section there are many plugins which are available and for now to restrict the access of the project to the users and groups we need to install a plugin called role based authentication strategy so you can just filter the these plugins using this search box so just write role for example and all the plugins will be shown which have the keyword role and there is only one plugin available which is role based authentication strategy and this is the plugin we want to install so we will check this check box and if you want to know more about this rolebased authentication strategy plugin i will rightclick on this link and i will open this in the next tab on new tab and you will be able to see more information about this plugin so you can see this is the website plugins.jenkins.io role strategy and you can see about this plugin and you can see the introduction about this plugin so this plugin adds a new role rolebased strategy to use and fasten user management so it can create global roles it can create project roles it can create slave roles and also assigning these roles to the user so here also you will be able to find more information about this plugin and how to use this plugin also you will be able to see the documentation about this plugin when you scroll down now there are two ways of installing plugins one way is to search in your jenkins in the available tab and you will be able to find the plugin and then we will click this button which says download now and install after restart or the the second way of installing the plugin is i am going to show you so for example we want to install this dependency which says metrics authentication strategy i am going to open this in the next tab and in this tab you will be able to see when you scroll uh down the latest release of this plugin so i'm going to click on the latest release which is going to download the dot hpi file so this uh plugin is called matrix out dot hpi file is the plugin right so we are going to save this uh plugin and once this file is downloaded this hpi file is downloaded we will go to the jenkins and you will be able to see this advanced tab here and in the advanced tab when you scroll down a little you will be able to see this option which says upload plugins and you will be able to just click on this button which says browse and then just select your hpi file and upload this file and in this way you will be able to install that plugin also now we are going to install our plugin using the jenkins in the available tab so i'm going to once again search for the role based authentication strategy i'm going to just check on this check box and i'm going to click on this button which says download now and install after restart and then you will be able to see this page which says installing plugins or upgrades and then it says role based authentication strategy download it successfully we need to restart our jenkins so we will just check on this check box which says restart jenkins when installation is complete so i'm going to just check on this check box so it's going to restart the jenkins once this plugin is installed so i'm going to wait for some time until this jenkins is restarted and now i can see this message which says please wait while jenkins is getting ready to work after the restart and now the jenkins has been restarted i think so we need to log in with our credentials and i'm going to say login and after i logged into the jenkins i'm going to go to the manage jenkins section so i'm going to click on manage jenkins and then i will go to the manage plugins section and then once the plugin is installed you will be able to see it in the installed tab so i'm going to click on installed and then i'm going to search for role based authentication strategy you can see uh this plugin here which says role based authentication strategy so this plugin is now installed so now we can use this plugin and this we will see in the next video how we can use the role based authentication strategy plugin to restrict jenkins project access to the users and group using roles hey guys welcome to the next video on jenkins tutorial for beginners in this video i'm going to show you how to restrict jenkins project access to the users and group using roles now this video will be the continuation of the last video in which i have shown you how to install the plugins in jenkins and we have installed the special plugin to restrict the project access to the user which was role based authentication strategy plugin so you can see in many jenkins when you go to the manage plugins and then you will go to the installed section here and you can search for role here and if you have in your installed section this plugin which is role based authentication strategy then this video will be beneficial to you otherwise you need to install this plugin so once you have this plugin installed let's start using this plugin to restrict the project access to the user so once again i'm going to go to the manage jenkins and first of all let me create some users so that we can restrict the project access to them so i'm going to go to the manage users first of all so right now i have admin user and i have one more user which is user dot let me create some more users so i'm going to create reuser.2 and then the password for user 2 and the full name i'm going to just leave it as same user.2 and the email address and then create user and i'm going to create one more user user3 and the password and the full name user.3 same i will leave it as default and then the email id so now we have three users user.1 user.2 and user.3 now let's go to the manage jenkins once again and this time just go to the section called configure global security and once you are in configure global security section make sure that this option is already checked which is enable security and then just scroll down and in the authentication section you will see a new option here which is role based strategy this will appear after the installation of the plugin which was rolebased authentication strategy so we are going to check this option and then save it so once you have checked the option rolebased strategy in configure global security when you will scroll down now you will see a new option which is manage and assign roles so i'm going to just click on this option which says manage and assign roles and here we have three options manage roles assign roles and role strategy macros so i'm going to go to the first section here and here you will see the global roles global roles are the roles which are globally configured for example admin is a global role let's create a new global role for example employee is a global role we will just add it and for employees we just want to give the overall read access to the global role employee and we want to give the view access to the employee role and all other access we don't want to give for example credentials or agent creation or job creation for the employees uh for now i'm not giving any uh access to the employee role now when i scroll down a little you will see project roles so under this project role section you can provide the project based roles and authentication so for example we have a java developer role so i'm going to just say java hyphen developer and in the pattern you can provide the access of the jenkins job based upon this pattern to the java developer for examples so let's say any project which start with the keyword java is accessible to this role java developer so i'm going to just write the pattern of that which is java dot strix this means that any name any jenkins job name which starts with java will be accessible to this role which is java developer so i'm going to add this role and i'm going to provide all the access for this jenkins job to the java developer so now the java developer role is created let's create one more role which is for example we have intern in our team so i'm going to just write in turn and in turn will have the access to the projects which start with hello so all the project which starts with hello in turn will have the access to only those projects i'm going to just give the access to the role intern now let's add one more project role here for example tester so the tester will have only the access of the project whose name start with a test for example okay so i'm going to just add this tester role and then i will provide the access to these type of project to the tester so once these roles are created and you have given all the access for these project to the roles then you can save your configurations and we will verify this configuration by just going again to the manage role section and you can see employee role is there and our three project roles are there also which will have the access to these kind of patterns now i will just come out i will just click on manage and assign roles once again and this time i will go to the assign role section and in here in the global roles we only have the user admin here so we will add some more users here for example user dot one is the first user we will add and then user dot 2 is the second user and user dot 3 is the third user and let's say all of them are employees so the global role we are assigning to user one user two and user three is employees so none of them have the admin role now i will scroll down and here under item roles i will once again add the users first of all so user dot one and then user dot two and user dot three now let's say user one is a java developer user two is an intern and user three is a tester so i will just check the roles which is belonging to the user and then i will save this configuration once again and i will verify this by just going again into the assign roles and you can see uh user one user two and user three have the employee global role and user one is a java developer user three is a tester and user two is an intern now once you have done that i will just go to my jenkins home page and you can see i'm logged in as an admin so i can see every project here and when i log out here and i will just log in with user one credential and i'm going to log in and you can see user1 was a java developer so user1 can only see the project which start with the keyword java so java hello world and java job i'm going to log out and now i'm going to log in with the user 2 credentials so user.2 and the password and login and you can see user 2 was an intern right so user 2 will have the access to all the junkies job which start with the keyword hello so hello world build hello world message hello world run and let's see what project does user three have so user.3 and then i'm going to log in with his credentials and user 3 doesn't have any project because we don't have any jenkins job related to the tester so when i log in with the admin credentials you can see there is no jenkins job which start with the keyword test so let's create one jenkins job so i'm going to just click on new item and i'm going to just say test project 1 okay so test project 1 and it will be a freestyle project and i'm going to just click ok and in the configuration i will leave this configuration as blank because we just want to test this jenkins job if the user 3 has the access to this jenkins job or not so i'm going to just save this jenkins job and i will go to the home page once again so now we can see we have one new jenkins job we start with the keyword test so i'm going to log out once again and i'm going to log in with the user3 credentials and now you can see user 3 have the access to the project which start with the keyword test so in this way you can use the role based authentication strategy plugin and in this way you can restrict the jenkins project access to the users and group using their roles hey guys welcome to the next video on jenkins tutorial for beginners in this video we will see how to do some of the basic configurations in jenkins using a section called configure system in many jenkins so when i click on manage jenkins there is a section called configure system and here we can do some of the basic configurations about jenkins so we will start from the top the first option here is home directory and you will see the location of your jenkins home directory in the file system so when i copy this path and when i open the terminal and i will ct to this path you will be able to see all the you know configurations file or jenkins related files are present inside this directory so you will see config dot xml file you will see jobs directories nodes directories plugins directories where all the plugins will be installed or the users directory and the workspace directory so all the configurations related to jenkins you can do here and when i click on this question mark here beside this option you will be able to see more information about this option so by default jenkins stores all of its data in this directory on the file system there are few ways to change the jenkins home directory so this is the procedure which is given here to change the home directory of this jenkins so if you have the good reason to change it you can follow these instructions to change the home directory now second option here is system message so this is the message you can show on the home page of jenkins so for example i can just write some message here this is my jenkins home page let's see okay and i will just save this option and when i save this option you will be able to see this message is displayed on the top of your home page above all the jenkins job so i will once again go to the configure system and this system message also supports the html tags now you can see a little section here which says plain text this is the support format which this box will support now we can change it to support the html so for that we need to go to the manage jenkins option once again and then go to the configure global security and inside the configure global security you will be able to find a section called markup formatter and by default it's a plain text here selected we can choose the safe html here and then we can just save this option and once you save this option we can just refresh this configure page and now you will see here safe html is displayed here so this is the default format which this message will support so for example now i can use the html tags here for example i want to just show this message in h1 tag so i can just use this h1 tag here h1 and then i can preview this message from here so i can just click here and this message will be displayed like this on my home page let me save it and let's verify this so you can see it's shown in the h1 tags now this uh system message so this is how you can just display the system message here now the next option here is the number of executors and for example this number is 2 by default that means that two jobs can run parallelly on this jenkins right if i can change it to five then it will allow the five jobs to run parallelly so you can change this number from here number of executors the next option is labels this is a little bit detailed concept when we use the master slave concept and nodes we will see how to use labels so i'm going to leave this for now we will see how labels work in the future lectures now the next section here is the usage and by default the usage here is use this node as much as possible because we only have one jenkins node which is this node that's why the default option is use this node as much as possible but when we will learn how to create nodes and how to provide labels to our nodes then later we will be able to choose this option which says only build jobs with labels expression matching this node so this we will learn later when we will see how to create nodes and how to assign labels to our nodes so for now i will leave it as default for more information you can just click on this question mark and you will see some more description about this usage section so controls how jenkins schedules built on this node okay so you can read more about this option here now the next option is the quite period now the quiet period it's in second i'm going to just click on the question mark once again and here it says when this option is checked newly triggered bills of this project will be added to the queue but the jenkins will wait for the specified period of time before actually starting the bill so jenkins will wait for example for five second before starting this build so sometimes for example you use the source code management system and your committing will take some time or when you push your code it takes some some time to uh you know get into your github repository or for any other reason for example your jobs takes some time to start you can specify this quiet period here so that your jobs or your build will start after this specified period so by default it's five but you can change it in future when you feel that your jenkins will need more time to start so just uh provide the quiet period here this will be in seconds so after five seconds your build will start after the triggering of this job now the next option here is scm checkout retry count so this is the option where for example you are using your scm source code management system let me go to the home page and let me show you one example so i will go into one uh chenky's job here and i will go to the configuration section here and then i will scroll down for the build triggers and you will see pole scm option here so when i select this pole scm or github hook trigger for gitz scm polling then this is the option for number of tries so this jenkins will try to connect to your github for example this much number of times right now it's zero but for example you set it to five then jenkins will try five time to connect to your github before giving or showing some error now the next option is restrict project naming so let's see this option also so by default it's default now you can choose the pattern option here or you can choose a role based strategy option here also so let's see what this pattern option do so i'm going to click on this question mark and you can see some description here which is define a pattern or a regular expression to check whether the job name is valid or not so for example i define some pattern here for the naming of my jenkins job so let's say i define java.astrix that means my jenkins job which i will be able to create will start from java and not any other keyword so let me save this option and once this is saved let me try to create a new genghis job and let's say i just you know give some name here and instantly you will see this message which says dab does not match the job name convention pattern which is java dot asterisk which means that your jenkins job name should start with this java keyword so let's say i will just start the name with java keyword and now i can see that there is no warning here okay any other pattern it's going to show this warning here okay so this pattern option you can use to give some kind of pattern for the naming for now i will just choose it as default so i'm going to just revert it back to the default option but if you want you can just change it to anything you want in the future okay now next section here is the global properties and in the global properties you will see uh two options here one is environment variables so here you can give all the environment variables which you want to give to your jenkins job globally for example so let's say i want to give let's say java home environment variable i can give it from here so i can give the value of this java home environment variable and the name uh from here okay or any other environment variable which you want to use in your jenkins job execution you can give it from here now the next option here is the tool location so this is the tool location so for example you want to use some tool let's say git so the binary path for this git you can give it from here now the next section here is the pipeline speed durability settings and this we will see in the future videos i'm going to skip this section for now and then you have the usage statistics option which will help make jenkins better by sending the anonymous usage statistics and crash reports to the jenkins project so if you want this option you can check it or uncheck it according to your needs and then next section is the time stamper system clock time format and elapsed time format this is the format which jenkins will support but you can see in the details you can support any other format which is uh given here so here you can just define the time format which you want to show now in the next section you will be able to see the jenkins location before that there is administrative monitor configuration and you will be able to see uh this option which says enable administrative monitoring and here you can see administrative monitoring are the warnings shown to jenkins administrator about the state of jenkins interface so you can check these options whatever warning you want to see so for example you want to see the dependency warning or you want to see the invalid plugin warning or if you want to see the disk usage warning all the warnings you can set up from here by default every warning is selected but let's say if you want to skip some warning you can just uncheck this option and then this warning will not be shown to you let's go to the next option here which is the jenkins location by default we are using the local host but you can give any host name uh instead of this local host now next option is the admin email address you can provide your admin email address here and then you have the github server option so if you want to add some keys for your github server you can provide those keys or you can give the name of your github server here and then provide the github servers credentials from here we will see this later how we can do it and then you have the github enterprise servers so if you are using some private servers to host your repositories like github private repository then you can add the information about that here now the next section is the pipeline model definition this we will see when we will see the pipelines how pipelines works then you have the build time mount plugin options so whatever plugin you have just installed or whatever plugins there is in your jenkins there are some options you can set for those plugins here for example so get plugin or subversion plugin shell plugin extend email notification plugin and any other you know information you can give it here so you have the email notification smtp server configuration you can do it from here so these are some of the basic configuration you can do for your jenkins as an administrator hey guys welcome to the next video on jenkins tutorial for beginners in this video we will see how we can build or test a simple maven project using jenkins so let's see how we can do it so what i have is i have a simple maven project inside my maven workspace directory and the name of my maven project is my app this my app project i have created using the maven website so once you are on the maven dot apache dot org you can just go to use section here and inside this use section you will be able to see this this five minute test and i have used all the commands here to create a project so this section i have used so i have used this command which uh created the my app directory where my maven project is there so if you want to follow along you can just give this command and then this my app directory will be created with the maven project so once you have this project let's open the terminal first of all and i'm going to just go to this directory and uh what we can do here is for example we can give mvn clean and test command and then press enter which is going to clean our project and then run the test inside this pavement project and you can see all the tests are runs and there is no failure and bill is successful so let's say we want to execute this clean and test goals using jenkins and first of all we want to check our code into github and then we want to for example clone the code from the github repository into our jenkins and then execute these goals how we can do it let's see so first of all for that i need to create a github repository so i will go to the github and i will log in with my credentials here and once you are logged in with your credentials i'm going to just click on this button which says start a project and in the repository name i'm going to just write my app and now i'm going to just leave everything as default and i'm going to just click on create repository so now my github repository is created and now you can see you have two options here one is create a new repository on command line and second is push existing repository from the command line so we will use the first option here first of all we will uh initialize the git into our project and then we will commit everything and then push it to our git repository so let's do that if you want help then you can just follow these commands we will just execute the similar kind of commands on the terminal so this is our maven project i'm inside my maven project so i'm going to just write git init command which is going to initialize git inside this directory and then i'm going to just write get status to know the status of this directory so i can see there are two directories here and one file here so i'm going to add this to the git so i'm going to just write git add and then i'm going to just add a target for example and then source and then palm dot xml alternatively you can also write git add dot which is going to add everything which is there inside your project directory so i'm going to do that and then press enter and once again i'm going to give the git status command and you can see these all files are added to the git now so one thing which is remaining is to commit everything into the gate so we will do that i'm going to just write git commit minus m and then the message for the committing for example my first maven commit and then you can just give a space here and then write dot which is going to commit every file inside your project okay so get commit minus m then the message then this dot and then press enter and everything will be committed into git so i'm going to once again uh give the git status command and now you will see on the branch master everything is clean so we are ready to just push this project to our github repository now at this point you just need to copy this command which is git remote add and then whatever is your repository url dot get and this is going to add the remote origin for the github to your project okay so i'm going to just copy and paste this command which is git remote add origin and whatever is your repository url and then press enter and this repository is added and now i'm going to push everything to my github repository using this command which is git push minus you origin master and i'm going to just paste this command and then press enter and this is going to ask for my username for github and my password for the github and now everything will be pushed to my github repository so let's check whether everything is there or not so i'm going to just once again click on my repository which i have just created and now you will see everything is pushed to my github repository and this is the message which we have given at the time of committing and you can see we have committed this two minutes ago okay so now once your project is there on the github let's create a jenkins project first of all so i'm going to just click on new item and here i'm going to just write first maven project and i'm going to use the freestyle project for now there are plugins available on jenkins which makes it easier to create and run a maven on jenkins but for now i'm going to just use this option which says freestyle project and i'm going to click on ok and in the description i'm going to just write first maven project and then i'm going to just check this option which says github project and then i'm going to copy the url of my github repository and i'm going to just paste this url and then i'm going to leave everything as default and in the source code management i'm going to choose get option here and once again i can just go here and click on this green button and copy the url here for my repository and i can paste it here okay i don't need any credentials for now and the branch i'm using is the master branch you can see i only have one branch in my project which is the master branch but if you have different branches you can provide your branch name here instead of master and now i will leave everything as default and here you can choose different kind of build triggers for now i'm going to just choose this option which says github trigger for git hcm polling and then in the build environment i'm going to choose this option which says delete workspace before build start which is going to delete our workspace and then run the goals on our maven project okay so just check this checkbox and then we will move to the build section here and inside the build section there is a special section for maven which is this one which says invoke top level maven target so we are going to use this option here and if you want to see the more advanced option you can click on this button which says advanced and here you can give the perm file directory path if this file is located somewhere other than your default project path okay and then you have more options here for example jvm options or properties uh to give here for now we will just provide the goals for our maven project which is clean and test using the space here and then i'm going to save my jenkins job and let's run our junkies job and let's see if it works fine or not so i'm going to just click on this build now option which is going to start the jenkins build and then i'm going to click on the build history option which is going to show me my console output so i'm going to click on console output and you can see uh first of all we will see the default path where this project is uh checked out so you can see var liv jenkins workspace and then inside the workspace this project will be created genghis project and then our git repository will be cloned and you can see already maven is running the test here and once the tests are successful at the bottom we will see if it's successful we will see the message success otherwise we will see the message failure okay so once again i'm going to go back and i'm going to go to my project here and you can see this build is successful now so everything ran successfully now let's say we are going to define a goal which is uh not available inside your maven project so we will define some goal which doesn't exist and let's see what happens then so i'm going to just say some goal and i'm going to save this and then let's see what happens i'm going to just start the build again and i'm going to just go to the build history of this jenkins build and then console output and you can see once again the repository will be cloned and now you will see the failure because this some gold gold doesn't exist so it's going to show us this error message and then the last message here will be the failure and once we will go to the home page of jenkins now you will see this red ball icon here because our last build was unsuccessful okay so just give the proper goals here which are logical so clean and test are running for our maven project so we will just give those uh goals here and once again run the build and you will see the build will start and in the console output everything will be checked once again and then you can see success once again so this is how you can test and run a simple maven project on jenkins using github hey guys welcome to the next video on jenkins tutorial for beginners in this video i'm going to show you how you can send email notifications using jenkins so first of all in order to send email notifications using jenkins you need to know the smtp server details of your email provider which you want to use in your jenkins so this you can easily find on internet you just need to search for smtp server list and you will be able to find all the informations about the smtp server on one of the websites like this so let's say i want to use the gmail as my email provider to send the notifications so you can see smtp server details of gmail is given here so this information i'm going to use in order to configure the email notification in jenkins so i'm going to go to my jenkins home page and then i'm going to go to manage jenkins and inside this configure system window you will be able to find the email notification setting at the very bottom so you will be able to see this section which says email notification and just above this section you will be able to see this section also which is extended email notification so this extended email notification is a plugin which you have already installed at the installation of your jenkins so if you have chosen install suggested plugins then this plugin will be installed in your jenkins and you will be able to see this option but for now i'm going to use the default option which is the email notification option which is at the very bottom so here you will be able to see this option which says smtp server so smtp server for gmail is smtp.gmail.com so i'm going to just give this information here and then you just need to give the default user email suffix the default email user suffix of gmail is at the rate gmail.com and then you will be able to see this advanced setting button you just need to click it and then just check this check box which says use smtp authentication and now you just need to give your username and password username is your email address from which you want to send your emails so i will give my gmail address here so it can be anything for example example there gmail.com and then you need to give the password of that email address so i'm going to give the password of that email address and then i'm going to just check this checkbox which says use ssl and the smtp port let's see what is the smtp port for that so smtp port for uh this gmail server is 465 so i'm going to use uh this port here and then you will be able to see this section which says reply to i'm going to leave this as blank and you can also test your configuration for your email by sending a test email to any address so here in the test email recipient you just need to give the email address of the recipient so i'm going to give here the recipient email address and then i'm going to just press on this button which says test configuration and then it's going to send this email so you can see this message which says email was successfully sent now in some cases you may also encounter some errors which can be resolved by just going to your email account by turning on an option which is called allow less secure apps so you will be able to see this kind of option and you just need to turn it on and you will be able to send emails from your gmail account to any other email so once you have done the email notification configurations and you have tested your configurations you can just save your configurations and once your configuration is saved you can just go to the jenkins job in which you want to use this email notification so i'm going to just use this jenkins job it says hello world build and then i'm going to go to the configuration of this job and then i will scroll down and i will go to the section which is called post build actions and then when i just uh click on this list i will be able to see two options related to email notification one is editable email notification this is a plugin so we haven't configured this plugin yet so we will use this option which is email notification we have done the configuration for this op so just use this option which says email notification and then you will be able to see this kind of uh option for recipients so you can just give the email address to which you want to send an email when your build fails and you can see this is the option which is enabled by default which says send email for every unstable bill that means when your bill is failed then this email will be sent so i'm going to just save this configuration and let me just break the configuration also so my jenkins job will fail so right now uh let's say this bill is java c helloworld.java i'm going to just change the name of this file which doesn't even exist so this build will fail and then email notification will be sent so i'm going to just click on build now and you can see the build has been started i'm going to go inside this build and console output and you can see this build is failed and after this java c command is failed you will be able to see this option which says sending email to whatever email you have used and when you go to your gmail account you will be able to see this kind of email and then you will be able to find more details in this text here about your jenkins so this is one way of sending email notifications using jenkins the more advanced way can be by installing some plugin related to email notifications so you can once again go to manage jenkins and we have already installed a plugin at the time of installation which is email editable email notification right so i'm going to just scroll down where i will find editable email notification which is this option this one and here also you can give the same options for example for smtp you will be able to give smtp.gmail.com and then default user suffix is the same at the rate gmail.com and then in the advanced setting you will have the same type of settings for example this is your email address from which you want to send an email and then this is your password for your email and then this is the advanced email properties which i will leave as default and then i will choose use ssl check box and then in the smtp port i will just use 465 and you can do some more settings here one thing you can do here is you can add the default recipients here whatever recipients you want to use for your email so i'm going to add one recipient which i have also used in the last section and then i'm going to save this configuration and once my configuration is saved i can once again go to let's say i'm going to go to the next jenkins job now and then i'm going to go to the configuration of this jenkins job and then in the post build actions this time i will use this option which says editable email notification so just use this option and then you will be able to find all these fancy options which you can change at any time important for us is for example project recipient list here so by default it's default recipients you can give any other email address here and if you want to know more here you will be able to find more details here so it says you just need to add a cc colon here or bcc colon here so i'm going to add that cc and then colon and then the email address and then i will scroll down and in the advanced sec setting you will be able to find more settings so you can see trigger is failure and the email will go to the developers so we haven't uh added any developer email we have we have added the recipient email so i'm going to use this recipe email list and i'm going to remove the developers from here and then i'm going to just save this configuration and once your jenkins build will fail it will send the email to the recipient list so in this way you can configure your jenkins to send email notifications hey guys welcome to the next video on jenkins tutorial for beginners in this video we will see what is a jenkins pipeline and how to use pipelines in jenkins so first of all what is a jenkins pipeline so a jenkins pipeline is a suit of plugins which supports implementing and integrating continuous delivery pipelines in jenkins now to explain this i will reopen this diagram which i have shown you in the introduction of jenkins so every change which you make in your software so for example you are a developer and you make the changes in the software and you push those changes into your code repository in our case for example we will take the kit repository right now the job of jenkins here is to build your code in a reliable manner and then you may be having a different kind of testing for example unit testing or integration testing or different kind of testing so the job of jenkins is to test your code and then at last deploy your code and even transfer this code into a artifact repository and if you want to know more about jenkins pipeline the documentation on the jenkins website about pipeline is the best so just search for jenkins pipeline and then you will be able to see uh this url which is jenkins dot io for slash dock forward slash pipeline just click on this link and then you will be able to get all the details about pipeline on this page and when you scroll down you will be able to see uh this section which says what is a jenkins pipeline and then if you want to learn more about uh pipelines then you can read this section so in simple words a pipeline is a script which gives jenkins a series of jobs to do in a pipeline like manner and if you read this line the definition of jenkins pipeline is written into a text file called a jenkins file okay so we will create a jenkins file in our repository or jenkins allows us to write a jenkins file directly into the configuration of our jenkins job and there are two ways of writing this jenkins script which is declarative and scripted pipeline and you will be able to get more details about declarative script and scripted pipeline syntax here on this page itself so when you scroll down you will be able to see this flow diagram of jenkins and when you scroll down more you will be able to see this section which says declarative pipeline fundamentals and in this video i'm going to show you exactly this so how to use declarative pipeline in jenkins so in declarative pipeline syntax the pipeline block define all the work done throughout the entire pipeline so this is the simple syntax which allows us to define different stages and then inside the stages you can define different steps and all this starts with this keyword pipeline and then this is a groovy sandbox syntax so if you are familiar with that then it will be more helpful so you use the keyword pipeline and then in these curly brackets you use agent any and this means execute this pipeline or any of its stages on any available agent so every detail about the script you will be able to find here so for example there is a section called stages and inside the stages you can define different uh states so for example there is a stage for build here there is a stage for test here and there is a stage for deploy here right so we will be using this syntax into our jenkins job now let's take a real use case which we can implement on our jenkins job so if you remember we have created a maven project in the last videos and i have pushed this code onto the github repository so let's say we want to test this maven app and then we want to compile this maven app and we want to package this maven app using this jenkins pipeline how we can do this using jenkins let's see so i'm going to go to the jenkins homepage and i'm going to create a new item here and this new item will be for example pipe line demo for example and in here you will choose this section which says pipeline okay so give the name of your jenkins job and choose the pipeline section from here and then click ok which is going to create your jenkins job and then in the general you can provide any description about your project i'm going to skip all this and then here we are going to say our job is a github project so we are going to just click on this checkbox and then we can just copy this url and then paste it here so this is a project url and i'm going to scroll down we are going to skip this section for now which is build triggers you can define any triggers you want later but the most important section here is the pipeline section which we are going to use so in the definition you will be able to see two options here one is uh pipeline script another is pipeline script from scm so we are going to see the first option first of all which is pipeline script and this enables us to define the script here in this section if you choose the pipeline script from scm then you can define a jenkins file in your project itself so i have already defined this jenkins file in my project but for now i'm not going to use this jenkins file this jenkins file i'm going to show how to use this jenkins file from your github repository in the next video so for this video let's say this file doesn't exist so we are going to create this uh pipeline script here in our jenkins job configuration itself so for doing things faster i'm going to just copy this syntax which is given on the jenkins documentation page so i'm going to just copy this and i'm going to paste everything here so the basic syntax is pipeline and then these curly brackets and you write agent any and i'm going to make this a little bit bigger so you can see this in a better way and then you write stages and inside the stages you define your stages for example so let me uh just change this script and now so instead of build what i want to do is i want to clone my git repository so i'm going to just say clone repo here which is going to clone the github repository and inside the steps section you can define any uh shell script commands here so for example here you will write sh keyword before uh executing your command and this sh means uh your shell if you are running this jenkins on windows then you will write bat here which is the batch command okay so right now we are on linux so we will use sh but if you are on um windows you can write bat here okay so sh and then in the double quotes what we are going to do is we are going to clone our git repository so the command for that is get clone and then the url of your git repository so i'm going to just click on this green button copy this url from here and then paste it here so this is going to clone the repository now in the next step what we are going to do is we are going to clean our project using the maven clean command so i'm going to just write sh and then maven clean command is mvn clean and then you need to give the path of your project because when you clone your git project there will be a directory which is cloned which is my app and the path you can give here using this flag minus f and then the directory name which is my app in our case so the command is mbn clean minus f and then the path of this directory which is cloned this is the relative path that's why i haven't written the whole path here if you want to write the whole path or if you want to know the whole path i'm going to show you how to see the whole path also but just write this command here so this is going to clean our project now we are going to test our project now we are going to run the test on this project so for that we can just write sh and then we when we can just write mvn test minus f and then the path of your repository which is my app in our case and then to deploy i'm going to use the maven package command so sh and in the double quote i'm going to just write mvn package space minus f and then my app which is the part of this directory okay so in the first stage we are cloning this repository and cleaning it so let's uh just write and clean okay so clone repo and clean it and in the second stage we are going to run the test so we have written this command and in the third step we are going to deploy our project and i'm going to use this command for that which is main package and i'm going to repeat once again so if you are on windows this sh keyword will be replaced by ba t keyword okay so because i'm on linux i'm using sh command and now i'm going to just save my configuration and once my configuration is saved i'm going to just build my job using this button which says build now and now the build will start you can see build has been started let me just minimize this and you will be able to see your build stages here so this view will show you which stage is executed right now so the clone and cleaning is done so first step is successful because we are seeing the green box here and now you can see at the end of this step this step was successful and the second step was successful which was the test so the cleaning and the test was successful but our deploy command have failed and let's see what is the reason for that so for finding out the reason i'm going to just click on this build history and then i'm going to go to the console output and you can see this is the directory where this project is cloned so i'm going to open a new terminal i'm and i'm going to just write cd and this path and when i do ls here you can see there is a my app directory which is cloned here and then we have run the clean command which was successful you can see build was successful and then we ran the maven test command which was also successful you can see all the tests were run and build was successful but at the package stage some problem occurred and you can see directly here the mistake which i have made intentionally here so you can see the command was mvn package minus f and the path and the path is false here so you can see my minus ap one p is missing from this command so let's correct our mistake and then we will run our job once again so i'm going to go to the configuration once again and then we will correct our mistake which is correcting the spelling of the my app path and we are going to save this configuration once again and i'm going to run the build once again and then you will be able to see the second build and now you can see this build has failed miserably so let's see the reason behind this why this build failed so i'm going to just go to this build and then i'm going to go to the console output and then you can see the clone and then i can see this message which says fatal destination path my app already exists and is not empty directory so in our first build when we have cloned our project this directory was created and because this directory is already there the cloning once again will fail because this directory already exists so for this clone command to be successful we need to remove this directory and then once again clone it from the github repository so we are going to go to the configuration once again so i'm going to go to the configuration and then i'm going to go to the pipeline script once again i'm going to just maximize it and in the first step before the cloning what we can do here is we can just write sh and then we can just write rm which is the remove command and then i'm going to just add these flag rm minus rf which is going to recursively force the removal of all the files and then i'm going to give the name of my directory which is my app in our case so this command is going to remove this directory and then run the clone command so once again the cloning will take place and then this my app will be freshly created or freshly cloned into your jenkins directory so let's save our configuration and let's build the job once again so i'm going to just press on build now i'm going to minimize this browser once again and now i can see the build number here third build and then till now our cleaning and cloning is successful and now this test stage is also successful and now deploy stage is running and hopefully it will also be successful so once you see all the stages green here that means your jenkins build is successful and you can see uh the time which it took to execute every stage so for the cloning and cleaning stage it took six second for testing stage it took a second and for the package stage it took eight second as well now if you want to see more logs of every stage for example i want to see the logs of this stage i can hover over it and i can click on the log button here and you will see all the logs related to this stage so if you want to see the test logs then you can just click here and view all the logs related to the test stage which is similar to view console output okay so this console output is showing every log from every stage but if you want to see the individual log from every stage then you can see it from here okay and then you will have the good overview of your jenkins pipeline because you will see what happened in every stage which stage is failing and if some stage is failing what are the logs are showing here and based upon these logs you will be able to you know take some steps whatever stage is failing you can directly view that log and then you can take some steps and fix it so at last you will be able to see all the stages green that means your project is successfully billed tested and deployed so this is how you can use jenkins pipeline using your jenkins job configuration now in the next video i'm going to show you how you can add this jenkins file to your maven repository for example or any other repository and then how to use this jenkins file from your github into your jenkins job hey guys welcome to the next video on jenkins tutorial for beginners in the last video we have seen what is jenkins pipeline and we have also seen how to use pipelines in jenkins using this pipeline script which we have defined into our jenkins job configuration now in this video i'm going to show you the second option of using pipeline script which is pipeline script from hcm okay so in the last video i have shown you how you can create this kind of pipeline script inside your jenkins configuration now there is one more way of creating your jenkins file which is you can create your jenkins file into your github repository and then use the second option which says pipeline script from scm which is more convenient so let's see how we can use pipeline script from scm so we will take the same project which we have used in the last video which is the maven project and there is one special file which i have created here which is jenkins file this jenkins file name typically start with the capital j and without any spaces you just need to write jenkins file here and when i click on this file you will be able to see the pipeline script so this is the pipeline script which i have written into my jenkins file which resides in my maven project on my github repository so the syntax is uh almost same so your junkies file start with the keyword pipeline and then in these curly brackets you have the agent any and then you define the stages so in this script we have three stages one is maven clean other is the testing stage which is maven test and the last stage is maven package okay now if you notice here we haven't used any git clone command which we have used in the last video so let's compare these two script first of all so you can see in the first stage what i was doing is i was using the shell command first of all to remove the my app directory which is created by cloning our github repository and then we work loaning our github repository once again and then we were running the maven clean command into the specified folder which is my app now when you use jenkins file in your github repository you don't need to use this remove command you don't need to use this clone command because when you choose this option jenkins will allow you to give the path of the github repository from where it will clone your repository so we will see uh this example in few seconds but let's see the script first of all so you can see i have just run the maven clean command and that's it so this will work similar to this script which we have written in the configuration but with the lesser steps so we have removed these two steps and you don't even need to provide this minus f flag because this maven clean will be executed inside your my app directory automatically okay so syntax is also much more cleaner here just maven clean command maven test command and maven package command okay so let's see how we can use this jenkins file into our jenkins job so what i'm going to do here is i'm going to create a new jenkins job so we will see from the start how to use this jenkins file so i'm going to just name my changes job as pipeline demo 2 and then i'm going to choose pipeline here and i'm going to choose ok so once your jenkins job is created we will just say it's a github project and we will give the url of our github repository here and then we will scroll down and in the pipeline section this time we will choose the second option which says pipeline script from scm and now you will see these configuration steps here and the first option here is scm so as scm we are going to choose the get scm so just choose get from here so once you choose get here you will be able to see this repository url so you can give your repository url here so i'm going to just copy my git repository url by clicking this button and copying the url and pasting here and then once you click anywhere outside this box you will be able to see this error is gone and the credential i don't need but you can set it from here and then you can see a branch specifier so by default my project have only one branch which is the master branch but if you have multiple branches then you can define whatever branch you want to use for this jenkins job so i'm going to leave this master as default but if you have some other branch you can specify here okay and now you will be able to see the script path so because our jenkins file script resides on the root of our project so we don't need to change the path of this script you can see once again this jenkins file resides on the root of my project so directly inside my my app directory if this jenkins file reside inside some folder or some complicated folder structure then you can give the relative path of your jenkins file script from here now last option here is lightweight checkout so i will leave this as default and now i'm going to just save my jenkins job and i will try to run my jenkins job so i'm going to just click on build now which is going to start my build and you can see all the stages one by one will be shown here so the checkout scm is successful and it took three seconds and now the mvn clean command is going on and it's also successful and it took seven seconds and now the test command is going on and it took 13 seconds to execute but it's successful and now the last stage which is the package stage is going on and once it's finished and if you see all the boxes green that means your jenkins job is successful and all four stages has been executed successfully you can also see the logs here and straight away you will observe that this option is more easier than using or creating your pipeline script into your jenkins configuration so the advantage of using the jenkins file into your project is you can change this jenkins script anytime and you can directly check your code or commit your code and push your code and if your build triggers are properly set you don't need to do anything jenkins will take care of everything and will automatically execute every stage and give you all the results so this is how you can use pipeline script from your github repository using jenkinsfile hey guys welcome to the next video on genki's tutorial for beginners in this video we will discuss about how we can create the slave nodes in jenkins and we will also see what is a master and slave node so let's get started so first of all what is a master node the master node is wherever your jenkins is running it's your master node now this single jenkins server which is a master node is not enough to meet certain requirements for example sometimes you might need several different environments to test your bills this cannot be done on your master slave for example and for that you may want to create a slave node one other scenario can be if you want to build a larger or heavier project on your jenkins job then your jenkins server cannot simply handle the entire load of that job so in that scenario you can also just create a dedicated slave node to run that heavy build on that node so let's see how we can create a slave node on our jenkins so just go to the home page of jenkins and we will go to the manage jenkins section and once this manage jenkins section is open you just need to search for the section which is called manage nodes so i'm going to just click on this option which says manage node and you can see there is a master node which is the jenkins on which you are working on this is already there and we need to create for example a slave node now for this example i will be using ssh methods so for example i have a extra machine here which is also an ubuntu machine and let me log inside this machine and i'm going to use this machine as a slave node and i will connect to this slave node using my master node on ssh so make sure that you have already installed open sss server on your slave node so your master can connect to it on ssh now we are going to create a new node so i'm going to just click on new node here and you can give any name to your node so for example i'm going to just write uh ubuntu underscore 16 4 because my ubuntu version is 16.4 on the slave and underscore agent for example okay so this will be the name of your node ubuntu 16.4 underscore agent and this will be a permanent agent so i'm going to just click on this option and then click ok which is going to create this node and here in the configuration section of this node you just need to provide some information so at the top you have the name of your node and next you can give some description about this node what it's going to do for example for example it's going to build some java job or maven bills or any other bills which it's going to execute the third option is number of executors so number of executor means number of parallel job which the slave can handle so for now we have a one job we can just enter two here which means it will be able to handle two jobs at the same time now the next option here is remote root directory so the remote root directory is the directory where you want to save all the jenkins related file on your slave node so i'm going to open my slave node and i'm inside my home folder here on the slave and let's create a directory which we are going to use in our master configuration so i'm going to just write mkdir jenkins on the slave node right so mkdir jenkins and then i'm going to just go to the jenkins file using cd jenkins and then i'm going to just write pwd and this is the location where i want to save all the files related to jenkins okay so this is on my slave this directory i'm going to just copy this path and i'm going to just paste this path as a remote root directory so all the jenkins related files or build information will be generated inside this directory on the slave node now next option here is a label so let's click on this question mark and let's see what our label is so label are used to group multiple agent into one logical group so this is a simple definition of a label so for example i'm going to create multiple ubuntu slaves so i can give a label here ubuntu okay so whenever i will use this label ubuntu one of the ubuntu node will be used to execute the jenkins jobs and here you can see for example if you have multiple windows agent and you have a job that must run on windows you can give this label on your jenkins job configuration and then one of the slave node which have the label windows will handle that job so labels are used to group multiple agent into one logical group for windows for example you can give windows level all of your ubuntu nodes you can give ubuntu label or any other logical label which you can use to group those kind of nodes so in my case i'm going to give this label ubuntu here and i'm going to just minimize uh this explanation and the next section here is the usage for now i'm going to use use this node as much as possible there are other option also for example this option which says only build job with label expression matching this node so if you use this one then if your jenkins configuration will have ubuntu label then only this node will be used to execute that job so i'm going to just use use this node as much as possible now the next option here is launch method and there are a few options here one is launch agent via execution of command on the master we are going to use the next option which is launch slave agent via ssh okay so i'm going to just use the second option which says launch slave agent via ssh so just select this option and then this is the host name so host name we will just go to our slave machine and here we can just give if config command and then press enter and here you will be able to see the host name which is the ip address of the slave machine and i'm going to just give this host ip address here now in order to verify if ssh is working from your slave to your master you can open the command line on the master and then you can just write ssh and then the username to which you want to connect so i want to connect for example this user which is a code bind here so i'm going to just write code bind at the rate the ip address which you have copied from the slave which is 192.168.1.4 and now you will be able to see this kind of message i'm going to just say yes and then press enter which is going to ask for your slaves password so this is the login password which you use to login to your slave machine which is this machine okay so this machine's password you need to give here i'm going to give my slave machines password and now i'm logged in to my slave machine using ssh okay if this is working then this connection will also work so just use the host ip address here and in the credentials right now we don't have any credentials here so we will add some credentials so just click on add option here and then click on jenkins and when you just click here in front of kind there are few options here one is username with password other is docker option and next is ssh user name with private key so you can use any one of these method and for now we are going to just use the first method which is username and password so we will provide the username and the password so username is code bind this is the username of my slave machine and then i'm going to give the password of my slave machine which i use to log into the slave and then i'm going to just click add here and then i'm going to go to the credentials you can see by default none is selected here you just need to select the new credentials which you have recently created so i have created these credentials i'm going to just choose the credentials which i have created now the next option here is host key validation strategy so this is important you just need to just select this option which says manually trusted key verification strategy okay so just click on this option which says manually trusted key verification strategy in the option host key verification strategy and this step is important otherwise you will face the problem and the next option here is require manual verification of initial connection just leave this unchecked this is also important you just need to leave this as unchecked now the next option here is the availability if you want to see the advanced option you can just click on this option also for your launch method for example the port on which ssh is connected this can be different if you want and then the jvm options and java path and other options here if you want to set them you can set it from here now in the availability section you will be able to see three options i'm going to leave it as default which is keep this agent online as much as possible now the next section here is the node properties and here you can set the environment variables if you want on your slave node for example java home or maven home or any environment variable which you want you can set it from here on your slave and the next option here is the tool location and this tool location for example if you want to set the default git location of your slave here you can set it from here but i will leave both of them as default okay which is unchecked and then i'm going to just click on the save button and you will be able to see this option and it says the agent is offline some message will be displayed here and when you click on the nodes option here you will see this new node is created but it's offline and you will be able to see this big cross symbol in red which means your agent is still offline so to make it online you just need to click on this slave agent which you have created and then click on the launch agent button i'm going to just click on the launch agent button which is going to connect to my machine and you can see the authentication is successful here and i will scroll down a little and it's doing some work and it says agents successfully connected and online so at the end if you see this message which says agent successfully connected and online that means this agent is working fine and it's online so once again i'm going to click on this nodes option and now you will be able to see this red cross is gone and this agent is now online now one important thing to note here is you need to have java 8 or more installed on your slave machine so make sure that java version 8 or more is installed on your slave otherwise it will fail complaining about java version or something if you have the older version of java so once you're a slave agent is online we are going to see how we can create a jenkins job and use this slave agent so what i'm going to do is i'm going to create a new jenkins job and i'm going to just say test slave 1 for example and this will be a freestyle project and i'm going to just say okay and this jenkins job is created for now i'm going to just leave everything as default i'm not going to give any description here but when you scroll down you just need to choose this option which says restrict where this project can be run so this is important you just need to choose this option in order to select the name of your slave agent okay so your slave agent name is ubuntu 164 agent in my case this is the slave agent name and i can also see the label name okay so you can either give the label name of your slave agent or you can give the actual name of your slave agent i'm going to choose the second option here which is the slave agent name okay and then i will scroll down and for now i will just execute a simple shell command here on the slave agent and i'm going to just say echo and then i will just say this message is executed on slave node so i will just execute this message in my jenkins bill and i'm going to save this and for now what i'm going to do is i'm going to go to my slave and i'm going to just go to the jenkins location which is this location which i have set where all the files related to jenkins are saved and you can see slave.jar is already saved here when we have tried to connect to this slave right and there is a jdk directory also so now when i just build this job so now my job is building and i'm going to go and see the console log here and you can see everything is successful and this build was successful and now once again i'm going to go to my slave and do ls once again and you can see workspace directory is created when i have executed this build here and inside the workspace there will be my job name which is test slave one you can see the name of my jenkins job is testle one and on my slave node inside the jenkins directory which i have given inside the workspace this uh job name is also created there so that means everything is working fine and this job is executed on the slave machine and not on my master machine which is where my jenkins is actually running right so everything is executed on the slave machine now so this is how you can create a slave node using jenkins and you can connect to the slave node in jenkins hey guys welcome to the next video on jenkins tutorial for beginners in the last video we have seen how we can create a slave agent in jenkins and launch the slave agent via ssh now in this video i'm going to show you how we can create a slave agent and launch this slave agent via a method called java web start now in the last video we have seen how to create a linux slave agent and in this video i'm going to show you how you can create a windows slave agent so let's get started now before starting and before launching our slave agent via java web start we need to do some settings and i'm going to show you how to do these settings so first of all go to the manage jenkins section and once the manage jenkins section is open go to configure system settings so just click on configure system and once the configure system settings are open you just need to scroll down until you find this section which says jenkins location now by default this jenkins url is set to http colon forward slash forward slash localhost port 8080 and you will see this small warning here also which says please set a valid host name instead of localhost so if you have the host name for your jenkins server then you can give this host name here otherwise we will give the local ip address of this server instead of the local host okay so to know the local ip address i'm going to just open the terminal and i'm going to just write if config command and then press enter which is going to give me the local ip address which is this one so i'm going to replace this local host by this ip address okay so if you have the host name for your jenkins server you can write the host name here if you have the ip address of your jenkins server just write the ip address here instead of localhost and this is important for this particular step to launch your slave agent via java web start and now i'm going to save my configurations and once the configurations are saved now we are ready to create our new slave node so once again i'm going to go to the manage jenkins section and i'm going to choose the section called manage nodes and you can see our master node is there and the second node is this node which is ubuntu which we have created in the last video which is offline right now because my slave is not running right now so that's why it's offline so let's create a new node so i'm going to just click on the new node option and here i'm going to give the name of my node i'm going to just give the name windows 8 because the slave is running on the windows 8 operating system so i'm going to just give the name windows 8 underscore agent okay and then you can just choose this option which says permanent agent if you want to copy the existing node then you can also choose the option which is called copy existing node but right now we don't have any windows agent that's why i have just chosen this option which says permanent agent and now i'm going to just click on ok and you will see this section here so most of the options which are shown here we have discussed in the last video so i'm going to go through all of them one by one really fast so the name is windows 8 agent description whatever you want you can describe here number of executors we will take a number of executors as two which means that this windows agent will be able to run two parallel jobs and then we need to provide the remote root directory and this will be the directory where all of your jenkins related file will be saved on your windows slave agent so i already have created a directory inside my c folder on my windows slave agent and i'm going to just copy this path from my windows slave agent and i'm going to paste it here okay and the label we already know what is label from the last video so i'm going to just give this label here which is windows you are free to give any other label which you wish to provide here usage i'm going to just leave it as default which is use this node as much as possible and you will be able to see this option which is launch agent via java web start okay so if you don't see this option which is launch agent web start you just need to go to the settings once again so this is when you don't see this option which is a launch agent via web start you just need to go to your dashboard and once again go to manage jenkins and then go to configure global security and inside the configure global security options you just need to scroll down until you find the agents section so this is the agent section and by default this is disabled okay so what you need to do is you just need to choose the random option here otherwise if you want to provide the fixed port here you can just choose this option which is fixed and then you can just give any port which you want to use okay but i prefer using the random port so i'm going to just choose this option and i will suggest you to choose this option here and then only you will see this option in your node creation which is launch agent via web start okay so if this option is disabled you will not see the option in your launch method so i'm going to just save these settings and then once you see this method you just need to choose this method from here and then leave everything as default and the availability i'm going to just leave it as default also which is keep this agent online as much as possible and the environment variables and tool location we have discussed in the last video i'm going to leave them as default which is unchecked and i'm going to save all the settings and you can see windows 8 agent is created and right now it's offline so i'm going to just click on this option and this text says connect agent to jenkins via one of these two methods so there are two method you can use to connect to your windows agent one is open this url on your windows agent and then click on this button which is going to connect to your jenkins server otherwise the second option is you just need to copy this command and run it onto your windows agent terminal so we are going to choose the second option and we are going to run this command onto our windows terminal so to open this jenkins server on the windows slave i can just use this ip address until windows 8 agent which is also this address but you need to replace this local host by the ip address of your jenkins slave or the host name of your jenkins slave okay so i'm going to copy this address until uh windows 8 agent like this and i'm going to open the browser on my windows slave agent so this is the browser which is running on my windows slave agent and i'm going to just paste this url there which is going to open this jenkins web page on your windows slave agent right now before using this command we need to save this agent.jar file which you can download from this link so you just need to click on this agent.jar link i will suggest you to just save this agent.jar on your jenkins folder wherever you have created your jenkins folder for saving all the jenkins related files so i'm going to save it here which i have provided as the root directory for my slave also okay so let me save this file so now what i'm going to do is i'm going to open the terminal on my windows slave agent so i have opened this terminal on my windows slave agent and first of all i will cd into this folder where i want to save all my jenkins related files which is c colon slash jenkins so once i'm into this folder where my agent.jar is there i'm going to just copy this command which i can see on my windows slave using the jenkins ip address okay so i'm going to just copy this command make sure that this is not localhost this is the host name or the ip address of your jenkins machine so i'm going to just copy this whole command and paste it into my windows terminal and then press enter and this is going to run this agent and once you see this info which says connected then your windows slave is connected to your jenkins server so make sure you see this connected message and then you can directly go to your jenkins master server which is this one and i'm going to open the nodes here so you can see we have created this node right now so i'm going to go to the nodes and you will see this cross symbol is removed from the windows 8 agent that means this agent is now online which is windows 8 agent so let's use this agent to create a jenkins job so i'm going to go to the home folder and i'm going to create a new job and let's say this will be my windows test one and then i'm going to choose the freestyle project and i'm going to just click ok which is going to create this job and once this job is created in the general settings i will leave description as default which is blank and then i'm going to scroll down a little and i'm going to choose this option which says restrict where this project can run and this time i'm going to use the label which i have given to my windows slave agent which is windows so this is the label you can also choose the agent name directly which is windows 8 agent but this time i'm going to choose this one which is windows label okay so i have chosen this windows label here and then i will scroll down i will script everything i just want to test whether this slave is running or not so under the build section i'm going to just choose this option which says execute windows batch command so just choose this option which says execute windows badge command because we are running this jenkins job on our windows operating system okay and then i think windows understand the echo command so i'm going to just write echo this command will run on your windows slave so i'm going to just execute this command on my windows slave and if you want to see in which directory we are working in we can use the cd command cd command is same as pwd command in your linux operating system so this will print the present working directory on your windows operating system so now i'm going to save this job and once the job is created i'm going to just build this job which is going to start building the job and i will just go to the console output of this job and you will be able to see the output of the cd command you can see the cd command is executed and the cd command output is this one so we have chosen c colon slash jenkins as our root directory so this is the root directory and then jenkins will create a workspace directory inside your root directory and then you will see your jenkins job name which is windows test one in our case you can see here also and the next command we have executed is echo and whatever text we have written here which is also executed successfully so it has echoed the sentence and then at last we can see the success message that means our jenkins job is build successfully and on your windows slave you can also see that there will be a remoting directory created and there will be a workspace directory created and inside your workspace directory your jenkins job name directory will also be created so you can see windows test one is created which is same as your jenkins name so this is how you can create a jenkins slave and launch this slave agent via a method called java web start hey guys welcome to the next video on jenkins tutorial for beginners in this video i'm going to show you how you can parameterize your build in jenkins now sometimes it is necessary or useful to have bills to take one or more parameters and jenkins allow you to parameterize your build so that you can provide one or several parameters at the time of building your job so let's see how we can do it so we are going to create a new jenkins job so i'm going to just click on new item and then i'm going to give the name to my job which is parameterized project and then we are going to choose the freestyle project and i'm going to click ok here which is going to create our jenkins job so once your job is created i will leave this description as default which is blank and then to parameterize your build you will see in this general section under the description there is an option called this project is parameterized okay so you just need to choose this option which says this project is parameterized here you can add several type of parameters for example boolean parameter or choice parameter or credentials parameter and you can see there are several parameters which you can choose from this list so we are going to choose let's say string parameter for now and here let's say at the time of building our job we want the user to provide the platform on which this jenkins job is running so in the first option which asks us to provide the variable name we will just provide the platform a keyword here which is the variable name which we will use in our build and you can also provide the default value of this parameter let's say the default value of this parameter is linux it's optional so if you don't provide any default value it's okay but if you want you can provide the default value from here and also the description is also optional so if you want to provide the description you can provide it from here or you can leave it as default and there is one more option here which says trim the string if you check this option you can see what it does so strip white spaces from beginning and the end from the string so we have added one parameter to our jenkins build and then i will leave the other sections as default and in the build section i'm going to just choose this option which says execute shell if you are using windows you can choose execute windows batch command from here and here i'm going to just echo the parameter which is provided by jenkins to us so to echo a parameter on linux you can use dollar symbol and then the parameter name which is in our case the parameter name is platform okay so just copy this parameter name and after this dollar symbol just write your parameter name and this is going to just print the value which you will provide for your parameter so i'm going to save this job and once the job is saved i'm going to just execute this build so now one new thing you will see here is normally you will see this text as build but because we have provided some parameters for this build so it says here build with parameters okay so just click on this job and on the right hand side you will see here this build requires parameters and the default value of this variable or parameter platform we have given linux here so let's change this default value let's say we want to just give unix value for our platform variable and i'm going to just click on this build button which is going to build our job with that parameter and i'm going to just go to the console output to see if it's successful or not so you can see this echo command is executed with the parameter which we have provided which is unix okay so this is how you can provide the parameters to your jenkins build now i'm going to go to the configuration once again so if you have a different operating system some operating system for example if you are using the same uh echo command on your windows operating system you can use these modules symbol in front and the back of your parameters so on windows you need to provide this mod in front and at the end of your parameter then it will be executed without giving you problems so this is for windows so i'm going to just provide this hash which is a comment and i'm going to just write windows here so for windows you need to use this mod symbol in front and end and on mac i think this dollar will work if this dollar doesn't work then we can also use for example echo and then a dollar and in these curly brackets your parameter name which is a plate form so in some operating system this type of syntax is valid so you can also use this type of syntax now let's uh choose some more parameters from here so one parameter we have already provided which is a string parameter let's provide the second parameter and this parameter will be a choice parameter so you can choose from a list of the choices which you give here so the variable name i'm going to give here is choice itself and here you can give your choices so for example a b c d e something like this if you want to choose some other kind of variable name you can just choose linux and and then windows or mac or unix or any other so this type of choices you can provide in this choices box one by one on every line so every line is a choice here and i'm going to leave this description as default and let's echo this choice parameter also so i'm going to just write choice from here and then i'm going to just save this build and once again i'm going to click on build with parameters and you can see there are two parameters present now one is the platform parameter other is the choice parameter so platform i will leave as linux and the choice i will just choose d here and then i'm going to click on build which is going to build my job and then i'm going to go to the console output and you can see it has a code linux first of all and then a code d is executed which we have chosen from the choice parameters so this is how you can parameterize your job or build in jenkins hey guys welcome to the next video on jenkins tutorial for beginners in this video i'm going to show you how to use jenkins cli and more specifically i'm going to show you how you can run your jenkins job using jenkins cli so let's get started so first of all what i'm going to do is i'm going to just click on manage jenkins here and when you scroll down you will be able to see this option which says jenkins cli so once you are in this jenkins cli section you will be able to see this command which you can use to get help on using jenkins cli now when you want to use jenkins to for example build your job or add job to view or there is a list of command which you can use with jenkins cli you just need to click on the specific command which you want to execute for example i want to execute build command i can just click on this build command and then this is the command which i can use to build my job with some flags and the description of these flags are given here so let's uh use this uh jenkins cli command to build uh jenkins job so first of all you need to download this jenkins minus cli jar file and you can download it by clicking on this jenkins cli jar file and you can save it on your computer first of all and once this jenkins cli jar is downloaded you can copy this jenkins cli jar at the comfortable location and then use this ghr to execute the command which is given here so let me open the terminal first of all and i will first of all create a jenkins directory so mkdir jenkins and i want to move this jenkins cli uh jar file into this directory so this is in my downloads folder so i'm going to just write mv and then i will just move this jar file which i have downloaded from the downloads folder to this jenkins folder so i'm going to just give this command which is going to move this jar file into the jenkins folder so i'm going to just cd to the jenkins folder now and you can see this jenkins cli.jar is there so now i can use this command to build a job so let's see what job we can build so i have this job which is java hello world and let's build this job using the jenkins cli so the job name is java hello world so i'm going to just first of all copy this command up to job and then i'm going to just paste this command on my terminal and instead of job here you just need to give the name of your jenkins job which you want to build so the name of the jenkins job is java hello world which i will provide here and then press enter and of course this will fail because our jenkins require the permission so right now we are logged in with the admin credentials that's why we need to give the admin credentials in case you want to execute your job without the credentials you can go to manage jenkins and then go to configure global security and once you are in the configure global security there is a option under authentication we have previously chosen this option which is role based strategy right so if you want to disable this authentication you can choose this option which says anyone can do anything and save this configuration and once this configuration is saved this command will work because now we don't need any credentials to run the jenki's job so once again i'm going to give this command and this time you can see it's successful and it hasn't given any error to us but you can see this command doesn't give any result it just executes and then no result is printed and when you go to the location where your jenkins job is there on this jenkins ui you will see this jenkins job is executed but no result is printed here so for example you can see i have five bills right now and when i execute this command once again and i will refresh this web page you will be able to see a sixth build is executed successfully here so now in case you want to see the output of your build on the terminal itself what you can do is you can go to this command once again from where you have copied and you can see there are a bunch of flags you can provide so the flag minus f is going to show you the output of your jenkins job so i'm going to just give the minus f flag with my command and then press enter and you can see started java hello world build and you will be able to see uh here also the seventh build is executed successfully on the jenkins ui also and some output is printed here also it says started java hello world seventh build and the build status was successful now if you want to see more verbose output you can use this flag which is minus v and you can see this flag is used with minus s so we will give this flag which is minus v with minus s and then press enter and you can see started the build number eight and you will see all the console output which you see generally on your jenkins job so when i just refresh this and i will go to the console output here so this is the output which you see in the console output this output will be shown on the terminal also same output will be shown here and once again the build status is successful now in order to use this jenkins cli command with the authentication you just need to go to the manage jenkins section once again and then go to configure global security and this time we will enable in authentication the logged in user can do anything so you need to just choose this option which says logged in user can do anything and you also need to check this option which says allow anonymous read access so this is important you need to check this option and this option as well which is logged in user can do anything and then i'm going to save this configuration and this time with this command so let me clear the terminal first of all so i'm going to clear the terminal and with this command which we have used to build the java hello world jenkins job we will use the username so i'm going to just write minus minus user name and space the username is admin in my case and then to provide a password you just need to give this flag which is minus minus password and space your password so my password here is root so i'm going to give my password and then press enter and this is going to start the build you can see java hello world ninth build was started and it's ended successfully so the build status is success here so in order to provide the credentials you just need to use these two flag which is username your username and minus minus password your password so now let me show you one more thing which is to execute a parameterized jenkins job using command line so i'm going to go to my jenkins home here and i'm going to choose a project which i have created in the last video which shows how to use parameters in your jenkins job and its name was parameterized project now if you don't know how to create a parameterized jenkins job you need to see the last video so i'm not going to create a new uh job i'm just going to use the jenkins job which i have created earlier so in this uh jenkins job we have this build with parameters option and there are two parameters here one is platform and other is choice so i'm going to just use this jenkins job name first of all and i'm going to go to the terminal and let me clear the terminal and i'm going to use the same command but this time the project name is different so instead of java hello world the project name is parameterized project which is this one and in order to provide the parameters you need to give the flag which is minus p so at the end just add minus p and then your parameter name so the parameter name i have is first of all a plate form and it's better to use double quotes if you have single word then you can avoid these double quotes but i prefer to use these double quotes even if this is a single word string so here i'm going to just write linux now once again i'm going to just use minus p flag for providing the second parameter and the second parameter is a choice here so i'm going to once again use minus p choice which is the parameter name and then the parameter value so for example i want to just give c here as a choice and then i'm going to just press enter which is going to execute this job you can see the job is executed and you can see it has echoed the linux keyword and the c letter and the build was successful so this is how you can provide the parameters to your jenkins job using jenkins cli so this is how you can use jenkins cli to execute your jenkins build hey guys welcome to the next video on jenkins tutorial for beginners in this video i'm going to show you how we can create a multi multibranch pipeline project in jenkins so first of all what is a multibranch pipeline project so the multibranch pipeline project type enables you to implement different jenkins files for the different branches of your project now generally in the software teams which is working on our project different developers can work on different features so let's say our team is working on a project called my app and we have a few developers in this team and master branch is generally the final product right which is going to be run in the production now when the developers work on some features they generally create a branch out of this git repository so for example here when you click on branches option here i have one a branch which is feature one so in a normal software project whenever some developer works on some feature he creates a branch and when this feature is implemented he or she merges this feature into the master branch now at the time when this feature is going on and the developer is working on how can he test this feature using jenkins as well as the master branch so multi branch pipeline project allows us to test all the branches of your project at the same time using jenkins so let's create a multibranch pipeline project in jenkins and then we will see how it works so just click on a new item here and then give any name to your jenkins project for example multi pipeline project and then scroll down and you will be able to see this option which is multi branch pipeline so select this option and then click ok so my multi branch pipeline project is created and here you can give you some description about your project and in the branch source you can give the url of your github project so here you can just click on add source and click on git and then just copy the url of your github repository by just clicking on clone or download and then copy this url from here and then paste it here where it says project repository i don't need to provide any credentials because this project is publicly available but if you want to add your credentials you can add it from here and then in the next section you will see behaviors and there is this option which is automatically enabled which is discover branches so your jenkins job is going to automatically discover your branches and then run your test on all the branches now it's important to notice here is i have this jenkins file here in my project right so make sure that this jenkins file is there we have already seen how we can add this jenkins file to our github project in the previous video so i'm not going to tell you how to do this but make sure that your project have this jenkins file and then when you scroll down you will be able to see this section which says build configuration and in the mode you will be able to see only one option here which is jenkins file and you need to provide the path of your jenkins file here and because my jenkins file is on the root directory so i don't need to change the path of this jenkins file right now when you scroll down more you will be able to see scan multi branch uh pipeline trigger and for now we only have one trigger which is periodically if not otherwise run so when you check on this check box you can run the scan on your project every minute or every two minute or every uh you know this time period which is given in the list okay so for example i can just set it to every five minute then jenkins will scan your project every five minutes and it will just look whether your project have any extra branch or not and if you have committed any changes then it will run the test on every branch of your github project now rest of the thing i will leave them as default because we don't need to use them for now so orphan item strategy we will not be using and then health metrics we can just click on this and you can see there is a one health matrix which is child item with worst health pipeline libraries we don't have any pipeline library so we are going to leave this as default and then the pipeline model definition we also don't have any model definition so i'm going to leave it as default so what we have given here in the configuration the url of our project and make sure that you have the jenkins file in your github project so just choose or leave it as default which is jenkins file and then click on save button and as soon as you press the save button you will see a scan will start on your multibranch project and this scan is scanning the branches in your github project and you will be able to see uh two tasks which are parallely running here one on the master branch you can see one on the master branch is running and other scan task is running on the feature branch and the same branches are available in my github project also so i have feature one branch and the master branch that's why there are two tasks running to scan them and when i click on my project here you will be able to see two jobs here which are running one is the master branch job and other is the feature branch job and you can individually click on every job so i'm going to click on the master job here and you can see this job is going on and you will be able to see the stages of this job which are currently running so this job is successful you can see and we can also go to the feature branch job also and you can see it's also successfully tested so that's why both of them showing the success now let me show you how you can create a new branch in git and push it to your github project and how this trigger works so i'm going to open the terminal first of all and then i'm going to cd to my project so i'm going to just cd to my project in which i'm working on i have already checked out my project here now to view all the branches in your project you can give this command git branch and then press enter and it's going to show you all the branches in your project so i have two branches right now in my project one is master and other is feature one so let's create one new branch so in order to create a new branch you just need to give this command git branch and your branch name so so let's say i'm going to create a feature branch 2 here so i'm going to write feature 2 and then press enter and now we are going to list all the branches once again and now you can see there are three branches in my project so one is master branch and other two are feature branches now in order to push this branch to your github repository you can give this command git push or region and then your branch name so my branch name is feature 2 and then press enter and you can see this branch is now pushed to our github repository so we can verify it by going to our github repository and then refreshing this web page and i'm going to once again click on branches and you can see our new branches visible here which is feature two okay so now once we have the new branch we can trigger them with some web hooks like jira or git bucket but right now we don't have any web hook so we are going to just press on this button which says scan multi branch pipeline now so i'm going to just click on this and then i'm going to scroll down a little and you can see there is a new task running here which is for the feature branch 2 and when i refresh this web page so i'm going to refresh this jenkins web page and now you can see this feature branch 2 jenkins task is running right so when i click on this feature branch 2 this build is running and you can see all the tasks are here running and the build is successful now so now you have three branches and you can see the result of three branches in your jenkins repository so this is how you can create a multibranch pipeline project in jenkins
