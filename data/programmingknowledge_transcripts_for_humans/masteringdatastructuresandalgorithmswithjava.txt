With timestamps:

00:00 - are learning the data structures and
00:02 - algorithms in Java so in today's topic
00:05 - we are learning arrays in Java so let's
00:08 - get started so normally arrays is a
00:11 - collection of the similar types of
00:12 - element which has a contagious memory
00:15 - locations so what do you mean by
00:18 - contagious memory locations so it's
00:20 - nothing but all the elements are located
00:22 - next to each other in the same memory
00:25 - space that is the consecutive blocks of
00:28 - the memory as allocated to the user for
00:30 - the processes
00:32 - so there are many types of memory
00:34 - location memory storage types such as
00:38 - hip memories are also there so array
00:41 - uses the contagious memory location
00:43 - so next point is array uses array uses
00:47 - the zero based indexing means at the
00:50 - element that is that stores at the first
00:53 - in the array
00:55 - is is stored at the
00:58 - zeroth index and the next element will
01:00 - store at the one then second
01:03 - and this series will go I go on till n n
01:06 - is the number of number of elements that
01:09 - you declare that the array will store
01:12 - okay
01:14 - so unlike C C plus plus we can get the
01:17 - length of the array using the length
01:18 - member so in C plus plus we use the size
01:22 - of operator which which gives our
01:24 - returns us then length of the array
01:27 - means then how many number of the
01:29 - integers store in that array like that
01:33 - in similar way there is a length member
01:35 - in Java which Returns the same the
01:37 - length of the array which we are using
01:39 - so typically there are two types of
01:41 - arrays in Java so first one is user
01:44 - defined and second one is using building
01:46 - class
01:47 - so in this video typically we are going
01:50 - to see the user defined one and the
01:53 - built-in building class we can see in in
01:55 - the next upcoming videos wherein there
01:58 - is not too much work that we we are
02:02 - going to do we just uh import the class
02:05 - from the Lang like a Java package Lang
02:08 - package which is uh predefined in the
02:10 - Java Java and we just make an object of
02:13 - that class and we can use the predefined
02:16 - methods of that class okay
02:18 - moving ahead uh Java provides the
02:21 - feature of anonymous array which is not
02:24 - available there in C plus plus so we
02:26 - will see what is an anonymous arrays so
02:30 - Java supports the feature of anonymous
02:32 - arrays so so as you you don't need to
02:35 - declare the array while passing an array
02:37 - to the method so think of a situation
02:39 - where where you have created one method
02:42 - and the method method requires an array
02:45 - as a parameter so where where when you
02:48 - when you are calling that
02:50 - method in the main method so instead of
02:53 - calling instead of declaring the new
02:56 - array and passing the value to that
02:58 - array you can just create create a new
03:01 - int and just pass the values that you
03:04 - want to pass through the array that is
03:06 - known as the anonymous array which c
03:08 - plus c c plus plus language is like that
03:10 - don't provide these features
03:12 - okay so moving on next we have the types
03:16 - of array where so there are technical
03:18 - two types of arrays single dimensional
03:20 - and multi-dimensional okay so let's see
03:24 - uh each of them one one by one
03:27 - so single dimensional array the syntax
03:30 - is very similar to our other other
03:34 - programming languages so wherein we have
03:37 - first declare data type like integer and
03:41 - then two square brackets and array or we
03:45 - can declare it this in three different
03:47 - ways as you can see here so
03:50 - first of all let's write some basic code
03:55 - of that single dimensional array so I'm
03:58 - here and let's declare one public class
04:03 - Main
04:05 - okay and I will write the main method
04:09 - that is public
04:12 - static
04:14 - void Main
04:18 - string
04:20 - Alex
04:23 - okay so first of all let's
04:28 - declare and initiate initialize one
04:31 - array so for that we have we can we can
04:33 - do this int
04:35 - that is that that means the direct array
04:38 - is going to hold the integer types of
04:40 - values let's name our array as a
04:44 - okay equals to
04:47 - new
04:49 - integer
04:52 - and this is the
04:54 - five
04:55 - so this 5 is nothing but the size of the
04:58 - uh how many integer types of values that
05:01 - added is going to hold okay so here I
05:04 - return 5 that means the array is going
05:06 - to hold the five values in it okay so
05:10 - let me just go and
05:12 - quickly
05:16 - okay array at index one
05:20 - it's gonna hold twenty like this
05:24 - array at index 2
05:27 - and hold 30
05:31 - and then index three
05:34 - is going to hold for t
05:37 - likewise array at index for
05:41 - is going to hold
05:42 - what sorry 50. okay so here you can see
05:48 - uh my array length is 5 and I have
05:50 - declared the five elements in it
05:52 - so
05:54 - let me just print it on the console so
05:57 - for the printing of an a print of an
05:59 - array on the console we just use a for
06:02 - Loop
06:03 - wherein our for Loop will start from int
06:06 - I is equal to 0 and it will go until
06:10 - I less than a DOT length
06:17 - a DOT length and each time I am
06:19 - incrementing the value of the I
06:21 - so this dot length function you can
06:26 - see here I have told you
06:30 - the there's one
06:32 - method named as length of the length
06:35 - member which will return the length of
06:38 - the array so here we are using that same
06:41 - method so
06:44 - quickly just I will system
06:48 - dot out Dot
06:51 - print Ln
06:55 - is
06:58 - Okay so
07:01 - quickly just revise it we have declared
07:04 - one array and initialize and we are
07:07 - given the all the values that the
07:11 - oregano store at that index and then we
07:14 - have used the for Loop where we are
07:16 - traversing the array and printing the
07:18 - elements that are stored at the 0 to
07:21 - fifth fourth element fourth index of
07:24 - that array okay so I'm gonna run this
07:29 - let's see so here you can see 10 20 30
07:33 - 40 and 50s got printed on the console
07:35 - because at the first at first is value
07:39 - is 0 and array at eyes I store 10 so
07:42 - that's got printed here and each time
07:45 - the for Loops runs in welder the I got
07:47 - incremented I write one added two error
07:49 - three I added four code printed
07:51 - so this is the basics basic program of
07:55 - array
07:56 - so this so moving next we have
08:01 - multi-dimensional array
08:03 - so here you can see the
08:05 - multi-dimensional array
08:08 - how we can declare that array okay so
08:11 - without wasting the time let's
08:15 - code it out
08:17 - Okay so
08:18 - I'm gonna come here and I will comment
08:21 - it out this code
08:23 - at next I will again declare one array
08:27 - but this time I am declaring the
08:29 - multi-dimensional array that means I
08:32 - have to use two pair of square brackets
08:35 - equals to
08:39 - let me just pass those value
08:58 - okay so here I have declared one array
09:01 - which is multi-dimensional array and I
09:03 - pass values to that
09:04 - okay so let us check how we can print
09:08 - the multi-dimension array like we have
09:11 - printed here the single Dimension array
09:13 - okay so for that we require two
09:16 - uh for Loops first one
09:19 - is run from I is equals to 0 to I less
09:24 - than
09:25 - three
09:27 - and each time it will it rate I plus
09:29 - plus okay so inside this we have we are
09:33 - going to use another for Loop which is
09:36 - going to learn from i j is equal to 0
09:39 - J is less than three
09:43 - and each time we are incrementing the
09:45 - value of the J
09:47 - okay
09:48 - so in this we are going to print system
09:52 - dot out
09:54 - dot print Ln
09:57 - array add index I
10:01 - and index J
10:05 - plus one space
10:08 - after
10:09 - each number got printed on the console
10:13 - and after this I will just write
10:16 - system dot out Dot
10:20 - print and then
10:24 - okay
10:27 - so if I run this now
10:30 - we'll see what happens
10:33 - so here you can see one two three two
10:36 - four five four five four four five is
10:39 - got printed so let's check how it got me
10:41 - how is it's printing actually so when we
10:44 - come for the first for Loop the value of
10:46 - the I is 0 and it when it Center for the
10:49 - second for Loop the value of J is 0 and
10:52 - here when we enter and we pass the uh
10:55 - array array as array of zero comma zero
10:59 - zero so what is present at array 0 0
11:02 - this is the element which is present so
11:04 - this this got printed and when when we
11:06 - go uh again here in in inner for Loop
11:10 - where JJs value is now 1 okay and eyes
11:13 - value is zero so again we are passing
11:16 - wherein G is value is zero and but this
11:19 - time J is value is one so what it
11:22 - becomes array of 0 1 so at position
11:25 - error of 0 1 2 is present so 2 is got
11:28 - printed similarly this for Loop will run
11:30 - uh one time again when J is 3 this
11:34 - formula gets terminated in a for Loop
11:37 - and it go outside for Loop where I plus
11:39 - plus is done and is value is now 1 again
11:42 - it enters the for Loop whereas in change
11:44 - value is 0 and this time we are going to
11:47 - get those values as I array of 1 0
11:51 - wherein we get this values similarly we
11:55 - are printing all those values
11:58 - so this is the this is how we can
12:00 - implement the multi-dimensional arrays
12:02 - in Java so
12:04 - there are many uh ways many practical
12:08 - uses of this using arrays in Java let's
12:11 - suppose think think about a scenario
12:14 - where you have 100 students in class and
12:18 - you have to store all the data of the
12:20 - student uh let's suppose marks the
12:23 - students got obtained the marks in
12:25 - mathematics
12:26 - so you can't just declare a one one
12:31 - variable one variable for each student
12:33 - so in this scenario we we can use an
12:36 - array wherein we we just declared one
12:39 - array of mathematics marks and we will
12:42 - just pass those values according to the
12:44 - student's role number and which got
12:47 - printed and stored and whenever we want
12:49 - we can retrieve those information or the
12:52 - values let's suppose I want to know the
12:55 - marks or marks obtained by the students
12:57 - whose role number is 8 in mathematics so
13:00 - I can pass the array name and pass the
13:03 - parameter as eight a seven sorry because
13:06 - the array index in short form 0 and I
13:08 - will get the marks which is of 10 by the
13:10 - student whose role number is 8. so these
13:13 - are some real life scenarios where
13:15 - wherein we are using arrays in Java so
13:18 - you can
13:19 - go to the websites like Geeks for gigs
13:22 - where they have the practice portal
13:24 - wherein you can just sort those uh field
13:28 - you can apply the filter of arrays and
13:31 - you can set the difficulty level and do
13:33 - the do the practice for the coding I
13:36 - will be sharing on all the required
13:38 - resources and the references you will
13:40 - require to learn arrays in Java in the
13:43 - description box of the video so thank
13:45 - you so much guys I will see you in the
13:47 - next week next lecture
13:51 - hello and welcome back to the new video
13:52 - of java tutorial series uh so till now
13:54 - we have covered arrays in Java and for
13:57 - this video we will be covering some
13:58 - practice questions in arrays okay so
14:02 - what is first question uh write a Java
14:04 - program to sum the values of an array so
14:07 - input to this program is an array so you
14:11 - are giving you are given an array of the
14:12 - input you have to print the sum of the
14:15 - elements of elements which are present
14:17 - inside the array okay so let me open my
14:20 - IDE
14:21 - and I will create one new Java class
14:24 - name as
14:28 - arrays
14:32 - practice
14:35 - questions
14:37 - let me increase the font size
14:40 - I'll write my main method
14:44 - okay and now I have to declare one array
14:47 - which will be given as input to the
14:50 - program
14:51 - int
14:54 - array
14:55 - equals to
14:57 - and I will assign values to the array
15:00 - here itself let's suppose one comma 2
15:03 - comma 3 comma 4 comma 5 comma
15:09 - six comma seven
15:11 - comma eight comma
15:13 - okay so this is this is our array
15:16 - and now uh
15:18 - I again I will require one variable to
15:21 - store the sum sums value
15:24 - okay now
15:25 - I will use announce for loop I I hope
15:28 - you guys and know what is enhance for
15:30 - Loop for it's like a for each loop I
15:33 - will write int I
15:35 - in
15:37 - ARR
15:39 - what uh what we have done here is for
15:42 - every inte integer value inside array
15:46 - will run this Loop okay and what we are
15:50 - going to do inside this Loop sum plus is
15:52 - equals to
15:54 - I means we'll update the sums value with
15:57 - the value which we are getting uh from
16:00 - inside the array okay now at the last I
16:03 - will just simply print
16:04 - the
16:06 - sum is
16:08 - and I will concat it with the value of
16:12 - sum
16:13 - okay so now if I run this
16:18 - should print the value of summation of
16:21 - one two nine
16:22 - okay the sum is 45 now it's working
16:24 - properly
16:26 - so moving forward to the next question
16:28 - uh write a Java program to print the
16:31 - following grid so this is the grid that
16:33 - you are supposed to print on the console
16:35 - uh it has a zero sorry one two three
16:39 - four five six seven eight nine ten uh
16:43 - ten columns and one two three four five
16:46 - six seven eight nine ten ten by ten grid
16:49 - is this and you are supposed to print
16:52 - this okay and
16:54 - so let me get into my ID I will
16:58 - comment this out
17:00 - this is the solution for the question
17:02 - number one I will comment
17:04 - and I will write one one more comment as
17:07 - solution
17:08 - to question number one
17:15 - now from here onwards I will write
17:18 - solution
17:21 - to question two
17:24 - and inside this we required
17:28 - multi-dimensional array because Matrix
17:31 - is there and so I will declare one
17:34 - multi-dimensional array over here
17:35 - integer
17:39 - this and this and I will name my array
17:43 - as a which is equals to
17:46 - new
17:48 - integer of 10 by 10 because our grid is
17:52 - 10 by 10
17:53 - Matrix
17:55 - after this I require one for Loop
17:59 - a for Loop
18:01 - integer I is equals to 0 and
18:07 - I is less than 10 less than 10 means the
18:10 - loop will run from 0 to 9 which is 10
18:13 - times and each time I will increment the
18:15 - value of i as I plus plus and inside
18:17 - this Loop uh again I require one more
18:21 - for Loop to track the columns first
18:24 - first row will track the rows and second
18:27 - for Loop will track The Columns and
18:30 - inside this I will write intj is equals
18:32 - to 0.
18:34 - whenever my J is less than 10
18:37 - I will do J plus plus
18:41 - okay and inside this inner for loop I
18:44 - will be doing
18:46 - system.println
18:51 - person
18:52 - 2D
18:55 - and I will
18:58 - I will pass it a value as any at ith
19:01 - index and red jet sorry jet index
19:06 - Okay so
19:08 - after this I will do this okay
19:12 - now it's okay
19:16 - wait I will again simply print the
19:19 - value which is inside the array at I I
19:22 - comma J index and after printing the
19:26 - inner for loop I need to move to the
19:29 - next row and for that for that I will
19:32 - simply write one print statement so that
19:35 - I do so that the program execution will
19:37 - get to the next line okay
19:39 - now if I run this
19:42 - class
19:43 - foreign
19:47 - on the console
19:50 - uh one mistake is there I have written
19:52 - print Ln instead of I should write print
19:55 - so that
19:56 - every time a new line should not get
20:00 - printed on the console now it's working
20:01 - fine yes you can see 10 by 10 uh grid is
20:06 - printed Matrix so this is this is the
20:10 - expected output that we have we want to
20:12 - print on the console okay
20:14 - so next question is write a Java program
20:16 - to calculate the average value of the
20:18 - array elements okay
20:21 - so you have given one array you just
20:24 - have to
20:25 - print the average of the elements which
20:27 - are present inside the array okay
20:28 - assuming that the there are integer
20:31 - values which are present inside the
20:32 - array okay so now again I will comment
20:37 - this solution of the question number two
20:39 - and I will write and one more comment
20:42 - which is
20:44 - solution
20:46 - to question number three
20:49 - okay so first of all we require one
20:53 - array okay so I will declare one array
20:57 - um of type in of type integers and I
20:59 - will name it as numbers
21:01 - which whose value is equals to new
21:05 - integer array and I will pass those
21:07 - values here itself let's suppose I will
21:11 - pass 20
21:13 - comma 30
21:15 - comma 35
21:18 - comma minus 15
21:21 - okay comma minus 60
21:25 - comma minus 100 okay so these are the
21:29 - value just random numbers I have passed
21:32 - to the array and I have to calculate to
21:35 - calculate the average we have to
21:36 - calculate uh sum of the elements which
21:38 - are present inside the array first okay
21:39 - so for that I will require one variable
21:41 - known as sum I will assign it value as 0
21:44 - initially
21:45 - and after that I will require one for
21:48 - Loop to calculate the sum of the
21:49 - elements which are present inside the
21:51 - array
21:52 - int I is equals to 0
21:56 - now I it's less than numbers
22:01 - Dot
22:03 - numbers dot length numbers dot length
22:06 - methods will return the length of the
22:08 - array
22:10 - okay and now each time I will be doing I
22:12 - plus plus
22:15 - okay why am I getting error yeah yes
22:18 - I've written this okay now it's okay uh
22:23 - what we are supposed to do inside this
22:25 - is update the sums value okay so
22:28 - previous Value Plus the value of
22:33 - of the current
22:36 - element present inside the array okay
22:39 - now it's okay we have got the sum of the
22:43 - elements which are better inside the
22:44 - array now we just have to calculate uh
22:47 - average so to calculate the average and
22:50 - again
22:51 - declare would have double average
22:53 - variable of type double and I will
22:57 - simply divide this sum by the numbers
23:02 - dot length
23:03 - okay
23:05 - and now I can simply print
23:11 - the
23:18 - AV
23:20 - average
23:24 - of the
23:28 - area
23:30 - elements are
23:33 - and now I will concat it with
23:37 - average and now if I
23:41 - run this I should get the average
23:44 - averages 4.
23:47 - okay now it's okay and working fine if
23:51 - you calculate the summation of 20 plus
23:54 - 30 plus 30 35 plus minus 16 plus 60
23:58 - minus
23:59 - 100 and it when you divide it with the
24:03 - number of elements that is one two three
24:05 - four five six then you should get 4 as a
24:09 - output
24:10 - that is the average of the array array
24:12 - elements okay
24:14 - so these are some questions again I
24:17 - suggest you that you go to the Geeks for
24:19 - gigs or any of the
24:21 - practice portal like hacker rank or
24:24 - hacker you just go there and apply the
24:27 - filter of arrays and set the difficulty
24:29 - level to easy and try to attempt those
24:31 - questions try to solve this question it
24:33 - will help you to improve your logic
24:36 - building
24:37 - in problem solving okay so thank you
24:40 - guys for watching this video
24:43 - hello and welcome back to the new video
24:45 - of the Java tutorial Series so so till
24:47 - now we have covered the theoretical part
24:49 - of the array and we have also done uh
24:52 - some uh
24:54 - easy level questions of the array and in
24:57 - this video we'll be talking some uh
24:59 - medium level of medium level question of
25:01 - the array which requires some searching
25:03 - and sorting techniques uh so till now I
25:06 - have not discussed you the not discussed
25:08 - the searching and sorting algorithms
25:11 - which are there in uh foreign
25:17 - videos we will cover that don't worry uh
25:21 - there are a number of the Sorting
25:22 - techniques and searching tests there are
25:25 - two two searching techniques are there
25:26 - which is linear search and variance
25:28 - binary search we will cover that in our
25:30 - upcoming videos so what will the agenda
25:33 - for this video is I will be covering
25:35 - this uh three uh medium level questions
25:38 - which are arrays address questions uh so
25:41 - I again these these these many questions
25:45 - are not enough for you to practice you
25:48 - just have to get your hand dirty on the
25:51 - programming uh so what what I suggest
25:53 - you you just go to the any any of the
25:55 - portal or Geeks for geeks hacker Rank
25:57 - and hacker hacker Earth Register there
25:59 - uh try solving questions on the arrays
26:02 - set the difficulty levels as easy medium
26:04 - then hard
26:06 - okay so practice more and more so that
26:09 - you can improve your logic building okay
26:11 - so let's get started uh what is the
26:14 - question write a Java program to test if
26:16 - an array contains a specific value so
26:19 - what this program uh what this
26:22 - in this question what we have to do is
26:24 - we have to search for an element uh
26:27 - which is given by the first of all we
26:29 - require an array and inside that array
26:32 - you will be getting one uh element which
26:34 - is what uh arrays arrays of type into
26:37 - arrays holding the integer values itself
26:39 - and you you have to search that element
26:41 - inside that array whether that element
26:44 - is present inside that array or not if
26:46 - that if that present inside an array you
26:49 - just simply return true
26:50 - Boolean value and if that elements
26:54 - doesn't uh present in inside that L
26:56 - array you just simply return false okay
26:59 - on the console okay so let me get into
27:02 - my IDE and I will just simply
27:05 - comment this out uh this is a previous
27:08 - video Solutions okay and I will
27:12 - simply comment and here I will again
27:15 - comment and I will right
27:19 - medium
27:22 - question one
27:23 - okay medium level questions one okay uh
27:27 - now I will be creating one method uh
27:30 - inside this and since then since this
27:33 - method is probably I will declare it as
27:35 - public and I will declare it as static
27:38 - because I have to call this inside my
27:40 - main method and which is test static
27:41 - method okay static uh and this is this
27:46 - will return a Boolean value either true
27:48 - or false it will return true if that
27:49 - element is present inside that array and
27:52 - it will return false if that element is
27:54 - not present inside that array okay and I
27:56 - will write
27:58 - uh My Method name as contains contains
28:01 - means whether that element is inside
28:04 - that array or not you can write anything
28:05 - whatever you want and I will pass my
28:08 - array
28:10 - and
28:12 - item means the value that we we have to
28:15 - search inside that
28:16 - array okay and I will simply write one
28:19 - for Loop
28:20 - and so I will write integer I in
28:25 - array
28:27 - what we have to do uh we have to check
28:30 - if
28:32 - the array at ith index is equals to
28:36 - equals to
28:38 - um is equals to equals to item
28:43 - equals index
28:46 - uh not just uh sorry uh I have followed
28:51 - the traditional for Loop over here I
28:53 - just have to write I is equals to equals
28:56 - to item oh
28:57 - sorry about that and I will write inside
29:00 - this return
29:04 - true
29:08 - okay I'll return true I guess this
29:12 - cannot return a value from a method with
29:16 - white word result type
29:20 - uh why am I getting
29:23 - oh wait I forgot that this is the
29:27 - separate method
29:28 - uh let me just remove this my main
29:32 - method so that program can understand
29:35 - this is as a separate method
29:38 - okay uh now it's okay I will import my
29:43 - main method over here
29:50 - why am I not getting
29:53 - wait a minute let me check this whether
29:58 - oh yeah sorry
30:00 - I have not ended the method
30:03 - now it's working fine I will get my main
30:07 - method okay now it's working right okay
30:09 - and after this for Loop uh when the
30:13 - program execution will get at line
30:15 - number 36 when we doesn't uh find any
30:19 - element which matches to the item that
30:21 - we have passed to the method okay so in
30:23 - that case we simply written
30:26 - false okay now it's okay and now we will
30:30 - call that method inside this main method
30:32 - uh for that before that uh I will
30:34 - declare one array
30:36 - int
30:38 - array which is equals to
30:43 - uh I will simply assign the values over
30:46 - here itself or 10 comma 20 comma
30:51 - 23 comma 30 comma 45
30:54 - you can give any value whatever you want
30:58 - and after that I will require one
31:02 - variable
31:03 - item means the I value that we want to
31:07 - search inside that array and let's
31:09 - suppose we have to search 23 inside that
31:12 - array okay and now
31:15 - I will just
31:18 - print the
31:21 - call the contents method and I will pass
31:23 - array and
31:25 - item as my parameters to it okay now if
31:30 - I run this since the 23 is present
31:32 - inside this array the expected output
31:34 - should be true yes it is returning two
31:36 - and now if I give a item value as number
31:41 - which which is not present inside that
31:43 - array then in that case I should get
31:46 - false yes it is getting showing false
31:49 - okay now it's working fine so this is
31:52 - the solution to the question number one
31:55 - and what is the question number two
31:57 - second question that is fifth question
31:59 - write a Java program to find the index
32:01 - of an array element so we have to find
32:05 - the index
32:07 - of an array element okay
32:09 - so in this case
32:12 - we want we have to get one array from
32:15 - the user and we want
32:18 - one item like here we have declared over
32:21 - here one item should be there and we
32:23 - have to match whether that item is
32:25 - present inside that error or not if that
32:28 - matches we just have to return the index
32:31 - at which the item is better inside that
32:34 - array okay
32:36 - this is the idea behind this question I
32:39 - will comment this out and this statement
32:42 - also and now here I will write one more
32:46 - comment
32:47 - uh
32:49 - medium
32:51 - question two
32:52 - and for this I will create I will create
32:56 - one in
32:58 - method by the name of find index because
33:01 - we have to find the index of the element
33:04 - that it is present inside the diary and
33:08 - I will write public
33:11 - static the return type should be in
33:14 - because we are returning the index that
33:15 - is the integer value
33:19 - method name is find index and this
33:22 - method is uh receiving one
33:25 - array as an input
33:28 - and as an input and integer
33:31 - uh t
33:33 - let me give it SD okay
33:37 - okay so what we are going to do inside
33:40 - this we will check one base condition if
33:45 - my if the array
33:48 - is equals to equals to null
33:52 - then
33:54 - return
33:56 - -1
33:57 - this is a this is called as base
33:59 - condition in programming you have to
34:01 - check the corner cases whether these are
34:04 - the cases uh that you need you need to
34:06 - handle or this will improve your space
34:09 - and time complexity of the
34:11 - your algorithm because if the array is
34:14 - original means array is empty there is
34:16 - no point checking doing all this uh
34:18 - running those Loops doing all those
34:20 - processing tasks then it it you can
34:23 - simply return -1 because if the array is
34:26 - null you are not getting going to get
34:28 - that element inside that array okay so
34:30 - this is the base
34:32 - condition
34:34 - that we have to check and
34:38 - now here I will write integer length
34:43 - equals to
34:45 - array Dot
34:49 - oops sorry
34:51 - error.length
34:53 - and I will require one more variable I
34:55 - is equals to 0
34:57 - and I will declare one while loop
35:00 - and inside this I will write I is less
35:04 - than my length
35:07 - okay I'm doing this task I'm running
35:10 - this while loop whenever
35:13 - my I is less than left so initially my S
35:17 - value is 0 and length value is uh is the
35:20 - number of the elements which are better
35:21 - inside that array okay it can be
35:23 - anything 5 10 whatever the number of
35:25 - number of elements you pass inside the
35:27 - array and inside this for loop I will
35:29 - check one if condition if my array at
35:31 - ith index
35:33 - is equals to equals to
35:36 - okay T is nothing but the value either
35:39 - item that we want to find inside that
35:41 - array in that case we will simply return
35:44 - the value of the I uh return
35:47 - the i i wins the well in this highest
35:50 - value I represents the current index at
35:52 - which the loop is running so if that
35:55 - elements matches the elements that we
35:57 - want to pass that we have passed to the
36:00 - method then in that case return the
36:02 - value of the I that means return the
36:04 - value of the index at which the element
36:06 - is present inside the diary and if it is
36:09 - not present inside the diary if it not
36:12 - matches with the elements inside that
36:13 - array simply do I plus plus means
36:16 - increment the value of the I and again
36:18 - go further checking whether the I is
36:20 - less than equals to length and whenever
36:23 - my while loop is executed successfully
36:25 - and I till not found the element which
36:27 - is
36:28 - which I want to find inside that array
36:31 - in that case that means there that
36:32 - element is not present inside that array
36:34 - in that case we will simply return
36:36 - -1
36:38 - okay and now uh I hope this is the thing
36:42 - that we have to do inside this method
36:44 - and now if I go inside my main method I
36:48 - have I will be using the same array and
36:52 - here I will give 23 as an input the item
36:57 - which we have we are searching for in
36:58 - inside this array and add indexing start
37:01 - from 0 so 0 1 2 the expected output
37:04 - should be 2 okay
37:07 - and I will simply
37:09 - print
37:12 - I will call the method find index and I
37:15 - will pass array and the item to this
37:19 - method okay now if I run this
37:23 - I should get 0 1 2 yeah we are getting 2
37:26 - on the console because 0 1 2 the element
37:29 - is found at the index 23 and let me give
37:32 - the items value as 2 which is not there
37:35 - inside that array in that case I should
37:37 - get the
37:38 - output as -1 yeah we are receiving it as
37:42 - minus 1 and if I give the array as an
37:45 - empty array
37:46 - base condition we also check
37:49 - in that case also we will receive minus
37:52 - one yeah we are receiving the minus one
37:53 - uh now it's okay
37:56 - now the one more question was there
37:58 - write a Java program to copy an array by
38:01 - iterating the array now uh we in this
38:06 - questions in this question we have given
38:08 - one array we just have to copy the
38:10 - elements which are present inside one
38:12 - array and take those elements and copy
38:15 - those all elements inside the new array
38:17 - okay so there are several ways by which
38:20 - you can write this code in optimized
38:22 - manner uh
38:24 - okay so for now till now I'm assuming
38:28 - that you know have you don't have any
38:31 - advanced knowledge about the arrays and
38:33 - problem solving so we'll go the basic
38:36 - approach itself okay uh so now
38:41 - I will comment it out
38:44 - and I will write one more comment over
38:46 - here
38:48 - taking medium
38:51 - question three
38:53 - and now I will comment this also okay
38:57 - so I will write one more method over
38:59 - here
39:00 - okay so what we'll be doing we just we
39:03 - just have to copy the elements okay so
39:05 - in that case the method should not
39:08 - return anything okay so the written type
39:10 - should be wired okay so I will
39:14 - public
39:16 - static
39:18 - void
39:21 - um late wait wait wait wait wait
39:24 - do I need to create one separate method
39:28 - first
39:29 - I think no need is there to create one
39:33 - separate method where we can do this
39:36 - kind of stuff inside the main method
39:37 - itself
39:38 - okay so one array was declared already
39:41 - over here I will use the same array uh
39:43 - these items value was not required for
39:46 - me to in this question and I will
39:48 - declare one more here array I will call
39:53 - this as new
39:55 - array
39:57 - new integer of I mean I will give the
40:00 - same one two three four five capacity of
40:04 - five elements
40:06 - inside this area okay
40:09 - and now
40:11 - um
40:13 - to do this I one inbuilt method was
40:17 - there I will use it as
40:19 - okay
40:20 - I will write
40:23 - original
40:26 - array
40:28 - and to print this array inside one go we
40:33 - have one method
40:36 - arrays
40:37 - Dot
40:40 - to string
40:42 - and we have to pass the array name to it
40:46 - okay
40:47 - now it's so errors.to string I receive
40:50 - the class which is uh provided by the
40:52 - Java in the util package here you can
40:55 - see if I hover over here you can see
40:57 - Java dot util dot arrays and I guess
41:00 - yeah IntelliJ IDEA has also imported the
41:04 - following the package okay
41:07 - what it will do it will get array as an
41:10 - input and it will convert that array in
41:13 - into the string okay so it will here you
41:16 - can see it it is accepting the arrayism
41:18 - parameter and it will convert those
41:21 - array elements into the string and it
41:23 - will print all those in a sequence of
41:25 - that we have stored over here okay now
41:30 - I just have to copy all those elements
41:32 - so for the copying purpose I required
41:34 - one for Loop which will start from I is
41:38 - equals to zero
41:39 - and which will go till whether till my
41:42 - array dot length and each time I will be
41:46 - doing I plus plus and inside this array
41:50 - I will simply write new array wait wait
41:54 - wait
41:56 - a new array at it index means the first
41:59 - India that is zeroth index I will copy
42:01 - the element which are which is present
42:03 - at any at ithe index means we are just
42:06 - simply taking the first element of the
42:08 - original array and we are assigning it
42:10 - to the value of the value at the
42:15 - similarly when we go for the again
42:17 - checking for the for loop at that time
42:20 - is value is 1 we will simply get the
42:22 - first element of the original array and
42:23 - copy it with the first position of the
42:26 - new array okay
42:28 - and after that
42:30 - once the for Loop is ended uh the same
42:33 - thing we are going to do we are going to
42:36 - print the
42:39 - copied array
42:41 - copied array and we'll pass
42:45 - new
42:46 - array as an input to this okay now if I
42:49 - run this
42:50 - the same array should get printed okay
42:52 - originally array is uh 10 20 23 30 45
42:55 - and copied array is 10 20 30 to 23 30
42:58 - and 45. so this is the solution to the
43:01 - question number sixth
43:04 - so I hope you got some idea how these
43:07 - searching and sorting techniques are
43:09 - done in Java there are some algorithms
43:12 - like I said uh linear search binary
43:15 - search and for the Sorting bubble sort
43:17 - heaps or Radix or merge merge sort is
43:19 - there there are so many uh sorting
43:21 - techniques we will also cover that all
43:23 - these algorithms in our upcoming video
43:26 - for before that you should go to gigs
43:30 - for gigs or hacker rank to try solving
43:32 - some questions so that your logic
43:35 - building will get improved in the
43:37 - programming okay strength thank you guys
43:39 - for watching this video and I will see
43:40 - you in the next one
43:42 - hello and welcome back to the new video
43:43 - of the Java tutorial Series so till now
43:46 - we have covered arrays data structure uh
43:49 - so what I'll be doing is uh we'll be
43:51 - covering some hot hot topics uh hot
43:55 - interview questions which are covered or
43:58 - frequently asked during the interview
43:59 - processes of the many companies okay uh
44:03 - for these are very basic one uh that
44:05 - that the interviewer may ask you to test
44:09 - your
44:10 - problem solving skills okay so if today
44:14 - in this video
44:16 - uh let me just open uh create one Java
44:19 - class and I will name it ads
44:22 - let's suppose
44:24 - remove
44:27 - elements okay so let me what I'll be
44:31 - doing is let me just increase the font
44:33 - size
44:35 - okay wait I will increase the font size
44:43 - okay now it's okay uh okay so I'll just
44:49 - comment out the question so what we have
44:51 - to do is we have to
44:54 - remove the
44:58 - email numbers
45:01 - from an array
45:04 - so what we have to do is we have to
45:07 - write one function where we have to pass
45:10 - one array to that function and that
45:13 - function will return you the new array
45:16 - where all the elements are odd ones okay
45:21 - so what it does it will remove the all
45:24 - the even numbers from the array that you
45:27 - have you have passing to that function
45:29 - okay
45:30 - so enough talking so I will give you an
45:34 - example let's suppose
45:36 - okay wait let me just comment it out and
45:39 - this is an example array we have this
45:42 - array
45:43 - and let's suppose we have elements
45:45 - random elements three comma 2 comma
45:49 - 4 comma seven comma eight
45:53 - okay so uh this is uh the array that you
45:57 - have passed through the function and now
45:59 - uh the array which will be returned by
46:04 - our function is 3 2 is removed because
46:09 - that is your even number 4 is also got
46:11 - removed because that is also even number
46:13 - seven
46:15 - and 8 is also removed so this is the
46:18 - expected output from your function
46:19 - function okay uh so first of all let's
46:23 - break down our question so we have to
46:25 - remove the even numbers from an array
46:27 - right so first of all we have we need
46:30 - one uh way where we can
46:34 - count
46:36 - the total number of
46:38 - uh even integers that are present inside
46:42 - that array right so we need uh one way
46:46 - to count uh step let me just call it as
46:48 - steps
46:49 - steps that we need to solve
46:53 - count the number of
46:57 - uh not even let let us count odd numbers
47:03 - so that okay after Counting
47:08 - step number two is we have to create one
47:12 - new array of that size of
47:15 - the size equals to the odd numbers
47:17 - present inside that array right so
47:21 - create a new
47:23 - array of
47:26 - sides equals
47:30 - number of
47:33 - odd numbers
47:36 - right
47:37 - now after creating the array we just
47:41 - need to iterate through this through the
47:44 - array and check whether that number is
47:47 - or if that number is odd we just simply
47:50 - take that number and put it inside the
47:53 - new array okay
47:56 - so I will write if
47:58 - number is
48:00 - odd
48:02 - take it
48:05 - and
48:07 - put it
48:09 - inside
48:13 - new cell okay so these are the steps
48:17 - that we have to follow
48:18 - okay so let's go and create our main
48:23 - function first
48:25 - I will like my main function and inside
48:27 - this main function I'll create one array
48:30 - I'll be taking the hard coded hard-coded
48:34 - values uh you can also take the
48:37 - uh use input from the user by taking the
48:41 - creating this object of the scanner
48:43 - class as you know till now I hope
48:46 - array
48:48 - of size let's suppose five and wait
48:54 - and I will pass the values
48:58 - uh let's let's
49:00 - Let me give the above values itself
49:03 - three two
49:05 - four
49:07 - seven
49:08 - eight
49:10 - okay now I'm editing the error
49:15 - let it now it's okay okay uh now we have
49:21 - created one array
49:22 - and now I will write
49:25 - and one function
49:27 - function call before that I have to
49:29 - create our function over here I will
49:31 - create one function
49:36 - yeah okay so my function uh doesn't
49:40 - return anything it just creates a or
49:44 - else I can return I can return one array
49:48 - I don't know
49:50 - okay for now I will not return anything
49:53 - I will just simply write void
49:57 - my function name or else I will write
50:01 - I will return that new array itself okay
50:03 - you can also write while but one extra
50:07 - thing that you have to do is you have to
50:08 - print that a new array inside that uh
50:11 - that function okay
50:13 - that's what we have to do extra over
50:15 - here I'm not doing that thing
50:18 - I will write remove even and
50:22 - I will just pass
50:24 - the array
50:27 - to it okay now inside this function
50:30 - first thing we have to do we have to
50:32 - count the odd number okay so for
50:34 - counting part I need one uh counter
50:37 - variable
50:38 - uh let me just call Quality as or count
50:41 - is equals to zero
50:43 - initial zero
50:45 - and we need one for Loop and so this for
50:49 - Loop related from I is equal to 0 to I
50:54 - till
50:55 - next I less than array Dot
51:00 - length and each time we'll do 5 plus
51:03 - plus and inside this array now
51:07 - we'll check for if condition if
51:11 - current I index
51:15 - is more to
51:19 - is not equals to
51:22 - zero
51:23 - okay so what this line will do is it
51:27 - will check that number and it will check
51:30 - if it is divisible by 2 mod 2 means if
51:34 - it will be divisible by 2. if it is
51:35 - divisible by 2 that means that number is
51:37 - even number and we will not count that
51:40 - number as odd odd number and we will not
51:42 - increment the value of the odd count
51:44 - okay and inside this we will simply
51:46 - increment the uh
51:48 - or count by one account plus plus
51:54 - okay
51:55 - so first step is done now we have to
51:58 - create one news array of size the number
52:03 - of the odd numbers designing cited array
52:05 - okay so I will write int array
52:09 - this is the result array so I'll name it
52:12 - as a result
52:13 - new
52:15 - in of size or count
52:19 - again okay
52:20 - now inside this I will again need one
52:25 - uh variable to get to take the track of
52:30 - the indexes of the new uh what we can
52:34 - say new array
52:36 - now
52:38 - inside our for Loop
52:40 - I will just write inti is equals to 0
52:44 - and this for Loop will again run from
52:47 - int I plus then
52:49 - array Dot and this time we'll do I plus
52:54 - plus
52:55 - and here we are checking one condition
52:57 - if
52:58 - array at ith index
53:02 - mod 2.
53:07 - okay if that number is not equal to 0
53:10 - what that means
53:11 - that number
53:13 - is an odd number and we have to push
53:16 - that number inside our new result array
53:19 - and I will pass as index because
53:22 - indexing of this resultant error will be
53:26 - different uh as that of the our array
53:29 - that we have passed to the function okay
53:31 - and we'll write array at I
53:35 - okay after passing that we have to
53:37 - increment the index index variable also
53:42 - so that next time the I index will be
53:46 - switched to the next uh part okay or
53:50 - suppose uh for the first Value First
53:52 - Time index value is idx value is 0 so it
53:56 - will push that variable and sorry number
53:58 - to the zeroth index and next time uh idx
54:03 - plus plus we will do the 0 to 1 and next
54:06 - time when we are pushing that number to
54:08 - the nearest it will become one okay
54:12 - at last
54:14 - I will just simply return our result dot
54:17 - array
54:19 - okay and over here I will call that
54:25 - so remove I will call that
54:29 - function over here
54:31 - means just call it
54:36 - wait wait
54:46 - why am I not able to call this
54:51 - wait a minute guys
54:57 - hint remove even
55:03 - more
55:11 - and I'll pass Direct
55:14 - okay what I am getting here non-stitting
55:17 - method oh wait now I will have to switch
55:20 - it as static because
55:23 - as we know uh non-stating methods cannot
55:26 - be called inside the static method so
55:28 - our main method is starting one that
55:30 - that's why we have to create our new
55:33 - method as a static on it also okay and
55:35 - now
55:36 - this whole thing I have I write inside a
55:40 - print statement
55:43 - print
55:45 - remove even and I will pass or add it to
55:48 - it okay
55:50 - so that is pretty much I think we have
55:53 - to do
55:54 - let's hope
55:57 - okay so this is getting
56:01 - then the build is going on
56:04 - will this complete
56:06 - okay this is returning I guess
56:11 - object
56:13 - wait wait wait
56:18 - this thing we have to do I think wait
56:23 - let me just commit it out
56:27 - and I will just simply
56:31 - you can do is
56:33 - create phonetic
56:41 - everything
56:44 - and you will assign it as
56:47 - a
56:51 - and I will just simply write
56:55 - sort of
56:58 - AR to
57:01 - I hope now this will work
57:07 - wait wait wait wait wait guys this is
57:10 - printing the objects I don't know why I
57:12 - will click make check once
57:16 - okay guys I think uh by this we are
57:20 - storing that array inside our uh this
57:22 - array arr2 but one thing it is doing
57:26 - that it is printing the object so I
57:28 - guess instead of printing this
57:32 - we need to iterate over that array okay
57:35 - so we have to run run for Loop over here
57:38 - I is equal to zero I is less than
57:42 - ARR
57:44 - 2 dot length and each time we'll be
57:47 - doing I have 5 plus plus okay and inside
57:51 - this uh we'll just simply write
57:54 - only print because it will print all the
57:57 - bearing inside the vertical manner okay
58:00 - now uh I have to just print there
58:05 - to add index yes
58:09 - okay so now it will print the new array
58:11 - which way which is written by our
58:14 - function
58:16 - so expected output should be 3 and 7
58:18 - inside the new array let's see yeah
58:21 - three and seven is getting printed only
58:23 - thing is that
58:25 - I just have to print
58:27 - one extra line over here I will just
58:29 - simply write over here itself okay now
58:32 - it's okay
58:33 - fire and again three one space and seven
58:36 - should be painted on the console yeah it
58:39 - is printed on the console so quick
58:43 - summarize uh what we have done in this
58:45 - question uh we have removed the even
58:48 - numbers from an array uh so let's
58:50 - suppose this is the array it will remove
58:51 - the even numbers from an array so one
58:55 - thing uh let me clear uh the way I do in
58:59 - is not the only way you can do it you
59:02 - can also try in the new ways right right
59:06 - now here we have created one new array
59:08 - and we are storing that number inside
59:10 - this array uh we can solve this here by
59:14 - using one eye one array itself but only
59:16 - thing is optimization should be there
59:19 - okay so that part comes under the time
59:22 - and space complexity uh so we will also
59:25 - cover those lectures in our upcoming
59:27 - videos
59:28 - how to reduce your space and time
59:30 - complexity of your code which will
59:33 - improve The Code by a much way okay so
59:38 - here
59:39 - that's all for this question uh I will
59:42 - see in the next one
59:46 - hello and welcome back to the news new
59:48 - video of the driver tutorial Series so
59:49 - today in this video we will be covering
59:51 - another question uh which is frequently
59:54 - asked in our interview for interview
59:55 - process of any companies
59:58 - so the question is how to reverse an
60:01 - array in Java okay so let me just
60:05 - create a Java class and name it as
60:12 - first array
60:13 - okay so let me just increase the font
60:16 - size
60:21 - yeah now it's okay I guess
60:24 - okay so let me just give my one comment
60:28 - which is question
60:30 - viewers and
60:33 - edit uh
60:36 - for example uh the original array that
60:39 - we have given is let me just write
60:41 - original array origin arrays so let's
60:44 - suppose one comma two comma
60:47 - three comma 4 comma 5.
60:51 - all right and the array one
60:55 - that we have to return is
60:58 - the output let me show it 5 comma 4
61:02 - comma 3 comma 2 comma 1. okay so this is
61:06 - the area that we have to return
61:08 - okay so let's go and write this
61:14 - math function
61:16 - okay so we have to write this function
61:18 - so we just have to reverse an error so I
61:21 - don't think we have to return anything
61:22 - so let me just write as
61:25 - method name as public static
61:31 - void as return time because we do not
61:34 - return anything to
61:36 - after this function and I have to pass
61:41 - the array
61:42 - okay so adding
61:45 - click the quality as numbers
61:48 - because it's integer array and we have
61:51 - to pass start index
61:54 - and we have to pass the end index of the
61:56 - diary
61:58 - okay
61:59 - so this is a question this is the method
62:03 - declaration
62:05 - why we have written static because we
62:08 - are calling this method inside a main
62:11 - method and the method is a static one
62:12 - that's we have written static as the
62:15 - method type okay and we need one while
62:18 - loop okay so inside this file look one
62:22 - thing we can do is uh we can achieve
62:24 - this using single array itself means
62:27 - what what is the meaning we just modify
62:30 - the array which will be passed to this
62:33 - function or the method this method is
62:36 - accepting one array right so we will do
62:39 - such things we will modify this array
62:43 - and reverse the elements and store those
62:46 - elements inside this area itself okay
62:49 - and another way in doing is doing this
62:52 - is you can create a new array
62:55 - and you can create a new array and you
62:58 - can Traverse this original array but in
63:01 - the backward Manner and you can just
63:03 - take go on taking those elements and
63:05 - adding those elements inside the new
63:07 - array what uh but one thing
63:10 - is the drawback of this approach is you
63:13 - have to create one new array right it
63:15 - will increase the space and time
63:18 - complexity of your code itself right
63:21 - there so what we'll be doing is we will
63:24 - modify things in such a manner that we
63:27 - will be requiring one array and we will
63:29 - do all those modification inside this
63:31 - array itself okay so why I will write
63:34 - one while loop while our start is less
63:39 - than 8. okay so this Loop will run until
63:42 - our
63:43 - start in the start integer value is less
63:47 - than end integer value okay so what we
63:50 - will be doing is we will write 1 10
63:53 - variable and I will assign the value to
63:58 - it as integer of start integer of start
64:01 - okay
64:02 - and over here
64:05 - numbers
64:07 - start is equals to
64:10 - numbers
64:14 - set
64:18 - okay and over here I will write numbers
64:21 - of
64:23 - and is equals to
64:26 - temp
64:28 - and after that
64:30 - start plus plus
64:32 - n minus minus okay so let me explain
64:35 - what we have done here we are just
64:38 - swapping those numbers okay so what
64:41 - swapping means we are taking one element
64:43 - from that array itself and we are
64:46 - swapping that element with the element
64:48 - other element inside that array okay so
64:50 - uh initially modulus starts well it
64:53 - initially the start value is 0 because
64:56 - the error indexing starts from zero okay
64:59 - and what is the end value n value is the
65:02 - length of that array minus 1 because
65:04 - since the array is indexing start from 0
65:06 - that's why we have to minus one number
65:09 - from the address left okay
65:11 - and
65:13 - over here we have assigned the numbers
65:16 - of start means numbers of zeroth element
65:19 - that is 1 to the ten so initially
65:23 - 10th value is 1 and numbers of start we
65:27 - have assigned to the numbers of end
65:28 - numbers of start is this this position
65:31 - first position of the array and we are
65:35 - assigning or changing the value of this
65:37 - position as numbers of n numbers of n is
65:39 - 5 so after the first uh after running
65:43 - the nine number the number which is
65:47 - stored at the first index of the array
65:49 - is 5 and numbers of n is equal to 10
65:52 - numbers and numbers of 10 10 payments
65:54 - and Position will be stored the 10th
65:56 - value to what is the tenth value times
65:58 - value is the first element of the array
66:01 - okay so after this after line number 10
66:04 - the first and last number got
66:06 - successfully strapped okay and I will
66:09 - just simply increment the value of start
66:11 - now the for the next iteration the start
66:15 - value will be at over here and the end
66:17 - value will be will be at over here so
66:20 - the these numbers will also get slapped
66:23 - and will be at 4 comma 2 okay and when
66:26 - we are at
66:28 - 3 the start value is also 3 and ends and
66:32 - uh pointer is also pointing at three
66:34 - okay so at that time uh this three will
66:38 - not get swipe big since this is the
66:40 - middle point of that array and after
66:42 - this iteration uh will will break this
66:46 - condition because start value will be uh
66:49 - over here and and we will go well end
66:52 - value will be over here and this start
66:56 - value is no more less than the end value
66:58 - which is exceeds and this while loop
67:00 - will break and after that our whole
67:03 - array will get reversed at this point
67:06 - okay so I will write main function and I
67:12 - will create one array
67:15 - now
67:17 - which is equals to the let me give that
67:20 - example array itself over here one comma
67:22 - two comma three comma four comma five
67:25 - and
67:28 - I will just call that method okay
67:31 - reverse and I will pass our array
67:36 - comma start index should be zero As We
67:40 - Know and end index is the length of the
67:44 - array that means
67:47 - ARR dot length
67:50 - and since the array indexing start from
67:52 - the
67:54 - 0 we have to minus one because added dot
67:57 - length this will return the arrays in
68:01 - length as 0 1 2 3 4 5 but the indexing
68:04 - should
68:05 - uh there for the PIN code number and now
68:10 - after this
68:13 - okay so we have to paint that array
68:17 - again for that we will do uh iterate
68:21 - so and for Loop I will write I is less
68:24 - than
68:27 - here Dot
68:29 - length
68:30 - I plus plus
68:32 - and inside this for Loop we will just
68:36 - simply print
68:39 - area index
68:42 - plus okay
68:46 - so this this is the thing that we have
68:48 - to do insert this question I guess so so
68:51 - let me just run this
68:56 - okay so you can you can see five four
68:58 - three two one is getting printed which
69:00 - is exactly the reverse manner of this
69:02 - one to three four five okay so you can
69:05 - you can give as much value you want over
69:08 - here with an array and you rerun this
69:11 - code you'll get the exactly the opposite
69:15 - in the reverse way of the diary and you
69:20 - can also take the input from the user
69:22 - from here you can you just simply need
69:24 - to create disk object of the scanner
69:26 - class and take the input from the user
69:27 - and pass that array to this function of
69:30 - over here
69:31 - okay so try doing some giving some more
69:36 - reports for the add to this function and
69:38 - I hope you got this question thank you
69:41 - for watching this video
69:45 - hello and welcome back to the new
69:47 - version of the travel tutorial Series so
69:50 - so till now we have covered two
69:53 - questions which are regardless in the
69:55 - interview processes and now today we
69:59 - will be covering another question which
70:01 - is to find the minimum or the maximum
70:04 - value inside an array so what they have
70:07 - done over here is you will be giving
70:09 - giving
70:10 - an array and you just find you just have
70:13 - to find minimum organization when you
70:17 - found the array
70:19 - array will consist of the integer
70:22 - numbers and you have to find the minimum
70:25 - number from that
70:28 - okay so let me stripe question over here
70:33 - find
70:40 - maximum
70:43 - for all man
70:45 - Eddie
70:46 - and let me give you an example 5 comma 6
70:52 - comma 9 comma ten comma 25 so let's
70:57 - suppose this is an uh example
71:00 - so after giving this array to our
71:04 - function that we have we are going to
71:06 - write
71:06 - the expected answer should be 5 because
71:09 - among those five integers five is the
71:12 - minimum number or else if you finding
71:15 - the maximum numbers the result should be
71:18 - 25. you can do anything so you can find
71:24 - minimum as well as the next one okay so
71:26 - in this question we will be finding the
71:28 - minimum you can try for the maximum one
71:30 - if you get some error you can do comment
71:32 - out I will be giving you the reply okay
71:37 - so
71:38 - I guess we have to find the minimum
71:40 - value for that we have to return that
71:43 - minimum value inside in the integer
71:45 - format okay so the return value of the
71:47 - return type of the our method should be
71:50 - integer okay and our method should be
71:53 - static because we are calling it from
71:56 - the main method
71:58 - of type in I will name it name this
72:02 - method as find
72:03 - mini mode
72:06 - okay so to this we will be writing
72:12 - array because we need to pass that array
72:16 - to that function
72:18 - okay uh so inside here I will be uh need
72:22 - one Min integer variable which will
72:26 - store the value of the minimum welfare
72:28 - minimum number from that array so
72:30 - initially I will be doing
72:32 - array at 0 as the minimum number
72:35 - initially I just assigning the zeroth
72:38 - index integer value to the minimum
72:40 - variable over here okay and now we need
72:44 - one for Loop
72:46 - which will iterate through the entire
72:49 - array that we have passed I
72:52 - with less than
72:55 - error.length
72:57 - and each time we'll be doing
73:01 - I plus plus
73:03 - okay so we need one if condition over
73:06 - here array at I
73:09 - is less than a minute
73:14 - okay so if if that's the case
73:17 - we just need to update the value of the
73:21 - mini variable okay so what we are doing
73:24 - uh doing over is
73:26 - array at I so let me give an example if
73:29 - if it is the case that uh address
73:32 - trading for the first time so let's
73:35 - suppose this is the it's array and added
73:39 - index that is zeroth index is 5 so this
73:42 - is the element we are assigned it to the
73:45 - means value yes so let's suppose means
73:47 - the mean value is 5 and if condition we
73:51 - are checking added I
73:53 - that is 5 is less than 5 so this will be
73:56 - evaluatory as false so Loop breaks and
74:00 - will come out of the loop and uh for the
74:03 - second time I is value is 1.
74:06 - so array at I means array at one edit
74:10 - one is six is six less than five
74:15 - no this is not this is not the case we
74:18 - will again if condition is evaluated as
74:21 - false again we increment the value of I
74:24 - and again we will check uh whether array
74:27 - at 2 error to smile nine is less than
74:31 - Min equality is 5. again it will
74:35 - evaluated as false so in in our case it
74:38 - it will never evaluate it as two until
74:40 - an unless there is no number inside an
74:43 - array Which is less than five if that
74:45 - number is less than five it will just
74:46 - simply update the value of the mean to
74:48 - the minimum value that means that that
74:51 - iteration value okay uh and after this
74:55 - successful running of the for Loop we
74:58 - will just
74:59 - simply return the mean value
75:02 - you can also find the maximum value in
75:05 - the same manner you just try once
75:09 - finding I will just write in Array
75:14 - and again you can provide your own
75:18 - uh input also nope no issues five comma
75:23 - 6 comma 9 comma 10 comma 25 comma
75:29 - 4. okay and I will just call
75:36 - find minimum
75:38 - I will write
75:40 - our array voice
75:43 - and I will just
75:46 - do this entire thing inside this print
75:50 - statement so that the value that the
75:53 - function is returning that is the
75:55 - minimum number should get printed on the
75:57 - console over itself okay so if I run
76:01 - this
76:02 - uh 4 should get printed yeah four is
76:05 - getting printed on the console let me
76:07 - just uh modify one
76:11 - condition now 5 should get printed
76:16 - yeah so let me just try with the
76:21 - negative number
76:23 - let's suppose negative 9 so what do you
76:27 - think what will be related
76:30 - yeah you guys right now minus 9 is
76:33 - getting printed on the console
76:35 - so this is pretty much about finding the
76:38 - minimum number inside an array you can
76:40 - do this some modification inside this
76:43 - code to get the maximum number
76:47 - logic because by watching these kind of
76:51 - videos uh just watching the problem
76:53 - solving videos will not help you
76:55 - improving your problem solving skills
76:57 - you have to practice a lot uh transform
77:00 - the the focus portals uh problems or
77:05 - hacker rank hacker Earth there are so
77:07 - many portals are there try solving those
77:09 - questions
77:10 - and
77:11 - so that you can build a pop of solving
77:14 - logic okay so thank you for watching
77:16 - this video and I'll see you in the next
77:18 - one
77:22 - hello and welcome back to the new video
77:23 - of the Java tutorial Series so today in
77:26 - this video this is for me another
77:27 - problem of array so that it that is the
77:32 - finding the second maximum value inside
77:34 - an array so in our last video we have
77:37 - covered uh finding the minimum or
77:39 - maximum value inside an array so in this
77:41 - video we'll be covering another question
77:43 - which is asked many times uh during the
77:46 - interperson that is finding the second
77:48 - maximum value inside array array okay so
77:51 - let me just create one
77:54 - call a class called
77:57 - second
77:59 - X
78:01 - and I will let the question
78:04 - so what we have to do is find
78:10 - second
78:13 - Max
78:15 - value in Array
78:18 - okay so I will give you one example
78:21 - let's suppose
78:22 - hello comma 2 comma 5
78:26 - comma 9 comma seven this is very so what
78:31 - is the expected output should be so the
78:34 - highest value is 9 and now after 9 is
78:37 - value is 7 so the output of this
78:40 - area should be 7
78:43 - so this is the thing that we have to do
78:45 - so for this we will write one function
78:49 - and that function will be returning the
78:52 - second maximum number inside an array so
78:55 - the return type should be of type int so
78:58 - so let me just create one public math
79:01 - static method of type return type end
79:04 - and I will name it as
79:07 - find
79:10 - second
79:12 - Max you can also try finding the second
79:16 - minimum number of from this array so try
79:19 - solving it
79:21 - you just have to say simply
79:24 - change some conditions so that you can
79:26 - get this minimum number which is second
79:29 - minimum number
79:30 - from then array okay so here I need one
79:36 - variable to
79:39 - take the track of
79:42 - the largest element inside that Arrow
79:45 - okay so integer
79:47 - Dot
79:50 - mean value okay so don't worry uh you
79:54 - will be asking what is that this mean
79:56 - when you represent okay so here you can
79:58 - see if you hover over here uh Java has
80:01 - some predefined values inside the
80:05 - language and these are these are nothing
80:07 - but the constant okay so which are
80:09 - defined by the Java itself if you write
80:11 - a teacher dot mean value some value is
80:13 - assigned to it that is minus two one
80:17 - four seven four eight three six four
80:19 - four eight so this is the values
80:21 - assigned by the Java you can use it
80:23 - inside your code uh you can also write
80:25 - Max will do because other constants are
80:27 - also defined inside the Java so
80:30 - if you want some
80:33 - overview of this you can just go over
80:36 - here and write
80:39 - so Java
80:42 - constants
80:45 - and if you go over here you can find
80:48 - this article which gives gives you
80:51 - pretty much idea about the Java
80:53 - constants okay and now moving to our
80:57 - question
80:58 - uh I need again one
81:02 - one more counter variable
81:04 - which takes not the counter variable a
81:07 - variable which clear tracks the value of
81:11 - the second largest element so
81:15 - inside the array
81:17 - so integer Dot mean value
81:21 - and now one I will require one for Loop
81:25 - which will it trade through entire array
81:29 - again though
81:31 - lensity
81:33 - ARR dot net
81:36 - spend will be doing I plus plus inside
81:39 - this I will write one if condition that
81:42 - is array of I
81:45 - if
81:46 - it has Max
81:50 - then I will just simply write second Max
81:53 - assign the second max value as Max value
81:57 - okay and I will just simply update the
82:00 - maxed value as
82:02 - air out of I don't worry we'll do don't
82:07 - try and test
82:09 - to check what is going on inside this
82:16 - code Okay so
82:18 - don't worry be with me uh RFI is less
82:22 - than
82:23 - second Max
82:25 - and will require one more
82:28 - and so I hope you remember this for this
82:33 - ad and what is all and means both the
82:36 - condition should be evaluated as true
82:38 - until an endless both conditions are
82:41 - evaluated as true Loop uh the program
82:45 - controls will not enter inside this LC
82:48 - flow one once when all these both the
82:52 - conditions are evaluated as to the then
82:54 - and then only the program control the
82:57 - execution flow of that code should enter
82:59 - the inside this way else if Loop okay so
83:02 - edit
83:04 - hi
83:06 - is not equals to the
83:08 - Max
83:10 - so what if that's the case inside this
83:14 - we will be doing
83:16 - second Max is equals to
83:19 - ARR of
83:23 - okay
83:24 - so this is the thing that we have to do
83:28 - inside this for Loop and after after
83:30 - execution of the follow-up we will just
83:32 - click it up the
83:34 - variable second Max okay and now inside
83:37 - our
83:39 - main main method we will just create one
83:43 - new array
83:47 - and we will pass those values as we have
83:51 - taken inside the example
83:53 - like comma 9 comma seven
83:56 - okay and now I will call
84:01 - that method that is
84:04 - fine second lesson pass our array okay
84:07 - so first let me run this
84:11 - and check whether we are getting the
84:13 - correct or
84:14 - yeah seven is getting minted on the
84:16 - console which is the second maximum
84:18 - number inside the direct and let me once
84:21 - check by changing some values
84:24 - as eight now this time it should be
84:27 - print on console
84:30 - yeah it is getting better on the console
84:33 - so wait let me just put one debug
84:37 - pointer over here
84:39 - and try to debug this code
84:44 - so that you guys can understand this
84:48 - easily okay
84:53 - okay so let's
84:56 - now
84:58 - when the program with execution at line
85:00 - number 23 uh this array so here you can
85:04 - see one two five nine seven eight is
85:06 - passed to this fine method
85:09 - okay
85:10 - the exam of the program execution flow
85:14 - comes to this method called okay and now
85:18 - uh so here you can see uh Max has the
85:21 - value assigned as this value we have see
85:24 - the predefined window which is assigned
85:27 - by the Java to this mean value constant
85:29 - okay so second mind second Max is also
85:32 - assigned that value
85:34 - so for the first iteration is value is 0
85:36 - here you can see and
85:39 - if when that if condition is checked the
85:42 - max value is this and is value is uh
85:45 - zero here you can see and let's go ahead
85:48 - okay so if for the first time so array
85:52 - of I is all obviously greater than Max
85:56 - because this is the value
85:59 - that we have assigned minimum value okay
86:01 - so next
86:03 - a second Max has assigned the value this
86:07 - okay
86:08 - now again we'll check where I is equals
86:12 - to 1 here you can see I becomes 1. and
86:16 - now this time uh we'll check array at 1
86:19 - errat 1 is 2 whether 2 is greater than a
86:24 - max value that is one
86:27 - yeah obviously we will get inside this
86:30 - Loop
86:31 - we'll update the second max value as 1
86:34 - which is the previous version we'll
86:35 - update the max values as 2 here you can
86:39 - see Max value is updated as to Instagram
86:41 - X will be updated as what
86:44 - okay we'll come here we will check this
86:47 - uh and again we will check we will come
86:51 - here we will assign the second max value
86:53 - as 2 and I will update the second uh max
86:56 - value as 5 because
86:58 - till now the maximum value is 5 inside
87:02 - the error here you can see we have
87:03 - updated the max value S5 and second Max
87:05 - will do X2 and again we will run this
87:08 - Loop for I is equal to 3 so what is the
87:12 - element as I is equal to 3 0 1 2 3 0 1 2
87:17 - 3 9 whether the nine is
87:20 - and greater than 5 because it is will
87:23 - come inside this Loop we will assign the
87:25 - value of second Max as 5 and we'll
87:27 - update the max value as 9 so after a
87:30 - successful completion of the I value is
87:32 - three uh our max value is 9 and second
87:35 - max value is five okay so for now I is
87:38 - equal to 4 I is equal to 4 is 0 1 2 3 4
87:43 - 7 7 is uh greater than nine no
87:48 - we'll
87:50 - break that is condition will come inside
87:53 - the lcf condition and now inside this
87:56 - Asif condition
87:57 - uh once we check uh this is condition
88:00 - will be evaluated as 2 and next value is
88:04 - 9 and now we'll update the second max
88:07 - value as seven okay seven itself okay
88:12 - now again we will run this Loop we will
88:15 - do these steps and and at last we will
88:19 - get 8 as the second
88:22 - largest number infected array which is
88:25 - true here you can see one two five nine
88:28 - seven eight eight is the second largest
88:30 - element inside the diary uh okay so
88:33 - which is return to this
88:36 - return statement over here and after
88:39 - that return statement we will come here
88:42 - at line number 23 where we have left to
88:44 - that program is called
88:46 - and here we can print that number on the
88:51 - console and exam x uh exams
88:55 - process successfully and it is completed
88:58 - on the console okay
89:00 - so this is how it this program works I
89:04 - hope you got this question
89:06 - try solving and finding the second
89:09 - minimum number inside that uh array okay
89:12 - so for this for this video this is
89:15 - pretty much thank you for watching this
89:17 - video
89:21 - hello and welcome back to the new video
89:23 - of the Java tutorial Series so today
89:26 - again we will be solving uh one another
89:29 - question uh which is frequently Asked
89:32 - instead of Internet processes
89:34 - and the question is how to move zeros to
89:38 - the end of the array okay uh so let me
89:41 - just create one new Java class with Java
89:45 - class
89:47 - and I will call it as move
89:52 - zeros
89:54 - okay so let me just comment it out our
89:57 - question
90:00 - move
90:03 - zeros
90:05 - today
90:07 - end of the
90:09 - array
90:10 - so this is our question so it's suppose
90:13 - we are given arrays six
90:16 - comma 5 comma 0 comma eight
90:20 - so I think
90:22 - result should result an added should
90:25 - look like it's
90:26 - six
90:27 - comma 5 comma eight
90:32 - comma 0 so this is the horizontal we
90:36 - have shifted all the zeros which are
90:39 - there inside this uh array version array
90:42 - to the end of the array okay so this is
90:44 - pretty much we have to do and so since
90:48 - we are doing
90:49 - positive operation inside that array
90:52 - itself I don't think so we have to
90:54 - return any things
90:55 - uh after that function call so I will
90:59 - for timing I will call it as static
91:02 - wired but sorry
91:05 - void
91:08 - I will name this method as
91:10 - move zeros
91:14 - and I will pass
91:16 - array
91:19 - and
91:21 - one
91:23 - integer
91:24 - okay so inside this I will
91:28 - assign it as intj is equal to 0 and I
91:32 - will go call it a forward run run for
91:37 - Loop so our for Loop will run a form I
91:40 - is equal to 0 to
91:42 - I tell
91:44 - n n is a
91:48 - side of that which is possible from the
91:51 - method call okay and now inside this I
91:56 - will check forward if condition if my
91:59 - added height is
92:01 - not equals to zero
92:04 - and
92:06 - and condition should be there which
92:09 - states that both the condition should be
92:11 - evaluated as two and then and then only
92:14 - we will get inside this if condition
92:17 - okay and add it
92:21 - J
92:23 - equal to equal zero
92:29 - and inside this if condition we will
92:32 - simply
92:33 - write one temp variable which has value
92:37 - OS and verify and what we are doing here
92:41 - is just swapping those two numbers okay
92:44 - if we find 0 at that in particular index
92:48 - we will strap that value with the value
92:52 - which is at the
92:54 - end of that array okay
92:56 - so we'll assign area
92:59 - is value
93:02 - to
93:04 - area of Json that's the last value and
93:08 - after that we will just simply
93:10 - assign energy is going to the test value
93:14 - okay so here we are doing swapping and
93:18 - again we will check on if condition if
93:21 - array at
93:23 - J
93:25 - is not equal to 0.
93:28 - if that is the case
93:30 - we'll just simply
93:32 - increment the value of J over here okay
93:35 - so I think this is a pretty much true
93:37 - that we have to insert this method uh
93:41 - let me just call my main method and I
93:43 - will write in
93:46 - array
93:48 - and we'll pass this same array that we
93:51 - have taken example six comma 5 comma
93:55 - zero comma eight
94:00 - okay and now from here
94:04 - we will write the note
94:07 - since our method is returning nothing
94:12 - what we can do is we can call that
94:16 - method and after calling that method we
94:19 - will just simply print that array okay
94:21 - because we are doing modification inside
94:23 - the same array that's why we can print
94:25 - the direct after the
94:28 - method call okay
94:32 - okay well I'm getting the error oh okay
94:36 - so I have to write the N value also n
94:39 - value is 4.
94:42 - okay and now if I just
94:47 - wait wait not like this I have to write
94:51 - down for Loop to it right over that
94:53 - array
94:55 - why is there
94:57 - I is less than
95:00 - error lock length
95:02 - and each time will be doing I plus plus
95:09 - okay
95:10 - and inside this for Loop just simply
95:13 - paint
95:14 - arrayad um
95:16 - space
95:19 - and not Ln because we want the array
95:23 - should be printed in the one line itself
95:26 - okay and now if I run this
95:29 - code
95:31 - the expected output should be six five
95:33 - eight zero yeah six five eight zero is
95:35 - getting printed on the console uh let me
95:37 - just modify and trying to give some more
95:40 - zeros inside this code okay
95:43 - uh zero six comma
95:47 - 0 comma five
95:50 - okay so let me run this
95:53 - so all those three zero should print uh
95:57 - shifted on the on the right hand side of
96:01 - this okay
96:02 - now again let me try to give
96:08 - some more input to this code
96:13 - okay and now if I run this
96:18 - zero should be shifted
96:22 - K so we guys we have one issue
96:27 - our zeros are not getting shifted
96:31 - okay so let me just
96:34 - try to figure out what I have
96:38 - done mistake over here
96:42 - and just develop this code
96:46 - and try to solve that error let that
96:49 - error
96:53 - okay wait wait wait wait
96:56 - let me just check
97:02 - I'll check with this
97:06 - code
97:12 - okay so I think
97:16 - this might be the error
97:20 - instead of hard code values I will just
97:23 - write array dot length
97:24 - I don't think so that is the error but
97:27 - little check
97:30 - if it is yeah
97:33 - that's the error inside our code
97:37 - error.net that we have to pass
97:40 - now you can see all the zeros are
97:42 - shifted at the end of the array and all
97:44 - the integer are first first comes
97:47 - integer and all those zeros integers
97:49 - have come after that okay so this is a
97:52 - pretty much about this question you can
97:55 - try by your own try solving it and this
97:59 - will improve your logic building skills
98:01 - also okay so I will see you in the next
98:04 - one thank you
98:07 - hello and welcome back to the new video
98:09 - of the Java tutorial Series so till now
98:11 - we have covered a lot of questions using
98:14 - uh arrays okay and now is this is the
98:18 - last question that we are doing uh on
98:20 - array so after this we will be starting
98:23 - our New Concept that is strings in Java
98:26 - so string is has some watched Concept in
98:30 - Java we'll see that in our next videos
98:33 - or for this video
98:34 - uh we are covering one question which is
98:37 - frequently Asked in Java how to resize
98:39 - and edit okay so we want to resize an
98:43 - array for this I will just create a new
98:46 - Java class resize array
98:50 - and inside this Java class uh first of
98:53 - all write a question that we want to go
98:56 - home that is
98:58 - how to
99:01 - resize the
99:03 - edit
99:04 - now let's suppose we have added one to
99:08 - two three four five and we want to and
99:11 - now till now the RSI is of one two three
99:15 - four five contain five elements
99:18 - elements and now we want to resize this
99:22 - array as
99:23 - 10 uh array array which is holding uh 10
99:28 - elements okay so we want to decide the
99:30 - array size as 10 elements okay
99:36 - okay
99:38 - so this is our goal uh that we have to
99:41 - achieve
99:44 - elements
99:47 - yeah it's okay so uh
99:50 - first of all
99:52 - I will write one function so achieve
99:54 - this thing okay and I guess we have to
99:58 - just resize the array so we are not
100:01 - returning anything so for time being I
100:04 - will just write public static word exit
100:08 - and temperature because function doesn't
100:09 - return anything I guess for now and
100:13 - resize is the function name and it will
100:16 - accept one uh two parameters that is one
100:19 - array that we want to resize and the new
100:27 - capacity of that array
100:29 - capacity of that array okay
100:33 - uh so okay and now uh what I will do is
100:38 - I will create one new uh where
100:41 - array
100:43 - name them
100:44 - new int
100:47 - of capacity
100:50 - so what is capacity capacity is the uh
100:54 - capacity of the new array that we want
100:56 - to
100:57 - create okay and now I will create one oh
101:00 - wait do it and now I will create one for
101:02 - Loop and in this for Loop we will run
101:06 - till I is equal to 0 and I is less than
101:11 - our error Dot length and each time we
101:15 - will increment the value of I by 1 I
101:18 - plus plus all right and inside this I
101:22 - will just simply assign uh 10 pad height
101:26 - index value
101:29 - to array at index
101:32 - right so we are just assigning the
101:36 - values of let's suppose for the first
101:39 - time where the is value is 0 we are
101:42 - simply assigning the array at zeros
101:43 - position value to the 10.0 position all
101:48 - right right so this fall group will run
101:52 - until the size home at ARR array and
101:57 - after that it will break the for Loop
102:00 - and after that we just simply assign the
102:04 - value of ARR
102:07 - to 10. yeah now instead of pointing that
102:11 - original array ARR now it is pointing to
102:14 - the new array temp all right and now if
102:18 - we write the main function and here I
102:21 - will just simply create one new array
102:23 - named ARR and I will assign those values
102:27 - uh let me give the values
102:30 - foreign
102:56 - gives five and into 2 is 10. so that's
102:59 - the
103:01 - thing that we want to achieve
103:04 - I'll write and after that I will just
103:08 - simply print my entire array
103:12 - I I is equal to 0 I left length
103:17 - each time I'll be doing I plus plus I
103:20 - will simply
103:23 - print
103:25 - array at I
103:28 - plus one space
103:31 - all right so what we have done quick
103:33 - recap where you have created one
103:35 - function name as resize and which is
103:37 - accepted to parameters one is array and
103:40 - one is capacity uh which is a new
103:42 - capacity of the new array that we are
103:44 - going to make okay and so here we are
103:47 - making a new array of capacity that is
103:51 - given by the user as the function and
103:54 - after that we have created one for Loop
103:55 - where we are simply assigning the values
103:59 - of our original array to the new array
104:02 - and after that we will just simply
104:05 - assigning the value of the uh value of
104:07 - the array to the depth that is the new
104:10 - newly created array okay and here we
104:13 - have just calling that function and
104:16 - after that using this for Loop we are
104:18 - just printing the entire new array okay
104:21 - so let me run this
104:24 - okay
104:26 - it means yeah so here you can see uh one
104:30 - two three four five is also printing
104:31 - over here and one thing we can do is
104:34 - we're just simply print the ARR dot net
104:41 - this will also give us one idea what
104:44 - inside living happen whether the array
104:47 - science is increased or not okay
104:51 - between
104:56 - all right here you can see the area side
104:59 - is the five you can see over here all
105:03 - right this is how uh you can resize the
105:06 - array in Java so thank you guys for
105:08 - watching this video and I'll see you in
105:10 - the next one
105:14 - hello and welcome back to the new video
105:16 - of the Java tutorial Series so till now
105:19 - we have covered arrays we have done a
105:23 - lot of questions on arrays we have
105:25 - practiced some of the questions which
105:27 - are frequently asked during the
105:29 - interview process and I guess this is
105:30 - pretty much uh idea or the foundation
105:33 - you have you want to learn arrays and
105:36 - what you can do is uh just pause at this
105:40 - moment uh just pause this series uh for
105:43 - some one to two days and go and practice
105:46 - on a practice or more and more questions
105:48 - on hacker rank or Geeks for weeks or
105:52 - whatever code platform you prefer lead
105:54 - code is also there and try solving those
105:56 - uh questions using the array tag and you
106:02 - can also set the difficulties as easy
106:03 - medium high or difficult whatever you
106:06 - want but at least try this will improve
106:09 - your logic building skills okay so if
106:12 - you have done that part so you can
106:14 - continue this way and in this video we
106:17 - will be covering uh strings in Java okay
106:19 - so let me just create one new Java class
106:23 - image string
106:26 - string
106:27 - let me just call it as string Java
106:31 - string so
106:33 - okay and uh we'll just simply like the
106:36 - main method okay now it's okay so what
106:39 - is string in Java in Java string is
106:41 - basically an object that represents a
106:43 - sequence of character values and array
106:46 - of characters Works same as its
106:48 - JavaScript
106:52 - you just keep attention over here let me
106:56 - just give you an example if I create one
106:59 - uh array of type characters and let me
107:03 - name it as CH and I will just write over
107:06 - here and I will assign the values to
107:10 - that array as random a
107:14 - comma B
107:16 - C
107:18 - comma D wait mistake
107:24 - C comma
107:25 - D now it's okay so if I create this
107:29 - array and instead of this I will just
107:31 - type its string s
107:34 - is equals to
107:36 - new string and I will pass it as ch
107:39 - uh so here what I have done is I have
107:43 - created an array of type characters and
107:46 - uh and I've stored those characters a b
107:48 - c d inside that array and I have passed
107:51 - this array to the string s okay so at
107:55 - line number four what it that what it
107:58 - does as it will get that a b c d
108:01 - character as a one single string and it
108:04 - will treat it as a b c
108:07 - now this is get stored inside the
108:08 - Library okay so it is it is as same as
108:12 - uh this is another approach I am telling
108:15 - you simply go and write string s is
108:17 - equal to and simply assign a string a b
108:20 - c d so instead of writing these two
108:23 - lines you can you can still achieve the
108:26 - same output ABCD as here so I'm getting
108:29 - here
108:31 - yeah you can achieve this is also okay
108:34 - and now a Java string class so string
108:38 - one thing you remember for other
108:41 - programming languages like C plus plus
108:43 - we write string as a s s small or in
108:47 - Java you write the string with starting
108:50 - s with capitalize and you as as of now
108:53 - you should know that everything in Java
108:56 - you write with capital letter starts
108:58 - with capital letter is a class in Java
108:59 - so Java provides so string is a class in
109:03 - Java here you can see the implementation
109:04 - path if you hover over this icon and
109:07 - public final class string which is
109:10 - implementing this this many classes
109:14 - now okay so you can go through this
109:17 - official documentation of java to see
109:20 - how the strings Works in Java so Java
109:23 - stream class forwards also a lot of
109:25 - methods to perform operation on the
109:27 - string such as compare concat equals
109:29 - plate length replace compared to in in
109:33 - turn substring we will be covering some
109:35 - of the uh frequently used functions in
109:38 - string you know upcoming videos so for
109:41 - still till now you just remember string
109:44 - is a class in Java which is which has
109:46 - some different methods which has
109:49 - different methods to implement it okay
109:52 - and now
109:54 - we just
109:56 - go through this concept of string okay
110:00 - now here what is how to create a string
110:03 - object so
110:05 - so now you have understood what is
110:07 - string so how to create a string object
110:09 - let's see so there are two ways uh first
110:12 - one way is by
110:17 - string
110:20 - literal literal and one more ways
110:24 - by using
110:27 - by
110:29 - new
110:31 - keyword okay so we'll discuss now this
110:35 - this these two points okay how to create
110:37 - object Orchestra okay so by string
110:40 - material is created by using double
110:43 - quotes for example for example let me
110:46 - just write string
110:48 - S2 S2 is equals to
110:52 - anything string
110:53 - welcome
110:58 - welcome to the series
111:03 - so this is the one way by which you can
111:07 - create a string which this is the way of
111:10 - buying string literal okay and now by
111:13 - using the new keyword you can also
111:16 - create this string so how we can create
111:19 - let me just create Give an example
111:21 - string
111:23 - on this time SC is equals to we just you
111:26 - just have to write new string and you
111:29 - just pass the same uh string here that
111:34 - you have written or anything that you
111:36 - want to assign uh value to that string
111:39 - variable over there okay so this is this
111:43 - is the way two way by which you can
111:45 - create the strings in Java okay so One
111:50 - More Concept is there now
111:52 - one thing one thing you tell me what you
111:57 - can
111:57 - interpret just pause the video and think
112:01 - about it string S4
112:04 - and I will write it as
112:06 - welcome
112:07 - okay
112:09 - and I will create one more stream by the
112:12 - name of S5
112:14 - and I will write
112:19 - the same string exactly the stream
112:21 - string where the W is capitalized and
112:24 - all the letters are small small case
112:27 - okay so what do you think here the Java
112:31 - memory memory memory allocation will
112:33 - allocate the S4 and S5 the Sim different
112:37 - memory instances or not
112:39 - so in this case in Java whenever we
112:42 - create S4 and S5 which has the same
112:46 - exactly value of strings it doesn't
112:50 - create a new instance what in what
112:53 - exactly the Java do is you can
112:55 - understand by this example okay so here
112:58 - you can see S1 and S2 has the same value
113:00 - of welcome so Java has a string constant
113:05 - pool where inside the hip memory uh this
113:09 - pull is there where Java stores all
113:11 - these values of the strings and whenever
113:13 - you create a new string it it will check
113:17 - through entire string constant pool if
113:20 - there is a string present which has the
113:22 - same value that you have assigned
113:24 - previously it will just point to that
113:26 - variable to this uh string in the string
113:30 - pull which is inside the hip memory okay
113:33 - so this is one thing that I want to tell
113:35 - you
113:36 - and
113:38 - there are several methods are also there
113:42 - which is there inside the string class
113:46 - let me just
113:47 - give you one example okay
113:51 - let me just give you an example
113:55 - what I can do is okay
113:58 - so look at it oh I will just come here
114:02 - and I will create
114:05 - I will just use this S4 and S5 itself
114:08 - okay let me just write one more thing
114:11 - with ADD B you can add D okay
114:14 - and now uh if I
114:18 - simply system dot outdoor println and I
114:21 - will write
114:24 - string
114:27 - S4
114:31 - length is and I will concat this string
114:35 - with the method
114:38 - S4 dot length
114:41 - so this will return
114:45 - the number of characters inside this
114:50 - string that means the string length how
114:53 - many characters are present inside that
114:55 - string okay and now if I run this
115:02 - you can see the string F4 length is
115:04 - seven y seven You Can Count Your count
115:07 - here okay one two three
115:10 - four five six and seven okay seven
115:13 - characters are there that's why 7 is a
115:16 - string so similarly you can perform this
115:18 - same method or operation on this S5 also
115:22 - I'll just have to write S5 dot length oh
115:25 - wait one mistake you just Rectify over
115:28 - here S5 it should be there because we
115:31 - are printing the length of the S5 okay
115:33 - and now if you come here string S5 is 14
115:37 - y so because you can count one two three
115:40 - four five six seven eight nine ten
115:44 - eleven twelve thirteen fourteen this
115:47 - method will also come the blank spaces
115:50 - which I've given over here after welcome
115:52 - and after at this was also treated as a
115:56 - character in Java okay
115:58 - foreign so these are some methods and
116:03 - one more method is there
116:06 - which is let me just put it over here
116:08 - and yes one more method is there two
116:13 - lower case
116:15 - so this is the method and similarly
116:17 - there is one more method is there to
116:19 - uppercase which also converts all those
116:24 - letters inside that string to the lower
116:26 - case and if you use the two uppercase it
116:29 - will also convert that all the
116:31 - characters of that string to the upper
116:34 - case okay
116:36 - so to achieve this you just simply write
116:39 - S4
116:41 - dot to lower case and now if I run this
116:46 - let me just convert it out so that you
116:49 - can see only one output on the console
116:52 - yeah you can see welcome is printed but
116:55 - additionally we have given W as a
116:58 - capital and whenever we apply that two
117:01 - lower case method on the S4 string if it
117:04 - was it was giving the output as W small
117:06 - because two lower case will convert all
117:09 - those character inside that string to
117:11 - the lower case and similarly you can
117:13 - achieve one more uh
117:15 - to uppercase
117:18 - you can see two uppercase now 4010
117:22 - thing
117:23 - yeah all the characters inside that
117:26 - string are converted to the upper case
117:29 - format okay so these are some uh methods
117:33 - which are there inside the string uh
117:36 - what we can do is you can simply come
117:38 - here
117:39 - and come here and write
117:42 - string in Java and one first page Java
117:48 - string which is of java teapot website
117:51 - you just come here we go through it
117:53 - whatever I told you is there itself you
117:56 - can come here and read it and here you
117:59 - can see there are string class methods
118:01 - you got these huge list of 28 methods
118:05 - which is implemented inside the string
118:07 - plus you can come here you can also
118:10 - check the official documentation of the
118:12 - JavaScript this Java string intern
118:14 - method
118:16 - so you can come here and also see some
118:18 - example of this try those examples look
118:22 - at those methods and
118:24 - that's all for this Java string and in
118:27 - our upcoming videos we'll be covering
118:29 - some
118:30 - again after again what we do after
118:34 - creating this Theory clearing this
118:36 - theory part we will move on to the
118:38 - coding questions we'll try solving some
118:40 - coding question inside using the
118:41 - JavaScript okay so thank you for
118:43 - watching this video
118:45 - hello and welcome back to the new video
118:47 - of the Java tutorial Series so till now
118:50 - we have covered
118:51 - uh array sense string in Java so from
118:56 - this video onwards we are starting a
118:58 - link list in Java
119:01 - linked list is a easy and more uh my my
119:06 - favorite data structures uh okay and I
119:10 - also love you implementing any language
119:12 - in Java and you can you also love it
119:15 - hash I am sure and so let's go uh so
119:19 - single English is a data structure used
119:21 - for storing the collection of nodes
119:23 - which has the following properties okay
119:26 - so till now we have we have seen arrays
119:28 - okay so let me show you one thing uh
119:31 - here you can see uh so this is this is
119:35 - one
119:37 - I hope you guys
119:39 - can understand by this so till now uh
119:43 - you have seen one array like this okay
119:45 - array so this is the array which has a
119:49 - elements one one two three four
119:53 - three in three six six elements which it
119:55 - is storing and now what linked list does
120:00 - is linked list does exactly the same way
120:03 - it stores the data but in the format of
120:07 - node nodes okay so these nodes have some
120:10 - properties okay so let me just uh give
120:13 - you an example of the node itself over
120:15 - here okay so
120:17 - here you can see so in Java
120:22 - linked list this is the No One node okay
120:25 - so let me just write one note over here
120:27 - this is one
120:30 - okay so this is one node which has uh
120:33 - two parts one is data part and one is
120:38 - next part
120:41 - so these this is simply represents one
120:45 - node in Java okay and which is pointing
120:50 - okay so this is
120:53 - n and which is pointing to
120:56 - none
120:59 - okay so this this entire thing in its
121:03 - one node in Java it has some character
121:06 - six okay one properties it contains
121:08 - sequence of the nodes okay in the single
121:11 - linked list you can see these men these
121:15 - multiple nodes are connected in an
121:17 - in a chain okay and these are connected
121:20 - with one one on one another okay and
121:22 - your node has data and a reference to
121:25 - the next node in a list okay so it has
121:28 - two or two section one is data section
121:29 - and the next section data section will
121:32 - hold the actual data or the value with
121:36 - that node going to hold and next in the
121:39 - next part it it contains the address of
121:42 - the next node that is it is pointing
121:45 - okay so let's suppose uh like this we
121:48 - have multiple nodes okay let me just
121:51 - give you an example uh let me just
121:55 - get it over here and for example uh
121:59 - these are the two things okay it's
122:00 - derive the two nodes in a two chain two
122:03 - nodes okay one node and here in the next
122:06 - part it is has the address of these
122:09 - nodes this node okay so this node and
122:12 - this node is connected using the next
122:15 - part here the address which is stored
122:18 - here okay
122:19 - now the first node is the head node uh
122:23 - always remember the first node of the
122:25 - linked list is called as head let me
122:28 - just write it over head and the last
122:31 - node it's of the
122:33 - of the link list it's always pointing to
122:37 - the null so if if you consider these
122:39 - type of nodes let's suppose they are uh
122:42 - five and the elements in the five nodes
122:45 - in the link list and after the fifth
122:48 - node fifth nodes next should point to
122:51 - the null which represents that this will
122:54 - inclusion ends here and
122:58 - in some of the reference books you will
123:00 - also find as the last element the last
123:04 - element or the last node of the linked
123:06 - list is called as tail okay so the first
123:10 - node is called as head last node is
123:12 - called as state link list okay so in
123:15 - Java
123:16 - or in general there are three types of
123:19 - Link list okay one is simply
123:22 - link list
123:25 - second one is
123:27 - W linked list
123:30 - and third one is
123:33 - circular
123:35 - link list
123:40 - in detail so starting with the single
123:43 - English in this video or in this video I
123:46 - will just give you one overview of the
123:48 - single in English what exactly it is so
123:51 - so you understand
123:52 - the in linked list the data is stored in
123:55 - the format of node and node contains the
123:58 - two part that is data and next part data
124:00 - Parts holds the actual value and next
124:02 - box next part holds the address of the
124:05 - next node to which it is pointing so
124:08 - that it just goes in in the chain format
124:12 - and always remember first node of the
124:14 - linked list called as head and the last
124:16 - node of the link is called as tail and
124:19 - the last nodes next should point to the
124:20 - null which is represent representing
124:22 - that this in English ends there okay so
124:26 - this is the idea of the Sinclair link
124:28 - list I hope you got some overview of the
124:33 - link list how English Works in Java and
124:36 - from next video onwards we'll be
124:38 - starting all those operation like insert
124:40 - insert operation or how to print the
124:43 - linked list uh how to delete element and
124:47 - how to
124:48 - get the element or fetch the element how
124:52 - to check the whether the element is
124:54 - present inside links all these queries
124:55 - so we will solve using the linked list
124:58 - in our upcoming videos so stay tuned and
125:01 - thank you for watching this video
125:07 - hello and welcome back to the new video
125:09 - of the Java tutorial Series so in our
125:12 - previous video we have seen the
125:14 - theoretical concept of the sync readings
125:16 - list okay so now from this video onwards
125:19 - we have started starting implementing
125:21 - all those uh
125:23 - functionalities of the single English
125:25 - that that we want to know in order to
125:28 - understand the single English so first
125:31 - of all in this video we'll be covering
125:33 - how to make the list
125:37 - in this using a singly linked list okay
125:40 - so let me just uh come here and
125:44 - create a new Java class and I will just
125:47 - name it as simply
125:51 - linked
125:52 - list
125:55 - yes now oh you know it's okay so before
125:58 - that uh I hope you have watched our
126:00 - previous video where we have discussed
126:02 - the theoretical parts of the single in
126:04 - English and in that video I was told you
126:06 - that if we need one node
126:09 - to make a single linkage okay and that
126:13 - node contains the two parts one is a
126:15 - data part and one is next which
126:18 - representing which holding the address
126:21 - of the next node in the list okay so for
126:24 - that uh let me just come here come here
126:26 - and I will create one another class uh
126:30 - which is our node of the
126:33 - linked list I will name it as node s
126:36 - which is node of sync singly range list
126:39 - okay notice
126:41 - and here we will create that structure I
126:44 - hope you guys remember that structure
126:46 - let me just recall if you don't know
126:48 - what I'm telling so these uh this this
126:51 - uh this structure I am talking about the
126:54 - structure this structure we are trying
126:56 - to create inside this class
126:59 - Okay so
127:02 - this class okay so let me just come here
127:05 - and we know we have we want two parts
127:08 - one is data part I will animate as data
127:11 - and another one is next which is holding
127:14 - the address so since it's it it is
127:17 - holding the address for the next node
127:19 - the so the type of these uh variables
127:22 - should be known as and I will just write
127:24 - this variable name as next okay and now
127:28 - uh one thing whenever these node node is
127:31 - getting created we want these uh that
127:34 - values that the user want user is given
127:37 - should assign to these two variables
127:40 - okay so for that we need one Constructor
127:42 - over here and I will write one
127:44 - Constructor after node s and this
127:48 - Constructor will accept one uh parameter
127:51 - that is data which is given as input by
127:54 - the user uh like what what's the data
127:57 - that the node is going to hold okay so
128:00 - and we will assign these Broad
128:03 - data which is equal to data and these
128:06 - represent to the current distance of the
128:07 - variable and then our next should point
128:11 - to the no that is that is the simplest
128:15 - idea of the node we have taken those two
128:19 - variables and we have assigned that
128:22 - value
128:23 - and according to the node this is the
128:26 - idea that is the data part is over here
128:28 - and next part is over and this next is
128:30 - pointing to the null we can change that
128:32 - now uh when the if there are more number
128:35 - of nodes inside the English Okay so for
128:39 - now I guess this is a bit image that we
128:41 - have to do inside the node and now if I
128:44 - go inside my main class which is over
128:47 - here
128:48 - and I will just
128:50 - create one function
128:53 - to make a list okay so to create a
128:57 - single English okay and now uh since we
129:00 - are accepting your input from the user
129:02 - we need our scanner class to be imported
129:05 - uh so I will write import
129:12 - Java Dot
129:15 - util Dot
129:17 - scanner so we have imported this kind of
129:20 - class and now since we are going to make
129:23 - multiple functions I guess it is go to
129:27 - declare the scanner object uh globally
129:31 - inside the classroom okay so I will
129:34 - write public
129:37 - static
129:40 - scanner SC is equals to
129:44 - new scanner
129:47 - system.in
129:49 - okay so now we have created this and now
129:54 - I have to do one more thing
129:57 - the first node of the list is called a
129:59 - head and the last mode is called as tail
130:02 - okay so we need those two variables also
130:06 - also we like all right public static
130:10 - so these are no type right so we write
130:13 - public static of type node S one is head
130:18 - and one more is ding
130:22 - all right now I think we are good to go
130:25 - to write the function so I will just
130:27 - comment it out as
130:28 - function
130:31 - to make the
130:36 - singly
130:38 - linked list
130:43 - okay
130:44 - so inside this I will write my
130:48 - function public static
130:54 - and node as
130:56 - and I will name my
130:58 - engine is
131:00 - make list
131:03 - okay okay
131:04 - so here you can see uh public static uh
131:09 - you know node s is the return type
131:11 - because since this is this this function
131:13 - is making our list we want we have to
131:16 - return the head of the list because uh
131:19 - to access one single linked list or
131:21 - whatever the Ws circular English we need
131:25 - the head
131:27 - head of the list that is the first node
131:30 - of the list without knowing the first
131:32 - node of the list we cannot Traverse the
131:34 - whole list or we just lost here if in
131:37 - case if you if you if you not assign
131:40 - head uh as the first node of the list
131:43 - and you assign the T this second node as
131:47 - ahead of the list then we will never
131:50 - have the track of the first node of the
131:51 - list so that's why it's important to you
131:54 - to assign the head of the list and
131:57 - return the head while you're making the
131:59 - list whatever it is it if it is single
132:02 - in W or circular in English Okay so
132:04 - that's why we have written the return
132:06 - type as known as and we have uh name our
132:10 - function name as make list and we are
132:12 - not passing anything to this function
132:14 - because it's just creating on list okay
132:17 - now uh since
132:20 - okay so assume on conditions we are
132:24 - making one list so initially what do you
132:27 - think head and tail are null right
132:30 - because
132:32 - list is empty
132:34 - till now okay deal should also point to
132:38 - no so with that part we have done and
132:41 - you will just simply write one print
132:44 - statement that is enter
132:47 - the
132:48 - data in the
132:52 - list
132:54 - okay so here we are asking the data from
132:59 - the user okay so in data is equal to SC
133:02 - Dot
133:04 - next
133:06 - int
133:12 - so it's not the case that this function
133:15 - call will uh just once okay so we are
133:19 - calling that function we are making the
133:21 - list and we are making uh multiple nodes
133:24 - inside the list okay so for that purpose
133:26 - we will need one Loop which is iterating
133:29 - over each time whenever uh whenever and
133:33 - how much you denotes you want exactly
133:36 - you know in your list all right so for
133:39 - that we will need one while loop and
133:41 - this right Loop will run until and
133:43 - unless the data
133:45 - value is -1 that means whenever you give
133:49 - the data value as minus 1 this root will
133:52 - break which indicates that you are done
133:54 - with inserting the nodes inside the list
133:57 - and you want to
133:58 - close the list and get out of this okay
134:01 - now if
134:04 - and now here after coming inside this
134:07 - Loop for the first time we just have to
134:09 - create the node the actual node of this
134:12 - linkage okay so we'll create the object
134:15 - object of the
134:17 - node as
134:18 - and I will just name it as new node
134:23 - s which is equals to the new node and
134:27 - according to that Constructor we have to
134:30 - pass one data okay so that data we have
134:33 - taken from the user over here that we
134:36 - can simply pass it over here
134:38 - now at this point line number 14 we have
134:42 - our list is our first node is got
134:44 - created now we have to check if one if
134:48 - condition should be there if our head
134:51 - equals to equals to null
134:59 - sorry guys wait a minute
135:01 - yeah so if our head is equal to equal
135:04 - signal that represents that there is
135:06 - nothing inside the list no node is there
135:10 - inside the list and this is the first
135:12 - node that we are trying to insert our
135:15 - list okay head is equals to null so in
135:18 - that case we will just update the head
135:19 - value to the new node
135:23 - mu node s and we update our Tails valued
135:27 - also to the new node s
135:30 - okay so this if condition will executed
135:34 - when there is no
135:37 - node inside the linked list that is the
135:40 - first node that we are trying to insert
135:42 - the list okay and now in the else part
135:45 - we will simply write tail
135:49 - dot next
135:51 - equals to new node s
135:54 - and after that we will write tail
135:58 - is equal to new node s okay so in this
136:03 - else part
136:07 - so now in this else part whenever when
136:10 - this else part get run where if if
136:13 - condition is not executed and if
136:15 - condition is not con executed when there
136:17 - is a no present inside the list and then
136:20 - in that case we just have to update our
136:22 - tail because head is not going to update
136:25 - head is also already assigned as the
136:27 - first node of the list over here you can
136:29 - see head is assigned to the first node
136:31 - we just have to
136:33 - uh point the tail to the next node okay
136:36 - so if so that is achieved in that else
136:39 - block tail dot next is equal to new node
136:42 - dot next that means tail is currently
136:45 - pointing over a over here that is the
136:47 - first node of the list and this next
136:49 - part
136:50 - 10's next part means this part this part
136:53 - we are trying to
136:55 - assign the next value to this this node
136:58 - value okay so in over here we have
137:02 - simply assigned that value to this and
137:05 - they are simply as uh assigning the
137:08 - Tails value to the new node value okay
137:10 - so our now our tail should point to this
137:13 - new node that is inserted inside the
137:16 - English and how we are connecting to do
137:18 - those nodes that is in next part in the
137:22 - next part we are showing the address of
137:24 - this new node over here and we are
137:26 - simply assigning the Tails value to the
137:28 - new node value okay so this is the part
137:32 - that you have to do and after this
137:36 - okay so whenever these are done with the
137:39 - making the list user will enter the
137:41 - minus one in in the console as the data
137:44 - value and loop will terminated and after
137:47 - that we will simply write return
137:51 - head
137:52 - okay so we'll simply return head
137:55 - of the linked list
137:57 - okay and now
138:01 - if I write
138:05 - my main function and
138:07 - to call that make list functions and I
138:11 - need to keep the track of the head okay
138:13 - so ahead I will add
138:16 - s is equal to head is equal to Middle
138:20 - East so it says this function is a
138:23 - function is returning the head we will
138:25 - store that head inside this local header
138:27 - variable and after this line our
138:32 - function called got called and our list
138:38 - is
138:39 - completed and our list is make okay
138:42 - build okay now I hope you guys
138:45 - understand how to make a single English
138:47 - in our upcoming videos we will see some
138:50 - more functionalities of the link list so
138:52 - thank you for watching this video
138:56 - hello and welcome back to the new video
138:58 - of the Java tutorial Series so till now
139:01 - uh we have covered uh how to make a
139:04 - linked list
139:05 - that is a single English and so for this
139:09 - video
139:10 - we'll be seeing how to print a linked
139:13 - list and how to find a length of the
139:16 - link list okay so for the printing
139:18 - purpose let me just go into my page and
139:20 - let me explain you the theoretical part
139:23 - of this
139:25 - link list okay how to print the
139:28 - nucleation okay so for the printing
139:30 - purposes uh first of all we need the
139:33 - head of the link list so from here you
139:36 - you will get to know what is the
139:38 - importance of uh getting the head if you
139:40 - get the right head of the linked list
139:42 - you you can find or even perform all the
139:45 - operation on the English okay so I'm
139:47 - assuming you have watched the previous
139:49 - video where we have make the link list
139:52 - and where we have discussed about the
139:54 - head part and head is basically contains
139:57 - the and which denotes the start of an
140:01 - English Okay so for the printing purpose
140:03 - we need that head so that we can start
140:05 - printing the elements from that position
140:07 - itself okay so for the head printing
140:12 - purpose we need head and we are go go on
140:15 - printing the head and head head until we
140:20 - reach at one position where head is head
140:24 - the node the node of the head which is
140:26 - currently there with which next is
140:29 - pointing to them that that means uh here
140:32 - you can see uh assume there are two
140:34 - nodes in this linkage this this one is
140:37 - head and this one is tail and how you
140:39 - can find the end of the link list they
140:43 - have to find the end end of the link
140:44 - list the it is simply nothing but the
140:47 - the net that modes next should point to
140:50 - the null whenever the node is there
140:54 - whose next is pointing to the null that
140:56 - denotes that that is the end of the
140:58 - linkage that means we have traversed all
141:01 - the link list in right starting from the
141:04 - head to the tail that is the last Road
141:06 - of the necklace okay so this so this is
141:09 - the idea behind the printing of the link
141:11 - list
141:12 - and to find the length of the linked
141:14 - list let me just first get clear this
141:19 - print list then again we'll come inside
141:21 - the paint and try to discuss the length
141:24 - in English
141:25 - so for that purpose we will write one
141:27 - one more function
141:29 - so this is a public
141:32 - static
141:35 - point
141:37 - I will name it as print list
141:42 - and since we to print the linked list we
141:47 - need the head so that's why we will
141:49 - accept one
141:52 - head of the linked list
141:54 - to this function and after that we'll
141:57 - just simply print that
142:00 - elements
142:04 - elements
142:06 - of the list are
142:10 - after that we'll run one while loop and
142:14 - this while loop will get executed until
142:17 - and unless the head is pointing to
142:23 - now
142:25 - okay when the head is pointed to null
142:27 - that means that is the end of the
142:30 - linkage no more nodes are present after
142:33 - that node okay we are pronouncing
142:36 - then till we find null okay so South
142:42 - head.data
142:45 - head dot data
142:48 - and we'll just printing space I will
142:52 - just write only print because we don't
142:55 - want our dish to be printed in the
142:56 - vertical manner okay
142:59 - here if you write head dot data that
143:03 - means head dot data means this is head
143:06 - entirely dot determine this part we are
143:09 - just simply printing the head dot data
143:11 - means the data part of that node okay so
143:14 - okay data part of the node and once we
143:17 - print that we will we just
143:20 - reassign the value of the head to the
143:22 - Head dot next that means we are moving
143:24 - next forward okay that means after after
143:28 - printing this data bar we will just
143:30 - assign the head value to the Head dot
143:32 - ahead dot next to it hold the next next
143:34 - node address okay so we'll reassign this
143:38 - head
143:39 - to this node and now the head is
143:41 - pointing to this one okay
143:43 - now likewise we will go on traversing
143:47 - the whole list and we will go on
143:49 - printing the data part of that node and
143:52 - after they at the end we caught all our
143:56 - node to get to be printed
143:59 - on the console okay
144:01 - so this is the print list function that
144:04 - we want to perform and uh in our
144:06 - previous video we have made the list
144:09 - and now we want to print the list okay
144:12 - so we'll just simply Grant column method
144:15 - print relation we will pass the head to
144:16 - this
144:17 - okay and now uh let's try to understand
144:21 - the length function of the linked list I
144:23 - like how to find the length of the
144:25 - nucleus that is how many nodes are
144:27 - present inside the link list okay so for
144:29 - that purpose to find the length again we
144:32 - need the header
144:33 - each each time we need head if you if
144:36 - you get the head you just we have
144:39 - performed all the operation okay so uh
144:42 - a length function is there we need one
144:44 - head okay so we will just simply write
144:46 - over here let me just write it over here
144:49 - we need one head
144:51 - that is a starting point of that click
144:53 - list and after that
144:56 - to count the number of the nodes in the
144:58 - link list that is between uh similar to
145:00 - The Grid list we'll just simply uh
145:03 - perform one while loop while loop
145:06 - which will iterate through all these
145:09 - nodes and it will iterate until the head
145:13 - dot next is pointing to the null that is
145:15 - the end of the link list and we will
145:17 - take one counter variable
145:20 - counter variable which will count uh the
145:25 - number of the nodes inside the linked
145:27 - list and each time we will increment
145:31 - increment the head
145:34 - 2
145:36 - here dot next
145:39 - so this is the rough idea behind the how
145:43 - length how to find the length of the
145:45 - link list so let's go and implement this
145:47 - function also inside our code base
145:51 - so I will write public static
145:55 - so this function doesn't return anything
145:57 - find length okay
146:02 - and this is also accepting
146:05 - one head of the linked list parameter
146:09 - and again I as I told you we need one
146:13 - counter variable
146:14 - which initially assigned to 0 and well
146:18 - you need one while loop which you will
146:20 - iterate through the all the nodes of the
146:22 - list and we will iterate until the head
146:25 - is
146:27 - not a bus terminal and
146:30 - once the height is equal to null that
146:31 - denotes the end of the linked list and
146:33 - if it is not a personal we just simply
146:36 - uh increment
146:38 - the counter variable uh by one and we'll
146:42 - just simply reassign the value of the
146:44 - head with the head.next
146:48 - so this is the thing that you have to do
146:51 - and after
146:52 - uh successful running or the while loop
146:55 - we just have the length of the nodes
146:58 - which are how many nodes are present
147:01 - inside the nucleus that will simply
147:02 - print out over the concept length
147:08 - of the
147:12 - this stage
147:14 - light Plus
147:17 - counter okay and after this we just
147:22 - simply come over here and call that
147:24 - length method and we'll pass that head
147:26 - to this function also okay and now uh if
147:31 - I run this score okay so it is ready to
147:34 - run
147:34 - first of all uh make list function will
147:37 - get called here here you can see enter
147:39 - the data in the list uh program
147:41 - execution comes over here at line number
147:43 - 11 so let's suppose I'm creating one
147:47 - list okay so let me just write one
147:49 - comment over here so that you guys can
147:52 - understand easily I will write one
147:54 - comment
147:55 - so we are trying to make the list like
147:57 - this one
148:00 - two
148:01 - three
148:03 - four
148:05 - five so we want to make this list okay
148:08 - so let's go and uh make this list okay
148:11 - so I've got one
148:13 - two three four five so at this point uh
148:18 - list is uh all the elements that I want
148:21 - to insert inside the list are inserted
148:23 - and now I want to get out of this Loop
148:27 - which is this Loop and how to get out
148:29 - this get out of this look we just have
148:32 - to give the data as minus one so if I
148:35 - write minus one it will get out of this
148:37 - Loop
148:38 - you can see
148:41 - we've got one plug inside our code okay
148:45 - let's try to debug this
148:49 - according to my code this should get
148:54 - out of this Loop
148:59 - this is not getting out of this blue why
149:02 - is it so which is true
149:04 - go through the code and
149:07 - check what is the problem inside this
149:11 - code
149:12 - okay wait uh
149:16 - let me just
149:18 - write one run it one more time
149:22 - stop and return I guess there are some
149:25 - issues
149:27 - okay
149:31 - is it running
149:33 - let me just read like this
149:37 - wait guys it is running
149:40 - okay so we want to enter the data
149:43 - that's one comma two comma three comma
149:48 - four comma five and after that I want to
149:50 - add one so
149:59 - so wait guys I will uh just check if I
150:02 - want this error
150:06 - okay so guys I
150:08 - after debugging this code I got there
150:11 - one thing we have done a mistake over
150:14 - here while creating the link list that
150:17 - is we are accepting the data from the
150:21 - user and we are according to that we are
150:23 - running this file book okay so once this
150:26 - file Loop Got Run we are we we just we
150:28 - have to sub we supposed to rename this
150:32 - Loop and recheck the data value but we
150:35 - are not uh getting again the input from
150:37 - the user for that purpose we have to add
150:40 - one extra line over here AC Dot
150:43 - an exchange that that means we are
150:45 - getting again the input from the user
150:47 - and that input is again used as a check
150:51 - to this while loop again we are running
150:53 - this link
150:56 - group and now if I run this Main
151:01 - I hope this will work this time and I
151:03 - will try to create one two three four
151:06 - five uh so link is an English slower I
151:10 - will write minus one
151:11 - so here you can see the elements of this
151:14 - list are one two three four five uh
151:17 - which is printed printed by this paint
151:19 - list method and the length of the list
151:22 - is five they change the five elements
151:24 - inside the list is there one two three
151:26 - four five so the little length is five
151:27 - so all working fine uh till now we have
151:30 - covered how to make the list how to
151:33 - print the list and how to retrace the
151:36 - length of the list okay so thank you
151:39 - guys for watching this video and I'll
151:40 - see you in the next one
151:44 - hello and welcome back to the new video
151:45 - of the Java tutorial Series so today uh
151:48 - we are trying to learn the how to find
151:53 - the or how to search the element inside
151:55 - this in English Okay so till now a quick
151:58 - recap uh we have done how to make the
152:02 - list how to print the list how to find
152:05 - the length of the list and now today we
152:07 - want we have we want to learn the how to
152:10 - search an element inside a simply linked
152:13 - list for that uh we'll quickly go
152:16 - through the one paint and how to how to
152:19 - check how to find the or how to search
152:22 - the element inside as in plain English
152:23 - sing mean English okay so now
152:27 - so things which are required to search
152:30 - an element so first of all we need the
152:32 - head of the list head that is that is
152:35 - clear we need the head of the list and
152:38 - we need variables to check and to store
152:44 - the place at which we found that uh
152:48 - node or found the data inside the list
152:52 - that is variables variables
152:55 - of type integer
152:58 - and then we need one while loop where we
153:01 - can travel through to our whole list and
153:05 - check whether that nodes data is equals
153:09 - to the data which is entered by the user
153:10 - or this that that is the data that is
153:13 - user wants to search okay so these are
153:15 - the things that which which are required
153:18 - to search and particular element inside
153:20 - the linked list
153:22 - and so let's go inside our IDE and try
153:26 - to record this okay
153:27 - so I will write one method public
153:31 - static
153:32 - and we are trying to search an element
153:35 - so there is no modification inside our
153:38 - list and there we are not returning
153:40 - anything so return type should be void
153:43 - and
153:45 - I will write this search
153:48 - element as our function name and this
153:52 - method should accept
153:55 - the head of the list that is the
153:58 - starting point of the list
154:00 - so at the first we will just simply
154:03 - print
154:04 - the enter
154:07 - the
154:08 - data
154:09 - that
154:11 - you want
154:13 - to search
154:15 - okay so we are assuming one input from
154:18 - the user that is the data that the user
154:21 - want to search inside this
154:23 - list
154:25 - and we will just simply write int
154:29 - element element
154:32 - SC dot extent
154:36 - okay and
154:39 - place
154:41 - which is equals to
154:43 - currently it is assigned to one
154:46 - Okay so
154:49 - okay and we will create one new node of
154:54 - temp which has the value equals to the
154:57 - header which will assign the value of
155:00 - head to the 10 and we will perform all
155:03 - this operation using that temp variable
155:05 - okay and now we have our 10 we will just
155:09 - simply
155:10 - write one Loop and we'll write until our
155:13 - temp is equals to null
155:17 - we will perform these outputs okay so
155:21 - what kind of operation that we have to
155:22 - perform you are we are checking one if
155:24 - condition if our
155:27 - element that we want to find is equals
155:30 - to equals to the current temp dot data
155:35 - if it if it is a condition that means we
155:37 - have we have found our searching element
155:40 - and which is simply write
155:43 - print element found
155:49 - element
155:53 - found at
155:57 - and we will concat it with
156:01 - Place variable
156:05 - Plus
156:10 - th
156:14 - place
156:16 - in the list
156:19 - okay uh so full stop and after this if
156:23 - if you find the element we just simply
156:26 - return we don't want to perform uh more
156:30 - operation
156:31 - and if that is not the case we didn't
156:33 - find our Loop sorry the element we'll
156:36 - just simply reassign the template due to
156:38 - the temp dot data
156:41 - or not 10. data time dot next because
156:44 - you have to move to the next element of
156:47 - the
156:48 - list and we will just
156:50 - simply
156:52 - increase the count uh count of the place
156:57 - by one okay and after performing this
157:00 - while loop if it doesn't if it doesn't
157:03 - return this return statement doesn't get
157:05 - executed that means that element it
157:07 - doesn't element is not present inside
157:09 - the inside the list and then in that
157:12 - case we will just simply print
157:14 - a limit is not presented inside the list
157:16 - element
157:18 - is not
157:21 - present inside
157:24 - the list
157:26 - okay so I guess this is the thing that
157:29 - we have to perform and okay so I hope
157:33 - you guys are watching the previous
157:35 - videos do watch them and then come then
157:38 - and then only come here because you
157:40 - don't understand anything what's going
157:42 - on and please like and share to the
157:44 - series
157:45 - and do comment out what is your favorite
157:48 - part and what is if you find any
157:51 - difficulties also comment I will be
157:53 - looking after it okay so now
157:57 - we want to search the element right so
158:01 - we have make the list
158:03 - we have print the list we have length of
158:06 - the list and now we want to search the
158:10 - element
158:11 - uh okay so I will simply call the search
158:14 - element function I will simply pass the
158:17 - head of the list to that function okay
158:19 - and now if I run this
158:26 - uh we'll take the previous example
158:28 - itself we will make the list as one two
158:31 - three four five oh you know what let me
158:35 - just give you some more examples one
158:37 - notes okay so we have the elements in
158:40 - the list of one two three four five six
158:42 - seven and the length of the list is
158:44 - seven and we want to search let's
158:47 - suppose
158:48 - 5 whether plus 5 is present inside the
158:51 - list or not okay so you can see element
158:53 - found at fifth place it's a list okay so
158:56 - first fifth place one two three four
158:59 - five fifth place is five which is
159:01 - present inside the list that is correct
159:03 - uh so again I will run this and this
159:06 - time I will give the data which is not
159:08 - present inside the list one two
159:11 - three four five six
159:15 - okay so I eliminated the star one two
159:17 - three four five six
159:19 - and now if I want to find 10 in the list
159:23 - so you can see element is not written
159:25 - inside the list okay so everything is
159:28 - fine working so this is the idea of how
159:32 - to search the element inside a link list
159:34 - I hope you bought this concept thank you
159:37 - for watching this video
159:42 - hello and welcome back to the new video
159:43 - of the Java tutorial Series so till now
159:46 - we have covered how to search the
159:48 - element how to in the length how to
159:50 - print and how to make the list so today
159:53 - in this video we will be talking about
159:54 - the how to reverse LD single linked list
159:57 - and how to find the middle node of the
160:00 - single link list okay so let's get
160:04 - started so to reverse a single request
160:07 - we
160:08 - what are what are all things that we
160:10 - have required and what is the logic how
160:12 - to reverse a string uh sorry string not
160:16 - string it's a single in English my bad
160:19 - how to reverse a single in English first
160:22 - of all we want head that uh which is
160:25 - indicating to the start of the link list
160:28 - and again we need one while loop which
160:31 - is iterating over all the elements
160:35 - of that list
160:37 - and one more two more variables of type
160:41 - node will be required which is one is
160:44 - previous which will hold hold the
160:47 - previous uh node of the list and one is
160:51 - next which will hold the next node of
160:53 - the list and of using these three
160:56 - variables of type node we will just
160:58 - perform this inverse operation of the
161:01 - string uh not answering what I'm saying
161:04 - either it's a single list my bad okay so
161:07 - now we will go and write the code for
161:12 - this reverse of the signal list
161:16 - okay I will come over here and I will
161:19 - write one more function that is public
161:22 - static of this is this uh we want to
161:26 - reverse a list after reversing a list we
161:29 - want to we want to give the new head of
161:32 - the list through which we can uh
161:34 - Traverse the new list that is the
161:37 - reverse list okay so we we need to
161:39 - return the head which is of type node so
161:43 - here we have written this and we have
161:45 - write the function name as reverse list
161:49 - then this list will accept one parameter
161:54 - which is head of the list
161:56 - and as I have told you we need three
161:59 - variables of type node s
162:02 - uh so let me just write those node s
162:06 - I will write notice of current
162:10 - so we need we need the track of current
162:13 - previous and next row current will will
162:16 - be equal to the head of the list that is
162:18 - the current uh starting point of the
162:20 - list and again we require is node as
162:24 - that is
162:25 - previous
162:27 - which is currently pointed with the null
162:30 - and one word is there that is next which
162:33 - is again pointed to the null
162:36 - okay so now we require one while look
162:40 - while loop while our current
162:43 - is not equals to
162:45 - null
162:46 - so whenever our parenting article signal
162:49 - until that we will perform this
162:52 - operation what are the what are our
162:54 - operation we will assign the next to the
162:57 - current dot next that is equal that
162:59 - means the current where node that is
163:02 - pointing it is the next node
163:04 - if it will point away so next we'll hold
163:07 - the next variable next not variable next
163:10 - node of the list and current
163:13 - Dot
163:16 - next
163:17 - is assigned to the
163:20 - previous that is previous will shift one
163:23 - one step ahead
163:25 - okay and previous is equals to
163:30 - correct
163:32 - and after that we will just simply write
163:34 - current is equal to next we will move
163:36 - forward to the list
163:39 - and after performing all these operation
163:41 - we will just simply return the previous
163:44 - because
163:45 - that is the new head of the list which
163:49 - is the reverse list okay and after this
163:52 - now we will just simply need to call
163:55 - this
163:57 - method inside our main main method
164:00 - and to call this purpose I guess we want
164:04 - to make the list we have to print the
164:06 - list I don't think so we need length of
164:08 - the list that will just
164:11 - commit it out and I will also come into
164:13 - the search
164:15 - part also and I will just write
164:18 - reverse list
164:21 - sorry guys
164:22 - will be worse
164:23 - list and I will pass head to it
164:27 - and after this now we again want to
164:29 - print the list but with the updated head
164:33 - right
164:34 - that is returned by this reverse list
164:37 - okay so I will just again call the
164:41 - these prints list method the only thing
164:44 - is that here the print list will print
164:47 - the list in the way manner that we have
164:51 - given input and here then a print list
164:54 - function will print the same list but in
164:57 - the reverse manner okay so let's just
165:00 - paste it
165:02 - whether it is running
165:04 - good
165:06 - okay so we are entering the data one two
165:09 - three four and five uh so the expected
165:12 - output should be
165:14 - 54321 okay let's see if it is there
165:19 - so elements in the list are one two
165:21 - three four five elements of the list are
165:26 - one
165:29 - wait wait wait wait we are doing
165:32 - something error in this code
165:35 - we have to use the list
165:39 - all right
165:41 - uh elements in the list are we are
165:44 - painting the list
165:46 - we are reversing the list and after that
165:49 - we are again printing tools elements of
165:51 - the list are we are we are getting only
165:52 - one over here why so we think we have
165:56 - one done one mistake inside our
165:59 - code
166:02 - let me see
166:04 - we have next will be equal to
166:07 - next question dot next equals to
166:11 - previous and previous is equals to
166:13 - current and current is equal to next and
166:16 - we are simply returning the previous
166:21 - in case say this wait guys I will just
166:24 - debug it and let you know
166:28 - okay guys I guess I have rectified the
166:31 - error I found the error that is uh look
166:35 - at here we are creating one head and we
166:38 - are making the list and the head which
166:40 - is written by this make list we are
166:42 - assigning the two heads
166:43 - okay till the next time we are printing
166:45 - the list we are again sending that
166:47 - headquarters this method so that head is
166:49 - not going to get modified over over
166:51 - inside the print method print list
166:53 - method okay but inside the reverse list
166:55 - method uh our head is getting modified
166:57 - here you can see our head is getting
166:59 - modified and our head new head is our
167:03 - head is at one okay so our list is uh
167:05 - let me just give you a clear idea over
167:08 - here you can see one
167:12 - two three four five so our head is at
167:17 - one okay so to the print list we are
167:19 - giving our head okay our head is not not
167:22 - going to change inside our reverse list
167:24 - method also okay but the reverse list is
167:27 - has its own new head here you can see it
167:30 - was returning one node okay so we have
167:34 - to retrieve that node inside our main
167:37 - method we are not doing that we are just
167:39 - simply again passing that head so that
167:41 - head is pointing to one all right so if
167:44 - you reverse the list after work one
167:46 - should be pointing to the null that is
167:48 - that is going to happen by this reverse
167:51 - list that's why uh this this error was
167:55 - there where uh reverse list is or
167:57 - printing only one inside this we just
167:59 - have to introduce one new node to catch
168:03 - the new node of the
168:05 - list
168:06 - okay so reload
168:09 - a new nudes let me write as news Okay so
168:15 - this node is old
168:18 - by this news and we'll just simply pass
168:20 - next to it uh now I guess this will work
168:24 - fine in our reversely should paint it on
168:27 - the console and okay now I will write
168:30 - one two three four and five and after
168:33 - that I will get minus one so here you
168:35 - can see one two three four five is
168:37 - getting winter which is the original
168:38 - list and after performing the reverse
168:41 - reverse list method on this same list we
168:44 - are getting five four three two one
168:45 - which is correct
168:48 - so I hope you guys have found this
168:52 - helpful so do like share and subscribe
168:55 - to the channel and I will see you in the
168:57 - next one thank you
169:01 - hello and welcome back to the new video
169:03 - of the Java tutorial Series so in our
169:05 - previous video we have talked about the
169:06 - how to reverse the list and now in this
169:09 - video we will be covering about how to
169:12 - find the middle node inside a list okay
169:15 - so let me just going go into my paint
169:17 - window
169:19 - and I will show you how we can find the
169:21 - middle load of the list okay so to find
169:23 - the middle note of the list uh since
169:26 - this is it is a link list we can we
169:28 - cannot uh perform the operation that we
169:30 - are performing inside our array to find
169:32 - the linkage that is a total elements but
169:34 - then inside the array you divided by two
169:36 - that that stuff we can do inside the
169:38 - array but but in the English uh we
169:40 - cannot do that that thing so we have to
169:42 - find another way to find the middle node
169:45 - of the list okay so to find this we will
169:47 - uh
169:49 - try to find the middle node of the
169:52 - middle node of the link list using the
169:54 - slow and fast pointer approach okay so
169:57 - what it does is exactly so we need to
170:00 - two variables of type node s and uh
170:04 - which which will call it as let let me
170:08 - call it as slow pointer and fast pointer
170:10 - we initially assign those uh as the
170:13 - heads value okay that is the starting
170:15 - starting of the list and
170:17 - we need one counter variable which is
170:20 - initially uh count as a initially
170:23 - assigned as one okay so we need one
170:25 - while loop
170:33 - what that means exactly is uh the first
170:37 - node is not uh need should not be null
170:41 - and the node which is pointing to it the
170:44 - first node is pointing to the node uh
170:46 - that node should be present and that
170:48 - should note should not be null okay so
170:50 - these two conditions that we are going
170:51 - to check inside the while is that two
170:53 - conditions
170:54 - won't satisfies this condition will
170:56 - enter inside the loop and we will simply
170:59 - change the value of the slope pointer to
171:01 - the next that means slow pointer will be
171:03 - assigned as new new value the slow
171:06 - pointer will be
171:07 - this next next next mode of the list
171:10 - okay and we will assign the first
171:12 - pointer value to the first pointer next
171:14 - dot next that is fast pointers value
171:16 - will go to the Third
171:25 - po pointer means we are moving slowly we
171:28 - are iterating the list slowly at the
171:30 - first pointer means we are iterating the
171:32 - list by one one node I had always one
171:36 - node ahead of the
171:37 - slow pointer okay and after this uh
171:40 - running of this while loop each time we
171:42 - will increment the count variable so
171:45 - that we can have the number exactly the
171:48 - position where the middle node of the
171:52 - list is present okay and after running
171:54 - up this while loop we will just simply
171:57 - print the slope pointer data because the
172:00 - slope pointer is a node which is uh
172:02 - exactly at the middle of the list and we
172:05 - will also print the count of a count
172:09 - variables value which will give us the
172:12 - exact position of the element exact
172:15 - position where the node is present
172:17 - inside the list okay so that is the idea
172:19 - behind the finding the middle node of
172:22 - the list so let's go inside into our ID
172:24 - and try to Port this out
172:27 - so to make this function I will write
172:29 - public static
172:31 - and I don't think so we are returning
172:34 - anything okay so I will write white for
172:38 - time being and I will write this name as
172:40 - middle node
172:43 - and this method will also accept the
172:46 - head of the list
172:48 - add
172:49 - and I will simply come here so we are
172:54 - approaching this way in the slope
172:57 - pointer first pointer approach I will
173:00 - just comment it out I will write slow
173:04 - pointed
173:06 - is equals to
173:08 - one star
173:10 - and
173:12 - our fast
173:15 - pointer is equals to
173:17 - touch down
173:18 - that that means always the first pointer
173:21 - will be ahead of the slow pointer by the
173:23 - one node and this will
173:25 - gives us the exact
173:28 - beta of the list and we need
173:33 - uh two
173:35 - this slowing for first pointer we need
173:39 - this flow pointer initially both the
173:42 - both are assigned to the head head of
173:44 - the list that is the starting point of
173:46 - the list
173:47 - and again we need one more notice
173:51 - first pointer
173:54 - which is also assigned to the head of
173:56 - the HDD changes okay so again we need
173:59 - one count variable to find the position
174:01 - of the position of the node that is
174:04 - present exactly at the middle of the
174:06 - list
174:12 - and inside the while loop we will write
174:15 - first pointer
174:17 - is not equal to none that is function
174:19 - should not be null and and we will write
174:22 - and condition and I hope you guys
174:24 - remember and condition both the both the
174:27 - expansion expression should be evaluated
174:29 - as true
174:32 - fast pointer dot next
174:34 - a should not equals to
174:37 - null
174:38 - if that is the case we will enter inside
174:41 - this Loop and we will simply assign the
174:43 - slow pointer value to the slope pointer
174:45 - next we will increment the slope pointer
174:47 - nodes to the next node of the list okay
174:50 - so slow pointer is equal to slow pointer
174:53 - dot next
174:55 - and we will also increment the value of
174:59 - the first pointer to the first pointer
175:00 - is equals to fast pointer dot next dot
175:03 - next that means the one node ahead of
175:06 - the slow pointer and we will just count
175:09 - plus plus because we want also want to
175:12 - point the position where the
175:18 - while loop we will we have now the
175:21 - middle node of the list and in the name
175:25 - of slow pointer which is flow pointer is
175:28 - exactly pointing to the middle middle
175:30 - node of the list and the count having
175:31 - count the value of the count is equals
175:34 - to their
175:36 - position of the node that is Building
175:37 - inside then make list is the middle okay
175:41 - now here we can simply write middle
175:46 - Road there
175:48 - list is
175:51 - flow pointer Dot data
175:55 - that is the data part of the list
175:58 - which is
176:03 - which is at
176:07 - count is the position of that number
176:12 - position
176:22 - in the list
176:25 - so we'll stop
176:27 - and this will give me the middle load
176:31 - data and the exact position of that node
176:34 - inside the list
176:36 - okay so let me call this to call purpose
176:41 - will come inside of the method and we
176:43 - will call this function uh middle node
176:47 - not make list
176:49 - middle node and will pass the head to it
176:52 - okay uh so uh I don't think so we want
176:56 - to reverse this I will just comment it
176:57 - out we'll need this also
177:01 - you just make the list we just print the
177:03 - list and we just find the middle node of
177:05 - the list okay
177:07 - now if I run this
177:12 - sorry
177:13 - one two three four five so what do you
177:19 - think one two three four five is there
177:21 - and according to this list uh three
177:24 - should be the middle middle node of this
177:26 - list let's see if it is the case
177:30 - yeah elements of the list list r12345
177:33 - middle load of the list is three yes
177:36 - this is right middle node is three which
177:39 - is at third position of the list that is
177:42 - one two three third position for the
177:44 - list so everything is working fine uh
177:47 - let me just run it again and give it
177:49 - give
177:51 - the even number of the
177:54 - nodes inside the list three four five
177:57 - and six and hit minus one and now you
178:00 - can see the middle node of the list is 4
178:02 - which is right four and which is at the
178:06 - first fourth position one two three four
178:07 - four which which is also correct so this
178:11 - is the idea behind how to find the
178:13 - middle node of the list so I hope you
178:15 - are enjoying this video enjoying this
178:17 - series uh do like share comment and
178:19 - subscribe to the channel and I will see
178:22 - you in the next one with the new concept
178:24 - of the sync little English thank you
178:26 - guys for watching this video
178:29 - hello and welcome back to the new video
178:31 - of the Java tutorial Series so till now
178:34 - we have covered uh pretty much concept
178:37 - of the link list so we have seen uh we
178:40 - Define in the middle node how to
178:41 - reversing the list how to search and
178:43 - element how to find the length of the
178:45 - list out of print the list and how to
178:47 - make the list
178:48 - so till now we have covered all those
178:51 - Concepts all those operations which are
178:54 - performing on the link list which
178:57 - doesn't modifies the linked list right
178:59 - uh we have not done anything over here
179:02 - we are just simply retriving or uh
179:04 - checking the list we are processing the
179:06 - list till now but from this video
179:09 - onwards we will start performing on the
179:11 - operation and to modify the list okay so
179:15 - we will be starting with the insertion
179:18 - operation first and then then we will
179:21 - move to the deletion operations okay so
179:23 - basically there are three types of
179:26 - uh insertion which are done at the on
179:29 - the link list okay so let me just clear
179:31 - this first
179:33 - let me just clear this
179:35 - oh let me just clear okay now it's fine
179:41 - I guess okay
179:42 - uh now let me just create one list for
179:46 - you so that you guys can understand
179:48 - clearly
179:50 - okay
179:51 - so we are making this list and I will
179:54 - write a
179:57 - I will make this three notes in the list
180:00 - okay
180:01 - and each these nodes are pointing to
180:05 - this and this node is pointing to this
180:07 - and this node is pointing to the null
180:09 - okay I will write Bell over here
180:12 - so that you can understand
180:15 - null
180:16 - uh so this is our 10
180:20 - I hope you remember what is still
180:24 - uh this is head
180:28 - uh this is the
180:31 - data path
180:33 - and this is the
180:35 - next part
180:36 - okay and this next contents address of
180:40 - this node and this is the
180:41 - first node
180:44 - see the second node and this is the
180:47 - third node in the list okay so this is
180:50 - our list
180:51 - and we want to perform the insertion
180:54 - operation of this list so basically
180:56 - there are three type of operations
180:59 - okay that we can perform on a list let
181:02 - me just increase the font size
181:04 - we have to perform this operation on the
181:07 - list okay so
181:09 - first operation is
181:12 - insertion at
181:16 - beginning
181:19 - and second one is insertion app
181:26 - and
181:27 - and third one is insertionate
181:34 - user
181:36 - specified
181:39 - location
181:42 - okay so these three operations we are we
181:45 - have to perform
181:46 - okay and now
181:50 - now you can see
181:53 - these three operation we have to perform
181:55 - okay
181:58 - yeah right so in this video we'll be
182:00 - covering insertion at the beginning so
182:03 - what do you think uh to insert a new
182:06 - node at the beginning of the list what
182:08 - will be operation that you have to
182:11 - perform okay so let's write down those
182:14 - operation that we need to perform uh so
182:17 - okay and we need first of all
182:20 - and we need the current head of the list
182:24 - head of the list
182:26 - okay and then uh
182:30 - we need a third we need to make a new
182:34 - node inside a list before that we need
182:37 - data which is important we need data for
182:40 - the new node
182:41 - data
182:43 - for new node
182:46 - new node and we will make the new node
182:50 - make the new node
182:53 - and after that
182:56 - we will assign that or insert that node
183:00 - inside this list
183:02 - insert
183:04 - the node
183:06 - in
183:07 - list and after that we will return
183:13 - the new
183:15 - head of the list because head is going
183:17 - to change
183:22 - it is going to change because after
183:25 - performing this operation head is head
183:28 - of this space is going to change I will
183:30 - just copy all this operation that we
183:32 - need to perform to insert at the
183:34 - beginning and I will come over here and
183:36 - I will just
183:39 - comment and paste it off okay so these
183:43 - are the operations that we need to
183:44 - perform I will just tab it over here
183:46 - okay now it's fine so these are the
183:49 - operation that we need to perform okay
183:50 - so we will write one function which is
183:53 - public static and it will return When
183:56 - you know new head of this list so we it
183:59 - didn't didn't type should be node and
184:01 - the name of the method is insert
184:08 - add the
184:10 - insert at beginning
184:16 - insert at beginning
184:19 - node s
184:21 - uh will first will take the head of the
184:25 - list okay for all this operation so T
184:28 - again okay
184:30 - so we have received the head of the list
184:34 - okay we have taken this uh we now we
184:37 - need to take the data for the new node
184:40 - okay so we have to receive the data
184:42 - right so before that I will print on the
184:45 - console
184:46 - write the
184:49 - enter
184:51 - the
184:53 - data
184:56 - to
184:59 - insert
185:01 - 3
185:02 - node in
185:05 - beginning okay
185:07 - so we are asking for the data from the
185:10 - user to insert
185:11 - which is going to going to insert it at
185:14 - the beginning of the list and now here
185:19 - I will store that data into the data
185:22 - variable SC dot next state and after
185:26 - storing the data
185:28 - now the second part is done
185:32 - now we have to make the node okay so
185:35 - make the making the node is pretty
185:37 - simple I hope you guys now
185:39 - no we just have to create a new object
185:42 - of the
185:43 - new node s
185:46 - okay wait
185:49 - all we have to do we just have to create
185:51 - a
185:52 - new node
185:53 - okay with node s let's suppose and we
185:57 - will assign new
186:00 - new node and we'll pass that data to the
186:04 - node okay now it's okay and now
186:08 - wait guys
186:10 - no okay
186:11 - now once we created the node we have to
186:15 - insert that node into the list so for
186:18 - the insertion point of view uh what do
186:20 - you think I will just come come to my
186:22 - paint okay so this is the head which is
186:24 - pointing to the second node of the list
186:26 - so if if you want to perform a insertion
186:29 - operation at the beginning uh let me
186:31 - just create one new node so that you can
186:34 - understand clearly here is the data part
186:36 - and here is the next part okay
186:38 - now if you want to insert this node in
186:41 - inside this list at the beginning what
186:44 - all things that you have to do uh you
186:46 - have you do you think you have to
186:48 - perform
186:49 - Okay so
186:51 - first of all you need to link this node
186:55 - with the correct
186:57 - first or the current head of the list
186:59 - okay so by linking means we have you
187:02 - have to give the address of
187:05 - this s next and assign it to the current
187:08 - head this okay so this is the first step
187:11 - that you have to perform I will just
187:13 - write it as first step first step
187:17 - you know what okay so this is this
187:19 - linking should be done and again now if
187:23 - this linking is done and we are
187:25 - inserting this uh node at the first uh
187:27 - we need to update the head also Okay so
187:30 - at second second operation we need to
187:33 - reassign the value of the head to this
187:36 - new node okay
187:38 - and after that we need to return the
187:40 - head now the head is pointing to this oh
187:44 - okay now the our current new current or
187:47 - the new node a new head is this head of
187:50 - the list so these are the operation that
187:51 - we need to perform uh okay so first of
187:54 - all we need to
187:56 - connect our new node with the current
187:59 - head Okay so
189:29 - foreign
189:31 - foreign
189:37 - guys uh my laptop battery was
189:41 - dead that's fine
189:42 - okay so now
189:44 - uh we have created a new node
189:47 - uh we have
189:49 - now we have also understood what we have
189:53 - to do exactly to insert this mode at the
189:55 - beginning okay so let's let's do this
189:58 - okay we now uh create a new node
190:02 - and
190:04 - that's next we'll assign it as head now
190:08 - we at this point we have connected that
190:10 - new node to the Head current head of the
190:12 - way that means the current first node
190:16 - inside the list and now we have to just
190:17 - have we we just have to update the head
190:20 - which is headed equals to your node
190:24 - this will uh head now head will Point
190:28 - into the new node of the list that is
190:30 - the current first node of the list and
190:32 - now we just simply return
190:34 - head against okay now simply return the
190:37 - head of the list uh I hope this is the
190:40 - thing that we have to perform inside
190:43 - bearing okay uh now we don't have to
190:46 - find the middle of the list I will
190:47 - simply comment it out we just need to
190:49 - print the list and now uh if you notice
190:52 - uh our new head is going to return by
190:56 - going to return by this uh inserted by
190:59 - getting method so we have to store that
191:02 - new head over here okay so we'll just
191:04 - simply write head is equals to
191:06 - insert at beginning and will pass our
191:09 - head to this method okay and after that
191:12 - we will just simply print list again
191:14 - with the new head okay
191:16 - and now if I run this
191:21 - okay so one two three four
191:25 - five
191:26 - six
191:27 - minus one okay so let me see the list of
191:30 - one two three four five six and enter
191:33 - the data to insert in node in the
191:36 - beginning
191:37 - uh that is a typo you don't forget it
191:42 - enter the data okay so now if I want to
191:45 - enter 0
191:47 - at the beginning let's see if it enters
191:50 - here you can see after uh
191:53 - giving 0 to enter enter at the beginning
191:56 - the new list is zero one two three four
191:59 - five six so zero is getting inserted at
192:01 - the list okay so this what this is
192:04 - working fine I hope you guys understood
192:06 - how to insert a node at the beginning of
192:10 - the link list I hope about this concept
192:13 - thank you for watching this video
192:17 - hello and welcome back to the new video
192:19 - of the Java tutorial Series so till now
192:22 - we have covered the insertion operation
192:24 - at the beginning and so now in this
192:26 - video we will be covering uh insertion
192:28 - operation at the end of the link list
192:30 - okay
192:32 - so in our previous video I will talk
192:34 - about this uh instruction at the
192:36 - beginning and in this video we will be
192:38 - covering insertion at the end okay so
192:41 - let me just clear this
192:47 - okay wait let me just clear this thing
192:52 - okay
192:54 - okay uh now uh we want to insert the
192:58 - same node at the end of the link list
193:00 - okay uh let me just erase this
193:07 - foreign
193:25 - at the end okay so things that we are we
193:28 - we require okay
193:30 - first understand that so to insert at
193:34 - the end we need a first of all head of
193:37 - the list
193:38 - again
193:40 - that is much we need the
193:43 - head of the list
193:47 - okay uh now
193:49 - we need the data
193:52 - that with that data for new node data of
193:57 - new node okay that is going to get
194:00 - inserted now we have data we have the
194:02 - head now we create a new mode
194:06 - creator
194:08 - node okay now we created a node
194:13 - now we insert at the end
194:15 - insert add and and at the end we will
194:20 - return the head of the list
194:23 - return
194:26 - head okay so these are the operation
194:28 - that we want to perform uh to insert
194:32 - a new node at the end of the list
194:35 - okay so I will write it over here I will
194:38 - just comment it out and paste it
194:41 - enable
194:43 - give one tab
194:45 - and after that we will just simply click
194:49 - on here okay so now this is the thing
194:52 - that we have to achieve okay
194:55 - so now
194:57 - I will write my function which is public
195:01 - static and it is returning the head that
195:04 - way it is of type node s and the name of
195:08 - the function it's insert at it let me
195:12 - call it as insert
195:13 - at end
195:16 - will simply pass
195:18 - notice
195:21 - head available simply pass the head of
195:23 - the list
195:25 - first of all we will get the data from
195:28 - the user enter the data that you want to
195:30 - insert at the beginning
195:36 - and I'll just simply copy this line so
195:39 - that I can not
195:41 - write the new line okay
195:45 - and over here I will just simply paste
195:48 - this and load in the
195:52 - end okay
195:54 - and and we have to insert that node and
195:58 - now we will receive the data platform
196:00 - the user data is equal to
196:02 - SC Dot
196:06 - an extent after receiving the data we
196:09 - need to create a new node uh we create
196:12 - the new node as new node s
196:16 - which is equals to
196:19 - new node and we'll pass that data to
196:22 - this function okay and now we need to
196:27 - insert at the end we need to perform
196:30 - insertion at the end so what do you
196:33 - think we will like we will go into the
196:34 - paint and we'll try to figure it out how
196:36 - to insert the set end so two things
196:40 - should be there one is if our head is
196:43 - equal to equals to none what if the list
196:46 - itself doesn't have any element that's
196:49 - list is empty that is head is also point
196:51 - to null and tail is also pointing to the
196:54 - null and then in that case we will
196:56 - simply assign the new node to the head
196:58 - that means if there is no no node in the
197:03 - list
197:04 - and we are trying to insert a new node
197:07 - which is the first node as well as the
197:09 - last node of the list then in that case
197:11 - we'll just simply insert this node
197:13 - inside the list and we will assign it
197:15 - the value as head
197:18 - in case there are some elements there
197:21 - are some node present inside that list
197:23 - we'll just simply uh we have to assign
197:27 - that value to the we just have to assign
197:31 - the current tail tail represents the
197:34 - last node of the list we'll just simply
197:36 - write tail dot next equals to new node
197:39 - that means we are linking this node with
197:42 - this node I will just show you we are
197:45 - linking this node to this node by
197:47 - writing 10 dot next is equals to you
197:50 - know and we will simply assign change
197:53 - the value of the tail to new node that
197:56 - means then now the list becomes 1 2 3
197:58 - and this node is added at the end of the
198:00 - list and this nodes next is pointing to
198:04 - the null
198:05 - now this is our
198:07 - list after insertion at the end okay so
198:11 - this thing we have to achieve over here
198:13 - we will write an if condition to check
198:15 - whether the head is equals to equals to
198:17 - null if that is the case that means
198:19 - there is no element present inside the
198:21 - list and we will just simply write head
198:25 - is equals to
198:26 - you know this
198:28 - and now if it is not the condition uh
198:32 - there are some element inside the list
198:33 - we'll just simply write
198:36 - okay
198:39 - we will just simply write
198:41 - tail dot next
198:45 - is equal to new node
198:48 - and I will assign the Tails value to the
198:51 - I will update the value of the tail to
198:53 - the new node node so that our list is
198:56 - like uh it is expanded okay and now at
199:00 - the end after performing this operation
199:02 - we'll just simply return the header new
199:04 - head of the list uh not new head is the
199:07 - this
199:09 - we will just return the head of the list
199:11 - okay and now uh to run this insert at
199:15 - the end we are returning something ahead
199:17 - so I we need that head to be updated
199:22 - over here uh we'll let head is equals to
199:24 - insert
199:25 - at end and will pass that head over here
199:30 - and we'll just simply print the list
199:33 - again okay now if I run this and I will
199:38 - first I will give the
199:42 - empty list no I'm not not empty first I
199:44 - will give some inputs one two three four
199:47 - okay and after this I will write minus
199:50 - one and uh now I have to insert 5 at the
199:53 - end of the list that is the data and
199:56 - after inserting the here you can see the
199:58 - new list is up printing which is one two
200:01 - three four five and uh before list is
200:03 - one two three four five was not there
200:05 - right now after performing the insert at
200:07 - end operation 5 is inserted at the at
200:10 - the end of the list okay so now if I
200:12 - again
200:14 - run this and this time I will not give
200:16 - any uh prior node in the list I will
200:20 - just write -1 elements in the list are
200:22 - empty because which is not getting
200:24 - element list is first empty and now if I
200:28 - am trying to enter insert two in the
200:30 - list the element of the list are two
200:32 - okay so if condition is also getting
200:34 - executed or working fine so this is the
200:38 - way by which you can insert at the
200:41 - insert a node at the end of the list so
200:43 - till now we have covered insertion at
200:45 - the beginning and insertion at the end
200:47 - and in upcoming video we will see how to
200:50 - insert a node at the user specified
200:52 - location in the sinkly language so thank
200:54 - you guys for watching this video and I
200:55 - will see you in the next one
201:00 - tutorial Series so till now uh we have
201:04 - covered the core Java concept uh we have
201:07 - we have started with the data structures
201:09 - and algorithms we have covered array VR
201:11 - uh discuss some problems on arrays okay
201:15 - I hope you guys are enjoying the series
201:17 - so now
201:19 - uh till our previous videos we have
201:23 - started singly linked list okay and in
201:26 - that uh we have seen how to make a list
201:30 - how to print a list uh how to find the
201:34 - length of the list which means how many
201:35 - nodes are there inside the list we have
201:38 - find how to search an element inside the
201:40 - list and then we have started the basic
201:45 - operations like inserting deleting or
201:48 - finding like that okay and in inserting
201:51 - we have uh seen uh how to insert a node
201:55 - inside a singly linked list at the
201:57 - beginning and we have seen how to insert
202:00 - a node inside a single in English at the
202:02 - end and now again we have seen uh this
202:07 - much these many methods reverse list
202:09 - means how you can reverse a single link
202:11 - list and middle node like how you can
202:14 - find the middle node of the link singly
202:16 - linked list so these are some methods
202:19 - that we have seen till now and so now
202:21 - for today's video I I will be
202:24 - taking a concept of how to insert a node
202:29 - in single English at a user specified
202:31 - positions right so for that let's just
202:35 - get into our paint and see the logic how
202:38 - we can implement or how we can add a
202:41 - node inside a Sinclair link list at a
202:43 - user specified position okay
202:45 - so this is our previous previous paint
202:49 - previous video paint so let me just
202:52 - erase the things that we don't want
202:57 - okay
202:58 - just we can delete this
203:01 - you can delete this okay fine uh so
203:06 - let's assume that
203:08 - wait this is our link list okay this is
203:12 - our first node this is our second node
203:14 - this is our third node okay and now if I
203:18 - want to insert a node inside this simply
203:21 - linked list at a user specified
203:23 - positions right so if I say this is the
203:26 - single in English and you have two
203:29 - insert this node this one right here and
203:32 - this node inside this singular English
203:34 - at second position okay so what is your
203:38 - logic how you can uh think how we can
203:41 - insert this new node inside this English
203:44 - at user specified position okay so let
203:46 - me just write a write down here so we
203:50 - are trying to insert this new node
203:54 - at position is equals to 2. so right so
203:59 - we are trying to insert this node inside
204:01 - the single linguisher position number
204:02 - two okay so after inserting the whole
204:06 - list should look like this this is our
204:09 - try to form a cursor okay so this is our
204:12 - first node I am talking about the after
204:13 - insert method insert operation ticket oh
204:17 - sorry after that the link should be here
204:21 - and after that this uh next should point
204:24 - to this
204:26 - and after that this next should point to
204:29 - this
204:31 - okay
204:32 - so this is the list our list new list
204:35 - updated list after inserting a new node
204:38 - at the second position so what will
204:40 - happen uh this existing node which is at
204:44 - position 2 will get shifted at position
204:47 - 3 and new node which is which we'll be
204:50 - going to insert inside our list will be
204:52 - take the position position uh two
204:56 - okay so this is the logic that we have
204:58 - to build uh so first of all uh let's get
205:01 - in our ID get into ID and try to code
205:05 - this okay so let me just get into my IDE
205:11 - okay and I will write this similar
205:15 - method
205:16 - over here okay this is inside at
205:19 - beginning this is insert at end and now
205:22 - I will write it over here so that you
205:24 - can I will and also I will share I will
205:26 - be sharing this code don't worry you can
205:28 - follow this code and try to build your
205:31 - own single linkage and try try to play
205:33 - around this code Okay so
205:36 - let me just okay fine so we'll be
205:41 - uh let me write out write down one
205:43 - comment
205:44 - so we are performing insert
205:48 - operation
205:50 - at user
205:53 - specified
205:56 - location
205:58 - or to be more precise in programming
206:00 - language it is index okay
206:03 - now so since this is a method I will
206:07 - write this public method should be
206:10 - static because we are calling it inside
206:12 - the main method which is static one and
206:16 - think it uh think it guys uh when we are
206:19 - updating we are inserting a new node
206:21 - inside the list so our method should
206:23 - also return one node that is the head of
206:26 - the node uh that like here you can see
206:30 - uh for suppose user has inserted this
206:35 - node at First Position then in that case
206:38 - our head should also point to this right
206:40 - so so our method should expect expected
206:43 - to return a new head or the if it is uh
206:47 - in inserting the node at the first
206:49 - version or any case we are returning a
206:53 - new node
206:54 - okay so our notice of type node s
206:58 - so I hope you guys are watching our
207:00 - previous videos also so that you can
207:02 - understand what is known as why we have
207:05 - written that over there so please watch
207:07 - all the video and then come over here
207:10 - so I will name it as
207:12 - insert at the method name okay and this
207:15 - method will also first required one head
207:17 - so we are passing one link list to this
207:19 - method and in return this method will
207:22 - insert a new
207:25 - uh node in that list that I use a
207:28 - specified location right
207:30 - so we are passing the head to the list
207:33 - okay
207:35 - so first of all I will be requiring one
207:36 - uh
207:39 - variable name as position and count and
207:43 - I will assign value to both as one okay
207:46 - so both are one and I will just simply
207:49 - write system.out.print align
207:52 - enter the data
207:58 - to
208:00 - third in the list
208:04 - okay so at this point we are asking we
208:07 - are printing on the console like uh
208:09 - asking the user to enter the data that
208:11 - you have to insert inside the list
208:13 - all right all right and after that we
208:16 - will declare one
208:17 - data variable and we will just write
208:19 - simply since SC Dot nextint and you will
208:23 - accept the
208:24 - data value of that new node data part of
208:27 - the new node okay and well after that we
208:29 - will simply write print on this console
208:32 - like enter
208:34 - the position
208:37 - all right so this method will uh what
208:40 - will be do what it will be doing it will
208:42 - be taking the data part and it will take
208:45 - the position right all right so here you
208:47 - can see it will ask for the position at
208:50 - which position you want to insert this
208:52 - node inside the single link list that we
208:54 - are going to pass to this method okay so
208:57 - now I will write
208:59 - position is equal to SC Dot
209:02 - next next it
209:06 - okay
209:07 - so now we have covered
209:10 - position we have taken the data
209:14 - okay so now we are good to go to create
209:17 - a new node okay so we are creating a new
209:19 - node
209:21 - new node
209:23 - s
209:25 - that is a new notice
209:29 - and we are passing the data to that
209:31 - Constructor of the nodes class
209:34 - so now at this line number one one is
209:38 - one one or four we have created a one
209:41 - node and we have passed the data that is
209:43 - inside by the user and we have also
209:45 - taken the position from the user okay
209:47 - now we are checking if the position is
209:51 - equals to equals to 1.
209:53 - all right what that means if position
209:55 - equals to equals to 1 here you can see
209:58 - if entry user enters the position that
210:01 - is of new node should be one then in
210:04 - that case user user is trying to insert
210:07 - that new node is at the very beginning
210:10 - of the link list all right so in that
210:13 - case uh we we have to perform the some
210:15 - different tasks
210:17 - otherwise there are some
210:20 - okay so otherwise we will go inside the
210:23 - else part we will all support that one
210:25 - okay so if the position equals to equals
210:28 - to 1 that that means we are trying to
210:30 - insert the node at the very beginning of
210:31 - the league list so in that case we will
210:34 - just simply write
210:36 - new node s
210:39 - dot next
210:42 - is equals to head
210:45 - and we will simply reassign the value of
210:47 - head to node s
210:53 - sorry for the type of mistake okay so
210:56 - what we are doing doing over here is uh
210:59 - this is our new node we will just simply
211:01 - assign first this next to the Head
211:05 - currently the head will be pointing to
211:07 - the first in first node of the link is
211:11 - right so we are making this connection
211:13 - first to the first node and we are
211:17 - simply changing the heads value to this
211:19 - uh new node okay so for after that uh
211:22 - how it gonna look like let me just clear
211:25 - this mess
211:27 - all right so after that it will look
211:30 - like this the head will be uh you know
211:33 - the head is our new node head is disk
211:36 - and our second node inside the link list
211:39 - will be this and first node will be this
211:41 - okay so now this we have covered
211:45 - for the position equal to equals to 1
211:47 - what if the position is uh not one okay
211:51 - or else something then in that case you
211:53 - will come inside the else part and here
211:57 - we will create a new node and we'll
212:00 - assign it name it as previous
212:04 - is equals to head okay and in after that
212:09 - you run one while loop okay and then the
212:13 - condition we are going over here is
212:15 - while the count
212:17 - is less than position minus 1.
212:22 - okay don't worry I will be explaining
212:24 - this code in the using the paint window
212:26 - all right and we are writing previous is
212:30 - equals to
212:32 - previous Dot next
212:37 - okay and after that you just simply
212:39 - write count plus plus
212:41 - all right and after running this while
212:43 - loop we will simply create one more uh
212:47 - one more node and name it and name it as
212:49 - current
212:51 - and this current will point to the
212:53 - previous dot next
212:57 - and after that uh we'll write new node
213:01 - sorry for that
213:03 - stick
213:04 - we'll write new node as
213:08 - dot next
213:10 - should be equals to the current
213:14 - and now the previous dot next
213:19 - should point to
213:21 - new node
213:23 - all right and after that
213:27 - after this else part we will just simply
213:29 - return
213:30 - the head of the list
213:32 - all right so let me explain what we have
213:34 - done inside this else part all right so
213:37 - uh we know if the position is not equals
213:40 - to 1 that means we are not trying to
213:41 - inserting the new node at the very first
213:43 - beginning of the list okay so in that
213:46 - case
213:46 - what are what are all the operation that
213:48 - we have to perform like we have seen
213:50 - over here if you want to if the user
213:52 - gives the position as two so in that
213:54 - case uh we will first we have to Simply
213:57 - look at over here okay so we'll create
214:00 - one uh node by the name of previous and
214:03 - we will assign it the value of head all
214:05 - right so at the very first the
214:09 - previous will come over here
214:12 - previous all right and then which is
214:15 - equals to the head like it is pointing
214:17 - to the first node and after that we'll
214:19 - we'll run our while loop all right so
214:21 - while
214:23 - we are repeating this iteration until
214:26 - our count is less than position minus
214:29 - one so what is our position uh let's
214:31 - suppose I have to insert the insert a
214:34 - new node this new node at the position
214:36 - is equal to 3. okay so look at here map
214:40 - if my position is
214:43 - wait my position is three
214:47 - now wait okay
214:49 - so what is the count value
214:52 - initially the count value is one
214:55 - it will check whether one is less than
214:57 - position minus one that is 1 is less
214:59 - than
215:00 - 2. if it is if it is correct yes
215:04 - then it will it will perform this this
215:07 - two line of code okay so previous is
215:10 - equal to previous dot next that means
215:11 - our previous uh previous will jump over
215:14 - here
215:15 - now the previous is pointing the second
215:17 - node and count plus plus now the count
215:20 - value will be 2 and now uh when we again
215:23 - check for the condition now this time
215:25 - counts value is 2 and
215:28 - and what we are going to check
215:30 - we are going to check whether the
215:32 - position minus one okay
215:34 - so my position is 3 3 minus 1 is 2
215:37 - either my 2 is less than 2. so this time
215:39 - this condition will will be evaluated as
215:41 - false
215:42 - all right so if this condition is false
215:45 - then in that case uh this while loop
215:47 - breaks and will come over here okay so
215:51 - now our previous switch is pointing
215:54 - towards this second
215:57 - node of the list okay and now we will
215:59 - create one more node which is current
216:01 - and which will be pointed in the
216:03 - previous dot next all right so what is
216:05 - what is our previous previous is this in
216:08 - this next part we will assign it to the
216:11 - uh
216:12 - what we have created another
216:15 - node name as
216:17 - current all right so this here our
216:20 - current will point over here
216:23 - current is here and previous is here all
216:25 - right
216:26 - now
216:28 - new node dot next is equal to current
216:30 - new node that is our test new node.next
216:33 - so we are uh taking this next and we
216:35 - will assigning it by assigning it to the
216:38 - current value all right so new node.next
216:40 - is equal to current so now our new node
216:42 - will be pointing towards this node
216:46 - and
216:47 - previous dot next is equal to new node
216:49 - previous dot next is equal to new node
216:53 - so if you can see these are the two uh
216:58 - nodes that we have created previous and
217:00 - current are for taking the keeping the
217:03 - track of the nodes which is previous to
217:06 - the position that we have entered to be
217:09 - uh to enter the new node inside the list
217:12 - and the current is the actual position
217:14 - at which we are we have want to insert
217:16 - that node inside the list okay so after
217:19 - performing this operation you can see
217:20 - the flow of the list would be 1 2 and
217:24 - this will become the third node and this
217:26 - will become the fourth node so we are
217:27 - successfully inserting the new node at
217:31 - the position is equal to three that is
217:32 - equal to here you can see yes so this is
217:35 - logic behind this
217:37 - I hope you got this if you're not uh go
217:41 - back in the video and try to understand
217:43 - what what do I have covered okay so
217:46 - let's run this let's see if we are not
217:50 - getting any error
217:52 - after before that I will just comment it
217:55 - out we don't require this we will make
217:57 - one list we are print the list
218:00 - and we'll call our method insert at
218:04 - and we will simply pass the head tool to
218:07 - it okay so if you notice one thing
218:11 - uh this method we it accepting one head
218:14 - we that mean that we are passing or
218:17 - passing it over here and but in return
218:19 - this is giving us a new
218:22 - a node a new head of the list right then
218:25 - new it is returning the new head of the
218:27 - list so that's why we have to get that
218:29 - new head of the list otherwise uh we are
218:32 - not printing the new list okay so we are
218:35 - printing the old list that we have make
218:37 - over here okay so this way this will not
218:39 - work
218:40 - so here let me just create one new node
218:43 - uh let me call it as
218:46 - head new
218:49 - so we are taking that noon head and
218:52 - we'll again call the print list but this
218:54 - time we will pass the new head to this
218:57 - Method All right so so that we can print
218:59 - the new list after inserting the in node
219:03 - add the user specified index all right
219:05 - so this is we have to do
219:10 - Let's test it out
219:14 - okay so it is asking me to enter the
219:16 - data so let me enter five nodes in the
219:19 - list one two three
219:22 - four
219:23 - four five and uh you know if you want to
219:27 - get out of this uh make list function
219:30 - you have to write -1
219:31 - so it is printing that elements of the
219:34 - list are one two three four five by why
219:36 - so because we are called over here
219:38 - printless method which will gonna take
219:40 - head of the list and print all the list
219:42 - okay so here it is asking the enter
219:45 - authorator to insert in the list so I
219:47 - want to insert let's suppose 0 so that
219:50 - you guys can understand
219:51 - okay so I want to insert 0 at what
219:54 - position let me insert it at position
219:56 - number three over here okay let me
219:59 - insulate that question number three now
220:01 - here you can see a element of the list
220:03 - are we are again calling the print list
220:05 - but this time we are
220:07 - let me show you we are again calling
220:09 - this function but this time we are
220:12 - giving the new new head of the list that
220:14 - is the new list that method our method
220:18 - is going to return us that is 1 2 then
220:21 - at position number three uh I have tell
220:25 - the program that to insert 0 at the
220:27 - position number three it is also it is
220:28 - inserting the zero and after that uh
220:30 - rest of the list will uh will be printed
220:32 - as it is
220:34 - Okay so
220:36 - this is the idea of inserting a new node
220:40 - in the single English at the users use a
220:42 - specified location I hope you got the
220:44 - concept please
220:47 - uh
220:48 - we re-watch the video if you are not
220:51 - getting the concept but try to
220:53 - understand and will I will share one
220:56 - trick so that you can uh solve this kind
221:00 - of linkage problems easily you know once
221:03 - we have uh covered all the topics of the
221:05 - single in English Okay so thank you guys
221:07 - for watching this video and I'll see you
221:08 - in the next one
221:12 - so hello and welcome back to the new
221:14 - video of the Java tutorial Series so
221:16 - till now we have covered how to insert
221:20 - side node inside a single link list and
221:24 - that too with the three all three types
221:26 - uh like in the beginning
221:28 - in the end and at the user specified
221:33 - location okay that is the user specified
221:36 - index okay so one more challenge for you
221:39 - so if you can try to solve it so what is
221:43 - the challenge so you have seen how to
221:46 - insert at end uh how to insert ad uh
221:48 - beginning how to insert a few
221:50 - userspective user specified location
221:52 - right so now you have to insert a node
221:56 - in at the middle node of the link all
222:00 - right so
222:01 - what I am telling is Let me Give an
222:05 - example so if the length of the list is
222:07 - 10
222:09 - okay or suppose let me take X5 okay so
222:13 - and the elements of the list is one two
222:16 - three four and five so at first you have
222:19 - you have to identify which is the middle
222:21 - node of the list okay so in that case a
222:23 - middle node is three I will color it up
222:27 - or middle node is three and you have to
222:29 - insert a new node at the position or the
222:33 - index three so how you can solve this I
222:37 - will give you one hint okay so for this
222:39 - operation to perform you need
222:43 - to find first the middle of the link
222:46 - list okay so how to find that we have
222:49 - covered one video go and check that if
222:53 - you watch
222:54 - then then it's good here you can see uh
222:57 - we had written one method to find the
223:00 - middle middle node of the list so we
223:02 - have to somehow managed to get first the
223:06 - middle node of the list you have to
223:08 - store that middle node some somewhere
223:10 - and then then you can perform the
223:13 - similar kind of operation that we have
223:14 - performed at over here where we are
223:17 - inserting the new node at the user
223:18 - specified location right so these are
223:21 - this is the operation that you can
223:22 - perform so go and give it a try and try
223:27 - to solve this problem
223:29 - enough talking so in this video we will
223:32 - be starting with the deletion operation
223:35 - which we are going to perform on a
223:37 - linked list all right
223:39 - so I will just make one line over here
223:42 - and I will write one comment
223:44 - we are performing
223:46 - delete
223:49 - delete operations okay
223:52 - so for this video uh we'll be looking at
223:56 - how we can delete a node of linked list
223:58 - which is simply linked list obviously uh
224:01 - at the beginning of the link list all
224:03 - right so we are trying to delete the
224:05 - first node of the link list okay
224:09 - so let me just go here this is our
224:14 - previous code
224:16 - I'm going to check that video If you
224:18 - have a checked all right
224:20 - so I will just write one comment
224:24 - all right why it is not okay all right
224:27 - so I will write one comment so we are
224:29 - trying to delete
224:33 - first node of the linked list
224:43 - so okay so we are trying to achieve this
224:47 - so first thing first let's get into our
224:50 - paint and try to build the logic for
224:52 - this okay
224:53 - so here
224:56 - all right no more requiring this new
225:00 - node so I can delete that
225:04 - okay wait
225:07 - let me select
225:08 - all right wait wait let me select this
225:11 - area
225:12 - so that I can delete it okay
225:15 - fine so this is our list
225:18 - all right so we are trying to delete
225:21 - this node
225:24 - which is head is also pointing to this
225:27 - node that is the first node of the list
225:28 - okay so we are trying to delete this so
225:32 - when you are trying to delete a node
225:34 - inside a list the only thing if you
225:37 - remember you have to do is you have to
225:40 - break the link between those two nodes
225:43 - all right so this is the link that joins
225:47 - this node this is the link due to which
225:49 - our list is going to get completed in
225:52 - the in this direction okay so when we
225:55 - are calling our print list method so we
225:57 - are passing that head if you remember
225:59 - okay and that head is going to get
226:01 - incremented at each time and how this
226:04 - incrementing part is done due to this uh
226:08 - just because of this next part okay so
226:10 - if that if this next is connected to
226:12 - this node then and then only we are
226:14 - going to move and this is forming a
226:17 - chain and this is forming a list of
226:19 - nodes
226:20 - okay so we have just need to break this
226:23 - link so that next time whenever we pass
226:28 - our head we are starting our list from
226:30 - this location and don't forget to
226:33 - upgrade update your head otherwise for
226:36 - the print list method you are passing
226:38 - this head and this after this head uh if
226:41 - you break this link
226:42 - and then the list will be only this this
226:44 - part only and your code will not work so
226:48 - in that case you have to bake this link
226:50 - and you have to update the heads value
226:52 - to the next value because in that case
226:55 - then and then only if you are trying to
226:57 - pass this head to the printlish method
226:59 - then only this this is our new new list
227:03 - that we are going to build okay and this
227:05 - node will be discarded uh not discarded
227:08 - we will not have any access to this node
227:12 - inside this list okay so this is the
227:14 - logic that we have to build let me just
227:17 - clear this out I need this for the
227:20 - upcoming videos also okay so let's go
227:24 - into our IDE and try to build this
227:28 - we'll write
227:29 - public
227:31 - static
227:33 - so
227:34 - think about it what will be the return
227:36 - type so here we are changing the head we
227:41 - are updating the head that means we are
227:44 - doing something a modification part
227:47 - inside our list so whenever the
227:49 - modification part comes inside the list
227:51 - there is one the method should return
227:54 - the new head of the list so that we can
227:56 - print it later onwards which is required
228:00 - for the printing the list okay so now
228:03 - I will write node s so this method will
228:06 - return one node that is a new head of
228:08 - the list
228:09 - delete
228:12 - at
228:16 - BK
228:19 - so this is our method name
228:21 - and this method will also accept one
228:25 - head of the list so we are passing one
228:27 - list to this method and in that return
228:30 - this method will delete the first node
228:33 - of the list and
228:34 - give us the updated head so that we can
228:37 - print that list later on
228:40 - all right so
228:42 - first thing first we will cover the
228:44 - corner cases okay so what if my head is
228:49 - equals to equals to null
228:52 - okay so if my list doesn't contain any
228:57 - element then in that case I don't need
229:00 - to perform any operation deletion
229:02 - operation all right so head is already
229:04 - empty then how can I perform the
229:06 - deletion operation all right so we will
229:08 - simply return
229:09 - then I'll
229:12 - sorry no in that case all right so if
229:16 - this is not the case
229:18 - then
229:19 - we are assuming that not assuming there
229:22 - are sure Surety that's there are some
229:23 - nodes which are present inside that list
229:25 - and we have to delete the first node of
229:28 - that list okay so we will
229:31 - create one temporary uh
229:33 - variable of type node and we'll assign
229:36 - it to the value of the header all right
229:38 - so head and temp will both pointing to
229:40 - the first node of the list and we'll
229:42 - write head
229:44 - equals to
229:46 - head dot next
229:49 - and in next part we will write temp Dot
229:53 - next
229:55 - is equals to now
229:58 - okay and now after that you will just
230:03 - write return
230:07 - head so what I have done over here is so
230:10 - two three line of code I will tell you
230:12 - so we are first creating a new variable
230:15 - of type nodes name temp
230:20 - so here you can see we are creating one
230:23 - more variable all right so let me just
230:26 - decrease the font size
230:30 - why it is not getting decreased
230:36 - all right
230:37 - temp and head are both pointing to this
230:41 - first
230:43 - these both are pointing to the first
230:46 - node of the list till this time okay so
230:49 - the next line is head is equal to head
230:50 - dot next
230:52 - so now we are changing the heads value
230:54 - to the Head dot next what the next part
230:57 - of this head is going to hold link to
231:00 - the next node of the list all right so
231:03 - we are changing the heads value to this
231:04 - so now our head is point head is
231:07 - pointing towards this node
231:09 - our new head is this oh so head is no
231:12 - more have the access to this node but
231:14 - the temp variable to have access
231:17 - so we'll write temp dot next is equal to
231:19 - no so temp dot next which is pointing to
231:23 - this node we will just simply write temp
231:26 - dot next
231:27 - now it will point
231:30 - to the
231:32 - so here you can see and after that we
231:34 - will simply return head that that means
231:36 - we are returning this and this causes
231:39 - our this this is the new list after that
231:44 - operation will perform okay so we have
231:46 - what we are doing we are just first of
231:48 - all assigning the temp uh creating one
231:50 - new variable uh temp of type node and we
231:53 - will assigning the value to the head
231:55 - that means the first node of the list
231:57 - and we are changing the heads value to
231:58 - the next node in the list okay by using
232:01 - the using what using next head dot next
232:05 - all right after that I as I have told
232:07 - you you have to break this link link if
232:10 - you want to break this link you have to
232:12 - modify this next part so for that we
232:16 - have written attempt dot next is equals
232:17 - to none so we are assigning the temp dot
232:20 - next to the null so that this temp node
232:25 - will no more have this access to this
232:27 - node and it will point to the null and
232:29 - our new list will be this and this all
232:32 - right so this is the idea behind this
232:35 - method
232:37 - all right so let's get an
232:41 - into our main function and I will call
232:45 - that method all right so we are making
232:47 - the list we are printing the list and
232:49 - over here we are calling
232:52 - delayed deleted at the beginning and we
232:54 - will pass that head
232:57 - okay and after that after passing the
233:00 - head
233:01 - one thing you can remember uh let me go
233:04 - there
233:06 - one thing you can remember this method
233:09 - is returning the new head of the list so
233:11 - we have to create an variable which will
233:14 - be holding our new head of the list
233:16 - which will be of type nodes
233:20 - let me call it as you
233:24 - head
233:26 - all right
233:28 - and we will again call the print list
233:30 - method and we will pass a new head of
233:33 - the new head of the list to this next
233:36 - all right so let me run this
233:39 - I hope this will work let me create one
233:43 - list uh as usual one two three four and
233:47 - five and this is the elements let me get
233:50 - out of this and you can see elements of
233:52 - the list are one two three four five uh
233:55 - this method is printing we are using the
233:57 - previous head so these are the element
233:59 - that we have entered and these are the
234:01 - element that is going to printed on the
234:02 - pencil okay so after that we have
234:04 - written
234:05 - this method call
234:07 - delete at the beginning so what it will
234:10 - do it will delete the first element of
234:13 - the list that is one and after that we
234:16 - are again called The Print list method
234:18 - okay so here you can see here called the
234:20 - printlash method and this print list
234:22 - method is printing the new list as two
234:25 - three four five why so because we have
234:27 - deleted this first node we are no more I
234:30 - have the access to this node and new
234:32 - elements are the new list
234:34 - think real English is two three four
234:37 - five so this is the idea behind the
234:41 - deletion of the node inside single link
234:44 - placed at the beginning okay so I hope
234:47 - you got this so in upcoming video we
234:50 - will be saving uh seeing
234:52 - how to delete a node at the end and how
234:56 - to delete the node at the user specified
234:59 - index uh like we have did in the insert
235:02 - operations right so thank you guys for
235:04 - watching this video and I'll see you in
235:06 - the next one
235:09 - so Helen welcome back to the new new
235:11 - video of the Java tutorial Series so
235:13 - till now we have look
235:17 - at the deletion operation we have again
235:19 - with the deletion operation and we have
235:21 - seen deletion delete at beginning okay
235:24 - so in this video we will be looking at
235:26 - the delete at end so now what I am
235:29 - talking is we have to delete the node
235:32 - which is at the end of the link list all
235:36 - right
235:37 - so before going to the code part as we
235:41 - discussed through paint let's discuss
235:45 - so to perform the delete operation at
235:49 - the end of the link list what do you
235:52 - guys think what will be required Okay so
235:56 - first thing we will require
236:02 - the access to the previous node right
236:06 - like that is the second last node of the
236:08 - list so as I'm assuming uh this this
236:11 - linkage okay so this is our link list
236:14 - and one one thing uh you don't get
236:18 - confused uh some YouTubers have told you
236:21 - to implement this single English without
236:23 - taking the tail
236:25 - and they are there just uh taking the
236:28 - head of the links list they are not
236:30 - assigning the Tails value and they are
236:31 - not maintaining the track of the tail so
236:34 - and I have taught you uh by taking the
236:37 - tail so I think uh this is the good idea
236:41 - to take till in the link list so that
236:44 - you can have at least the track of the
236:46 - two nodes in in the list that is the
236:48 - first node and the last two so that
236:50 - those are required whenever you perform
236:52 - some complex operation you know on your
236:54 - uh link list we'll see
236:57 - what I mean by the complex operation all
236:59 - right so this is the list one two three
237:02 - three notes are there and this is the
237:04 - Red Data part of the list and this is
237:06 - the next part of addition this is the
237:07 - link list okay so we are trying to
237:09 - delete the last one of the list so if
237:11 - you want to delete this node uh we'll
237:13 - require the track of this one this is
237:15 - that is the previous note to the last
237:17 - node
237:19 - so first thing we have we need the track
237:21 - to this node somehow we we have to get
237:24 - to this Loop uh get to this node sorry
237:27 - not Loop and after that we can perform
237:29 - some basic stuff that is we'll reassign
237:33 - the value of the tail to this so that
237:34 - our new tail will point to the new last
237:37 - node of the list and we will just simply
237:39 - uh that
237:41 - assign this part next value to the null
237:45 - so that our new list should look like
237:49 - this
237:50 - 1 2 and second node is pointing to the
237:53 - null and we don't have any more access
237:56 - to this nodes so this node is getting
238:00 - discarded from the list and this is our
238:03 - new updated list after performing the
238:05 - deletion operation at the end of the
238:07 - list okay so let me get rid of this okay
238:11 - so now we can go into our
238:16 - and right beneath of this deletion at
238:20 - the
238:21 - first node of the link list I will make
238:24 - one comment and I will write it as
238:27 - delete
238:30 - edit the
238:33 - end of the list
238:35 - all right
238:37 - so now
238:40 - since uh this this we are making this
238:43 - method and this method will be a public
238:46 - one and static also and now we are
238:49 - deleting the node from the list so our
238:55 - list is getting modified all right so we
238:58 - we are getting a new list so for that
239:01 - this method will also
239:04 - release or means
239:07 - pass or the returns one head of that
239:11 - list new list okay so that we can use
239:13 - the head later on to print print that
239:15 - list okay and we'll write
239:18 - delete at end
239:21 - and this method will also acquire the
239:26 - head of the list that is X to the list
239:29 - oops sorry
239:32 - wait guys wait wait wait wait delete
239:35 - delete
239:40 - at end
239:43 - and this will require node as head
239:49 - okay
239:50 - so inside this
239:52 - so as we have discussed in our previous
239:55 - video you know we are checking this uh
240:00 - if condition that is a corner case so
240:02 - what do you think uh here here also you
240:05 - have to check on Corner case right we
240:07 - have to check one corner case so what it
240:09 - will be if our head
240:12 - is equals to equals to null
240:15 - that means uh if the head that we are
240:17 - passing to this method that is that head
240:21 - is null or
240:23 - head Dot
240:27 - next
240:28 - is equals to equal state
240:33 - guys what do you think this condition
240:35 - will this is the r operator so I hope
240:38 - you know what is our operator those who
240:40 - don't know I will tell you our operator
240:42 - will evaluated uh this one expression
240:46 - and this one expression and whether any
240:48 - any or operator what it does simply if
240:52 - any one of the condition is getting true
240:54 - this if condition will uh will be
240:57 - executed all right so if the head is
240:59 - equals to equal signal or the head dot
241:00 - next is equal to equal signal if any one
241:03 - of this condition is evaluated as true
241:05 - this if condition will be get
241:09 - perform and we'll just simply return
241:12 - simply return the head
241:15 - okay and what we have doing over here is
241:18 - if the head is equal to equal to null
241:19 - means this is the condition where
241:21 - there is no element inside the list all
241:24 - right and this when head dot next is
241:26 - equal to equals to null that means uh
241:29 - head dot next that is this location is
241:32 - pointing to the null so what what is
241:34 - depicts is there is only one node inside
241:37 - the list and if there is one node inside
241:41 - the list so technically we can't remove
241:44 - the end of the list and end node of the
241:47 - list okay so because there is only one
241:50 - layer one node represent inside the list
241:52 - so we can perform this operation in that
241:54 - case we will simply return the head of
241:56 - the list that means uh
241:59 - this is the condition all right
242:03 - and after checking that corner case if
242:05 - that corner case doesn't
242:07 - evaluated then we'll simply create one
242:11 - node
242:12 - I will name it as previous so because we
242:16 - have discussed in our logic part we need
242:18 - to keep the track of the previous node
242:21 - of the
242:23 - link list that we are going to delete at
242:25 - the end okay so now we have uh declared
242:29 - one uh variable of previous previous of
242:33 - type node okay so we have to take that
242:37 - currently uh this is previous is
242:40 - pointing over here we and now if you
242:42 - want to delete this element we have to
242:45 - get this this previous somehow to this
242:47 - location so that uh what previous will
242:49 - do it will uh hold or keep the track of
242:52 - the node which is just behind the tail
242:55 - that is the second second last element
242:58 - of the list okay so we have we are
243:00 - performing this while loop so that we
243:02 - can keep the track of that previous uh
243:04 - until previous Dot
243:08 - next
243:09 - is not equals to
243:12 - tail and I hope that what is still you
243:14 - know the tail is the last node of the
243:16 - list so whenever this until we reaches
243:20 - to the tail which is the previous node
243:24 - of the tail we are performing this and
243:25 - each time we will be doing previous is
243:27 - equals to previous dot next
243:29 - previous dot next that means we are in
243:31 - implementing the previous value to the
243:34 - and uh once we have reached to the
243:37 - previous uh previous node we will just
243:39 - simply write 10 is equals to DBS
243:43 - and now we will write 10 dot next
243:47 - is equal to another
243:50 - all right and after that we will just
243:52 - simply return the head of the list
243:57 - so here you can see
243:59 - we are declaring one previous variable
244:01 - uh and assigning to the value of head we
244:04 - are looking one while loop and we are
244:06 - taking that previous variable to the
244:08 - second second
244:13 - um second end of this which is the
244:14 - second element from the last of the list
244:17 - and after that we will just simply
244:21 - assign the tail value to the previous
244:22 - that means we are shifting our tail to
244:25 - over here and we will just write tail
244:27 - dot next is equal to null that means
244:29 - this this will point to the null
244:32 - now this will point to the null and this
244:35 - link will got broke and we have no more
244:39 - track of this node which is which is
244:41 - previously at the end of the list and
244:43 - our list will be like this one two and
244:45 - null
244:46 - all right this is the logic behind
244:49 - deletion
244:50 - at the end okay
244:53 - I hope you got that idea
244:55 - and now we will go inside the main
244:58 - method and now here over here we will
245:00 - just call this methods that we have
245:02 - declared above and we'll delete and end
245:06 - we'll pass that head and after that
245:10 - since we are getting the new head from
245:12 - that list so we have to capture that
245:15 - your head
245:18 - work your head
245:20 - equals to and we'll see when you had
245:25 - this okay
245:28 - let me run this
245:31 - okay so we are entering the nodes uh
245:34 - like one two three four five and after
245:38 - that I will write -1 so here you can see
245:40 - uh before performing the deletion
245:42 - operation the linkage would look like
245:44 - this one two three four five and after
245:46 - performing the uh let's delete at end
245:49 - operation uh we are printing again the
245:52 - list and this time we are printing one
245:53 - two three four and we have deleting the
245:55 - element which is at the end of the text
245:57 - okay so this is how the deletion at end
246:01 - works I hope you got this idea how it is
246:05 - works
246:06 - so if you're not get any idea go back
246:10 - and watch this video again
246:12 - so in our upcoming videos we will see
246:14 - how to delete a node inside the single
246:17 - English which is at the user specified
246:19 - location all right so thank you for
246:22 - watching this video
246:24 - so hello and welcome back to the new
246:26 - video of the Java tutorial Series so
246:28 - till now we have covered
246:31 - deletion at the beginning deletion at
246:34 - end and now in this video we'll be
246:36 - looking deletion at
246:38 - user specified location like we have
246:41 - seen in the insert operation at the
246:42 - specified location we are trying to
246:44 - delete a node which is user will tell
246:46 - that like this is the list and this is
246:48 - the position and at the node which is
246:51 - present at this position you just delete
246:54 - it okay and give me the new list
246:56 - all right
246:58 - so let's go before writing the code as
247:03 - we discuss our logic inside the paint
247:05 - then go and discuss it okay so let's
247:08 - suppose this is our list one two three
247:11 - there are three notes inside the list
247:12 - and
247:13 - me as a user gives My Method the input
247:17 - as like this is the no this is the list
247:19 - you just remove the node which is
247:22 - present at the position two like this is
247:25 - the node that we have to delete
247:27 - all right so in that case
247:31 - so I want to perform the deletion
247:33 - operation so now we will check what are
247:37 - the things that we have to do so here if
247:41 - you want to delete this node we have to
247:43 - break this link
247:45 - and this one
247:48 - and if you break these links this node
247:51 - will get discard discarded
247:53 - we have no more access to this node and
247:55 - after that you have to do assign value
247:59 - of these nodes next to this this way
248:02 - this node so this is our so after
248:05 - performing this operation what will be
248:06 - the least this is our list one two and
248:10 - we will be not having this notes access
248:13 - anymore after performing that deletion
248:16 - operation okay so these are the things
248:18 - that we have to do and let's see how we
248:20 - can do this into our
248:22 - foreign
248:26 - okay let me get rid of this
248:31 - so now here uh we have to perform or we
248:34 - have to create that method
248:36 - which will delete our node at the use a
248:39 - specified location all right so I will
248:41 - just create one comment
248:44 - delete at
248:47 - user
248:49 - specified
248:52 - location
248:53 - okay
248:55 - so this method is also public one static
248:59 - and this is also going to return a new
249:01 - uh head of the list
249:04 - so that's why we are writing the return
249:06 - type it as return type as nodes and I
249:09 - will name this method as
249:12 - delete at
249:18 - okay so now uh this method will also
249:21 - require
249:23 - head of the list
249:25 - and it will perform operation on that
249:27 - list okay so first thing first uh like
249:30 - we have discussed in the insert
249:32 - operation I hope you watch that video
249:34 - and like that here also we required one
249:38 - position and count variable
249:41 - and we will assign both value as one
249:47 - K and now
249:49 - uh we'll write system.out.20 line and
249:53 - yeah ask we'll asking the user also
249:56 - position enter the
249:58 - oh
250:00 - session
250:03 - of the node
250:06 - you want to delete
250:12 - okay so we are asking the user to enter
250:15 - the position of the node that you you
250:16 - want to delete okay so after asking that
250:19 - position we have to store that position
250:21 - somewhere so we will be storing that
250:23 - position inside the position variable so
250:25 - you write SC dot accent
250:28 - you'll get that position from the user
250:31 - and here also we will check one corner
250:33 - corner case what is the corner case if
250:37 - position equals to equals to one
250:39 - if that is the case if the position is
250:41 - one that may that means the user is
250:43 - trying to delete the node which is at
250:48 - the beginning that is the first node of
250:50 - the list so we know that how to do it
250:52 - and we have discussed in our previous
250:54 - videos also we will simply assign heads
250:56 - well to the Head dot next
250:59 - that means like here if the user want to
251:02 - read this this node we just have to
251:05 - Simply pass our head to the next node
251:07 - and we will simply return that node from
251:11 - this and from this onwards the list will
251:14 - be that much only and you will no more
251:16 - have the track of this node so this is
251:19 - the corner case that we have to check if
251:21 - the interview and user enters the
251:23 - position as well we will just simply
251:25 - assign the head is equal to head.next
251:28 - now if not if that is not the case
251:31 - will come into the else part and we will
251:34 - create one node
251:35 - notice
251:37 - of name Will name it as previous
251:41 - okay and previous
251:43 - and we will assign it first value to the
251:45 - head and we will run one while loop
251:48 - while
251:50 - my count is less than
251:55 - position minus 1.
251:57 - so uh what is the condition that we are
252:00 - doing well until my count is less than
252:03 - position minus 1 so here you can see uh
252:06 - this is count is
252:09 - 1 and position that we have entered is 2
252:12 - 2 minus two minus one is one so one is
252:16 - less than one which is not getting
252:18 - evaluated as
252:20 - false we are not going inside this while
252:23 - loop so this is the condition where I
252:25 - have a small list right so imagine we
252:28 - have five notes in that list and we are
252:30 - trying to delete the node which has a
252:31 - parent at the third index so we have to
252:34 - uh perform this while loop at once
252:37 - because we have to get that previous
252:40 - node to the uh second index that is the
252:43 - previous index let if you want to delete
252:45 - the third index third index node uh you
252:48 - have to get that previous node to the
252:49 - second index node okay so how we can get
252:52 - that we will write previous
252:54 - is equals to
252:57 - previous dot next
253:00 - and we will simply count plus plus
253:04 - and after that while
253:06 - they're coming out of that while loop we
253:09 - will write current
253:15 - is equal to previous dot next
253:20 - okay current is equal to previous dot
253:23 - next time previous dot next is equal to
253:27 - current dot next
253:30 - what I will do what I have done here is
253:33 - I will tell you don't worry and After
253:35 - exiting out this cell else Loop we'll
253:39 - just simply return the head of the list
253:40 - okay so this is pretty much that we have
253:43 - to do so till while loop I have I have
253:46 - told you what we are doing we are just
253:48 - simply creating one previous node and we
253:51 - will keep that previous
253:54 - upgrading updating updating until an
253:57 - endless will reach the previous node
253:59 - like I'll give you one example
254:02 - so this is the list one two
254:06 - three four five and we are trying to
254:09 - delete the
254:10 - index which is three and this is our
254:14 - head this is our tail and this is the
254:17 - position at which we are you want to
254:19 - delete the node okay so at first our
254:22 - previous is here so we are upgraded
254:24 - previous and come come the previous to
254:27 - the here so that our uh correct this is
254:30 - the current when we are assigning one
254:32 - current and creating one current and
254:34 - current is equal to previous dot next so
254:36 - after performing this step uh so our
254:39 - current will Point pointing to the index
254:42 - at which the node we want to delete and
254:46 - our previous will point to the previous
254:48 - node of the list
254:50 - okay and uh we'll just write say
254:52 - previous dot next is equal to current
254:54 - dot next we will simply create a link
254:56 - between these node and this node and we
255:00 - don't have a link between 2 and 3 and 3
255:03 - and 4 because the link which is created
255:06 - by this line is one two four and five so
255:09 - we have no more have the track to this
255:12 - third node inside the list because of
255:15 - this line line we have written previous
255:16 - dot X is equal to pattern dot next and
255:18 - after that we will simply return the
255:20 - head of the list
255:21 - okay so this is the idea that's okay so
255:26 - let me call that method
255:29 - delete at we will simply pass the head
255:32 - of the list
255:34 - and this method is also returning one
255:37 - head so we have to store that
255:40 - new head
255:43 - somewhere so I'm storing over here and
255:45 - after that we'll write print list and I
255:49 - will pass that new head
255:52 - so this is the idea behind relation it
255:57 - is a specified quotation Let's test it
255:59 - out one two three four and five
256:03 - this is list and uh you can see one two
256:06 - three four five is the list elements and
256:09 - let's suppose I have to delete the
256:11 - element which is at third index
256:14 - which is a third position so I have to
256:17 - delete this three so I have pass 3 as
256:21 - the position don't get confused three is
256:23 - the position not the value
256:25 - so here you can see the new list is
256:28 - returning after that method call is one
256:31 - two four five that is third position
256:33 - element is getting deleted so if you
256:36 - don't get don't get confused I will just
256:38 - run it run it again and I will write it
256:41 - simply 55 69 96 89
256:46 - now you can see I I know if I want to
256:49 - delete the 96 I can delete it by its
256:52 - position one two three and four fourth
256:55 - position is 96 so I want to delete the
256:58 - fourth
256:59 - note of the list here you can see 23 54
257:02 - 69 and after that 96 is getting deleted
257:05 - and 89 is uh again come at the end of
257:09 - the list
257:10 - so this is the idea of delete deletion
257:13 - operation
257:14 - at the user specified location so I hope
257:16 - you got the idea
257:18 - thank you for watching this video
257:23 - so hello and welcome back to the new
257:25 - video of the Java tutorial Series so
257:27 - till now we have covered
257:29 - singly linked list all right so let me
257:32 - show you
257:34 - if you are watching series uh
257:38 - so that's no problem but those who are
257:40 - watching just want to learn the links
257:43 - list part those for those I am telling
257:45 - we have covered this singly linked list
257:47 - we have covered all the operation we
257:49 - have covered insert operation deletion
257:51 - operation both three types insert at
257:53 - beginning insert at end inserted use a
257:56 - specified location
257:57 - likewise deletion operations are also
257:59 - performed we have uh covered how to make
258:02 - the list how to print the list how to
258:03 - print the length of the list how to
258:05 - search the element inside the list uh
258:08 - and and how to find the middle node of
258:10 - the list how to reverse list all these
258:12 - operation we have performed on The
258:14 - Single link list and I guess this is the
258:17 - uh pretty much idea that we have we want
258:19 - uh regarding the link list so now today
258:23 - onwards we are looking for the W linked
258:25 - list
258:26 - so let's get started so what is WL
258:28 - English uh in this video I will be
258:30 - telling you the theoretical part
258:31 - regarding the W links list so let's get
258:34 - started
258:35 - so let me create create a create a list
258:40 - over here
258:42 - okay
258:45 - let me create a list
258:52 - we'll try to understand each concept
258:55 - line by line
258:57 - okay
259:00 - so this since the one
259:07 - this is the line
259:09 - okay
259:10 - this line so
259:13 - okay so till now uh what we have covered
259:17 - is sincerely fish we know inside single
259:19 - English this is the node this is node
259:22 - which is which looks
259:26 - like in single English there is one uh
259:28 - link which is coming from here and there
259:31 - is link which is
259:32 - going here that is one node is connected
259:35 - to this node and this node is again
259:37 - connected to the another mode in the in
259:39 - that list and here this node contains
259:44 - data
259:46 - and here this contains next part okay so
259:51 - why this is this list called as single
259:54 - English is simple because this node is
259:58 - connected to the next node via a single
260:00 - link okay this is the single link that
260:03 - is getting connected to the next node so
260:05 - whereas it is doubly increased if you
260:07 - can see the node structure is different
260:10 - okay so this is the one
260:13 - and this is
260:15 - this is pretty much simple and single in
260:19 - English but the node inside a w linked
260:21 - list is represented as like this
260:24 - this
260:26 - this
260:28 - here
260:30 - here
260:33 - again here and one more here
260:37 - forget about my drawing
260:40 - okay just keep focus on the concept okay
260:43 - uh this is a that is the difference here
260:46 - you have only the data and the next part
260:48 - next part contains the address to the
260:51 - next node in the list and data part
260:53 - contain the actual data so here also we
260:55 - have a data part
260:57 - likewise here also we have data part
261:02 - here also we have data part
261:05 - and here also we have data part but
261:08 - nothing changes over here here also we
261:10 - have next part that is an address to the
261:13 - next next Link in in next node inside
261:15 - the list here also next next and here
261:18 - also we have next
261:21 - here also we have next and uh the this
261:26 - part right over here this contains
261:29 - previous
261:30 - okay I will tell you what is previous
261:32 - just bear with me uh
261:36 - previous
261:38 - previous
261:41 - okay so and one more thing is there
261:45 - this is
261:47 - one more linking over here
261:49 - this
261:52 - this which we have not seen in the
261:55 - single a link list all right
261:57 - this is the this becomes the and single
262:01 - in English it's uh one more thing single
262:03 - in English you can see uh is One
262:06 - Direction okay that means uh if you
262:09 - start from left
262:11 - it will go to the right only you cannot
262:14 - come back in that link in English it
262:17 - will go from left to right you you don't
262:19 - have any way like we have you have gone
262:22 - to the next here from this next node
262:24 - this from this next node you cannot come
262:26 - back okay all right so so this is the
262:30 - thing that we have seen in a single
262:32 - English
262:33 - we have node like this you can see they
262:37 - just keep tracking my pointer and each
262:40 - node contain previous previous means
262:42 - previous will hold the address to the
262:45 - previous node inside the list all right
262:47 - so if you if you can consider this one
262:49 - so in this previous part the address of
262:52 - this node this node will be saved over
262:55 - here
262:56 - okay so address of this node will be
262:58 - saved over here and in the next part the
263:00 - address of this node will be saved over
263:03 - here and in the data part as usual the
263:05 - actual data that node is going to hold
263:08 - that will get stored here okay so you
263:10 - will be asking uh what are what if the
263:13 - if it is the first node already if it is
263:16 - a large node then in that case the first
263:18 - node previous will hold the value of -1
263:23 - minus 1 and the last node of the list
263:27 - next should hold
263:30 - okay so this is the roughly irf idab uh
263:33 - W in English the advantage you get here
263:35 - is you can go from a left to right and
263:40 - you can come also backward from
263:45 - right to left because this this you you
263:48 - can get this idea better better you can
263:52 - check it over here this is the direction
263:54 - of the nodes
263:57 - this is the direction of the notes
264:00 - you can see
264:04 - here
264:07 - here
264:09 - here
264:11 - next node and the previous node the only
264:15 - thing is there are two ways you can go
264:19 - front by using the next and you can come
264:21 - back using the previous so instead of
264:24 - having just only one uh way where you
264:27 - where you are going from left to right
264:29 - in the lovely linked list you have the
264:31 - access to the next node also and the
264:33 - previous node also why so because it at
264:36 - the node part of this double link which
264:38 - contains the three parts that is the
264:40 - previous part data part and the next
264:41 - part previous part will hold the address
264:43 - to the previous node in the list and the
264:45 - next part will hold the address to the
264:46 - next Lane next node in the list and the
264:48 - data data part as usual holds the data
264:51 - whether it should be in uh in integer
264:53 - format character format string format
264:55 - any data type format data can be stored
264:58 - over here
264:59 - okay so this is the doubling fish idea
265:03 - and this is the theoretical part that
265:05 - you need to understand before you get
265:08 - your hands dirty using the totally
265:10 - linked list okay so go one more thing
265:13 - you can go in the
265:16 - web browser and you will just simply
265:18 - type doubly link list let me show you
265:22 - doubling English if you type and then
265:24 - first link in Java D Point comes and if
265:27 - you go here and here you can see oh nice
265:30 - article is there which will explain
265:32 - uh all those
265:34 - stuff regarding the doubling list I hope
265:38 - you got some idea about the public
265:39 - increase on the next next video onwards
265:42 - we will be start implementing the W link
265:44 - list using Code using Java thank you for
265:47 - watching this video
265:51 - so hello and welcome back to the new
265:53 - video of the Java tutorial Series so
265:55 - till now we have covered all the
265:56 - operations on the singly linked list so
265:59 - here you can see uh I hope you either
266:01 - are followed the series along with me
266:04 - and so we have seen how to make this
266:06 - English how to print it how to search an
266:09 - element how to find the middle node all
266:12 - the insert operation and all the delete
266:14 - operation as well so
266:17 - what I'm I will be thinking is from this
266:20 - video onwards we'll be starting for w
266:22 - linked list so we'll uh in our previous
266:25 - video we have saw the theoretical part
266:27 - of the VW link list any for me this
266:29 - video onwards we will be looking for
266:31 - how to
266:33 - perform all the operation on Adobe link
266:35 - list all right so for as we have
266:39 - discussed in single English we require
266:41 - one node which
266:43 - so the single legislation is made up of
266:45 - nodes so we have to make a node
266:48 - of our W link list so we cannot use the
266:51 - node which I which we have made in the
266:53 - single language because in WL English
266:55 - there is one uh previous pointer as well
266:58 - as the next pointer was there so that we
267:00 - can move for bi directly we can go uh
267:02 - left to right at the same time we can
267:04 - come right to a right to left as well
267:06 - okay so for that we have we will be
267:09 - covering uh
267:10 - creating one Java class so I will name
267:12 - it as
267:14 - node D node d means node of
267:19 - uh double in English all right so in
267:23 - this uh first of all we require data
267:25 - part
267:26 - so I will name that variable data and we
267:30 - will require
267:33 - two pointers that is the node d uh I
267:37 - will name it as previous so that it can
267:40 - hold the it will hold the previous
267:43 - address of the previous node in that
267:45 - list and one more is there node
267:48 - of type node D which is next
267:52 - which is as usual as we have seen in a
267:54 - single language part all right so now
267:57 - here let me call one Constructor of this
268:00 - class so that whenever we create an
268:01 - object of this class uh we have to pass
268:03 - the
268:04 - data
268:07 - data to this class so that we can make
268:09 - that nodes using that data okay so this
268:12 - Dot
268:13 - data is equal to data
268:16 - and it's for the first mode we will
268:19 - write as previous is equals to null and
268:22 - next is also equals to now
268:27 - all right so both are pointing to the
268:29 - two Arsenal uh for the single node okay
268:33 - so now what I'll be doing is this is our
268:36 - node part that that is pretty much we
268:38 - have to do and now I will go and create
268:42 - another Java class and I will name it as
268:44 - doubly link list
268:49 - list
268:54 - okay and I will hit enter
268:58 - all right so let me just increase the
269:00 - font size let's check whether I can
269:03 - increase it or not
269:08 - no I guess I can't decrease I hope you
269:11 - guys this font is visible to you all
269:14 - right so since we are taking input from
269:16 - the user so there is one library that we
269:19 - have to
269:20 - import first so I will import that
269:22 - import Java Dot
269:25 - ail dot star I will import every class
269:27 - from the util package and now inside
269:30 - this
269:31 - will create a object of the scanner
269:34 - class
269:34 - since we are looking multiple multiple
269:37 - methods inside this class so I will
269:39 - declare the scanner object of that
269:41 - scanner class uh globally okay public
269:45 - static
269:48 - scanner SC is equals to new
269:53 - scanner
269:55 - system dotting
269:58 - okay so now after creating the object of
270:01 - this class
270:03 - let me create
270:06 - two new
270:07 - variables so those those are will be
270:10 - it's public
270:12 - static off type node T so I will create
270:17 - add entail so as we have seen in our uh
270:21 - single link list lectures so we have
270:24 - here again we require a head and tail so
270:28 - that we can keep track of the first node
270:29 - of the list and the last node of the
270:30 - list all right so now
270:34 - in this video we will be talking about
270:36 - how to create a doubly resist okay so
270:39 - for that I will make one method I will
270:41 - name it as
270:43 - public
270:45 - sorry I will do it in next line
270:49 - public
270:52 - static
270:53 - and since it it is making our new
270:57 - linked list which is of type double link
270:59 - list so it must return the head of the
271:02 - head of the list so that we can get that
271:04 - head and print and perform all of the
271:06 - operation that we want to perform on
271:08 - that list all right so it it will return
271:11 - uh head which is of type node D that is
271:15 - the node of the double linked list okay
271:17 - so make
271:18 - I will name it as make list as we have
271:21 - seen our single English lectures okay
271:24 - and so here uh for the first time
271:27 - whenever you create a whenever we want
271:29 - to create a list the head and tail at
271:31 - initial point though those two will be
271:34 - pointing towards the null
271:36 - and now here also I will write 10 is
271:39 - equal to name and after that we will
271:41 - simply uh print one line and we'll ask
271:43 - the user to enter the data
271:45 - all right enter
271:48 - the data
271:50 - in the list
271:53 - okay so we are asking user to enter
271:55 - enter the data in the list and create
271:58 - one new variable
272:01 - data and SC dot extent
272:06 - will take the data from the user and
272:09 - again we will run one while loop and we
272:11 - will iterate over this while loop uh
272:15 - until an endless our data part is
272:18 - -1 so whenever the user words uh let's
272:21 - suppose user want to enter inside the
272:23 - five five elements tables like one two
272:26 - three four five and after that user can
272:27 - write a data value as minus 1 so that
272:31 - this while loop will get break and our W
272:34 - link list will be make it as one two
272:36 - three four five only okay so here we
272:40 - will uh whenever we get entered inside
272:42 - this while loop we know that enter data
272:47 - part is not -1 so there is a user who
272:50 - wants to insert a new node in that list
272:53 - so we will make that a new
272:56 - node
272:58 - B
273:00 - and we will call it as new node D and we
273:04 - will pass the data part that we so this
273:07 - is the Constructor that
273:09 - we have build it over here so we are
273:12 - passing this data to this data to this
273:16 - Constructor
273:17 - and now after passing the data after
273:19 - building the Constructor we will write
273:21 - one if condition and we'll write if head
273:24 - equals to equals to null so think about
273:27 - think about it whenever head will be
273:29 - null so if it had a heading head is
273:32 - pointed towards Channel if and only if
273:34 - it is the first element that we are
273:36 - going to that we are trying to insert in
273:38 - the W link let's write so in that case
273:41 - we will just simply uh assign the head
273:43 - value to to the
273:46 - a new node a new node D value and we
273:49 - will assign the tail value is it also
273:51 - equals to new node value because
273:53 - ultimately uh this is the first node
273:55 - inside that list so therefore head
273:57 - entail will both want to get
274:01 - element uh so sorry L not element that
274:03 - node itself okay so we will write uh new
274:06 - node d
274:07 - dot next
274:10 - is equals to null
274:12 - and we'll write new note D
274:16 - Dot
274:18 - previous is also is equals to not so
274:21 - both will be pointing pointing towards
274:23 - channel so because there is no uh new
274:25 - node inside uh another node inside that
274:28 - list it since it is the first node else
274:31 - uh so whenever if head is not equal
274:33 - signal that means there is there are
274:35 - some elements there are some nodes which
274:37 - are present inside that double in
274:40 - English so we'll come inside with a else
274:42 - part we will write tail
274:45 - dot next
274:47 - is equals to new node new node d
274:50 - and we will write new node
274:53 - D dot
274:56 - previous is equals to
275:00 - 10
275:01 - we will write
275:05 - tail is equals to new node d
275:09 - and we will write 10 dot next
275:15 - is equals to
275:17 - okay so these are the tasks that we are
275:20 - we are going to perform is if it is head
275:22 - is not equal head is not a questionable
275:25 - uh so what we will be doing is uh tail
275:27 - dot next uh is equals to new node so we
275:30 - will uh assign uh the whatever the node
275:35 - which is at the last the tail is there
275:38 - all right so we are assigning the Tails
275:40 - next value to the node that means we are
275:43 - making that link for the previous node
275:46 - in the list to the to that next part
275:49 - okay and so here uh new node dot
275:52 - previous is equals to 10 and we are
275:54 - assigning new nodes previous to the tail
275:56 - that means we are making this linkage
275:59 - between the last let me show it let me
276:02 - show you
276:03 - let's suppose uh
276:05 - let me commit it out
276:07 - suppose this is the list one two three
276:10 - and we are trying to insert 4 inside the
276:13 - W link list okay all right so here uh we
276:16 - will as a tail is here ultimately uh
276:19 - this is this is the last element in that
276:21 - list tail is here we'll assign the Tails
276:23 - dot next that means this nodes next part
276:26 - to this new node okay so we are making
276:29 - this uh left to right connection in this
276:32 - wave language and we will write new node
276:35 - dot previous that is this this nodes
276:38 - previous to tail so we are making that
276:40 - right to left connection as well and
276:43 - after making those two connection we
276:45 - will simply uh change the value of the
276:47 - tail we will assign the tail is equal to
276:49 - new node because since this element is
276:51 - getting inserted for in the in the list
276:53 - so uh so this becomes the last element
276:55 - uh for now that's why we have to update
276:58 - the tail since the tail is keeping the
277:00 - track of the last node inside the list
277:02 - all right so and you will write tail dot
277:04 - next is equal soon as so we assign this
277:07 - next to the melts indicating that this
277:09 - is the last element inside the list okay
277:12 - so these are operation that we have to
277:14 - perform after performing this operation
277:16 - either the If part will get executed or
277:18 - the else part will get executed executed
277:21 - after that we will again
277:24 - ask user to give us a new
277:28 - data okay so it will ask again the user
277:32 - to enter the new data and it will again
277:34 - go and check whether the data part is
277:36 - not equals to one or not when it is
277:38 - equal when it is equals to 1 minus 1 it
277:41 - will go out of that Loop and we will
277:43 - just simply return head of the list
277:46 - okay so this is pretty much that we have
277:50 - to perform inside this
277:53 - okay so these are the operation uh I
277:56 - hope you got the idea how to make a
278:00 - doubly links list so
278:02 - let's quickly
278:04 - run this so for running purpose we
278:08 - require one
278:10 - our main method so we will write a main
278:13 - method here and inside this main method
278:16 - we will call our make list function and
278:20 - you
278:22 - so for our make list function
278:25 - since the make list function is
278:26 - returning ahead to us so we will have to
278:29 - store that head
278:32 - this head variable
278:34 - all right and after this let me call
278:37 - this okay so let's go and run this
278:41 - if you are not getting any errors we are
278:44 - successfully trying to end okay so here
278:47 - you can see enter the data in the list
278:48 - let me make a list as one two
278:53 - three four five and uh if I say uh it's
278:58 - done I these many elements that I want
279:00 - to insert this list after that I can
279:02 - write -1 and
279:03 - it will came come out of this for Loop
279:06 - not for Loop sorry white Loop and after
279:09 - that it will return the head list so
279:11 - this is the idea behind how to create a
279:16 - list which is of w type w is in doubling
279:19 - W link list okay so in a upcoming videos
279:23 - we will see all other operation of the W
279:25 - link list so thank you for watching this
279:27 - video
279:32 - so hello and welcome back to the new
279:34 - video of the Java tutorial Series so
279:36 - till now we have covered the doubling
279:38 - list
279:39 - one functionality that is how to make
279:42 - the doubling list how you can make one
279:44 - doubly linked list using Java and uh in
279:48 - our previous video as you as you can see
279:49 - we have created created a node
279:52 - um which is after which is of double
279:54 - type double link list which have which
279:57 - can go bi-directional which can go from
279:59 - this node to this node and it it can
280:01 - also come back from that note to that
280:03 - one that is left to right and right to
280:05 - left okay so in the our previous video
280:08 - we have also talked about uh how to
280:10 - create a w linked list
280:12 - so how to build one so if you you
280:15 - haven't watched that video go and check
280:17 - that video first watch that uh then come
280:19 - back to this video so now in this video
280:22 - we will be covering how to uh print the
280:25 - list all right so in our previous video
280:27 - we have built the list so in this video
280:29 - we will uh talking about how we can
280:32 - print the double linked list okay
280:34 - the logic is uh pretty similar to the
280:37 - that one that we have seen in the single
280:40 - English okay so in this video
280:42 - okay let me just first make this notes
280:48 - so that you guys can understand easily
280:50 - all right so let me just quickly make
280:52 - that make that list for you
280:56 - and I will make it as
280:58 - this one
281:01 - this one
281:05 - this this
281:14 - by the way guys how you how you are
281:16 - enjoying enjoying this series I hope do
281:20 - comment out if you have any doubts I
281:23 - will clear it out all right
281:25 - Okay so
281:29 - don't mind my drawing
281:32 - just focus on what I am trying to tell
281:35 - you and
281:37 - you'll get that what I'm trying to tell
281:39 - you okay
281:41 - so look at here
281:43 - this is our double link Lister so this
281:46 - is the direction that we are
281:48 - first going
281:51 - forget about it let me take my pencil
281:54 - this is the direction and in this
281:57 - direction this will be Direction okay so
281:59 - you can go from uh this this direction
282:02 - also and if you want you can come from
282:04 - this direction also so we are trying to
282:06 - print this list okay so first thing
282:08 - first
282:10 - try to let's try to pseudocode this all
282:14 - right so we will try to think or build
282:17 - one logic okay so what do you think how
282:19 - you can print this list okay so uh there
282:22 - is a concept that uh I have taught you
282:24 - in the previous video like this uh we
282:27 - have keeping the track of the head and
282:28 - tail all right so if you guys can
282:31 - remember head head means the node that
282:35 - comes first in that list okay so for
282:39 - that
282:41 - here is the head and tail means the last
282:44 - last node of the list okay so we are
282:49 - going to use head
282:51 - you can also use Tail as well but in
282:54 - that case you will be printing the list
282:56 - in the backward Direction okay so in
282:59 - this video I will be talking how to
283:01 - print the list in this direction okay so
283:03 - you can take it as homework and you can
283:05 - try to solve uh or build one logic where
283:08 - you can uh where you have the Tails axis
283:10 - Tales means this is the last node of the
283:11 - list and you can you're going to print
283:13 - uh list in a backward backward Direction
283:16 - okay so it's you can take it as a
283:19 - homework so okay uh here we'll use head
283:23 - okay so we will
283:26 - run a while loop to check
283:29 - whether
283:31 - to pre not check to print this list okay
283:33 - so we will we will use the while loop
283:36 - and you will use the head okay so each
283:39 - time
283:40 - we will get get to that head we will
283:43 - trying to paint that data
283:46 - get to head
283:49 - print the data
283:52 - okay after printing the data uh to move
283:55 - to the next node in the list we have the
283:57 - next uh next uh next ad next pointer
284:01 - which is holding the address of the next
284:03 - node so we will write logic so that data
284:08 - uh data uh the head will move
284:14 - to the
284:15 - next node
284:19 - let me increase it to the side of the
284:21 - Box okay so first thing first we will
284:24 - get the head we will print the data
284:26 - inside that node which head is currently
284:30 - pointing to and where uh assign heads
284:33 - value to the current head dot next so we
284:37 - will iterate through this whole
284:41 - list and when we are trying to stop
284:43 - whenever our head is pointing towards
284:46 - another okay so when our head is point
284:49 - to point will Point towards anal when it
284:53 - when head will come here and we will
284:55 - assign the new heads value to this its
284:58 - next node node and it's there is no next
285:00 - node inside the list so head will
285:02 - pointing towards anal and we can stop
285:05 - at that condition okay so quickly we
285:09 - will go in our IDE
285:11 - and try to quote this out
285:13 - okay so we will here I will make one
285:16 - function or method whichever you you
285:19 - call it public
285:21 - static so we are just printing this list
285:24 - so we are not uh doing anything uh any
285:28 - operation we are just printing the notes
285:30 - of the list so there should not be any
285:32 - return type for this method and we will
285:34 - write print list
285:37 - okay and uh since uh we want the head of
285:41 - the list as our
285:44 - input to this method you will get that
285:47 - head and as as I said told you we will
285:51 - just simply print uh
285:53 - elements
285:57 - in the list
286:00 - are and after that
286:03 - uh
286:04 - we will perform one while loop and our
286:07 - while loop will run until our head is
286:10 - not equals to
286:12 - now
286:14 - okay so if the head is not equal to null
286:16 - we'll just simply print
286:19 - the heads data so we will write
286:21 - head.data we are trying to printing the
286:23 - data and after that we will
286:27 - print one one space because for that our
286:31 - elements can differentiate with each
286:33 - other so one space should be there and
286:35 - after printing this we will uh reassign
286:38 - the heads value to the Head dot next
286:40 - add dot next
286:42 - we'll assign this value to the head so
286:44 - that way uh we can it iterate to the
286:47 - next node in the list okay so if our
286:50 - head is equal to equal to null that
286:52 - means we are at the end of the list we
286:54 - are printed all the all the elements
286:57 - so we will just print in print One new
286:59 - line so that whenever we will build
287:01 - another function so function call gets
287:03 - executed to the new line okay
287:07 - okay so here in to run this method
287:12 - we have to call that method we will
287:14 - write print list and we will pass the
287:18 - head
287:18 - that we have stored here while making
287:22 - the list okay so what we are going to do
287:24 - here we will make the list and we will
287:26 - print the list okay I hope
287:29 - there will not any error let's see if we
287:34 - got any error okay so for now it's
287:36 - running okay so now let me give the
287:39 - element as one six eight nine four five
287:43 - six and after that we will write -1 okay
287:47 - so here you can see elements of the list
287:49 - are one six eight nine four five six
287:52 - these are all the elements that we have
287:54 - I have entered over here okay one thing
287:57 - is uh this is printing the new every
288:01 - element in the new line I don't want
288:03 - that because yeah if if there is 100
288:06 - elements in the list and we are trying
288:08 - to print that list it will take the
288:10 - whole lot of space in the console okay
288:11 - so we'll try to eliminate that uh we can
288:15 - do is print Ln instead of print Ln we'll
288:17 - write print and we can again call this
288:20 - method so that instead of printing the
288:22 - each element in the new line it will
288:24 - print it in a single line itself okay
288:27 - six six five one two four five
288:32 - minus 1 will print a six six five one
288:35 - four five nine these are the elements
288:37 - that I have entered over here you guys
288:39 - you can see
288:40 - so this is the idea how you can print
288:44 - the W linked list so you can try uh to
288:48 - print this
288:49 - same list
288:51 - in a backward for backward Direction you
288:53 - have the Tails uh axis that is the last
288:56 - note you can build one logic and try to
288:59 - print this list in a backward Direction
289:01 - okay so thank you for watching this
289:03 - video and I will see you in the next one
289:06 - so hello and welcome back to the new bit
289:08 - of the Java tutorial CB so till now we
289:11 - have covered or or you can say we have
289:14 - started uh to seeing the W links list so
289:18 - we have uh
289:20 - seen how to make a doubly linked list in
289:23 - our previous video we have seen how to
289:25 - print
289:26 - uh W link list so what we'll be doing in
289:29 - this video is we will try to implement
289:32 - another functionality of w linkage that
289:34 - is how we can find the length of the
289:35 - replication all right so let's go in our
289:39 - print and we'll first as usual we will
289:42 - try to build the logic
289:44 - by using the paint and after that we
289:47 - will go inside our ID and try to cut it
289:49 - out all right so here what you can think
289:52 - of how we can find the length of this
289:56 - link list so here let me
290:00 - to
290:02 - three forget sorry about my drawing four
290:05 - so these are the four elements in that
290:08 - in this W link list so we we have to
290:12 - make one function that that will take
290:14 - the head of the link list uh W linkage
290:18 - that is our WWE in English it's uh and
290:21 - it will print or it will give us or
290:23 - return the length of the list like the
290:27 - how many nodes which are better than
290:28 - inside that list okay so for that
290:32 - uh we can't perform it in two ways like
290:36 - we have did in our uh previous video
290:39 - where we are trying to print the list I
290:42 - I have told you uh we can print the list
290:45 - in two ways also by using the head and
290:47 - by using the tail also if you are going
290:50 - to use the head you are painting the
290:52 - list from left to right and whenever you
290:54 - are you are trying to print the list
290:56 - using the tail we are you are you you
290:58 - are printing the list from right to left
291:00 - that is in the backward Direction okay
291:02 - so here also we can uh
291:04 - use both the approaches of head and tail
291:07 - if you're trying to print the find the
291:10 - length of the list using the head that
291:13 - means you are going from left to right
291:15 - and whenever you are trying to get the
291:18 - elements or how many elements are
291:19 - present inside the node you are just
291:22 - from by using the tail you are
291:24 - simply going from
291:26 - right to left okay
291:28 - so these are the two approaches in this
291:30 - video I will be talking about the
291:31 - approach that uh that is uh for by using
291:34 - the head you can try to solve this
291:36 - similar method by using the tail as well
291:40 - take it as a homework as a challenge you
291:43 - can solve it okay so
291:45 - here for the printing purpose we know we
291:49 - have had
291:51 - we just have to
291:53 - okay so first
291:55 - let's make we have head
291:58 - is given to us
292:01 - all right and now what we will be doing
292:04 - we will create one
292:07 - create one counter variable
292:10 - variable
292:15 - we will create one counter variable
292:17 - which will count the nodes in that
292:21 - list and we will increment
292:27 - we will increment the heads value
292:30 - each time and we will require while loop
292:34 - also to perform this operation okay so
292:37 - idea is simple we will run one while
292:40 - loop over this over this doubly linked
292:43 - list and what we will be doing we are
292:45 - just iterating over this
292:49 - linked list each time we will update the
292:53 - value of the head and each time whenever
292:55 - we are trying to update the value of the
292:57 - head which we will also increment the
292:58 - counter variable by plus one uh we will
293:02 - we will write a counter variable by plus
293:04 - one so that we know we have passed from
293:07 - one node to another node and we have we
293:09 - will count that nodes as a node in in
293:12 - the link list okay so this is the idea
293:15 - let's get it get into our IDE and try to
293:19 - call it out
293:21 - okay so we'll make one functional method
293:23 - whatever you call it public static so
293:26 - this we are simply finding the length
293:28 - Okay so I don't think so we are we have
293:31 - to pass all we have to return anything
293:34 - so we will for now we will type the
293:37 - return type as
293:39 - wide and I will name the function as
293:43 - length
293:45 - length and since we are finding the
293:49 - length we need two axis
293:52 - the head that we will get from the user
293:55 - and after getting the hair as we have
293:58 - till we will need one counter variable
294:01 - so we will need one counter variable I
294:04 - will name it as Z account and I will
294:07 - initially we will assign it as value 0.
294:09 - and we will run one while loop
294:12 - while our head
294:15 - is not equals to
294:18 - now so until our head will not point to
294:21 - null we will perform this operation if
294:23 - our head is not pointing towards General
294:25 - that means there is a node inside the
294:27 - list we have to count it so for that
294:29 - purpose we will write count plus plus so
294:32 - don't get confused uh
294:34 - this is just uh as equals to the this
294:37 - one count plus one
294:39 - this is the plus plus operator that we
294:42 - can use whenever you want to increment
294:44 - the value by one this is as similar as
294:47 - this you can write both of both anyone
294:49 - anyone from this it will work at same
294:52 - okay so we will write head
294:55 - is equal to head dot next
294:58 - okay so we'll uh increment the heads
295:03 - to the next node okay so we will perform
295:05 - in this operation until the head is not
295:07 - equal when that head is equal to null
295:10 - that means we have we have successfully
295:11 - iterated over all the nodes in that list
295:13 - and after that we will just simply write
295:18 - the
295:20 - length
295:21 - of the list is
295:33 - value of the count over here okay so
295:36 - this is the idea behind the length
295:39 - function okay so let me get into our
295:42 - main function main method and we'll call
295:45 - that length method and we have to pass
295:48 - the head all right so we are passing
295:50 - head over here okay
295:52 - so you guys are thinking uh what if the
295:56 - heads there is no element present inside
295:58 - the list so for that we have also
296:01 - covered here we have assigned 0 as a
296:04 - count value if the if there is no
296:06 - element which is present inside the list
296:09 - that means head is our head is pointing
296:12 - towards the null all right so if the
296:14 - head is pointing towards the null this
296:16 - will not evaluated as true and this will
296:19 - not run while loop will not run and
296:22 - we'll just simply print the length of
296:23 - the list to 0 that means there is no
296:25 - element inside that list okay so we will
296:28 - check that once we run let me just run
296:31 - this first
296:32 - so that you can get the idea let me take
296:36 - one two three four and five okay minus
296:40 - one so here you can see element in the
296:42 - list are that is our previous videos
296:43 - output that that is we are just printing
296:46 - the uh notes in the list and the length
296:48 - of the list is five because one two
296:50 - three four five there are five five
296:51 - elements in the list we have sampling
296:54 - the simple bending the length of the
296:55 - list is five
296:57 - okay so we will check one one more
296:58 - condition if there are no
297:00 - notes present inside the list we will
297:03 - write -1 simply we will write minus 1
297:05 - that means we are not interested to uh
297:09 - create any node inside the list okay so
297:11 - element in the list are there nothing is
297:14 - going to get printed over here because
297:15 - there are no no notes in the list
297:17 - and the length of the list is also zero
297:19 - so it's working fine so I hope you heard
297:23 - the idea how to print the length of the
297:25 - list how to print the list and how to
297:27 - make the uh doubly links list so in our
297:30 - upcoming videos we will uh perform some
297:32 - more operation that is insertion
297:33 - operation and deletion operation
297:35 - which we have performed in the single
297:37 - English also so see you there thank you
297:40 - for watching this video
297:43 - so hello and welcome back to the new
297:45 - video of the Java tutorial Series so
297:47 - till now uh we have covered uh wait we
297:51 - have covered
297:54 - the how to make the list
297:57 - how to print the list how to find the
297:58 - length of the list so in this video
298:00 - onwards we'll be performing the
298:03 - insertion operation on the our link list
298:06 - that is of the typewritten list so in
298:08 - this video we will be seeing how we can
298:10 - insert a node inside a w in English
298:12 - which is at the beginning so we are
298:15 - trying to uh create one method which
298:18 - will insert a new node in the W in
298:20 - English at the very first
298:22 - position of the English Okay so assume I
298:26 - will take the last video
298:29 - output it's a paint itself so here here
298:34 - you can see one two three four four
298:36 - nodes are there and we are trying to
298:38 - insert a new node in the list so okay so
298:40 - let me just create one new node quickly
298:42 - uh so that you can understand
298:45 - so this this
298:48 - here uh
298:50 - hero previous value will be stored
298:54 - here our next value will be
298:56 - stored and here comes our
299:00 - data okay so uh look at here we are
299:04 - trying to insert this node over here
299:06 - okay so initially uh you can see head is
299:08 - over here and tail is over here so in
299:12 - this video we are looking about
299:14 - inserting a node in the beginning so we
299:16 - don't have to take care of the tail tail
299:18 - part we just had to take care of the
299:21 - head part okay so look look here this is
299:24 - the previous so wait let me
299:28 - this is next so if if you are trying to
299:31 - insert this node inside this uh existing
299:34 - W link list so what you what all think
299:37 - you you have to do you can see uh
299:40 - this head next is pointing to this okay
299:44 - and this heads previous is pointing to
299:46 - the towards null so uh this this is that
299:49 - represents our first node because the
299:51 - first nodes uh previous should always
299:53 - point to the null uh that represents
299:55 - this is the first node and that next
299:57 - should point to the next node of that uh
299:59 - list itself okay so what we can do is uh
300:02 - we have two and uh build the
300:05 - connection of here this is our new node
300:08 - new nodes next to the this node okay so
300:13 - we are building that connection by
300:15 - assigning the new nodes next to the Head
300:17 - value heads is representing to the first
300:19 - well first node of the list and after
300:21 - that we have to uh
300:24 - give our assign the value of heads
300:27 - previous to this new node okay so we are
300:30 - assigning uh we are telling that our uh
300:33 - this heads previous should point to this
300:36 - new node okay so by doing this uh we
300:40 - have successfully uh linked our new
300:42 - nodes next to the uh current first node
300:45 - and we are linked heads previous to this
300:49 - new node now we just we just have to
300:52 - Simply
300:53 - get back our head okay so we are
300:56 - assigning the value of head to this new
300:59 - node so that uh this will Point uh this
301:02 - head will point to the new node and this
301:04 - new node will become the first node of
301:06 - the list after an insertion operation so
301:08 - these are all steps that we have to
301:10 - perform uh so that we can insert a node
301:13 - in the very first beginning of the W
301:15 - link list okay so let's go and try to
301:18 - cut it out
301:20 - okay so come I will come here uh I will
301:22 - comment it out and I will write one
301:24 - comment insert at beginning
301:26 - so that you guys can understand I I am
301:28 - sharing this code as well insert
301:30 - at beginning
301:33 - okay
301:34 - short form
301:35 - you can see
301:36 - okay so let me create one method
301:41 - I will come here and I will write public
301:45 - static
301:46 - uh since we are inserting a new node all
301:49 - right so we have to return the new new
301:51 - head of the list so that we whenever and
301:53 - next time we are trying to print that
301:55 - list uh we will print the list from the
301:57 - updated header head
301:59 - okay so we have to return on no a new
302:02 - head of the list so for that return type
302:03 - should be node
302:05 - we are returning a node all right so and
302:08 - we will write insert
302:11 - at
302:16 - beginning
302:19 - okay so we'll write this and uh
302:21 - obviously uh to insert a node in the
302:23 - list we need a existing list as well so
302:26 - we'll ask for user to give us a list
302:30 - first so that we can insert a new node
302:32 - inside that existing list okay so we'll
302:35 - write simply write first of all we will
302:37 - ask the user to enter the data first we
302:39 - are trying to new uh insert a new node
302:42 - so first of all we have to create that
302:43 - new node enter the
302:45 - data
302:48 - to insert
302:53 - okay so after asking this
302:57 - we will simply create one data and we'll
303:02 - ask our user to
303:04 - hey
303:05 - give us one integer
303:07 - to that we can assign the data part of
303:10 - that node okay so after creating this we
303:12 - will just simply create the actual node
303:15 - we'll assign name it as new
303:19 - node of typewalling list and we will
303:23 - write new node D and we will pass that
303:25 - data to the Constructor of the node D
303:27 - class okay so first thing first if you
303:31 - if you are trying to insert that node
303:33 - inside a w links list what if the list
303:35 - doesn't have any elements okay so how to
303:38 - check that case if the double linkage
303:41 - doesn't have any elements simply we will
303:43 - write head is equal to equal signal if
303:45 - head is pointing towards a null that
303:48 - means uh that
303:50 - linked list has no elements no nodes
303:54 - inside this and since this is a it is a
303:58 - double link list so we have to write one
304:00 - more condition we have to check whether
304:02 - the tail is also pointing towards
304:04 - another so in that case uh both of if
304:08 - both are pointing towards null that
304:10 - means the list is empty so we will
304:12 - simply write head
304:14 - Dot
304:16 - sorry head is equals to 10 Dot
304:25 - sorry we'll just write in
304:28 - is equals to note
304:32 - you know
304:35 - my ID sucks man okay head is equal to 10
304:39 - is equal to U naught okay so we will
304:41 - assign that new nodes value to the head
304:43 - and tail simply okay that means we are
304:46 - trying to insert the first node inside
304:48 - the list which is pretty simple okay so
304:51 - if that is not the case uh that means
304:53 - the list we have passed through this
304:55 - function has already contained some
304:58 - elements uh contains some nodes so in
305:01 - that case we will come inside this else
305:02 - part and as we have discussed in our
305:04 - print paint window here you can see we
305:06 - have to assign the next part to this
305:08 - head and this previous part to the uh
305:11 - new node okay so for that we will go and
305:15 - write like this head
305:18 - dot previous
305:19 - is equals to new node
305:22 - okay so what we have done first we have
305:25 - uh heads previous which is uh currently
305:27 - pointing towards anal we will take that
305:29 - and we will assign the value as new node
305:33 - so that this backward linking should be
305:36 - uh should get connected first and after
305:39 - that we will write new node
305:42 - you know D dot next is equals to
305:46 - head okay so what I mean by writing this
305:50 - is new node dot next is equal to head so
305:53 - we are creating this linking now okay so
305:57 - we are linking our new node to the
306:00 - existing head okay and after creating
306:02 - these both links we just have to create
306:04 - head is equals to
306:06 - new node
306:08 - okay so we will just simply reassign the
306:11 - value of the head to the new new node
306:13 - because our head will change and now
306:15 - because we are inserting the uh node at
306:18 - the very first beginning so our head
306:20 - will change
306:21 - so we have reassigned the heads value
306:23 - and we will just simply write a new node
306:26 - D dot
306:28 - previous should point to the null now
306:31 - our new node uh is our the first node so
306:35 - its previous should point to the null so
306:37 - before that there is no element in the
306:40 - list additional Point set okay so we
306:43 - will just write simply return
306:46 - head we will return the head
306:49 - which is the updated head okay now this
306:52 - is the idea I guess okay so let's test
306:56 - it out
306:57 - we will write
306:59 - okay let me comment it out
307:02 - insert
307:04 - Ops insert operations we are performing
307:07 - from this onwards
307:09 - okay let me call insert at beginning and
307:13 - I will pass the head we are that we are
307:15 - taking from the previous videos itself
307:19 - okay and now after performing this uh
307:22 - method this method is returning one head
307:25 - okay so we have to capture that head
307:27 - somehow in our main method so we will
307:29 - create a new node of type D we'll assign
307:32 - the new head is equal to
307:35 - so
307:36 - I will call it as new head because head
307:40 - is already declared over here so you
307:42 - can't give that same name to the again
307:44 - and again okay and after that we will
307:46 - just again call printless method so that
307:49 - we can see our new element uh is there
307:53 - or not okay now but this time we will
307:56 - give the new head because head is
307:58 - updated because we are trying to
308:00 - inserting the mode in the first okay and
308:03 - we will again call the length method and
308:05 - we've got new head okay so let's go and
308:10 - check it out whether it's working or not
308:14 - okay we are trying one two three four
308:16 - and five and after that I will give
308:18 - minus one so here you can see element in
308:20 - the list are one two three four five
308:22 - these methods are running by the way I
308:24 - will tell you and after that
308:27 - the length of the list is five you can
308:29 - see one two three four five five
308:30 - elements are there and now now it is
308:32 - asking me to enter the data
308:35 - okay so we will let's suppose I want to
308:37 - enter 10 okay so you can see element in
308:40 - the list are ten one two three four five
308:42 - and the new length of the list is six
308:44 - because we have entered a new a new
308:47 - element in the list at the very first
308:50 - beginning
308:51 - okay so this is the idea behind uh
308:54 - insertion operation in the double
308:56 - English at the very first beginning
308:58 - okay so I hope you guys got some idea if
309:02 - not go and go backward and watch the
309:05 - video again you will get it if you have
309:07 - any doubts ask it in the comment section
309:09 - and like share subscribe thank you
309:16 - okay so hello and welcome back to the
309:17 - new video of the Java tutorial Series so
309:20 - till now we have started seeing the
309:22 - doubling list and we have seen some of
309:25 - the operation on the wax as well uh that
309:29 - is the insert at beginning and finding
309:31 - the length and printing the list and
309:33 - making the list so what we will be
309:35 - covering in this video is how to insert
309:38 - a node in a w news list at the end of
309:41 - the link list okay so at the end of the
309:43 - doubling Commission
309:45 - dot get confused okay
309:47 - insert
309:49 - at
309:50 - and okay so this is our Target we have
309:54 - given one list of type double link list
309:57 - and we have we want to insert the new
310:00 - node in that list existing list at the
310:03 - end of the link list okay so this is the
310:06 - task that we want to perform okay so
310:08 - here you can see this is our new node
310:11 - this is our new node try to follow my
310:13 - pointer uh its previous is this and next
310:16 - is this both are pointing towards
310:18 - analogy itself and this is our list one
310:20 - two three four elements are there in the
310:22 - existing double link list and this is
310:24 - our head which is pointed the first
310:26 - element in the list and this is our
310:27 - table which is pointing to the last
310:29 - element in the list so remember in our
310:31 - previous video we have talked about the
310:32 - insertion at beginning where we have we
310:34 - have formed all the operation using the
310:36 - head itself because head is head
310:38 - represents the first element in the list
310:41 - and they represent the last so in this
310:43 - video we will be talking how to insert a
310:45 - node in the last so for that we require
310:47 - a Tails access so that we can perform
310:49 - all the okay
310:55 - so to perform those operations we'll
310:59 - just simply see how we can uh do this
311:01 - okay
311:02 - so now first thing first uh we have to
311:05 - check whether the list is empty or not
311:07 - like we have seen in our previous video
311:09 - if the list is empty then we'll simply
311:12 - assign the heads value uh to the new
311:14 - node and tells value itself to the new
311:16 - node we don't have to take care of the
311:18 - all those things whether it is uh we are
311:21 - inserting at the first whether we are in
311:23 - setting at the end since it is the first
311:25 - uh node in the list there is no first
311:28 - and last out in that list okay so we
311:30 - have to check that Contour case as well
311:32 - we will check that in our KO code and
311:34 - else if that is not the case here you
311:37 - can see this if it is the case that
311:39 - there are some elements there are some
311:41 - nodes which are present inside that list
311:42 - so in that case we have to perform some
311:44 - operations so that we can uh enter this
311:48 - node at the end of the linked list okay
311:50 - so what we will be doing uh we'll assign
311:52 - the tail dot next is equal to new node
311:54 - so this is our tail which is currently
311:56 - the last element and we'll assign the
311:58 - Tails next to the
312:01 - new node we'll make uh since the Tails
312:05 - next is uh pointing towards a null
312:07 - because since this is the last node we
312:09 - this next is pointing towards nulls we
312:11 - will make that next to point to over the
312:13 - new node okay and we will assign new
312:16 - node dot previous is equal to tail we
312:18 - will assign this we will make this
312:20 - connections okay and after making this
312:23 - connection both next and previous
312:24 - connection we will just simply write a
312:27 - new node dot next is equal to another so
312:29 - uh if we are inserting this node inside
312:32 - this W linked list so this will come at
312:36 - the very end of the list okay so it's
312:38 - nulls next should be pointing to the
312:40 - null okay after performing after
312:42 - creating this those two links we'll just
312:44 - simply make this make this uh next to
312:48 - point null okay so it will represent uh
312:51 - yeah this is the end of the niche you
312:52 - can you can't move forward
312:55 - okay so these are operation that we have
312:57 - to perform so let's go and
313:00 - call it out
313:03 - okay let me get into my IDE
313:06 - okay so we'll make one function as usual
313:09 - we'll write public static
313:12 - and we are trying to insert a node in
313:14 - the links list okay so after that we
313:17 - will we have to return uh new list that
313:22 - is updated list to the
313:24 - method okay so for that we will write
313:26 - node the return type should be node D
313:28 - and we will write the function name as
313:32 - insert
313:33 - at end
313:35 - and here we are trying to pass the
313:39 - head of the list so that our method
313:41 - should get the access to the entire list
313:43 - by passing the head of the that is the
313:46 - first node of the list okay here we will
313:48 - just simply print uh enter the data you
313:50 - want to insert
313:52 - quickly I will write enter the
313:54 - data
313:56 - that
313:57 - you want
313:59 - to
314:00 - insert
314:02 - okay and after that
314:04 - we will simply create one new variable
314:08 - of type data and we'll write SC dot an
314:10 - extent
314:11 - and get that data and since we have now
314:15 - the data we want to insert a new node we
314:17 - first we have to create that node we'll
314:19 - create that node like new
314:23 - new note D
314:27 - new naughty and we'll pass the data to
314:30 - the Constructor of the node D class and
314:33 - again I have as I told you we have to
314:35 - check the base case of the corner case
314:37 - that is if the head is equals to equals
314:41 - to null and our tail is also equals to
314:45 - equals to
314:46 - null that means there is no node inside
314:49 - the list the list that we have given
314:52 - over here to this method is empty and
314:55 - there is no node inside that list in in
314:57 - that case we will simply write head is
314:58 - equals to tail is equals to new node
315:01 - that's it and
315:04 - if that is not the case we will get into
315:07 - the latest part and we will write tail
315:09 - Dot
315:11 - next is equals to new node
315:14 - you know D
315:15 - and so by writing this line what I mean
315:18 - is tail dot next is equal to new node D
315:19 - here you can see this is our last
315:22 - element and this is next is pointing
315:24 - towards now so its next is should not
315:27 - point to the null anymore uh we will
315:29 - take that next and make it Point towards
315:33 - uh our new node okay so now the Tails
315:36 - next should point to the
315:38 - new node and after that we will write
315:41 - new node d
315:43 - uh new node D dot previous
315:47 - should point to the tail
315:49 - okay what I mean by writing this sign is
315:52 - uh you know this its previous should
315:55 - point to the tail all right so we are
315:57 - trying to make this connection from the
315:59 - previous previous last node and our new
316:02 - Nash node okay so we are trying to make
316:04 - that connection after making that
316:05 - connection we will simply write new node
316:07 - is equals to
316:09 - next is equal to
316:12 - no
316:14 - after making that connection
316:15 - successfully we were updated A Lash node
316:18 - should last notes Nets next should point
316:20 - to the null we'll make that uh make it
316:23 - to pointing to those signals and we will
316:25 - simply return the head of the list
316:28 - that is our updated list
316:30 - okay so let me go here
316:35 - we are trying to perform insert
316:36 - operations uh we will just simply
316:39 - comment it out we don't want to insert
316:41 - at beginning now and we will write node
316:45 - the new head
316:49 - new head
316:51 - is equal to insert at end and we will
316:55 - pass the head of the list
316:57 - to this method and after that after
317:00 - performing this operation we will we
317:01 - have to check whether the node is
317:05 - getting inserted at the end for that we
317:08 - have written our print list method in
317:11 - our previous video If you haven't
317:12 - watched that go and watch that first so
317:14 - in the comment say title over here and
317:17 - we'll pass the length the length also
317:19 - over here okay so we will just simply
317:21 - run this to check whether all these
317:24 - certain fines one two three
317:27 - four five let me ask you minus one so I
317:30 - limited list is one two three four five
317:32 - and the length of the list is five okay
317:34 - so the here here it is asking the enter
317:36 - the data that you go on to insert okay
317:39 - so let's suppose I want to insert 10.
317:41 - and I will hit enter
317:43 - okay so here you can see element in the
317:45 - list are one two three four five and ten
317:47 - and then length of the list is six
317:49 - because we have added one more uh node
317:52 - at the end of the nucleus successfully
317:55 - okay so this is the this is the
317:58 - operation that we want to perform in
318:00 - this video so thank you for watching
318:01 - this video and I will see you in the
318:03 - next one
318:07 - hello and welcome back to the new video
318:09 - of the Java tutorial Series so till now
318:11 - uh we have started doubling list and we
318:15 - have performed operation uh like insert
318:17 - at beginning insert at end
318:19 - s and all those other stuffs like making
318:22 - the list printing the kind of the length
318:24 - of the list okay so now in this video uh
318:27 - we will cover a how to insert a node in
318:30 - a doubly linked list at a user specified
318:33 - location okay so user will give you the
318:35 - data and you will tell the dislike this
318:39 - is a this is the location at which you
318:41 - have to insert this node excitedly
318:43 - linked list okay so I will just simply
318:46 - write a comment
318:48 - insert at position
318:52 - okay we have to insert at position okay
318:55 - so let me quickly
318:59 - get into my paint so that we can build
319:01 - the logic
319:03 - okay
319:05 - I will just create a
319:08 - three notes
319:10 - just to get you give you an idea how
319:13 - and what we are trying to achieve okay
319:16 - and now here let me create those nodes
319:21 - quickly
319:27 - okay
319:28 - these are the connections since it is a
319:31 - double in English so it has one previous
319:34 - and next as well it is pointing to it
319:37 - okay
319:44 - don't mind my drawing okay
319:48 - this is the
319:50 - oops
319:52 - like this is the node that we want to
319:54 - insert okay
319:56 - and here we go okay so this is the node
320:01 - that we have we want to insert so there
320:03 - are normally uh like starting one uh
320:08 - two
320:10 - and
320:11 - three so there are three elements in the
320:14 - list okay and we want to insert this new
320:18 - node inside this list okay
320:21 - so look at here how we can do this so
320:24 - this is a little bit uh tough to
320:26 - understand if you got this well and good
320:29 - if not go and watch the video okay
320:32 - okay so we are trying to insert this
320:35 - okay so tell me one thing uh one
320:38 - position should be associated with it
320:40 - right uh user will tell that uh okay so
320:42 - this is the note that we are that I have
320:44 - to insert in this list at position
320:45 - number two let's suppose so uh what that
320:49 - means is uh user want this node to be at
320:51 - position number two over here at here
320:54 - this is the node that which is currently
320:56 - uh at picture number two so this will
320:58 - get uh replaced at portion number three
321:01 - and third third will get replaced at
321:03 - position number four
321:05 - okay shifting will be there okay if you
321:08 - insert this at a second position so we
321:10 - that way that we have to check so there
321:14 - are some Corner cases that we have to
321:15 - first check what if the position is one
321:18 - okay this is the first Corner case look
321:20 - at here what is what is the position is
321:22 - one okay if the position is one that
321:24 - means we have to we are trying to insert
321:26 - this node at the very first beginning of
321:28 - the list okay so in that case uh I I
321:32 - think I don't want you to tell uh pretty
321:35 - much how you can do this like this is
321:38 - the
321:39 - same as we have did in our previous
321:41 - video where we are trying to insert the
321:43 - node at the beginning of the list so we
321:45 - are trying to insert this node at the
321:46 - beginning of the list but the thing is
321:49 - that uh we are trying we are first
321:52 - asking the user to enter the position if
321:54 - they enter user enters the position as
321:56 - one that means user want this element to
321:58 - be at the first of the first of the W in
322:00 - the English so you can go and code that
322:03 - uh insert at beginning
322:05 - part over here okay so what if the
322:08 - position is not one that means user
322:10 - actually wants to insert that node in a
322:14 - position where
322:16 - the this what we can say where the
322:22 - element that we want to insert is at the
322:24 - somewhere middle of the list okay
322:26 - somewhere inside the list the other ones
322:29 - so in that case we will code that one
322:31 - also uh okay so let's go and
322:35 - code this
322:37 - okay
322:38 - let me get into my IDE
322:40 - okay so here we will create that method
322:43 - public
322:45 - static so we are inserting a new node
322:48 - right so we should return the new head
322:52 - of the list
322:53 - and we will write insert at okay so this
322:57 - is my
322:58 - name of the method and we will pass
323:02 - the head of the list to this method okay
323:05 - so we are telling that take this list
323:07 - and insert a
323:09 - new node in inside this list at the
323:12 - position that I want okay so to hold
323:15 - that position we will create one new
323:18 - variable name as position where we are
323:21 - dragging the position and we will create
323:24 - one another variable as count and we
323:26 - will assign the value of count as One
323:29 - initial okay I will tell you what count
323:31 - does okay bear with me so I will just
323:35 - simply print enter the data you want to
323:37 - insert
323:38 - It'll ask the user to enter
323:41 - the data okay Enter the data okay so
323:45 - after that we will create one data
323:48 - variable
323:49 - and we'll write a c dot next 10th and
323:52 - ask the user to enter the data okay so
323:56 - after asking the user we will again
323:58 - simply print uh one more statement that
324:02 - is enter the position now asking the
324:04 - user to enter the position at which
324:06 - position the user wants to insert that
324:09 - no in the list okay and we will just
324:13 - simply write position is equals to
324:15 - SC Dot extint
324:18 - okay so yeah we have asking the user
324:20 - okay now after asking the data part
324:22 - after asking the position we just have
324:24 - to create a new node okay new node we'll
324:26 - write
324:28 - new node d
324:30 - is equals to new node
324:33 - and we'll pass the data to the
324:35 - Constructor of that node class okay
324:37 - after creating this node uh like I have
324:40 - said what if the position is one so I
324:43 - will handle that base case first now
324:45 - we'll write position is equals to equals
324:47 - to 1. and after this inside this if the
324:51 - position is equal to equals to 1 that
324:53 - means we are trying to insert that node
324:54 - at the very first of the very first of
324:57 - the list
324:59 - so in that case we will just simply
325:02 - write the same code as we have written
325:05 - in the insert at the beginning all right
325:07 - so we will write
325:08 - head
325:09 - dot previous
325:12 - equals to new node D and we'll write
325:17 - new node
325:19 - D dot next
325:22 - should point to the Head
325:25 - and write
325:27 - head equals to new node
325:31 - new node and we will write new node
325:35 - D dot previous should point to the nerve
325:37 - so this is the same logic that we have
325:39 - implemented in our insert at the
325:41 - beginning if you haven't watched that
325:42 - video go and check that out you will get
325:45 - this
325:45 - uh
325:47 - if the position is not one that means
325:50 - user don't want to insert the new node
325:52 - at the beginning of the list a user as
325:54 - tell any other other location in the
325:57 - list okay so in that case we will we
326:00 - have we need that
326:02 - create the two more variable of type
326:05 - node
326:06 - and we will assign the temp value is
326:10 - equals to
326:11 - head we'll create one temp node and
326:14 - we'll assign that node uh we'll assign
326:16 - that variable not node and we say assign
326:18 - that variables value to the head that
326:20 - means uh this is the scenario what I've
326:22 - written over here is this is the head
326:25 - and we'll make one more variable we will
326:27 - assign that value to the header that
326:29 - means head and temp are currently
326:31 - pointing to the first node of the list
326:33 - okay so we will write
326:37 - node d
326:39 - temp 2 is equals to null we will create
326:43 - another uh
326:45 - variable and we'll assign it value to
326:47 - the net okay so we'll write on while
326:49 - loop while my count
326:53 - is less than my position minus 1.
326:56 - okay whenever my accounts value is less
326:58 - than position minus 1 you will simply
327:00 - write temp is equal to temp is equal to
327:02 - Temp dot next
327:04 - we're literating uh the times value to
327:07 - the next next node of the list and we'll
327:09 - write count plus plus okay so after this
327:14 - while loop we will one more check one
327:15 - more condition inside that else itself
327:17 - we'll check whether the temp Dot
327:21 - next
327:23 - equals x equals to equals to null that
327:26 - means uh when the 10 dot next will be
327:29 - equal to personal if you if yes you
327:31 - correct if it is the last node of the
327:34 - list okay so if it is the last one of
327:36 - the list then in that case 10 10 next to
327:38 - the winner and we'll write uh
327:41 - temp Dot
327:46 - 10 dot next is equals to
327:49 - anode
327:52 - and again we write new node
327:55 - dot previous is equals to
327:58 - 10.
328:01 - okay so this is the if condition if that
328:04 - is not the case we'll come inside the
328:06 - else part
328:10 - else what what we are going to do uh
328:13 - we'll create a node d
328:16 - uh we'll reassign the temp is equals to
328:19 - head again we are taking the temp back
328:22 - to the Head
328:24 - okay uh
328:27 - so not now not temp it's temp two that's
328:31 - why I'm getting error we have covered
328:32 - the time part itself now we will write a
328:35 - temp Dot
328:37 - next we'll assign the temp tools value
328:40 - to the temp uh
328:42 - temp dot next
328:44 - uh oops I'm sorry guys I have assigned
328:48 - it over here I am reassigning that value
328:51 - itself I'm sorry guys
328:53 - okay
328:55 - so we'll write a temp dot next
328:59 - is equals to new node
329:03 - and now we will write a temp 2 Dot
329:07 - previous is equals to
329:11 - new node
329:13 - and after that we will write a new node
329:15 - D dot
329:17 - next should point to the
329:19 - temp to
329:21 - and finally we will write new dot dot
329:25 - previous
329:27 - should point to the temp okay so these
329:30 - are the steps that we want to perform
329:32 - when there is a a position that exists
329:37 - in the
329:39 - in English which is at the some
329:42 - somewhere in between those two nodes
329:44 - okay so this is else part that we are
329:46 - going to add uh perform and after get
329:49 - out of this Loop and this else part we
329:53 - will just simply return the head that is
329:56 - the new list after exerting the at the
329:58 - user specified location okay so uh this
330:01 - is the method that we required if you
330:04 - know doesn't get any
330:07 - didn't get uh any idea go back and watch
330:10 - the video again and try to figure it out
330:13 - okay if you have any doubts come you can
330:16 - comment out I will surely reply back
330:19 - okay so
330:21 - node d
330:23 - uh we are
330:25 - getting the new head okay so we will
330:28 - write a new
330:30 - head is equals to insert at
330:34 - and we will pass the head of this list
330:38 - itself okay and after passing this uh
330:41 - now our list is changed
330:44 - sorry typo
330:46 - print list
330:48 - we'll print the new head new head list
330:51 - and we will also print the length of the
330:54 - new uh text okay so let's go and run
330:59 - this
331:00 - and check whether it's working or not
331:04 - okay so one two three four and five
331:07 - after that I will give minus one element
331:09 - in the list are one two three four five
331:11 - and the length of the list is five
331:12 - that's working fine uh now it's acting
331:15 - for asking for the data I will insert 10
331:17 - and let me insert this uh 10 at the
331:21 - third index like here okay so new list
331:25 - will be one two ten three four five okay
331:27 - so I will write a new position as three
331:30 - uh here you can see or one two ten three
331:33 - four five and the new length of the list
331:34 - is six because we have added one uh
331:36 - extra node or the new node in the list
331:39 - at this location which I have told to
331:42 - the program okay so this is how you can
331:45 - insert a node in the double linked list
331:47 - at position we want okay so let me run
331:53 - once again and we will try to give the
331:55 - position as one we'll check whether that
331:58 - uh condition is also working or not okay
332:00 - so we'll write minus one
332:03 - I want to insert 10 at the first
332:05 - position
332:05 - oh all right it's all it's all it's
332:08 - working fine it will uh it has inserted
332:11 - the pen at the very first of the list
332:13 - and the new length of the list is also
332:15 - six
332:16 - okay so thank you for watching this
332:18 - video and I will see you in the next one
332:23 - hello and welcome back to the new video
332:25 - of the Java tutorial Series so till now
332:27 - we have covered all the operation insert
332:31 - operation like insert at beginning
332:33 - insert at end and insert at user
332:35 - specified location
332:37 - I know inside user specified location is
332:39 - kinda hard but if you practice more and
332:43 - more you will get how to do that okay
332:46 - fine so in this video onwards we'll be
332:49 - starting for the deletion operations and
332:52 - now in this video we'll be talking about
332:54 - deletion at beginning so we want there
332:57 - is a list of type double in English we
332:59 - are trying to delete the node which is
333:02 - at the first which is which means the
333:04 - first node of the English that we have
333:06 - we are trying to delete okay so let me
333:10 - get into paint before our code we will
333:13 - try to build the logical screen okay so
333:16 - look at here uh this is the list
333:19 - that we have used in the previous video
333:21 - and this is the new node uh not the new
333:24 - node we don't require the new node
333:27 - anymore let me
333:28 - delete it out okay so this is the list
333:31 - one two three these are three elements
333:33 - and we want to perform the delete delete
333:35 - and operation at the first
333:38 - node of the list okay so for that uh to
333:42 - delete this uh we have to somehow
333:45 - disconnect this
333:48 - these uh this part that we have to
333:50 - disconnect this node by the second node
333:53 - okay if we disconnect this node by the
333:56 - second node there if there is no link
333:58 - between these nodes we we have lost over
334:01 - this we have lost control over this node
334:03 - there this node is no more accessible to
334:05 - us and this is how we can perform the
334:08 - deletion operation at the first but
334:10 - before that before breaking this link we
334:12 - have to somehow uh assign we have to
334:16 - change the head because if we want if we
334:18 - if we not change the head to this
334:19 - because after deletion operation our new
334:22 - first node will be this and we have to
334:24 - assign the heads value to this uh so
334:26 - that we have we can keep the track of
334:28 - the remaining list okay so if we not do
334:32 - that and we will first if we make the
334:34 - link uh where remaining list will get uh
334:38 - untracked we can't check keep the track
334:41 - of that list again so what we remain
334:44 - says only ahead of the list okay so this
334:46 - is the logic that we have we want to
334:48 - build okay so let let me erase
334:54 - let me erase this okay so we will go
334:56 - inside our ID and try to call it out
334:59 - okay so we'll write one comment
335:03 - delete at
335:08 - beginning
335:13 - so okay so we'll try to write one
335:16 - function
335:17 - public static so we are trying
335:20 - manipulating the list so we want this
335:23 - list to return our new head of the list
335:26 - okay and we will call this list name ads
335:31 - delete at
335:37 - beginning
335:39 - okay and now inside this we will write
335:42 - node d
335:43 - and
335:45 - okay fine
335:47 - so if you want to delete I have told you
335:51 - we have you have to somehow change the
335:53 - heads value to this new node so for that
335:56 - purpose we will create one more variable
335:59 - of type node D itself and we'll name it
336:02 - S10 and we will assign the head heads
336:04 - value to it it means heads and then both
336:07 - are pointed towards the first note of
336:08 - the list okay so we'll check if
336:10 - head is equals to equals to null
336:14 - it is equals to equals to tail sorry not
336:16 - none a head is equal to positive uh what
336:18 - do you think when the head is equals to
336:20 - equals to tail okay so here you can see
336:23 - if head and Tails are both pointing to
336:26 - this node that means this is the node
336:28 - which comes first and this is the node
336:31 - which comes last that means this is the
336:33 - only node which is present inside the
336:35 - list there are no more nodes that uh
336:39 - exist Beyond this node okay so this is
336:42 - the case in that in that case we will
336:44 - just write simply tail is equal to
336:47 - it is equal to null
336:52 - that means uh tail and head will both
336:56 - Point towards the null we will no more
336:59 - have that access to that node that means
337:01 - that node will get rated and entire list
337:03 - will get empty okay if if not that is
337:05 - not the case if there are some elements
337:08 - that present inside the list then in
337:10 - that case we will just simply write
337:13 - head.next
337:16 - dot previous
337:19 - is equals to now
337:26 - okay head dot next dot previous is equal
337:29 - to null and we'll write head the head is
337:32 - equal to
337:34 - head dot next
337:36 - okay and we'll write temp is equal to
337:40 - not m dot next is equal to
337:43 - yes
337:44 - I'll write this and we will simply
337:46 - return our head
337:49 - what I have done here is head dot next
337:51 - dot previous okay so we are doing what
337:55 - we are doing head dot next that is this
337:59 - there previous that is this
338:02 - we are assigning it to the null okay
338:04 - head dot next dot previous is equals to
338:07 - null so we are breaking this Bond okay
338:10 - we are breaking this previous Bond after
338:13 - the header head is equal to head dot
338:14 - next we are simply reassigning the heads
338:16 - value to this we are moving our head to
338:18 - the next variable uh next node not
338:20 - variable uh temp dot next is equal to
338:22 - null that is temp dot next we are
338:25 - breaking this next Bond also previously
338:27 - we have break the previous Bond okay
338:30 - previous for bond for this node and now
338:33 - we are taking this next Bond for this
338:35 - node and we are successfully uh broke
338:38 - all the bonds okay all the linking and
338:41 - we are simply returning the head of the
338:43 - list
338:43 - so so this is the idea behind the
338:46 - decision at beginning so let's go and
338:50 - test it out
338:52 - okay so let me comment it out
338:57 - delete Ops
339:00 - okay and since we are getting our new
339:03 - head we have to
339:06 - capture that head all right
339:10 - uh not new but we have given the name of
339:13 - the method let me check delete at the
339:16 - beginning
339:17 - till later beginning we will pass the
339:19 - head uh which is we are taking from this
339:22 - these method itself and after that uh we
339:26 - have to print the list
339:28 - but now be careful uh pass the new head
339:33 - and after that we will find the length
339:35 - of the list with passing the new head
339:37 - okay so these are the things that we
339:40 - want to perform just let me just run
339:43 - this and test quickly we'll test okay
339:45 - one two three four and five and minus
339:49 - one and here you can see eliminate the
339:51 - list of one two three four five and uh
339:53 - list is five because we have five
339:55 - elements and elements in the list are
339:57 - two three four one is getting deleted
340:00 - because we are performing the deletion
340:03 - at beginning and after that list size
340:05 - should also get decreased by one which
340:08 - is there and so this is how you can
340:12 - perform
340:13 - the deletion at beginning so quickly we
340:15 - will check that corner case also or the
340:18 - base case where there is if there is one
340:21 - element in the list that is one okay
340:22 - minus one
340:24 - okay so here again null pointer
340:26 - exception we are getting uh why so
340:28 - because if there is one uh one element
340:31 - in the list uh list is this and this and
340:33 - we are trying to delete uh
340:37 - the element which is at uh this so I
340:40 - guess we have some error we'll try to
340:43 - fix it out and I will tell you in the
340:45 - next video thank you for watching this
340:46 - guys and I will see you in the next one
340:50 - so hello and welcome back to the new
340:52 - video of the job tutorial Series so till
340:53 - now we have started a doubly linked list
340:55 - uh we have seen all the insert operation
340:58 - we have started with the deletion
341:00 - operation also in our previous video we
341:02 - have talked about how to delete at the
341:05 - beginning I'm going to delete the first
341:07 - node of the double in English so here
341:09 - you can see this is the code and now in
341:11 - this video we will be talking about how
341:13 - you can delete the node which is present
341:15 - at the last that means we have to delete
341:17 - the last one of the linked list so let
341:19 - me comment it out
341:21 - delete the end node okay so this is the
341:27 - thing that we have to perform in this
341:29 - video so let's go and try to understand
341:32 - first what we are going through and what
341:34 - we are trying to perform okay
341:36 - so here you can see there are three
341:38 - nodes in the list and we are trying to
341:40 - perform a deletion operation at the end
341:42 - okay so we are trying to delete this
341:43 - node so what do you think how we can
341:45 - delete this node uh this is pretty
341:48 - simple uh because we are trying to read
341:50 - it at the end so they are they are not
341:52 - more operation that we want to perform
341:54 - uh first thing the corner case should be
341:58 - checked what if there is a head and tail
342:00 - both are pointing to the same node that
342:03 - means there is only one node in the list
342:04 - that means in that case we will simply
342:06 - Point our head and tail to the null so
342:09 - that we don't have any access to that
342:11 - node itself and the list will become
342:12 - empty okay so if that is not the case uh
342:15 - like here if there are three elements
342:17 - present inside the list and we are
342:19 - trying to delete at the last element
342:22 - so in that case we will simply write uh
342:24 - somehow we will break this next okay so
342:28 - two is next is pointing to the three
342:30 - okay so that's how we are keeping the
342:32 - track of the third node so we will break
342:34 - that link okay so those next should not
342:37 - point to the third node it will now
342:39 - again point to the null okay so it will
342:41 - point to the null
342:43 - will be a code our methods such as such
342:46 - that this next should point to the null
342:48 - so that we have we don't have uh access
342:50 - to this uh node anymore and we again we
342:54 - are thirds previous is pointing to the
342:56 - second snow we also have to break that
342:58 - update that link also so we if we both
343:01 - uh perform this both of the operation
343:04 - the node will get deleted from the list
343:07 - and we don't have that track of that
343:09 - node anymore
343:10 - in our list okay so this is the idea
343:13 - behind this okay so let's get into our
343:15 - IDE and try to go this out okay so as
343:19 - usual we will create one method
343:22 - which is public and static one and now
343:25 - we are trying to delete and we have to
343:27 - pass a new list of the new list to the
343:31 - new list to the main method so in that
343:34 - case our return type should be node D
343:36 - and I will write our function function
343:40 - name as delete at end and this will get
343:43 - our
343:45 - head of the list that means we are prime
343:48 - we are trying to pass the
343:50 - list to this method and this method will
343:53 - in return delete the end and element and
343:56 - we'll pass the head of the list okay so
343:58 - to delete uh let me create one temporary
344:02 - temporary variable which will also point
344:04 - to the head first and again I have as I
344:08 - have talked to you uh if there should be
344:09 - a corner case where head is
344:11 - equals to equals to tail
344:15 - okay so it is equal to equal to Del that
344:18 - means both are pointing the same node
344:20 - that means there is only one element
344:22 - which is present inside the list and in
344:25 - that case we will just simply write
344:27 - head is equals to
344:29 - now okay that means we have successfully
344:32 - deleted we don't have any more the track
344:34 - of that node okay if that that is not
344:37 - the case if else part is we will write
344:41 - previous
344:45 - dot next should point to the null
344:49 - okay and after that we will write
344:53 - tail dot uh not tail dot tail is equals
344:57 - to
344:58 - tail Dot
345:00 - previous so we are switching the Tails
345:02 - well to the previous one so here you can
345:04 - see we are performing this operation we
345:06 - are shifting the tail
345:08 - okay so after Shifting the tail
345:13 - previous
345:18 - is equals to null
345:20 - so we break that one Bond also that I
345:23 - have talked about you so and then simply
345:25 - return the head
345:27 - ok so this is the code that we want to
345:30 - perform so what I have done is uh we
345:34 - have shifted our temp to this node and
345:36 - we will uh we have break it broke this
345:39 - Bond and this Bond also they are no more
345:41 - have access to this last node of the
345:44 - list and we will
345:46 - we have changed the this is our
345:49 - new last node of the test okay
345:53 - so let's go and let me just comment it
345:57 - out it's the previous videos function
345:59 - and
346:01 - okay so we will create one new node d
346:06 - ual mode
346:08 - D which is equals to the
346:12 - delete at end and will pass the head of
346:16 - the list
346:18 - and uh after that we'll print the list
346:22 - by using the new new node D and after
346:24 - that we'll find the length of the list
346:25 - okay
346:27 - so these are the operations let me just
346:31 - run this quickly
346:33 - we'll test it out one two three
346:36 - four five and minus 1.
346:39 - okay so the element of the list are one
346:41 - two three four five and the length of
346:43 - the length of the list is five and the
346:44 - elements in the restart one two three
346:46 - four and we don't have any more track of
346:48 - this file because we have broke those uh
346:50 - next and previous link okay uh and now
346:53 - the length of the list is also decreased
346:55 - by one so this is how you can perform
346:58 - the deletion operation at the end of the
347:01 - W link Niche so I hope you got the idea
347:03 - uh if not go and watch uh go please go
347:07 - backward and watch this video again I
347:09 - hope you're liking this series
347:11 - like share and subscribe thank you
347:17 - hello and welcome back to the new video
347:19 - of the Java tutorial Series so till now
347:21 - uh we have started with the deletion
347:23 - operation we have see uh seen how to
347:26 - delete at end and how to delete at
347:28 - beginning
347:30 - and now one more operation is there uh
347:31 - how to delete app use a specified
347:33 - location that we are going to see in
347:35 - this video okay so let me write a
347:37 - comment delete at
347:40 - position okay
347:43 - okay so let's go in our paint and try to
347:46 - see how we can build the logic how to
347:49 - delete the node inside the double link
347:51 - list which is at the user specified
347:53 - location
347:55 - so there are two things uh two three
347:57 - things that we have to remember uh that
348:00 - is the corner case first of all so what
348:02 - are the corner case uh that we may face
348:04 - okay so first case is what if the
348:07 - position is one okay so it's a user is
348:09 - to tell that delete the element visit
348:11 - present at the position one so that is a
348:15 - bit similar to the
348:16 - function that we have made which is
348:19 - delete at beginning so we are trying to
348:21 - do that same performance we are trying
348:23 - to perform that same task uh but this
348:26 - time user has given the position as one
348:28 - that means user is wanted to delete the
348:30 - element which is at the first so we'll
348:32 - perform that same operation and what if
348:34 - the user has tell the to delete the last
348:37 - node so this is not the actual the
348:40 - corner case this will come under the
348:41 - default uh uh operation uh because we
348:45 - don't we don't know what is the end node
348:47 - what is the last node what is the length
348:49 - of the list so in that case we it will
348:51 - come inside the default case itself Okay
348:54 - so
348:56 - for the deletion uh operation let's
348:58 - suppose I want to delete this this node
349:00 - inside the list so I have to somehow
349:03 - break these and this one but before
349:05 - baking this one I have to link this node
349:08 - with this node first node with the third
349:10 - node uh so that this uh after third node
349:14 - all the nodes will not get a
349:17 - discarded because I have to clean that
349:20 - track as well I just have to delete this
349:23 - this node itself okay so before deleting
349:25 - these links we have to make a link
349:28 - between first and third node and we have
349:31 - to assign thirds thirds previous to the
349:33 - first node add as well okay so these are
349:36 - the operation that we have to perform
349:37 - before bringing those links between this
349:41 - next and previous of this node okay
349:44 - so let's go and
349:47 - code
349:48 - try to code it
349:50 - okay let's go in our IDE
349:54 - okay so we will
349:57 - name it as public static uh
350:00 - we are deleting the node right so we
350:03 - have to pass uh open not pass we have to
350:06 - return the new new head of the list and
350:08 - we'll write
350:09 - the function name as
350:11 - delete at and we will pass the new
350:16 - header the list to this
350:18 - function okay new not new head will pass
350:22 - the head of the linked list that on
350:25 - which we are trying to perform this
350:26 - operation okay so likewise at the
350:29 - insertion at we need one position
350:33 - which is positioned from the user and we
350:36 - will need one count variable which is
350:37 - initially set set to L1
350:41 - we will need one temporary
350:45 - variable uh name it as stamp and which
350:48 - is pointing towards the head
350:51 - okay and we'll just simply print a
350:54 - enter the
350:57 - position
351:01 - of
351:03 - node
351:05 - U1 to delete okay
351:09 - allows the user to enter the position
351:11 - and we will simply
351:13 - keep that value inside the position
351:15 - variable okay in se.net state after that
351:19 - uh we will check the corner cases if the
351:22 - position is equal to equals to 1 that
351:24 - means the user wants the first element
351:26 - we are deleted in that case we will just
351:28 - simply write the logic that we have
351:30 - written at the in deleted back anyway so
351:32 - if the head is
351:34 - head dot next is
351:37 - equals equals to null at dot next is
351:40 - equals to equal to null then in that
351:42 - case you will just simply write the head
351:44 - is equal to tail is the question number
351:46 - four should point to the null and if not
351:49 - we will go inside the else part we will
351:52 - write
351:53 - head dot next
351:55 - dot previous
351:57 - should point to the
351:59 - null
352:00 - and we'll reassign the heads value
352:04 - the head is equal to
352:06 - head dot next
352:09 - and we'll write
352:10 - temp dot next is equals to
352:14 - nine
352:16 - if this is the
352:18 - Corner case if that is not the case will
352:20 - come inside this else part and we'll do
352:23 - node d
352:25 - we will create one more variable
352:28 - which is also pointing to the Head
352:30 - initially and to keep that track of this
352:35 - back variable we again run the while
352:36 - loop
352:38 - so until my count is less than position
352:41 - minus 1 I will run this one Loop
352:46 - okay and inside this while loop I will
352:48 - write back is equal to back dot next
352:52 - and we will say simply count plus plus
352:56 - okay so what we are trying to do is uh
352:58 - let's suppose uh there are some other
353:01 - notes present inside this list okay so
353:03 - assume that there are five five elements
353:05 - in this double equation okay and we are
353:07 - trying to delete the element uh trying
353:09 - to read the node which is at third third
353:11 - index okay so third position let's say
353:13 - okay so if you want to delete this you
353:17 - have to somehow keep the track of the
353:18 - previous node of the list and the next
353:20 - node of the list okay so that means we
353:22 - have to keep the track of the second
353:23 - node
353:24 - second node which is inside the list and
353:27 - the fourth node which is inside the
353:29 - fourth node which is inside the list
353:31 - okay we will delete the third one and to
353:33 - keep the track of the second node to get
353:35 - to get there
353:37 - the to get there we have run this while
353:40 - loop uh back back is also representing
353:43 - which which means we are trying to get
353:45 - the previous element uh let's like
353:48 - suppose we are trying to delete the
353:49 - third element we will go there to the
353:52 - second element by using this back end
353:54 - we'll try to hold that okay and after
353:57 - that we'll create one more node
354:00 - d
354:02 - let's name it as current
354:04 - which also is equals to back Dot
354:09 - next current will hold the element node
354:12 - which we want to delete actually the
354:15 - node is that we want to delete is hold
354:17 - by current now we will check one if
354:20 - condition if my current
354:24 - dot next is equals to
354:26 - now that means uh it is the last element
354:30 - of the load that we want to delete okay
354:32 - when the current dot next is equal to
354:34 - positional it is the large node of the
354:36 - list that we have to delete okay so in
354:38 - that case it is it is pretty simple to
354:40 - that we have done in the delete at end
354:42 - okay so in that case we will just write
354:45 - simply dot Uh current dot previous is
354:48 - equal to null
354:51 - us dot current is equal to null and I
354:53 - will write back Dot
354:56 - next is also is equal to okay and if if
355:00 - that is not the case there are some
355:01 - nodes which is present after that
355:03 - current also that we will come inside
355:05 - the else part we will write back dot
355:07 - next is equal to
355:11 - current dot next we will current out
355:15 - so what this means is uh we are trying
355:18 - to uh break the next link and we are
355:21 - trying to make the linkage with the
355:22 - third fourth node okay so we are no more
355:25 - I have the track of the from second to
355:27 - third node we have built the connection
355:29 - from the second to Fourth node by
355:31 - writing this line okay and after that we
355:33 - will write simply a current dot next
355:37 - current dot next is equals to
355:41 - current dot next dot previous is equals
355:43 - to
355:46 - back
355:50 - okay so this is the case uh that we want
355:53 - to perform and after that uh we'll just
355:56 - simply come out of this else part and
355:58 - we'll just simply return the head of the
356:00 - list
356:01 - and we are done with the operations okay
356:03 - so this is the deletion operation and
356:06 - this is a specified location uh let me
356:09 - just comment it out
356:10 - and since we are getting the new head of
356:13 - the list from the
356:15 - function we will just simply write the
356:17 - node d
356:19 - um new
356:22 - head d
356:23 - and we will write delete at
356:27 - and will pass the head
356:29 - and we'll just after that after
356:31 - performing this operation we have to
356:32 - check whether the node get deleted you
356:35 - can we have one print list method that
356:38 - we have implemented also and we'll also
356:40 - find the length of the list whether it
356:41 - is decrease by one or not if it is
356:43 - verticate that means our node is circles
356:47 - fully deleted okay
356:49 - so we will run this
356:52 - okay so one two three four and five and
356:56 - give it negative minus one so I limited
356:58 - the list of one two three four five and
356:59 - the length of the list is five and it is
357:01 - asking for the position that you want to
357:02 - delete so let me give a position as
357:04 - three so delete the element which is
357:07 - present at the position number three so
357:09 - here you can see the position number
357:11 - three three is present it has delay
357:13 - don't get confused uh this is not the
357:16 - data part I'm giving the position I am
357:19 - giving the actual uh position at the
357:21 - third position whichever node is there
357:24 - delete it and after deletion operation
357:26 - one two four five is getting returned by
357:29 - the rest and uh this size is also
357:31 - decreased by one so let's go and uh
357:34 - check the corner case also what if we
357:37 - want to delete the first element of the
357:39 - list that is one two three four and five
357:41 - and after that minus one and we will
357:43 - give one
357:44 - here you can see two three four five is
357:46 - also printed one is getting deleted and
357:48 - the length of the list is also decreased
357:51 - so this is how you can perform the
357:53 - deletion operation at the Double link
357:55 - list at the end of the list
357:58 - or at the user's specified location or
358:00 - at the start out the list okay whatever
358:02 - position you want you just give the
358:04 - position if that position exists inside
358:06 - the list this function will delete it
358:08 - okay so thank you for watching this
358:10 - video and I will see you in the next one
358:16 - okay so hello and welcome back to the
358:18 - new word of the Java tutorial Series so
358:21 - till now if you are watching this series
358:24 - uh that's great uh you have we have
358:26 - covered of the core Java concept we have
358:28 - started with the DSA part we have
358:30 - covered arrays uh we solved some
358:33 - problems using arrays now we are at the
358:35 - linked list part and now we have covered
358:37 - a signal English and W links
358:39 - successfully and now for me with this
358:42 - video onwards we'll be covering the
358:43 - circular link list so okay so for this
358:47 - video agenda will be uh
358:49 - I will be talking about how
358:52 - the circular English Works uh what are
358:56 - the things that you
358:58 - why you want to learn about the circular
359:01 - link list that part we will go and learn
359:04 - in this video okay
359:06 - so let me just our adjust my paint
359:10 - window oh yeah that's fine okay so what
359:14 - we have seen till now so we have seen
359:17 - the circular link list we have seen the
359:20 - W link glitch and now we are going to
359:22 - see the circular link list okay so let
359:25 - me just give you the overview so and one
359:28 - thing uh if you have not watched our
359:30 - previous video go and watch
359:32 - then first so that you can get clear
359:36 - idea oh
359:39 - of the what is single language and so
359:42 - that you can clearly understand what is
359:44 - the circular list okay and one more
359:46 - thing if you are watching this series
359:48 - then loving what uh content that we are
359:51 - providing so please like share and
359:54 - subscribe
359:55 - and
359:57 - please share this series to your friends
359:59 - as well so that they can get also
360:01 - benefits of this series okay
360:04 - and if you have any doubt do let comment
360:08 - it out I will definitely get back to you
360:10 - okay so here you can see uh we have I
360:13 - have created
360:15 - one language so as you can see by this
360:20 - if you are watching this series you can
360:22 - clearly guess it what is it it is a
360:25 - simply single in English Okay so there
360:27 - are these nodes these nodes contain the
360:29 - data part and the next part and the next
360:32 - is holding the address to the next door
360:34 - node okay so this is simply the uh
360:37 - simply linked list so now I will do one
360:40 - simple thing and I will change this
360:42 - simply English
360:44 - to a w link list okay so here you can
360:48 - see
360:49 - I will just
360:52 - wait a minute guys okay so by doing
360:55 - adding just one extra line and one extra
360:59 - partition in the node we are creating a
361:03 - doubly liquidation okay so what is
361:05 - double link this uh it is nothing but we
361:08 - can go forward and come backward as well
361:11 - in the single link list you can go only
361:13 - the from left to right okay there is no
361:15 - way you can come from back from there if
361:17 - you want you can come but there is no
361:19 - simultaneous way okay so now here what
361:23 - is the what is the double in English
361:25 - double English does the same we it it
361:27 - holds the value of the next next node
361:31 - and at the same time it holds the value
361:33 - of the previous previous node previous
361:35 - node also okay so you know what is next
361:38 - to it and you know what is back to it
361:40 - okay so it holds the previous address as
361:42 - well and the next address as well and
361:44 - the data part so this is the double in
361:46 - English
361:47 - and now I will do one little
361:49 - modification in this so that it will
361:51 - make it as a circular linked list okay
361:54 - I will do like this I will get this and
361:58 - I will just simply assign it to this
362:02 - okay so what I have done here is simple
362:06 - okay try to understand okay this is our
362:09 - W link list before uh joining this line
362:13 - and I have created one simple simple
362:16 - line and I have joined the tail that
362:18 - means the last note to the first node
362:20 - okay so the Tails dot next before
362:23 - joining the slide a line This is WL
362:25 - English and Tails next is pointing
362:28 - towards null so instead of pointing to
362:31 - the null it will pointing to the Head
362:33 - okay so that it will make a circle okay
362:36 - and this previous is pointing to this
362:37 - and its previous will point
362:41 - to the last node okay so we have make
362:45 - these two lining two changes in the
362:48 - double language and it will make it as
362:50 - circular English okay so what we have
362:51 - done is uh we have link the tail dot
362:55 - next to the head of the list that is the
362:57 - first node of the list and we we have
362:58 - given the value of uh head dot previous
363:01 - that is heads previous to the
363:04 - tail that means we are trying to connect
363:06 - uh head with the tail so by doing this
363:09 - uh we are we are making our Circle you
363:12 - can see if we are trying to iterate from
363:13 - the head and you are going to iterate
363:16 - iterate it right and uh you come again
363:18 - come at head okay so this will make make
363:21 - it as Circle okay this will form a
363:24 - circle
363:26 - okay and if you see it it is forming my
363:31 - circle you are uh heading uh you are
363:34 - studying for the first node you go to
363:36 - the second fourth and third and then
363:38 - fourth and due to we have a link from
363:40 - this to this and it will again come back
363:43 - to the Head okay and end up it is also
363:46 - in the backward backward formation also
363:48 - uh if you if you had the tail uh you go
363:51 - here go here go here and it will also
363:53 - come here okay so this is the idea
363:55 - behind this and one more thing uh that I
363:58 - forgot to tell you uh there is no
364:00 - backward Okay so
364:03 - here you can see
364:05 - we have created doubling list okay so
364:08 - there is no backward you can't come
364:11 - backward there is no previous in the
364:13 - servers what we can say is
364:16 - circular linkage there is only a
364:22 - one way that is only one way you can go
364:24 - from left to right you can't go you
364:27 - can't come backward okay so regular in
364:29 - English in simple terms the color of
364:31 - English is nothing but uh one little
364:34 - modification to the single English that
364:36 - will make the list in English as a makes
364:39 - it circular okay it it go in the loop
364:42 - and all the elements are connected with
364:44 - each other and list is also connected
364:47 - okay so this is uh
364:49 - the theoretical part of the single
364:52 - English uh
364:54 - sorry the circular link list so this is
364:56 - it
364:58 - so there are two types of circular
365:01 - English one is simply uh English
365:04 - circular English and doubly circular
365:06 - English so here you can see I have given
365:08 - you the example of the single single
365:10 - circular English Okay single circular in
365:12 - English is nothing but the sales single
365:15 - circular English
365:16 - but in the
365:17 - circular format okay so we are trying to
365:19 - connect this these these ports and uh if
365:23 - I redo okay so this is the
365:27 - this is also a circular English but it
365:29 - is in a doubly format that means uh it
365:32 - is a double in English that we have
365:34 - connected tail and head so that it will
365:37 - make uh make and work as a circulating
365:41 - circular doubly linked list okay
365:43 - so this is the idea behind the circular
365:45 - increase so thank you for watching this
365:47 - video and for the next video onwards we
365:49 - will try to implement this thank you
365:54 - hello and welcome back to the new video
365:55 - of java tutorial series uh so in our
365:58 - previous video we have started seeing uh
366:01 - circular English and we have seen the
366:03 - theoretical uh part of the circle in
366:04 - English and we have understood what is
366:07 - circled English and how we can uh
366:10 - implement it all right so in this video
366:12 - we will be starting uh start coding uh
366:16 - with a circular link list and in this
366:18 - video we will be creating a circular
366:19 - English and know how how to create a
366:23 - circular English Okay so for that uh let
366:26 - me just create create one visual
366:28 - representation of the circular English
366:30 - uh so that you can understand more
366:33 - clearly
366:35 - okay uh so again uh we can Implement
366:38 - circular link list uh in two ways uh
366:40 - using
366:42 - circular single in English and circular
366:43 - doubling English meaning that you can
366:46 - create a you can convert a single in
366:49 - English into a circular single in
366:50 - English and you can convert a double a
366:52 - link list into a circular double a link
366:54 - list the difference is only between uh
366:57 - the you have to keep the two pointers
366:59 - all right if you are implementing the
367:01 - doubly linked list uh circular link list
367:03 - then you have to keep the track of
367:05 - previous and next and if you are
367:06 - implementing just a single link a single
367:09 - circular linkage then you have to keep a
367:11 - track of only the next pointer okay next
367:15 - address of the node okay inside the this
367:19 - and uh one more thing after that uh this
367:23 - will get connected to the first node uh
367:26 - so as we know we have one head
367:30 - and we have
367:32 - tail
367:33 - all right and the head represent
367:36 - representing to the first node of the
367:39 - linked list and tail representing the
367:41 - last node of the link list so uh it's
367:45 - like an
367:47 - linked list we will be implementing the
367:50 - singly circular link list you can you
367:52 - can try the Dublin as the doubly
367:55 - circular link list for buyer own okay so
367:58 - look at here we have one single link
368:01 - list okay so this is the first node
368:03 - second or third node and fourth node so
368:05 - to make it as a circular link list
368:07 - circular single link list we just have
368:09 - to keep the track uh keep the track of
368:12 - tail dot next uh or we have to assign
368:15 - the value of tail dot next to the head
368:17 - that means it will create one Circle a
368:19 - circular
368:21 - list okay so we are going from first
368:24 - node second node third node to Fourth
368:26 - node again we can come back to the first
368:28 - node so it it's it making a circle
368:30 - circular
368:31 - linked list okay so this is how we can
368:35 - create a circular link list so let me go
368:37 - into my IDE and we create one circular
368:40 - link list over here
368:42 - okay so I here in I was in my IDE and
368:47 - let me just right click here and create
368:48 - a Java class so as you have seen uh you
368:52 - know a single LinkedIn W in English we
368:54 - need a node to create a linked list all
368:57 - right so let me create one node for the
369:00 - circular link list so let me create the
369:02 - class name as node
369:06 - C dot Java ah so this will represent our
369:11 - node uh one node inside a list okay so
369:15 - for the circular link list we are
369:17 - implementing circular single in English
369:18 - so that's why we need we required data
369:21 - part
369:23 - and one uh
369:28 - one next variable of type node C itself
369:32 - which will carry the address of the next
369:35 - node inside the list and we we want the
369:39 - Constructor for this class and this
369:41 - Constructor will take the input as
369:45 - the data from the user and it will just
369:48 - simply assign that data to the data that
369:53 - we have declared over here okay and
369:57 - we'll assign next is equal to
370:01 - all right so this is the node C dot Java
370:06 - file that we are using okay so now after
370:10 - creating the node I want to create one
370:13 - file where I can perform all the
370:15 - operations
370:16 - regarding to the circular linked list
370:19 - all right so let me call it as
370:22 - circular
370:25 - in list Dot
370:29 - okay so here I created it so since we
370:33 - are getting the input from the user so
370:35 - we do require the scanner class also so
370:38 - let me just go ahead and import my
370:40 - scanner class I will write import
370:44 - sorry for typo import Java
370:48 - dot util Dot
370:52 - scanner
370:54 - also after importing this kind of class
370:55 - so I do require my main method to
370:59 - execute this code and we'll implement
371:02 - this main method a letter and just
371:05 - I will do for declaration part first so
371:08 - we are taking inputs in a multiple
371:11 - method so I will declare the object of
371:12 - the scanners class uh globally okay so
371:15 - it's public static
371:18 - scanner SC
371:20 - equals to new scanner
371:23 - system dot in all right so I have
371:27 - declared the object of the scanner class
371:29 - as well and now we have to declare those
371:32 - two
371:33 - variables of type node C representing
371:37 - the head and tail which is the first and
371:39 - last node of the link list respectively
371:41 - okay so we will write public static then
371:45 - those are our type node C and we require
371:48 - the head and tail okay
371:52 - so this is also done uh now we are good
371:56 - to go to write those methods so in this
371:58 - video we will be creating a circular
372:00 - link list so that's why I will write uh
372:04 - create
372:08 - a circular link with CLL is circular
372:11 - necklace okay so this method should be
372:14 - public and static one because we are
372:17 - calling that method inside the server
372:18 - main method which is static as well okay
372:20 - so and since we are making the list and
372:23 - we are we have to return a node that is
372:26 - the head of the list so that's why we
372:28 - are returning a node so the return type
372:30 - should be node C
372:32 - and the
372:34 - method name I will called as make list
372:37 - because we are creating a new list okay
372:39 - and just
372:42 - create the method okay so initially the
372:45 - my head should point to null uh since we
372:48 - are making a new list so the head and
372:51 - tail should point to the null and okay
372:53 - and after that uh I will just print
372:58 - enter the data in the list
373:01 - enter
373:02 - the data
373:05 - in the list
373:06 - all right so I will just write it over
373:08 - like this so and after that I will
373:11 - declare one in data variable and I will
373:15 - take the input from the user and after
373:18 - taking this input from the user I will
373:21 - just write one while loop and while my
373:23 - data is
373:26 - not equals to
373:28 - -1
373:29 - until that I will run this while loop
373:32 - and after getting inside this while loop
373:35 - I will create a node which I need to
373:39 - insert inside my linked list okay I will
373:42 - call it that node as new node C which is
373:45 - a new node of circular link list and we
373:47 - will equals to new node and so we have
373:51 - to pass the data to the Constructor of
373:54 - that node C Class we'll pass the data
373:55 - that we have taken input from the line
373:57 - user from in line number 212 okay so
374:01 - after creating the node we'll check one
374:03 - if condition if my tail is equals to
374:07 - equals to null
374:09 - if that is the case my 10 is equal to
374:12 - equal to null in that case I will just
374:14 - write head is equals to new node C
374:18 - new node C and we will write our tail is
374:21 - also equals to
374:22 - new node
374:25 - C okay so what I have done is and one
374:28 - more thing we write uh
374:30 - new node C
374:32 - Dot next is equals to
374:36 - red
374:37 - okay uh so when my tail is equal to
374:40 - equational that means the it is the
374:42 - first node that we are trying to insert
374:44 - our list into our list and for the first
374:47 - node we don't have to do anything extra
374:49 - we just assign the head to the new node
374:51 - and tail to the new node both the head
374:53 - and tail will point to the
374:55 - first node of the list because there is
374:57 - only one list one node inside the list
374:59 - at this time only and we will write new
375:01 - node.next is equal to head since we are
375:03 - making this making the circular link
375:05 - list if if this is the node that is
375:07 - there inside the list then it should
375:10 - there this next should point to this
375:12 - node itself then and then only it will
375:14 - make the circular motion uh in the
375:17 - linked list okay so for that we have
375:20 - written over here and if my tail is not
375:24 - equals to equal signal then we'll go
375:26 - inside the else part that means there
375:29 - are some nodes which are already written
375:31 - inside my list and then in that case we
375:32 - will just simply write Del dot next is
375:34 - equals to a new node we will assign will
375:38 - update the Tails value
375:40 - or we we make that connection between
375:43 - the previous node and the new node we
375:45 - are trying to insert and after that we
375:48 - will write the update details value to
375:50 - the new node C because we have to move
375:52 - the tail tail and after moving the tail
375:54 - we will write the tail dot next should
375:57 - now point to the head of the list
376:01 - by the by writing the line number 22 we
376:04 - are again making that circular circular
376:06 - motion inside our link list okay so
376:09 - after doing this we will again take the
376:13 - data from the user uh
376:15 - and we will continue implementing this
376:18 - while look until the user is satisfied
376:22 - and entered minus one uh just to
376:25 - represent that user have done creating
376:27 - the list and user want to exit from this
376:29 - group okay and after creating all this
376:32 - we will just return the head of the list
376:36 - that is our
376:37 - click list okay so now if I go inside my
376:43 - uh main function and uh I will just
376:46 - write a
376:47 - node
376:51 - node C which is the head and I I have to
376:55 - get this method is returning the head
376:58 - that I have to have captured over here I
377:00 - will capture over here and I will write
377:01 - a make list I will call that mixes
377:04 - function over here and if everything
377:06 - goes fine uh this should not give me any
377:09 - errors after running this let's hope
377:13 - it will not throw error and let's run
377:16 - this okay so it is asking for me to
377:19 - enter the data
377:20 - so let me just go ahead and enter the
377:24 - data over here let me write one two
377:27 - three four five six I can enter as many
377:30 - data as I want and after when I once I
377:33 - satisfied from the entering the data I
377:34 - will just simply write -1 so I will get
377:37 - exit exit from the code because after
377:41 - line number 30 there is no line that we
377:43 - are executing okay so this is
377:47 - pretty much either behind the circular
377:49 - link list how to make a circular link
377:50 - list how secular link list works okay so
377:54 - in our upcoming video we will see how we
377:56 - can print this circular link list okay
377:59 - so the printing printing part is tough
378:01 - because there is no null to the Tails
378:05 - dot next because we are always telling
378:07 - that tells dot next should always point
378:09 - to the head so we are making the
378:11 - circular link list so we have to somehow
378:13 - figure out how we can manage to stop at
378:17 - which point and how we can predict the
378:19 - end of the list so okay so we'll see
378:21 - that in our next video where we will be
378:24 - seeing how we can print the circular
378:26 - link list okay so thank you for watching
378:27 - this video and I will see you in the
378:29 - next one
378:31 - so hello and welcome back to the new
378:33 - video of the Java tutorial Series so in
378:35 - our previous video we have talked about
378:36 - how we can create a circular linked list
378:39 - in Java okay so now in this video we
378:42 - will see how we can print that circular
378:45 - linkage that we have created in our
378:46 - previous video okay so let me just go
378:49 - ahead and clear this out
378:52 - uh the previous topic I will delete it
378:54 - and I will our new topic is
378:58 - print
378:59 - the circular link list okay CLL is the
379:02 - shortcut that I have used for circular
379:04 - link list okay and now if you can see
379:08 - imagine this is our circular English uh
379:10 - one two
379:13 - three and four okay so and fourth is
379:17 - connected to the head again that is the
379:19 - first note so if uh if we are using the
379:23 - logic that we have used in our uh
379:25 - previous videos of double linked list or
379:27 - else single in English to be precise uh
379:30 - then you can see we are just iterating
379:33 - over the nodes over the nodes until we
379:36 - get the head dot next as null so that's
379:39 - Logic for that's logic is good for the
379:43 - singly linked list where we have where
379:46 - we are denoting the end of the list as
379:48 - last nodes next should point to the null
379:53 - ok so but now in the uh circular link
379:56 - list when we Traverse to this nodes we
379:59 - can't use that logic because there is no
380:01 - null we are representing that tails.next
380:04 - as the first node so it will if you
380:07 - implement that logic here it it won't
380:10 - work it will go inside the infinite Loop
380:13 - of printing all those node again and
380:14 - again it will print one two three fourth
380:17 - node and it will again print one two
380:19 - three fourth note so you have to somehow
380:21 - figure out how you can stop that while
380:24 - loop from printing the nodes okay so to
380:27 - figure out that logic one one thing you
380:29 - can do is you can increment the head as
380:33 - it is that we have doing in our single
380:35 - and double in English you you just go on
380:37 - incrementing the head and until your
380:40 - head is matches to the null
380:44 - Okay so until your head is at the
380:49 - position where our tail is currently
380:51 - then and until then you can
380:55 - a trade over the list and as a when you
381:00 - come here when your head come here at
381:03 - the position of tail you just print that
381:06 - last node's value and you just get out
381:09 - of this Loop okay so this is one way you
381:12 - can achieve printing of the circular
381:15 - English okay so we'll be implementing
381:17 - this approach in our code okay so let's
381:20 - go in our code and if I do code it
381:23 - okay so this is our circular link list
381:25 - method that we have implemented in our
381:27 - previous video
381:28 - I hope you see that video and uh
381:31 - understood how we can Implement a
381:34 - circular link list okay so for printing
381:37 - purpose I will again create one method a
381:39 - public static and we are just printing
381:43 - the list right so this method should not
381:45 - return anything and I will call this
381:48 - method as print
381:51 - list
381:52 - okay and we are printing the list uh for
381:56 - that purpose we have to access the head
382:00 - okay so we we do require head of the
382:03 - list so that we can start printing our
382:06 - head uh start printing our list from the
382:09 - head onwards okay and now you you can
382:14 - imagine one corner case right so imagine
382:16 - our list doesn't contain any any node
382:19 - okay so there are no nodes inside our
382:21 - list then in that case we have to handle
382:23 - that corner case you can simply write if
382:26 - my head is equals to equals to null
382:30 - in that case you just simply return I
382:34 - don't want to do any uh processing or
382:37 - any printing stuff if my head is equals
382:40 - to equal signal uh otherwise if head is
382:43 - not equals to equal signal if there are
382:46 - some elements which are present inside
382:47 - the list we just print them as it is
382:51 - okay sorry guys
382:52 - elements
382:58 - elements
383:00 - in the
383:02 - list are
383:03 - okay okay here we come and we will
383:08 - Define one while loop and according to
383:10 - our uh approach that we have a scene in
383:12 - inside paint we will write head until my
383:16 - head is ignored equals to
383:19 - tail
383:20 - I will do the stuff okay so what we are
383:23 - doing we just go ahead and print
383:27 - uh I will remove the print Ln so that it
383:31 - it will not print the each and every
383:32 - element in the new line okay and I will
383:36 - write head Dot
383:39 - data reprint that head dot data and
383:43 - we'll print one space it space also so
383:45 - that we can differentiate between all
383:47 - those Elements which are printing in one
383:49 - line itself and after printing that we
383:51 - will again increment the heads value to
383:53 - the Head Dot next
383:56 - enter next okay so uh okay you can see
384:00 - hey we are iterating until our head is
384:04 - not equal to 10 okay so again I go
384:07 - inside my paint uh when I come here it
384:10 - will check head is not equals to tail
384:12 - but increase it is equals to tell then
384:14 - it will uh terminate this while loop and
384:16 - it will not print the last notes data so
384:20 - each time we have to take care of that
384:22 - we have we have to print the last nodes
384:25 - data as well so to print that data we
384:30 - will just uh come below the while loop
384:33 - and we will just print that data that is
384:37 - head dot data our head is currently at
384:40 - tail but we have written the condition
384:42 - like that we have written that head is
384:45 - not equal to tail but this head is equal
384:47 - to l it will not execute this while loop
384:49 - for the last node for that we have to
384:51 - again write that print statement over
384:54 - here and we will just simply uh
384:57 - print One new line just to
385:00 - understand the clearly okay and this is
385:03 - how we can print the list so let's go
385:06 - ahead and check our method is working or
385:08 - not if if we got any errors we will
385:10 - Rectify that as well and we will pass
385:13 - the head of the list that we are getting
385:15 - from the making the list okay and now if
385:17 - I go ahead and
385:20 - click on run
385:21 - okay it is executing okay so let me
385:25 - create my list as one two three four and
385:28 - five six okay and after that I will
385:31 - write minus one so you can see element
385:33 - in the list are one two three four five
385:35 - six and we have implemented the circular
385:39 - English we have the access to this after
385:42 - six it is it is connected to the one
385:44 - that is first node of the list again we
385:47 - are printing that using this condition
385:50 - and we are printing here the last node
385:52 - of the list successfully so this is how
385:55 - you can print the circular links list in
385:57 - Java thank you for watching this video
385:59 - and I will see you in the next one
386:03 - so hello and welcome back to the new
386:05 - video of the Java tutorial Series so
386:06 - today in this video we will be covering
386:08 - uh we'll be seeing one method which is
386:11 - how we can find the length of a circular
386:13 - link list okay so length in the sense
386:16 - that we have to find how many nodes are
386:19 - there inside that Circle link list okay
386:22 - so again uh if you recall our previous
386:25 - videos where we have seen single and WL
386:27 - English or how we can do that is we have
386:31 - one counter variable which will count uh
386:33 - all those nodes present inside this link
386:36 - list
386:37 - until and unless we reaches the end and
386:39 - with which we representing as Del dot
386:43 - next is equal to null okay so we are
386:45 - iterating over that uh linked list until
386:48 - we reaches at null okay so for but now
386:51 - we are seeing the circular link list
386:53 - where null doesn't exist we have Del dot
386:56 - next is which is assigned to the head
386:58 - which makes this as a circular link list
387:01 - okay so how we can do is uh do this in
387:04 - to find the length length of circular
387:07 - English if we again if you follow this
387:09 - uh approach that we have been using in
387:12 - the circular English sorry singular
387:14 - single English or the doubly linkedinish
387:17 - then you will your Loop will go in in
387:19 - finite Loop it will go and count count
387:21 - again and again because you never stop
387:24 - uh by using that approach there is no
387:27 - null okay this will go this will count
387:30 - as one two three four again it will five
387:32 - six seven eight it the loop will never
387:34 - stops okay so what we can do is we can
387:37 - use the logic that we have used in our
387:40 - previous video that is to we have used
387:43 - that logic to
387:45 - printing that list okay so if I go
387:48 - inside my IDE uh I will I will show you
387:52 - uh so in our previous video we'll see
387:55 - how how we can print the list right so
387:57 - for that we have used the logic ads head
387:59 - is not equals to tell so we are
388:01 - iterating over this list until my head
388:03 - reaches to the tail and after once the
388:07 - head will reaches at the tail uh we'll
388:10 - just simply get out of this Loop and we
388:13 - will just print the last notes data so
388:16 - we can use this logic as uh in our
388:20 - finding the length of method okay so
388:23 - we'll see how we can do this let's go
388:25 - and create one method uh but let me
388:28 - first go ahead and create one
388:32 - okay let's wait a minute
388:35 - let me go ahead and create one another
388:37 - comment over here so that you guys can
388:40 - understand what we have done in this
388:41 - method itself now we print
388:45 - the link list
388:48 - okay so in this video we will be
388:51 - creating uh finding the length of the
388:54 - list okay so I will write length of
388:58 - circularly finished okay okay just we'll
389:02 - go and create our method Okay so
389:05 - two minute okay public
389:09 - static
389:10 - so we are finding the length of the
389:14 - wrist all right so I don't think we have
389:16 - to return anything okay so initially
389:19 - we'll keep the return type ads void and
389:23 - after that we will override our method
389:25 - name as length
389:28 - and now to find the length of the list
389:30 - we have to get access of that list so
389:33 - how we can get access of the list is by
389:35 - getting the head of the list all right
389:37 - so we'll receive the head from the user
389:40 - and I will again just initialize one
389:43 - counter variable and I will limit as
389:45 - count and initially I will name it
389:47 - assign it zeros value and now if you
389:51 - imagine when Corner case is there okay
389:53 - so what is that it's if my head is
389:56 - equals to equals to null all right so
389:58 - initially the head which is given by the
390:01 - user at line number 44. is null okay so
390:05 - that means there is no node in the list
390:08 - the list is empty so in that case we
390:12 - just simply return we don't have to do
390:14 - any processing part in in this method so
390:17 - we will just write head uh head equals
390:19 - equal to null we will just simply write
390:21 - return okay and if that is not the case
390:24 - uh that means there are some nodes
390:26 - present inside the list we will just
390:28 - write our while loop and we will write
390:30 - until my head
390:32 - is not equals to tail
390:35 - I will do the processing part
390:38 - okay so what processing part that we
390:40 - have to do is we just have to increment
390:42 - the count value by one so how we can do
390:45 - this we will just simply write count
390:47 - plus plus we can increment the count
390:48 - value by one and again we have to
390:51 - increment the head as well uh add is
390:54 - equal to head dot next okay so just to
390:58 - understand if you guys can understand uh
391:01 - here also in our previous video we have
391:04 - we have left with the one last node that
391:07 - we have printed over here so here also
391:09 - we will be left with one last node that
391:13 - also we have to count so again once we
391:16 - get out of this while loop we will just
391:18 - simply write one count plus plus as well
391:20 - so that we can cover the last node of
391:23 - the list as well okay and after that we
391:25 - will just simply print the accounts
391:28 - value so we will just simply write the
391:32 - length
391:34 - of the
391:36 - list is
391:40 - we'll append this as with count
391:43 - okay and after that we will just simply
391:46 - one print One new line so that execution
391:49 - goes to the next slide
391:51 - and we can understand things more
391:53 - clearly okay so that is the idea behind
391:57 - finding the length of the circular
391:58 - linked list
391:59 - let's check whether our method is
392:02 - working fine or not we will go inside
392:04 - our main method and we'll just write
392:06 - length call that method and we'll just
392:10 - pass the head that we are getting from
392:12 - making the list over here that will pass
392:14 - head over here okay so let me run this
392:18 - code
392:20 - let me call my list as one
392:24 - wait a minute one unlock is okay well
392:27 - again
392:28 - run this wait a minute okay
392:31 - one two three four and five and I'm done
392:36 - with the print in the list and you can
392:38 - see Elementary the list are one two
392:40 - three four five and the length of the
392:42 - list is five because we have five
392:44 - elements inside the list okay so this is
392:47 - the idea behind finding the length of
392:50 - the
392:52 - circular link list okay so
392:56 - in our upcoming videos we'll see how we
392:59 - can perform the
393:01 - insertion operation or deletion
393:03 - operation on a circular link list okay
393:05 - so thank you for watching this video and
393:07 - I will see you in the next one
393:11 - hello and welcome back to the new video
393:12 - of the Java tutorial series uh so in our
393:15 - previous video we have seen how we can
393:16 - find the length of the circular lines
393:18 - list and now in this video we will be
393:21 - starting with the insertion operation on
393:23 - a circular linked list and now in this
393:25 - video we will see how we can insert a
393:26 - node at the beginning of the circular
393:28 - linked list okay so before going to the
393:32 - coding part let me just show you how we
393:35 - can find the how we can insert a node in
393:39 - a circular English which is at the
393:40 - beginning okay so it is uh pretty uh
393:44 - different from the ones that we have
393:47 - done inside or some singly linked list
393:49 - or the double in English because in our
393:52 - circular linked list we have we are we
393:53 - have connected our Tails dot next to the
393:56 - Head okay so and if you are trying to
393:58 - insert a new node or let me let me just
394:01 - create a new node uh wait a minute and
394:04 - now imagine if you are trying to insert
394:06 - this node at the first
394:09 - so at the very beginning of the link
394:11 - list so in that case the you have to
394:14 - perform three operations okay so the
394:16 - first operation is first operation is
394:19 - you have to assign the tail dot next
394:22 - value to the new node uh tail
394:26 - dot next is equal to new node that we
394:30 - are going to create so that it will
394:32 - create that circular motion in uh it
394:35 - will maintain the circular motion inside
394:36 - our list and after that after creating
394:38 - that link we will just assign the new
394:42 - node.next that is our new node
394:46 - dot next is equals to head uh now once
394:52 - we have created this linking tail dot
394:54 - next is equal to new node and then we
394:57 - have to assign the new nodes next value
395:00 - to the head of the list that is the
395:03 - current
395:03 - first node of the list and after that we
395:06 - will just simply write a head is equal
395:08 - to new node we will assign change the
395:10 - value of the heads to the new node and
395:13 - our list becomes like this one and this
395:15 - is our first node this is our second
395:17 - node third fourth fifth and again this
395:19 - tail dot next is pointing to the new
395:21 - node so so as to maintain the circular
395:24 - motion inside our circular link list
395:25 - okay so this is how we can achieve this
395:28 - uh insertion at uh insertion inside a
395:31 - circular English at the beginning
395:32 - position okay uh
395:36 - nice
395:37 - okay so now let me go
395:40 - inside my IDE and we'll try to court
395:44 - this out okay so
395:46 - below my length function I will just
395:49 - write one comment which is insert
395:53 - at the
395:56 - beginning okay we are trying to insert
395:59 - at the beginning okay so let me go ahead
396:02 - and create one function I will this
396:04 - function is public one public static and
396:07 - we are trying to insert a new node
396:09 - inside the list and that's how that's
396:10 - why we are also changing the head of the
396:13 - list so we have to return the new head
396:14 - of the list to the main method so the
396:17 - return type should be a node we are
396:19 - returning a node to the main main method
396:22 - okay and I will call this name method as
396:26 - insert at
396:29 - beginning okay
396:32 - and we are
396:34 - we have to get access of that list so to
396:38 - change
396:39 - the
396:41 - rest okay so going so insert the node at
396:44 - the beginning okay
396:46 - now inside our
396:48 - method one thing we can do is we are we
396:52 - have to insert a node right so we have
396:54 - to get the data for that node first so
396:56 - we'll just simply write session now dot
396:59 - println we'll write enter
397:02 - the
397:03 - data
397:05 - to insert
397:09 - at first okay so we are inserting at the
397:12 - beginning let's write first and after
397:14 - that we will just write in data is
397:16 - equals to
397:17 - SC dot next
397:21 - hint okay and after that uh we are going
397:25 - to go to create the node okay so we'll
397:28 - create the node new nodes new node C
397:32 - let me call it as
397:34 - new node C and which is equals to the
397:37 - new node C and we'll pass the data that
397:41 - we have get from the user okay and
397:44 - again there is one case a where our list
397:49 - doesn't have any elements okay so we
397:51 - have to handle that case as well uh that
397:54 - case we can handle by writing head is
397:56 - equals to equational that means our list
397:58 - doesn't contain any elements and the
398:00 - node which we are trying to insert our
398:02 - list is the first node of the list then
398:05 - in that case we will just simply write
398:06 - head is equals to new node
398:09 - C and tail is equals to
398:14 - new node C and we'll write new node
398:19 - C dot next is equals to
398:23 - head
398:26 - okay so so that we can maintain that
398:29 - circular motion inside our English okay
398:32 - so if that is not the case uh that means
398:35 - we have some element inside our linked
398:39 - list okay and so in that case as we have
398:43 - discussed uh we just have to write tail
398:46 - dot next is equals to
398:48 - a new node
398:50 - C and we will just simply write new node
398:54 - C dot next is equals to
398:58 - head
399:00 - and we will write head is equals to
399:04 - new node
399:06 - C
399:07 - okay fine uh once we have done with that
399:11 - one now we can go ahead and return our
399:15 - head to the main method which is the
399:18 - updated head
399:20 - of the list okay so we come inside our
399:25 - main method and we will create one's
399:29 - blank space and we will write write that
399:31 - line number 82 as we will call that
399:33 - method which is insert at
399:37 - beginning and will pass the head of the
399:39 - list
399:42 - okay so remember one thing this method
399:45 - is uh giving us the new head of the list
399:47 - so we have to capture that new head okay
399:51 - so we capture that new head inside this
399:56 - okay
399:58 - I will name it as new head
400:01 - okay
400:03 - we have to capture this new head over
400:05 - here
400:06 - now it's okay and we can go ahead and
400:10 - again call those methods of print list
400:12 - but now we have to pass the new head so
400:15 - has to print the new uh list that
400:18 - updated list after inserting the node at
400:21 - the beginning and we will again call the
400:23 - length method and we'll pass the new new
400:25 - head to this method as well okay so
400:28 - we'll see uh before and after whether it
400:33 - gets
400:34 - added or not at the beginning of the
400:36 - link list okay so this method first call
400:39 - is given to the 78 number and now we are
400:44 - creating our list three four and five
400:46 - and let me get out of this Loop and now
400:50 - you can see print the list method is
400:51 - executed and one two three four five is
400:54 - getting printed and after that length
400:56 - method called called and now the length
400:58 - of the list is 5 and now we came here at
401:01 - the line number 82 uh and enter the data
401:03 - to insert at the first and now if I
401:06 - trying to insert 10 in the list and if I
401:08 - hit enter now you can see printless
401:10 - method is called the list is now 10 1 2
401:14 - 3 4 5 uh which is before one two three
401:17 - four five and now it is 10 which is
401:19 - added at the beginning and the length of
401:21 - the list is also incremented by one we
401:23 - have because we have six elements inside
401:25 - the list so this is how we can create a
401:29 - method to insert a node at the beginning
401:32 - of the circular link finished so you
401:35 - know upcoming videos we will see how we
401:37 - can insert a node at the end of the
401:39 - circular link list or add the user
401:42 - specified position inside a circular
401:44 - link list so thank you for watching this
401:46 - video and I will see you in the next one
401:50 - so hello and welcome back to the new
401:51 - video of the Java tutorial Series so
401:53 - today in this video we will be seeing
401:55 - how we can insert a node inside a
401:57 - circular English at the end okay so we
402:00 - are trying to insert the node inside the
402:03 - sampling circular link list at the end
402:05 - okay so imagine this is our circular
402:07 - link list which contains four four node
402:10 - okay and now we are trying to insert
402:13 - this fifth node inside the circular
402:14 - linkage which is at the end okay so for
402:17 - circular English you know we have tail
402:20 - dot next As a head so if we are trying
402:23 - to insert this node inside the list what
402:25 - are all modification that we have to do
402:27 - let's talk them first okay so the first
402:30 - thing we have to do is we have to change
402:33 - the tail dot next value So currently it
402:36 - is pointing to the head of the list that
402:38 - is uh the first node of the list so
402:40 - instead of pointing to the head of the
402:42 - list it should point to the new node uh
402:45 - because uh now if you insert this node
402:48 - at the end this will not the a node
402:51 - which will at the end okay so our last
402:53 - node will get updated so we have to
402:56 - assign the tail dot next value to the
402:58 - new node okay so after doing that we can
403:02 - Now update the Tails value so we will
403:04 - make the tail to point towards this new
403:07 - node okay so our tail is also shifted by
403:10 - one position to the end and now we can
403:13 - go ahead and simply write tail dot next
403:15 - is equal to head okay so we are breaking
403:19 - the bond which is created at the tail
403:22 - dot next is equal to head first by
403:24 - assigning the tail dot next well to the
403:26 - new node and after that we will uh
403:28 - changing the Tails value to the new node
403:30 - so the tail should point to the last
403:32 - node of the list which is our new node
403:34 - okay and after that after doing all this
403:37 - we can just simply write new node.next
403:40 - or else tail dot next is equals to head
403:43 - now so to maintain the circular motion
403:46 - inside our circular link list okay so
403:49 - these are the three things that we have
403:50 - to do in in order to insert a node at
403:54 - the end of the circular link list okay
403:56 - so let's go inside our IDE and see how
404:00 - we can implement this okay
404:02 - and I will come here and I will just
404:05 - write our comment
404:07 - so that we can know what's happening
404:11 - inside that method right so we will
404:13 - write
404:14 - insert
404:16 - at the end
404:18 - okay so we are trying to insert the node
404:20 - at the end okay so we'll write public
404:23 - method should be static and we are
404:26 - trying to insert a node so we are
404:29 - updating our list so it should return
404:31 - the new node
404:34 - obviously and after that we'll write
404:36 - insert
404:40 - at
404:42 - end
404:43 - and this method should take
404:47 - the head of the list so that we can
404:49 - modify the list or insert the new node
404:52 - at the end of the list okay so first
404:55 - thing first we will ask the user to
404:57 - enter the data so let me just copy the
405:01 - this line from the previous video where
405:05 - we are trying to insert the node at the
405:07 - first now we are trying to insert the
405:09 - node at the end okay and I will just
405:12 - write int data is equals to SC dot next
405:17 - in okay and after that now I can create
405:21 - my node node which is our type node C I
405:25 - will name it as new node C which is
405:29 - equals to the new node C and we'll pass
405:33 - the data
405:34 - okay after that we again we have to
405:37 - check on Corner case that is if my head
405:39 - is equal to equational that means there
405:41 - is no node inside the list which are
405:44 - present and in that case we will just
405:46 - simply write new node head is equal to
405:48 - new node the new node C and we will
405:52 - write tail is also pointing to the new
405:55 - node see because that will be the first
405:57 - node inside the list okay okay sorry my
406:01 - bad if my head is equals to equals to
406:04 - null
406:05 - then in that case or we will just simply
406:08 - write as equals to
406:11 - new node C
406:14 - okay and if inside my if condition I
406:18 - will write this like this
406:21 - okay it's fine now
406:24 - if my head equals to equals to another
406:28 - okay uh then in that case we will just
406:31 - simply right head is equal to new node C
406:33 - 10 is equal to new naught C and we will
406:36 - write a new node C dot next should point
406:41 - to the Head
406:44 - okay so after doing that uh if that is
406:47 - not the case uh then we come inside this
406:50 - else part where we know we have some
406:53 - nodes present inside our list and we
406:55 - have to
406:57 - now we have to insert the
407:00 - new node at the end of the list so we
407:03 - will write till.next should point to the
407:05 - new node as we have discussed
407:07 - okay and after that we will write
407:11 - tail is equals to new node C
407:16 - and after that we will write tail dot
407:20 - next should point to the
407:23 - head of the list
407:25 - and after that we will just simply
407:28 - return our head of the list okay so this
407:33 - is uh pretty much you have to do inside
407:35 - insert at the end okay so I will just
407:39 - comment out this
407:41 - previous code where we are trying to
407:44 - insert the node at the beginning so
407:47 - I will just come it out and below that
407:50 - we will write a node C since the the
407:54 - method is returning a new node of the
407:56 - list so we have to capture that inside
407:58 - our main method so we will write you
407:59 - know
408:00 - new notes new node
408:04 - instead of writing no no you just write
408:07 - new head okay and I will call that
408:10 - insert at end okay and we will pass the
408:14 - head that we are getting from the line
408:17 - number 95 and below that we will write
408:19 - the print list method and we will pass
408:22 - the new head
408:24 - okay okay and after that we just find
408:28 - the length of the list by giving the new
408:31 - head of the list okay
408:33 - so now if I go ahead and run this code
408:37 - I should first okay so give the list one
408:41 - two three four five I will write -1 uh
408:44 - so here you can see uh for the previous
408:47 - or the previous list we have one two
408:49 - three four five and the length of the
408:50 - list is also five and now it is asking
408:52 - for the data which is to be inserted at
408:55 - the end I will write 10 to be inserted
408:57 - at the end and after that you guys see
408:59 - one two three four five and ten is
409:01 - inserted at the end position and the
409:04 - length of the list is also incremented
409:05 - by one because now the elements there
409:07 - are six elements inside the list present
409:09 - okay so this is how you can implement
409:12 - the
409:14 - code to insert a node inside the
409:17 - circular linkage at the end so in our
409:19 - upcoming video we will see how we can
409:20 - insert a node inside the circular
409:22 - English at the user specified position
409:23 - okay
409:24 - thank you for watching this video and I
409:26 - will see you in the next one

Cleaned transcript:

are learning the data structures and algorithms in Java so in today's topic we are learning arrays in Java so let's get started so normally arrays is a collection of the similar types of element which has a contagious memory locations so what do you mean by contagious memory locations so it's nothing but all the elements are located next to each other in the same memory space that is the consecutive blocks of the memory as allocated to the user for the processes so there are many types of memory location memory storage types such as hip memories are also there so array uses the contagious memory location so next point is array uses array uses the zero based indexing means at the element that is that stores at the first in the array is is stored at the zeroth index and the next element will store at the one then second and this series will go I go on till n n is the number of number of elements that you declare that the array will store okay so unlike C C plus plus we can get the length of the array using the length member so in C plus plus we use the size of operator which which gives our returns us then length of the array means then how many number of the integers store in that array like that in similar way there is a length member in Java which Returns the same the length of the array which we are using so typically there are two types of arrays in Java so first one is user defined and second one is using building class so in this video typically we are going to see the user defined one and the builtin building class we can see in in the next upcoming videos wherein there is not too much work that we we are going to do we just uh import the class from the Lang like a Java package Lang package which is uh predefined in the Java Java and we just make an object of that class and we can use the predefined methods of that class okay moving ahead uh Java provides the feature of anonymous array which is not available there in C plus plus so we will see what is an anonymous arrays so Java supports the feature of anonymous arrays so so as you you don't need to declare the array while passing an array to the method so think of a situation where where you have created one method and the method method requires an array as a parameter so where where when you when you are calling that method in the main method so instead of calling instead of declaring the new array and passing the value to that array you can just create create a new int and just pass the values that you want to pass through the array that is known as the anonymous array which c plus c c plus plus language is like that don't provide these features okay so moving on next we have the types of array where so there are technical two types of arrays single dimensional and multidimensional okay so let's see uh each of them one one by one so single dimensional array the syntax is very similar to our other other programming languages so wherein we have first declare data type like integer and then two square brackets and array or we can declare it this in three different ways as you can see here so first of all let's write some basic code of that single dimensional array so I'm here and let's declare one public class Main okay and I will write the main method that is public static void Main string Alex okay so first of all let's declare and initiate initialize one array so for that we have we can we can do this int that is that that means the direct array is going to hold the integer types of values let's name our array as a okay equals to new integer and this is the five so this 5 is nothing but the size of the uh how many integer types of values that added is going to hold okay so here I return 5 that means the array is going to hold the five values in it okay so let me just go and quickly okay array at index one it's gonna hold twenty like this array at index 2 and hold 30 and then index three is going to hold for t likewise array at index for is going to hold what sorry 50. okay so here you can see uh my array length is 5 and I have declared the five elements in it so let me just print it on the console so for the printing of an a print of an array on the console we just use a for Loop wherein our for Loop will start from int I is equal to 0 and it will go until I less than a DOT length a DOT length and each time I am incrementing the value of the I so this dot length function you can see here I have told you the there's one method named as length of the length member which will return the length of the array so here we are using that same method so quickly just I will system dot out Dot print Ln is Okay so quickly just revise it we have declared one array and initialize and we are given the all the values that the oregano store at that index and then we have used the for Loop where we are traversing the array and printing the elements that are stored at the 0 to fifth fourth element fourth index of that array okay so I'm gonna run this let's see so here you can see 10 20 30 40 and 50s got printed on the console because at the first at first is value is 0 and array at eyes I store 10 so that's got printed here and each time the for Loops runs in welder the I got incremented I write one added two error three I added four code printed so this is the basics basic program of array so this so moving next we have multidimensional array so here you can see the multidimensional array how we can declare that array okay so without wasting the time let's code it out Okay so I'm gonna come here and I will comment it out this code at next I will again declare one array but this time I am declaring the multidimensional array that means I have to use two pair of square brackets equals to let me just pass those value okay so here I have declared one array which is multidimensional array and I pass values to that okay so let us check how we can print the multidimension array like we have printed here the single Dimension array okay so for that we require two uh for Loops first one is run from I is equals to 0 to I less than three and each time it will it rate I plus plus okay so inside this we have we are going to use another for Loop which is going to learn from i j is equal to 0 J is less than three and each time we are incrementing the value of the J okay so in this we are going to print system dot out dot print Ln array add index I and index J plus one space after each number got printed on the console and after this I will just write system dot out Dot print and then okay so if I run this now we'll see what happens so here you can see one two three two four five four five four four five is got printed so let's check how it got me how is it's printing actually so when we come for the first for Loop the value of the I is 0 and it when it Center for the second for Loop the value of J is 0 and here when we enter and we pass the uh array array as array of zero comma zero zero so what is present at array 0 0 this is the element which is present so this this got printed and when when we go uh again here in in inner for Loop where JJs value is now 1 okay and eyes value is zero so again we are passing wherein G is value is zero and but this time J is value is one so what it becomes array of 0 1 so at position error of 0 1 2 is present so 2 is got printed similarly this for Loop will run uh one time again when J is 3 this formula gets terminated in a for Loop and it go outside for Loop where I plus plus is done and is value is now 1 again it enters the for Loop whereas in change value is 0 and this time we are going to get those values as I array of 1 0 wherein we get this values similarly we are printing all those values so this is the this is how we can implement the multidimensional arrays in Java so there are many uh ways many practical uses of this using arrays in Java let's suppose think think about a scenario where you have 100 students in class and you have to store all the data of the student uh let's suppose marks the students got obtained the marks in mathematics so you can't just declare a one one variable one variable for each student so in this scenario we we can use an array wherein we we just declared one array of mathematics marks and we will just pass those values according to the student's role number and which got printed and stored and whenever we want we can retrieve those information or the values let's suppose I want to know the marks or marks obtained by the students whose role number is 8 in mathematics so I can pass the array name and pass the parameter as eight a seven sorry because the array index in short form 0 and I will get the marks which is of 10 by the student whose role number is 8. so these are some real life scenarios where wherein we are using arrays in Java so you can go to the websites like Geeks for gigs where they have the practice portal wherein you can just sort those uh field you can apply the filter of arrays and you can set the difficulty level and do the do the practice for the coding I will be sharing on all the required resources and the references you will require to learn arrays in Java in the description box of the video so thank you so much guys I will see you in the next week next lecture hello and welcome back to the new video of java tutorial series uh so till now we have covered arrays in Java and for this video we will be covering some practice questions in arrays okay so what is first question uh write a Java program to sum the values of an array so input to this program is an array so you are giving you are given an array of the input you have to print the sum of the elements of elements which are present inside the array okay so let me open my IDE and I will create one new Java class name as arrays practice questions let me increase the font size I'll write my main method okay and now I have to declare one array which will be given as input to the program int array equals to and I will assign values to the array here itself let's suppose one comma 2 comma 3 comma 4 comma 5 comma six comma seven comma eight comma okay so this is this is our array and now uh I again I will require one variable to store the sum sums value okay now I will use announce for loop I I hope you guys and know what is enhance for Loop for it's like a for each loop I will write int I in ARR what uh what we have done here is for every inte integer value inside array will run this Loop okay and what we are going to do inside this Loop sum plus is equals to I means we'll update the sums value with the value which we are getting uh from inside the array okay now at the last I will just simply print the sum is and I will concat it with the value of sum okay so now if I run this should print the value of summation of one two nine okay the sum is 45 now it's working properly so moving forward to the next question uh write a Java program to print the following grid so this is the grid that you are supposed to print on the console uh it has a zero sorry one two three four five six seven eight nine ten uh ten columns and one two three four five six seven eight nine ten ten by ten grid is this and you are supposed to print this okay and so let me get into my ID I will comment this out this is the solution for the question number one I will comment and I will write one one more comment as solution to question number one now from here onwards I will write solution to question two and inside this we required multidimensional array because Matrix is there and so I will declare one multidimensional array over here integer this and this and I will name my array as a which is equals to new integer of 10 by 10 because our grid is 10 by 10 Matrix after this I require one for Loop a for Loop integer I is equals to 0 and I is less than 10 less than 10 means the loop will run from 0 to 9 which is 10 times and each time I will increment the value of i as I plus plus and inside this Loop uh again I require one more for Loop to track the columns first first row will track the rows and second for Loop will track The Columns and inside this I will write intj is equals to 0. whenever my J is less than 10 I will do J plus plus okay and inside this inner for loop I will be doing system.println person 2D and I will I will pass it a value as any at ith index and red jet sorry jet index Okay so after this I will do this okay now it's okay wait I will again simply print the value which is inside the array at I I comma J index and after printing the inner for loop I need to move to the next row and for that for that I will simply write one print statement so that I do so that the program execution will get to the next line okay now if I run this class foreign on the console uh one mistake is there I have written print Ln instead of I should write print so that every time a new line should not get printed on the console now it's working fine yes you can see 10 by 10 uh grid is printed Matrix so this is this is the expected output that we have we want to print on the console okay so next question is write a Java program to calculate the average value of the array elements okay so you have given one array you just have to print the average of the elements which are present inside the array okay assuming that the there are integer values which are present inside the array okay so now again I will comment this solution of the question number two and I will write and one more comment which is solution to question number three okay so first of all we require one array okay so I will declare one array um of type in of type integers and I will name it as numbers which whose value is equals to new integer array and I will pass those values here itself let's suppose I will pass 20 comma 30 comma 35 comma minus 15 okay comma minus 60 comma minus 100 okay so these are the value just random numbers I have passed to the array and I have to calculate to calculate the average we have to calculate uh sum of the elements which are present inside the array first okay so for that I will require one variable known as sum I will assign it value as 0 initially and after that I will require one for Loop to calculate the sum of the elements which are present inside the array int I is equals to 0 now I it's less than numbers Dot numbers dot length numbers dot length methods will return the length of the array okay and now each time I will be doing I plus plus okay why am I getting error yeah yes I've written this okay now it's okay uh what we are supposed to do inside this is update the sums value okay so previous Value Plus the value of of the current element present inside the array okay now it's okay we have got the sum of the elements which are better inside the array now we just have to calculate uh average so to calculate the average and again declare would have double average variable of type double and I will simply divide this sum by the numbers dot length okay and now I can simply print the AV average of the area elements are and now I will concat it with average and now if I run this I should get the average averages 4. okay now it's okay and working fine if you calculate the summation of 20 plus 30 plus 30 35 plus minus 16 plus 60 minus 100 and it when you divide it with the number of elements that is one two three four five six then you should get 4 as a output that is the average of the array array elements okay so these are some questions again I suggest you that you go to the Geeks for gigs or any of the practice portal like hacker rank or hacker you just go there and apply the filter of arrays and set the difficulty level to easy and try to attempt those questions try to solve this question it will help you to improve your logic building in problem solving okay so thank you guys for watching this video hello and welcome back to the new video of the Java tutorial Series so so till now we have covered the theoretical part of the array and we have also done uh some uh easy level questions of the array and in this video we'll be talking some uh medium level of medium level question of the array which requires some searching and sorting techniques uh so till now I have not discussed you the not discussed the searching and sorting algorithms which are there in uh foreign videos we will cover that don't worry uh there are a number of the Sorting techniques and searching tests there are two two searching techniques are there which is linear search and variance binary search we will cover that in our upcoming videos so what will the agenda for this video is I will be covering this uh three uh medium level questions which are arrays address questions uh so I again these these these many questions are not enough for you to practice you just have to get your hand dirty on the programming uh so what what I suggest you you just go to the any any of the portal or Geeks for geeks hacker Rank and hacker hacker Earth Register there uh try solving questions on the arrays set the difficulty levels as easy medium then hard okay so practice more and more so that you can improve your logic building okay so let's get started uh what is the question write a Java program to test if an array contains a specific value so what this program uh what this in this question what we have to do is we have to search for an element uh which is given by the first of all we require an array and inside that array you will be getting one uh element which is what uh arrays arrays of type into arrays holding the integer values itself and you you have to search that element inside that array whether that element is present inside that array or not if that if that present inside an array you just simply return true Boolean value and if that elements doesn't uh present in inside that L array you just simply return false okay on the console okay so let me get into my IDE and I will just simply comment this out uh this is a previous video Solutions okay and I will simply comment and here I will again comment and I will right medium question one okay medium level questions one okay uh now I will be creating one method uh inside this and since then since this method is probably I will declare it as public and I will declare it as static because I have to call this inside my main method and which is test static method okay static uh and this is this will return a Boolean value either true or false it will return true if that element is present inside that array and it will return false if that element is not present inside that array okay and I will write uh My Method name as contains contains means whether that element is inside that array or not you can write anything whatever you want and I will pass my array and item means the value that we we have to search inside that array okay and I will simply write one for Loop and so I will write integer I in array what we have to do uh we have to check if the array at ith index is equals to equals to um is equals to equals to item equals index uh not just uh sorry uh I have followed the traditional for Loop over here I just have to write I is equals to equals to item oh sorry about that and I will write inside this return true okay I'll return true I guess this cannot return a value from a method with white word result type uh why am I getting oh wait I forgot that this is the separate method uh let me just remove this my main method so that program can understand this is as a separate method okay uh now it's okay I will import my main method over here why am I not getting wait a minute let me check this whether oh yeah sorry I have not ended the method now it's working fine I will get my main method okay now it's working right okay and after this for Loop uh when the program execution will get at line number 36 when we doesn't uh find any element which matches to the item that we have passed to the method okay so in that case we simply written false okay now it's okay and now we will call that method inside this main method uh for that before that uh I will declare one array int array which is equals to uh I will simply assign the values over here itself or 10 comma 20 comma 23 comma 30 comma 45 you can give any value whatever you want and after that I will require one variable item means the I value that we want to search inside that array and let's suppose we have to search 23 inside that array okay and now I will just print the call the contents method and I will pass array and item as my parameters to it okay now if I run this since the 23 is present inside this array the expected output should be true yes it is returning two and now if I give a item value as number which which is not present inside that array then in that case I should get false yes it is getting showing false okay now it's working fine so this is the solution to the question number one and what is the question number two second question that is fifth question write a Java program to find the index of an array element so we have to find the index of an array element okay so in this case we want we have to get one array from the user and we want one item like here we have declared over here one item should be there and we have to match whether that item is present inside that error or not if that matches we just have to return the index at which the item is better inside that array okay this is the idea behind this question I will comment this out and this statement also and now here I will write one more comment uh medium question two and for this I will create I will create one in method by the name of find index because we have to find the index of the element that it is present inside the diary and I will write public static the return type should be in because we are returning the index that is the integer value method name is find index and this method is uh receiving one array as an input and as an input and integer uh t let me give it SD okay okay so what we are going to do inside this we will check one base condition if my if the array is equals to equals to null then return 1 this is a this is called as base condition in programming you have to check the corner cases whether these are the cases uh that you need you need to handle or this will improve your space and time complexity of the your algorithm because if the array is original means array is empty there is no point checking doing all this uh running those Loops doing all those processing tasks then it it you can simply return 1 because if the array is null you are not getting going to get that element inside that array okay so this is the base condition that we have to check and now here I will write integer length equals to array Dot oops sorry error.length and I will require one more variable I is equals to 0 and I will declare one while loop and inside this I will write I is less than my length okay I'm doing this task I'm running this while loop whenever my I is less than left so initially my S value is 0 and length value is uh is the number of the elements which are better inside that array okay it can be anything 5 10 whatever the number of number of elements you pass inside the array and inside this for loop I will check one if condition if my array at ith index is equals to equals to okay T is nothing but the value either item that we want to find inside that array in that case we will simply return the value of the I uh return the i i wins the well in this highest value I represents the current index at which the loop is running so if that elements matches the elements that we want to pass that we have passed to the method then in that case return the value of the I that means return the value of the index at which the element is present inside the diary and if it is not present inside the diary if it not matches with the elements inside that array simply do I plus plus means increment the value of the I and again go further checking whether the I is less than equals to length and whenever my while loop is executed successfully and I till not found the element which is which I want to find inside that array in that case that means there that element is not present inside that array in that case we will simply return 1 okay and now uh I hope this is the thing that we have to do inside this method and now if I go inside my main method I have I will be using the same array and here I will give 23 as an input the item which we have we are searching for in inside this array and add indexing start from 0 so 0 1 2 the expected output should be 2 okay and I will simply print I will call the method find index and I will pass array and the item to this method okay now if I run this I should get 0 1 2 yeah we are getting 2 on the console because 0 1 2 the element is found at the index 23 and let me give the items value as 2 which is not there inside that array in that case I should get the output as 1 yeah we are receiving it as minus 1 and if I give the array as an empty array base condition we also check in that case also we will receive minus one yeah we are receiving the minus one uh now it's okay now the one more question was there write a Java program to copy an array by iterating the array now uh we in this questions in this question we have given one array we just have to copy the elements which are present inside one array and take those elements and copy those all elements inside the new array okay so there are several ways by which you can write this code in optimized manner uh okay so for now till now I'm assuming that you know have you don't have any advanced knowledge about the arrays and problem solving so we'll go the basic approach itself okay uh so now I will comment it out and I will write one more comment over here taking medium question three and now I will comment this also okay so I will write one more method over here okay so what we'll be doing we just we just have to copy the elements okay so in that case the method should not return anything okay so the written type should be wired okay so I will public static void um late wait wait wait wait wait do I need to create one separate method first I think no need is there to create one separate method where we can do this kind of stuff inside the main method itself okay so one array was declared already over here I will use the same array uh these items value was not required for me to in this question and I will declare one more here array I will call this as new array new integer of I mean I will give the same one two three four five capacity of five elements inside this area okay and now um to do this I one inbuilt method was there I will use it as okay I will write original array and to print this array inside one go we have one method arrays Dot to string and we have to pass the array name to it okay now it's so errors.to string I receive the class which is uh provided by the Java in the util package here you can see if I hover over here you can see Java dot util dot arrays and I guess yeah IntelliJ IDEA has also imported the following the package okay what it will do it will get array as an input and it will convert that array in into the string okay so it will here you can see it it is accepting the arrayism parameter and it will convert those array elements into the string and it will print all those in a sequence of that we have stored over here okay now I just have to copy all those elements so for the copying purpose I required one for Loop which will start from I is equals to zero and which will go till whether till my array dot length and each time I will be doing I plus plus and inside this array I will simply write new array wait wait wait a new array at it index means the first India that is zeroth index I will copy the element which are which is present at any at ithe index means we are just simply taking the first element of the original array and we are assigning it to the value of the value at the similarly when we go for the again checking for the for loop at that time is value is 1 we will simply get the first element of the original array and copy it with the first position of the new array okay and after that once the for Loop is ended uh the same thing we are going to do we are going to print the copied array copied array and we'll pass new array as an input to this okay now if I run this the same array should get printed okay originally array is uh 10 20 23 30 45 and copied array is 10 20 30 to 23 30 and 45. so this is the solution to the question number sixth so I hope you got some idea how these searching and sorting techniques are done in Java there are some algorithms like I said uh linear search binary search and for the Sorting bubble sort heaps or Radix or merge merge sort is there there are so many uh sorting techniques we will also cover that all these algorithms in our upcoming video for before that you should go to gigs for gigs or hacker rank to try solving some questions so that your logic building will get improved in the programming okay strength thank you guys for watching this video and I will see you in the next one hello and welcome back to the new video of the Java tutorial Series so till now we have covered arrays data structure uh so what I'll be doing is uh we'll be covering some hot hot topics uh hot interview questions which are covered or frequently asked during the interview processes of the many companies okay uh for these are very basic one uh that that the interviewer may ask you to test your problem solving skills okay so if today in this video uh let me just open uh create one Java class and I will name it ads let's suppose remove elements okay so let me what I'll be doing is let me just increase the font size okay wait I will increase the font size okay now it's okay uh okay so I'll just comment out the question so what we have to do is we have to remove the email numbers from an array so what we have to do is we have to write one function where we have to pass one array to that function and that function will return you the new array where all the elements are odd ones okay so what it does it will remove the all the even numbers from the array that you have you have passing to that function okay so enough talking so I will give you an example let's suppose okay wait let me just comment it out and this is an example array we have this array and let's suppose we have elements random elements three comma 2 comma 4 comma seven comma eight okay so uh this is uh the array that you have passed through the function and now uh the array which will be returned by our function is 3 2 is removed because that is your even number 4 is also got removed because that is also even number seven and 8 is also removed so this is the expected output from your function function okay uh so first of all let's break down our question so we have to remove the even numbers from an array right so first of all we have we need one uh way where we can count the total number of uh even integers that are present inside that array right so we need uh one way to count uh step let me just call it as steps steps that we need to solve count the number of uh not even let let us count odd numbers so that okay after Counting step number two is we have to create one new array of that size of the size equals to the odd numbers present inside that array right so create a new array of sides equals number of odd numbers right now after creating the array we just need to iterate through this through the array and check whether that number is or if that number is odd we just simply take that number and put it inside the new array okay so I will write if number is odd take it and put it inside new cell okay so these are the steps that we have to follow okay so let's go and create our main function first I will like my main function and inside this main function I'll create one array I'll be taking the hard coded hardcoded values uh you can also take the uh use input from the user by taking the creating this object of the scanner class as you know till now I hope array of size let's suppose five and wait and I will pass the values uh let's let's Let me give the above values itself three two four seven eight okay now I'm editing the error let it now it's okay okay uh now we have created one array and now I will write and one function function call before that I have to create our function over here I will create one function yeah okay so my function uh doesn't return anything it just creates a or else I can return I can return one array I don't know okay for now I will not return anything I will just simply write void my function name or else I will write I will return that new array itself okay you can also write while but one extra thing that you have to do is you have to print that a new array inside that uh that function okay that's what we have to do extra over here I'm not doing that thing I will write remove even and I will just pass the array to it okay now inside this function first thing we have to do we have to count the odd number okay so for counting part I need one uh counter variable uh let me just call Quality as or count is equals to zero initial zero and we need one for Loop and so this for Loop related from I is equal to 0 to I till next I less than array Dot length and each time we'll do 5 plus plus and inside this array now we'll check for if condition if current I index is more to is not equals to zero okay so what this line will do is it will check that number and it will check if it is divisible by 2 mod 2 means if it will be divisible by 2. if it is divisible by 2 that means that number is even number and we will not count that number as odd odd number and we will not increment the value of the odd count okay and inside this we will simply increment the uh or count by one account plus plus okay so first step is done now we have to create one news array of size the number of the odd numbers designing cited array okay so I will write int array this is the result array so I'll name it as a result new in of size or count again okay now inside this I will again need one uh variable to get to take the track of the indexes of the new uh what we can say new array now inside our for Loop I will just write inti is equals to 0 and this for Loop will again run from int I plus then array Dot and this time we'll do I plus plus and here we are checking one condition if array at ith index mod 2. okay if that number is not equal to 0 what that means that number is an odd number and we have to push that number inside our new result array and I will pass as index because indexing of this resultant error will be different uh as that of the our array that we have passed to the function okay and we'll write array at I okay after passing that we have to increment the index index variable also so that next time the I index will be switched to the next uh part okay or suppose uh for the first Value First Time index value is idx value is 0 so it will push that variable and sorry number to the zeroth index and next time uh idx plus plus we will do the 0 to 1 and next time when we are pushing that number to the nearest it will become one okay at last I will just simply return our result dot array okay and over here I will call that so remove I will call that function over here means just call it wait wait why am I not able to call this wait a minute guys hint remove even more and I'll pass Direct okay what I am getting here nonstitting method oh wait now I will have to switch it as static because as we know uh nonstating methods cannot be called inside the static method so our main method is starting one that that's why we have to create our new method as a static on it also okay and now this whole thing I have I write inside a print statement print remove even and I will pass or add it to it okay so that is pretty much I think we have to do let's hope okay so this is getting then the build is going on will this complete okay this is returning I guess object wait wait wait this thing we have to do I think wait let me just commit it out and I will just simply you can do is create phonetic everything and you will assign it as a and I will just simply write sort of AR to I hope now this will work wait wait wait wait wait guys this is printing the objects I don't know why I will click make check once okay guys I think uh by this we are storing that array inside our uh this array arr2 but one thing it is doing that it is printing the object so I guess instead of printing this we need to iterate over that array okay so we have to run run for Loop over here I is equal to zero I is less than ARR 2 dot length and each time we'll be doing I have 5 plus plus okay and inside this uh we'll just simply write only print because it will print all the bearing inside the vertical manner okay now uh I have to just print there to add index yes okay so now it will print the new array which way which is written by our function so expected output should be 3 and 7 inside the new array let's see yeah three and seven is getting printed only thing is that I just have to print one extra line over here I will just simply write over here itself okay now it's okay fire and again three one space and seven should be painted on the console yeah it is printed on the console so quick summarize uh what we have done in this question uh we have removed the even numbers from an array uh so let's suppose this is the array it will remove the even numbers from an array so one thing uh let me clear uh the way I do in is not the only way you can do it you can also try in the new ways right right now here we have created one new array and we are storing that number inside this array uh we can solve this here by using one eye one array itself but only thing is optimization should be there okay so that part comes under the time and space complexity uh so we will also cover those lectures in our upcoming videos how to reduce your space and time complexity of your code which will improve The Code by a much way okay so here that's all for this question uh I will see in the next one hello and welcome back to the news new video of the driver tutorial Series so today in this video we will be covering another question uh which is frequently asked in our interview for interview process of any companies so the question is how to reverse an array in Java okay so let me just create a Java class and name it as first array okay so let me just increase the font size yeah now it's okay I guess okay so let me just give my one comment which is question viewers and edit uh for example uh the original array that we have given is let me just write original array origin arrays so let's suppose one comma two comma three comma 4 comma 5. all right and the array one that we have to return is the output let me show it 5 comma 4 comma 3 comma 2 comma 1. okay so this is the area that we have to return okay so let's go and write this math function okay so we have to write this function so we just have to reverse an error so I don't think we have to return anything so let me just write as method name as public static void as return time because we do not return anything to after this function and I have to pass the array okay so adding click the quality as numbers because it's integer array and we have to pass start index and we have to pass the end index of the diary okay so this is a question this is the method declaration why we have written static because we are calling this method inside a main method and the method is a static one that's we have written static as the method type okay and we need one while loop okay so inside this file look one thing we can do is uh we can achieve this using single array itself means what what is the meaning we just modify the array which will be passed to this function or the method this method is accepting one array right so we will do such things we will modify this array and reverse the elements and store those elements inside this area itself okay and another way in doing is doing this is you can create a new array and you can create a new array and you can Traverse this original array but in the backward Manner and you can just take go on taking those elements and adding those elements inside the new array what uh but one thing is the drawback of this approach is you have to create one new array right it will increase the space and time complexity of your code itself right there so what we'll be doing is we will modify things in such a manner that we will be requiring one array and we will do all those modification inside this array itself okay so why I will write one while loop while our start is less than 8. okay so this Loop will run until our start in the start integer value is less than end integer value okay so what we will be doing is we will write 1 10 variable and I will assign the value to it as integer of start integer of start okay and over here numbers start is equals to numbers set okay and over here I will write numbers of and is equals to temp and after that start plus plus n minus minus okay so let me explain what we have done here we are just swapping those numbers okay so what swapping means we are taking one element from that array itself and we are swapping that element with the element other element inside that array okay so uh initially modulus starts well it initially the start value is 0 because the error indexing starts from zero okay and what is the end value n value is the length of that array minus 1 because since the array is indexing start from 0 that's why we have to minus one number from the address left okay and over here we have assigned the numbers of start means numbers of zeroth element that is 1 to the ten so initially 10th value is 1 and numbers of start we have assigned to the numbers of end numbers of start is this this position first position of the array and we are assigning or changing the value of this position as numbers of n numbers of n is 5 so after the first uh after running the nine number the number which is stored at the first index of the array is 5 and numbers of n is equal to 10 numbers and numbers of 10 10 payments and Position will be stored the 10th value to what is the tenth value times value is the first element of the array okay so after this after line number 10 the first and last number got successfully strapped okay and I will just simply increment the value of start now the for the next iteration the start value will be at over here and the end value will be will be at over here so the these numbers will also get slapped and will be at 4 comma 2 okay and when we are at 3 the start value is also 3 and ends and uh pointer is also pointing at three okay so at that time uh this three will not get swipe big since this is the middle point of that array and after this iteration uh will will break this condition because start value will be uh over here and and we will go well end value will be over here and this start value is no more less than the end value which is exceeds and this while loop will break and after that our whole array will get reversed at this point okay so I will write main function and I will create one array now which is equals to the let me give that example array itself over here one comma two comma three comma four comma five and I will just call that method okay reverse and I will pass our array comma start index should be zero As We Know and end index is the length of the array that means ARR dot length and since the array indexing start from the 0 we have to minus one because added dot length this will return the arrays in length as 0 1 2 3 4 5 but the indexing should uh there for the PIN code number and now after this okay so we have to paint that array again for that we will do uh iterate so and for Loop I will write I is less than here Dot length I plus plus and inside this for Loop we will just simply print area index plus okay so this this is the thing that we have to do insert this question I guess so so let me just run this okay so you can you can see five four three two one is getting printed which is exactly the reverse manner of this one to three four five okay so you can you can give as much value you want over here with an array and you rerun this code you'll get the exactly the opposite in the reverse way of the diary and you can also take the input from the user from here you can you just simply need to create disk object of the scanner class and take the input from the user and pass that array to this function of over here okay so try doing some giving some more reports for the add to this function and I hope you got this question thank you for watching this video hello and welcome back to the new version of the travel tutorial Series so so till now we have covered two questions which are regardless in the interview processes and now today we will be covering another question which is to find the minimum or the maximum value inside an array so what they have done over here is you will be giving giving an array and you just find you just have to find minimum organization when you found the array array will consist of the integer numbers and you have to find the minimum number from that okay so let me stripe question over here find maximum for all man Eddie and let me give you an example 5 comma 6 comma 9 comma ten comma 25 so let's suppose this is an uh example so after giving this array to our function that we have we are going to write the expected answer should be 5 because among those five integers five is the minimum number or else if you finding the maximum numbers the result should be 25. you can do anything so you can find minimum as well as the next one okay so in this question we will be finding the minimum you can try for the maximum one if you get some error you can do comment out I will be giving you the reply okay so I guess we have to find the minimum value for that we have to return that minimum value inside in the integer format okay so the return value of the return type of the our method should be integer okay and our method should be static because we are calling it from the main method of type in I will name it name this method as find mini mode okay so to this we will be writing array because we need to pass that array to that function okay uh so inside here I will be uh need one Min integer variable which will store the value of the minimum welfare minimum number from that array so initially I will be doing array at 0 as the minimum number initially I just assigning the zeroth index integer value to the minimum variable over here okay and now we need one for Loop which will iterate through the entire array that we have passed I with less than error.length and each time we'll be doing I plus plus okay so we need one if condition over here array at I is less than a minute okay so if if that's the case we just need to update the value of the mini variable okay so what we are doing uh doing over is array at I so let me give an example if if it is the case that uh address trading for the first time so let's suppose this is the it's array and added index that is zeroth index is 5 so this is the element we are assigned it to the means value yes so let's suppose means the mean value is 5 and if condition we are checking added I that is 5 is less than 5 so this will be evaluatory as false so Loop breaks and will come out of the loop and uh for the second time I is value is 1. so array at I means array at one edit one is six is six less than five no this is not this is not the case we will again if condition is evaluated as false again we increment the value of I and again we will check uh whether array at 2 error to smile nine is less than Min equality is 5. again it will evaluated as false so in in our case it it will never evaluate it as two until an unless there is no number inside an array Which is less than five if that number is less than five it will just simply update the value of the mean to the minimum value that means that that iteration value okay uh and after this successful running of the for Loop we will just simply return the mean value you can also find the maximum value in the same manner you just try once finding I will just write in Array and again you can provide your own uh input also nope no issues five comma 6 comma 9 comma 10 comma 25 comma 4. okay and I will just call find minimum I will write our array voice and I will just do this entire thing inside this print statement so that the value that the function is returning that is the minimum number should get printed on the console over itself okay so if I run this uh 4 should get printed yeah four is getting printed on the console let me just uh modify one condition now 5 should get printed yeah so let me just try with the negative number let's suppose negative 9 so what do you think what will be related yeah you guys right now minus 9 is getting printed on the console so this is pretty much about finding the minimum number inside an array you can do this some modification inside this code to get the maximum number logic because by watching these kind of videos uh just watching the problem solving videos will not help you improving your problem solving skills you have to practice a lot uh transform the the focus portals uh problems or hacker rank hacker Earth there are so many portals are there try solving those questions and so that you can build a pop of solving logic okay so thank you for watching this video and I'll see you in the next one hello and welcome back to the new video of the Java tutorial Series so today in this video this is for me another problem of array so that it that is the finding the second maximum value inside an array so in our last video we have covered uh finding the minimum or maximum value inside an array so in this video we'll be covering another question which is asked many times uh during the interperson that is finding the second maximum value inside array array okay so let me just create one call a class called second X and I will let the question so what we have to do is find second Max value in Array okay so I will give you one example let's suppose hello comma 2 comma 5 comma 9 comma seven this is very so what is the expected output should be so the highest value is 9 and now after 9 is value is 7 so the output of this area should be 7 so this is the thing that we have to do so for this we will write one function and that function will be returning the second maximum number inside an array so the return type should be of type int so so let me just create one public math static method of type return type end and I will name it as find second Max you can also try finding the second minimum number of from this array so try solving it you just have to say simply change some conditions so that you can get this minimum number which is second minimum number from then array okay so here I need one variable to take the track of the largest element inside that Arrow okay so integer Dot mean value okay so don't worry uh you will be asking what is that this mean when you represent okay so here you can see if you hover over here uh Java has some predefined values inside the language and these are these are nothing but the constant okay so which are defined by the Java itself if you write a teacher dot mean value some value is assigned to it that is minus two one four seven four eight three six four four eight so this is the values assigned by the Java you can use it inside your code uh you can also write Max will do because other constants are also defined inside the Java so if you want some overview of this you can just go over here and write so Java constants and if you go over here you can find this article which gives gives you pretty much idea about the Java constants okay and now moving to our question uh I need again one one more counter variable which takes not the counter variable a variable which clear tracks the value of the second largest element so inside the array so integer Dot mean value and now one I will require one for Loop which will it trade through entire array again though lensity ARR dot net spend will be doing I plus plus inside this I will write one if condition that is array of I if it has Max then I will just simply write second Max assign the second max value as Max value okay and I will just simply update the maxed value as air out of I don't worry we'll do don't try and test to check what is going on inside this code Okay so don't worry be with me uh RFI is less than second Max and will require one more and so I hope you remember this for this ad and what is all and means both the condition should be evaluated as true until an endless both conditions are evaluated as true Loop uh the program controls will not enter inside this LC flow one once when all these both the conditions are evaluated as to the then and then only the program control the execution flow of that code should enter the inside this way else if Loop okay so edit hi is not equals to the Max so what if that's the case inside this we will be doing second Max is equals to ARR of okay so this is the thing that we have to do inside this for Loop and after after execution of the followup we will just click it up the variable second Max okay and now inside our main main method we will just create one new array and we will pass those values as we have taken inside the example like comma 9 comma seven okay and now I will call that method that is fine second lesson pass our array okay so first let me run this and check whether we are getting the correct or yeah seven is getting minted on the console which is the second maximum number inside the direct and let me once check by changing some values as eight now this time it should be print on console yeah it is getting better on the console so wait let me just put one debug pointer over here and try to debug this code so that you guys can understand this easily okay okay so let's now when the program with execution at line number 23 uh this array so here you can see one two five nine seven eight is passed to this fine method okay the exam of the program execution flow comes to this method called okay and now uh so here you can see uh Max has the value assigned as this value we have see the predefined window which is assigned by the Java to this mean value constant okay so second mind second Max is also assigned that value so for the first iteration is value is 0 here you can see and if when that if condition is checked the max value is this and is value is uh zero here you can see and let's go ahead okay so if for the first time so array of I is all obviously greater than Max because this is the value that we have assigned minimum value okay so next a second Max has assigned the value this okay now again we'll check where I is equals to 1 here you can see I becomes 1. and now this time uh we'll check array at 1 errat 1 is 2 whether 2 is greater than a max value that is one yeah obviously we will get inside this Loop we'll update the second max value as 1 which is the previous version we'll update the max values as 2 here you can see Max value is updated as to Instagram X will be updated as what okay we'll come here we will check this uh and again we will check we will come here we will assign the second max value as 2 and I will update the second uh max value as 5 because till now the maximum value is 5 inside the error here you can see we have updated the max value S5 and second Max will do X2 and again we will run this Loop for I is equal to 3 so what is the element as I is equal to 3 0 1 2 3 0 1 2 3 9 whether the nine is and greater than 5 because it is will come inside this Loop we will assign the value of second Max as 5 and we'll update the max value as 9 so after a successful completion of the I value is three uh our max value is 9 and second max value is five okay so for now I is equal to 4 I is equal to 4 is 0 1 2 3 4 7 7 is uh greater than nine no we'll break that is condition will come inside the lcf condition and now inside this Asif condition uh once we check uh this is condition will be evaluated as 2 and next value is 9 and now we'll update the second max value as seven okay seven itself okay now again we will run this Loop we will do these steps and and at last we will get 8 as the second largest number infected array which is true here you can see one two five nine seven eight eight is the second largest element inside the diary uh okay so which is return to this return statement over here and after that return statement we will come here at line number 23 where we have left to that program is called and here we can print that number on the console and exam x uh exams process successfully and it is completed on the console okay so this is how it this program works I hope you got this question try solving and finding the second minimum number inside that uh array okay so for this for this video this is pretty much thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so today again we will be solving uh one another question uh which is frequently Asked instead of Internet processes and the question is how to move zeros to the end of the array okay uh so let me just create one new Java class with Java class and I will call it as move zeros okay so let me just comment it out our question move zeros today end of the array so this is our question so it's suppose we are given arrays six comma 5 comma 0 comma eight so I think result should result an added should look like it's six comma 5 comma eight comma 0 so this is the horizontal we have shifted all the zeros which are there inside this uh array version array to the end of the array okay so this is pretty much we have to do and so since we are doing positive operation inside that array itself I don't think so we have to return any things uh after that function call so I will for timing I will call it as static wired but sorry void I will name this method as move zeros and I will pass array and one integer okay so inside this I will assign it as intj is equal to 0 and I will go call it a forward run run for Loop so our for Loop will run a form I is equal to 0 to I tell n n is a side of that which is possible from the method call okay and now inside this I will check forward if condition if my added height is not equals to zero and and condition should be there which states that both the condition should be evaluated as two and then and then only we will get inside this if condition okay and add it J equal to equal zero and inside this if condition we will simply write one temp variable which has value OS and verify and what we are doing here is just swapping those two numbers okay if we find 0 at that in particular index we will strap that value with the value which is at the end of that array okay so we'll assign area is value to area of Json that's the last value and after that we will just simply assign energy is going to the test value okay so here we are doing swapping and again we will check on if condition if array at J is not equal to 0. if that is the case we'll just simply increment the value of J over here okay so I think this is a pretty much true that we have to insert this method uh let me just call my main method and I will write in array and we'll pass this same array that we have taken example six comma 5 comma zero comma eight okay and now from here we will write the note since our method is returning nothing what we can do is we can call that method and after calling that method we will just simply print that array okay because we are doing modification inside the same array that's why we can print the direct after the method call okay okay well I'm getting the error oh okay so I have to write the N value also n value is 4. okay and now if I just wait wait not like this I have to write down for Loop to it right over that array why is there I is less than error lock length and each time will be doing I plus plus okay and inside this for Loop just simply paint arrayad um space and not Ln because we want the array should be printed in the one line itself okay and now if I run this code the expected output should be six five eight zero yeah six five eight zero is getting printed on the console uh let me just modify and trying to give some more zeros inside this code okay uh zero six comma 0 comma five okay so let me run this so all those three zero should print uh shifted on the on the right hand side of this okay now again let me try to give some more input to this code okay and now if I run this zero should be shifted K so we guys we have one issue our zeros are not getting shifted okay so let me just try to figure out what I have done mistake over here and just develop this code and try to solve that error let that error okay wait wait wait wait let me just check I'll check with this code okay so I think this might be the error instead of hard code values I will just write array dot length I don't think so that is the error but little check if it is yeah that's the error inside our code error.net that we have to pass now you can see all the zeros are shifted at the end of the array and all the integer are first first comes integer and all those zeros integers have come after that okay so this is a pretty much about this question you can try by your own try solving it and this will improve your logic building skills also okay so I will see you in the next one thank you hello and welcome back to the new video of the Java tutorial Series so till now we have covered a lot of questions using uh arrays okay and now is this is the last question that we are doing uh on array so after this we will be starting our New Concept that is strings in Java so string is has some watched Concept in Java we'll see that in our next videos or for this video uh we are covering one question which is frequently Asked in Java how to resize and edit okay so we want to resize an array for this I will just create a new Java class resize array and inside this Java class uh first of all write a question that we want to go home that is how to resize the edit now let's suppose we have added one to two three four five and we want to and now till now the RSI is of one two three four five contain five elements elements and now we want to resize this array as 10 uh array array which is holding uh 10 elements okay so we want to decide the array size as 10 elements okay okay so this is our goal uh that we have to achieve elements yeah it's okay so uh first of all I will write one function so achieve this thing okay and I guess we have to just resize the array so we are not returning anything so for time being I will just write public static word exit and temperature because function doesn't return anything I guess for now and resize is the function name and it will accept one uh two parameters that is one array that we want to resize and the new capacity of that array capacity of that array okay uh so okay and now uh what I will do is I will create one new uh where array name them new int of capacity so what is capacity capacity is the uh capacity of the new array that we want to create okay and now I will create one oh wait do it and now I will create one for Loop and in this for Loop we will run till I is equal to 0 and I is less than our error Dot length and each time we will increment the value of I by 1 I plus plus all right and inside this I will just simply assign uh 10 pad height index value to array at index right so we are just assigning the values of let's suppose for the first time where the is value is 0 we are simply assigning the array at zeros position value to the 10.0 position all right right so this fall group will run until the size home at ARR array and after that it will break the for Loop and after that we just simply assign the value of ARR to 10. yeah now instead of pointing that original array ARR now it is pointing to the new array temp all right and now if we write the main function and here I will just simply create one new array named ARR and I will assign those values uh let me give the values foreign gives five and into 2 is 10. so that's the thing that we want to achieve I'll write and after that I will just simply print my entire array I I is equal to 0 I left length each time I'll be doing I plus plus I will simply print array at I plus one space all right so what we have done quick recap where you have created one function name as resize and which is accepted to parameters one is array and one is capacity uh which is a new capacity of the new array that we are going to make okay and so here we are making a new array of capacity that is given by the user as the function and after that we have created one for Loop where we are simply assigning the values of our original array to the new array and after that we will just simply assigning the value of the uh value of the array to the depth that is the new newly created array okay and here we have just calling that function and after that using this for Loop we are just printing the entire new array okay so let me run this okay it means yeah so here you can see uh one two three four five is also printing over here and one thing we can do is we're just simply print the ARR dot net this will also give us one idea what inside living happen whether the array science is increased or not okay between all right here you can see the area side is the five you can see over here all right this is how uh you can resize the array in Java so thank you guys for watching this video and I'll see you in the next one hello and welcome back to the new video of the Java tutorial Series so till now we have covered arrays we have done a lot of questions on arrays we have practiced some of the questions which are frequently asked during the interview process and I guess this is pretty much uh idea or the foundation you have you want to learn arrays and what you can do is uh just pause at this moment uh just pause this series uh for some one to two days and go and practice on a practice or more and more questions on hacker rank or Geeks for weeks or whatever code platform you prefer lead code is also there and try solving those uh questions using the array tag and you can also set the difficulties as easy medium high or difficult whatever you want but at least try this will improve your logic building skills okay so if you have done that part so you can continue this way and in this video we will be covering uh strings in Java okay so let me just create one new Java class image string string let me just call it as string Java string so okay and uh we'll just simply like the main method okay now it's okay so what is string in Java in Java string is basically an object that represents a sequence of character values and array of characters Works same as its JavaScript you just keep attention over here let me just give you an example if I create one uh array of type characters and let me name it as CH and I will just write over here and I will assign the values to that array as random a comma B C comma D wait mistake C comma D now it's okay so if I create this array and instead of this I will just type its string s is equals to new string and I will pass it as ch uh so here what I have done is I have created an array of type characters and uh and I've stored those characters a b c d inside that array and I have passed this array to the string s okay so at line number four what it that what it does as it will get that a b c d character as a one single string and it will treat it as a b c now this is get stored inside the Library okay so it is it is as same as uh this is another approach I am telling you simply go and write string s is equal to and simply assign a string a b c d so instead of writing these two lines you can you can still achieve the same output ABCD as here so I'm getting here yeah you can achieve this is also okay and now a Java string class so string one thing you remember for other programming languages like C plus plus we write string as a s s small or in Java you write the string with starting s with capitalize and you as as of now you should know that everything in Java you write with capital letter starts with capital letter is a class in Java so Java provides so string is a class in Java here you can see the implementation path if you hover over this icon and public final class string which is implementing this this many classes now okay so you can go through this official documentation of java to see how the strings Works in Java so Java stream class forwards also a lot of methods to perform operation on the string such as compare concat equals plate length replace compared to in in turn substring we will be covering some of the uh frequently used functions in string you know upcoming videos so for still till now you just remember string is a class in Java which is which has some different methods which has different methods to implement it okay and now we just go through this concept of string okay now here what is how to create a string object so so now you have understood what is string so how to create a string object let's see so there are two ways uh first one way is by string literal literal and one more ways by using by new keyword okay so we'll discuss now this this these two points okay how to create object Orchestra okay so by string material is created by using double quotes for example for example let me just write string S2 S2 is equals to anything string welcome welcome to the series so this is the one way by which you can create a string which this is the way of buying string literal okay and now by using the new keyword you can also create this string so how we can create let me just create Give an example string on this time SC is equals to we just you just have to write new string and you just pass the same uh string here that you have written or anything that you want to assign uh value to that string variable over there okay so this is this is the way two way by which you can create the strings in Java okay so One More Concept is there now one thing one thing you tell me what you can interpret just pause the video and think about it string S4 and I will write it as welcome okay and I will create one more stream by the name of S5 and I will write the same string exactly the stream string where the W is capitalized and all the letters are small small case okay so what do you think here the Java memory memory memory allocation will allocate the S4 and S5 the Sim different memory instances or not so in this case in Java whenever we create S4 and S5 which has the same exactly value of strings it doesn't create a new instance what in what exactly the Java do is you can understand by this example okay so here you can see S1 and S2 has the same value of welcome so Java has a string constant pool where inside the hip memory uh this pull is there where Java stores all these values of the strings and whenever you create a new string it it will check through entire string constant pool if there is a string present which has the same value that you have assigned previously it will just point to that variable to this uh string in the string pull which is inside the hip memory okay so this is one thing that I want to tell you and there are several methods are also there which is there inside the string class let me just give you one example okay let me just give you an example what I can do is okay so look at it oh I will just come here and I will create I will just use this S4 and S5 itself okay let me just write one more thing with ADD B you can add D okay and now uh if I simply system dot outdoor println and I will write string S4 length is and I will concat this string with the method S4 dot length so this will return the number of characters inside this string that means the string length how many characters are present inside that string okay and now if I run this you can see the string F4 length is seven y seven You Can Count Your count here okay one two three four five six and seven okay seven characters are there that's why 7 is a string so similarly you can perform this same method or operation on this S5 also I'll just have to write S5 dot length oh wait one mistake you just Rectify over here S5 it should be there because we are printing the length of the S5 okay and now if you come here string S5 is 14 y so because you can count one two three four five six seven eight nine ten eleven twelve thirteen fourteen this method will also come the blank spaces which I've given over here after welcome and after at this was also treated as a character in Java okay foreign so these are some methods and one more method is there which is let me just put it over here and yes one more method is there two lower case so this is the method and similarly there is one more method is there to uppercase which also converts all those letters inside that string to the lower case and if you use the two uppercase it will also convert that all the characters of that string to the upper case okay so to achieve this you just simply write S4 dot to lower case and now if I run this let me just convert it out so that you can see only one output on the console yeah you can see welcome is printed but additionally we have given W as a capital and whenever we apply that two lower case method on the S4 string if it was it was giving the output as W small because two lower case will convert all those character inside that string to the lower case and similarly you can achieve one more uh to uppercase you can see two uppercase now 4010 thing yeah all the characters inside that string are converted to the upper case format okay so these are some uh methods which are there inside the string uh what we can do is you can simply come here and come here and write string in Java and one first page Java string which is of java teapot website you just come here we go through it whatever I told you is there itself you can come here and read it and here you can see there are string class methods you got these huge list of 28 methods which is implemented inside the string plus you can come here you can also check the official documentation of the JavaScript this Java string intern method so you can come here and also see some example of this try those examples look at those methods and that's all for this Java string and in our upcoming videos we'll be covering some again after again what we do after creating this Theory clearing this theory part we will move on to the coding questions we'll try solving some coding question inside using the JavaScript okay so thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered uh array sense string in Java so from this video onwards we are starting a link list in Java linked list is a easy and more uh my my favorite data structures uh okay and I also love you implementing any language in Java and you can you also love it hash I am sure and so let's go uh so single English is a data structure used for storing the collection of nodes which has the following properties okay so till now we have we have seen arrays okay so let me show you one thing uh here you can see uh so this is this is one I hope you guys can understand by this so till now uh you have seen one array like this okay array so this is the array which has a elements one one two three four three in three six six elements which it is storing and now what linked list does is linked list does exactly the same way it stores the data but in the format of node nodes okay so these nodes have some properties okay so let me just uh give you an example of the node itself over here okay so here you can see so in Java linked list this is the No One node okay so let me just write one note over here this is one okay so this is one node which has uh two parts one is data part and one is next part so these this is simply represents one node in Java okay and which is pointing okay so this is n and which is pointing to none okay so this this entire thing in its one node in Java it has some character six okay one properties it contains sequence of the nodes okay in the single linked list you can see these men these multiple nodes are connected in an in a chain okay and these are connected with one one on one another okay and your node has data and a reference to the next node in a list okay so it has two or two section one is data section and the next section data section will hold the actual data or the value with that node going to hold and next in the next part it it contains the address of the next node that is it is pointing okay so let's suppose uh like this we have multiple nodes okay let me just give you an example uh let me just get it over here and for example uh these are the two things okay it's derive the two nodes in a two chain two nodes okay one node and here in the next part it is has the address of these nodes this node okay so this node and this node is connected using the next part here the address which is stored here okay now the first node is the head node uh always remember the first node of the linked list is called as head let me just write it over head and the last node it's of the of the link list it's always pointing to the null so if if you consider these type of nodes let's suppose they are uh five and the elements in the five nodes in the link list and after the fifth node fifth nodes next should point to the null which represents that this will inclusion ends here and in some of the reference books you will also find as the last element the last element or the last node of the linked list is called as tail okay so the first node is called as head last node is called as state link list okay so in Java or in general there are three types of Link list okay one is simply link list second one is W linked list and third one is circular link list in detail so starting with the single English in this video or in this video I will just give you one overview of the single in English what exactly it is so so you understand the in linked list the data is stored in the format of node and node contains the two part that is data and next part data Parts holds the actual value and next box next part holds the address of the next node to which it is pointing so that it just goes in in the chain format and always remember first node of the linked list called as head and the last node of the link is called as tail and the last nodes next should point to the null which is represent representing that this in English ends there okay so this is the idea of the Sinclair link list I hope you got some overview of the link list how English Works in Java and from next video onwards we'll be starting all those operation like insert insert operation or how to print the linked list uh how to delete element and how to get the element or fetch the element how to check the whether the element is present inside links all these queries so we will solve using the linked list in our upcoming videos so stay tuned and thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so in our previous video we have seen the theoretical concept of the sync readings list okay so now from this video onwards we have started starting implementing all those uh functionalities of the single English that that we want to know in order to understand the single English so first of all in this video we'll be covering how to make the list in this using a singly linked list okay so let me just uh come here and create a new Java class and I will just name it as simply linked list yes now oh you know it's okay so before that uh I hope you have watched our previous video where we have discussed the theoretical parts of the single in English and in that video I was told you that if we need one node to make a single linkage okay and that node contains the two parts one is a data part and one is next which representing which holding the address of the next node in the list okay so for that uh let me just come here come here and I will create one another class uh which is our node of the linked list I will name it as node s which is node of sync singly range list okay notice and here we will create that structure I hope you guys remember that structure let me just recall if you don't know what I'm telling so these uh this this uh this structure I am talking about the structure this structure we are trying to create inside this class Okay so this class okay so let me just come here and we know we have we want two parts one is data part I will animate as data and another one is next which is holding the address so since it's it it is holding the address for the next node the so the type of these uh variables should be known as and I will just write this variable name as next okay and now uh one thing whenever these node node is getting created we want these uh that values that the user want user is given should assign to these two variables okay so for that we need one Constructor over here and I will write one Constructor after node s and this Constructor will accept one uh parameter that is data which is given as input by the user uh like what what's the data that the node is going to hold okay so and we will assign these Broad data which is equal to data and these represent to the current distance of the variable and then our next should point to the no that is that is the simplest idea of the node we have taken those two variables and we have assigned that value and according to the node this is the idea that is the data part is over here and next part is over and this next is pointing to the null we can change that now uh when the if there are more number of nodes inside the English Okay so for now I guess this is a bit image that we have to do inside the node and now if I go inside my main class which is over here and I will just create one function to make a list okay so to create a single English okay and now uh since we are accepting your input from the user we need our scanner class to be imported uh so I will write import Java Dot util Dot scanner so we have imported this kind of class and now since we are going to make multiple functions I guess it is go to declare the scanner object uh globally inside the classroom okay so I will write public static scanner SC is equals to new scanner system.in okay so now we have created this and now I have to do one more thing the first node of the list is called a head and the last mode is called as tail okay so we need those two variables also also we like all right public static so these are no type right so we write public static of type node S one is head and one more is ding all right now I think we are good to go to write the function so I will just comment it out as function to make the singly linked list okay so inside this I will write my function public static and node as and I will name my engine is make list okay okay so here you can see uh public static uh you know node s is the return type because since this is this this function is making our list we want we have to return the head of the list because uh to access one single linked list or whatever the Ws circular English we need the head head of the list that is the first node of the list without knowing the first node of the list we cannot Traverse the whole list or we just lost here if in case if you if you if you not assign head uh as the first node of the list and you assign the T this second node as ahead of the list then we will never have the track of the first node of the list so that's why it's important to you to assign the head of the list and return the head while you're making the list whatever it is it if it is single in W or circular in English Okay so that's why we have written the return type as known as and we have uh name our function name as make list and we are not passing anything to this function because it's just creating on list okay now uh since okay so assume on conditions we are making one list so initially what do you think head and tail are null right because list is empty till now okay deal should also point to no so with that part we have done and you will just simply write one print statement that is enter the data in the list okay so here we are asking the data from the user okay so in data is equal to SC Dot next int so it's not the case that this function call will uh just once okay so we are calling that function we are making the list and we are making uh multiple nodes inside the list okay so for that purpose we will need one Loop which is iterating over each time whenever uh whenever and how much you denotes you want exactly you know in your list all right so for that we will need one while loop and this right Loop will run until and unless the data value is 1 that means whenever you give the data value as minus 1 this root will break which indicates that you are done with inserting the nodes inside the list and you want to close the list and get out of this okay now if and now here after coming inside this Loop for the first time we just have to create the node the actual node of this linkage okay so we'll create the object object of the node as and I will just name it as new node s which is equals to the new node and according to that Constructor we have to pass one data okay so that data we have taken from the user over here that we can simply pass it over here now at this point line number 14 we have our list is our first node is got created now we have to check if one if condition should be there if our head equals to equals to null sorry guys wait a minute yeah so if our head is equal to equal signal that represents that there is nothing inside the list no node is there inside the list and this is the first node that we are trying to insert our list okay head is equals to null so in that case we will just update the head value to the new node mu node s and we update our Tails valued also to the new node s okay so this if condition will executed when there is no node inside the linked list that is the first node that we are trying to insert the list okay and now in the else part we will simply write tail dot next equals to new node s and after that we will write tail is equal to new node s okay so in this else part so now in this else part whenever when this else part get run where if if condition is not executed and if condition is not con executed when there is a no present inside the list and then in that case we just have to update our tail because head is not going to update head is also already assigned as the first node of the list over here you can see head is assigned to the first node we just have to uh point the tail to the next node okay so if so that is achieved in that else block tail dot next is equal to new node dot next that means tail is currently pointing over a over here that is the first node of the list and this next part 10's next part means this part this part we are trying to assign the next value to this this node value okay so in over here we have simply assigned that value to this and they are simply as uh assigning the Tails value to the new node value okay so our now our tail should point to this new node that is inserted inside the English and how we are connecting to do those nodes that is in next part in the next part we are showing the address of this new node over here and we are simply assigning the Tails value to the new node value okay so this is the part that you have to do and after this okay so whenever these are done with the making the list user will enter the minus one in in the console as the data value and loop will terminated and after that we will simply write return head okay so we'll simply return head of the linked list okay and now if I write my main function and to call that make list functions and I need to keep the track of the head okay so ahead I will add s is equal to head is equal to Middle East so it says this function is a function is returning the head we will store that head inside this local header variable and after this line our function called got called and our list is completed and our list is make okay build okay now I hope you guys understand how to make a single English in our upcoming videos we will see some more functionalities of the link list so thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so till now uh we have covered uh how to make a linked list that is a single English and so for this video we'll be seeing how to print a linked list and how to find a length of the link list okay so for the printing purpose let me just go into my page and let me explain you the theoretical part of this link list okay how to print the nucleation okay so for the printing purposes uh first of all we need the head of the link list so from here you you will get to know what is the importance of uh getting the head if you get the right head of the linked list you you can find or even perform all the operation on the English okay so I'm assuming you have watched the previous video where we have make the link list and where we have discussed about the head part and head is basically contains the and which denotes the start of an English Okay so for the printing purpose we need that head so that we can start printing the elements from that position itself okay so for the head printing purpose we need head and we are go go on printing the head and head head until we reach at one position where head is head the node the node of the head which is currently there with which next is pointing to them that that means uh here you can see uh assume there are two nodes in this linkage this this one is head and this one is tail and how you can find the end of the link list they have to find the end end of the link list the it is simply nothing but the the net that modes next should point to the null whenever the node is there whose next is pointing to the null that denotes that that is the end of the linkage that means we have traversed all the link list in right starting from the head to the tail that is the last Road of the necklace okay so this so this is the idea behind the printing of the link list and to find the length of the linked list let me just first get clear this print list then again we'll come inside the paint and try to discuss the length in English so for that purpose we will write one one more function so this is a public static point I will name it as print list and since we to print the linked list we need the head so that's why we will accept one head of the linked list to this function and after that we'll just simply print that elements elements of the list are after that we'll run one while loop and this while loop will get executed until and unless the head is pointing to now okay when the head is pointed to null that means that is the end of the linkage no more nodes are present after that node okay we are pronouncing then till we find null okay so South head.data head dot data and we'll just printing space I will just write only print because we don't want our dish to be printed in the vertical manner okay here if you write head dot data that means head dot data means this is head entirely dot determine this part we are just simply printing the head dot data means the data part of that node okay so okay data part of the node and once we print that we will we just reassign the value of the head to the Head dot next that means we are moving next forward okay that means after after printing this data bar we will just assign the head value to the Head dot ahead dot next to it hold the next next node address okay so we'll reassign this head to this node and now the head is pointing to this one okay now likewise we will go on traversing the whole list and we will go on printing the data part of that node and after they at the end we caught all our node to get to be printed on the console okay so this is the print list function that we want to perform and uh in our previous video we have made the list and now we want to print the list okay so we'll just simply Grant column method print relation we will pass the head to this okay and now uh let's try to understand the length function of the linked list I like how to find the length of the nucleus that is how many nodes are present inside the link list okay so for that purpose to find the length again we need the header each each time we need head if you if you get the head you just we have performed all the operation okay so uh a length function is there we need one head okay so we will just simply write over here let me just write it over here we need one head that is a starting point of that click list and after that to count the number of the nodes in the link list that is between uh similar to The Grid list we'll just simply uh perform one while loop while loop which will iterate through all these nodes and it will iterate until the head dot next is pointing to the null that is the end of the link list and we will take one counter variable counter variable which will count uh the number of the nodes inside the linked list and each time we will increment increment the head 2 here dot next so this is the rough idea behind the how length how to find the length of the link list so let's go and implement this function also inside our code base so I will write public static so this function doesn't return anything find length okay and this is also accepting one head of the linked list parameter and again I as I told you we need one counter variable which initially assigned to 0 and well you need one while loop which you will iterate through the all the nodes of the list and we will iterate until the head is not a bus terminal and once the height is equal to null that denotes the end of the linked list and if it is not a personal we just simply uh increment the counter variable uh by one and we'll just simply reassign the value of the head with the head.next so this is the thing that you have to do and after uh successful running or the while loop we just have the length of the nodes which are how many nodes are present inside the nucleus that will simply print out over the concept length of the this stage light Plus counter okay and after this we just simply come over here and call that length method and we'll pass that head to this function also okay and now uh if I run this score okay so it is ready to run first of all uh make list function will get called here here you can see enter the data in the list uh program execution comes over here at line number 11 so let's suppose I'm creating one list okay so let me just write one comment over here so that you guys can understand easily I will write one comment so we are trying to make the list like this one two three four five so we want to make this list okay so let's go and uh make this list okay so I've got one two three four five so at this point uh list is uh all the elements that I want to insert inside the list are inserted and now I want to get out of this Loop which is this Loop and how to get out this get out of this look we just have to give the data as minus one so if I write minus one it will get out of this Loop you can see we've got one plug inside our code okay let's try to debug this according to my code this should get out of this Loop this is not getting out of this blue why is it so which is true go through the code and check what is the problem inside this code okay wait uh let me just write one run it one more time stop and return I guess there are some issues okay is it running let me just read like this wait guys it is running okay so we want to enter the data that's one comma two comma three comma four comma five and after that I want to add one so so wait guys I will uh just check if I want this error okay so guys I after debugging this code I got there one thing we have done a mistake over here while creating the link list that is we are accepting the data from the user and we are according to that we are running this file book okay so once this file Loop Got Run we are we we just we have to sub we supposed to rename this Loop and recheck the data value but we are not uh getting again the input from the user for that purpose we have to add one extra line over here AC Dot an exchange that that means we are getting again the input from the user and that input is again used as a check to this while loop again we are running this link group and now if I run this Main I hope this will work this time and I will try to create one two three four five uh so link is an English slower I will write minus one so here you can see the elements of this list are one two three four five uh which is printed printed by this paint list method and the length of the list is five they change the five elements inside the list is there one two three four five so the little length is five so all working fine uh till now we have covered how to make the list how to print the list and how to retrace the length of the list okay so thank you guys for watching this video and I'll see you in the next one hello and welcome back to the new video of the Java tutorial Series so today uh we are trying to learn the how to find the or how to search the element inside this in English Okay so till now a quick recap uh we have done how to make the list how to print the list how to find the length of the list and now today we want we have we want to learn the how to search an element inside a simply linked list for that uh we'll quickly go through the one paint and how to how to check how to find the or how to search the element inside as in plain English sing mean English okay so now so things which are required to search an element so first of all we need the head of the list head that is that is clear we need the head of the list and we need variables to check and to store the place at which we found that uh node or found the data inside the list that is variables variables of type integer and then we need one while loop where we can travel through to our whole list and check whether that nodes data is equals to the data which is entered by the user or this that that is the data that is user wants to search okay so these are the things that which which are required to search and particular element inside the linked list and so let's go inside our IDE and try to record this okay so I will write one method public static and we are trying to search an element so there is no modification inside our list and there we are not returning anything so return type should be void and I will write this search element as our function name and this method should accept the head of the list that is the starting point of the list so at the first we will just simply print the enter the data that you want to search okay so we are assuming one input from the user that is the data that the user want to search inside this list and we will just simply write int element element SC dot extent okay and place which is equals to currently it is assigned to one Okay so okay and we will create one new node of temp which has the value equals to the header which will assign the value of head to the 10 and we will perform all this operation using that temp variable okay and now we have our 10 we will just simply write one Loop and we'll write until our temp is equals to null we will perform these outputs okay so what kind of operation that we have to perform you are we are checking one if condition if our element that we want to find is equals to equals to the current temp dot data if it if it is a condition that means we have we have found our searching element and which is simply write print element found element found at and we will concat it with Place variable Plus th place in the list okay uh so full stop and after this if if you find the element we just simply return we don't want to perform uh more operation and if that is not the case we didn't find our Loop sorry the element we'll just simply reassign the template due to the temp dot data or not 10. data time dot next because you have to move to the next element of the list and we will just simply increase the count uh count of the place by one okay and after performing this while loop if it doesn't if it doesn't return this return statement doesn't get executed that means that element it doesn't element is not present inside the inside the list and then in that case we will just simply print a limit is not presented inside the list element is not present inside the list okay so I guess this is the thing that we have to perform and okay so I hope you guys are watching the previous videos do watch them and then come then and then only come here because you don't understand anything what's going on and please like and share to the series and do comment out what is your favorite part and what is if you find any difficulties also comment I will be looking after it okay so now we want to search the element right so we have make the list we have print the list we have length of the list and now we want to search the element uh okay so I will simply call the search element function I will simply pass the head of the list to that function okay and now if I run this uh we'll take the previous example itself we will make the list as one two three four five oh you know what let me just give you some more examples one notes okay so we have the elements in the list of one two three four five six seven and the length of the list is seven and we want to search let's suppose 5 whether plus 5 is present inside the list or not okay so you can see element found at fifth place it's a list okay so first fifth place one two three four five fifth place is five which is present inside the list that is correct uh so again I will run this and this time I will give the data which is not present inside the list one two three four five six okay so I eliminated the star one two three four five six and now if I want to find 10 in the list so you can see element is not written inside the list okay so everything is fine working so this is the idea of how to search the element inside a link list I hope you bought this concept thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered how to search the element how to in the length how to print and how to make the list so today in this video we will be talking about the how to reverse LD single linked list and how to find the middle node of the single link list okay so let's get started so to reverse a single request we what are what are all things that we have required and what is the logic how to reverse a string uh sorry string not string it's a single in English my bad how to reverse a single in English first of all we want head that uh which is indicating to the start of the link list and again we need one while loop which is iterating over all the elements of that list and one more two more variables of type node will be required which is one is previous which will hold hold the previous uh node of the list and one is next which will hold the next node of the list and of using these three variables of type node we will just perform this inverse operation of the string uh not answering what I'm saying either it's a single list my bad okay so now we will go and write the code for this reverse of the signal list okay I will come over here and I will write one more function that is public static of this is this uh we want to reverse a list after reversing a list we want to we want to give the new head of the list through which we can uh Traverse the new list that is the reverse list okay so we we need to return the head which is of type node so here we have written this and we have write the function name as reverse list then this list will accept one parameter which is head of the list and as I have told you we need three variables of type node s uh so let me just write those node s I will write notice of current so we need we need the track of current previous and next row current will will be equal to the head of the list that is the current uh starting point of the list and again we require is node as that is previous which is currently pointed with the null and one word is there that is next which is again pointed to the null okay so now we require one while look while loop while our current is not equals to null so whenever our parenting article signal until that we will perform this operation what are the what are our operation we will assign the next to the current dot next that is equal that means the current where node that is pointing it is the next node if it will point away so next we'll hold the next variable next not variable next node of the list and current Dot next is assigned to the previous that is previous will shift one one step ahead okay and previous is equals to correct and after that we will just simply write current is equal to next we will move forward to the list and after performing all these operation we will just simply return the previous because that is the new head of the list which is the reverse list okay and after this now we will just simply need to call this method inside our main main method and to call this purpose I guess we want to make the list we have to print the list I don't think so we need length of the list that will just commit it out and I will also come into the search part also and I will just write reverse list sorry guys will be worse list and I will pass head to it and after this now we again want to print the list but with the updated head right that is returned by this reverse list okay so I will just again call the these prints list method the only thing is that here the print list will print the list in the way manner that we have given input and here then a print list function will print the same list but in the reverse manner okay so let's just paste it whether it is running good okay so we are entering the data one two three four and five uh so the expected output should be 54321 okay let's see if it is there so elements in the list are one two three four five elements of the list are one wait wait wait wait we are doing something error in this code we have to use the list all right uh elements in the list are we are painting the list we are reversing the list and after that we are again printing tools elements of the list are we are we are getting only one over here why so we think we have one done one mistake inside our code let me see we have next will be equal to next question dot next equals to previous and previous is equals to current and current is equal to next and we are simply returning the previous in case say this wait guys I will just debug it and let you know okay guys I guess I have rectified the error I found the error that is uh look at here we are creating one head and we are making the list and the head which is written by this make list we are assigning the two heads okay till the next time we are printing the list we are again sending that headquarters this method so that head is not going to get modified over over inside the print method print list method okay but inside the reverse list method uh our head is getting modified here you can see our head is getting modified and our head new head is our head is at one okay so our list is uh let me just give you a clear idea over here you can see one two three four five so our head is at one okay so to the print list we are giving our head okay our head is not not going to change inside our reverse list method also okay but the reverse list is has its own new head here you can see it was returning one node okay so we have to retrieve that node inside our main method we are not doing that we are just simply again passing that head so that head is pointing to one all right so if you reverse the list after work one should be pointing to the null that is that is going to happen by this reverse list that's why uh this this error was there where uh reverse list is or printing only one inside this we just have to introduce one new node to catch the new node of the list okay so reload a new nudes let me write as news Okay so this node is old by this news and we'll just simply pass next to it uh now I guess this will work fine in our reversely should paint it on the console and okay now I will write one two three four and five and after that I will get minus one so here you can see one two three four five is getting winter which is the original list and after performing the reverse reverse list method on this same list we are getting five four three two one which is correct so I hope you guys have found this helpful so do like share and subscribe to the channel and I will see you in the next one thank you hello and welcome back to the new video of the Java tutorial Series so in our previous video we have talked about the how to reverse the list and now in this video we will be covering about how to find the middle node inside a list okay so let me just going go into my paint window and I will show you how we can find the middle load of the list okay so to find the middle note of the list uh since this is it is a link list we can we cannot uh perform the operation that we are performing inside our array to find the linkage that is a total elements but then inside the array you divided by two that that stuff we can do inside the array but but in the English uh we cannot do that that thing so we have to find another way to find the middle node of the list okay so to find this we will uh try to find the middle node of the middle node of the link list using the slow and fast pointer approach okay so what it does is exactly so we need to two variables of type node s and uh which which will call it as let let me call it as slow pointer and fast pointer we initially assign those uh as the heads value okay that is the starting starting of the list and we need one counter variable which is initially uh count as a initially assigned as one okay so we need one while loop what that means exactly is uh the first node is not uh need should not be null and the node which is pointing to it the first node is pointing to the node uh that node should be present and that should note should not be null okay so these two conditions that we are going to check inside the while is that two conditions won't satisfies this condition will enter inside the loop and we will simply change the value of the slope pointer to the next that means slow pointer will be assigned as new new value the slow pointer will be this next next next mode of the list okay and we will assign the first pointer value to the first pointer next dot next that is fast pointers value will go to the Third po pointer means we are moving slowly we are iterating the list slowly at the first pointer means we are iterating the list by one one node I had always one node ahead of the slow pointer okay and after this uh running of this while loop each time we will increment the count variable so that we can have the number exactly the position where the middle node of the list is present okay and after running up this while loop we will just simply print the slope pointer data because the slope pointer is a node which is uh exactly at the middle of the list and we will also print the count of a count variables value which will give us the exact position of the element exact position where the node is present inside the list okay so that is the idea behind the finding the middle node of the list so let's go inside into our ID and try to Port this out so to make this function I will write public static and I don't think so we are returning anything okay so I will write white for time being and I will write this name as middle node and this method will also accept the head of the list add and I will simply come here so we are approaching this way in the slope pointer first pointer approach I will just comment it out I will write slow pointed is equals to one star and our fast pointer is equals to touch down that that means always the first pointer will be ahead of the slow pointer by the one node and this will gives us the exact beta of the list and we need uh two this slowing for first pointer we need this flow pointer initially both the both are assigned to the head head of the list that is the starting point of the list and again we need one more notice first pointer which is also assigned to the head of the HDD changes okay so again we need one count variable to find the position of the position of the node that is present exactly at the middle of the list and inside the while loop we will write first pointer is not equal to none that is function should not be null and and we will write and condition and I hope you guys remember and condition both the both the expansion expression should be evaluated as true fast pointer dot next a should not equals to null if that is the case we will enter inside this Loop and we will simply assign the slow pointer value to the slope pointer next we will increment the slope pointer nodes to the next node of the list okay so slow pointer is equal to slow pointer dot next and we will also increment the value of the first pointer to the first pointer is equals to fast pointer dot next dot next that means the one node ahead of the slow pointer and we will just count plus plus because we want also want to point the position where the while loop we will we have now the middle node of the list and in the name of slow pointer which is flow pointer is exactly pointing to the middle middle node of the list and the count having count the value of the count is equals to their position of the node that is Building inside then make list is the middle okay now here we can simply write middle Road there list is flow pointer Dot data that is the data part of the list which is which is at count is the position of that number position in the list so we'll stop and this will give me the middle load data and the exact position of that node inside the list okay so let me call this to call purpose will come inside of the method and we will call this function uh middle node not make list middle node and will pass the head to it okay uh so uh I don't think so we want to reverse this I will just comment it out we'll need this also you just make the list we just print the list and we just find the middle node of the list okay now if I run this sorry one two three four five so what do you think one two three four five is there and according to this list uh three should be the middle middle node of this list let's see if it is the case yeah elements of the list list r12345 middle load of the list is three yes this is right middle node is three which is at third position of the list that is one two three third position for the list so everything is working fine uh let me just run it again and give it give the even number of the nodes inside the list three four five and six and hit minus one and now you can see the middle node of the list is 4 which is right four and which is at the first fourth position one two three four four which which is also correct so this is the idea behind how to find the middle node of the list so I hope you are enjoying this video enjoying this series uh do like share comment and subscribe to the channel and I will see you in the next one with the new concept of the sync little English thank you guys for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered uh pretty much concept of the link list so we have seen uh we Define in the middle node how to reversing the list how to search and element how to find the length of the list out of print the list and how to make the list so till now we have covered all those Concepts all those operations which are performing on the link list which doesn't modifies the linked list right uh we have not done anything over here we are just simply retriving or uh checking the list we are processing the list till now but from this video onwards we will start performing on the operation and to modify the list okay so we will be starting with the insertion operation first and then then we will move to the deletion operations okay so basically there are three types of uh insertion which are done at the on the link list okay so let me just clear this first let me just clear this oh let me just clear okay now it's fine I guess okay uh now let me just create one list for you so that you guys can understand clearly okay so we are making this list and I will write a I will make this three notes in the list okay and each these nodes are pointing to this and this node is pointing to this and this node is pointing to the null okay I will write Bell over here so that you can understand null uh so this is our 10 I hope you remember what is still uh this is head uh this is the data path and this is the next part okay and this next contents address of this node and this is the first node see the second node and this is the third node in the list okay so this is our list and we want to perform the insertion operation of this list so basically there are three type of operations okay that we can perform on a list let me just increase the font size we have to perform this operation on the list okay so first operation is insertion at beginning and second one is insertion app and and third one is insertionate user specified location okay so these three operations we are we have to perform okay and now now you can see these three operation we have to perform okay yeah right so in this video we'll be covering insertion at the beginning so what do you think uh to insert a new node at the beginning of the list what will be operation that you have to perform okay so let's write down those operation that we need to perform uh so okay and we need first of all and we need the current head of the list head of the list okay and then uh we need a third we need to make a new node inside a list before that we need data which is important we need data for the new node data for new node new node and we will make the new node make the new node and after that we will assign that or insert that node inside this list insert the node in list and after that we will return the new head of the list because head is going to change it is going to change because after performing this operation head is head of this space is going to change I will just copy all this operation that we need to perform to insert at the beginning and I will come over here and I will just comment and paste it off okay so these are the operations that we need to perform I will just tab it over here okay now it's fine so these are the operation that we need to perform okay so we will write one function which is public static and it will return When you know new head of this list so we it didn't didn't type should be node and the name of the method is insert add the insert at beginning insert at beginning node s uh will first will take the head of the list okay for all this operation so T again okay so we have received the head of the list okay we have taken this uh we now we need to take the data for the new node okay so we have to receive the data right so before that I will print on the console write the enter the data to insert 3 node in beginning okay so we are asking for the data from the user to insert which is going to going to insert it at the beginning of the list and now here I will store that data into the data variable SC dot next state and after storing the data now the second part is done now we have to make the node okay so make the making the node is pretty simple I hope you guys now no we just have to create a new object of the new node s okay wait all we have to do we just have to create a new node okay with node s let's suppose and we will assign new new node and we'll pass that data to the node okay now it's okay and now wait guys no okay now once we created the node we have to insert that node into the list so for the insertion point of view uh what do you think I will just come come to my paint okay so this is the head which is pointing to the second node of the list so if if you want to perform a insertion operation at the beginning uh let me just create one new node so that you can understand clearly here is the data part and here is the next part okay now if you want to insert this node in inside this list at the beginning what all things that you have to do uh you have you do you think you have to perform Okay so first of all you need to link this node with the correct first or the current head of the list okay so by linking means we have you have to give the address of this s next and assign it to the current head this okay so this is the first step that you have to perform I will just write it as first step first step you know what okay so this is this linking should be done and again now if this linking is done and we are inserting this uh node at the first uh we need to update the head also Okay so at second second operation we need to reassign the value of the head to this new node okay and after that we need to return the head now the head is pointing to this oh okay now the our current new current or the new node a new head is this head of the list so these are the operation that we need to perform uh okay so first of all we need to connect our new node with the current head Okay so foreign foreign guys uh my laptop battery was dead that's fine okay so now uh we have created a new node uh we have now we have also understood what we have to do exactly to insert this mode at the beginning okay so let's let's do this okay we now uh create a new node and that's next we'll assign it as head now we at this point we have connected that new node to the Head current head of the way that means the current first node inside the list and now we have to just have we we just have to update the head which is headed equals to your node this will uh head now head will Point into the new node of the list that is the current first node of the list and now we just simply return head against okay now simply return the head of the list uh I hope this is the thing that we have to perform inside bearing okay uh now we don't have to find the middle of the list I will simply comment it out we just need to print the list and now uh if you notice uh our new head is going to return by going to return by this uh inserted by getting method so we have to store that new head over here okay so we'll just simply write head is equals to insert at beginning and will pass our head to this method okay and after that we will just simply print list again with the new head okay and now if I run this okay so one two three four five six minus one okay so let me see the list of one two three four five six and enter the data to insert in node in the beginning uh that is a typo you don't forget it enter the data okay so now if I want to enter 0 at the beginning let's see if it enters here you can see after uh giving 0 to enter enter at the beginning the new list is zero one two three four five six so zero is getting inserted at the list okay so this what this is working fine I hope you guys understood how to insert a node at the beginning of the link list I hope about this concept thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered the insertion operation at the beginning and so now in this video we will be covering uh insertion operation at the end of the link list okay so in our previous video I will talk about this uh instruction at the beginning and in this video we will be covering insertion at the end okay so let me just clear this okay wait let me just clear this thing okay okay uh now uh we want to insert the same node at the end of the link list okay uh let me just erase this foreign at the end okay so things that we are we we require okay first understand that so to insert at the end we need a first of all head of the list again that is much we need the head of the list okay uh now we need the data that with that data for new node data of new node okay that is going to get inserted now we have data we have the head now we create a new mode creator node okay now we created a node now we insert at the end insert add and and at the end we will return the head of the list return head okay so these are the operation that we want to perform uh to insert a new node at the end of the list okay so I will write it over here I will just comment it out and paste it enable give one tab and after that we will just simply click on here okay so now this is the thing that we have to achieve okay so now I will write my function which is public static and it is returning the head that way it is of type node s and the name of the function it's insert at it let me call it as insert at end will simply pass notice head available simply pass the head of the list first of all we will get the data from the user enter the data that you want to insert at the beginning and I'll just simply copy this line so that I can not write the new line okay and over here I will just simply paste this and load in the end okay and and we have to insert that node and now we will receive the data platform the user data is equal to SC Dot an extent after receiving the data we need to create a new node uh we create the new node as new node s which is equals to new node and we'll pass that data to this function okay and now we need to insert at the end we need to perform insertion at the end so what do you think we will like we will go into the paint and we'll try to figure it out how to insert the set end so two things should be there one is if our head is equal to equals to none what if the list itself doesn't have any element that's list is empty that is head is also point to null and tail is also pointing to the null and then in that case we will simply assign the new node to the head that means if there is no no node in the list and we are trying to insert a new node which is the first node as well as the last node of the list then in that case we'll just simply insert this node inside the list and we will assign it the value as head in case there are some elements there are some node present inside that list we'll just simply uh we have to assign that value to the we just have to assign the current tail tail represents the last node of the list we'll just simply write tail dot next equals to new node that means we are linking this node with this node I will just show you we are linking this node to this node by writing 10 dot next is equals to you know and we will simply assign change the value of the tail to new node that means then now the list becomes 1 2 3 and this node is added at the end of the list and this nodes next is pointing to the null now this is our list after insertion at the end okay so this thing we have to achieve over here we will write an if condition to check whether the head is equals to equals to null if that is the case that means there is no element present inside the list and we will just simply write head is equals to you know this and now if it is not the condition uh there are some element inside the list we'll just simply write okay we will just simply write tail dot next is equal to new node and I will assign the Tails value to the I will update the value of the tail to the new node node so that our list is like uh it is expanded okay and now at the end after performing this operation we'll just simply return the header new head of the list uh not new head is the this we will just return the head of the list okay and now uh to run this insert at the end we are returning something ahead so I we need that head to be updated over here uh we'll let head is equals to insert at end and will pass that head over here and we'll just simply print the list again okay now if I run this and I will first I will give the empty list no I'm not not empty first I will give some inputs one two three four okay and after this I will write minus one and uh now I have to insert 5 at the end of the list that is the data and after inserting the here you can see the new list is up printing which is one two three four five and uh before list is one two three four five was not there right now after performing the insert at end operation 5 is inserted at the at the end of the list okay so now if I again run this and this time I will not give any uh prior node in the list I will just write 1 elements in the list are empty because which is not getting element list is first empty and now if I am trying to enter insert two in the list the element of the list are two okay so if condition is also getting executed or working fine so this is the way by which you can insert at the insert a node at the end of the list so till now we have covered insertion at the beginning and insertion at the end and in upcoming video we will see how to insert a node at the user specified location in the sinkly language so thank you guys for watching this video and I will see you in the next one tutorial Series so till now uh we have covered the core Java concept uh we have we have started with the data structures and algorithms we have covered array VR uh discuss some problems on arrays okay I hope you guys are enjoying the series so now uh till our previous videos we have started singly linked list okay and in that uh we have seen how to make a list how to print a list uh how to find the length of the list which means how many nodes are there inside the list we have find how to search an element inside the list and then we have started the basic operations like inserting deleting or finding like that okay and in inserting we have uh seen uh how to insert a node inside a singly linked list at the beginning and we have seen how to insert a node inside a single in English at the end and now again we have seen uh this much these many methods reverse list means how you can reverse a single link list and middle node like how you can find the middle node of the link singly linked list so these are some methods that we have seen till now and so now for today's video I I will be taking a concept of how to insert a node in single English at a user specified positions right so for that let's just get into our paint and see the logic how we can implement or how we can add a node inside a Sinclair link list at a user specified position okay so this is our previous previous paint previous video paint so let me just erase the things that we don't want okay just we can delete this you can delete this okay fine uh so let's assume that wait this is our link list okay this is our first node this is our second node this is our third node okay and now if I want to insert a node inside this simply linked list at a user specified positions right so if I say this is the single in English and you have two insert this node this one right here and this node inside this singular English at second position okay so what is your logic how you can uh think how we can insert this new node inside this English at user specified position okay so let me just write a write down here so we are trying to insert this new node at position is equals to 2. so right so we are trying to insert this node inside the single linguisher position number two okay so after inserting the whole list should look like this this is our try to form a cursor okay so this is our first node I am talking about the after insert method insert operation ticket oh sorry after that the link should be here and after that this uh next should point to this and after that this next should point to this okay so this is the list our list new list updated list after inserting a new node at the second position so what will happen uh this existing node which is at position 2 will get shifted at position 3 and new node which is which we'll be going to insert inside our list will be take the position position uh two okay so this is the logic that we have to build uh so first of all uh let's get in our ID get into ID and try to code this okay so let me just get into my IDE okay and I will write this similar method over here okay this is inside at beginning this is insert at end and now I will write it over here so that you can I will and also I will share I will be sharing this code don't worry you can follow this code and try to build your own single linkage and try try to play around this code Okay so let me just okay fine so we'll be uh let me write out write down one comment so we are performing insert operation at user specified location or to be more precise in programming language it is index okay now so since this is a method I will write this public method should be static because we are calling it inside the main method which is static one and think it uh think it guys uh when we are updating we are inserting a new node inside the list so our method should also return one node that is the head of the node uh that like here you can see uh for suppose user has inserted this node at First Position then in that case our head should also point to this right so so our method should expect expected to return a new head or the if it is uh in inserting the node at the first version or any case we are returning a new node okay so our notice of type node s so I hope you guys are watching our previous videos also so that you can understand what is known as why we have written that over there so please watch all the video and then come over here so I will name it as insert at the method name okay and this method will also first required one head so we are passing one link list to this method and in return this method will insert a new uh node in that list that I use a specified location right so we are passing the head to the list okay so first of all I will be requiring one uh variable name as position and count and I will assign value to both as one okay so both are one and I will just simply write system.out.print align enter the data to third in the list okay so at this point we are asking we are printing on the console like uh asking the user to enter the data that you have to insert inside the list all right all right and after that we will declare one data variable and we will just write simply since SC Dot nextint and you will accept the data value of that new node data part of the new node okay and well after that we will simply write print on this console like enter the position all right so this method will uh what will be do what it will be doing it will be taking the data part and it will take the position right all right so here you can see it will ask for the position at which position you want to insert this node inside the single link list that we are going to pass to this method okay so now I will write position is equal to SC Dot next next it okay so now we have covered position we have taken the data okay so now we are good to go to create a new node okay so we are creating a new node new node s that is a new notice and we are passing the data to that Constructor of the nodes class so now at this line number one one is one one or four we have created a one node and we have passed the data that is inside by the user and we have also taken the position from the user okay now we are checking if the position is equals to equals to 1. all right what that means if position equals to equals to 1 here you can see if entry user enters the position that is of new node should be one then in that case user user is trying to insert that new node is at the very beginning of the link list all right so in that case uh we we have to perform the some different tasks otherwise there are some okay so otherwise we will go inside the else part we will all support that one okay so if the position equals to equals to 1 that that means we are trying to insert the node at the very beginning of the league list so in that case we will just simply write new node s dot next is equals to head and we will simply reassign the value of head to node s sorry for the type of mistake okay so what we are doing doing over here is uh this is our new node we will just simply assign first this next to the Head currently the head will be pointing to the first in first node of the link is right so we are making this connection first to the first node and we are simply changing the heads value to this uh new node okay so for after that uh how it gonna look like let me just clear this mess all right so after that it will look like this the head will be uh you know the head is our new node head is disk and our second node inside the link list will be this and first node will be this okay so now this we have covered for the position equal to equals to 1 what if the position is uh not one okay or else something then in that case you will come inside the else part and here we will create a new node and we'll assign it name it as previous is equals to head okay and in after that you run one while loop okay and then the condition we are going over here is while the count is less than position minus 1. okay don't worry I will be explaining this code in the using the paint window all right and we are writing previous is equals to previous Dot next okay and after that you just simply write count plus plus all right and after running this while loop we will simply create one more uh one more node and name it and name it as current and this current will point to the previous dot next and after that uh we'll write new node sorry for that stick we'll write new node as dot next should be equals to the current and now the previous dot next should point to new node all right and after that after this else part we will just simply return the head of the list all right so let me explain what we have done inside this else part all right so uh we know if the position is not equals to 1 that means we are not trying to inserting the new node at the very first beginning of the list okay so in that case what are what are all the operation that we have to perform like we have seen over here if you want to if the user gives the position as two so in that case uh we will first we have to Simply look at over here okay so we'll create one uh node by the name of previous and we will assign it the value of head all right so at the very first the previous will come over here previous all right and then which is equals to the head like it is pointing to the first node and after that we'll we'll run our while loop all right so while we are repeating this iteration until our count is less than position minus one so what is our position uh let's suppose I have to insert the insert a new node this new node at the position is equal to 3. okay so look at here map if my position is wait my position is three now wait okay so what is the count value initially the count value is one it will check whether one is less than position minus one that is 1 is less than 2. if it is if it is correct yes then it will it will perform this this two line of code okay so previous is equal to previous dot next that means our previous uh previous will jump over here now the previous is pointing the second node and count plus plus now the count value will be 2 and now uh when we again check for the condition now this time counts value is 2 and and what we are going to check we are going to check whether the position minus one okay so my position is 3 3 minus 1 is 2 either my 2 is less than 2. so this time this condition will will be evaluated as false all right so if this condition is false then in that case uh this while loop breaks and will come over here okay so now our previous switch is pointing towards this second node of the list okay and now we will create one more node which is current and which will be pointed in the previous dot next all right so what is what is our previous previous is this in this next part we will assign it to the uh what we have created another node name as current all right so this here our current will point over here current is here and previous is here all right now new node dot next is equal to current new node that is our test new node.next so we are uh taking this next and we will assigning it by assigning it to the current value all right so new node.next is equal to current so now our new node will be pointing towards this node and previous dot next is equal to new node previous dot next is equal to new node so if you can see these are the two uh nodes that we have created previous and current are for taking the keeping the track of the nodes which is previous to the position that we have entered to be uh to enter the new node inside the list and the current is the actual position at which we are we have want to insert that node inside the list okay so after performing this operation you can see the flow of the list would be 1 2 and this will become the third node and this will become the fourth node so we are successfully inserting the new node at the position is equal to three that is equal to here you can see yes so this is logic behind this I hope you got this if you're not uh go back in the video and try to understand what what do I have covered okay so let's run this let's see if we are not getting any error after before that I will just comment it out we don't require this we will make one list we are print the list and we'll call our method insert at and we will simply pass the head tool to it okay so if you notice one thing uh this method we it accepting one head we that mean that we are passing or passing it over here and but in return this is giving us a new a node a new head of the list right then new it is returning the new head of the list so that's why we have to get that new head of the list otherwise uh we are not printing the new list okay so we are printing the old list that we have make over here okay so this way this will not work so here let me just create one new node uh let me call it as head new so we are taking that noon head and we'll again call the print list but this time we will pass the new head to this Method All right so so that we can print the new list after inserting the in node add the user specified index all right so this is we have to do Let's test it out okay so it is asking me to enter the data so let me enter five nodes in the list one two three four four five and uh you know if you want to get out of this uh make list function you have to write 1 so it is printing that elements of the list are one two three four five by why so because we are called over here printless method which will gonna take head of the list and print all the list okay so here it is asking the enter authorator to insert in the list so I want to insert let's suppose 0 so that you guys can understand okay so I want to insert 0 at what position let me insert it at position number three over here okay let me insulate that question number three now here you can see a element of the list are we are again calling the print list but this time we are let me show you we are again calling this function but this time we are giving the new new head of the list that is the new list that method our method is going to return us that is 1 2 then at position number three uh I have tell the program that to insert 0 at the position number three it is also it is inserting the zero and after that uh rest of the list will uh will be printed as it is Okay so this is the idea of inserting a new node in the single English at the users use a specified location I hope you got the concept please uh we rewatch the video if you are not getting the concept but try to understand and will I will share one trick so that you can uh solve this kind of linkage problems easily you know once we have uh covered all the topics of the single in English Okay so thank you guys for watching this video and I'll see you in the next one so hello and welcome back to the new video of the Java tutorial Series so till now we have covered how to insert side node inside a single link list and that too with the three all three types uh like in the beginning in the end and at the user specified location okay that is the user specified index okay so one more challenge for you so if you can try to solve it so what is the challenge so you have seen how to insert at end uh how to insert ad uh beginning how to insert a few userspective user specified location right so now you have to insert a node in at the middle node of the link all right so what I am telling is Let me Give an example so if the length of the list is 10 okay or suppose let me take X5 okay so and the elements of the list is one two three four and five so at first you have you have to identify which is the middle node of the list okay so in that case a middle node is three I will color it up or middle node is three and you have to insert a new node at the position or the index three so how you can solve this I will give you one hint okay so for this operation to perform you need to find first the middle of the link list okay so how to find that we have covered one video go and check that if you watch then then it's good here you can see uh we had written one method to find the middle middle node of the list so we have to somehow managed to get first the middle node of the list you have to store that middle node some somewhere and then then you can perform the similar kind of operation that we have performed at over here where we are inserting the new node at the user specified location right so these are this is the operation that you can perform so go and give it a try and try to solve this problem enough talking so in this video we will be starting with the deletion operation which we are going to perform on a linked list all right so I will just make one line over here and I will write one comment we are performing delete delete operations okay so for this video uh we'll be looking at how we can delete a node of linked list which is simply linked list obviously uh at the beginning of the link list all right so we are trying to delete the first node of the link list okay so let me just go here this is our previous code I'm going to check that video If you have a checked all right so I will just write one comment all right why it is not okay all right so I will write one comment so we are trying to delete first node of the linked list so okay so we are trying to achieve this so first thing first let's get into our paint and try to build the logic for this okay so here all right no more requiring this new node so I can delete that okay wait let me select all right wait wait let me select this area so that I can delete it okay fine so this is our list all right so we are trying to delete this node which is head is also pointing to this node that is the first node of the list okay so we are trying to delete this so when you are trying to delete a node inside a list the only thing if you remember you have to do is you have to break the link between those two nodes all right so this is the link that joins this node this is the link due to which our list is going to get completed in the in this direction okay so when we are calling our print list method so we are passing that head if you remember okay and that head is going to get incremented at each time and how this incrementing part is done due to this uh just because of this next part okay so if that if this next is connected to this node then and then only we are going to move and this is forming a chain and this is forming a list of nodes okay so we have just need to break this link so that next time whenever we pass our head we are starting our list from this location and don't forget to upgrade update your head otherwise for the print list method you are passing this head and this after this head uh if you break this link and then the list will be only this this part only and your code will not work so in that case you have to bake this link and you have to update the heads value to the next value because in that case then and then only if you are trying to pass this head to the printlish method then only this this is our new new list that we are going to build okay and this node will be discarded uh not discarded we will not have any access to this node inside this list okay so this is the logic that we have to build let me just clear this out I need this for the upcoming videos also okay so let's go into our IDE and try to build this we'll write public static so think about it what will be the return type so here we are changing the head we are updating the head that means we are doing something a modification part inside our list so whenever the modification part comes inside the list there is one the method should return the new head of the list so that we can print it later onwards which is required for the printing the list okay so now I will write node s so this method will return one node that is a new head of the list delete at BK so this is our method name and this method will also accept one head of the list so we are passing one list to this method and in that return this method will delete the first node of the list and give us the updated head so that we can print that list later on all right so first thing first we will cover the corner cases okay so what if my head is equals to equals to null okay so if my list doesn't contain any element then in that case I don't need to perform any operation deletion operation all right so head is already empty then how can I perform the deletion operation all right so we will simply return then I'll sorry no in that case all right so if this is not the case then we are assuming that not assuming there are sure Surety that's there are some nodes which are present inside that list and we have to delete the first node of that list okay so we will create one temporary uh variable of type node and we'll assign it to the value of the header all right so head and temp will both pointing to the first node of the list and we'll write head equals to head dot next and in next part we will write temp Dot next is equals to now okay and now after that you will just write return head so what I have done over here is so two three line of code I will tell you so we are first creating a new variable of type nodes name temp so here you can see we are creating one more variable all right so let me just decrease the font size why it is not getting decreased all right temp and head are both pointing to this first these both are pointing to the first node of the list till this time okay so the next line is head is equal to head dot next so now we are changing the heads value to the Head dot next what the next part of this head is going to hold link to the next node of the list all right so we are changing the heads value to this so now our head is point head is pointing towards this node our new head is this oh so head is no more have the access to this node but the temp variable to have access so we'll write temp dot next is equal to no so temp dot next which is pointing to this node we will just simply write temp dot next now it will point to the so here you can see and after that we will simply return head that that means we are returning this and this causes our this this is the new list after that operation will perform okay so we have what we are doing we are just first of all assigning the temp uh creating one new variable uh temp of type node and we will assigning the value to the head that means the first node of the list and we are changing the heads value to the next node in the list okay by using the using what using next head dot next all right after that I as I have told you you have to break this link link if you want to break this link you have to modify this next part so for that we have written attempt dot next is equals to none so we are assigning the temp dot next to the null so that this temp node will no more have this access to this node and it will point to the null and our new list will be this and this all right so this is the idea behind this method all right so let's get an into our main function and I will call that method all right so we are making the list we are printing the list and over here we are calling delayed deleted at the beginning and we will pass that head okay and after that after passing the head one thing you can remember uh let me go there one thing you can remember this method is returning the new head of the list so we have to create an variable which will be holding our new head of the list which will be of type nodes let me call it as you head all right and we will again call the print list method and we will pass a new head of the new head of the list to this next all right so let me run this I hope this will work let me create one list uh as usual one two three four and five and this is the elements let me get out of this and you can see elements of the list are one two three four five uh this method is printing we are using the previous head so these are the element that we have entered and these are the element that is going to printed on the pencil okay so after that we have written this method call delete at the beginning so what it will do it will delete the first element of the list that is one and after that we are again called The Print list method okay so here you can see here called the printlash method and this print list method is printing the new list as two three four five why so because we have deleted this first node we are no more I have the access to this node and new elements are the new list think real English is two three four five so this is the idea behind the deletion of the node inside single link placed at the beginning okay so I hope you got this so in upcoming video we will be saving uh seeing how to delete a node at the end and how to delete the node at the user specified index uh like we have did in the insert operations right so thank you guys for watching this video and I'll see you in the next one so Helen welcome back to the new new video of the Java tutorial Series so till now we have look at the deletion operation we have again with the deletion operation and we have seen deletion delete at beginning okay so in this video we will be looking at the delete at end so now what I am talking is we have to delete the node which is at the end of the link list all right so before going to the code part as we discussed through paint let's discuss so to perform the delete operation at the end of the link list what do you guys think what will be required Okay so first thing we will require the access to the previous node right like that is the second last node of the list so as I'm assuming uh this this linkage okay so this is our link list and one one thing uh you don't get confused uh some YouTubers have told you to implement this single English without taking the tail and they are there just uh taking the head of the links list they are not assigning the Tails value and they are not maintaining the track of the tail so and I have taught you uh by taking the tail so I think uh this is the good idea to take till in the link list so that you can have at least the track of the two nodes in in the list that is the first node and the last two so that those are required whenever you perform some complex operation you know on your uh link list we'll see what I mean by the complex operation all right so this is the list one two three three notes are there and this is the Red Data part of the list and this is the next part of addition this is the link list okay so we are trying to delete the last one of the list so if you want to delete this node uh we'll require the track of this one this is that is the previous note to the last node so first thing we have we need the track to this node somehow we we have to get to this Loop uh get to this node sorry not Loop and after that we can perform some basic stuff that is we'll reassign the value of the tail to this so that our new tail will point to the new last node of the list and we will just simply uh that assign this part next value to the null so that our new list should look like this 1 2 and second node is pointing to the null and we don't have any more access to this nodes so this node is getting discarded from the list and this is our new updated list after performing the deletion operation at the end of the list okay so let me get rid of this okay so now we can go into our and right beneath of this deletion at the first node of the link list I will make one comment and I will write it as delete edit the end of the list all right so now since uh this this we are making this method and this method will be a public one and static also and now we are deleting the node from the list so our list is getting modified all right so we we are getting a new list so for that this method will also release or means pass or the returns one head of that list new list okay so that we can use the head later on to print print that list okay and we'll write delete at end and this method will also acquire the head of the list that is X to the list oops sorry wait guys wait wait wait wait delete delete at end and this will require node as head okay so inside this so as we have discussed in our previous video you know we are checking this uh if condition that is a corner case so what do you think uh here here also you have to check on Corner case right we have to check one corner case so what it will be if our head is equals to equals to null that means uh if the head that we are passing to this method that is that head is null or head Dot next is equals to equal state guys what do you think this condition will this is the r operator so I hope you know what is our operator those who don't know I will tell you our operator will evaluated uh this one expression and this one expression and whether any any or operator what it does simply if any one of the condition is getting true this if condition will uh will be executed all right so if the head is equals to equal signal or the head dot next is equal to equal signal if any one of this condition is evaluated as true this if condition will be get perform and we'll just simply return simply return the head okay and what we have doing over here is if the head is equal to equal to null means this is the condition where there is no element inside the list all right and this when head dot next is equal to equals to null that means uh head dot next that is this location is pointing to the null so what what is depicts is there is only one node inside the list and if there is one node inside the list so technically we can't remove the end of the list and end node of the list okay so because there is only one layer one node represent inside the list so we can perform this operation in that case we will simply return the head of the list that means uh this is the condition all right and after checking that corner case if that corner case doesn't evaluated then we'll simply create one node I will name it as previous so because we have discussed in our logic part we need to keep the track of the previous node of the link list that we are going to delete at the end okay so now we have uh declared one uh variable of previous previous of type node okay so we have to take that currently uh this is previous is pointing over here we and now if you want to delete this element we have to get this this previous somehow to this location so that uh what previous will do it will uh hold or keep the track of the node which is just behind the tail that is the second second last element of the list okay so we have we are performing this while loop so that we can keep the track of that previous uh until previous Dot next is not equals to tail and I hope that what is still you know the tail is the last node of the list so whenever this until we reaches to the tail which is the previous node of the tail we are performing this and each time we will be doing previous is equals to previous dot next previous dot next that means we are in implementing the previous value to the and uh once we have reached to the previous uh previous node we will just simply write 10 is equals to DBS and now we will write 10 dot next is equal to another all right and after that we will just simply return the head of the list so here you can see we are declaring one previous variable uh and assigning to the value of head we are looking one while loop and we are taking that previous variable to the second second um second end of this which is the second element from the last of the list and after that we will just simply assign the tail value to the previous that means we are shifting our tail to over here and we will just write tail dot next is equal to null that means this this will point to the null now this will point to the null and this link will got broke and we have no more track of this node which is which is previously at the end of the list and our list will be like this one two and null all right this is the logic behind deletion at the end okay I hope you got that idea and now we will go inside the main method and now here over here we will just call this methods that we have declared above and we'll delete and end we'll pass that head and after that since we are getting the new head from that list so we have to capture that your head work your head equals to and we'll see when you had this okay let me run this okay so we are entering the nodes uh like one two three four five and after that I will write 1 so here you can see uh before performing the deletion operation the linkage would look like this one two three four five and after performing the uh let's delete at end operation uh we are printing again the list and this time we are printing one two three four and we have deleting the element which is at the end of the text okay so this is how the deletion at end works I hope you got this idea how it is works so if you're not get any idea go back and watch this video again so in our upcoming videos we will see how to delete a node inside the single English which is at the user specified location all right so thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now we have covered deletion at the beginning deletion at end and now in this video we'll be looking deletion at user specified location like we have seen in the insert operation at the specified location we are trying to delete a node which is user will tell that like this is the list and this is the position and at the node which is present at this position you just delete it okay and give me the new list all right so let's go before writing the code as we discuss our logic inside the paint then go and discuss it okay so let's suppose this is our list one two three there are three notes inside the list and me as a user gives My Method the input as like this is the no this is the list you just remove the node which is present at the position two like this is the node that we have to delete all right so in that case so I want to perform the deletion operation so now we will check what are the things that we have to do so here if you want to delete this node we have to break this link and this one and if you break these links this node will get discard discarded we have no more access to this node and after that you have to do assign value of these nodes next to this this way this node so this is our so after performing this operation what will be the least this is our list one two and we will be not having this notes access anymore after performing that deletion operation okay so these are the things that we have to do and let's see how we can do this into our foreign okay let me get rid of this so now here uh we have to perform or we have to create that method which will delete our node at the use a specified location all right so I will just create one comment delete at user specified location okay so this method is also public one static and this is also going to return a new uh head of the list so that's why we are writing the return type it as return type as nodes and I will name this method as delete at okay so now uh this method will also require head of the list and it will perform operation on that list okay so first thing first uh like we have discussed in the insert operation I hope you watch that video and like that here also we required one position and count variable and we will assign both value as one K and now uh we'll write system.out.20 line and yeah ask we'll asking the user also position enter the oh session of the node you want to delete okay so we are asking the user to enter the position of the node that you you want to delete okay so after asking that position we have to store that position somewhere so we will be storing that position inside the position variable so you write SC dot accent you'll get that position from the user and here also we will check one corner corner case what is the corner case if position equals to equals to one if that is the case if the position is one that may that means the user is trying to delete the node which is at the beginning that is the first node of the list so we know that how to do it and we have discussed in our previous videos also we will simply assign heads well to the Head dot next that means like here if the user want to read this this node we just have to Simply pass our head to the next node and we will simply return that node from this and from this onwards the list will be that much only and you will no more have the track of this node so this is the corner case that we have to check if the interview and user enters the position as well we will just simply assign the head is equal to head.next now if not if that is not the case will come into the else part and we will create one node notice of name Will name it as previous okay and previous and we will assign it first value to the head and we will run one while loop while my count is less than position minus 1. so uh what is the condition that we are doing well until my count is less than position minus 1 so here you can see uh this is count is 1 and position that we have entered is 2 2 minus two minus one is one so one is less than one which is not getting evaluated as false we are not going inside this while loop so this is the condition where I have a small list right so imagine we have five notes in that list and we are trying to delete the node which has a parent at the third index so we have to uh perform this while loop at once because we have to get that previous node to the uh second index that is the previous index let if you want to delete the third index third index node uh you have to get that previous node to the second index node okay so how we can get that we will write previous is equals to previous dot next and we will simply count plus plus and after that while they're coming out of that while loop we will write current is equal to previous dot next okay current is equal to previous dot next time previous dot next is equal to current dot next what I will do what I have done here is I will tell you don't worry and After exiting out this cell else Loop we'll just simply return the head of the list okay so this is pretty much that we have to do so till while loop I have I have told you what we are doing we are just simply creating one previous node and we will keep that previous upgrading updating updating until an endless will reach the previous node like I'll give you one example so this is the list one two three four five and we are trying to delete the index which is three and this is our head this is our tail and this is the position at which we are you want to delete the node okay so at first our previous is here so we are upgraded previous and come come the previous to the here so that our uh correct this is the current when we are assigning one current and creating one current and current is equal to previous dot next so after performing this step uh so our current will Point pointing to the index at which the node we want to delete and our previous will point to the previous node of the list okay and uh we'll just write say previous dot next is equal to current dot next we will simply create a link between these node and this node and we don't have a link between 2 and 3 and 3 and 4 because the link which is created by this line is one two four and five so we have no more have the track to this third node inside the list because of this line line we have written previous dot X is equal to pattern dot next and after that we will simply return the head of the list okay so this is the idea that's okay so let me call that method delete at we will simply pass the head of the list and this method is also returning one head so we have to store that new head somewhere so I'm storing over here and after that we'll write print list and I will pass that new head so this is the idea behind relation it is a specified quotation Let's test it out one two three four and five this is list and uh you can see one two three four five is the list elements and let's suppose I have to delete the element which is at third index which is a third position so I have to delete this three so I have pass 3 as the position don't get confused three is the position not the value so here you can see the new list is returning after that method call is one two four five that is third position element is getting deleted so if you don't get don't get confused I will just run it run it again and I will write it simply 55 69 96 89 now you can see I I know if I want to delete the 96 I can delete it by its position one two three and four fourth position is 96 so I want to delete the fourth note of the list here you can see 23 54 69 and after that 96 is getting deleted and 89 is uh again come at the end of the list so this is the idea of delete deletion operation at the user specified location so I hope you got the idea thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now we have covered singly linked list all right so let me show you if you are watching series uh so that's no problem but those who are watching just want to learn the links list part those for those I am telling we have covered this singly linked list we have covered all the operation we have covered insert operation deletion operation both three types insert at beginning insert at end inserted use a specified location likewise deletion operations are also performed we have uh covered how to make the list how to print the list how to print the length of the list how to search the element inside the list uh and and how to find the middle node of the list how to reverse list all these operation we have performed on The Single link list and I guess this is the uh pretty much idea that we have we want uh regarding the link list so now today onwards we are looking for the W linked list so let's get started so what is WL English uh in this video I will be telling you the theoretical part regarding the W links list so let's get started so let me create create a create a list over here okay let me create a list we'll try to understand each concept line by line okay so this since the one this is the line okay this line so okay so till now uh what we have covered is sincerely fish we know inside single English this is the node this is node which is which looks like in single English there is one uh link which is coming from here and there is link which is going here that is one node is connected to this node and this node is again connected to the another mode in the in that list and here this node contains data and here this contains next part okay so why this is this list called as single English is simple because this node is connected to the next node via a single link okay this is the single link that is getting connected to the next node so whereas it is doubly increased if you can see the node structure is different okay so this is the one and this is this is pretty much simple and single in English but the node inside a w linked list is represented as like this this this here here again here and one more here forget about my drawing okay just keep focus on the concept okay uh this is a that is the difference here you have only the data and the next part next part contains the address to the next node in the list and data part contain the actual data so here also we have a data part likewise here also we have data part here also we have data part and here also we have data part but nothing changes over here here also we have next part that is an address to the next next Link in in next node inside the list here also next next and here also we have next here also we have next and uh the this part right over here this contains previous okay I will tell you what is previous just bear with me uh previous previous okay so and one more thing is there this is one more linking over here this this which we have not seen in the single a link list all right this is the this becomes the and single in English it's uh one more thing single in English you can see uh is One Direction okay that means uh if you start from left it will go to the right only you cannot come back in that link in English it will go from left to right you you don't have any way like we have you have gone to the next here from this next node this from this next node you cannot come back okay all right so so this is the thing that we have seen in a single English we have node like this you can see they just keep tracking my pointer and each node contain previous previous means previous will hold the address to the previous node inside the list all right so if you if you can consider this one so in this previous part the address of this node this node will be saved over here okay so address of this node will be saved over here and in the next part the address of this node will be saved over here and in the data part as usual the actual data that node is going to hold that will get stored here okay so you will be asking uh what are what if the if it is the first node already if it is a large node then in that case the first node previous will hold the value of 1 minus 1 and the last node of the list next should hold okay so this is the roughly irf idab uh W in English the advantage you get here is you can go from a left to right and you can come also backward from right to left because this this you you can get this idea better better you can check it over here this is the direction of the nodes this is the direction of the notes you can see here here here next node and the previous node the only thing is there are two ways you can go front by using the next and you can come back using the previous so instead of having just only one uh way where you where you are going from left to right in the lovely linked list you have the access to the next node also and the previous node also why so because it at the node part of this double link which contains the three parts that is the previous part data part and the next part previous part will hold the address to the previous node in the list and the next part will hold the address to the next Lane next node in the list and the data data part as usual holds the data whether it should be in uh in integer format character format string format any data type format data can be stored over here okay so this is the doubling fish idea and this is the theoretical part that you need to understand before you get your hands dirty using the totally linked list okay so go one more thing you can go in the web browser and you will just simply type doubly link list let me show you doubling English if you type and then first link in Java D Point comes and if you go here and here you can see oh nice article is there which will explain uh all those stuff regarding the doubling list I hope you got some idea about the public increase on the next next video onwards we will be start implementing the W link list using Code using Java thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now we have covered all the operations on the singly linked list so here you can see uh I hope you either are followed the series along with me and so we have seen how to make this English how to print it how to search an element how to find the middle node all the insert operation and all the delete operation as well so what I'm I will be thinking is from this video onwards we'll be starting for w linked list so we'll uh in our previous video we have saw the theoretical part of the VW link list any for me this video onwards we will be looking for how to perform all the operation on Adobe link list all right so for as we have discussed in single English we require one node which so the single legislation is made up of nodes so we have to make a node of our W link list so we cannot use the node which I which we have made in the single language because in WL English there is one uh previous pointer as well as the next pointer was there so that we can move for bi directly we can go uh left to right at the same time we can come right to a right to left as well okay so for that we have we will be covering uh creating one Java class so I will name it as node D node d means node of uh double in English all right so in this uh first of all we require data part so I will name that variable data and we will require two pointers that is the node d uh I will name it as previous so that it can hold the it will hold the previous address of the previous node in that list and one more is there node of type node D which is next which is as usual as we have seen in a single language part all right so now here let me call one Constructor of this class so that whenever we create an object of this class uh we have to pass the data data to this class so that we can make that nodes using that data okay so this Dot data is equal to data and it's for the first mode we will write as previous is equals to null and next is also equals to now all right so both are pointing to the two Arsenal uh for the single node okay so now what I'll be doing is this is our node part that that is pretty much we have to do and now I will go and create another Java class and I will name it as doubly link list list okay and I will hit enter all right so let me just increase the font size let's check whether I can increase it or not no I guess I can't decrease I hope you guys this font is visible to you all right so since we are taking input from the user so there is one library that we have to import first so I will import that import Java Dot ail dot star I will import every class from the util package and now inside this will create a object of the scanner class since we are looking multiple multiple methods inside this class so I will declare the scanner object of that scanner class uh globally okay public static scanner SC is equals to new scanner system dotting okay so now after creating the object of this class let me create two new variables so those those are will be it's public static off type node T so I will create add entail so as we have seen in our uh single link list lectures so we have here again we require a head and tail so that we can keep track of the first node of the list and the last node of the list all right so now in this video we will be talking about how to create a doubly resist okay so for that I will make one method I will name it as public sorry I will do it in next line public static and since it it is making our new linked list which is of type double link list so it must return the head of the head of the list so that we can get that head and print and perform all of the operation that we want to perform on that list all right so it it will return uh head which is of type node D that is the node of the double linked list okay so make I will name it as make list as we have seen our single English lectures okay and so here uh for the first time whenever you create a whenever we want to create a list the head and tail at initial point though those two will be pointing towards the null and now here also I will write 10 is equal to name and after that we will simply uh print one line and we'll ask the user to enter the data all right enter the data in the list okay so we are asking user to enter enter the data in the list and create one new variable data and SC dot extent will take the data from the user and again we will run one while loop and we will iterate over this while loop uh until an endless our data part is 1 so whenever the user words uh let's suppose user want to enter inside the five five elements tables like one two three four five and after that user can write a data value as minus 1 so that this while loop will get break and our W link list will be make it as one two three four five only okay so here we will uh whenever we get entered inside this while loop we know that enter data part is not 1 so there is a user who wants to insert a new node in that list so we will make that a new node B and we will call it as new node D and we will pass the data part that we so this is the Constructor that we have build it over here so we are passing this data to this data to this Constructor and now after passing the data after building the Constructor we will write one if condition and we'll write if head equals to equals to null so think about think about it whenever head will be null so if it had a heading head is pointed towards Channel if and only if it is the first element that we are going to that we are trying to insert in the W link let's write so in that case we will just simply uh assign the head value to to the a new node a new node D value and we will assign the tail value is it also equals to new node value because ultimately uh this is the first node inside that list so therefore head entail will both want to get element uh so sorry L not element that node itself okay so we will write uh new node d dot next is equals to null and we'll write new note D Dot previous is also is equals to not so both will be pointing pointing towards channel so because there is no uh new node inside uh another node inside that list it since it is the first node else uh so whenever if head is not equal signal that means there is there are some elements there are some nodes which are present inside that double in English so we'll come inside with a else part we will write tail dot next is equals to new node new node d and we will write new node D dot previous is equals to 10 we will write tail is equals to new node d and we will write 10 dot next is equals to okay so these are the tasks that we are we are going to perform is if it is head is not equal head is not a questionable uh so what we will be doing is uh tail dot next uh is equals to new node so we will uh assign uh the whatever the node which is at the last the tail is there all right so we are assigning the Tails next value to the node that means we are making that link for the previous node in the list to the to that next part okay and so here uh new node dot previous is equals to 10 and we are assigning new nodes previous to the tail that means we are making this linkage between the last let me show it let me show you let's suppose uh let me commit it out suppose this is the list one two three and we are trying to insert 4 inside the W link list okay all right so here uh we will as a tail is here ultimately uh this is this is the last element in that list tail is here we'll assign the Tails dot next that means this nodes next part to this new node okay so we are making this uh left to right connection in this wave language and we will write new node dot previous that is this this nodes previous to tail so we are making that right to left connection as well and after making those two connection we will simply uh change the value of the tail we will assign the tail is equal to new node because since this element is getting inserted for in the in the list so uh so this becomes the last element uh for now that's why we have to update the tail since the tail is keeping the track of the last node inside the list all right so and you will write tail dot next is equal soon as so we assign this next to the melts indicating that this is the last element inside the list okay so these are operation that we have to perform after performing this operation either the If part will get executed or the else part will get executed executed after that we will again ask user to give us a new data okay so it will ask again the user to enter the new data and it will again go and check whether the data part is not equals to one or not when it is equal when it is equals to 1 minus 1 it will go out of that Loop and we will just simply return head of the list okay so this is pretty much that we have to perform inside this okay so these are the operation uh I hope you got the idea how to make a doubly links list so let's quickly run this so for running purpose we require one our main method so we will write a main method here and inside this main method we will call our make list function and you so for our make list function since the make list function is returning ahead to us so we will have to store that head this head variable all right and after this let me call this okay so let's go and run this if you are not getting any errors we are successfully trying to end okay so here you can see enter the data in the list let me make a list as one two three four five and uh if I say uh it's done I these many elements that I want to insert this list after that I can write 1 and it will came come out of this for Loop not for Loop sorry white Loop and after that it will return the head list so this is the idea behind how to create a list which is of w type w is in doubling W link list okay so in a upcoming videos we will see all other operation of the W link list so thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now we have covered the doubling list one functionality that is how to make the doubling list how you can make one doubly linked list using Java and uh in our previous video as you as you can see we have created created a node um which is after which is of double type double link list which have which can go bidirectional which can go from this node to this node and it it can also come back from that note to that one that is left to right and right to left okay so in the our previous video we have also talked about uh how to create a w linked list so how to build one so if you you haven't watched that video go and check that video first watch that uh then come back to this video so now in this video we will be covering how to uh print the list all right so in our previous video we have built the list so in this video we will uh talking about how we can print the double linked list okay the logic is uh pretty similar to the that one that we have seen in the single English okay so in this video okay let me just first make this notes so that you guys can understand easily all right so let me just quickly make that make that list for you and I will make it as this one this one this this by the way guys how you how you are enjoying enjoying this series I hope do comment out if you have any doubts I will clear it out all right Okay so don't mind my drawing just focus on what I am trying to tell you and you'll get that what I'm trying to tell you okay so look at here this is our double link Lister so this is the direction that we are first going forget about it let me take my pencil this is the direction and in this direction this will be Direction okay so you can go from uh this this direction also and if you want you can come from this direction also so we are trying to print this list okay so first thing first try to let's try to pseudocode this all right so we will try to think or build one logic okay so what do you think how you can print this list okay so uh there is a concept that uh I have taught you in the previous video like this uh we have keeping the track of the head and tail all right so if you guys can remember head head means the node that comes first in that list okay so for that here is the head and tail means the last last node of the list okay so we are going to use head you can also use Tail as well but in that case you will be printing the list in the backward Direction okay so in this video I will be talking how to print the list in this direction okay so you can take it as homework and you can try to solve uh or build one logic where you can uh where you have the Tails axis Tales means this is the last node of the list and you can you're going to print uh list in a backward backward Direction okay so it's you can take it as a homework so okay uh here we'll use head okay so we will run a while loop to check whether to pre not check to print this list okay so we will we will use the while loop and you will use the head okay so each time we will get get to that head we will trying to paint that data get to head print the data okay after printing the data uh to move to the next node in the list we have the next uh next uh next ad next pointer which is holding the address of the next node so we will write logic so that data uh data uh the head will move to the next node let me increase it to the side of the Box okay so first thing first we will get the head we will print the data inside that node which head is currently pointing to and where uh assign heads value to the current head dot next so we will iterate through this whole list and when we are trying to stop whenever our head is pointing towards another okay so when our head is point to point will Point towards anal when it when head will come here and we will assign the new heads value to this its next node node and it's there is no next node inside the list so head will pointing towards anal and we can stop at that condition okay so quickly we will go in our IDE and try to quote this out okay so we will here I will make one function or method whichever you you call it public static so we are just printing this list so we are not uh doing anything uh any operation we are just printing the notes of the list so there should not be any return type for this method and we will write print list okay and uh since uh we want the head of the list as our input to this method you will get that head and as as I said told you we will just simply print uh elements in the list are and after that uh we will perform one while loop and our while loop will run until our head is not equals to now okay so if the head is not equal to null we'll just simply print the heads data so we will write head.data we are trying to printing the data and after that we will print one one space because for that our elements can differentiate with each other so one space should be there and after printing this we will uh reassign the heads value to the Head dot next add dot next we'll assign this value to the head so that way uh we can it iterate to the next node in the list okay so if our head is equal to equal to null that means we are at the end of the list we are printed all the all the elements so we will just print in print One new line so that whenever we will build another function so function call gets executed to the new line okay okay so here in to run this method we have to call that method we will write print list and we will pass the head that we have stored here while making the list okay so what we are going to do here we will make the list and we will print the list okay I hope there will not any error let's see if we got any error okay so for now it's running okay so now let me give the element as one six eight nine four five six and after that we will write 1 okay so here you can see elements of the list are one six eight nine four five six these are all the elements that we have I have entered over here okay one thing is uh this is printing the new every element in the new line I don't want that because yeah if if there is 100 elements in the list and we are trying to print that list it will take the whole lot of space in the console okay so we'll try to eliminate that uh we can do is print Ln instead of print Ln we'll write print and we can again call this method so that instead of printing the each element in the new line it will print it in a single line itself okay six six five one two four five minus 1 will print a six six five one four five nine these are the elements that I have entered over here you guys you can see so this is the idea how you can print the W linked list so you can try uh to print this same list in a backward for backward Direction you have the Tails uh axis that is the last note you can build one logic and try to print this list in a backward Direction okay so thank you for watching this video and I will see you in the next one so hello and welcome back to the new bit of the Java tutorial CB so till now we have covered or or you can say we have started uh to seeing the W links list so we have uh seen how to make a doubly linked list in our previous video we have seen how to print uh W link list so what we'll be doing in this video is we will try to implement another functionality of w linkage that is how we can find the length of the replication all right so let's go in our print and we'll first as usual we will try to build the logic by using the paint and after that we will go inside our ID and try to cut it out all right so here what you can think of how we can find the length of this link list so here let me to three forget sorry about my drawing four so these are the four elements in that in this W link list so we we have to make one function that that will take the head of the link list uh W linkage that is our WWE in English it's uh and it will print or it will give us or return the length of the list like the how many nodes which are better than inside that list okay so for that uh we can't perform it in two ways like we have did in our uh previous video where we are trying to print the list I I have told you uh we can print the list in two ways also by using the head and by using the tail also if you are going to use the head you are painting the list from left to right and whenever you are you are trying to print the list using the tail we are you are you you are printing the list from right to left that is in the backward Direction okay so here also we can uh use both the approaches of head and tail if you're trying to print the find the length of the list using the head that means you are going from left to right and whenever you are trying to get the elements or how many elements are present inside the node you are just from by using the tail you are simply going from right to left okay so these are the two approaches in this video I will be talking about the approach that uh that is uh for by using the head you can try to solve this similar method by using the tail as well take it as a homework as a challenge you can solve it okay so here for the printing purpose we know we have had we just have to okay so first let's make we have head is given to us all right and now what we will be doing we will create one create one counter variable variable we will create one counter variable which will count the nodes in that list and we will increment we will increment the heads value each time and we will require while loop also to perform this operation okay so idea is simple we will run one while loop over this over this doubly linked list and what we will be doing we are just iterating over this linked list each time we will update the value of the head and each time whenever we are trying to update the value of the head which we will also increment the counter variable by plus one uh we will we will write a counter variable by plus one so that we know we have passed from one node to another node and we have we will count that nodes as a node in in the link list okay so this is the idea let's get it get into our IDE and try to call it out okay so we'll make one functional method whatever you call it public static so this we are simply finding the length Okay so I don't think so we are we have to pass all we have to return anything so we will for now we will type the return type as wide and I will name the function as length length and since we are finding the length we need two axis the head that we will get from the user and after getting the hair as we have till we will need one counter variable so we will need one counter variable I will name it as Z account and I will initially we will assign it as value 0. and we will run one while loop while our head is not equals to now so until our head will not point to null we will perform this operation if our head is not pointing towards General that means there is a node inside the list we have to count it so for that purpose we will write count plus plus so don't get confused uh this is just uh as equals to the this one count plus one this is the plus plus operator that we can use whenever you want to increment the value by one this is as similar as this you can write both of both anyone anyone from this it will work at same okay so we will write head is equal to head dot next okay so we'll uh increment the heads to the next node okay so we will perform in this operation until the head is not equal when that head is equal to null that means we have we have successfully iterated over all the nodes in that list and after that we will just simply write the length of the list is value of the count over here okay so this is the idea behind the length function okay so let me get into our main function main method and we'll call that length method and we have to pass the head all right so we are passing head over here okay so you guys are thinking uh what if the heads there is no element present inside the list so for that we have also covered here we have assigned 0 as a count value if the if there is no element which is present inside the list that means head is our head is pointing towards the null all right so if the head is pointing towards the null this will not evaluated as true and this will not run while loop will not run and we'll just simply print the length of the list to 0 that means there is no element inside that list okay so we will check that once we run let me just run this first so that you can get the idea let me take one two three four and five okay minus one so here you can see element in the list are that is our previous videos output that that is we are just printing the uh notes in the list and the length of the list is five because one two three four five there are five five elements in the list we have sampling the simple bending the length of the list is five okay so we will check one one more condition if there are no notes present inside the list we will write 1 simply we will write minus 1 that means we are not interested to uh create any node inside the list okay so element in the list are there nothing is going to get printed over here because there are no no notes in the list and the length of the list is also zero so it's working fine so I hope you heard the idea how to print the length of the list how to print the list and how to make the uh doubly links list so in our upcoming videos we will uh perform some more operation that is insertion operation and deletion operation which we have performed in the single English also so see you there thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now uh we have covered uh wait we have covered the how to make the list how to print the list how to find the length of the list so in this video onwards we'll be performing the insertion operation on the our link list that is of the typewritten list so in this video we will be seeing how we can insert a node inside a w in English which is at the beginning so we are trying to uh create one method which will insert a new node in the W in English at the very first position of the English Okay so assume I will take the last video output it's a paint itself so here here you can see one two three four four nodes are there and we are trying to insert a new node in the list so okay so let me just create one new node quickly uh so that you can understand so this this here uh hero previous value will be stored here our next value will be stored and here comes our data okay so uh look at here we are trying to insert this node over here okay so initially uh you can see head is over here and tail is over here so in this video we are looking about inserting a node in the beginning so we don't have to take care of the tail tail part we just had to take care of the head part okay so look look here this is the previous so wait let me this is next so if if you are trying to insert this node inside this uh existing W link list so what you what all think you you have to do you can see uh this head next is pointing to this okay and this heads previous is pointing to the towards null so uh this this is that represents our first node because the first nodes uh previous should always point to the null uh that represents this is the first node and that next should point to the next node of that uh list itself okay so what we can do is uh we have two and uh build the connection of here this is our new node new nodes next to the this node okay so we are building that connection by assigning the new nodes next to the Head value heads is representing to the first well first node of the list and after that we have to uh give our assign the value of heads previous to this new node okay so we are assigning uh we are telling that our uh this heads previous should point to this new node okay so by doing this uh we have successfully uh linked our new nodes next to the uh current first node and we are linked heads previous to this new node now we just we just have to Simply get back our head okay so we are assigning the value of head to this new node so that uh this will Point uh this head will point to the new node and this new node will become the first node of the list after an insertion operation so these are all steps that we have to perform uh so that we can insert a node in the very first beginning of the W link list okay so let's go and try to cut it out okay so come I will come here uh I will comment it out and I will write one comment insert at beginning so that you guys can understand I I am sharing this code as well insert at beginning okay short form you can see okay so let me create one method I will come here and I will write public static uh since we are inserting a new node all right so we have to return the new new head of the list so that we whenever and next time we are trying to print that list uh we will print the list from the updated header head okay so we have to return on no a new head of the list so for that return type should be node we are returning a node all right so and we will write insert at beginning okay so we'll write this and uh obviously uh to insert a node in the list we need a existing list as well so we'll ask for user to give us a list first so that we can insert a new node inside that existing list okay so we'll write simply write first of all we will ask the user to enter the data first we are trying to new uh insert a new node so first of all we have to create that new node enter the data to insert okay so after asking this we will simply create one data and we'll ask our user to hey give us one integer to that we can assign the data part of that node okay so after creating this we will just simply create the actual node we'll assign name it as new node of typewalling list and we will write new node D and we will pass that data to the Constructor of the node D class okay so first thing first if you if you are trying to insert that node inside a w links list what if the list doesn't have any elements okay so how to check that case if the double linkage doesn't have any elements simply we will write head is equal to equal signal if head is pointing towards a null that means uh that linked list has no elements no nodes inside this and since this is a it is a double link list so we have to write one more condition we have to check whether the tail is also pointing towards another so in that case uh both of if both are pointing towards null that means the list is empty so we will simply write head Dot sorry head is equals to 10 Dot sorry we'll just write in is equals to note you know my ID sucks man okay head is equal to 10 is equal to U naught okay so we will assign that new nodes value to the head and tail simply okay that means we are trying to insert the first node inside the list which is pretty simple okay so if that is not the case uh that means the list we have passed through this function has already contained some elements uh contains some nodes so in that case we will come inside this else part and as we have discussed in our print paint window here you can see we have to assign the next part to this head and this previous part to the uh new node okay so for that we will go and write like this head dot previous is equals to new node okay so what we have done first we have uh heads previous which is uh currently pointing towards anal we will take that and we will assign the value as new node so that this backward linking should be uh should get connected first and after that we will write new node you know D dot next is equals to head okay so what I mean by writing this is new node dot next is equal to head so we are creating this linking now okay so we are linking our new node to the existing head okay and after creating these both links we just have to create head is equals to new node okay so we will just simply reassign the value of the head to the new new node because our head will change and now because we are inserting the uh node at the very first beginning so our head will change so we have reassigned the heads value and we will just simply write a new node D dot previous should point to the null now our new node uh is our the first node so its previous should point to the null so before that there is no element in the list additional Point set okay so we will just write simply return head we will return the head which is the updated head okay now this is the idea I guess okay so let's test it out we will write okay let me comment it out insert Ops insert operations we are performing from this onwards okay let me call insert at beginning and I will pass the head we are that we are taking from the previous videos itself okay and now after performing this uh method this method is returning one head okay so we have to capture that head somehow in our main method so we will create a new node of type D we'll assign the new head is equal to so I will call it as new head because head is already declared over here so you can't give that same name to the again and again okay and after that we will just again call printless method so that we can see our new element uh is there or not okay now but this time we will give the new head because head is updated because we are trying to inserting the mode in the first okay and we will again call the length method and we've got new head okay so let's go and check it out whether it's working or not okay we are trying one two three four and five and after that I will give minus one so here you can see element in the list are one two three four five these methods are running by the way I will tell you and after that the length of the list is five you can see one two three four five five elements are there and now now it is asking me to enter the data okay so we will let's suppose I want to enter 10 okay so you can see element in the list are ten one two three four five and the new length of the list is six because we have entered a new a new element in the list at the very first beginning okay so this is the idea behind uh insertion operation in the double English at the very first beginning okay so I hope you guys got some idea if not go and go backward and watch the video again you will get it if you have any doubts ask it in the comment section and like share subscribe thank you okay so hello and welcome back to the new video of the Java tutorial Series so till now we have started seeing the doubling list and we have seen some of the operation on the wax as well uh that is the insert at beginning and finding the length and printing the list and making the list so what we will be covering in this video is how to insert a node in a w news list at the end of the link list okay so at the end of the doubling Commission dot get confused okay insert at and okay so this is our Target we have given one list of type double link list and we have we want to insert the new node in that list existing list at the end of the link list okay so this is the task that we want to perform okay so here you can see this is our new node this is our new node try to follow my pointer uh its previous is this and next is this both are pointing towards analogy itself and this is our list one two three four elements are there in the existing double link list and this is our head which is pointed the first element in the list and this is our table which is pointing to the last element in the list so remember in our previous video we have talked about the insertion at beginning where we have we have formed all the operation using the head itself because head is head represents the first element in the list and they represent the last so in this video we will be talking how to insert a node in the last so for that we require a Tails access so that we can perform all the okay so to perform those operations we'll just simply see how we can uh do this okay so now first thing first uh we have to check whether the list is empty or not like we have seen in our previous video if the list is empty then we'll simply assign the heads value uh to the new node and tells value itself to the new node we don't have to take care of the all those things whether it is uh we are inserting at the first whether we are in setting at the end since it is the first uh node in the list there is no first and last out in that list okay so we have to check that Contour case as well we will check that in our KO code and else if that is not the case here you can see this if it is the case that there are some elements there are some nodes which are present inside that list so in that case we have to perform some operations so that we can uh enter this node at the end of the linked list okay so what we will be doing uh we'll assign the tail dot next is equal to new node so this is our tail which is currently the last element and we'll assign the Tails next to the new node we'll make uh since the Tails next is uh pointing towards a null because since this is the last node we this next is pointing towards nulls we will make that next to point to over the new node okay and we will assign new node dot previous is equal to tail we will assign this we will make this connections okay and after making this connection both next and previous connection we will just simply write a new node dot next is equal to another so uh if we are inserting this node inside this W linked list so this will come at the very end of the list okay so it's nulls next should be pointing to the null okay after performing after creating this those two links we'll just simply make this make this uh next to point null okay so it will represent uh yeah this is the end of the niche you can you can't move forward okay so these are operation that we have to perform so let's go and call it out okay let me get into my IDE okay so we'll make one function as usual we'll write public static and we are trying to insert a node in the links list okay so after that we will we have to return uh new list that is updated list to the method okay so for that we will write node the return type should be node D and we will write the function name as insert at end and here we are trying to pass the head of the list so that our method should get the access to the entire list by passing the head of the that is the first node of the list okay here we will just simply print uh enter the data you want to insert quickly I will write enter the data that you want to insert okay and after that we will simply create one new variable of type data and we'll write SC dot an extent and get that data and since we have now the data we want to insert a new node we first we have to create that node we'll create that node like new new note D new naughty and we'll pass the data to the Constructor of the node D class and again I have as I told you we have to check the base case of the corner case that is if the head is equals to equals to null and our tail is also equals to equals to null that means there is no node inside the list the list that we have given over here to this method is empty and there is no node inside that list in in that case we will simply write head is equals to tail is equals to new node that's it and if that is not the case we will get into the latest part and we will write tail Dot next is equals to new node you know D and so by writing this line what I mean is tail dot next is equal to new node D here you can see this is our last element and this is next is pointing towards now so its next is should not point to the null anymore uh we will take that next and make it Point towards uh our new node okay so now the Tails next should point to the new node and after that we will write new node d uh new node D dot previous should point to the tail okay what I mean by writing this sign is uh you know this its previous should point to the tail all right so we are trying to make this connection from the previous previous last node and our new Nash node okay so we are trying to make that connection after making that connection we will simply write new node is equals to next is equal to no after making that connection successfully we were updated A Lash node should last notes Nets next should point to the null we'll make that uh make it to pointing to those signals and we will simply return the head of the list that is our updated list okay so let me go here we are trying to perform insert operations uh we will just simply comment it out we don't want to insert at beginning now and we will write node the new head new head is equal to insert at end and we will pass the head of the list to this method and after that after performing this operation we will we have to check whether the node is getting inserted at the end for that we have written our print list method in our previous video If you haven't watched that go and watch that first so in the comment say title over here and we'll pass the length the length also over here okay so we will just simply run this to check whether all these certain fines one two three four five let me ask you minus one so I limited list is one two three four five and the length of the list is five okay so the here here it is asking the enter the data that you go on to insert okay so let's suppose I want to insert 10. and I will hit enter okay so here you can see element in the list are one two three four five and ten and then length of the list is six because we have added one more uh node at the end of the nucleus successfully okay so this is the this is the operation that we want to perform in this video so thank you for watching this video and I will see you in the next one hello and welcome back to the new video of the Java tutorial Series so till now uh we have started doubling list and we have performed operation uh like insert at beginning insert at end s and all those other stuffs like making the list printing the kind of the length of the list okay so now in this video uh we will cover a how to insert a node in a doubly linked list at a user specified location okay so user will give you the data and you will tell the dislike this is a this is the location at which you have to insert this node excitedly linked list okay so I will just simply write a comment insert at position okay we have to insert at position okay so let me quickly get into my paint so that we can build the logic okay I will just create a three notes just to get you give you an idea how and what we are trying to achieve okay and now here let me create those nodes quickly okay these are the connections since it is a double in English so it has one previous and next as well it is pointing to it okay don't mind my drawing okay this is the oops like this is the node that we want to insert okay and here we go okay so this is the node that we have we want to insert so there are normally uh like starting one uh two and three so there are three elements in the list okay and we want to insert this new node inside this list okay so look at here how we can do this so this is a little bit uh tough to understand if you got this well and good if not go and watch the video okay okay so we are trying to insert this okay so tell me one thing uh one position should be associated with it right uh user will tell that uh okay so this is the note that we are that I have to insert in this list at position number two let's suppose so uh what that means is uh user want this node to be at position number two over here at here this is the node that which is currently uh at picture number two so this will get uh replaced at portion number three and third third will get replaced at position number four okay shifting will be there okay if you insert this at a second position so we that way that we have to check so there are some Corner cases that we have to first check what if the position is one okay this is the first Corner case look at here what is what is the position is one okay if the position is one that means we have to we are trying to insert this node at the very first beginning of the list okay so in that case uh I I think I don't want you to tell uh pretty much how you can do this like this is the same as we have did in our previous video where we are trying to insert the node at the beginning of the list so we are trying to insert this node at the beginning of the list but the thing is that uh we are trying we are first asking the user to enter the position if they enter user enters the position as one that means user want this element to be at the first of the first of the W in the English so you can go and code that uh insert at beginning part over here okay so what if the position is not one that means user actually wants to insert that node in a position where the this what we can say where the element that we want to insert is at the somewhere middle of the list okay somewhere inside the list the other ones so in that case we will code that one also uh okay so let's go and code this okay let me get into my IDE okay so here we will create that method public static so we are inserting a new node right so we should return the new head of the list and we will write insert at okay so this is my name of the method and we will pass the head of the list to this method okay so we are telling that take this list and insert a new node in inside this list at the position that I want okay so to hold that position we will create one new variable name as position where we are dragging the position and we will create one another variable as count and we will assign the value of count as One initial okay I will tell you what count does okay bear with me so I will just simply print enter the data you want to insert It'll ask the user to enter the data okay Enter the data okay so after that we will create one data variable and we'll write a c dot next 10th and ask the user to enter the data okay so after asking the user we will again simply print uh one more statement that is enter the position now asking the user to enter the position at which position the user wants to insert that no in the list okay and we will just simply write position is equals to SC Dot extint okay so yeah we have asking the user okay now after asking the data part after asking the position we just have to create a new node okay new node we'll write new node d is equals to new node and we'll pass the data to the Constructor of that node class okay after creating this node uh like I have said what if the position is one so I will handle that base case first now we'll write position is equals to equals to 1. and after this inside this if the position is equal to equals to 1 that means we are trying to insert that node at the very first of the very first of the list so in that case we will just simply write the same code as we have written in the insert at the beginning all right so we will write head dot previous equals to new node D and we'll write new node D dot next should point to the Head and write head equals to new node new node and we will write new node D dot previous should point to the nerve so this is the same logic that we have implemented in our insert at the beginning if you haven't watched that video go and check that out you will get this uh if the position is not one that means user don't want to insert the new node at the beginning of the list a user as tell any other other location in the list okay so in that case we will we have we need that create the two more variable of type node and we will assign the temp value is equals to head we'll create one temp node and we'll assign that node uh we'll assign that variable not node and we say assign that variables value to the head that means uh this is the scenario what I've written over here is this is the head and we'll make one more variable we will assign that value to the header that means head and temp are currently pointing to the first node of the list okay so we will write node d temp 2 is equals to null we will create another uh variable and we'll assign it value to the net okay so we'll write on while loop while my count is less than my position minus 1. okay whenever my accounts value is less than position minus 1 you will simply write temp is equal to temp is equal to Temp dot next we're literating uh the times value to the next next node of the list and we'll write count plus plus okay so after this while loop we will one more check one more condition inside that else itself we'll check whether the temp Dot next equals x equals to equals to null that means uh when the 10 dot next will be equal to personal if you if yes you correct if it is the last node of the list okay so if it is the last one of the list then in that case 10 10 next to the winner and we'll write uh temp Dot 10 dot next is equals to anode and again we write new node dot previous is equals to 10. okay so this is the if condition if that is not the case we'll come inside the else part else what what we are going to do uh we'll create a node d uh we'll reassign the temp is equals to head again we are taking the temp back to the Head okay uh so not now not temp it's temp two that's why I'm getting error we have covered the time part itself now we will write a temp Dot next we'll assign the temp tools value to the temp uh temp dot next uh oops I'm sorry guys I have assigned it over here I am reassigning that value itself I'm sorry guys okay so we'll write a temp dot next is equals to new node and now we will write a temp 2 Dot previous is equals to new node and after that we will write a new node D dot next should point to the temp to and finally we will write new dot dot previous should point to the temp okay so these are the steps that we want to perform when there is a a position that exists in the in English which is at the some somewhere in between those two nodes okay so this is else part that we are going to add uh perform and after get out of this Loop and this else part we will just simply return the head that is the new list after exerting the at the user specified location okay so uh this is the method that we required if you know doesn't get any didn't get uh any idea go back and watch the video again and try to figure it out okay if you have any doubts come you can comment out I will surely reply back okay so node d uh we are getting the new head okay so we will write a new head is equals to insert at and we will pass the head of this list itself okay and after passing this uh now our list is changed sorry typo print list we'll print the new head new head list and we will also print the length of the new uh text okay so let's go and run this and check whether it's working or not okay so one two three four and five after that I will give minus one element in the list are one two three four five and the length of the list is five that's working fine uh now it's acting for asking for the data I will insert 10 and let me insert this uh 10 at the third index like here okay so new list will be one two ten three four five okay so I will write a new position as three uh here you can see or one two ten three four five and the new length of the list is six because we have added one uh extra node or the new node in the list at this location which I have told to the program okay so this is how you can insert a node in the double linked list at position we want okay so let me run once again and we will try to give the position as one we'll check whether that uh condition is also working or not okay so we'll write minus one I want to insert 10 at the first position oh all right it's all it's all it's working fine it will uh it has inserted the pen at the very first of the list and the new length of the list is also six okay so thank you for watching this video and I will see you in the next one hello and welcome back to the new video of the Java tutorial Series so till now we have covered all the operation insert operation like insert at beginning insert at end and insert at user specified location I know inside user specified location is kinda hard but if you practice more and more you will get how to do that okay fine so in this video onwards we'll be starting for the deletion operations and now in this video we'll be talking about deletion at beginning so we want there is a list of type double in English we are trying to delete the node which is at the first which is which means the first node of the English that we have we are trying to delete okay so let me get into paint before our code we will try to build the logical screen okay so look at here uh this is the list that we have used in the previous video and this is the new node uh not the new node we don't require the new node anymore let me delete it out okay so this is the list one two three these are three elements and we want to perform the delete delete and operation at the first node of the list okay so for that uh to delete this uh we have to somehow disconnect this these uh this part that we have to disconnect this node by the second node okay if we disconnect this node by the second node there if there is no link between these nodes we we have lost over this we have lost control over this node there this node is no more accessible to us and this is how we can perform the deletion operation at the first but before that before breaking this link we have to somehow uh assign we have to change the head because if we want if we if we not change the head to this because after deletion operation our new first node will be this and we have to assign the heads value to this uh so that we have we can keep the track of the remaining list okay so if we not do that and we will first if we make the link uh where remaining list will get uh untracked we can't check keep the track of that list again so what we remain says only ahead of the list okay so this is the logic that we have we want to build okay so let let me erase let me erase this okay so we will go inside our ID and try to call it out okay so we'll write one comment delete at beginning so okay so we'll try to write one function public static so we are trying manipulating the list so we want this list to return our new head of the list okay and we will call this list name ads delete at beginning okay and now inside this we will write node d and okay fine so if you want to delete I have told you we have you have to somehow change the heads value to this new node so for that purpose we will create one more variable of type node D itself and we'll name it S10 and we will assign the head heads value to it it means heads and then both are pointed towards the first note of the list okay so we'll check if head is equals to equals to null it is equals to equals to tail sorry not none a head is equal to positive uh what do you think when the head is equals to equals to tail okay so here you can see if head and Tails are both pointing to this node that means this is the node which comes first and this is the node which comes last that means this is the only node which is present inside the list there are no more nodes that uh exist Beyond this node okay so this is the case in that in that case we will just write simply tail is equal to it is equal to null that means uh tail and head will both Point towards the null we will no more have that access to that node that means that node will get rated and entire list will get empty okay if if not that is not the case if there are some elements that present inside the list then in that case we will just simply write head.next dot previous is equals to now okay head dot next dot previous is equal to null and we'll write head the head is equal to head dot next okay and we'll write temp is equal to not m dot next is equal to yes I'll write this and we will simply return our head what I have done here is head dot next dot previous okay so we are doing what we are doing head dot next that is this there previous that is this we are assigning it to the null okay head dot next dot previous is equals to null so we are breaking this Bond okay we are breaking this previous Bond after the header head is equal to head dot next we are simply reassigning the heads value to this we are moving our head to the next variable uh next node not variable uh temp dot next is equal to null that is temp dot next we are breaking this next Bond also previously we have break the previous Bond okay previous for bond for this node and now we are taking this next Bond for this node and we are successfully uh broke all the bonds okay all the linking and we are simply returning the head of the list so so this is the idea behind the decision at beginning so let's go and test it out okay so let me comment it out delete Ops okay and since we are getting our new head we have to capture that head all right uh not new but we have given the name of the method let me check delete at the beginning till later beginning we will pass the head uh which is we are taking from this these method itself and after that uh we have to print the list but now be careful uh pass the new head and after that we will find the length of the list with passing the new head okay so these are the things that we want to perform just let me just run this and test quickly we'll test okay one two three four and five and minus one and here you can see eliminate the list of one two three four five and uh list is five because we have five elements and elements in the list are two three four one is getting deleted because we are performing the deletion at beginning and after that list size should also get decreased by one which is there and so this is how you can perform the deletion at beginning so quickly we will check that corner case also or the base case where there is if there is one element in the list that is one okay minus one okay so here again null pointer exception we are getting uh why so because if there is one uh one element in the list uh list is this and this and we are trying to delete uh the element which is at uh this so I guess we have some error we'll try to fix it out and I will tell you in the next video thank you for watching this guys and I will see you in the next one so hello and welcome back to the new video of the job tutorial Series so till now we have started a doubly linked list uh we have seen all the insert operation we have started with the deletion operation also in our previous video we have talked about how to delete at the beginning I'm going to delete the first node of the double in English so here you can see this is the code and now in this video we will be talking about how you can delete the node which is present at the last that means we have to delete the last one of the linked list so let me comment it out delete the end node okay so this is the thing that we have to perform in this video so let's go and try to understand first what we are going through and what we are trying to perform okay so here you can see there are three nodes in the list and we are trying to perform a deletion operation at the end okay so we are trying to delete this node so what do you think how we can delete this node uh this is pretty simple uh because we are trying to read it at the end so they are they are not more operation that we want to perform uh first thing the corner case should be checked what if there is a head and tail both are pointing to the same node that means there is only one node in the list that means in that case we will simply Point our head and tail to the null so that we don't have any access to that node itself and the list will become empty okay so if that is not the case uh like here if there are three elements present inside the list and we are trying to delete at the last element so in that case we will simply write uh somehow we will break this next okay so two is next is pointing to the three okay so that's how we are keeping the track of the third node so we will break that link okay so those next should not point to the third node it will now again point to the null okay so it will point to the null will be a code our methods such as such that this next should point to the null so that we have we don't have uh access to this uh node anymore and we again we are thirds previous is pointing to the second snow we also have to break that update that link also so we if we both uh perform this both of the operation the node will get deleted from the list and we don't have that track of that node anymore in our list okay so this is the idea behind this okay so let's get into our IDE and try to go this out okay so as usual we will create one method which is public and static one and now we are trying to delete and we have to pass a new list of the new list to the new list to the main method so in that case our return type should be node D and I will write our function function name as delete at end and this will get our head of the list that means we are prime we are trying to pass the list to this method and this method will in return delete the end and element and we'll pass the head of the list okay so to delete uh let me create one temporary temporary variable which will also point to the head first and again I have as I have talked to you uh if there should be a corner case where head is equals to equals to tail okay so it is equal to equal to Del that means both are pointing the same node that means there is only one element which is present inside the list and in that case we will just simply write head is equals to now okay that means we have successfully deleted we don't have any more the track of that node okay if that that is not the case if else part is we will write previous dot next should point to the null okay and after that we will write tail dot uh not tail dot tail is equals to tail Dot previous so we are switching the Tails well to the previous one so here you can see we are performing this operation we are shifting the tail okay so after Shifting the tail previous is equals to null so we break that one Bond also that I have talked about you so and then simply return the head ok so this is the code that we want to perform so what I have done is uh we have shifted our temp to this node and we will uh we have break it broke this Bond and this Bond also they are no more have access to this last node of the list and we will we have changed the this is our new last node of the test okay so let's go and let me just comment it out it's the previous videos function and okay so we will create one new node d ual mode D which is equals to the delete at end and will pass the head of the list and uh after that we'll print the list by using the new new node D and after that we'll find the length of the list okay so these are the operations let me just run this quickly we'll test it out one two three four five and minus 1. okay so the element of the list are one two three four five and the length of the length of the list is five and the elements in the restart one two three four and we don't have any more track of this file because we have broke those uh next and previous link okay uh and now the length of the list is also decreased by one so this is how you can perform the deletion operation at the end of the W link Niche so I hope you got the idea uh if not go and watch uh go please go backward and watch this video again I hope you're liking this series like share and subscribe thank you hello and welcome back to the new video of the Java tutorial Series so till now uh we have started with the deletion operation we have see uh seen how to delete at end and how to delete at beginning and now one more operation is there uh how to delete app use a specified location that we are going to see in this video okay so let me write a comment delete at position okay okay so let's go in our paint and try to see how we can build the logic how to delete the node inside the double link list which is at the user specified location so there are two things uh two three things that we have to remember uh that is the corner case first of all so what are the corner case uh that we may face okay so first case is what if the position is one okay so it's a user is to tell that delete the element visit present at the position one so that is a bit similar to the function that we have made which is delete at beginning so we are trying to do that same performance we are trying to perform that same task uh but this time user has given the position as one that means user is wanted to delete the element which is at the first so we'll perform that same operation and what if the user has tell the to delete the last node so this is not the actual the corner case this will come under the default uh uh operation uh because we don't we don't know what is the end node what is the last node what is the length of the list so in that case we it will come inside the default case itself Okay so for the deletion uh operation let's suppose I want to delete this this node inside the list so I have to somehow break these and this one but before baking this one I have to link this node with this node first node with the third node uh so that this uh after third node all the nodes will not get a discarded because I have to clean that track as well I just have to delete this this node itself okay so before deleting these links we have to make a link between first and third node and we have to assign thirds thirds previous to the first node add as well okay so these are the operation that we have to perform before bringing those links between this next and previous of this node okay so let's go and code try to code it okay let's go in our IDE okay so we will name it as public static uh we are deleting the node right so we have to pass uh open not pass we have to return the new new head of the list and we'll write the function name as delete at and we will pass the new header the list to this function okay new not new head will pass the head of the linked list that on which we are trying to perform this operation okay so likewise at the insertion at we need one position which is positioned from the user and we will need one count variable which is initially set set to L1 we will need one temporary variable uh name it as stamp and which is pointing towards the head okay and we'll just simply print a enter the position of node U1 to delete okay allows the user to enter the position and we will simply keep that value inside the position variable okay in se.net state after that uh we will check the corner cases if the position is equal to equals to 1 that means the user wants the first element we are deleted in that case we will just simply write the logic that we have written at the in deleted back anyway so if the head is head dot next is equals equals to null at dot next is equals to equal to null then in that case you will just simply write the head is equal to tail is the question number four should point to the null and if not we will go inside the else part we will write head dot next dot previous should point to the null and we'll reassign the heads value the head is equal to head dot next and we'll write temp dot next is equals to nine if this is the Corner case if that is not the case will come inside this else part and we'll do node d we will create one more variable which is also pointing to the Head initially and to keep that track of this back variable we again run the while loop so until my count is less than position minus 1 I will run this one Loop okay and inside this while loop I will write back is equal to back dot next and we will say simply count plus plus okay so what we are trying to do is uh let's suppose uh there are some other notes present inside this list okay so assume that there are five five elements in this double equation okay and we are trying to delete the element uh trying to read the node which is at third third index okay so third position let's say okay so if you want to delete this you have to somehow keep the track of the previous node of the list and the next node of the list okay so that means we have to keep the track of the second node second node which is inside the list and the fourth node which is inside the fourth node which is inside the list okay we will delete the third one and to keep the track of the second node to get to get there the to get there we have run this while loop uh back back is also representing which which means we are trying to get the previous element uh let's like suppose we are trying to delete the third element we will go there to the second element by using this back end we'll try to hold that okay and after that we'll create one more node d let's name it as current which also is equals to back Dot next current will hold the element node which we want to delete actually the node is that we want to delete is hold by current now we will check one if condition if my current dot next is equals to now that means uh it is the last element of the load that we want to delete okay when the current dot next is equal to positional it is the large node of the list that we have to delete okay so in that case it is it is pretty simple to that we have done in the delete at end okay so in that case we will just write simply dot Uh current dot previous is equal to null us dot current is equal to null and I will write back Dot next is also is equal to okay and if if that is not the case there are some nodes which is present after that current also that we will come inside the else part we will write back dot next is equal to current dot next we will current out so what this means is uh we are trying to uh break the next link and we are trying to make the linkage with the third fourth node okay so we are no more I have the track of the from second to third node we have built the connection from the second to Fourth node by writing this line okay and after that we will write simply a current dot next current dot next is equals to current dot next dot previous is equals to back okay so this is the case uh that we want to perform and after that uh we'll just simply come out of this else part and we'll just simply return the head of the list and we are done with the operations okay so this is the deletion operation and this is a specified location uh let me just comment it out and since we are getting the new head of the list from the function we will just simply write the node d um new head d and we will write delete at and will pass the head and we'll just after that after performing this operation we have to check whether the node get deleted you can we have one print list method that we have implemented also and we'll also find the length of the list whether it is decrease by one or not if it is verticate that means our node is circles fully deleted okay so we will run this okay so one two three four and five and give it negative minus one so I limited the list of one two three four five and the length of the list is five and it is asking for the position that you want to delete so let me give a position as three so delete the element which is present at the position number three so here you can see the position number three three is present it has delay don't get confused uh this is not the data part I'm giving the position I am giving the actual uh position at the third position whichever node is there delete it and after deletion operation one two four five is getting returned by the rest and uh this size is also decreased by one so let's go and uh check the corner case also what if we want to delete the first element of the list that is one two three four and five and after that minus one and we will give one here you can see two three four five is also printed one is getting deleted and the length of the list is also decreased so this is how you can perform the deletion operation at the Double link list at the end of the list or at the user's specified location or at the start out the list okay whatever position you want you just give the position if that position exists inside the list this function will delete it okay so thank you for watching this video and I will see you in the next one okay so hello and welcome back to the new word of the Java tutorial Series so till now if you are watching this series uh that's great uh you have we have covered of the core Java concept we have started with the DSA part we have covered arrays uh we solved some problems using arrays now we are at the linked list part and now we have covered a signal English and W links successfully and now for me with this video onwards we'll be covering the circular link list so okay so for this video agenda will be uh I will be talking about how the circular English Works uh what are the things that you why you want to learn about the circular link list that part we will go and learn in this video okay so let me just our adjust my paint window oh yeah that's fine okay so what we have seen till now so we have seen the circular link list we have seen the W link glitch and now we are going to see the circular link list okay so let me just give you the overview so and one thing uh if you have not watched our previous video go and watch then first so that you can get clear idea oh of the what is single language and so that you can clearly understand what is the circular list okay and one more thing if you are watching this series then loving what uh content that we are providing so please like share and subscribe and please share this series to your friends as well so that they can get also benefits of this series okay and if you have any doubt do let comment it out I will definitely get back to you okay so here you can see uh we have I have created one language so as you can see by this if you are watching this series you can clearly guess it what is it it is a simply single in English Okay so there are these nodes these nodes contain the data part and the next part and the next is holding the address to the next door node okay so this is simply the uh simply linked list so now I will do one simple thing and I will change this simply English to a w link list okay so here you can see I will just wait a minute guys okay so by doing adding just one extra line and one extra partition in the node we are creating a doubly liquidation okay so what is double link this uh it is nothing but we can go forward and come backward as well in the single link list you can go only the from left to right okay there is no way you can come from back from there if you want you can come but there is no simultaneous way okay so now here what is the what is the double in English double English does the same we it it holds the value of the next next node and at the same time it holds the value of the previous previous node previous node also okay so you know what is next to it and you know what is back to it okay so it holds the previous address as well and the next address as well and the data part so this is the double in English and now I will do one little modification in this so that it will make it as a circular linked list okay I will do like this I will get this and I will just simply assign it to this okay so what I have done here is simple okay try to understand okay this is our W link list before uh joining this line and I have created one simple simple line and I have joined the tail that means the last note to the first node okay so the Tails dot next before joining the slide a line This is WL English and Tails next is pointing towards null so instead of pointing to the null it will pointing to the Head okay so that it will make a circle okay and this previous is pointing to this and its previous will point to the last node okay so we have make these two lining two changes in the double language and it will make it as circular English okay so what we have done is uh we have link the tail dot next to the head of the list that is the first node of the list and we we have given the value of uh head dot previous that is heads previous to the tail that means we are trying to connect uh head with the tail so by doing this uh we are we are making our Circle you can see if we are trying to iterate from the head and you are going to iterate iterate it right and uh you come again come at head okay so this will make make it as Circle okay this will form a circle okay and if you see it it is forming my circle you are uh heading uh you are studying for the first node you go to the second fourth and third and then fourth and due to we have a link from this to this and it will again come back to the Head okay and end up it is also in the backward backward formation also uh if you if you had the tail uh you go here go here go here and it will also come here okay so this is the idea behind this and one more thing uh that I forgot to tell you uh there is no backward Okay so here you can see we have created doubling list okay so there is no backward you can't come backward there is no previous in the servers what we can say is circular linkage there is only a one way that is only one way you can go from left to right you can't go you can't come backward okay so regular in English in simple terms the color of English is nothing but uh one little modification to the single English that will make the list in English as a makes it circular okay it it go in the loop and all the elements are connected with each other and list is also connected okay so this is uh the theoretical part of the single English uh sorry the circular link list so this is it so there are two types of circular English one is simply uh English circular English and doubly circular English so here you can see I have given you the example of the single single circular English Okay single circular in English is nothing but the sales single circular English but in the circular format okay so we are trying to connect this these these ports and uh if I redo okay so this is the this is also a circular English but it is in a doubly format that means uh it is a double in English that we have connected tail and head so that it will make uh make and work as a circulating circular doubly linked list okay so this is the idea behind the circular increase so thank you for watching this video and for the next video onwards we will try to implement this thank you hello and welcome back to the new video of java tutorial series uh so in our previous video we have started seeing uh circular English and we have seen the theoretical uh part of the circle in English and we have understood what is circled English and how we can uh implement it all right so in this video we will be starting uh start coding uh with a circular link list and in this video we will be creating a circular English and know how how to create a circular English Okay so for that uh let me just create create one visual representation of the circular English uh so that you can understand more clearly okay uh so again uh we can Implement circular link list uh in two ways uh using circular single in English and circular doubling English meaning that you can create a you can convert a single in English into a circular single in English and you can convert a double a link list into a circular double a link list the difference is only between uh the you have to keep the two pointers all right if you are implementing the doubly linked list uh circular link list then you have to keep the track of previous and next and if you are implementing just a single link a single circular linkage then you have to keep a track of only the next pointer okay next address of the node okay inside the this and uh one more thing after that uh this will get connected to the first node uh so as we know we have one head and we have tail all right and the head represent representing to the first node of the linked list and tail representing the last node of the link list so uh it's like an linked list we will be implementing the singly circular link list you can you can try the Dublin as the doubly circular link list for buyer own okay so look at here we have one single link list okay so this is the first node second or third node and fourth node so to make it as a circular link list circular single link list we just have to keep the track uh keep the track of tail dot next uh or we have to assign the value of tail dot next to the head that means it will create one Circle a circular list okay so we are going from first node second node third node to Fourth node again we can come back to the first node so it it's it making a circle circular linked list okay so this is how we can create a circular link list so let me go into my IDE and we create one circular link list over here okay so I here in I was in my IDE and let me just right click here and create a Java class so as you have seen uh you know a single LinkedIn W in English we need a node to create a linked list all right so let me create one node for the circular link list so let me create the class name as node C dot Java ah so this will represent our node uh one node inside a list okay so for the circular link list we are implementing circular single in English so that's why we need we required data part and one uh one next variable of type node C itself which will carry the address of the next node inside the list and we we want the Constructor for this class and this Constructor will take the input as the data from the user and it will just simply assign that data to the data that we have declared over here okay and we'll assign next is equal to all right so this is the node C dot Java file that we are using okay so now after creating the node I want to create one file where I can perform all the operations regarding to the circular linked list all right so let me call it as circular in list Dot okay so here I created it so since we are getting the input from the user so we do require the scanner class also so let me just go ahead and import my scanner class I will write import sorry for typo import Java dot util Dot scanner also after importing this kind of class so I do require my main method to execute this code and we'll implement this main method a letter and just I will do for declaration part first so we are taking inputs in a multiple method so I will declare the object of the scanners class uh globally okay so it's public static scanner SC equals to new scanner system dot in all right so I have declared the object of the scanner class as well and now we have to declare those two variables of type node C representing the head and tail which is the first and last node of the link list respectively okay so we will write public static then those are our type node C and we require the head and tail okay so this is also done uh now we are good to go to write those methods so in this video we will be creating a circular link list so that's why I will write uh create a circular link with CLL is circular necklace okay so this method should be public and static one because we are calling that method inside the server main method which is static as well okay so and since we are making the list and we are we have to return a node that is the head of the list so that's why we are returning a node so the return type should be node C and the method name I will called as make list because we are creating a new list okay and just create the method okay so initially the my head should point to null uh since we are making a new list so the head and tail should point to the null and okay and after that uh I will just print enter the data in the list enter the data in the list all right so I will just write it over like this so and after that I will declare one in data variable and I will take the input from the user and after taking this input from the user I will just write one while loop and while my data is not equals to 1 until that I will run this while loop and after getting inside this while loop I will create a node which I need to insert inside my linked list okay I will call it that node as new node C which is a new node of circular link list and we will equals to new node and so we have to pass the data to the Constructor of that node C Class we'll pass the data that we have taken input from the line user from in line number 212 okay so after creating the node we'll check one if condition if my tail is equals to equals to null if that is the case my 10 is equal to equal to null in that case I will just write head is equals to new node C new node C and we will write our tail is also equals to new node C okay so what I have done is and one more thing we write uh new node C Dot next is equals to red okay uh so when my tail is equal to equational that means the it is the first node that we are trying to insert our list into our list and for the first node we don't have to do anything extra we just assign the head to the new node and tail to the new node both the head and tail will point to the first node of the list because there is only one list one node inside the list at this time only and we will write new node.next is equal to head since we are making this making the circular link list if if this is the node that is there inside the list then it should there this next should point to this node itself then and then only it will make the circular motion uh in the linked list okay so for that we have written over here and if my tail is not equals to equal signal then we'll go inside the else part that means there are some nodes which are already written inside my list and then in that case we will just simply write Del dot next is equals to a new node we will assign will update the Tails value or we we make that connection between the previous node and the new node we are trying to insert and after that we will write the update details value to the new node C because we have to move the tail tail and after moving the tail we will write the tail dot next should now point to the head of the list by the by writing the line number 22 we are again making that circular circular motion inside our link list okay so after doing this we will again take the data from the user uh and we will continue implementing this while look until the user is satisfied and entered minus one uh just to represent that user have done creating the list and user want to exit from this group okay and after creating all this we will just return the head of the list that is our click list okay so now if I go inside my uh main function and uh I will just write a node node C which is the head and I I have to get this method is returning the head that I have to have captured over here I will capture over here and I will write a make list I will call that mixes function over here and if everything goes fine uh this should not give me any errors after running this let's hope it will not throw error and let's run this okay so it is asking for me to enter the data so let me just go ahead and enter the data over here let me write one two three four five six I can enter as many data as I want and after when I once I satisfied from the entering the data I will just simply write 1 so I will get exit exit from the code because after line number 30 there is no line that we are executing okay so this is pretty much either behind the circular link list how to make a circular link list how secular link list works okay so in our upcoming video we will see how we can print this circular link list okay so the printing printing part is tough because there is no null to the Tails dot next because we are always telling that tells dot next should always point to the head so we are making the circular link list so we have to somehow figure out how we can manage to stop at which point and how we can predict the end of the list so okay so we'll see that in our next video where we will be seeing how we can print the circular link list okay so thank you for watching this video and I will see you in the next one so hello and welcome back to the new video of the Java tutorial Series so in our previous video we have talked about how we can create a circular linked list in Java okay so now in this video we will see how we can print that circular linkage that we have created in our previous video okay so let me just go ahead and clear this out uh the previous topic I will delete it and I will our new topic is print the circular link list okay CLL is the shortcut that I have used for circular link list okay and now if you can see imagine this is our circular English uh one two three and four okay so and fourth is connected to the head again that is the first note so if uh if we are using the logic that we have used in our uh previous videos of double linked list or else single in English to be precise uh then you can see we are just iterating over the nodes over the nodes until we get the head dot next as null so that's Logic for that's logic is good for the singly linked list where we have where we are denoting the end of the list as last nodes next should point to the null ok so but now in the uh circular link list when we Traverse to this nodes we can't use that logic because there is no null we are representing that tails.next as the first node so it will if you implement that logic here it it won't work it will go inside the infinite Loop of printing all those node again and again it will print one two three fourth node and it will again print one two three fourth note so you have to somehow figure out how you can stop that while loop from printing the nodes okay so to figure out that logic one one thing you can do is you can increment the head as it is that we have doing in our single and double in English you you just go on incrementing the head and until your head is matches to the null Okay so until your head is at the position where our tail is currently then and until then you can a trade over the list and as a when you come here when your head come here at the position of tail you just print that last node's value and you just get out of this Loop okay so this is one way you can achieve printing of the circular English okay so we'll be implementing this approach in our code okay so let's go in our code and if I do code it okay so this is our circular link list method that we have implemented in our previous video I hope you see that video and uh understood how we can Implement a circular link list okay so for printing purpose I will again create one method a public static and we are just printing the list right so this method should not return anything and I will call this method as print list okay and we are printing the list uh for that purpose we have to access the head okay so we we do require head of the list so that we can start printing our head uh start printing our list from the head onwards okay and now you you can imagine one corner case right so imagine our list doesn't contain any any node okay so there are no nodes inside our list then in that case we have to handle that corner case you can simply write if my head is equals to equals to null in that case you just simply return I don't want to do any uh processing or any printing stuff if my head is equals to equal signal uh otherwise if head is not equals to equal signal if there are some elements which are present inside the list we just print them as it is okay sorry guys elements elements in the list are okay okay here we come and we will Define one while loop and according to our uh approach that we have a scene in inside paint we will write head until my head is ignored equals to tail I will do the stuff okay so what we are doing we just go ahead and print uh I will remove the print Ln so that it it will not print the each and every element in the new line okay and I will write head Dot data reprint that head dot data and we'll print one space it space also so that we can differentiate between all those Elements which are printing in one line itself and after printing that we will again increment the heads value to the Head Dot next enter next okay so uh okay you can see hey we are iterating until our head is not equal to 10 okay so again I go inside my paint uh when I come here it will check head is not equals to tail but increase it is equals to tell then it will uh terminate this while loop and it will not print the last notes data so each time we have to take care of that we have we have to print the last nodes data as well so to print that data we will just uh come below the while loop and we will just print that data that is head dot data our head is currently at tail but we have written the condition like that we have written that head is not equal to tail but this head is equal to l it will not execute this while loop for the last node for that we have to again write that print statement over here and we will just simply uh print One new line just to understand the clearly okay and this is how we can print the list so let's go ahead and check our method is working or not if if we got any errors we will Rectify that as well and we will pass the head of the list that we are getting from the making the list okay and now if I go ahead and click on run okay it is executing okay so let me create my list as one two three four and five six okay and after that I will write minus one so you can see element in the list are one two three four five six and we have implemented the circular English we have the access to this after six it is it is connected to the one that is first node of the list again we are printing that using this condition and we are printing here the last node of the list successfully so this is how you can print the circular links list in Java thank you for watching this video and I will see you in the next one so hello and welcome back to the new video of the Java tutorial Series so today in this video we will be covering uh we'll be seeing one method which is how we can find the length of a circular link list okay so length in the sense that we have to find how many nodes are there inside that Circle link list okay so again uh if you recall our previous videos where we have seen single and WL English or how we can do that is we have one counter variable which will count uh all those nodes present inside this link list until and unless we reaches the end and with which we representing as Del dot next is equal to null okay so we are iterating over that uh linked list until we reaches at null okay so for but now we are seeing the circular link list where null doesn't exist we have Del dot next is which is assigned to the head which makes this as a circular link list okay so how we can do is uh do this in to find the length length of circular English if we again if you follow this uh approach that we have been using in the circular English sorry singular single English or the doubly linkedinish then you will your Loop will go in in finite Loop it will go and count count again and again because you never stop uh by using that approach there is no null okay this will go this will count as one two three four again it will five six seven eight it the loop will never stops okay so what we can do is we can use the logic that we have used in our previous video that is to we have used that logic to printing that list okay so if I go inside my IDE uh I will I will show you uh so in our previous video we'll see how how we can print the list right so for that we have used the logic ads head is not equals to tell so we are iterating over this list until my head reaches to the tail and after once the head will reaches at the tail uh we'll just simply get out of this Loop and we will just print the last notes data so we can use this logic as uh in our finding the length of method okay so we'll see how we can do this let's go and create one method uh but let me first go ahead and create one okay let's wait a minute let me go ahead and create one another comment over here so that you guys can understand what we have done in this method itself now we print the link list okay so in this video we will be creating uh finding the length of the list okay so I will write length of circularly finished okay okay just we'll go and create our method Okay so two minute okay public static so we are finding the length of the wrist all right so I don't think we have to return anything okay so initially we'll keep the return type ads void and after that we will override our method name as length and now to find the length of the list we have to get access of that list so how we can get access of the list is by getting the head of the list all right so we'll receive the head from the user and I will again just initialize one counter variable and I will limit as count and initially I will name it assign it zeros value and now if you imagine when Corner case is there okay so what is that it's if my head is equals to equals to null all right so initially the head which is given by the user at line number 44. is null okay so that means there is no node in the list the list is empty so in that case we just simply return we don't have to do any processing part in in this method so we will just write head uh head equals equal to null we will just simply write return okay and if that is not the case uh that means there are some nodes present inside the list we will just write our while loop and we will write until my head is not equals to tail I will do the processing part okay so what processing part that we have to do is we just have to increment the count value by one so how we can do this we will just simply write count plus plus we can increment the count value by one and again we have to increment the head as well uh add is equal to head dot next okay so just to understand if you guys can understand uh here also in our previous video we have we have left with the one last node that we have printed over here so here also we will be left with one last node that also we have to count so again once we get out of this while loop we will just simply write one count plus plus as well so that we can cover the last node of the list as well okay and after that we will just simply print the accounts value so we will just simply write the length of the list is we'll append this as with count okay and after that we will just simply one print One new line so that execution goes to the next slide and we can understand things more clearly okay so that is the idea behind finding the length of the circular linked list let's check whether our method is working fine or not we will go inside our main method and we'll just write length call that method and we'll just pass the head that we are getting from making the list over here that will pass head over here okay so let me run this code let me call my list as one wait a minute one unlock is okay well again run this wait a minute okay one two three four and five and I'm done with the print in the list and you can see Elementary the list are one two three four five and the length of the list is five because we have five elements inside the list okay so this is the idea behind finding the length of the circular link list okay so in our upcoming videos we'll see how we can perform the insertion operation or deletion operation on a circular link list okay so thank you for watching this video and I will see you in the next one hello and welcome back to the new video of the Java tutorial series uh so in our previous video we have seen how we can find the length of the circular lines list and now in this video we will be starting with the insertion operation on a circular linked list and now in this video we will see how we can insert a node at the beginning of the circular linked list okay so before going to the coding part let me just show you how we can find the how we can insert a node in a circular English which is at the beginning okay so it is uh pretty uh different from the ones that we have done inside or some singly linked list or the double in English because in our circular linked list we have we are we have connected our Tails dot next to the Head okay so and if you are trying to insert a new node or let me let me just create a new node uh wait a minute and now imagine if you are trying to insert this node at the first so at the very beginning of the link list so in that case the you have to perform three operations okay so the first operation is first operation is you have to assign the tail dot next value to the new node uh tail dot next is equal to new node that we are going to create so that it will create that circular motion in uh it will maintain the circular motion inside our list and after that after creating that link we will just assign the new node.next that is our new node dot next is equals to head uh now once we have created this linking tail dot next is equal to new node and then we have to assign the new nodes next value to the head of the list that is the current first node of the list and after that we will just simply write a head is equal to new node we will assign change the value of the heads to the new node and our list becomes like this one and this is our first node this is our second node third fourth fifth and again this tail dot next is pointing to the new node so so as to maintain the circular motion inside our circular link list okay so this is how we can achieve this uh insertion at uh insertion inside a circular English at the beginning position okay uh nice okay so now let me go inside my IDE and we'll try to court this out okay so below my length function I will just write one comment which is insert at the beginning okay we are trying to insert at the beginning okay so let me go ahead and create one function I will this function is public one public static and we are trying to insert a new node inside the list and that's how that's why we are also changing the head of the list so we have to return the new head of the list to the main method so the return type should be a node we are returning a node to the main main method okay and I will call this name method as insert at beginning okay and we are we have to get access of that list so to change the rest okay so going so insert the node at the beginning okay now inside our method one thing we can do is we are we have to insert a node right so we have to get the data for that node first so we'll just simply write session now dot println we'll write enter the data to insert at first okay so we are inserting at the beginning let's write first and after that we will just write in data is equals to SC dot next hint okay and after that uh we are going to go to create the node okay so we'll create the node new nodes new node C let me call it as new node C and which is equals to the new node C and we'll pass the data that we have get from the user okay and again there is one case a where our list doesn't have any elements okay so we have to handle that case as well uh that case we can handle by writing head is equals to equational that means our list doesn't contain any elements and the node which we are trying to insert our list is the first node of the list then in that case we will just simply write head is equals to new node C and tail is equals to new node C and we'll write new node C dot next is equals to head okay so so that we can maintain that circular motion inside our English okay so if that is not the case uh that means we have some element inside our linked list okay and so in that case as we have discussed uh we just have to write tail dot next is equals to a new node C and we will just simply write new node C dot next is equals to head and we will write head is equals to new node C okay fine uh once we have done with that one now we can go ahead and return our head to the main method which is the updated head of the list okay so we come inside our main method and we will create one's blank space and we will write write that line number 82 as we will call that method which is insert at beginning and will pass the head of the list okay so remember one thing this method is uh giving us the new head of the list so we have to capture that new head okay so we capture that new head inside this okay I will name it as new head okay we have to capture this new head over here now it's okay and we can go ahead and again call those methods of print list but now we have to pass the new head so has to print the new uh list that updated list after inserting the node at the beginning and we will again call the length method and we'll pass the new new head to this method as well okay so we'll see uh before and after whether it gets added or not at the beginning of the link list okay so this method first call is given to the 78 number and now we are creating our list three four and five and let me get out of this Loop and now you can see print the list method is executed and one two three four five is getting printed and after that length method called called and now the length of the list is 5 and now we came here at the line number 82 uh and enter the data to insert at the first and now if I trying to insert 10 in the list and if I hit enter now you can see printless method is called the list is now 10 1 2 3 4 5 uh which is before one two three four five and now it is 10 which is added at the beginning and the length of the list is also incremented by one we have because we have six elements inside the list so this is how we can create a method to insert a node at the beginning of the circular link finished so you know upcoming videos we will see how we can insert a node at the end of the circular link list or add the user specified position inside a circular link list so thank you for watching this video and I will see you in the next one so hello and welcome back to the new video of the Java tutorial Series so today in this video we will be seeing how we can insert a node inside a circular English at the end okay so we are trying to insert the node inside the sampling circular link list at the end okay so imagine this is our circular link list which contains four four node okay and now we are trying to insert this fifth node inside the circular linkage which is at the end okay so for circular English you know we have tail dot next As a head so if we are trying to insert this node inside the list what are all modification that we have to do let's talk them first okay so the first thing we have to do is we have to change the tail dot next value So currently it is pointing to the head of the list that is uh the first node of the list so instead of pointing to the head of the list it should point to the new node uh because uh now if you insert this node at the end this will not the a node which will at the end okay so our last node will get updated so we have to assign the tail dot next value to the new node okay so after doing that we can Now update the Tails value so we will make the tail to point towards this new node okay so our tail is also shifted by one position to the end and now we can go ahead and simply write tail dot next is equal to head okay so we are breaking the bond which is created at the tail dot next is equal to head first by assigning the tail dot next well to the new node and after that we will uh changing the Tails value to the new node so the tail should point to the last node of the list which is our new node okay and after that after doing all this we can just simply write new node.next or else tail dot next is equals to head now so to maintain the circular motion inside our circular link list okay so these are the three things that we have to do in in order to insert a node at the end of the circular link list okay so let's go inside our IDE and see how we can implement this okay and I will come here and I will just write our comment so that we can know what's happening inside that method right so we will write insert at the end okay so we are trying to insert the node at the end okay so we'll write public method should be static and we are trying to insert a node so we are updating our list so it should return the new node obviously and after that we'll write insert at end and this method should take the head of the list so that we can modify the list or insert the new node at the end of the list okay so first thing first we will ask the user to enter the data so let me just copy the this line from the previous video where we are trying to insert the node at the first now we are trying to insert the node at the end okay and I will just write int data is equals to SC dot next in okay and after that now I can create my node node which is our type node C I will name it as new node C which is equals to the new node C and we'll pass the data okay after that we again we have to check on Corner case that is if my head is equal to equational that means there is no node inside the list which are present and in that case we will just simply write new node head is equal to new node the new node C and we will write tail is also pointing to the new node see because that will be the first node inside the list okay okay sorry my bad if my head is equals to equals to null then in that case or we will just simply write as equals to new node C okay and if inside my if condition I will write this like this okay it's fine now if my head equals to equals to another okay uh then in that case we will just simply right head is equal to new node C 10 is equal to new naught C and we will write a new node C dot next should point to the Head okay so after doing that uh if that is not the case uh then we come inside this else part where we know we have some nodes present inside our list and we have to now we have to insert the new node at the end of the list so we will write till.next should point to the new node as we have discussed okay and after that we will write tail is equals to new node C and after that we will write tail dot next should point to the head of the list and after that we will just simply return our head of the list okay so this is uh pretty much you have to do inside insert at the end okay so I will just comment out this previous code where we are trying to insert the node at the beginning so I will just come it out and below that we will write a node C since the the method is returning a new node of the list so we have to capture that inside our main method so we will write you know new notes new node instead of writing no no you just write new head okay and I will call that insert at end okay and we will pass the head that we are getting from the line number 95 and below that we will write the print list method and we will pass the new head okay okay and after that we just find the length of the list by giving the new head of the list okay so now if I go ahead and run this code I should first okay so give the list one two three four five I will write 1 uh so here you can see uh for the previous or the previous list we have one two three four five and the length of the list is also five and now it is asking for the data which is to be inserted at the end I will write 10 to be inserted at the end and after that you guys see one two three four five and ten is inserted at the end position and the length of the list is also incremented by one because now the elements there are six elements inside the list present okay so this is how you can implement the code to insert a node inside the circular linkage at the end so in our upcoming video we will see how we can insert a node inside the circular English at the user specified position okay thank you for watching this video and I will see you in the next one
