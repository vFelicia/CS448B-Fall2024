With timestamps:

00:01 - hello guys welcome to the next video
00:02 - tutorial on C programming for beginners
00:05 - in the last two videos I have been
00:07 - showing you what are arrays and how to
00:11 - use arrays in C and I have also shown
00:14 - you in the last video how we can use
00:17 - multi-dimensional arrays in C now in
00:20 - this video I'm going to show you how you
00:22 - can pass arrays as an argument of a
00:28 - function so let's see how we can do it
00:31 - so we are going to take an example for
00:34 - example we want to calculate the sum of
00:39 - elements of uh this array we have so
00:42 - this array for example have six elements
00:46 - and we want to add each and every
00:49 - element and display the sum of every
00:52 - element each and every element so what
00:55 - we want to do basically is we want to
00:57 - just add 20 + 30 + 60 + 50 + 55 + 30 and
01:04 - sum them up and show the result uh of
01:09 - this uh summation using a function right
01:14 - so first of all let's see what are
01:17 - different ways of passing arrays as an
01:20 - argument of a function so I will declare
01:25 - a
01:25 - function void for example it's not
01:28 - returning for example example nothing
01:31 - and we can say
01:35 - array sum is the name of for my function
01:39 - I just need to change my keyboard
01:42 - settings yeah
01:45 - so
01:47 - array uh sum is the name of my function
01:51 - and there are three different ways
01:54 - basically you can pass arrays as an
01:56 - argument of a function one is
02:00 - using a pointer and just pointer you can
02:04 - just uh give this star or estx here and
02:10 - give your array name
02:13 - or array or you can say my array
02:18 - right my array okay so you can pass uh
02:24 - pointer uh array to your function but we
02:28 - haven't learned about point till now so
02:31 - I will skip this uh for now and in the
02:35 - future when I will uh teach you how to
02:37 - use pointer in C then we will see how we
02:41 - can pass uh this kind of arrays and as
02:45 - an a function
02:47 - argument so second way is to pass a
02:51 - definite sized array for example I want
02:54 - to get uh the sum of this array which
02:58 - has the size six I can just
03:02 - declare uh the array so
03:06 - my array ex as an argument and then I
03:09 - will give the size to my array as six
03:13 - like this but there is one uh problem
03:17 - with this is you can only uh pass uh
03:22 - array of size six to this function so
03:25 - this will kill the general functionality
03:29 - of a function and the functionality of a
03:32 - function should be it should be used in
03:35 - different uh conditions and this is this
03:39 - condition restrains uh the use of
03:42 - function to the size six of an array
03:46 - right so in order to uh you know get rid
03:51 - of this restriction we can pass uh the
03:55 - array as unside unsized array as an AR
03:59 - document like this so you just give the
04:02 - data type the name of the array and in
04:04 - the square bracket you don't pass any
04:06 - size and this means you want to pass uh
04:10 - an array of different size or unsized
04:14 - array which doesn't have any size okay
04:17 - or it can have different sizes right and
04:21 - plus we will uh pass the
04:26 - size as an argument also okay so we know
04:30 - the size of the array and the array name
04:33 - from here now we can uh pass different
04:37 - size array to a function like this okay
04:42 - now using this function I want to add
04:46 - all the elements of the array okay and
04:49 - let's return integer as a result and
04:53 - because we want to uh calculate the sum
04:56 - we will just declare a variable called
04:59 - sum is equal to 0 we will initialize it
05:03 - by zero okay now we will use a for Loop
05:07 - just like
05:09 - this and what is say it's doing is it'll
05:13 - iterate over this array one by one and
05:18 - we will add
05:20 - the values of the elements 1 by one to
05:25 - this sum right so initial values of sum
05:28 - is zero and it will add 20 30 60 1 by
05:33 - one to this sum right when we iterate
05:36 - over this array so this array
05:38 - declaration is something like this for
05:41 - in the condition or in the bracket we
05:43 - will initialize this uh variable I is
05:48 - equal to Zer and then we give the
05:51 - condition here so I should be less than
05:54 - the size of the array right because the
05:58 - size of the array starts
06:01 - from zero so it should be less than the
06:05 - size of the array right so just pass
06:08 - this size argument here okay I is less
06:12 - than this size right this size and this
06:15 - size are same and then we will increment
06:18 - the value of I by by one by like this
06:22 - okay so just initialize I is equal to Z
06:26 - I should be less than the size of the
06:27 - array which is this one and then we will
06:31 - increment the value of I and what we
06:34 - basically do want to do we want to just
06:38 - sum is equal to sum the previous value
06:42 - of sum plus the array
06:46 - name and the index at the moment which
06:50 - is uh I right so this I will uh change
06:57 - in the loop so first value of I is is z
06:59 - so i z of this array is 20 so
07:05 - the value of my array at uh 0er will be
07:10 - 20 when we will pass this array as an
07:13 - argument to this function okay we can uh
07:17 - simply write uh
07:20 - this in different way like this so just
07:24 - write
07:25 - sum plus is equal to
07:30 - just write this my array okay and this
07:34 - is basically same as this but this is
07:37 - more short form of uh this expression
07:41 - okay and then we will just
07:45 - uh return sum so once we have the sum of
07:51 - all the elements of the array we will
07:52 - just return the sum here as an integer
07:56 - okay now in order to use this function
07:59 - for example we have this array and we
08:01 - want to calculate uh the sum of all
08:04 - these elements we can use uh this like
08:08 - this so let me
08:12 - just make it smaller so we can see here
08:16 - so in here we will just call this
08:19 - function so I will just uh uh declare a
08:23 - integer
08:26 - called array sum right so this will
08:31 - contain the result of this but this and
08:34 - this are same so we will just
08:37 - change uh the variable name
08:41 - sum
08:44 - of array for example right and what its
08:50 - uh value is it's equal to the value
08:55 - which is returned by this function when
08:58 - we pass the array so this function takes
09:02 - to augment the array so our array is
09:05 - this one my number array and the size of
09:09 - the array right so the size of the array
09:12 - in our our case is six right now see
09:16 - this so it's six okay and it will
09:20 - calculate the sum of uh the array and
09:23 - then we
09:24 - will print the value of the array so
09:29 - so
09:31 - array
09:35 - sum is equal to percentage
09:39 - D and comma this because now this will
09:44 - return the sum of the array so this
09:47 - value is assigned to sum of array this
09:50 - variable and then we will pass this here
09:54 - okay now let's run the program and let's
09:57 - see what is the result
10:00 - and it shows it should be print F okay
10:05 - run the program and it shows array sum
10:09 - is equal to 245 right let's check
10:13 - whether it's uh true or false so I will
10:16 - just open the calculator from here and
10:20 - we have first element is 20 + 30 + 60
10:28 - +
10:29 - 50 + 55 + 30 right all these are 20 30
10:36 - 60 50 55 30 and the sum is 245 which is
10:41 - shown here as a result so we know that
10:45 - it has successfully calculated or our
10:47 - function has successfully calculated the
10:51 - sum of uh elements of this array now
10:54 - suppose uh this you want to pass an
10:57 - array of size is seven here so I can
11:01 - just change the size and I will add one
11:03 - more element to my array for example
11:06 - it's 100 so our previous sum was
11:11 - 245 and we will just add 100 to it so it
11:15 - should be equal to 345 now right so and
11:21 - this now the size of the array is seven
11:24 - so you need to change this also because
11:26 - this function takes the size of array so
11:29 - now the size is seven right once again
11:32 - run the program and it shows 345 which
11:35 - is correct now if you want to pass an
11:40 - array of size 8 and I will add one more
11:44 - element of and for example I will just
11:48 - uh add 100 once again now 245 + 100 +
11:54 - 100 is equal to
11:56 - 445 right the array size is now 8 and
12:01 - once again run the program and it so
12:03 - shows 445 which is true right so in this
12:08 - way you can
12:09 - use array or you can use a function and
12:14 - pass uh uh array as an argument of the
12:18 - function uh using C right so I hope you
12:24 - have understood this concept and I hope
12:26 - you have enjoyed this video please R
12:28 - comment and subscribe subcribe and bye
12:29 - for

Cleaned transcript:

hello guys welcome to the next video tutorial on C programming for beginners in the last two videos I have been showing you what are arrays and how to use arrays in C and I have also shown you in the last video how we can use multidimensional arrays in C now in this video I'm going to show you how you can pass arrays as an argument of a function so let's see how we can do it so we are going to take an example for example we want to calculate the sum of elements of uh this array we have so this array for example have six elements and we want to add each and every element and display the sum of every element each and every element so what we want to do basically is we want to just add 20 + 30 + 60 + 50 + 55 + 30 and sum them up and show the result uh of this uh summation using a function right so first of all let's see what are different ways of passing arrays as an argument of a function so I will declare a function void for example it's not returning for example example nothing and we can say array sum is the name of for my function I just need to change my keyboard settings yeah so array uh sum is the name of my function and there are three different ways basically you can pass arrays as an argument of a function one is using a pointer and just pointer you can just uh give this star or estx here and give your array name or array or you can say my array right my array okay so you can pass uh pointer uh array to your function but we haven't learned about point till now so I will skip this uh for now and in the future when I will uh teach you how to use pointer in C then we will see how we can pass uh this kind of arrays and as an a function argument so second way is to pass a definite sized array for example I want to get uh the sum of this array which has the size six I can just declare uh the array so my array ex as an argument and then I will give the size to my array as six like this but there is one uh problem with this is you can only uh pass uh array of size six to this function so this will kill the general functionality of a function and the functionality of a function should be it should be used in different uh conditions and this is this condition restrains uh the use of function to the size six of an array right so in order to uh you know get rid of this restriction we can pass uh the array as unside unsized array as an AR document like this so you just give the data type the name of the array and in the square bracket you don't pass any size and this means you want to pass uh an array of different size or unsized array which doesn't have any size okay or it can have different sizes right and plus we will uh pass the size as an argument also okay so we know the size of the array and the array name from here now we can uh pass different size array to a function like this okay now using this function I want to add all the elements of the array okay and let's return integer as a result and because we want to uh calculate the sum we will just declare a variable called sum is equal to 0 we will initialize it by zero okay now we will use a for Loop just like this and what is say it's doing is it'll iterate over this array one by one and we will add the values of the elements 1 by one to this sum right so initial values of sum is zero and it will add 20 30 60 1 by one to this sum right when we iterate over this array so this array declaration is something like this for in the condition or in the bracket we will initialize this uh variable I is equal to Zer and then we give the condition here so I should be less than the size of the array right because the size of the array starts from zero so it should be less than the size of the array right so just pass this size argument here okay I is less than this size right this size and this size are same and then we will increment the value of I by by one by like this okay so just initialize I is equal to Z I should be less than the size of the array which is this one and then we will increment the value of I and what we basically do want to do we want to just sum is equal to sum the previous value of sum plus the array name and the index at the moment which is uh I right so this I will uh change in the loop so first value of I is is z so i z of this array is 20 so the value of my array at uh 0er will be 20 when we will pass this array as an argument to this function okay we can uh simply write uh this in different way like this so just write sum plus is equal to just write this my array okay and this is basically same as this but this is more short form of uh this expression okay and then we will just uh return sum so once we have the sum of all the elements of the array we will just return the sum here as an integer okay now in order to use this function for example we have this array and we want to calculate uh the sum of all these elements we can use uh this like this so let me just make it smaller so we can see here so in here we will just call this function so I will just uh uh declare a integer called array sum right so this will contain the result of this but this and this are same so we will just change uh the variable name sum of array for example right and what its uh value is it's equal to the value which is returned by this function when we pass the array so this function takes to augment the array so our array is this one my number array and the size of the array right so the size of the array in our our case is six right now see this so it's six okay and it will calculate the sum of uh the array and then we will print the value of the array so so array sum is equal to percentage D and comma this because now this will return the sum of the array so this value is assigned to sum of array this variable and then we will pass this here okay now let's run the program and let's see what is the result and it shows it should be print F okay run the program and it shows array sum is equal to 245 right let's check whether it's uh true or false so I will just open the calculator from here and we have first element is 20 + 30 + 60 + 50 + 55 + 30 right all these are 20 30 60 50 55 30 and the sum is 245 which is shown here as a result so we know that it has successfully calculated or our function has successfully calculated the sum of uh elements of this array now suppose uh this you want to pass an array of size is seven here so I can just change the size and I will add one more element to my array for example it's 100 so our previous sum was 245 and we will just add 100 to it so it should be equal to 345 now right so and this now the size of the array is seven so you need to change this also because this function takes the size of array so now the size is seven right once again run the program and it shows 345 which is correct now if you want to pass an array of size 8 and I will add one more element of and for example I will just uh add 100 once again now 245 + 100 + 100 is equal to 445 right the array size is now 8 and once again run the program and it so shows 445 which is true right so in this way you can use array or you can use a function and pass uh uh array as an argument of the function uh using C right so I hope you have understood this concept and I hope you have enjoyed this video please R comment and subscribe subcribe and bye for
