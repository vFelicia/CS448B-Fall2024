With timestamps:

00:00 - hi welcome to this course on C
00:03 - programming tutorial for absolute
00:05 - beginners C is a very powerful
00:08 - functional programming language that's
00:10 - widely used and that has influenced many
00:13 - other languages most of the programming
00:16 - languages popular today are either
00:19 - direct descendants of C or are heavily
00:22 - influenced by C in this course I will
00:25 - show you the basics of C program and
00:28 - then we will dive into the details of
00:31 - data types strings and
00:33 - variables then I will show you how these
00:37 - basic ideas fits together with control
00:40 - structures like loops and if
00:44 - statements after that we will take a
00:47 - look at how C organizes informations in
00:51 - arrays and how it manages memory using
00:56 - pointers throughout the course I will
00:58 - emphasize good functional programming
01:02 - practices learning C is a great first
01:05 - step if you are a new programmer and a
01:08 - very good way to broaden your knowledge
01:11 - if you have already been programming for
01:14 - a while so let's get started with C
01:17 - programming tutorial for absolute
01:21 - beginners what you need to program C now
01:26 - there are two basic things you need to
01:30 - program c one is the editor editor helps
01:35 - you to write your code right and second
01:39 - thing is called
01:40 - compiler compiler is a small program or
01:44 - you can say it's a small tool which
01:48 - converts your program to the machine
01:52 - language right because
01:55 - the program or whatever your computer
02:00 - doesn't understand this uh C program
02:03 - which you write this C program is just
02:07 - uh the interface of which you are WR and
02:10 - it's easier to understand uh you know
02:13 - programming when you program in C but
02:17 - your computer just understands zeros and
02:19 - ones so this compiler will convert your
02:24 - program which you write and see into the
02:27 - machine language so that it can execute
02:30 - your program so these are the two things
02:34 - which you are require now in order to
02:37 - get these two things uh they they can be
02:41 - uh you know obtained free uh in
02:44 - different ways there are uh different
02:48 - idees idees stand for integrated
02:51 - development
02:53 - environment which helps you to write
02:55 - your code and I'm going to show you how
02:58 - you can uh install this IDE which is
03:01 - free to use uh and let's see how to
03:05 - install this IDE first so just open your
03:09 - favorite browser and just uh search for
03:13 - code
03:15 - blogs and the first link you will see
03:19 - here not this but only the code
03:25 - blocks so search for the code blocks and
03:29 - the first first link here you will find
03:31 - is
03:32 - www.code
03:34 - bls.org this is the
03:37 - website which uh host this
03:42 - uh program called Cod code blocks and
03:46 - it's a IDE so you can see the opensource
03:51 - crossplatform free C C++ and forter IDE
03:57 - so C is included in this and why I am
04:00 - recommending this uh code blocks to you
04:03 - because it's crossplatform that means
04:07 - you can get this on Windows Mac OS or
04:10 - Linux operating system and uh it's op
04:15 - source so you can get it for free right
04:19 - now how to download this you can just
04:22 - click this downloads uh button here or
04:25 - downloads button here I will click this
04:27 - downloads button here and there are some
04:30 - options which you can download there are
04:33 - there is option to download binary
04:36 - release download The Source release or
04:39 - retrieve source code from sub version
04:42 - svm what uh link we are interested in
04:46 - right now is this one download the
04:48 - binary release just click this
04:50 - link and in here you will find few
04:54 - options because I'm will be showing
04:56 - these tutorial on Windows I will install
04:59 - this version Windows um 2000 SL xp/
05:04 - Vista 7 or 8 just click this link and
05:08 - then you will uh see these uh three
05:12 - options to uh install one is uh only
05:17 - code blocks which is uh the IDE which
05:20 - will help you to write your code second
05:23 - link uh will provide you the compiler
05:26 - also so just search for the link which
05:29 - uh has has Min GW in it okay which is
05:33 - the center link code blogs 13 and when
05:37 - at the time of making this video code
05:39 - blocks 13 is the newest version and just
05:43 - search for this word MV minv is a
05:47 - compiler which will help you to compile
05:50 - your program as I have said so it's
05:53 - including your compiler and editor both
05:57 - and we want uh this version right so
06:00 - just click this uh one link uh either
06:04 - this or this I will just uh click
06:07 - sourceforge.net
06:09 - link and then it will be downloaded in
06:13 - few
06:15 - seconds and download will be completed
06:19 - in few minutes because it's not a small
06:23 - file it's 97 MB file so it will take
06:26 - some time to download so just wait for
06:29 - for this to download and I will pause
06:33 - the video and I will continue once this
06:35 - file is downloaded and I will show you
06:37 - how you can install
06:41 - it so now this uh download is complete
06:44 - so we are going to uh install this uh
06:47 - code blocks in our Windows operating
06:50 - system I will just click this executable
06:53 - which I have downloaded and then the
06:55 - install will
06:57 - start and says welcome to setup just
07:01 - click
07:02 - next and you just read the agreement and
07:06 - if you AG agree just click I agree and
07:11 - click next and this is the location
07:14 - where code blocks will be installed just
07:16 - leave it as default click
07:19 - install and the install will not take uh
07:24 - much time it will be installed really
07:26 - fast you can see the code blocks icon
07:29 - here which you can click to open code
07:32 - blocks
07:33 - IDE and you can see uh it's installing
07:37 - really fast so I don't think it will
07:39 - take so much uh time to install this
07:43 - IDE and this code blocks IDE you can use
07:47 - it for programming other languages also
07:49 - like C++ or for for train also so in
07:54 - this way it's uh really good now if you
07:58 - don't have uh Windows operating system
08:01 - you can download this IDE on Linux also
08:05 - or Mac OS uh also it's available for all
08:10 - uh these three
08:12 - major major operating
08:15 - systems now it says the installation is
08:20 - done I think and do you want to run code
08:23 - blocks yes I want to
08:26 - run and it will run code blocks
08:31 - and says uh something I will click
08:37 - okay and here the installation is
08:40 - complete so I will click next and I will
08:45 - finish and you can see here code blocks
08:49 - is currently not a default application
08:52 - for CN C++ do you want to make it for as
08:56 - default if you wish you can uh make it
08:59 - as default or um you can leave this so I
09:04 - will just close it for now I don't want
09:07 - to make it as default
09:09 - but in this way you can install it hello
09:14 - guys welcome to the second video
09:15 - tutorial on C programming for beginners
09:19 - in the last video I have shown you how
09:20 - you can download code blogs which is a
09:24 - C++ IDE in which we are going to uh
09:28 - develop our C code and we are going to
09:32 - compile and run and test our code using
09:35 - this code blocks now in this video I'm
09:39 - going to show you how you can create
09:41 - your first C program and what is the
09:46 - program structure of this C program so
09:50 - let's get started first of all open your
09:53 - code blocks and then go to file and to
09:58 - create a new program you just need to go
10:00 - to new and then here you can go to the
10:06 - project so go to
10:09 - project and in here you can uh find few
10:14 - options but the option we are interested
10:17 - in is console applications so select
10:20 - this option called console application
10:24 - and click
10:26 - go and then it will show some
10:31 - uh message you can read this and you can
10:34 - click next and now we are going to
10:38 - create a c program so make sure that
10:41 - this C is selected here and click next
10:47 - and in here you need to give the name to
10:50 - your project so for example I want to
10:54 - give name to my project as my
11:00 - prog okay so this is the name of the
11:03 - project what name of the project depends
11:06 - upon you whatever name you want to give
11:08 - you can give it to the project and by
11:11 - browsing this you can uh change the
11:14 - directory in which you want to save your
11:16 - program so I will leave it as default
11:19 - but you can change it and just note this
11:22 - path so that you can see the source file
11:26 - if you want to see okay and click
11:30 - next and this is generally is showing
11:34 - the basic information about your project
11:37 - that it's going to use gnu GCC
11:41 - compiler which we are going to use to uh
11:45 - compiler application and it's going to
11:48 - create two uh version of your project
11:51 - one is called debug and other is called
11:54 - release for now it's not necessary to
11:57 - know all these things because
11:59 - uh we are beginners right so just click
12:04 - finish and when you click finish you
12:08 - will not see anything on this uh window
12:12 - but on the right hand or left hand side
12:16 - on the project tab make sure it's
12:18 - project tab you will be able to see a
12:22 - project name which is given by by you
12:25 - and a folder called source and inside
12:27 - this folder there is a file called C do
12:31 - uh main. C right and once you click this
12:36 - file maid. C you will be able to see the
12:40 - hello world program here
12:44 - now you can press control and scroll
12:48 - your mouse to make your code you know
12:51 - font size bigger or smaller so in order
12:56 - to make it bigger just press your
12:58 - control
12:59 - and scroll your mouse okay so I'm making
13:03 - it a little bit larger so that you can
13:05 - see and this is the basic structure of
13:09 - the
13:10 - program uh and it's called hello world
13:13 - program it's automatically created by
13:17 - code blocks for us so uh let's see uh we
13:21 - will go line by line and let's see what
13:25 - uh this code means so the first first
13:29 - line or rather first two lines which
13:33 - start from this hash symbol are called
13:37 - preprocessor command there are other
13:39 - pre-processor command also but these are
13:42 - the very most basic pre-processor
13:46 - command and a pre-processor
13:49 - command
13:51 - include
13:52 - includes a header file into your project
13:57 - so whenever you create create a c
14:01 - program there is already some files
14:05 - which we need to include in our project
14:09 - in order to write a program and this
14:13 - pre-processor uh command which is this
14:16 - hash include includes the file name
14:20 - which you give here and this are the
14:22 - most uh important files which uh we need
14:26 - to create a simple program and the first
14:29 - file is called stdio which stand for
14:33 - standard input output and this file is
14:36 - responsible for taking the input or
14:40 - printing outputs like this print app uh
14:44 - which I'm going to describe you in a
14:46 - moment so this
14:48 - function function also I will uh explain
14:51 - you in a moment but this uh is due to
14:56 - inclusion of this file
14:59 - now there is a file called STD lib which
15:03 - is this file and this file also we need
15:07 - to include because main whenever you
15:11 - write a c program and whenever you
15:13 - compile and run try to run this program
15:16 - your uh compiler or whenever you run Pro
15:22 - run your program your compiler sees the
15:26 - main function or searches for the main
15:28 - function in your project and this is
15:31 - like a entry point to your program so
15:36 - this main is the part of standard li.
15:40 - Edge so these are called pre-processor
15:44 - compiler
15:46 - now this int
15:48 - main is a function and it's a very basic
15:53 - function and it's
15:55 - uh built-in function which uh every
16:00 - program must have and by this mean C++
16:05 - knows that it is the entry point of your
16:09 - program so every project must have at
16:14 - least and only one main uh function and
16:20 - what is a function function is a piece
16:24 - of
16:25 - code which you can you know EX execute
16:29 - for now you just need to know about this
16:33 - uh is a function is a piece of code
16:36 - which you need to uh you know which you
16:39 - need to execute some piece of code okay
16:45 - and the most basic function is Main and
16:48 - most important also function is main Now
16:52 - function has uh two or three basic uh
16:55 - things one is a return type which is int
16:59 - int stand for
17:01 - integer so this is int int is a data
17:06 - type which stands for integer and this
17:09 - main is the name of the function which
17:11 - is by default uh you have to give in
17:15 - small letters and this bracket takes an
17:20 - argument and for now we are not passing
17:23 - any argument so it's empty so every
17:27 - program must have this main function and
17:31 - because we are returning
17:34 - integer we need to end our program with
17:38 - return Z return Zer is just like a
17:42 - success for your main program so for now
17:46 - you just need to know that if you return
17:48 - zero and if you reach till this point
17:52 - your program has run
17:54 - successfully okay now print f
17:59 - this printf is a part of standard io.
18:05 - file so there is a function in this file
18:08 - called printf and this printf helps us
18:12 - to print a string on the terminal okay
18:18 - so this is a print F and inide this
18:22 - bracket whatever you write inside this
18:25 - printf in double quotes so always
18:29 - remember you need to write in double
18:31 - quote inside the brackets whatever you
18:34 - write it will be printed on the terminal
18:36 - so for now you are writing hello world
18:39 - so it will be printed on the terminal
18:42 - now this back
18:45 - sln changes the
18:48 - line which I'm going to demonstrate in a
18:51 - moment so this will not be printed but
18:54 - this is a special uh you know string or
18:58 - character ctor which will help you to
19:01 - change the line of your uh you know
19:06 - print now every line ends with this
19:12 - semicolon so this semicolons tells C
19:16 - that this line of code is ending here
19:20 - and from the next line we are going to
19:22 - write another line of code okay and
19:27 - every function
19:29 - is started with these opening and
19:32 - closing curly
19:34 - braces
19:35 - okay so this is the basic structure of a
19:39 - c program now once you have understood
19:43 - you can see every line is uh starting or
19:46 - ending with the semicolon and it's uh
19:50 - not necessary that you need to give this
19:53 - kind of indentation you can you know
19:56 - write a line of code here or like this
20:00 - or you know position doesn't uh you know
20:04 - it's not important you can you give two
20:08 - line gap between two codes or you know
20:12 - two lines of code or whatever but in
20:15 - order to uh you know show or make your
20:19 - program presentable there is uh you know
20:23 - design of a code which is uh best uh
20:27 - looking so this in this way your program
20:30 - looks good that's why we write it like
20:33 - this now in order to run your program
20:37 - you need to compile your program and in
20:40 - the last video I have shown you or I
20:42 - have told you what is compilation
20:45 - compilation helps your programs to
20:50 - convert this program into the machine
20:53 - language which your machine can
20:56 - understand this is the code which is
21:00 - readable by human but it's not
21:03 - understandable by the computer so
21:06 - compiler will help us to convert this
21:08 - code which is human readable to convert
21:12 - it into machine readable code and how
21:15 - you can compile your code there are
21:18 - three buttons in code blocks which is
21:21 - this one build run and build and run at
21:25 - the same time so to build bu your
21:29 - program build means compile compile and
21:31 - builds are same so whenever you click
21:36 - this build it will compile your program
21:39 - now there is one tab here and this tab
21:43 - also has this option called build run
21:46 - and run and build so you can go here
21:49 - also and build your program now I'm in
21:53 - order to build your program you always
21:55 - need to save your program first so all
21:58 - always click this save icon so to make
22:02 - sure that your pro program is saved and
22:05 - then click this build button and this
22:08 - whenever you click this build button the
22:11 - output of your compilation will be shown
22:14 - in this build log and if you don't see
22:18 - any error here you see here zero errors
22:22 - zero
22:23 - warnings and this means that a program
22:27 - contain
22:28 - zero errors and zero warnings so
22:32 - compiler also helps us to check whether
22:35 - our
22:36 - program is or we have written our
22:39 - program correct or not okay now once
22:43 - your program is uh compiled successfully
22:46 - with zero or errors you can run your
22:49 - program with this green button just
22:52 - click this button and now our program is
22:55 - running and it prints hello world
22:58 - and then it prints some uh
23:01 - something which uh doesn't interest us
23:05 - it's uh just thrown by uh you know
23:09 - terminal so this is what we are Printing
23:12 - and it's just uh saying that uh press
23:15 - any key to continue and whenever we
23:18 - press any key this terminal will go so
23:22 - this means our program is running
23:26 - successfully now
23:29 - if you want to build and run your
23:31 - program at the same time you can just
23:33 - click this button uh and this button
23:36 - build and run will build your program
23:39 - also and run your program so when I
23:40 - click this it will build and run my
23:43 - program at the same
23:45 - time now whenever you do some mistakes
23:50 - in writing your
23:51 - code your compiler will give an error
23:56 - for example by by mistake I left some
23:59 - unknown
24:01 - characters here after my print F print F
24:05 - function here and after the semicolon
24:08 - which are is unknown to uh the C
24:12 - compiler so whenever we save our program
24:15 - and compile it this will give us
24:19 - compilation error you see error and it's
24:23 - showing expected semicolon before a
24:27 - return
24:28 - right and it's not we haven't given
24:32 - semicolon here so it's uh giving us the
24:35 - error we added semicolon but still it's
24:38 - unknown to uh your C programs once again
24:42 - I compile
24:43 - it and it will still give us error
24:48 - because it says error this word is
24:53 - Undeclared right so whenever you write a
24:57 - code with which is unknown to see it
25:00 - will give you the error and this red
25:02 - mark where or from where which line this
25:06 - error is coming from so in this way you
25:09 - can check whether you have written uh
25:12 - the correct uh program or not so this is
25:16 - to check also you compile a program to
25:19 - check whether you have written something
25:21 - uh good or good or you have written
25:23 - something which is correct and to
25:28 - convert your program into the machine
25:30 - language and this to run the program you
25:33 - just click this button and it will run
25:35 - the program so this is how the C
25:39 - structure of program looks like and this
25:43 - is how it works hello guys in the last
25:46 - video I have shown you how to create
25:48 - your first C program and I have also
25:52 - explained you this code line by line to
25:55 - you now in this video I'm going to
25:59 - further explain you how to use these
26:03 - inputs and outputs like print F and
26:07 - other things in C so in the last video
26:11 - I've shown you uh that this print app we
26:15 - can use it to print any value to the
26:19 - terminal so whenever we run this code we
26:23 - will see that hello world which is uh
26:28 - inside the print app function brackets
26:31 - is printed and this slash and just
26:34 - changes the next line so for example I
26:38 - want to print hello world three times 1
26:42 - 2 3 and I will just build and run my
26:45 - program will it will be printed three
26:48 - times hello world and in the next line
26:51 - hello world and in the next line hello
26:53 - world but if you want to print this
26:56 - hello world
26:58 - uh again and again without any line
27:01 - break you can just remove this slash n
27:04 - so I will remove this slash and
27:07 - here and then I will just run my program
27:12 - and I can see this hello world is
27:14 - printed three times in one line so this
27:19 - slash
27:21 - and changes the
27:24 - line now for example you want to uh
27:29 - print some number how can you do this
27:32 - for so first idea which may come into
27:35 - your mind is just write a number for
27:39 - example print
27:40 - F32 but let's compile this program first
27:44 - it says some warning and when I run the
27:49 - program it will not uh run and it will
27:52 - give you some error because this is not
27:56 - how you print a
27:58 - number to in order to print a number you
28:02 - need to uh use a special place
28:06 - folder so for example I want to print 32
28:10 - here I need to give a placeholder so
28:15 - just in your print app
28:18 - function in these bracket just give two
28:22 - double quotes and a comma and then give
28:27 - give a percentage sign so give this
28:31 - percentage sign and then
28:34 - D and I will uh explain you what this
28:37 - percentage D is but let's first try to
28:41 - build and run our program and it prints
28:45 - 32 now percentage D here is called a
28:51 - placeholder what this is called it's
28:55 - called a placeholder and and it
28:57 - literally means that percentage D is
29:02 - going to uh hold a place for the integer
29:08 - d stands for integer so if you write D
29:12 - it will hold an integer if you want to
29:16 - print a decimal value then there is a
29:21 - special character called f which stand
29:23 - for float and then you can print
29:27 - uh decimal value for example
29:30 - 32.2 so when I build the program it can
29:36 - print
29:38 - 32.2 now for example you just write here
29:42 - percentage D but you uh want to print
29:46 - 32.2 let's see what happens it doesn't
29:49 - print this number because this is a
29:52 - decimal value but we are providing the
29:56 - in integer placeholder to hold the
29:59 - decimal value which is not valid so you
30:02 - always have to remember that you need to
30:07 - uh keep in mind what kind of value you
30:09 - want to
30:10 - print now with this placeholder you can
30:13 - add your text also so uh for example I
30:18 - want to print the text with this
30:21 - placeholder that
30:25 - the number a is equal to and then write
30:31 - your placeholder so this placeholder
30:34 - will be replaced by 32 here so just uh
30:39 - imagine like this it will print the
30:41 - number is and whatever here it will be
30:46 - replaced by the number or the value you
30:51 - right after this comma okay and when I
30:55 - run the program it will print the number
30:58 - is equal to 32 okay
31:02 - now in order to uh print multiple
31:06 - decimal what you need to do is you just
31:09 - need to give multiple placeholder just
31:13 - space for example I want to print uh
31:16 - some value with separated by a space you
31:20 - just need
31:22 - to just copy and paste it three times
31:26 - and then after Comma just provide other
31:30 - values you want to print because uh we
31:34 - have written percentage D fre time and
31:38 - uh keep in mind here this is space so it
31:41 - will be printed 32 space 58 space 5
31:46 - let's try and run the program and 32 58
31:50 - and 5
31:52 - right now there are different kind of
31:56 - data you can print for
31:59 - example I've shown you how to print this
32:02 - that's decimal it will print a decimal
32:04 - value one decimal value right now in
32:09 - order to I will just copy this and paste
32:13 - this not this one but I want to copy
32:17 - this whole string and paste it here I
32:20 - don't know why it's not
32:25 - copying right click and if there is a
32:28 - copy option we will copy
32:31 - it copy and right click and paste right
32:39 - so I will just copy this once again and
32:43 - try to paste it once again and for
32:47 - example I want to print a decimal value
32:50 - so it will
32:52 - be replaced by this F which is which
32:56 - sent for float now in order to print a
33:01 - big decimal value or large float value
33:04 - you use uh double and double is LF large
33:11 - float value in order to print a large uh
33:16 - integer value you use
33:19 - LD okay so I will
33:23 - just write some something here comment
33:27 - and this comment means double slash
33:30 - means a comment which I will explain you
33:33 - later and basically this comment means
33:37 - that whatever you write after this
33:39 - comment it will be not executed by your
33:43 - uh C program so this
33:48 - is
33:50 - integer and this
33:54 - is large integer
33:57 - and once again this is a double value or
34:03 - float
34:04 - value float and Float stand for f right
34:11 - and this will be large
34:14 - float large float stand for
34:17 - LF okay now for example you want to
34:21 - print a single character you use
34:24 - percentage C so so I will just write
34:29 - care for the character and Single
34:33 - Character you always enclose it in
34:36 - single codes okay for example I want to
34:38 - print
34:39 - C then just percentage C and then your
34:45 - character okay or a or whatever for
34:49 - example you want to print a string
34:51 - string means a sentence kind of thing so
34:56 - you use percentage as and then you can
35:01 - just print hello world here also in
35:04 - double quotes for
35:08 - example
35:09 - okay and inside this you need to print
35:13 - inside these double quotes and this is
35:17 - called
35:20 - string okay so this comment I will show
35:25 - you in the next
35:27 - video how these comment works but for
35:30 - now just understand that this this line
35:34 - after this double slash will not be
35:37 - executed okay now the if you want to
35:42 - print some hexa decimal value you can
35:45 - print it with this
35:49 - which X okay and for example you want to
35:53 - print the hex hexad decimal value for 16
35:59 - it will be uh printed as hex value okay
36:05 - so I will write
36:07 - hex now I will run the program but bear
36:10 - in mind
36:12 - that they will be printed in same line
36:16 - because we haven't provided this line
36:18 - break here so we will provide this line
36:21 - break after every uh every uh line print
36:27 - so that they will be all printed in
36:29 - different lines
36:32 - okay different
36:36 - lines and this was decimal this was
36:39 - large decimal
36:41 - so uh you can just print a large number
36:45 - large number can be you can search for
36:49 - the large decimal limit and it has some
36:52 - limit and then the float value
36:57 - and then the large decimal float value
37:00 - for example this
37:03 - one and the character is okay string is
37:06 - okay and text is okay now we try to
37:11 - build my program and run it and it runs
37:15 - first it prints hello world which is a
37:17 - simple string then it prints 32 which is
37:20 - a decimal then it prints uh big decimal
37:24 - value not big decimal but big integer
37:28 - value which is this one then it prints
37:31 - the this float value with f percentage F
37:35 - then it prints the large float value
37:38 - which
37:38 - is uh this big decimal value then it
37:41 - prints the character a with a percentage
37:45 - C sign then it prints the string which
37:50 - is percentage s and then it prints the
37:56 - hexa decimal value of 16 which is 10
38:00 - hexa decimal value of 16 is 10 okay so
38:05 - in this way you can print values using
38:09 - print F function okay so remember these
38:13 - placeholder values D for integer LD for
38:17 - large integer f for decimal values or
38:21 - float values LF for large float
38:24 - values C for character s for string and
38:28 - X for hexad decimal values okay now in
38:33 - order to uh take the input so for
38:38 - example you want that user should uh
38:43 - give some input and then you want to
38:46 - print this input so uh for example what
38:50 - you can do
38:52 - is for example uh you want that the user
38:58 - should enter some value okay and then it
39:02 - will be printed on the screen how can
39:06 - you do that you do that with a special
39:10 - function called scan F scan F function
39:15 - we generally use to take the input from
39:19 - the user okay for example I want to take
39:23 - input from the user as a string so I
39:26 - will write
39:28 - percentage s and then
39:32 - comma and then I can uh just give any
39:37 - value here and it will be uh taken by
39:41 - this uh scan F and if you want to print
39:44 - it you can print this value but this we
39:48 - will see uh later when we uh will
39:51 - understand how variable in C works and
39:55 - how uh uh these data types work in C so
40:00 - this we are going to see later but just
40:02 - remember scanf we use it to input values
40:08 - right now there is another special
40:11 - function which is called
40:14 - puts which is like this
40:17 - PS and it also prints the value to the
40:23 - screen so for example you want to print
40:27 - some value uh this is my
40:34 - C program you can print it like this
40:38 - also with by using print or puts
40:42 - function and when I run this program it
40:45 - will
40:45 - be running fine I will close this and
40:49 - compile and run this and this prints
40:53 - this is my C
40:54 - program so in this way you can input and
40:59 - output uh different kind of data using C
41:04 - on Terminal hello guys welcome to the
41:07 - yet another video tutorial on C
41:09 - programming for beginners and in this
41:11 - video I'm going to teach you about
41:13 - comments so as the name suggest comments
41:17 - are used to provide a description of
41:22 - your code and comments are generally not
41:27 - executed by your C program and for
41:31 - example you want to give some
41:34 - description of your program what is it
41:36 - it is doing or what uh is the purpose of
41:40 - uh your line of code you use comment to
41:44 - so in order to uh give comment to your C
41:47 - program you can use two uh ways one way
41:53 - you uh can use is for multi-line comment
41:56 - multi-line means uh more than one line
41:59 - comment and this is just write forward
42:03 - slash estx and then estx and forward
42:07 - slash okay and in between whatever you
42:11 - will
42:12 - write it will be called a comment and it
42:16 - will not be executed by your program or
42:18 - it will not be uh compiled even by a
42:22 - projects program it's just used to
42:25 - describe what what your program is doing
42:27 - so for example uh I can say that
42:32 - this
42:35 - program is and then I can uh go to a
42:39 - second line and I can just write more
42:42 - description this program is
42:46 - printing
42:48 - hello world for example uh so in this
42:52 - way you can provide multi-line comments
42:55 - like this and
42:58 - this commment which is inside this
43:01 - forward SL estri and estx forward slash
43:05 - will not be executed or compiled by your
43:08 - C program it's just for your reference
43:11 - or uh if any other uh person sees your
43:15 - code uh by seeing these comments he will
43:18 - be able to understand what your program
43:20 - is doing and what you want to do in your
43:22 - program now in order to provide a single
43:26 - comment for example uh this line what
43:30 - this line is doing particularly I can
43:33 - give a comment to this line just give
43:36 - two forward slash and then you can write
43:40 - a comment so this is
43:44 - a
43:46 - print
43:50 - F function okay so you can write uh this
43:54 - command kind of command comments uh in
43:57 - your single line comments or you can uh
44:01 - you know place it here so you can place
44:05 - your comment anywhere in your
44:08 - code just keep in mind you need to
44:10 - provide double slash
44:14 - or forward slash estx and estx forward
44:18 - slash and with estx forward slash for
44:21 - forward slash uh and estx so in this way
44:25 - you can use comment in C program hello
44:29 - guys welcome to the next video tutorial
44:30 - on C programming for beginners and in
44:33 - this video I'm going to uh teach you
44:35 - about variables so I'm going to teach
44:37 - you what are variables and how we can
44:41 - declare variables in C and how we can
44:43 - use them so first question is what are
44:47 - variables variables are nothing but uh
44:51 - the data holder or you can save values
44:56 - in a variable so it's just like you want
45:01 - to save your age in some place you can
45:05 - store it in a variable and then you can
45:08 - extract your age uh using this variable
45:11 - also now variable has uh two different
45:16 - things one is called data type for
45:20 - example int int is an integer and then
45:24 - the name of the variable for example age
45:27 - and then you give a semicolon here and
45:30 - this is the Declaration of the
45:33 - variable now what uh this the variable
45:36 - means is we want to uh declare a
45:40 - variable called age age is the name of
45:43 - the variable and int is the data type
45:46 - data types is the type of data this
45:49 - variable is going to store so it's going
45:52 - to store integer in our case then it's
45:55 - uh initialized by this data type called
45:58 - int okay now you can assign some value
46:02 - to this age for example age is equal to
46:07 - 21 and then you can print this age by
46:11 - print a function for example the age is
46:16 - percentage D which holds integer value
46:19 - and then comma and then the variable
46:23 - name which is age okay
46:26 - and when you compile and run this
46:28 - program it will show you the age is and
46:32 - whatever the age value is which is 21 in
46:35 - our case
46:38 - right and you can see this the age is 21
46:43 - so once again the variable are used to
46:47 - store some value okay now there are some
46:52 - rules for declaring the variables also
46:55 - for example you want to uh store the
47:00 - variables using some number starting
47:04 - with a number then you cannot do this so
47:08 - these are some rules I will just enclose
47:12 - them in the comments so that uh they are
47:15 - not executed the rules are your variable
47:19 - name cannot start with a number okay so
47:22 - for for example you want to start your
47:24 - variable with a number it's invalid the
47:28 - number must not be there or or at the
47:31 - initial place okay so whenever you
47:34 - compile this program it will give you an
47:36 - error because your variable name starts
47:38 - with a number but it can end with a
47:41 - number or the number can uh you know
47:45 - come in between your variable name it
47:47 - will be totally
47:49 - fine
47:52 - because what's the problem here yeah
47:54 - this age
47:56 - I will just commend this out because H I
47:59 - haven't declared it yet right so it's
48:02 - totally fine to have numbers in between
48:05 - your word but your variable name cannot
48:07 - start with a number okay the second rule
48:11 - is your variable name cannot have spaces
48:15 - so for example you want to declare a
48:17 - variable
48:18 - called any age for
48:21 - example uh with a space in between so so
48:25 - this is invalid you cannot have spaces
48:29 - in your variable name right the third
48:32 - rule is you cannot start or uh use any
48:38 - special character for example dollar you
48:40 - want to use dollar to initialize the
48:43 - variable name it's not allowed or you
48:45 - want to use S in between your variable
48:48 - name it's also not allowed okay so avoid
48:52 - using special characters in variables
48:55 - but but it's totally fine to use
48:59 - underscore underscore is an exception
49:02 - which you can use as a special character
49:04 - in between your name so for example
49:08 - mycore age is totally valid variable
49:13 - name
49:15 - okay the fourth rule is always avoid to
49:20 - use special function names for example
49:23 - main is uh the function fun already
49:26 - declared in C if you want to declare
49:29 - main as your variable name it's okay but
49:32 - it will create conflict in C because c
49:36 - will think that this is a function name
49:39 - and you have declared it as a variable
49:41 - name so it will give you some conflicts
49:44 - and in the warning also when you compile
49:46 - this program it says main is usually
49:49 - used as a
49:51 - function so avoid using any special
49:54 - function name names in as a variable
49:57 - name okay so these are some rules for
50:01 - the variable names and you can also
50:04 - initialize your variable like this 21
50:08 - it's totally fine whenever you declare
50:10 - your variable you can at the same time
50:12 - you can initialize it by this equal to
50:15 - sign okay and whenever you build and run
50:19 - it'll run totally
50:22 - fine now there are different type of
50:25 - variable Ables uh I will just run this
50:28 - program and then I will show you what
50:30 - are different type of variable name
50:34 - which are very basic to see so you can
50:37 - declare integer variable names for
50:40 - example you want to declare uh uh
50:43 - decimal uh Point variables you can do it
50:48 - with the data
50:49 - type
50:52 - float so float you can use to store some
50:57 - uh uh floating point value or decimal
51:00 - values for
51:01 - example Pi Pi has the value for example
51:06 - 3.14 and whatever so it's a decimal
51:09 - value you can store this decimal values
51:13 - uh using a data type float okay now in
51:18 - order to uh store a character you use
51:22 - car and car you know you can name it as
51:29 - mycore care it's totally fine is equal
51:32 - to any character for example and always
51:35 - remember that whenever you want to uh
51:38 - store a character you store it in single
51:41 - codes okay so do it like this and it's
51:45 - totally fine and the fourth type is
51:49 - which is very basic is double double is
51:54 - also a data type
51:56 - and you can say this is a
51:59 - big pi value is equal to
52:04 - 3.14 and whatever is the value of pi big
52:09 - uh float value so these are the four
52:13 - basic data type you can use in C there
52:17 - are other data types but these are the
52:20 - most basic data type you can use to
52:23 - declare VAR Ables in
52:27 - C
52:29 - now I think that's it for this video
52:33 - hello guys welcome to the next video
52:34 - tutorial on C programming for beginners
52:37 - and in this video I'm going to teach you
52:39 - about simple math and math operators in
52:44 - C
52:45 - programming so basically there are some
52:49 - uh
52:50 - operators which you can uh use to do
52:54 - your math ma in C and these are called
53:00 - multiplicative and additive
53:03 - operators and the first operator is this
53:07 - plus symbol which is used for addition
53:10 - second is minus symbol which is used for
53:14 - subtraction third is estx which is used
53:18 - for
53:19 - multiplication fourth is this for
53:22 - forward slash which is used for division
53:25 - and the last is this modulus uh operator
53:30 - which is also called modulus so these
53:33 - are called
53:34 - multiplicative and additive
53:37 - operators now how we can use them so for
53:41 - example we have two
53:43 - numbers
53:45 - in
53:47 - a is equal to 23 for example and comma B
53:54 - is is equal
53:56 - to
53:58 - 45 and you want to add these two numbers
54:02 - how you can add these two numbers you
54:04 - can just declare another variable called
54:07 - sum and then you can add these two
54:10 - numbers like sum is equal to a +
54:17 - b okay and the result you can print it
54:22 - in print a function so you can just
54:27 - say
54:30 - sum is equal to percentage D okay and
54:36 - comma your sum function sum variable
54:39 - okay which is this one you can just
54:42 - compile and run this program and it
54:45 - returns error because I forgot semicolon
54:48 - save your program and compile and run
54:52 - your program and it will give the sum of
54:55 - 23 and
54:57 - 45 right so it will just print sum is
55:01 - equal to whatever is the sum of these
55:03 - two values which is 68 like this
55:07 - okay now in the same way if you want to
55:10 - divide or subtract these two numbers so
55:13 - I want to subtract 23 by 45 we just do a
55:19 - minus B which will be a minus value
55:22 - right so I will just compile and run my
55:25 - program and this will not be uh sum but
55:29 - the substraction I forgot to change the
55:31 - variable name but the result will be the
55:35 - subtraction of these two numbers which
55:37 - is 22 right so you can just name the sum
55:41 - instead of sum when you are doing
55:43 - subtraction you can name it as
55:45 - subtraction for example now in order to
55:48 - uh get the multiplication you just
55:50 - change the variable name as
55:52 - multiplication and just use
55:55 - estx for the
55:58 - multiplication right so a estx b will
56:02 - give you the multiplication of these two
56:04 - numbers and here you can say is
56:10 - product product is equal to this uh
56:16 - multiplication okay and compile and run
56:19 - the program it will give the
56:20 - multiplication of these two
56:23 - numbers and and in the similar way if
56:27 - you want to divide two numbers this is
56:30 - interesting so this is the product of
56:32 - these two numbers and in order to divide
56:36 - two numbers let's say this is division
56:40 - variable and in order to divide these
56:42 - two numbers you just use forward slash
56:47 - right and let's take two simple numbers
56:50 - first of all for
56:52 - example um 8 and 2
56:56 - and I will just build and run this
56:59 - program and it will ideally give us 4
57:04 - because 8 divided 2 is
57:07 - 4 right so it gives us four as expected
57:13 - but whenever for example I have nine and
57:16 - I want to divide it by two and by the
57:20 - way this is uh integer values so let's
57:24 - change it to
57:25 - float if uh 9 / 2 is 4.5 so that's why
57:30 - we will save it in float variable
57:32 - compile and run the
57:35 - program and it will give
57:37 - us the value let's see what value it
57:40 - gives us first of
57:43 - all and it gives us
57:46 - zero because we haven't changed this
57:49 - thing modulus
57:53 - f
57:56 - and compile and run the program in my
57:59 - computer I don't know why it takes a
58:01 - little bit time to compile this program
58:03 - and it gives us four which is not
58:06 - expected because uh 9 / by 2 is
58:11 - 4.5 but what this forward slash symbol
58:15 - do is it'll give you the whole division
58:18 - for example uh 9 / 2 is first of all you
58:23 - will divide 9 by two then you will give
58:27 - four and it will leave the point value
58:31 - so0 five it will leave Always by using
58:34 - this you will always get the multiple so
58:38 - four or whenever you have 11 it will
58:42 - give you five and the remainder it will
58:44 - not give you okay and in order to get
58:47 - the remainder so 11 / 2 is uh 5.5
58:55 - and the when you divide by uh divide 11
58:59 - by 2 it'll you know fully div divided by
59:03 - five and it will give the remainder of
59:05 - one right so in order to get the
59:08 - remainder you use this modulus uh
59:14 - operator and let's change it to
59:18 - modulus modulus and modulus and try to
59:23 - run the program and it get it will give
59:25 - one okay so this modulus always gives
59:29 - you the remainder and this division
59:31 - always give you uh the whole multiple
59:35 - values so one and when you use this it
59:39 - will give you five because it will
59:42 - always skip division always skip the
59:44 - remainder and remainder only shows the
59:47 - remainder and nothing else so in this
59:50 - way you can do simple math in see there
59:53 - are other operators this in C also which
59:56 - I will show you in the further videos
60:00 - but these are the simple math operators
60:03 - which are called multiplicative and
60:04 - additive operators and c and you can do
60:08 - math with these
60:09 - operators and one more thing if you uh
60:13 - want to know what is uh the Precedence
60:16 - of these operators if you uh have seen
60:20 - in uh your schooling you have some like
60:25 - PD Moss or
60:28 - um something like
60:31 - MD as something right and P stands for
60:37 - parenthesis right so parenthesis it has
60:41 - the main priority then multiplication
60:44 - division and then addition and then
60:46 - subtraction so always follow this rule
60:49 - to do the math and you will be good to
60:52 - go hello guys welcome once again in this
60:55 - video I'm going to show you how to use
60:58 - if conditions and what are if conditions
61:01 - in C so as the name suggest if condition
61:06 - or if statements check the condition
61:10 - whether it's true or false and on the
61:13 - basis of the condition it executes some
61:17 - code or it will not execute some other
61:21 - code okay so how we can declare
61:25 - if condition now I will give you an
61:28 - example first for example we
61:31 - want that we want to check some person's
61:35 - age and if this age is equal to 18 we
61:40 - want to print that the age is 18 if this
61:44 - age is greater than 18 we want to print
61:47 - that the age is greater than 18 and if
61:50 - this age is smaller than 18 then also we
61:53 - want to print the that this age is
61:56 - smaller than 18 so how we can do this we
62:00 - can do this by if conditions now to uh
62:04 - write if condition the structure looks
62:07 - like this you need to use this if
62:10 - statement or if if keyword and then
62:14 - these two brackets and inside these two
62:17 - brackets comes
62:19 - your
62:21 - condition so this condition can be true
62:25 - or false so we evaluate our condition
62:28 - inside this bracket okay and then in
62:32 - these curly brackets we execute some
62:36 - code on the basis of the uh you know
62:41 - validity of this condition if this
62:43 - condition is true the code inside these
62:46 - curly braces will be ex executed
62:48 - otherwise this code will not be executed
62:52 - now let's see how we can uh
62:55 - check the age of some person now for
62:59 - taking the age from uh the user at
63:02 - runtime we use scan F and you know I
63:08 - have Al also you know shown that this
63:13 - scan F you can use to take the inputs
63:17 - from the user right so I will just tell
63:21 - the user first by printing this message
63:24 - that please enter the age and in using
63:27 - this scan F I will take this input and
63:30 - because this age is an integer I will
63:33 - use this modulus D to take the integer
63:38 - and then comma then the age okay but the
63:44 - correct way of using
63:46 - scanf with any value is to use this end
63:52 - symbol before your Val variable name and
63:56 - what this end symbol indicate is the
63:59 - address of this value okay so in
64:04 - somewhere in your computer memory your
64:08 - variable will be stored okay and
64:11 - whenever you write this end in your
64:14 - before your variable name it indicates
64:18 - that you're uh you're scanning the
64:22 - address of this variable okay so
64:26 - whenever some user will enter some value
64:29 - it will be stored at this address and we
64:33 - can access this uh age value after that
64:37 - so I whenever I will execute this
64:40 - program you will uh understand it better
64:44 - so it will take the input and depending
64:47 - upon the age the user has enter for
64:50 - example the age if the age is greater
64:55 - than
64:57 - 18 or 18 we will print that the age is
65:05 - so if the age is greater than 18 we are
65:07 - checking the some condition here this is
65:10 - our condition age age is greater than 18
65:13 - and in here we are going to print or
65:17 - execute some codes for example printing
65:19 - something that the
65:22 - age is
65:25 - greater than
65:28 - 18 greater than 18 okay now for example
65:34 - we want to check that if the age is
65:37 - equal to 18 then we can use some more if
65:42 - conditions so if the age is equal to 18
65:46 - now to uh calculate or to compare equal
65:50 - to we need to use double equals sign
65:55 - because when if you use single equal to
65:58 - sign it will assign 18 to age but we
66:02 - want to compare these two values uh and
66:05 - to compare these two values we use
66:07 - double equal to here okay now if the age
66:11 - is equal to 18 then we will print the
66:14 - age
66:17 - is equal to 18 okay equal to 18 and here
66:23 - greater
66:25 - then now for example we want to check if
66:28 - the age is less than 18 once again we
66:31 - can use this by if condition and this
66:34 - time we check if the age is less than
66:37 - and less than symbol is this one less
66:40 - than okay if the is is less than then
66:44 - just write
66:47 - less then okay so we are going to check
66:52 - these three conditions if this condition
66:55 - is true this will be executed if this
66:59 - condition is true this one if age is it
67:01 - equal to 18 then this will be uh
67:04 - executed otherwise if this condition is
67:07 - true then this code will be executed so
67:11 - th this is condition based code
67:14 - execution I will build the program and
67:17 - run the
67:19 - program and first of all we are going to
67:23 - see this message please enter the age
67:27 - and we are going to enter the age so it
67:29 - says please enter the age I'm going to
67:31 - enter the age for example I enter the
67:34 - age 21 21 is greater than 18 so we are
67:40 - expecting this message to be
67:42 - executed be and because these condition
67:47 - are not met match then
67:51 - these code or these print F messages
67:54 - will not be printed so let's see the
67:57 - output just write 21 and press enter and
68:02 - it says age is greater than 18 which is
68:06 - true age the age is greater than 18 so
68:10 - this condition is true that's why we can
68:13 - see this
68:14 - message and because this condition age
68:17 - is not equal to 18 21 is not equal to 18
68:21 - then this one is not executed and 21 is
68:25 - not less than 18 so this condition is
68:28 - not executed as well but 21 is greater
68:32 - than 18 so this condition is true and
68:35 - this message will be printed now let's
68:39 - try to run this program once
68:42 - again now this time we will uh enter 18
68:46 - okay and now this time we can see the
68:49 - message the age is equal to 18 okay so
68:53 - age is equal to 18 because 18 is equal
68:55 - to 18 this condition is true and this is
68:58 - printed and other conditions are not
69:01 - true so their code is not executed once
69:04 - again we enter the age 15 and the third
69:09 - condition is true this time age is less
69:11 - than 18 15 is less than 18 so it says
69:15 - the age is less than 18 which is this
69:19 - message so in this way you can use if
69:22 - conditions in
69:25 - C hello guys welcome once again in the
69:27 - last video I have shown you how to use
69:29 - if statement in C programming now in
69:32 - this video I'm going to show you how you
69:34 - can use IFL statement in C and how you
69:39 - even you can use uh nested IFL statement
69:43 - in C programming so uh in the last video
69:47 - I have given you an example that how you
69:50 - can check the age of the person whether
69:53 - it's greater than 18 or equal to 18 or
69:57 - it's uh less than 18 right now I'm going
70:00 - to take the same example to uh
70:03 - demonstrate if else statement so uh what
70:08 - I'm going to do is I'm going to delete
70:10 - this stuff and now for example we just
70:13 - want to
70:15 - check whether the age is greater than 18
70:21 - or it's not greater than 18 so we want
70:25 - to print if the great age is greater
70:27 - than 18 then we want to print the AG is
70:30 - greater than 18 otherwise we want to
70:33 - print that the age is not greater than
70:37 - 18 or age is less than 18 right so how
70:41 - we can do this we can do this uh either
70:45 - you can write uh some condition that the
70:50 - age is uh for example if condition
70:53 - condition and something like this from
70:56 - our last video but there is a condition
71:00 - called
71:02 - else which catches all the all the
71:06 - condition which is not true right so if
71:12 - age is not greater than 18 then the
71:16 - program goes to this else condition and
71:20 - this else as the name suggest that
71:24 - it indicates every other condition which
71:27 - is not satisfied by or if condition so
71:30 - if the age is not greater than 18 then
71:33 - it goes here in the lse statement so
71:36 - else after this bracket and then your
71:39 - curly bracket so else doesn't take any
71:42 - condition because it doesn't need to uh
71:45 - check any condition because
71:47 - it's everything other than this if
71:51 - condition right so in here we want to
71:54 - just write that the age
71:58 - is not greater than not greater than 18
72:04 - right and I'm going to compile and run
72:06 - my program and this will give me the
72:10 - answer so please enter the age I will
72:13 - write for example age which is greater
72:16 - than 18 which is 21 and I will press
72:19 - enter and it says me the age is greater
72:22 - than 18 now I'm going to rerun the
72:25 - program and this time I'm going to give
72:28 - 15 Which is less than 18 right and I
72:32 - will just press enter and it says the
72:35 - age is not greater than 18 that
72:38 - means this condition is checked and if
72:42 - this condition is not true your program
72:45 - goes to this else condition or the else
72:50 - condition of this if statement and this
72:53 - line line will be printed right so this
72:56 - is how you can use lse statement
72:58 - whatever which is not true in this
73:03 - condition or which is not satisfied by
73:05 - if condition will be cached by this else
73:09 - condition right now there are situations
73:14 - where you need to check multiple uh
73:17 - situations so for
73:20 - example you can uh just check multiple
73:26 - condition by if else statement so for
73:28 - example you want to check if the age is
73:30 - greater than 18 or if the age is equal
73:34 - to 18 then you want to print age is
73:36 - equal to 18 otherwise you want to print
73:39 - that age is not greater than or equal to
73:42 - 18 so you can just give
73:46 - the
73:47 - L's here and then if and as the as the
73:52 - name suggests test you can check the
73:56 - second condition using this uh LF
74:00 - statement right and it also takes uh
74:03 - this curly braces just provide these
74:06 - curly braces here and here this if
74:10 - because if
74:13 - it we are taking if condition here so we
74:17 - need to check other condition for
74:19 - example age is equal to 18 a
74:24 - is equal to 18 we are checking whether
74:27 - the age is equal to 18 if the age is
74:30 - equal to 18 we can just print age
74:34 - is equal
74:36 - [Music]
74:38 - to equal to 18 otherwise we will print
74:42 - print AG is not greater than 18 or AG is
74:46 - not greater than
74:52 - or
74:55 - equal to 18 so age is not greater than
74:59 - or equal to 18 right so we can check
75:03 - these conditions and this is called else
75:06 - if so we can check multiple conditions
75:10 - by using else if statement if else if
75:14 - and then otherwise if the condition is
75:17 - not true then this uh will be executed
75:20 - so what will be the program flow here
75:23 - the program will ask the age first to
75:26 - the user and it goes here and if this
75:30 - age entered by the user is greater than
75:32 - 18 then this will be printed and every
75:36 - other uh you know if condition will be
75:39 - ignored and this will uh not be executed
75:42 - this code and this code will not be
75:44 - executed otherwise if the age is not
75:47 - greater than 18 then it will go to this
75:51 - uh condition checking else if condition
75:53 - checking and your age if the age is
75:58 - equal to 18 then this will be printed
76:01 - and everything other then this will be
76:05 - skipped
76:07 - and all the other code will not be
76:09 - executed right otherwise if the age is
76:14 - not equal to 18 and if the age is not
76:16 - greater than 18 this code will be
76:19 - executed and in the same way you can use
76:22 - multiple
76:24 - if else conditions like
76:26 - this okay so it's not
76:29 - restricted that you only need to use one
76:32 - if else statement or else if if
76:35 - statement you can use multiple you know
76:37 - condition and you can check multiple
76:39 - conditions using IF else
76:42 - statement now for example you want uh to
76:47 - check whether uh you know this age is
76:51 - greater than 18 but it's it's less than
76:54 - uh 21 also how you can check it so if
76:59 - the age is greater than 18 we want to
77:02 - print this condition and inside this
77:05 - code we also want to check if the age is
77:08 - uh you know uh less than 21 so you can
77:11 - use nested if conditions like this so
77:15 - here inside your if condition which is
77:19 - this curly braces you can use if once
77:23 - again you can check the age is less
77:28 - than less than
77:31 - 21 you can
77:35 - print ages less than 21 okay so you can
77:40 - just print age is greater than 18
77:45 - but less
77:47 - then
77:49 - 21 okay and in the
77:53 - you know uh other case you can just
77:56 - write else here
77:59 - else and you can just provide other
78:04 - statement that if the age is greater
78:07 - than 18 but it's not less than 21 so but
78:13 - not less than 21 okay I will compile and
78:17 - run this program and this is called
78:19 - nested if else condition okay so because
78:23 - because you are using IF condition
78:26 - inside if Condition it's called nested
78:29 - if else uh statements okay so it's not
78:33 - necessary that you cannot uh use if
78:36 - condition inside if condition you can
78:39 - use multiple if condition to check
78:41 - multiple conditions in C right run the
78:45 - program and for example I give the age
78:49 - 26 which is greater than 18 but it's not
78:52 - not less than 21 so ideally we will see
78:57 - this message the age is greater than 18
78:59 - but not less than 21 press enter and it
79:02 - says the age is greater than 18 which is
79:06 - this statement which is due to this
79:07 - statement the age is greater than 18 now
79:11 - it goes here and it sees that 26 is not
79:14 - less than 21 so it goes to the else
79:16 - condition and it will print this the age
79:18 - is greater than 18 but not less than 21
79:22 - and it's printed it here the age is
79:25 - greater than 18 but not less than
79:27 - 21
79:29 - otherwise I will run this this program
79:32 - and uh let's delete or not delete but
79:36 - let's provide this uh line break
79:40 - here so that this will be the change in
79:44 - the line and this time we provide 20 as
79:47 - the age and it says that the age is
79:51 - greater than 18 but but the age is also
79:54 - less than 21 right so in this way you
80:00 - can uh just check whether this age is uh
80:06 - you know multiple condition you can
80:08 - check it from here right so this is how
80:11 - you can use IFL statement and nested IFL
80:15 - statement in C this is called nested if
80:18 - inside your IFL statement and this is
80:21 - called Els if statement and this is
80:23 - called else statement in if
80:28 - statements hello guys welcome once again
80:30 - in the last two videos I have been
80:31 - showing you how to use if else
80:34 - conditions in C now in this video I'm
80:37 - going to uh teach you about the Turner
80:41 - or conditional operator in
80:43 - C uh this is also uh used to make
80:47 - decisions in C but uh whenever you want
80:52 - to make uh a decision which is you know
80:57 - very short and uh you want to do it in a
81:00 - single line uh this tary conditional
81:03 - operator can be useful now how to use
81:07 - this Turner conditional operator so for
81:11 - example I have two integer variables
81:15 - integer a is equal to for example 10
81:19 - here or 19 or an integer
81:23 - is equal to 20 for example okay now I
81:29 - want to compare these two uh
81:32 - integers I can do it with the help of if
81:36 - conditions but for comparing uh and
81:39 - writing if and then else this can be a
81:44 - little bit uh longer expression in terms
81:47 - of code in to compare these two the
81:50 - shorter form of comparing these two uh
81:55 - integers can be for example I can
81:58 - declare integer C and I want to transfer
82:02 - the
82:04 - greater of these two values A and B
82:07 - which is B to C so I want to compare A
82:11 - and B and whatever uh variable is
82:15 - greater or whatever values value uh is
82:20 - greater than we want to transfer this
82:23 - value to C okay so there is a operator
82:29 - called Turner operator which is like
82:33 - this it's used like this so you have
82:37 - this bracket and in this bracket you uh
82:41 - just write your condition as you write
82:44 - in the if condition and then you give a
82:48 - small question mark here and then if the
82:51 - condition is true
82:53 - you can uh transfer or pass the value
82:59 - to your result from here otherwise if
83:04 - the value is false then the value which
83:07 - is contained after this colon will be
83:09 - transferred to your uh value or will be
83:13 - returned so I will give you an example
83:16 - what I mean by this so for example I
83:21 - want to have uh C is equal to the
83:25 - greater of these from these two values A
83:28 - and B so I will compare these two values
83:31 - like this if
83:35 - a is greater
83:38 - than b which is not greater than b
83:43 - obviously then I'm asking uh C so I will
83:47 - give this question mark and then if a is
83:50 - greater than b I want to
83:55 - return for example a okay or if a is
84:00 - greater than B I want to return B
84:04 - otherwise a so if a is greater than B I
84:08 - will
84:09 - return uh B which is like this or else I
84:15 - will return a okay so this will be uh
84:20 - executed by C like
84:23 - this this bracket will compare the
84:26 - condition if a is greater than b
84:29 - obviously a in our condition a is not
84:31 - greater than b because 19 is not greater
84:34 - than 20 then it will return b b is which
84:40 - is 20 right otherwise if the value of a
84:45 - is greater than b then it will once
84:49 - again return B right right so in our
84:53 - condition what will happen a is greater
84:56 - than b which is not true then this
85:00 - condition will be return a is return if
85:03 - the condition is fulfilled the first uh
85:06 - parameter is return if the condition is
85:10 - false then the second parameter will be
85:13 - return so the value of C in our case
85:17 - will
85:19 - be what will be the value
85:22 - a will be the value 19 right so we can
85:26 - print this
85:28 - value print
85:30 - F and then in the double
85:34 - quote uh answer for example answer is
85:38 - equal to percentage
85:41 - D
85:42 - comma value of C we want to print value
85:46 - of C right I will compile and run this
85:50 - program and let let's see what will be
85:53 - the answer I forgot the semicolon here
85:56 - so once again compile and run the
85:59 - program and the answer here is
86:03 - 19 because a is not greater than b then
86:08 - it'll return the second argument because
86:11 - our condition is false so it will return
86:14 - the second argument if the condition is
86:16 - true it will return the first argument
86:19 - so in our case the condition is false
86:22 - because a is not greater than b then it
86:24 - will return the second parameter which
86:28 - is a which is 19 now for example the
86:32 - value of a changes to
86:34 - 25 what will happen now our condition is
86:38 - true 25 is greater than 20 then it will
86:43 - be returned like this B will be returned
86:48 - because the condition is
86:50 - fulfilled and we have seen that if the
86:52 - condition is fulfilled then the first
86:56 - parameter will be returned right so when
87:00 - I compile and run the
87:03 - program it will return 20 right because
87:07 - the value of B is 20 okay so in this way
87:12 - you can uh use this Turner conditional
87:16 - operator in C now you may ask what uh is
87:21 - the performance difference between this
87:23 - stary operator and if else condition
87:26 - because you can also write if else
87:29 - condition to compare A and B right so
87:33 - there is uh there are arguments about
87:36 - the performance some says uh the
87:38 - performance of Turner operator is faster
87:42 - than uh F's condition but the benefit of
87:47 - this Turner operator is if you want to
87:51 - uh write your code in one line because
87:56 - if you would have uh used if condition
88:00 - you would have written at least four or
88:02 - five line but this is simple uh looking
88:06 - and it's it's serving your purpose and
88:10 - it will not even killing your
88:13 - performance right so it's um more you
88:17 - know visibly uh good and you can you
88:22 - know directly by seeing this you can say
88:25 - what uh you the programmer wants to
88:28 - write rather than uh writing those long
88:32 - if else condition so always if you want
88:36 - to uh compare two values and you have
88:39 - only if or else condition then you can
88:44 - replace it by this tary conditional
88:47 - operator so I hope you have understood
88:50 - the this basic concept of of erary
88:52 - conditional operator in C hello guys
88:56 - welcome to the next video on C
88:58 - programming for beginners and in this
89:00 - video I'm going to show you how you can
89:02 - use switch statement in C now in the
89:05 - last two videos I've been showing you
89:07 - how to use f Els conditions and multiple
89:10 - FS conditions in C and switch statements
89:14 - are also condition based statements but
89:18 - they are little uh different in the
89:20 - sense that that uh you can
89:25 - use conditions with uh switch statement
89:29 - but conditions M must be constant
89:33 - conditions so let me give you an example
89:36 - and then you will understand how uh
89:39 - switch statement Works in C so first of
89:43 - all we will see how switch statements
89:47 - are declared in C okay so the basic B
89:52 - syntax of switch statements is like this
89:55 - okay so I will just delete this for now
90:00 - and so that you can you know see what is
90:04 - the basic uh switch statement uh code so
90:09 - switch statement start from this switch
90:13 - keyword and then comes these two
90:15 - brackets and in here comes the
90:18 - expression expression is something which
90:21 - you want to you know validate on the
90:24 - basis of some case right now inside
90:29 - these two curly braces comes some cases
90:34 - so case and then some constant
90:37 - expression I will give you an example uh
90:40 - this is just the syntax I want to show
90:43 - you
90:44 - so case and then comes some condition or
90:48 - constant expression right and then Comes
90:52 - This colon and
90:54 - inside or down uh under this uh case
91:00 - comes the statement or the code which
91:03 - you want to execute here right now after
91:07 - this code is executed you break this
91:11 - switch statement with this break keyword
91:16 - so this is an optional uh
91:20 - keyword sometimes you don't need this
91:22 - break sometimes you need uh this break
91:24 - and I will tell you where exactly you
91:28 - need this break and where you don't need
91:30 - this break right in the same way you can
91:33 - have multiple cases inside your switch
91:37 - conditions and whenever you
91:41 - know whatever condition is not covered
91:45 - by your case is covered by this default
91:49 - so if none of the case is uh true this
91:54 - will be executed which is a default case
91:58 - so default case starts with this keyword
92:01 - default colon and then your case now
92:06 - let's see an example and then we will be
92:10 - able to understand it much better so for
92:14 - example uh we want to calculate the
92:17 - grade of a student and on the basis of
92:21 - grade we want to give some message or
92:24 - print some message for example
92:28 - int and let's say student scores some
92:32 - marks so I will name my variable as
92:36 - marks and on the basis of marks you want
92:40 - to decide if the student uh is excellent
92:45 - or whatever good or very good or he has
92:50 - coded poor grades okay so now we use
92:55 - switch
92:58 - statement switch and I told you then
93:02 - comes then an expression and this
93:05 - expression will be our Mark Mark
93:10 - because uh on the basis of this Mark we
93:14 - are going to
93:15 - evaluate uh some cases and on the basis
93:18 - of cases we will execute some code but
93:21 - first first of all let's assign some
93:23 - value to mark for
93:25 - example uh
93:27 - 90% of Mark or at or whatever you want
93:31 - to decide right now Mark is our
93:35 - expression which we will evaluate the
93:38 - value of Mark we will evaluate and then
93:41 - comes these two curly braces and inside
93:45 - these curly braces comes the case right
93:48 - case and then your uh
93:52 - mark value so different value of Mark we
93:56 - can evaluate right now Mark is equal to
93:58 - 90 but for example Mark can be 80 or 70
94:03 - or 60 or whatever right so for example
94:06 - Mark is uh equal to
94:11 - 90 then we want to
94:14 - print
94:17 - print print F and we want to print this
94:21 - is an excellent grd
94:28 - right excellent okay and then the same
94:33 - semicolon and then we will
94:38 - break okay now comes the second case for
94:43 - example the in the in this case we want
94:46 - to evaluate Mark is equal to 80 right
94:51 - and and let me give some indents
94:57 - here and when grade is 80 or for example
95:02 - 75 we'll say that he has
95:07 - scored very good grade for example okay
95:11 - so we will
95:13 - print instead of excellent we will
95:17 - print very good okay
95:22 - in the similar way uh you can just add
95:25 - break
95:27 - here and break is nothing but a keyword
95:31 - which breaks uh this switch case and I
95:34 - will explain you what it does but let me
95:37 - add two more
95:39 - conditions and these two conditions will
95:43 - be first is uh 60% of marks and then we
95:48 - will say good the grades are good or we
95:54 - will say 50% of marks and or 40% of Mark
96:01 - and we will say grades
96:03 - are okay or poor or whatever the this is
96:07 - just an example or
96:11 - otherwise we will say if the grades are
96:14 - not 90 or 75 or 60 or uh 40 that can be
96:19 - gr which uh is not covered by these
96:23 - cases then we will have the default
96:27 - case default and this case covers any
96:31 - value other than covered by these cases
96:35 - right so we will
96:42 - print
96:45 - grade
96:50 - un
96:52 - a available
96:55 - okay so let's uh you know run this
96:59 - program and let's see uh how it works
97:03 - okay so I will just compile and run this
97:06 - program and it says excellent right and
97:11 - that's what it must do
97:15 - because you see marks is equal to 90 so
97:19 - it assigns
97:21 - uh Mark is equal to 90 right and then we
97:24 - are checking the value of 90 using this
97:28 - switch statement and because Mark is 90
97:32 - it goes to this case case where Mark is
97:35 - equal to 90 then it prints this message
97:39 - and what this break does is it if if the
97:43 - case is fulfilled then we want to break
97:46 - out of this switch statement and we won
97:49 - don't want to execute any other uh
97:52 - statement other than whatever is
97:55 - fulfilling our case right so it prints
97:58 - excellent and it breaks out of the
98:00 - switch statement and whenever your C
98:04 - program sees this break statement it
98:07 - jumps out of your switch case right at
98:10 - the end of the switch case okay now for
98:15 - example our marks are
98:19 - 75 then
98:22 - let's see what's the answer or what what
98:25 - it prints it prints very good which is
98:28 - true right so in the case of 75 it Mark
98:33 - is equal to 75 and it s it uh search for
98:37 - the case for 75 it's if the case 75 is
98:41 - present it will print your uh value or
98:45 - it will execute whatever code you will
98:47 - write here and then it will see uh this
98:50 - break keyword and it jumps out of the
98:53 - switch statement but the important thing
98:58 - here is the case 90 is not executed
99:01 - because the code inside this case 90 is
99:04 - not executed because the case is not uh
99:08 - 90 marks Mark is 75 the value of Mark we
99:12 - are checking right so value of Mark is
99:15 - not 90 value of Mark is not 60 value of
99:18 - not Mark is not 40 but value of Mark
99:21 - right now is uh 75 that's why we have
99:26 - executed this code or C has executed
99:30 - this code but other codes are not
99:34 - executed okay so on the basis of these
99:38 - cases you can Define multiple cases and
99:41 - whatever case is fulfilled at a time
99:45 - that code will be executed or code
99:49 - inside that case will be executed
99:51 - otherwise code will not be executed okay
99:56 - now you may ask uh that this code can be
100:02 - 95 also and then also the student has
100:06 - scored uh excellent marks right so in
100:11 - order to do this for example for
100:13 - covering 95 grade or other grades for
100:18 - example like
100:19 - this and if the grade is
100:23 - 95 still we want to print this uh
100:26 - excellent grade so what you do you just
100:31 - use case 95 and you
100:35 - don't execute any code inside this case
100:39 - and you don't give any break here so
100:42 - this means whenever you give a case
100:45 - without any code and without any break
100:48 - here it this means that this and
100:52 - this are the conditions which are
100:56 - covered
100:57 - and if either of those conditions are
101:01 - fulfilled then this code will be
101:04 - executed okay so if the Mark is equal to
101:08 - 95 it sees here that case 95 and it
101:13 - jumps to the next case and it's uh
101:18 - because it's not breaking anywhere so it
101:21 - jumps to the next case right if there
101:24 - will be a break
101:27 - here this kind of break keyword and it
101:30 - jumps out out of your switch code but
101:33 - because we are not giving here this
101:36 - break it jumps to the next condition and
101:39 - executes the next statement which is
101:42 - print excellent so let's see what it
101:45 - happens when grades are
101:47 - 95 and we will compile our code and it
101:50 - says excellent and this is what we were
101:53 - expecting
101:55 - because there is no break inside this
101:59 - case 95 so it jumps to the next case uh
102:04 - in the series of cases but in this same
102:09 - way you can provide same cases for for
102:13 - example
102:15 - 97 or even
102:18 - 85 you can do 85
102:23 - here
102:25 - 85 and all those four cases will covered
102:29 - or will be covered by this statement
102:34 - okay in a similar way whenever you want
102:37 - to have a very good uh grade you can
102:42 - cover 70 or 75 also so 70 or 75 without
102:50 - giving this break keyword break keyword
102:53 - break your statement and go out of your
102:56 - statement okay for example grade is
103:00 - right now
103:02 - 75
103:04 - 75 and we will compile and run the
103:06 - program it says very good right so you
103:10 - can cover different cases and execute a
103:14 - same
103:15 - statement using or without using this
103:19 - break uh key keyword okay so this is how
103:23 - you uh use switch cases in C programming
103:27 - I hope you have understood the basic
103:29 - concept of switch
103:31 - cases hello guys welcome to the next
103:33 - video tutorial on C programming for
103:35 - beginners and in this video we are going
103:38 - to see how we can use Loops in C and we
103:43 - will start with while loop how to use
103:46 - while loop in C
103:48 - programming now first of all what are
103:51 - while Loops so or even uh you may be
103:55 - wondering what are even Loops in C now
103:59 - as the name suggest loop loop is a piece
104:04 - of uh code which will execute again and
104:09 - again and again until and unless some
104:12 - condition is true okay now for example
104:17 - we want to print the values of of
104:20 - integer from uh 0 to 10 and we don't
104:25 - want to use print F again and again to
104:29 - print uh you know print one print two or
104:32 - print F1 print F2 print F3 instead of
104:36 - that we want just want to use one line
104:39 - of uh code print F and we want to print
104:43 - from 0 to
104:45 - 10 uh using the single line of uh code
104:50 - which is print F we can do it by using Y
104:54 - Loop okay so a loop is uh something
105:00 - which executes your code again and again
105:03 - and again until and unless some
105:06 - condition is true now how to use while
105:10 - loop so let's uh use the same example uh
105:15 - to print 10 numbers so I will declare
105:19 - int I is equal to 0 as my variable and
105:25 - then I want to
105:27 - print number or integers from 0 to 10 or
105:31 - 0 to 9 itself
105:35 - so while I can use while loop by this uh
105:40 - keyword while and then comes your
105:44 - condition and then comes your curly
105:46 - braces and inside those curly braces
105:49 - comes your condition so inside our y
105:54 - Loop we want to print uh the integer 10
105:58 - times right so print F and then we will
106:06 - say
106:08 - value of I is equal to percentage d
106:14 - right comma I okay and in this uh in
106:22 - these brackets comes your condition okay
106:26 - so we will check whether I is less than
106:32 - less than 10 if I is less than 10 then
106:36 - we want to uh execute this code okay and
106:41 - if this I whenever it goes greater than
106:46 - 10 or like this we want to uh go go out
106:50 - of this Loop okay so this is or this
106:55 - bracket of while is evaluating our
106:59 - condition okay now we will just give the
107:03 - semicolon to our code and then we will
107:05 - increment the value of I like this I is
107:09 - equal to I + 1 okay this expression I
107:15 - equal to I + 1 you can write in short by
107:20 - writing
107:20 - I
107:21 - ++ okay so there are two ways of
107:25 - incrementing the value of I like this
107:28 - IAL to I + 1 or you can do I ++ it's
107:32 - same as I equal to I + 1 so we will use
107:36 - i++ for now
107:39 - okay and then let's uh try to compile
107:43 - our code so what it's doing it's
107:47 - checking this condition if this
107:50 - condition is true it will print this but
107:54 - because I will never be true because
107:58 - first of all I is equ equal to Z and
108:01 - this condition in this case what I have
108:03 - written will never be true I is equal to
108:06 - 0 which is not greater than 10 then this
108:11 - Loop will never be executed while why
108:16 - because this condition is uh not true at
108:19 - the first first place so this code will
108:22 - not execute okay so let's see what
108:25 - happens when we compile and run the
108:28 - code and nothing happens and this is
108:31 - what we were expecting but when we
108:35 - check I is less than 10
108:40 - then because the value of I is equal to
108:43 - zero it goes to uh this while and it
108:47 - goes to check this condition whether
108:49 - zero is l less than 10 and it will say
108:52 - yes 0 is less than 10 then execute this
108:55 - code which will print 0 and then
108:58 - increment the value of I by 1 which is 0
109:01 - + 1 is equal to 1 and then it will do it
109:05 - again and again until this condition is
109:09 - met so let's try compile and run the
109:13 - program and we can see the value of I is
109:17 - equal to 0 value of I is equal to 1 but
109:19 - I forgot
109:20 - to give the line break so we will give
109:24 - this line break from
109:26 - here and then once again we will run the
109:34 - code like this so it has printed value
109:38 - of I is equal to 0 in the starting and
109:41 - then value of I is equal to 1 then value
109:44 - of I is equal to 2 3 4 until I is equal
109:49 - to 9 okay so what's happening
109:54 - here at the first place the value of I
109:58 - we have declared it as zero so it goes
110:01 - to a while loop and it checks this
110:04 - condition that 0 is less than 10 so it
110:09 - goes inside this Loop because the
110:12 - condition is true and it prints this
110:15 - message value this should be value of I
110:19 - is equal to whatever the value of I I is
110:23 - Zer right now so it will print I is
110:25 - equal to 0 and then we are increasing
110:28 - the value of I by 1 right I ++ is equal
110:32 - to I is equal to I + 1 so now the value
110:35 - of I becomes one and it goes once again
110:39 - to check this condition whether I is
110:41 - less than 10 so I the value of I is
110:44 - equal to 1 Which is less than 10 once
110:47 - again it will print value of u i is
110:49 - equal to 1 and increment the value of I
110:53 - by one which is two once again it goes
110:56 - again and again until unless I becomes
111:00 - 10
111:01 - here so when I becomes 10 here it will
111:05 - go here and C 10 is not less than 10 so
111:09 - it will not print any code here because
111:13 - this condition is not true and then it
111:16 - goes out of the loop so this is what
111:19 - happening in this code right so once
111:22 - again run this
111:24 - code and it will run uh and it will
111:29 - print 0 to 9 now for example you want to
111:32 - print until 10 we can just write if I is
111:36 - less than or equal to
111:39 - 10 then print this code so this
111:43 - expression is I is less than or equal to
111:47 - 10 okay so run the program and now this
111:52 - prints from 0 to 10 okay so once again a
111:58 - loop is something which iterates or
112:04 - executes your code again and again until
112:07 - and unless some condition is true so in
112:10 - in this in the case of while loop the
112:13 - condition is this thing we have
112:16 - provided and it will execute again and
112:20 - again until and unless this condition is
112:23 - met hello guys welcome once again in the
112:26 - last video I've shown you how you can
112:28 - use Loops in C and I have shown you how
112:34 - you can use while loop in C now in this
112:38 - video we are going to see how we can use
112:41 - do while loop which is uh one more kind
112:44 - of loop and what is the difference
112:48 - between a dowi loop and while loop okay
112:52 - so let's uh uh assume that we want to uh
112:58 - execute uh the number or integers from 0
113:01 - to 10 as we have done in the last video
113:05 - but this time we want to do it with the
113:08 - do while loop okay so this was the code
113:11 - we have written in the last video which
113:14 - I'm going to comment because uh later in
113:17 - the video we will see how how or what is
113:21 - the difference between do while loop and
113:22 - while loop so let's see what is the
113:25 - syntax of do while loop first so you
113:29 - just write a keyword do and then gives
113:33 - give this semicolon and after the
113:36 - semicolon at the end of your curly
113:39 - braces uh this is not semicolon this is
113:41 - Curly braces sorry and at the end of
113:44 - your curly brace you just
113:47 - write
113:48 - while should be while and then you give
113:53 - your condition okay
113:56 - so keyword do and then curly brace then
113:59 - while then your condition now once again
114:03 - for example we want to print uh values
114:06 - of integer from uh 0 to 10 I'm going to
114:10 - copy this code in here and it will print
114:14 - the value 0 to 10 and the condition will
114:18 - be same as earlier which is while I is
114:22 - less than or equal to 10 okay and I will
114:26 - just compile this program and run the
114:28 - program and it prints the value 0 1 2 3
114:31 - 4 up to 10 right and in here what's
114:35 - happening
114:36 - is first of all your uh I is equal to
114:41 - zero and it says do do means do
114:45 - something
114:47 - so before checking any condition
114:49 - condition your statement will be
114:53 - executed which is this one so it prints
114:55 - I is equal to 0 and then it increases I
114:59 - by 1 and now our value of I is 1 Which
115:02 - is less than 10 right so it it goes in
115:07 - the loop once again and it prints I is
115:09 - equal to 1 and in here it increases the
115:12 - value of I by one once again so I is
115:15 - equal to 2 this time then 2 is less than
115:19 - or equal to 10 which is true once again
115:22 - it will go in this Loop until I is equal
115:26 - to 10 now I is equal to 10 this will be
115:32 - true and it this will be printed but now
115:37 - when the I value of I becomes 11 this is
115:41 - uh false this condition is false and as
115:44 - soon as this condition is false it goes
115:47 - out of the loop okay
115:51 - so what is the difference between uh
115:54 - this do while loop and while loop the
115:57 - difference
115:59 - is while whenever we use while loop it
116:04 - checks the condition first and then
116:07 - executes your code but in the do while
116:10 - loop it executes your code at least once
116:15 - and then checks your condition and if
116:18 - this condition is true
116:20 - it will once again go into the statement
116:23 - here and it will execute a statement and
116:27 - as soon as this statement is false it
116:29 - goes out of the loop okay so
116:34 - do uh loop or do while loop executes
116:38 - your code at least once without checking
116:41 - the condition but while loop checks the
116:46 - condition first and then executes the
116:48 - code
116:50 - now uh let's see what is the basic
116:54 - difference here so for example I will
116:56 - just
116:57 - give the separator or I will print some
117:02 - separator here so that we know
117:06 - that the code above the the the star
117:10 - line is for dowi Loop and code below the
117:14 - star line is for y Loop
117:17 - right and I will compile
117:20 - this
117:24 - program and everything is fine it prints
117:28 - from 0 to 10 which is
117:32 - okay and because value of I is the same
117:37 - here right so here value of I will be 10
117:40 - once again so what we are going to do is
117:44 - here we will
117:46 - take instead of I we will take variable
117:50 - J in y Loop so J here I will replace J
117:54 - here and J value of J is equal to J
118:00 - j++
118:02 - right why I have done that because the
118:05 - value of otherwise the value of I will
118:08 - be same for this and this and we will
118:11 - never find the difference between the
118:13 - two Loops once again I will run the
118:17 - program and it
118:20 - prints this
118:22 - value I forgot J here so I must give J
118:27 - here also and once again I will compile
118:29 - the
118:31 - code and now you can see it prints
118:36 - the value of uh first of all I and then
118:41 - it prints the value of J okay so it
118:45 - starts from zero I will just make it
118:47 - bigger so that we can see all the values
118:50 - so the value of I starts from 0 up to 10
118:54 - and value of J starts from 0 up to 10 my
118:58 - battery is going so I must hurry up I
119:01 - think
119:04 - so right so value of I starts from 0 to
119:08 - 10 and the value of J starts from 0 to
119:11 - 10 now let's see the difference here now
119:14 - for example I will give some condition
119:18 - which is not true
119:19 - okay so for example I'm checking whether
119:23 - I is greater than
119:26 - 10 which is not true because value of I
119:29 - is 0er 0 is not greater than 10 right
119:33 - and in this case also value of J is
119:36 - greater than 10 we are checking which is
119:39 - false because value of J is zero which
119:43 - is not greater than 10 J is not greater
119:46 - than 10 what happens here run the the
119:50 - code and we see that value of I is equal
119:54 - to zero which is it prints value of I is
120:00 - equal to zero and then it increments the
120:03 - value of I by one so I becomes 1 1 is
120:07 - not greater than 10 so it goes out of
120:10 - the loop so what we have seen that do
120:15 - Loop performs your statement at least
120:18 - once
120:19 - and then checks the condition but in the
120:22 - case of Y Loop here J is equal to 0 0 is
120:27 - not greater than 10 so nothing is
120:30 - executed from this while loop okay so
120:34 - nothing is printed here so this is the
120:37 - difference between while loop and do
120:39 - while loop so always remember whenever
120:42 - you want to execute your code at least
120:44 - once use do while loop and whenever you
120:49 - want to uh check the condition first and
120:52 - then execute your code then use while
120:55 - loop so I hope you have uh understood
120:58 - the basic concept of do while loop and
121:01 - difference between do while loop and
121:02 - while loop hello guys welcome to the
121:05 - next video tutorial on C programming for
121:08 - beginners in the last two videos we have
121:10 - seen how a loop Works in a c and we have
121:15 - learned how to use while loop and do
121:18 - while loop Loop in C now in this video
121:22 - we are going to learn how to use for
121:25 - Loop in C so for Loop is also a kind of
121:29 - loop which depends upon uh the
121:33 - initialization condition and the
121:36 - increment uh property so let's see what
121:39 - is the basic structure of for Loop and
121:42 - then we will take an example and see how
121:46 - it works so the basic structure strcture
121:49 - of for Loop looks like
121:51 - this and this structure starts with a
121:55 - keyword for and then comes these
122:01 - brackets and in these bracket comes
122:05 - three uh
122:07 - arguments and these arguments are
122:10 - separated by these
122:12 - semicolon okay so this is these are the
122:16 - semicolons and these are three different
122:21 - parameters and then comes these two
122:23 - curly braces and if the condition in
122:28 - this for Loop is true then this code
122:32 - inside your for Loop will be
122:35 - executed now first parameter in this
122:38 - fall Loop is called inited or
122:40 - initialization of something second
122:44 - parameter checks whether some condition
122:48 - is true or not which is related to
122:52 - initialization and then the third
122:54 - parameter is the increment of uh the
122:57 - parameter which you have
122:59 - initialized in the first uh
123:02 - parameter so this is the basic uh
123:06 - structure of for Loop now let's take the
123:09 - same example which we have been seeing
123:13 - in the last uh two videos just
123:17 - printing 0 to 10
123:19 - as an integer so I will just uh declare
123:23 - a variable which is equal to
123:26 - Z and on the basis of this variable I
123:30 - want to print 10 but in the last video I
123:35 - have shown you that you need to declare
123:37 - this first of all initialize it and then
123:41 - you need to give the while loop and then
123:44 - check the condition and then
123:47 - increment but in the for Loop it uh it's
123:51 - done automatically and you don't need to
123:53 - initialize uh anything separately but
123:56 - what we will do is we'll just start with
123:59 - four and then with a bracket and inside
124:03 - this bracket I told you first parameter
124:06 - is the initialization so initialization
124:09 - you can do it like this in
124:12 - I and then I is equal to0 right it's
124:17 - just like declar ing a variable
124:21 - in a is equal to 0 like this okay so in
124:26 - Fall Loop we don't need to do this kind
124:29 - of initialization separately but we can
124:32 - do it inside the for Loop okay now comes
124:36 - the semicolon and then comes the
124:38 - condition so as we have seen in the last
124:41 - two videos that in y Loop and doy Loop
124:45 - we check some condition to fulfill and
124:48 - if this condition is fulfilled then we
124:52 - execute the code so in this uh for Lo we
124:56 - are checking if I
124:59 - is less than 10 okay so we are checking
125:06 - this condition if the I value of I is
125:08 - less than 10 because we have initialized
125:12 - I with zero I value of I will be uh you
125:16 - know replaced here and it will check
125:20 - first of all 0 is 0 is less than 10
125:23 - which is true and it will keep on going
125:26 - uh like this until and unless the
125:29 - condition is met now the third parameter
125:32 - is incrementing the values like this I
125:36 - ++ and in the previous videos I have
125:40 - told you I ++ just means I for example I
125:46 - is equal to I
125:49 - plus 1 it's just like this I in
125:54 - short whenever you want to increment the
125:57 - value of uh any variable you just write
126:00 - I ++ like this okay now comes your curly
126:06 - braces so what we have done in our for
126:08 - Loop we have
126:10 - initialized uh a variable and then we
126:13 - are checking on the basis of that
126:15 - variable if some condition is true and
126:18 - and we are incrementing the variable
126:21 - which we have initialized now we just
126:24 - need to uh do whatever we want to do
126:28 - inside our for Loop for example we want
126:32 - to print so we just write print F and
126:36 - then we can
126:38 - write
126:40 - the value
126:42 - of I is equal to percentage d
126:49 - right and then comma
126:54 - I and don't forget this uh semicolon
126:58 - here and this should be value okay so
127:03 - the for Loop takes care of your
127:05 - initialization condition and increment
127:08 - and then you can you know do whatever
127:12 - you want to do inside your Loop and this
127:14 - Loop will print the value of uh I from 0
127:19 - to 10 and it's incrementing it also now
127:23 - let's first uh run our program and let's
127:25 - see what's the
127:27 - result and first of all what's it's
127:31 - saying some error it's showing so I will
127:34 - see what's the error and the error is
127:37 - for Loop initial declaration are only
127:40 - allowed in uh here okay so what will we
127:47 - will do here
127:49 - so if you see this error which says that
127:53 - for for Loop initial declaration are
127:57 - only allowed in c99 mode then you have
128:03 - c99 which is a newer version of C is not
128:07 - enabled in your IDE especially in code
128:11 - blocks so to enable this c99 in your uh
128:16 - code blocks you just need to go to your
128:18 - project so just right click your project
128:22 - here or you can just go to the settings
128:25 - here so I will prefer to go to my
128:27 - project and right click my project and I
128:30 - will go to the build or or the
128:33 - properties here the last option so go to
128:36 - the last option called
128:38 - properties and in here go to project
128:42 - build option so click this project
128:45 - builds
128:47 - option and and in here it will open
128:49 - product build option and in here you
128:53 - will be able to see compiler flags and
128:55 - there is a tab called other options okay
129:00 - in other options you just need to type
129:02 - this minus STD is equal to
129:06 - c99 okay so just type this minus STD is
129:10 - equal to
129:12 - c99 and just click okay click okay and I
129:17 - will just
129:18 - uh paste it here so you can see uh it
129:22 - better it's minus STD c99 okay now when
129:28 - I compile this program and run this it
129:31 - runs right and I should
129:36 - give this line break here so we can see
129:40 - the output and now we can see from 0 to
129:45 - 9 the value of I is printed and how it's
129:49 - working so initially we initialize the
129:52 - value of I is equal to0 and then C
129:56 - checks this condition if the value of I
129:59 - which is initially zero is less than 10
130:02 - or not if it's less than 10 then it goes
130:06 - here and executes your code first and
130:10 - then after your code execution just
130:14 - above this curly braces ending it
130:17 - increases is the value of I so then
130:21 - before the value of I was Zero now it
130:24 - becomes one and then once again it
130:27 - checks whether this condition is true 1
130:30 - is less than 10 which is not true it
130:32 - prints the value of I and then
130:35 - increments the value of I just before
130:38 - here so I becomes two and it goes and
130:41 - goes and goes until and unless this
130:44 - condition becomes false and then it goes
130:49 - out of the loop okay so once again it
130:52 - prints from 0 to 9 and if you want to
130:56 - print uh 0 to 10 just add equal to after
131:01 - your greater than or less than sign okay
131:06 - so there is a simple rule here is always
131:11 - use equal to after you're greater than
131:14 - or uh smaller than this symbol okay
131:19 - and once again when you run the program
131:21 - it prints from 0 to
131:23 - 10 hello guys welcome to the next video
131:26 - tutorial on C programming for beginners
131:28 - and in this video I'm going to show you
131:30 - how you can use function in C and what
131:34 - is a function so first of all what is a
131:38 - function a function is a piece of code
131:42 - or a block of code which we can use to
131:46 - perform a particular Tas task for
131:49 - example adding two numbers you may uh
131:54 - wish to add two numbers uh multiple
131:57 - times in your program and you can define
132:00 - a function for this to add uh two
132:04 - numbers and you can use your function
132:07 - again and again uh or you can call your
132:10 - function again and again inside uh any
132:13 - other function so let's
132:16 - see how we can C function but first of
132:20 - all I must uh say
132:24 - that every C program has at least one
132:29 - function and this function is called
132:32 - main right in the starting of this
132:35 - series I have told you that this main is
132:38 - a function okay and every program has at
132:43 - least one function and this function is
132:46 - called Main and and whenever you execute
132:49 - your program C uh searches for this main
132:53 - function and execute uh whatever inside
132:57 - this so function
133:01 - uh more or less looks like this itself
133:04 - it has a return type it has the name of
133:08 - the function uh this is a inbuilt name
133:10 - in C which is main but you can Define uh
133:14 - user defined function and give it any
133:17 - name and then comes these bracket and
133:20 - then curly braces so let's see how what
133:24 - is uh the definition or Declaration of
133:28 - this function for example so this is how
133:32 - you declare a function this is not
133:35 - actual declaration but that this is some
133:38 - pseudo uh declaration I will declare a
133:41 - function in a
133:42 - moment so function you can declare first
133:45 - of all you must have have the type of
133:49 - function which uh it returns and then
133:53 - you give the name to your function and
133:55 - then in the bracket you can pass
133:59 - argument or
134:00 - parameters like this of some type and
134:04 - inside your curly braces you write your
134:07 - code okay so I will just comment this
134:10 - for now so that we can
134:13 - U see as a reference see it as a
134:18 - reference right now you can Define your
134:22 - function above your main function or
134:25 - below your main function but uh there is
134:28 - a difference in using or declaring your
134:31 - function above and below which I'm going
134:33 - to tell you but let's take an example
134:36 - for example we want to add two numbers
134:40 - using a function so how we can do
134:43 - it or let's take a rather more simple
134:47 - simple example than this also we want to
134:51 - print something using a function okay so
134:55 - for example I have told you that
134:58 - function start with a return type and
135:02 - this time we for example we don't want
135:05 - to return anything then we write void
135:09 - void means we are not returning anything
135:12 - right then comes the name of the
135:14 - function this name you can Define
135:17 - anything
135:18 - for
135:19 - example
135:22 - my function name any name you can give
135:27 - it and then comes your uh bracket like
135:31 - this and it can take some parameters and
135:35 - it cannot uh I mean it you it's your
135:38 - wish if you want to give some parameters
135:42 - to a this function or not it depends
135:45 - upon your
135:46 - requirement right now we we don't want
135:48 - to pass any uh parameters but we will
135:51 - see how we can use parameters with
135:53 - function in the next videos so just uh
135:58 - for now we will not pass any parameter
136:02 - to the function right and then comes
136:04 - these two curly braces and now in this
136:08 - function I want to perform some code for
136:12 - example I want to print something print
136:15 - F and we can say
136:19 - we
136:21 - are inside
136:24 - a function right and end line okay now
136:30 - for example you want to you know do some
136:35 - more stuff for example adding some uh
136:38 - two numbers for example you want to add
136:42 - uh two numbers and show the sum so you
136:46 - can just write
136:49 - print
136:51 - F this should be print F not print F and
136:56 - then you can write
137:00 - sum sum is equal to and then you can
137:05 - write
137:05 - percentage D and then you can add two
137:10 - numbers for example 10 plus 52 this is
137:14 - just an example I'm giving you so
137:18 - so you can just uh write your code
137:21 - inside a function any code any numbers
137:24 - of of line you can write inside a
137:26 - function and then you can call this
137:29 - function in your main and for calling
137:32 - your
137:33 - function you just need to copy the name
137:36 - of the function as it is just copy this
137:39 - name and then inside your main function
137:43 - which is this one you just paste it here
137:47 - okay and then give a semicolon here and
137:51 - what this do is this function
137:55 - name replace is replaced by this code
137:59 - okay so whenever you call a function
138:02 - this code is also called in place of
138:05 - this function so in indirectly we are
138:10 - calling this code in here inside our
138:13 - main function okay and the logic name we
138:18 - have given to this function so that more
138:22 - or less the name of the function should
138:25 - reflect the code which we are writing
138:29 - okay now we will run the code compile
138:32 - and run the code and it says sum is
138:36 - equal to 62 which is this line sum is
138:40 - equal to 62 and then it write V are
138:44 - inside a function right so what happens
138:49 - here your programs starts from here and
138:53 - goes to the second line and then comes
138:57 - here and it sees that there is a
138:59 - declaration of function so it remembers
139:02 - that this is a function uh which we have
139:05 - declared and
139:08 - whenever our main function calls this uh
139:11 - function we need to execute these lines
139:15 - and because we are calling this function
139:18 - inside our main it will execute this
139:22 - okay you can use this function multiple
139:25 - times inside your code also like this
139:28 - like this three times and for example I
139:32 - will just change this line so that we
139:35 - can uh see it more clearly and you can
139:41 - see Su 62 we are in the function some 62
139:44 - we are in the function three times okay
139:47 - so this shows that you can call a
139:50 - function multiple times in your code and
139:54 - that is the uh basic usage of function
139:58 - so function makes your code really
140:03 - readable and fast to execute
140:07 - and uh you can perform this function or
140:10 - call this function again and again so
140:13 - this makes your code uh really short and
140:18 - understandable and concise
140:20 - okay now some people also like to call
140:26 - this function below your the main
140:29 - function here and there is no uh I mean
140:33 - difference uh in declaring the function
140:36 - below your main or above the main but if
140:40 - you want to uh declare your function
140:42 - below your main you just need to
140:46 - prototype your function function
140:49 - just copy this here and paste the
140:52 - Declaration here right and I will show
140:56 - you if you don't do this what happens if
140:59 - I don't prototype this I will just
141:02 - delete this and compile try to compile
141:04 - my program it still runs
141:09 - but when you prototype your function
141:12 - then you are just saying your C program
141:16 - that there is a function called my first
141:21 - function name uh which we are going to
141:25 - Define somewhere in our code so your C
141:29 - programs comes here and sees there is a
141:32 - uh function with a name my function name
141:36 - uh which is defined in our code so it
141:40 - goes from here to here and see the
141:44 - definition of the function this is the
141:46 - definition of of the function and this
141:48 - is called the prototyping of the
141:50 - function or forward Declaration of the
141:53 - function and then it goes here and
141:58 - whenever your main calls your function
142:01 - it knows that this function is defined
142:04 - here okay so it's a good practice
142:08 - whenever you define a function below
142:11 - your main just prototype it like this
142:15 - and what is what
142:17 - uh I mean by prototyping you just need
142:19 - to copy this from
142:22 - void to the function not the curly
142:26 - braces but from here to here and just
142:29 - paste it here and give a semicolon here
142:32 - after this okay and run it once again it
142:36 - will execute
142:38 - fine so this is how you can use
142:41 - functions in C uh there are different uh
142:45 - kind of function for example function
142:47 - fun which takes parameter or functions
142:49 - which returns some value which I will
142:52 - show you in the next videos hello guys
142:55 - welcome to the next video tutorial on C
142:57 - programming for beginners and in the
142:59 - last video I have shown you what is a
143:02 - function and how we can call function
143:05 - from our main uh function right and how
143:10 - we can declare a simple function like
143:13 - this okay now in this video I'm going to
143:16 - show you how to declare and use a
143:19 - function which takes parameters or
143:23 - arguments so suppose we want to uh make
143:27 - a function which adds two values and
143:31 - prints uh the sum okay so what we are
143:35 - going to do is here we will declare a
143:39 - function which returns nothing so we
143:42 - will write void and then the name of the
143:46 - function function you can name it as uh
143:49 - sum or
143:51 - add whatever you find appropriate for
143:55 - your program okay I will name it as sum
143:59 - and
144:01 - now because we want to pass uh two
144:05 - numbers which we can sum we will pass
144:08 - them as an argument for for a function
144:12 - so how to pass an argument in these two
144:15 - brackets these two brackets
144:17 - we will give int the type of the
144:20 - argument first and then we will give the
144:24 - name of the argument for example a and
144:27 - in a similar way we can pass the second
144:29 - argument int
144:32 - B and you can pass any number of
144:34 - argument in the function for example int
144:37 - C int D and so on but right now we want
144:42 - to just add two numbers so we will pass
144:46 - only two arguments
144:47 - right and then we will just give two
144:52 - curly braces here not this one but this
145:01 - one and now what we want to do from this
145:04 - function we want to add these two
145:06 - functions and pass it into other
145:09 - variable for example we will name it as
145:11 - sum which will hold the sum of our two
145:15 - argument which is a and B so we will
145:19 - just do a + b and now we want to print
145:23 - the sum so we will just write
145:27 - print
145:29 - F and inside this we will just write sum
145:34 - is equal to percentage
145:37 - D
145:39 - comma
145:41 - sum okay and now and whenever you want
145:46 - to add these two numbers you can just
145:49 - call the sum function inside your main
145:52 - function here so just call it and uh for
145:56 - example you want to add two numbers for
145:58 - example you want to add
146:01 - 50 and 60 so we will just write 50 comma
146:05 - 60 because this sum function takes two
146:08 - arguments one is a and one is V so you
146:12 - can pass 50 as a and 60 as as B here
146:18 - right and what will this will do so this
146:22 - some function will replace a by 50 and B
146:27 - by 60 and then in here this A + B will
146:31 - be 50 + 60 and it will transfer the sum
146:35 - to this sum variable and then this sum
146:38 - will be printed here so let's try to run
146:40 - the program first and it prints 1 1 0
146:44 - which is true in a similar way you can
146:47 - uh call this function multiple times for
146:52 - example you want to uh get the some
146:55 - multiple times let's uh give slash n
146:59 - here to change the line and this time we
147:01 - want to add 100 or th000 + 500 and here
147:08 - we want to add 11 one and 2 to2 and in
147:13 - here we want to add 1 2 3 and 4 5 6 for
147:18 - example and we want to print the sum of
147:21 - uh all these this this and this run the
147:25 - program and it will give you the sum
147:29 - 110500 which is the sum of these two
147:32 - numbers 33 or 333 which is the sum of
147:37 - these two numbers and 5 96 which is some
147:41 - sum of these two numbers
147:45 - right let me change the slash to back
147:49 - slash because it'll just
147:53 - uh change the line like this and run the
147:56 - program once again and now it will
147:59 - change the line 100
148:01 - 10500 333 and 59 579 which is the
148:06 - addition of first sum second sum third
148:10 - sum and fourth sum like this and you can
148:13 - call your function multiple times now
148:16 - for example you want uh that user should
148:19 - Define these uh two values uh at runtime
148:22 - what we can do is we can can declare two
148:25 - numbers X comma y two integers which are
148:30 - and then we will ask the user to give
148:33 - these two numbers so we will print F
148:37 - uh and we will write
148:43 - please
148:45 - enter to
148:48 - numbers okay and
148:51 - then slash n to change the line and then
148:56 - we will just say print
148:59 - F print F number
149:06 - one number
149:08 - one and change the line once
149:12 - again and then we will use scan F which
149:17 - we use to take input right so we'll
149:21 - write scan scan F and then in the
149:25 - bracket percentage D percentage D and
149:30 - then comma and then this symbol to take
149:35 - integer this end symbol right and then
149:39 - value of x which will will be our first
149:42 - number and in the same way we will pass
149:44 - the second number which is by
149:47 - so print F
149:50 - number two this is number two I'll give
149:54 - space so we can see it better and the
149:58 - second time we will pass or scan y so X
150:03 - is this one and Y is this one we are
150:06 - scanning two numbers and now we will
150:08 - pass these X and Y sum as a first
150:12 - argument and second argument for this
150:15 - sum function and what will this
150:18 - do now when we run the program we will
150:21 - run the program first and now the
150:24 - program asks for two numbers so it says
150:28 - please enter two numbers number one so
150:31 - we will give number one for
150:33 - example 6 4 58 this is the number one
150:38 - and PR press enter and now it says
150:40 - number two so we'll give second number
150:45 - 1025 for examp example and when we press
150:49 - enter we will see sum is equal to
150:53 - 7483 which is the sum of the above two
150:57 - numbers right so in this way we can ask
151:01 - the user to give two numbers and we can
151:04 - make the sum of these two numbers and
151:06 - print it on the screen right so these
151:10 - are called function with argument and
151:14 - arguments is this one argument one
151:18 - argument two and in the same way you can
151:20 - pass any number of argument to a
151:22 - function and you can call your function
151:25 - inside your main program with those
151:29 - arguments all right so I hope you have
151:32 - uh understood the basic concept of
151:34 - functions with arguments or functions
151:37 - with
151:39 - parameter hello guys welcome once again
151:41 - in the last two videos I have been
151:43 - showing you how to use functions in C
151:46 - and in the last video I have shown you
151:48 - how to use a function with arguments or
151:52 - parameters now in this video I'm going
151:54 - to show you how you can use function to
151:58 - return some value right so till now we
152:02 - have been writing functions like this
152:05 - with a void but from uh any function you
152:10 - can return some value uh which can be of
152:14 - any type for example integer double
152:16 - character or string or anything so let's
152:20 - see how we can use a function to return
152:22 - a
152:23 - value now for example we want to make a
152:27 - function which gives us uh the product
152:32 - of uh something this example I have
152:34 - shown you uh last time if you remember
152:38 - and what uh I was doing uh in this
152:40 - function is I was asking the user to
152:44 - enter two values so so it says please
152:48 - enter two values number one and I scan
152:51 - uh first number and I scanned second
152:54 - number and then I passed it passed these
152:57 - two number to this function now let's uh
153:00 - say we want to uh make a function which
153:04 - uh gives us the uh value or product of
153:10 - something and then we want to uh process
153:14 - this number so we will make a new
153:16 - function here to return some value so
153:20 - for example we want to make a function
153:23 - which gives us the multiplication of two
153:25 - numbers or product of two numbers so uh
153:28 - and it will return something so what we
153:30 - are going to do we are going to write
153:34 - first of all return value earlier we
153:37 - used to write here void because we were
153:40 - not returning anything but this time we
153:43 - will return some integer from the fun
153:46 - function that's why we are writing int
153:49 - here right and then write the name of
153:52 - the function for
153:54 - example product this is the name of the
153:56 - function and what this will do it'll
153:59 - take two argument int a comma int B and
154:05 - it's going to give us the result as a
154:08 - product of these two numbers so in order
154:11 - to return some value uh for example
154:14 - product of these two numbers
154:16 - we use a keyword
154:21 - called return okay and because we want
154:25 - to uh return product of A and B we can
154:28 - write a ASX B right so we can return the
154:35 - product of A and B and what this
154:38 - basically mean is this this function
154:40 - will take two parameters A and B and
154:43 - then in here it will uh make the product
154:47 - of these two numbers A and B and then it
154:49 - will return this number as an integer
154:53 - right and then we can use this number uh
154:57 - for doing some other mathematical stuff
155:01 - or anything else so for calling this
155:05 - function we can call it just by its name
155:09 - and because we have the code from the
155:11 - last time in which uh we have declared
155:14 - two numbers and we uh asking user to
155:17 - enter two numbers this is really basic
155:20 - so by now you uh may have known what uh
155:24 - this code is doing it's just taking two
155:26 - values from the user and then we will
155:28 - pass these two values X comma y to our
155:32 - product function right and then this x
155:36 - comma y will be replaced here in the
155:41 - place of A and B it will give multiply
155:45 - these two to um numbers and then it will
155:49 - return the product as an integer so
155:53 - because it's going to return our product
155:55 - we will uh Define an integer for example
155:59 - int uh p
156:03 - d so this integer we will use integer
156:06 - variable we will use to store the
156:09 - product which will be returned by this
156:12 - product function right so product or PR
156:16 - o is equal to product
156:20 - because this function is going to return
156:22 - something as an integer and we will
156:25 - store this integer which this function
156:28 - is going to return in this uh variable
156:31 - right and then we can print the value of
156:35 - uh
156:37 - print print
156:39 - F and then we can print
156:44 - uh product
156:47 - is equal to percentage
156:50 - D
156:51 - comma p d which is this one this
156:56 - variable right and let's see what
156:59 - happens when we uh compile our program I
157:02 - will just make it little bit smaller so
157:04 - that we can see all our uh program I
157:07 - will run the program now and it's saying
157:11 - something let's see what's the
157:14 - error and the error here is
157:19 - um undefined reference
157:22 - to print
157:24 - F so this should be P small right run
157:32 - the
157:33 - program and it says enter first number
157:36 - for example 20 I press enter enter
157:40 - second number for example 30 and when I
157:42 - press enter it gives us the product of
157:45 - of these two number which is 600 right
157:49 - and what this has basically done uh we
157:52 - have given two numbers X is equal to 20
157:55 - Y is equal to 30 so now X is equal to 20
158:00 - which is uh replaced here and Y is equal
158:03 - to 30 which is replaced here so 20 and
158:05 - 30 is passed to this function and this
158:08 - goes here then it will multiply 20 and
158:11 - 30 and then it will return the result in
158:15 - into this variable which we can store
158:19 - okay in a simple uh you know simple
158:23 - usage if you don't understand still what
158:26 - this is
158:27 - doing then what we can do is we can
158:31 - directly uh pass two values for example
158:36 - 10
158:38 - and 60 for example I'm taking simple
158:41 - values so that you can understand so
158:44 - this is basically 10 and 20 we have
158:47 - passed to this function because this
158:50 - function is integer so we need to pass
158:53 - uh only integers here right so 10 will
158:55 - be replaced here at the place of a and
158:59 - 20 60 will be replaced here at the place
159:01 - of B now 10 will be multiplied by 60 and
159:05 - then it will be return and this value we
159:08 - can store it in another
159:11 - variable for example this variable which
159:14 - we can use for
159:18 - something or for example if you want to
159:20 - use this function in or this variable
159:23 - for some other use so what we want to do
159:27 - is for example a
159:30 - result result is equal to and then do
159:37 - percentage D and what we want to do is
159:41 - whatever product we are getting from a
159:45 - product
159:46 - function we want to add uh 10 to it and
159:50 - then show the result okay so I will call
159:55 - product and let's uh delete this thing
160:00 - for now and we will make it more simple
160:03 - so what we are going to do is we are
160:05 - going to call this
160:07 - function call product and we will pass
160:09 - two values for example we pass this uh
160:13 - time five and and five once again so 5
160:18 - into 5 is 25 right this is a simple uh
160:23 - uh parameter I'm giving so that we know
160:25 - the result so 5 into 5 is 25 which will
160:28 - be returned by this uh product and we
160:31 - can add 10 to
160:33 - it 10 to it and the result will be 35
160:39 - right so let's try and run the program
160:42 - it says result is equal to 35 so so you
160:45 - can use uh
160:47 - this function which returns integer
160:50 - value uh as a you know parameter which
160:54 - you can uh you know do arithmetic
160:57 - operation on this parameter or on this
161:00 - function also so in this way you can use
161:04 - function which Returns value okay and
161:07 - don't forget to use this return keyword
161:11 - whenever you are returning anything so I
161:14 - hope you understood the basic concept of
161:16 - a function which
161:18 - returns hello guys welcome to the next
161:20 - video tutorial on C programming for
161:22 - beginners and in this video we will
161:24 - discuss about scope rules in C now there
161:29 - are two kind of uh variable declaration
161:33 - in C one is called a local variable
161:37 - which we have been seeing in our
161:39 - tutorial and one is called Global
161:43 - variable so for example local variable
161:47 - is a variable which you declare inside
161:50 - some function so inside for example in
161:54 - main you can declare int a is equal to
161:58 - 10 it's called a local variable okay so
162:03 - what it's
162:05 - called
162:09 - local variable okay now whenever you
162:14 - declare of variable which is not inside
162:19 - any function it's called a global
162:23 - variable okay so for example I declare a
162:26 - function which is not inside main or I
162:29 - will declare one more function and for
162:33 - example or
162:35 - void
162:38 - void
162:40 - number print it doesn't take any
162:44 - argument
162:46 - and it prints something okay and here we
162:49 - can declare a variable called X or a
162:53 - variable called int or any variable int
162:57 - a and this is also a local local
163:00 - variable right because it's declared
163:04 - inside your function but whenever you
163:07 - declare a variable for example
163:10 - int G it's called a global variable okay
163:15 - which is not uh inside any function and
163:19 - what is difference between Global and
163:21 - local variable is a local variable is
163:26 - only uh valid inside your function so
163:31 - it's local to your function so you
163:34 - cannot use this a inside this
163:38 - number or you cannot this use this x
163:43 - inside this main function or or anywhere
163:45 - else but on the other hand a global
163:50 - variable is visible to every function in
163:53 - our program so you can use this Global
163:56 - variable here also and here also
164:00 - now let's see what uh I mean by that so
164:05 - for example I want to print or I declare
164:08 - Global variable
164:11 - as zero or for example I just declare a
164:15 - Global variable and just remember uh I
164:18 - will just comment
164:23 - here
164:25 - Global variable and always remember
164:28 - whenever you declare a global variable
164:31 - and it's initialized by zero if it's int
164:36 - float or double it's already initialized
164:39 - by zero you don't need to initialize it
164:42 - by zero but a local variable aable
164:46 - whenever you declare it like this it's
164:49 - not initialized by zero so this variable
164:52 - can contain any value any garbage value
164:56 - and you may not know the value of this
164:59 - uh a so let's see first of all we will
165:03 - print print
165:06 - F we will print the value of uh This
165:10 - Global
165:12 - variable Global is equal to to
165:16 - percentage
165:17 - D and this should be percentage D
165:21 - without
165:22 - space and comma G we are printing this
165:27 - value right in the same uh way we will
165:31 - print this local variable so we will
165:36 - write local and we will print a okay or
165:42 - let's name them uh logically so I will
165:45 - name this variable
165:47 - AS
165:49 - Global undor V and I will name it as
165:54 - local uncore V local underscore V uh
165:59 - stands for local variable and local
166:02 - Global underscore v stands for Global
166:05 - variable so I use this Global variable
166:07 - to print here or let's not print it here
166:11 - but let's print this Global variable
166:14 - value in
166:16 - uh our main function because we are not
166:19 - going to call this function for now and
166:23 - this should be local variable and
166:27 - remember we haven't initialized this and
166:30 - this by any value let's see what happens
166:32 - when we run this
166:34 - program we can see that this variable
166:39 - local is equal to 77 let me give uh one
166:42 - more thing here which is this
166:46 - sln to change the line and I will run
166:50 - the
166:51 - program and you can see this local
166:54 - variable is printing 77 but we haven't
166:58 - initialized this local variable by any
167:00 - value so it's taking the garbage value
167:03 - but whenever you use this Global
167:05 - variable It's Always initialized by zero
167:09 - even if you haven't assigned any value
167:11 - to it so just uh remember this
167:15 - and if it's a character it will be uh
167:18 - initialized by a null
167:20 - character and if it's a pointer which we
167:23 - are going to learn in next videos it
167:26 - will be initialized by a null
167:29 - pointer
167:31 - now a global variable so for example you
167:36 - declare this Global variable is equal to
167:39 - 25 here you initialized it and you also
167:43 - initialized
167:46 - uh local
167:48 - variable like this uh Global varibles
167:52 - with the same name but this is is equal
167:55 - to uh 20 for example and I will just
167:59 - commend this because we don't need this
168:01 - line so what we have done we have
168:03 - initialized a Glo variable called Global
168:06 - V and initialize it by
168:09 - 25 and the same name I have given to my
168:12 - local variable now what happens in this
168:16 - case so in this case whatever value is
168:21 - uh contained by your local variable even
168:25 - if it's declared with the same name uh
168:28 - globally it will the value of This
168:31 - Global V will be the value in the local
168:35 - variable right so whenever we print this
168:39 - this value will print 20 here so local
168:43 - variable is always has the preference
168:46 - over the global variable if they have
168:49 - the same name I'll run the program and
168:52 - it says 20 instead of 25
168:56 - right now for example you want to use
169:00 - Global variable inside this function I
169:03 - will just print this
169:06 - uh here so I will print something like
169:10 - uh Global variable
169:13 - plus uh uh 50 for example okay and I
169:18 - will uh name it
169:20 - as
169:25 - uh Global plus 50 okay and so what this
169:32 - will do it will print whatever the value
169:36 - of global variable which is 25 plus it
169:39 - will add 50 to it and I will call this
169:41 - function
169:42 - here and it's visible to this function
169:46 - so we can see global plus 50 is 75 it's
169:50 - printing so Global variable is visible
169:53 - to uh your
169:55 - functions and all all your functions and
169:58 - uh all your uh code right but local
170:02 - variable is you know you cannot use it
170:06 - uh globally for example in uh
170:13 - num local
170:15 - is equal
170:16 - to uh 30 for example and if you want to
170:20 - use this local variable here you want to
170:23 - print this local
170:26 - num here it will give you compilation
170:30 - error because this variable is not
170:33 - visible to uh this main function because
170:37 - it this exist in other function other
170:41 - than main right run it and it says
170:45 - the this error and this error
170:49 - is numor local Undeclared right so you
170:54 - cannot use a local variable in your
170:59 - other functions right so these are the
171:05 - scope rules in C hello guys welcome to
171:09 - the next video tutorial on C programming
171:10 - for beginners and in this video we will
171:12 - see what is an array and how to use
171:15 - array and C so what is an array array is
171:19 - a variable which can contain more than
171:23 - one values of same data type so for
171:27 - example you want to store similar data
171:31 - in a variable you can do it with the
171:34 - help of an array so for example you want
171:36 - to store a scores of a student or ages
171:42 - of persons or names of any person or any
171:45 - number of persons you can do it using an
171:49 - array using a single variable now how to
171:53 - declare an array in
171:55 - C it's like same as declaring variabl so
172:00 - first is the data type what kind of data
172:02 - you want to store in your array and then
172:06 - the name of your array so for example
172:10 - my
172:12 - number array right right and then this
172:16 - square bracket the square bracket uh
172:20 - tells C that it's an array and whatever
172:25 - number you uh insert inside this um
172:30 - square bracket for example three this is
172:33 - the number of element you can store
172:36 - inside an array right so for example we
172:39 - have uh written three here we can store
172:42 - three numbers in an array
172:45 - now whenever you uh declare an array you
172:49 - can initialize it by equal to sign and
172:52 - in this curly braces you can give the
172:55 - values to your array for example the
172:58 - values can be
173:01 - 20
173:03 - 30 and 60 for example right so I have
173:06 - stored three values because here you you
173:09 - can see I have defined that this array
173:12 - can contains three values therefore I
173:15 - can assign three values to my array if
173:19 - it would be four then I can add one more
173:22 - value for example 55 to my array okay
173:27 - and so on if if it be five it will be
173:29 - five I can add five values here okay so
173:33 - for example I have three values right
173:35 - now
173:36 - so I can store three values okay
173:41 - now you can uh ask how can I access the
173:48 - value of an array okay and there is
173:52 - something called index of an array and
173:56 - the index of an array is a position at
174:01 - which any uh value is uh you know placed
174:05 - so the index of 20 here is zero so index
174:10 - of an array starts from zero not from
174:12 - one so always remember that index of an
174:15 - array starts from zero and the at the
174:18 - zeroth index we have the value 20 here
174:22 - and at the first index we have the value
174:26 - 30 and at the second index we have the
174:29 - value 60 okay so index start from 01
174:34 - 2 now to access the value of an array
174:38 - what you can do is you can just write
174:41 - print
174:42 - F or for example I want to access an the
174:46 - value of an array I can just name a
174:51 - variable
174:53 - access array for example is equal to for
174:57 - example I want to store second value of
175:01 - an array inside this variable okay so I
175:04 - can just copy the name of an array and
175:07 - then in the square bracket the index of
175:10 - the array whose value we want to store
175:13 - for example we want to store 30 the
175:16 - index of the 30 is 01 right so we will
175:20 - write one here okay so now the value 30
175:25 - from array will be stored inside this
175:28 - exess array variable right and then we
175:32 - can print this value
175:34 - print F and then we can just
175:42 - write value
175:44 - is equal to percentage D small D and
175:50 - then we will change the line so that it
175:52 - will
175:54 - be printed at the next line whenever we
175:58 - use the next print F right so now we
176:04 - will see that this will print 30 because
176:07 - we have assign 30 which is at index uh
176:11 - one of uh this array right we will just
176:15 - run this program and it prints 30 which
176:17 - is totally
176:18 - fine in a similar way you can Define any
176:22 - character array or any double array also
176:26 - but always remember that an array for
176:29 - example
176:31 - car array and we want to store three
176:35 - characters inside this array so for
176:37 - example I will write three or I want to
176:40 - store four character inside this aray
176:43 - and then
176:44 - in the curly
176:46 - braces I can store these four characters
176:49 - for example first character second
176:52 - character third and fourth and then this
176:56 - contains a comma this contains B comma
177:01 - this contains
177:02 - C comma this contains D okay so this is
177:08 - a character array you can define a float
177:12 - array or string array or any other kind
177:16 - of array but always remember that the
177:20 - data type of array so if you have
177:23 - declared an integer array it can only
177:25 - contain integer values if you have
177:28 - declared character array it can only
177:31 - uh it can only have character values
177:35 - right if you have float array it can
177:37 - only have float values okay now for
177:41 - example you want to print all the values
177:44 - of your array so for example your array
177:48 - contains six values and I can just
177:52 - extend my
177:54 - array like
177:58 - this so now it contains six value 1 2 3
178:01 - 4 5 6 and the index of these value is 0
178:05 - 1 2 3 4 5 right so now for example I
178:10 - want to print all the values of an array
178:12 - I can use for Loop for that
178:14 - and I can just write int I is equal to 0
178:20 - and then my condition comes I is less
178:23 - than the index of an array so uh or size
178:28 - of an array so the size of an array is
178:31 - six in my case so I will write I should
178:34 - be less than six and
178:37 - then
178:41 - i++ and then I can print the value of uh
178:45 - these arrays for example I will just
178:48 - print this and I can
178:54 - write
178:57 - element and then I can write percentage
179:00 - D here and percentage D and I will just
179:06 - print the value of
179:08 - I
179:09 - I and comma I will just print uh the
179:15 - index 1 by one so I will just write the
179:18 - name of my array and then I okay why I
179:23 - have written I because I will be uh you
179:26 - know increased uh in the for Loop first
179:29 - the value of I is equal to 0o so it will
179:32 - print 20 then it will increase the value
179:36 - of I by 1 which is one so array at index
179:41 - one is 30 okay value of for at index 1
179:44 - is 30 now once again the value of I
179:47 - becomes two so the value of I at index 2
179:52 - is 60 so it will print all all the
179:55 - values in the array 1 by one uh at the
179:59 - specific index so I will just run this
180:01 - program and you can see it prints the
180:04 - value so the element 0 is 20 which is
180:10 - true element 1 is 30 which is true
180:13 - element element 2 is 60 which is here
180:16 - element three is 50 uh 4 is 55 and fifth
180:21 - is 30 so index start from 0 to 5 okay so
180:26 - it prints all the values in an array
180:29 - like this okay now for example you want
180:33 - to change uh any value in the array for
180:36 - example you want not happy with uh this
180:39 - 30 in an array and you want to change
180:41 - the value of uh this 30 to to 45 for
180:45 - example so you can change it like this
180:48 - so the index of uh this value 30 is 01
180:52 - okay so what you can do is you can just
180:55 - uh copy this uh value from here I will
180:59 - just delete all the other things right
181:02 - now so that it will be simpler to see so
181:07 - just copy the name of your
181:09 - array and then the index of the
181:14 - value you want to change so the index of
181:16 - value I want to change is 1 0 1 right is
181:20 - equal to I want to change it to the
181:23 - value 45
181:25 - right so this will change the value at
181:30 - index one of this array which is 30 to
181:34 - 45 okay and we will verify it by this
181:38 - for Loop and printing the value I will
181:40 - compile the program and run this and you
181:43 - can see the value at index 0 is 20 value
181:48 - at index 1 is 45 here which was 30
181:52 - earlier but we have changed it to 45
181:55 - right so you can change the value of an
181:57 - array like
181:59 - this
182:02 - okay so this kind of array which has you
182:07 - know we which can contain uh some or one
182:12 - or more than one uh variable or values
182:15 - is called single dimensional array right
182:19 - in C there can be multi-dimensional
182:22 - array also which I will teach you in the
182:25 - next videos hello guys welcome to the
182:28 - next video tutorial on C programming for
182:30 - beginners in the last video I've shown
182:32 - you what are arrays in C and how to use
182:36 - arrays in C and I have given an example
182:40 - to you how to declare and use a single
182:44 - dimensional array so I have shown you
182:46 - you can
182:47 - declare an array like this uh and array
182:52 - can contain more than one values of same
182:55 - data type in a single variable in a
182:59 - similar way if you want to declare a
183:02 - multi-dimensional array you can do it
183:05 - like this so this is a single
183:07 - dimensional array and if you want to
183:09 - declare a multi-dimensional array you
183:12 - can do it like this for example you want
183:15 - to declare uh 2 cross 3 cross 4 three
183:21 - dimensional array this is the
183:24 - Declaration of threedimensional array or
183:26 - if you want to declare a
183:28 - four-dimensional array you can do it
183:29 - like this
183:32 - but most simplest form of
183:34 - multi-dimensional array is a
183:36 - two-dimensional array and this is how
183:40 - you can declare this two-dimensional
183:42 - array right
183:44 - so this is the Declaration of twood
183:47 - dimensional array of 2 cross 3 here 2
183:51 - cross 3 means this array if you can
183:55 - imagine uh in the form of uh uh a square
184:00 - or a table this two is like a a row for
184:05 - your array and three is like a column
184:08 - numbers of your array so let's see how
184:11 - we can initialize this array first so
184:13 - you just give a bracket and the in these
184:17 - two curly braces you can declare your
184:20 - array so first of all we will Define
184:24 - our
184:25 - row0 so this will be our
184:29 - row0 and I will move this up and draw
184:34 - one okay so I will just Define two rows
184:38 - first because
184:42 - our array contains two
184:45 - rows if we see this and three columns
184:49 - right so columns are like straight uh
184:54 - lines or column right so for example 1
184:58 - comma 3 comma 2 are The Columns of row
185:04 - zero and for example 5 comma 6 comma 8
185:11 - are the elements of first uh or second
185:17 - row of index one and it has three
185:21 - columns like five 6 and 7 so this is a
185:26 - two-dimensional array and it contains
185:29 - two rows and three columns how it
185:32 - contains two uh
185:34 - rows this is the first row so Row
185:39 - one of uh or index zero right so index
185:45 - of array starts from zero so this is Row
185:47 - one logically
185:50 - but if you see in terms of C this will
185:54 - be row zero right and this will be Row
185:59 - one
186:00 - right because index of the array starts
186:04 - from
186:05 - zero and then these are the column so
186:08 - First Column is for 1 and five and
186:12 - second column colum contains 3 and six
186:15 - and third column contains 2 and 8 okay
186:19 - now in order to
186:22 - uh iterate over these values you can use
186:26 - for Loop but a single for Loop will not
186:31 - work in the case of this two dimensional
186:34 - array you need to use uh two for Loop so
186:37 - Loop inside a loop to iterate all the
186:40 - values in this array so for iterating
186:44 - over these values you can do it like
186:47 - this so you can just write a first for
186:51 - Loop for and then this for Loop will be
186:56 - for the rows okay so I will declare a
187:00 - variable I or int I is equal to
187:06 - 0 and this will be I will be less than 2
187:12 - which which is number of rows right
187:15 - these are the number of rows you have
187:20 - okay and
187:23 - then i++ which is our
187:27 - increment
187:29 - operator and inside this for Loop we
187:31 - will declare one more for Loop so inside
187:34 - this girly brazes of this for Loop we
187:37 - will declare one more for Loop for
187:39 - columns so for
187:42 - INT
187:44 - int J is equal to
187:47 - 0 and J should be less than the number
187:51 - of rows so number of rows in our case is
187:54 - three right so just writes three here
187:58 - and then
188:00 - j++ okay so this
188:03 - is Loop inside the loop to iterate the
188:07 - values so first Loop will iterate over
188:10 - the rows and the second Loop will rate
188:13 - over the columns right now in order to
188:16 - print all the values inside your uh
188:20 - colum for Loop this Loop you can just
188:24 - write print F and the name of your AR
188:29 - for example this one just inside the
188:33 - brackets just write this and then just
188:38 - write
188:40 - percentage D here and then percentage D
188:46 - here is equal
188:49 - to it should be percentage D and this
188:53 - should be equal to percentage
188:57 - T right so this will be the value of
189:01 - array and we will also print the index
189:04 - of the array right so we have the here
189:07 - it will show the row here it will show
189:11 - the column and here it will show the
189:13 - value right so we have row here so rows
189:19 - are iterated by I so just write I here
189:23 - comma The Columns are iterated by J so
189:26 - just write J here and the
189:31 - values can be iterated by your array
189:35 - index so just write the name of your
189:38 - array and then the value of I which is a
189:42 - row
189:43 - indicator and value of J which is your
189:47 - column indicator right now I will just
189:52 - give this next
189:55 - line here so that it will literate every
189:59 - time in the next line okay now I will
190:03 - compile and run this
190:05 - program and it says the program contains
190:10 - some problem let's see what's the
190:12 - problem here
190:15 - yeah so I think this curly brace is
190:19 - extra here this should do right and
190:23 - these are rows and columns so just
190:25 - compile it once again and now it runs so
190:29 - you can see it prints the row and index
190:33 - of the array right so at uh 0 0 so at
190:39 - zeroth row and zeroth column we have the
190:42 - value one which is true this is at
190:46 - zeroth row and zeroth column okay at row
190:50 - 0 and column one we have the value three
190:53 - this is right this is row0 so row 0o is
190:58 - this one and column one so zero and one
191:02 - so column one is this one value is three
191:05 - that's correct row 0o and column two is
191:09 - this one and 0 1 2 so so this is the
191:14 - value which is two which is correct here
191:17 - now comes the row one which is this row
191:21 - value or column zero which is this value
191:24 - which is five in the same way it will
191:26 - print all the values of your two
191:28 - dimensional
191:29 - array so in this way you can iterate
191:32 - over your array using two for Loop so
191:37 - this is a simplest kind of
191:38 - multi-dimensional AR array and it's
191:41 - called two-dimensional array
191:45 - in a similar way if you want to uh
191:47 - declare some other array two dimensional
191:51 - array with some uh other dimension you
191:55 - can do it like this for example your
191:58 - array must contain
191:59 - three rows you can just do it like this
192:03 - so Row one we have zero and one we have
192:07 - and we will
192:09 - just write the Row third
192:13 - or by index its
192:16 - row two
192:20 - right and this is row two okay so you
192:24 - can do it like this so I hope you have
192:27 - understood the basic concept of
192:29 - multi-dimensional
192:31 - arrays hello guys welcome to the next
192:33 - video tutorial on C programming for
192:35 - beginners in the last two videos I have
192:37 - been showing you what are arrays and how
192:41 - to use arrays in C and I have also shown
192:45 - you in the last video how we can use
192:48 - multi-dimensional arrays in C now in
192:51 - this video I'm going to show you how you
192:53 - can pass arrays as an argument of a
192:58 - function so let's see how we can do it
193:02 - so we are going to take an example for
193:05 - example we want to calculate the sum of
193:09 - elements of uh this array we have so
193:13 - this array for example have six elements
193:17 - and we want to add each and every
193:20 - element and display the sum of every
193:23 - element each and every element so what
193:26 - we want to do basically is we want to
193:28 - just add 20 + 30 + 60 + 50 + 55 + 30 and
193:35 - sum them up and show the result uh of
193:40 - this uh summation you using a function
193:44 - right so first of all let's see what are
193:48 - different ways of passing arrays as an
193:51 - argument of a function so I will declare
193:56 - a
193:56 - function void for example it's not
193:59 - returning for example nothing and we can
194:03 - say
194:06 - array sum is the name of my function I
194:10 - just need to change my keyboard settings
194:14 - yeah
194:16 - so
194:18 - array uh sum is the name of my function
194:22 - and there are three different ways
194:25 - basically you can pass arrays as an
194:27 - argument of a function One
194:30 - is using a pointer and just pointer you
194:35 - can just uh give this star or estx here
194:40 - and give your AR name
194:44 - or array or you can say my array
194:49 - right my array okay so you can pass uh
194:55 - pointer uh array to your function but we
194:59 - haven't learned about Pointer till now
195:02 - so I will skip this uh for now and in
195:06 - the future when I will uh teach you how
195:08 - to use pointer in C then we will see how
195:11 - we can pass
195:13 - uh this kind of arrays and as an a
195:16 - function
195:18 - argument so second way is to pass a
195:22 - definite sized array for example I want
195:25 - to get uh the sum of this array which
195:29 - has the size six I can just
195:33 - declare uh the array so
195:37 - my array as as an argument and then I
195:40 - will give the size to my array as six
195:44 - like this but there is one uh problem
195:48 - with this is you can only uh pass uh
195:53 - array of size six to this function so
195:56 - this will kill uh the general
196:00 - functionality of a function and the
196:02 - functionality of a function should be it
196:04 - should be used in different uh
196:08 - conditions and this is this condition
196:11 - restrains uh the use of function to the
196:15 - size six of an array right so in order
196:19 - to uh you know get rid of this
196:23 - restriction we can pass uh the array as
196:27 - unside unsized array as an argument like
196:31 - this so you just give the data type the
196:33 - name of the array and in the square
196:36 - bracket you don't pass any size and this
196:39 - means you want to pass uh an array
196:43 - of different size or unsized array which
196:46 - doesn't have any size okay or it can
196:49 - have different sizes right and plus we
196:53 - will uh uh pass the
196:56 - size as an argument also okay so we know
197:01 - the size of the array and the array name
197:04 - from here now we can uh pass different
197:08 - size array to our function like this
197:12 - okay
197:13 - Now using this function I want to add
197:17 - all the elements of the array okay and
197:20 - let's return integer as a result and
197:24 - because we want to uh calculate the sum
197:27 - we will just declare a variable called
197:30 - sum is equal to Zer we will initialize
197:34 - it by zero okay now we will use a for
197:38 - Loop just like
197:40 - this and what is say it's doing is it'll
197:44 - iterate over this array one by one and
197:49 - we will add
197:51 - the values of the elements one by one to
197:56 - this sum right so initial values of sum
197:59 - is zero and it will add 20 30 60 1 by
198:04 - one to this sum right when we iterate
198:07 - over this array so this array
198:09 - declaration is something like this for
198:12 - in the condition or in the bracket we
198:14 - will initialize this uh variable I is
198:19 - equal to 0 and then we give the
198:22 - condition here so I should be less than
198:25 - the size of the array right because the
198:29 - size of the array starts
198:32 - from zero so it should be less than the
198:36 - size of the array right so just pass
198:39 - this size argument here
198:42 - okay I is less than this size right this
198:46 - size and this size are same and then we
198:48 - will increment the value of I by One by
198:52 - like this okay so just initialize I is
198:56 - equal to Z I should be less than the
198:58 - size of the array which is this one and
199:01 - then we will increment the value of I
199:04 - and what we basically do want to do we
199:07 - want to just
199:09 - sum is equal to sum the previous value
199:13 - of sum plus the array
199:17 - name and the index at the moment which
199:21 - is uh I right so this I will uh change
199:28 - in the loop so first value of I is z so
199:31 - i0 of this array is 20 so
199:36 - the value of my array at uh 0 will be 20
199:41 - when we we will pass this array as an
199:44 - argument to this function okay we can uh
199:48 - simply write uh
199:51 - this in different way like this so just
199:55 - write
199:57 - sum plus is equal to just write this my
200:03 - array okay and this is basically same as
200:07 - this but this is more short form of uh
200:11 - this EXP expression okay and then we
200:14 - will just
200:16 - uh return
200:18 - sum so once we have the sum of all the
200:22 - elements of the array we will just
200:24 - return the sum here as an integer okay
200:28 - now in order to use this function for
200:30 - example we have this array and we want
200:32 - to calculate uh the sum of all these
200:35 - elements we can use uh this like this so
200:40 - let me
200:43 - just make it smaller so we can see here
200:47 - so in here we will just call this
200:50 - function so I will just uh uh declare a
200:54 - integer
200:55 - [Music]
200:57 - called array
200:59 - sum right so this will contain the
201:03 - result of this but this and this are
201:06 - same so we will just
201:08 - change uh the variable name sum
201:15 - of array for example right and what it's
201:21 - uh value is it's equal to the value
201:26 - which is returned by this function when
201:29 - we pass the array so this function takes
201:33 - to augment the array so our array is
201:36 - this one my number array and the size of
201:40 - the array right so the size of the array
201:43 - in our our case is six right now see
201:47 - this so it's six okay and it will
201:51 - calculate the sum of uh the array and
201:54 - then we
201:55 - will print the value of the array
202:00 - so
202:02 - array
202:06 - sum is equal to percentage
202:10 - D and and comma this because now this
202:15 - will return the sum of the array so this
202:18 - value is assign to sum of are this
202:21 - variable and then we will pass this here
202:25 - okay now let's run the program and let's
202:28 - see what is the
202:30 - result and it shows it should be print F
202:35 - okay run the program and it shows array
202:39 - sum is equal to 245 right let's check
202:44 - whether it's uh true or false so I will
202:47 - just open the calculator from here and
202:51 - we have first element is 20 + 30 + 60 +
203:00 - 50 + 55 + 30 right all these are 20 30
203:07 - 60 50 55 30 and the sum is 245
203:12 - which is shown here as a result so we
203:15 - know that it has successfully calculated
203:18 - or our function has successfully
203:20 - calculated the sum of uh elements of
203:24 - this array now suppose uh this you want
203:27 - to pass an array of size 7 here so I can
203:32 - just change the size and I will add one
203:34 - more element to my array for example
203:37 - it's 100s so our previous sum was 2 2 45
203:43 - and we will just add 100 to it so it
203:46 - should be equal to 345 now right so and
203:52 - this now the size of the array is seven
203:55 - so you need to change this also because
203:57 - this function takes the size of the
204:00 - array so now the size is seven right
204:03 - once again run the program and it shows
204:05 - 345 which is correct now if you want to
204:10 - pass an array on size 8 and I will add
204:15 - one more element of and for example I
204:17 - will just uh add 100 once again now 245
204:23 - + 100 + 100 is equal to
204:27 - 445 right the array size is now 8 and
204:32 - once again run the program and it so
204:34 - shows 445 which is true right so in this
204:39 - way you can use uh array or you can use
204:43 - a function and pass uh uh array as an
204:48 - argument of the
204:49 - function uh using
204:53 - C hello guys welcome to the next video
204:55 - tutorial on C programming for beginners
204:59 - and in this video we are going to learn
205:01 - what are Pointers and how to use
205:05 - pointers in C now some of you may think
205:09 - that pointers is a very uh complicated
205:13 - concept to understand but actually it's
205:17 - not so if you can understand this
205:20 - concept it will become really easy to
205:23 - use pointers in
205:25 - C so first of all what are
205:28 - Pointers a pointer is a
205:31 - variable whose value is the address of
205:35 - another
205:36 - variable so once again what is a pointer
205:41 - a
205:42 - pointer is a
205:44 - variable whose value is the address of
205:48 - another variable okay now you may ask
205:53 - what is the address of a
205:56 - variable so in C whenever you declare
206:01 - uh variable for example
206:05 - variable X or variable
206:10 - well
206:12 - is equal to whatever 30 right so
206:16 - whenever you declare a variable in C C
206:22 - stores this variable at some particular
206:26 - memory address in your computer okay now
206:30 - in order to access this uh value or
206:35 - access the address of uh this variable
206:39 - where it's stored in your computer
206:41 - memory you can just uh access this
206:45 - address like this so for example we want
206:47 - to print this address we can just write
206:50 - print F and then we can
206:55 - write address
206:58 - of
207:00 - Val is equal
207:02 - to percentage
207:06 - D and then
207:09 - comma and then come comes the
207:12 - interesting part you use and symbol to
207:16 - show the address of any variable so
207:21 - whenever you uh use this end symbol
207:24 - before any V Val variable it will show
207:28 - the address of the V variable right so
207:31 - we have written something like this
207:36 - okay but because address is a hexad
207:40 - decimal value
207:42 - this percentage D will not work here
207:44 - because percentage D we use to print
207:48 - decimal values right and to print hexa
207:51 - decimal values we use this okay
207:56 - percentage X and this percentage X means
208:00 - we want to print some hexa decimal
208:03 - values in C okay so whenever you use end
208:08 - before a variable name it will give you
208:12 - the address of a variable and let's try
208:14 - to run the program and let's see what it
208:17 - prints and it
208:18 - prints
208:20 - 28
208:22 - ffc1 you see 28
208:25 - ffc1 and this means it's a hexa decimal
208:30 - memory address in your computer where
208:34 - this variable well is stored in your
208:38 - computer okay now
208:42 - now once again what is a pointer pointer
208:46 - is a variable a simple
208:49 - variable whose value is the address of
208:53 - another variable and what is this we are
208:57 - by using and before a variable we are
209:00 - using or we are accessing the address of
209:03 - a variable okay so a pointer can be
209:07 - declared as this value also before that
209:11 - and symbol now to declare a
209:14 - pointer in C you just do something like
209:19 - this so it has the data type and then
209:22 - this srix tells C that you want to
209:26 - declare a pointer okay so I declare a
209:32 - pointer
209:34 - pointer for example
209:37 - p and I will
209:40 - just declare this pointer like this so
209:43 - it's same as a variable right but before
209:50 - if you write this estri before this
209:53 - variable it becomes a pointer now
209:57 - pointer is a variable whose value is a
210:00 - address of another variable okay and why
210:03 - I'm stressing this so now whenever you
210:06 - use this pointer variable pointer p is
210:10 - equal to
210:12 - its value can be the address of another
210:15 - variable so this is our variable and the
210:18 - address of variable is this one so its
210:21 - value can be address of Val okay and
210:26 - whenever you assign this address to the
210:30 - pointer you don't need to use estx
210:33 - before it okay so at the time of
210:36 - Declaration only you just need to give
210:39 - this srix okay and at the time of
210:42 - assignment you don't need this uh you
210:44 - know estx before this variable now this
210:49 - pointer has the address of this value
210:54 - right
210:56 - now how can you access this value 30
211:01 - using this
211:03 - pointer first of all Let's uh try to
211:06 - print what is in the
211:09 - pointer so once again we write here and
211:14 - let's change the line from
211:16 - here and here
211:21 - also and we will print this pointer P so
211:25 - we can just
211:29 - write value
211:33 - of
211:36 - pointer variable okay now let's see what
211:40 - is is the value of this pointer variable
211:42 - without this uh and symbol okay
211:46 - basically this value and this value
211:49 - should be same why because we have
211:52 - assigned this address of a variable to
211:56 - this pointer variable okay this and this
212:00 - should print same values let's try to
212:03 - run this and it prints the same value 28
212:09 - ff18 and value of pointer variable is 28
212:12 - ff18 right so pointer just stores the
212:17 - address of
212:19 - variables now in order to access the
212:22 - values which is stored on this address
212:26 - you
212:27 - use you can so you want to access the
212:31 - value 30 for example using this pointer
212:35 - so using this pointer you want to uh
212:38 - access this value which is 30
212:41 - but pointer only uh you know can store
212:45 - the address of the variable
212:48 - so this
212:50 - variable have the value of 30 and the
212:53 - address of 28 FF something right now to
212:59 - access the value of a address you use
213:03 - something like this so value
213:09 - of
213:11 - uh for example
213:15 - pointer pointer you can access it like
213:19 - this by a ASX before your pointer okay
213:25 - and this basically what it does is
213:30 - it so this pointer contains the address
213:33 - and whenever you add this estx before
213:36 - this pointer it shows the value at that
213:41 - address okay so let's try to run the
213:44 - program and let's change this percentage
213:47 - X to percentage T because we want to
213:50 - access this value which is an integer 30
213:54 - right run the program and now it
213:58 - shows the value of pointer is 30
214:02 - right so once again we will repeat what
214:06 - we have learned so every variable in C
214:11 - is stored in your computer at a
214:14 - particular address and this address you
214:17 - can access by adding this end symbol
214:21 - before your
214:23 - variable now what is a pointer a pointer
214:27 - is a variable whose value is the address
214:30 - of another variable right so you can
214:34 - declare pointers like this by just
214:37 - adding uh srix before your variable name
214:41 - and the value of the pointer so you can
214:44 - assign some value to the
214:46 - pointer using a address of another
214:50 - variable so this is our variable for
214:53 - example we want to assign this variable
214:56 - address to the pointer you just assign
214:58 - it like this now to dfference uh this uh
215:04 - pointer def reference means to get the
215:07 - value which is stored at this address
215:11 - which is hold by this pointer you use
215:15 - this asri sign and this asri sign before
215:20 - a pointer tells C that we want to get
215:25 - the value of uh the address which is
215:30 - stored in this
215:32 - pointer okay so don't get
215:36 - confused and in the next video we will
215:39 - learn more about about pointers and
215:41 - other stuffs in
215:43 - C hello guys welcome to the next video
215:45 - tutorial on C programming for beginners
215:48 - in the last video we have seen what are
215:51 - Pointers in C and how we can use
215:54 - pointers in C and I have given you a
215:57 - simple example how to declare a pointer
215:59 - and how to assign values to the pointer
216:03 - and what is a
216:05 - pointer a pointer is a variable whose
216:08 - value is the address of another variable
216:11 - which we have seen in this line so this
216:14 - and symbol if you uh add before any
216:17 - variable it shows the address of the
216:21 - variable and this address we can assign
216:23 - to a pointer variable like this now in
216:26 - this video we are going to see how we
216:28 - can use arrays with pointer so let me
216:32 - give you an example for example we have
216:37 - uh array called
216:39 - value
216:41 - array which contains for example three
216:44 - values so we can Define array of size
216:49 - three like this and we can initialize
216:53 - array with these three values for
216:55 - example first value is 30 second value
216:57 - is
216:58 - 40 and third value is 50
217:03 - right and now we can assign this array
217:07 - to a pointer in the same manner
217:11 - we have assigned a variable to a pointer
217:14 - variable right so for that we need to
217:18 - declare a pointer array so we will name
217:21 - it as
217:22 - pointer array and in the same manner as
217:26 - array we will give the size to the
217:29 - pointer now to assign the values from
217:33 - array to a point array we just need to
217:36 - use for Loop to iterate over a our array
217:41 - so we will write
217:42 - for INT I is equal to
217:47 - 0 I should be less than three because
217:52 - our array is of size three then I + plus
217:57 - and
217:58 - then inside our for Loop we can assign
218:03 - the values from array which is this
218:05 - array to the pointer array like this so
218:09 - we will just use the pointer array
218:13 - variable name and in the bracket we will
218:15 - provide index as I so it will
218:19 - increase as the value of I increases is
218:23 - equal
218:24 - to the address of
218:27 - the array Index right so this variable
218:31 - but the address one by one right so we
218:35 - will add this which indicates we are
218:38 - going to uh show the address or we are
218:41 - going to access the address of uh the
218:44 - variable which we write just after this
218:48 - end symbol so we are going to write
218:51 - access the address of value array at
218:55 - index I okay and hopefully in arrays
219:01 - when I have shown you how to use arrays
219:04 - using for Loop and how to access the
219:06 - values of array using for Loop you know
219:10 - uh this concept of iterating the values
219:13 - of array using for Loop so I'm not going
219:16 - to repeat this uh basically this for
219:20 - Loop we are going to use to iterate over
219:23 - this array one by one so I if I have the
219:27 - index zero we are accessing this 30
219:31 - value if the index is one we are going
219:33 - to access this if the index is two we're
219:36 - going to access this value right so BAS
219:40 - basically what we have done we have
219:43 - assigned the
219:45 - addresses to our pointer array right so
219:51 - index of pointer is equal to you know
219:54 - whatever uh value is at this
219:58 - index the address of this right so what
220:02 - we have done
220:06 - here assign
220:09 - the
220:13 - address of
220:17 - array array
220:21 - elements okay now once we have assigned
220:25 - all these values to the pointer Now
220:28 - using this pointer you can access all
220:32 - these values how we are going to use
220:36 - once again a for
220:38 - Loop and in this follow Loop we are
220:41 - going to use or access our value using
220:45 - this pointer okay so what we are going
220:48 - to do
220:50 - here we are going to access our array
220:54 - like this so we will print T print F and
221:00 - then we can
221:02 - write
221:04 - uh variable array I for example or value
221:10 - value of variable array or well
221:15 - array at index
221:22 - I and then is equal
221:26 - to the value so what will be the value
221:31 - so what we can write here
221:35 - is basically instead of this I we can
221:38 - just use percentage D so write
221:42 - percentage D is equal to and then
221:46 - percentage D which will give you the
221:48 - value right and then after comma or
221:52 - let's give a line break to it also and
221:56 - then after Comma just write I after
221:59 - Comma just write the
222:03 - pointer now pointer this towards the
222:07 - address right and then whenever you
222:12 - write this something like this because
222:14 - we are in for Loop this contains the
222:19 - address of the index which is contained
222:24 - by I so basically this value is a
222:28 - address of a variable but if you want to
222:33 - access the value of uh this address or
222:37 - value which is contained at this add
222:40 - address we just need to use this D
222:43 - reference sing pointer once again like
222:46 - this okay and
222:49 - semicolon and now once we run the
222:52 - program let's see what happens build the
222:56 - program and we can access the value
222:59 - value of Val array is 0 is equal to 30
223:02 - which is true 30 40 50 value of Val
223:07 - array 1 is equal to 40 Value of well
223:10 - array at index 2 is equal to 50 so
223:15 - basically you can assign your
223:18 - array to a pointer array like this and
223:23 - then access your array using a pointer
223:27 - array like this okay so in this way you
223:33 - can uh use array pointers in C hello
223:38 - guys welcome to the next video tutorial
223:40 - on C programming for beginners in the
223:42 - last two videos we have been seeing how
223:45 - to use pointers in C and how we can use
223:50 - array pointers in C now in this video we
223:54 - will see how we can pass
223:57 - pointers as an argument of a
224:01 - function so let me give you an
224:04 - example for example we want to pass uh
224:09 - uh
224:11 - variable as an argument to a function
224:15 - which is a pointer so for example I will
224:19 - write uh a function which will
224:24 - uh take pointer as an
224:29 - argument so I can return void which is
224:34 - returning
224:36 - nothing
224:38 - void and then
224:42 - get value for example this is the name
224:45 - of my pointer and I am this is the name
224:49 - of my function I beg your pardon and
224:52 - then I am passing an argument which is a
224:56 - pointer to this function right
225:01 - so uh
225:04 - my pointer for
225:08 - example pointer
225:10 - okay and
225:13 - then what I'm going to do is basically
225:17 - I'm
225:19 - assigning this so my pointer is equal to
225:24 - Su value okay
225:27 - so something like
225:30 - this pointer is equal
225:33 - to some value for example 1
225:38 - 10,000 okay okay
225:42 - now what this basically uh doing is uh
225:47 - we are using a function get
225:51 - values to assign whatever you pass as an
225:55 - argument of this function is equal to
225:59 - 10,000 right and because we are not
226:02 - returning anything whenever you want to
226:06 - return void in C you can just write
226:11 - return without returning anything just
226:15 - the keyword return and it means that you
226:18 - are not returning anything but your
226:20 - function ends here right now in order to
226:25 - use this uh get value function here in
226:29 - our main for first of all we will
226:31 - declare a variable for example
226:34 - int
226:36 - get
226:38 - uh the
226:42 - value for example right and we are not
226:45 - initializing it uh just the consider
226:50 - this because we will store at the
226:55 - address of uh this
226:58 - variable this value right so let's see
227:02 - how we can do this so we will just call
227:06 - get value
227:08 - function and remember what I have said a
227:12 - pointer once again a pointer is a
227:15 - variable whose value is the address of
227:19 - another variable right so this pointer
227:23 - is basically whenever you want to pass
227:26 - some variable in place of this pointer
227:30 - as an argument of this function you can
227:34 - basically pass the address of some
227:38 - variable in here as an argument right so
227:42 - how we can pass the address of some
227:45 - variable address we can pass it like
227:48 - this
227:52 - and whenever we write this address at
227:56 - the front of a variable it means the
227:59 - address of this variable right so
228:02 - basically you can do something like this
228:06 - so just always remember this definition
228:09 - a pointer is a variable whose value is
228:12 - the address of another variable so this
228:15 - is a pointer so in place of this pointer
228:18 - we can pass the address of another
228:21 - variable right and
228:25 - then what we will do here is print
228:32 - F the value so
228:37 - the value
228:42 - of get value right so the Magic Begins
228:46 - here so the value of get value is equal
228:51 - to percentage
228:53 - D and
228:56 - comma and then this value right so what
229:00 - do you think will be the value of this
229:03 - uh
229:05 - variable remember we haven't initialized
229:08 - our variable but we have assigned this
229:12 - variable to the function as an argument
229:15 - right so let's see the answer and then
229:20 - we will uh analyze what we have done so
229:23 - compile the
229:24 - program and it runs fine and it says the
229:28 - value of get the value variable is equal
229:32 - to
229:33 - 10,000 now let's see what we have done
229:36 - here so what we have done basically here
229:40 - is what is this function doing this
229:43 - function is taking a pointer or
229:46 - basically a address of a variable right
229:51 - because a pointer is a address of
229:54 - another variable right so we have passed
229:59 - address of another variable so this
230:03 - argument can be replaced by this value
230:07 - right address of the variable and what
230:11 - we have done basically is we have
230:14 - indirectly here what we have done here
230:18 - basically indirectly assign value
230:22 - 10,000 at the address of this variable
230:28 - right
230:30 - now whenever we uh will access this
230:35 - variable this value we will be able to
230:38 - access right right so this is the magic
230:41 - of pointer so you can assign some value
230:44 - to the address like this and you can
230:49 - access this value at the address like
230:53 - this okay and here you are not even
230:57 - returning anything but this address can
231:00 - store this value using pointers right
231:06 - so it's I mean for the first time when I
231:10 - have seen something like this it looked
231:13 - like a magic to
231:15 - me now the next thing is I have told you
231:19 - when I have uh uh shown you how to use
231:23 - arrays as an argument of a function and
231:27 - at that time I have told you that you
231:30 - can also pass pointers as an array
231:35 - arguments right so let's take another
231:39 - another another example okay so I will
231:43 - delete all this and how we can pass
231:47 - pointer array as an argument of a
231:50 - function so for example I will take uh
231:53 - the same
231:55 - example that we are going to return
231:58 - integer value and we want to know the
232:02 - sum of every element of an array for
232:06 - example
232:07 - int um
232:10 - my
232:12 - array and this array contains for
232:15 - example four
232:19 - variables and these four variables can
232:23 - be anything so you can assign for
232:26 - example 10 comma 20 comma 30 comma 40
232:31 - okay and we want to uh get the sum of
232:35 - each of the elements 10 + 20 + 30 + 40
232:39 - basically and then we want to get the
232:43 - results we will make a function which
232:44 - returns integer and then we can say get
232:50 - sum it
232:51 - takes array as an argument but I have
232:55 - shown you you can pass uh array in three
233:00 - ways to a function as an argument one is
233:05 - like int my
233:10 - or
233:12 - uh
233:15 - array well like this or you can just
233:21 - Define the size of the array or third is
233:25 - Third Way is you can just
233:28 - pass array like this as a pointer right
233:33 - and in this example we are going to just
233:36 - do the same so we are passing
233:39 - this pointer
233:41 - array and then we will also Define the
233:44 - size for example so
233:47 - in size and we will then just use this
233:52 - array to get the sum so we'll just write
233:57 - four but first of all Let's uh declare a
233:59 - variable which will contain the sum sum
234:03 - is equal to zero and then
234:06 - for inside this for Loop
234:09 - we will write int I is equal to0 and I
234:14 - should be I should be less than the size
234:19 - whatever we pass so this size is the
234:23 - size of the array and in our case the
234:26 - size will be four
234:29 - right semicolon I
234:32 - ++ and
234:35 - then we will just make a sum like
234:40 - sum plus is equal to if you remember I
234:44 - have given this example when we have
234:46 - seen how to pass arrays to a function
234:50 - right is equal to and
234:54 - then we can just take the
234:58 - array and then at every index of this
235:03 - array we are just summing this so
235:09 - we are just adding it to the sum right
235:13 - and once we have all the sum we will
235:17 - just return
235:22 - sum okay this should be
235:28 - return
235:30 - okay now we are passing this array we
235:35 - are going to pass this array as a
235:37 - pointer right so we will call this
235:40 - function get
235:42 - sum and in here we will also uh declare
235:46 - a variable
235:48 - in uh my sum for example and is equal to
235:54 - because this will return this function
235:56 - get sum will return the sum of the array
235:59 - which we will pass as an argument you
236:02 - can
236:03 - just store it into this variable so I
236:07 - will pass this my array as a first first
236:11 - argument and the second argument is the
236:14 - size of the array which is four you can
236:17 - see here and then we are going to
236:22 - print the value of my sum print
236:26 - F print
236:30 - F and the
236:33 - value the
236:35 - value of my
236:40 - sum is equal to percentage d right and
236:48 - let's see the what is the value of my
236:53 - sum and
236:55 - basically let's try to run the program
236:58 - and let's see if it matches the answer
237:01 - run the program and it gives the my sum
237:05 - is 100 so 10 + 20 is 30 30 + 30 is 60 60
237:12 - + 40 is 100 so our sum is correct right
237:17 - you can just increase the value of
237:20 - element in the array for example 5
237:23 - 50 and the size will be now five here
237:28 - and run the program and basically you
237:31 - got the answer 150 right so in this way
237:36 - also you can pass array to a function as
237:41 - a
237:42 - pointer hello guys welcome to the next
237:44 - video tutorial on C programming for
237:46 - beginners and in this video we will see
237:49 - how string Works in C and what is a
237:54 - string now what is a string first a
237:58 - string is a single dimensional array of
238:03 - characters which is terminated by a null
238:07 - character now now let's see how we can
238:10 - declare string in Array and then we will
238:14 - look this definition once again so what
238:17 - I have said a character array so
238:19 - character array you can declare it like
238:21 - this care and for example
238:26 - my
238:28 - string this should be string and then
238:31 - character array so square bracket for
238:34 - example we Define the size of this is
238:37 - this array as six is equal to and here
238:42 - comes uh these curly braces and inside
238:46 - the curly bra braces you can Define the
238:50 - initialization to these characters right
238:53 - or you can do something like
238:56 - this okay
238:59 - so this is called a string once again
239:04 - the definition a string is a array of of
239:09 - character so this is the array of
239:13 - characters which
239:15 - is null terminated so in
239:19 - this/ Z in C is
239:23 - called null terminated character okay
239:29 - and so this hello is the string and our
239:34 - string is terminated by this null
239:37 - character that that's why we are saying
239:39 - our string as null terminated character
239:45 - array
239:46 - right in other terms you can define a
239:50 - string with a character array of uh
239:55 - non-definite size for example care
240:01 - my
240:04 - other string and we give our our a uh a
240:09 - non-definite size which is not defined
240:13 - and you can just write something like
240:17 - this and it's also totally valid okay so
240:21 - you can Define string in two ways in C
240:25 - one is like definite sized array and you
240:29 - can initialize it like this
240:32 - or uh undefined sized array of
240:36 - characters and you can initialize it
240:38 - like this now to print these uh string
240:42 - you can just use print F not this but
240:47 - print F and I can just print my string
240:51 - so I can write
240:54 - my string
240:58 - value is equal to percentage s so here
241:04 - we are using percentage s to uh print
241:07 - string
241:08 - right and comma we will just use this
241:16 - variable and let's see what is the value
241:18 - of this variable and let's uh give a
241:21 - line break to
241:24 - the message we are printing so that we
241:28 - can print in the next line the next
241:30 - message and in here we will just write
241:36 - my other string value and we will print
241:39 - this second variable like this okay and
241:43 - let's compile and run the program and
241:45 - it's printing the same value right my
241:49 - string value is equal to hello my other
241:52 - string value is equal to also hello
241:56 - right so in this way you can
241:58 - Define string in Array now there is a
242:03 - header file in C called string which you
242:08 - can add to your uh main. C and then you
242:14 - can use some function from this header
242:17 - file and you can perform some different
242:21 - uh functionality using this header file
242:24 - so first of all we will include this
242:26 - header file in our uh C main. C file so
242:32 - just
242:34 - include and then we will
242:37 - add
242:41 - string or string do H right so this is
242:46 - the header file in C which we can use to
242:50 - uh perform different uh functionality
242:55 - with string
242:58 - okay now the first F function from this
243:02 - string.h we are going to use is string
243:06 - copy s
243:08 - TR
243:10 - CP y okay this is this function and this
243:16 - function what it does is it enables us
243:20 - to
243:21 - copy one string to another okay so for
243:26 - example we have a string of some size
243:32 - for example let's
243:36 - say we have a
243:38 - string so
243:45 - string string one for example and we
243:49 - give this uh array of size of 12 and
243:54 - let's uh Delete for this for now
243:59 - and then we will declare in the same
244:03 - manner string two of size 12 and I will
244:08 - tell you why I'm taking this size as 12
244:11 - okay in a moment and we will declare a
244:15 - third
244:16 - string and it's also of size 12 but we
244:22 - are not initializing it
244:25 - okay this should be string three okay
244:29 - and now using this string do H had a uh
244:34 - Hader file we can use this function
244:37 - called string string cpy and it takes
244:40 - two argument one is the destination and
244:44 - one is the source okay so for example we
244:48 - want to copy this should be for example
244:51 - let's change this
244:53 - to World okay so for example I want to
244:59 - copy string one to string
245:02 - three so this string copy function
245:06 - copies string one to string three in
245:11 - this way so you just write or you just
245:14 - take a variable in which you want to
245:18 - copy first as a first argument of Str
245:21 - Str copy and then you take the second
245:27 - argument this second argument is the
245:30 - variable whose value you want to copy
245:33 - okay so in other other word you can just
245:38 - uh think like this
245:40 - s CP
245:43 - Y and it's used to uh copy to
245:48 - D which is
245:50 - destination from
245:54 - source source this should
245:58 - be Source okay so to the destination
246:03 - from source so source is string one from
246:07 - which we want to copy and destination is
246:10 - uh string three and to which we want to
246:14 - copy
246:15 - okay now there is another function in
246:20 - string.h header file which is called
246:24 - string cat
246:26 - St c a t and this
246:31 - function allows us to concatenate two
246:35 - strings for example
246:38 - we want to concatenate this first string
246:42 - and second string we can concatenate it
246:45 - like
246:47 - this
246:48 - so just take a first string comma second
246:54 - string okay so we want to concatenate
246:58 - first string and just after that you
247:01 - want to join second string to it you can
247:05 - do it like this okay and when you hover
247:09 - over
247:11 - this what it
247:13 - says this says that this also can return
247:19 - some value
247:22 - okay so what's uh this uh string cat
247:27 - basically doing is
247:29 - it's adding string two to string one
247:33 - okay so
247:36 - add
247:39 - string 2
247:43 - to string
247:45 - one which should be like
247:49 - this string two to string one okay now
247:53 - there is another function in uh C in
247:59 - this header called s t r l e n and this
248:06 - gives you the length of the string okay
248:09 - so for example we want to get the length
248:11 - of the string length means number of
248:15 - character or size of this uh uh
248:19 - character array for example right so we
248:23 - will do this also and this we will save
248:27 - in another variable for example we name
248:30 - this variable as integer length
248:36 - in
248:40 - length string one is equal to okay so
248:45 - this St Str length Returns the string of
248:50 - uh the variable which you pass it as an
248:54 - argument let's try to print all these
248:58 - values so first of all print
249:02 - F and this is the result of string copy
249:07 - we want to print for now for example
249:11 - string
249:12 - copy uh is equal to and percentage
249:18 - F percentage
249:20 - s and then we will just see the value of
249:24 - this uh string three because it we are
249:27 - copying into string three from string
249:29 - one using this
249:31 - function now in the same way let's
249:35 - change the line here in the same way we
249:38 - will see how this string cat works and
249:44 - we will see the value of string one
249:48 - because we are adding string two to
249:50 - string one so let's see the value of
249:52 - string one and we will also see the
249:56 - length so we will also see something
250:00 - like this so we will also verify this St
250:04 - Str Len and this this will be verified
250:09 - by this but this is the integer so we
250:12 - will write percentage D
250:15 - here let's try to compile the program
250:18 - and run it and it
250:20 - says first of all the string three value
250:24 - is hello which is true because we are
250:28 - copy we have successfully copied the
250:31 - value hello to string three okay so this
250:34 - is printing hello now second string
250:38 - s Str cat have concatenate our
250:41 - concatenated our first string and second
250:44 - string which is hello world so it has
250:47 - added second string to the first
250:50 - string the third uh value returns us uh
250:57 - 10 why it's returning 10 because now our
251:01 - string one has the size of 10 because
251:04 - it's hello world 1 2 3 4 4 5 for hello
251:09 - and 1 2 3 4 5 for world so string size
251:14 - is hello world
251:17 - now for example we want to see the size
251:20 - of uh string three it should be five
251:23 - because it only contains hello in it
251:26 - right compile it and it says
251:30 - five because the size of string three is
251:33 - h e l l o which is 1 2 3 4 5 characters
251:38 - that's why it's showing five here okay
251:43 - there are other functions in uh this
251:46 - header file uh for example string uh
251:50 - compare or some other functions for
251:54 - example you want to compare two strings
251:57 - you can use St
251:59 - Str
252:01 - cm and this compares the two strings so
252:05 - for this
252:08 - string. file is a very important uh
252:12 - header whenever you are working with
252:15 - string files hello guys welcome to the
252:17 - next video tutorial on C programming for
252:20 - beginners and in this video we will see
252:23 - what are structures in C and how we can
252:27 - use structures in C so the first
252:30 - question is what is a structure in
252:35 - C uh in C a structure is a collection of
252:41 - different uh variable which are grouped
252:44 - together to make uh make some
252:48 - logical uh group so for example I want
252:51 - to make a structure of a
252:55 - student uh there is no direct variable I
252:59 - can U uh give to define the attribute
253:02 - for a student so that I know that this
253:06 - uh attribute is for some particular
253:08 - student there can be many students and
253:11 - there can be uh you know I have to
253:14 - declare so many uh variables and in the
253:19 - end when I have so many variables I can
253:22 - get confused uh
253:24 - which which variable is assigned to
253:28 - which student so structures make it very
253:33 - easy to uh Define if you have a group of
253:38 - variable to which you want to bind uh in
253:43 - a logical group so let's see how we can
253:47 - uh uh declare a structure in C so
253:51 - structure you just uh need to use struct
253:55 - keyword in U to define a structure and
253:59 - then the name of the structure for
254:01 - example student and then comes these uh
254:05 - curly braces uh just need to change the
254:08 - fonts so then comes these uh curly
254:12 - braces here and then inside these curly
254:15 - braces you can Define your variable so
254:20 - what attributes the
254:23 - students can have he can have his ID his
254:28 - or her so this ID can be an integer so I
254:32 - will Define int
254:35 - ID then a student can have his uh name
254:41 - so I can Define string as a name
254:47 - so string for example
254:50 - care
254:52 - uh pointer I can Define it as
254:57 - name hello guys welcome to the next
254:59 - video tutorial on C programming for
255:01 - beginners and in this video I will teach
255:04 - you what is a structure in C and how we
255:08 - can use structures in C now what is a
255:12 - structure structure is a group of
255:15 - variable which you can group uh together
255:19 - to make a logical uh you know variable
255:23 - for example you want to Define some
255:25 - database of uh some student or you want
255:28 - to uh uh create some record of a student
255:32 - or some students uh it will be very
255:36 - difficult to Def Define variables to
255:38 - each student and then if in the end if
255:42 - you have many variables containing the
255:44 - student record uh it can get a little
255:47 - bit messy but uh we can uh make this
255:52 - situation better by using structure so
255:56 - structure is a logical uh group of
256:00 - variables so to define a structure for
256:03 - example I want to define a structure of
256:05 - student uh to define a structure we use
256:09 - a keyword called
256:11 - struct and then we uh give the name of
256:16 - the structure for example I give the
256:18 - name to my structure as
256:20 - student and then comes curly braces and
256:24 - inside these curly braces you define
256:27 - your attributes for this student
256:32 - structure okay so for example what
256:36 - attributes or what traits a student can
256:39 - have a student can have uh his ID which
256:44 - can be integer ID student ID can be
256:47 - integer so I Define integer then student
256:51 - have his name which can be character and
256:54 - student can have his score or marks
256:58 - which can be in percentage and
257:00 - percentage we will Define it as a
257:03 - floating uh point so uh he can have
257:07 - these three attributes or these three
257:09 - traits right now for each student we can
257:13 - Define this a different uh you know
257:16 - instance of a structure and we can use
257:20 - structure uh to make a logical group of
257:23 - these three variable for a particular
257:26 - student okay now once you define uh the
257:29 - structure this kind of structure you can
257:32 - use it in your main function like this
257:35 - so whenever you define a structure you
257:37 - need to call it inside your main
257:40 - function and how you can call it you can
257:43 - just copy the name of the structure and
257:46 - struct keyword itself and then give the
257:50 - name to this student structure right so
257:55 - for example you will give this student
257:59 - structure
258:01 - name record one for example this uh
258:07 - indicates the student record student
258:11 - record of student one for example right
258:14 - now this is the variable you define for
258:19 - this student structure so this can be
258:23 - treated the student can be treated as a
258:26 - data type in this case and structure is
258:29 - a key keyword which tells that it's uh
258:33 - uh student data type which is a
258:35 - structure okay and this is your variable
258:39 - name just uh think it think it like this
258:42 - okay now whenever you want to assign
258:45 - some value to this record which is a uh
258:50 - instance of uh the student structure
258:52 - instance means one uh part of this
258:56 - student uh then how you can do it you
259:00 - can just do it simply like this so you
259:03 - just need to take this
259:05 - record and you for example you want to
259:09 - assign ID to this uh record you just
259:12 - need to use this dots separator and you
259:16 - will be able to see the
259:18 - member variables of this uh student uh
259:23 - structure you can see automatically in
259:25 - code blogs okay so these ID name and
259:31 - percentage are called the members of the
259:34 - structure okay and you you can call them
259:37 - using this dot separator or after this
259:41 - variable okay so for example student
259:45 - ID is equal to uh one for example I have
259:50 - assigned one to record one and student
259:54 - uh name so I will once again use this do
260:00 - name and then I can assign any name to
260:03 - this
260:05 - student but if you remember in the last
260:08 - video when I uh teach you what are
260:11 - strings I taught you how you can copy a
260:14 - string to uh you know a character array
260:19 - right or you can assign or copy a string
260:22 - you can just use a function called
260:25 - St
260:27 - St cpy which is string copy and then you
260:32 - can use uh this thing so the first
260:37 - argument of this function is the
260:40 - destination where you want to assign the
260:42 - value and second uh uh argument is the
260:46 - value itself for example the value
260:50 - is John so basically what we have done
260:54 - is we have assigned John as a value to
260:58 - this uh name variable record. name
261:02 - variable okay and the third we can
261:05 - assign percentage like the same so
261:08 - record
261:09 - one dot
261:12 - percentage is equal to for
261:16 - example uh
261:21 - 70.2 okay these are the percentage
261:24 - scored by him okay now once you assign
261:29 - uh these uh values to the structure or
261:33 - the to the instance of the structure you
261:35 - can access these values also using uh
261:39 - your print uh uh print function so just
261:44 - use print and then you can just call for
261:48 - example
261:50 - ID so
261:54 - uh you can just write ID is equal to
262:02 - percentage
262:04 - D and then you can just give the space
262:08 - uh and just write name is equal to
262:15 - percentage s and just gives little bit
262:18 - more space and then just
262:22 - write percent is equal to uh percentage
262:27 - F okay so this is for holding the
262:31 - decimal value this is for holding the
262:32 - string this is for holding uh the float
262:36 - in point right and we will give the line
262:39 - break here also and then we will assign
262:42 - or we can we can access the values which
262:45 - we have assigned just by like same as we
262:50 - have assigned the values so record. ID
262:52 - will give you the ID record. name will
262:55 - give you the
262:58 - name and record. percentage record one.
263:02 - percentage will give you the percentage
263:05 - okay like
263:07 - this so let's uh break this print into
263:12 - few lines so we can see it easily okay
263:17 - so we can access these values like this
263:21 - okay so let's try and run the program
263:23 - and hopefully it doesn't contain any
263:25 - errors and you can see ID is equal to 1
263:29 - name is equal to John and percentage is
263:32 - equal to 70.1 1999 which is 70.2 Z right
263:38 - so in the same way you can uh Define
263:42 - different instance of the student
263:45 - structure and you can maintain a record
263:48 - of the student for example uh you define
263:52 - uh some different structure so I will
263:54 - just copy the same and paste it below to
263:58 - uh Define a second uh
264:00 - record and this record I will name it as
264:04 - record two everywhere I will just change
264:07 - it record two record two record two here
264:11 - also record two so I will just copy
264:14 - record two for the student two okay and
264:18 - the ID now is uh two the name will
264:22 - change for example Mark and the
264:25 - percentage also changes for example
264:31 - 9130 okay and now we have two two
264:36 - records of the student student with uh
264:40 - student ID 1 and student with student
264:44 - id2 so logically we have two record for
264:47 - students right run the program and now
264:51 - it says ID is equal to 1 name John
264:55 - percentage 70 something ID is equal to 2
264:58 - name Mark percent uh 90.1 something
265:03 - right so in this way you can uh
265:06 - Define as many instances of this
265:09 - structure as you want and you can uh you
265:12 - know create
265:14 - uh uh record for the
265:18 - student or so this is one way of using
265:23 - structure there's one more way of using
265:26 - structure uh in C and this is by
265:31 - directly giving the name to your student
265:35 - uh structure for example I can just
265:39 - delete this line from
265:41 - here and instead of giving the name to
265:46 - this uh uh student variable here I can
265:51 - just give the name at the Declaration of
265:55 - this student structure for
265:58 - example
266:02 - record right and then this record
266:06 - will be my variable name okay so the
266:10 - student is the structure and record will
266:14 - be the variable name of your uh
266:16 - structure okay and then you can use this
266:20 - record to uh uh you know access the
266:24 - value or assign the values to this
266:26 - record for example here you can just
266:30 - replace
266:31 - record like
266:33 - this and it will work like same so you
266:36 - you don't need to declare this record
266:38 - inside your main this can be also
266:41 - declared like this and this will be your
266:44 - variable name and you don't need to
266:45 - declare inside your main and when you
266:47 - run the program it'll run fine it'll
266:50 - give you the output so in this way you
266:54 - can use structures in C and uh try uh
266:59 - you know using structures uh by yourself
267:03 - and try practicing uh using structures
267:06 - and you will be good to go hello guys
267:09 - welcome to the next video tutorial on C
267:11 - programming for beginners and in this
267:14 - video we will see what is a union and
267:18 - how we can use Union in
267:21 - C now in the last video we have seen how
267:24 - to use structures in C and Union
267:28 - functionally work like structure but
267:32 - there are some key differences between
267:34 - structure and Union which I'm going to
267:38 - discuss so first of all uh let's comment
267:42 - this
267:43 - structure for
267:45 - now
267:46 - and we are going to declare a union okay
267:51 - so as structure unions are also declared
267:55 - with a
267:56 - keyword Union and then you can give any
268:00 - name to the union for example
268:04 - my union
268:06 - and then comes these curly
268:12 - braces like these and then this
268:16 - semicolon okay and in Here Comes Your
268:21 - variables like you declare in the
268:24 - structure
268:26 - okay
268:28 - and if you know whenever we declare a
268:33 - variable it has some size size or
268:36 - depending upon the data type so integer
268:40 - has a size of four and character has a
268:44 - size of one bite okay so for example if
268:49 - we want to declare this uan Union Let's
268:53 - uh Define the union type
268:55 - also u u and I for
268:59 - example and now we declare a union
269:04 - here un I and then we can
269:08 - [Music]
269:10 - use un to give values to our my int
269:17 - variable and my car care variable for
269:21 - example my in is equal to 4 and then un
269:25 - I dot
269:28 - my
269:30 - car is equal to 9 okay and and uh now
269:37 - let's compile if it works or not and you
269:41 - and I have the problem here so let's see
269:45 - what's the problem I should
269:47 - use something like this not here but un
269:52 - Union my union is equal to un I okay now
269:57 - compile the program and it works fine
270:00 - okay so now we are going to print the
270:02 - value of my care and my int here so we
270:05 - will just write
270:07 - print and inside the bracket we will
270:10 - just write percentage
270:14 - i/n for next line and then we just print
270:18 - the value of my care first
270:21 - okay un doare here and compile and run
270:27 - the
270:28 - program it here should be semicolon I
270:32 - forgot and run the
270:34 - program and what's the problem
270:38 - here the problem is warning implicit
270:41 - Declaration of
270:45 - something so problem is here in print f
270:49 - it should be print F and when I run the
270:51 - program it gives me five which is
270:53 - correct you uni. my care we have
270:56 - assigned the value of nine which is
270:58 - giving the answer but let's see what
271:01 - happens when we try to access the value
271:05 - of my int okay here we will try to
271:09 - access the value of my int instead of my
271:12 - care it gives us the same result which
271:15 - is nine which is not true so what's
271:18 - happening
271:21 - here so whenever you define a structure
271:25 - like
271:26 - this it allocates its varable or member
271:31 - variables to some memory space so for
271:34 - example you have defined uh variable my
271:38 - my int and my care in your my stru
271:43 - structure then it allocates four bytes
271:46 - of memory in some memory space in your
271:49 - computer for myint and it allocates uh
271:53 - one byte of memory for this character in
271:57 - some other memory space so when we see
272:00 - in the memory uh map for example it will
272:05 - look like
272:06 - this 1 2 3 4 so these
272:14 - fours bytes are
272:18 - for your my
272:22 - in
272:25 - my int right my int variable or integer
272:29 - variable okay and this one byte is
272:34 - for
272:39 - care
272:40 - okay now whenever you use Union the
272:45 - memory mapping is little bit different
272:49 - so whenever you declare a union it has
272:54 - the size of the
272:56 - variable whose size is maximum so the
273:01 - maximum size of a variable inside this
273:04 - Union is is four which is from integer
273:08 - my int because uh four is greater than
273:11 - one so the size of Union will be four in
273:14 - this case so Union allocates the size to
273:19 - itself from a variable whose size is
273:25 - maximum so the union size in this case
273:29 - is four so inside of a this
273:32 - is struct for example
273:36 - and for
273:37 - Union the memory Maps will be something
273:40 - like this 1 2 three and four so it
273:45 - allocates memory this memory to the
273:49 - in
273:51 - integer and in a in the same memory it
273:57 - can
273:57 - allocate the one bite for the
274:01 - character okay so they share so members
274:06 - inside a union share this memory space
274:10 - or size but inside the structure they
274:14 - are allocated at different places okay
274:17 - so that's why whenever you assign four
274:22 - it will be assigned in these four bytes
274:25 - and so you have for the first time when
274:29 - you assign four in the integer it will
274:32 - be assigned here but as soon as you
274:36 - assign nine to this
274:38 - character then it will be
274:41 - overwritten to these four bytes okay
274:45 - that's why we are getting the answer
274:49 - nine
274:50 - here so this is the main difference
274:54 - between structure and Union structure
274:57 - allocates different memory location to
275:00 - its variable but Union allocates the
275:05 - same memory location and the size of the
275:09 - Union is the maximum size of a variable
275:13 - inside it so if my int has the maximum
275:16 - size the size of the Union will be the
275:18 - same now to prove this we can
275:23 - uh just print the size of these
275:26 - structure and the union okay so let's
275:31 - try to to print the structure size and
275:34 - use Union size okay so for printing the
275:38 - structure
275:40 - size there is a function
275:44 - called size
275:46 - of and using this you
275:49 - can calculate the size of the
275:53 - structure so our structure name is
275:55 - record in this case so we will just
275:59 - calculate the size of record and in this
276:02 - in the union case our Union name is UN I
276:07 - right so we can get the size of un I and
276:11 - let's uh
276:14 - say here the size of the SI
276:19 - size
276:21 - of
276:23 - struct and just below it we can say the
276:27 - size
276:32 - of Union okay and and compile the
276:36 - program and run the program and it says
276:38 - the size of structure is 8 and the size
276:43 - of Union is four okay now you may be
276:47 - wondering that the size of structure
276:50 - should be five because the size of
276:53 - integer is four for integer variable and
276:57 - the size of character is one for the
277:00 - character variable where does this eight
277:03 - comes from as a size because whenever
277:07 - structure whenever you provide some
277:09 - variable to the structure it calculates
277:13 - the memory or size by adding the size of
277:18 - these variable plus it gives the padding
277:22 - plus it adds some padding so that it can
277:26 - become the multiple of uh four or eight
277:30 - or something like this that's why it the
277:33 - you are seeing eight here because five
277:36 - is not the multiple of8 or four
277:41 - okay so structure provide or C provides
277:45 - some padding to uh the structure so that
277:49 - its size become eight instead of five
277:52 - but the size of Union is four as I have
277:55 - told you that the SI it's the size of
277:59 - the variable which has the maximum size
278:02 - so size of Union is four in this case
278:05 - is and you may also be wondering where
278:09 - we can use Union if they overwrite the
278:12 - stuff uh every time you you know try to
278:15 - access
278:17 - them the union are mainly used
278:22 - in embedded programming wherever you you
278:26 - know try to access some memory or
278:28 - something like this there uh it's mostly
278:32 - used but you need to read about this
278:35 - where can you possibly you know use this
278:39 - Union so I hope you have understood the
278:42 - basic concept of Union and I hope you
278:44 - have enjoyed this video please RIT
278:45 - comment subscribe and bye for
278:51 - now

Cleaned transcript:

hi welcome to this course on C programming tutorial for absolute beginners C is a very powerful functional programming language that's widely used and that has influenced many other languages most of the programming languages popular today are either direct descendants of C or are heavily influenced by C in this course I will show you the basics of C program and then we will dive into the details of data types strings and variables then I will show you how these basic ideas fits together with control structures like loops and if statements after that we will take a look at how C organizes informations in arrays and how it manages memory using pointers throughout the course I will emphasize good functional programming practices learning C is a great first step if you are a new programmer and a very good way to broaden your knowledge if you have already been programming for a while so let's get started with C programming tutorial for absolute beginners what you need to program C now there are two basic things you need to program c one is the editor editor helps you to write your code right and second thing is called compiler compiler is a small program or you can say it's a small tool which converts your program to the machine language right because the program or whatever your computer doesn't understand this uh C program which you write this C program is just uh the interface of which you are WR and it's easier to understand uh you know programming when you program in C but your computer just understands zeros and ones so this compiler will convert your program which you write and see into the machine language so that it can execute your program so these are the two things which you are require now in order to get these two things uh they they can be uh you know obtained free uh in different ways there are uh different idees idees stand for integrated development environment which helps you to write your code and I'm going to show you how you can uh install this IDE which is free to use uh and let's see how to install this IDE first so just open your favorite browser and just uh search for code blogs and the first link you will see here not this but only the code blocks so search for the code blocks and the first first link here you will find is www.code bls.org this is the website which uh host this uh program called Cod code blocks and it's a IDE so you can see the opensource crossplatform free C C++ and forter IDE so C is included in this and why I am recommending this uh code blocks to you because it's crossplatform that means you can get this on Windows Mac OS or Linux operating system and uh it's op source so you can get it for free right now how to download this you can just click this downloads uh button here or downloads button here I will click this downloads button here and there are some options which you can download there are there is option to download binary release download The Source release or retrieve source code from sub version svm what uh link we are interested in right now is this one download the binary release just click this link and in here you will find few options because I'm will be showing these tutorial on Windows I will install this version Windows um 2000 SL xp/ Vista 7 or 8 just click this link and then you will uh see these uh three options to uh install one is uh only code blocks which is uh the IDE which will help you to write your code second link uh will provide you the compiler also so just search for the link which uh has has Min GW in it okay which is the center link code blogs 13 and when at the time of making this video code blocks 13 is the newest version and just search for this word MV minv is a compiler which will help you to compile your program as I have said so it's including your compiler and editor both and we want uh this version right so just click this uh one link uh either this or this I will just uh click sourceforge.net link and then it will be downloaded in few seconds and download will be completed in few minutes because it's not a small file it's 97 MB file so it will take some time to download so just wait for for this to download and I will pause the video and I will continue once this file is downloaded and I will show you how you can install it so now this uh download is complete so we are going to uh install this uh code blocks in our Windows operating system I will just click this executable which I have downloaded and then the install will start and says welcome to setup just click next and you just read the agreement and if you AG agree just click I agree and click next and this is the location where code blocks will be installed just leave it as default click install and the install will not take uh much time it will be installed really fast you can see the code blocks icon here which you can click to open code blocks IDE and you can see uh it's installing really fast so I don't think it will take so much uh time to install this IDE and this code blocks IDE you can use it for programming other languages also like C++ or for for train also so in this way it's uh really good now if you don't have uh Windows operating system you can download this IDE on Linux also or Mac OS uh also it's available for all uh these three major major operating systems now it says the installation is done I think and do you want to run code blocks yes I want to run and it will run code blocks and says uh something I will click okay and here the installation is complete so I will click next and I will finish and you can see here code blocks is currently not a default application for CN C++ do you want to make it for as default if you wish you can uh make it as default or um you can leave this so I will just close it for now I don't want to make it as default but in this way you can install it hello guys welcome to the second video tutorial on C programming for beginners in the last video I have shown you how you can download code blogs which is a C++ IDE in which we are going to uh develop our C code and we are going to compile and run and test our code using this code blocks now in this video I'm going to show you how you can create your first C program and what is the program structure of this C program so let's get started first of all open your code blocks and then go to file and to create a new program you just need to go to new and then here you can go to the project so go to project and in here you can uh find few options but the option we are interested in is console applications so select this option called console application and click go and then it will show some uh message you can read this and you can click next and now we are going to create a c program so make sure that this C is selected here and click next and in here you need to give the name to your project so for example I want to give name to my project as my prog okay so this is the name of the project what name of the project depends upon you whatever name you want to give you can give it to the project and by browsing this you can uh change the directory in which you want to save your program so I will leave it as default but you can change it and just note this path so that you can see the source file if you want to see okay and click next and this is generally is showing the basic information about your project that it's going to use gnu GCC compiler which we are going to use to uh compiler application and it's going to create two uh version of your project one is called debug and other is called release for now it's not necessary to know all these things because uh we are beginners right so just click finish and when you click finish you will not see anything on this uh window but on the right hand or left hand side on the project tab make sure it's project tab you will be able to see a project name which is given by by you and a folder called source and inside this folder there is a file called C do uh main. C right and once you click this file maid. C you will be able to see the hello world program here now you can press control and scroll your mouse to make your code you know font size bigger or smaller so in order to make it bigger just press your control and scroll your mouse okay so I'm making it a little bit larger so that you can see and this is the basic structure of the program uh and it's called hello world program it's automatically created by code blocks for us so uh let's see uh we will go line by line and let's see what uh this code means so the first first line or rather first two lines which start from this hash symbol are called preprocessor command there are other preprocessor command also but these are the very most basic preprocessor command and a preprocessor command include includes a header file into your project so whenever you create create a c program there is already some files which we need to include in our project in order to write a program and this preprocessor uh command which is this hash include includes the file name which you give here and this are the most uh important files which uh we need to create a simple program and the first file is called stdio which stand for standard input output and this file is responsible for taking the input or printing outputs like this print app uh which I'm going to describe you in a moment so this function function also I will uh explain you in a moment but this uh is due to inclusion of this file now there is a file called STD lib which is this file and this file also we need to include because main whenever you write a c program and whenever you compile and run try to run this program your uh compiler or whenever you run Pro run your program your compiler sees the main function or searches for the main function in your project and this is like a entry point to your program so this main is the part of standard li. Edge so these are called preprocessor compiler now this int main is a function and it's a very basic function and it's uh builtin function which uh every program must have and by this mean C++ knows that it is the entry point of your program so every project must have at least and only one main uh function and what is a function function is a piece of code which you can you know EX execute for now you just need to know about this uh is a function is a piece of code which you need to uh you know which you need to execute some piece of code okay and the most basic function is Main and most important also function is main Now function has uh two or three basic uh things one is a return type which is int int stand for integer so this is int int is a data type which stands for integer and this main is the name of the function which is by default uh you have to give in small letters and this bracket takes an argument and for now we are not passing any argument so it's empty so every program must have this main function and because we are returning integer we need to end our program with return Z return Zer is just like a success for your main program so for now you just need to know that if you return zero and if you reach till this point your program has run successfully okay now print f this printf is a part of standard io. file so there is a function in this file called printf and this printf helps us to print a string on the terminal okay so this is a print F and inide this bracket whatever you write inside this printf in double quotes so always remember you need to write in double quote inside the brackets whatever you write it will be printed on the terminal so for now you are writing hello world so it will be printed on the terminal now this back sln changes the line which I'm going to demonstrate in a moment so this will not be printed but this is a special uh you know string or character ctor which will help you to change the line of your uh you know print now every line ends with this semicolon so this semicolons tells C that this line of code is ending here and from the next line we are going to write another line of code okay and every function is started with these opening and closing curly braces okay so this is the basic structure of a c program now once you have understood you can see every line is uh starting or ending with the semicolon and it's uh not necessary that you need to give this kind of indentation you can you know write a line of code here or like this or you know position doesn't uh you know it's not important you can you give two line gap between two codes or you know two lines of code or whatever but in order to uh you know show or make your program presentable there is uh you know design of a code which is uh best uh looking so this in this way your program looks good that's why we write it like this now in order to run your program you need to compile your program and in the last video I have shown you or I have told you what is compilation compilation helps your programs to convert this program into the machine language which your machine can understand this is the code which is readable by human but it's not understandable by the computer so compiler will help us to convert this code which is human readable to convert it into machine readable code and how you can compile your code there are three buttons in code blocks which is this one build run and build and run at the same time so to build bu your program build means compile compile and builds are same so whenever you click this build it will compile your program now there is one tab here and this tab also has this option called build run and run and build so you can go here also and build your program now I'm in order to build your program you always need to save your program first so all always click this save icon so to make sure that your pro program is saved and then click this build button and this whenever you click this build button the output of your compilation will be shown in this build log and if you don't see any error here you see here zero errors zero warnings and this means that a program contain zero errors and zero warnings so compiler also helps us to check whether our program is or we have written our program correct or not okay now once your program is uh compiled successfully with zero or errors you can run your program with this green button just click this button and now our program is running and it prints hello world and then it prints some uh something which uh doesn't interest us it's uh just thrown by uh you know terminal so this is what we are Printing and it's just uh saying that uh press any key to continue and whenever we press any key this terminal will go so this means our program is running successfully now if you want to build and run your program at the same time you can just click this button uh and this button build and run will build your program also and run your program so when I click this it will build and run my program at the same time now whenever you do some mistakes in writing your code your compiler will give an error for example by by mistake I left some unknown characters here after my print F print F function here and after the semicolon which are is unknown to uh the C compiler so whenever we save our program and compile it this will give us compilation error you see error and it's showing expected semicolon before a return right and it's not we haven't given semicolon here so it's uh giving us the error we added semicolon but still it's unknown to uh your C programs once again I compile it and it will still give us error because it says error this word is Undeclared right so whenever you write a code with which is unknown to see it will give you the error and this red mark where or from where which line this error is coming from so in this way you can check whether you have written uh the correct uh program or not so this is to check also you compile a program to check whether you have written something uh good or good or you have written something which is correct and to convert your program into the machine language and this to run the program you just click this button and it will run the program so this is how the C structure of program looks like and this is how it works hello guys in the last video I have shown you how to create your first C program and I have also explained you this code line by line to you now in this video I'm going to further explain you how to use these inputs and outputs like print F and other things in C so in the last video I've shown you uh that this print app we can use it to print any value to the terminal so whenever we run this code we will see that hello world which is uh inside the print app function brackets is printed and this slash and just changes the next line so for example I want to print hello world three times 1 2 3 and I will just build and run my program will it will be printed three times hello world and in the next line hello world and in the next line hello world but if you want to print this hello world uh again and again without any line break you can just remove this slash n so I will remove this slash and here and then I will just run my program and I can see this hello world is printed three times in one line so this slash and changes the line now for example you want to uh print some number how can you do this for so first idea which may come into your mind is just write a number for example print F32 but let's compile this program first it says some warning and when I run the program it will not uh run and it will give you some error because this is not how you print a number to in order to print a number you need to uh use a special place folder so for example I want to print 32 here I need to give a placeholder so just in your print app function in these bracket just give two double quotes and a comma and then give give a percentage sign so give this percentage sign and then D and I will uh explain you what this percentage D is but let's first try to build and run our program and it prints 32 now percentage D here is called a placeholder what this is called it's called a placeholder and and it literally means that percentage D is going to uh hold a place for the integer d stands for integer so if you write D it will hold an integer if you want to print a decimal value then there is a special character called f which stand for float and then you can print uh decimal value for example 32.2 so when I build the program it can print 32.2 now for example you just write here percentage D but you uh want to print 32.2 let's see what happens it doesn't print this number because this is a decimal value but we are providing the in integer placeholder to hold the decimal value which is not valid so you always have to remember that you need to uh keep in mind what kind of value you want to print now with this placeholder you can add your text also so uh for example I want to print the text with this placeholder that the number a is equal to and then write your placeholder so this placeholder will be replaced by 32 here so just uh imagine like this it will print the number is and whatever here it will be replaced by the number or the value you right after this comma okay and when I run the program it will print the number is equal to 32 okay now in order to uh print multiple decimal what you need to do is you just need to give multiple placeholder just space for example I want to print uh some value with separated by a space you just need to just copy and paste it three times and then after Comma just provide other values you want to print because uh we have written percentage D fre time and uh keep in mind here this is space so it will be printed 32 space 58 space 5 let's try and run the program and 32 58 and 5 right now there are different kind of data you can print for example I've shown you how to print this that's decimal it will print a decimal value one decimal value right now in order to I will just copy this and paste this not this one but I want to copy this whole string and paste it here I don't know why it's not copying right click and if there is a copy option we will copy it copy and right click and paste right so I will just copy this once again and try to paste it once again and for example I want to print a decimal value so it will be replaced by this F which is which sent for float now in order to print a big decimal value or large float value you use uh double and double is LF large float value in order to print a large uh integer value you use LD okay so I will just write some something here comment and this comment means double slash means a comment which I will explain you later and basically this comment means that whatever you write after this comment it will be not executed by your uh C program so this is integer and this is large integer and once again this is a double value or float value float and Float stand for f right and this will be large float large float stand for LF okay now for example you want to print a single character you use percentage C so so I will just write care for the character and Single Character you always enclose it in single codes okay for example I want to print C then just percentage C and then your character okay or a or whatever for example you want to print a string string means a sentence kind of thing so you use percentage as and then you can just print hello world here also in double quotes for example okay and inside this you need to print inside these double quotes and this is called string okay so this comment I will show you in the next video how these comment works but for now just understand that this this line after this double slash will not be executed okay now the if you want to print some hexa decimal value you can print it with this which X okay and for example you want to print the hex hexad decimal value for 16 it will be uh printed as hex value okay so I will write hex now I will run the program but bear in mind that they will be printed in same line because we haven't provided this line break here so we will provide this line break after every uh every uh line print so that they will be all printed in different lines okay different lines and this was decimal this was large decimal so uh you can just print a large number large number can be you can search for the large decimal limit and it has some limit and then the float value and then the large decimal float value for example this one and the character is okay string is okay and text is okay now we try to build my program and run it and it runs first it prints hello world which is a simple string then it prints 32 which is a decimal then it prints uh big decimal value not big decimal but big integer value which is this one then it prints the this float value with f percentage F then it prints the large float value which is uh this big decimal value then it prints the character a with a percentage C sign then it prints the string which is percentage s and then it prints the hexa decimal value of 16 which is 10 hexa decimal value of 16 is 10 okay so in this way you can print values using print F function okay so remember these placeholder values D for integer LD for large integer f for decimal values or float values LF for large float values C for character s for string and X for hexad decimal values okay now in order to uh take the input so for example you want that user should uh give some input and then you want to print this input so uh for example what you can do is for example uh you want that the user should enter some value okay and then it will be printed on the screen how can you do that you do that with a special function called scan F scan F function we generally use to take the input from the user okay for example I want to take input from the user as a string so I will write percentage s and then comma and then I can uh just give any value here and it will be uh taken by this uh scan F and if you want to print it you can print this value but this we will see uh later when we uh will understand how variable in C works and how uh uh these data types work in C so this we are going to see later but just remember scanf we use it to input values right now there is another special function which is called puts which is like this PS and it also prints the value to the screen so for example you want to print some value uh this is my C program you can print it like this also with by using print or puts function and when I run this program it will be running fine I will close this and compile and run this and this prints this is my C program so in this way you can input and output uh different kind of data using C on Terminal hello guys welcome to the yet another video tutorial on C programming for beginners and in this video I'm going to teach you about comments so as the name suggest comments are used to provide a description of your code and comments are generally not executed by your C program and for example you want to give some description of your program what is it it is doing or what uh is the purpose of uh your line of code you use comment to so in order to uh give comment to your C program you can use two uh ways one way you uh can use is for multiline comment multiline means uh more than one line comment and this is just write forward slash estx and then estx and forward slash okay and in between whatever you will write it will be called a comment and it will not be executed by your program or it will not be uh compiled even by a projects program it's just used to describe what what your program is doing so for example uh I can say that this program is and then I can uh go to a second line and I can just write more description this program is printing hello world for example uh so in this way you can provide multiline comments like this and this commment which is inside this forward SL estri and estx forward slash will not be executed or compiled by your C program it's just for your reference or uh if any other uh person sees your code uh by seeing these comments he will be able to understand what your program is doing and what you want to do in your program now in order to provide a single comment for example uh this line what this line is doing particularly I can give a comment to this line just give two forward slash and then you can write a comment so this is a print F function okay so you can write uh this command kind of command comments uh in your single line comments or you can uh you know place it here so you can place your comment anywhere in your code just keep in mind you need to provide double slash or forward slash estx and estx forward slash and with estx forward slash for forward slash uh and estx so in this way you can use comment in C program hello guys welcome to the next video tutorial on C programming for beginners and in this video I'm going to uh teach you about variables so I'm going to teach you what are variables and how we can declare variables in C and how we can use them so first question is what are variables variables are nothing but uh the data holder or you can save values in a variable so it's just like you want to save your age in some place you can store it in a variable and then you can extract your age uh using this variable also now variable has uh two different things one is called data type for example int int is an integer and then the name of the variable for example age and then you give a semicolon here and this is the Declaration of the variable now what uh this the variable means is we want to uh declare a variable called age age is the name of the variable and int is the data type data types is the type of data this variable is going to store so it's going to store integer in our case then it's uh initialized by this data type called int okay now you can assign some value to this age for example age is equal to 21 and then you can print this age by print a function for example the age is percentage D which holds integer value and then comma and then the variable name which is age okay and when you compile and run this program it will show you the age is and whatever the age value is which is 21 in our case right and you can see this the age is 21 so once again the variable are used to store some value okay now there are some rules for declaring the variables also for example you want to uh store the variables using some number starting with a number then you cannot do this so these are some rules I will just enclose them in the comments so that uh they are not executed the rules are your variable name cannot start with a number okay so for for example you want to start your variable with a number it's invalid the number must not be there or or at the initial place okay so whenever you compile this program it will give you an error because your variable name starts with a number but it can end with a number or the number can uh you know come in between your variable name it will be totally fine because what's the problem here yeah this age I will just commend this out because H I haven't declared it yet right so it's totally fine to have numbers in between your word but your variable name cannot start with a number okay the second rule is your variable name cannot have spaces so for example you want to declare a variable called any age for example uh with a space in between so so this is invalid you cannot have spaces in your variable name right the third rule is you cannot start or uh use any special character for example dollar you want to use dollar to initialize the variable name it's not allowed or you want to use S in between your variable name it's also not allowed okay so avoid using special characters in variables but but it's totally fine to use underscore underscore is an exception which you can use as a special character in between your name so for example mycore age is totally valid variable name okay the fourth rule is always avoid to use special function names for example main is uh the function fun already declared in C if you want to declare main as your variable name it's okay but it will create conflict in C because c will think that this is a function name and you have declared it as a variable name so it will give you some conflicts and in the warning also when you compile this program it says main is usually used as a function so avoid using any special function name names in as a variable name okay so these are some rules for the variable names and you can also initialize your variable like this 21 it's totally fine whenever you declare your variable you can at the same time you can initialize it by this equal to sign okay and whenever you build and run it'll run totally fine now there are different type of variable Ables uh I will just run this program and then I will show you what are different type of variable name which are very basic to see so you can declare integer variable names for example you want to declare uh uh decimal uh Point variables you can do it with the data type float so float you can use to store some uh uh floating point value or decimal values for example Pi Pi has the value for example 3.14 and whatever so it's a decimal value you can store this decimal values uh using a data type float okay now in order to uh store a character you use car and car you know you can name it as mycore care it's totally fine is equal to any character for example and always remember that whenever you want to uh store a character you store it in single codes okay so do it like this and it's totally fine and the fourth type is which is very basic is double double is also a data type and you can say this is a big pi value is equal to 3.14 and whatever is the value of pi big uh float value so these are the four basic data type you can use in C there are other data types but these are the most basic data type you can use to declare VAR Ables in C now I think that's it for this video hello guys welcome to the next video tutorial on C programming for beginners and in this video I'm going to teach you about simple math and math operators in C programming so basically there are some uh operators which you can uh use to do your math ma in C and these are called multiplicative and additive operators and the first operator is this plus symbol which is used for addition second is minus symbol which is used for subtraction third is estx which is used for multiplication fourth is this for forward slash which is used for division and the last is this modulus uh operator which is also called modulus so these are called multiplicative and additive operators now how we can use them so for example we have two numbers in a is equal to 23 for example and comma B is is equal to 45 and you want to add these two numbers how you can add these two numbers you can just declare another variable called sum and then you can add these two numbers like sum is equal to a + b okay and the result you can print it in print a function so you can just say sum is equal to percentage D okay and comma your sum function sum variable okay which is this one you can just compile and run this program and it returns error because I forgot semicolon save your program and compile and run your program and it will give the sum of 23 and 45 right so it will just print sum is equal to whatever is the sum of these two values which is 68 like this okay now in the same way if you want to divide or subtract these two numbers so I want to subtract 23 by 45 we just do a minus B which will be a minus value right so I will just compile and run my program and this will not be uh sum but the substraction I forgot to change the variable name but the result will be the subtraction of these two numbers which is 22 right so you can just name the sum instead of sum when you are doing subtraction you can name it as subtraction for example now in order to uh get the multiplication you just change the variable name as multiplication and just use estx for the multiplication right so a estx b will give you the multiplication of these two numbers and here you can say is product product is equal to this uh multiplication okay and compile and run the program it will give the multiplication of these two numbers and and in the similar way if you want to divide two numbers this is interesting so this is the product of these two numbers and in order to divide two numbers let's say this is division variable and in order to divide these two numbers you just use forward slash right and let's take two simple numbers first of all for example um 8 and 2 and I will just build and run this program and it will ideally give us 4 because 8 divided 2 is 4 right so it gives us four as expected but whenever for example I have nine and I want to divide it by two and by the way this is uh integer values so let's change it to float if uh 9 / 2 is 4.5 so that's why we will save it in float variable compile and run the program and it will give us the value let's see what value it gives us first of all and it gives us zero because we haven't changed this thing modulus f and compile and run the program in my computer I don't know why it takes a little bit time to compile this program and it gives us four which is not expected because uh 9 / by 2 is 4.5 but what this forward slash symbol do is it'll give you the whole division for example uh 9 / 2 is first of all you will divide 9 by two then you will give four and it will leave the point value so0 five it will leave Always by using this you will always get the multiple so four or whenever you have 11 it will give you five and the remainder it will not give you okay and in order to get the remainder so 11 / 2 is uh 5.5 and the when you divide by uh divide 11 by 2 it'll you know fully div divided by five and it will give the remainder of one right so in order to get the remainder you use this modulus uh operator and let's change it to modulus modulus and modulus and try to run the program and it get it will give one okay so this modulus always gives you the remainder and this division always give you uh the whole multiple values so one and when you use this it will give you five because it will always skip division always skip the remainder and remainder only shows the remainder and nothing else so in this way you can do simple math in see there are other operators this in C also which I will show you in the further videos but these are the simple math operators which are called multiplicative and additive operators and c and you can do math with these operators and one more thing if you uh want to know what is uh the Precedence of these operators if you uh have seen in uh your schooling you have some like PD Moss or um something like MD as something right and P stands for parenthesis right so parenthesis it has the main priority then multiplication division and then addition and then subtraction so always follow this rule to do the math and you will be good to go hello guys welcome once again in this video I'm going to show you how to use if conditions and what are if conditions in C so as the name suggest if condition or if statements check the condition whether it's true or false and on the basis of the condition it executes some code or it will not execute some other code okay so how we can declare if condition now I will give you an example first for example we want that we want to check some person's age and if this age is equal to 18 we want to print that the age is 18 if this age is greater than 18 we want to print that the age is greater than 18 and if this age is smaller than 18 then also we want to print the that this age is smaller than 18 so how we can do this we can do this by if conditions now to uh write if condition the structure looks like this you need to use this if statement or if if keyword and then these two brackets and inside these two brackets comes your condition so this condition can be true or false so we evaluate our condition inside this bracket okay and then in these curly brackets we execute some code on the basis of the uh you know validity of this condition if this condition is true the code inside these curly braces will be ex executed otherwise this code will not be executed now let's see how we can uh check the age of some person now for taking the age from uh the user at runtime we use scan F and you know I have Al also you know shown that this scan F you can use to take the inputs from the user right so I will just tell the user first by printing this message that please enter the age and in using this scan F I will take this input and because this age is an integer I will use this modulus D to take the integer and then comma then the age okay but the correct way of using scanf with any value is to use this end symbol before your Val variable name and what this end symbol indicate is the address of this value okay so in somewhere in your computer memory your variable will be stored okay and whenever you write this end in your before your variable name it indicates that you're uh you're scanning the address of this variable okay so whenever some user will enter some value it will be stored at this address and we can access this uh age value after that so I whenever I will execute this program you will uh understand it better so it will take the input and depending upon the age the user has enter for example the age if the age is greater than 18 or 18 we will print that the age is so if the age is greater than 18 we are checking the some condition here this is our condition age age is greater than 18 and in here we are going to print or execute some codes for example printing something that the age is greater than 18 greater than 18 okay now for example we want to check that if the age is equal to 18 then we can use some more if conditions so if the age is equal to 18 now to uh calculate or to compare equal to we need to use double equals sign because when if you use single equal to sign it will assign 18 to age but we want to compare these two values uh and to compare these two values we use double equal to here okay now if the age is equal to 18 then we will print the age is equal to 18 okay equal to 18 and here greater then now for example we want to check if the age is less than 18 once again we can use this by if condition and this time we check if the age is less than and less than symbol is this one less than okay if the is is less than then just write less then okay so we are going to check these three conditions if this condition is true this will be executed if this condition is true this one if age is it equal to 18 then this will be uh executed otherwise if this condition is true then this code will be executed so th this is condition based code execution I will build the program and run the program and first of all we are going to see this message please enter the age and we are going to enter the age so it says please enter the age I'm going to enter the age for example I enter the age 21 21 is greater than 18 so we are expecting this message to be executed be and because these condition are not met match then these code or these print F messages will not be printed so let's see the output just write 21 and press enter and it says age is greater than 18 which is true age the age is greater than 18 so this condition is true that's why we can see this message and because this condition age is not equal to 18 21 is not equal to 18 then this one is not executed and 21 is not less than 18 so this condition is not executed as well but 21 is greater than 18 so this condition is true and this message will be printed now let's try to run this program once again now this time we will uh enter 18 okay and now this time we can see the message the age is equal to 18 okay so age is equal to 18 because 18 is equal to 18 this condition is true and this is printed and other conditions are not true so their code is not executed once again we enter the age 15 and the third condition is true this time age is less than 18 15 is less than 18 so it says the age is less than 18 which is this message so in this way you can use if conditions in C hello guys welcome once again in the last video I have shown you how to use if statement in C programming now in this video I'm going to show you how you can use IFL statement in C and how you even you can use uh nested IFL statement in C programming so uh in the last video I have given you an example that how you can check the age of the person whether it's greater than 18 or equal to 18 or it's uh less than 18 right now I'm going to take the same example to uh demonstrate if else statement so uh what I'm going to do is I'm going to delete this stuff and now for example we just want to check whether the age is greater than 18 or it's not greater than 18 so we want to print if the great age is greater than 18 then we want to print the AG is greater than 18 otherwise we want to print that the age is not greater than 18 or age is less than 18 right so how we can do this we can do this uh either you can write uh some condition that the age is uh for example if condition condition and something like this from our last video but there is a condition called else which catches all the all the condition which is not true right so if age is not greater than 18 then the program goes to this else condition and this else as the name suggest that it indicates every other condition which is not satisfied by or if condition so if the age is not greater than 18 then it goes here in the lse statement so else after this bracket and then your curly bracket so else doesn't take any condition because it doesn't need to uh check any condition because it's everything other than this if condition right so in here we want to just write that the age is not greater than not greater than 18 right and I'm going to compile and run my program and this will give me the answer so please enter the age I will write for example age which is greater than 18 which is 21 and I will press enter and it says me the age is greater than 18 now I'm going to rerun the program and this time I'm going to give 15 Which is less than 18 right and I will just press enter and it says the age is not greater than 18 that means this condition is checked and if this condition is not true your program goes to this else condition or the else condition of this if statement and this line line will be printed right so this is how you can use lse statement whatever which is not true in this condition or which is not satisfied by if condition will be cached by this else condition right now there are situations where you need to check multiple uh situations so for example you can uh just check multiple condition by if else statement so for example you want to check if the age is greater than 18 or if the age is equal to 18 then you want to print age is equal to 18 otherwise you want to print that age is not greater than or equal to 18 so you can just give the L's here and then if and as the as the name suggests test you can check the second condition using this uh LF statement right and it also takes uh this curly braces just provide these curly braces here and here this if because if it we are taking if condition here so we need to check other condition for example age is equal to 18 a is equal to 18 we are checking whether the age is equal to 18 if the age is equal to 18 we can just print age is equal to equal to 18 otherwise we will print print AG is not greater than 18 or AG is not greater than or equal to 18 so age is not greater than or equal to 18 right so we can check these conditions and this is called else if so we can check multiple conditions by using else if statement if else if and then otherwise if the condition is not true then this uh will be executed so what will be the program flow here the program will ask the age first to the user and it goes here and if this age entered by the user is greater than 18 then this will be printed and every other uh you know if condition will be ignored and this will uh not be executed this code and this code will not be executed otherwise if the age is not greater than 18 then it will go to this uh condition checking else if condition checking and your age if the age is equal to 18 then this will be printed and everything other then this will be skipped and all the other code will not be executed right otherwise if the age is not equal to 18 and if the age is not greater than 18 this code will be executed and in the same way you can use multiple if else conditions like this okay so it's not restricted that you only need to use one if else statement or else if if statement you can use multiple you know condition and you can check multiple conditions using IF else statement now for example you want uh to check whether uh you know this age is greater than 18 but it's it's less than uh 21 also how you can check it so if the age is greater than 18 we want to print this condition and inside this code we also want to check if the age is uh you know uh less than 21 so you can use nested if conditions like this so here inside your if condition which is this curly braces you can use if once again you can check the age is less than less than 21 you can print ages less than 21 okay so you can just print age is greater than 18 but less then 21 okay and in the you know uh other case you can just write else here else and you can just provide other statement that if the age is greater than 18 but it's not less than 21 so but not less than 21 okay I will compile and run this program and this is called nested if else condition okay so because because you are using IF condition inside if Condition it's called nested if else uh statements okay so it's not necessary that you cannot uh use if condition inside if condition you can use multiple if condition to check multiple conditions in C right run the program and for example I give the age 26 which is greater than 18 but it's not not less than 21 so ideally we will see this message the age is greater than 18 but not less than 21 press enter and it says the age is greater than 18 which is this statement which is due to this statement the age is greater than 18 now it goes here and it sees that 26 is not less than 21 so it goes to the else condition and it will print this the age is greater than 18 but not less than 21 and it's printed it here the age is greater than 18 but not less than 21 otherwise I will run this this program and uh let's delete or not delete but let's provide this uh line break here so that this will be the change in the line and this time we provide 20 as the age and it says that the age is greater than 18 but but the age is also less than 21 right so in this way you can uh just check whether this age is uh you know multiple condition you can check it from here right so this is how you can use IFL statement and nested IFL statement in C this is called nested if inside your IFL statement and this is called Els if statement and this is called else statement in if statements hello guys welcome once again in the last two videos I have been showing you how to use if else conditions in C now in this video I'm going to uh teach you about the Turner or conditional operator in C uh this is also uh used to make decisions in C but uh whenever you want to make uh a decision which is you know very short and uh you want to do it in a single line uh this tary conditional operator can be useful now how to use this Turner conditional operator so for example I have two integer variables integer a is equal to for example 10 here or 19 or an integer is equal to 20 for example okay now I want to compare these two uh integers I can do it with the help of if conditions but for comparing uh and writing if and then else this can be a little bit uh longer expression in terms of code in to compare these two the shorter form of comparing these two uh integers can be for example I can declare integer C and I want to transfer the greater of these two values A and B which is B to C so I want to compare A and B and whatever uh variable is greater or whatever values value uh is greater than we want to transfer this value to C okay so there is a operator called Turner operator which is like this it's used like this so you have this bracket and in this bracket you uh just write your condition as you write in the if condition and then you give a small question mark here and then if the condition is true you can uh transfer or pass the value to your result from here otherwise if the value is false then the value which is contained after this colon will be transferred to your uh value or will be returned so I will give you an example what I mean by this so for example I want to have uh C is equal to the greater of these from these two values A and B so I will compare these two values like this if a is greater than b which is not greater than b obviously then I'm asking uh C so I will give this question mark and then if a is greater than b I want to return for example a okay or if a is greater than B I want to return B otherwise a so if a is greater than B I will return uh B which is like this or else I will return a okay so this will be uh executed by C like this this bracket will compare the condition if a is greater than b obviously a in our condition a is not greater than b because 19 is not greater than 20 then it will return b b is which is 20 right otherwise if the value of a is greater than b then it will once again return B right right so in our condition what will happen a is greater than b which is not true then this condition will be return a is return if the condition is fulfilled the first uh parameter is return if the condition is false then the second parameter will be return so the value of C in our case will be what will be the value a will be the value 19 right so we can print this value print F and then in the double quote uh answer for example answer is equal to percentage D comma value of C we want to print value of C right I will compile and run this program and let let's see what will be the answer I forgot the semicolon here so once again compile and run the program and the answer here is 19 because a is not greater than b then it'll return the second argument because our condition is false so it will return the second argument if the condition is true it will return the first argument so in our case the condition is false because a is not greater than b then it will return the second parameter which is a which is 19 now for example the value of a changes to 25 what will happen now our condition is true 25 is greater than 20 then it will be returned like this B will be returned because the condition is fulfilled and we have seen that if the condition is fulfilled then the first parameter will be returned right so when I compile and run the program it will return 20 right because the value of B is 20 okay so in this way you can uh use this Turner conditional operator in C now you may ask what uh is the performance difference between this stary operator and if else condition because you can also write if else condition to compare A and B right so there is uh there are arguments about the performance some says uh the performance of Turner operator is faster than uh F's condition but the benefit of this Turner operator is if you want to uh write your code in one line because if you would have uh used if condition you would have written at least four or five line but this is simple uh looking and it's it's serving your purpose and it will not even killing your performance right so it's um more you know visibly uh good and you can you know directly by seeing this you can say what uh you the programmer wants to write rather than uh writing those long if else condition so always if you want to uh compare two values and you have only if or else condition then you can replace it by this tary conditional operator so I hope you have understood the this basic concept of of erary conditional operator in C hello guys welcome to the next video on C programming for beginners and in this video I'm going to show you how you can use switch statement in C now in the last two videos I've been showing you how to use f Els conditions and multiple FS conditions in C and switch statements are also condition based statements but they are little uh different in the sense that that uh you can use conditions with uh switch statement but conditions M must be constant conditions so let me give you an example and then you will understand how uh switch statement Works in C so first of all we will see how switch statements are declared in C okay so the basic B syntax of switch statements is like this okay so I will just delete this for now and so that you can you know see what is the basic uh switch statement uh code so switch statement start from this switch keyword and then comes these two brackets and in here comes the expression expression is something which you want to you know validate on the basis of some case right now inside these two curly braces comes some cases so case and then some constant expression I will give you an example uh this is just the syntax I want to show you so case and then comes some condition or constant expression right and then Comes This colon and inside or down uh under this uh case comes the statement or the code which you want to execute here right now after this code is executed you break this switch statement with this break keyword so this is an optional uh keyword sometimes you don't need this break sometimes you need uh this break and I will tell you where exactly you need this break and where you don't need this break right in the same way you can have multiple cases inside your switch conditions and whenever you know whatever condition is not covered by your case is covered by this default so if none of the case is uh true this will be executed which is a default case so default case starts with this keyword default colon and then your case now let's see an example and then we will be able to understand it much better so for example uh we want to calculate the grade of a student and on the basis of grade we want to give some message or print some message for example int and let's say student scores some marks so I will name my variable as marks and on the basis of marks you want to decide if the student uh is excellent or whatever good or very good or he has coded poor grades okay so now we use switch statement switch and I told you then comes then an expression and this expression will be our Mark Mark because uh on the basis of this Mark we are going to evaluate uh some cases and on the basis of cases we will execute some code but first first of all let's assign some value to mark for example uh 90% of Mark or at or whatever you want to decide right now Mark is our expression which we will evaluate the value of Mark we will evaluate and then comes these two curly braces and inside these curly braces comes the case right case and then your uh mark value so different value of Mark we can evaluate right now Mark is equal to 90 but for example Mark can be 80 or 70 or 60 or whatever right so for example Mark is uh equal to 90 then we want to print print print F and we want to print this is an excellent grd right excellent okay and then the same semicolon and then we will break okay now comes the second case for example the in the in this case we want to evaluate Mark is equal to 80 right and and let me give some indents here and when grade is 80 or for example 75 we'll say that he has scored very good grade for example okay so we will print instead of excellent we will print very good okay in the similar way uh you can just add break here and break is nothing but a keyword which breaks uh this switch case and I will explain you what it does but let me add two more conditions and these two conditions will be first is uh 60% of marks and then we will say good the grades are good or we will say 50% of marks and or 40% of Mark and we will say grades are okay or poor or whatever the this is just an example or otherwise we will say if the grades are not 90 or 75 or 60 or uh 40 that can be gr which uh is not covered by these cases then we will have the default case default and this case covers any value other than covered by these cases right so we will print grade un a available okay so let's uh you know run this program and let's see uh how it works okay so I will just compile and run this program and it says excellent right and that's what it must do because you see marks is equal to 90 so it assigns uh Mark is equal to 90 right and then we are checking the value of 90 using this switch statement and because Mark is 90 it goes to this case case where Mark is equal to 90 then it prints this message and what this break does is it if if the case is fulfilled then we want to break out of this switch statement and we won don't want to execute any other uh statement other than whatever is fulfilling our case right so it prints excellent and it breaks out of the switch statement and whenever your C program sees this break statement it jumps out of your switch case right at the end of the switch case okay now for example our marks are 75 then let's see what's the answer or what what it prints it prints very good which is true right so in the case of 75 it Mark is equal to 75 and it s it uh search for the case for 75 it's if the case 75 is present it will print your uh value or it will execute whatever code you will write here and then it will see uh this break keyword and it jumps out of the switch statement but the important thing here is the case 90 is not executed because the code inside this case 90 is not executed because the case is not uh 90 marks Mark is 75 the value of Mark we are checking right so value of Mark is not 90 value of Mark is not 60 value of not Mark is not 40 but value of Mark right now is uh 75 that's why we have executed this code or C has executed this code but other codes are not executed okay so on the basis of these cases you can Define multiple cases and whatever case is fulfilled at a time that code will be executed or code inside that case will be executed otherwise code will not be executed okay now you may ask uh that this code can be 95 also and then also the student has scored uh excellent marks right so in order to do this for example for covering 95 grade or other grades for example like this and if the grade is 95 still we want to print this uh excellent grade so what you do you just use case 95 and you don't execute any code inside this case and you don't give any break here so this means whenever you give a case without any code and without any break here it this means that this and this are the conditions which are covered and if either of those conditions are fulfilled then this code will be executed okay so if the Mark is equal to 95 it sees here that case 95 and it jumps to the next case and it's uh because it's not breaking anywhere so it jumps to the next case right if there will be a break here this kind of break keyword and it jumps out out of your switch code but because we are not giving here this break it jumps to the next condition and executes the next statement which is print excellent so let's see what it happens when grades are 95 and we will compile our code and it says excellent and this is what we were expecting because there is no break inside this case 95 so it jumps to the next case uh in the series of cases but in this same way you can provide same cases for for example 97 or even 85 you can do 85 here 85 and all those four cases will covered or will be covered by this statement okay in a similar way whenever you want to have a very good uh grade you can cover 70 or 75 also so 70 or 75 without giving this break keyword break keyword break your statement and go out of your statement okay for example grade is right now 75 75 and we will compile and run the program it says very good right so you can cover different cases and execute a same statement using or without using this break uh key keyword okay so this is how you uh use switch cases in C programming I hope you have understood the basic concept of switch cases hello guys welcome to the next video tutorial on C programming for beginners and in this video we are going to see how we can use Loops in C and we will start with while loop how to use while loop in C programming now first of all what are while Loops so or even uh you may be wondering what are even Loops in C now as the name suggest loop loop is a piece of uh code which will execute again and again and again until and unless some condition is true okay now for example we want to print the values of of integer from uh 0 to 10 and we don't want to use print F again and again to print uh you know print one print two or print F1 print F2 print F3 instead of that we want just want to use one line of uh code print F and we want to print from 0 to 10 uh using the single line of uh code which is print F we can do it by using Y Loop okay so a loop is uh something which executes your code again and again and again until and unless some condition is true now how to use while loop so let's uh use the same example uh to print 10 numbers so I will declare int I is equal to 0 as my variable and then I want to print number or integers from 0 to 10 or 0 to 9 itself so while I can use while loop by this uh keyword while and then comes your condition and then comes your curly braces and inside those curly braces comes your condition so inside our y Loop we want to print uh the integer 10 times right so print F and then we will say value of I is equal to percentage d right comma I okay and in this uh in these brackets comes your condition okay so we will check whether I is less than less than 10 if I is less than 10 then we want to uh execute this code okay and if this I whenever it goes greater than 10 or like this we want to uh go go out of this Loop okay so this is or this bracket of while is evaluating our condition okay now we will just give the semicolon to our code and then we will increment the value of I like this I is equal to I + 1 okay this expression I equal to I + 1 you can write in short by writing I ++ okay so there are two ways of incrementing the value of I like this IAL to I + 1 or you can do I ++ it's same as I equal to I + 1 so we will use i++ for now okay and then let's uh try to compile our code so what it's doing it's checking this condition if this condition is true it will print this but because I will never be true because first of all I is equ equal to Z and this condition in this case what I have written will never be true I is equal to 0 which is not greater than 10 then this Loop will never be executed while why because this condition is uh not true at the first first place so this code will not execute okay so let's see what happens when we compile and run the code and nothing happens and this is what we were expecting but when we check I is less than 10 then because the value of I is equal to zero it goes to uh this while and it goes to check this condition whether zero is l less than 10 and it will say yes 0 is less than 10 then execute this code which will print 0 and then increment the value of I by 1 which is 0 + 1 is equal to 1 and then it will do it again and again until this condition is met so let's try compile and run the program and we can see the value of I is equal to 0 value of I is equal to 1 but I forgot to give the line break so we will give this line break from here and then once again we will run the code like this so it has printed value of I is equal to 0 in the starting and then value of I is equal to 1 then value of I is equal to 2 3 4 until I is equal to 9 okay so what's happening here at the first place the value of I we have declared it as zero so it goes to a while loop and it checks this condition that 0 is less than 10 so it goes inside this Loop because the condition is true and it prints this message value this should be value of I is equal to whatever the value of I I is Zer right now so it will print I is equal to 0 and then we are increasing the value of I by 1 right I ++ is equal to I is equal to I + 1 so now the value of I becomes one and it goes once again to check this condition whether I is less than 10 so I the value of I is equal to 1 Which is less than 10 once again it will print value of u i is equal to 1 and increment the value of I by one which is two once again it goes again and again until unless I becomes 10 here so when I becomes 10 here it will go here and C 10 is not less than 10 so it will not print any code here because this condition is not true and then it goes out of the loop so this is what happening in this code right so once again run this code and it will run uh and it will print 0 to 9 now for example you want to print until 10 we can just write if I is less than or equal to 10 then print this code so this expression is I is less than or equal to 10 okay so run the program and now this prints from 0 to 10 okay so once again a loop is something which iterates or executes your code again and again until and unless some condition is true so in in this in the case of while loop the condition is this thing we have provided and it will execute again and again until and unless this condition is met hello guys welcome once again in the last video I've shown you how you can use Loops in C and I have shown you how you can use while loop in C now in this video we are going to see how we can use do while loop which is uh one more kind of loop and what is the difference between a dowi loop and while loop okay so let's uh uh assume that we want to uh execute uh the number or integers from 0 to 10 as we have done in the last video but this time we want to do it with the do while loop okay so this was the code we have written in the last video which I'm going to comment because uh later in the video we will see how how or what is the difference between do while loop and while loop so let's see what is the syntax of do while loop first so you just write a keyword do and then gives give this semicolon and after the semicolon at the end of your curly braces uh this is not semicolon this is Curly braces sorry and at the end of your curly brace you just write while should be while and then you give your condition okay so keyword do and then curly brace then while then your condition now once again for example we want to print uh values of integer from uh 0 to 10 I'm going to copy this code in here and it will print the value 0 to 10 and the condition will be same as earlier which is while I is less than or equal to 10 okay and I will just compile this program and run the program and it prints the value 0 1 2 3 4 up to 10 right and in here what's happening is first of all your uh I is equal to zero and it says do do means do something so before checking any condition condition your statement will be executed which is this one so it prints I is equal to 0 and then it increases I by 1 and now our value of I is 1 Which is less than 10 right so it it goes in the loop once again and it prints I is equal to 1 and in here it increases the value of I by one once again so I is equal to 2 this time then 2 is less than or equal to 10 which is true once again it will go in this Loop until I is equal to 10 now I is equal to 10 this will be true and it this will be printed but now when the I value of I becomes 11 this is uh false this condition is false and as soon as this condition is false it goes out of the loop okay so what is the difference between uh this do while loop and while loop the difference is while whenever we use while loop it checks the condition first and then executes your code but in the do while loop it executes your code at least once and then checks your condition and if this condition is true it will once again go into the statement here and it will execute a statement and as soon as this statement is false it goes out of the loop okay so do uh loop or do while loop executes your code at least once without checking the condition but while loop checks the condition first and then executes the code now uh let's see what is the basic difference here so for example I will just give the separator or I will print some separator here so that we know that the code above the the the star line is for dowi Loop and code below the star line is for y Loop right and I will compile this program and everything is fine it prints from 0 to 10 which is okay and because value of I is the same here right so here value of I will be 10 once again so what we are going to do is here we will take instead of I we will take variable J in y Loop so J here I will replace J here and J value of J is equal to J j++ right why I have done that because the value of otherwise the value of I will be same for this and this and we will never find the difference between the two Loops once again I will run the program and it prints this value I forgot J here so I must give J here also and once again I will compile the code and now you can see it prints the value of uh first of all I and then it prints the value of J okay so it starts from zero I will just make it bigger so that we can see all the values so the value of I starts from 0 up to 10 and value of J starts from 0 up to 10 my battery is going so I must hurry up I think so right so value of I starts from 0 to 10 and the value of J starts from 0 to 10 now let's see the difference here now for example I will give some condition which is not true okay so for example I'm checking whether I is greater than 10 which is not true because value of I is 0er 0 is not greater than 10 right and in this case also value of J is greater than 10 we are checking which is false because value of J is zero which is not greater than 10 J is not greater than 10 what happens here run the the code and we see that value of I is equal to zero which is it prints value of I is equal to zero and then it increments the value of I by one so I becomes 1 1 is not greater than 10 so it goes out of the loop so what we have seen that do Loop performs your statement at least once and then checks the condition but in the case of Y Loop here J is equal to 0 0 is not greater than 10 so nothing is executed from this while loop okay so nothing is printed here so this is the difference between while loop and do while loop so always remember whenever you want to execute your code at least once use do while loop and whenever you want to uh check the condition first and then execute your code then use while loop so I hope you have uh understood the basic concept of do while loop and difference between do while loop and while loop hello guys welcome to the next video tutorial on C programming for beginners in the last two videos we have seen how a loop Works in a c and we have learned how to use while loop and do while loop Loop in C now in this video we are going to learn how to use for Loop in C so for Loop is also a kind of loop which depends upon uh the initialization condition and the increment uh property so let's see what is the basic structure of for Loop and then we will take an example and see how it works so the basic structure strcture of for Loop looks like this and this structure starts with a keyword for and then comes these brackets and in these bracket comes three uh arguments and these arguments are separated by these semicolon okay so this is these are the semicolons and these are three different parameters and then comes these two curly braces and if the condition in this for Loop is true then this code inside your for Loop will be executed now first parameter in this fall Loop is called inited or initialization of something second parameter checks whether some condition is true or not which is related to initialization and then the third parameter is the increment of uh the parameter which you have initialized in the first uh parameter so this is the basic uh structure of for Loop now let's take the same example which we have been seeing in the last uh two videos just printing 0 to 10 as an integer so I will just uh declare a variable which is equal to Z and on the basis of this variable I want to print 10 but in the last video I have shown you that you need to declare this first of all initialize it and then you need to give the while loop and then check the condition and then increment but in the for Loop it uh it's done automatically and you don't need to initialize uh anything separately but what we will do is we'll just start with four and then with a bracket and inside this bracket I told you first parameter is the initialization so initialization you can do it like this in I and then I is equal to0 right it's just like declar ing a variable in a is equal to 0 like this okay so in Fall Loop we don't need to do this kind of initialization separately but we can do it inside the for Loop okay now comes the semicolon and then comes the condition so as we have seen in the last two videos that in y Loop and doy Loop we check some condition to fulfill and if this condition is fulfilled then we execute the code so in this uh for Lo we are checking if I is less than 10 okay so we are checking this condition if the I value of I is less than 10 because we have initialized I with zero I value of I will be uh you know replaced here and it will check first of all 0 is 0 is less than 10 which is true and it will keep on going uh like this until and unless the condition is met now the third parameter is incrementing the values like this I ++ and in the previous videos I have told you I ++ just means I for example I is equal to I plus 1 it's just like this I in short whenever you want to increment the value of uh any variable you just write I ++ like this okay now comes your curly braces so what we have done in our for Loop we have initialized uh a variable and then we are checking on the basis of that variable if some condition is true and and we are incrementing the variable which we have initialized now we just need to uh do whatever we want to do inside our for Loop for example we want to print so we just write print F and then we can write the value of I is equal to percentage d right and then comma I and don't forget this uh semicolon here and this should be value okay so the for Loop takes care of your initialization condition and increment and then you can you know do whatever you want to do inside your Loop and this Loop will print the value of uh I from 0 to 10 and it's incrementing it also now let's first uh run our program and let's see what's the result and first of all what's it's saying some error it's showing so I will see what's the error and the error is for Loop initial declaration are only allowed in uh here okay so what will we will do here so if you see this error which says that for for Loop initial declaration are only allowed in c99 mode then you have c99 which is a newer version of C is not enabled in your IDE especially in code blocks so to enable this c99 in your uh code blocks you just need to go to your project so just right click your project here or you can just go to the settings here so I will prefer to go to my project and right click my project and I will go to the build or or the properties here the last option so go to the last option called properties and in here go to project build option so click this project builds option and and in here it will open product build option and in here you will be able to see compiler flags and there is a tab called other options okay in other options you just need to type this minus STD is equal to c99 okay so just type this minus STD is equal to c99 and just click okay click okay and I will just uh paste it here so you can see uh it better it's minus STD c99 okay now when I compile this program and run this it runs right and I should give this line break here so we can see the output and now we can see from 0 to 9 the value of I is printed and how it's working so initially we initialize the value of I is equal to0 and then C checks this condition if the value of I which is initially zero is less than 10 or not if it's less than 10 then it goes here and executes your code first and then after your code execution just above this curly braces ending it increases is the value of I so then before the value of I was Zero now it becomes one and then once again it checks whether this condition is true 1 is less than 10 which is not true it prints the value of I and then increments the value of I just before here so I becomes two and it goes and goes and goes until and unless this condition becomes false and then it goes out of the loop okay so once again it prints from 0 to 9 and if you want to print uh 0 to 10 just add equal to after your greater than or less than sign okay so there is a simple rule here is always use equal to after you're greater than or uh smaller than this symbol okay and once again when you run the program it prints from 0 to 10 hello guys welcome to the next video tutorial on C programming for beginners and in this video I'm going to show you how you can use function in C and what is a function so first of all what is a function a function is a piece of code or a block of code which we can use to perform a particular Tas task for example adding two numbers you may uh wish to add two numbers uh multiple times in your program and you can define a function for this to add uh two numbers and you can use your function again and again uh or you can call your function again and again inside uh any other function so let's see how we can C function but first of all I must uh say that every C program has at least one function and this function is called main right in the starting of this series I have told you that this main is a function okay and every program has at least one function and this function is called Main and and whenever you execute your program C uh searches for this main function and execute uh whatever inside this so function uh more or less looks like this itself it has a return type it has the name of the function uh this is a inbuilt name in C which is main but you can Define uh user defined function and give it any name and then comes these bracket and then curly braces so let's see how what is uh the definition or Declaration of this function for example so this is how you declare a function this is not actual declaration but that this is some pseudo uh declaration I will declare a function in a moment so function you can declare first of all you must have have the type of function which uh it returns and then you give the name to your function and then in the bracket you can pass argument or parameters like this of some type and inside your curly braces you write your code okay so I will just comment this for now so that we can U see as a reference see it as a reference right now you can Define your function above your main function or below your main function but uh there is a difference in using or declaring your function above and below which I'm going to tell you but let's take an example for example we want to add two numbers using a function so how we can do it or let's take a rather more simple simple example than this also we want to print something using a function okay so for example I have told you that function start with a return type and this time we for example we don't want to return anything then we write void void means we are not returning anything right then comes the name of the function this name you can Define anything for example my function name any name you can give it and then comes your uh bracket like this and it can take some parameters and it cannot uh I mean it you it's your wish if you want to give some parameters to a this function or not it depends upon your requirement right now we we don't want to pass any uh parameters but we will see how we can use parameters with function in the next videos so just uh for now we will not pass any parameter to the function right and then comes these two curly braces and now in this function I want to perform some code for example I want to print something print F and we can say we are inside a function right and end line okay now for example you want to you know do some more stuff for example adding some uh two numbers for example you want to add uh two numbers and show the sum so you can just write print F this should be print F not print F and then you can write sum sum is equal to and then you can write percentage D and then you can add two numbers for example 10 plus 52 this is just an example I'm giving you so so you can just uh write your code inside a function any code any numbers of of line you can write inside a function and then you can call this function in your main and for calling your function you just need to copy the name of the function as it is just copy this name and then inside your main function which is this one you just paste it here okay and then give a semicolon here and what this do is this function name replace is replaced by this code okay so whenever you call a function this code is also called in place of this function so in indirectly we are calling this code in here inside our main function okay and the logic name we have given to this function so that more or less the name of the function should reflect the code which we are writing okay now we will run the code compile and run the code and it says sum is equal to 62 which is this line sum is equal to 62 and then it write V are inside a function right so what happens here your programs starts from here and goes to the second line and then comes here and it sees that there is a declaration of function so it remembers that this is a function uh which we have declared and whenever our main function calls this uh function we need to execute these lines and because we are calling this function inside our main it will execute this okay you can use this function multiple times inside your code also like this like this three times and for example I will just change this line so that we can uh see it more clearly and you can see Su 62 we are in the function some 62 we are in the function three times okay so this shows that you can call a function multiple times in your code and that is the uh basic usage of function so function makes your code really readable and fast to execute and uh you can perform this function or call this function again and again so this makes your code uh really short and understandable and concise okay now some people also like to call this function below your the main function here and there is no uh I mean difference uh in declaring the function below your main or above the main but if you want to uh declare your function below your main you just need to prototype your function function just copy this here and paste the Declaration here right and I will show you if you don't do this what happens if I don't prototype this I will just delete this and compile try to compile my program it still runs but when you prototype your function then you are just saying your C program that there is a function called my first function name uh which we are going to Define somewhere in our code so your C programs comes here and sees there is a uh function with a name my function name uh which is defined in our code so it goes from here to here and see the definition of the function this is the definition of of the function and this is called the prototyping of the function or forward Declaration of the function and then it goes here and whenever your main calls your function it knows that this function is defined here okay so it's a good practice whenever you define a function below your main just prototype it like this and what is what uh I mean by prototyping you just need to copy this from void to the function not the curly braces but from here to here and just paste it here and give a semicolon here after this okay and run it once again it will execute fine so this is how you can use functions in C uh there are different uh kind of function for example function fun which takes parameter or functions which returns some value which I will show you in the next videos hello guys welcome to the next video tutorial on C programming for beginners and in the last video I have shown you what is a function and how we can call function from our main uh function right and how we can declare a simple function like this okay now in this video I'm going to show you how to declare and use a function which takes parameters or arguments so suppose we want to uh make a function which adds two values and prints uh the sum okay so what we are going to do is here we will declare a function which returns nothing so we will write void and then the name of the function function you can name it as uh sum or add whatever you find appropriate for your program okay I will name it as sum and now because we want to pass uh two numbers which we can sum we will pass them as an argument for for a function so how to pass an argument in these two brackets these two brackets we will give int the type of the argument first and then we will give the name of the argument for example a and in a similar way we can pass the second argument int B and you can pass any number of argument in the function for example int C int D and so on but right now we want to just add two numbers so we will pass only two arguments right and then we will just give two curly braces here not this one but this one and now what we want to do from this function we want to add these two functions and pass it into other variable for example we will name it as sum which will hold the sum of our two argument which is a and B so we will just do a + b and now we want to print the sum so we will just write print F and inside this we will just write sum is equal to percentage D comma sum okay and now and whenever you want to add these two numbers you can just call the sum function inside your main function here so just call it and uh for example you want to add two numbers for example you want to add 50 and 60 so we will just write 50 comma 60 because this sum function takes two arguments one is a and one is V so you can pass 50 as a and 60 as as B here right and what will this will do so this some function will replace a by 50 and B by 60 and then in here this A + B will be 50 + 60 and it will transfer the sum to this sum variable and then this sum will be printed here so let's try to run the program first and it prints 1 1 0 which is true in a similar way you can uh call this function multiple times for example you want to uh get the some multiple times let's uh give slash n here to change the line and this time we want to add 100 or th000 + 500 and here we want to add 11 one and 2 to2 and in here we want to add 1 2 3 and 4 5 6 for example and we want to print the sum of uh all these this this and this run the program and it will give you the sum 110500 which is the sum of these two numbers 33 or 333 which is the sum of these two numbers and 5 96 which is some sum of these two numbers right let me change the slash to back slash because it'll just uh change the line like this and run the program once again and now it will change the line 100 10500 333 and 59 579 which is the addition of first sum second sum third sum and fourth sum like this and you can call your function multiple times now for example you want uh that user should Define these uh two values uh at runtime what we can do is we can can declare two numbers X comma y two integers which are and then we will ask the user to give these two numbers so we will print F uh and we will write please enter to numbers okay and then slash n to change the line and then we will just say print F print F number one number one and change the line once again and then we will use scan F which we use to take input right so we'll write scan scan F and then in the bracket percentage D percentage D and then comma and then this symbol to take integer this end symbol right and then value of x which will will be our first number and in the same way we will pass the second number which is by so print F number two this is number two I'll give space so we can see it better and the second time we will pass or scan y so X is this one and Y is this one we are scanning two numbers and now we will pass these X and Y sum as a first argument and second argument for this sum function and what will this do now when we run the program we will run the program first and now the program asks for two numbers so it says please enter two numbers number one so we will give number one for example 6 4 58 this is the number one and PR press enter and now it says number two so we'll give second number 1025 for examp example and when we press enter we will see sum is equal to 7483 which is the sum of the above two numbers right so in this way we can ask the user to give two numbers and we can make the sum of these two numbers and print it on the screen right so these are called function with argument and arguments is this one argument one argument two and in the same way you can pass any number of argument to a function and you can call your function inside your main program with those arguments all right so I hope you have uh understood the basic concept of functions with arguments or functions with parameter hello guys welcome once again in the last two videos I have been showing you how to use functions in C and in the last video I have shown you how to use a function with arguments or parameters now in this video I'm going to show you how you can use function to return some value right so till now we have been writing functions like this with a void but from uh any function you can return some value uh which can be of any type for example integer double character or string or anything so let's see how we can use a function to return a value now for example we want to make a function which gives us uh the product of uh something this example I have shown you uh last time if you remember and what uh I was doing uh in this function is I was asking the user to enter two values so so it says please enter two values number one and I scan uh first number and I scanned second number and then I passed it passed these two number to this function now let's uh say we want to uh make a function which uh gives us the uh value or product of something and then we want to uh process this number so we will make a new function here to return some value so for example we want to make a function which gives us the multiplication of two numbers or product of two numbers so uh and it will return something so what we are going to do we are going to write first of all return value earlier we used to write here void because we were not returning anything but this time we will return some integer from the fun function that's why we are writing int here right and then write the name of the function for example product this is the name of the function and what this will do it'll take two argument int a comma int B and it's going to give us the result as a product of these two numbers so in order to return some value uh for example product of these two numbers we use a keyword called return okay and because we want to uh return product of A and B we can write a ASX B right so we can return the product of A and B and what this basically mean is this this function will take two parameters A and B and then in here it will uh make the product of these two numbers A and B and then it will return this number as an integer right and then we can use this number uh for doing some other mathematical stuff or anything else so for calling this function we can call it just by its name and because we have the code from the last time in which uh we have declared two numbers and we uh asking user to enter two numbers this is really basic so by now you uh may have known what uh this code is doing it's just taking two values from the user and then we will pass these two values X comma y to our product function right and then this x comma y will be replaced here in the place of A and B it will give multiply these two to um numbers and then it will return the product as an integer so because it's going to return our product we will uh Define an integer for example int uh p d so this integer we will use integer variable we will use to store the product which will be returned by this product function right so product or PR o is equal to product because this function is going to return something as an integer and we will store this integer which this function is going to return in this uh variable right and then we can print the value of uh print print F and then we can print uh product is equal to percentage D comma p d which is this one this variable right and let's see what happens when we uh compile our program I will just make it little bit smaller so that we can see all our uh program I will run the program now and it's saying something let's see what's the error and the error here is um undefined reference to print F so this should be P small right run the program and it says enter first number for example 20 I press enter enter second number for example 30 and when I press enter it gives us the product of of these two number which is 600 right and what this has basically done uh we have given two numbers X is equal to 20 Y is equal to 30 so now X is equal to 20 which is uh replaced here and Y is equal to 30 which is replaced here so 20 and 30 is passed to this function and this goes here then it will multiply 20 and 30 and then it will return the result in into this variable which we can store okay in a simple uh you know simple usage if you don't understand still what this is doing then what we can do is we can directly uh pass two values for example 10 and 60 for example I'm taking simple values so that you can understand so this is basically 10 and 20 we have passed to this function because this function is integer so we need to pass uh only integers here right so 10 will be replaced here at the place of a and 20 60 will be replaced here at the place of B now 10 will be multiplied by 60 and then it will be return and this value we can store it in another variable for example this variable which we can use for something or for example if you want to use this function in or this variable for some other use so what we want to do is for example a result result is equal to and then do percentage D and what we want to do is whatever product we are getting from a product function we want to add uh 10 to it and then show the result okay so I will call product and let's uh delete this thing for now and we will make it more simple so what we are going to do is we are going to call this function call product and we will pass two values for example we pass this uh time five and and five once again so 5 into 5 is 25 right this is a simple uh uh parameter I'm giving so that we know the result so 5 into 5 is 25 which will be returned by this uh product and we can add 10 to it 10 to it and the result will be 35 right so let's try and run the program it says result is equal to 35 so so you can use uh this function which returns integer value uh as a you know parameter which you can uh you know do arithmetic operation on this parameter or on this function also so in this way you can use function which Returns value okay and don't forget to use this return keyword whenever you are returning anything so I hope you understood the basic concept of a function which returns hello guys welcome to the next video tutorial on C programming for beginners and in this video we will discuss about scope rules in C now there are two kind of uh variable declaration in C one is called a local variable which we have been seeing in our tutorial and one is called Global variable so for example local variable is a variable which you declare inside some function so inside for example in main you can declare int a is equal to 10 it's called a local variable okay so what it's called local variable okay now whenever you declare of variable which is not inside any function it's called a global variable okay so for example I declare a function which is not inside main or I will declare one more function and for example or void void number print it doesn't take any argument and it prints something okay and here we can declare a variable called X or a variable called int or any variable int a and this is also a local local variable right because it's declared inside your function but whenever you declare a variable for example int G it's called a global variable okay which is not uh inside any function and what is difference between Global and local variable is a local variable is only uh valid inside your function so it's local to your function so you cannot use this a inside this number or you cannot this use this x inside this main function or or anywhere else but on the other hand a global variable is visible to every function in our program so you can use this Global variable here also and here also now let's see what uh I mean by that so for example I want to print or I declare Global variable as zero or for example I just declare a Global variable and just remember uh I will just comment here Global variable and always remember whenever you declare a global variable and it's initialized by zero if it's int float or double it's already initialized by zero you don't need to initialize it by zero but a local variable aable whenever you declare it like this it's not initialized by zero so this variable can contain any value any garbage value and you may not know the value of this uh a so let's see first of all we will print print F we will print the value of uh This Global variable Global is equal to to percentage D and this should be percentage D without space and comma G we are printing this value right in the same uh way we will print this local variable so we will write local and we will print a okay or let's name them uh logically so I will name this variable AS Global undor V and I will name it as local uncore V local underscore V uh stands for local variable and local Global underscore v stands for Global variable so I use this Global variable to print here or let's not print it here but let's print this Global variable value in uh our main function because we are not going to call this function for now and this should be local variable and remember we haven't initialized this and this by any value let's see what happens when we run this program we can see that this variable local is equal to 77 let me give uh one more thing here which is this sln to change the line and I will run the program and you can see this local variable is printing 77 but we haven't initialized this local variable by any value so it's taking the garbage value but whenever you use this Global variable It's Always initialized by zero even if you haven't assigned any value to it so just uh remember this and if it's a character it will be uh initialized by a null character and if it's a pointer which we are going to learn in next videos it will be initialized by a null pointer now a global variable so for example you declare this Global variable is equal to 25 here you initialized it and you also initialized uh local variable like this uh Global varibles with the same name but this is is equal to uh 20 for example and I will just commend this because we don't need this line so what we have done we have initialized a Glo variable called Global V and initialize it by 25 and the same name I have given to my local variable now what happens in this case so in this case whatever value is uh contained by your local variable even if it's declared with the same name uh globally it will the value of This Global V will be the value in the local variable right so whenever we print this this value will print 20 here so local variable is always has the preference over the global variable if they have the same name I'll run the program and it says 20 instead of 25 right now for example you want to use Global variable inside this function I will just print this uh here so I will print something like uh Global variable plus uh uh 50 for example okay and I will uh name it as uh Global plus 50 okay and so what this will do it will print whatever the value of global variable which is 25 plus it will add 50 to it and I will call this function here and it's visible to this function so we can see global plus 50 is 75 it's printing so Global variable is visible to uh your functions and all all your functions and uh all your uh code right but local variable is you know you cannot use it uh globally for example in uh num local is equal to uh 30 for example and if you want to use this local variable here you want to print this local num here it will give you compilation error because this variable is not visible to uh this main function because it this exist in other function other than main right run it and it says the this error and this error is numor local Undeclared right so you cannot use a local variable in your other functions right so these are the scope rules in C hello guys welcome to the next video tutorial on C programming for beginners and in this video we will see what is an array and how to use array and C so what is an array array is a variable which can contain more than one values of same data type so for example you want to store similar data in a variable you can do it with the help of an array so for example you want to store a scores of a student or ages of persons or names of any person or any number of persons you can do it using an array using a single variable now how to declare an array in C it's like same as declaring variabl so first is the data type what kind of data you want to store in your array and then the name of your array so for example my number array right right and then this square bracket the square bracket uh tells C that it's an array and whatever number you uh insert inside this um square bracket for example three this is the number of element you can store inside an array right so for example we have uh written three here we can store three numbers in an array now whenever you uh declare an array you can initialize it by equal to sign and in this curly braces you can give the values to your array for example the values can be 20 30 and 60 for example right so I have stored three values because here you you can see I have defined that this array can contains three values therefore I can assign three values to my array if it would be four then I can add one more value for example 55 to my array okay and so on if if it be five it will be five I can add five values here okay so for example I have three values right now so I can store three values okay now you can uh ask how can I access the value of an array okay and there is something called index of an array and the index of an array is a position at which any uh value is uh you know placed so the index of 20 here is zero so index of an array starts from zero not from one so always remember that index of an array starts from zero and the at the zeroth index we have the value 20 here and at the first index we have the value 30 and at the second index we have the value 60 okay so index start from 01 2 now to access the value of an array what you can do is you can just write print F or for example I want to access an the value of an array I can just name a variable access array for example is equal to for example I want to store second value of an array inside this variable okay so I can just copy the name of an array and then in the square bracket the index of the array whose value we want to store for example we want to store 30 the index of the 30 is 01 right so we will write one here okay so now the value 30 from array will be stored inside this exess array variable right and then we can print this value print F and then we can just write value is equal to percentage D small D and then we will change the line so that it will be printed at the next line whenever we use the next print F right so now we will see that this will print 30 because we have assign 30 which is at index uh one of uh this array right we will just run this program and it prints 30 which is totally fine in a similar way you can Define any character array or any double array also but always remember that an array for example car array and we want to store three characters inside this array so for example I will write three or I want to store four character inside this aray and then in the curly braces I can store these four characters for example first character second character third and fourth and then this contains a comma this contains B comma this contains C comma this contains D okay so this is a character array you can define a float array or string array or any other kind of array but always remember that the data type of array so if you have declared an integer array it can only contain integer values if you have declared character array it can only uh it can only have character values right if you have float array it can only have float values okay now for example you want to print all the values of your array so for example your array contains six values and I can just extend my array like this so now it contains six value 1 2 3 4 5 6 and the index of these value is 0 1 2 3 4 5 right so now for example I want to print all the values of an array I can use for Loop for that and I can just write int I is equal to 0 and then my condition comes I is less than the index of an array so uh or size of an array so the size of an array is six in my case so I will write I should be less than six and then i++ and then I can print the value of uh these arrays for example I will just print this and I can write element and then I can write percentage D here and percentage D and I will just print the value of I I and comma I will just print uh the index 1 by one so I will just write the name of my array and then I okay why I have written I because I will be uh you know increased uh in the for Loop first the value of I is equal to 0o so it will print 20 then it will increase the value of I by 1 which is one so array at index one is 30 okay value of for at index 1 is 30 now once again the value of I becomes two so the value of I at index 2 is 60 so it will print all all the values in the array 1 by one uh at the specific index so I will just run this program and you can see it prints the value so the element 0 is 20 which is true element 1 is 30 which is true element element 2 is 60 which is here element three is 50 uh 4 is 55 and fifth is 30 so index start from 0 to 5 okay so it prints all the values in an array like this okay now for example you want to change uh any value in the array for example you want not happy with uh this 30 in an array and you want to change the value of uh this 30 to to 45 for example so you can change it like this so the index of uh this value 30 is 01 okay so what you can do is you can just uh copy this uh value from here I will just delete all the other things right now so that it will be simpler to see so just copy the name of your array and then the index of the value you want to change so the index of value I want to change is 1 0 1 right is equal to I want to change it to the value 45 right so this will change the value at index one of this array which is 30 to 45 okay and we will verify it by this for Loop and printing the value I will compile the program and run this and you can see the value at index 0 is 20 value at index 1 is 45 here which was 30 earlier but we have changed it to 45 right so you can change the value of an array like this okay so this kind of array which has you know we which can contain uh some or one or more than one uh variable or values is called single dimensional array right in C there can be multidimensional array also which I will teach you in the next videos hello guys welcome to the next video tutorial on C programming for beginners in the last video I've shown you what are arrays in C and how to use arrays in C and I have given an example to you how to declare and use a single dimensional array so I have shown you you can declare an array like this uh and array can contain more than one values of same data type in a single variable in a similar way if you want to declare a multidimensional array you can do it like this so this is a single dimensional array and if you want to declare a multidimensional array you can do it like this for example you want to declare uh 2 cross 3 cross 4 three dimensional array this is the Declaration of threedimensional array or if you want to declare a fourdimensional array you can do it like this but most simplest form of multidimensional array is a twodimensional array and this is how you can declare this twodimensional array right so this is the Declaration of twood dimensional array of 2 cross 3 here 2 cross 3 means this array if you can imagine uh in the form of uh uh a square or a table this two is like a a row for your array and three is like a column numbers of your array so let's see how we can initialize this array first so you just give a bracket and the in these two curly braces you can declare your array so first of all we will Define our row0 so this will be our row0 and I will move this up and draw one okay so I will just Define two rows first because our array contains two rows if we see this and three columns right so columns are like straight uh lines or column right so for example 1 comma 3 comma 2 are The Columns of row zero and for example 5 comma 6 comma 8 are the elements of first uh or second row of index one and it has three columns like five 6 and 7 so this is a twodimensional array and it contains two rows and three columns how it contains two uh rows this is the first row so Row one of uh or index zero right so index of array starts from zero so this is Row one logically but if you see in terms of C this will be row zero right and this will be Row one right because index of the array starts from zero and then these are the column so First Column is for 1 and five and second column colum contains 3 and six and third column contains 2 and 8 okay now in order to uh iterate over these values you can use for Loop but a single for Loop will not work in the case of this two dimensional array you need to use uh two for Loop so Loop inside a loop to iterate all the values in this array so for iterating over these values you can do it like this so you can just write a first for Loop for and then this for Loop will be for the rows okay so I will declare a variable I or int I is equal to 0 and this will be I will be less than 2 which which is number of rows right these are the number of rows you have okay and then i++ which is our increment operator and inside this for Loop we will declare one more for Loop so inside this girly brazes of this for Loop we will declare one more for Loop for columns so for INT int J is equal to 0 and J should be less than the number of rows so number of rows in our case is three right so just writes three here and then j++ okay so this is Loop inside the loop to iterate the values so first Loop will iterate over the rows and the second Loop will rate over the columns right now in order to print all the values inside your uh colum for Loop this Loop you can just write print F and the name of your AR for example this one just inside the brackets just write this and then just write percentage D here and then percentage D here is equal to it should be percentage D and this should be equal to percentage T right so this will be the value of array and we will also print the index of the array right so we have the here it will show the row here it will show the column and here it will show the value right so we have row here so rows are iterated by I so just write I here comma The Columns are iterated by J so just write J here and the values can be iterated by your array index so just write the name of your array and then the value of I which is a row indicator and value of J which is your column indicator right now I will just give this next line here so that it will literate every time in the next line okay now I will compile and run this program and it says the program contains some problem let's see what's the problem here yeah so I think this curly brace is extra here this should do right and these are rows and columns so just compile it once again and now it runs so you can see it prints the row and index of the array right so at uh 0 0 so at zeroth row and zeroth column we have the value one which is true this is at zeroth row and zeroth column okay at row 0 and column one we have the value three this is right this is row0 so row 0o is this one and column one so zero and one so column one is this one value is three that's correct row 0o and column two is this one and 0 1 2 so so this is the value which is two which is correct here now comes the row one which is this row value or column zero which is this value which is five in the same way it will print all the values of your two dimensional array so in this way you can iterate over your array using two for Loop so this is a simplest kind of multidimensional AR array and it's called twodimensional array in a similar way if you want to uh declare some other array two dimensional array with some uh other dimension you can do it like this for example your array must contain three rows you can just do it like this so Row one we have zero and one we have and we will just write the Row third or by index its row two right and this is row two okay so you can do it like this so I hope you have understood the basic concept of multidimensional arrays hello guys welcome to the next video tutorial on C programming for beginners in the last two videos I have been showing you what are arrays and how to use arrays in C and I have also shown you in the last video how we can use multidimensional arrays in C now in this video I'm going to show you how you can pass arrays as an argument of a function so let's see how we can do it so we are going to take an example for example we want to calculate the sum of elements of uh this array we have so this array for example have six elements and we want to add each and every element and display the sum of every element each and every element so what we want to do basically is we want to just add 20 + 30 + 60 + 50 + 55 + 30 and sum them up and show the result uh of this uh summation you using a function right so first of all let's see what are different ways of passing arrays as an argument of a function so I will declare a function void for example it's not returning for example nothing and we can say array sum is the name of my function I just need to change my keyboard settings yeah so array uh sum is the name of my function and there are three different ways basically you can pass arrays as an argument of a function One is using a pointer and just pointer you can just uh give this star or estx here and give your AR name or array or you can say my array right my array okay so you can pass uh pointer uh array to your function but we haven't learned about Pointer till now so I will skip this uh for now and in the future when I will uh teach you how to use pointer in C then we will see how we can pass uh this kind of arrays and as an a function argument so second way is to pass a definite sized array for example I want to get uh the sum of this array which has the size six I can just declare uh the array so my array as as an argument and then I will give the size to my array as six like this but there is one uh problem with this is you can only uh pass uh array of size six to this function so this will kill uh the general functionality of a function and the functionality of a function should be it should be used in different uh conditions and this is this condition restrains uh the use of function to the size six of an array right so in order to uh you know get rid of this restriction we can pass uh the array as unside unsized array as an argument like this so you just give the data type the name of the array and in the square bracket you don't pass any size and this means you want to pass uh an array of different size or unsized array which doesn't have any size okay or it can have different sizes right and plus we will uh uh pass the size as an argument also okay so we know the size of the array and the array name from here now we can uh pass different size array to our function like this okay Now using this function I want to add all the elements of the array okay and let's return integer as a result and because we want to uh calculate the sum we will just declare a variable called sum is equal to Zer we will initialize it by zero okay now we will use a for Loop just like this and what is say it's doing is it'll iterate over this array one by one and we will add the values of the elements one by one to this sum right so initial values of sum is zero and it will add 20 30 60 1 by one to this sum right when we iterate over this array so this array declaration is something like this for in the condition or in the bracket we will initialize this uh variable I is equal to 0 and then we give the condition here so I should be less than the size of the array right because the size of the array starts from zero so it should be less than the size of the array right so just pass this size argument here okay I is less than this size right this size and this size are same and then we will increment the value of I by One by like this okay so just initialize I is equal to Z I should be less than the size of the array which is this one and then we will increment the value of I and what we basically do want to do we want to just sum is equal to sum the previous value of sum plus the array name and the index at the moment which is uh I right so this I will uh change in the loop so first value of I is z so i0 of this array is 20 so the value of my array at uh 0 will be 20 when we we will pass this array as an argument to this function okay we can uh simply write uh this in different way like this so just write sum plus is equal to just write this my array okay and this is basically same as this but this is more short form of uh this EXP expression okay and then we will just uh return sum so once we have the sum of all the elements of the array we will just return the sum here as an integer okay now in order to use this function for example we have this array and we want to calculate uh the sum of all these elements we can use uh this like this so let me just make it smaller so we can see here so in here we will just call this function so I will just uh uh declare a integer called array sum right so this will contain the result of this but this and this are same so we will just change uh the variable name sum of array for example right and what it's uh value is it's equal to the value which is returned by this function when we pass the array so this function takes to augment the array so our array is this one my number array and the size of the array right so the size of the array in our our case is six right now see this so it's six okay and it will calculate the sum of uh the array and then we will print the value of the array so array sum is equal to percentage D and and comma this because now this will return the sum of the array so this value is assign to sum of are this variable and then we will pass this here okay now let's run the program and let's see what is the result and it shows it should be print F okay run the program and it shows array sum is equal to 245 right let's check whether it's uh true or false so I will just open the calculator from here and we have first element is 20 + 30 + 60 + 50 + 55 + 30 right all these are 20 30 60 50 55 30 and the sum is 245 which is shown here as a result so we know that it has successfully calculated or our function has successfully calculated the sum of uh elements of this array now suppose uh this you want to pass an array of size 7 here so I can just change the size and I will add one more element to my array for example it's 100s so our previous sum was 2 2 45 and we will just add 100 to it so it should be equal to 345 now right so and this now the size of the array is seven so you need to change this also because this function takes the size of the array so now the size is seven right once again run the program and it shows 345 which is correct now if you want to pass an array on size 8 and I will add one more element of and for example I will just uh add 100 once again now 245 + 100 + 100 is equal to 445 right the array size is now 8 and once again run the program and it so shows 445 which is true right so in this way you can use uh array or you can use a function and pass uh uh array as an argument of the function uh using C hello guys welcome to the next video tutorial on C programming for beginners and in this video we are going to learn what are Pointers and how to use pointers in C now some of you may think that pointers is a very uh complicated concept to understand but actually it's not so if you can understand this concept it will become really easy to use pointers in C so first of all what are Pointers a pointer is a variable whose value is the address of another variable so once again what is a pointer a pointer is a variable whose value is the address of another variable okay now you may ask what is the address of a variable so in C whenever you declare uh variable for example variable X or variable well is equal to whatever 30 right so whenever you declare a variable in C C stores this variable at some particular memory address in your computer okay now in order to access this uh value or access the address of uh this variable where it's stored in your computer memory you can just uh access this address like this so for example we want to print this address we can just write print F and then we can write address of Val is equal to percentage D and then comma and then come comes the interesting part you use and symbol to show the address of any variable so whenever you uh use this end symbol before any V Val variable it will show the address of the V variable right so we have written something like this okay but because address is a hexad decimal value this percentage D will not work here because percentage D we use to print decimal values right and to print hexa decimal values we use this okay percentage X and this percentage X means we want to print some hexa decimal values in C okay so whenever you use end before a variable name it will give you the address of a variable and let's try to run the program and let's see what it prints and it prints 28 ffc1 you see 28 ffc1 and this means it's a hexa decimal memory address in your computer where this variable well is stored in your computer okay now now once again what is a pointer pointer is a variable a simple variable whose value is the address of another variable and what is this we are by using and before a variable we are using or we are accessing the address of a variable okay so a pointer can be declared as this value also before that and symbol now to declare a pointer in C you just do something like this so it has the data type and then this srix tells C that you want to declare a pointer okay so I declare a pointer pointer for example p and I will just declare this pointer like this so it's same as a variable right but before if you write this estri before this variable it becomes a pointer now pointer is a variable whose value is a address of another variable okay and why I'm stressing this so now whenever you use this pointer variable pointer p is equal to its value can be the address of another variable so this is our variable and the address of variable is this one so its value can be address of Val okay and whenever you assign this address to the pointer you don't need to use estx before it okay so at the time of Declaration only you just need to give this srix okay and at the time of assignment you don't need this uh you know estx before this variable now this pointer has the address of this value right now how can you access this value 30 using this pointer first of all Let's uh try to print what is in the pointer so once again we write here and let's change the line from here and here also and we will print this pointer P so we can just write value of pointer variable okay now let's see what is is the value of this pointer variable without this uh and symbol okay basically this value and this value should be same why because we have assigned this address of a variable to this pointer variable okay this and this should print same values let's try to run this and it prints the same value 28 ff18 and value of pointer variable is 28 ff18 right so pointer just stores the address of variables now in order to access the values which is stored on this address you use you can so you want to access the value 30 for example using this pointer so using this pointer you want to uh access this value which is 30 but pointer only uh you know can store the address of the variable so this variable have the value of 30 and the address of 28 FF something right now to access the value of a address you use something like this so value of uh for example pointer pointer you can access it like this by a ASX before your pointer okay and this basically what it does is it so this pointer contains the address and whenever you add this estx before this pointer it shows the value at that address okay so let's try to run the program and let's change this percentage X to percentage T because we want to access this value which is an integer 30 right run the program and now it shows the value of pointer is 30 right so once again we will repeat what we have learned so every variable in C is stored in your computer at a particular address and this address you can access by adding this end symbol before your variable now what is a pointer a pointer is a variable whose value is the address of another variable right so you can declare pointers like this by just adding uh srix before your variable name and the value of the pointer so you can assign some value to the pointer using a address of another variable so this is our variable for example we want to assign this variable address to the pointer you just assign it like this now to dfference uh this uh pointer def reference means to get the value which is stored at this address which is hold by this pointer you use this asri sign and this asri sign before a pointer tells C that we want to get the value of uh the address which is stored in this pointer okay so don't get confused and in the next video we will learn more about about pointers and other stuffs in C hello guys welcome to the next video tutorial on C programming for beginners in the last video we have seen what are Pointers in C and how we can use pointers in C and I have given you a simple example how to declare a pointer and how to assign values to the pointer and what is a pointer a pointer is a variable whose value is the address of another variable which we have seen in this line so this and symbol if you uh add before any variable it shows the address of the variable and this address we can assign to a pointer variable like this now in this video we are going to see how we can use arrays with pointer so let me give you an example for example we have uh array called value array which contains for example three values so we can Define array of size three like this and we can initialize array with these three values for example first value is 30 second value is 40 and third value is 50 right and now we can assign this array to a pointer in the same manner we have assigned a variable to a pointer variable right so for that we need to declare a pointer array so we will name it as pointer array and in the same manner as array we will give the size to the pointer now to assign the values from array to a point array we just need to use for Loop to iterate over a our array so we will write for INT I is equal to 0 I should be less than three because our array is of size three then I + plus and then inside our for Loop we can assign the values from array which is this array to the pointer array like this so we will just use the pointer array variable name and in the bracket we will provide index as I so it will increase as the value of I increases is equal to the address of the array Index right so this variable but the address one by one right so we will add this which indicates we are going to uh show the address or we are going to access the address of uh the variable which we write just after this end symbol so we are going to write access the address of value array at index I okay and hopefully in arrays when I have shown you how to use arrays using for Loop and how to access the values of array using for Loop you know uh this concept of iterating the values of array using for Loop so I'm not going to repeat this uh basically this for Loop we are going to use to iterate over this array one by one so I if I have the index zero we are accessing this 30 value if the index is one we are going to access this if the index is two we're going to access this value right so BAS basically what we have done we have assigned the addresses to our pointer array right so index of pointer is equal to you know whatever uh value is at this index the address of this right so what we have done here assign the address of array array elements okay now once we have assigned all these values to the pointer Now using this pointer you can access all these values how we are going to use once again a for Loop and in this follow Loop we are going to use or access our value using this pointer okay so what we are going to do here we are going to access our array like this so we will print T print F and then we can write uh variable array I for example or value value of variable array or well array at index I and then is equal to the value so what will be the value so what we can write here is basically instead of this I we can just use percentage D so write percentage D is equal to and then percentage D which will give you the value right and then after comma or let's give a line break to it also and then after Comma just write I after Comma just write the pointer now pointer this towards the address right and then whenever you write this something like this because we are in for Loop this contains the address of the index which is contained by I so basically this value is a address of a variable but if you want to access the value of uh this address or value which is contained at this add address we just need to use this D reference sing pointer once again like this okay and semicolon and now once we run the program let's see what happens build the program and we can access the value value of Val array is 0 is equal to 30 which is true 30 40 50 value of Val array 1 is equal to 40 Value of well array at index 2 is equal to 50 so basically you can assign your array to a pointer array like this and then access your array using a pointer array like this okay so in this way you can uh use array pointers in C hello guys welcome to the next video tutorial on C programming for beginners in the last two videos we have been seeing how to use pointers in C and how we can use array pointers in C now in this video we will see how we can pass pointers as an argument of a function so let me give you an example for example we want to pass uh uh variable as an argument to a function which is a pointer so for example I will write uh a function which will uh take pointer as an argument so I can return void which is returning nothing void and then get value for example this is the name of my pointer and I am this is the name of my function I beg your pardon and then I am passing an argument which is a pointer to this function right so uh my pointer for example pointer okay and then what I'm going to do is basically I'm assigning this so my pointer is equal to Su value okay so something like this pointer is equal to some value for example 1 10,000 okay okay now what this basically uh doing is uh we are using a function get values to assign whatever you pass as an argument of this function is equal to 10,000 right and because we are not returning anything whenever you want to return void in C you can just write return without returning anything just the keyword return and it means that you are not returning anything but your function ends here right now in order to use this uh get value function here in our main for first of all we will declare a variable for example int get uh the value for example right and we are not initializing it uh just the consider this because we will store at the address of uh this variable this value right so let's see how we can do this so we will just call get value function and remember what I have said a pointer once again a pointer is a variable whose value is the address of another variable right so this pointer is basically whenever you want to pass some variable in place of this pointer as an argument of this function you can basically pass the address of some variable in here as an argument right so how we can pass the address of some variable address we can pass it like this and whenever we write this address at the front of a variable it means the address of this variable right so basically you can do something like this so just always remember this definition a pointer is a variable whose value is the address of another variable so this is a pointer so in place of this pointer we can pass the address of another variable right and then what we will do here is print F the value so the value of get value right so the Magic Begins here so the value of get value is equal to percentage D and comma and then this value right so what do you think will be the value of this uh variable remember we haven't initialized our variable but we have assigned this variable to the function as an argument right so let's see the answer and then we will uh analyze what we have done so compile the program and it runs fine and it says the value of get the value variable is equal to 10,000 now let's see what we have done here so what we have done basically here is what is this function doing this function is taking a pointer or basically a address of a variable right because a pointer is a address of another variable right so we have passed address of another variable so this argument can be replaced by this value right address of the variable and what we have done basically is we have indirectly here what we have done here basically indirectly assign value 10,000 at the address of this variable right now whenever we uh will access this variable this value we will be able to access right right so this is the magic of pointer so you can assign some value to the address like this and you can access this value at the address like this okay and here you are not even returning anything but this address can store this value using pointers right so it's I mean for the first time when I have seen something like this it looked like a magic to me now the next thing is I have told you when I have uh uh shown you how to use arrays as an argument of a function and at that time I have told you that you can also pass pointers as an array arguments right so let's take another another another example okay so I will delete all this and how we can pass pointer array as an argument of a function so for example I will take uh the same example that we are going to return integer value and we want to know the sum of every element of an array for example int um my array and this array contains for example four variables and these four variables can be anything so you can assign for example 10 comma 20 comma 30 comma 40 okay and we want to uh get the sum of each of the elements 10 + 20 + 30 + 40 basically and then we want to get the results we will make a function which returns integer and then we can say get sum it takes array as an argument but I have shown you you can pass uh array in three ways to a function as an argument one is like int my or uh array well like this or you can just Define the size of the array or third is Third Way is you can just pass array like this as a pointer right and in this example we are going to just do the same so we are passing this pointer array and then we will also Define the size for example so in size and we will then just use this array to get the sum so we'll just write four but first of all Let's uh declare a variable which will contain the sum sum is equal to zero and then for inside this for Loop we will write int I is equal to0 and I should be I should be less than the size whatever we pass so this size is the size of the array and in our case the size will be four right semicolon I ++ and then we will just make a sum like sum plus is equal to if you remember I have given this example when we have seen how to pass arrays to a function right is equal to and then we can just take the array and then at every index of this array we are just summing this so we are just adding it to the sum right and once we have all the sum we will just return sum okay this should be return okay now we are passing this array we are going to pass this array as a pointer right so we will call this function get sum and in here we will also uh declare a variable in uh my sum for example and is equal to because this will return this function get sum will return the sum of the array which we will pass as an argument you can just store it into this variable so I will pass this my array as a first first argument and the second argument is the size of the array which is four you can see here and then we are going to print the value of my sum print F print F and the value the value of my sum is equal to percentage d right and let's see the what is the value of my sum and basically let's try to run the program and let's see if it matches the answer run the program and it gives the my sum is 100 so 10 + 20 is 30 30 + 30 is 60 60 + 40 is 100 so our sum is correct right you can just increase the value of element in the array for example 5 50 and the size will be now five here and run the program and basically you got the answer 150 right so in this way also you can pass array to a function as a pointer hello guys welcome to the next video tutorial on C programming for beginners and in this video we will see how string Works in C and what is a string now what is a string first a string is a single dimensional array of characters which is terminated by a null character now now let's see how we can declare string in Array and then we will look this definition once again so what I have said a character array so character array you can declare it like this care and for example my string this should be string and then character array so square bracket for example we Define the size of this is this array as six is equal to and here comes uh these curly braces and inside the curly bra braces you can Define the initialization to these characters right or you can do something like this okay so this is called a string once again the definition a string is a array of of character so this is the array of characters which is null terminated so in this/ Z in C is called null terminated character okay and so this hello is the string and our string is terminated by this null character that that's why we are saying our string as null terminated character array right in other terms you can define a string with a character array of uh nondefinite size for example care my other string and we give our our a uh a nondefinite size which is not defined and you can just write something like this and it's also totally valid okay so you can Define string in two ways in C one is like definite sized array and you can initialize it like this or uh undefined sized array of characters and you can initialize it like this now to print these uh string you can just use print F not this but print F and I can just print my string so I can write my string value is equal to percentage s so here we are using percentage s to uh print string right and comma we will just use this variable and let's see what is the value of this variable and let's uh give a line break to the message we are printing so that we can print in the next line the next message and in here we will just write my other string value and we will print this second variable like this okay and let's compile and run the program and it's printing the same value right my string value is equal to hello my other string value is equal to also hello right so in this way you can Define string in Array now there is a header file in C called string which you can add to your uh main. C and then you can use some function from this header file and you can perform some different uh functionality using this header file so first of all we will include this header file in our uh C main. C file so just include and then we will add string or string do H right so this is the header file in C which we can use to uh perform different uh functionality with string okay now the first F function from this string.h we are going to use is string copy s TR CP y okay this is this function and this function what it does is it enables us to copy one string to another okay so for example we have a string of some size for example let's say we have a string so string string one for example and we give this uh array of size of 12 and let's uh Delete for this for now and then we will declare in the same manner string two of size 12 and I will tell you why I'm taking this size as 12 okay in a moment and we will declare a third string and it's also of size 12 but we are not initializing it okay this should be string three okay and now using this string do H had a uh Hader file we can use this function called string string cpy and it takes two argument one is the destination and one is the source okay so for example we want to copy this should be for example let's change this to World okay so for example I want to copy string one to string three so this string copy function copies string one to string three in this way so you just write or you just take a variable in which you want to copy first as a first argument of Str Str copy and then you take the second argument this second argument is the variable whose value you want to copy okay so in other other word you can just uh think like this s CP Y and it's used to uh copy to D which is destination from source source this should be Source okay so to the destination from source so source is string one from which we want to copy and destination is uh string three and to which we want to copy okay now there is another function in string.h header file which is called string cat St c a t and this function allows us to concatenate two strings for example we want to concatenate this first string and second string we can concatenate it like this so just take a first string comma second string okay so we want to concatenate first string and just after that you want to join second string to it you can do it like this okay and when you hover over this what it says this says that this also can return some value okay so what's uh this uh string cat basically doing is it's adding string two to string one okay so add string 2 to string one which should be like this string two to string one okay now there is another function in uh C in this header called s t r l e n and this gives you the length of the string okay so for example we want to get the length of the string length means number of character or size of this uh uh character array for example right so we will do this also and this we will save in another variable for example we name this variable as integer length in length string one is equal to okay so this St Str length Returns the string of uh the variable which you pass it as an argument let's try to print all these values so first of all print F and this is the result of string copy we want to print for now for example string copy uh is equal to and percentage F percentage s and then we will just see the value of this uh string three because it we are copying into string three from string one using this function now in the same way let's change the line here in the same way we will see how this string cat works and we will see the value of string one because we are adding string two to string one so let's see the value of string one and we will also see the length so we will also see something like this so we will also verify this St Str Len and this this will be verified by this but this is the integer so we will write percentage D here let's try to compile the program and run it and it says first of all the string three value is hello which is true because we are copy we have successfully copied the value hello to string three okay so this is printing hello now second string s Str cat have concatenate our concatenated our first string and second string which is hello world so it has added second string to the first string the third uh value returns us uh 10 why it's returning 10 because now our string one has the size of 10 because it's hello world 1 2 3 4 4 5 for hello and 1 2 3 4 5 for world so string size is hello world now for example we want to see the size of uh string three it should be five because it only contains hello in it right compile it and it says five because the size of string three is h e l l o which is 1 2 3 4 5 characters that's why it's showing five here okay there are other functions in uh this header file uh for example string uh compare or some other functions for example you want to compare two strings you can use St Str cm and this compares the two strings so for this string. file is a very important uh header whenever you are working with string files hello guys welcome to the next video tutorial on C programming for beginners and in this video we will see what are structures in C and how we can use structures in C so the first question is what is a structure in C uh in C a structure is a collection of different uh variable which are grouped together to make uh make some logical uh group so for example I want to make a structure of a student uh there is no direct variable I can U uh give to define the attribute for a student so that I know that this uh attribute is for some particular student there can be many students and there can be uh you know I have to declare so many uh variables and in the end when I have so many variables I can get confused uh which which variable is assigned to which student so structures make it very easy to uh Define if you have a group of variable to which you want to bind uh in a logical group so let's see how we can uh uh declare a structure in C so structure you just uh need to use struct keyword in U to define a structure and then the name of the structure for example student and then comes these uh curly braces uh just need to change the fonts so then comes these uh curly braces here and then inside these curly braces you can Define your variable so what attributes the students can have he can have his ID his or her so this ID can be an integer so I will Define int ID then a student can have his uh name so I can Define string as a name so string for example care uh pointer I can Define it as name hello guys welcome to the next video tutorial on C programming for beginners and in this video I will teach you what is a structure in C and how we can use structures in C now what is a structure structure is a group of variable which you can group uh together to make a logical uh you know variable for example you want to Define some database of uh some student or you want to uh uh create some record of a student or some students uh it will be very difficult to Def Define variables to each student and then if in the end if you have many variables containing the student record uh it can get a little bit messy but uh we can uh make this situation better by using structure so structure is a logical uh group of variables so to define a structure for example I want to define a structure of student uh to define a structure we use a keyword called struct and then we uh give the name of the structure for example I give the name to my structure as student and then comes curly braces and inside these curly braces you define your attributes for this student structure okay so for example what attributes or what traits a student can have a student can have uh his ID which can be integer ID student ID can be integer so I Define integer then student have his name which can be character and student can have his score or marks which can be in percentage and percentage we will Define it as a floating uh point so uh he can have these three attributes or these three traits right now for each student we can Define this a different uh you know instance of a structure and we can use structure uh to make a logical group of these three variable for a particular student okay now once you define uh the structure this kind of structure you can use it in your main function like this so whenever you define a structure you need to call it inside your main function and how you can call it you can just copy the name of the structure and struct keyword itself and then give the name to this student structure right so for example you will give this student structure name record one for example this uh indicates the student record student record of student one for example right now this is the variable you define for this student structure so this can be treated the student can be treated as a data type in this case and structure is a key keyword which tells that it's uh uh student data type which is a structure okay and this is your variable name just uh think it think it like this okay now whenever you want to assign some value to this record which is a uh instance of uh the student structure instance means one uh part of this student uh then how you can do it you can just do it simply like this so you just need to take this record and you for example you want to assign ID to this uh record you just need to use this dots separator and you will be able to see the member variables of this uh student uh structure you can see automatically in code blogs okay so these ID name and percentage are called the members of the structure okay and you you can call them using this dot separator or after this variable okay so for example student ID is equal to uh one for example I have assigned one to record one and student uh name so I will once again use this do name and then I can assign any name to this student but if you remember in the last video when I uh teach you what are strings I taught you how you can copy a string to uh you know a character array right or you can assign or copy a string you can just use a function called St St cpy which is string copy and then you can use uh this thing so the first argument of this function is the destination where you want to assign the value and second uh uh argument is the value itself for example the value is John so basically what we have done is we have assigned John as a value to this uh name variable record. name variable okay and the third we can assign percentage like the same so record one dot percentage is equal to for example uh 70.2 okay these are the percentage scored by him okay now once you assign uh these uh values to the structure or the to the instance of the structure you can access these values also using uh your print uh uh print function so just use print and then you can just call for example ID so uh you can just write ID is equal to percentage D and then you can just give the space uh and just write name is equal to percentage s and just gives little bit more space and then just write percent is equal to uh percentage F okay so this is for holding the decimal value this is for holding the string this is for holding uh the float in point right and we will give the line break here also and then we will assign or we can we can access the values which we have assigned just by like same as we have assigned the values so record. ID will give you the ID record. name will give you the name and record. percentage record one. percentage will give you the percentage okay like this so let's uh break this print into few lines so we can see it easily okay so we can access these values like this okay so let's try and run the program and hopefully it doesn't contain any errors and you can see ID is equal to 1 name is equal to John and percentage is equal to 70.1 1999 which is 70.2 Z right so in the same way you can uh Define different instance of the student structure and you can maintain a record of the student for example uh you define uh some different structure so I will just copy the same and paste it below to uh Define a second uh record and this record I will name it as record two everywhere I will just change it record two record two record two here also record two so I will just copy record two for the student two okay and the ID now is uh two the name will change for example Mark and the percentage also changes for example 9130 okay and now we have two two records of the student student with uh student ID 1 and student with student id2 so logically we have two record for students right run the program and now it says ID is equal to 1 name John percentage 70 something ID is equal to 2 name Mark percent uh 90.1 something right so in this way you can uh Define as many instances of this structure as you want and you can uh you know create uh uh record for the student or so this is one way of using structure there's one more way of using structure uh in C and this is by directly giving the name to your student uh structure for example I can just delete this line from here and instead of giving the name to this uh uh student variable here I can just give the name at the Declaration of this student structure for example record right and then this record will be my variable name okay so the student is the structure and record will be the variable name of your uh structure okay and then you can use this record to uh uh you know access the value or assign the values to this record for example here you can just replace record like this and it will work like same so you you don't need to declare this record inside your main this can be also declared like this and this will be your variable name and you don't need to declare inside your main and when you run the program it'll run fine it'll give you the output so in this way you can use structures in C and uh try uh you know using structures uh by yourself and try practicing uh using structures and you will be good to go hello guys welcome to the next video tutorial on C programming for beginners and in this video we will see what is a union and how we can use Union in C now in the last video we have seen how to use structures in C and Union functionally work like structure but there are some key differences between structure and Union which I'm going to discuss so first of all uh let's comment this structure for now and we are going to declare a union okay so as structure unions are also declared with a keyword Union and then you can give any name to the union for example my union and then comes these curly braces like these and then this semicolon okay and in Here Comes Your variables like you declare in the structure okay and if you know whenever we declare a variable it has some size size or depending upon the data type so integer has a size of four and character has a size of one bite okay so for example if we want to declare this uan Union Let's uh Define the union type also u u and I for example and now we declare a union here un I and then we can use un to give values to our my int variable and my car care variable for example my in is equal to 4 and then un I dot my car is equal to 9 okay and and uh now let's compile if it works or not and you and I have the problem here so let's see what's the problem I should use something like this not here but un Union my union is equal to un I okay now compile the program and it works fine okay so now we are going to print the value of my care and my int here so we will just write print and inside the bracket we will just write percentage i/n for next line and then we just print the value of my care first okay un doare here and compile and run the program it here should be semicolon I forgot and run the program and what's the problem here the problem is warning implicit Declaration of something so problem is here in print f it should be print F and when I run the program it gives me five which is correct you uni. my care we have assigned the value of nine which is giving the answer but let's see what happens when we try to access the value of my int okay here we will try to access the value of my int instead of my care it gives us the same result which is nine which is not true so what's happening here so whenever you define a structure like this it allocates its varable or member variables to some memory space so for example you have defined uh variable my my int and my care in your my stru structure then it allocates four bytes of memory in some memory space in your computer for myint and it allocates uh one byte of memory for this character in some other memory space so when we see in the memory uh map for example it will look like this 1 2 3 4 so these fours bytes are for your my in my int right my int variable or integer variable okay and this one byte is for care okay now whenever you use Union the memory mapping is little bit different so whenever you declare a union it has the size of the variable whose size is maximum so the maximum size of a variable inside this Union is is four which is from integer my int because uh four is greater than one so the size of Union will be four in this case so Union allocates the size to itself from a variable whose size is maximum so the union size in this case is four so inside of a this is struct for example and for Union the memory Maps will be something like this 1 2 three and four so it allocates memory this memory to the in integer and in a in the same memory it can allocate the one bite for the character okay so they share so members inside a union share this memory space or size but inside the structure they are allocated at different places okay so that's why whenever you assign four it will be assigned in these four bytes and so you have for the first time when you assign four in the integer it will be assigned here but as soon as you assign nine to this character then it will be overwritten to these four bytes okay that's why we are getting the answer nine here so this is the main difference between structure and Union structure allocates different memory location to its variable but Union allocates the same memory location and the size of the Union is the maximum size of a variable inside it so if my int has the maximum size the size of the Union will be the same now to prove this we can uh just print the size of these structure and the union okay so let's try to to print the structure size and use Union size okay so for printing the structure size there is a function called size of and using this you can calculate the size of the structure so our structure name is record in this case so we will just calculate the size of record and in this in the union case our Union name is UN I right so we can get the size of un I and let's uh say here the size of the SI size of struct and just below it we can say the size of Union okay and and compile the program and run the program and it says the size of structure is 8 and the size of Union is four okay now you may be wondering that the size of structure should be five because the size of integer is four for integer variable and the size of character is one for the character variable where does this eight comes from as a size because whenever structure whenever you provide some variable to the structure it calculates the memory or size by adding the size of these variable plus it gives the padding plus it adds some padding so that it can become the multiple of uh four or eight or something like this that's why it the you are seeing eight here because five is not the multiple of8 or four okay so structure provide or C provides some padding to uh the structure so that its size become eight instead of five but the size of Union is four as I have told you that the SI it's the size of the variable which has the maximum size so size of Union is four in this case is and you may also be wondering where we can use Union if they overwrite the stuff uh every time you you know try to access them the union are mainly used in embedded programming wherever you you know try to access some memory or something like this there uh it's mostly used but you need to read about this where can you possibly you know use this Union so I hope you have understood the basic concept of Union and I hope you have enjoyed this video please RIT comment subscribe and bye for now
