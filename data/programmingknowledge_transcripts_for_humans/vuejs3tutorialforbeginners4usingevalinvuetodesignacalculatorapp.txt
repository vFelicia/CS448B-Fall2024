With timestamps:

00:00 - hello everyone welcome to new vhs
00:01 - tutorial in today's tutorial we are
00:03 - going to design a calculator app using
00:05 - view js
00:06 - using the eval statement so let's
00:09 - take this one this time i'm using
00:11 - sublime text editor
00:12 - so this is a very basic component i have
00:15 - created and this is my app galaxy
00:17 - component
00:18 - and it's like this is my this is a
00:20 - vue.js component
00:22 - and i have mounted this on the id that
00:25 - is my app calc and this is the
00:28 - calcio.html and this is the id given
00:30 - below
00:31 - so this is like a very basic component i
00:34 - have rendered on the front end and it is
00:35 - very much common to my previous
00:37 - uh like tutorials how i rendered them
00:40 - on the front end so it is very common
00:42 - and easy and it's very
00:44 - basic so i've already made this so that
00:46 - it saves our time and we can already get
00:48 - started we should we could have a quick
00:50 - start to a tutorial
00:51 - so you can move to the project directory
00:54 - click on this html page right click
00:56 - inspect and this would return
00:59 - you the on console that you are running
01:01 - a development builder view
01:02 - so make sure to use production bit so
01:04 - that's perfectly fine
01:06 - so no issue so what you can do
01:10 - you can make a form and
01:13 - inside this form you can add so
01:16 - i'm using some line like for this time
01:19 - like it's
01:20 - like i've already have a huge font size
01:23 - so it's to give you better visibility so
01:26 - now in this you can give input
01:29 - input and then the type is going to be
01:32 - text
01:33 - and name is equal to query
01:36 - and id is equal to query
01:40 - and we are going to remodel this
01:44 - we model this is equal to
01:48 - query so you can
01:52 - you can remove this to avoid any
01:54 - confusion like it's not needed as of now
01:57 - so you can remove this and
02:01 - what you can do calcium.js so
02:05 - now what you can do you can
02:09 - build query and
02:13 - give empty parenthesis okay
02:17 - now you can refresh the page
02:20 - and failed to drive direct model
02:23 - okay i made a spelling mistake so this
02:25 - was v
02:26 - model and you can
02:30 - you can refresh this page so it works
02:32 - perfectly fine
02:33 - and now what you can do that i have a
02:36 - data query which is an empty string i
02:38 - have already
02:39 - mounted this on the front end and what i
02:42 - can do
02:43 - i can type for you
02:47 - using the paragraph tag
02:52 - you searched your query
02:56 - is this query inside the parenthesis
02:59 - which would give
03:00 - us the value so now let's refresh
03:04 - the page and your query is 2 plus
03:07 - 3 into 5 so this works perfectly fine
03:10 - okay now okay i
03:13 - forgot to put an r your query is this
03:15 - now
03:16 - for the same what you can do you can put
03:19 - input
03:20 - type is equal to submit
03:24 - and the value you can give is to
03:27 - calculate
03:31 - okay and you can give
03:34 - a hr tag below so
03:38 - this was just for demonstration purpose
03:40 - like to give an overview
03:42 - and here it works perfectly fine so your
03:44 - query is 2 plus 3
03:46 - star 5 now if i want to like if i want
03:50 - to evaluate this query so i should use
03:52 - an eval statement
03:54 - so i should use an error statement and
03:56 - how can i use this
03:57 - is first i need to define a form and the
04:00 - date
04:01 - submit dot prevent
04:05 - is equal to my my method
04:09 - so this should call my method there in
04:12 - uh like my method
04:14 - or you can define this my
04:17 - eval function okay my eval you need to
04:21 - define this my eval here
04:24 - my eval and
04:27 - this is a function which is going to be
04:30 - called
04:32 - and what you need to do
04:36 - okay so you need to define my eval
04:38 - function
04:40 - and what you need to do console
04:43 - dot log this dot query
04:48 - okay so first we will just console.log
04:51 - this dot query so let's
04:53 - type this are we getting at the back the
04:55 - at the mounted part or not
04:57 - two thrusts two plus three star five
04:59 - calculate and here we see we have
05:01 - already got the query that is two plus
05:02 - three into five
05:04 - so we've already got this so it's
05:06 - working perfectly fine
05:08 - so what we can do we can evaluate this
05:10 - using the eval
05:11 - and let what we can do console.talk
05:18 - uh let's we should take an another
05:20 - parameter that
05:21 - result and we
05:24 - can also keep this as an empty string
05:27 - and
05:28 - what we can do uh we can assign this
05:31 - result
05:32 - this dot result is equal to
05:36 - eval
05:39 - this dot query okay
05:42 - and then we can your query is this
05:46 - and what you can do simply you can put
05:49 - this
05:51 - this is equal to
05:55 - result i hope this is perfectly fine
05:58 - so let's refresh the page i can
06:02 - already copy this and refresh the page
06:05 - so 2 plus 3 star 5 is equal to 17 so
06:08 - this is how we can
06:09 - use this so we can now remove this
06:11 - console.log statement it was just for
06:14 - the debugging part
06:15 - now we can store these results
06:18 - and for storing this result we can use
06:21 - an added data structure
06:23 - that is calculations
06:27 - and this is the calculations part and
06:31 - we can push this the result after query
06:34 - this
06:35 - dot calculations dot push
06:39 - we are going to define a push function
06:41 - and what we are going to do
06:42 - define a query
06:47 - a query so we are defining a json object
06:50 - so that's that this dot query
06:54 - and we are going to define a result
06:58 - and this is going to be this dot result
07:03 - and what we can do uh
07:06 - we can also push one thing uh like
07:11 - time okay
07:14 - and this is date
07:19 - to string
07:22 - so i hope this works perfectly fine yes
07:25 - so let's
07:26 - refresh this page and what we can do
07:30 - we can render this
07:34 - on our front end calculations
07:39 - okay so let's refresh this page 2 plus 3
07:42 - star
07:43 - 5 so we are storing this
07:46 - and this is already showing us the time
07:48 - then let me
07:50 - change the query always storing this
07:53 - so we are already storing this
07:54 - calculations
07:57 - and yes so this works perfectly fine
08:00 - and we can use a v for loop
08:03 - on the front end so for that we can use
08:10 - unordered list
08:13 - and we can use li
08:17 - v for item
08:23 - in calculations calc
08:27 - calculations
08:31 - okay so we can
08:34 - define we can close this and we can
08:37 - define
08:39 - item dot query
08:45 - is equal to item
08:48 - dot result
08:54 - and we can define item
08:58 - so this is calculated.js and we can have
09:01 - item dot
09:02 - time okay so let's refresh the page
09:08 - we can click two plus three
09:11 - okay two plus three is equal to five
09:15 - calculations okay i made a spelling
09:17 - mistake this is calculations
09:21 - yeah now perfectly one two plus three
09:25 - yeah so here we maintain the history
09:27 - plus the result
09:29 - we make another calculations yes we make
09:31 - some another calculation so
09:36 - this is how we make calculations and
09:38 - storing them in history
09:39 - so this is how we design a calculator
09:41 - app and
09:43 - we can also use the last result and we
09:46 - by indexing so
09:47 - we can modify them when we click on the
09:50 - last result so last could
09:52 - also become available so this is how we
09:54 - manipulate
09:55 - data in view js and this is a simple
09:58 - design how we can design a calculator
10:00 - app using the power and maintain the
10:02 - history as well
10:03 - so you could integrate this with the
10:05 - backend and store this history in a
10:07 - database as well
10:08 - so thank you everyone for watching this
10:10 - tutorial i'll catch you in the next
10:12 - tutorial thank you very much

Cleaned transcript:

hello everyone welcome to new vhs tutorial in today's tutorial we are going to design a calculator app using view js using the eval statement so let's take this one this time i'm using sublime text editor so this is a very basic component i have created and this is my app galaxy component and it's like this is my this is a vue.js component and i have mounted this on the id that is my app calc and this is the calcio.html and this is the id given below so this is like a very basic component i have rendered on the front end and it is very much common to my previous uh like tutorials how i rendered them on the front end so it is very common and easy and it's very basic so i've already made this so that it saves our time and we can already get started we should we could have a quick start to a tutorial so you can move to the project directory click on this html page right click inspect and this would return you the on console that you are running a development builder view so make sure to use production bit so that's perfectly fine so no issue so what you can do you can make a form and inside this form you can add so i'm using some line like for this time like it's like i've already have a huge font size so it's to give you better visibility so now in this you can give input input and then the type is going to be text and name is equal to query and id is equal to query and we are going to remodel this we model this is equal to query so you can you can remove this to avoid any confusion like it's not needed as of now so you can remove this and what you can do calcium.js so now what you can do you can build query and give empty parenthesis okay now you can refresh the page and failed to drive direct model okay i made a spelling mistake so this was v model and you can you can refresh this page so it works perfectly fine and now what you can do that i have a data query which is an empty string i have already mounted this on the front end and what i can do i can type for you using the paragraph tag you searched your query is this query inside the parenthesis which would give us the value so now let's refresh the page and your query is 2 plus 3 into 5 so this works perfectly fine okay now okay i forgot to put an r your query is this now for the same what you can do you can put input type is equal to submit and the value you can give is to calculate okay and you can give a hr tag below so this was just for demonstration purpose like to give an overview and here it works perfectly fine so your query is 2 plus 3 star 5 now if i want to like if i want to evaluate this query so i should use an eval statement so i should use an error statement and how can i use this is first i need to define a form and the date submit dot prevent is equal to my my method so this should call my method there in uh like my method or you can define this my eval function okay my eval you need to define this my eval here my eval and this is a function which is going to be called and what you need to do okay so you need to define my eval function and what you need to do console dot log this dot query okay so first we will just console.log this dot query so let's type this are we getting at the back the at the mounted part or not two thrusts two plus three star five calculate and here we see we have already got the query that is two plus three into five so we've already got this so it's working perfectly fine so what we can do we can evaluate this using the eval and let what we can do console.talk uh let's we should take an another parameter that result and we can also keep this as an empty string and what we can do uh we can assign this result this dot result is equal to eval this dot query okay and then we can your query is this and what you can do simply you can put this this is equal to result i hope this is perfectly fine so let's refresh the page i can already copy this and refresh the page so 2 plus 3 star 5 is equal to 17 so this is how we can use this so we can now remove this console.log statement it was just for the debugging part now we can store these results and for storing this result we can use an added data structure that is calculations and this is the calculations part and we can push this the result after query this dot calculations dot push we are going to define a push function and what we are going to do define a query a query so we are defining a json object so that's that this dot query and we are going to define a result and this is going to be this dot result and what we can do uh we can also push one thing uh like time okay and this is date to string so i hope this works perfectly fine yes so let's refresh this page and what we can do we can render this on our front end calculations okay so let's refresh this page 2 plus 3 star 5 so we are storing this and this is already showing us the time then let me change the query always storing this so we are already storing this calculations and yes so this works perfectly fine and we can use a v for loop on the front end so for that we can use unordered list and we can use li v for item in calculations calc calculations okay so we can define we can close this and we can define item dot query is equal to item dot result and we can define item so this is calculated.js and we can have item dot time okay so let's refresh the page we can click two plus three okay two plus three is equal to five calculations okay i made a spelling mistake this is calculations yeah now perfectly one two plus three yeah so here we maintain the history plus the result we make another calculations yes we make some another calculation so this is how we make calculations and storing them in history so this is how we design a calculator app and we can also use the last result and we by indexing so we can modify them when we click on the last result so last could also become available so this is how we manipulate data in view js and this is a simple design how we can design a calculator app using the power and maintain the history as well so you could integrate this with the backend and store this history in a database as well so thank you everyone for watching this tutorial i'll catch you in the next tutorial thank you very much
