With timestamps:

00:00 - and in this video
00:01 - we are going to
00:02 - use the logical operator with if else
00:06 - so
00:07 - what are logical operators logical
00:09 - operators help us make logical decision
00:12 - so logical operators are basically of
00:14 - three types logical or logical not or
00:18 - logic and logical and
00:21 - so
00:23 - the result of any logical operator
00:26 - is always
00:27 - an boolean value okay and
00:31 - logical operators are mostly used to
00:33 - evaluate two conditions
00:36 - so uh
00:38 - i'll just mention
00:40 - the logical
00:43 - operator so we will use this sign for
00:46 - logical or operators
00:48 - and for logical and operators we will
00:52 - use
00:53 - the ampersand two times
00:55 - and we will use the this sign for
00:57 - logical and operators and for logical
01:00 - not operator
01:01 - i'll use the exclamation mark
01:05 - so let's just go ahead and understand
01:09 - about
01:10 - these
01:10 - operators so
01:14 - i'll just create a
01:16 - main function and then inside the main
01:18 - function
01:19 - uh i'll
01:20 - create a if if
01:22 - if block so
01:24 - i have to evaluate a condition
01:28 - like if this is true or that is true
01:31 - okay so if i is equals to 5
01:35 - before that i have to just mention the
01:37 - variable i
01:39 - is equals to 3 okay so if i is equals to
01:42 - 5
01:43 - or
01:46 - i is equals to
01:48 - 3
01:49 - okay in that case
01:51 - i'll
01:53 - print
01:54 - that i is
01:57 - i
01:59 - is either
02:01 - 5 or
02:03 - 3
02:04 - ok
02:05 - so that is the basic meaning of an or
02:08 - operator
02:10 - okay so when i use an or operator
02:14 - what it does is
02:15 - it checks the first condition
02:18 - and it takes the second condition also
02:19 - that's let's say that first condition is
02:21 - i equals to five and second condition is
02:23 - i is equals to three
02:24 - so when i use the or logical or operator
02:27 - if the first condition is true
02:30 - and the second condition is true
02:32 - then the output is also true
02:35 - and
02:36 - if the first condition is true and the
02:39 - second condition is false then also the
02:41 - output is true if the first condition is
02:43 - true and if this first condition is
02:45 - false and the second condition is false
02:48 - then also the output is
02:51 - true
02:52 - and
02:53 - only in the case when both the condition
02:55 - are false then only the output is false
02:58 - okay
02:59 - so let's just go ahead and
03:02 - run this
03:03 - program and get a better understanding
03:06 - of what i said okay
03:08 - so
03:10 - here i is three so this is true and but
03:13 - this is not true
03:15 - but you we can see that
03:17 - the
03:17 - output of this this condition this
03:20 - condition as in whole is true
03:24 - so i'll just go ahead and change the
03:26 - value of is4
03:29 - now
03:29 - i can see that both of the conditions
03:32 - are false
03:34 - so it's just it does not go into the if
03:36 - block and just skips that
03:39 - it is because that the both condition
03:41 - are false then only
03:44 - the
03:44 - uh
03:46 - the code does not get executed okay so
03:49 - i'll just go ahead and create a new
03:51 - variable
03:52 - a
03:53 - and give it that value as 5
03:56 - now
03:58 - i'll use the end operator and logical
04:00 - operator
04:02 - okay
04:03 - so
04:04 - if i is 5 and a is
04:08 - 5
04:09 - then print
04:11 - i is
04:13 - five and a is three
04:17 - okay
04:18 - now uh
04:20 - just we will just understand this so
04:22 - what is and logical operator
04:24 - so it it it should say that
04:29 - my condition 1 should be true and my
04:31 - condition 2 should be true
04:33 - ok
04:34 - so
04:35 - here my condition 1 is i is 5 and my
04:39 - condition 2 is a is 5 so when both
04:41 - conditions are true
04:43 - then only the output is true
04:45 - now suppose any one of my condition is
04:47 - false and the another condition is true
04:51 - then
04:52 - the output of this is false because when
04:56 - i check this that
04:58 - you know i is equals i should be equal
05:00 - to 5 and a should be equals to 5 but
05:03 - when i is not 5 and a is 5
05:06 - the if if block is not executed because
05:09 - it
05:10 - when i use the end operator if block is
05:12 - only executed when both conditions are
05:14 - true okay and if both conditions are
05:17 - false then then also it will not get
05:20 - executed so when i run this program
05:24 - i can i can predict that
05:26 - it does not get into the if if let if
05:29 - block and yes it does not get into the
05:32 - if block
05:33 - so i'll just change the value of i is 5
05:41 - and
05:41 - i can see that ok so my bad
05:45 - and yes
05:46 - the if block gets executed when both
05:49 - conditions are true
05:51 - so that was about the and logical
05:53 - operator now what about the not logical
05:56 - operator
05:57 - so
05:58 - when i use the
06:01 - logical operator like
06:03 - you you can remember when i was
06:08 - covering operators
06:09 - i used
06:11 - exclamation mark equal to that
06:12 - represents not equal to okay
06:15 - so when i use i
06:17 - not equal to 5 and i change here i7
06:22 - so the if block will get executed here
06:26 - because i is not equal to 5
06:28 - as simple as that
06:30 - okay so the logical not is used to
06:34 - negate the condition whenever the
06:36 - condition is true the output is false
06:38 - and whenever the condition is
06:40 - false the output is true
06:43 - okay
06:45 - so
06:49 - like till now we have covered
06:51 - the
06:52 - logical operators in
06:54 - f else
06:55 - and
06:57 - the
07:00 - if else ladder the nested effects
07:04 - okay
07:05 - in the next video we will
07:07 - cover
07:09 - another topic

Cleaned transcript:

and in this video we are going to use the logical operator with if else so what are logical operators logical operators help us make logical decision so logical operators are basically of three types logical or logical not or logic and logical and so the result of any logical operator is always an boolean value okay and logical operators are mostly used to evaluate two conditions so uh i'll just mention the logical operator so we will use this sign for logical or operators and for logical and operators we will use the ampersand two times and we will use the this sign for logical and operators and for logical not operator i'll use the exclamation mark so let's just go ahead and understand about these operators so i'll just create a main function and then inside the main function uh i'll create a if if if block so i have to evaluate a condition like if this is true or that is true okay so if i is equals to 5 before that i have to just mention the variable i is equals to 3 okay so if i is equals to 5 or i is equals to 3 okay in that case i'll print that i is i is either 5 or 3 ok so that is the basic meaning of an or operator okay so when i use an or operator what it does is it checks the first condition and it takes the second condition also that's let's say that first condition is i equals to five and second condition is i is equals to three so when i use the or logical or operator if the first condition is true and the second condition is true then the output is also true and if the first condition is true and the second condition is false then also the output is true if the first condition is true and if this first condition is false and the second condition is false then also the output is true and only in the case when both the condition are false then only the output is false okay so let's just go ahead and run this program and get a better understanding of what i said okay so here i is three so this is true and but this is not true but you we can see that the output of this this condition this condition as in whole is true so i'll just go ahead and change the value of is4 now i can see that both of the conditions are false so it's just it does not go into the if block and just skips that it is because that the both condition are false then only the uh the code does not get executed okay so i'll just go ahead and create a new variable a and give it that value as 5 now i'll use the end operator and logical operator okay so if i is 5 and a is 5 then print i is five and a is three okay now uh just we will just understand this so what is and logical operator so it it it should say that my condition 1 should be true and my condition 2 should be true ok so here my condition 1 is i is 5 and my condition 2 is a is 5 so when both conditions are true then only the output is true now suppose any one of my condition is false and the another condition is true then the output of this is false because when i check this that you know i is equals i should be equal to 5 and a should be equals to 5 but when i is not 5 and a is 5 the if if block is not executed because it when i use the end operator if block is only executed when both conditions are true okay and if both conditions are false then then also it will not get executed so when i run this program i can i can predict that it does not get into the if if let if block and yes it does not get into the if block so i'll just change the value of i is 5 and i can see that ok so my bad and yes the if block gets executed when both conditions are true so that was about the and logical operator now what about the not logical operator so when i use the logical operator like you you can remember when i was covering operators i used exclamation mark equal to that represents not equal to okay so when i use i not equal to 5 and i change here i7 so the if block will get executed here because i is not equal to 5 as simple as that okay so the logical not is used to negate the condition whenever the condition is true the output is false and whenever the condition is false the output is true okay so like till now we have covered the logical operators in f else and the if else ladder the nested effects okay in the next video we will cover another topic
