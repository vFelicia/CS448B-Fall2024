With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - open CV tutorial for beginners using
00:04 - Python in this video we will discuss
00:07 - about template matching in open CB so
00:12 - first of all what is template matching
00:14 - so template matching is a method of
00:17 - searching and finding the location of a
00:21 - template image inside a larger image in
00:25 - open CV there is a method called match
00:29 - template for achieving this purpose so
00:34 - let's get started and let's see an
00:36 - example about it so I have this simple
00:39 - code which just loads this image and
00:42 - let's see what this image looks like so
00:47 - this is the image and this is the messy
00:50 - image and what I want to do is I want to
00:54 - match the face template which I have
00:58 - which looks like this which is the
01:01 - smaller template which is also available
01:06 - inside this image so this will act like
01:10 - cut template for us and we will try to
01:13 - find this template inside this larger
01:17 - image so let's get started and let's see
01:20 - how we can search this template inside
01:23 - this larger image so first of all what
01:27 - we need to do is obviously we need to
01:30 - load this image and also load our
01:35 - template so before loading our template
01:39 - image I'm going to just convert my
01:42 - original image which is the larger image
01:45 - into the grayscale image so I have
01:49 - declared this variable create underscore
01:51 - image and then I'm going to just say CV
01:54 - to dot C BT color which is going to
01:59 - convert my image I am G and let's
02:03 - convert this image into CV 2 dot color
02:08 - underscore BG are to create now let's
02:12 - load our
02:14 - face image which is called messy
02:18 - underscore face dot jpg so I'm going to
02:21 - just change this name merci underscore
02:25 - face dot jpg and this will be our face
02:30 - image or you can also say this is our
02:33 - template and I'm going to also load this
02:36 - image as a grayscale image so I'm going
02:39 - to just pass the second argument in the
02:41 - read method as 0 which is going to load
02:44 - this messy image as a grayscale image
02:47 - now in the next line we will simply use
02:51 - this method which is called match
02:53 - template and we are going to save it
02:57 - into some variables so we can just say
03:01 - re s is equal to CB 2 dot match template
03:08 - which is this method which takes few
03:10 - argument first is our image so I'm going
03:14 - to pass our grayscale image here
03:17 - the second argument here will be the
03:19 - template which we are trying to search
03:22 - inside this image so this will be our
03:25 - template the third is the method so the
03:30 - method can be several method there are
03:34 - several methods available for the
03:37 - template matching so I want to show you
03:39 - these method for the template matching
03:43 - so you can see type of template matching
03:46 - operations and there is separate formula
03:50 - involved in order to match that template
03:53 - inside that image so so for now we are
03:57 - going to use this method which is TM
03:59 - underscore see Co F underscore normed
04:03 - dot TM underscore siku F normed which is
04:09 - this method now let's try to print this
04:12 - result and let's see what is the content
04:15 - inside this result so I'm going to just
04:18 - print the content inside this result
04:22 - which we got so I'm going to run this
04:24 - code and this image is loaded
04:27 - but for now we are interested in this
04:31 - array matrix which you are seeing here
04:35 - so you can see when you observe these
04:38 - values carefully you will see all are
04:43 - relatively a smaller value so you can
04:48 - see 0.2 0.2 almost every value is around
04:54 - --until 0.3 so the maximum value I can
04:58 - see here is 0.3 so let me just show this
05:02 - image once again and the the template
05:05 - also so what this result contains is
05:09 - these all values and there will be one
05:14 - value which contains the number for
05:19 - example point 8 or the brightest point
05:24 - okay so if here this matrix contains a
05:29 - value which have the value 1 it is the
05:33 - bright test point and it will be there
05:36 - inside this image after applying this
05:38 - match template method which will be
05:41 - around this point at this point at which
05:45 - this template matches so top-left corner
05:49 - of this template so at the point at
05:52 - which this left top corner of this image
05:56 - will match inside this large image there
06:00 - will be a brightest point there and that
06:04 - brightest point will be reflected inside
06:07 - this image in the form of this decimal
06:12 - number and all the other values will be
06:15 - slightly darker darker values okay so
06:20 - that's how this matrix from this matrix
06:23 - we will come to know the the top left
06:26 - corner of the template inside this
06:29 - larger image so now how can we filter
06:34 - out that value which is the brightest
06:37 - point inside this
06:40 - Metrix so all the points you can see
06:43 - looks like under 0.3 but there are some
06:47 - points here you can see three dots and
06:50 - there are thousands and thousands of
06:53 - values will be available here all the
06:57 - values are not printed okay so what we
07:01 - are going to do is we are going to try
07:03 - to find out the brightest point so this
07:06 - we can find out with the numpy method
07:09 - there is a method called we're using
07:13 - which we can find out or filter out
07:16 - those values which are greater than
07:18 - certain number so I'm going to first of
07:23 - all declare a variable called threshold
07:26 - is equal to I'm going to declare the
07:29 - value of threshold initially as 0.8
07:32 - which will be relatively brighter point
07:36 - inside the matrix which we are getting
07:40 - using this result variable right and
07:45 - then there is a method called where
07:48 - numpy where so I'm going to declare once
07:51 - again LOC variable and then P dot where
07:56 - method and here we are going to pass our
08:00 - result which we got and we are going to
08:03 - filter out using this expression so this
08:07 - will be a boolean expression so I'm
08:09 - going to just say give me all those
08:12 - values which are greater than or equal
08:15 - to the threshold inside this result
08:20 - matrix okay so this where method is
08:24 - going to just evaluate this expression
08:27 - each and every value will be evaluated
08:30 - and if this value inside the matrix is
08:34 - greater than 0.8 which is our threshold
08:38 - then it's going to give those values to
08:43 - us so let's print out those values after
08:45 - the filtering out of most of the values
08:49 - and let's just print this LOC variable
08:53 - also
08:53 - I'm going to run this code once again
08:55 - and you can see here this is the matrix
09:00 - which we got so you can see this is the
09:04 - array which we got so still we can
09:07 - increase this threshold in order to find
09:10 - out only one point so there are several
09:13 - points available here so let's say I'm
09:16 - going to increase this value to 0.9 and
09:21 - let's run this code again and you will
09:24 - see only two points 85 and 220 so this
09:29 - is what we were expecting so we wanted
09:32 - to find out this point which will be the
09:35 - brightest point inside this result
09:40 - matrix so once we got the brightest
09:43 - point which will be around here which
09:47 - will be the top-left corner as I said of
09:50 - this template and it will be located
09:53 - somewhere here in the original image
09:55 - then we can draw the rectangle around
10:00 - this original image same as the size of
10:05 - this template so this will be the easier
10:07 - task because we already know the width
10:11 - and height of this template we already
10:14 - know how to get the width and height of
10:16 - this template and same size rectangle we
10:20 - just want to draw on this original image
10:24 - so let's see how we can do this so there
10:29 - is already a method so I'm going to just
10:32 - declare two variables width and height
10:35 - and you already know the method so
10:39 - template dot shape is going to give you
10:42 - the shape of your image right so I'm
10:48 - going to just say template dot shape and
10:51 - then inside the square brackets we are
10:55 - going to just give two colons and minus
10:58 - one this means that we want to get the
11:03 - column and the row value in
11:07 - reverse order so width and height that's
11:09 - why I have given this minus one index
11:14 - here now in the next step what we are
11:16 - going to do is we are going to just draw
11:20 - all the rectangles where the template is
11:23 - is matched so by seeing this template
11:28 - image and the original image we know
11:31 - that there is only one messy face inside
11:34 - this image but let's say there are
11:36 - several number of matched templates
11:40 - inside our own original image for that
11:44 - we need to iterate over the result which
11:48 - we got after applying the filter on the
11:50 - result so for that we are going to just
11:55 - iterate over that result in our case as
11:58 - we know that there is only one point so
12:02 - we don't even need to iterate over it
12:05 - but if there are multiple number of
12:08 - matched templates then this for loop
12:12 - will be handy so for PT in your LOC
12:21 - variable so we are going to just say zip
12:24 - which is going to iterate over this LOC
12:28 - variable so Astrix
12:30 - LOC and then we are going to find out
12:35 - the width and height here also so we are
12:38 - just reversing the x-axis and y-axis
12:42 - right so we are going to just say : :
12:47 - minus 1 here and then once again inside
12:51 - this for loop so see v2 dot rectangle
12:55 - method and the first argument here will
12:57 - be our original image because we want to
13:00 - draw the rectangle on the original image
13:02 - the second argument will be the first
13:06 - point of the rectangle so the first
13:09 - point will be this one PT which we are
13:13 - getting using the LOC variable so as you
13:19 - all know that the
13:20 - first point here will be the top-left
13:24 - corner of the rectangle and the second
13:28 - point here will be the bottom right
13:30 - corner so how can we get the bottom
13:33 - right corner we will get the bottom
13:36 - right corner using this PT variable and
13:41 - then on the 0th index we are going to
13:45 - just add the width comma on the first
13:50 - index so PT square bracket first we are
13:56 - going to add the height okay so
13:59 - essentially we have just found out the
14:03 - width and height of our template and we
14:06 - are getting the second point using this
14:10 - addition on the first point width and
14:13 - height so it's going to give us this
14:15 - bottom right corner of this template or
14:20 - this point so this is how we are getting
14:23 - our two points to draw the rectangle now
14:28 - the third and fourth variable will be
14:30 - simple which are the color so you can
14:34 - just say zero comma zero comma 255 which
14:38 - will be the green color and the width
14:41 - let's say two here so we want to give
14:43 - the width to here so let's run this code
14:47 - and let's see what happens so I'm going
14:49 - to run this code and you can see this
14:52 - red rectangle is drawn on the face of
14:56 - the Messi and you can here also see this
15:00 - rectangle will match our template image
15:05 - so whatever image is inside this
15:08 - rectangle will be exactly the same as
15:12 - our template and once again you can see
15:15 - the result let me explain this code once
15:18 - again so if this point this threshold
15:23 - will be point zero eight let's say in
15:27 - the case of point zero nine threshold we
15:29 - are only getting two values this 85
15:34 - and 220 right that's why we are seeing
15:38 - the clear rectangle here when we are
15:43 - giving the threshold 0.8 here let's see
15:48 - what happens so I'm going to run this
15:49 - code once again you can see there will
15:51 - be this rectangle but it will be much
15:55 - thicker why it's much thicker because we
15:59 - are getting several number of values 1 2
16:02 - 3 4 5 6 7 8 9 so we are getting the 9
16:07 - points on the x axis and the y axis so
16:10 - this for loop will iterate nine times
16:13 - and this rectangle will be drawn nine
16:17 - times on the image and that's why this
16:20 - rectangle is much thicker let's just
16:24 - change this value to 0.9 once again and
16:27 - you will see this rectangle is you know
16:31 - the single rectangle that's why it's
16:34 - much thinner right now when you give
16:39 - this value let's say we give the value
16:42 - 0.3 so most of the point as you can see
16:46 - here have the value 0.3 and when we run
16:50 - this code you will see so many
16:52 - rectangles here so that's why this
16:55 - threshold is essential for us to find
16:59 - out the brightest point or the value
17:02 - which have the maximum value right so
17:06 - that's why we were filtering out this
17:10 - these points and finding out the values
17:14 - more than 0.9 threshold and about the
17:20 - methods so let's try different methods
17:23 - so let's try to give different methods
17:27 - yeah these tube method behave a little
17:29 - bit differently so we can start with
17:33 - this TM c cor are normed and we can
17:40 - apply it here and it's going to give us
17:42 - this kind of result you can see we are
17:46 - getting
17:47 - several points here after filtering so
17:50 - let's try to increase this value to zero
17:54 - when nine five and let's rerun this code
17:58 - and let's see what happens now you are
18:01 - getting four values you can also filter
18:06 - that out let's say 0.99 now let's see
18:12 - what happens so now you are getting only
18:14 - two values okay so you need to try to
18:18 - change this value to the maximum point
18:21 - so try to change this value and you will
18:24 - get this kind of rectangle only one
18:27 - rectangle so every method is going to
18:30 - give you different result and that's why
18:35 - you need to try all the result not all
18:39 - the result will give you the perfect
18:42 - rectangle or template matching so you
18:44 - need to try different methods on your
18:47 - images so this is how you can do
18:51 - template matching in OpenCV I hope
18:53 - you've enjoyed this video and I will see
18:55 - you in the next video
19:05 - you

Cleaned transcript:

hey guys welcome to the next video on open CV tutorial for beginners using Python in this video we will discuss about template matching in open CB so first of all what is template matching so template matching is a method of searching and finding the location of a template image inside a larger image in open CV there is a method called match template for achieving this purpose so let's get started and let's see an example about it so I have this simple code which just loads this image and let's see what this image looks like so this is the image and this is the messy image and what I want to do is I want to match the face template which I have which looks like this which is the smaller template which is also available inside this image so this will act like cut template for us and we will try to find this template inside this larger image so let's get started and let's see how we can search this template inside this larger image so first of all what we need to do is obviously we need to load this image and also load our template so before loading our template image I'm going to just convert my original image which is the larger image into the grayscale image so I have declared this variable create underscore image and then I'm going to just say CV to dot C BT color which is going to convert my image I am G and let's convert this image into CV 2 dot color underscore BG are to create now let's load our face image which is called messy underscore face dot jpg so I'm going to just change this name merci underscore face dot jpg and this will be our face image or you can also say this is our template and I'm going to also load this image as a grayscale image so I'm going to just pass the second argument in the read method as 0 which is going to load this messy image as a grayscale image now in the next line we will simply use this method which is called match template and we are going to save it into some variables so we can just say re s is equal to CB 2 dot match template which is this method which takes few argument first is our image so I'm going to pass our grayscale image here the second argument here will be the template which we are trying to search inside this image so this will be our template the third is the method so the method can be several method there are several methods available for the template matching so I want to show you these method for the template matching so you can see type of template matching operations and there is separate formula involved in order to match that template inside that image so so for now we are going to use this method which is TM underscore see Co F underscore normed dot TM underscore siku F normed which is this method now let's try to print this result and let's see what is the content inside this result so I'm going to just print the content inside this result which we got so I'm going to run this code and this image is loaded but for now we are interested in this array matrix which you are seeing here so you can see when you observe these values carefully you will see all are relatively a smaller value so you can see 0.2 0.2 almost every value is around until 0.3 so the maximum value I can see here is 0.3 so let me just show this image once again and the the template also so what this result contains is these all values and there will be one value which contains the number for example point 8 or the brightest point okay so if here this matrix contains a value which have the value 1 it is the bright test point and it will be there inside this image after applying this match template method which will be around this point at this point at which this template matches so topleft corner of this template so at the point at which this left top corner of this image will match inside this large image there will be a brightest point there and that brightest point will be reflected inside this image in the form of this decimal number and all the other values will be slightly darker darker values okay so that's how this matrix from this matrix we will come to know the the top left corner of the template inside this larger image so now how can we filter out that value which is the brightest point inside this Metrix so all the points you can see looks like under 0.3 but there are some points here you can see three dots and there are thousands and thousands of values will be available here all the values are not printed okay so what we are going to do is we are going to try to find out the brightest point so this we can find out with the numpy method there is a method called we're using which we can find out or filter out those values which are greater than certain number so I'm going to first of all declare a variable called threshold is equal to I'm going to declare the value of threshold initially as 0.8 which will be relatively brighter point inside the matrix which we are getting using this result variable right and then there is a method called where numpy where so I'm going to declare once again LOC variable and then P dot where method and here we are going to pass our result which we got and we are going to filter out using this expression so this will be a boolean expression so I'm going to just say give me all those values which are greater than or equal to the threshold inside this result matrix okay so this where method is going to just evaluate this expression each and every value will be evaluated and if this value inside the matrix is greater than 0.8 which is our threshold then it's going to give those values to us so let's print out those values after the filtering out of most of the values and let's just print this LOC variable also I'm going to run this code once again and you can see here this is the matrix which we got so you can see this is the array which we got so still we can increase this threshold in order to find out only one point so there are several points available here so let's say I'm going to increase this value to 0.9 and let's run this code again and you will see only two points 85 and 220 so this is what we were expecting so we wanted to find out this point which will be the brightest point inside this result matrix so once we got the brightest point which will be around here which will be the topleft corner as I said of this template and it will be located somewhere here in the original image then we can draw the rectangle around this original image same as the size of this template so this will be the easier task because we already know the width and height of this template we already know how to get the width and height of this template and same size rectangle we just want to draw on this original image so let's see how we can do this so there is already a method so I'm going to just declare two variables width and height and you already know the method so template dot shape is going to give you the shape of your image right so I'm going to just say template dot shape and then inside the square brackets we are going to just give two colons and minus one this means that we want to get the column and the row value in reverse order so width and height that's why I have given this minus one index here now in the next step what we are going to do is we are going to just draw all the rectangles where the template is is matched so by seeing this template image and the original image we know that there is only one messy face inside this image but let's say there are several number of matched templates inside our own original image for that we need to iterate over the result which we got after applying the filter on the result so for that we are going to just iterate over that result in our case as we know that there is only one point so we don't even need to iterate over it but if there are multiple number of matched templates then this for loop will be handy so for PT in your LOC variable so we are going to just say zip which is going to iterate over this LOC variable so Astrix LOC and then we are going to find out the width and height here also so we are just reversing the xaxis and yaxis right so we are going to just say minus 1 here and then once again inside this for loop so see v2 dot rectangle method and the first argument here will be our original image because we want to draw the rectangle on the original image the second argument will be the first point of the rectangle so the first point will be this one PT which we are getting using the LOC variable so as you all know that the first point here will be the topleft corner of the rectangle and the second point here will be the bottom right corner so how can we get the bottom right corner we will get the bottom right corner using this PT variable and then on the 0th index we are going to just add the width comma on the first index so PT square bracket first we are going to add the height okay so essentially we have just found out the width and height of our template and we are getting the second point using this addition on the first point width and height so it's going to give us this bottom right corner of this template or this point so this is how we are getting our two points to draw the rectangle now the third and fourth variable will be simple which are the color so you can just say zero comma zero comma 255 which will be the green color and the width let's say two here so we want to give the width to here so let's run this code and let's see what happens so I'm going to run this code and you can see this red rectangle is drawn on the face of the Messi and you can here also see this rectangle will match our template image so whatever image is inside this rectangle will be exactly the same as our template and once again you can see the result let me explain this code once again so if this point this threshold will be point zero eight let's say in the case of point zero nine threshold we are only getting two values this 85 and 220 right that's why we are seeing the clear rectangle here when we are giving the threshold 0.8 here let's see what happens so I'm going to run this code once again you can see there will be this rectangle but it will be much thicker why it's much thicker because we are getting several number of values 1 2 3 4 5 6 7 8 9 so we are getting the 9 points on the x axis and the y axis so this for loop will iterate nine times and this rectangle will be drawn nine times on the image and that's why this rectangle is much thicker let's just change this value to 0.9 once again and you will see this rectangle is you know the single rectangle that's why it's much thinner right now when you give this value let's say we give the value 0.3 so most of the point as you can see here have the value 0.3 and when we run this code you will see so many rectangles here so that's why this threshold is essential for us to find out the brightest point or the value which have the maximum value right so that's why we were filtering out this these points and finding out the values more than 0.9 threshold and about the methods so let's try different methods so let's try to give different methods yeah these tube method behave a little bit differently so we can start with this TM c cor are normed and we can apply it here and it's going to give us this kind of result you can see we are getting several points here after filtering so let's try to increase this value to zero when nine five and let's rerun this code and let's see what happens now you are getting four values you can also filter that out let's say 0.99 now let's see what happens so now you are getting only two values okay so you need to try to change this value to the maximum point so try to change this value and you will get this kind of rectangle only one rectangle so every method is going to give you different result and that's why you need to try all the result not all the result will give you the perfect rectangle or template matching so you need to try different methods on your images so this is how you can do template matching in OpenCV I hope you've enjoyed this video and I will see you in the next video you
