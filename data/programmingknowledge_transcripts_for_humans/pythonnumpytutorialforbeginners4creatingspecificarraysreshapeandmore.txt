With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - numpy tutorial for beginners in this
00:04 - video I'm going to show you how you can
00:06 - use numpy to create some specific array
00:11 - and also we will see how we can reshape
00:14 - or numpy array and some of the
00:17 - properties related to shaping your
00:20 - arrays so first of all let me show you
00:23 - the first method and this method is and
00:26 - B dot zeroes and if you have guessed
00:30 - correctly this method we use to
00:33 - initialize a specific array with some
00:36 - dimension so we are going to give some
00:38 - dimension here as an argument so let's
00:40 - say 2 by 3 and this is going to give us
00:44 - an array of specific dimension and all
00:48 - the values inside this array are zeros
00:53 - so all the values or elements which this
00:56 - array contains are all zeros there is
00:59 - one more method which is called NP dot
01:02 - once and here you can give the same type
01:06 - of argument let's say 3 by 2 and it this
01:10 - is going to give you an array all
01:12 - initialized with the value 1 so you can
01:16 - see all the values here are 1 now if you
01:20 - want to initialize the value with some
01:23 - datatype you can also use let's say NP
01:27 - dot once and you can provide an extra
01:30 - argument here which is called d type is
01:33 - equal to so just write the type is equal
01:36 - to and whatever datatype you want to
01:39 - give here you can provide here so let's
01:42 - say n P dot in 16 and this D type
01:47 - argument is going to make sure that this
01:50 - one is of this datatype now there is one
01:55 - more method which is called NP dot empty
01:59 - so this method you can use to provide
02:01 - some shape
02:02 - let's give 3 by 3 and this empty method
02:07 - is used to create uninitialized data so
02:12 - the content is under
02:13 - fine and once again I'm going to give
02:16 - the same command it's going to give us
02:17 - the array of these dimensions and here
02:20 - also you can provide the d-type let me
02:22 - give the list here you can also give the
02:25 - list instead of this tuple and then as
02:28 - an extra argument you can provide that
02:30 - the type is equal to NP dot into 16 and
02:36 - then press ENTER and you can see now
02:39 - it's going to initialize these values
02:42 - with the random integers once again when
02:45 - you give the list without this argument
02:48 - d-type and I'm going to just provide
02:50 - some dimensions here in the form of list
02:54 - it's going to once again gave us this
02:57 - dimension with all ones but always
03:00 - remember that empty and like zero does
03:03 - not set the array values to zero and
03:05 - this means that this may therefore be
03:08 - marginally faster now the next method I
03:11 - want to show here is the arrange method
03:14 - to create an array of particular range
03:17 - so here you can provide some range let's
03:20 - say we want to provide the range from 1
03:24 - to 5 and then press Enter now this
03:28 - arrange X similar to the range method in
03:32 - Python so it's going to create this
03:36 - array but it's going to exclude this 5
03:39 - this is the property of range also you
03:42 - can also provide the interval in which
03:45 - you want to see this array so you can
03:48 - just say I want to see this array in the
03:50 - interval of 0.5 then you will get the
03:53 - array in the interval of 0.5 or in the
03:57 - steps of 0.5 now there is one more
04:00 - method which is called NP dot linspace
04:02 - and this method is used to create an
04:06 - array by specifying the range and the
04:09 - number of elements so first of all we
04:12 - are going to provide the range so once
04:14 - again I'm going to provide the range
04:15 - between 1 to 5 and then press Enter
04:20 - so you can see in the result it returns
04:22 - the evenly spaced number over the
04:26 - specified interval and in our case this
04:29 - interval is 1 to 5 and we got 50 values
04:34 - which are evenly spaced values you can
04:37 - also provide an extra argument in this
04:40 - function and this is the number of
04:42 - samples you want to generate the default
04:45 - sample is 50 as you have seen here this
04:48 - is the default sample so if you don't
04:50 - provide any number here it will generate
04:54 - that evenly spaced array of sample 50
04:58 - but if you want to provide your specific
05:01 - number let's say we want to just
05:03 - generate an array of 10 values then we
05:06 - can provide this third parameter here
05:10 - and now you will just get the array of
05:13 - 10 evenly-spaced values once again if
05:18 - you provide here 5 it's going to give
05:20 - you only 5 evenly spaced value which is
05:24 - 1 2 3 4 5 if you want to create an array
05:27 - of random numbers you can use NP dot
05:30 - random dot random and provide your
05:32 - dimensions here and what you will get in
05:35 - return is an array of random numbers
05:37 - which are in between 0 and 1 now let me
05:42 - show you how you can reshape an array so
05:44 - I'm going to create an array of zeros so
05:48 - let me just assign this result to our
05:50 - variable let's say this is C variable so
05:54 - first of all let's see the content of
05:56 - this array C and now I want to reshape
06:00 - this array so there is a method called r
06:04 - dot reshape which you can use to change
06:08 - the dimension of this array so earlier
06:12 - this array was of dimension 2 by 3 and
06:15 - now I want to change the dimension to 3
06:18 - by 2 let's say so now once you do this
06:23 - the array dimension will be changed to 3
06:27 - by 2 which means 3 rows and 2 columns
06:30 - you can also change it to let's say 6 by
06:34 - 1 so I'm going to just say 6 by 1 and
06:37 - this is going to give you an
06:39 - of 6x1 but you need to make sure that
06:44 - all these reshaping dimension conforms
06:48 - to the original dimension so for example
06:51 - you just give dimension which is not
06:55 - conformed by the original array let's
06:58 - say seven here and you will get this
07:00 - error which says cannot reshape array of
07:03 - size six into the shape seven seven by
07:07 - one let me give you one more example so
07:09 - this time I'm going to create a new
07:11 - variable D and this time I'm going to
07:13 - use one's method so this is once method
07:18 - and I want to create an array of let's
07:22 - say 1 by 9 and then press Enter it is
07:26 - going to give me an array of 1 by 9 and
07:29 - all the values here are once now when I
07:33 - use a reshape method on this D array so
07:36 - let's use this reshape method and let's
07:39 - give the dimension let's say I want to
07:41 - give here the dimension of 3 by minus 1
07:44 - and then press enter you will see this
07:48 - array will be reshaped to 3 by 3 array
07:51 - so why this is happening so because we
07:56 - have provided the second parameter as
07:58 - minus 1 which means that it will be
08:02 - determined based on the actual condition
08:05 - automatically so this array was
08:07 - containing 9 element and this means that
08:11 - your matrix will be resized to 3 by 3
08:15 - matrix so now you can see when you see
08:19 - the content inside a D you can see the
08:21 - original array never changes you cannot
08:24 - change the size or shape of the original
08:29 - array you can just reshape it and then
08:31 - assign it to our new variable so when
08:34 - you do this I'm going to just reshape it
08:37 - and then assign it to a new variable E
08:40 - and then see the content of E now once
08:43 - again let me create an array of all 0 of
08:46 - dimension 3 by 1 let's say and there is
08:49 - a method called V steak and
08:52 - as stake so V stake is used to stake
08:55 - multiple arrays in vertical direction
08:58 - and one thing to notice here is the
09:00 - dimension so the dimension of an array
09:03 - must be matched so here you can see II
09:06 - which is of the dimension 3 by 3 and we
09:09 - have a new array F which have the
09:12 - dimension 3 by 1 so let me just create
09:16 - one more variable let's say it's G
09:20 - variable and then I can use NP dot V
09:24 - stack and I can provide as an argument
09:29 - both the arrays so I have the array E
09:32 - and I have the array F and it gives us
09:35 - error because this I need to give in
09:38 - that tupple so the error says it takes
09:41 - one positional argument but I have
09:43 - provided two because this I need to give
09:46 - inside at a plural list so these
09:50 - argument I will provide as a tuple and
09:52 - then press ENTER and now you will see
09:54 - this error this error says all the input
09:57 - array dimension except for the
10:00 - concatenation axis must match exactly so
10:05 - because this is the 3 by 3 array and we
10:08 - want to add the new array vertically
10:11 - which is not possible because in the 3
10:13 - by 3 matrix you cannot add the matrix of
10:16 - 3 by 1 if this matrix is of 1 by 3 then
10:21 - this is possible so let's create the
10:25 - array of 1 by 3 so this should be 1 by 3
10:29 - not 3 by 1 so I'm going to reshape it
10:31 - once again or let's just change the
10:34 - dimension it should be 1 by 3 in order
10:36 - to use the V stake with the array of 3
10:41 - by 3 so now once again we will see the
10:44 - content of H so now we can once again
10:46 - use this B stake method and this time
10:50 - I'm going to pass H here instead of F
10:53 - which is of dimension 1 by 3 and then
10:57 - press enter and this time I don't get
10:59 - any error and once again when I see the
11:01 - content of G it's going to give us the
11:05 - calm
11:05 - the nation of the matrix e and H so this
11:10 - method V state can be used to stake
11:13 - multiple arrays in vertical direction
11:16 - there is one more method which is at
11:18 - stake which you can use to stake
11:21 - multiple arrays in horizontal direction
11:24 - and there our F array will work so now
11:29 - when I create one more variable I and I
11:32 - will use the H stake method and here I
11:37 - will provide as an argument the array E
11:40 - which is of dimension 3 by 3 and the
11:45 - array F which is of dimension 3 by 1 not
11:49 - 1 by 3 not like this but it's of
11:53 - dimension 1 by 3 so it's like this right
11:56 - and then press ENTER and I will see the
11:59 - content of I and now you will see these
12:02 - two arrays are staked horizontally now
12:07 - if you give the array of wrong
12:09 - dimensions here so for example I give H
12:12 - here instead of F which is like this and
12:15 - then press Enter it's going to once
12:17 - again give me an error which says all
12:20 - the input are a dimension except for the
12:22 - concatenation axis must match exactly
12:25 - and at last I want to show you two more
12:29 - method and they are edge split which is
12:33 - called horizontal split and be split
12:36 - which is called vertical split and I
12:39 - want to split this array in the
12:41 - horizontal format so what I'm going to
12:44 - do here is I'm going to use the method H
12:47 - split and here I can first of all give
12:51 - the name of the array which is G in my
12:54 - case and then I can give the number of
12:58 - splits so for example I want to split
12:59 - this array in 3 different arrays then I
13:02 - can provide this number 3 here and then
13:05 - press enter and now you can see the
13:08 - result so this result contains 3
13:11 - different arrays 1 2 & 3
13:15 - now let's say I want to split this array
13:18 - I which looks
13:19 - like this in the vertical direction so I
13:22 - want to just separate this this and this
13:26 - in three different arrays so I can use
13:29 - once again and P dot V split method and
13:33 - first argument is the name of the array
13:36 - and second argument is the number of
13:39 - arrays you want so when I press ENTER
13:41 - it's going to give me three different
13:44 - array which are split in vertical
13:47 - direction so that's it for this video I
13:50 - hope you have learned something new this
13:52 - time and I will see you in the next
13:54 - video

Cleaned transcript:

hey guys welcome to the next video on numpy tutorial for beginners in this video I'm going to show you how you can use numpy to create some specific array and also we will see how we can reshape or numpy array and some of the properties related to shaping your arrays so first of all let me show you the first method and this method is and B dot zeroes and if you have guessed correctly this method we use to initialize a specific array with some dimension so we are going to give some dimension here as an argument so let's say 2 by 3 and this is going to give us an array of specific dimension and all the values inside this array are zeros so all the values or elements which this array contains are all zeros there is one more method which is called NP dot once and here you can give the same type of argument let's say 3 by 2 and it this is going to give you an array all initialized with the value 1 so you can see all the values here are 1 now if you want to initialize the value with some datatype you can also use let's say NP dot once and you can provide an extra argument here which is called d type is equal to so just write the type is equal to and whatever datatype you want to give here you can provide here so let's say n P dot in 16 and this D type argument is going to make sure that this one is of this datatype now there is one more method which is called NP dot empty so this method you can use to provide some shape let's give 3 by 3 and this empty method is used to create uninitialized data so the content is under fine and once again I'm going to give the same command it's going to give us the array of these dimensions and here also you can provide the dtype let me give the list here you can also give the list instead of this tuple and then as an extra argument you can provide that the type is equal to NP dot into 16 and then press ENTER and you can see now it's going to initialize these values with the random integers once again when you give the list without this argument dtype and I'm going to just provide some dimensions here in the form of list it's going to once again gave us this dimension with all ones but always remember that empty and like zero does not set the array values to zero and this means that this may therefore be marginally faster now the next method I want to show here is the arrange method to create an array of particular range so here you can provide some range let's say we want to provide the range from 1 to 5 and then press Enter now this arrange X similar to the range method in Python so it's going to create this array but it's going to exclude this 5 this is the property of range also you can also provide the interval in which you want to see this array so you can just say I want to see this array in the interval of 0.5 then you will get the array in the interval of 0.5 or in the steps of 0.5 now there is one more method which is called NP dot linspace and this method is used to create an array by specifying the range and the number of elements so first of all we are going to provide the range so once again I'm going to provide the range between 1 to 5 and then press Enter so you can see in the result it returns the evenly spaced number over the specified interval and in our case this interval is 1 to 5 and we got 50 values which are evenly spaced values you can also provide an extra argument in this function and this is the number of samples you want to generate the default sample is 50 as you have seen here this is the default sample so if you don't provide any number here it will generate that evenly spaced array of sample 50 but if you want to provide your specific number let's say we want to just generate an array of 10 values then we can provide this third parameter here and now you will just get the array of 10 evenlyspaced values once again if you provide here 5 it's going to give you only 5 evenly spaced value which is 1 2 3 4 5 if you want to create an array of random numbers you can use NP dot random dot random and provide your dimensions here and what you will get in return is an array of random numbers which are in between 0 and 1 now let me show you how you can reshape an array so I'm going to create an array of zeros so let me just assign this result to our variable let's say this is C variable so first of all let's see the content of this array C and now I want to reshape this array so there is a method called r dot reshape which you can use to change the dimension of this array so earlier this array was of dimension 2 by 3 and now I want to change the dimension to 3 by 2 let's say so now once you do this the array dimension will be changed to 3 by 2 which means 3 rows and 2 columns you can also change it to let's say 6 by 1 so I'm going to just say 6 by 1 and this is going to give you an of 6x1 but you need to make sure that all these reshaping dimension conforms to the original dimension so for example you just give dimension which is not conformed by the original array let's say seven here and you will get this error which says cannot reshape array of size six into the shape seven seven by one let me give you one more example so this time I'm going to create a new variable D and this time I'm going to use one's method so this is once method and I want to create an array of let's say 1 by 9 and then press Enter it is going to give me an array of 1 by 9 and all the values here are once now when I use a reshape method on this D array so let's use this reshape method and let's give the dimension let's say I want to give here the dimension of 3 by minus 1 and then press enter you will see this array will be reshaped to 3 by 3 array so why this is happening so because we have provided the second parameter as minus 1 which means that it will be determined based on the actual condition automatically so this array was containing 9 element and this means that your matrix will be resized to 3 by 3 matrix so now you can see when you see the content inside a D you can see the original array never changes you cannot change the size or shape of the original array you can just reshape it and then assign it to our new variable so when you do this I'm going to just reshape it and then assign it to a new variable E and then see the content of E now once again let me create an array of all 0 of dimension 3 by 1 let's say and there is a method called V steak and as stake so V stake is used to stake multiple arrays in vertical direction and one thing to notice here is the dimension so the dimension of an array must be matched so here you can see II which is of the dimension 3 by 3 and we have a new array F which have the dimension 3 by 1 so let me just create one more variable let's say it's G variable and then I can use NP dot V stack and I can provide as an argument both the arrays so I have the array E and I have the array F and it gives us error because this I need to give in that tupple so the error says it takes one positional argument but I have provided two because this I need to give inside at a plural list so these argument I will provide as a tuple and then press ENTER and now you will see this error this error says all the input array dimension except for the concatenation axis must match exactly so because this is the 3 by 3 array and we want to add the new array vertically which is not possible because in the 3 by 3 matrix you cannot add the matrix of 3 by 1 if this matrix is of 1 by 3 then this is possible so let's create the array of 1 by 3 so this should be 1 by 3 not 3 by 1 so I'm going to reshape it once again or let's just change the dimension it should be 1 by 3 in order to use the V stake with the array of 3 by 3 so now once again we will see the content of H so now we can once again use this B stake method and this time I'm going to pass H here instead of F which is of dimension 1 by 3 and then press enter and this time I don't get any error and once again when I see the content of G it's going to give us the calm the nation of the matrix e and H so this method V state can be used to stake multiple arrays in vertical direction there is one more method which is at stake which you can use to stake multiple arrays in horizontal direction and there our F array will work so now when I create one more variable I and I will use the H stake method and here I will provide as an argument the array E which is of dimension 3 by 3 and the array F which is of dimension 3 by 1 not 1 by 3 not like this but it's of dimension 1 by 3 so it's like this right and then press ENTER and I will see the content of I and now you will see these two arrays are staked horizontally now if you give the array of wrong dimensions here so for example I give H here instead of F which is like this and then press Enter it's going to once again give me an error which says all the input are a dimension except for the concatenation axis must match exactly and at last I want to show you two more method and they are edge split which is called horizontal split and be split which is called vertical split and I want to split this array in the horizontal format so what I'm going to do here is I'm going to use the method H split and here I can first of all give the name of the array which is G in my case and then I can give the number of splits so for example I want to split this array in 3 different arrays then I can provide this number 3 here and then press enter and now you can see the result so this result contains 3 different arrays 1 2 & 3 now let's say I want to split this array I which looks like this in the vertical direction so I want to just separate this this and this in three different arrays so I can use once again and P dot V split method and first argument is the name of the array and second argument is the number of arrays you want so when I press ENTER it's going to give me three different array which are split in vertical direction so that's it for this video I hope you have learned something new this time and I will see you in the next video
