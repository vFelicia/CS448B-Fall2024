With timestamps:

00:00 - so first of all what is redis so redis
00:03 - is an open source bsd licensed advanced
00:07 - in-memory key value store where keys can
00:10 - contain
00:10 - data structures such as strings hashes
00:14 - lists sets and sorted sets
00:18 - so it's an in-memory key value store
00:20 - with
00:21 - persistence that means redis can be used
00:25 - as a database or a caching layer
00:28 - or a message broker now i already said
00:32 - that it's bsd license that means
00:35 - it's open source now redis is written in
00:38 - c
00:39 - and it's no sql database now
00:42 - what is nosql nosql is an
00:45 - informal loosely defined term
00:49 - for non-relational structured data
00:52 - storage systems
00:53 - like mongodb memcached couchdb or
00:58 - cassandra so
00:59 - following in the footsteps of other
01:02 - nosql databases such as cassandra
01:04 - couchdb
01:05 - or mongodb radis allows
01:08 - the user to store vast amount of data
01:12 - without the limits of relational
01:15 - databases so in nosql databases
01:18 - data can be stored in non-relational
01:21 - way now what does the name redis mean
01:24 - redis stands for
01:25 - remote directory server it is often
01:28 - referred to as
01:29 - a data structure server since the keys
01:32 - can contain
01:33 - strings hashes lists sets and
01:36 - sorted sets so because the keys can
01:39 - contain
01:40 - these type of different data structures
01:43 - it's often referred as a data structure
01:47 - server right so the name come from
01:49 - remote directory
01:51 - server now what is redis used for
01:54 - so as i already mentioned that it's an
01:57 - advanced
01:58 - key value store that can function as a
02:01 - nosql database or as a memory cache
02:04 - store to improve performance
02:06 - when serving data that is stored in
02:09 - system memory and also it can be used as
02:12 - a message
02:13 - broker so it can be used in place of
02:16 - caching systems
02:17 - such as memcached now you must be
02:19 - wondering
02:20 - how to interact with radiss so
02:23 - redis can be installed on a server and
02:27 - it can be interacted with a command line
02:30 - tool or command line interface
02:32 - which is called redis cli so using this
02:35 - redis cli
02:37 - we can interact with our redis server
02:40 - now this
02:40 - redis client can be used on any
02:44 - machine and then when we open this redis
02:47 - client
02:48 - which is a command line client uh the
02:50 - first
02:51 - line will look like this so redis then
02:54 - this kind of
02:54 - angle bracket this we will see in the
02:58 - coming videos
02:59 - how to install redis and how we can use
03:02 - redis now let's talk about some of the
03:05 - history about
03:06 - radiss so in early 2009 a developer
03:10 - called
03:10 - salvatore san filippo he was an
03:14 - italian developer by the way started the
03:17 - redis project at that time he was
03:19 - working on
03:20 - a real-time web analytics solution
03:24 - and found that mysql could not provide
03:26 - the necessary performance so
03:28 - in june 2009 redis was deployed
03:31 - in production for a website called
03:35 - log.com which was a real-time
03:38 - web analytics website then in march 2010
03:42 - a company called vmware hired sanfilippo
03:46 - to work full-time on redis although
03:48 - reddit
03:49 - remains as bsd licensed subsequently
03:53 - vmware hired some of the other
03:55 - developers who also
03:57 - contributed majorly to assist on the
04:00 - project so this was a brief introduction
04:03 - about
04:03 - radiss and from the next video we will
04:06 - see how we can install redis
04:08 - and how to use redis so stay tuned
04:12 - and please rate command subscribe and
04:14 - bye for now
04:15 - hey guys welcome to the next video on
04:17 - redis tutorial for beginners
04:19 - in this video i'm going to show you how
04:20 - you can download and install redis on
04:22 - your windows operating system
04:25 - so let's get started so first of all
04:27 - open your
04:28 - favorite browser and search for redis
04:31 - and hopefully the first result which
04:33 - will appear here will be from redis dot
04:36 - io
04:37 - so you need to just click this link
04:39 - which is
04:40 - for the redis dot io and then
04:43 - once you click this link you will be
04:45 - able to see the
04:47 - downloads tab on the top of
04:50 - this website so let me just maximize
04:54 - this browser and i can see
04:57 - this tab which is for downloads right so
05:00 - i'm going to click
05:01 - this downloads tab and then
05:04 - i'm in the downloads section now when
05:07 - you scroll
05:08 - down a little you will see a windows
05:11 - section here and there is a message here
05:14 - which says
05:15 - the red this project does not officially
05:18 - support
05:19 - windows however the microsoft
05:22 - open tech group develops and maintains
05:26 - this windows port targeting windows 64.
05:30 - so redis project does not officially
05:33 - support windows but
05:34 - there is a group of developers which
05:37 - makes it available for windows so
05:40 - we just need to click this link which
05:43 - says learn
05:44 - more and when you click this link you
05:46 - will be redirected
05:48 - to a github page of
05:51 - redis which is maintained by microsoft
05:54 - archive so once you reach to this page
05:57 - and scroll
05:58 - a little down and reach
06:01 - to the readme dot md
06:05 - here on the third line you will be able
06:07 - to see
06:08 - this message which says you can download
06:12 - the latest
06:13 - unsigned binary and unsigned
06:16 - msi installer from this page so there is
06:19 - a
06:20 - link for the release page right so
06:23 - just click this link which says release
06:26 - page
06:27 - and then you will be redirected to the
06:30 - downloads page for redis for windows
06:34 - right now when you scroll down a little
06:36 - here here are
06:37 - few options to download a redis on your
06:40 - windows operating system
06:42 - the first option is by using dot msi
06:45 - file which is our installer
06:47 - second option is by using a zip file so
06:50 - all the binaries will be packed
06:52 - in this zip file and you need to set up
06:55 - the environment variable
06:57 - so i'm going to show you both the ways
07:00 - so let's
07:00 - start with the dot zip file so i'm going
07:03 - to download
07:04 - this dot zip file first of all and i'm
07:07 - going to minimize the browser
07:09 - and here in downloads i can see this zip
07:12 - file
07:13 - so what i will do is i will create a new
07:16 - folder
07:17 - i'm making this folder in my downloads
07:20 - directory itself and i will name it as
07:24 - redis but you are free to create this
07:27 - directory anywhere wherever you wish
07:30 - right
07:31 - and then i'm going to extract this
07:34 - zip file inside this redis
07:37 - folder so let me drag this to this
07:40 - redis folder this zip file and then i'm
07:43 - going to
07:44 - just extract all files
07:47 - inside this redis folder
07:50 - right so it's going to extract all the
07:52 - files it's
07:54 - not really big files so it will be
07:56 - extracted really soon
07:58 - and you can see all the files are
08:01 - extracted
08:02 - inside this redis folder and there is a
08:05 - redis minus x64
08:08 - minus 3.2 3.2 is the latest
08:12 - version at the time of making this video
08:14 - so
08:15 - inside this radiss folder there are
08:18 - some files so these files
08:22 - are all are important but two are of our
08:25 - interest
08:26 - one is redis server and
08:30 - another is redis cli so let me minimize
08:33 - this other window here and then i'm
08:36 - going to double click
08:37 - on this radis minus server
08:40 - exe file so i'm going to double click on
08:42 - this redis server which is going to
08:45 - start the redis server
08:47 - and it will ask you to give the
08:50 - administrative
08:51 - privileges or you need to allow the
08:53 - access to the server
08:54 - so here i'm going to just uh press this
08:57 - button it says allow access
08:59 - and now the redis server has been
09:01 - started
09:02 - now the default port on which the redis
09:05 - server start
09:06 - is this one which is six three seven
09:09 - nine okay so this is the default port on
09:12 - which redis
09:13 - starts on the local host and then
09:17 - uh this is the pid of this redis server
09:20 - right now next i'm going to start the
09:23 - redis cli to interact with this server
09:26 - so now this time click on this redis cli
09:30 - and it's going to start another terminal
09:34 - and it's going to connect to this redis
09:36 - server
09:37 - and then using this uh cli
09:41 - you will be able to interact with this
09:43 - server right
09:44 - so this is the client and server is
09:48 - running in the background right
09:50 - so let me minimize this window also
09:53 - and let me just place this server here
09:56 - and let me open this client on the right
09:59 - hand side
10:00 - right so this is the server and this is
10:02 - the client
10:03 - now in this client when you write ping
10:07 - you will get the response pong so you
10:09 - can see
10:10 - i'm getting the response pong that means
10:13 - the server is running fine and my client
10:16 - is able to connect to the server
10:19 - and get the response right now
10:22 - in order to save something as a key
10:24 - value pair
10:26 - for testing we can just write set and
10:29 - then it's going to give you some
10:30 - intelligence also so i
10:32 - just wrote a keyword set and it gives me
10:36 - the hint that i need to give the key
10:38 - value
10:39 - pair here so as a key i will give
10:43 - a name or name key and i will
10:46 - give any name as a value so for example
10:49 - mark
10:50 - i'm going to give as a name right
10:53 - and then i'm going to press enter and it
10:56 - says okay
10:56 - that means this key value that means
10:59 - name
11:00 - is our key and mark is the value of the
11:03 - name which is the value
11:05 - right so to get this value
11:08 - you can just write get and then the name
11:11 - of the key which is
11:12 - name itself in our case and press enter
11:15 - and it's going to give us the value
11:19 - right so that means everything is
11:21 - working fine
11:22 - and we are able to connect to the redis
11:25 - server
11:26 - and it's able to save the values right
11:30 - but sometimes or most of the times
11:33 - you will not go to this server
11:37 - and start from this directory right so
11:40 - you want to uh you know open
11:43 - your command line from your windows and
11:46 - you want to
11:47 - uh connect from this command terminal
11:50 - from windows not
11:51 - from uh this location right so in order
11:55 - to do that
11:56 - you need to set the environment
11:58 - variables
11:59 - so let's set the environment variables
12:01 - for
12:02 - this redis uh client and server so we
12:05 - will be able to
12:06 - open this redis server and redis client
12:10 - from our windows terminal so in order to
12:13 - do this
12:14 - you just need to right click on your
12:17 - this pc so
12:18 - just right click on this pc and then go
12:21 - to the properties
12:23 - and once this properties window is open
12:26 - we will go to the advanced settings so
12:29 - just click this option which says
12:31 - advanced system settings
12:34 - and once this advanced system settings
12:37 - is open
12:38 - we are going to go to the environment
12:40 - variables just click this option which
12:42 - says environment variables
12:45 - and once environment variables is open
12:47 - you just need to select this
12:49 - option under the system variable which
12:51 - is for
12:52 - path so just double click on this option
12:55 - which says path
12:57 - and here we just need to give a new
13:00 - environment variable and this new
13:02 - environment variable
13:03 - is the path to your redis folder
13:07 - where your server and redis cli is there
13:11 - so you just need to copy this path where
13:14 - this
13:14 - redis server executable file is there
13:17 - and redis cli
13:18 - file is there so i'm just going to copy
13:20 - this path
13:22 - and then into this environment variable
13:24 - i will just create a new variable so
13:26 - i will just click new and then i will
13:28 - paste
13:29 - this path right and then press enter
13:32 - and then click ok and then once again
13:36 - click ok
13:38 - and then once again click ok right
13:41 - so now the environment variable for
13:44 - redis
13:45 - server is set so now i will just close
13:48 - these two
13:49 - terminals right and then i'm going to
13:52 - open the command line so to open
13:55 - my windows terminal i can right click on
13:58 - this windows icon
13:59 - so just right click on the windows icon
14:02 - and then
14:02 - open the command prompt you can open the
14:04 - command prompt
14:06 - from here also or with the admin
14:08 - privileges so i'm going to open
14:10 - the command prompt with the admin
14:12 - privileges and once the command prompt
14:14 - is open i can start the server
14:17 - from this command prompt so to start the
14:19 - server you just need to write
14:21 - redis minus server which is the
14:24 - executable file here
14:26 - right so i'm going to just write redis
14:29 - minus
14:31 - server and then press enter which is
14:33 - going to start
14:34 - the redis server right so because we
14:37 - have set the environment variable
14:39 - now we can start the server from the
14:42 - command prompt from
14:44 - windows from any location right
14:47 - now in order to start the
14:50 - client we will open another
14:54 - command prompt and then we can start
14:56 - this
14:57 - with the redis cli command so i'm going
15:00 - to just write
15:01 - redis minus cli and then press
15:05 - enter and then we are connected to this
15:08 - server
15:09 - right now once again i can set any value
15:12 - here so for example set
15:14 - and then any name or any key
15:17 - i'm going to say this time the key is
15:21 - any number so i'm going to just write
15:24 - the
15:26 - number and then any number for example
15:28 - 50 here
15:29 - right and then press enter and then i'm
15:32 - going to get
15:33 - number number and then
15:36 - press enter and it's going to give us
15:38 - the value of this
15:40 - number which is 50 right so in this way
15:43 - also you can start your redis server
15:47 - and redis client okay now in case
15:50 - if you're wondering how we can install
15:54 - this redis on our windows operating
15:58 - system
15:59 - using this msi file which is a more
16:02 - easier version
16:03 - we can just download this msi file and
16:06 - once this msi file is downloaded
16:08 - i'm going to go to the location where
16:10 - it's downloaded
16:12 - and once this location is open i'm going
16:14 - to install it
16:15 - so i'm going to minimize my browser and
16:18 - i can see that
16:19 - this msi file is there in my downloads
16:22 - folder
16:23 - so i'm going to double click on this msi
16:25 - file
16:26 - and once this msi file installer starts
16:30 - we just need to click
16:32 - some next button to install it so
16:35 - just wait for some seconds to start the
16:38 - wizard
16:39 - and we just need to click next here and
16:42 - then
16:42 - just accept terms and condition and then
16:44 - click next
16:46 - and this is the location where redis
16:48 - will be installed on your system
16:50 - and then this is the important step
16:54 - so it will ask you if you want to add
16:56 - redis installation folder
16:58 - to your environment variable so this
17:02 - installer will automatically add
17:04 - the redis path to the environment
17:06 - variable
17:07 - if you check this option which is more
17:09 - easier also right
17:11 - and then click next and this is the
17:14 - default
17:15 - port as i already said 6379
17:18 - and then it says add an exception to the
17:23 - firewall
17:24 - we can just click next here and then we
17:27 - will just
17:28 - set the memory as default and click next
17:32 - and just click install right so it's
17:35 - going to
17:36 - start installing and some seconds redis
17:39 - will be installed on your system
17:41 - and once it's installed then you will be
17:44 - able to
17:44 - start redis from your command line once
17:46 - again so once again for example i'm
17:49 - going to
17:49 - open the command prompt and then i will
17:53 - give
17:53 - the redis cli command so i'm going to
17:56 - just write redis
17:58 - minus cli and
18:01 - it's automatically has been started and
18:04 - when i just write ping i will get the
18:07 - response
18:08 - pong so you may be wondering that
18:11 - this time i haven't started the redis
18:14 - server
18:15 - so if you use the redis
18:18 - installer msi file to install redis
18:22 - the server will be automatically started
18:24 - and you don't need to explicitly
18:26 - start the server you just need to
18:28 - connect to the server using the redis
18:30 - cli
18:31 - so you just need to open the command
18:33 - prompt and then using redis cli
18:36 - you can connect to that server which is
18:38 - already been started
18:40 - by that installer automatically right
18:44 - so this time we don't need to start the
18:46 - server it's already
18:47 - has been started we just need the redis
18:49 - cli to connect to it
18:51 - so these are the two ways which you can
18:53 - use to install redis
18:54 - on your windows operating system hey
18:57 - guys welcome to the next video on redis
18:58 - tutorial for beginners
19:00 - in this video i'm going to show you how
19:02 - you can download and install redis
19:04 - on our linux operating system for this
19:07 - demonstration i will be using
19:09 - ubuntu operating system so let's get
19:11 - started
19:13 - so there are two ways of installing
19:15 - redis on
19:16 - our ubuntu operating system so first of
19:19 - all
19:20 - we can use apt-get install to install
19:23 - redis
19:24 - but there is a disadvantage of
19:27 - installing redis
19:29 - using apt-cad and that is
19:32 - the version you will install so
19:36 - with apt-get whenever you use apt-get
19:39 - to install redis the repositories are
19:41 - not updated frequently
19:44 - as the redis version is released
19:47 - so you will be able to see that you
19:50 - have installed the older version of
19:53 - redis if you use
19:54 - apt get command so for example
19:58 - let's go to the redis website so search
20:00 - for
20:01 - redis and the first result which will
20:04 - appear here will be from redis dot io
20:07 - and we will see the version of
20:09 - redis right now so as i can see here
20:12 - the red is 4.0.0 is the latest
20:16 - version right and we can see
20:20 - using the apt-get command so i'm going
20:21 - to open the terminal here in ubuntu
20:24 - and here i can just type app minus cache
20:28 - to
20:29 - know the version of redis available
20:32 - right so just write app cache and then
20:35 - policy and then the redis server so just
20:39 - write redis
20:40 - minus server okay
20:43 - and then press enter and then you will
20:45 - be able to see the version
20:47 - so as far as i can see the version
20:50 - available
20:51 - using apt get command will be
20:54 - 2.8 or something near to that right for
20:59 - my ubuntu operating system it may be
21:01 - different if you have the more
21:03 - newest version of ubuntu i have ubuntu
21:07 - 144.04
21:08 - but if you have for example ubuntu 16.04
21:12 - or
21:14 - you've been to 17.04 it may be a little
21:17 - bit
21:18 - uh better this version but it will not
21:21 - be the latest version which is 4.0.0
21:24 - in most of the cases right so
21:28 - if you want the easiest way then you can
21:31 - just write
21:32 - sudo apt minus get
21:35 - install redis minus
21:38 - server okay and then once you press
21:41 - enter it's going to install
21:42 - redis server on your ubuntu operating
21:45 - system
21:46 - but the version of this ubuntu server
21:49 - will be
21:49 - 2.8 right so in this case i'm going to
21:53 - show you how you can install the latest
21:55 - version of
21:56 - redis so for that i'm going to just
21:59 - clear the
22:00 - terminal let's go to the website once
22:02 - again so i'm on the redis dot io website
22:05 - and i will just click downloads here and
22:08 - then i'll go
22:10 - a little bit down and i can see the
22:13 - version
22:14 - 4.0.0 and i will scroll a little more
22:18 - down
22:19 - and i can see this installation step
22:22 - here
22:23 - and here it's using wget
22:27 - to get this zip file and then
22:30 - we need to unzip this zip file and then
22:34 - we will do cd and then we will make
22:37 - the redis binaries right so this is the
22:41 - procedure for installing redis on our
22:44 - linux operating system or
22:46 - a mac operating system this procedure
22:48 - will be almost the same right
22:51 - so let's open that terminal first of all
22:53 - and then
22:54 - once the terminal is open we are going
22:56 - to install
22:57 - two packages here one is the build
23:00 - essential package
23:01 - and other is the tcl package build
23:04 - essential package we use
23:06 - to compile our binaries for the radish
23:09 - server
23:10 - and tcl package we will use to test our
23:13 - binaries
23:14 - okay so first of all we will give this
23:16 - command
23:17 - sudo apt minus get update
23:21 - first of all we will update all the
23:23 - repositories and i'm going to give my
23:25 - ubuntu password so updates is done i'm
23:28 - going to
23:28 - just clear the terminal once again
23:31 - and this time i will give sudo app minus
23:35 - get install build essential and
23:38 - tcl okay and then press enter
23:41 - which is going to install these two
23:43 - packages in my case i can see
23:46 - both the packages are already installed
23:49 - so
23:49 - if they are already installed you will
23:52 - see these kind of message that they are
23:53 - already installed
23:54 - otherwise if they are not present they
23:56 - will be installed on your system
23:58 - so first of all give this command to
24:01 - install these two packages
24:03 - and then once again let me clear the
24:05 - terminal and then we are ready to
24:07 - install redis using these command which
24:11 - are there on the redis dot io website
24:14 - right
24:14 - so the first command is just to download
24:17 - this
24:18 - tar file so what we are going to do is
24:22 - i'm going to first of all make a redis
24:24 - folder so
24:26 - let me make a redis folder nkdir
24:29 - redis and then i will cd to this
24:33 - redis folder or directory and inside
24:37 - this directory i'm going to give this
24:38 - wget
24:39 - command which i copied from the redis
24:42 - website so let me just maximize
24:46 - the terminal and just give this command
24:48 - so wget
24:49 - http download whatever version of the
24:53 - redis you are downloading so at the time
24:55 - of making this video
24:57 - 4.0.0 is the latest version so you can
25:00 - see
25:01 - this version 4.0.0 right otherwise this
25:05 - version will be different in your case
25:07 - if the latest version is released
25:09 - right so this just give this command and
25:12 - then press
25:12 - enter which is going to download this
25:15 - tar file
25:16 - you can see the star profile is
25:18 - downloaded and then
25:20 - let me clear the terminal once again and
25:22 - let me do ls once again
25:23 - and now we are going to give the tar
25:27 - command to unzip this
25:30 - tar file so just give this command
25:33 - copy and paste nothing else and then
25:36 - once again
25:36 - ls and you can see this redis 4.0.0
25:41 - directory is extracted and then we will
25:44 - go inside
25:45 - this redis directory cd to this
25:48 - directory
25:49 - and then we just need to give the make
25:51 - command so just give
25:53 - make command so just write make here
25:57 - and then press enter which is going to
26:00 - start
26:00 - uh the making of this
26:04 - redis binaries it can take some time
26:07 - so just wait for the process to complete
26:11 - so now i can see the make command is
26:13 - successfully completed
26:15 - and at the end of the make command i can
26:17 - see this
26:18 - message which says it's good idea to run
26:21 - make test after this make command so i'm
26:24 - going to run
26:25 - make test now so i'm going to just give
26:28 - make
26:28 - test command and then press enter and
26:31 - let it run
26:32 - so now the make test command is also
26:34 - finished
26:35 - so now let's go to the next step so i'm
26:38 - going to the website
26:40 - so make test is finished and now it says
26:43 - we just need to go to the source
26:45 - and we need to start the redis server
26:49 - using the source folder and then
26:52 - redis server okay and redis cli will be
26:56 - started from source redis cli
27:00 - right so let's start redis server first
27:02 - of all
27:03 - so let's do ls here and i can see this
27:07 - source
27:08 - directory right so i can just start the
27:10 - redis server
27:11 - like this so you just need to give src
27:15 - forward slash redis
27:19 - so okay and then press enter which is
27:21 - going to start the redis server
27:23 - and you can see the redis server has
27:25 - been started
27:27 - i will just move it to the left hand
27:29 - side this
27:30 - command line terminal and now i will
27:33 - open the next
27:34 - terminal so let me open the next
27:35 - terminal and then
27:38 - in this next terminal i'm going to start
27:40 - the redis
27:41 - line so i will just go to the redis
27:44 - directory once again where i have
27:46 - installed or created the binaries
27:50 - and then i will go to the redis
27:52 - directory
27:54 - and then i will give this redis command
27:56 - so
27:58 - src and then forward slash
28:02 - redis i think so let me do ls once again
28:04 - and yes
28:05 - src is here so i will give src
28:09 - forward slash redis
28:13 - client or cli i think yeah so red is cli
28:17 - let me just make it a little bit bigger
28:20 - so we can see
28:21 - it perfectly so now you can see
28:25 - we are connected to the server using
28:27 - this ip address and on this port
28:30 - so you can see the redis server was
28:33 - started on this default port 6379 and we
28:36 - are connected to this port using the
28:39 - redis cli so let's set something so i'm
28:42 - going to set for example
28:44 - name max for our example
28:47 - and then press enter and it says ok and
28:50 - now i will just say
28:52 - get name and it's going to give me the
28:54 - name
28:55 - max so everything is working fine
28:58 - but one more thing we can do here is
29:02 - because we have installed redis on
29:06 - some directory on a particular directory
29:09 - every time we need to start
29:10 - redis we need to cd to that directory
29:14 - and then we need to start the server
29:18 - and we don't want that we want that
29:20 - whenever
29:21 - we give the redis server command from
29:24 - any
29:25 - directory we just need to start the
29:27 - redis server
29:28 - so in order to do this what we need to
29:30 - do is let me just
29:33 - minimize this and let me just maximize
29:35 - this terminal
29:36 - and we are inside the redis directory as
29:40 - you already know and you can see the src
29:43 - folder is already
29:44 - here right so this is the src folder
29:49 - now the last command you can give here
29:51 - is
29:52 - make install so that whenever you give
29:55 - redis
29:55 - server command from anywhere from any
29:58 - directory
29:59 - it will start the server and you don't
30:01 - need to navigate to
30:02 - this particular directory in order to
30:04 - start
30:05 - the redis server so just give make
30:08 - install command
30:10 - in order to install redis server and the
30:12 - red is cli
30:14 - so let's do that and it says uh
30:17 - that cannot create regular file because
30:20 - the permissions are denied permission
30:23 - denied
30:23 - that means i need to give the sudo
30:26 - command before
30:27 - the make install so just give sudo make
30:29 - install
30:30 - uh command here okay so you just need to
30:33 - give
30:34 - sudo make install command
30:37 - and then once again press enter and now
30:40 - the redis server and redis cli and other
30:44 - stuff which are there inside this src
30:47 - folder
30:48 - is installed right so let me just
30:52 - close this terminal and let me open the
30:54 - fresh terminal now
30:56 - and we are not inside that redis
30:59 - directory right we are
31:00 - in our home folder and then from here i
31:03 - will just give
31:04 - redis server command and
31:08 - it will start the server so i don't need
31:10 - to navigate
31:11 - to that that redis directory because
31:14 - radis is now installed on on my system
31:18 - in the same way i can start the client
31:20 - so i will just start
31:21 - a new terminal and i will just give
31:24 - redis
31:24 - minus cli to connect to it
31:28 - and i'm connected right so in this way
31:31 - you can download and install redis on
31:33 - your
31:33 - ubuntu linux operating system
31:36 - hey guys in this video i'm going to show
31:38 - you how you can download and install
31:40 - redis on your mac operating system
31:43 - so let's get started and let's see how
31:45 - we can install redis on our mac
31:47 - so first of all open up your favorite
31:49 - browser and search for radiss
31:52 - and the first link which will appear
31:53 - here will be from redis dot io
31:56 - so we will just click this link which is
31:58 - redis dot io
32:00 - and here we can see the home page of
32:03 - redis
32:04 - what we want to do here is we want to go
32:07 - to the downloads
32:09 - section so we will just click this
32:11 - option which says download
32:14 - and then when we scroll down a little
32:17 - we can see this downloads button
32:20 - but don't click this download button yet
32:22 - we will see how to install
32:24 - redis on our mac by scrolling
32:28 - or down a little so when we scroll
32:31 - down a little here you can see the
32:34 - installation steps for redis
32:36 - so first we need to download the star
32:38 - file
32:39 - and then we need to unzip or untar
32:43 - this tar file and then we need to
32:46 - make the redis binaries right
32:50 - now let's see what is the latest version
32:52 - at the time of making this video
32:54 - uh for the radius so we can see
32:58 - in the downloads button that 4.0.0
33:02 - is the latest stable version at the time
33:05 - of making this video right
33:07 - so we will install the 4.0.0
33:10 - version of redis now sometimes
33:14 - uh this wcat command may
33:17 - not work on your mac operating system
33:20 - so we will use the curl command to
33:23 - download
33:24 - this star file okay so instead of wget
33:27 - we will use the curl command
33:29 - and then we will follow the same
33:32 - procedure as
33:33 - described here with some additional
33:36 - commands
33:37 - okay so what we will do first
33:40 - is on my desktop for example or
33:44 - at your chosen location just create a
33:47 - folder so i'm going to create a folder
33:49 - and i'm going to
33:50 - name it as redis okay
33:53 - so inside this redis directory i'm going
33:57 - to
33:58 - just download this star file and until
34:01 - it and then make the binaries out of it
34:03 - okay
34:04 - so then once i have this uh folder
34:08 - i will just see the info get the info
34:12 - and then uh just see what is the path
34:15 - of this redis directory and i'm going to
34:17 - copy it
34:18 - and then i'm going to open a terminal so
34:21 - just open a terminal
34:23 - and then just cd to this redis
34:27 - directory so because it's on my desktop
34:30 - i can just use this location so user
34:34 - and then whatever is your username and
34:37 - then forward slash
34:38 - desktop and then forward slash
34:42 - redis i just need to write forward slash
34:44 - redis
34:45 - and then i'm inside this redis folder
34:48 - right now we will do the alice
34:52 - and there is nothing inside this redis
34:54 - folder
34:55 - and let's just open this folder so we
34:58 - will see what's happening inside this
35:00 - folder
35:01 - okay so let me just
35:04 - resize it so we will see all the things
35:07 - which are happening here
35:09 - and now we will just give a curl command
35:12 - so just write curl
35:13 - and then minus o and then
35:17 - the location of this
35:20 - tar file so just copy this
35:24 - url from here which is there on the
35:27 - downloads page
35:28 - without wget okay so just copy this
35:32 - url and then paste it here
35:36 - on the terminal and then press enter
35:39 - which is going to download this star
35:40 - file
35:41 - and once it's downloaded we will
35:44 - just uh unturn it so you can see the
35:47 - star
35:48 - file is downloaded right and to
35:52 - unpar it or extract it we will use this
35:55 - command
35:56 - so right click copy and then
36:00 - just paste it here which is going to
36:03 - extract
36:04 - this tar file and we can see
36:08 - this folder is extracted
36:12 - and inside this folder we have some
36:15 - files right so the next step is to cd to
36:18 - this
36:19 - directory which is red is minus 4.0.0
36:23 - and then make it right so you can see
36:26 - the step
36:27 - cd to this 4.0.0 directory and give the
36:30 - make command so we will
36:32 - do the same cd to the
36:35 - redis 4.0.0 directory and then
36:38 - give a make command which is going to uh
36:42 - make the binaries for the reddest server
36:44 - and let redis client
36:46 - and other redis stuff right so now the
36:49 - make
36:50 - is finished and at last i can see this
36:53 - message
36:54 - which says it's a good idea to run make
36:57 - test so let's run make test i'm going to
37:00 - just give this command
37:02 - which is make test and then press enter
37:04 - so now the make test command is also
37:07 - finished and i can see this message
37:09 - which says all test
37:10 - passed without error right so
37:13 - i know that everything is okay and now i
37:16 - can start the redis server
37:18 - and then redis client okay so let's see
37:22 - what are the command for for those so
37:25 - redis server can be started from the
37:28 - source directory
37:29 - and we just need to run this command
37:31 - which is redis server
37:33 - and the same we need to do for redis
37:37 - client
37:37 - so from the source directory we can just
37:40 - run this
37:41 - redis cli right so let's do this so i'm
37:45 - going to
37:45 - [Music]
37:46 - open a new terminal so
37:50 - let me open a new terminal so now i have
37:53 - two terminals
37:54 - right so on the first terminal i will
37:57 - just
37:57 - uh do first of all ls here or let me
38:01 - clear the terminal first of all so clear
38:04 - and then i will do ls here and i can see
38:06 - there is a source
38:08 - directory here so i will just give this
38:11 - command
38:12 - src and then red is
38:17 - minus server right so redis minus
38:21 - server and press enter which is going to
38:23 - start
38:24 - the redis server and it has started
38:27 - listening on this port which is the
38:29 - default port for redis which is
38:32 - 6379 and this is the pid
38:35 - of this redis server right now once
38:38 - again i will
38:39 - navigate to this directory where i have
38:42 - installed
38:42 - redis so it's in my desktop
38:46 - and then i'll go to the reddit directory
38:49 - then the
38:50 - red is 4.0.0 and then
38:54 - i will just give this command which is
38:56 - src
38:58 - forward slash uh red is cli so let me do
39:01 - ls so i know that i'm in the
39:04 - same directory and then i will just
39:07 - write
39:08 - src and then red is
39:11 - cli and i'm connected to the redis
39:15 - server
39:16 - i can see this kind of prompt here
39:19 - that means i'm connected to my redis
39:22 - server right
39:23 - so first to test whether
39:27 - everything is working fine or not you
39:29 - just need to write
39:30 - ping here and then press enter
39:33 - and if in return you get pong
39:37 - then you know that everything is working
39:39 - fine
39:40 - you can also set something so for
39:42 - example set name
39:43 - is equal to max and then press enter
39:47 - and then you can get the name so get
39:52 - name and then you can get the name okay
39:55 - and then you can give the save command
39:58 - to save everything for example right
40:02 - so everything is working fine but for
40:05 - example
40:05 - when i open a new terminal
40:09 - and i want to run redis cli for example
40:12 - from here
40:13 - how can i do it so i just want to write
40:16 - red s minus cli and
40:20 - i want to run it so let me just correct
40:23 - the spelling here
40:24 - so red is cli and i want to run it
40:28 - and it says command not found because
40:31 - right now the red cli command
40:34 - can be only run from this directory
40:38 - right so you need to cd to this
40:41 - directory
40:42 - and then run the redis command so how to
40:44 - solve this problem
40:46 - so this problem can be solved by running
40:48 - the make
40:49 - install command inside your redis
40:52 - directory so
40:53 - i'm going to just stop the server for
40:56 - now and now
40:57 - uh i will once again do for example
41:01 - pwd so you know that in which directory
41:04 - i am in
41:06 - so i'm in my redis 4.0.0 directory
41:10 - right let me clear the terminal so you
41:13 - will be able to see
41:14 - better so pwd present working directory
41:18 - and you can see i'm in my uh desktop
41:22 - directory and then there is a redis
41:24 - directory here
41:26 - which is this one and then we are in the
41:29 - redis
41:31 - 4.0.0 directory right
41:33 - so we have run here the make and make
41:36 - test command
41:37 - and you just need to write make install
41:40 - command here
41:41 - with the sudo privileges
41:45 - so you just need to write sudo make
41:47 - install here
41:48 - and then press enter and you just need
41:51 - to give your max
41:53 - password here and then press enter
41:56 - and then it will start the make install
42:00 - command and then you can see everything
42:03 - is installed and now you can run
42:06 - uh redis server and redis cli
42:10 - from anywhere right so let me
42:13 - just close this terminal and close this
42:16 - terminal also
42:18 - let me just terminate everything and i
42:20 - will open
42:21 - a new uh terminal so that we can check
42:25 - whether it's running from any other
42:28 - place
42:28 - other than this red is folder or not so
42:31 - i will start two terminals
42:34 - in the first terminal i will write redis
42:38 - server and it starts from my home
42:41 - directory
42:42 - and now i will give the redis cli
42:46 - command
42:47 - so just give redis cli and then i'm
42:50 - connected
42:50 - to this server right so everything is
42:54 - working fine
42:55 - and now you can start a redis server and
42:59 - you can use write a cli command from
43:01 - anywhere
43:02 - from your directory structure right
43:06 - so in this way you can download and
43:08 - install redis on your mac
43:09 - operating system hey guys welcome to the
43:12 - next video on registered role for
43:13 - beginners
43:15 - in the last few videos we have seen how
43:17 - we can download and install redis
43:18 - on our windows linux and mac operating
43:21 - system
43:22 - now further videos i will be making on
43:25 - my
43:26 - linux operating system that is my ubuntu
43:29 - operating system
43:30 - because more frequently or most
43:33 - frequently
43:34 - this redis server is installed on a
43:37 - linux
43:38 - machine and it's used from our linux
43:40 - machine
43:42 - so it's will be more appropriate to go
43:44 - further with
43:45 - this linux operating system but all the
43:48 - command which i'm
43:49 - will be using on this linux operating
43:51 - system using the command line
43:53 - are applicable on the windows terminal
43:55 - also
43:56 - and the mac terminal also so the command
43:59 - will not change and you just need to
44:01 - start the redis server and redis cli
44:04 - on your windows or mac os and then
44:07 - follow
44:08 - these uh instruction which i'm giving on
44:11 - my ubuntu operating system so if you are
44:13 - on windows or mac
44:15 - you just need to follow the same steps
44:18 - you just need to open two terminals
44:22 - on your operating system it can be mac
44:24 - or
44:25 - it can be your windows and
44:29 - of course the linux and on one terminal
44:32 - you just need to
44:33 - start the redis server so
44:36 - i'm going to just start the redis server
44:38 - here
44:39 - and on the other one you just need to
44:42 - start the
44:43 - redis cli okay so
44:47 - looks simple right the same step you
44:49 - need to do
44:50 - on your windows or your mac okay so once
44:54 - our server is running we can minimize
44:57 - this
44:57 - and start working to interact with this
45:00 - server using the
45:02 - redis cli okay now let's start
45:05 - with the data types which are there
45:09 - in redis and then we will see how we can
45:12 - use one of the data type
45:14 - which is string so basically there are
45:16 - five data types which we can use
45:19 - in redis and as i already told you that
45:22 - redis
45:23 - is a key value storage so the key
45:26 - is a printable ascii
45:30 - right and it can be up to 512
45:34 - megabyte so it can take a really
45:37 - big uh key for example and it should be
45:40 - a printable ascii
45:42 - and then we can see the data types of
45:45 - values
45:46 - so the values can be strings
45:49 - and then uh the containers of strings so
45:53 - they can be hashes or lists
45:56 - or sets or sorted sets right
45:59 - so the key are printable asciis we can
46:03 - use printable asciis for keys and for
46:06 - values we can use strings
46:08 - hashes lists sets and
46:11 - sorted sets right and this uh
46:14 - reddish string can be up to 512
46:19 - megabytes okay now let's start with
46:22 - the practical example so
46:26 - we will start with the basics and we
46:28 - will
46:29 - try to set some values and get some
46:32 - values
46:33 - so for example i have set some values
46:36 - already to this redis
46:40 - server so what i will do is to get
46:43 - all the keys which are set you just need
46:46 - to
46:47 - write keys and then the pattern
46:50 - which uh is asterix here so asterix
46:53 - is a wild card and it's going to search
46:57 - all the keys which are saved in your
47:01 - database and then give you the result so
47:04 - for example i have set two keys which is
47:07 - name
47:08 - and name two and it has given
47:11 - me both the keys which i have saved
47:14 - right
47:15 - so in order to see all the keys which
47:18 - are saved
47:19 - in your redis database you just need to
47:22 - write
47:22 - keys and as tricks right now
47:26 - as i already told you that to set
47:30 - some value as a string you just need to
47:33 - use set and then a key for example
47:37 - in this case i am going to write name
47:40 - 3 because name and name 1
47:43 - is already set so i'm going to just set
47:46 - the third key which is name 3
47:48 - and then i'm going to give some name
47:51 - right
47:52 - and then press enter and then once again
47:55 - i will just
47:56 - write keys as tricks and now
47:59 - i can see there are three keys stored
48:03 - in my database right so set is to
48:06 - set a string value and as you
48:10 - have already guessed from my previous
48:12 - videos i've shown you this command which
48:14 - is
48:14 - get command and whatever key
48:18 - you will write here it will give you the
48:20 - value of that key
48:21 - which is mark in this case right
48:26 - in the same way you can do name two get
48:28 - name two and it's going to give you the
48:30 - value of name two
48:31 - okay so get and set we are already clear
48:35 - now there is a delete command dell
48:38 - okay so using a dell and
48:42 - the key name we can delete some key
48:44 - value pair
48:45 - so for example i want to delete name
48:48 - 2 for now and then i will just press
48:51 - enter it's going to give me the number
48:55 - of
48:56 - keys affected and in this case
48:59 - there is only one key with the name two
49:03 - and now when i just do this command
49:06 - which is
49:07 - keys s tricks now it just gives me
49:10 - two values which is name and name three
49:14 - and because name 2 key is already
49:17 - deleted
49:18 - so i will not see this name 2
49:21 - again right in the same way for example
49:24 - i want to
49:24 - delete name 3 key
49:28 - then also i can do del
49:31 - and then name three and then press enter
49:35 - and i can see the result one key
49:38 - affected
49:39 - and then now only one key left which is
49:43 - name okay
49:45 - so this is how you can delete some value
49:48 - right now let's set uh these names once
49:51 - again so for example
49:52 - name tom and once again do the get
49:55 - for example get name now you will
49:58 - see that the key value
50:02 - of name is overwritten with
50:05 - the name tom so previously the value of
50:09 - name was mark you can see here
50:12 - and now it's tom so whenever
50:16 - you set uh the value
50:19 - of previously uh set key
50:22 - then whatever value you will give for
50:25 - this key
50:26 - will be overwritten right so value will
50:29 - be overwritten for that key
50:30 - now for example if you want to delete
50:33 - all the values which are stored in our
50:35 - redis database then we can use
50:37 - flush all command so for example i will
50:40 - set some
50:41 - more values uh to see this example
50:44 - for example name 2 is equal to john
50:48 - and then i'm going to give name
50:51 - 3 is equal to max so now we have three
50:55 - names so we can
50:56 - just give keys and asterisks to see that
51:00 - so we have three keys stored right
51:03 - now for example i want to delete all
51:05 - these keys then i can give
51:07 - flush all so just write flush
51:11 - all command and then it's going to
51:13 - delete all the values so it says okay
51:16 - and then once again when we give keys
51:18 - asterisks
51:19 - then you can see empty list or set
51:23 - so all the values are deleted using
51:26 - flush all commands so these are
51:29 - some of the most frequently used
51:32 - commands
51:33 - which we can use with the strings in the
51:36 - next video also
51:37 - we will see some of the more commands
51:40 - which we can use
51:41 - with the string values hey guys welcome
51:44 - to the next video on redis tutorial for
51:46 - beginners
51:47 - in the last video we have seen how we
51:48 - can use some of the command
51:50 - with the string values now in this video
51:53 - also we will see some more command which
51:55 - we can use
51:56 - with the string values in redis
52:00 - so let's get started first of all i will
52:02 - show you
52:03 - one command which is valid in linux
52:06 - terminal also
52:07 - which is the clear command so when you
52:10 - do
52:11 - clear it's going to clear your terminal
52:14 - right so you can see when i have given
52:17 - the clear
52:18 - command it's going to clear the terminal
52:20 - and basically what it does
52:22 - is it just gives some of the
52:25 - some space in between
52:28 - your last command which you have
52:30 - executed
52:31 - and this uh after this clear
52:34 - okay so now uh you can see
52:38 - this terminal is totally empty now right
52:41 - and now we can start uh executing some
52:44 - of the other command
52:45 - so right now our database is totally
52:48 - empty i think
52:50 - so we can check it with keys asterix
52:53 - and now let's set some values and this
52:56 - time
52:57 - we can use a command which is called
53:02 - set ex okay and
53:05 - this set ex is the command which
53:09 - we can use with second so you just need
53:11 - to write
53:12 - set ex and this means set
53:15 - the value with the expiry of the key
53:18 - okay and then for example i just give
53:21 - the key and then i need to give some
53:25 - seconds so you can see the next option i
53:29 - need to give here is the number of
53:30 - seconds
53:31 - i want uh this uh key to live
53:35 - in my redis database and after that it
53:38 - will be
53:38 - automatically deleted so for example 10
53:41 - second i
53:42 - want to give here and then i
53:45 - want to give the value of it for example
53:47 - max
53:48 - okay now when i just
53:52 - press enter it's going to say okay and
53:56 - when i
53:57 - just get name it's there right
54:01 - and then there is a command called ttl
54:04 - and then you can use the key with this
54:08 - and it says 2 and what is this 2
54:11 - so ttl is the command for
54:14 - time to live so it will check
54:18 - for how much time or how long
54:21 - is this key is going to live okay
54:24 - and it says two seconds okay so this is
54:28 - time to live and then the key
54:31 - and then uh it returns us uh two second
54:34 - because
54:34 - eight tests eight second has already
54:36 - passed after
54:38 - after giving this command and once again
54:41 - for example i will just say get name
54:45 - and it's no longer there right because
54:48 - we have just set a 10 second
54:51 - expiry on this key so after 10 second it
54:54 - will be automatically deleted
54:56 - right for example i will just give a 50
55:00 - second expiry for example here
55:02 - so 5 0 max
55:05 - and then i will just give a ttl
55:08 - and then name and then you can see
55:11 - it shows 44 second once again
55:15 - 40 second and then it will show you
55:18 - the seconds uh for which
55:21 - this key is going to live okay and after
55:25 - 36 seconds it will be deleted right so
55:28 - these are
55:28 - two more command which you can use with
55:31 - the string
55:32 - right now let's set one more value for
55:35 - example
55:36 - set name 2
55:40 - and name 2 is equal to tom okay
55:43 - and now we can
55:46 - for example override this value so i
55:49 - told you whenever you write something
55:51 - like this set
55:53 - name to and some other name
55:56 - for example john then
55:59 - it will overwrite the value of
56:03 - name two for example i take name two as
56:06 - my key
56:07 - and give some other value it will
56:09 - override but if you don't know uh
56:11 - if name two is there and if you don't
56:14 - want to overwrite name 2 then you can
56:17 - use this command called set
56:19 - nx and this set nx first of all
56:22 - checks if the this key is available or
56:25 - not
56:26 - and if this key is not available then
56:29 - only it's going to
56:30 - uh you know create this key otherwise
56:33 - it's going to
56:34 - just ignore right so let's uh
56:38 - give this command and it says 0
56:41 - 0 because no key is affected
56:45 - due to this command that means
56:48 - when we do get name 2
56:52 - we can see this name is not overwritten
56:56 - because this command is used or will be
56:59 - successful when this key is
57:03 - not available in the database right if
57:06 - it's available
57:07 - then it's going to just ignore and if
57:10 - it's not available then it's going to
57:12 - create a new value for example
57:14 - i will just give set nx
57:18 - 3 and this value is not available there
57:22 - so i will just give some other name
57:26 - and it says integer one that means one
57:29 - value is affected and then i will just
57:32 - do keys s tricks to see the values
57:37 - okay and i can see name 2 is there
57:40 - and name 3 is there that means this was
57:43 - successful
57:44 - right and i can also get the value from
57:48 - get name 3 also and i can see that value
57:52 - is there
57:52 - let me clear this terminal now if you
57:55 - want to know the length of
57:57 - the value stored in the key then you can
58:00 - just use str le n command
58:04 - okay and then the key name for example
58:06 - name two
58:07 - and it's going to give you the length of
58:10 - that
58:11 - key that means for example i do get
58:14 - name two here you can see it's a three
58:17 - character word
58:18 - and that's the length of uh this value
58:21 - right and that's the result here
58:23 - okay now for example if we want to set
58:26 - multiple
58:27 - values with the same command we use m
58:30 - set so just use m set and then the key
58:34 - and the value for example this time
58:36 - i want to insert
58:39 - some number so i will just say num
58:42 - 1 and i will just give 50 here
58:46 - and then after a space i will just write
58:49 - num2
58:50 - and then i will say 60 here
58:53 - num 3 and for example 70
58:57 - and so on right and then press enter and
59:00 - it says ok
59:01 - and then when i say keys
59:04 - keys s tricks it's going to give me name
59:08 - three and name two which were already
59:10 - there
59:11 - and then num1 and num2 because
59:14 - here you can see i have given the same
59:16 - key
59:17 - two times right so num1 was there num2
59:20 - and num2
59:21 - i have given two times let's see the
59:23 - value inside the num2 so num
59:26 - 2 get num2
59:29 - and let's see the value inside it so the
59:32 - value inside is
59:33 - is the last set value so whatever is the
59:37 - last
59:37 - uh set value uh you will set for
59:40 - this key it will show you that
59:43 - uh value here right so once again for
59:47 - example
59:48 - i will just give m set m
59:51 - set and then num
59:55 - 3 here and then give the value of for
59:58 - example 60 here
60:00 - and then once again do the key asterisks
60:03 - it's going to give me name three named
60:06 - num3
60:07 - num2 name 2 and num 1 right
60:10 - so right now i have two names and three
60:13 - numbers
60:14 - inside my database now if you want to
60:17 - set the expiry
60:18 - in millisecond there is a command called
60:21 - p
60:22 - set x and then it takes
60:25 - the value in millisecond you can see in
60:27 - the intellisense also
60:29 - right so i'm not going to set any value
60:32 - uh
60:32 - here but i just wanted to show you this
60:35 - command also
60:36 - exist which will take the
60:39 - value of seconds in milliseconds right
60:42 - so this is p set x okay
60:45 - now there is a one more command which is
60:48 - called
60:49 - d e c r and i n c r
60:52 - uh which we use to increment and
60:55 - decrement
60:56 - the value of some key so for example i
60:59 - want to increment the value of
61:02 - key num1 so let's see the value first of
61:06 - all so
61:07 - value of num 1 is right now
61:11 - 50 and then we can just write
61:14 - d e c r num
61:18 - 1 and then press enter and now
61:21 - the value becomes 49 right it will give
61:24 - you the result and when you give
61:26 - get num1 is going to give you the value
61:29 - 49. so
61:30 - this decr command will decrement the
61:33 - value by 1
61:35 - and if you do inc r command
61:38 - to the num 1 for example once again the
61:42 - value will become
61:44 - 50. so incr and d ecr is to
61:48 - decrease and increase the value by 1.
61:50 - okay
61:51 - let me clear this terminal once again
61:54 - now there is one more command to
61:57 - increment or decrement the value by some
62:00 - number
62:01 - and this is for example inc
62:05 - r by so i and c are by
62:09 - and the key name for example num
62:12 - one once again and i want to increment
62:14 - the value of num
62:16 - one by five so earlier it was 50 right
62:20 - and then it's going to become 55 because
62:22 - i have incremented the value
62:25 - by 5. in the same way i can do decr
62:29 - by and on the same number
62:32 - num1 and for example i want to reduce
62:35 - the value by 30
62:37 - right and then press enter and now it
62:40 - becomes 25 so
62:41 - get num 1 and the result
62:45 - or the value inside it is 25 now the
62:48 - last command i want to show
62:50 - here is the append command
62:54 - so let me uh just
62:57 - set one more value for example set
63:00 - and then the key name for example i will
63:04 - name it as
63:04 - my key okay and
63:07 - the value here i want to set is
63:11 - hello okay and then press enter
63:15 - and then get my key
63:19 - it's hello right now there is a append
63:22 - command so i can just use
63:23 - a p p e n d append and as the name
63:27 - suggests
63:28 - i can append something to the key right
63:32 - so i want to append to my key so i will
63:35 - just write the key name
63:36 - and whatever string you want to append
63:39 - here
63:40 - so for example in double quotes i will
63:42 - just give a space here
63:44 - and then i will just write world here
63:46 - okay and then press
63:47 - enter and you can see the number of
63:50 - characters i think
63:52 - for the new value right so once again
63:55 - get
63:56 - my key and it's going to give me hello
64:00 - world so
64:01 - space world is appended to
64:04 - the my key right so append is used to
64:08 - append a string
64:10 - so these are some of the other command
64:11 - which you can use with
64:13 - the string values hey guys welcome to
64:15 - the next video on redis tutorial for
64:17 - beginners
64:18 - in the last two videos we have talked
64:20 - about string values
64:22 - in redis now in this video i'm going to
64:24 - show you how you can use hashes
64:26 - as values in redis now first of all what
64:30 - are
64:30 - hashes hashes are map between
64:34 - the string fields and string values
64:37 - hence they are perfect data type for
64:39 - representation of objects
64:41 - in red is every hash can store up to 4
64:44 - billion
64:45 - field value pairs now
64:49 - you may ask that i have talked about key
64:52 - value pairs
64:53 - but what are these field value pairs
64:56 - right so let me show you a slide and
64:59 - then you will be able to understand in a
65:01 - better way
65:03 - so this was the slide similar kind of
65:05 - slide i have shown you
65:06 - in the string data type also right
65:10 - so in the hashes we are talking about
65:13 - hashes now
65:14 - so in the case of hashes the keys are
65:17 - same
65:18 - which are printable ascii you can see
65:20 - here
65:21 - but in the case of string we were using
65:23 - string
65:24 - array here right and that string array
65:27 - was about
65:29 - 512 megabyte right
65:32 - now in the case of hashes we
65:35 - use this kind of map of field
65:38 - value right so field is this one
65:42 - and value is this one okay in the cases
65:46 - of string
65:46 - it was like a like only a string value
65:50 - right so i will give you an example for
65:52 - example i want to store
65:54 - a student's database
65:57 - or students info data
66:01 - then what i can do here is i can say
66:05 - student 1 as a key so student 1 as a key
66:09 - and then for example student has what
66:12 - attribute
66:13 - student has for example name surname
66:16 - age in which class he is so
66:19 - here field can be name
66:23 - and then for example name is equal to
66:25 - mark value 1 can be marked
66:27 - right age is the field 2 for example in
66:30 - this case and then
66:32 - for example 15 is the value 2 here
66:36 - right so name can be field 3 here
66:39 - and then whatever the surname of the
66:41 - student uh
66:43 - it will be value 3 right so uh
66:46 - for every student we can just provide
66:50 - this kind of map for his uh information
66:54 - so this is how uh hash data type as
66:57 - value
66:58 - work in redis right now let's take
67:02 - a practical example and then we will be
67:04 - able to understand
67:06 - this concept so i'm going to just start
67:09 - the redis cli and let me see what are
67:12 - the keys there so
67:14 - i'm going to just write keys pattern and
67:16 - these are all the keys so i'm going to
67:18 - flush all
67:19 - so let me flush all here
67:23 - so all the keys will be deleted and now
67:26 - i'm going to clear this
67:29 - cli and let's start with the
67:32 - hashes right so as we have seen in the
67:35 - case of
67:36 - strings we can just use this set
67:40 - command to set a key value pair now in
67:43 - the case of
67:44 - hashes we can use h
67:47 - m set to set a key
67:51 - field value pair right so for example we
67:55 - were talking about
67:56 - uh student information database right
68:00 - so just write h m set h stands for
68:03 - hashes here m set we have already seen
68:06 - in the case of strings also right
68:08 - so just write h m set and then uh
68:11 - for example stu 1 for student 1
68:15 - and then for example i will just write
68:17 - name
68:18 - is equal to max right
68:21 - and then i can also give the second
68:24 - field value pair
68:25 - right so for example his age is equal to
68:28 - 15
68:30 - and then for example class in which
68:33 - class he is so he is in for example
68:37 - eighth class okay this is just an
68:40 - example
68:41 - so this is students one information let
68:45 - me just give
68:46 - this minus here so we will be able to
68:48 - understand properly
68:49 - and then when i press enter it's going
68:52 - to say
68:53 - ok and to get this value
68:57 - there are two ways of getting so you can
68:59 - just say
69:00 - h get and the key name for example s t
69:04 - u minus 1 is the key name
69:08 - and you can give the field name whatever
69:10 - field you want to
69:11 - uh get or you can just say get
69:15 - a key name and here get we have already
69:18 - seen in the case of
69:20 - strings also and you just need to add a
69:23 - h
69:23 - before it and then the student key name
69:26 - it says error because we just need to
69:29 - give the field name also so what
69:32 - field we want to get so we want to get
69:35 - for example
69:36 - name of student one it says max here
69:40 - right now if you want to get all the
69:42 - information
69:44 - about student one you can just say h
69:48 - get all okay and
69:51 - here you can just give the student one
69:54 - key name
69:55 - and it's going to give you all the you
69:58 - know field value
69:59 - information about the student one so for
70:02 - example name
70:03 - max age 15 class 8
70:06 - okay so let's add one more student for
70:10 - example so
70:11 - once again this command hm set
70:15 - student 2 and then the name
70:19 - for example tom
70:21 - [Music]
70:22 - age is 12 for example and
70:26 - class is 7 okay press enter and once
70:30 - again
70:31 - you can get the information about the
70:33 - student to
70:34 - using stu minus two right
70:37 - so let me clear the terminal so in this
70:39 - way you can
70:41 - just set the hash value
70:45 - and get the hash value right now uh
70:48 - there is one more command for
70:51 - for example h exists
70:54 - and this will tell you if the
70:58 - field inside this hash sets exists
71:01 - or not so just write h exists
71:04 - and then the key name for example stu
71:08 - minus 1 and then for example
71:12 - i am searching for surname
71:16 - okay and surname field does not exist in
71:19 - student one
71:20 - info right and then i press enter and it
71:23 - says
71:25 - 0 so there is no information about
71:29 - the surname of student 1 right in the
71:33 - case of name
71:35 - this name exists right the name field
71:37 - exists
71:38 - in this student1 hash set
71:42 - so when i just give this value
71:45 - then it says integer one that means it
71:48 - exists so zero
71:49 - it doesn't exist one it exists right
71:54 - now uh for example i want to delete
71:57 - a value what i can do i can just say
72:01 - h d e l and it says
72:04 - first of all i need to give the key name
72:07 - so stu1
72:09 - and i want to delete for example class
72:12 - from it so
72:14 - i'll just write class and then
72:17 - i can just press enter right and then
72:20 - i can just do h get all
72:24 - and the student one key
72:27 - and now you can see class doesn't exist
72:30 - here
72:30 - anymore right for example i want to
72:34 - set once again the same value i can
72:38 - just write hm set
72:41 - and then the same student stu
72:44 - 1 and then class
72:48 - 8 okay and then press enter it says okay
72:51 - and once again h get all student one
72:55 - and now once again the class is added
72:57 - here okay
72:58 - so you can add and delete uh the
73:02 - values from this hash like this so
73:06 - for deleting you use hdl
73:09 - and then once again for setting you just
73:11 - add
73:12 - this field value pair now there is one
73:15 - more command
73:17 - called h set nx so
73:20 - h set nx so
73:23 - this this command is used for
73:26 - setting the field value if the field
73:30 - doesn't exist so if the field doesn't
73:32 - exist this command will be successful
73:35 - and if the field exists this command
73:37 - will not be successful
73:39 - so for example i will just say st1
73:42 - name so name field already exists right
73:46 - and i will just give some other name to
73:49 - the student one right and it says zero
73:52 - so this command is not successful
73:56 - because this command will be successful
73:58 - only in the case of
74:00 - the field not available right so if i do
74:04 - the same command and i know that surname
74:06 - is not
74:07 - there so i will just write surname and
74:10 - some surname
74:12 - and then press enter and returns uh
74:16 - integer one that means it has created
74:18 - this field value
74:20 - inside this student uh
74:23 - set right so once again when i do
74:27 - get all st1 now this student1
74:31 - also have surname information now as in
74:33 - the case of
74:35 - string we were using keys right so we
74:38 - were writing
74:39 - keys as tricks right same
74:42 - you can use for example h keys here
74:46 - and then the key name for example
74:50 - uh whatever key you want to give here
74:53 - stu
74:54 - 1 and it gives all the fields
74:58 - in that hash so by field i
75:01 - mean the name and for example age
75:05 - class and surname only the field not the
75:07 - value of
75:08 - those fields so it will only return the
75:11 - fields
75:12 - of that key whatever we provide here
75:15 - now as in the case of string values
75:19 - we were having decr decrement
75:22 - or incr for incrementing the value
75:26 - so the same is available in the case of
75:30 - hashes also so for example i want to
75:33 - increase
75:34 - the age of some student by some
75:38 - number i can do that so just write
75:41 - h and then i n c r
75:44 - by and then the key name s t
75:47 - u minus 1 for example and the field name
75:51 - is age i want to increment his age and
75:54 - then
75:55 - right now the age is 15 for example and
75:58 - i want to increase the age
75:59 - by 2 and then press enter
76:03 - and then once again when i do edge get
76:06 - all stu 1 now you can see
76:09 - the age becomes 17 right so
76:13 - in order to increment the value you just
76:16 - write
76:16 - h i and c are by and the key and
76:20 - the field which you want to improvement
76:22 - now if you want to know all the
76:24 - values of a particular key
76:27 - then we can just write h wells
76:31 - and then the key name stu1
76:34 - it will just give you the values of
76:37 - that field value pair
76:40 - right so right now it's not giving name
76:44 - or age or class or surname it's only
76:46 - giving the values
76:47 - of them which is max and then 17
76:50 - 8 and the surname value right so hmels
76:54 - is for value okay now if you want to
76:58 - know the length of some hash for example
77:03 - i will just give this command h l e
77:06 - n and then the stu 1 the key name
77:10 - minus 1 it'll return you the number of
77:14 - fields
77:15 - in that hash okay so press enter
77:18 - and it returns four so i know that
77:21 - student one key has num four number of
77:24 - field
77:25 - name age class and surname so i
77:29 - can just verify that with that okay
77:32 - so four fields so it will return number
77:34 - four now uh
77:36 - the last command i want to show here is
77:38 - hm
77:39 - get so let me clear the terminal and
77:41 - then
77:42 - i just want to write h and get
77:45 - and it will give you the result whatever
77:49 - fields you want so for example for
77:52 - stu1 st1
77:55 - for example i just want to know the name
77:58 - of
77:59 - that student i i don't want any other
78:01 - information about that in student
78:04 - but only the name then it will give me
78:06 - the name
78:07 - right and for example i just want to
78:09 - know the name
78:10 - and age even though the student hash
78:13 - contains
78:13 - surname and class also but i just want
78:17 - to know the name and age
78:18 - it will just give me the name and age
78:21 - when i use hm get then the key name and
78:25 - the field name i want to see so the
78:27 - field name i want to see right now is
78:29 - name and age so i just give name and age
78:32 - and it will give
78:32 - me the result of those field only so in
78:35 - this way you can use
78:36 - hashes in reddit hey guys welcome to the
78:39 - next video on registered role for
78:41 - beginners
78:42 - in this video we will learn how to use
78:44 - reddish lists
78:46 - so first of all what are reddish lists
78:49 - so redis lists are simply lists
78:52 - of strings sorted by their insertion
78:56 - order
78:56 - right so as i already said that
79:00 - a redis list is simply as list of string
79:04 - which are sorted by their inserter and
79:05 - order so a list
79:07 - would have a head on the top
79:10 - and tail on the bottom right now
79:13 - in this list we can insert any element
79:17 - from the top
79:17 - also and from the bottom also right
79:21 - so a element can be inserted to a list
79:25 - from the top or from the bottom now
79:28 - sometimes
79:29 - you see lists in a horizontal way
79:33 - right not in a vertical way but
79:36 - on a horizontal way right now if you see
79:39 - a list in a horizontal way your head
79:43 - will be on the left hand side right so
79:47 - your head will be on the left hand side
79:49 - and your tail will be
79:51 - on the right hand side right so
79:54 - redis have some command for example
79:58 - l push l push means
80:01 - the left push that means we want to push
80:04 - an element from the head right
80:07 - left and head are same
80:10 - in the case of list so this is how
80:14 - redis lists work it's simply a list
80:18 - with the insertion order now let's see
80:21 - how
80:22 - we can use lists in redis
80:25 - so i'm going to start a terminal i have
80:27 - already started
80:28 - my redis server so i'm going to just
80:31 - start the redis
80:32 - cli here and then press enter
80:35 - and i want to show you one more redis
80:38 - command
80:39 - which is a red cli command and i thought
80:42 - this would be interesting to you
80:44 - so i'm going to open our next terminal
80:48 - and here also i will just give a redis
80:50 - cli command
80:52 - and i will give an argument here so i
80:54 - will just give
80:56 - monitor command yeah okay so monitor so
81:00 - red is cli monitor
81:02 - and what this monitor is going to do is
81:04 - it's going to monitor all the commands
81:06 - which you are executing
81:08 - from your cli so for example
81:11 - let me give keys asterisk
81:14 - command here right and now you can see
81:18 - it's showing us that we have
81:21 - given this command keys asterix
81:24 - at this time this is time stamp
81:28 - at which this command is given okay so
81:31 - this is the timestamp at which this
81:33 - command is given
81:34 - and this is the command which we have
81:36 - given right
81:37 - so let's uh do flush all
81:41 - here and then press enter and you can
81:45 - see
81:46 - this flush all command is printed here
81:49 - so
81:50 - this is kind of a monitor right so this
81:53 - is going to
81:54 - monitor what are the command you are
81:56 - giving
81:57 - to your redis server okay
82:01 - so let's start with the redis lists
82:04 - so first of all uh how we can create
82:08 - our redis list so you can create this
82:11 - list
82:12 - by just uh giving this command you just
82:15 - need to
82:16 - give l push right
82:19 - so l push means left push
82:22 - that means we want to insert an element
82:25 - from the top
82:26 - right from the head okay and then we
82:29 - just need to give
82:30 - any uh key here for example key here i'm
82:33 - going to give
82:35 - num for numbers right and the first key
82:38 - i want to insert here
82:40 - will be for example one okay
82:43 - so first number right you can even
82:46 - insert multiple uh values here for
82:49 - this key for this list for example two
82:52 - three and four okay and then press
82:56 - enter and these four uh
82:59 - elements are inserted to the list
83:02 - in uh this order right now to
83:05 - see all the values in the list you
83:08 - use l range command so just use l
83:13 - range and then the name of the key
83:16 - for example number in our case and then
83:19 - you give the
83:20 - you know start and stop value for the
83:23 - range
83:23 - now redis lists index start from zero so
83:26 - for example starting value we can give
83:29 - zero here and let's say we want to just
83:32 - see
83:32 - uh the values in the list from 0 to 10
83:36 - okay and then press enter and it shows
83:39 - us
83:39 - these values from 4
83:43 - 3 2 and 1 right
83:46 - so because we were pushing the values
83:49 - from the top
83:51 - we have pushed one first
83:54 - right so it will be pushed from the top
83:57 - one and then we have pushed two so the
84:00 - top value will become
84:01 - 2 now when we push 2 here
84:04 - and that's why it's our reverse order of
84:07 - numbers right
84:09 - so first we have push 1 and then
84:12 - we have pushed 2 at the top and then we
84:15 - have push three at the top
84:16 - and at the last we have push four at the
84:18 - top so that's why
84:20 - the number four is at the top of the
84:22 - list
84:23 - and number one is at the bottom of the
84:26 - list
84:26 - right now if we want to push
84:30 - number five on the top we can just do uh
84:33 - l push here so just do l push
84:37 - and the key name and then for example i
84:40 - will do
84:40 - number five here right and then press
84:43 - enter
84:44 - and once again i will do l range you can
84:46 - see 5 is at the top
84:48 - now if you want to remove the value from
84:50 - the top
84:51 - you give the l pop command
84:54 - okay so l pop command is going to remove
84:58 - the value from the left hand side left
85:00 - hand side means
85:01 - from the top okay so lpap pop
85:05 - is going to pop the value from the top
85:07 - and in this case our key is num
85:10 - and you can see it has popped five from
85:12 - the top
85:13 - that means our list is now up to four
85:17 - okay so let's give the same command i'll
85:19 - range zero to ten
85:20 - and now our list is one two three four
85:23 - because we have removed
85:24 - five from the top okay let me clear the
85:28 - terminal
85:29 - and then i'm going to show you one more
85:32 - command so
85:33 - let's start with the l range so we have
85:36 - right now
85:36 - four elements in the list now
85:40 - there is a r push command and r pop
85:43 - command
85:44 - also okay so when you do r
85:47 - push that means right push that means
85:51 - from the bottom you are pushing some
85:53 - numbers right
85:54 - so from the bottom for example i want to
85:56 - push
85:57 - the value five here okay first of all i
86:01 - just need to give the key a name and
86:03 - then from the bottom i want to push the
86:05 - number five and then press enter and i
86:08 - will do
86:08 - l range once again you can see uh
86:12 - this value goes at the bottom five goes
86:14 - at the bottom
86:15 - because we have r push we have used this
86:18 - command
86:18 - r push r push means from the bottom
86:22 - push from the bottom right from the
86:24 - right hand side
86:26 - of the list okay that's why this five
86:29 - goes
86:29 - at the bottom okay once again let's
86:32 - uh do this r push and let's push
86:36 - 6 at the bottom and once again do
86:39 - l range like you and you can see in the
86:41 - list
86:42 - you have the 6 at the bottom so in redis
86:46 - this list is sorted by the insertion
86:49 - order
86:50 - right if you push from the right it will
86:53 - go at the bottom
86:54 - and if you push from the left it will go
86:57 - at the top
86:58 - and for left push you use l push
87:02 - and for right push you use r push now as
87:05 - we have seen in the case of
87:07 - l pop l pop is going to pop the value
87:10 - from the top
87:11 - our pop is going to pop the value from
87:14 - the bottom
87:15 - so just give our pop here
87:18 - and then the key name and it's going to
87:20 - pop six from the list
87:22 - which is from the bottom right let's do
87:25 - a range command once again
87:26 - and now you can see six is gone from the
87:29 - list
87:30 - in a same way let's do our pop once
87:33 - again
87:34 - and now five is gone from the list so
87:36 - once again
87:37 - let's do l range and now we have
87:41 - a list of four numbers right let me
87:44 - clear the terminal here now let's give l
87:46 - range command once again
87:48 - and now there is a command called len
87:52 - okay this means left length and name of
87:55 - the key for example
87:57 - it's going to give you the length of the
88:00 - list in our case this length is equal to
88:03 - the number of
88:04 - element in the list okay so l ln
88:07 - is for knowing the length of the list
88:10 - now for example if you want to get some
88:13 - value at some index
88:15 - you just do l index command
88:18 - okay and then the name of the key and
88:21 - the index so
88:22 - index start from zero so zero one
88:26 - two three okay so for example we want to
88:29 - uh get number two here at index three
88:33 - so we will just say index three
88:36 - okay and it's going to give you the
88:39 - number one because
88:40 - index starts from zero so zero one
88:43 - two and three so index three is the
88:46 - value one here
88:47 - okay let's do index zero here and it's
88:51 - going to give us
88:52 - the value four now there is one more
88:54 - command called l
88:55 - set so you can use l set and the
88:58 - key name and then you can give the index
89:02 - at which you want to insert
89:04 - a value right so for example i want to
89:07 - insert the value at
89:08 - the very top so the very top is the
89:11 - index
89:12 - zero right and then the value itself so
89:15 - i want to
89:16 - insert the value at the zeroth index and
89:19 - the value is five
89:21 - and then when i just press enter it says
89:23 - ok
89:24 - and when i do l range
89:27 - you can see at the top at the 0th index
89:31 - this value 4 is replaced by
89:34 - value 5 right so the size of the list
89:38 - remains the same but the value is
89:41 - replaced
89:42 - at the zeroth index and now the new
89:45 - value
89:46 - is five here now let me push some more
89:48 - values here so
89:50 - i'll push you can do r push also
89:52 - wherever you want
89:54 - so uh l push num and for example
89:57 - i want to push number six here
90:01 - and then number seven and number eight
90:03 - here okay
90:04 - and let's do l range and you can see
90:08 - all the values are here right
90:11 - now sometimes you don't know the
90:14 - range or the length of your list so for
90:18 - example you
90:19 - just do 0 to 3 here
90:22 - and it's going to just give you 0 to 3
90:25 - values right
90:26 - now if you don't know the length of your
90:29 - list you can give l range
90:32 - and then 0 to -1 so let's give this
90:36 - command
90:37 - and you can see it gives all the
90:39 - elements in the list so
90:41 - when you do l range the key name
90:44 - 0 to -1 is going to give you all the
90:48 - element in the list
90:49 - right this was giving the
90:52 - values from 0 to 10th index so if our
90:55 - list
90:56 - is of length 20 this is going to give
90:59 - you
90:59 - only 10 values 0 to 10 right but
91:02 - this is going to give you all the 20
91:05 - values if you
91:06 - your list length is 20. now let me clear
91:10 - this uh terminal and
91:13 - let's go to the next command so now the
91:15 - next command is
91:16 - l push x and that means
91:21 - l push if the key exists okay
91:24 - so the left push if the key exists so we
91:27 - know
91:27 - that we have created a list with the key
91:31 - uh num right so let's do first of all
91:34 - this l range right and then we will
91:38 - give this l push x
91:42 - okay and this means that insert
91:45 - to this list for example uh this
91:49 - key exists already so insert to the list
91:52 - if this key already exists which you are
91:54 - providing here
91:55 - okay and this is the left push so we
91:59 - want to push one more value
92:01 - to the top so let's push 9 at the top
92:05 - and because this key num exists
92:08 - this command is successful right so
92:10 - let's do l range once again
92:12 - and this key is inserted at the top
92:16 - let's say we do l push x
92:20 - for a key which doesn't exist for
92:22 - example
92:23 - let's say we have a key for
92:26 - subjects so let's say the key is sub
92:30 - here and we want to push some keys for
92:33 - example
92:35 - once again one two three four five
92:38 - okay but this key doesn't exist right
92:42 - and then when we press enter it returns
92:45 - zero
92:45 - because this command is not successful
92:48 - because
92:49 - this command checks whether this key
92:52 - exists or not
92:54 - and if this key exists then it's it's
92:57 - pushing
92:57 - these values on the top right
93:01 - but because this key doesn't exist this
93:04 - command fails
93:05 - and there is no list will be created now
93:09 - the next command i want to show here is
93:11 - l insert before or after so you
93:14 - just do l insert here
93:18 - and then the key name for example num
93:21 - here and you have the option
93:23 - before or after so before after are the
93:26 - keyword for example
93:28 - i use the keyword before here so i'm
93:31 - going to just write
93:32 - before and the pivot name pivot name
93:36 - is this element
93:40 - okay so i want to insert the
93:43 - value before two for example okay
93:46 - so let me write two here
93:50 - and the value is this time
93:53 - for example 55 okay
93:56 - so l insert the key name and you can use
94:00 - this keyword before or after here
94:03 - and then the pivot and then the value
94:06 - and once again i do press enter and you
94:09 - can see
94:10 - now the list size is nine and when i do
94:14 - l range zero to minus one you can see
94:17 - this
94:18 - 55 is inserted before
94:22 - 2 right before 2 is the index
94:25 - from the left right because we have done
94:28 - the
94:29 - l insert okay so before 2
94:32 - is inserted 55 right you can do
94:36 - after also so for example i want to
94:39 - insert after three
94:42 - okay let's insert after four so
94:46 - after five we want to insert the value
94:50 - four
94:51 - you can see uh after five there is
94:54 - three right so after five there is a
94:57 - value three
94:58 - and we want to insert 4 value 4 here
95:01 - and now our list is of size 10
95:04 - and you can see now after 5
95:07 - comes 4 okay and above
95:11 - 3 comes 4 okay so this l
95:14 - insert is used to insert the value
95:17 - before or after some value so these are
95:21 - some of the frequently used command with
95:23 - redis list hey guys welcome to the next
95:25 - video on register tool for beginners and
95:27 - in this video we will learn
95:29 - what are sets and how to use sets in
95:32 - redis
95:33 - so first of all what are sets
95:36 - so redis sets are an unordered
95:40 - collection of unique strings
95:43 - right so by unique i mean whatever
95:46 - values set contains they are
95:50 - all unique so no repetition is allowed
95:53 - here
95:53 - okay and they are unordered uh
95:57 - you know list so they are not ordered
96:00 - and they are
96:00 - unique so let's uh see how we can
96:04 - use sets in uh practice so
96:07 - i have already started my redis server
96:10 - and on my
96:12 - cli first of all let me
96:15 - just clear all the keys which i already
96:18 - have
96:19 - so i will just say keys and i have only
96:22 - one
96:23 - key which i'm going to flush
96:27 - all and now let's create a set
96:30 - okay so to create a set you can just
96:34 - use s for set and then add
96:37 - okay so s add and then give
96:40 - any a name any name to a key so for
96:43 - example my
96:45 - set is a key here and then you can
96:48 - add members here one or many okay
96:51 - so for example i want to have a set of
96:54 - numbers
96:55 - so let me say this is my first set so i
96:57 - will name it
96:58 - set one my set one and let's say
97:01 - i add here one two three
97:05 - four for example okay and i
97:08 - just press enter which is going to
97:10 - create a set
97:12 - and add these four numbers
97:15 - now here i have provided four different
97:18 - numbers right
97:19 - so they are all unique and to view
97:22 - uh the members of a set you just do
97:26 - s members okay so
97:29 - s members and the key name my key name
97:31 - is my set
97:32 - one and you can view all the members of
97:35 - the set
97:35 - right now for example in this set i want
97:38 - to add
97:39 - one more value so i just say s
97:42 - add and then my set 1
97:46 - and i want to add 3 here right and i
97:49 - already know that
97:51 - here i already have 3 in my set
97:54 - and i want to you know add one more
97:57 - 3 to the set which is not allowed right
98:01 - so it's going to give me 0 in return
98:03 - that means
98:04 - the 3 is not added to the set because 3
98:08 - is already there
98:09 - okay we can just prove with this by
98:12 - using s members
98:14 - and then the set name so you can see set
98:17 - is not changed
98:18 - the values in the set remain same
98:20 - because uh they must be unique
98:22 - okay on the other hand when i do s set 1
98:26 - 5 which is a new member in the set i can
98:29 - just
98:30 - verify this so you can see this time
98:33 - it's added
98:34 - and you can verify it with this value
98:37 - if you get 1 here that means the number
98:40 - is added to the set
98:41 - and if you get 0 here that means number
98:44 - is not
98:44 - added to the set right now
98:48 - for example if i want to know
98:51 - how many values are there in the set so
98:55 - how many members are there in the set so
98:57 - i can just do
98:58 - s card and then the
99:02 - name of the set my set one
99:05 - okay my set one and i can see there are
99:08 - five members
99:09 - in the set okay now uh
99:13 - let me create one more set so i have
99:16 - my set one let me clear the terminal
99:18 - first and now i will create
99:21 - a set two so set
99:24 - add or s add my set
99:27 - 2 here okay and let me add some
99:31 - more numbers here this time i will add
99:34 - for example 5 8 7
99:37 - 6 4 and 9 in this set
99:40 - okay and then press enter and i can
99:44 - view this set by s members here
99:48 - and the key name as set 2 and you can
99:51 - see these are the member of second set
99:53 - right now if you have multiple sets you
99:55 - can subtract
99:56 - one set from other using s diff
100:00 - okay so you can use s diff
100:03 - and this as tiff command returns the
100:06 - members of the set
100:08 - resulting from the difference between
100:11 - the first set
100:12 - and all other successive sets so this is
100:14 - the difference
100:16 - so i will just add my set one
100:19 - as my first set and then i will just
100:23 - give the second set as my set
100:27 - 2 okay and then press enter and it's
100:30 - going
100:30 - to give me the difference between these
100:32 - two set let me show you
100:34 - the values of the set 1 also
100:37 - so we can verify so you can see in the
100:41 - set one we have value 1 to 5
100:44 - and then in the set 2 we have values 4
100:47 - 5 6 7 eight nine
100:50 - so from s diff it's going to give you
100:52 - the values
100:54 - which are there in the set one
100:57 - but they are not there in the set two
101:00 - okay so these values these three values
101:03 - are not
101:04 - there in the set 2 right but 4 and 5 are
101:07 - there in the set
101:09 - 2 so they are discarded so s diff
101:12 - is going to give you the difference that
101:15 - means
101:16 - whatever values are there in set one
101:20 - and not there in set two now if you want
101:22 - to
101:23 - uh know the s diff and save it
101:26 - into the third set for example
101:29 - then you can do that also so you can
101:31 - just write s diff
101:33 - and then store and then the destination
101:36 - so i'm going to save
101:37 - the difference in a new set so for
101:39 - example my
101:41 - set 3 right and then
101:44 - the difference between these two sets so
101:46 - my set one
101:48 - and my set two so these three values
101:52 - will be saved in the new set which is my
101:55 - set three
101:56 - okay press enter and then you can see by
102:00 - s members my set 3 you can see
102:03 - all these values are saved in the set
102:06 - 3 which is the difference between my set
102:09 - 1
102:10 - and my set 2. now you can do the union
102:13 - also union of the set so for example i
102:17 - want to do
102:18 - union i can just write s union
102:22 - and the set name so my set
102:26 - 1 and my set two
102:29 - okay so i wanted to do the union of set
102:31 - one and set two
102:33 - and then press enter and it's going to
102:35 - give you
102:36 - ah these values so union means
102:39 - whatever values which are there in the
102:42 - first set also
102:44 - and second set also the combination of
102:47 - that
102:47 - unique value right so all the unique
102:50 - value which are there in the first set
102:53 - and second set
102:54 - so uh these value
102:57 - were in the first set and these value
103:01 - which are unique in the second set so
103:04 - this is the combination of s union
103:07 - okay and same you can do for storing so
103:10 - you can just write s union store here so
103:14 - just write s tune in
103:16 - store and i'm going to store it in set
103:19 - four for example
103:21 - so my set four the union of
103:24 - set 1 and set 2 right press enter and
103:27 - union is saved
103:29 - i can do s member my set 4
103:32 - and you can see now it has 1 to 9 which
103:36 - is the union of set one and set two
103:38 - okay so in order to store use s union
103:41 - store now if i want to remove some
103:43 - members from
103:44 - a set i can do s ram
103:48 - for removing a value from a set or
103:51 - member from a set
103:52 - and for for example i want to remove uh
103:55 - some member from set 4 and i want to
103:59 - remove for example
104:00 - 9 okay and then press enter
104:03 - it's going to remove 9 from the set 4
104:06 - and i can do s members 1
104:08 - once again and you can see 9 is not
104:10 - there anymore
104:12 - ok you can remove multiple values
104:15 - for example 8 7 6
104:18 - and so on and these will be removed
104:21 - so now i have only up to five values
104:24 - because
104:25 - 876 are removed now for example i want
104:27 - to remove a random value
104:29 - from the set so i don't want to
104:33 - remove a specific value but i want to
104:35 - remove a random value so for example i
104:38 - can do
104:38 - s pop here to remove a random value from
104:43 - a set so my set 4 for example
104:47 - and for example i want to remove only
104:49 - one value from here
104:51 - right so i can just press enter
104:54 - it says three so it has removed three
104:58 - from this set okay so let's do
105:01 - s member s4 and you can see
105:04 - three is no more there in the set four
105:08 - okay so it has picked a random value
105:11 - from this set
105:12 - and removed it okay i can give for
105:16 - example
105:16 - s pop my set for i for example i want to
105:20 - remove
105:21 - two random values so i can just do that
105:25 - and now it has removed four
105:28 - and one from the set and now my set
105:31 - is only of two values or two members two
105:35 - and five
105:36 - okay so as pop is to remove the random
105:39 - value
105:40 - from the set now let me clear this
105:43 - terminal and let me just print uh the
105:46 - values of set one and set two once again
105:49 - so
105:49 - set one has one to five and set two
105:53 - have four to nine now there is a command
105:55 - called s
105:56 - inter and s in the command gets the
105:58 - element
105:59 - of a set after the intersection of
106:02 - all the specified set okay so it's going
106:05 - to give you the intersection of
106:07 - all this specified set so just to s
106:11 - enter for example my set
106:15 - 1 and my set 2
106:18 - and then press enter and it's going to
106:21 - give you the intersection
106:22 - intersection means these values are
106:25 - there
106:26 - in both the set so these are the
106:28 - intersection
106:30 - of both the sets so four and five are
106:33 - there in
106:34 - set one and set two so it's going to
106:36 - give you those value only
106:38 - and as we have seen in the case of sdf
106:41 - and as union you can do uh
106:44 - for example as inter store
106:48 - so you can store the intersection into a
106:51 - new set so as inter store
106:54 - and for example i want to save this in
106:56 - set 5
106:58 - and then press enter and then i can just
107:01 - see the content of set 5 which is 4 and
107:04 - 5 which is correct now the last command
107:06 - i want to show here is
107:08 - s move command so s move
107:11 - and this command is used to uh you know
107:14 - transfer or move value or member
107:17 - from one set to the another set right
107:20 - so for example i want to move one
107:24 - from my set one to my set
107:27 - two okay so i want to move this value
107:30 - to the set two so what i can do so first
107:34 - of all the source
107:35 - source is my set 1 and i want to
107:39 - move it to the destination which is my
107:42 - set
107:43 - 2 and i want to transfer the value 1
107:46 - member 1 right so press enter it says
107:50 - 1 that means the operation is successful
107:53 - so let me
107:54 - see the s member or members
107:57 - of set 2 and now you can see
108:01 - one is moved to the set
108:04 - two earlier one was not there in the set
108:08 - two
108:08 - but now we have one in the set
108:12 - two and let's see the contents of set
108:15 - one also
108:16 - so you can see one is no longer there in
108:19 - set one
108:20 - because it's moved from set one to set
108:23 - two so these are some of the most
108:26 - frequently used command
108:27 - in redis sets hey guys welcome to the
108:31 - next video on redis tutorial for
108:32 - beginners
108:34 - and in this video we will learn how we
108:35 - can use sorted sets
108:37 - in red is so first of all what are
108:40 - sorted sets so redis sorted sets
108:43 - are similar to the redis sets with a
108:46 - unique feature
108:48 - that their members can be sorted
108:51 - now every member of a sorted set
108:54 - is associated with a score and
108:58 - based on the score their members can be
109:01 - sorted
109:02 - right so you can see in this diagram
109:05 - uh the redis key will remain the same as
109:08 - other patterns but here you can see
109:13 - score here so you can define a score for
109:16 - example
109:17 - i will define a score 100 and then the
109:20 - value associated with the score so the
109:22 - value associated with the score
109:25 - is value 2 and this is our member
109:28 - of a set and there is a new feature in
109:31 - the sorted set
109:32 - which is this score right so you can
109:35 - define a score
109:37 - and with the score you can define
109:40 - a member or a value associated with it
109:43 - and then on the basis of that we can
109:46 - sort
109:46 - the members of our set right so
109:50 - let's see in practical how it works
109:53 - so i'm going to open my redis cli
109:56 - so the first command we are going to
109:58 - learn here is that
110:00 - add and the set ad is used to create
110:04 - a set if it doesn't exist or add
110:07 - a member to this set if
110:11 - it already exists right so
110:14 - every command in sorted set will start
110:16 - with this character
110:18 - z and then whatever its function is
110:22 - the function name for example right so
110:25 - that add and then the key name for
110:27 - example my set one
110:29 - and the score so score is one
110:32 - and the value associated with it so
110:34 - spelling for example you want to
110:36 - associate it
110:37 - with the score one is a right in a
110:40 - similar way we can
110:41 - define multiple score members here so
110:44 - score and the value associated with it
110:47 - two and b
110:48 - for example three is the third score and
110:51 - the value
110:52 - we want to associate with it is c
110:55 - and then they need not be in order so
110:58 - score can be five now and the value
111:01 - can be d here right or any other value
111:04 - right and then press enter and you can
111:07 - see
111:07 - four members are inserted
111:11 - in the sorted set now to get
111:14 - the members of a sorted set
111:17 - you use z and then range command
111:21 - okay as we have seen in the sets also
111:25 - and then what is your key name for
111:27 - example
111:28 - my set 1 and then starting value
111:31 - and the end value as we have seen in the
111:34 - case of
111:35 - sets also so in the case of sets we have
111:38 - seen that
111:39 - 0 and -1 are going to give all the
111:42 - values
111:42 - in the set right so press enter and you
111:46 - can see here
111:47 - all the values are printed here
111:51 - now you can see here the values are
111:54 - printed not the
111:56 - you know scores associated with them
111:59 - right so for example i once again
112:02 - write z add and then set
112:06 - one my set one and then for example i
112:09 - can just give
112:10 - score hundred here and then the value
112:13 - is e here right and then press enter
112:16 - and once again i will just give that
112:19 - range
112:19 - my set one and then you can see all the
112:23 - values here or all the members here but
112:26 - these are not
112:27 - the scores these are just uh order
112:30 - ordered number now if you want to know
112:33 - how many number of
112:35 - members are there in our set we can use
112:37 - z
112:38 - card here okay and the key name for
112:42 - example my set one
112:43 - and then press enter and i can see that
112:46 - there are five members in my
112:48 - sorted set right now in order to get the
112:52 - count of members
112:53 - in the sorted set with the scores within
112:56 - the given range we use z count
113:00 - okay and then the key name so my
113:03 - set 1 and the minimum and the maximum
113:07 - score value here so for example i want
113:10 - to get
113:11 - one two three here okay
113:14 - and then press enter and then it's going
113:17 - to count the number of values
113:19 - between this range right so for example
113:22 - i will just write
113:24 - one two five here and values are
113:27 - 4 because in between score 1
113:30 - and score 5 there are 4 values
113:33 - including those scores now i can just
113:36 - write 1 to 50 here or 55
113:40 - and still it's going to give us four
113:42 - values number of values
113:44 - because the last score we have
113:45 - associated here is
113:47 - hundred so when we write here one zero
113:50 - one here
113:51 - and then press enter then only it's
113:54 - going to give us
113:55 - 5 values and let's say we can give 99
113:59 - here
114:00 - still it gives the 4 value so
114:03 - the z count is going to take the
114:06 - score values and then depending upon the
114:09 - score values
114:10 - is going to give you the number of
114:12 - values
114:13 - ah in between these scores now let me
114:16 - clear
114:17 - the terminal and to remove
114:22 - any member from a set you use
114:25 - z rem and then the key name my set
114:29 - and the member so the member here
114:33 - will be the member value so not the
114:36 - score but the member so for example i
114:39 - want to
114:39 - remove the member b so i can just give
114:42 - the value of
114:44 - member of b and then press enter
114:47 - and once again i will just give this
114:49 - sled range command
114:51 - and now it's giving the same answer
114:54 - because i haven't given the
114:56 - right key name so i must give uh
115:00 - zm my set one here right and then it
115:03 - gives
115:04 - integer 1 that means the command is
115:06 - successful and once again the range
115:09 - and now you can see the value is removed
115:11 - from here
115:12 - now if you want to determine the index
115:14 - of a member in a sorted set
115:16 - you use zed rank here so just give
115:19 - rosette rank command
115:21 - and then my set 1 and the member name so
115:24 - for example
115:26 - d here and then press enter and it's
115:29 - going to give you
115:30 - the index of this
115:33 - d right so the index starts from 0 so 0
115:38 - 1 2 right for example i want to see the
115:41 - index of e here that's going to give me
115:44 - the
115:45 - index three and for example for member a
115:48 - the index is zero now there is a z rev
115:52 - rank command also so you can just write
115:55 - z rev rank here
115:59 - and this is the reverse rank right so
116:02 - uh the rank will be sorted according to
116:05 - the score so highest score
116:07 - is the zeroth index right and then
116:11 - the lowest score is the maximum
116:14 - index okay so for example my set
116:18 - 1 and then the member name for example e
116:21 - is the rank 0 here right because
116:24 - index of e is the highest
116:28 - rank rank is 100 for
116:31 - e right and it's the biggest rank that
116:34 - means
116:35 - the index for it will be zero because we
116:38 - are
116:39 - printing the reverse rank here okay for
116:42 - example you want to see
116:44 - the index of a it will be 3 because it's
116:47 - in reverse order now the last command
116:49 - i'm going to show you
116:51 - here is z score command
116:54 - okay and then i can give the key name
116:58 - and the member name so for example i
117:00 - will give the member
117:01 - a and then press enter is going to give
117:05 - me the score value of
117:07 - this member right so for example i want
117:10 - to see the score of
117:12 - member e and press enter it's going to
117:15 - give me 100 because
117:16 - score associated with e was 100
117:19 - right and for example this value doesn't
117:23 - exist
117:24 - in our sorted set for example i just
117:26 - added
117:27 - or given the random value here and then
117:30 - press
117:31 - enter it's going to return the nil value
117:34 - which
117:34 - doesn't exist okay now let me clear the
117:38 - terminal
117:39 - let me show one more command to you so
117:42 - for example
117:43 - i just want to print the range
117:46 - of my set 1 0 to -1
117:51 - and this is a c d e and i want to add
117:54 - one more value here so i will just add
117:57 - z add and i want to add this value to my
118:00 - set
118:00 - 1 and add the score 1 and i want to
118:04 - add for example aaa five times
118:08 - and then press enter and and it returns
118:11 - me
118:11 - one that means the value for this score
118:15 - is now set to aaa instead of
118:18 - a for example right so let me do
118:22 - a z range once again and you can see
118:24 - here
118:25 - the new uh value is added here
118:28 - which is aaa right
118:31 - and if you remember the score of
118:35 - a was also one
118:38 - right so let me give the same command
118:42 - now which is z score and this time i
118:45 - want to just see
118:46 - the score of a which is 1
118:50 - and then i want to see the score of aaa
118:54 - which is also 1. so it's totally fine if
118:57 - you give a same score
118:59 - to multiple values right
119:02 - so for example i want to give one more
119:05 - value to this score for example bbb
119:09 - and then press enter and once again the
119:12 - range
119:13 - i want to see this value is added and
119:15 - then i want to see
119:16 - see the score of b b b b so b b
119:20 - b b and you can see the score is still
119:24 - one okay so it's totally fine to
119:27 - have one score for multiple
119:31 - values now what happens to
119:34 - the rank here so for example z
119:37 - rank for my set uh 1
119:40 - so my set 1 and then b bbb
119:44 - and the index here is 2. so this is how
119:48 - a sorted set works now there is one more
119:51 - command which is z
119:53 - range by score
119:57 - and then you can give the key name
120:00 - and then the score value minimum score
120:03 - for example 1
120:04 - and then the maximum score for example i
120:07 - am going to give here 2
120:08 - right and then press enter and i get
120:11 - here
120:12 - three values because there are
120:16 - three values associated with the score
120:18 - one and i think
120:20 - there was no score for two right so
120:23 - no value was associated with two so
120:26 - let's see one two four for example and
120:30 - now i can see
120:31 - these values and c also so if you want
120:34 - to get
120:35 - values by the range of scores
120:38 - then you can use that range by score
120:41 - okay
120:42 - so this is how you can use sorted sets
120:45 - in redis there are some more commands
120:48 - which are associated with sorted set
120:51 - you can just search for them and then
120:53 - practice them
120:54 - but these are some of the most
120:56 - frequently used command with
120:58 - the sorted sets hey guys welcome to the
121:01 - next video on registered role for
121:02 - beginners
121:04 - in this video we will learn how to use
121:06 - redis publish
121:07 - subscribe so redis publish
121:10 - subscribe implements the messaging
121:13 - system
121:14 - where sender is called the publisher
121:18 - and the receiver is called the
121:21 - subscriber
121:23 - right now in redis a client can
121:26 - subscribe to any number of channels
121:30 - so let me give you an example and let me
121:33 - show you
121:33 - how you can use radish publish subscribe
121:38 - so you can see i have opened
121:41 - three redis cli terminals in three
121:44 - different terminals right
121:46 - so this is ready cli first terminal
121:49 - second terminal and third terminal
121:52 - now first of all i am going to subscribe
121:56 - to a channel so i can just write
121:59 - subscribe here
122:01 - and then it takes a channel name
122:04 - right and i can give any uh channel name
122:08 - for example
122:10 - redis or any other channel name so for
122:12 - example
122:13 - my channel and i can subscribe to
122:16 - this channel okay so the name depends
122:20 - upon you
122:21 - right so for example i subscribe to
122:24 - the channel called redis and i just
122:27 - uh press enter so now
122:30 - this is or this terminal is subscribed
122:35 - to this channel right
122:38 - now from the second cli when i publish
122:41 - some message to this channel so let me
122:45 - publish something so to publish a
122:48 - message you can just
122:49 - use a keyword publish as
122:52 - we have seen in subscribe so to
122:54 - subscribe you use
122:56 - a keyword subscribe and then a channel
122:58 - name
122:59 - for publishing you use a keyword publish
123:02 - and the channel name
123:03 - on which you want to publish right so
123:07 - i want to publish on the redis channel
123:10 - and then your message for example hi
123:14 - right and i press enter and you can see
123:18 - on the subscriber uh it gets the same
123:21 - message so first of all
123:23 - it will just show you what kind
123:27 - of uh message is coming so it's a
123:30 - message
123:30 - and then on what channel it's coming and
123:33 - what is the
123:34 - message itself right now if you want to
123:37 - send a big message you can
123:40 - just enclose your message inside
123:44 - these double quotes so for example hello
123:48 - world here and then press enter
123:51 - then it's received here okay
123:55 - now it's possible to subscribe
123:59 - to uh any number of channels right
124:02 - so you can see i am subscribed to uh
124:05 - radish from
124:07 - one channel now i can just
124:10 - copy the same command in the
124:13 - next terminal here and then i'm
124:16 - subscribed
124:18 - to this channel so now there are two
124:21 - subscriber subscribe to one
124:24 - redis channel so this is the channel
124:27 - and i'm subscribed to that channel right
124:30 - so
124:31 - there are two subscriber for the channel
124:34 - name
124:35 - redis and when i just send the
124:38 - hello world again for example now
124:42 - it is received by both the subscribers
124:45 - right so you can see hello world is
124:48 - received here
124:50 - and hello world is received here okay
124:53 - so this is how publish subscribe method
124:57 - work in redis now when you are doing
125:01 - uh or using redis in
125:05 - the programming then it's
125:08 - really important or it's really useful
125:11 - so for example
125:12 - recently i created some kind of api
125:15 - where i wanted to listen for
125:19 - any event for save in redis so
125:22 - whatever is saved whenever some command
125:25 - comes
125:26 - and something is saved in redis i wanted
125:29 - to
125:30 - subscribe to that save event
125:33 - right and i have used this publish
125:35 - subscribe
125:37 - uh method from redis in that
125:40 - api and it worked fine so it's kind of
125:44 - listening to the trigger for examples
125:47 - for saving the data or some delete
125:51 - deletion of data you can subscribe and
125:54 - then you will get
125:56 - this message on the next side
125:59 - which is subscribing and based on that
126:02 - subscription you can trigger some event
126:05 - okay now let me just
126:08 - close this cli and once again
126:12 - open the cli once again and let me clear
126:14 - the terminal once again
126:16 - and there is a command called p
126:18 - subscribe so you can do
126:19 - p subscribe and then it takes the
126:22 - pattern
126:23 - so for example i can just write r
126:26 - and then s tricks r asterix here means
126:30 - any uh publisher when it's published
126:33 - on the channel name which start with r
126:36 - it will receive that message so for
126:38 - example uh
126:40 - i am publishing this publish
126:43 - redis because this pattern matches
126:46 - this pattern so asterix is some kind of
126:50 - a wild card here so
126:52 - uh it's whatever so for example i'm
126:54 - subscribing to our
126:56 - s tricks and i'm just publishing the
126:58 - same message again
127:00 - and you can see it's receiving that
127:02 - message
127:03 - because it's just matching the pattern
127:07 - whatever publisher publishes on the
127:11 - pattern which matches r s tricks for
127:14 - example
127:15 - r and whatever comes after r
127:19 - this is matching that pattern so it will
127:22 - receive
127:23 - that message for example i can
127:26 - just do something like this so i publish
127:29 - on
127:30 - r x for example this also matches this
127:34 - pattern
127:35 - right because we just want to match the
127:38 - first
127:39 - letter of that channel and whatever
127:43 - comes after that
127:44 - it will be matched automatically so this
127:46 - is kind of a
127:48 - pattern matching in radish so p
127:51 - subscribe is used to pattern matching
127:54 - and whatever publisher
127:58 - channel matches that pattern it will be
128:01 - receiving that message so you can see
128:04 - this is receiving
128:05 - that message but this cli is not
128:08 - receiving so because we have subscribed
128:10 - to a concrete channel layer
128:14 - which is not a pattern so whenever we
128:18 - uh just give the redis channel itself
128:22 - then only it will receive the message
128:25 - and this
128:25 - automatically receives the message
128:27 - because here we are
128:29 - just matching the pattern okay so in
128:32 - this way you can use publish subscribe
128:34 - in redis i hope you enjoyed this video

Cleaned transcript:

so first of all what is redis so redis is an open source bsd licensed advanced inmemory key value store where keys can contain data structures such as strings hashes lists sets and sorted sets so it's an inmemory key value store with persistence that means redis can be used as a database or a caching layer or a message broker now i already said that it's bsd license that means it's open source now redis is written in c and it's no sql database now what is nosql nosql is an informal loosely defined term for nonrelational structured data storage systems like mongodb memcached couchdb or cassandra so following in the footsteps of other nosql databases such as cassandra couchdb or mongodb radis allows the user to store vast amount of data without the limits of relational databases so in nosql databases data can be stored in nonrelational way now what does the name redis mean redis stands for remote directory server it is often referred to as a data structure server since the keys can contain strings hashes lists sets and sorted sets so because the keys can contain these type of different data structures it's often referred as a data structure server right so the name come from remote directory server now what is redis used for so as i already mentioned that it's an advanced key value store that can function as a nosql database or as a memory cache store to improve performance when serving data that is stored in system memory and also it can be used as a message broker so it can be used in place of caching systems such as memcached now you must be wondering how to interact with radiss so redis can be installed on a server and it can be interacted with a command line tool or command line interface which is called redis cli so using this redis cli we can interact with our redis server now this redis client can be used on any machine and then when we open this redis client which is a command line client uh the first line will look like this so redis then this kind of angle bracket this we will see in the coming videos how to install redis and how we can use redis now let's talk about some of the history about radiss so in early 2009 a developer called salvatore san filippo he was an italian developer by the way started the redis project at that time he was working on a realtime web analytics solution and found that mysql could not provide the necessary performance so in june 2009 redis was deployed in production for a website called log.com which was a realtime web analytics website then in march 2010 a company called vmware hired sanfilippo to work fulltime on redis although reddit remains as bsd licensed subsequently vmware hired some of the other developers who also contributed majorly to assist on the project so this was a brief introduction about radiss and from the next video we will see how we can install redis and how to use redis so stay tuned and please rate command subscribe and bye for now hey guys welcome to the next video on redis tutorial for beginners in this video i'm going to show you how you can download and install redis on your windows operating system so let's get started so first of all open your favorite browser and search for redis and hopefully the first result which will appear here will be from redis dot io so you need to just click this link which is for the redis dot io and then once you click this link you will be able to see the downloads tab on the top of this website so let me just maximize this browser and i can see this tab which is for downloads right so i'm going to click this downloads tab and then i'm in the downloads section now when you scroll down a little you will see a windows section here and there is a message here which says the red this project does not officially support windows however the microsoft open tech group develops and maintains this windows port targeting windows 64. so redis project does not officially support windows but there is a group of developers which makes it available for windows so we just need to click this link which says learn more and when you click this link you will be redirected to a github page of redis which is maintained by microsoft archive so once you reach to this page and scroll a little down and reach to the readme dot md here on the third line you will be able to see this message which says you can download the latest unsigned binary and unsigned msi installer from this page so there is a link for the release page right so just click this link which says release page and then you will be redirected to the downloads page for redis for windows right now when you scroll down a little here here are few options to download a redis on your windows operating system the first option is by using dot msi file which is our installer second option is by using a zip file so all the binaries will be packed in this zip file and you need to set up the environment variable so i'm going to show you both the ways so let's start with the dot zip file so i'm going to download this dot zip file first of all and i'm going to minimize the browser and here in downloads i can see this zip file so what i will do is i will create a new folder i'm making this folder in my downloads directory itself and i will name it as redis but you are free to create this directory anywhere wherever you wish right and then i'm going to extract this zip file inside this redis folder so let me drag this to this redis folder this zip file and then i'm going to just extract all files inside this redis folder right so it's going to extract all the files it's not really big files so it will be extracted really soon and you can see all the files are extracted inside this redis folder and there is a redis minus x64 minus 3.2 3.2 is the latest version at the time of making this video so inside this radiss folder there are some files so these files are all are important but two are of our interest one is redis server and another is redis cli so let me minimize this other window here and then i'm going to double click on this radis minus server exe file so i'm going to double click on this redis server which is going to start the redis server and it will ask you to give the administrative privileges or you need to allow the access to the server so here i'm going to just uh press this button it says allow access and now the redis server has been started now the default port on which the redis server start is this one which is six three seven nine okay so this is the default port on which redis starts on the local host and then uh this is the pid of this redis server right now next i'm going to start the redis cli to interact with this server so now this time click on this redis cli and it's going to start another terminal and it's going to connect to this redis server and then using this uh cli you will be able to interact with this server right so this is the client and server is running in the background right so let me minimize this window also and let me just place this server here and let me open this client on the right hand side right so this is the server and this is the client now in this client when you write ping you will get the response pong so you can see i'm getting the response pong that means the server is running fine and my client is able to connect to the server and get the response right now in order to save something as a key value pair for testing we can just write set and then it's going to give you some intelligence also so i just wrote a keyword set and it gives me the hint that i need to give the key value pair here so as a key i will give a name or name key and i will give any name as a value so for example mark i'm going to give as a name right and then i'm going to press enter and it says okay that means this key value that means name is our key and mark is the value of the name which is the value right so to get this value you can just write get and then the name of the key which is name itself in our case and press enter and it's going to give us the value right so that means everything is working fine and we are able to connect to the redis server and it's able to save the values right but sometimes or most of the times you will not go to this server and start from this directory right so you want to uh you know open your command line from your windows and you want to uh connect from this command terminal from windows not from uh this location right so in order to do that you need to set the environment variables so let's set the environment variables for this redis uh client and server so we will be able to open this redis server and redis client from our windows terminal so in order to do this you just need to right click on your this pc so just right click on this pc and then go to the properties and once this properties window is open we will go to the advanced settings so just click this option which says advanced system settings and once this advanced system settings is open we are going to go to the environment variables just click this option which says environment variables and once environment variables is open you just need to select this option under the system variable which is for path so just double click on this option which says path and here we just need to give a new environment variable and this new environment variable is the path to your redis folder where your server and redis cli is there so you just need to copy this path where this redis server executable file is there and redis cli file is there so i'm just going to copy this path and then into this environment variable i will just create a new variable so i will just click new and then i will paste this path right and then press enter and then click ok and then once again click ok and then once again click ok right so now the environment variable for redis server is set so now i will just close these two terminals right and then i'm going to open the command line so to open my windows terminal i can right click on this windows icon so just right click on the windows icon and then open the command prompt you can open the command prompt from here also or with the admin privileges so i'm going to open the command prompt with the admin privileges and once the command prompt is open i can start the server from this command prompt so to start the server you just need to write redis minus server which is the executable file here right so i'm going to just write redis minus server and then press enter which is going to start the redis server right so because we have set the environment variable now we can start the server from the command prompt from windows from any location right now in order to start the client we will open another command prompt and then we can start this with the redis cli command so i'm going to just write redis minus cli and then press enter and then we are connected to this server right now once again i can set any value here so for example set and then any name or any key i'm going to say this time the key is any number so i'm going to just write the number and then any number for example 50 here right and then press enter and then i'm going to get number number and then press enter and it's going to give us the value of this number which is 50 right so in this way also you can start your redis server and redis client okay now in case if you're wondering how we can install this redis on our windows operating system using this msi file which is a more easier version we can just download this msi file and once this msi file is downloaded i'm going to go to the location where it's downloaded and once this location is open i'm going to install it so i'm going to minimize my browser and i can see that this msi file is there in my downloads folder so i'm going to double click on this msi file and once this msi file installer starts we just need to click some next button to install it so just wait for some seconds to start the wizard and we just need to click next here and then just accept terms and condition and then click next and this is the location where redis will be installed on your system and then this is the important step so it will ask you if you want to add redis installation folder to your environment variable so this installer will automatically add the redis path to the environment variable if you check this option which is more easier also right and then click next and this is the default port as i already said 6379 and then it says add an exception to the firewall we can just click next here and then we will just set the memory as default and click next and just click install right so it's going to start installing and some seconds redis will be installed on your system and once it's installed then you will be able to start redis from your command line once again so once again for example i'm going to open the command prompt and then i will give the redis cli command so i'm going to just write redis minus cli and it's automatically has been started and when i just write ping i will get the response pong so you may be wondering that this time i haven't started the redis server so if you use the redis installer msi file to install redis the server will be automatically started and you don't need to explicitly start the server you just need to connect to the server using the redis cli so you just need to open the command prompt and then using redis cli you can connect to that server which is already been started by that installer automatically right so this time we don't need to start the server it's already has been started we just need the redis cli to connect to it so these are the two ways which you can use to install redis on your windows operating system hey guys welcome to the next video on redis tutorial for beginners in this video i'm going to show you how you can download and install redis on our linux operating system for this demonstration i will be using ubuntu operating system so let's get started so there are two ways of installing redis on our ubuntu operating system so first of all we can use aptget install to install redis but there is a disadvantage of installing redis using aptcad and that is the version you will install so with aptget whenever you use aptget to install redis the repositories are not updated frequently as the redis version is released so you will be able to see that you have installed the older version of redis if you use apt get command so for example let's go to the redis website so search for redis and the first result which will appear here will be from redis dot io and we will see the version of redis right now so as i can see here the red is 4.0.0 is the latest version right and we can see using the aptget command so i'm going to open the terminal here in ubuntu and here i can just type app minus cache to know the version of redis available right so just write app cache and then policy and then the redis server so just write redis minus server okay and then press enter and then you will be able to see the version so as far as i can see the version available using apt get command will be 2.8 or something near to that right for my ubuntu operating system it may be different if you have the more newest version of ubuntu i have ubuntu 144.04 but if you have for example ubuntu 16.04 or you've been to 17.04 it may be a little bit uh better this version but it will not be the latest version which is 4.0.0 in most of the cases right so if you want the easiest way then you can just write sudo apt minus get install redis minus server okay and then once you press enter it's going to install redis server on your ubuntu operating system but the version of this ubuntu server will be 2.8 right so in this case i'm going to show you how you can install the latest version of redis so for that i'm going to just clear the terminal let's go to the website once again so i'm on the redis dot io website and i will just click downloads here and then i'll go a little bit down and i can see the version 4.0.0 and i will scroll a little more down and i can see this installation step here and here it's using wget to get this zip file and then we need to unzip this zip file and then we will do cd and then we will make the redis binaries right so this is the procedure for installing redis on our linux operating system or a mac operating system this procedure will be almost the same right so let's open that terminal first of all and then once the terminal is open we are going to install two packages here one is the build essential package and other is the tcl package build essential package we use to compile our binaries for the radish server and tcl package we will use to test our binaries okay so first of all we will give this command sudo apt minus get update first of all we will update all the repositories and i'm going to give my ubuntu password so updates is done i'm going to just clear the terminal once again and this time i will give sudo app minus get install build essential and tcl okay and then press enter which is going to install these two packages in my case i can see both the packages are already installed so if they are already installed you will see these kind of message that they are already installed otherwise if they are not present they will be installed on your system so first of all give this command to install these two packages and then once again let me clear the terminal and then we are ready to install redis using these command which are there on the redis dot io website right so the first command is just to download this tar file so what we are going to do is i'm going to first of all make a redis folder so let me make a redis folder nkdir redis and then i will cd to this redis folder or directory and inside this directory i'm going to give this wget command which i copied from the redis website so let me just maximize the terminal and just give this command so wget http download whatever version of the redis you are downloading so at the time of making this video 4.0.0 is the latest version so you can see this version 4.0.0 right otherwise this version will be different in your case if the latest version is released right so this just give this command and then press enter which is going to download this tar file you can see the star profile is downloaded and then let me clear the terminal once again and let me do ls once again and now we are going to give the tar command to unzip this tar file so just give this command copy and paste nothing else and then once again ls and you can see this redis 4.0.0 directory is extracted and then we will go inside this redis directory cd to this directory and then we just need to give the make command so just give make command so just write make here and then press enter which is going to start uh the making of this redis binaries it can take some time so just wait for the process to complete so now i can see the make command is successfully completed and at the end of the make command i can see this message which says it's good idea to run make test after this make command so i'm going to run make test now so i'm going to just give make test command and then press enter and let it run so now the make test command is also finished so now let's go to the next step so i'm going to the website so make test is finished and now it says we just need to go to the source and we need to start the redis server using the source folder and then redis server okay and redis cli will be started from source redis cli right so let's start redis server first of all so let's do ls here and i can see this source directory right so i can just start the redis server like this so you just need to give src forward slash redis so okay and then press enter which is going to start the redis server and you can see the redis server has been started i will just move it to the left hand side this command line terminal and now i will open the next terminal so let me open the next terminal and then in this next terminal i'm going to start the redis line so i will just go to the redis directory once again where i have installed or created the binaries and then i will go to the redis directory and then i will give this redis command so src and then forward slash redis i think so let me do ls once again and yes src is here so i will give src forward slash redis client or cli i think yeah so red is cli let me just make it a little bit bigger so we can see it perfectly so now you can see we are connected to the server using this ip address and on this port so you can see the redis server was started on this default port 6379 and we are connected to this port using the redis cli so let's set something so i'm going to set for example name max for our example and then press enter and it says ok and now i will just say get name and it's going to give me the name max so everything is working fine but one more thing we can do here is because we have installed redis on some directory on a particular directory every time we need to start redis we need to cd to that directory and then we need to start the server and we don't want that we want that whenever we give the redis server command from any directory we just need to start the redis server so in order to do this what we need to do is let me just minimize this and let me just maximize this terminal and we are inside the redis directory as you already know and you can see the src folder is already here right so this is the src folder now the last command you can give here is make install so that whenever you give redis server command from anywhere from any directory it will start the server and you don't need to navigate to this particular directory in order to start the redis server so just give make install command in order to install redis server and the red is cli so let's do that and it says uh that cannot create regular file because the permissions are denied permission denied that means i need to give the sudo command before the make install so just give sudo make install uh command here okay so you just need to give sudo make install command and then once again press enter and now the redis server and redis cli and other stuff which are there inside this src folder is installed right so let me just close this terminal and let me open the fresh terminal now and we are not inside that redis directory right we are in our home folder and then from here i will just give redis server command and it will start the server so i don't need to navigate to that that redis directory because radis is now installed on on my system in the same way i can start the client so i will just start a new terminal and i will just give redis minus cli to connect to it and i'm connected right so in this way you can download and install redis on your ubuntu linux operating system hey guys in this video i'm going to show you how you can download and install redis on your mac operating system so let's get started and let's see how we can install redis on our mac so first of all open up your favorite browser and search for radiss and the first link which will appear here will be from redis dot io so we will just click this link which is redis dot io and here we can see the home page of redis what we want to do here is we want to go to the downloads section so we will just click this option which says download and then when we scroll down a little we can see this downloads button but don't click this download button yet we will see how to install redis on our mac by scrolling or down a little so when we scroll down a little here you can see the installation steps for redis so first we need to download the star file and then we need to unzip or untar this tar file and then we need to make the redis binaries right now let's see what is the latest version at the time of making this video uh for the radius so we can see in the downloads button that 4.0.0 is the latest stable version at the time of making this video right so we will install the 4.0.0 version of redis now sometimes uh this wcat command may not work on your mac operating system so we will use the curl command to download this star file okay so instead of wget we will use the curl command and then we will follow the same procedure as described here with some additional commands okay so what we will do first is on my desktop for example or at your chosen location just create a folder so i'm going to create a folder and i'm going to name it as redis okay so inside this redis directory i'm going to just download this star file and until it and then make the binaries out of it okay so then once i have this uh folder i will just see the info get the info and then uh just see what is the path of this redis directory and i'm going to copy it and then i'm going to open a terminal so just open a terminal and then just cd to this redis directory so because it's on my desktop i can just use this location so user and then whatever is your username and then forward slash desktop and then forward slash redis i just need to write forward slash redis and then i'm inside this redis folder right now we will do the alice and there is nothing inside this redis folder and let's just open this folder so we will see what's happening inside this folder okay so let me just resize it so we will see all the things which are happening here and now we will just give a curl command so just write curl and then minus o and then the location of this tar file so just copy this url from here which is there on the downloads page without wget okay so just copy this url and then paste it here on the terminal and then press enter which is going to download this star file and once it's downloaded we will just uh unturn it so you can see the star file is downloaded right and to unpar it or extract it we will use this command so right click copy and then just paste it here which is going to extract this tar file and we can see this folder is extracted and inside this folder we have some files right so the next step is to cd to this directory which is red is minus 4.0.0 and then make it right so you can see the step cd to this 4.0.0 directory and give the make command so we will do the same cd to the redis 4.0.0 directory and then give a make command which is going to uh make the binaries for the reddest server and let redis client and other redis stuff right so now the make is finished and at last i can see this message which says it's a good idea to run make test so let's run make test i'm going to just give this command which is make test and then press enter so now the make test command is also finished and i can see this message which says all test passed without error right so i know that everything is okay and now i can start the redis server and then redis client okay so let's see what are the command for for those so redis server can be started from the source directory and we just need to run this command which is redis server and the same we need to do for redis client so from the source directory we can just run this redis cli right so let's do this so i'm going to open a new terminal so let me open a new terminal so now i have two terminals right so on the first terminal i will just uh do first of all ls here or let me clear the terminal first of all so clear and then i will do ls here and i can see there is a source directory here so i will just give this command src and then red is minus server right so redis minus server and press enter which is going to start the redis server and it has started listening on this port which is the default port for redis which is 6379 and this is the pid of this redis server right now once again i will navigate to this directory where i have installed redis so it's in my desktop and then i'll go to the reddit directory then the red is 4.0.0 and then i will just give this command which is src forward slash uh red is cli so let me do ls so i know that i'm in the same directory and then i will just write src and then red is cli and i'm connected to the redis server i can see this kind of prompt here that means i'm connected to my redis server right so first to test whether everything is working fine or not you just need to write ping here and then press enter and if in return you get pong then you know that everything is working fine you can also set something so for example set name is equal to max and then press enter and then you can get the name so get name and then you can get the name okay and then you can give the save command to save everything for example right so everything is working fine but for example when i open a new terminal and i want to run redis cli for example from here how can i do it so i just want to write red s minus cli and i want to run it so let me just correct the spelling here so red is cli and i want to run it and it says command not found because right now the red cli command can be only run from this directory right so you need to cd to this directory and then run the redis command so how to solve this problem so this problem can be solved by running the make install command inside your redis directory so i'm going to just stop the server for now and now uh i will once again do for example pwd so you know that in which directory i am in so i'm in my redis 4.0.0 directory right let me clear the terminal so you will be able to see better so pwd present working directory and you can see i'm in my uh desktop directory and then there is a redis directory here which is this one and then we are in the redis 4.0.0 directory right so we have run here the make and make test command and you just need to write make install command here with the sudo privileges so you just need to write sudo make install here and then press enter and you just need to give your max password here and then press enter and then it will start the make install command and then you can see everything is installed and now you can run uh redis server and redis cli from anywhere right so let me just close this terminal and close this terminal also let me just terminate everything and i will open a new uh terminal so that we can check whether it's running from any other place other than this red is folder or not so i will start two terminals in the first terminal i will write redis server and it starts from my home directory and now i will give the redis cli command so just give redis cli and then i'm connected to this server right so everything is working fine and now you can start a redis server and you can use write a cli command from anywhere from your directory structure right so in this way you can download and install redis on your mac operating system hey guys welcome to the next video on registered role for beginners in the last few videos we have seen how we can download and install redis on our windows linux and mac operating system now further videos i will be making on my linux operating system that is my ubuntu operating system because more frequently or most frequently this redis server is installed on a linux machine and it's used from our linux machine so it's will be more appropriate to go further with this linux operating system but all the command which i'm will be using on this linux operating system using the command line are applicable on the windows terminal also and the mac terminal also so the command will not change and you just need to start the redis server and redis cli on your windows or mac os and then follow these uh instruction which i'm giving on my ubuntu operating system so if you are on windows or mac you just need to follow the same steps you just need to open two terminals on your operating system it can be mac or it can be your windows and of course the linux and on one terminal you just need to start the redis server so i'm going to just start the redis server here and on the other one you just need to start the redis cli okay so looks simple right the same step you need to do on your windows or your mac okay so once our server is running we can minimize this and start working to interact with this server using the redis cli okay now let's start with the data types which are there in redis and then we will see how we can use one of the data type which is string so basically there are five data types which we can use in redis and as i already told you that redis is a key value storage so the key is a printable ascii right and it can be up to 512 megabyte so it can take a really big uh key for example and it should be a printable ascii and then we can see the data types of values so the values can be strings and then uh the containers of strings so they can be hashes or lists or sets or sorted sets right so the key are printable asciis we can use printable asciis for keys and for values we can use strings hashes lists sets and sorted sets right and this uh reddish string can be up to 512 megabytes okay now let's start with the practical example so we will start with the basics and we will try to set some values and get some values so for example i have set some values already to this redis server so what i will do is to get all the keys which are set you just need to write keys and then the pattern which uh is asterix here so asterix is a wild card and it's going to search all the keys which are saved in your database and then give you the result so for example i have set two keys which is name and name two and it has given me both the keys which i have saved right so in order to see all the keys which are saved in your redis database you just need to write keys and as tricks right now as i already told you that to set some value as a string you just need to use set and then a key for example in this case i am going to write name 3 because name and name 1 is already set so i'm going to just set the third key which is name 3 and then i'm going to give some name right and then press enter and then once again i will just write keys as tricks and now i can see there are three keys stored in my database right so set is to set a string value and as you have already guessed from my previous videos i've shown you this command which is get command and whatever key you will write here it will give you the value of that key which is mark in this case right in the same way you can do name two get name two and it's going to give you the value of name two okay so get and set we are already clear now there is a delete command dell okay so using a dell and the key name we can delete some key value pair so for example i want to delete name 2 for now and then i will just press enter it's going to give me the number of keys affected and in this case there is only one key with the name two and now when i just do this command which is keys s tricks now it just gives me two values which is name and name three and because name 2 key is already deleted so i will not see this name 2 again right in the same way for example i want to delete name 3 key then also i can do del and then name three and then press enter and i can see the result one key affected and then now only one key left which is name okay so this is how you can delete some value right now let's set uh these names once again so for example name tom and once again do the get for example get name now you will see that the key value of name is overwritten with the name tom so previously the value of name was mark you can see here and now it's tom so whenever you set uh the value of previously uh set key then whatever value you will give for this key will be overwritten right so value will be overwritten for that key now for example if you want to delete all the values which are stored in our redis database then we can use flush all command so for example i will set some more values uh to see this example for example name 2 is equal to john and then i'm going to give name 3 is equal to max so now we have three names so we can just give keys and asterisks to see that so we have three keys stored right now for example i want to delete all these keys then i can give flush all so just write flush all command and then it's going to delete all the values so it says okay and then once again when we give keys asterisks then you can see empty list or set so all the values are deleted using flush all commands so these are some of the most frequently used commands which we can use with the strings in the next video also we will see some of the more commands which we can use with the string values hey guys welcome to the next video on redis tutorial for beginners in the last video we have seen how we can use some of the command with the string values now in this video also we will see some more command which we can use with the string values in redis so let's get started first of all i will show you one command which is valid in linux terminal also which is the clear command so when you do clear it's going to clear your terminal right so you can see when i have given the clear command it's going to clear the terminal and basically what it does is it just gives some of the some space in between your last command which you have executed and this uh after this clear okay so now uh you can see this terminal is totally empty now right and now we can start uh executing some of the other command so right now our database is totally empty i think so we can check it with keys asterix and now let's set some values and this time we can use a command which is called set ex okay and this set ex is the command which we can use with second so you just need to write set ex and this means set the value with the expiry of the key okay and then for example i just give the key and then i need to give some seconds so you can see the next option i need to give here is the number of seconds i want uh this uh key to live in my redis database and after that it will be automatically deleted so for example 10 second i want to give here and then i want to give the value of it for example max okay now when i just press enter it's going to say okay and when i just get name it's there right and then there is a command called ttl and then you can use the key with this and it says 2 and what is this 2 so ttl is the command for time to live so it will check for how much time or how long is this key is going to live okay and it says two seconds okay so this is time to live and then the key and then uh it returns us uh two second because eight tests eight second has already passed after after giving this command and once again for example i will just say get name and it's no longer there right because we have just set a 10 second expiry on this key so after 10 second it will be automatically deleted right for example i will just give a 50 second expiry for example here so 5 0 max and then i will just give a ttl and then name and then you can see it shows 44 second once again 40 second and then it will show you the seconds uh for which this key is going to live okay and after 36 seconds it will be deleted right so these are two more command which you can use with the string right now let's set one more value for example set name 2 and name 2 is equal to tom okay and now we can for example override this value so i told you whenever you write something like this set name to and some other name for example john then it will overwrite the value of name two for example i take name two as my key and give some other value it will override but if you don't know uh if name two is there and if you don't want to overwrite name 2 then you can use this command called set nx and this set nx first of all checks if the this key is available or not and if this key is not available then only it's going to uh you know create this key otherwise it's going to just ignore right so let's uh give this command and it says 0 0 because no key is affected due to this command that means when we do get name 2 we can see this name is not overwritten because this command is used or will be successful when this key is not available in the database right if it's available then it's going to just ignore and if it's not available then it's going to create a new value for example i will just give set nx 3 and this value is not available there so i will just give some other name and it says integer one that means one value is affected and then i will just do keys s tricks to see the values okay and i can see name 2 is there and name 3 is there that means this was successful right and i can also get the value from get name 3 also and i can see that value is there let me clear this terminal now if you want to know the length of the value stored in the key then you can just use str le n command okay and then the key name for example name two and it's going to give you the length of that key that means for example i do get name two here you can see it's a three character word and that's the length of uh this value right and that's the result here okay now for example if we want to set multiple values with the same command we use m set so just use m set and then the key and the value for example this time i want to insert some number so i will just say num 1 and i will just give 50 here and then after a space i will just write num2 and then i will say 60 here num 3 and for example 70 and so on right and then press enter and it says ok and then when i say keys keys s tricks it's going to give me name three and name two which were already there and then num1 and num2 because here you can see i have given the same key two times right so num1 was there num2 and num2 i have given two times let's see the value inside the num2 so num 2 get num2 and let's see the value inside it so the value inside is is the last set value so whatever is the last uh set value uh you will set for this key it will show you that uh value here right so once again for example i will just give m set m set and then num 3 here and then give the value of for example 60 here and then once again do the key asterisks it's going to give me name three named num3 num2 name 2 and num 1 right so right now i have two names and three numbers inside my database now if you want to set the expiry in millisecond there is a command called p set x and then it takes the value in millisecond you can see in the intellisense also right so i'm not going to set any value uh here but i just wanted to show you this command also exist which will take the value of seconds in milliseconds right so this is p set x okay now there is a one more command which is called d e c r and i n c r uh which we use to increment and decrement the value of some key so for example i want to increment the value of key num1 so let's see the value first of all so value of num 1 is right now 50 and then we can just write d e c r num 1 and then press enter and now the value becomes 49 right it will give you the result and when you give get num1 is going to give you the value 49. so this decr command will decrement the value by 1 and if you do inc r command to the num 1 for example once again the value will become 50. so incr and d ecr is to decrease and increase the value by 1. okay let me clear this terminal once again now there is one more command to increment or decrement the value by some number and this is for example inc r by so i and c are by and the key name for example num one once again and i want to increment the value of num one by five so earlier it was 50 right and then it's going to become 55 because i have incremented the value by 5. in the same way i can do decr by and on the same number num1 and for example i want to reduce the value by 30 right and then press enter and now it becomes 25 so get num 1 and the result or the value inside it is 25 now the last command i want to show here is the append command so let me uh just set one more value for example set and then the key name for example i will name it as my key okay and the value here i want to set is hello okay and then press enter and then get my key it's hello right now there is a append command so i can just use a p p e n d append and as the name suggests i can append something to the key right so i want to append to my key so i will just write the key name and whatever string you want to append here so for example in double quotes i will just give a space here and then i will just write world here okay and then press enter and you can see the number of characters i think for the new value right so once again get my key and it's going to give me hello world so space world is appended to the my key right so append is used to append a string so these are some of the other command which you can use with the string values hey guys welcome to the next video on redis tutorial for beginners in the last two videos we have talked about string values in redis now in this video i'm going to show you how you can use hashes as values in redis now first of all what are hashes hashes are map between the string fields and string values hence they are perfect data type for representation of objects in red is every hash can store up to 4 billion field value pairs now you may ask that i have talked about key value pairs but what are these field value pairs right so let me show you a slide and then you will be able to understand in a better way so this was the slide similar kind of slide i have shown you in the string data type also right so in the hashes we are talking about hashes now so in the case of hashes the keys are same which are printable ascii you can see here but in the case of string we were using string array here right and that string array was about 512 megabyte right now in the case of hashes we use this kind of map of field value right so field is this one and value is this one okay in the cases of string it was like a like only a string value right so i will give you an example for example i want to store a student's database or students info data then what i can do here is i can say student 1 as a key so student 1 as a key and then for example student has what attribute student has for example name surname age in which class he is so here field can be name and then for example name is equal to mark value 1 can be marked right age is the field 2 for example in this case and then for example 15 is the value 2 here right so name can be field 3 here and then whatever the surname of the student uh it will be value 3 right so uh for every student we can just provide this kind of map for his uh information so this is how uh hash data type as value work in redis right now let's take a practical example and then we will be able to understand this concept so i'm going to just start the redis cli and let me see what are the keys there so i'm going to just write keys pattern and these are all the keys so i'm going to flush all so let me flush all here so all the keys will be deleted and now i'm going to clear this cli and let's start with the hashes right so as we have seen in the case of strings we can just use this set command to set a key value pair now in the case of hashes we can use h m set to set a key field value pair right so for example we were talking about uh student information database right so just write h m set h stands for hashes here m set we have already seen in the case of strings also right so just write h m set and then uh for example stu 1 for student 1 and then for example i will just write name is equal to max right and then i can also give the second field value pair right so for example his age is equal to 15 and then for example class in which class he is so he is in for example eighth class okay this is just an example so this is students one information let me just give this minus here so we will be able to understand properly and then when i press enter it's going to say ok and to get this value there are two ways of getting so you can just say h get and the key name for example s t u minus 1 is the key name and you can give the field name whatever field you want to uh get or you can just say get a key name and here get we have already seen in the case of strings also and you just need to add a h before it and then the student key name it says error because we just need to give the field name also so what field we want to get so we want to get for example name of student one it says max here right now if you want to get all the information about student one you can just say h get all okay and here you can just give the student one key name and it's going to give you all the you know field value information about the student one so for example name max age 15 class 8 okay so let's add one more student for example so once again this command hm set student 2 and then the name for example tom age is 12 for example and class is 7 okay press enter and once again you can get the information about the student to using stu minus two right so let me clear the terminal so in this way you can just set the hash value and get the hash value right now uh there is one more command for for example h exists and this will tell you if the field inside this hash sets exists or not so just write h exists and then the key name for example stu minus 1 and then for example i am searching for surname okay and surname field does not exist in student one info right and then i press enter and it says 0 so there is no information about the surname of student 1 right in the case of name this name exists right the name field exists in this student1 hash set so when i just give this value then it says integer one that means it exists so zero it doesn't exist one it exists right now uh for example i want to delete a value what i can do i can just say h d e l and it says first of all i need to give the key name so stu1 and i want to delete for example class from it so i'll just write class and then i can just press enter right and then i can just do h get all and the student one key and now you can see class doesn't exist here anymore right for example i want to set once again the same value i can just write hm set and then the same student stu 1 and then class 8 okay and then press enter it says okay and once again h get all student one and now once again the class is added here okay so you can add and delete uh the values from this hash like this so for deleting you use hdl and then once again for setting you just add this field value pair now there is one more command called h set nx so h set nx so this this command is used for setting the field value if the field doesn't exist so if the field doesn't exist this command will be successful and if the field exists this command will not be successful so for example i will just say st1 name so name field already exists right and i will just give some other name to the student one right and it says zero so this command is not successful because this command will be successful only in the case of the field not available right so if i do the same command and i know that surname is not there so i will just write surname and some surname and then press enter and returns uh integer one that means it has created this field value inside this student uh set right so once again when i do get all st1 now this student1 also have surname information now as in the case of string we were using keys right so we were writing keys as tricks right same you can use for example h keys here and then the key name for example uh whatever key you want to give here stu 1 and it gives all the fields in that hash so by field i mean the name and for example age class and surname only the field not the value of those fields so it will only return the fields of that key whatever we provide here now as in the case of string values we were having decr decrement or incr for incrementing the value so the same is available in the case of hashes also so for example i want to increase the age of some student by some number i can do that so just write h and then i n c r by and then the key name s t u minus 1 for example and the field name is age i want to increment his age and then right now the age is 15 for example and i want to increase the age by 2 and then press enter and then once again when i do edge get all stu 1 now you can see the age becomes 17 right so in order to increment the value you just write h i and c are by and the key and the field which you want to improvement now if you want to know all the values of a particular key then we can just write h wells and then the key name stu1 it will just give you the values of that field value pair right so right now it's not giving name or age or class or surname it's only giving the values of them which is max and then 17 8 and the surname value right so hmels is for value okay now if you want to know the length of some hash for example i will just give this command h l e n and then the stu 1 the key name minus 1 it'll return you the number of fields in that hash okay so press enter and it returns four so i know that student one key has num four number of field name age class and surname so i can just verify that with that okay so four fields so it will return number four now uh the last command i want to show here is hm get so let me clear the terminal and then i just want to write h and get and it will give you the result whatever fields you want so for example for stu1 st1 for example i just want to know the name of that student i i don't want any other information about that in student but only the name then it will give me the name right and for example i just want to know the name and age even though the student hash contains surname and class also but i just want to know the name and age it will just give me the name and age when i use hm get then the key name and the field name i want to see so the field name i want to see right now is name and age so i just give name and age and it will give me the result of those field only so in this way you can use hashes in reddit hey guys welcome to the next video on registered role for beginners in this video we will learn how to use reddish lists so first of all what are reddish lists so redis lists are simply lists of strings sorted by their insertion order right so as i already said that a redis list is simply as list of string which are sorted by their inserter and order so a list would have a head on the top and tail on the bottom right now in this list we can insert any element from the top also and from the bottom also right so a element can be inserted to a list from the top or from the bottom now sometimes you see lists in a horizontal way right not in a vertical way but on a horizontal way right now if you see a list in a horizontal way your head will be on the left hand side right so your head will be on the left hand side and your tail will be on the right hand side right so redis have some command for example l push l push means the left push that means we want to push an element from the head right left and head are same in the case of list so this is how redis lists work it's simply a list with the insertion order now let's see how we can use lists in redis so i'm going to start a terminal i have already started my redis server so i'm going to just start the redis cli here and then press enter and i want to show you one more redis command which is a red cli command and i thought this would be interesting to you so i'm going to open our next terminal and here also i will just give a redis cli command and i will give an argument here so i will just give monitor command yeah okay so monitor so red is cli monitor and what this monitor is going to do is it's going to monitor all the commands which you are executing from your cli so for example let me give keys asterisk command here right and now you can see it's showing us that we have given this command keys asterix at this time this is time stamp at which this command is given okay so this is the timestamp at which this command is given and this is the command which we have given right so let's uh do flush all here and then press enter and you can see this flush all command is printed here so this is kind of a monitor right so this is going to monitor what are the command you are giving to your redis server okay so let's start with the redis lists so first of all uh how we can create our redis list so you can create this list by just uh giving this command you just need to give l push right so l push means left push that means we want to insert an element from the top right from the head okay and then we just need to give any uh key here for example key here i'm going to give num for numbers right and the first key i want to insert here will be for example one okay so first number right you can even insert multiple uh values here for this key for this list for example two three and four okay and then press enter and these four uh elements are inserted to the list in uh this order right now to see all the values in the list you use l range command so just use l range and then the name of the key for example number in our case and then you give the you know start and stop value for the range now redis lists index start from zero so for example starting value we can give zero here and let's say we want to just see uh the values in the list from 0 to 10 okay and then press enter and it shows us these values from 4 3 2 and 1 right so because we were pushing the values from the top we have pushed one first right so it will be pushed from the top one and then we have pushed two so the top value will become 2 now when we push 2 here and that's why it's our reverse order of numbers right so first we have push 1 and then we have pushed 2 at the top and then we have push three at the top and at the last we have push four at the top so that's why the number four is at the top of the list and number one is at the bottom of the list right now if we want to push number five on the top we can just do uh l push here so just do l push and the key name and then for example i will do number five here right and then press enter and once again i will do l range you can see 5 is at the top now if you want to remove the value from the top you give the l pop command okay so l pop command is going to remove the value from the left hand side left hand side means from the top okay so lpap pop is going to pop the value from the top and in this case our key is num and you can see it has popped five from the top that means our list is now up to four okay so let's give the same command i'll range zero to ten and now our list is one two three four because we have removed five from the top okay let me clear the terminal and then i'm going to show you one more command so let's start with the l range so we have right now four elements in the list now there is a r push command and r pop command also okay so when you do r push that means right push that means from the bottom you are pushing some numbers right so from the bottom for example i want to push the value five here okay first of all i just need to give the key a name and then from the bottom i want to push the number five and then press enter and i will do l range once again you can see uh this value goes at the bottom five goes at the bottom because we have r push we have used this command r push r push means from the bottom push from the bottom right from the right hand side of the list okay that's why this five goes at the bottom okay once again let's uh do this r push and let's push 6 at the bottom and once again do l range like you and you can see in the list you have the 6 at the bottom so in redis this list is sorted by the insertion order right if you push from the right it will go at the bottom and if you push from the left it will go at the top and for left push you use l push and for right push you use r push now as we have seen in the case of l pop l pop is going to pop the value from the top our pop is going to pop the value from the bottom so just give our pop here and then the key name and it's going to pop six from the list which is from the bottom right let's do a range command once again and now you can see six is gone from the list in a same way let's do our pop once again and now five is gone from the list so once again let's do l range and now we have a list of four numbers right let me clear the terminal here now let's give l range command once again and now there is a command called len okay this means left length and name of the key for example it's going to give you the length of the list in our case this length is equal to the number of element in the list okay so l ln is for knowing the length of the list now for example if you want to get some value at some index you just do l index command okay and then the name of the key and the index so index start from zero so zero one two three okay so for example we want to uh get number two here at index three so we will just say index three okay and it's going to give you the number one because index starts from zero so zero one two and three so index three is the value one here okay let's do index zero here and it's going to give us the value four now there is one more command called l set so you can use l set and the key name and then you can give the index at which you want to insert a value right so for example i want to insert the value at the very top so the very top is the index zero right and then the value itself so i want to insert the value at the zeroth index and the value is five and then when i just press enter it says ok and when i do l range you can see at the top at the 0th index this value 4 is replaced by value 5 right so the size of the list remains the same but the value is replaced at the zeroth index and now the new value is five here now let me push some more values here so i'll push you can do r push also wherever you want so uh l push num and for example i want to push number six here and then number seven and number eight here okay and let's do l range and you can see all the values are here right now sometimes you don't know the range or the length of your list so for example you just do 0 to 3 here and it's going to just give you 0 to 3 values right now if you don't know the length of your list you can give l range and then 0 to 1 so let's give this command and you can see it gives all the elements in the list so when you do l range the key name 0 to 1 is going to give you all the element in the list right this was giving the values from 0 to 10th index so if our list is of length 20 this is going to give you only 10 values 0 to 10 right but this is going to give you all the 20 values if you your list length is 20. now let me clear this uh terminal and let's go to the next command so now the next command is l push x and that means l push if the key exists okay so the left push if the key exists so we know that we have created a list with the key uh num right so let's do first of all this l range right and then we will give this l push x okay and this means that insert to this list for example uh this key exists already so insert to the list if this key already exists which you are providing here okay and this is the left push so we want to push one more value to the top so let's push 9 at the top and because this key num exists this command is successful right so let's do l range once again and this key is inserted at the top let's say we do l push x for a key which doesn't exist for example let's say we have a key for subjects so let's say the key is sub here and we want to push some keys for example once again one two three four five okay but this key doesn't exist right and then when we press enter it returns zero because this command is not successful because this command checks whether this key exists or not and if this key exists then it's it's pushing these values on the top right but because this key doesn't exist this command fails and there is no list will be created now the next command i want to show here is l insert before or after so you just do l insert here and then the key name for example num here and you have the option before or after so before after are the keyword for example i use the keyword before here so i'm going to just write before and the pivot name pivot name is this element okay so i want to insert the value before two for example okay so let me write two here and the value is this time for example 55 okay so l insert the key name and you can use this keyword before or after here and then the pivot and then the value and once again i do press enter and you can see now the list size is nine and when i do l range zero to minus one you can see this 55 is inserted before 2 right before 2 is the index from the left right because we have done the l insert okay so before 2 is inserted 55 right you can do after also so for example i want to insert after three okay let's insert after four so after five we want to insert the value four you can see uh after five there is three right so after five there is a value three and we want to insert 4 value 4 here and now our list is of size 10 and you can see now after 5 comes 4 okay and above 3 comes 4 okay so this l insert is used to insert the value before or after some value so these are some of the frequently used command with redis list hey guys welcome to the next video on register tool for beginners and in this video we will learn what are sets and how to use sets in redis so first of all what are sets so redis sets are an unordered collection of unique strings right so by unique i mean whatever values set contains they are all unique so no repetition is allowed here okay and they are unordered uh you know list so they are not ordered and they are unique so let's uh see how we can use sets in uh practice so i have already started my redis server and on my cli first of all let me just clear all the keys which i already have so i will just say keys and i have only one key which i'm going to flush all and now let's create a set okay so to create a set you can just use s for set and then add okay so s add and then give any a name any name to a key so for example my set is a key here and then you can add members here one or many okay so for example i want to have a set of numbers so let me say this is my first set so i will name it set one my set one and let's say i add here one two three four for example okay and i just press enter which is going to create a set and add these four numbers now here i have provided four different numbers right so they are all unique and to view uh the members of a set you just do s members okay so s members and the key name my key name is my set one and you can view all the members of the set right now for example in this set i want to add one more value so i just say s add and then my set 1 and i want to add 3 here right and i already know that here i already have 3 in my set and i want to you know add one more 3 to the set which is not allowed right so it's going to give me 0 in return that means the 3 is not added to the set because 3 is already there okay we can just prove with this by using s members and then the set name so you can see set is not changed the values in the set remain same because uh they must be unique okay on the other hand when i do s set 1 5 which is a new member in the set i can just verify this so you can see this time it's added and you can verify it with this value if you get 1 here that means the number is added to the set and if you get 0 here that means number is not added to the set right now for example if i want to know how many values are there in the set so how many members are there in the set so i can just do s card and then the name of the set my set one okay my set one and i can see there are five members in the set okay now uh let me create one more set so i have my set one let me clear the terminal first and now i will create a set two so set add or s add my set 2 here okay and let me add some more numbers here this time i will add for example 5 8 7 6 4 and 9 in this set okay and then press enter and i can view this set by s members here and the key name as set 2 and you can see these are the member of second set right now if you have multiple sets you can subtract one set from other using s diff okay so you can use s diff and this as tiff command returns the members of the set resulting from the difference between the first set and all other successive sets so this is the difference so i will just add my set one as my first set and then i will just give the second set as my set 2 okay and then press enter and it's going to give me the difference between these two set let me show you the values of the set 1 also so we can verify so you can see in the set one we have value 1 to 5 and then in the set 2 we have values 4 5 6 7 eight nine so from s diff it's going to give you the values which are there in the set one but they are not there in the set two okay so these values these three values are not there in the set 2 right but 4 and 5 are there in the set 2 so they are discarded so s diff is going to give you the difference that means whatever values are there in set one and not there in set two now if you want to uh know the s diff and save it into the third set for example then you can do that also so you can just write s diff and then store and then the destination so i'm going to save the difference in a new set so for example my set 3 right and then the difference between these two sets so my set one and my set two so these three values will be saved in the new set which is my set three okay press enter and then you can see by s members my set 3 you can see all these values are saved in the set 3 which is the difference between my set 1 and my set 2. now you can do the union also union of the set so for example i want to do union i can just write s union and the set name so my set 1 and my set two okay so i wanted to do the union of set one and set two and then press enter and it's going to give you ah these values so union means whatever values which are there in the first set also and second set also the combination of that unique value right so all the unique value which are there in the first set and second set so uh these value were in the first set and these value which are unique in the second set so this is the combination of s union okay and same you can do for storing so you can just write s union store here so just write s tune in store and i'm going to store it in set four for example so my set four the union of set 1 and set 2 right press enter and union is saved i can do s member my set 4 and you can see now it has 1 to 9 which is the union of set one and set two okay so in order to store use s union store now if i want to remove some members from a set i can do s ram for removing a value from a set or member from a set and for for example i want to remove uh some member from set 4 and i want to remove for example 9 okay and then press enter it's going to remove 9 from the set 4 and i can do s members 1 once again and you can see 9 is not there anymore ok you can remove multiple values for example 8 7 6 and so on and these will be removed so now i have only up to five values because 876 are removed now for example i want to remove a random value from the set so i don't want to remove a specific value but i want to remove a random value so for example i can do s pop here to remove a random value from a set so my set 4 for example and for example i want to remove only one value from here right so i can just press enter it says three so it has removed three from this set okay so let's do s member s4 and you can see three is no more there in the set four okay so it has picked a random value from this set and removed it okay i can give for example s pop my set for i for example i want to remove two random values so i can just do that and now it has removed four and one from the set and now my set is only of two values or two members two and five okay so as pop is to remove the random value from the set now let me clear this terminal and let me just print uh the values of set one and set two once again so set one has one to five and set two have four to nine now there is a command called s inter and s in the command gets the element of a set after the intersection of all the specified set okay so it's going to give you the intersection of all this specified set so just to s enter for example my set 1 and my set 2 and then press enter and it's going to give you the intersection intersection means these values are there in both the set so these are the intersection of both the sets so four and five are there in set one and set two so it's going to give you those value only and as we have seen in the case of sdf and as union you can do uh for example as inter store so you can store the intersection into a new set so as inter store and for example i want to save this in set 5 and then press enter and then i can just see the content of set 5 which is 4 and 5 which is correct now the last command i want to show here is s move command so s move and this command is used to uh you know transfer or move value or member from one set to the another set right so for example i want to move one from my set one to my set two okay so i want to move this value to the set two so what i can do so first of all the source source is my set 1 and i want to move it to the destination which is my set 2 and i want to transfer the value 1 member 1 right so press enter it says 1 that means the operation is successful so let me see the s member or members of set 2 and now you can see one is moved to the set two earlier one was not there in the set two but now we have one in the set two and let's see the contents of set one also so you can see one is no longer there in set one because it's moved from set one to set two so these are some of the most frequently used command in redis sets hey guys welcome to the next video on redis tutorial for beginners and in this video we will learn how we can use sorted sets in red is so first of all what are sorted sets so redis sorted sets are similar to the redis sets with a unique feature that their members can be sorted now every member of a sorted set is associated with a score and based on the score their members can be sorted right so you can see in this diagram uh the redis key will remain the same as other patterns but here you can see score here so you can define a score for example i will define a score 100 and then the value associated with the score so the value associated with the score is value 2 and this is our member of a set and there is a new feature in the sorted set which is this score right so you can define a score and with the score you can define a member or a value associated with it and then on the basis of that we can sort the members of our set right so let's see in practical how it works so i'm going to open my redis cli so the first command we are going to learn here is that add and the set ad is used to create a set if it doesn't exist or add a member to this set if it already exists right so every command in sorted set will start with this character z and then whatever its function is the function name for example right so that add and then the key name for example my set one and the score so score is one and the value associated with it so spelling for example you want to associate it with the score one is a right in a similar way we can define multiple score members here so score and the value associated with it two and b for example three is the third score and the value we want to associate with it is c and then they need not be in order so score can be five now and the value can be d here right or any other value right and then press enter and you can see four members are inserted in the sorted set now to get the members of a sorted set you use z and then range command okay as we have seen in the sets also and then what is your key name for example my set 1 and then starting value and the end value as we have seen in the case of sets also so in the case of sets we have seen that 0 and 1 are going to give all the values in the set right so press enter and you can see here all the values are printed here now you can see here the values are printed not the you know scores associated with them right so for example i once again write z add and then set one my set one and then for example i can just give score hundred here and then the value is e here right and then press enter and once again i will just give that range my set one and then you can see all the values here or all the members here but these are not the scores these are just uh order ordered number now if you want to know how many number of members are there in our set we can use z card here okay and the key name for example my set one and then press enter and i can see that there are five members in my sorted set right now in order to get the count of members in the sorted set with the scores within the given range we use z count okay and then the key name so my set 1 and the minimum and the maximum score value here so for example i want to get one two three here okay and then press enter and then it's going to count the number of values between this range right so for example i will just write one two five here and values are 4 because in between score 1 and score 5 there are 4 values including those scores now i can just write 1 to 50 here or 55 and still it's going to give us four values number of values because the last score we have associated here is hundred so when we write here one zero one here and then press enter then only it's going to give us 5 values and let's say we can give 99 here still it gives the 4 value so the z count is going to take the score values and then depending upon the score values is going to give you the number of values ah in between these scores now let me clear the terminal and to remove any member from a set you use z rem and then the key name my set and the member so the member here will be the member value so not the score but the member so for example i want to remove the member b so i can just give the value of member of b and then press enter and once again i will just give this sled range command and now it's giving the same answer because i haven't given the right key name so i must give uh zm my set one here right and then it gives integer 1 that means the command is successful and once again the range and now you can see the value is removed from here now if you want to determine the index of a member in a sorted set you use zed rank here so just give rosette rank command and then my set 1 and the member name so for example d here and then press enter and it's going to give you the index of this d right so the index starts from 0 so 0 1 2 right for example i want to see the index of e here that's going to give me the index three and for example for member a the index is zero now there is a z rev rank command also so you can just write z rev rank here and this is the reverse rank right so uh the rank will be sorted according to the score so highest score is the zeroth index right and then the lowest score is the maximum index okay so for example my set 1 and then the member name for example e is the rank 0 here right because index of e is the highest rank rank is 100 for e right and it's the biggest rank that means the index for it will be zero because we are printing the reverse rank here okay for example you want to see the index of a it will be 3 because it's in reverse order now the last command i'm going to show you here is z score command okay and then i can give the key name and the member name so for example i will give the member a and then press enter is going to give me the score value of this member right so for example i want to see the score of member e and press enter it's going to give me 100 because score associated with e was 100 right and for example this value doesn't exist in our sorted set for example i just added or given the random value here and then press enter it's going to return the nil value which doesn't exist okay now let me clear the terminal let me show one more command to you so for example i just want to print the range of my set 1 0 to 1 and this is a c d e and i want to add one more value here so i will just add z add and i want to add this value to my set 1 and add the score 1 and i want to add for example aaa five times and then press enter and and it returns me one that means the value for this score is now set to aaa instead of a for example right so let me do a z range once again and you can see here the new uh value is added here which is aaa right and if you remember the score of a was also one right so let me give the same command now which is z score and this time i want to just see the score of a which is 1 and then i want to see the score of aaa which is also 1. so it's totally fine if you give a same score to multiple values right so for example i want to give one more value to this score for example bbb and then press enter and once again the range i want to see this value is added and then i want to see see the score of b b b b so b b b b and you can see the score is still one okay so it's totally fine to have one score for multiple values now what happens to the rank here so for example z rank for my set uh 1 so my set 1 and then b bbb and the index here is 2. so this is how a sorted set works now there is one more command which is z range by score and then you can give the key name and then the score value minimum score for example 1 and then the maximum score for example i am going to give here 2 right and then press enter and i get here three values because there are three values associated with the score one and i think there was no score for two right so no value was associated with two so let's see one two four for example and now i can see these values and c also so if you want to get values by the range of scores then you can use that range by score okay so this is how you can use sorted sets in redis there are some more commands which are associated with sorted set you can just search for them and then practice them but these are some of the most frequently used command with the sorted sets hey guys welcome to the next video on registered role for beginners in this video we will learn how to use redis publish subscribe so redis publish subscribe implements the messaging system where sender is called the publisher and the receiver is called the subscriber right now in redis a client can subscribe to any number of channels so let me give you an example and let me show you how you can use radish publish subscribe so you can see i have opened three redis cli terminals in three different terminals right so this is ready cli first terminal second terminal and third terminal now first of all i am going to subscribe to a channel so i can just write subscribe here and then it takes a channel name right and i can give any uh channel name for example redis or any other channel name so for example my channel and i can subscribe to this channel okay so the name depends upon you right so for example i subscribe to the channel called redis and i just uh press enter so now this is or this terminal is subscribed to this channel right now from the second cli when i publish some message to this channel so let me publish something so to publish a message you can just use a keyword publish as we have seen in subscribe so to subscribe you use a keyword subscribe and then a channel name for publishing you use a keyword publish and the channel name on which you want to publish right so i want to publish on the redis channel and then your message for example hi right and i press enter and you can see on the subscriber uh it gets the same message so first of all it will just show you what kind of uh message is coming so it's a message and then on what channel it's coming and what is the message itself right now if you want to send a big message you can just enclose your message inside these double quotes so for example hello world here and then press enter then it's received here okay now it's possible to subscribe to uh any number of channels right so you can see i am subscribed to uh radish from one channel now i can just copy the same command in the next terminal here and then i'm subscribed to this channel so now there are two subscriber subscribe to one redis channel so this is the channel and i'm subscribed to that channel right so there are two subscriber for the channel name redis and when i just send the hello world again for example now it is received by both the subscribers right so you can see hello world is received here and hello world is received here okay so this is how publish subscribe method work in redis now when you are doing uh or using redis in the programming then it's really important or it's really useful so for example recently i created some kind of api where i wanted to listen for any event for save in redis so whatever is saved whenever some command comes and something is saved in redis i wanted to subscribe to that save event right and i have used this publish subscribe uh method from redis in that api and it worked fine so it's kind of listening to the trigger for examples for saving the data or some delete deletion of data you can subscribe and then you will get this message on the next side which is subscribing and based on that subscription you can trigger some event okay now let me just close this cli and once again open the cli once again and let me clear the terminal once again and there is a command called p subscribe so you can do p subscribe and then it takes the pattern so for example i can just write r and then s tricks r asterix here means any uh publisher when it's published on the channel name which start with r it will receive that message so for example uh i am publishing this publish redis because this pattern matches this pattern so asterix is some kind of a wild card here so uh it's whatever so for example i'm subscribing to our s tricks and i'm just publishing the same message again and you can see it's receiving that message because it's just matching the pattern whatever publisher publishes on the pattern which matches r s tricks for example r and whatever comes after r this is matching that pattern so it will receive that message for example i can just do something like this so i publish on r x for example this also matches this pattern right because we just want to match the first letter of that channel and whatever comes after that it will be matched automatically so this is kind of a pattern matching in radish so p subscribe is used to pattern matching and whatever publisher channel matches that pattern it will be receiving that message so you can see this is receiving that message but this cli is not receiving so because we have subscribed to a concrete channel layer which is not a pattern so whenever we uh just give the redis channel itself then only it will receive the message and this automatically receives the message because here we are just matching the pattern okay so in this way you can use publish subscribe in redis i hope you enjoyed this video
