With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - Python $20 for beginners in the last
00:05 - video we have seen how to use trading
00:07 - module to create threads in Python now
00:11 - in this video also we are going to see
00:12 - how to create threads using threading
00:15 - module but we are going to see in this
00:17 - video how to subclass from the thread
00:20 - class which is available inside the
00:23 - threading module and then create threads
00:26 - out of that class instance so to start
00:30 - with I have the same method which is
00:33 - print
00:34 - Apoc which I want to call inside the
00:37 - thread so now here after this method
00:42 - what I want to do is I want to create a
00:44 - class so I'm going to create a class and
00:46 - the name of the class I'm going to give
00:49 - the name as my thread for example and
00:54 - one thing we need to do here is we need
00:57 - to subclass from the thread a class from
01:01 - the threading module so we are going to
01:04 - just call first of all threading dot
01:08 - thread so we are subclassing from the
01:11 - threaded loss now inside this my class
01:15 - first of all we are going to define the
01:17 - init method so let's define this init
01:21 - method and in this init method we are
01:24 - going to pass two arguments same as this
01:27 - print
01:28 - Apoc function so first argument will be
01:31 - the name of the thread and the second
01:33 - argument will be the delay so let's
01:36 - provide these two arguments first is the
01:39 - name and second is the delay now after
01:44 - this inside this init method we need to
01:48 - call the parents init method which is
01:51 - threading dot red dot in it so we are
01:54 - going to just call threading dot thread
01:59 - dot underscore underscore init method
02:02 - which is going to call the parent init
02:06 - method which is treading dot Treader
02:09 - right now once you have done that we can
02:12 - just simply
02:13 - you define some local member variable
02:17 - for the name so first of all self dot
02:19 - name is equal to name and self dot delay
02:26 - is equal to delay so now once we have
02:30 - our member variables what we need to do
02:32 - next is we need to override a method
02:36 - called run which is available inside the
02:39 - thread class in a threading module so
02:43 - I'm going to just define run method and
02:46 - we are going to overwrite this so first
02:49 - of all what does this run method do so
02:53 - the undrawn method is the entry point
02:55 - for the thread now in the previous video
02:58 - if you remember we have called the start
03:01 - method on the thread class right so the
03:05 - start method starts the thread by
03:07 - calling this run method so under the
03:10 - hood start method calls this run method
03:13 - so if we override this run method that
03:17 - means when we call the start method from
03:21 - the thread class this run method is
03:24 - going to be called so now we can do some
03:27 - logging here so what I'm going to do is
03:28 - I'm going to print the first of all
03:31 - start thread and then I'm going to print
03:37 - end thread now between the start thread
03:42 - and and thread logging I'm going to call
03:44 - the print a pork function and this print
03:49 - epoch function is going to take two
03:51 - arguments which is name so I'm going to
03:54 - just pass the self dot name which we
03:58 - have assigned to the member variable and
04:01 - second is the self dot delay so once
04:05 - again when we call the start method on
04:09 - the instance of this my thread class
04:12 - this run method is going to be called by
04:15 - the start method automatically because
04:19 - we are sub classing from the threading
04:21 - dot thread class now once we have our
04:25 - run method
04:27 - we have created the init method we can
04:30 - create some instances of my class so I'm
04:33 - going to create some instances for
04:35 - example t1 is equal to my thread and
04:40 - then we are going to pass those two
04:42 - argument first is the name so let's say
04:44 - the name is thread 1 and the delay we
04:49 - want to provide here is let's say 1
04:51 - second because this delay is going to go
04:54 - to the print a pork method which is this
04:57 - one right once again we are going to
05:00 - create the second instance let's say t2
05:03 - and once again we are going to call the
05:06 - my thread class which we have subclassed
05:08 - from the thread class and once again we
05:11 - are going to give these to augment first
05:15 - is the thread so this time I'm going to
05:17 - name it as thread 2 and the delay I'm
05:20 - going to give here is 2 second let's say
05:23 - and now after the instance is created we
05:26 - can call the start method and the join
05:29 - method on these two instances so let me
05:32 - just call t1 dot start and then we are
05:37 - going to call that t2 dot start and once
05:42 - we have the start which is going to
05:43 - start the threads we are going to just
05:46 - call the join method and by now you
05:50 - already know what this join method do
05:53 - which is to wait for the thread to be
05:56 - completed so I'm going to just call the
06:00 - join method on t2 also and let's run the
06:04 - script and let's see what happens so I'm
06:06 - going to run the script and you can see
06:08 - first of all start thread has been
06:11 - called which is from the logging of this
06:15 - print method and then thread 1 is
06:18 - printed and the Epoque time is printed
06:20 - and then thread 2 is printed and the
06:23 - epoch time is printed because we have
06:25 - given the 1 second delay for the thread
06:28 - 1 so thread one will be iterated faster
06:31 - than thread 2 because we have provided
06:34 - the delay of 2 seconds 4 3 2 and 1
06:36 - second for thread 1 as soon as the
06:40 - thread
06:41 - we can see this print statement which
06:43 - isn't red and after the end of the
06:46 - thread - we can see this print statement
06:49 - which is and shredded - we can also
06:52 - print here so let's print some more
06:55 - things here so we can print the name of
06:57 - the thread so I'm going to just write
07:00 - self dot name and we are going to do the
07:06 - same for the end thread also so I'm
07:09 - going to just print here also self dot
07:13 - name so we will know which thread is
07:16 - starting and which thread is ending once
07:20 - again I'm going to run the program and
07:22 - now you can see start thread thread 1 so
07:25 - thread 1 is started and then thread 2 is
07:27 - started and you can see first of all
07:29 - thread 1 is ended and at last thread 2
07:34 - is ended so this is how you can subclass
07:37 - from the thread class which is available
07:39 - inside the threading module now inside
07:43 - the threading module there are some
07:45 - special methods which we are going to
07:47 - see now so the first method is so let me
07:51 - just go after this start of the threads
07:56 - so here what I'm going to do is first of
07:59 - all I'm going to use the print function
08:02 - and inside this print function I'm going
08:04 - to call the threading module and there
08:07 - are some special methods for example
08:10 - first of all we are going to see what is
08:12 - the active count of threads so what are
08:16 - the number of threads which are there
08:18 - inside this program this is going to
08:21 - print the number of threads now the
08:24 - second method which I'm going to show
08:26 - you is the threading first of all let me
08:29 - just call the threading dot we are going
08:33 - to call the current thread so this is
08:36 - going to print the current thread which
08:38 - is active right now and third match
08:42 - third which I want to show here is
08:44 - threading dot enumerate and this
08:49 - enumerate method is going to enumerate
08:51 - the number of threads which are
08:54 - give so let's run this program once
08:57 - again and let's see what happens so I'm
08:59 - going to just run this program and first
09:03 - of all you will see three is printed
09:05 - using this print statement which is
09:08 - threading dot active count so active
09:12 - count is going to give you the number of
09:14 - threads and you already know that we
09:17 - have created two threads and one main
09:20 - thread is already available so total
09:22 - number of threads are three here which
09:25 - is printed now the current thread here
09:28 - this print statement prints this output
09:32 - which is the main thread so right now at
09:34 - the time of this print statement main
09:38 - thread is active now this enumerate
09:41 - method as I said is going to enumerate
09:44 - over all the threads which are available
09:47 - so main thread is available and then we
09:50 - have created thread one which is this
09:52 - one this is the name of the thread one
09:54 - and then when I scroll here you can see
09:58 - thread 2 is available
10:00 - so total three threads are available
10:03 - main thread thread 1 and thread - so
10:06 - these method you can use to just find
10:09 - out how many threads are there what is
10:12 - the current thread thread and you can
10:14 - also a numerate over all the threads
10:16 - there is one more method so I am going
10:20 - to call this method here and I'm going
10:22 - to print it inside the print function
10:26 - and this time I'm going to use the
10:28 - instances so T 1 dot and there is a
10:33 - method of available here which is get
10:35 - name which comes from the thread class
10:39 - and because we are sub classing from the
10:41 - thread class this Mar and because we are
10:45 - sub classing from the thread class this
10:47 - get name is available inside the my
10:50 - thread class also and same we are going
10:55 - to do here also so print and then T 2
10:58 - dot get name so this is going to give
11:02 - you the name of the thread by default so
11:06 - I'm going to just run this
11:08 - a script once again and you can see this
11:11 - is going to print thread one and this is
11:14 - going to print thread two now you might
11:16 - wonder why this name is thread one isn't
11:19 - tried to because this get name method is
11:23 - going to give the value of self dot name
11:27 - which we have assigned using this name
11:30 - argument so this name is overwritten in
11:34 - the subclass which is my thread class
11:36 - and that's why it's giving us thread 1
11:39 - and thread 2 name which we have provided
11:42 - if we change this name let's say T 1 and
11:46 - T 2 and once again we run the code you
11:50 - can see the name also changes to T 1 and
11:53 - T 2 so this is how you can subclass from
11:57 - the thread class which is available
11:59 - inside the training module and we have
12:02 - also seen some of the method which are
12:04 - available inside the threading module
12:07 - which are useful to us so that's it for
12:10 - this video I will see you in the next
12:12 - video

Cleaned transcript:

hey guys welcome to the next video on Python $20 for beginners in the last video we have seen how to use trading module to create threads in Python now in this video also we are going to see how to create threads using threading module but we are going to see in this video how to subclass from the thread class which is available inside the threading module and then create threads out of that class instance so to start with I have the same method which is print Apoc which I want to call inside the thread so now here after this method what I want to do is I want to create a class so I'm going to create a class and the name of the class I'm going to give the name as my thread for example and one thing we need to do here is we need to subclass from the thread a class from the threading module so we are going to just call first of all threading dot thread so we are subclassing from the threaded loss now inside this my class first of all we are going to define the init method so let's define this init method and in this init method we are going to pass two arguments same as this print Apoc function so first argument will be the name of the thread and the second argument will be the delay so let's provide these two arguments first is the name and second is the delay now after this inside this init method we need to call the parents init method which is threading dot red dot in it so we are going to just call threading dot thread dot underscore underscore init method which is going to call the parent init method which is treading dot Treader right now once you have done that we can just simply you define some local member variable for the name so first of all self dot name is equal to name and self dot delay is equal to delay so now once we have our member variables what we need to do next is we need to override a method called run which is available inside the thread class in a threading module so I'm going to just define run method and we are going to overwrite this so first of all what does this run method do so the undrawn method is the entry point for the thread now in the previous video if you remember we have called the start method on the thread class right so the start method starts the thread by calling this run method so under the hood start method calls this run method so if we override this run method that means when we call the start method from the thread class this run method is going to be called so now we can do some logging here so what I'm going to do is I'm going to print the first of all start thread and then I'm going to print end thread now between the start thread and and thread logging I'm going to call the print a pork function and this print epoch function is going to take two arguments which is name so I'm going to just pass the self dot name which we have assigned to the member variable and second is the self dot delay so once again when we call the start method on the instance of this my thread class this run method is going to be called by the start method automatically because we are sub classing from the threading dot thread class now once we have our run method we have created the init method we can create some instances of my class so I'm going to create some instances for example t1 is equal to my thread and then we are going to pass those two argument first is the name so let's say the name is thread 1 and the delay we want to provide here is let's say 1 second because this delay is going to go to the print a pork method which is this one right once again we are going to create the second instance let's say t2 and once again we are going to call the my thread class which we have subclassed from the thread class and once again we are going to give these to augment first is the thread so this time I'm going to name it as thread 2 and the delay I'm going to give here is 2 second let's say and now after the instance is created we can call the start method and the join method on these two instances so let me just call t1 dot start and then we are going to call that t2 dot start and once we have the start which is going to start the threads we are going to just call the join method and by now you already know what this join method do which is to wait for the thread to be completed so I'm going to just call the join method on t2 also and let's run the script and let's see what happens so I'm going to run the script and you can see first of all start thread has been called which is from the logging of this print method and then thread 1 is printed and the Epoque time is printed and then thread 2 is printed and the epoch time is printed because we have given the 1 second delay for the thread 1 so thread one will be iterated faster than thread 2 because we have provided the delay of 2 seconds 4 3 2 and 1 second for thread 1 as soon as the thread we can see this print statement which isn't red and after the end of the thread we can see this print statement which is and shredded we can also print here so let's print some more things here so we can print the name of the thread so I'm going to just write self dot name and we are going to do the same for the end thread also so I'm going to just print here also self dot name so we will know which thread is starting and which thread is ending once again I'm going to run the program and now you can see start thread thread 1 so thread 1 is started and then thread 2 is started and you can see first of all thread 1 is ended and at last thread 2 is ended so this is how you can subclass from the thread class which is available inside the threading module now inside the threading module there are some special methods which we are going to see now so the first method is so let me just go after this start of the threads so here what I'm going to do is first of all I'm going to use the print function and inside this print function I'm going to call the threading module and there are some special methods for example first of all we are going to see what is the active count of threads so what are the number of threads which are there inside this program this is going to print the number of threads now the second method which I'm going to show you is the threading first of all let me just call the threading dot we are going to call the current thread so this is going to print the current thread which is active right now and third match third which I want to show here is threading dot enumerate and this enumerate method is going to enumerate the number of threads which are give so let's run this program once again and let's see what happens so I'm going to just run this program and first of all you will see three is printed using this print statement which is threading dot active count so active count is going to give you the number of threads and you already know that we have created two threads and one main thread is already available so total number of threads are three here which is printed now the current thread here this print statement prints this output which is the main thread so right now at the time of this print statement main thread is active now this enumerate method as I said is going to enumerate over all the threads which are available so main thread is available and then we have created thread one which is this one this is the name of the thread one and then when I scroll here you can see thread 2 is available so total three threads are available main thread thread 1 and thread so these method you can use to just find out how many threads are there what is the current thread thread and you can also a numerate over all the threads there is one more method so I am going to call this method here and I'm going to print it inside the print function and this time I'm going to use the instances so T 1 dot and there is a method of available here which is get name which comes from the thread class and because we are sub classing from the thread class this Mar and because we are sub classing from the thread class this get name is available inside the my thread class also and same we are going to do here also so print and then T 2 dot get name so this is going to give you the name of the thread by default so I'm going to just run this a script once again and you can see this is going to print thread one and this is going to print thread two now you might wonder why this name is thread one isn't tried to because this get name method is going to give the value of self dot name which we have assigned using this name argument so this name is overwritten in the subclass which is my thread class and that's why it's giving us thread 1 and thread 2 name which we have provided if we change this name let's say T 1 and T 2 and once again we run the code you can see the name also changes to T 1 and T 2 so this is how you can subclass from the thread class which is available inside the training module and we have also seen some of the method which are available inside the threading module which are useful to us so that's it for this video I will see you in the next video
