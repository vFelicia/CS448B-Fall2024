With timestamps:

00:00 - this is john from programming knowledge
00:02 - and in this video guys i'm going to show
00:04 - you and teach you how to use
00:06 - um if statements in c programming
00:09 - language
00:10 - we're going to discuss about the
00:13 - logical operators and of course the
00:15 - assignment operators
00:17 - so previously we have discussed this
00:20 - relational operators
00:22 - so we have like six relational operators
00:26 - the equal
00:27 - or checking if a value is equal to some
00:30 - value also
00:31 - and then not equal we have also greater
00:34 - than
00:35 - less than and then we also have greater
00:38 - than or equal to
00:40 - and we also have less than or equal to
00:43 - some value
00:44 - so this is quite useful guys if you are
00:46 - using the
00:47 - control statement in c so for example
00:51 - if statement and then you want to check
00:55 - if a certain value is
00:58 - equal or not equal to some value so for
01:01 - example
01:02 - if a variable x
01:05 - is equal equal to 2 so basically we're
01:08 - just checking
01:09 - if this particular variable or the value
01:12 - of this
01:13 - x is equal to two or
01:16 - we can reverse that we can check if this
01:18 - particular
01:20 - variable is not equal to two and of
01:22 - course you can use other
01:25 - operation or operators like greater than
01:29 - um less than or
01:32 - we could also double check for greater
01:35 - than or equal to or less than or equal
01:37 - to so basically guys
01:38 - this operators is like just checking
01:42 - the relationship or if the
01:45 - certain value is greater than another
01:48 - value
01:48 - or it is equal to another value okay
01:52 - now let's move on to the next one which
01:54 - is the assignment operators
01:56 - so basically you guys there are a lot of
01:59 - assignment operators
02:01 - in c programming language
02:04 - okay so the first one will be the equal
02:08 - sign okay this is one of the most
02:11 - common assignment operators in
02:14 - c programming so for example you want to
02:17 - assign
02:18 - so as i've said guys this is for
02:20 - assignment operators
02:24 - assignment operators okay so basically
02:27 - this is useful if you want to
02:29 - set a value to a variable okay so for
02:32 - example
02:33 - x and then if you want to make this like
02:36 - five or the value of x is equal to five
02:38 - you can do that
02:39 - by using this particular assignment
02:41 - operator equal
02:43 - symbol okay that's easy and the second
02:46 - one
02:46 - is um plus equal
02:50 - so we have this also plus equal and then
02:54 - um it basically means guys that it
02:57 - increments the value
02:58 - and then assign it to the
03:02 - um the variable okay
03:05 - so for example you want to make this
03:07 - like x
03:09 - and then plus equal
03:12 - to two so basically
03:15 - let's try this um we can remove this
03:18 - code right here
03:21 - we can use the increment
03:25 - then assign so basically
03:29 - like we set a value for
03:32 - x we set it to 5 and then we can
03:36 - have it like x plus and then equals
03:40 - 2 3 and then we can
03:44 - use the printf function and we can
03:47 - display
03:48 - the result further so for example
03:51 - um the value
03:55 - is the uh
04:00 - format specifier and then of course
04:03 - the comma and then the x
04:07 - variable okay and then semicolon at the
04:09 - end of this line
04:11 - save this and then compile and build or
04:14 - build and run
04:15 - our application so basically
04:19 - as you can see here the value
04:22 - is eight so this is the doing
04:26 - of the plus equals to 3.
04:30 - so big basically what it means that it
04:32 - add
04:33 - 3 to the variable x
04:36 - and then of course it the result of that
04:39 - is assigned to variable x also okay
04:42 - so this is basically uh just
04:44 - incrementing the value of our
04:46 - variable and of course we also have the
04:49 - x
04:50 - minus equals to
04:53 - so for example one okay so basically it
04:57 - is the complete opposite of
04:58 - this one because this is for
05:00 - incrementing
05:02 - and this is for decrement okay
05:06 - and of course we do have other operators
05:09 - for this particular
05:11 - topic which is the assignment operators
05:15 - we also have x for example times or
05:18 - multiply
05:19 - equal to 2 you can also do that
05:23 - and basically the division also
05:27 - okay you can do also the modular part
05:34 - modulo symbol and then equal
05:37 - and then so for example two and there
05:40 - are others so for example
05:43 - um percent
05:47 - for i mean x and then and
05:52 - um and symbol and equal
05:56 - symbol and then of course the value that
05:59 - you want to
06:00 - assign so this is basically a bit bit
06:02 - wise
06:03 - and assign assignment
06:06 - so we're not going to use that for now
06:09 - so basically our our
06:10 - currently concern is this
06:14 - operations we can have the increment
06:17 - uh the first one is equal and then of
06:19 - course the increment the decrement and
06:20 - then multiply
06:21 - multiplication then assign and we also
06:24 - have
06:24 - divide and assign we also have modulu
06:28 - and assign so that's basically how the
06:31 - assignment operators work so
06:34 - the last thing that we want to discuss
06:38 - here
06:38 - is all about the logical operators so
06:42 - logical operators
06:43 - provides three mechanism
06:47 - that we can test more than one condition
06:49 - to make
06:50 - a particular decision so these are
06:53 - the um end and symbol
06:57 - so meaning it is a logical
07:01 - end okay logical and
07:05 - uh let me show you that later on
07:09 - what uh what this means logical end
07:12 - and of course we also have this bar bar
07:16 - and this is a logical operator or
07:21 - logical or
07:23 - and then of course we have the negation
07:26 - or
07:26 - not symbol okay
07:30 - so logical or and then this
07:33 - is in and of course logical
07:38 - not okay so let me show you how this
07:40 - works
07:41 - this three logical operators now let's
07:44 - try to use the logical operators so for
07:47 - example the first one
07:49 - the logical and operator so we have here
07:52 - variable x
07:53 - which is set to eight or the value is
07:55 - eight
07:56 - and then we can check if this particular
07:58 - value is or the 40
08:00 - particular val variable x is
08:04 - um greater than 5 so we can do that by
08:07 - using the if statement
08:08 - and then x is it
08:12 - less than or greater than 5
08:15 - so if x is greater than 5
08:18 - then we can display
08:22 - something in our in our screen or output
08:25 - something so
08:26 - we can do print f and of course
08:29 - the value is greater than
08:33 - greater than five okay so we could
08:37 - uh build and run this and see the output
08:39 - of our program
08:40 - and of course it's gonna display
08:44 - the value is greater than five okay
08:47 - so what if the value is four
08:51 - okay so obviously
08:54 - there will be no output because
08:58 - uh this the condition right here uh
09:01 - turns to be false because the actual
09:03 - value of
09:04 - x is now uh for
09:08 - so no statement has been executed for
09:10 - this particular program
09:11 - now we can use logical operators
09:16 - and in this particular scenario so for
09:18 - example you want to check
09:19 - that the value of x should be
09:24 - um greater than 5 but less than
09:29 - 10 okay so we could check if
09:32 - the variable x is greater than 5 but
09:35 - less than
09:36 - 10 and we can do that by
09:39 - using the logical and operator
09:43 - so double ampersand and x
09:46 - and then less than 10 okay we could do
09:49 - that
09:50 - and of course um
09:53 - if we try to
09:57 - run this
10:02 - still there is no output because
10:05 - the value of x is four
10:08 - so we can try six here build and run our
10:11 - application
10:15 - so the value is greater than 5
10:19 - and we should add here that the value
10:22 - is less than
10:26 - 10 okay build and run our application
10:30 - so the value is greater than 5 and it is
10:34 - less than
10:35 - 10. now what if it is
10:38 - 11 so obviously it's going to
10:43 - display nothing in our screen because
10:46 - the conditions
10:47 - of this particular statements is not met
10:50 - okay so that's how you can use the
10:52 - logical and operator
10:54 - and of course when we say and
11:01 - basically it means that it should be the
11:03 - both of this statement or
11:05 - both of this condition should be true in
11:08 - order for this statement to
11:10 - be executed okay and you can also use
11:14 - the logical operator or in this
11:17 - particular
11:17 - scenario so it doesn't matter if the
11:23 - um x is greater than 5
11:27 - or x is less than 10
11:30 - it should you know execute the statement
11:33 - that we have here
11:34 - okay so for example you run this
11:40 - okay so we have the value is greater
11:42 - than 5 and less than 10
11:45 - and we can try
11:48 - like 20 or maybe
11:52 - uh use the value 20 in our x so let's
11:56 - try this save and then build
12:00 - and run
12:04 - okay and as you can see we still have or
12:07 - we still get
12:08 - the output the value is greater than 5
12:10 - and less than 10
12:12 - that's because this particular statement
12:14 - here
12:15 - returns true so it doesn't matter if
12:18 - this particular statement here
12:19 - is false so as long as there is a
12:23 - true uh returns either of this
12:26 - statement so there's there should be
12:29 - statement
12:30 - printed or executed inside this
12:32 - particular if
12:33 - statement okay so i think that's all
12:35 - there is to it guys for this tutorial
12:37 - and in the next
12:38 - video we're going to discuss deeper with
12:41 - this particular if statement
12:43 - and of course if you want to learn more
12:45 - about c programming
12:46 - you can try to watch our video tutorial
12:49 - series in save for beginners
12:51 - so see you guys in the next video and
12:53 - thank you for watching
12:54 - so i think from the previous video we
12:57 - have like touched
12:58 - the basic usage of if statement
13:02 - so we have tried if statement with the
13:05 - logical operators
13:07 - so the end the
13:10 - relational operators the you know
13:13 - greater than less than or less than or
13:17 - equal to another
13:18 - relational operators okay but in this
13:21 - particular video guys i'm going to
13:23 - go deeper with the if statement and how
13:26 - we can apply
13:28 - um if statement in our c program
13:31 - and of course guys i want to show you
13:33 - the practical approach on how to
13:35 - how you can implement if statement in a
13:38 - c program
13:39 - so basically guys if statements in c
13:42 - is used to control the program flow
13:46 - based on some conditions so it is used
13:49 - to execute
13:50 - some statement called block if the
13:52 - expression is evaluated to
13:54 - true so otherwise uh it will get skipped
13:57 - and we will try to
14:00 - implement a simple or basic program
14:04 - um utilizing the if statement so
14:06 - actually guys there are four different
14:08 - types of
14:09 - if statement in c so these are
14:12 - you know simple if statement we also
14:15 - have if
14:16 - else statement we also have nested
14:19 - if else statement and we also have
14:23 - else if ladder in c programming
14:27 - language but for now let's just focus on
14:30 - the simple if statement
14:32 - so basically the structure
14:35 - of if statement is just like this
14:40 - so we have this particular
14:44 - format or basic format of if statement
14:47 - in c we have
14:48 - if keyword and then open and close
14:51 - parenthesis
14:53 - and then inside of this open and close
14:55 - parenthesis
14:56 - is the test expression
15:00 - okay or the condition and then of course
15:05 - we should you know add curly braces open
15:08 - and close curly braces
15:10 - and then of course the statement to
15:13 - execute whenever the test expression or
15:16 - condition
15:16 - is met or in this particular case if
15:20 - this particular condition is evaluated
15:23 - into
15:24 - true okay so now let's try to
15:28 - implement a practical approach of an if
15:30 - statement
15:32 - so say for example you are developing a
15:34 - program
15:36 - or a software for a particular bar
15:40 - okay and then that particular bar only
15:42 - accepts
15:44 - customers that are over 18 years old and
15:48 - those customers that are below 18 years
15:51 - old
15:51 - are not allowed to enter the
15:53 - establishment or the bar itself
15:55 - and we can create a very simple program
15:57 - for that and our program will accept
16:00 - the age of the customer and then it will
16:03 - evaluate the age
16:04 - and it will display a message based on
16:07 - that
16:08 - particular age so the first thing that
16:10 - we're going to declare here
16:12 - is the variable age which has the type
16:15 - of int
16:17 - and of course we need to display
16:19 - something on
16:20 - to the screen that says to input a
16:23 - number that pertains to the age
16:25 - of the customer so
16:29 - in order for us to do that we need to
16:32 - use the
16:33 - method printf and then in here we can
16:36 - say
16:37 - enter the customers
16:41 - the customer or enter the age
16:45 - of the customer okay
16:48 - then we can add colon and then space so
16:50 - we can have
16:51 - like this space for our input
16:54 - age now we have this
16:57 - output and we need something to
17:02 - accept a number from our user so we can
17:05 - use
17:06 - the method i think we already used this
17:09 - before
17:10 - the scan f right so in here we need to
17:13 - specify
17:14 - the format specifier for our age which
17:18 - is
17:18 - um uh percent d
17:22 - with uh which pertains to the values
17:25 - that are of type in
17:29 - okay and then of course uh after this we
17:32 - need to add
17:33 - the comma and of course the
17:36 - variable age and of course we need to
17:39 - end this line with a similar column but
17:42 - the proper way of doing this is to
17:45 - add an a person a person symbol
17:49 - okay so basically what we're doing here
17:51 - is just we're getting the address of
17:53 - age and assigned value of that
17:56 - particular address
17:58 - using the value that has been inputted
18:01 - by the user
18:02 - okay and of course we can now apply
18:06 - our if statement with this particular
18:09 - age
18:09 - so the first thing that we're going to
18:12 - check
18:13 - if the age is greater than 18
18:17 - okay so we can just copy and paste this
18:20 - age variable and then we can add the
18:25 - logical operator greater than so
18:29 - basically what we're doing here is to
18:31 - check
18:32 - if the age is greater than 18 okay
18:36 - so there you go and then of course the
18:40 - statements statements
18:44 - to execute if
18:47 - condition is true
18:50 - okay so basically what we can do here is
18:53 - to
18:54 - print um the
18:57 - age the age
19:02 - is greater
19:07 - than 18. okay
19:10 - and basically it uh it says or it means
19:14 - that the
19:15 - customer can enter the premises
19:18 - or the bar itself okay and of course we
19:21 - can also check
19:22 - if um
19:25 - the user or the age of the customer
19:28 - is equal to 18. okay we could also check
19:33 - that by using the logical operator
19:35 - or the relational operator equals n
19:39 - equal equal symbol so this is just um
19:43 - testing the age if it is equal to the
19:46 - value
19:47 - 18. so the first one is for testing the
19:50 - value
19:51 - h if it is greater than 18 in the second
19:54 - one
19:54 - if it is equal to 18 and then of course
19:57 - we need to
19:58 - display the corresponding output so the
20:02 - age
20:03 - is equal to
20:07 - 18 okay and then of course we can add
20:10 - another one for this
20:12 - so we can just copy and paste for
20:15 - this one we need to check if the age
20:19 - is less than 18
20:22 - so this is another logical operator that
20:24 - we have discussed from the previous
20:26 - videos okay
20:28 - so greater than equal and then of course
20:30 - less than
20:33 - and of course we can output here like
20:38 - minor is not allowed
20:41 - okay that's because the age of the
20:44 - customer
20:45 - is less than 18. and
20:48 - the general rule when it comes to bar as
20:52 - minors are not allowed so basically what
20:54 - we're doing here is very simple program
20:57 - for that particular bar okay
21:00 - now we can try to run our program we can
21:02 - just you know
21:04 - um build okay
21:08 - and then we can run our program
21:11 - and we have we can enter the age of the
21:14 - customer so for example
21:16 - the age of the customer is 18
21:20 - so the age is equal to
21:23 - 18 okay so as you can see
21:26 - this is the only output or this
21:30 - this is the only statement that has been
21:31 - executed the age equal to 18
21:34 - because the other one uh the other
21:38 - condition is not being met or not
21:41 - evaluated to true
21:42 - okay because uh the
21:45 - age is equal to 18 and
21:49 - of course this is um
21:52 - greater than 18 and of course this is
21:55 - less than
21:56 - 18. so we can try another one so for
21:58 - example the age is
22:01 - um 19. so the age is greater than
22:06 - 18. and of course again
22:10 - this is the only statement that that has
22:13 - been executed
22:14 - because it the condition
22:18 - evaluated to true this is evaluated to
22:22 - false because the age is not equal to 18
22:26 - and this one is evaluated to false also
22:30 - because
22:31 - uh the age is not less than 18
22:34 - okay so you can try this one more time
22:38 - to check for the for example the age of
22:42 - the customer is 16.
22:47 - so the output is the minor is
22:50 - not allowed okay that's the
22:54 - practical way of using if statement in c
22:57 - programming language we're going to talk
22:58 - about if else
23:00 - statements and of course we're going to
23:04 - uh discuss also the nested if else
23:06 - statements in c programming language
23:09 - now from the previous video we have
23:11 - created a simple
23:13 - application so we have assumed to create
23:16 - an application
23:18 - for a bar or establishment and then that
23:22 - particular program will
23:24 - ask for the age of the customer that is
23:27 - trying to enter the premises of
23:29 - the bar and of course we
23:32 - ask for the age right and we check for
23:35 - the age if it is greater than 18 then
23:38 - we display the age is greater than 18.
23:41 - and if the age is equal to 18 and
23:45 - we also displayed the age is equal to 18
23:48 - but
23:49 - in case that the age is less than 18
23:52 - then
23:53 - we print that minor is not allowed
23:56 - so basically guys this is a good um
23:59 - program
24:00 - but we can you know upgrade this this is
24:03 - not
24:04 - when it comes to code readability
24:08 - and code maintainability
24:11 - this is not a good practice when it
24:13 - comes to
24:15 - you know checking a variable or a
24:17 - certain value of a variable so now let's
24:20 - just remove this lines okay
24:25 - and of course we have this first
24:27 - condition if
24:28 - and then we check for the
24:32 - age of the customer which is you know
24:35 - 18.
24:36 - so if the age is greater than 18 we
24:38 - display
24:39 - um the age is greater than 18. so i uh
24:42 - as i've said we can take this further
24:45 - by adding else statement right here
24:49 - so basically the if else statements
24:52 - in c is also used to
24:56 - control the program flow based on some
24:59 - condition
25:00 - and the only difference is it used to
25:03 - execute
25:04 - some statement code block if
25:08 - the expression is evaluated to true
25:11 - so it will try to execute this
25:13 - particular
25:15 - statement if this particular condition
25:17 - is true otherwise it will try
25:19 - to execute the statement
25:22 - of this particular else
25:26 - code block okay so in here we can try to
25:29 - display
25:31 - printf the age
25:38 - is less than
25:42 - or equal to 18
25:45 - okay so as you can see um if we try
25:48 - to evaluate this so
25:52 - if age is greater than 18 so for example
25:55 - you have like
25:56 - 19 or you inputed 19
26:00 - then of course automatically it will
26:02 - execute
26:03 - the statement that the age is greater
26:05 - than 18
26:06 - right now basically if we try to input
26:09 - 18
26:10 - so 18 is not greater than 18
26:13 - so it will try to
26:17 - execute the code block or the code
26:20 - or the statements inside this else code
26:23 - block
26:24 - because the condition right here
26:28 - returns false okay
26:31 - because 18 is not greater than 18
26:36 - and uh there you go it returns
26:39 - false okay now we can also add
26:42 - another condition right here so for
26:45 - example we want to check
26:46 - if the uh age is
26:50 - equal to 18 okay we can check if the age
26:53 - is greater than 18
26:55 - and of course we can also check if the
26:57 - user or the age
26:59 - is equal to 15 and then otherwise
27:02 - it's it is less than 18 and
27:07 - we can add another else statement right
27:09 - here
27:10 - but for now let's just you know add the
27:13 - another condition or condition
27:16 - evaluation
27:17 - test expression if the user or the age
27:21 - is equal to
27:24 - 18. okay so basically this particular
27:28 - statement
27:30 - if this particular condition right here
27:33 - is false
27:34 - then it will try to evaluate one more
27:37 - time
27:37 - with this particular condition is the
27:40 - age
27:41 - equal to 18. so if that particular age
27:44 - is equal to 18
27:45 - then we can display the age is
27:48 - equal to 18
27:52 - right there but in case if the age is
27:56 - less than 18
27:57 - we can also
28:01 - add the else statement right here
28:06 - and we can display that the age
28:10 - is less than 18.
28:13 - okay so as you can see we have you know
28:16 - implemented a practical implementation
28:18 - of if else statement and we can add
28:21 - you know the first if uh condition
28:25 - and then we can add another condition
28:27 - else if
28:29 - and then we can test this condition
28:31 - right here otherwise if these
28:34 - two conditions are returning false then
28:37 - we can
28:38 - you know execute the statements in this
28:41 - particular
28:42 - as block okay so we can try this we can
28:45 - run our program
28:48 - uh build and run
28:54 - so let's try first the possibilities
28:58 - so for example the customer or the enter
29:00 - the age of customer
29:01 - for example 25 so the age is greater
29:05 - than 18
29:06 - so let's try to run this once again
29:13 - we can try to input 18
29:16 - so the h is equal to 18
29:20 - okay so this particular condition right
29:23 - here
29:23 - returns true now we can also try to
29:28 - input the value which is you know less
29:31 - than 18 so for example 16
29:34 - and then of course the age is less than
29:37 - 18. okay so as you can see in this
29:40 - particular example there will be only
29:43 - one um block of code that will be
29:46 - executed
29:47 - so so for example this one if this will
29:50 - return true
29:51 - the age is greater than 18 then it will
29:54 - execute this statement right here or
29:56 - inside this ifs
29:58 - block then it will ignore the other
30:01 - like the else if and the else now if it
30:04 - will return
30:05 - false then it will try to evaluate
30:08 - the expression inside here and if it is
30:11 - true or it will return true
30:14 - then it will execute this statement and
30:16 - ignore the else
30:19 - if all of this statements or
30:22 - conditions here will return false then
30:27 - the else statement will be executed
30:31 - okay and it will you know try to print
30:33 - the age is less than
30:35 - 18. now there are cases that we need
30:39 - to check also for example
30:42 - inside this if statement we want to
30:45 - check
30:46 - if um the age is
30:50 - less than 25 okay less than 25
30:54 - uh although we have like the h is
30:56 - greater than 18 we want to check also if
30:59 - the age is
31:00 - um less than 25 so we could add also
31:06 - if statement right here so this is like
31:08 - what we call
31:09 - nested if else
31:16 - statements okay
31:18 - nested if else statement so we can also
31:21 - check here
31:22 - if age is less than
31:25 - 25 okay and then we can
31:29 - display here print f
31:33 - and then the age
31:37 - is
31:39 - [Music]
31:40 - greater than
31:44 - 18. what less than
31:47 - [Music]
31:49 - 25 right
31:52 - less than 25 and of course we can also
31:56 - add else statement
31:57 - here or else if like for example else
32:01 - if the age
32:04 - is greater than 25
32:10 - then we can say here printf
32:14 - the age is greater than
32:18 - [Music]
32:20 - 18 and greater than
32:23 - 25 so there are cases that you want to
32:26 - check
32:27 - this you know
32:30 - if you want to like in the future you
32:33 - want to implement
32:34 - an application and you will try
32:38 - to check the values and
32:41 - somewhere in your code you need to check
32:44 - like
32:45 - the value age here and also you can also
32:48 - check if the value is less than 25
32:51 - or greater than 25 so
32:54 - it is very useful when it comes to
32:57 - programming this particular nested if
32:59 - else
33:00 - statement so let's try to run this and
33:02 - before that i'm just going to add a
33:05 - backslash n right here
33:08 - so that we will have a new line
33:13 - after this particular code execution
33:16 - so let's try to build and run our app
33:18 - first
33:21 - and try to input
33:25 - a value that is over 18 so for example
33:28 - 23.
33:30 - so the age is greater than 18 and
33:34 - there's another statement that has been
33:35 - executed right here
33:37 - the h is greater than 18 but less than
33:39 - 25
33:41 - we can also you know run this once again
33:44 - and input 26
33:48 - so the age is greater than 18 and
33:51 - there's also
33:52 - a statement here the ace is greater than
33:55 - 18
33:56 - and um greater than 25
34:00 - okay and that's how you use the
34:03 - if else statement or
34:06 - yeah if else statements in c and then of
34:09 - course if you have like
34:10 - many conditions that you want to check
34:12 - so you can also add
34:15 - another conditions right here
34:19 - okay and then another condition
34:24 - and um otherwise if there
34:27 - if these conditions are not met then you
34:30 - can
34:31 - display or execute the statement inside
34:34 - this
34:35 - else code block okay now
34:39 - uh the nested if else statement requires
34:42 - only one
34:43 - if okay so you can't use like
34:47 - uh two ifs here
34:50 - because it will try to separate the
34:53 - uh chain of if else if you use
34:56 - another if so what you can do is
34:59 - uh one if and then else if
35:03 - else if and also one else
35:06 - statement so it doesn't matter how many
35:09 - else if
35:10 - statement that you can add okay
35:13 - for as long as it is like has one if
35:17 - and has one uh else
35:20 - statement so we're going to learn how to
35:23 - use
35:24 - ternary operators in c
35:27 - so basically guys the ternary operator
35:30 - is used to execute code based on
35:34 - the result of a binary condition
35:37 - so when we say ternary operators it is
35:40 - used to execute
35:42 - code based on binary condition
35:45 - okay and it takes in a binary condition
35:49 - as input
35:50 - and which makes it similar to an
35:54 - else control flow block so so for
35:57 - example guys
35:58 - from our previous tutorial
36:02 - we have discussed how to use if else
36:05 - statement okay
36:09 - so we have this kind of structure so for
36:11 - example we want to use
36:12 - this structure or code to
36:16 - get the maximum
36:19 - two values or two
36:23 - variables so if you want to like
36:27 - return the max value all you have to do
36:29 - is
36:30 - compare the two variables a
36:33 - and b so so for example if a
36:37 - is greater than b then of course
36:41 - a or max will be assigned
36:45 - to a otherwise the max number will be
36:50 - the value of variable
36:53 - b okay so
36:56 - the ternary operator guys instead of
36:58 - using
36:59 - if else like this this is too
37:02 - long for a simple you know
37:06 - checking of value condition
37:09 - so the binary or ternary operator
37:12 - uses only single line or we can use the
37:15 - ternary operators in a single line
37:18 - and it returns a value so behaving
37:22 - uh similar to a function okay so let's
37:25 - try to see the syntax of
37:28 - the ternary operators in c so basically
37:31 - the syntax is like this
37:34 - um result and then binary condition
37:38 - and then you have to add the question
37:41 - mark
37:42 - and then you have like the value
37:46 - when the binary condition is true
37:49 - otherwise
37:50 - the value of uh you know
37:54 - value to be returned if the binary
37:57 - condition
37:58 - is false so we have to
38:01 - take note guys that the ternary cannot
38:03 - be used to execute code
38:06 - so it must be either returned in a
38:10 - function
38:12 - or set equal to a variable so you cannot
38:16 - use this like something like this
38:18 - so you cannot leave your ternary
38:20 - operator like this
38:22 - so it should be equal to or be set equal
38:25 - to a variable
38:27 - okay something like this or you can use
38:30 - it
38:30 - as a return in a particular function
38:34 - okay so let's try to implement
38:38 - a ternary operator
38:42 - so for example you want to check the max
38:45 - value so
38:46 - the long version is this if a
38:49 - is greater than b then assign the
38:53 - value of a to d max and then
38:56 - otherwise assign the value of b to the
38:59 - max variable
39:00 - so as i've said we can
39:03 - you know make this a little shorter by
39:06 - using the ternary operators
39:08 - so in order for us to do that we just
39:10 - need to
39:11 - um so for example get the variable max
39:15 - and then the binary condition is
39:19 - a is a greater than b
39:23 - okay so we can add
39:26 - the question mark there you go
39:29 - question mark and then the value to be
39:32 - returned
39:33 - if the binary condition
39:36 - is true so of course if a is greater
39:40 - than b
39:41 - then the max value is a
39:44 - right otherwise
39:48 - the value is b or the return
39:52 - or the max value is the value of
39:56 - variable b as i said guys
40:00 - this is the
40:03 - explanation of conditional or ternary
40:06 - operators
40:07 - in c so we have this variable
40:12 - and then we have the expression or the
40:14 - condition
40:16 - and then you have to add the question
40:18 - mark
40:19 - and then the value if true so it will
40:22 - return
40:23 - the resultant value into the variable
40:26 - and it will assign
40:27 - this value to this variable otherwise
40:32 - if the expression is false then the
40:34 - resultant value of
40:37 - you know the false then it will be
40:39 - returned
40:40 - as the value of the variable that we
40:42 - have added
40:43 - okay so we can check this right now we
40:46 - can remove this this is
40:48 - the long version
40:52 - and we can try to print this
40:56 - display the result the max
41:00 - value is and then format specifier which
41:05 - is we're using
41:06 - in so percent b and then of course
41:10 - the maps variable okay
41:16 - let's just remove this
41:21 - so clean and build or build and run our
41:24 - application
41:28 - so let's try this uh
41:32 - oh um we don't have
41:35 - like the value for a
41:39 - and b so let's try to assign values to
41:42 - this
41:44 - variable so for example a equals
41:47 - 15 and b was
41:50 - 16 okay so clean and build our
41:53 - application
41:57 - and we'll try to
42:01 - uh get the output
42:05 - so the max value is 16
42:09 - okay so we have here
42:13 - the b variable 16
42:16 - so that's the value of max variable that
42:21 - is
42:21 - being assigned because this particular
42:25 - condition returns false so that's why
42:29 - the value of b variable is being
42:31 - assigned
42:32 - to the max variable so we can also try
42:35 - this
42:36 - uh with the other um
42:39 - you know if the a is greater than b so
42:42 - like
42:44 - 20 so obviously
42:48 - a is greater than b so let's try this
42:51 - except this for now and then
42:55 - build and run our application
43:00 - so let's try this so there you go
43:04 - the max value is 20.
43:07 - so this condition returns true
43:12 - because a which is the value is 20
43:17 - and that's greater than b because
43:20 - b is the value is 16.
43:24 - so it returns the value of a so
43:27 - like this so it ignores the
43:31 - second part which is the b because
43:34 - it returns true and then of course after
43:39 - evaluation the value of a
43:42 - is being assigned to the max variable
43:45 - that we have here
43:47 - so it printed out that the max value is
43:50 - percent d and then which is 20. so
43:54 - let's try let's try this one more time
44:00 - just so you can see the output so the
44:02 - max value
44:03 - is 20. okay so this is quite useful
44:07 - if we only want to
44:11 - check a certain value so
44:14 - like if you're planning to use if else
44:16 - then
44:17 - you might want to use the ternary
44:20 - operators which is like this
44:22 - so it will just save you time
44:26 - it will save you of code space
44:29 - and i think it's clear
44:33 - rather than using the f and else
44:37 - statement so this is pretty straight
44:40 - forward
44:41 - when it comes to checking the value and
44:42 - assigning the value to
44:44 - the max variable okay
44:47 - so you just have to remember that it
44:49 - cannot be
44:50 - used to execute code you just have to
44:54 - set this equal to a variable or you can
44:57 - use this
44:57 - as a return value of a function
45:02 - okay so i hope that's clear and i think
45:05 - that's all there is to it for this
45:06 - tutorial guys and if you have questions
45:09 - please let us know in the comment
45:10 - section below thank you for watching and
45:12 - see in the next video

Cleaned transcript:

this is john from programming knowledge and in this video guys i'm going to show you and teach you how to use um if statements in c programming language we're going to discuss about the logical operators and of course the assignment operators so previously we have discussed this relational operators so we have like six relational operators the equal or checking if a value is equal to some value also and then not equal we have also greater than less than and then we also have greater than or equal to and we also have less than or equal to some value so this is quite useful guys if you are using the control statement in c so for example if statement and then you want to check if a certain value is equal or not equal to some value so for example if a variable x is equal equal to 2 so basically we're just checking if this particular variable or the value of this x is equal to two or we can reverse that we can check if this particular variable is not equal to two and of course you can use other operation or operators like greater than um less than or we could also double check for greater than or equal to or less than or equal to so basically guys this operators is like just checking the relationship or if the certain value is greater than another value or it is equal to another value okay now let's move on to the next one which is the assignment operators so basically you guys there are a lot of assignment operators in c programming language okay so the first one will be the equal sign okay this is one of the most common assignment operators in c programming so for example you want to assign so as i've said guys this is for assignment operators assignment operators okay so basically this is useful if you want to set a value to a variable okay so for example x and then if you want to make this like five or the value of x is equal to five you can do that by using this particular assignment operator equal symbol okay that's easy and the second one is um plus equal so we have this also plus equal and then um it basically means guys that it increments the value and then assign it to the um the variable okay so for example you want to make this like x and then plus equal to two so basically let's try this um we can remove this code right here we can use the increment then assign so basically like we set a value for x we set it to 5 and then we can have it like x plus and then equals 2 3 and then we can use the printf function and we can display the result further so for example um the value is the uh format specifier and then of course the comma and then the x variable okay and then semicolon at the end of this line save this and then compile and build or build and run our application so basically as you can see here the value is eight so this is the doing of the plus equals to 3. so big basically what it means that it add 3 to the variable x and then of course it the result of that is assigned to variable x also okay so this is basically uh just incrementing the value of our variable and of course we also have the x minus equals to so for example one okay so basically it is the complete opposite of this one because this is for incrementing and this is for decrement okay and of course we do have other operators for this particular topic which is the assignment operators we also have x for example times or multiply equal to 2 you can also do that and basically the division also okay you can do also the modular part modulo symbol and then equal and then so for example two and there are others so for example um percent for i mean x and then and um and symbol and equal symbol and then of course the value that you want to assign so this is basically a bit bit wise and assign assignment so we're not going to use that for now so basically our our currently concern is this operations we can have the increment uh the first one is equal and then of course the increment the decrement and then multiply multiplication then assign and we also have divide and assign we also have modulu and assign so that's basically how the assignment operators work so the last thing that we want to discuss here is all about the logical operators so logical operators provides three mechanism that we can test more than one condition to make a particular decision so these are the um end and symbol so meaning it is a logical end okay logical and uh let me show you that later on what uh what this means logical end and of course we also have this bar bar and this is a logical operator or logical or and then of course we have the negation or not symbol okay so logical or and then this is in and of course logical not okay so let me show you how this works this three logical operators now let's try to use the logical operators so for example the first one the logical and operator so we have here variable x which is set to eight or the value is eight and then we can check if this particular value is or the 40 particular val variable x is um greater than 5 so we can do that by using the if statement and then x is it less than or greater than 5 so if x is greater than 5 then we can display something in our in our screen or output something so we can do print f and of course the value is greater than greater than five okay so we could uh build and run this and see the output of our program and of course it's gonna display the value is greater than five okay so what if the value is four okay so obviously there will be no output because uh this the condition right here uh turns to be false because the actual value of x is now uh for so no statement has been executed for this particular program now we can use logical operators and in this particular scenario so for example you want to check that the value of x should be um greater than 5 but less than 10 okay so we could check if the variable x is greater than 5 but less than 10 and we can do that by using the logical and operator so double ampersand and x and then less than 10 okay we could do that and of course um if we try to run this still there is no output because the value of x is four so we can try six here build and run our application so the value is greater than 5 and we should add here that the value is less than 10 okay build and run our application so the value is greater than 5 and it is less than 10. now what if it is 11 so obviously it's going to display nothing in our screen because the conditions of this particular statements is not met okay so that's how you can use the logical and operator and of course when we say and basically it means that it should be the both of this statement or both of this condition should be true in order for this statement to be executed okay and you can also use the logical operator or in this particular scenario so it doesn't matter if the um x is greater than 5 or x is less than 10 it should you know execute the statement that we have here okay so for example you run this okay so we have the value is greater than 5 and less than 10 and we can try like 20 or maybe uh use the value 20 in our x so let's try this save and then build and run okay and as you can see we still have or we still get the output the value is greater than 5 and less than 10 that's because this particular statement here returns true so it doesn't matter if this particular statement here is false so as long as there is a true uh returns either of this statement so there's there should be statement printed or executed inside this particular if statement okay so i think that's all there is to it guys for this tutorial and in the next video we're going to discuss deeper with this particular if statement and of course if you want to learn more about c programming you can try to watch our video tutorial series in save for beginners so see you guys in the next video and thank you for watching so i think from the previous video we have like touched the basic usage of if statement so we have tried if statement with the logical operators so the end the relational operators the you know greater than less than or less than or equal to another relational operators okay but in this particular video guys i'm going to go deeper with the if statement and how we can apply um if statement in our c program and of course guys i want to show you the practical approach on how to how you can implement if statement in a c program so basically guys if statements in c is used to control the program flow based on some conditions so it is used to execute some statement called block if the expression is evaluated to true so otherwise uh it will get skipped and we will try to implement a simple or basic program um utilizing the if statement so actually guys there are four different types of if statement in c so these are you know simple if statement we also have if else statement we also have nested if else statement and we also have else if ladder in c programming language but for now let's just focus on the simple if statement so basically the structure of if statement is just like this so we have this particular format or basic format of if statement in c we have if keyword and then open and close parenthesis and then inside of this open and close parenthesis is the test expression okay or the condition and then of course we should you know add curly braces open and close curly braces and then of course the statement to execute whenever the test expression or condition is met or in this particular case if this particular condition is evaluated into true okay so now let's try to implement a practical approach of an if statement so say for example you are developing a program or a software for a particular bar okay and then that particular bar only accepts customers that are over 18 years old and those customers that are below 18 years old are not allowed to enter the establishment or the bar itself and we can create a very simple program for that and our program will accept the age of the customer and then it will evaluate the age and it will display a message based on that particular age so the first thing that we're going to declare here is the variable age which has the type of int and of course we need to display something on to the screen that says to input a number that pertains to the age of the customer so in order for us to do that we need to use the method printf and then in here we can say enter the customers the customer or enter the age of the customer okay then we can add colon and then space so we can have like this space for our input age now we have this output and we need something to accept a number from our user so we can use the method i think we already used this before the scan f right so in here we need to specify the format specifier for our age which is um uh percent d with uh which pertains to the values that are of type in okay and then of course uh after this we need to add the comma and of course the variable age and of course we need to end this line with a similar column but the proper way of doing this is to add an a person a person symbol okay so basically what we're doing here is just we're getting the address of age and assigned value of that particular address using the value that has been inputted by the user okay and of course we can now apply our if statement with this particular age so the first thing that we're going to check if the age is greater than 18 okay so we can just copy and paste this age variable and then we can add the logical operator greater than so basically what we're doing here is to check if the age is greater than 18 okay so there you go and then of course the statements statements to execute if condition is true okay so basically what we can do here is to print um the age the age is greater than 18. okay and basically it uh it says or it means that the customer can enter the premises or the bar itself okay and of course we can also check if um the user or the age of the customer is equal to 18. okay we could also check that by using the logical operator or the relational operator equals n equal equal symbol so this is just um testing the age if it is equal to the value 18. so the first one is for testing the value h if it is greater than 18 in the second one if it is equal to 18 and then of course we need to display the corresponding output so the age is equal to 18 okay and then of course we can add another one for this so we can just copy and paste for this one we need to check if the age is less than 18 so this is another logical operator that we have discussed from the previous videos okay so greater than equal and then of course less than and of course we can output here like minor is not allowed okay that's because the age of the customer is less than 18. and the general rule when it comes to bar as minors are not allowed so basically what we're doing here is very simple program for that particular bar okay now we can try to run our program we can just you know um build okay and then we can run our program and we have we can enter the age of the customer so for example the age of the customer is 18 so the age is equal to 18 okay so as you can see this is the only output or this this is the only statement that has been executed the age equal to 18 because the other one uh the other condition is not being met or not evaluated to true okay because uh the age is equal to 18 and of course this is um greater than 18 and of course this is less than 18. so we can try another one so for example the age is um 19. so the age is greater than 18. and of course again this is the only statement that that has been executed because it the condition evaluated to true this is evaluated to false because the age is not equal to 18 and this one is evaluated to false also because uh the age is not less than 18 okay so you can try this one more time to check for the for example the age of the customer is 16. so the output is the minor is not allowed okay that's the practical way of using if statement in c programming language we're going to talk about if else statements and of course we're going to uh discuss also the nested if else statements in c programming language now from the previous video we have created a simple application so we have assumed to create an application for a bar or establishment and then that particular program will ask for the age of the customer that is trying to enter the premises of the bar and of course we ask for the age right and we check for the age if it is greater than 18 then we display the age is greater than 18. and if the age is equal to 18 and we also displayed the age is equal to 18 but in case that the age is less than 18 then we print that minor is not allowed so basically guys this is a good um program but we can you know upgrade this this is not when it comes to code readability and code maintainability this is not a good practice when it comes to you know checking a variable or a certain value of a variable so now let's just remove this lines okay and of course we have this first condition if and then we check for the age of the customer which is you know 18. so if the age is greater than 18 we display um the age is greater than 18. so i uh as i've said we can take this further by adding else statement right here so basically the if else statements in c is also used to control the program flow based on some condition and the only difference is it used to execute some statement code block if the expression is evaluated to true so it will try to execute this particular statement if this particular condition is true otherwise it will try to execute the statement of this particular else code block okay so in here we can try to display printf the age is less than or equal to 18 okay so as you can see um if we try to evaluate this so if age is greater than 18 so for example you have like 19 or you inputed 19 then of course automatically it will execute the statement that the age is greater than 18 right now basically if we try to input 18 so 18 is not greater than 18 so it will try to execute the code block or the code or the statements inside this else code block because the condition right here returns false okay because 18 is not greater than 18 and uh there you go it returns false okay now we can also add another condition right here so for example we want to check if the uh age is equal to 18 okay we can check if the age is greater than 18 and of course we can also check if the user or the age is equal to 15 and then otherwise it's it is less than 18 and we can add another else statement right here but for now let's just you know add the another condition or condition evaluation test expression if the user or the age is equal to 18. okay so basically this particular statement if this particular condition right here is false then it will try to evaluate one more time with this particular condition is the age equal to 18. so if that particular age is equal to 18 then we can display the age is equal to 18 right there but in case if the age is less than 18 we can also add the else statement right here and we can display that the age is less than 18. okay so as you can see we have you know implemented a practical implementation of if else statement and we can add you know the first if uh condition and then we can add another condition else if and then we can test this condition right here otherwise if these two conditions are returning false then we can you know execute the statements in this particular as block okay so we can try this we can run our program uh build and run so let's try first the possibilities so for example the customer or the enter the age of customer for example 25 so the age is greater than 18 so let's try to run this once again we can try to input 18 so the h is equal to 18 okay so this particular condition right here returns true now we can also try to input the value which is you know less than 18 so for example 16 and then of course the age is less than 18. okay so as you can see in this particular example there will be only one um block of code that will be executed so so for example this one if this will return true the age is greater than 18 then it will execute this statement right here or inside this ifs block then it will ignore the other like the else if and the else now if it will return false then it will try to evaluate the expression inside here and if it is true or it will return true then it will execute this statement and ignore the else if all of this statements or conditions here will return false then the else statement will be executed okay and it will you know try to print the age is less than 18. now there are cases that we need to check also for example inside this if statement we want to check if um the age is less than 25 okay less than 25 uh although we have like the h is greater than 18 we want to check also if the age is um less than 25 so we could add also if statement right here so this is like what we call nested if else statements okay nested if else statement so we can also check here if age is less than 25 okay and then we can display here print f and then the age is greater than 18. what less than 25 right less than 25 and of course we can also add else statement here or else if like for example else if the age is greater than 25 then we can say here printf the age is greater than 18 and greater than 25 so there are cases that you want to check this you know if you want to like in the future you want to implement an application and you will try to check the values and somewhere in your code you need to check like the value age here and also you can also check if the value is less than 25 or greater than 25 so it is very useful when it comes to programming this particular nested if else statement so let's try to run this and before that i'm just going to add a backslash n right here so that we will have a new line after this particular code execution so let's try to build and run our app first and try to input a value that is over 18 so for example 23. so the age is greater than 18 and there's another statement that has been executed right here the h is greater than 18 but less than 25 we can also you know run this once again and input 26 so the age is greater than 18 and there's also a statement here the ace is greater than 18 and um greater than 25 okay and that's how you use the if else statement or yeah if else statements in c and then of course if you have like many conditions that you want to check so you can also add another conditions right here okay and then another condition and um otherwise if there if these conditions are not met then you can display or execute the statement inside this else code block okay now uh the nested if else statement requires only one if okay so you can't use like uh two ifs here because it will try to separate the uh chain of if else if you use another if so what you can do is uh one if and then else if else if and also one else statement so it doesn't matter how many else if statement that you can add okay for as long as it is like has one if and has one uh else statement so we're going to learn how to use ternary operators in c so basically guys the ternary operator is used to execute code based on the result of a binary condition so when we say ternary operators it is used to execute code based on binary condition okay and it takes in a binary condition as input and which makes it similar to an else control flow block so so for example guys from our previous tutorial we have discussed how to use if else statement okay so we have this kind of structure so for example we want to use this structure or code to get the maximum two values or two variables so if you want to like return the max value all you have to do is compare the two variables a and b so so for example if a is greater than b then of course a or max will be assigned to a otherwise the max number will be the value of variable b okay so the ternary operator guys instead of using if else like this this is too long for a simple you know checking of value condition so the binary or ternary operator uses only single line or we can use the ternary operators in a single line and it returns a value so behaving uh similar to a function okay so let's try to see the syntax of the ternary operators in c so basically the syntax is like this um result and then binary condition and then you have to add the question mark and then you have like the value when the binary condition is true otherwise the value of uh you know value to be returned if the binary condition is false so we have to take note guys that the ternary cannot be used to execute code so it must be either returned in a function or set equal to a variable so you cannot use this like something like this so you cannot leave your ternary operator like this so it should be equal to or be set equal to a variable okay something like this or you can use it as a return in a particular function okay so let's try to implement a ternary operator so for example you want to check the max value so the long version is this if a is greater than b then assign the value of a to d max and then otherwise assign the value of b to the max variable so as i've said we can you know make this a little shorter by using the ternary operators so in order for us to do that we just need to um so for example get the variable max and then the binary condition is a is a greater than b okay so we can add the question mark there you go question mark and then the value to be returned if the binary condition is true so of course if a is greater than b then the max value is a right otherwise the value is b or the return or the max value is the value of variable b as i said guys this is the explanation of conditional or ternary operators in c so we have this variable and then we have the expression or the condition and then you have to add the question mark and then the value if true so it will return the resultant value into the variable and it will assign this value to this variable otherwise if the expression is false then the resultant value of you know the false then it will be returned as the value of the variable that we have added okay so we can check this right now we can remove this this is the long version and we can try to print this display the result the max value is and then format specifier which is we're using in so percent b and then of course the maps variable okay let's just remove this so clean and build or build and run our application so let's try this uh oh um we don't have like the value for a and b so let's try to assign values to this variable so for example a equals 15 and b was 16 okay so clean and build our application and we'll try to uh get the output so the max value is 16 okay so we have here the b variable 16 so that's the value of max variable that is being assigned because this particular condition returns false so that's why the value of b variable is being assigned to the max variable so we can also try this uh with the other um you know if the a is greater than b so like 20 so obviously a is greater than b so let's try this except this for now and then build and run our application so let's try this so there you go the max value is 20. so this condition returns true because a which is the value is 20 and that's greater than b because b is the value is 16. so it returns the value of a so like this so it ignores the second part which is the b because it returns true and then of course after evaluation the value of a is being assigned to the max variable that we have here so it printed out that the max value is percent d and then which is 20. so let's try let's try this one more time just so you can see the output so the max value is 20. okay so this is quite useful if we only want to check a certain value so like if you're planning to use if else then you might want to use the ternary operators which is like this so it will just save you time it will save you of code space and i think it's clear rather than using the f and else statement so this is pretty straight forward when it comes to checking the value and assigning the value to the max variable okay so you just have to remember that it cannot be used to execute code you just have to set this equal to a variable or you can use this as a return value of a function okay so i hope that's clear and i think that's all there is to it for this tutorial guys and if you have questions please let us know in the comment section below thank you for watching and see in the next video
