With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - Jenkins to troll for beginners in this
00:04 - video we will see how we can do the
00:06 - Jenkins integration with git and github
00:10 - so let's get started I'm going to
00:12 - minimize the browser first of all and if
00:15 - you are following this video series in
00:17 - the last videos we have created this
00:19 - Java samples project and inside this
00:23 - Java samples project we have a
00:25 - HelloWorld dot Java file and this is the
00:29 - output of that file now let's say we
00:32 - want to commit this project to get and
00:36 - then we want to push the changes to the
00:39 - github repository first of all I'm going
00:42 - to show you how you can do it and then
00:44 - we will see how we can create a Jenkins
00:48 - job out of it now if you are new to get
00:51 - and github in the last video I have
00:53 - shown you how you can install git and
00:55 - configure github on your open to
00:58 - operating system so just watch the last
01:00 - video of this series and you will be
01:03 - good to go so for committing my file on
01:05 - git
01:06 - let me open the terminal first of all so
01:09 - I'm going to just press ctrl alt T to
01:11 - open the terminal and first of all I
01:13 - will just CD to my Java samples
01:16 - directory and in order to initialize a
01:19 - git project in this directory I can just
01:23 - give this command get in it and then
01:26 - press enter and this directory will be
01:30 - added to the gate now in order to see
01:34 - the status of all the file I can just
01:37 - give this command get status and then
01:40 - press enter and you will see this
01:42 - message which says untracked file
01:44 - because we haven't added and committed
01:47 - these files to get so let's do that so
01:50 - to add these files to get we just need
01:53 - to write gate add and the file names one
01:57 - by one hello world dot class space
02:00 - HelloWorld dot Java and this will add
02:03 - both these files to the gate and let's
02:07 - to get status first once again and now
02:10 - you will see both the files and the
02:12 - message is
02:13 - changes to be committed so let's commit
02:16 - these files so to commit on gate you
02:20 - just need to give this command gate
02:22 - commit - m to give the message and here
02:27 - you can give any message which you want
02:29 - to provide for your commit so for
02:31 - example first Java commit let's say or
02:36 - any other message which you like to give
02:39 - to your commit and once again we can
02:41 - commit these files one by one so just
02:44 - give the first file name and then space
02:47 - and then give the second file name and
02:49 - then press Enter which is going to
02:51 - commit these files to the gate now let's
02:56 - check the status once again so get
02:57 - status and you can see nothing to commit
03:00 - working tree clean so now we have
03:04 - committed these files to get but in
03:06 - order to push them to get hub we need to
03:09 - create a repository on github so I'm
03:12 - going to go to the browser and I'm going
03:14 - to go to github.com and log in with my
03:17 - credentials there and here I will just
03:19 - click on start a project let's say I
03:23 - just want to give the name Java hello
03:26 - world and then you can give the
03:28 - description here which is optional but
03:30 - for now I'm going to leave everything as
03:33 - default and I'm going to just press on
03:35 - create repository which is going to
03:36 - create a blank repository for me now in
03:40 - here you will see our two health
03:42 - messages one is to create a new
03:45 - repository on the command line and other
03:47 - is to push an existing repository from
03:51 - the command line so we have already
03:53 - created our gate repository so we will
03:57 - push this repository using command line
04:00 - so we will choose the second option
04:01 - which is this one and for that we need
04:04 - these command so I'm going to just copy
04:06 - the first command which is going to just
04:09 - add the remote origin to my project so
04:13 - this is my project and I have already
04:15 - committed these two files to my gate and
04:18 - to add it to my remote origin I just
04:23 - need to give this command git remote add
04:25 - origin
04:27 - and the URL of your git repository which
04:30 - is this one or simply you can copy this
04:33 - command which will be enough so once you
04:37 - have copied and pasted this command just
04:39 - press ENTER so this command is
04:41 - successful now let's copy the second
04:43 - command in order to push our changes to
04:45 - the repository so I'm going to just copy
04:48 - the second command and go to the
04:51 - terminal just right click paste and then
04:54 - press Enter and this is going to push
04:57 - our changes to the github first of all
05:00 - we need to give our github credentials
05:03 - here so first of all the username and
05:06 - then press Enter and second is the
05:09 - password and then press enter and now
05:13 - your files will be pushed to your
05:17 - repository so once you have done that
05:19 - I'm going to just go to this repository
05:23 - which I have created and I will see
05:25 - these two files which I have committed
05:28 - to the gate in this folder which I am
05:31 - working on so once you have created your
05:33 - repository on github you can go to
05:36 - Jenkins and let's create a new project
05:38 - here and here I'm going to just give the
05:41 - same name which my repository has which
05:44 - is Java HelloWorld and then I'm going to
05:47 - choose the Freestyle project and I'm
05:50 - going to click OK and in the description
05:52 - I will just say Java HelloWorld example
05:54 - and rest everything we will leave as
05:57 - default and now click on source code
05:59 - management and because we are working
06:02 - with gate so now we will click on the
06:04 - get option and here you can give your
06:08 - git repository URL so to get the git
06:13 - repository URL you can just go to your
06:16 - repository and click on this green
06:19 - button which says clone or download and
06:22 - then just copy this URL from here and
06:25 - then paste this URL here which is
06:29 - repository URL and now we will scroll
06:32 - down a little and here it says branches
06:35 - to the build so by default you can see
06:38 - there is only one branch
06:41 - in our github repository which is master
06:45 - branch so we will leave this as default
06:48 - but if you want to have multiple
06:51 - branches in your github and then you
06:55 - want to clone for example a development
06:57 - branch or any other branch you just need
07:00 - to give the branch name of your
07:03 - repository here which you want to clone
07:06 - okay
07:06 - so right now we only have the master
07:09 - branch so we will leave this as default
07:11 - and next option is repository browser so
07:15 - we will also leave it as default and now
07:18 - we will go to the build triggers and for
07:21 - now I will leave everything as default
07:22 - but we will see how we can choose this
07:26 - option which says pole SCM or other get
07:29 - option in a moment but first of all I
07:31 - want to show the simple way of just
07:35 - cloning and building your Jenkins job so
07:37 - just leave everything as default in your
07:40 - build triggers and then build in
07:42 - environment also I'm going to leave
07:44 - everything as default now in the build
07:47 - option we will choose execute shell here
07:50 - and here we will give the commands to
07:52 - compile our HelloWorld dot Java program
07:55 - so we will just say Java C HelloWorld
08:00 - dot Java which is or Java file which is
08:04 - this one so we want to compile this one
08:07 - and then we want to just run this file
08:11 - so for running we will just use Java
08:14 - HelloWorld and by now I think you
08:17 - already know what these commands are
08:19 - doing and let's go to the build
08:22 - environment once again so here in the
08:26 - build environment you will see few
08:27 - options so first option is delete
08:29 - workspace before build start and this is
08:33 - important for us so I'm going to show
08:35 - you what this is in a moment but first
08:38 - let me add save this job first of all
08:41 - and once your job is created let's go to
08:45 - the home page and in here let's build
08:48 - this job so I'm going to just click on
08:51 - this arrow button and I'm going to just
08:53 - say built now
08:55 - and now the build of this job will start
08:58 - we are going to just go inside this Java
09:02 - HelloWorld and you can see here our
09:03 - build is successful so I'm going to go
09:05 - inside this pill and I'm going to go to
09:08 - the console output and here you will see
09:11 - more details so first of all you will
09:15 - see the location where your github
09:18 - repository is cloned and this is the
09:21 - location where your great hub repository
09:23 - is cloned right and you can see in the
09:26 - next command
09:27 - it has cloned our github repository and
09:30 - after the cloning these two command has
09:34 - been executed so first was the Java C
09:38 - HelloWorld dot Java which is used to
09:41 - compile our hello world program and then
09:44 - Java space HelloWorld which have
09:47 - resulted in this output which is hello
09:50 - world and our job is finished with
09:52 - success so this is how you can clone
09:56 - your repository and you can just build
09:59 - your job using github repository now
10:02 - let's go to this location which is the
10:04 - default
10:05 - Jenkins location where your repository
10:09 - has been cloned ok so I'm going to just
10:13 - just copy this path from here and I'm
10:16 - going to go to the terminal and open the
10:18 - next terminal and I'm going to just give
10:21 - CD and whatever part you have copied and
10:23 - I'm going to just press ENTER here and
10:25 - I'm going to do LS here and you can see
10:28 - both of your file are here so hello
10:32 - world our class is there and HelloWorld
10:35 - dot Java is there now let's see if some
10:37 - more configuration options for our
10:40 - Jenkins jobs so I'm going to go to my
10:42 - Jenkins job and I'm going to go to the
10:45 - configuration now and once again in the
10:49 - configuration I'm going to go to the
10:51 - build environment and I'm going to
10:53 - choose this option which says delete
10:56 - workspace before build start so this is
11:00 - going to delete this workspace before
11:04 - our bill start so this is the workspace
11:07 - of Jenkins
11:09 - and if you choose this option this is
11:11 - going to delete the workspace before
11:14 - this Jenkins job starts right so I'm
11:16 - going to save the job and build it once
11:19 - again and hopefully this will also be
11:23 - successful and I'm going to go to my job
11:26 - and then see the console output and you
11:29 - can see building in workspace once again
11:32 - and then first of all it has deleted our
11:35 - fork space and once again cloned our
11:39 - repository okay so this is the extra
11:42 - step when you choose the delete
11:43 - workspace option now let's see some more
11:47 - configuration options so I'm going to go
11:50 - to the configuration of my Jenkins job
11:53 - and this time I'm going to go to my
11:56 - build triggers and in the build triggers
11:59 - I'm going to choose this option which
12:01 - says pull SCM and this option works
12:04 - similar to the build periodically option
12:08 - which works on the Kron mechanism so if
12:11 - you give five Asterix here this is going
12:16 - to pull every minute to your repository
12:18 - for any changes and if you have done any
12:21 - changes to your github repository this
12:24 - is going to detect your changes and if
12:27 - there is any change then it's going to
12:30 - build your job once again so let's save
12:35 - this job so to trigger this job now what
12:38 - we need to do is we need to do some
12:41 - changes to our github using git so in
12:45 - this project what I'm going to do is in
12:48 - my Java samples project where I have
12:51 - committed my Java HelloWorld files using
12:54 - git I'm going to do LS once again and
12:56 - you can see there is no read me into my
13:00 - repository so I'm going to add a readme
13:03 - file into my retrieve a positi so to do
13:05 - that I'm going to use the touch commands
13:07 - so just write touch read me dot M D
13:12 - which is the readme file name and then
13:14 - press ENTER and do LS and you can see
13:18 - this readme dot MD is created and to
13:21 - edit this
13:22 - I'm going to just write G edit G edit is
13:25 - the editor you can choose any editor you
13:28 - want and then the file name which is
13:30 - readme dot MD and once this editor is
13:35 - open I will just copy and paste some
13:38 - readme content into this readme dot MD
13:43 - file and now I'm going to just give the
13:47 - gate status command so just give the
13:49 - state status and you can see this there
13:52 - is one file which is untracked so we are
13:55 - going to add this to the gate first of
13:58 - all so get add and the file name once
14:01 - again and then I'm going to commit this
14:03 - file once again do the gate status and
14:06 - then let's get commit so get commit
14:10 - minus M and in the message you can just
14:14 - write read me added and then the file
14:21 - which you want to commit which is readme
14:22 - dontoh MD and then press enter and now
14:25 - we just need to push our changes to
14:27 - github and for that we will use the gate
14:29 - Porsche - you origin/master command and
14:33 - then press enter and this will push our
14:36 - changes to github and once again give
14:38 - the github credentials and the password
14:41 - and then press enter and our changes are
14:44 - pushed to github so you can see here
14:47 - that this readme file is there and all
14:51 - the content of readme file is visible
14:53 - now and on the Jenkins job when i
14:56 - refresh this you will see this third job
15:00 - is triggered and you can see it's
15:03 - working so you can just click on the
15:06 - third job and I will go to the console
15:09 - output and you can see it's just say
15:12 - started by SCM change which means it is
15:16 - started by the change in our repository
15:20 - which is pulled every minute
15:22 - and once this change is detected then
15:27 - it's going to start the cloning of your
15:30 - git repository and your Jenkins job will
15:33 - be billed
15:34 - after that so this was the option to
15:37 - pull your a github repository every one
15:39 - minute and if the changes are detected
15:42 - then it's going to trigger the build and
15:46 - your Jenkins job will be executed so
15:50 - this is how you can integrate git and
15:52 - github with Jenkins I hope you enjoyed
15:56 - this video please rate comment subscribe
15:57 - and bye for now

Cleaned transcript:

hey guys welcome to the next video on Jenkins to troll for beginners in this video we will see how we can do the Jenkins integration with git and github so let's get started I'm going to minimize the browser first of all and if you are following this video series in the last videos we have created this Java samples project and inside this Java samples project we have a HelloWorld dot Java file and this is the output of that file now let's say we want to commit this project to get and then we want to push the changes to the github repository first of all I'm going to show you how you can do it and then we will see how we can create a Jenkins job out of it now if you are new to get and github in the last video I have shown you how you can install git and configure github on your open to operating system so just watch the last video of this series and you will be good to go so for committing my file on git let me open the terminal first of all so I'm going to just press ctrl alt T to open the terminal and first of all I will just CD to my Java samples directory and in order to initialize a git project in this directory I can just give this command get in it and then press enter and this directory will be added to the gate now in order to see the status of all the file I can just give this command get status and then press enter and you will see this message which says untracked file because we haven't added and committed these files to get so let's do that so to add these files to get we just need to write gate add and the file names one by one hello world dot class space HelloWorld dot Java and this will add both these files to the gate and let's to get status first once again and now you will see both the files and the message is changes to be committed so let's commit these files so to commit on gate you just need to give this command gate commit m to give the message and here you can give any message which you want to provide for your commit so for example first Java commit let's say or any other message which you like to give to your commit and once again we can commit these files one by one so just give the first file name and then space and then give the second file name and then press Enter which is going to commit these files to the gate now let's check the status once again so get status and you can see nothing to commit working tree clean so now we have committed these files to get but in order to push them to get hub we need to create a repository on github so I'm going to go to the browser and I'm going to go to github.com and log in with my credentials there and here I will just click on start a project let's say I just want to give the name Java hello world and then you can give the description here which is optional but for now I'm going to leave everything as default and I'm going to just press on create repository which is going to create a blank repository for me now in here you will see our two health messages one is to create a new repository on the command line and other is to push an existing repository from the command line so we have already created our gate repository so we will push this repository using command line so we will choose the second option which is this one and for that we need these command so I'm going to just copy the first command which is going to just add the remote origin to my project so this is my project and I have already committed these two files to my gate and to add it to my remote origin I just need to give this command git remote add origin and the URL of your git repository which is this one or simply you can copy this command which will be enough so once you have copied and pasted this command just press ENTER so this command is successful now let's copy the second command in order to push our changes to the repository so I'm going to just copy the second command and go to the terminal just right click paste and then press Enter and this is going to push our changes to the github first of all we need to give our github credentials here so first of all the username and then press Enter and second is the password and then press enter and now your files will be pushed to your repository so once you have done that I'm going to just go to this repository which I have created and I will see these two files which I have committed to the gate in this folder which I am working on so once you have created your repository on github you can go to Jenkins and let's create a new project here and here I'm going to just give the same name which my repository has which is Java HelloWorld and then I'm going to choose the Freestyle project and I'm going to click OK and in the description I will just say Java HelloWorld example and rest everything we will leave as default and now click on source code management and because we are working with gate so now we will click on the get option and here you can give your git repository URL so to get the git repository URL you can just go to your repository and click on this green button which says clone or download and then just copy this URL from here and then paste this URL here which is repository URL and now we will scroll down a little and here it says branches to the build so by default you can see there is only one branch in our github repository which is master branch so we will leave this as default but if you want to have multiple branches in your github and then you want to clone for example a development branch or any other branch you just need to give the branch name of your repository here which you want to clone okay so right now we only have the master branch so we will leave this as default and next option is repository browser so we will also leave it as default and now we will go to the build triggers and for now I will leave everything as default but we will see how we can choose this option which says pole SCM or other get option in a moment but first of all I want to show the simple way of just cloning and building your Jenkins job so just leave everything as default in your build triggers and then build in environment also I'm going to leave everything as default now in the build option we will choose execute shell here and here we will give the commands to compile our HelloWorld dot Java program so we will just say Java C HelloWorld dot Java which is or Java file which is this one so we want to compile this one and then we want to just run this file so for running we will just use Java HelloWorld and by now I think you already know what these commands are doing and let's go to the build environment once again so here in the build environment you will see few options so first option is delete workspace before build start and this is important for us so I'm going to show you what this is in a moment but first let me add save this job first of all and once your job is created let's go to the home page and in here let's build this job so I'm going to just click on this arrow button and I'm going to just say built now and now the build of this job will start we are going to just go inside this Java HelloWorld and you can see here our build is successful so I'm going to go inside this pill and I'm going to go to the console output and here you will see more details so first of all you will see the location where your github repository is cloned and this is the location where your great hub repository is cloned right and you can see in the next command it has cloned our github repository and after the cloning these two command has been executed so first was the Java C HelloWorld dot Java which is used to compile our hello world program and then Java space HelloWorld which have resulted in this output which is hello world and our job is finished with success so this is how you can clone your repository and you can just build your job using github repository now let's go to this location which is the default Jenkins location where your repository has been cloned ok so I'm going to just just copy this path from here and I'm going to go to the terminal and open the next terminal and I'm going to just give CD and whatever part you have copied and I'm going to just press ENTER here and I'm going to do LS here and you can see both of your file are here so hello world our class is there and HelloWorld dot Java is there now let's see if some more configuration options for our Jenkins jobs so I'm going to go to my Jenkins job and I'm going to go to the configuration now and once again in the configuration I'm going to go to the build environment and I'm going to choose this option which says delete workspace before build start so this is going to delete this workspace before our bill start so this is the workspace of Jenkins and if you choose this option this is going to delete the workspace before this Jenkins job starts right so I'm going to save the job and build it once again and hopefully this will also be successful and I'm going to go to my job and then see the console output and you can see building in workspace once again and then first of all it has deleted our fork space and once again cloned our repository okay so this is the extra step when you choose the delete workspace option now let's see some more configuration options so I'm going to go to the configuration of my Jenkins job and this time I'm going to go to my build triggers and in the build triggers I'm going to choose this option which says pull SCM and this option works similar to the build periodically option which works on the Kron mechanism so if you give five Asterix here this is going to pull every minute to your repository for any changes and if you have done any changes to your github repository this is going to detect your changes and if there is any change then it's going to build your job once again so let's save this job so to trigger this job now what we need to do is we need to do some changes to our github using git so in this project what I'm going to do is in my Java samples project where I have committed my Java HelloWorld files using git I'm going to do LS once again and you can see there is no read me into my repository so I'm going to add a readme file into my retrieve a positi so to do that I'm going to use the touch commands so just write touch read me dot M D which is the readme file name and then press ENTER and do LS and you can see this readme dot MD is created and to edit this I'm going to just write G edit G edit is the editor you can choose any editor you want and then the file name which is readme dot MD and once this editor is open I will just copy and paste some readme content into this readme dot MD file and now I'm going to just give the gate status command so just give the state status and you can see this there is one file which is untracked so we are going to add this to the gate first of all so get add and the file name once again and then I'm going to commit this file once again do the gate status and then let's get commit so get commit minus M and in the message you can just write read me added and then the file which you want to commit which is readme dontoh MD and then press enter and now we just need to push our changes to github and for that we will use the gate Porsche you origin/master command and then press enter and this will push our changes to github and once again give the github credentials and the password and then press enter and our changes are pushed to github so you can see here that this readme file is there and all the content of readme file is visible now and on the Jenkins job when i refresh this you will see this third job is triggered and you can see it's working so you can just click on the third job and I will go to the console output and you can see it's just say started by SCM change which means it is started by the change in our repository which is pulled every minute and once this change is detected then it's going to start the cloning of your git repository and your Jenkins job will be billed after that so this was the option to pull your a github repository every one minute and if the changes are detected then it's going to trigger the build and your Jenkins job will be executed so this is how you can integrate git and github with Jenkins I hope you enjoyed this video please rate comment subscribe and bye for now
