With timestamps:

00:00 - hey guys welcome to programming
00:01 - knowledge in this video we'll be looking
00:03 - at erase so till now we have been
00:06 - working with programs where we already
00:09 - knew the number of inputs right so we
00:11 - knew the space required for our programs
00:14 - to work and all the stuff so let's
00:16 - consider a program where we don't know
00:19 - how many inputs we need to store so
00:21 - something like this this is a code
00:24 - snippet which is basically taking in
00:26 - records let's say student records so
00:29 - every student has a name and age and
00:31 - then the user gets filtered how many
00:33 - records he wants to enter and then we
00:35 - are going to take in the records now if
00:37 - you run this program you can see that
00:40 - the program doesn't so if I say I want
00:44 - to enter 3 records it's going to take in
00:46 - 3 records so a1 to c3 so you can see
00:50 - that the records are taken successfully
00:53 - but if you look at this more closely you
00:57 - see that those records are not getting
00:59 - saved anywhere right those things are
01:01 - just getting overwritten every time now
01:05 - there is no way that we know how many
01:08 - records the user is going to enter it it
01:10 - completely depends on the user so how
01:13 - are we actually going to store all the
01:15 - records we can only store the last
01:17 - record in this way but all the previous
01:20 - records are getting lost rate so how can
01:23 - we tour all the data so that no data is
01:26 - lost and also we don't limit the number
01:30 - of records and the user gets to enter as
01:33 - many records as you want so it turns out
01:36 - that you cannot define the number of
01:38 - variables or know the space you want at
01:41 - runtime but you can define a collection
01:44 - of space in Wrentham so let me
01:46 - illustrate to you what I mean so let's
01:50 - say the user wants to enter some number
01:53 - of records let's say 5 records so if you
01:58 - consider this white space as the
02:00 - computer's memory so what will be
02:03 - effectively doing this will be creating
02:06 - collections of variables so we have two
02:08 - variables over here right so we have one
02:10 - name
02:11 - and then you have an age right so what
02:14 - you'll be doing is instead of creating
02:17 - different variables like name one name
02:19 - two and so on we will be creating a
02:22 - collection of variables something like
02:24 - thirst and then inside this collection
02:26 - what we will be doing is we will be
02:28 - separating this collection I mean we'll
02:30 - be creating partitions inside this
02:32 - collection so let's say the user wants
02:35 - to enter fire records so what we do is
02:37 - we create a collection and then make
02:39 - five partitions into it so you have five
02:42 - partitions over here so all of them are
02:44 - obviously they are of the same size and
02:47 - then age also you will be giving five
02:49 - partitions so like this right so now
02:55 - what happens is once the user gets to
02:57 - enter the records you will be entering
03:00 - into that particular area which is
03:03 - assigned for every particular record so
03:06 - let's say for the first record you
03:07 - entered the data into the first box and
03:09 - then for the second record you enter it
03:11 - into the second partition for the third
03:14 - record you enter it in the third
03:16 - partitions and so on so this particular
03:18 - kind of process you will continue so
03:22 - that you can enter all the records and
03:24 - then you can also access this records by
03:26 - just accessing the partitions right so
03:28 - this is how arrays work well arias
03:31 - literally mean collection of objects and
03:34 - that is what it means in programming too
03:37 - so what you are basically doing is intro
03:39 - love creating n number of variables you
03:42 - will just create this memory space which
03:44 - is capable of holding a number of
03:46 - variables and you create partitions into
03:48 - it so once you create partitions you can
03:51 - add data into it and then it you can
03:54 - retrieve it you can perform operations
03:56 - on it just like variables so basically
03:58 - you can think of array is a collection
04:00 - of variables but it's not actually a
04:02 - collection of variables it's just a
04:04 - collection of memory so if you take this
04:08 - particular array if you take the size of
04:10 - this particular array you will see that
04:12 - it is nothing but the number of elements
04:16 - inside it so in this case five into the
04:19 - size of each element a type inside this
04:21 - so the size of each integer is 4 bytes
04:24 - so this
04:25 - this particular array is going to be 20
04:28 - bytes so you can see that array is
04:31 - nothing but just a collection of memory
04:33 - or you can say collection of variables
04:35 - and then you can add and retrieve it as
04:38 - you like so let's see how to implement
04:40 - this particular ideology in programming
04:44 - so to implement an array of what you
04:47 - need to do is you need to declare an
04:49 - array so how do we declare an array in
04:52 - C++ we don't have to do anything we just
04:54 - need to put square brackets so that this
04:57 - particular variable is addressed as an
05:00 - array by the compiler and then inside
05:02 - this particular brackets you need to
05:05 - specify the number of items array should
05:08 - be capable of holding so in our case we
05:11 - are going to get the number of Records
05:12 - right so if you give n records you are
05:15 - going to have n names and n ages
05:17 - so the size of our area is nothing but
05:19 - the number of Records right so what you
05:22 - do is you just mention the size inside
05:25 - the square brackets so for h2 you are
05:27 - going to do the same thing so eight
05:29 - records and then over here what we'll be
05:31 - doing is instead of name we'll be
05:34 - accessing the partition now how do we
05:37 - access the partition of an array so for
05:40 - accessing the I H partition or the IH
05:45 - segment of the array or you can say the
05:47 - I 8 variable which is stored inside the
05:49 - collection you need to access it as the
05:52 - name of the array so again name and then
05:55 - inside pair of square brackets you need
05:57 - to specify the index where this
06:00 - particular index is nothing but I minus
06:03 - 1 so let's say you want access the first
06:05 - partition of theory so for the first
06:07 - partition you need to give index as I
06:10 - minus 1 which is equal to 0 so for the
06:13 - second one you need to view the index of
06:15 - 1 and so on so for the end partition you
06:18 - will be effectively giving n minus 1 as
06:20 - your index so that is why if you
06:22 - remember I generally start loops from 0
06:25 - because it it becomes easier to work
06:28 - with arrays if you are working with
06:30 - loops which are starting from 0 because
06:33 - of this particular rule because the
06:35 - index of an array starts from 0 so I
06:38 - don't
06:39 - to separate one from the counter every
06:42 - time I can directly in access the
06:45 - partition by just calling the counter
06:47 - now to access the particular partition
06:50 - you don't have to do anything you just
06:52 - need to put the square bracket over here
06:53 - and then access the partition so since
06:56 - I'm using a counter over here I'm
06:58 - directly going to access it by the
06:59 - counter and the same thing over here too
07:02 - right now how do they retrieve it
07:06 - well retrieving also follow the same
07:08 - rules so you need to pass the erase name
07:11 - and then the index which is nothing but
07:13 - I minus one if you want to access the
07:15 - partition so let's say we ask the user
07:19 - to retrieve some record let's say which
07:21 - record or do you want to retrieve and
07:29 - then the user in terms of my code so
07:31 - let's say entra code so he wants to put
07:34 - it Reeve the entry code so we'll be
07:36 - getting the enth record as our input and
07:38 - then what you need to do is you just
07:40 - need to access the nth record as the N
07:43 - minus one it's the same rule and then
07:46 - put an M and then that goes in for the
07:49 - h2 we just need to access it by n minus
07:53 - 1 and then if you done it so let me just
07:55 - put the end line over here so here you
07:57 - can see that if I enter some records
08:00 - let's see a 1 B 2 C 3 and then if I want
08:04 - to retrieve the second record you see
08:06 - that the name is B and then digester so
08:09 - that's how it is as a recap arrays are
08:11 - nothing but a collection of memory or
08:14 - you can say collection of variables
08:16 - where you can store and riku variables
08:18 - as you wish so now what all variations
08:23 - can you do with an array well it turns
08:25 - out that you not only can store
08:29 - collection of variables but you can
08:31 - store collections of collections too so
08:34 - that is basically the dimensions of an
08:36 - area so dimension
08:39 - basically means collection of
08:42 - collections so basically if I am saying
08:45 - that an array is one dimension so if I
08:48 - say that array is one dimension it
08:50 - basically means justing
08:52 - it it holds the collection now if I say
08:57 - that an array is two-dimensional then
09:01 - what it means it it holds a collection
09:04 - of collections so how do we define this
09:08 - we just put a little bit of square
09:09 - brackets over here and then define the
09:11 - second dimension so this is nothing but
09:13 - a matrix if you're familiar with fishes
09:17 - you have some array of numbers and so 1
09:19 - 2 3 4 5 6 8 9 so if you observe this
09:22 - this whole thing is a collection and
09:25 - three such collections form this
09:28 - particular matrix so how can you define
09:30 - this you can just define this as a 3
09:32 - cross 3 array right so if you say this
09:36 - particular thing is a matrix so let's
09:38 - say this is matrix M which is equal to
09:41 - this thing so if this particular matrix
09:44 - is this one then it is nothing but a 3
09:47 - cross 3 matrix right and the way it is
09:49 - defined in the memories you have this
09:51 - particular collection where inside each
09:55 - collection you have 3 items so 1 2 3 is
09:57 - one collection 4 5 6 is another
10:00 - collection and then 7 8 9 is another
10:02 - collection and all three form the
10:04 - overall collection so this is how your
10:07 - variable mat is actually defined in the
10:11 - memory well you don't have to always
10:14 - take in input inside an array from the
10:17 - user you can even define the inputs so
10:19 - how do we define it well to define
10:22 - inputs you just need to put a pair of
10:24 - curly braces and then define your data
10:27 - so let me just clear this and we'll take
10:30 - some generic examples so let's see our
10:35 - array this a 3 cross 3 array so let's
10:40 - just define that matrix which we talked
10:42 - about so how do we define them first we
10:44 - find an overall collection and inside
10:47 - this collection they are going to be
10:49 - three collections so one collection is 1
10:51 - 2 3 and then you have the second
10:54 - collection as 4 5 6 and then the third
10:58 - collection as 7 8 9 so this overall
11:03 - makes 3 by 3 matrix so if you want
11:05 - actually
11:06 - you can access it using loops so for INT
11:08 - i equal to 0 is less than 3 I plus place
11:13 - and then you need to run another loop
11:15 - for accessing the inner collection so
11:17 - for in J equal to 0 J is less than 3 J
11:21 - plus plus you can just show that element
11:24 - so a of I comma J right it's just your
11:28 - space over here and then a new line
11:31 - after you so that it looks like a matrix
11:34 - if I run this so I forgot to put a come
11:39 - over here yeah so here you can see how 3
11:44 - cross 3 matrix is defined well you can
11:47 - have collections of collections of
11:49 - collection so that is basically a
11:50 - three-dimensional array you can go up to
11:53 - any dimension in it is more limited you
11:56 - can have as many collections of
11:59 - collections and it completely depends
12:02 - upon your problem so mostly we tend to
12:04 - use this kind of collection which is the
12:07 - matrix and then the single dimensional
12:10 - array which is nothing but just a
12:12 - collection of data
12:13 - well another point you note that is
12:16 - these collections cannot contain mixed
12:18 - data that is you cannot have both
12:21 - integers and strings in one body so in
12:25 - an array what happens is that particular
12:28 - array will contain data or will contain
12:31 - a collection of data of only that
12:33 - particular datatype
12:35 - you cannot change the data type or you
12:37 - cannot have mixed data inside one
12:40 - particular collection so that's how you
12:42 - work with arrays in C++ you can also
12:45 - pass in arrays to a function but always
12:47 - erase will be passed as a reference not
12:50 - acceptable you so if you I create a
12:53 - function over here let's say in funk
12:56 - which just takes in the array so int a
12:59 - and then you need not define the
13:01 - dimensions if it's just a single
13:03 - dimension you can just leave it as a
13:04 - square bridge and if it is
13:06 - multi-dimensional then you need to
13:09 - define the last dimension of the array
13:11 - so let's say you are passing a 3
13:13 - dimensional array so then you need to
13:15 - define the last dimension which is the
13:18 - third dimension
13:19 - and certainly you cannot omit this
13:21 - dimension and if you are passing this
13:23 - particular area which is a 2-dimension
13:25 - area you need to pass the second
13:26 - dimension which is three you can leave
13:28 - this or you can define this it really
13:30 - doesn't matter but if you are passing
13:33 - summary which is not single dimensional
13:36 - then you need to pass the large
13:38 - dimension of that particularly so now
13:41 - let us just define this function let's
13:44 - say a point I will do anything we just
13:46 - stopped print the first element of the
13:50 - array so is zero zero this is the first
13:52 - element and then what we'll do is we
13:55 - will change the Tilghman so we change a
13:58 - zero zero equal to five right and then I
14:02 - will just return some things let's say
14:05 - we'll skip this written we'll just make
14:08 - this void so this so void function right
14:11 - now if I call this function so if I just
14:14 - have fun and then pass him a and then we
14:19 - when printing the first element after
14:21 - running this particular function so
14:23 - let's just put in lemons over here so
14:26 - that we can differentiate between the
14:27 - output so one over here and then one
14:29 - over here and now if I run this
14:31 - particular program you will see that the
14:35 - value of a 0 0 was 1 which is nothing
14:38 - but this particular element and then if
14:41 - I change that value over here I could
14:43 - change it over here too so in the main
14:45 - thing also it change so that experience
14:48 - that arrays are not passed by value by
14:51 - they are passed by reference so arrays
14:53 - don't get copied when you pass them to a
14:55 - function but that changed in a memory so
14:59 - what you're essentially doing is you are
15:02 - just passing a pointer will be
15:03 - discussing pointer at a later stage but
15:06 - what first point is basically meanors
15:09 - they are nothing but those are variables
15:11 - which carry addresses will discuss more
15:13 - about pointers at a later age but for
15:16 - now this is how we use erase and C++ and
15:20 - in the next video we'll make our first
15:24 - programming project right so it is going
15:27 - to be a very small project they'll try
15:29 - to understand all the concepts which we
15:31 - learnt till now it's going to be
15:33 - really fun project and you can share
15:35 - with your friendship so looking forward
15:37 - for that particular project and see you
15:39 - in the next video till then happy coding

Cleaned transcript:

hey guys welcome to programming knowledge in this video we'll be looking at erase so till now we have been working with programs where we already knew the number of inputs right so we knew the space required for our programs to work and all the stuff so let's consider a program where we don't know how many inputs we need to store so something like this this is a code snippet which is basically taking in records let's say student records so every student has a name and age and then the user gets filtered how many records he wants to enter and then we are going to take in the records now if you run this program you can see that the program doesn't so if I say I want to enter 3 records it's going to take in 3 records so a1 to c3 so you can see that the records are taken successfully but if you look at this more closely you see that those records are not getting saved anywhere right those things are just getting overwritten every time now there is no way that we know how many records the user is going to enter it it completely depends on the user so how are we actually going to store all the records we can only store the last record in this way but all the previous records are getting lost rate so how can we tour all the data so that no data is lost and also we don't limit the number of records and the user gets to enter as many records as you want so it turns out that you cannot define the number of variables or know the space you want at runtime but you can define a collection of space in Wrentham so let me illustrate to you what I mean so let's say the user wants to enter some number of records let's say 5 records so if you consider this white space as the computer's memory so what will be effectively doing this will be creating collections of variables so we have two variables over here right so we have one name and then you have an age right so what you'll be doing is instead of creating different variables like name one name two and so on we will be creating a collection of variables something like thirst and then inside this collection what we will be doing is we will be separating this collection I mean we'll be creating partitions inside this collection so let's say the user wants to enter fire records so what we do is we create a collection and then make five partitions into it so you have five partitions over here so all of them are obviously they are of the same size and then age also you will be giving five partitions so like this right so now what happens is once the user gets to enter the records you will be entering into that particular area which is assigned for every particular record so let's say for the first record you entered the data into the first box and then for the second record you enter it into the second partition for the third record you enter it in the third partitions and so on so this particular kind of process you will continue so that you can enter all the records and then you can also access this records by just accessing the partitions right so this is how arrays work well arias literally mean collection of objects and that is what it means in programming too so what you are basically doing is intro love creating n number of variables you will just create this memory space which is capable of holding a number of variables and you create partitions into it so once you create partitions you can add data into it and then it you can retrieve it you can perform operations on it just like variables so basically you can think of array is a collection of variables but it's not actually a collection of variables it's just a collection of memory so if you take this particular array if you take the size of this particular array you will see that it is nothing but the number of elements inside it so in this case five into the size of each element a type inside this so the size of each integer is 4 bytes so this this particular array is going to be 20 bytes so you can see that array is nothing but just a collection of memory or you can say collection of variables and then you can add and retrieve it as you like so let's see how to implement this particular ideology in programming so to implement an array of what you need to do is you need to declare an array so how do we declare an array in C++ we don't have to do anything we just need to put square brackets so that this particular variable is addressed as an array by the compiler and then inside this particular brackets you need to specify the number of items array should be capable of holding so in our case we are going to get the number of Records right so if you give n records you are going to have n names and n ages so the size of our area is nothing but the number of Records right so what you do is you just mention the size inside the square brackets so for h2 you are going to do the same thing so eight records and then over here what we'll be doing is instead of name we'll be accessing the partition now how do we access the partition of an array so for accessing the I H partition or the IH segment of the array or you can say the I 8 variable which is stored inside the collection you need to access it as the name of the array so again name and then inside pair of square brackets you need to specify the index where this particular index is nothing but I minus 1 so let's say you want access the first partition of theory so for the first partition you need to give index as I minus 1 which is equal to 0 so for the second one you need to view the index of 1 and so on so for the end partition you will be effectively giving n minus 1 as your index so that is why if you remember I generally start loops from 0 because it it becomes easier to work with arrays if you are working with loops which are starting from 0 because of this particular rule because the index of an array starts from 0 so I don't to separate one from the counter every time I can directly in access the partition by just calling the counter now to access the particular partition you don't have to do anything you just need to put the square bracket over here and then access the partition so since I'm using a counter over here I'm directly going to access it by the counter and the same thing over here too right now how do they retrieve it well retrieving also follow the same rules so you need to pass the erase name and then the index which is nothing but I minus one if you want to access the partition so let's say we ask the user to retrieve some record let's say which record or do you want to retrieve and then the user in terms of my code so let's say entra code so he wants to put it Reeve the entry code so we'll be getting the enth record as our input and then what you need to do is you just need to access the nth record as the N minus one it's the same rule and then put an M and then that goes in for the h2 we just need to access it by n minus 1 and then if you done it so let me just put the end line over here so here you can see that if I enter some records let's see a 1 B 2 C 3 and then if I want to retrieve the second record you see that the name is B and then digester so that's how it is as a recap arrays are nothing but a collection of memory or you can say collection of variables where you can store and riku variables as you wish so now what all variations can you do with an array well it turns out that you not only can store collection of variables but you can store collections of collections too so that is basically the dimensions of an area so dimension basically means collection of collections so basically if I am saying that an array is one dimension so if I say that array is one dimension it basically means justing it it holds the collection now if I say that an array is twodimensional then what it means it it holds a collection of collections so how do we define this we just put a little bit of square brackets over here and then define the second dimension so this is nothing but a matrix if you're familiar with fishes you have some array of numbers and so 1 2 3 4 5 6 8 9 so if you observe this this whole thing is a collection and three such collections form this particular matrix so how can you define this you can just define this as a 3 cross 3 array right so if you say this particular thing is a matrix so let's say this is matrix M which is equal to this thing so if this particular matrix is this one then it is nothing but a 3 cross 3 matrix right and the way it is defined in the memories you have this particular collection where inside each collection you have 3 items so 1 2 3 is one collection 4 5 6 is another collection and then 7 8 9 is another collection and all three form the overall collection so this is how your variable mat is actually defined in the memory well you don't have to always take in input inside an array from the user you can even define the inputs so how do we define it well to define inputs you just need to put a pair of curly braces and then define your data so let me just clear this and we'll take some generic examples so let's see our array this a 3 cross 3 array so let's just define that matrix which we talked about so how do we define them first we find an overall collection and inside this collection they are going to be three collections so one collection is 1 2 3 and then you have the second collection as 4 5 6 and then the third collection as 7 8 9 so this overall makes 3 by 3 matrix so if you want actually you can access it using loops so for INT i equal to 0 is less than 3 I plus place and then you need to run another loop for accessing the inner collection so for in J equal to 0 J is less than 3 J plus plus you can just show that element so a of I comma J right it's just your space over here and then a new line after you so that it looks like a matrix if I run this so I forgot to put a come over here yeah so here you can see how 3 cross 3 matrix is defined well you can have collections of collections of collection so that is basically a threedimensional array you can go up to any dimension in it is more limited you can have as many collections of collections and it completely depends upon your problem so mostly we tend to use this kind of collection which is the matrix and then the single dimensional array which is nothing but just a collection of data well another point you note that is these collections cannot contain mixed data that is you cannot have both integers and strings in one body so in an array what happens is that particular array will contain data or will contain a collection of data of only that particular datatype you cannot change the data type or you cannot have mixed data inside one particular collection so that's how you work with arrays in C++ you can also pass in arrays to a function but always erase will be passed as a reference not acceptable you so if you I create a function over here let's say in funk which just takes in the array so int a and then you need not define the dimensions if it's just a single dimension you can just leave it as a square bridge and if it is multidimensional then you need to define the last dimension of the array so let's say you are passing a 3 dimensional array so then you need to define the last dimension which is the third dimension and certainly you cannot omit this dimension and if you are passing this particular area which is a 2dimension area you need to pass the second dimension which is three you can leave this or you can define this it really doesn't matter but if you are passing summary which is not single dimensional then you need to pass the large dimension of that particularly so now let us just define this function let's say a point I will do anything we just stopped print the first element of the array so is zero zero this is the first element and then what we'll do is we will change the Tilghman so we change a zero zero equal to five right and then I will just return some things let's say we'll skip this written we'll just make this void so this so void function right now if I call this function so if I just have fun and then pass him a and then we when printing the first element after running this particular function so let's just put in lemons over here so that we can differentiate between the output so one over here and then one over here and now if I run this particular program you will see that the value of a 0 0 was 1 which is nothing but this particular element and then if I change that value over here I could change it over here too so in the main thing also it change so that experience that arrays are not passed by value by they are passed by reference so arrays don't get copied when you pass them to a function but that changed in a memory so what you're essentially doing is you are just passing a pointer will be discussing pointer at a later stage but what first point is basically meanors they are nothing but those are variables which carry addresses will discuss more about pointers at a later age but for now this is how we use erase and C++ and in the next video we'll make our first programming project right so it is going to be a very small project they'll try to understand all the concepts which we learnt till now it's going to be really fun project and you can share with your friendship so looking forward for that particular project and see you in the next video till then happy coding
