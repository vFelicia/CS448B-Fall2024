With timestamps:

00:00 - we are going to start with a new
00:01 - tutorial on ruby so basically ruby is a
00:05 - programming language
00:07 - so like ruby has been used a lot in the
00:10 - programming world and it is one of the
00:12 - most important languages so
00:14 - we are going to start with like some
00:16 - basics of ruby and then we are going to
00:18 - move on uh like a framework on ruby that
00:22 - is rails so basically that is properly
00:24 - known as ruby on rails so initially we
00:26 - will start with the installation part
00:28 - and then we are going to proceed and
00:30 - enhance ourselves to the ruby on sales
00:33 - framework so basically the to be honest
00:36 - like ruby is a programming
00:37 - programming language and ruby on sales
00:40 - is a framework based on
00:42 - ruby language which is used on web
00:45 - development like basically to use as a
00:47 - backend framework so you can create your
00:49 - own packet framework and then you can
00:51 - extend it to like front end as well
00:53 - using erbs so today first you'll start
00:56 - we're going to start with the basics of
00:57 - ruby and then we are going to continue
01:00 - with it so to install ruby on your
01:02 - machine you can move to this website
01:04 - this website is known as ruby installer
01:06 - for windows so basically you can
01:08 - download click on the download button
01:10 - here
01:11 - and then you will have all the versions
01:13 - so
01:14 - so make sure you install one with the
01:16 - dev kit so it will uh help you so you
01:19 - can install ruby with the dev kit and
01:21 - you can click on like this is like uh
01:23 - you can click on any
01:25 - and depending on your requirement like
01:28 - the 32-bit and 64-bit you can install it
01:31 - so
01:32 - uh like i had downloaded the one which
01:34 - is at the top so you can also download
01:37 - and
01:38 - when you download you will get an
01:39 - installer which will uh like take some
01:41 - time to install
01:42 - and then uh like it's a very like that's
01:45 - very easy process to install it will
01:47 - keep on installing and when you will
01:51 - install this installer then you can move
01:54 - ahead with the stock so this is another
01:56 - like uh website you can refer this so
01:59 - this is like a ruby dot org
02:01 - so you can also refer to this website
02:04 - okay
02:05 - then you can like these are the two
02:07 - documentations you can refer
02:09 - and this is how we like uh yeah so
02:13 - let's uh move on to the tutorial so
02:15 - after like moving to the installation
02:17 - and documentation you can start running
02:19 - some blue programs on your machine so we
02:22 - will initially start with them so i'll
02:24 - show you how you can create one and run
02:26 - one so let's move to the programming
02:28 - part so this is my vs code editor so
02:32 - like i have created a folder with the
02:34 - name ruby so
02:35 - ruby
02:36 - basically what you can do first you have
02:38 - a command line here
02:40 - so what you can do
02:42 - so
02:43 - you can create a file new file and you
02:46 - can type hello
02:48 - dot rb so basically ruby files are run
02:52 - with this
02:53 - uh extension and then you can uh
02:56 - uh yeah so basically now i'm inside this
03:00 - folder which has a header.rb file to
03:04 - make sure you have installed ruby on
03:06 - your machine you can type ruby minus v
03:09 - okay so ruby minus v would give me the
03:11 - like the version which i have installed
03:13 - and it's perfectly fine okay now now
03:16 - first we are going to create a hello
03:17 - world ruby program okay so what we're
03:21 - going to do
03:22 - we are going to like first clear this
03:25 - so now we are going to do
03:27 - put s
03:28 - hello world
03:30 - okay so this would like put as hello
03:33 - world would create the ruby program now
03:34 - to run the ruby program what you need to
03:36 - do ruby
03:38 - hello dot rb so this would like to run
03:41 - the program on your machine so this
03:43 - gives the output hello world
03:45 - so we will start with some few basics
03:48 - like one is like creating the variables
03:51 - so this is like a is equal to one okay
03:54 - uh b is equal to two
03:56 - and we are going to do
03:58 - uh what uh okay i'll show you one thing
04:01 - and we are going to put this in a
04:02 - variable a a plus b c
04:05 - c is equal to a plus b and we are going
04:07 - to put sc
04:09 - so uh first i'll run this and i'll show
04:12 - you how this works so it works perfectly
04:14 - fine
04:14 - uh but if you want to do some like
04:16 - string formatting so what you can do you
04:18 - can put like this
04:20 - and you can do
04:22 - the sum of
04:26 - a okay the sum of a plus b
04:31 - is equal to c
04:33 - okay okay first i'll run this program
04:35 - and i'll show you what i'll do i'll run
04:37 - this
04:38 - again i'll clear this and i'll run this
04:41 - so here you see the sum of a plus b is
04:43 - equal to c this doesn't satisfy our
04:45 - condition so again it will apply string
04:46 - formatting for what for that what you
04:49 - can do you can put a hash symbol and put
04:51 - them inside a curly braces
04:54 - so this would get the value of that
04:56 - particular variable okay
04:58 - now it will format inside the string and
05:00 - now you can run this
05:02 - now the sum of 1 plus 2 is equal to 3 so
05:05 - this is how we achieve it so it was a
05:07 - good example
05:08 - there's another statement in ruby i'll
05:10 - show you which says print
05:13 - print hello
05:15 - world
05:16 - okay
05:17 - uh and i'll clear this again and i'll
05:19 - run this program
05:21 - yeah so it says hello world okay
05:23 - different between what is the difference
05:24 - between the print and for testing okay
05:27 - i'll do another statement first okay
05:31 - okay uh first i'll do put s
05:34 - first line
05:36 - put s
05:39 - uh i'll do second line
05:42 - okay
05:44 - uh now i'll make sure that i clear this
05:46 - uh screen
05:48 - yeah now i'll do
05:51 - first line second line so this is the
05:52 - output perfectly fine
05:54 - okay uh now i'll do another one
05:58 - sorry
06:00 - now i'll do print
06:04 - first line
06:08 - and i'll do another one print second
06:10 - line
06:11 - so the print second line
06:13 - would like what i'll do i'll clear this
06:17 - and i'll run so it's it here you can see
06:19 - it doesn't give a line break okay to
06:21 - achieve that you can put a slash in here
06:25 - okay now i'll run this
06:30 - now we can see we got the same statement
06:32 - as like put a statement so basically i
06:34 - just wanted to tell you that
06:36 - put statements always gives a line break
06:39 - so whatever you type it would
06:40 - automatically give give the slash n or a
06:42 - line break to the next line but print
06:45 - statement doesn't give that so this is
06:46 - the only difference between the test
06:48 - statement and printer segment
06:50 - okay so we can do one some uh like more
06:52 - things uh in ruby like the first uh like
06:55 - the before we move to some conditions
06:57 - like first we make a let's make a simple
06:59 - function so let's make a function define
07:01 - add
07:02 - okay and it will take two variables a
07:05 - comma b okay
07:07 - now
07:08 - since this is ruby uh you don't need
07:10 - like
07:11 - uh you might be thinking that this looks
07:13 - like python in a python we have a column
07:15 - symbol here okay uh but here it is not
07:18 - needed okay so like you can remove this
07:21 - so it'll say to throw and we need to end
07:23 - the function with this
07:26 - okay so the body of function will lie in
07:28 - between okay so it says
07:31 - either you can do return a plus b
07:33 - like simple or you can do protest a plus
07:36 - b
07:36 - so let's do this like for the simplicity
07:39 - let's uh
07:40 - what we can do
07:42 - uh we can store this in a variable c a
07:45 - plus b
07:46 - and now
07:48 - what we can do
07:49 - we can put s c
07:51 - okay
07:52 - uh then we can like call the function
07:54 - add with two comma three 2 comma
07:59 - 7
08:00 - and it should work fine
08:04 - so here we got the 519 uh we could also
08:07 - do that like uh so this is we could also
08:10 - return the statement
08:12 - a
08:14 - a plus b
08:15 - and we could get the return value here
08:19 - like result
08:22 - result is equal to add a comma b
08:24 - result
08:28 - and
08:28 - what we can do we can do
08:32 - put s
08:33 - result
08:34 - here and call the same statement here
08:38 - so it should work fine also and this is
08:40 - how the return statement also works in
08:42 - ruby
08:43 - so this is good so we like learned how
08:46 - to create functions like in ruby and
08:49 - like we made a good progress so far
08:51 - uh we can
08:52 - also create a swap function in ruby is
08:55 - in one line like i'll show you a is
08:57 - equal to 5
08:59 - b is equal to 10
09:01 - okay now i'll do put s a comma b will
09:06 - this
09:06 - work okay we'll check this so it works
09:10 - perfectly fine put s a comma b okay
09:12 - uh i'll use print okay this would give
09:15 - you better clarity
09:18 - now here you can see print s
09:20 - yeah like print a comma b so
09:23 - okay i'll give space
09:32 - okay
09:33 - so this is fine
09:37 - so right now we have two variables a
09:39 - comma b with the value 5 and 10 now what
09:41 - we're going to do
09:42 - we are going to repeat this statement
09:44 - but before repeat we are going to do a
09:46 - comma b
09:47 - is equal to b comma a
09:49 - okay so
09:51 - this is like we are going to clear this
09:52 - and run it again so
09:54 - okay
09:55 - yeah so i need to give a slash in
09:57 - statement here
10:03 - so here you can see 5 comma 10 has been
10:05 - placed to 10 comma 5 so basically in
10:07 - ruby this is also a valid statement x
10:09 - comma y
10:10 - comma z
10:12 - is equal to 1 comma 2 comma 3 okay and
10:15 - when i do
10:16 - print print x
10:20 - okay
10:21 - print y uh
10:23 - okay i'll do this
10:26 - okay now i can remove this code since
10:28 - this is needed
10:30 - print x okay print y
10:34 - and print set
10:37 - so this is a valid statement in ruby now
10:39 - i'll run this
10:42 - so here you can see this is also valid
10:44 - so this is good so we can assign values
10:46 - using comma using comma and separating
10:48 - them we are going to start some with
10:50 - some conditions and operators so let's
10:52 - start with a tutorial so basically
10:55 - we are going to create two variables a
10:58 - is equal to 100
11:00 - b is equal to 50
11:04 - and now we are going to define put s a
11:07 - plus b
11:09 - okay the we are going to i'm going to
11:11 - repeat these four statements so this is
11:13 - put as a plus b this is put a minus b
11:16 - this is put as a by b
11:19 - and this is put as a multiplied by b and
11:21 - the last one is going to put as a modulo
11:24 - b
11:25 - so let's run this file ruby
11:28 - conditions and operators or rb so we get
11:30 - all the result the addition takes it to
11:32 - 150 minus takes a 50 a by b 2 and this
11:36 - is 5 000 and this is model this is zero
11:39 - so this is fine
11:41 - okay and now let's start with some
11:44 - conditions some basic condition so
11:47 - so let's take with uh
11:51 - so let's create a variable
11:53 - and try to give this a value true
11:56 - and
11:57 - false
11:59 - and let's put sc
12:01 - okay so let's remove this yeah so this
12:04 - is false okay
12:06 - uh let's change this to or operator
12:11 - and let's run this file again
12:15 - okay here
12:17 - now this is true so
12:19 - you must be clear with all the
12:21 - conditions like how this kind of player
12:22 - 2 works in our operator was so this is
12:24 - fine go now
12:26 - and now what we can do
12:29 - we can like this is perfectly these are
12:31 - some basic conditions now let's create
12:32 - some if conditions
12:34 - so for if conditions let's create a
12:38 - a grade
12:40 - we'll give this a value if grade
12:43 - greater than equal to 90
12:45 - then put s
12:47 - a plus
12:49 - else
12:50 - uh this sn
12:52 - so
12:53 - else if so please make a note of this e
12:56 - l s i f else
12:58 - if grade is less than
13:00 - equal to 89
13:03 - okay now then i will do this then is
13:04 - greater than equal to 80 and
13:07 - okay and grade less than equal to 89 so
13:12 - this this
13:13 - it lies in this range
13:16 - so
13:18 - we do
13:19 - put s
13:22 - b or we can assign it a
13:25 - else
13:27 - else put s
13:31 - b
13:32 - plus l uh and then we need to end this
13:36 - if condition so i'll just make a like
13:38 - these are three conditions if else else
13:41 - so we will give values to it and see how
13:43 - this condition was let's give the grade
13:45 - equal to 99
13:48 - so okay a small stick okay yeah i like
13:52 - this blue coat looks very intuitive to
13:54 - python so you don't need a semicolon a
13:56 - colon here okay so let's run this
14:00 - and here we are aboard it a plus
14:03 - now let's give it a 85
14:07 - let's give it a value 85
14:10 - now let's run this
14:13 - now it is a and now let's give it a
14:15 - value 75 and it should move to the else
14:18 - part
14:19 - okay now let's run this
14:22 - and it is b plus so this is how we make
14:25 - conditions now let's move to the like
14:27 - while loop
14:29 - so for that we can define a variable a 0
14:33 - so while i less than equal to 10
14:37 - okay
14:38 - so simply put s i
14:41 - and make sure you increment the i else
14:43 - it is in an infinite loop
14:46 - okay and now let's run this
14:48 - okay yeah so you need to end this loop
14:51 - here okay so
14:53 - i was going with some speed so
14:56 - yeah
14:57 - so this is how a while loop works okay
15:00 - now
15:02 - uh you can also
15:05 - work with for loop so there are two ways
15:08 - to work on a for loop
15:09 - so before we work on for loop i would
15:12 - like to show you the
15:14 - case statement
15:16 - okay
15:17 - the case statement is very much similar
15:20 - okay so okay what i'll do first i'll
15:22 - move with the like for loop so because i
15:24 - did the while loop first so
15:26 - uh then i'll move to case statement in
15:28 - ruby okay so basically case statement in
15:31 - the ruby are similar to switch
15:32 - statements okay
15:34 - so let's move to okay before we move
15:37 - i'll do word and print this i'll show
15:39 - you one a range operator range operators
15:41 - is denoted by double dots and there's a
15:44 - small difference with one dot two dot
15:46 - three dots like there's a difference
15:47 - between i'll show you what how
15:49 - see when i do put s
15:52 - put s range of
15:56 - 1 200 okay
16:00 - okay so i'll show you
16:05 - okay
16:11 - now i'll show you
16:16 - so yeah
16:17 - so i just forgot to lick this is to
16:19 - underscore array so it says
16:22 - i'll convert this range 100 to an array
16:26 - and here you see i have two dots okay so
16:29 - in these two dots here you can see this
16:31 - one too i'll show you a small
16:34 - like i
16:35 - i'll show you a small one yeah i know
16:36 - it's fine
16:37 - i'll do this
16:41 - now here you can see the value is from
16:43 - one to ten increases of inclusive of 10
16:46 - the 10 is here when i put an extra dot
16:48 - here
16:49 - so 10 will not be included see
16:53 - so here you can see the last value has
16:56 - been excluded so it is because of the
16:58 - like extra dot so this is how it works
17:00 - okay
17:01 - so
17:02 - like this is what you can use this to
17:05 - work in
17:06 - like a
17:08 - for loop
17:09 - so for i
17:12 - in
17:13 - 1 to 2 10
17:16 - okay
17:17 - and you can do put s
17:21 - i
17:22 - okay
17:24 - so let's clear this
17:30 - okay you need to end this for loop like
17:32 - i
17:32 - uh
17:34 - what to do that
17:38 - and this is how a for loop works with
17:40 - the full range okay
17:42 - now let's move to case statement in ruby
17:45 - so
17:46 - so what you can do
17:48 - the very first example the one with for
17:51 - which we made the great we'll do this
17:52 - with the grid okay so we'll take a
17:54 - variable grade
17:55 - and this time we are going to define
17:57 - case grade and uh i'll first try i'll
18:00 - automatically end this before i forget
18:01 - this so case grade now what i'm going to
18:04 - do
18:06 - uh
18:07 - when
18:09 - one
18:13 - so k is great and when when this crate
18:17 - is less than is greater than equal to 90
18:20 - then i put s
18:21 - a play a plus
18:23 - okay
18:24 - when
18:26 - this grade
18:29 - how
18:30 - great is
18:32 - greater than equal to 80
18:36 - and
18:37 - grade
18:39 - less than equal to 89
18:42 - put s a
18:44 - when
18:46 - grade
18:48 - uh when grade uh then you can have a
18:51 - default statement but i'll show you one
18:53 - when
18:54 - grade is greater than equal to
18:56 - 70 and
18:59 - and grade less than equal to 79
19:03 - then
19:04 - you can do put s
19:08 - put as b
19:12 - else
19:14 - uh
19:15 - something like
19:16 - else put s
19:19 - improve something like this
19:22 - uh now i'll put some great value 95
19:26 - and i'll try to run this
19:28 - and
19:30 - so
19:31 - okay i made a mistake then i'm putting a
19:33 - colon here
19:34 - sorry
19:38 - so this is
19:41 - okay when
19:44 - like this didn't hit like something is
19:47 - missing
19:52 - it's good one good okay let me check
19:54 - what's the issue with this
19:57 - hey hey everyone uh welcome back uh that
19:59 - time i made a mistake the mistake was
20:01 - like uh like uh like the mistaken
20:04 - distance i opted to use case grade here
20:06 - so i used to just define the variable so
20:08 - uh earlier i was also like
20:11 - instead of this i was also comparing the
20:13 - value grade greater than equal to 90.
20:16 - this was not needed because i had
20:18 - already used case grade so this is not
20:22 - needed to repeat the same here okay
20:24 - so let's uh like let's
20:27 - uh
20:28 - so let's remove this now the perfect
20:30 - like syntax for great statement is this
20:32 - now let's run this
20:33 - now for 95 it rewards a plus let's do
20:37 - this to 85
20:39 - for 85 it will reward a and for 75
20:44 - it will reward
20:47 - b and
20:48 - for like let's take another value 55 it
20:51 - should prove to move to improve
20:54 - statement that is else
20:55 - so today we are going to start a new
20:57 - tutorial on some basic data structures
20:59 - in ruby so the most basic data structure
21:02 - and the like one of the most important
21:04 - although is rs
21:05 - so today we are going to continue with
21:08 - array in this tutorial and let's see how
21:11 - we like initialize some array in ruby so
21:14 - very basic method is to do nums is equal
21:17 - to one two three
21:18 - and now you can do and and you can i'll
21:21 - also initialize another array
21:23 - names
21:24 - is equal to
21:26 - joe
21:28 - john
21:30 - and
21:31 - checked
21:32 - so this is the one one is a area of nums
21:35 - and this is our of strings so these are
21:37 - like two data types you can initialize
21:39 - one is of integer type and one of string
21:41 - type and now we what we are going to do
21:43 - we are going to like
21:45 - see how we can for print this array the
21:47 - one way to print this do put test nums
21:50 - now let's run this file
21:52 - now here you can see i have printed the
21:54 - array
21:55 - another way is to like s names
21:58 - so this would like run the array like
22:01 - sorry print the array so this is one way
22:03 - of printing another way is you what you
22:04 - can do is you can treat this as a
22:07 - variable i have already told you like
22:09 - how we like like read the variables and
22:12 - print this and this is like this is also
22:14 - going to work and this is going to
22:17 - collect sorry
22:19 - this is going to
22:20 - print
22:21 - in horizontal direction so here you can
22:23 - see like this
22:24 - so same you can do with the names also
22:27 - okay
22:28 - and uh it looks good to go yeah so here
22:31 - you can do also the same thing
22:34 - now
22:35 - one way to also initialize the array is
22:38 - like you can use array dot new
22:42 - and this
22:44 - uh the like this is like eric class
22:46 - which calls constructor
22:48 - and this is added dot new
22:50 - and this is
22:52 - joe
22:53 - john and jack
22:54 - so let's run this again
22:57 - and let's see
22:58 - it works perfectly fine and let's run
23:01 - this for nums also
23:03 - and let's see yeah
23:05 - so
23:08 - so here it also works perfectly fine so
23:10 - this is one way of printing the array in
23:12 - ruby so another way what we can opt for
23:15 - is like i told this new operator
23:18 - now
23:20 - what you can do you can also use the
23:22 - range operator as well
23:24 - and uh
23:25 - uh some i'll show you one thing
23:28 - and we can comment this out now since
23:30 - this is not needed and i've all put this
23:33 - cover in comment so it's just for your
23:35 - reference so
23:37 - you can also
23:39 - i'll do this put test names let's put
23:41 - test nums
23:43 - so these two things are also not needed
23:45 - i can comment this yeah so now
23:48 - we can use another array
23:51 - let's take a variable m
23:54 - and let's give array dot new
23:56 - and i'm sending five times i want this
24:00 - word hello
24:01 - so when i do put s so hash m
24:05 - so it would give me
24:09 - a hello five times inside the area so
24:11 - this is a trick
24:12 - now
24:13 - one thing you need to observe now i'll
24:15 - remove
24:16 - i'll remove
24:17 - uh like the same can also be initialized
24:20 - with an integer variable so
24:22 - like i'll do this
24:25 - so now it says five times i get the zero
24:28 - if you want to initialize some empty
24:29 - array with some particular value you can
24:31 - do this
24:32 - okay so i'll comment this out also sorry
24:35 - yeah so
24:37 - yeah so this looks perfect perfectly
24:39 - fine now what we can do is
24:42 - uh
24:45 - we can also use another range operator
24:48 - and for that what we are going to do
24:51 - array this time we don't use the new
24:54 - operator we are not using this okay we
24:56 - will not use this and we give 20.30
24:59 - if you don't want to include factory put
25:00 - an extra dot i already pre put in this
25:03 - my previous tutorial that this would
25:05 - include the last element last range and
25:08 - this would not include the last range
25:10 - okay
25:10 - now put
25:12 - s hash m
25:15 - and let's go with this
25:17 - and
25:19 - now here you can see i've got the array
25:21 - so make sure you don't put the new
25:22 - operator this time
25:24 - now some basic operations you can do
25:27 - with the arrays is like
25:29 - some basic operations you can do uh
25:32 - so like one is now let's create uh like
25:35 - some
25:36 - uh like dummy array a is equal to
25:40 - a what new
25:43 - and i'll say
25:45 - one
25:46 - one two three
25:48 - let me try out some with random limit 10
25:51 - 20 30
25:53 - 40
25:54 - 50
25:55 - okay
25:56 - now
25:58 - uh
25:59 - you can uh i'll show you one thing also
26:02 - you can also what i'm trying to emulate
26:05 - here you can also run this on ah
26:08 - like irb command so that is rails
26:11 - interactive console so you can run this
26:13 - irb
26:14 - and then you can have an interactive
26:16 - rails console and you can run this or
26:18 - there also okay
26:19 - so let's um uh let some like let's move
26:22 - to the next thing then you can type exit
26:25 - and you can come out of this interact
26:27 - console so i'll show you also how to
26:28 - work with interactive rails console
26:31 - and now
26:32 - what you can do you can do first the
26:34 - very basic command you can do put test a
26:36 - dot
26:36 - length
26:38 - okay so let's run this
26:41 - and when i run a dot n so it gives 5 the
26:44 - same thing can be a dot size also
26:47 - so when i run a dot size so it gives 5's
26:50 - as well okay another thing we can run is
26:54 - uh like another thing we can run is
26:56 - a dot first and a dot last so a dot
27:00 - first would return me the first element
27:02 - now let's run this a dot first because
27:04 - this gives 10 now a dot last
27:08 - would give me the last element
27:11 - so that is 50. so it would first return
27:13 - me 10 a to last 50 and the size and
27:16 - length works is perfectly fine okay
27:18 - so we can run these commands to like
27:21 - have a better overview another thing we
27:24 - can have is push and pop okay
27:27 - so i'll show you push and pau
27:32 - so hey everyone like this was like four
27:34 - operators we had seen like one was the
27:37 - first last uh and size and length so you
27:41 - can use all of them first
27:43 - okay you can also lose last
27:46 - and size
27:49 - and length okay so these are the four
27:51 - operators we can use uh one thing you
27:53 - could also use you can use 8.2
27:55 - underscore string so this would convert
27:58 - this to a string okay so i'll show you
28:00 - how this runs so here you can see so
28:03 - here we have got the string output of
28:05 - this uh it already looks like ruby rail
28:07 - ruby also does this behind the scenes
28:09 - like when we are using put s so it
28:12 - already does this behind the scene so we
28:14 - don't like i get intuition like this is
28:16 - happening okay so this is one thing you
28:18 - can also do so two operators like we can
28:20 - do use
28:22 - we can push
28:24 - 60 now we can print this
28:28 - and we get 60 okay
28:30 - now
28:32 - okay
28:33 - okay i did like okay i did one now we
28:36 - can do this sorry
28:40 - i had like then this like but it works
28:43 - perfectly fine not an issue
28:45 - but yeah this is the correct way to do
28:47 - it now i can do a dot pop
28:51 - also
28:52 - so
28:53 - the pop would remove the element i'll
28:56 - show you so basically pop removes the
28:59 - element from the last okay it
29:02 - uses like append so it works it has a
29:04 - similar behavior to the stack data
29:06 - structure so
29:08 - like it
29:09 - now basically it like
29:12 - pushes the element from the back and
29:13 - pops the element from the back so it
29:14 - behaves like a stacked data structure
29:16 - okay
29:17 - now we can move to like one last thing
29:19 - is
29:20 - uh there are various method in ruby like
29:23 - each with index and with index so the
29:25 - important one is the very important one
29:27 - is each with index
29:30 - because this works as a folly for each
29:32 - loop h with index i get
29:36 - two things in this one is the value
29:38 - and another in the index okay
29:41 - so
29:42 - i am
29:44 - going to type this put as a statement
29:47 - right
29:49 - the
29:49 - value
29:51 - add
29:52 - index okay now i'm going to put iadx
29:57 - is
29:58 - hash
29:59 - val okay
30:01 - so this is is going to print like five
30:04 - times or like so
30:06 - and this is like this is the one of the
30:08 - most so the value at index 0 is 10
30:10 - valued index 1 is 20 value index 2 is 30
30:13 - and value of index 3 is 40 and the value
30:16 - at index 5 is 50.
30:19 - uh
30:21 - we could also
30:23 - like uh
30:24 - we could also move with some another
30:26 - methods so there are various methods and
30:28 - array you can like have a view so
30:31 - we can also like uh
30:33 - delete
30:35 - underscope add at
30:38 - zero so this would
30:40 - this should probably
30:42 - okay i forgot to print this sorry
30:45 - put s
30:48 - hash a
30:51 - okay now let's run this so basically
30:53 - delete at the index 0 okay now if you
30:57 - want to delete the particular
30:59 - element so you need to define 20
31:02 - so this would delete the one at 20. so
31:05 - see perfect
31:06 - today we are going to start with some uh
31:08 - continue with some more basic data
31:10 - structures input data structures in ruby
31:12 - so let's start with so let's create a
31:14 - string a
31:16 - and type it as hello world
31:19 - now simply we can print the string onto
31:21 - the console by using put s a
31:23 - so you can
31:25 - first you can type ruby ds dot rb and
31:28 - this would run the program and it says
31:30 - hello world perfectly fine
31:32 - you could also initialize the string
31:34 - using the
31:36 - string inbuilt class string dot new
31:39 - hello
31:40 - world
31:42 - okay now instead of a
31:44 - i'm printing i am printing b
31:48 - and now i clear this and i'll say put sb
31:52 - and it says hello dot hello world and i
31:57 - like it's the same output as the
31:59 - previous one so hello world hello world
32:00 - are perfectly fine now i can type put s
32:03 - a is equal to b if they both are equal
32:06 - so it should return true so it returns
32:08 - true so it returned perfectly fine so it
32:11 - looks perfectly fine true is the correct
32:13 - answer for this
32:15 - now
32:16 - you could also type put as a dot length
32:19 - so let's see the output of this
32:21 - so it turns out to be 11 good yeah now
32:25 - you could also do a dot size you can
32:28 - and the both of them return 11. so the
32:30 - both of them work with the same thing
32:32 - so now
32:33 - you can
32:35 - you can also type
32:38 - a
32:39 - dot uh
32:41 - one thing i i'll show you there is a
32:42 - method and now uh just for a second you
32:45 - can comment both of them
32:48 - okay i'll comment out and i'll make an
32:51 - array
32:52 - c and this is an array
32:55 - one two three
32:56 - and i'll put a c dot include
33:00 - include
33:02 - uh what does it include what i want to
33:03 - check does it include two okay so i'll
33:09 - it returns true
33:11 - okay so yes it includes true the same
33:13 - way
33:14 - you can
33:15 - do it for strings also
33:18 - so you can do this both same way you can
33:20 - do it for strings also so i'll do
33:22 - a dot include
33:25 - this character so it should
33:30 - return true the same it turns for this a
33:32 - also
33:33 - so the include method is used for both
33:36 - strings and arrays
33:37 - now
33:39 - uh since i don't need this
33:42 - okay so i'll remove this yeah so now
33:45 - what i can do
33:47 - you want to increase the access the
33:49 - first character you can please say a of
33:51 - 0 so this would give you the particular
33:54 - index so i'm showing you this gives me
33:56 - first character
33:57 - now
33:58 - to access the last character you can do
34:00 - either a dot length minus 1
34:03 - so this would also work perfectly fine
34:06 - okay it does stay it gives you the last
34:08 - character but you could also use
34:10 - negative slicing and string uh string
34:13 - like in ruby there is a negative slicing
34:14 - which returns you from the end okay
34:17 - minus 1 is the last one minus 2 minus
34:19 - three minus four you keep on going like
34:21 - this okay so i'll show you oh it also
34:23 - gives the last character
34:25 - so this is the two ways you can
34:28 - manipulate strings in ruby
34:30 - uh now one we are left with some another
34:33 - command such as some basic this
34:36 - a dot up case
34:38 - okay
34:39 - and
34:41 - a dot uh
34:45 - put s a dot down case first i'll do one
34:47 - by one
34:50 - now a dot up case returns upper string
34:52 - and a dot down case
34:54 - returns the
34:59 - lower case so by default it was lower
35:01 - okay now i'll do a dot down a dot
35:04 - up case
35:06 - and i'll do put s a
35:09 - so here you might see sorry
35:12 - so now here you see that i did a dot up
35:15 - case but then put s a didn't turned out
35:18 - to be the one in the upper uh uh upper
35:21 - capital letters so for that you need to
35:23 - you put an explanation mark which is all
35:25 - uh now this would what it will do this
35:29 - it will now
35:30 - do the inbuilt operation within that
35:33 - string so see the output of this
35:37 - now
35:38 - it converts the default a to up case as
35:40 - well okay so
35:42 - so this is good so now we can move to
35:45 - hash maps
35:47 - so hash maps
35:49 - is like grades
35:51 - is equal to
35:53 - new
35:54 - okay
35:55 - now
35:57 - you can do
35:58 - grades
35:59 - of n
36:01 - is equal to a plus
36:04 - and grades of nine
36:08 - is equal to a and grades of eight
36:14 - is equal to b
36:16 - now let's put s
36:19 - grades
36:25 - so here is the hash map for the 10 is a
36:27 - plus nine is a and a it is b
36:30 - now let's put as grades of n
36:32 - okay
36:33 - uh
36:34 - this should
36:36 - give us a plus perfectly fine so this is
36:38 - how can you use it
36:40 - but what if i do grades of 7
36:44 - so
36:45 - grades of 7 is not defined
36:48 - and when i run this
36:49 - it gives me nothing
36:51 - so to avoid that you can use dates
36:55 - or default
36:57 - if it is not default i'll do
37:00 - improve
37:01 - okay now this would turn out to be
37:03 - improved
37:04 - now i'll run this again and it says
37:07 - improve okay so this is how i can
37:10 - set the default value okay
37:13 - now i can uh use uh this is good now i
37:17 - comment this out
37:19 - a is
37:20 - new and b is equal to hash dot mu
37:25 - now a of 0 is equal to 1 just assigning
37:29 - some random values or let this be a
37:32 - b of 0
37:34 - is also a
37:36 - okay
37:39 - yeah now i'll do put s
37:43 - i'll do put s
37:45 - a
37:47 - and put s p
37:54 - so
37:54 - initialize constant b
37:59 - uh like line number 15
38:04 - okay let me check what's the issue
38:07 - so uh like there was some like
38:09 - it was like i might have not saved the
38:11 - file uh like uh a is regular hash dot
38:14 - new b is called dot new a of zero zero
38:18 - when i put s a and b okay so basically
38:22 - when i put s a n input is b so both of
38:24 - the same are equal both of the hash maps
38:26 - are equal so i can also compare them
38:29 - using an equal to operator so this gives
38:31 - out me the output true
38:33 - okay
38:34 - now
38:35 - now we could also
38:38 - like now it's perfectly fine
38:41 - uh now let's move to this this iphone as
38:43 - well
38:44 - now i can do put s
38:48 - great start length
38:53 - so this would give me the same
38:56 - like
38:59 - okay i had to uncomment this sorry yeah
39:03 - so now i'll put great short length h3
39:05 - and i'll do great sort size
39:08 - it would also return me three
39:10 - now
39:11 - i can do put s
39:16 - grades dot 2 underscope a and
39:22 - and it should may return like this as a
39:24 - string oh sorry it converges to an array
39:27 - so this is also
39:28 - fine so this is how you can do it
39:31 - and
39:33 - one thing because i converted this uh
39:36 - this to an array okay so i told you uh
39:39 - you could also if you want to see in
39:40 - other way around you could do this
39:47 - you can store this inside a variable
39:52 - x
39:56 - and you can print x
39:59 - okay
40:02 - so this is how we can do it okay so this
40:04 - is how you convert into an array and
40:07 - one uh
40:08 - one small exercise we can have right now
40:11 - uh
40:13 - you could also do this as well
40:17 - put a s
40:19 - grade dot hash underscore value
40:22 - so
40:23 - this worked as like i told you the one
40:25 - like we had in uh like string that is
40:28 - include so it does it has a value 10
40:31 - as a key
40:34 - okay so
40:36 - okay let's uh
40:39 - uh okay so this is returning false uh
40:42 - like this is our value sorry so this is
40:44 - how you can do it so 10 is not a value
40:47 - it is a key so for that
40:50 - you can run this true okay so this is
40:54 - how you can do it for key and value so
40:55 - by mistake i had like so like
40:59 - dated for uh has key and it has value so
41:01 - you can understand okay and value
41:04 - so
41:05 - let's move to a very small size
41:07 - since we covered strings and hash map in
41:09 - this string is equal to hello world
41:11 - so let's create a program to crown the
41:13 - frequency so first creates a frequency
41:16 - as a hash map frequency
41:18 - is equal to hash
41:20 - frequency is equal to hash dot
41:25 - new
41:27 - so this would maintain the frequency by
41:30 - initially the frequency should be
41:31 - frequency dot default is equal to zero
41:35 - now we do a s dot eat underscore care
41:40 - we'll make it do
41:41 - and i have the
41:43 - value
41:44 - okay
41:45 - okay i have the value then
41:48 - frequency
41:50 - dot val
41:52 - plus equal to equal to 1
41:54 - and i can end this loop and simply put
41:57 - as frequency
41:58 - now let me clear this loop and run this
42:01 - so here i have got all the frequency of
42:03 - the particular graph
42:04 - so thank you everyone for watching this
42:06 - so it was a simple exercise make sure
42:08 - you uh do this else it will throw error
42:11 - this will throw error because you need
42:13 - to initialize frequency of default to
42:15 - zero else it will through error of
42:17 - course uh either you can also put a
42:19 - tricar statement if statement it inside
42:21 - this but this is a better way of doing
42:23 - so today we are going to work on
42:26 - like date time in ruby so and i'm going
42:29 - to take you forward with some like
42:32 - little bit good concepts in daytime
42:34 - because you might be working like get to
42:36 - work in back end on the rails part so
42:39 - you might like query on some date time
42:41 - part in your like um
42:43 - database and your like logic so it would
42:46 - help you how you can manipulate because
42:49 - when you keep the like a record of
42:51 - things so you usually manage with date
42:53 - and time so i'll tell you how you can
42:55 - achieve the same using like n ruby so
42:58 - let's start with our tutorial so the
43:00 - basic thing you need to first type you
43:02 - need to type require
43:05 - required is like is it is like uh you
43:08 - will get to like
43:09 - learn new things in this so require is
43:11 - used to like
43:12 - get this is required so it is like an
43:15 - import statement required date
43:17 - so required date would help you to like
43:21 - manipulate the date
43:24 - date records in ruby
43:26 - so
43:27 - now you can create a variable my date
43:29 - okay
43:30 - uh so you can get create variable my
43:33 - date bar
43:34 - so basically this should stay store a
43:36 - date and you need to store date dot ours
43:41 - and now you can
43:43 - put
43:44 - like in a string you can put
43:46 - 10
43:48 - december
43:50 - uh 2021 so this is a very futuristic
43:53 - date and now what you're going to do
43:56 - you can like carry out few operations on
43:58 - this such as put as my date back
44:01 - so then put s
44:03 - so
44:04 - okay first we will do this so let's run
44:07 - this and we can type
44:09 - clear
44:10 - oh sorry
44:12 - click clear statement and now this would
44:14 - clear our console now ruby
44:16 - datetime.rb so when you print this so
44:19 - you get an output 20 21 12 so basically
44:23 - so this is how it depends this gives the
44:25 - year format
44:26 - this is the month and this is the day so
44:29 - 2021 uh
44:31 - 2021-12-10 so this is a good output
44:35 - and what you can do now you can do
44:37 - different things like
44:39 - it s
44:41 - my date where
44:42 - dot here
44:44 - okay so basically now we can comment
44:47 - this so this would usually print out the
44:50 - year okay
44:52 - and in the same way you can approach for
44:55 - okay so i'll show you one by one so
44:57 - basically this would help you to have a
44:59 - clear approach so i do clear
45:03 - and
45:05 - ruby datetime.rb yes so 2021 is like is
45:08 - this the like output of this so next you
45:11 - can do put as
45:13 - my date where dot
45:15 - month
45:16 - so basically this would either give you
45:18 - the month
45:20 - now
45:21 - uh this is 12
45:23 - okay
45:24 - and now what you can do you can simply
45:27 - comment this out or you can do put as my
45:30 - date where dot
45:33 - month day so month day is given by m day
45:37 - okay
45:37 - and now you can
45:40 - run this
45:41 - so
45:41 - i'm going little slow because this
45:43 - should help you because this is the 10th
45:45 - day of the month okay
45:46 - now you can do port s my date where dot
45:50 - weekly
45:51 - so this would tell you that which day of
45:53 - the week it is so basically now you can
45:56 - following make the operations
45:58 - like weekdays five if it was six or
46:01 - seven then you can refer that this was
46:02 - the weekend okay
46:04 - so this is how it goes good
46:06 - so now you can do clear
46:09 - and now you can type so which day of the
46:12 - year it is it is put as my date where
46:15 - dot
46:15 - y day
46:17 - so this will basically give you the year
46:19 - day so which day of the year it is okay
46:22 - so let's run this and it is a 344 day of
46:26 - the year okay so good to do good to go
46:28 - now what you can do you can shift this
46:31 - date my date were plus equal to five
46:35 - which is equivalent to like
46:37 - uh basically this is equal to my
46:40 - eight bar is equal to my date wire plus
46:43 - five okay
46:44 - so you can use either of this i'll use
46:46 - this notation the second one to have
46:49 - clarity
46:50 - now what you can do you can do put s
46:53 - my date where
46:56 - my date where dot
46:59 - you can string format time so this is
47:02 - strf time
47:04 - okay
47:05 - so basically your form for formatting
47:08 - and
47:09 - now i'll type you to do
47:11 - percent a
47:13 - person d
47:15 - person b and percent y
47:18 - okay
47:19 - so
47:20 - so this is capital yeah so let's
47:24 - run this
47:27 - so now it basically you can see by the
47:31 - notations it says
47:33 - though day is wednesday the day
47:36 - numeric in the week terms of week is
47:38 - wednesday day in terms of month is 15
47:41 - december 21 so this is like a very uh
47:45 - used notation
47:47 - to keep the track of the like date okay
47:50 - so let's comment this and okay one thing
47:52 - i told you that i initialized as 10th
47:54 - december and now it did this plus five
47:58 - which
47:58 - incremented it by five days
48:00 - for this really like you can implement a
48:03 - good logic so like just by putting five
48:05 - you can increase the whole date so and
48:07 - get all the other details so like this
48:09 - was tenth i think uh sorry this was
48:11 - tenth
48:12 - december now i incremented by five here
48:15 - and then when i put it out this at this
48:18 - line so it works like magic
48:21 - okay now now you can comment this
48:25 - okay so now what you can do you can
48:28 - create another variable time okay for
48:31 - that you require required time
48:35 - okay
48:36 - and let's comment this
48:39 - so let's
48:41 - pick some
48:42 - space so that it gives a clear view
48:45 - so
48:46 - you can give my time where
48:50 - is equal to time dot new
48:54 - 2021 year
48:56 - 10th day
48:58 - well this is december
49:01 - six
49:02 - five
49:04 - and
49:05 - and this is the notation basically which
49:08 - tells you plus make sure you put a zero
49:10 - five zero zero though don't put directly
49:13 - like this five
49:15 - 0 so put 0 5 0 0 okay
49:19 - now
49:20 - in the same way what you can do you can
49:22 - do put s
49:25 - my
49:26 - time
49:27 - where
49:28 - okay
49:29 - and you can
49:30 - repeat this put as my time dot dot r
49:34 - this would give you the r now this would
49:36 - give you the minute and this would give
49:38 - you the seconds
49:40 - okay so let's run this
49:44 - yeah so here you can see so the r is
49:47 - sixth
49:48 - minutes is five then the second is ten
49:50 - okay and
49:52 - you can
49:54 - like also do
49:56 - something
49:57 - put s time dot
50:01 - now so this would like
50:05 - bring to that current time okay good to
50:07 - go
50:08 - now we can clear the screen and we can
50:10 - also print this
50:12 - now let's uh move on with some
50:15 - additional topic
50:17 - so basically i'll give you like there's
50:19 - a very like a small quick topic here
50:22 - to really help you
50:24 - so directory
50:28 - uh and exceptions
50:32 - so basically
50:34 - okay i'll give you directory.rb
50:36 - so basically this is a new topic so
50:39 - let's do this basically what you can do
50:41 - you can do put s
50:43 - run the directory commands directory dot
50:45 - print
50:46 - print pwd stand so print working
50:48 - directory now like the this
50:51 - your current working directory so this
50:53 - is print working directory
50:55 - now i'll give ruby
50:57 - directory.rb and this will print the
50:59 - current cooking directory okay so this
51:01 - is the working directory i'm usually in
51:03 - and this can be confirmed now
51:06 - then you can do uh run a command
51:11 - directory
51:13 - dot make directory so basically these
51:15 - are all the like commands you do
51:18 - a
51:19 - folder
51:20 - here and then you can also check put as
51:25 - directory
51:27 - dot exists
51:31 - exists let's say this this exists folder
51:34 - here so when i run this file
51:38 - now
51:38 - you will see
51:40 - yes this directory exists and it does
51:43 - create a directory to my left okay now
51:45 - let's create another file
51:48 - exceptions.rb so this is another topic
51:52 - so now to create a try catch statement
51:55 - ruby basically you you can give a begin
51:58 - statement
51:59 - now
52:00 - in this begin statement you have three
52:02 - things
52:03 - rescue
52:06 - so one is rescue
52:09 - okay other is else
52:12 - other is ensure
52:14 - so begin is put as
52:19 - begin so basically okay
52:21 - and then i'll do
52:23 - put s
52:25 - three by zero basically this is an error
52:28 - to catch this error i'll do
52:30 - put s
52:32 - error
52:35 - error
52:36 - catched
52:38 - okay
52:39 - so
52:41 - this would
52:42 - this is like a like input is
52:45 - the error is not cached if the error is
52:48 - not catch then you can do this yes
52:51 - looks
52:53 - good
52:54 - okay ensure this protest
52:57 - this should always
52:58 - run always run respect
53:03 - of above
53:05 - irrespective of
53:06 - so always run inspector let's run this
53:09 - ruby
53:10 - exception.rb
53:12 - so here you can see begin
53:15 - there is cash because 3 divided by 0 is
53:17 - a division
53:18 - division by 0 error so it's an error and
53:21 - it says here cash always run respective
53:24 - above
53:24 - let's change to 1 this is not an error
53:26 - now because this is valid three divided
53:29 - by one
53:30 - so let's see it see again it does good p
53:33 - is done because yes it does put three
53:35 - out it is not an error looks good or
53:38 - always run irrespective above
53:40 - so this is how you deal with error
53:42 - handling in ruby so i'll continue
53:45 - with like classes and object-oriented
53:47 - programming next tutorial so thank you
53:49 - for watching for this tutorial thank you
53:50 - everyone bye
53:52 - so today we are going to start with some
53:54 - object-oriented programming in ruby
53:56 - so let's create a most basic example
54:00 - let's create a class in ruby class
54:04 - person
54:06 - and we can like annotation use with a
54:08 - capital p and let's
54:11 - close this class by using an end tag
54:14 - now we can create a constructor in this
54:17 - class with def
54:19 - initialize
54:20 - so basically we initialize with id name
54:24 - and age
54:25 - so then we do we do close this
54:28 - constructor
54:29 - uh
54:30 - it's a good habit you keep closing them
54:32 - because then it would be very
54:34 - difficult for you to like know when
54:36 - which method or attribute or constructor
54:38 - is left of being close and it will throw
54:41 - an error
54:42 - so now we can do add grade id
54:45 - so basically we are declaring variables
54:48 - and assigning them values and id add
54:49 - grid like these are like some uh now
54:52 - this works
54:53 - as a
54:54 - property of the class what we call them
54:56 - attributes
54:57 - and another methods and functions so
55:00 - basically now we start setting the
55:01 - properties and attributes at the name is
55:04 - equal to name
55:06 - and at the rate age
55:08 - is equal to age
55:10 - now you can make a intro method define
55:14 - intro
55:16 - and which would particularly give you
55:18 - the intro put s
55:21 - and you can start putting
55:23 - my name
55:24 - is
55:26 - put this in a hash symbol add the date
55:28 - name
55:30 - okay
55:31 - and my age
55:33 - is
55:35 - put this in a like a symbol
55:38 - hash
55:39 - at the rate edge okay
55:42 - so this is like your intro works so it
55:44 - looks perfectly fine
55:46 - now let's
55:47 - create a person
55:49 - so let's create a person
55:51 - and we can try our code e1
55:54 - is equal to person
55:56 - dot new
55:57 - we give it an as id a weak capacity
56:00 - parameters id 1
56:03 - joe
56:05 - and 25 is the age and
56:07 - p2
56:08 - is equal to
56:10 - person
56:12 - dot new let's create an id of 2. james
56:18 - and let's give an age of 30.
56:21 - okay yeah now we can do p1 dot intro
56:26 - let's call this pivot intro now let's
56:28 - run this ruby classes.rv so my name is
56:32 - joe and my age is 25 perfectly fine
56:35 - now we can do
56:38 - p2.intro and should run the another one
56:42 - so my name is james and my age 30. so
56:44 - everything looks perfectly fine
56:46 - now a very small concept here is
56:50 - we want to see how many persons were
56:51 - created okay
56:53 - like to keep a track of how many persons
56:56 - were created
56:58 - you can
57:00 - create a class variable so basically
57:02 - these belong to the class
57:04 - okay so these belong to the class and we
57:06 - can initialize persons
57:09 - is equal to zero this doesn't belong to
57:12 - the object is belong to the class so
57:14 - these are like class variables
57:16 - in like that belong to the class
57:18 - now we can make something a method which
57:21 - says
57:23 - def self dot get
57:27 - person count
57:28 - because
57:31 - and we can do get
57:33 - self dot to get person count and so this
57:36 - is like a like
57:37 - a method which is as excels access to
57:40 - the self class
57:42 - and it will basically return
57:44 - address persons
57:46 - okay
57:47 - now
57:48 - what you can do
57:51 - you can do
57:52 - so now we are using the class to
57:55 - put as person
57:57 - dot
57:58 - get person count
58:00 - so you can comment this comment this
58:02 - yeah i'm good to go let's clear this
58:05 - and run
58:07 - so
58:08 - did you mean
58:09 - initialized class whatever in person so
58:12 - see there might be some here
58:14 - yeah so yeah this
58:16 - initialize as zero so this like now it
58:19 - will work
58:20 - let's run this
58:23 - so
58:24 - now initial initially zero persons have
58:26 - been countered because i ran the program
58:28 - again now let's do one thing let's
58:30 - create a one person
58:32 - now let's run this
58:38 - and it still gives
58:40 - okay yeah now because uh i'll tell you
58:43 - why it was from zero because when you
58:46 - initialize a person you need to
58:48 - increment this by one as well i hope you
58:50 - get it
58:51 - so what you can do now it looks
58:53 - perfectly good so i'll give you we
58:56 - initialize the class variable with zero
58:58 - in increment by one whenever the
59:00 - constructor is called now you create a
59:02 - method to get its value okay
59:04 - now
59:05 - when a one person has been created so it
59:08 - should give me one
59:10 - when two person has been created
59:12 - it should return me
59:14 - two okay now let's create another person
59:17 - p3
59:18 - is equal to person dot new
59:20 - like third
59:22 - three third like third person we are
59:23 - creating so we can give them any name
59:26 - let's give them a
59:31 - jack and let's give an age of
59:33 - 40 40
59:35 - now let's run this now it you will see
59:38 - now it gives 3 so this is how we do it
59:42 - now let's make a small inheritance part
59:45 - so let's do class
59:47 - human
59:48 - and
59:49 - let's end this
59:51 - and define a person with wall
59:55 - and let's end this and say
59:57 - put test
60:00 - put as
60:02 - human
60:03 - humans evolve
60:06 - okay now let's do inheritance
60:10 - so this is how we do we initialize
60:12 - person and inherit with human class now
60:14 - let's call let's comment this out
60:18 - yeah so let's comment this we don't need
60:21 - like this part so let's comment this
60:23 - and now we
60:25 - let us do put sp1 dot evolve
60:29 - okay
60:31 - so p1 dot
60:34 - evolve
60:35 - so this is evolve
60:38 - yeah
60:39 - now let's run this
60:43 - so humans evolved because okay now let's
60:46 - do though basically now i'm trying to
60:47 - show you run time inheritance what if it
60:50 - had its own method evolve
60:52 - def evolved
60:54 - and like we end this and we do
60:57 - put this
61:02 - like person evolved
61:05 - persons
61:11 - involved or you can say
61:13 - people reward
61:16 - so basically this is like a just a dummy
61:18 - thing to show you and now you see people
61:20 - involved because it had its own evolved
61:23 - method then it called it if it doesn't
61:25 - then call the human but make sure you
61:27 - make inheritance okay
61:28 - so this is how we do it and let's move
61:31 - to some like
61:33 - a very simple one
61:35 - uh
61:36 - so
61:38 - so i'll just make comment i'll comment
61:40 - everything
61:41 - yeah
61:43 - now let's you can another class class
61:46 - box
61:48 - now you can
61:50 - initialize with this and now basically
61:53 - uh you can create initialize
61:56 - height comma w
61:57 - and say at the red
61:59 - height
62:01 - is equal to edge
62:04 - and at the rate width
62:07 - is equal to w
62:10 - and this is end okay
62:12 - now you can now make some getters and
62:15 - setters so basically get height
62:21 - and define get height define
62:24 - get width
62:26 - okay now you can close this now define
62:29 - set height
62:32 - okay so basically now you
62:35 - pass a parameter
62:37 - uh define
62:39 - set width
62:41 - now you pass a parameter
62:43 - parameter
62:44 - uh now you pass a parameter and now here
62:47 - you see
62:48 - so now you can do at the red width is
62:52 - equal to w
62:54 - at the right height is equal to h
62:57 - now
62:59 - return
63:00 - at the date height so basically these
63:02 - are the getters and these are the setup
63:05 - and return at the rate
63:08 - width
63:09 - now you can also make access specifiers
63:13 - to this by using this private
63:17 - okay let's do private get height
63:21 - get width
63:23 - set height
63:24 - set width okay so basically you can make
63:27 - them private
63:28 - and make a public one is like
63:32 - get
63:33 - area
63:34 - so how you would work with get area
63:36 - define get area
63:38 - and basically you would end this
63:41 - and now you can simply return return
63:45 - at the red height star at the rate width
63:49 - okay
63:50 - so basically let's create a b1
63:54 - b1 will go to box
63:57 - dot new
63:59 - zero comma zero
64:01 - and put as b1
64:04 - dot get area
64:06 - so ruby class dot rb
64:11 - okay expecting end so like there's some
64:14 - some issue let me check
64:16 - with this
64:18 - everyone uh so i
64:20 - it was like a small error like uh you
64:22 - need to
64:23 - define the colon uh like put the colon
64:25 - before the methods so
64:27 - initially what i did i had this put a
64:29 - private colon here here and i did didn't
64:32 - put these so this was like wrong
64:34 - notation so that is why
64:36 - it do an
64:38 - error now it's like good to go uh so
64:41 - what i'll do i'll put it undo this yeah
64:44 - so basically you can make them private
64:46 - so but uh
64:48 - now i'll comment this so now what you
64:50 - see that i created a box with zero
64:53 - values and i set a height and width then
64:56 - i did like get height and get to it and
64:58 - would get area so let's run this
65:01 - so it says yeah the height is 20 width
65:03 - is 10 which we had set at them is in the
65:06 - center and the get area is 200
65:08 - so this is how you can implement things
65:10 - and then like so this is like some
65:12 - getter and setter which you are like
65:14 - encapsulation so so thank you for
65:17 - watching this tutorial you can explore
65:18 - some like creating some your own classes
65:20 - and moving out some inheritance so this
65:23 - would like really help you so thank you
65:25 - for watching tutorial so i'll catch you
65:27 - in the next video thank you bye
65:29 - today we are going to learn about how to
65:31 - install rails on our local machine
65:34 - so this is like a rails to install a
65:37 - rails on your machine it has like a few
65:39 - dependencies so basically we are going
65:41 - to cover each dependency how we can
65:44 - inter install the dependency so that our
65:47 - rails application works perfectly why uh
65:49 - perfectly fine on our machine
65:51 - so what we can do so
65:54 - we can like first what we can do we can
65:57 - like
65:58 - just like open few links and so
66:01 - basically we will start with one link at
66:03 - a time
66:04 - so let's open this link
66:07 - now this is the node.js official website
66:10 - you can move to this website and
66:12 - download this installer
66:14 - and this is the lts version you can
66:16 - download the long term support version
66:18 - so lts version and you can install
66:20 - node.js on your machine
66:21 - so when you have installed node.js on
66:24 - your machine
66:26 - then you can
66:27 - this would help you to install like the
66:29 - npm package
66:31 - okay so
66:33 - when
66:34 - you have installed like node.js so you
66:36 - can run this command on your machine
66:39 - node minus minus version and this will
66:41 - help you get started with that so i'll
66:43 - give you a quick
66:44 - hint uh well like i will open the
66:47 - command prompt
66:49 - and i will type node
66:51 - minus minus version
66:53 - so here you can see the node has been
66:55 - stored on my machine so it looks
66:56 - perfectly fine okay
66:59 - so yeah so then
67:02 - you can like then you have installed
67:04 - node on your machine
67:05 - then what you can do you can move to the
67:07 - another link uh this is like
67:10 - how to install yarn the yarn is another
67:13 - dependency required to install rails
67:16 - on your machine
67:18 - so
67:19 - so when you have installed node.js so
67:21 - you would have access to npm package
67:24 - so you can run this command npm install
67:26 - minus minus global yarn or alternate way
67:29 - alternative weight is to click on this
67:32 - and click on operating system windows
67:34 - classic stable version and you can
67:35 - download the installer so when you have
67:37 - download the installer so you can
67:39 - install
67:40 - yarn as per like
67:42 - as you will get a setup so you will have
67:45 - an msi installer and you will like uh
67:48 - you this will give you a msi file that
67:50 - will run walk you through installing
67:52 - your own window so basically it will
67:53 - give you a setup which will help you
67:55 - installing yarn on your machine
67:57 - so this is one of the methods
67:59 - okay to install the yarn on your machine
68:02 - so so basically now you have covered the
68:05 - two for two parts so basically you have
68:07 - installed node.js and yarn and you can
68:10 - solve with by npm also
68:12 - so you can solve at npm and you can run
68:14 - this command and to check if this is
68:17 - installed after uh
68:19 - then you have to type yarn minus minus
68:21 - version
68:23 - okay so here you can see
68:25 - you have got like two things the one is
68:28 - node and another is yarn
68:30 - so
68:31 - next moving to the third part
68:34 - uh like you can move to sqlite
68:38 - website so this is the third dependency
68:42 - and
68:44 - when you click on this link
68:46 - so
68:47 - you can access to this so this is now
68:50 - you move to this pre-compiled binaries
68:53 - for windows
68:54 - uh now you have to choose either of one
68:58 - um
68:59 - one of them either 32-bit or 64-bit
69:02 - okay choose according to your system
69:04 - 32-bit or 64-bit so uh like this is
69:08 - required so this is required either
69:11 - 32-bit of 64-bit
69:13 - install any one of them
69:15 - so
69:16 - uh like depending on your system then
69:19 - this one is mandatory like uh you have
69:21 - to install
69:22 - so
69:23 - what you'll get you get two files in
69:24 - this
69:26 - and two files in this and three files in
69:28 - this so since this one is like
69:31 - compulsory so this will be three files
69:33 - and either one of them will be three
69:34 - plus two that is five files
69:36 - you have to extract all the file files
69:38 - and copy them and paste them into your c
69:41 - windows system32
69:43 - okay
69:44 - so then when you copy and paste them
69:46 - inside in the c windows system32 then
69:48 - you your sqlite is perfectly installed
69:51 - and you can type
69:55 - sqlite3
69:57 - minus minus version
69:59 - okay so this would help install sql lite
70:02 - on your machine
70:03 - so here it's good to go yeah
70:06 - nice
70:07 - now what you need to do the now moving
70:09 - to the fourth part
70:11 - you need to do
70:13 - you need to move to ruby installer
70:14 - website so basically ruby's installer is
70:16 - intended to install ruby on your windows
70:18 - machine
70:20 - okay
70:20 - so basically
70:23 - you have ruby and like you can click on
70:27 - download button and this will give you a
70:28 - list from where you can choose from
70:30 - which ruby version you have to download
70:32 - and install i would recommend you to
70:34 - download this latest version and then
70:36 - you can walk through if you have like
70:38 - followed my previous tutorials so you
70:40 - must have already you followed this step
70:42 - to install ruby on your machine
70:45 - okay so this is the fifth part now
70:47 - uh to access
70:50 - like to access check whether ruby
70:52 - installed you need to type ruby
70:55 - minus minus version
70:58 - you have ruby
71:00 - now ruby by default installs the gem
71:02 - package manager so gem minus minus
71:05 - version
71:06 - so
71:07 - so 3.23 is also installed
71:09 - so now you have to execute two commands
71:12 - one is jam install sqlite three
71:14 - okay okay then gem install sqlite3 would
71:18 - like install sqlite on your machine
71:20 - and
71:21 - there's something like this
71:24 - you need to type
71:25 - okay
71:27 - and yeah so this is this is the step is
71:30 - needed
71:31 - uh
71:32 - and another one is this you have to
71:34 - learn around this command gem install
71:36 - rails
71:38 - so after running these two command then
71:41 - you can like
71:42 - you have installed rails on your machine
71:44 - successfully but this one is the most
71:46 - important command gem installers
71:48 - okay so after that you have to type
71:51 - rails minus minus version
71:53 - then you have rails on your machine so
71:56 - the latest version of the rails is 6.1.3
71:58 - as 6.1.3.1
72:01 - so
72:02 - like
72:03 - then you have installed rails on your
72:05 - machine so
72:06 - i walked you through the part like uh
72:09 - how you can install rails on your
72:11 - machine
72:12 - then simply
72:14 - you can move to like see so see you can
72:17 - move to desktop
72:19 - i can move to desktop and i will do
72:23 - rails
72:24 - new and basically this is your project
72:26 - name okay
72:28 - so you can type any project name i can
72:31 - type
72:32 - is my project and here you can see
72:36 - that now it will start creating a rails
72:39 - project on your machine and a bundle
72:41 - install is like installing all the like
72:43 - dependencies required for your project
72:45 - so basically this would show you how to
72:47 - install like dependencies these on your
72:50 - like for your project
72:52 - and
72:53 - when this process is successful
72:56 - then you are able to run the rails
72:58 - application on your machine okay so like
73:00 - this would like take a little time
73:03 - so you can like so basically then you
73:06 - can i can walk you through like a few
73:08 - commands so basically rails uh i'll give
73:11 - a quick overview
73:13 - rails is an mvc architecture so mvc m
73:17 - stands for model
73:20 - so n stand for models uh v stands for
73:22 - view
73:24 - and c stands for controller
73:28 - okay
73:29 - so models is like basically like working
73:32 - with your database
73:35 - database and then you have view
73:38 - then like views like presentation on
73:41 - front end presentation layer
73:44 - presentation layer
73:48 - and controller is like communicating
73:52 - logic and communication
73:55 - okay
73:56 - so
73:57 - so basic logic and communication
74:00 - and
74:01 - and you can say either linking the above
74:03 - to linking
74:05 - above
74:06 - to
74:08 - okay so
74:09 - like this is like mvc architecture
74:11 - followed in rails so here you can see
74:13 - like uh it's in installing like the
74:16 - rails or it's like like drills on your
74:19 - like a project
74:21 - on your machine then you can type the
74:24 - command
74:25 - uh so basically there are two commands
74:27 - one is rails
74:29 - new
74:30 - project name
74:33 - and you can then type rails server
74:37 - okay so by default it will start with
74:39 - the server on your local machine
74:41 - okay so i hope it's good to go
74:44 - then the real server will be started on
74:46 - your local machine
74:47 - so this is how like the process will go
74:50 - and then you like
74:52 - like this is like
74:54 - this folder so
74:58 - so we can like wait for this process to
75:01 - complete
75:03 - then i think we can like start the real
75:05 - server on our machine
75:11 - so hey everyone welcome back so like uh
75:14 - like i had like now this has been
75:16 - installed the rails project has been
75:18 - initialized in our like directory so
75:21 - basically uh we can like i was this here
75:24 - see use personal desktop i had created
75:26 - the rails project here now i can move
75:28 - inside my project by cd
75:30 - my project and i can simply type rails
75:33 - server
75:34 - and here you can see now the real server
75:36 - will start on my local host
75:40 - and at the same point you can
75:43 - move to its project inside the same
75:44 - project directory and you type code dot
75:46 - dot so this would open vs code so
75:49 - basically this is the gem file like
75:51 - they're like various things here so we
75:53 - will like go over through it and
75:56 - like so the rails
75:59 - uh like server has been started on my
76:01 - machine so now you can type
76:03 - local
76:05 - host
76:07 - colon 3000 and you can see the rails or
76:10 - servo runs perfectly fine on my machine
76:12 - so this is uh like the rails now you can
76:16 - this is how you can access rail server
76:18 - on your machine and at the same time you
76:19 - can see that i made a get request for
76:22 - the same so you can track the server
76:24 - here so from next we will start with
76:26 - some basics of rails so thank you for
76:28 - watching this tutorial thank you
76:30 - everyone
76:33 - so today we are continuing with our uh
76:35 - continue with the tutorial on rupee on
76:37 - rails so basically today we are going to
76:39 - work with routes in ruby so basically
76:42 - routes in ruby means like url
76:45 - so basically when you create an
76:46 - application you create different urls
76:48 - like for different purposes so we will
76:51 - see how to create some urls in rails and
76:53 - we will start like
76:56 - learn uh what we can process uh after
76:58 - creating a route so basically uh so
77:01 - let's start with our application so very
77:03 - first thing you need to create is like
77:05 - the first thing is like i'll give a
77:07 - quick overview okay
77:10 - since ruby is a mvc framework so m
77:13 - stands for models
77:15 - that is your database
77:17 - so basically this differential database
77:20 - views just like your presentation so
77:22 - basically that is your html and uh like
77:26 - html and front end so basically this is
77:28 - like for your presentation
77:30 - okay uh presentation and
77:34 - uh the another one is controller
77:36 - so controllers
77:38 - are basically used to like uh like
77:41 - basically like it is like to not
77:43 - communicate and navigate between the
77:45 - above two so basically controllers take
77:48 - control
77:50 - uh between uh
77:52 - where like between models
77:55 - and views
77:57 - okay so basically they are the one which
77:59 - basically communicate so basically
78:02 - controllers helps you to communicate
78:04 - between the above two so this is how mvc
78:07 - framework is completed so
78:09 - first thing we need to do is uh
78:12 - okay so first thing we need to do is we
78:15 - need to type rails
78:18 - server so basically i'll also give you a
78:20 - quick uh like overview what i like uh
78:23 - like important commands like initially
78:25 - you should know uh which will help you
78:27 - out so one command is rails server
78:30 - so this will start the server
78:33 - okay
78:34 - uh yeah
78:36 - another is rails console
78:38 - console so this will like
78:41 - uh this will like uh this will like this
78:44 - will start the console
78:47 - and you can like do interact with your
78:50 - database models inside this console so
78:52 - this has a short notations of rails s
78:55 - also known as rails s and this is also
78:58 - known as rail c
79:00 - uh another one is rails generate
79:04 - so basically generate is used to like
79:07 - generate like model views and controller
79:09 - so you can generate things with this so
79:11 - basically to generate
79:14 - and it has a short notation or rails g g
79:17 - so basically these are the commands you
79:19 - should know and preferably this should
79:21 - help you out like in this tutorial so
79:24 - first thing you need to remove inside
79:26 - your project directory i have already
79:28 - created a project
79:29 - and like
79:31 - you can and i have already created a
79:33 - project and
79:34 - you i know i'll start the server inside
79:36 - my project i'll type rail server i've
79:38 - already created a project with the name
79:39 - my project so real servers is this
79:42 - so when i do this so the real server
79:44 - should start on my local machine so
79:47 - basically real server is now started
79:50 - and when i like here you can see when i
79:53 - move to this port local host i see the
79:56 - server is running
79:58 - uh so here you can see the server is
80:00 - running on my machine so basically it
80:02 - starts on this board and i have a
80:03 - command line shell to like take care of
80:05 - the things
80:07 - now
80:08 - uh what you can do
80:10 - uh now i have terminated the like a
80:13 - server now i'll type rails
80:16 - generate controller
80:19 - and this should be my controller now
80:21 - after this i should have my controller
80:23 - name so basically i can type any
80:25 - controller so let me type root okay so
80:28 - just for your preference i'm typing root
80:30 - i'm highlighting this as well so like
80:33 - this is for my reference now when i run
80:35 - this command so now you will take it
80:38 - will take like a
80:40 - take a little bit of time uh not much
80:43 - but now here you can see that now it has
80:44 - created some files
80:46 - so the first thing is
80:48 - between like uh i taught you like these
80:50 - are like the commands you are going to
80:52 - like interact with rails most probably
80:54 - most of the time
80:55 - and these this is like it's uh like uh
80:57 - definition however else is defined mvc
81:00 - model so now we are going to like uh
81:03 - have an overview of little bit of files
81:06 - because understanding the structure is
81:08 - very important so you need to understand
81:10 - where database is defined where views is
81:12 - defined where controllers are defined so
81:13 - this would help you out
81:14 - so most probably you can see here itself
81:19 - that inside my app folder
81:22 - uh there is a folder three folders like
81:24 - one is models
81:26 - okay one other is views
81:28 - and another is controllers okay
81:31 - so
81:32 - when i wrote this command rails generate
81:35 - controller root so it itself created a
81:39 - root controller inside here here you can
81:41 - see the rails convert rails had like
81:43 - generated this controller for me
81:46 - so so now you can see the class root
81:48 - controller like it has inherited the
81:50 - property from application controller so
81:53 - so here you can see so it has like uh so
81:56 - here you can see that that there is
81:58 - application controller here
82:00 - okay now
82:02 - uh my root controller inherits from
82:03 - application controller so like so uh
82:06 - like basically my root controller
82:07 - enables and add some properties from
82:09 - application controller so that is the
82:10 - part of inheritance but the main point
82:12 - is here is that it has already generated
82:14 - a root controller now i can now now when
82:17 - i have generated a controller so it has
82:20 - also generated the corresponding views
82:22 - for it also now inside my views folder
82:24 - here you can see uh there is a folder
82:27 - called root
82:28 - which really generated right now it's
82:30 - empty
82:31 - but uh i'll show you how this works okay
82:34 - so now
82:36 - uh
82:37 - let's move to rouse.rb now
82:40 - let's define uh
82:43 - a route
82:44 - get
82:45 - okay
82:46 - and
82:48 - we need to define
82:51 - get
82:53 - uh so first we will define few routes
82:56 - and then we will carry okay
82:59 - hey so hey hey everyone uh welcome back
83:02 - so first let's define a route so
83:05 - now
83:06 - i'll define a route with get get request
83:10 - and it will say contact
83:13 - okay uh then i'll define a route with
83:16 - contact then slash about
83:19 - okay so they're like these are like few
83:22 - basic routes i've defined so now i'll
83:24 - define a two parameter which says where
83:26 - it should go when i hit this route okay
83:29 - where it should go
83:30 - so it should go to
83:33 - root
83:34 - okay okay now i'll show you first
83:37 - when i type slash contact
83:40 - uh
83:43 - slash contact and slash about so where
83:46 - should my function call exist
83:48 - okay so it should i will define a
83:51 - function in the root controller which
83:52 - says diff define about
83:55 - okay it says end
83:57 - and then another is defined
84:00 - contact okay
84:03 - and it says end so basically these two
84:06 - methods should be called inside the
84:07 - controller when i hit that route okay to
84:10 - clarify that we will say to
84:13 - root
84:14 - hash about
84:16 - okay and for this we will say root
84:19 - hash contact
84:22 - so when i hit these two routes you
84:24 - should call the about method inside the
84:27 - root controller and the contact method
84:29 - inside the root controller so when i
84:31 - reach here so
84:33 - it will hit this okay
84:35 - so
84:36 - let's first
84:38 - uh
84:39 - like
84:40 - now what you need to do and like now
84:43 - when you hit a route so basically you
84:45 - have two options either you create for
84:47 - particular request
84:48 - you have two options the first option is
84:50 - to
84:51 - uh for for for one request
84:54 - you have two option first is to
84:56 - return a json response
85:00 - okay so basically that is your api
85:03 - or second is
85:05 - to render
85:06 - a
85:07 - and render html page
85:10 - so that is your second option
85:12 - okay so to make sure if you want to
85:15 - return like html page so you should have
85:17 - the inside your root folder basically
85:20 - inside views you have root so you should
85:22 - have a file with html name as about dot
85:27 - html
85:29 - dot erb
85:31 - and
85:32 - another should be
85:35 - contact
85:36 - dot html dot erv okay so like these are
85:41 - the two files and in this i will define
85:43 - an h1 tag of about
85:46 - okay
85:47 - okay
85:48 - and
85:50 - in this i will define a h1 tag
85:53 - contact
85:56 - okay
85:57 - so here you can see
85:58 - like i have created this now when i hit
86:01 - these two routes uh like now i'll give a
86:04 - quick
86:04 - hit hit this hit these two routes when i
86:07 - hit them successfully you should call
86:09 - the like uh
86:11 - inside the root controller you should
86:12 - call this method about and contact
86:16 - and we will here
86:18 - by default say render about page
86:22 - okay and
86:24 - render
86:26 - contact
86:28 - okay
86:29 - and
86:30 - what we can also do we can say put s
86:33 - about page about in server
86:36 - okay put as about in server and in the
86:39 - same way we can say
86:41 - put as
86:42 - contact
86:44 - in server
86:46 - and like
86:47 - if we are able to like figure out like
86:50 - like this would really help us to see
86:52 - the console also
86:54 - okay
86:55 - so let's run this
86:57 - now
86:58 - let's run this we will type the command
87:00 - rail server
87:02 - so our server should start now
87:06 - okay so here you can see the server has
87:07 - started
87:08 - so now let's hit this page about
87:12 - so we have reached about
87:14 - and let's hit this one as well contact
87:18 - so here we have reached the contact page
87:20 - also
87:22 - and now you can see
87:24 - there is a specific line which says
87:26 - contact in server
87:28 - and it was also like then there is
87:31 - and server
87:32 - so here you can see whenever uh like i
87:35 - hit this route in the route dot rb
87:38 - it calls the about method and the
87:39 - contact matter of my root controller uh
87:41 - make sure that it can have any name i i
87:44 - named it as root you can name it with
87:45 - any other name
87:47 - then when it it like when uh it had
87:50 - hated the like method so it had first
87:53 - run the put a statement then it called
87:54 - the render method to like
87:56 - render the html page so this is like the
87:59 - most basic tutorial to create a route
88:01 - and render an html page in trails
88:03 - now in the next we will try to return a
88:05 - json response so i hope you you to catch
88:07 - up you all in the next tutorial so thank
88:09 - everyone for watching this
88:12 - so today we are going to continue with
88:13 - the rails tutorial so to start with
88:16 - first we will start a rail server
88:19 - okay so let's start a rail server with
88:22 - the command rails server
88:24 - so the short form of this command is
88:25 - tails s also
88:27 - so
88:28 - now when i like i have but i can
88:30 - previous tutorial i have showed you some
88:32 - like these things how to create a server
88:35 - console and the generate command so we
88:37 - had generated a control controller for
88:39 - the same so let's move to
88:42 - our server so let's refresh this page so
88:44 - here you can see
88:46 - like this is the page we get okay so
88:49 - let's define one another route and let's
88:52 - say
88:53 - get
88:54 - slash index and it moves to
88:58 - a root slash index
89:00 - hash index so let's define a index
89:03 - method here
89:05 - so
89:06 - let's define
89:09 - index and this should be on the top
89:11 - basically like above all
89:15 - so let's yeah perfectly fine so let's
89:19 - uh render
89:21 - index okay
89:23 - now uh i hope you must have watched my
89:25 - previous tutorial to like get so
89:28 - basically we are creating an index route
89:30 - which hits to root slash index
89:33 - and root hash index and when we move to
89:36 - root hash index it calls the index
89:37 - method
89:38 - and it renders the index erb so let's
89:41 - create an index crb which is by default
89:43 - should be created in the root folder and
89:46 - it should be the name
89:48 - index.html.erb
89:52 - and it says h1 with index page
89:57 - okay
89:58 - so yeah so let's
90:01 - move to this route
90:02 - slash index
90:05 - so
90:07 - okay it is showing an error okay it's a
90:09 - quite a small error uh
90:11 - i'll help you resolve it so basically in
90:14 - our route dot rb
90:17 - we i forgot to put it like a colon here
90:20 - so yeah now it should work fine so now
90:23 - we have like
90:24 - achieved the index page okay uh let's
90:27 - move to the another page
90:29 - contact
90:31 - and let's move to the another page about
90:35 - okay
90:36 - so it works perfectly fine
90:38 - so
90:39 - what you need to do like here you have
90:42 - the leg written render index
90:44 - so
90:45 - instead of index
90:47 - if you want to like you the one thing
90:49 - you could also do is like we can comment
90:51 - these things
90:53 - and
90:54 - we can comment these things and this is
90:57 - not required like uh like console
90:59 - statements are not wet uh uh you can see
91:01 - that whenever i hit that method the
91:03 - console is uh these statements are run
91:06 - in the console so
91:08 - uh when i remove this line okay let me
91:10 - remove this line render contact render
91:13 - about
91:14 - and render index so real by default has
91:17 - the ability
91:19 - to map that erb if the method name is
91:21 - same okay
91:24 - and here you can see contact
91:26 - and
91:27 - here you can see
91:29 - index okay
91:31 - so
91:32 - if inside the index you want to by
91:33 - default render index so you can leave
91:35 - blank and if you want to render about
91:39 - you could also do that
91:40 - okay
91:41 - so when i hit the index page i move to
91:44 - the about page okay index route moves to
91:46 - the about page so like this sounds
91:48 - little confusing but
91:50 - we should follow the convention because
91:52 - it increases the readability of the code
91:55 - and we know what is going uh out when so
91:57 - basically you should put these
91:59 - statements and it's like easier to debug
92:01 - than
92:03 - uh contact
92:05 - so
92:06 - uh so now we can like remove the
92:09 - statements
92:10 - so yeah
92:12 - so now what we can do
92:14 - a
92:16 - short activity like we are going to
92:17 - perform right now
92:19 - so
92:20 - we know that when we hit the root most
92:23 - route of this page like this is so we
92:25 - get the ruby on rails page
92:27 - so for that what we can type we can
92:29 - define the root
92:30 - and it should be root
92:33 - ash index
92:35 - so
92:36 - uh one thing i wanted to make clear
92:38 - don't
92:39 - confuse this root keyword with my root
92:42 - controller because i could have
92:44 - named any root controller but this is a
92:46 - like a reserved keyword in rails for
92:48 - like giving the root route so let's
92:51 - refresh this page and now and you can
92:52 - see now this route is the this route is
92:55 - the index route
92:56 - so
92:58 - you could also do this to about
93:02 - so now about one becomes the root
93:04 - perfectly fine
93:06 - you could also do this to contact
93:09 - contact and
93:11 - contact one will become the like default
93:13 - one
93:14 - so this is how it's performed
93:16 - so this is how we have achieved this uh
93:18 - like the root route so this is like easy
93:20 - to do and
93:22 - uh yeah so let's keep it this to index
93:26 - if we are keeping this to index then
93:28 - this is not required okay
93:30 - so we can either comment this out or
93:32 - like i'll comment this out because this
93:33 - is not required
93:35 - and i'll move this to top
93:37 - now like yeah so this is perfectly fine
93:40 - so
93:41 - uh now one format uh one one short
93:45 - active we are going to suppose to do we
93:46 - are going to create a one like api
93:48 - method uh
93:51 - let's create api
93:54 - and let's
93:57 - end this
93:58 - let's create a variable response
94:02 - response
94:04 - and let's uh give them a key so
94:07 - basically in rails we give a key by
94:09 - giving a colon so status and
94:13 - is equal to 200
94:15 - and basically it is like a hash map and
94:18 - message
94:20 - is equal to
94:21 - hello world
94:24 - now uh basically there are a lot of
94:26 - render methods we can do render json
94:30 - and this is we sent the response so
94:33 - basically i'm showing you this because
94:34 - like this is like most a used one so it
94:37 - will help you and now i'll type get
94:40 - flash
94:41 - response
94:43 - and we hit like the root
94:47 - hash api
94:50 - so when i hit move to response route i i
94:53 - call the api method of the root and then
94:55 - we can see the response
94:57 - so let's move to response
94:59 - so here you can see a status of 200 and
95:01 - a message of hello world is there so
95:04 - this is how we have cros uh created
95:06 - created a mock json response so that's
95:08 - good so
95:10 - there are multiple uh you could like
95:12 - figure out these i close this
95:14 - close this all as well and this
95:17 - and yeah
95:18 - so there are like multiple methods like
95:20 - one is json
95:22 - another is status
95:24 - okay i'm telling you
95:26 - you can like refer there are many
95:29 - then one is html
95:31 - uh one is body
95:34 - one is
95:35 - hd like like html there is a xml
95:39 - then there is a json there then as jsjs
95:42 - as well
95:43 - so
95:44 - uh there are many methods like plain
95:47 - uh
95:48 - text
95:48 - so there are many so you can like uh
95:51 - serialize your data like in many ways as
95:54 - like you want
95:56 - so this is this one will be like json so
95:59 - this one is perfect
96:01 - so now let's uh do uh one one thing i'll
96:04 - show you
96:05 - let's create
96:07 - a file
96:09 - header
96:10 - dot html dot erb
96:14 - and let's create another file
96:17 - new file footer
96:20 - dot html dot erb
96:23 - so one thing like you must have like a
96:27 - scene here like i am putting a
96:29 - underscore tag in between like in front
96:31 - when naming this file so basically this
96:34 - underscore tag defines a partial
96:36 - so i i'll give this in notes like this
96:39 - is a underscore tag
96:42 - means
96:43 - a partial
96:45 - so partial is something where you can it
96:47 - renders the same thing again and again
96:49 - so i'll show you
96:52 - when i move to like this page
96:57 - header.html.erb so i'll create
97:00 - header
97:02 - okay and i'll close this
97:04 - and i'll put a hr tag
97:07 - so i'll put a hr tag in the top and the
97:09 - bottom as well in the same way i'll copy
97:11 - the same code in the footer
97:15 - and i'll this name is add to footer
97:19 - okay when i move to my index page so
97:21 - when i move to my index page so i'll
97:23 - define
97:24 - so this is like
97:26 - uh
97:27 - like rails has a template engine so this
97:29 - is the syntax
97:30 - render
97:32 - header
97:34 - and this is how we define like this is
97:36 - like these braces are very important
97:38 - because this uh signifies the tempered
97:40 - engine rails
97:42 - okay so let's
97:45 - let's close the server and i'll start
97:48 - the server again
97:52 - so let's the server should start
97:55 - so yeah the server has started so let's
97:58 - refresh the page
97:59 - at the
98:00 - index so here you can see i have a
98:03 - header
98:04 - okay
98:05 - and in the same way
98:08 - in the same way i can
98:10 - render a footer
98:13 - okay
98:18 - so like yeah
98:21 - so this is how we achieve and now we can
98:24 - use this partial everywhere
98:26 - like if in this page we want a footer
98:28 - only okay or we want a footer
98:32 - at the
98:33 - footer only so we can do only footer and
98:36 - let's refresh and move to contact
98:40 - so here i only have the footer so this
98:42 - is how you can maintain the partials and
98:45 - partials can be rendered only wherever
98:47 - they are required
98:48 - so thank you everyone for watching this
98:50 - tutorial so i'll catch you in the next
98:52 - tutorial with some more content on rails
98:54 - thank you everyone
98:56 - today we are going to continue with our
98:58 - ruby on rails tutorial so basically i'll
99:00 - give give you a quick overview what we
99:02 - have achieved in like few last tutorials
99:05 - and today we are going to carry on with
99:07 - those things so basically we had created
99:09 - three routes one is a contact round
99:12 - about route and json response route
99:14 - and there was a root route that when we
99:16 - open our application so it should head
99:18 - to this method of the controller
99:20 - so basically uh we had created this
99:23 - router as well get slash index then we
99:25 - had to replace this with the root route
99:27 - so we had created a controller root so
99:30 - we had few methods of the root
99:31 - controller one is a contact about api
99:34 - index
99:35 - then let's move to the root controller
99:37 - then inside we have defined those
99:40 - methods the index about contact api
99:43 - and then we rendered a erb files for
99:46 - that particular method so we have
99:48 - rendered the index erb about erb contact
99:50 - erb and we for one method we render a
99:53 - json response
99:54 - so today uh
99:56 - then this is the root controller here it
99:58 - is located in the controllers file
100:01 - then uh we have like views
100:03 - uh we can close this views yeah then
100:06 - there is a views for for root layout and
100:09 - for index about contact index header and
100:11 - footer basically these two are partials
100:14 - because they are defined by underscore
100:16 - sign so we have invented the partials
100:18 - here so let's start our server first
100:21 - and let's see how our app is running
100:24 - till now
100:25 - and we can proceed with the things yeah
100:28 - so here you can see the server has
100:30 - started and basically now we can move to
100:33 - the server and let's refresh this page
100:36 - so you
100:37 - see few things we are in the index page
100:39 - and it has a header and footer let's
100:41 - move to contact
100:46 - and here you have that and a footer now
100:48 - let's move to about
100:50 - the about route
100:52 - so here it doesn't about so it neither
100:54 - has a header or footer so for that we
100:56 - need to integrate a a
100:59 - partial
101:00 - so here you can see we have embedded
101:02 - like a footer so let's
101:05 - add a footer and here we can add a
101:07 - header
101:10 - so
101:11 - we can have a header
101:15 - and now let's copy this
101:17 - list here as well and
101:19 - so here we have a header here now i'll
101:22 - above this
101:24 - and i'll remove this content
101:26 - so it seems perfectly fine so here we
101:28 - see we have a header and a footer
101:31 - now one thing to note here is that we
101:33 - don't uh like this is not uh like a
101:36 - business very basic html and if you want
101:38 - to integrate some styling we can achieve
101:40 - that
101:41 - so but before that i'll cover a few
101:43 - basics one is like now i'll
101:46 - close you files because they might
101:48 - create some create some confusion
101:50 - yes
101:51 - so let's create a route
101:54 - uh okay
101:55 - now we move to contact page
101:59 - okay
102:00 - and
102:01 - let's move to contact page
102:04 - so here we are on contact page okay so
102:07 - now we
102:09 - will move to root slash contact
102:12 - so we move to root
102:13 - contact and we are here okay
102:16 - so we render a contact page
102:18 - but what
102:19 - if we do this instead of commenting this
102:22 - i would do redirect
102:26 - underscore slash about
102:30 - if i do this
102:31 - let me restart my server
102:36 - i
102:36 - clear there is
102:38 - server yeah
102:40 - so what if i type this command redirect
102:42 - to about
102:44 - so let me refresh ah let me move to
102:46 - contact route and you can see
102:49 - that i was redirected
102:51 - uh i'll show you again this is the index
102:54 - okay
102:55 - uh now this is a contact one now when i
102:58 - click on contact you see i am redirected
103:00 - so you can use this
103:02 - uh to make a redirection
103:05 - but uh
103:06 - make sure like
103:07 - you you you use it for a good purpose
103:10 - because then it might create a
103:11 - conclusion so this is about the redirect
103:13 - route so basically you can redirect from
103:15 - one route to another using this
103:18 - uh next is i'll pass you parameters
103:22 - uh
103:24 - get
103:26 - uh
103:28 - get like user slash id
103:31 - okay
103:32 - and
103:35 - and i'll put name
103:38 - and it will be
103:40 - two slash
103:42 - to
103:42 - [Music]
103:44 - root slash
103:45 - hash
103:47 - user root hash user
103:49 - and let's create this method
103:53 - so basically find
103:55 - a user
103:57 - and let's make an end of this and let's
104:02 - simply render
104:04 - json
104:06 - with params okay so basically parents is
104:09 - what we return like i'll show you
104:12 - so let's again
104:15 - restart my server
104:18 - yeah
104:20 - yes so let's move to this route
104:25 - first let me check the server is running
104:26 - yes so your server is running let move
104:29 - to this user slash let's give it an id
104:33 - and
104:35 - name is joe
104:37 - okay now let's hit this and you see we
104:39 - get a json response of parents so
104:41 - controller is root action is user
104:43 - so now it defines very clearly
104:45 - controller is root action is user id is
104:48 - 10 a name is you
104:50 - what we can do here we can return
104:53 - parents of id first will return only
104:56 - this let's make a refresh we get 10 here
104:58 - only now let's make patterns of
105:01 - name
105:04 - we get joe so
105:06 - or we could simply do render pattern so
105:09 - this is how we
105:10 - access parents basically i will show you
105:11 - that pattern so id you can access id and
105:14 - parents of name you can access the name
105:16 - so basically now it seems perfect now
105:20 - you can refresh and here you can see
105:22 - that we have a controller root action
105:24 - with the response of parents
105:26 - a small activity we are going to do now
105:28 - to like
105:30 - you can embed bootstrap in your rails
105:33 - app very simply you can click here get
105:35 - started so basically when you click on
105:38 - get started either you can move to this
105:40 - page
105:42 - then you have a css js
105:44 - and like bundle so
105:47 - to copy this
105:48 - we want the bootstrap to be available on
105:50 - every page of our app so what we can do
105:53 - there is a main layout we can close this
105:56 - close this
105:57 - in views there is a main page
105:58 - application.html.erb
106:01 - inside here we can copy this link css
106:03 - link copy
106:05 - and we can put this
106:07 - just above the header
106:09 - okay
106:10 - so we see this has been embedded and
106:14 - then we can embed the js as well
106:17 - so let's embed the js
106:21 - yes so
106:23 - this is a like this is a bundle like you
106:25 - can the bundle means like both of them
106:27 - are like if you want separate you can do
106:28 - this like if you want it in a bundled
106:30 - way so you can use this so for the
106:33 - bundle one just put this below your
106:35 - closing body tag so the css has to be
106:38 - put like below your attack which is
106:40 - closed
106:41 - and the bundle has to be put like js
106:43 - bundle has to be put just before the
106:44 - closing body
106:46 - and now let's refresh the page and
106:50 - let's move to the
106:52 - just see the difference in the like uh
106:54 - for fonts so you might be seeing
106:56 - something different so it looks pretty
106:59 - nice
107:00 - so you can like make close call that
107:02 - bootstrap has been solved
107:04 - uh
107:05 - then
107:07 - you can press ctrl u so it will bring to
107:10 - the source code and in the source code
107:11 - you can see the bootstrap has been
107:12 - installed so basically this is a
107:14 - template
107:15 - now what we can do we can move to here
107:18 - and we can move to some components
107:20 - and let's move to the component navbar
107:23 - the simplest one is this
107:26 - okay so if we move to our header partial
107:30 - and
107:31 - let's remove this and let's copy the
107:33 - bootstrap
107:35 - and let's refresh now
107:38 - see how it's easy to integrate with our
107:40 - app so like we had already made a
107:42 - partial we changed that partial
107:45 - and all the changes
107:48 - which have been
107:49 - wherever this partial has been included
107:51 - all the changes are there so everywhere
107:53 - there like it's been included
107:55 - so for this you can like do this uh
107:59 - uh for footer we can just for an example
108:01 - i'm using this page
108:03 - the pagination
108:04 - and
108:06 - let's move to here
108:07 - and let's remove this and let's add this
108:10 - and let's refresh the page so here you
108:12 - can see how simple it's easy to add okay
108:15 - so
108:16 - just like this was like just like
108:19 - just to show you how things work now
108:22 - this was like a pretty pretty good
108:24 - exercise and decent one
108:26 - you can
108:27 - like
108:28 - if you want to like edit some
108:30 - css here you can click on inspect
108:31 - element this will open the chrome
108:33 - developer tools and basically
108:36 - uh
108:37 - here you can if you want to like align
108:39 - this to center so basically this is this
108:42 - is this and you can invent margin
108:45 - zero
108:46 - photo
108:48 - you can try a few things here and this
108:50 - would probably help you out okay
108:52 - so
108:54 - so this is this was it like this is how
108:56 - you can
108:57 - like take care of things and you can try
108:59 - some different css here like margin zero
109:01 - auto like anything you want to uh just
109:04 - keep on trying things here so basically
109:05 - this will really help you
109:07 - okay so thank you everyone for watching
109:09 - this tutorial so i'll catch you in the
109:11 - next video thank you everyone
109:15 - so basically we had uh first i'll start
109:17 - my server
109:19 - this
109:20 - server
109:22 - and then let's wait for the server to
109:24 - get started so your server is running
109:26 - let's fix this page so basically we had
109:28 - a footer here
109:32 - in last tutorial i took a small task to
109:34 - how to align this incentive so basically
109:36 - so since
109:38 - you can see that
109:40 - this is a flex box so align text box to
109:44 - center is justify content you have
109:46 - basically a few types of justified
109:48 - content that is center next end the end
109:51 - would move to move this end start will
109:53 - keep it as starting then basically there
109:55 - are a few things space around space
109:57 - between so space evenly so you can opt
110:01 - for any so basically the best one you
110:03 - can choose for is center
110:06 - okay and so basically you have to center
110:10 - and then you can see that this is in
110:12 - center
110:13 - so let's click on inspect and let's
110:15 - check
110:16 - yeah it's even it's here it's center
110:19 - so this is a flex class so let's we will
110:22 - give this a style
110:25 - is equal to
110:26 - justify content center
110:28 - so let's refresh this now we have
110:31 - perfectly moved to this
110:33 - so this was a good good thing to know
110:35 - about and now let's move to let's create
110:38 - a
110:39 - model
110:40 - so basically
110:42 - uh
110:43 - this is our like project directory so i
110:46 - have opened this in terminal so that it
110:48 - gives you clear view so i could do the
110:50 - same thing in the vs code terminal but
110:52 - that's why i opened a terminal here to
110:54 - like to have a good overview so now we
110:57 - are going to perform something let's
110:59 - create rails generate
111:02 - generate
111:03 - model
111:04 - article okay or let let's keep it as
111:08 - post there is generate a model also post
111:11 - is something you uh like
111:13 - uh
111:15 - like you define something a post which
111:17 - has a like a title
111:20 - so that is a string
111:22 - and it has a text
111:24 - so that is a
111:27 - you can say
111:29 - like this is title string and you have a
111:31 - description
111:32 - description so basically that is of text
111:35 - data type so let's run this and
111:39 - now you can see
111:40 - that
111:42 - it has created a
111:44 - model and now we can do rails db
111:49 - so basically model is like creating a
111:51 - table in your database now we want to
111:54 - permanently move to this table so we
111:57 - want this to like migrate this into
111:59 - database so we had created a model which
112:02 - defines that we are going to create
112:03 - something with the title string and
112:05 - description text now let's create rails
112:08 - db migrate
112:11 - and then you can see
112:13 - that this
112:15 - should be created
112:17 - permanently in the database so here it
112:20 - says this has been created created table
112:22 - post and the descriptions we have
112:24 - already mentioned what we are going to
112:26 - create
112:27 - so
112:28 - okay before you perform a few operations
112:30 - with the like uh this table or model
112:33 - which i say so basically so you can
112:36 - interact with this inside rails console
112:40 - okay so please type rails console
112:44 - and
112:45 - then you have interactive rails shell to
112:47 - work with
112:48 - then you can interact with this uh this
112:51 - inside the rails console so let's type
112:54 - post but it will it shall throw an error
112:57 - because it says po call post.connection
113:00 - to establish a connection okay so that's
113:02 - why i did this post dot connection
113:06 - so this so we have made a connection
113:08 - so it like it throws out a good amount
113:11 - of things so we shall ignore this
113:14 - okay
113:15 - and okay i have missed all of my cursor
113:17 - yes so we can type uh
113:20 - clear this you can type uh you can type
113:23 - control l control l control plus l so
113:26 - this would clear out okay so okay
113:29 - control plus l and now this will clear
113:31 - out and now you have
113:34 - now let's
113:35 - take a post make post a is equal to post
113:38 - okay so basically it defines
113:41 - uh
113:42 - a so id is an integer title is string
113:45 - description of the text created as a
113:47 - date time updated at a date time
113:49 - okay so let's skip a dot title
113:52 - is equal to hello
113:55 - okay
113:56 - okay
113:58 - undefined
114:02 - okay okay okay so uh i'll tell you
114:05 - what's the issue with this uh c
114:08 - so basically uh we need to call the
114:10 - constructor so you can for a second
114:12 - ignore this so we will call a is equal
114:15 - to post dot new
114:17 - okay now you see we get a post id is nil
114:20 - title is named description is created
114:22 - additional update results but at that
114:24 - time what i was doing i was doing a is
114:26 - equal to post
114:27 - which eventually meant
114:29 - a is equal to post which is a is equal
114:31 - to post so which is by default meant
114:33 - this that post and which was returning
114:35 - this okay so this is the class
114:38 - first is a class now a which i have
114:41 - created is going to post.new is is the
114:43 - object of that class
114:44 - or you can say the instance of that
114:46 - class
114:47 - now
114:48 - post is a class and a o a is equal to
114:51 - post dot new is the object of that class
114:53 - because we have called the new as a
114:54 - constructor
114:56 - so let's define a and let's do a dot
114:58 - title
114:59 - is equal to hello
115:01 - and a dot description
115:05 - is equal to word
115:08 - okay now we type a so we have title is
115:11 - equal to hello and descriptions good
115:12 - word
115:14 - now to save this inside our database we
115:16 - should call a dot save so it says
115:19 - which means it has been saved in our
115:21 - database and let's call a again so it
115:23 - says id one title is hello world
115:26 - description is world and this is a
115:27 - created ad and updated
115:29 - things which is throwing and one thing
115:31 - you can see it also gives out the sql
115:33 - query insert into post
115:36 - and title description created update
115:38 - value should be this is this and this so
115:41 - this is how it creates that into
115:42 - database let's create another one
115:45 - let's first call post as a class so it's
115:48 - not necessary to call it everything but
115:50 - i'm showing you again now let's call b
115:55 - is equal to post dot new
115:58 - let's call b so this is the post this
116:00 - has been
116:02 - let's try b dot
116:04 - title
116:06 - is equal to
116:09 - programming uh either we can say ruby
116:12 - okay and b dot description
116:18 - this is equal to rails
116:19 - simple let's call b again
116:22 - and it says this and let's call b dot
116:24 - save then it shall clear save the sensor
116:26 - database
116:27 - okay now we have to post
116:30 - one is this and another this so to
116:33 - access all the posts you could call
116:35 - post.all
116:36 - simply
116:37 - okay so it gives all the posts you have
116:40 - so this so and one with the id one and
116:42 - another is with the id two here you can
116:43 - see this is the id two and this is id
116:45 - one so both the post we get
116:47 - uh
116:48 - then
116:49 - we can
116:51 - call post dot
116:54 - find
116:55 - find is like i'll show you show you post
116:57 - dot find one let's find the post with
116:59 - the id one
117:00 - it so it finds us
117:02 - for us for that now we can see in the
117:04 - similar way called post dot find two
117:07 - this
117:08 - you could also call host dot where
117:13 - id
117:16 - uh you like ubiquito id
117:20 - okay there's some issue with my command
117:21 - line
117:22 - okay post
117:25 - dot where
117:28 - id
117:29 - is equal to one
117:31 - so
117:32 - where
117:33 - and what's the difference between the
117:35 - find and post uh find and where so this
117:38 - is and this is another way of doing the
117:40 - same thing but find has a limit one okay
117:43 - so so we have learned about like how to
117:46 - create now let's move to how to like
117:48 - let's do something uh something new uh
117:51 - let's make post dot find
117:54 - post
117:55 - dot find
117:57 - so let's make first now let's change
117:59 - this title to
118:01 - title is equal to
118:02 - ruby
118:04 - uh ruby new
118:08 - okay so we have b
118:09 - and that's b dot description
118:15 - is equal to rails
118:18 - new and let's see so we do b dot save so
118:22 - this is our update operation okay
118:24 - so say update post see update both set
118:27 - title is the description this and these
118:29 - are the value
118:30 - uh we could also do
118:32 - post
118:34 - dot find to and destroy
118:38 - so basically this forms a delete
118:39 - operation so we have learned how to like
118:42 - perform all the four thread operations
118:43 - that discrete date update and delete on
118:45 - the rails console so now we are going to
118:48 - implement this same thing with the ui so
118:51 - thank you everyone for watching this i
118:52 - will catch you in the next tutorial
118:54 - thank you
118:55 - now
118:56 - what in previous tutorial we have
118:57 - learned about models and rails so we are
119:00 - going to continue with like further
119:02 - development how to develop our
119:04 - application in rails
119:05 - so we had created a model in rails and
119:09 - basically you can type here
119:11 - so i have started already started my
119:12 - server i'll show you how to like
119:15 - you can type trails
119:17 - server to start your server and instead
119:20 - of server you can type rails console so
119:22 - it will open interactive shell on your
119:24 - rails machine
119:25 - okay
119:26 - so and here you can start your server
119:28 - rails server so i have opened the
119:32 - console here so that it gives you a
119:33 - better view and we had made
119:36 - post.connection
119:37 - so we had made a model post.connection
119:40 - and you can now press ctrl l and then
119:44 - you can print post so it gives you the
119:46 - data structure what we are following in
119:48 - the post so it has an id integer title
119:51 - string description text created at date
119:52 - time and updated data so we
119:55 - so this is how we i showed you flow
119:57 - operation in the last video of hostile
119:59 - what we can perform
120:00 - now let's this is our server
120:02 - and let's uh now let's move with some
120:06 - like something
120:08 - new to this edition
120:10 - uh now what you can do you can move to
120:11 - bootstrap website and i can click here
120:14 - open into tab and this would guide me to
120:17 - the bootstrap website i can refer to
120:19 - this page
120:20 - and here what i can do
120:22 - uh
120:23 - what i can do i can move to forms
120:26 - and
120:27 - and i can refer to forms and what i can
120:30 - do here is uh
120:32 - click on overview
120:34 - then click on like
120:37 - this and overview
120:38 - and this would give you like diff you
120:40 - will have different things or forms here
120:42 - uh then you can click on
120:44 - like form control so you can move to
120:47 - this page and you can copy this
120:50 - let's copy this
120:52 - uh let's copy this and let's paste this
120:55 - inside we have a few files let's paste
120:58 - this on index.html
121:00 - and let's print let's paste this this
121:03 - here
121:04 - and then your application just refresh
121:06 - this so basically now we have a form
121:09 - here okay
121:10 - so
121:12 - this forms looks pretty big so what we
121:14 - can do we can try to
121:16 - small it down and
121:18 - for this we can add this give this class
121:20 - as call
121:23 - call md6 to take the width of six and
121:27 - and let's
121:28 - give it a class of column d6 so
121:31 - okay
121:32 - so nothing to this so let me inspect
121:34 - this element and
121:37 - yeah so here yeah so i have this diff
121:40 - class rule called md6
121:43 - and
121:44 - this should work i think
121:47 - okay so let's let's make another div
121:50 - let's make another dip div
121:53 - and
121:54 - let's wrap this inside this day
121:59 - yeah and let's this give this dip a
122:02 - class of
122:03 - call
122:04 - nd
122:05 - 6
122:06 - because bushra has a total width of 12
122:09 - columns we are asking it to take a width
122:11 - of 6 columns let's
122:13 - okay
122:14 - it doesn't look either now
122:17 - and let's give it a call six
122:21 - okay i forgot to like close the tag yeah
122:25 - yeah
122:27 - yeah so now it works perfectly fine
122:29 - uh and then you can give style
122:33 - of margin
122:36 - uh zero auto so this would place this
122:39 - inside the center
122:41 - okay so this should work perfectly fine
122:45 - yeah and
122:47 - you can like this is perfectly fine and
122:49 - inside our header
122:51 - uh let's create instead of header let's
122:54 - give this a
122:56 - go to app
122:58 - and let's give this a two to f
123:00 - and
123:01 - we can like now everything looks
123:03 - perfectly fine and we could do like so
123:07 - yeah
123:07 - so this is good okay so
123:10 - yeah so now we try to create a to-do app
123:13 - here from now and this is example email
123:16 - address now let's modify the few things
123:19 - so that we can uh operate on them so
123:22 - instead of this
123:24 - let's give this
123:26 - a title
123:29 - and
123:30 - here if we give this a title name is
123:31 - equal to title
123:35 - so here we give it a name as a title and
123:37 - here we give this a name
123:41 - okay the name should the input type is
123:43 - equal to text
123:45 - and let's give it to input types
123:48 - okay try to close this yeah yeah so
123:53 - so this is this is the input type is
123:55 - equal to text and let's give this
123:59 - name is equal to title and here we have
124:02 - a text area let's give this as a name
124:05 - to text area
124:08 - okay
124:09 - so this is looks good so this is how we
124:12 - created so this is title and
124:15 - and this is basically for us this means
124:17 - description so we will give this a
124:19 - description
124:21 - and
124:22 - and this is here we also type it as
124:25 - description
124:27 - okay so
124:29 - this
124:30 - cryption is good yeah
124:32 - so
124:33 - let's
124:34 - and we remove this and we need to wrap
124:37 - this everything inside a form
124:40 - okay and let's close this here
124:46 - so let's yeah so we need to wrap this
124:49 - inside a form
124:51 - yeah so this looks pretty good yeah so
124:52 - fine
124:53 - so
124:54 - so this is like a kind of a footer for
124:56 - us this is like a kind of header
124:58 - and so we need to like this is how we
125:00 - define it so this looks good so we have
125:04 - made some boilerplate a front end for
125:06 - our app
125:07 - and
125:08 - instead of email you should change this
125:10 - to text
125:12 - okay
125:13 - and now
125:14 - we create a method for this
125:18 - method is equal to post
125:23 - and yeah so let's refresh this so good
125:27 - so we have made this method equal to
125:29 - post and let's create a action is equal
125:31 - to
125:33 - add okay let's create this to add
125:36 - so action is to slash add and
125:40 - uh so this should work fine
125:43 - and
125:44 - so let's create a
125:46 - so
125:47 - since like we have created this
125:49 - circulated this response so left let's
125:51 - create this uh
125:52 - action which takes a post request and
125:55 - give it a slash add
125:57 - and
125:58 - let's create something as this
126:01 - 2 is equal to root
126:04 - add
126:06 - okay and let's create a okay one thing
126:09 - you need to make sure that
126:11 - you need to add
126:13 - a token tag here because a post request
126:16 - the question is the cscs csf rf token
126:19 - and you need to define token underscore
126:22 - tag here and you can now close this tag
126:25 - and this is looks perfectly fine so
126:27 - let's finish this page
126:29 - so yeah good
126:30 - now
126:31 - we need to define a post request inside
126:33 - of controller so that is define add
126:37 - and
126:38 - that is end
126:40 - and render json params is the same thing
126:42 - we are going to do here
126:44 - and inside a form we need to define uh
126:47 - like a button
126:49 - so let's define a button
126:52 - so
126:53 - let's click this same class if class is
126:55 - equal to
126:57 - mb3
127:00 - and let's
127:02 - get
127:03 - a button
127:07 - input
127:09 - let's create a button yeah
127:16 - so let's create a button input
127:19 - type
127:21 - is equal to text
127:23 - class
127:25 - is equal to btn
127:27 - btn primary
127:32 - and
127:33 - let's
127:35 - yeah so it's a good good and
127:37 - we can
127:40 - remove this placeholder because this is
127:41 - not needed
127:44 - we can move this placeholder
127:49 - okay we can move this placeholder id is
127:51 - also not needed
127:53 - okay okay id is needed and because id is
127:56 - equal to needed because
128:01 - let's get give this to a
128:04 - title id
128:07 - and let's give to this is this a
128:09 - description id
128:12 - description
128:14 - id
128:16 - and we need to like wrap this
128:18 - description id here
128:21 - because this is works one id and this is
128:24 - text id
128:28 - so like
128:29 - a good amount of changes has been done
128:31 - let's refresh this and
128:33 - yes so this is between butane primary
128:36 - and a value should be
128:40 - add
128:42 - okay and let's give a style
128:45 - is equal to
128:47 - display
128:50 - block
128:53 - okay and it should be done yeah
128:56 - so yeah so this is a button iron and
128:58 - let's give a display block and
129:01 - margin
129:06 - because margin zero auto will align this
129:09 - button to center
129:12 - okay so let's give this
129:14 - a refresh yeah so this looks perfectly
129:17 - fine
129:18 - so like in this tutorial we created all
129:20 - the
129:21 - like part needed to like perform this
129:24 - operation
129:26 - and
129:27 - so so thank you everyone for watching
129:29 - this tutorial i'll catch in the next
129:31 - tutorial so like you can go over this
129:34 - video like
129:35 - because it was needed to necessary to
129:37 - set up this bootstrap form so in the
129:39 - next tutorial we will like see how we
129:41 - can form other operations thank you
129:43 - everyone
129:45 - so in the previous tutorial i showed you
129:47 - like first i will start my rail server
129:49 - so i type rails server
129:51 - this would start the real server on my
129:53 - machine
129:54 - so we had created this front-end layout
129:56 - using our in the rails app
129:59 - so so like one few mistakes like a few
130:03 - things uh i would like to make clear
130:06 - uh that
130:08 - that is
130:08 - inside your
130:10 - index.html.erb this for input type is
130:13 - text actually this should be introduced
130:15 - equal to input type is equal to submit
130:17 - because this is a button and you need a
130:19 - submit button so when you make this
130:21 - change you can see this button so this
130:23 - knob this becomes a button
130:25 - uh and inside your header.html
130:29 - uh this is this snapbar
130:31 - you can do this to to-do app
130:34 - okay and
130:36 - let's do this and here you can see that
130:38 - now this becomes a to-do app
130:41 - we don't need these things so we can
130:43 - like cut them like they might create
130:45 - some confusion like with the code so
130:49 - we know don't need this drop down so
130:51 - this is fine
130:53 - and
130:54 - we also don't need this this is fine
130:58 - and let's refresh this so we have a home
131:00 - or link
131:02 - so let's
131:03 - see this
131:04 - so we can change this link to slash
131:07 - contact
131:08 - and this becomes contact
131:11 - okay and in the same way we can copy
131:14 - this
131:16 - we can replicate this
131:18 - and this can be changed to about
131:21 - about
131:23 - and this is about
131:27 - uh yeah and this can be changed to slash
131:30 - slash that is the root
131:32 - oh slash slash contact flash about let's
131:34 - refresh them
131:36 - here we can see so let's click on about
131:38 - move to about page contract is contact
131:40 - and home is this
131:41 - so this is perfectly fine now let's
131:44 - check
131:45 - how we can make a post request using
131:47 - this form
131:49 - so what we can do
131:51 - we can move to like these files have
131:53 - been sorted so let's move to index.html
131:56 - and let's make a we already made a
131:58 - method post please make sure that in uh
132:01 - below the post
132:03 - like below the form tag you add this
132:05 - token endoscope tag because if you don't
132:08 - add this token underscore tag you won't
132:10 - be able to make a post request because
132:11 - this will give an authentication error
132:14 - and to make a post request you need an
132:16 - authentication token so so that for
132:19 - every request we have a token and then
132:21 - you won't be able to make this okay
132:23 - so for we
132:24 - for this method post we move to action
132:27 - add so let's move to action add sorry
132:30 - you are allowed so post slash add move
132:35 - in a root controller we move to the
132:37 - action add
132:38 - and let's
132:39 - see this
132:40 - and then we simply
132:42 - add what we do okay this is not for now
132:47 - we simply do render json response
132:49 - patterns so let's create this
132:51 - let's create to do
132:53 - and let's copy this and paste this as
132:55 - well so let's make a request
132:57 - and here you can see
132:59 - authenticity token is this so that was
133:01 - the token underscore tag i was speaking
133:03 - about so
133:04 - which is here so this is the token
133:06 - underscope tag
133:08 - and the title is to do description is
133:10 - description controllers root and action
133:12 - is act so this means our form is working
133:14 - perfectly fine so let's try to get the
133:16 - data out of this form and post this okay
133:19 - so let's what we can do
133:22 - we can uh we can create
133:25 - add the right post is equal to post.new
133:29 - and
133:31 - we can do at the red post or title
133:36 - is equal to params
133:38 - of title
133:40 - and it
133:41 - post dot description
133:47 - is equal to patterns
133:50 - dot
133:50 - uh parents or description
133:53 - okay so we need to like follow this
133:56 - convention uh this should be strictly
133:59 - followed the title string and
134:00 - descriptions text okay
134:02 - and make sure you don't have any some
134:05 - spelling errors then this would be like
134:06 - something
134:08 - then render json at the right post so
134:10 - let's do this first let's do this now
134:13 - let's refresh this page and make a
134:14 - request again so say id is null title is
134:17 - due to description description works
134:19 - perfectly fine and we return the
134:21 - instance and we see that we don't save
134:24 - this in our database so let's do address
134:27 - post dot save
134:30 - and and we render json
134:33 - what we can do we can
134:35 - simply return this kind of response
134:39 - but let's copy this
134:41 - this would help really help us
134:42 - so we can say
134:45 - you can say
134:47 - message says saved successfully
134:51 - saved and success we can say
134:53 - successfully so this is like perfectly
134:56 - fine let's make another request and do
134:59 - this
135:00 - and
135:01 - here you can see
135:04 - this sign can't be reached like we have
135:06 - some
135:08 - like
135:10 - we have some issue let me check this
135:15 - hey everyone welcome back so like i now
135:18 - by mistake i must have closed the server
135:20 - that was it throwing an error so let's
135:22 - create a task
135:23 - task new now
135:25 - and let's make a description
135:27 - let's make a description this
135:30 - description new now
135:32 - so let's click on add and here you can
135:34 - see we have a status 200 which means
135:36 - okay and between this request okay and
135:38 - message is saved successfully okay to
135:41 - view this what we can do
135:42 - we can do post but all in our database
135:46 - and
135:47 - here you can see that we have a task new
135:49 - now and description you now created here
135:52 - so we could also do this
135:54 - post dot find
135:56 - by id5 since i've seen this ids 5 and
135:59 - here you can see we have already saved
136:01 - this to our database so this is good and
136:03 - works perfectly fine
136:05 - what if we want to like uh instead of
136:08 - doing this we could
136:10 - render
136:13 - our index page instead okay so let's
136:16 - make a hit again
136:19 - task do not
136:20 - task new node 2 description new node 2
136:22 - and let's create add and here we can see
136:25 - that
136:26 - it must have been saved in the database
136:28 - let's check in the database
136:30 - so let's check in the database post dot
136:33 - find by id sticks because the new id
136:35 - created would be six and it says let's
136:37 - see we can see that it has been created
136:39 - in the database so it works perfectly
136:41 - fine
136:42 - uh but would instead of doing this we
136:44 - could do something like this
136:47 - drift post
136:49 - is equal to post dot all let's create
136:52 - our logic
136:53 - and
136:55 - let's create a logic yeah so we have
136:58 - rendered all posts in the index page
137:00 - so
137:01 - this would automatically be rendered
137:03 - okay
137:04 - in the index page and what we can do we
137:06 - can now access this inside of page so
137:09 - let's give a hr tag
137:14 - and let's give
137:17 - a post
137:19 - dot each
137:21 - do post
137:24 - and let's close this
137:27 - okay and let's close this and uh
137:31 - we could do
137:32 - something like this
137:34 - percent equal to post dot title
137:42 - and we could close this here
137:47 - something like this
137:49 - so similarly we i'm trying to achieve
137:51 - this so this is like what i meant so
137:54 - end tag i forgot to put like i'll put
137:56 - down
137:59 - yeah so this should work now like this
138:02 - is post dot each
138:04 - you do post and like it should work now
138:07 - so let's refresh this
138:10 - and no matches slash get route okay no
138:13 - we need to move to this
138:15 - okay there's an error let me check we
138:17 - need to i need to check this error
138:21 - hey everyone welcome back uh so a smart
138:24 - error like i found like like we have
138:27 - created we are like first when we add so
138:30 - we render an index page okay if we
138:32 - perform ad operation
138:34 - instead by default we are rendering the
138:36 - index page with this route which is the
138:38 - root route we need to define post here
138:40 - as well so if your render index if you
138:42 - render index then you would you need to
138:45 - add posts on both the sites like post is
138:47 - your post dot call and even here you
138:49 - have to define post world because in the
138:50 - same time you are rendering index okay
138:53 - because when you are rendering the index
138:55 - you need the post to be shown okay
138:57 - and when we move to individual html this
138:59 - is like this syntax is correct but it's
139:01 - a small error uh the accurate sign has
139:03 - to be put here
139:05 - now uh we can use a bootstrap card
139:08 - so i'll show you
139:11 - we can use a bootstrap card
139:14 - and let's search for card yeah
139:17 - so let's copy this
139:20 - and let's
139:22 - paste it here
139:24 - we don't need the image tag so this is
139:26 - fine
139:27 - we need this
139:30 - so let's
139:32 - paste it here
139:35 - and another thing we need is this
139:37 - description
139:41 - okay
139:42 - so
139:43 - another thing we need here is
139:45 - description
139:51 - this
139:52 - option
139:54 - let's refresh this
139:56 - and let's move to this so here you can
139:58 - see we have all the to-do's
140:00 - okay they are not aligned in the center
140:02 - to align them in the center what we can
140:04 - do
140:05 - you can put margin
140:07 - zero auto
140:10 - okay now let's refresh this and yeah
140:13 - perfectly fine
140:14 - so and one thing we are rendering is
140:16 - pose.title this is not needed yes let's
140:19 - refresh this now and we like move to
140:22 - contact
140:23 - up index this works perfectly fine and
140:25 - let's add a new to do
140:28 - do done again
140:31 - and let's give this as same and let's
140:33 - create an ad and now you can see this
140:36 - has been added
140:37 - so this works perfectly fine thank you
140:39 - everyone for watching this video i'll
140:40 - catch you in the next tutorial thank you
140:43 - so here i have started my real server
140:45 - and here i've started my rails console
140:47 - so let's make a post dot connection
140:50 - post dot connection and then yeah then
140:54 - we
140:54 - it's fine then we can type post and we
140:57 - could see our database like schema so
141:00 - here is our database schema here you can
141:02 - see
141:02 - so here we can work on this schema and
141:04 - let's get started
141:06 - so basically uh i'll run my application
141:09 - so yeah this is application let's add it
141:10 - to do
141:12 - new uh let's give them some like task
141:16 - one
141:18 - and just for the simplicity let's add
141:20 - this yeah perfect
141:22 - task two
141:25 - so with the simplicity i am going to
141:26 - repeat this process like for a few tasks
141:29 - last three
141:32 - so here you can see that it is
141:35 - we have created three tasks works
141:37 - perfectly fine
141:38 - but when you click on this none of them
141:40 - is get gets deleted so we've been
141:42 - implementing delete functionality
141:44 - the first thing we need to do you need
141:46 - to move to this file uh
141:48 - index.html.erb and you need to convert
141:50 - this
141:52 - button
141:53 - to delete okay
141:55 - so first let's make it out or delete so
141:58 - let's move to this file
142:00 - uh we will move to roush.drp
142:04 - and let's create this
142:06 - delete
142:08 - let's create delete and for that we need
142:11 - an id
142:12 - so this is not a get method this is a
142:15 - delete method
142:16 - okay uh
142:17 - we go to
142:19 - root
142:21 - hash
142:23 - delete
142:24 - i hope this is fine
142:25 - so let's move to root hat delete so this
142:28 - is where we form the delete operation
142:32 - now let's move to our root controller
142:35 - and create a method delete
142:38 - and simply let's
142:41 - end this
142:42 - and
142:44 - render
142:45 - json
142:47 - patterns
142:48 - okay uh this is fine we have made this
142:52 - let's move to index.html.erb
142:55 - and let's
142:56 - change this button to btn btn
142:59 - danger
143:01 - and
143:02 - we have changed this to beating video
143:03 - and dangerous y because it will give a
143:05 - red feather and give let's give it give
143:07 - it a style also so we'll move the style
143:09 - is equal to display
143:12 - display
143:14 - or simply give margins here auto it will
143:16 - move to center
143:19 - okay uh
143:22 - yeah so we can refresh this
143:25 - so
143:26 - it gives an error
143:28 - so let me check
143:29 - extracted source around
143:32 - let me check what this error is throwing
143:34 - let me check please
143:37 - welcome back uh the error is like we
143:40 - need to check that i need to put a colon
143:42 - sign here so this is fine
143:44 - let's refresh this and
143:47 - no match for get ad okay okay this is
143:49 - something yeah so here we have move to
143:52 - the delete button
143:53 - so now let's click on this and
143:58 - this is not working
144:00 - okay so they've seen some issue with
144:02 - this so this is not working let me let
144:05 - the we have created delete route
144:08 - and let's move to our index.html.drb
144:14 - yeah because it won't work because there
144:15 - is no hrm
144:17 - so when we say hrf is equal to slash
144:20 - delete
144:22 - and
144:23 - we need to define uh we need to put the
144:26 - like we need to put the id basically we
144:29 - need the id
144:30 - so we will find post dot
144:33 - id
144:34 - then we will close this
144:36 - and now this is fine so basically what
144:38 - we do we call for a delete method and
144:41 - with the id we pass it here
144:43 - another thing we need to do we need to
144:44 - price data method is equal to delete
144:48 - because by default a anchor tag has a
144:50 - get nature so
144:52 - nature won't work here because
144:55 - yeah i can uh
144:57 - opt for this i will show you how
144:59 - first i'll refresh
145:02 - now here you can see now i'll call this
145:04 - so it says get delete nine is not
145:06 - possible yes it won't be possible
145:08 - because we had defined in a route.rb
145:10 - this was a delete method
145:12 - so let's move back to index.html.erb
145:15 - and make this data method
145:18 - from the third is equal to this could be
145:20 - either get
145:22 - either post
145:24 - uh either get post or delete so we make
145:27 - it delete
145:28 - let's move this
145:29 - so let's
145:31 - let's
145:32 - move to our app refresh it
145:34 - so let's call delete and here you can
145:36 - see we have a json response so it works
145:38 - perfectly fine
145:39 - what we need to do we need to move to
145:41 - root controller now
145:43 - and we will do at the post is able to
145:45 - post
145:47 - post dot find
145:50 - patterns of id
145:53 - okay so because we need to match with
145:56 - the id here
145:58 - and we will simply say
146:00 - did it post or destroy
146:04 - destroy and this would delete the post
146:06 - and everything else remains same instead
146:08 - of generate json response we render
146:11 - at the right position
146:13 - and render index
146:15 - because then we this is a single post
146:17 - this is all the post so let's refresh
146:19 - this
146:20 - let's check if this is working or not
146:22 - yeah so refresh the app let's create
146:25 - delete
146:27 - okay
146:28 - still it returns like json response
146:33 - okay let me check
146:34 - what's the issue
146:37 - yeah so now i have saved the file i must
146:40 - have forgot to save this now click on
146:42 - delete yeah now it works everything
146:43 - works fine because i forgot to save the
146:46 - file so chain these changes won't save
146:48 - so it was like till json so now after uh
146:51 - saving them the saving the file now
146:53 - reflects the changes so let's quickly
146:55 - check whether how to do this now to do
146:59 - one
147:00 - let's create a description to do one now
147:03 - do two let's create two two
147:06 - now delete both of them
147:08 - deleted so perfectly fine
147:10 - so this is how we
147:12 - get the delete functionality
147:15 - so let's create another functionality
147:17 - let's create uh
147:19 - let's create some to do
147:21 - to do one
147:23 - and let's create
147:26 - this two to one
147:29 - to do two
147:32 - let's click ask three
147:35 - let's let's create some to do's now
147:38 - because we we might need to implement a
147:41 - new functionality and we might need them
147:43 - so let's do this so task
147:46 - so let's
147:47 - dummy
147:48 - to do
147:50 - let's create this as well
147:52 - okay so we have five to do's here and we
147:55 - can delete
147:56 - one okay just for so we deleted this so
148:00 - perfectly fine
148:01 - so let's create a search functionality
148:04 - for search functionality to be created
148:07 - we need to write a query sql query
148:11 - so let's write post dot where
148:14 - where
148:16 - post
148:17 - dot title
148:20 - like
148:23 - and this is a
148:24 - sql operator like so question mark will
148:27 - the question mark just like to take the
148:29 - value so what value we want here we want
148:30 - a value which is inside this
148:33 - okay
148:34 - so
148:35 - first what i'll do
148:37 - i'll type here so it says select post
148:39 - dot star from pause your post dot like
148:41 - null because i didn't pass anything in
148:43 - this in this array so that's absolutely
148:46 - fine uh let's do post dot all
148:52 - so we get all of them so now let's do
148:54 - something let's take a variable query
148:57 - and make is our dummy
149:01 - okay
149:02 - and now let's write this query where
149:05 - where
149:07 - uh we are defining now where
149:10 - we need to define a percent operator
149:13 - and this is like a query
149:15 - this will take the value and
149:18 - this is now we again put a person
149:20 - operator and type this so
149:24 - so here it says select post dot from
149:26 - post your post or title like dummy so
149:28 - this return this to do perfectly fine
149:31 - so this is the query value we had put in
149:33 - so this is
149:34 - so it's perfectly working fine so we can
149:36 - copy this query
149:38 - i had posted i had wrote the same query
149:41 - here as well
149:42 - so let's move here and type define
149:48 - search search
149:51 - let's create this end
149:54 - so
149:56 - and we need to define them as
149:58 - address post
150:01 - and
150:03 - yes this is fine and we need to refine
150:05 - the render index
150:07 - uh now the only one thing is left we
150:09 - need to get the query
150:11 - okay and the query would be our patterns
150:15 - of
150:16 - query
150:17 - okay
150:18 - so from where we will get this query so
150:21 - let's implement this uh in our header
150:24 - so move to let's move to our header
150:27 - and here we have this
150:30 - input type is equal to search this is a
150:32 - search form which refers to this at the
150:34 - top right
150:35 - so what we can do we can define
150:39 - we can define name is equal to query
150:42 - because we would are going to take and
150:44 - method
150:45 - is equal to
150:47 - get
150:48 - so by default it is get
150:50 - so let's refresh
150:53 - and
150:53 - this is some
150:55 - we can ignore this
150:57 - so let's type hello let's type dummy
151:03 - dummy
151:04 - and let's click on search
151:10 - so we forgot to
151:12 - like make a request get
151:14 - slash search
151:17 - and which says
151:20 - to
151:21 - is equal to root
151:22 - hash search
151:26 - so this is what's error and now we need
151:28 - to put this inside an action
151:31 - okay so we would move to our
151:33 - header.html.erb
151:35 - and
151:36 - we need to put this inside an action
151:40 - so basically this name this method
151:42 - should we get
151:45 - this entire wrong place so this is get
151:47 - an action is equal to search
151:54 - so i hope it should work now
151:58 - so let's type dummy and let's hit the
152:01 - button
152:02 - so yeah so undefined color with variable
152:04 - method query
152:06 - okay
152:08 - so
152:09 - it's like a small error i figured out
152:11 - and we needed to find the root
152:12 - controller and this should be at the
152:13 - right query
152:16 - let's refresh this and here you can see
152:18 - the dummy has been searched successfully
152:20 - let's type to do and let's search it get
152:24 - many tools dummy to do and to do because
152:26 - both of them have a tool keyword so this
152:28 - is how we operate the search impression
152:30 - thank you everyone for watching this
152:32 - tutorial i'll catch you in the next one
152:34 - thank you
152:44 - so today we are continuing with the
152:46 - rails app so i'll show you a quick
152:48 - overview what we have like achieved till
152:50 - now so this is the home page this is
152:53 - contact page this is the about page and
152:55 - this is the home page we have all the
152:56 - to-do's here
152:57 - so this is our rail server running and
153:00 - this is the rails console running we can
153:02 - type post.connection
153:05 - uh so
153:06 - like this is we have achieved the
153:08 - connection now we will type post and
153:10 - this is all the posts and we'll type
153:11 - post dot all and simply we get all the
153:13 - posts here
153:15 - so
153:15 - this is uh working so let's create a new
153:18 - to do let's create task three and let's
153:20 - paste this
153:21 - uh okay this already created that's
153:23 - created with task
153:24 - five
153:26 - and let's add this and it's has been
153:29 - added now we can delete this task as
153:31 - well and uh this is all the tasks we
153:34 - have we can also search one using here
153:37 - let's type task and we will get all the
153:40 - one so this is task three and task four
153:42 - so we have achieved lot of
153:44 - functionalities so one functionality is
153:46 - left that is the update functionality
153:50 - so update functionality is like uh so it
153:54 - is so let's start building the update
153:55 - functionality
153:56 - so for that what we need to do we need
153:59 - to move to the html file
154:03 - index.html.rb and here we have a button
154:05 - for uh like
154:07 - this is the add button so and this is
154:10 - this is that button and in the same way
154:12 - we have a delete button so let's move
154:14 - here and let's uh let's uh create a
154:18 - button
154:19 - so let's move copy this
154:22 - and let's this and data method we don't
154:25 - need a data method here so let's remove
154:27 - this hrf tag we can ignore for right now
154:30 - so now we are creating a update button
154:33 - so
154:34 - let's give this
154:37 - update
154:39 - and
154:40 - and let's give this a class button
154:42 - button warning
154:44 - so this will uh give the like yellow
154:47 - button
154:48 - so yeah so now it's perfectly fine so we
154:50 - have the update button so
154:53 - now we click on this it doesn't go
154:54 - anywhere
154:55 - so we need to create a route for this so
154:58 - let's do this
155:00 - uh
155:01 - the same way we have for delete let's
155:03 - create this for update
155:05 - okay so let's click here
155:09 - update okay
155:11 - now
155:12 - let's this is fine now we have to create
155:15 - a route for this on our routes.rb
155:17 - so let's create this
155:19 - so let's create here
155:21 - uh let's create a get method so let's
155:23 - create this after the search
155:25 - so let's create copy this
155:28 - yes
155:29 - so we need to create get
155:32 - request
155:33 - then update
155:35 - and root hash update
155:39 - okay
155:41 - oh yeah so this is fine
155:43 - so
155:44 - what we can do
155:47 - uh
155:47 - then we need to move to the root
155:49 - controller
155:51 - so in here we will create define
155:55 - update
155:56 - and let's end this method
155:59 - so we will do post dot find
156:03 - parenthood id and we will define title
156:07 - is equal to at the ratepost.title
156:10 - and address description is equal to at
156:14 - the red post dot description
156:16 - okay then what we can do we can render a
156:20 - template update
156:23 - let's render a template update now let's
156:25 - create a template update so in this we
156:27 - will create a new file
156:30 - update dot html dot erb
156:34 - and simply let's
156:37 - print this person tag is go to we will
156:39 - close this tag
156:41 - and add the red title
156:44 - and let's print this also add
156:46 - description
156:50 - so i hope it should work fine now let's
156:52 - refresh this
156:54 - so
156:54 - update we move to this page and
156:58 - so we have
157:00 - let me check
157:02 - let me cross this
157:04 - so yeah we have something here so
157:07 - uh
157:08 - we have something here so
157:11 - so we can see the text let's inspect
157:13 - element
157:15 - and
157:16 - we here you can see that we have the
157:18 - data that is task 4 task 4 so this is
157:21 - perfectly fine
157:22 - now what we want to do this that we have
157:24 - the data which has been coming the data
157:26 - is moving we have a move to update route
157:28 - then it fetches that post with that
157:30 - given id then it extracts some data and
157:33 - then it's update then it's under this
157:35 - template
157:37 - so what we need to do we need to
157:39 - update this so what we can do
157:42 - we can create
157:45 - index index.html
157:46 - and we can copy this form
157:50 - okay
157:51 - so we can like copy this template till
157:55 - here
157:57 - because we want to recreate that thing
157:59 - so let's copy this
158:02 - and let's remove this
158:04 - yeah
158:05 - so yeah so let's move this and
158:08 - here
158:08 - like what we can do
158:10 - we can put value
158:15 - that is percent
158:18 - equal to
158:21 - percent
158:22 - so yeah the value is equal to
158:27 - add the red title
158:29 - and in the same way we can achieve this
158:31 - thing
158:35 - we can achieve this thing by putting
158:36 - this between the text area
158:39 - so this is added description
158:43 - so let's
158:44 - make a request again and here we see
158:47 - automatically we get all the things the
158:49 - title and task so let's click go to home
158:51 - button let's click on this update so we
158:53 - get everything the dummy to do and we do
158:56 - as a description
158:57 - one small thing we can make sure here
158:59 - that this should be update now
159:02 - now this is not a ad okay so let's
159:06 - so this is update
159:08 - so we need to create something one thing
159:10 - i would show you
159:12 - so
159:13 - you need to create you need to maintain
159:15 - the id so for that what you can do
159:19 - you can do input
159:21 - type
159:23 - is equal to hidden
159:26 - okay
159:27 - and here you can see value
159:32 - is equal to
159:34 - value should be this so value can be
159:37 - your
159:38 - id
159:40 - so value can be your id
159:42 - so
159:46 - so this is fine so input types will do
159:48 - very value is equal to id so you need to
159:52 - actually maintain the id of the pose as
159:54 - well
159:55 - so let's go here and
159:58 - we will define at the rate id it is
160:00 - equal to params
160:01 - of id
160:03 - so simply simply we can do this and then
160:07 - let's
160:08 - again make a request
160:10 - we have home page let's click on update
160:13 - and let's inspect element and see
160:16 - uh because
160:18 - this is a here you can see input type is
160:20 - equal to hidden and we have a value 15
160:23 - because
160:24 - the task corresponding to this let's
160:26 - move to rails console and check post dot
160:29 - find
160:30 - let's post find the post with the id15
160:33 - yeah this is the same post so here you
160:35 - can see that we have that post with that
160:37 - id
160:38 - so we did this because we wanted to
160:41 - maintain the value
160:42 - so let's
160:44 - uh let's create a method again
160:47 - def
160:48 - define update form
160:52 - and let's
160:53 - end this
160:55 - okay
160:56 - now
160:57 - let's make this post
161:00 - slash
161:02 - update
161:04 - form
161:05 - okay
161:06 - uh then
161:09 - let's move to this to hash
161:13 - root
161:17 - root update form
161:19 - okay so this is fine let's move to
161:22 - controller so this is update form and
161:24 - then we can simply render json
161:27 - of patterns just for the simplicity of
161:30 - this
161:31 - so and now when we make update html so
161:34 - this same space everything remains same
161:38 - and this changes to update form
161:41 - so let's refresh this
161:45 - so
161:46 - let's move to the app
161:48 - so we have home let's click on update
161:50 - let's give it two to three
161:52 - and let's make it to do 20 let's make it
161:54 - 20 20
161:57 - 20 and let's click on update so here you
161:59 - can see now the title is this and 2 to
162:02 - 20 is this so now everything looks
162:04 - perfectly fine now a simple change is
162:06 - needed in the controller so i mean
162:08 - you're getting my point
162:10 - that
162:11 - i can okay i can move this method below
162:16 - okay this is and this will look fine
162:21 - so basically what we are doing
162:23 - first we are fetching the post which we
162:25 - have to update then we render the data
162:27 - into a form then we again submit that
162:29 - form
162:30 - so
162:31 - again what you can do
162:33 - because now you have all the patterns
162:35 - the title description
162:37 - and
162:40 - like you have the id
162:43 - okay two to twenty two so we need to
162:46 - fetch the id the id is missing here so
162:48 - let me check how it is missing
162:52 - hey everyone uh so i got like the uh it
162:55 - was a small error that name tag has to
162:57 - be mentioned here that name is equal to
162:59 - id
163:00 - so it's now perfectly fine when you
163:02 - submit this you get the id here
163:04 - so now the simply simply what you need
163:06 - to do now it seems like so what you need
163:08 - to do you need to find the post
163:11 - and then add the post dot title
163:15 - is equal to
163:16 - uh
163:17 - params of title
163:20 - and the rate post dot
163:22 - description is equal to parents of
163:25 - description
163:26 - and
163:27 - we need to then save that post post dot
163:30 - save
163:31 - and then we can
163:33 - uh simply our usual thing we render the
163:36 - index page we find all the post
163:39 - and
163:40 - we can
163:42 - we can simply do post dot all
163:44 - okay so
163:46 - now it should work perfectly fine then
163:48 - we have this we have the id title
163:50 - description then we save this then we
163:51 - render everything so let's
163:54 - move to the app
163:56 - let's start everything from scratch
163:58 - let's create an uh now let's create
164:01 - update that we change this to task 40
164:04 - and change this to task 40
164:07 - let's
164:08 - update this and here we go it's updated
164:11 - perfectly fine
164:12 - so thank you everyone for watching this
164:14 - tutorial you can also delete things yeah
164:17 - works perfectly fine
164:18 - fine
164:19 - now let's update this and yeah so
164:22 - everything is working fine 30.
164:25 - so this is how we did i'll give you a
164:27 - quick overview first you created the
164:29 - update method to check which post you
164:31 - have to update we rendered the same data
164:33 - update form then we got the values back
164:35 - and then we updated them
164:37 - so thank you everyone for watching this
164:38 - tutorial i hope you liked it thank you
164:40 - everyone
164:42 - today we are going to build a rails
164:43 - authentication app so let's build this
164:46 - so i have run this command rails new
164:48 - rail source app so this would create a
164:51 - rails or app your local machine
164:53 - so the next command you need to type is
164:56 - you need to find cd
164:58 - you need to move inside this rails new
165:00 - app new new auth app and
165:02 - uh like so
165:05 - this is like
165:06 - this is the command rails auth app so
165:08 - you need to define cd
165:10 - rails or app
165:12 - and you can move you have moved in this
165:14 - directory and you need to define code
165:16 - dot dot so this will open the vs code on
165:19 - your local machine
165:20 - so this is fine
165:22 - uh then you can click here and you click
165:24 - in rails terminal and then you can type
165:27 - real server
165:29 - and this would like
165:31 - probably
165:32 - uh
165:33 - this would open the like
165:36 - this like this would be on your local
165:38 - post so then you can copy this
165:40 - link and you can copy this link and then
165:44 - you can
165:45 - open chrome browser
165:48 - and then you can open the chrome browser
165:50 - and it's this url
165:52 - so this is how we have
165:55 - so now the app is running on your
165:57 - browser so this is fine
165:59 - so we need to define few things before
166:01 - we start our application so
166:04 - you can close the server
166:06 - and you can close the server and it
166:08 - would ask you to terminate the job yes
166:11 - so we need to define the rails g
166:13 - controller
166:15 - so we need to define first we need to
166:18 - define very first thing what you need to
166:20 - do you need to move to your gem file
166:22 - and this is your gem file and you need
166:24 - to
166:25 - uncomment this thing
166:27 - so you need to uncomment this and then
166:30 - you need to type
166:32 - so we need decrypt to store the password
166:34 - in a digested form because we are
166:36 - building authentication app and we
166:38 - cannot directly store the
166:40 - uh
166:41 - like like user password in a raw form so
166:43 - we need to like basically
166:45 - uh store it in a digested form okay
166:49 - so then we need to define create a
166:51 - controller rails
166:52 - g
166:54 - controller
166:56 - and we need to find sessions
166:59 - okay so basically this is we need to
167:02 - define rails free controller session so
167:03 - this would create a session controller
167:06 - and in the same way
167:11 - we need to define
167:12 - [Music]
167:13 - we need to find
167:15 - a user controller and a user model okay
167:18 - so let's move this
167:21 - session
167:22 - and roller dot rb so this is class
167:24 - session controller and application
167:26 - controller
167:27 - and this is end so this is our
167:29 - accessions controller and in the same
167:30 - way we define rails
167:32 - g controller
167:36 - users
167:37 - and
167:38 - this would create the user's controller
167:40 - so this is fine
167:43 - and
167:45 - we need to also define rails g model
167:51 - user act which has the email unique
167:56 - and a password
167:59 - in a digested form
168:02 - okay
168:04 - okay so this would create a user model
168:07 - in your
168:08 - machine and this is fine and then you
168:10 - need to type rails db
168:12 - migrate
168:14 - so then we have migrated the database so
168:17 - this looks perfectly fine and
168:20 - so this is fine so we would also have
168:23 - the usage controller
168:25 - this is here it is and we would also
168:27 - have the user model
168:30 - okay so
168:32 - so we need to define few things here
168:34 - validates
168:37 - email
168:38 - so we need to validate the email a few
168:41 - things that is presence
168:44 - presence is equal to true
168:49 - and uniqueness
168:55 - uniqueness
168:56 - is equal to true
168:59 - so this is how we do this we need to
169:01 - define validates email presence is going
169:04 - to be true and uniqueness is equal to
169:05 - true
169:06 - and let's
169:08 - open the console rails console
169:12 - and
169:13 - let's
169:14 - run few commands like we are sure that
169:16 - our model is being created or not so we
169:18 - need to define user dot connection
169:21 - so now it's fine so now let's define
169:24 - user and we have got a user ids integer
169:28 - email is string and a password digest is
169:31 - equal to string so
169:33 - basically this means we are storing the
169:35 - password in a string format but in an
169:37 - encrypted way that is a digested form
169:39 - okay so let's move to new file routes.rv
169:45 - and let's create few resources here
169:48 - so
169:49 - we are defining resources because we are
169:51 - telling them that we are using those
169:53 - controller in those routes because we
169:54 - need to define a map particular url to
169:57 - around so for that one we need to do we
170:00 - need to define resources
170:04 - and we need to find users
170:08 - and resources and we need to define
170:11 - sessions
170:13 - okay so this is how we do it
170:17 - and let's define
170:19 - get
170:22 - get method with sign up
170:25 - which says
170:28 - to
170:29 - users
170:33 - as
170:34 - new
170:36 - and let's define this as
170:39 - as
170:41 - sign up
170:44 - so and for this
170:46 - we need to define get
170:48 - login okay this is not needed now right
170:51 - now so we can ignore this
170:53 - and
170:54 - let's this is not needed and we can
170:56 - ignore this
170:57 - and
170:58 - let's move to this and we need to define
171:00 - the def new
171:02 - and let's end this method
171:04 - okay and we should also uh when we
171:06 - create more value the most probably we
171:08 - are going to create depth create and
171:10 - this
171:11 - and def destroy
171:16 - destroy
171:18 - and end
171:21 - and when we move to this
171:26 - use users and we create a file
171:29 - okay
171:30 - something wrong yeah new file
171:34 - and we need to define new dot html dot
171:37 - erb
171:39 - and let's define a page
171:42 - sign up
171:43 - so i hope this is fine and yeah so sign
171:46 - up is the page so let's see the flow
171:48 - first so we have a router rb we say get
171:51 - sign up user slash new and add sign up
171:54 - and in here we define a sign up method
171:57 - new and this has a like default
172:00 - statement of this render new
172:02 - okay so if you want to like have a good
172:05 - overview so this is a default statement
172:06 - it must be rendering so we can skip this
172:09 - as a practice we can skip this and it
172:11 - will definitely
172:13 - render the new dot html dot erp okay so
172:16 - let's run this
172:18 - and
172:20 - i hope the server is not running so
172:22 - let's exit this
172:24 - rails
172:29 - and let's define sign up
172:35 - so
172:37 - we have like so it says rendered
172:39 - user.new.htmlrb with layouts and let's
172:42 - see yeah the signup is there
172:44 - so this is the basic layout so in the
172:47 - same way
172:48 - uh a very quick we can do this we can
172:50 - also create a few things here also def
172:52 - new you can also create depth new end
172:56 - dev create
172:58 - and we can end this method
173:01 - and def destroy
173:03 - so
173:05 - so this is the basic architecture so we
173:07 - are maintaining user model user
173:09 - controller and a session controller
173:11 - for our application so basically these
173:12 - things are needed so this will help us
173:15 - out
173:16 - to like maintain the application so
173:19 - then in the same way we can create few
173:21 - more routes as well so
173:23 - one is like sign up and another is
173:26 - sign in
173:27 - and one is also like login logout so we
173:31 - can maintain those routes and help us so
173:34 - next what we are going to do we are
173:36 - going to create a form here
173:38 - so basically those form is also
173:41 - basically it is going to
173:43 - have like few things uh a registration
173:45 - form basically so we are going to
173:47 - register the user here so it will have a
173:50 - method
173:51 - a basically method which is going to be
173:54 - post
173:56 - okay so
173:57 - this is going to be post method and uh
174:00 - and we will define the action here
174:02 - action is away like it is being empty
174:05 - here
174:06 - so action is there and we need to define
174:08 - something for that okay so i'll catch in
174:10 - the next tutorial thank you for everyone
174:12 - for watching this thank you bye
174:18 - so basically to start the application
174:20 - you need to type rail server and this
174:21 - will type the application on your
174:23 - machine
174:24 - so like previous part we had created a
174:25 - form using a basic form layout using the
174:28 - signup method so let's create the input
174:30 - type for this so for this we can type
174:33 - input
174:35 - is equal to email
174:36 - uh so this is the email
174:38 - and the name is equal to
174:40 - uh we can give a name
174:42 - by any recent name this like let's give
174:45 - this a name
174:47 - email or like let's give this a username
174:50 - okay
174:51 - and
174:52 - let's give the name username and
174:55 - required
174:58 - and this is required so let's get this
175:00 - and
175:01 - so i hope this is fine and we can define
175:04 - our id
175:05 - is equal to username
175:07 - basically ids
175:08 - is needed for the label
175:11 - so for this corresponding let's create a
175:13 - label method
175:14 - so let's create a label
175:17 - table for
175:19 - username
175:21 - and let's create this
175:24 - label let's close this
175:28 - and let's type user name here
175:32 - so this is how it is done and to avoid
175:35 - any like cr csfr token since we are
175:38 - making a process so we need to define
175:39 - percent
175:40 - equal to
175:42 - token
175:43 - underscore tag
175:46 - and this is this
175:48 - okay
175:49 - so this is how we do it in types the
175:51 - good email name is going to the name id
175:53 - and required
175:57 - and this is like
175:58 - table
175:59 - for
176:02 - this is user password
176:05 - so we are creating a user password here
176:08 - and for this we are defining
176:10 - input type
176:13 - is equal to password
176:16 - and we need to define name
176:19 - is equal to user password
176:24 - and id
176:27 - equal to user password
176:31 - okay and this is also required so we
176:33 - keep this as required
176:35 - okay
176:36 - and since we need to define input type
176:42 - is equal to submit
176:46 - value
176:48 - is equal to register
176:51 - let's keep a value of register
176:53 - uh this is fine
176:54 - and we can close the stack
176:56 - so
176:57 - by default when we refresh this page
177:00 - so we need to find something like
177:01 - username and we need to find a password
177:03 - here
177:04 - okay yeah password is required so let's
177:07 - keep this
177:09 - and
177:10 - let's
177:11 - there has a
177:12 - password okay
177:16 - and this is fine
177:17 - okay
177:18 - so let's yeah so let's yeah we have
177:21 - option to sign up that is username and
177:23 - password and let's we have a register
177:25 - button okay so this is fine so let's
177:28 - give this as a sign up page
177:36 - so this is fine now
177:37 - so we have a user password and like so
177:40 - let's create when we submit this form
177:43 - so we need a method where we need to
177:46 - submit this form so let's create this
177:48 - method
177:50 - uh
177:52 - let's create this method uh sorry a
177:54 - route for this so that is post
177:56 - register
177:59 - and when we hit this register so
178:02 - basically we tell them okay
178:05 - uh we define users
178:08 - hash create
178:10 - and we need to define this as
178:14 - as
178:14 - register
178:16 - okay so this is fine
178:18 - he defined as the digital post register
178:20 - we need to find to use this hashtag as
178:23 - registers so when we make a post request
178:26 - so we need to hit this method okay so
178:29 - i have maintained this method so i'll
178:31 - give you to show you a trick
178:33 - or how to view this routes everywhere so
178:36 - move to this local route
178:38 - okay this is your base route app is
178:40 - working this sign up
178:43 - app is working
178:44 - hyper invalid route something like
178:48 - uh any invalid route maybe i type
178:50 - invalid a uh
178:53 - invalid xyz
178:55 - something anything invalid
178:57 - you get this
178:59 - and now you can type register uh you can
179:03 - like
179:04 - you can search from here as well
179:07 - and i'll use this so it says register
179:10 - underscore part which hits on users as
179:12 - great so i can use this copy this i'll
179:15 - copy this register underscore path
179:19 - and let's
179:21 - go to this page and
179:24 - i can type
179:25 - percent equal to this
179:28 - so this works perfectly fine so this
179:31 - would be like this would help you from
179:33 - defining
179:35 - like this works as a constant so it
179:38 - action moves to this row data but these
179:40 - are good to put okay so when you put
179:43 - this
179:44 - this register underscore path it will
179:47 - hit this method because i have told him
179:48 - to move hit this method
179:50 - and then you can simply render json
179:54 - is for this simplicity i am telling it
179:57 - to render json params
179:59 - okay so let's now hit the sign up
180:03 - uh let's uh
180:05 - type a user at mail.com
180:08 - and let's give a dummy password
180:10 - something like very dummy password you
180:12 - can give
180:13 - so
180:14 - one two three four five six
180:16 - okay and type again one two three four
180:18 - five six so let's hit this
180:20 - so when we hit so like
180:23 - never so we have authenticity broken is
180:25 - to this username is equal to this and
180:28 - user password is this and controller
180:29 - this action is great this is fine
180:32 - so
180:32 - what we need to define we need to define
180:35 - email is equal to
180:38 - parents of
180:40 - what parents you are getting here so we
180:42 - are getting a plan for user name
180:44 - let's copy this to avoid any
180:47 - and so it is equal to
180:51 - items of
180:54 - this user password
180:57 - okay
180:57 - and
181:00 - this is fine
181:01 - so we have already like
181:04 - i have shown you like in the previous
181:07 - tutorial so i'll just give you a quick
181:09 - overview yeah
181:11 - so we had created a user
181:13 - right so okay this is not needed i'll
181:15 - show you again
181:20 - exit and we'll type rails console
181:24 - okay
181:25 - so rails console will be open and when i
181:28 - type user dot connection
181:33 - and then i'll type user so this is how
181:35 - we have email and password underscore
181:37 - digest okay
181:38 - so
181:40 - this is we how we create a user so
181:43 - we can define
181:45 - user
181:48 - we can define simply
181:51 - user dot create
181:54 - we need to define user.grade where email
181:58 - is equal to email
182:01 - and
182:03 - password underscore digest
182:08 - equal to
182:10 - password
182:11 - i hope this is fine and then you can
182:13 - simply say
182:15 - response
182:20 - response is equal to this and let's
182:22 - define a success
182:26 - is equal to true and render json
182:29 - response
182:33 - okay so let's
182:34 - hit this request again
182:37 - okay i need to make sure the server is
182:38 - running server is not running so let's
182:40 - start the server
182:42 - so
182:43 - let's hit the request again and this
182:45 - time the user should be created okay so
182:48 - basically i'll show you again once again
182:50 - so password is this user is email.com
182:52 - let's again
182:54 - i'm making the request again let's make
182:55 - a request again
182:57 - okay i'll zoom this
182:58 - and now i'll make so this is the
183:00 - username and user password let's make
183:02 - the request again and
183:03 - i should get a success rule true okay
183:06 - good if the success is true
183:08 - then let me check let me check uh
183:15 - so l rails
183:17 - console
183:19 - okay
183:20 - so
183:21 - i'll do this console and
183:24 - this would be do user dot
183:28 - first
183:30 - okay so now you see the password is
183:32 - being stored in a digested form okay
183:35 - so thank you everyone for watching this
183:36 - tutorial i'll catch you in the next one
183:38 - thank you everyone
183:41 - so we left out with where if we have
183:43 - created a user so instead of sending a
183:46 - json response so what we will do we will
183:48 - create a message here which says
183:51 - uh android message
183:54 - your account
183:58 - is created
184:02 - successfully account is your you can
184:04 - simply give it your account is
184:06 - created okay so successfully
184:11 - so this would be a message to the user
184:12 - and in new dot html rb you can render
184:15 - this message like this
184:17 - so
184:19 - so let's
184:20 - again sign up so let's create on this
184:23 - and just sign up
184:26 - and let's create a
184:28 - new user who use it
184:30 - and we give a simple password
184:33 - okay
184:34 - let's create this and say your account
184:36 - is created successfully
184:38 - if your account is created successfully
184:40 - you should give them a sign up option
184:42 - right
184:43 - so you should give them a sign up option
184:45 - so let's move to write routes or rb
184:48 - so we will do it
184:51 - sign in
184:55 - and
184:57 - we would go to
185:01 - session
185:03 - hash new
185:04 - because now we are instead talking about
185:07 - creating a session
185:08 - sign in
185:09 - and we would put this as
185:12 - sign in
185:14 - okay i hope this is fine and here like
185:18 - if this is a uh like
185:21 - yeah so
185:23 - what you need to do
185:25 - uh you need to define
185:27 - a variable
185:29 - so
185:30 - what you need to do you need to move it
185:32 - and here your account is created
185:33 - successfully
185:35 - and
185:37 - either you can do this success is equal
185:40 - to
185:42 - success is equal to
185:46 - and what you can do you can remove this
185:48 - message not needed and what you can do
185:55 - if
185:57 - if at success
186:01 - you can end this
186:04 - end this tag as well
186:09 - if i did success you can say
186:14 - your account
186:17 - is created
186:20 - and
186:21 - you can end this tag
186:24 - and here you can see
186:27 - hrf
186:28 - you can give anchor tag to this anchor
186:30 - tag you would move them to the login i
186:33 - say
186:34 - click
186:37 - click
186:39 - here login
186:42 - i hope this is fine
186:43 - and
186:45 - now i told you a trick that you can move
186:48 - you can check the routes by randomly
186:50 - typing something here and then you can
186:53 - you can check the path and this is the
186:55 - path sign in path so you should copy
186:57 - this path and you should be able to
186:59 - paste this here
187:01 - so this gives a value sign
187:04 - in
187:06 - underscore path and let's close this
187:10 - okay so i hope this is fine so let's
187:15 - so let's again do a sign up
187:18 - and
187:20 - you do new user three
187:23 - and my uh
187:26 - you should give a simple password one
187:28 - two three four five six
187:32 - and here you can see your account is
187:33 - created click here to log in so when you
187:36 - click on this it might return a error
187:38 - so
187:39 - because
187:40 - this is a like error because you have
187:42 - not defined it and you can move to
187:44 - route.rb and this will be sessions
187:47 - so when you move to this and then it
187:49 - says is missing a template so we will
187:51 - create
187:52 - that okay
187:54 - so we will create a template for that so
187:56 - for that what we are going to do
187:59 - so
188:01 - we need to move here
188:03 - in
188:05 - uh sasha we need to move in the views
188:07 - folder
188:10 - app views sessions and let's create a
188:12 - new file
188:14 - new dot html dot erb
188:19 - okay
188:20 - so let's create a heading
188:23 - so let's create a heading
188:26 - h1 tag
188:29 - let's create this
188:31 - and we need to define h1
188:36 - sign in
188:37 - okay
188:38 - and in the same way
188:40 - we need to define a form
188:45 - okay
188:46 - and let's define this form okay so input
188:50 - type is equal to
188:51 - okay so this form is like for the
188:55 - significant input is equal to email
188:59 - okay and
189:00 - label is equal to
189:02 - you can keep this as anything because
189:06 - since you have created the user so let's
189:10 - keep this very quick
189:11 - do this very quickly label is equal to
189:14 - my name is equal to email
189:20 - and
189:21 - id is equal to email
189:24 - okay
189:26 - and let's close this
189:30 - label for
189:33 - email
189:41 - so let's create the email
189:45 - uh basically this is our username also
189:47 - so you can comment this and put here and
189:50 - then input
189:52 - it
189:54 - just go to password
189:58 - and
189:59 - you can copy this
190:02 - name is equal to
190:05 - password id is equal to
190:08 - password
190:09 - and
190:10 - we can do table
190:14 - for
190:17 - label for
190:20 - password
190:24 - and we can close this so this is your
190:26 - password
190:30 - now
190:35 - you can do input
190:38 - type is equal to submit
190:41 - value is equal to login
190:45 - okay
190:46 - so value is equal to login
190:48 - so
190:49 - what you need to do let's refresh this
190:51 - page
190:52 - and here you get the sign in right
190:54 - so that's great we get a sign-in page
190:57 - now what we need to do we need to define
190:58 - a method is go to post
191:05 - action
191:07 - now let's keep this action as empty
191:10 - and now we need to define a post method
191:13 - for
191:14 - for sign up we define a register for
191:15 - sign in we define a login
191:17 - okay
191:19 - post login
191:22 - and let's now we define us sessions
191:27 - hash create
191:30 - now
191:33 - we define this as
191:36 - login
191:39 - okay
191:39 - so
191:40 - most probably we are going to move in
191:44 - sessions controller
191:46 - and we need to define render json params
191:50 - so the simplicity it is then
191:52 - and we have
191:55 - like
191:56 - the apps we have the views uh we have
191:58 - the new dot html and for here we defined
192:03 - person is equal to login underscore r
192:11 - and here we also defined
192:14 - percent equal to token
192:18 - so this is how we define the token and
192:20 - the like html so it is done
192:23 - yeah so let's just define a user at
192:27 - mail.com
192:29 - let's put the password one two three
192:30 - four five six
192:33 - so yeah it's working perfectly fine
192:35 - great so we are able to create the
192:37 - sign-in page as well now we have to
192:39 - check for the user authentication
192:42 - so
192:43 - next thing what we are going to do
192:45 - so first we will take the user
192:48 - and i'll show you what we are going to
192:50 - do
192:53 - so
192:54 - what we are going to do so
192:56 - what we are going to do we are going to
192:57 - take the email
192:59 - okay
193:00 - and we say
193:02 - items
193:03 - of email
193:06 - so simply see we take the email and
193:09 - password
193:12 - is go to parents
193:15 - of password
193:17 - so this is like we take and now i'll
193:19 - tell you you might also think for the
193:21 - next tutorial what we need to do new
193:23 - you do something like user dot find with
193:26 - this email
193:27 - if it exists
193:30 - if it exists
193:32 - then match for password right
193:35 - match
193:36 - for password
193:38 - else through
193:42 - so this we are going to do something if
193:44 - it exists in match for password as
193:46 - through error
193:47 - and
193:48 - if it matches
193:51 - if it matches
193:57 - create a session
194:01 - okay if it matches then create a system
194:03 - so that is what we are going to achieve
194:05 - in the next tutorial thank you everyone
194:06 - for watching this
194:08 - so let's start our application and let's
194:12 - see where we have ended in the last
194:14 - tutorial
194:15 - so let's create this rail server
194:18 - and let's create this and let's start
194:20 - our server so we were able to create the
194:22 - login page
194:23 - okay so one thing uh so
194:27 - server is already running okay
194:30 - let me check yeah it's running so
194:32 - perfectly fine let's yeah so the server
194:35 - is running the app is running so we have
194:38 - created a login page
194:40 - okay and
194:42 - but we need to check we need to check if
194:45 - this login page already exists or not
194:48 - so for that what we are going to do we
194:50 - are going to do rails console
194:53 - and
194:55 - we need to check uh like we can do
194:58 - since the email is unique so we will
195:01 - type
195:04 - user is equal to user dot find
195:07 - underscore by
195:11 - email
195:13 - equal to email
195:14 - okay
195:15 - so
195:17 - and we say if user if user so if there
195:21 - is if if there is a user let's do a end
195:24 - statement
195:25 - if user
195:28 - and
195:29 - this would
195:30 - use it
195:31 - is like this would mean that if user
195:33 - does exist
195:34 - okay so then we need to match password
195:37 - okay
195:38 - if user dot exist
195:40 - we need to patch password
195:42 - so if you use it
195:45 - and
195:46 - or we can do this way also
195:48 - user
195:50 - so first i'll show you what you need to
195:51 - do this is you this is your user
195:54 - dot first
195:56 - and we need to do if user dot password
196:02 - underscore digest is equal to password
196:06 - so then we can render a json
196:09 - this just for simplicity i'm running a
196:12 - json which says
196:14 - response and let response is equal to
196:24 - log then
196:26 - is equal to
196:28 - so this is just i'm thinking and let's
196:30 - remove this
196:32 - and else
196:36 - if else
196:37 - would be something this which says
196:40 - response
196:45 - logged in
196:46 - is equal to false
196:48 - and we could do this statement here only
196:51 - because we
196:53 - we want this json response to be sent
196:56 - after the file statement so first we
196:58 - will try with user gridmail.com okay
197:02 - and this is how we do it uh because i
197:04 - don't remember the passwords which i
197:06 - created so many passwords that let's
197:08 - create a user first so let's create a
197:10 - dummy
197:12 - at three mail.com
197:15 - and we would say one two three four five
197:18 - six and let's register so it says your
197:20 - account is created directly here to
197:22 - login
197:23 - and say
197:24 - dummy at the ratemail.com
197:28 - the user is created so now it should
197:30 - return
197:31 - for logged in zero to true so it says
197:33 - logins would just put a wrong password
197:37 - one two three four five
197:40 - okay what is false it's
197:42 - an incorrect email and see whether this
197:45 - works or not so we are going in right
197:47 - direction
197:48 - one two three four five six the password
197:51 - is right but the email is wrong so it
197:53 - says logins for the logic is right
197:55 - so it says
197:58 - it says
197:59 - uh instead of response now we are going
198:02 - to
198:03 - basically
198:05 - we are going to render a message
198:09 - so basically
198:11 - which says
198:14 - the rate
198:15 - uh
198:16 - success
198:18 - logged in is equal to false
198:21 - and
198:23 - this is false and we simply render new
198:26 - because we were coming from the new page
198:28 - of the views i'll show you how
198:30 - we move to app views
198:33 - sessions and this was our login page
198:35 - okay and here we say
198:38 - and then we say
198:40 - at the rate if
198:44 - there is
198:47 - logged in
198:49 - equal equal to false
198:52 - okay so we say
198:55 - and then end
198:58 - so we redirect the user to the same page
199:01 - okay
199:02 - and we say
199:03 - you say if at the rate login is going to
199:05 - false then we say
199:07 - either email
199:10 - or password
199:12 - doesn't
199:14 - match
199:15 - i hope this is
199:16 - right so let's create this and this yeah
199:20 - perfectly fine so let's move to our
199:22 - session controller
199:23 - so we say add the logged in go to render
199:26 - new yes
199:28 - okay
199:30 - okay this is like this is and then it's
199:32 - locked in is equal to true
199:36 - okay i created i put this into a long
199:38 - logic block this is fine android object
199:41 - would fall and
199:44 - and
199:46 - and let's do this as true
199:50 - okay so
199:52 - now let's down here treadmill.com one
199:54 - two three four five and it's a login
199:58 - how called and also known neither reader
200:00 - does not so there's an error in this
200:02 - line i'll see
200:04 - so it says render json response
200:09 - else render new
200:13 - or render
200:16 - json response
200:19 - it's fine
200:23 - so email or password doesn't match so
200:26 - either email so either email or password
200:28 - doesn't match so we tell them to log in
200:30 - and if we put the correct email id and
200:33 - password so let's see it says login
200:36 - so
200:36 - uh
200:37 - if this is true so let's maintain a
200:40 - session for it because this is true but
200:43 - let's maintain two session for it
200:45 - okay one thing i wanted to make this we
200:47 - did not add the error handling for users
200:50 - also
200:51 - uh
200:53 - if what i wanted to do like
200:58 - see
201:01 - if this email is already taken then what
201:04 - happens so we did not create this
201:06 - functionality on the user side okay so
201:08 - what we will do
201:10 - if
201:13 - user is equal to user dot
201:15 - find
201:16 - underscore by
201:18 - email
201:23 - is equal to email
201:26 - if user
201:28 - is there then let's end this
201:31 - else let's do the same thing what we did
201:33 - for the login part
201:35 - else
201:36 - if user is already there then let's
201:38 - create this for the success
201:41 - okay and this is fine
201:46 - it's if the user does i
201:49 - i mean this is what you create part okay
201:50 - so don't confuse yourself
201:52 - we are the login part is like done we
201:55 - have the login password and we are
201:58 - maintaining and the password is wrong we
201:59 - are maintaining but if the user if this
202:01 - email is already taken by republican
202:04 - then you need to take advantage success
202:11 - is equal to false
202:13 - okay okay let's name this as a register
202:16 - because this makes more sense
202:18 - and this also make more sense
202:22 - okay and we are going to render
202:27 - so basically we are doing the same thing
202:28 - so let's avoid this and we
202:31 - should render new
202:33 - this is fine
202:36 - and let's move to
202:38 - new dot html rb so if if register
202:43 - this
202:44 - okay
202:45 - if register is equal to
202:49 - and this
202:51 - and
202:52 - else we move to
202:56 - else
203:02 - okay one thing i'll show you okay let's
203:04 - do this one else
203:06 - is this block and we say
203:10 - email already taken
203:14 - okay so this is fine
203:20 - so let's move to this our app sign up
203:24 - yeah now you see
203:26 - see
203:27 - uh i'll show you one thing
203:30 - let's do user dot all
203:32 - and see
203:33 - okay if this is enabled
203:38 - okay this is not enabled so we have
203:41 - see we are taking user drivemail.com
203:44 - see this or maybe we have a dummy
203:47 - address you already taken okay fine one
203:50 - two three four five six let's
203:53 - check with this so yeah it says email
203:54 - already taken so what happens
203:57 - when we move to this page
204:00 - uh without checking in and it says email
204:02 - will be taken this is wrong because we
204:04 - need to avoid this and for that what we
204:07 - will do
204:08 - and
204:11 - at the red register
204:14 - uh
204:16 - if
204:17 - the register is equal to
204:19 - and for this box
204:24 - uh
204:25 - lf
204:26 - okay else
204:29 - let's say
204:31 - the rate
204:33 - register
204:35 - is not equal to nil
204:38 - because if it's nil we don't uh show
204:41 - this message okay
204:43 - so now it's perfectly fine because by
204:45 - default it has a nail value so
204:48 - if it's true your account is created if
204:50 - it's not equal to say then he will
204:53 - if it's nil then don't show anything or
204:57 - okay
204:57 - so
204:58 - this is fine now let's move this and
205:00 - check this with sign up
205:04 - yeah you are already taken let's create
205:06 - a new id user 22 and one two three four
205:10 - by six
205:13 - so created your account is created click
205:15 - here to log in okay perfectly fine so we
205:18 - are moving in right direction so this
205:20 - was the case when we had to add error
205:21 - handling on the page for both
205:24 - sign up and sign in so thank you again
205:26 - for watching bye
205:28 - so what i've done now is i have created
205:30 - a landing.html.erb
205:33 - so this is the landing page of the
205:34 - application so
205:37 - this is the landing page and it says
205:39 - landing page
205:40 - to check
205:42 - login or
205:44 - log out so simply it is the landing page
205:47 - to check login or logout
205:49 - and let's
205:50 - this is the uh this is the feature
205:53 - landing page to check login or logout
205:55 - so let's exit this facebook console and
205:59 - let's clear this
206:02 - so now we need to define in dot shot rb
206:05 - we need to define get
206:07 - log out
206:09 - because now this is the last feature we
206:11 - are building get lockout and then we
206:13 - will test our application
206:14 - to define
206:16 - sessions hash destroy
206:21 - as long
206:27 - so
206:28 - this is session.destroy as the whole so
206:31 - now let's move to session controller
206:32 - okay what happens when we make a session
206:35 - so what happens let's i'll show you
206:39 - okay
206:40 - so
206:42 - one thing i uh like one thing i'll show
206:44 - you one thing uh
206:46 - uh
206:47 - see
206:48 - so what happens when the user
206:50 - authentication is successful
206:53 - so if the user's authentication is
206:56 - successful
206:57 - so
206:59 - we what we do
207:01 - we do session
207:04 - of user id
207:08 - equal to
207:09 - user dot id
207:11 - okay
207:12 - now this is what
207:14 - happens when we see the like we see that
207:17 - the user has successfully logged in so
207:19 - we create a user id and assign that
207:21 - user.id
207:23 - or destroy what we do we do the opposite
207:25 - of this
207:26 - so okay we do the opposite of this that
207:29 - instead of assigning it id
207:31 - we assign it as a nail value
207:33 - okay
207:35 - so this is what we do and
207:38 - this is this happens okay
207:40 - uh
207:41 - yeah then
207:43 - uh
207:44 - uh
207:45 - we like this is we do and uh then we
207:48 - create a helper method and uh
207:50 - application
207:51 - controller dot
207:53 - this is the application controller so we
207:55 - create a help method in this
207:58 - and how do we define this
208:01 - we define
208:02 - a helper method helper underscope method
208:08 - which says current underscore user so
208:10 - basically in most of the rails
208:12 - application we use that access the
208:13 - current user using this
208:15 - and if and define
208:19 - find current underscore user
208:23 - and we define end
208:25 - so
208:27 - session
208:29 - of user id if that is not nil
208:33 - okay if that is not nil then we define
208:36 - current underscore user
208:38 - is equal to correct current control user
208:41 - or user dot find
208:46 - blue dot find
208:47 - session
208:50 - or user id
208:53 - else
208:54 - current underscore user is equal to name
208:57 - right
208:58 - so this is we do it so
209:01 - that exists if session id is exist then
209:03 - we find the current user then either
209:05 - then we do
209:07 - put that current user to net
209:10 - okay so
209:12 - if
209:13 - if in this page we say
209:18 - if and underscore user
209:24 - you can underscore user then we say
209:28 - and
209:30 - we say
209:33 - hello
209:36 - hello
209:38 - your current underscore dot email
209:41 - if it exists then we say this
209:44 - okay
209:47 - else
209:49 - else
209:51 - we need to show user that they are like
209:55 - okay let's first check this
209:58 - we are in session controller then we a
210:00 - transaction is able to use a dot id and
210:02 - then we say render
210:07 - layouts
210:10 - slash landing
210:14 - okay okay uh one thing we all uh like
210:19 - missed in this is uh
210:22 - like uh that is layouts on the landing
210:24 - so one thing i would like to tell you
210:26 - we can also render different
210:29 - layouts uh from here by defining the
210:32 - prefix so if you don't define the prefix
210:35 - then it assumes and we are defining the
210:37 - sessions then it assumes we are in
210:38 - sessions and users and users
210:40 - so if we can define the process for this
210:43 - so let's run the application
210:47 - sign in
210:49 - okay says
210:51 - unexpected error okay yeah because this
210:53 - is uh ruby so
210:57 - yes else and when we
211:00 - end this block like this
211:03 - fine
211:04 - so let's make again
211:09 - let's log in this and let's create so
211:12 - it's it hang landing page to check login
211:15 - or logout hello dummy directmail.com we
211:17 - are perfectly fine
211:19 - so now we on this page we need to create
211:22 - an option
211:23 - to block out if it's if it's if it is
211:27 - signed in okay
211:28 - a hrf
211:33 - and we say
211:39 - log out
211:43 - and for that
211:45 - i told you for if you want to check the
211:47 - confirm the path so what you can do
211:50 - you can simply type this log out and it
211:52 - says logo underscore path
211:55 - perfectly fine
211:58 - so this is logger underscore path and
212:00 - here we go and it says so
212:03 - let's again
212:05 - move to this page
212:07 - okay
212:08 - uh let's do move to sign in
212:11 - okay let's create a different route for
212:13 - this okay let's give it to this
212:18 - it
212:21 - slash
212:22 - blending
212:25 - and let's do two
212:28 - uh
212:30 - users
212:32 - hash
212:33 - landing we will create this
212:35 - and
212:36 - so let's
212:38 - create this
212:40 - as
212:41 - landing
212:43 - okay so let's move to user controller
212:45 - let's create this because we don't need
212:47 - to sign this every time to get into this
212:50 - method
212:51 - define landing
212:53 - and then simply render
212:56 - layouts
212:59 - a out
213:02 - dash landing
213:04 - okay
213:07 - and yeah
213:10 - so
213:12 - yeah yeah that is an error because we
213:15 - need to define this in codes
213:19 - so like that is an error now let's uh
213:22 - check for the landing round
213:24 - yeah this is slash landing
213:26 - so let's move to this route
213:30 - so yeah it still stays uh when we move
213:33 - to the landing page to check login our
213:34 - hello address let's move to logout
213:37 - so when we move to hit the logo button
213:39 - so we need to destroy the session
213:42 - and we already do that nothing
213:45 - and then we say render
213:47 - thing
213:50 - or
213:51 - instead of doing render render again
213:52 - again we can simply use redirect 2
213:56 - because we have already created the
213:57 - route for that yeah it's perfectly fine
214:00 - we can do redirect
214:02 - redirect underscore to
214:08 - log code
214:10 - underscore
214:11 - i hope this is fine here
214:15 - yeah fine
214:17 - so let's repair this
214:19 - click on logout and
214:21 - here it hits the button and there is a
214:24 - logo because some seems an error with
214:26 - this
214:30 - okay three zero to four
214:36 - okay seem some error with this
214:45 - so let me check the route for this
214:55 - okay i did a mistake uh i had to render
214:58 - to landing paths sorry
215:00 - this was a mistake yeah
215:05 - so we say redirect
215:08 - to landing in
215:23 - move description landing page
215:28 - okay
215:29 - to connect it
215:31 - something seems wrong with the
215:36 - server now it's fine
215:39 - so landing page to check login and log
215:41 - out yeah it is not logged in because
215:43 - last at last you had created join the
215:45 - session so let's create a user from uh
215:48 - like that you assign it
215:50 - www.com and let's sign in with the user
215:55 - it says hello android developer let's do
215:57 - log out and we are logged out so
215:59 - perfectly fine when we are logged out we
216:01 - don't see anything okay
216:02 - so
216:04 - so for that we can create a message if
216:06 - this is the current user then we do this
216:08 - else
216:11 - as
216:12 - we can show
216:17 - else we can show
216:19 - the one we had on the
216:21 - page of the users this one
216:24 - uh hrx i click here to login so this was
216:28 - a better approach to check
216:29 - and yeah
216:31 - it says ending quick click here to log
216:33 - in when we do log in let's login and
216:36 - this one two three four five six
216:38 - log in and it's a hello data and we sell
216:40 - all we go so oh we are out of the
216:43 - session
216:44 - so this is how it worked so thank you
216:46 - everyone for watching this tutorial uh
216:48 - let's do a quick
216:50 - recap what we did so we had a signup
216:53 - page where we had signed let's get a new
216:55 - user new user
216:57 - uh
216:58 - mail.com
217:01 - let's create a password one two three
217:03 - four five six again keep the password
217:05 - same so
217:07 - this email is already taken yeah okay
217:10 - let's take user hundred
217:14 - one two three four five six
217:17 - your account is created so it's
217:19 - perfectly fine
217:20 - uh
217:21 - click here to log in let's create a user
217:24 - 100 let's login with this
217:30 - so landing page to check blogging
217:32 - yeah hello user at the 100ml.com let's
217:34 - click on lockout and we are out of this
217:37 - session click here to log in let's log
217:39 - in back so everything works perfectly
217:41 - fine so thank you everyone for watching
217:43 - this video so if you have like
217:45 - uh
217:46 - we can extend this to application for to
217:49 - some objective so i'll try to uh object
217:51 - this authentication so that you have a
217:53 - better word thank you everyone bye take
217:56 - care

Cleaned transcript:

we are going to start with a new tutorial on ruby so basically ruby is a programming language so like ruby has been used a lot in the programming world and it is one of the most important languages so we are going to start with like some basics of ruby and then we are going to move on uh like a framework on ruby that is rails so basically that is properly known as ruby on rails so initially we will start with the installation part and then we are going to proceed and enhance ourselves to the ruby on sales framework so basically the to be honest like ruby is a programming programming language and ruby on sales is a framework based on ruby language which is used on web development like basically to use as a backend framework so you can create your own packet framework and then you can extend it to like front end as well using erbs so today first you'll start we're going to start with the basics of ruby and then we are going to continue with it so to install ruby on your machine you can move to this website this website is known as ruby installer for windows so basically you can download click on the download button here and then you will have all the versions so so make sure you install one with the dev kit so it will uh help you so you can install ruby with the dev kit and you can click on like this is like uh you can click on any and depending on your requirement like the 32bit and 64bit you can install it so uh like i had downloaded the one which is at the top so you can also download and when you download you will get an installer which will uh like take some time to install and then uh like it's a very like that's very easy process to install it will keep on installing and when you will install this installer then you can move ahead with the stock so this is another like uh website you can refer this so this is like a ruby dot org so you can also refer to this website okay then you can like these are the two documentations you can refer and this is how we like uh yeah so let's uh move on to the tutorial so after like moving to the installation and documentation you can start running some blue programs on your machine so we will initially start with them so i'll show you how you can create one and run one so let's move to the programming part so this is my vs code editor so like i have created a folder with the name ruby so ruby basically what you can do first you have a command line here so what you can do so you can create a file new file and you can type hello dot rb so basically ruby files are run with this uh extension and then you can uh uh yeah so basically now i'm inside this folder which has a header.rb file to make sure you have installed ruby on your machine you can type ruby minus v okay so ruby minus v would give me the like the version which i have installed and it's perfectly fine okay now now first we are going to create a hello world ruby program okay so what we're going to do we are going to like first clear this so now we are going to do put s hello world okay so this would like put as hello world would create the ruby program now to run the ruby program what you need to do ruby hello dot rb so this would like to run the program on your machine so this gives the output hello world so we will start with some few basics like one is like creating the variables so this is like a is equal to one okay uh b is equal to two and we are going to do uh what uh okay i'll show you one thing and we are going to put this in a variable a a plus b c c is equal to a plus b and we are going to put sc so uh first i'll run this and i'll show you how this works so it works perfectly fine uh but if you want to do some like string formatting so what you can do you can put like this and you can do the sum of a okay the sum of a plus b is equal to c okay okay first i'll run this program and i'll show you what i'll do i'll run this again i'll clear this and i'll run this so here you see the sum of a plus b is equal to c this doesn't satisfy our condition so again it will apply string formatting for what for that what you can do you can put a hash symbol and put them inside a curly braces so this would get the value of that particular variable okay now it will format inside the string and now you can run this now the sum of 1 plus 2 is equal to 3 so this is how we achieve it so it was a good example there's another statement in ruby i'll show you which says print print hello world okay uh and i'll clear this again and i'll run this program yeah so it says hello world okay different between what is the difference between the print and for testing okay i'll do another statement first okay okay uh first i'll do put s first line put s uh i'll do second line okay uh now i'll make sure that i clear this uh screen yeah now i'll do first line second line so this is the output perfectly fine okay uh now i'll do another one sorry now i'll do print first line and i'll do another one print second line so the print second line would like what i'll do i'll clear this and i'll run so it's it here you can see it doesn't give a line break okay to achieve that you can put a slash in here okay now i'll run this now we can see we got the same statement as like put a statement so basically i just wanted to tell you that put statements always gives a line break so whatever you type it would automatically give give the slash n or a line break to the next line but print statement doesn't give that so this is the only difference between the test statement and printer segment okay so we can do one some uh like more things uh in ruby like the first uh like the before we move to some conditions like first we make a let's make a simple function so let's make a function define add okay and it will take two variables a comma b okay now since this is ruby uh you don't need like uh you might be thinking that this looks like python in a python we have a column symbol here okay uh but here it is not needed okay so like you can remove this so it'll say to throw and we need to end the function with this okay so the body of function will lie in between okay so it says either you can do return a plus b like simple or you can do protest a plus b so let's do this like for the simplicity let's uh what we can do uh we can store this in a variable c a plus b and now what we can do we can put s c okay uh then we can like call the function add with two comma three 2 comma 7 and it should work fine so here we got the 519 uh we could also do that like uh so this is we could also return the statement a a plus b and we could get the return value here like result result is equal to add a comma b result and what we can do we can do put s result here and call the same statement here so it should work fine also and this is how the return statement also works in ruby so this is good so we like learned how to create functions like in ruby and like we made a good progress so far uh we can also create a swap function in ruby is in one line like i'll show you a is equal to 5 b is equal to 10 okay now i'll do put s a comma b will this work okay we'll check this so it works perfectly fine put s a comma b okay uh i'll use print okay this would give you better clarity now here you can see print s yeah like print a comma b so okay i'll give space okay so this is fine so right now we have two variables a comma b with the value 5 and 10 now what we're going to do we are going to repeat this statement but before repeat we are going to do a comma b is equal to b comma a okay so this is like we are going to clear this and run it again so okay yeah so i need to give a slash in statement here so here you can see 5 comma 10 has been placed to 10 comma 5 so basically in ruby this is also a valid statement x comma y comma z is equal to 1 comma 2 comma 3 okay and when i do print print x okay print y uh okay i'll do this okay now i can remove this code since this is needed print x okay print y and print set so this is a valid statement in ruby now i'll run this so here you can see this is also valid so this is good so we can assign values using comma using comma and separating them we are going to start some with some conditions and operators so let's start with a tutorial so basically we are going to create two variables a is equal to 100 b is equal to 50 and now we are going to define put s a plus b okay the we are going to i'm going to repeat these four statements so this is put as a plus b this is put a minus b this is put as a by b and this is put as a multiplied by b and the last one is going to put as a modulo b so let's run this file ruby conditions and operators or rb so we get all the result the addition takes it to 150 minus takes a 50 a by b 2 and this is 5 000 and this is model this is zero so this is fine okay and now let's start with some conditions some basic condition so so let's take with uh so let's create a variable and try to give this a value true and false and let's put sc okay so let's remove this yeah so this is false okay uh let's change this to or operator and let's run this file again okay here now this is true so you must be clear with all the conditions like how this kind of player 2 works in our operator was so this is fine go now and now what we can do we can like this is perfectly these are some basic conditions now let's create some if conditions so for if conditions let's create a a grade we'll give this a value if grade greater than equal to 90 then put s a plus else uh this sn so else if so please make a note of this e l s i f else if grade is less than equal to 89 okay now then i will do this then is greater than equal to 80 and okay and grade less than equal to 89 so this this it lies in this range so we do put s b or we can assign it a else else put s b plus l uh and then we need to end this if condition so i'll just make a like these are three conditions if else else so we will give values to it and see how this condition was let's give the grade equal to 99 so okay a small stick okay yeah i like this blue coat looks very intuitive to python so you don't need a semicolon a colon here okay so let's run this and here we are aboard it a plus now let's give it a 85 let's give it a value 85 now let's run this now it is a and now let's give it a value 75 and it should move to the else part okay now let's run this and it is b plus so this is how we make conditions now let's move to the like while loop so for that we can define a variable a 0 so while i less than equal to 10 okay so simply put s i and make sure you increment the i else it is in an infinite loop okay and now let's run this okay yeah so you need to end this loop here okay so i was going with some speed so yeah so this is how a while loop works okay now uh you can also work with for loop so there are two ways to work on a for loop so before we work on for loop i would like to show you the case statement okay the case statement is very much similar okay so okay what i'll do first i'll move with the like for loop so because i did the while loop first so uh then i'll move to case statement in ruby okay so basically case statement in the ruby are similar to switch statements okay so let's move to okay before we move i'll do word and print this i'll show you one a range operator range operators is denoted by double dots and there's a small difference with one dot two dot three dots like there's a difference between i'll show you what how see when i do put s put s range of 1 200 okay okay so i'll show you okay now i'll show you so yeah so i just forgot to lick this is to underscore array so it says i'll convert this range 100 to an array and here you see i have two dots okay so in these two dots here you can see this one too i'll show you a small like i i'll show you a small one yeah i know it's fine i'll do this now here you can see the value is from one to ten increases of inclusive of 10 the 10 is here when i put an extra dot here so 10 will not be included see so here you can see the last value has been excluded so it is because of the like extra dot so this is how it works okay so like this is what you can use this to work in like a for loop so for i in 1 to 2 10 okay and you can do put s i okay so let's clear this okay you need to end this for loop like i uh what to do that and this is how a for loop works with the full range okay now let's move to case statement in ruby so so what you can do the very first example the one with for which we made the great we'll do this with the grid okay so we'll take a variable grade and this time we are going to define case grade and uh i'll first try i'll automatically end this before i forget this so case grade now what i'm going to do uh when one so k is great and when when this crate is less than is greater than equal to 90 then i put s a play a plus okay when this grade how great is greater than equal to 80 and grade less than equal to 89 put s a when grade uh when grade uh then you can have a default statement but i'll show you one when grade is greater than equal to 70 and and grade less than equal to 79 then you can do put s put as b else uh something like else put s improve something like this uh now i'll put some great value 95 and i'll try to run this and so okay i made a mistake then i'm putting a colon here sorry so this is okay when like this didn't hit like something is missing it's good one good okay let me check what's the issue with this hey hey everyone uh welcome back uh that time i made a mistake the mistake was like uh like uh like the mistaken distance i opted to use case grade here so i used to just define the variable so uh earlier i was also like instead of this i was also comparing the value grade greater than equal to 90. this was not needed because i had already used case grade so this is not needed to repeat the same here okay so let's uh like let's uh so let's remove this now the perfect like syntax for great statement is this now let's run this now for 95 it rewards a plus let's do this to 85 for 85 it will reward a and for 75 it will reward b and for like let's take another value 55 it should prove to move to improve statement that is else so today we are going to start a new tutorial on some basic data structures in ruby so the most basic data structure and the like one of the most important although is rs so today we are going to continue with array in this tutorial and let's see how we like initialize some array in ruby so very basic method is to do nums is equal to one two three and now you can do and and you can i'll also initialize another array names is equal to joe john and checked so this is the one one is a area of nums and this is our of strings so these are like two data types you can initialize one is of integer type and one of string type and now we what we are going to do we are going to like see how we can for print this array the one way to print this do put test nums now let's run this file now here you can see i have printed the array another way is to like s names so this would like run the array like sorry print the array so this is one way of printing another way is you what you can do is you can treat this as a variable i have already told you like how we like like read the variables and print this and this is like this is also going to work and this is going to collect sorry this is going to print in horizontal direction so here you can see like this so same you can do with the names also okay and uh it looks good to go yeah so here you can do also the same thing now one way to also initialize the array is like you can use array dot new and this uh the like this is like eric class which calls constructor and this is added dot new and this is joe john and jack so let's run this again and let's see it works perfectly fine and let's run this for nums also and let's see yeah so so here it also works perfectly fine so this is one way of printing the array in ruby so another way what we can opt for is like i told this new operator now what you can do you can also use the range operator as well and uh uh some i'll show you one thing and we can comment this out now since this is not needed and i've all put this cover in comment so it's just for your reference so you can also i'll do this put test names let's put test nums so these two things are also not needed i can comment this yeah so now we can use another array let's take a variable m and let's give array dot new and i'm sending five times i want this word hello so when i do put s so hash m so it would give me a hello five times inside the area so this is a trick now one thing you need to observe now i'll remove i'll remove uh like the same can also be initialized with an integer variable so like i'll do this so now it says five times i get the zero if you want to initialize some empty array with some particular value you can do this okay so i'll comment this out also sorry yeah so yeah so this looks perfect perfectly fine now what we can do is uh we can also use another range operator and for that what we are going to do array this time we don't use the new operator we are not using this okay we will not use this and we give 20.30 if you don't want to include factory put an extra dot i already pre put in this my previous tutorial that this would include the last element last range and this would not include the last range okay now put s hash m and let's go with this and now here you can see i've got the array so make sure you don't put the new operator this time now some basic operations you can do with the arrays is like some basic operations you can do uh so like one is now let's create uh like some uh like dummy array a is equal to a what new and i'll say one one two three let me try out some with random limit 10 20 30 40 50 okay now uh you can uh i'll show you one thing also you can also what i'm trying to emulate here you can also run this on ah like irb command so that is rails interactive console so you can run this irb and then you can have an interactive rails console and you can run this or there also okay so let's um uh let some like let's move to the next thing then you can type exit and you can come out of this interact console so i'll show you also how to work with interactive rails console and now what you can do you can do first the very basic command you can do put test a dot length okay so let's run this and when i run a dot n so it gives 5 the same thing can be a dot size also so when i run a dot size so it gives 5's as well okay another thing we can run is uh like another thing we can run is a dot first and a dot last so a dot first would return me the first element now let's run this a dot first because this gives 10 now a dot last would give me the last element so that is 50. so it would first return me 10 a to last 50 and the size and length works is perfectly fine okay so we can run these commands to like have a better overview another thing we can have is push and pop okay so i'll show you push and pau so hey everyone like this was like four operators we had seen like one was the first last uh and size and length so you can use all of them first okay you can also lose last and size and length okay so these are the four operators we can use uh one thing you could also use you can use 8.2 underscore string so this would convert this to a string okay so i'll show you how this runs so here you can see so here we have got the string output of this uh it already looks like ruby rail ruby also does this behind the scenes like when we are using put s so it already does this behind the scene so we don't like i get intuition like this is happening okay so this is one thing you can also do so two operators like we can do use we can push 60 now we can print this and we get 60 okay now okay okay i did like okay i did one now we can do this sorry i had like then this like but it works perfectly fine not an issue but yeah this is the correct way to do it now i can do a dot pop also so the pop would remove the element i'll show you so basically pop removes the element from the last okay it uses like append so it works it has a similar behavior to the stack data structure so like it now basically it like pushes the element from the back and pops the element from the back so it behaves like a stacked data structure okay now we can move to like one last thing is uh there are various method in ruby like each with index and with index so the important one is the very important one is each with index because this works as a folly for each loop h with index i get two things in this one is the value and another in the index okay so i am going to type this put as a statement right the value add index okay now i'm going to put iadx is hash val okay so this is is going to print like five times or like so and this is like this is the one of the most so the value at index 0 is 10 valued index 1 is 20 value index 2 is 30 and value of index 3 is 40 and the value at index 5 is 50. uh we could also like uh we could also move with some another methods so there are various methods and array you can like have a view so we can also like uh delete underscope add at zero so this would this should probably okay i forgot to print this sorry put s hash a okay now let's run this so basically delete at the index 0 okay now if you want to delete the particular element so you need to define 20 so this would delete the one at 20. so see perfect today we are going to start with some uh continue with some more basic data structures input data structures in ruby so let's start with so let's create a string a and type it as hello world now simply we can print the string onto the console by using put s a so you can first you can type ruby ds dot rb and this would run the program and it says hello world perfectly fine you could also initialize the string using the string inbuilt class string dot new hello world okay now instead of a i'm printing i am printing b and now i clear this and i'll say put sb and it says hello dot hello world and i like it's the same output as the previous one so hello world hello world are perfectly fine now i can type put s a is equal to b if they both are equal so it should return true so it returns true so it returned perfectly fine so it looks perfectly fine true is the correct answer for this now you could also type put as a dot length so let's see the output of this so it turns out to be 11 good yeah now you could also do a dot size you can and the both of them return 11. so the both of them work with the same thing so now you can you can also type a dot uh one thing i i'll show you there is a method and now uh just for a second you can comment both of them okay i'll comment out and i'll make an array c and this is an array one two three and i'll put a c dot include include uh what does it include what i want to check does it include two okay so i'll it returns true okay so yes it includes true the same way you can do it for strings also so you can do this both same way you can do it for strings also so i'll do a dot include this character so it should return true the same it turns for this a also so the include method is used for both strings and arrays now uh since i don't need this okay so i'll remove this yeah so now what i can do you want to increase the access the first character you can please say a of 0 so this would give you the particular index so i'm showing you this gives me first character now to access the last character you can do either a dot length minus 1 so this would also work perfectly fine okay it does stay it gives you the last character but you could also use negative slicing and string uh string like in ruby there is a negative slicing which returns you from the end okay minus 1 is the last one minus 2 minus three minus four you keep on going like this okay so i'll show you oh it also gives the last character so this is the two ways you can manipulate strings in ruby uh now one we are left with some another command such as some basic this a dot up case okay and a dot uh put s a dot down case first i'll do one by one now a dot up case returns upper string and a dot down case returns the lower case so by default it was lower okay now i'll do a dot down a dot up case and i'll do put s a so here you might see sorry so now here you see that i did a dot up case but then put s a didn't turned out to be the one in the upper uh uh upper capital letters so for that you need to you put an explanation mark which is all uh now this would what it will do this it will now do the inbuilt operation within that string so see the output of this now it converts the default a to up case as well okay so so this is good so now we can move to hash maps so hash maps is like grades is equal to new okay now you can do grades of n is equal to a plus and grades of nine is equal to a and grades of eight is equal to b now let's put s grades so here is the hash map for the 10 is a plus nine is a and a it is b now let's put as grades of n okay uh this should give us a plus perfectly fine so this is how can you use it but what if i do grades of 7 so grades of 7 is not defined and when i run this it gives me nothing so to avoid that you can use dates or default if it is not default i'll do improve okay now this would turn out to be improved now i'll run this again and it says improve okay so this is how i can set the default value okay now i can uh use uh this is good now i comment this out a is new and b is equal to hash dot mu now a of 0 is equal to 1 just assigning some random values or let this be a b of 0 is also a okay yeah now i'll do put s i'll do put s a and put s p so initialize constant b uh like line number 15 okay let me check what's the issue so uh like there was some like it was like i might have not saved the file uh like uh a is regular hash dot new b is called dot new a of zero zero when i put s a and b okay so basically when i put s a n input is b so both of the same are equal both of the hash maps are equal so i can also compare them using an equal to operator so this gives out me the output true okay now now we could also like now it's perfectly fine uh now let's move to this this iphone as well now i can do put s great start length so this would give me the same like okay i had to uncomment this sorry yeah so now i'll put great short length h3 and i'll do great sort size it would also return me three now i can do put s grades dot 2 underscope a and and it should may return like this as a string oh sorry it converges to an array so this is also fine so this is how you can do it and one thing because i converted this uh this to an array okay so i told you uh you could also if you want to see in other way around you could do this you can store this inside a variable x and you can print x okay so this is how we can do it okay so this is how you convert into an array and one uh one small exercise we can have right now uh you could also do this as well put a s grade dot hash underscore value so this worked as like i told you the one like we had in uh like string that is include so it does it has a value 10 as a key okay so okay let's uh uh okay so this is returning false uh like this is our value sorry so this is how you can do it so 10 is not a value it is a key so for that you can run this true okay so this is how you can do it for key and value so by mistake i had like so like dated for uh has key and it has value so you can understand okay and value so let's move to a very small size since we covered strings and hash map in this string is equal to hello world so let's create a program to crown the frequency so first creates a frequency as a hash map frequency is equal to hash frequency is equal to hash dot new so this would maintain the frequency by initially the frequency should be frequency dot default is equal to zero now we do a s dot eat underscore care we'll make it do and i have the value okay okay i have the value then frequency dot val plus equal to equal to 1 and i can end this loop and simply put as frequency now let me clear this loop and run this so here i have got all the frequency of the particular graph so thank you everyone for watching this so it was a simple exercise make sure you uh do this else it will throw error this will throw error because you need to initialize frequency of default to zero else it will through error of course uh either you can also put a tricar statement if statement it inside this but this is a better way of doing so today we are going to work on like date time in ruby so and i'm going to take you forward with some like little bit good concepts in daytime because you might be working like get to work in back end on the rails part so you might like query on some date time part in your like um database and your like logic so it would help you how you can manipulate because when you keep the like a record of things so you usually manage with date and time so i'll tell you how you can achieve the same using like n ruby so let's start with our tutorial so the basic thing you need to first type you need to type require required is like is it is like uh you will get to like learn new things in this so require is used to like get this is required so it is like an import statement required date so required date would help you to like manipulate the date date records in ruby so now you can create a variable my date okay uh so you can get create variable my date bar so basically this should stay store a date and you need to store date dot ours and now you can put like in a string you can put 10 december uh 2021 so this is a very futuristic date and now what you're going to do you can like carry out few operations on this such as put as my date back so then put s so okay first we will do this so let's run this and we can type clear oh sorry click clear statement and now this would clear our console now ruby datetime.rb so when you print this so you get an output 20 21 12 so basically so this is how it depends this gives the year format this is the month and this is the day so 2021 uh 20211210 so this is a good output and what you can do now you can do different things like it s my date where dot here okay so basically now we can comment this so this would usually print out the year okay and in the same way you can approach for okay so i'll show you one by one so basically this would help you to have a clear approach so i do clear and ruby datetime.rb yes so 2021 is like is this the like output of this so next you can do put as my date where dot month so basically this would either give you the month now uh this is 12 okay and now what you can do you can simply comment this out or you can do put as my date where dot month day so month day is given by m day okay and now you can run this so i'm going little slow because this should help you because this is the 10th day of the month okay now you can do port s my date where dot weekly so this would tell you that which day of the week it is so basically now you can following make the operations like weekdays five if it was six or seven then you can refer that this was the weekend okay so this is how it goes good so now you can do clear and now you can type so which day of the year it is it is put as my date where dot y day so this will basically give you the year day so which day of the year it is okay so let's run this and it is a 344 day of the year okay so good to do good to go now what you can do you can shift this date my date were plus equal to five which is equivalent to like uh basically this is equal to my eight bar is equal to my date wire plus five okay so you can use either of this i'll use this notation the second one to have clarity now what you can do you can do put s my date where my date where dot you can string format time so this is strf time okay so basically your form for formatting and now i'll type you to do percent a person d person b and percent y okay so so this is capital yeah so let's run this so now it basically you can see by the notations it says though day is wednesday the day numeric in the week terms of week is wednesday day in terms of month is 15 december 21 so this is like a very uh used notation to keep the track of the like date okay so let's comment this and okay one thing i told you that i initialized as 10th december and now it did this plus five which incremented it by five days for this really like you can implement a good logic so like just by putting five you can increase the whole date so and get all the other details so like this was tenth i think uh sorry this was tenth december now i incremented by five here and then when i put it out this at this line so it works like magic okay now now you can comment this okay so now what you can do you can create another variable time okay for that you require required time okay and let's comment this so let's pick some space so that it gives a clear view so you can give my time where is equal to time dot new 2021 year 10th day well this is december six five and and this is the notation basically which tells you plus make sure you put a zero five zero zero though don't put directly like this five 0 so put 0 5 0 0 okay now in the same way what you can do you can do put s my time where okay and you can repeat this put as my time dot dot r this would give you the r now this would give you the minute and this would give you the seconds okay so let's run this yeah so here you can see so the r is sixth minutes is five then the second is ten okay and you can like also do something put s time dot now so this would like bring to that current time okay good to go now we can clear the screen and we can also print this now let's uh move on with some additional topic so basically i'll give you like there's a very like a small quick topic here to really help you so directory uh and exceptions so basically okay i'll give you directory.rb so basically this is a new topic so let's do this basically what you can do you can do put s run the directory commands directory dot print print pwd stand so print working directory now like the this your current working directory so this is print working directory now i'll give ruby directory.rb and this will print the current cooking directory okay so this is the working directory i'm usually in and this can be confirmed now then you can do uh run a command directory dot make directory so basically these are all the like commands you do a folder here and then you can also check put as directory dot exists exists let's say this this exists folder here so when i run this file now you will see yes this directory exists and it does create a directory to my left okay now let's create another file exceptions.rb so this is another topic so now to create a try catch statement ruby basically you you can give a begin statement now in this begin statement you have three things rescue so one is rescue okay other is else other is ensure so begin is put as begin so basically okay and then i'll do put s three by zero basically this is an error to catch this error i'll do put s error error catched okay so this would this is like a like input is the error is not cached if the error is not catch then you can do this yes looks good okay ensure this protest this should always run always run respect of above irrespective of so always run inspector let's run this ruby exception.rb so here you can see begin there is cash because 3 divided by 0 is a division division by 0 error so it's an error and it says here cash always run respective above let's change to 1 this is not an error now because this is valid three divided by one so let's see it see again it does good p is done because yes it does put three out it is not an error looks good or always run irrespective above so this is how you deal with error handling in ruby so i'll continue with like classes and objectoriented programming next tutorial so thank you for watching for this tutorial thank you everyone bye so today we are going to start with some objectoriented programming in ruby so let's create a most basic example let's create a class in ruby class person and we can like annotation use with a capital p and let's close this class by using an end tag now we can create a constructor in this class with def initialize so basically we initialize with id name and age so then we do we do close this constructor uh it's a good habit you keep closing them because then it would be very difficult for you to like know when which method or attribute or constructor is left of being close and it will throw an error so now we can do add grade id so basically we are declaring variables and assigning them values and id add grid like these are like some uh now this works as a property of the class what we call them attributes and another methods and functions so basically now we start setting the properties and attributes at the name is equal to name and at the rate age is equal to age now you can make a intro method define intro and which would particularly give you the intro put s and you can start putting my name is put this in a hash symbol add the date name okay and my age is put this in a like a symbol hash at the rate edge okay so this is like your intro works so it looks perfectly fine now let's create a person so let's create a person and we can try our code e1 is equal to person dot new we give it an as id a weak capacity parameters id 1 joe and 25 is the age and p2 is equal to person dot new let's create an id of 2. james and let's give an age of 30. okay yeah now we can do p1 dot intro let's call this pivot intro now let's run this ruby classes.rv so my name is joe and my age is 25 perfectly fine now we can do p2.intro and should run the another one so my name is james and my age 30. so everything looks perfectly fine now a very small concept here is we want to see how many persons were created okay like to keep a track of how many persons were created you can create a class variable so basically these belong to the class okay so these belong to the class and we can initialize persons is equal to zero this doesn't belong to the object is belong to the class so these are like class variables in like that belong to the class now we can make something a method which says def self dot get person count because and we can do get self dot to get person count and so this is like a like a method which is as excels access to the self class and it will basically return address persons okay now what you can do you can do so now we are using the class to put as person dot get person count so you can comment this comment this yeah i'm good to go let's clear this and run so did you mean initialized class whatever in person so see there might be some here yeah so yeah this initialize as zero so this like now it will work let's run this so now initial initially zero persons have been countered because i ran the program again now let's do one thing let's create a one person now let's run this and it still gives okay yeah now because uh i'll tell you why it was from zero because when you initialize a person you need to increment this by one as well i hope you get it so what you can do now it looks perfectly good so i'll give you we initialize the class variable with zero in increment by one whenever the constructor is called now you create a method to get its value okay now when a one person has been created so it should give me one when two person has been created it should return me two okay now let's create another person p3 is equal to person dot new like third three third like third person we are creating so we can give them any name let's give them a jack and let's give an age of 40 40 now let's run this now it you will see now it gives 3 so this is how we do it now let's make a small inheritance part so let's do class human and let's end this and define a person with wall and let's end this and say put test put as human humans evolve okay now let's do inheritance so this is how we do we initialize person and inherit with human class now let's call let's comment this out yeah so let's comment this we don't need like this part so let's comment this and now we let us do put sp1 dot evolve okay so p1 dot evolve so this is evolve yeah now let's run this so humans evolved because okay now let's do though basically now i'm trying to show you run time inheritance what if it had its own method evolve def evolved and like we end this and we do put this like person evolved persons involved or you can say people reward so basically this is like a just a dummy thing to show you and now you see people involved because it had its own evolved method then it called it if it doesn't then call the human but make sure you make inheritance okay so this is how we do it and let's move to some like a very simple one uh so so i'll just make comment i'll comment everything yeah now let's you can another class class box now you can initialize with this and now basically uh you can create initialize height comma w and say at the red height is equal to edge and at the rate width is equal to w and this is end okay now you can now make some getters and setters so basically get height and define get height define get width okay now you can close this now define set height okay so basically now you pass a parameter uh define set width now you pass a parameter parameter uh now you pass a parameter and now here you see so now you can do at the red width is equal to w at the right height is equal to h now return at the date height so basically these are the getters and these are the setup and return at the rate width now you can also make access specifiers to this by using this private okay let's do private get height get width set height set width okay so basically you can make them private and make a public one is like get area so how you would work with get area define get area and basically you would end this and now you can simply return return at the red height star at the rate width okay so basically let's create a b1 b1 will go to box dot new zero comma zero and put as b1 dot get area so ruby class dot rb okay expecting end so like there's some some issue let me check with this everyone uh so i it was like a small error like uh you need to define the colon uh like put the colon before the methods so initially what i did i had this put a private colon here here and i did didn't put these so this was like wrong notation so that is why it do an error now it's like good to go uh so what i'll do i'll put it undo this yeah so basically you can make them private so but uh now i'll comment this so now what you see that i created a box with zero values and i set a height and width then i did like get height and get to it and would get area so let's run this so it says yeah the height is 20 width is 10 which we had set at them is in the center and the get area is 200 so this is how you can implement things and then like so this is like some getter and setter which you are like encapsulation so so thank you for watching this tutorial you can explore some like creating some your own classes and moving out some inheritance so this would like really help you so thank you for watching tutorial so i'll catch you in the next video thank you bye today we are going to learn about how to install rails on our local machine so this is like a rails to install a rails on your machine it has like a few dependencies so basically we are going to cover each dependency how we can inter install the dependency so that our rails application works perfectly why uh perfectly fine on our machine so what we can do so we can like first what we can do we can like just like open few links and so basically we will start with one link at a time so let's open this link now this is the node.js official website you can move to this website and download this installer and this is the lts version you can download the long term support version so lts version and you can install node.js on your machine so when you have installed node.js on your machine then you can this would help you to install like the npm package okay so when you have installed like node.js so you can run this command on your machine node minus minus version and this will help you get started with that so i'll give you a quick hint uh well like i will open the command prompt and i will type node minus minus version so here you can see the node has been stored on my machine so it looks perfectly fine okay so yeah so then you can like then you have installed node on your machine then what you can do you can move to the another link uh this is like how to install yarn the yarn is another dependency required to install rails on your machine so so when you have installed node.js so you would have access to npm package so you can run this command npm install minus minus global yarn or alternate way alternative weight is to click on this and click on operating system windows classic stable version and you can download the installer so when you have download the installer so you can install yarn as per like as you will get a setup so you will have an msi installer and you will like uh you this will give you a msi file that will run walk you through installing your own window so basically it will give you a setup which will help you installing yarn on your machine so this is one of the methods okay to install the yarn on your machine so so basically now you have covered the two for two parts so basically you have installed node.js and yarn and you can solve with by npm also so you can solve at npm and you can run this command and to check if this is installed after uh then you have to type yarn minus minus version okay so here you can see you have got like two things the one is node and another is yarn so next moving to the third part uh like you can move to sqlite website so this is the third dependency and when you click on this link so you can access to this so this is now you move to this precompiled binaries for windows uh now you have to choose either of one um one of them either 32bit or 64bit okay choose according to your system 32bit or 64bit so uh like this is required so this is required either 32bit of 64bit install any one of them so uh like depending on your system then this one is mandatory like uh you have to install so what you'll get you get two files in this and two files in this and three files in this so since this one is like compulsory so this will be three files and either one of them will be three plus two that is five files you have to extract all the file files and copy them and paste them into your c windows system32 okay so then when you copy and paste them inside in the c windows system32 then you your sqlite is perfectly installed and you can type sqlite3 minus minus version okay so this would help install sql lite on your machine so here it's good to go yeah nice now what you need to do the now moving to the fourth part you need to do you need to move to ruby installer website so basically ruby's installer is intended to install ruby on your windows machine okay so basically you have ruby and like you can click on download button and this will give you a list from where you can choose from which ruby version you have to download and install i would recommend you to download this latest version and then you can walk through if you have like followed my previous tutorials so you must have already you followed this step to install ruby on your machine okay so this is the fifth part now uh to access like to access check whether ruby installed you need to type ruby minus minus version you have ruby now ruby by default installs the gem package manager so gem minus minus version so so 3.23 is also installed so now you have to execute two commands one is jam install sqlite three okay okay then gem install sqlite3 would like install sqlite on your machine and there's something like this you need to type okay and yeah so this is this is the step is needed uh and another one is this you have to learn around this command gem install rails so after running these two command then you can like you have installed rails on your machine successfully but this one is the most important command gem installers okay so after that you have to type rails minus minus version then you have rails on your machine so the latest version of the rails is 6.1.3 as 6.1.3.1 so like then you have installed rails on your machine so i walked you through the part like uh how you can install rails on your machine then simply you can move to like see so see you can move to desktop i can move to desktop and i will do rails new and basically this is your project name okay so you can type any project name i can type is my project and here you can see that now it will start creating a rails project on your machine and a bundle install is like installing all the like dependencies required for your project so basically this would show you how to install like dependencies these on your like for your project and when this process is successful then you are able to run the rails application on your machine okay so like this would like take a little time so you can like so basically then you can i can walk you through like a few commands so basically rails uh i'll give a quick overview rails is an mvc architecture so mvc m stands for model so n stand for models uh v stands for view and c stands for controller okay so models is like basically like working with your database database and then you have view then like views like presentation on front end presentation layer presentation layer and controller is like communicating logic and communication okay so so basic logic and communication and and you can say either linking the above to linking above to okay so like this is like mvc architecture followed in rails so here you can see like uh it's in installing like the rails or it's like like drills on your like a project on your machine then you can type the command uh so basically there are two commands one is rails new project name and you can then type rails server okay so by default it will start with the server on your local machine okay so i hope it's good to go then the real server will be started on your local machine so this is how like the process will go and then you like like this is like this folder so so we can like wait for this process to complete then i think we can like start the real server on our machine so hey everyone welcome back so like uh like i had like now this has been installed the rails project has been initialized in our like directory so basically uh we can like i was this here see use personal desktop i had created the rails project here now i can move inside my project by cd my project and i can simply type rails server and here you can see now the real server will start on my local host and at the same point you can move to its project inside the same project directory and you type code dot dot so this would open vs code so basically this is the gem file like they're like various things here so we will like go over through it and like so the rails uh like server has been started on my machine so now you can type local host colon 3000 and you can see the rails or servo runs perfectly fine on my machine so this is uh like the rails now you can this is how you can access rail server on your machine and at the same time you can see that i made a get request for the same so you can track the server here so from next we will start with some basics of rails so thank you for watching this tutorial thank you everyone so today we are continuing with our uh continue with the tutorial on rupee on rails so basically today we are going to work with routes in ruby so basically routes in ruby means like url so basically when you create an application you create different urls like for different purposes so we will see how to create some urls in rails and we will start like learn uh what we can process uh after creating a route so basically uh so let's start with our application so very first thing you need to create is like the first thing is like i'll give a quick overview okay since ruby is a mvc framework so m stands for models that is your database so basically this differential database views just like your presentation so basically that is your html and uh like html and front end so basically this is like for your presentation okay uh presentation and uh the another one is controller so controllers are basically used to like uh like basically like it is like to not communicate and navigate between the above two so basically controllers take control uh between uh where like between models and views okay so basically they are the one which basically communicate so basically controllers helps you to communicate between the above two so this is how mvc framework is completed so first thing we need to do is uh okay so first thing we need to do is we need to type rails server so basically i'll also give you a quick uh like overview what i like uh like important commands like initially you should know uh which will help you out so one command is rails server so this will start the server okay uh yeah another is rails console console so this will like uh this will like uh this will like this will start the console and you can like do interact with your database models inside this console so this has a short notations of rails s also known as rails s and this is also known as rail c uh another one is rails generate so basically generate is used to like generate like model views and controller so you can generate things with this so basically to generate and it has a short notation or rails g g so basically these are the commands you should know and preferably this should help you out like in this tutorial so first thing you need to remove inside your project directory i have already created a project and like you can and i have already created a project and you i know i'll start the server inside my project i'll type rail server i've already created a project with the name my project so real servers is this so when i do this so the real server should start on my local machine so basically real server is now started and when i like here you can see when i move to this port local host i see the server is running uh so here you can see the server is running on my machine so basically it starts on this board and i have a command line shell to like take care of the things now uh what you can do uh now i have terminated the like a server now i'll type rails generate controller and this should be my controller now after this i should have my controller name so basically i can type any controller so let me type root okay so just for your preference i'm typing root i'm highlighting this as well so like this is for my reference now when i run this command so now you will take it will take like a take a little bit of time uh not much but now here you can see that now it has created some files so the first thing is between like uh i taught you like these are like the commands you are going to like interact with rails most probably most of the time and these this is like it's uh like uh definition however else is defined mvc model so now we are going to like uh have an overview of little bit of files because understanding the structure is very important so you need to understand where database is defined where views is defined where controllers are defined so this would help you out so most probably you can see here itself that inside my app folder uh there is a folder three folders like one is models okay one other is views and another is controllers okay so when i wrote this command rails generate controller root so it itself created a root controller inside here here you can see the rails convert rails had like generated this controller for me so so now you can see the class root controller like it has inherited the property from application controller so so here you can see so it has like uh so here you can see that that there is application controller here okay now uh my root controller inherits from application controller so like so uh like basically my root controller enables and add some properties from application controller so that is the part of inheritance but the main point is here is that it has already generated a root controller now i can now now when i have generated a controller so it has also generated the corresponding views for it also now inside my views folder here you can see uh there is a folder called root which really generated right now it's empty but uh i'll show you how this works okay so now uh let's move to rouse.rb now let's define uh a route get okay and we need to define get uh so first we will define few routes and then we will carry okay hey so hey hey everyone uh welcome back so first let's define a route so now i'll define a route with get get request and it will say contact okay uh then i'll define a route with contact then slash about okay so they're like these are like few basic routes i've defined so now i'll define a two parameter which says where it should go when i hit this route okay where it should go so it should go to root okay okay now i'll show you first when i type slash contact uh slash contact and slash about so where should my function call exist okay so it should i will define a function in the root controller which says diff define about okay it says end and then another is defined contact okay and it says end so basically these two methods should be called inside the controller when i hit that route okay to clarify that we will say to root hash about okay and for this we will say root hash contact so when i hit these two routes you should call the about method inside the root controller and the contact method inside the root controller so when i reach here so it will hit this okay so let's first uh like now what you need to do and like now when you hit a route so basically you have two options either you create for particular request you have two options the first option is to uh for for for one request you have two option first is to return a json response okay so basically that is your api or second is to render a and render html page so that is your second option okay so to make sure if you want to return like html page so you should have the inside your root folder basically inside views you have root so you should have a file with html name as about dot html dot erb and another should be contact dot html dot erv okay so like these are the two files and in this i will define an h1 tag of about okay okay and in this i will define a h1 tag contact okay so here you can see like i have created this now when i hit these two routes uh like now i'll give a quick hit hit this hit these two routes when i hit them successfully you should call the like uh inside the root controller you should call this method about and contact and we will here by default say render about page okay and render contact okay and what we can also do we can say put s about page about in server okay put as about in server and in the same way we can say put as contact in server and like if we are able to like figure out like like this would really help us to see the console also okay so let's run this now let's run this we will type the command rail server so our server should start now okay so here you can see the server has started so now let's hit this page about so we have reached about and let's hit this one as well contact so here we have reached the contact page also and now you can see there is a specific line which says contact in server and it was also like then there is and server so here you can see whenever uh like i hit this route in the route dot rb it calls the about method and the contact matter of my root controller uh make sure that it can have any name i i named it as root you can name it with any other name then when it it like when uh it had hated the like method so it had first run the put a statement then it called the render method to like render the html page so this is like the most basic tutorial to create a route and render an html page in trails now in the next we will try to return a json response so i hope you you to catch up you all in the next tutorial so thank everyone for watching this so today we are going to continue with the rails tutorial so to start with first we will start a rail server okay so let's start a rail server with the command rails server so the short form of this command is tails s also so now when i like i have but i can previous tutorial i have showed you some like these things how to create a server console and the generate command so we had generated a control controller for the same so let's move to our server so let's refresh this page so here you can see like this is the page we get okay so let's define one another route and let's say get slash index and it moves to a root slash index hash index so let's define a index method here so let's define index and this should be on the top basically like above all so let's yeah perfectly fine so let's uh render index okay now uh i hope you must have watched my previous tutorial to like get so basically we are creating an index route which hits to root slash index and root hash index and when we move to root hash index it calls the index method and it renders the index erb so let's create an index crb which is by default should be created in the root folder and it should be the name index.html.erb and it says h1 with index page okay so yeah so let's move to this route slash index so okay it is showing an error okay it's a quite a small error uh i'll help you resolve it so basically in our route dot rb we i forgot to put it like a colon here so yeah now it should work fine so now we have like achieved the index page okay uh let's move to the another page contact and let's move to the another page about okay so it works perfectly fine so what you need to do like here you have the leg written render index so instead of index if you want to like you the one thing you could also do is like we can comment these things and we can comment these things and this is not required like uh like console statements are not wet uh uh you can see that whenever i hit that method the console is uh these statements are run in the console so uh when i remove this line okay let me remove this line render contact render about and render index so real by default has the ability to map that erb if the method name is same okay and here you can see contact and here you can see index okay so if inside the index you want to by default render index so you can leave blank and if you want to render about you could also do that okay so when i hit the index page i move to the about page okay index route moves to the about page so like this sounds little confusing but we should follow the convention because it increases the readability of the code and we know what is going uh out when so basically you should put these statements and it's like easier to debug than uh contact so uh so now we can like remove the statements so yeah so now what we can do a short activity like we are going to perform right now so we know that when we hit the root most route of this page like this is so we get the ruby on rails page so for that what we can type we can define the root and it should be root ash index so uh one thing i wanted to make clear don't confuse this root keyword with my root controller because i could have named any root controller but this is a like a reserved keyword in rails for like giving the root route so let's refresh this page and now and you can see now this route is the this route is the index route so you could also do this to about so now about one becomes the root perfectly fine you could also do this to contact contact and contact one will become the like default one so this is how it's performed so this is how we have achieved this uh like the root route so this is like easy to do and uh yeah so let's keep it this to index if we are keeping this to index then this is not required okay so we can either comment this out or like i'll comment this out because this is not required and i'll move this to top now like yeah so this is perfectly fine so uh now one format uh one one short active we are going to suppose to do we are going to create a one like api method uh let's create api and let's end this let's create a variable response response and let's uh give them a key so basically in rails we give a key by giving a colon so status and is equal to 200 and basically it is like a hash map and message is equal to hello world now uh basically there are a lot of render methods we can do render json and this is we sent the response so basically i'm showing you this because like this is like most a used one so it will help you and now i'll type get flash response and we hit like the root hash api so when i hit move to response route i i call the api method of the root and then we can see the response so let's move to response so here you can see a status of 200 and a message of hello world is there so this is how we have cros uh created created a mock json response so that's good so there are multiple uh you could like figure out these i close this close this all as well and this and yeah so there are like multiple methods like one is json another is status okay i'm telling you you can like refer there are many then one is html uh one is body one is hd like like html there is a xml then there is a json there then as jsjs as well so uh there are many methods like plain uh text so there are many so you can like uh serialize your data like in many ways as like you want so this is this one will be like json so this one is perfect so now let's uh do uh one one thing i'll show you let's create a file header dot html dot erb and let's create another file new file footer dot html dot erb so one thing like you must have like a scene here like i am putting a underscore tag in between like in front when naming this file so basically this underscore tag defines a partial so i i'll give this in notes like this is a underscore tag means a partial so partial is something where you can it renders the same thing again and again so i'll show you when i move to like this page header.html.erb so i'll create header okay and i'll close this and i'll put a hr tag so i'll put a hr tag in the top and the bottom as well in the same way i'll copy the same code in the footer and i'll this name is add to footer okay when i move to my index page so when i move to my index page so i'll define so this is like uh like rails has a template engine so this is the syntax render header and this is how we define like this is like these braces are very important because this uh signifies the tempered engine rails okay so let's let's close the server and i'll start the server again so let's the server should start so yeah the server has started so let's refresh the page at the index so here you can see i have a header okay and in the same way in the same way i can render a footer okay so like yeah so this is how we achieve and now we can use this partial everywhere like if in this page we want a footer only okay or we want a footer at the footer only so we can do only footer and let's refresh and move to contact so here i only have the footer so this is how you can maintain the partials and partials can be rendered only wherever they are required so thank you everyone for watching this tutorial so i'll catch you in the next tutorial with some more content on rails thank you everyone today we are going to continue with our ruby on rails tutorial so basically i'll give give you a quick overview what we have achieved in like few last tutorials and today we are going to carry on with those things so basically we had created three routes one is a contact round about route and json response route and there was a root route that when we open our application so it should head to this method of the controller so basically uh we had created this router as well get slash index then we had to replace this with the root route so we had created a controller root so we had few methods of the root controller one is a contact about api index then let's move to the root controller then inside we have defined those methods the index about contact api and then we rendered a erb files for that particular method so we have rendered the index erb about erb contact erb and we for one method we render a json response so today uh then this is the root controller here it is located in the controllers file then uh we have like views uh we can close this views yeah then there is a views for for root layout and for index about contact index header and footer basically these two are partials because they are defined by underscore sign so we have invented the partials here so let's start our server first and let's see how our app is running till now and we can proceed with the things yeah so here you can see the server has started and basically now we can move to the server and let's refresh this page so you see few things we are in the index page and it has a header and footer let's move to contact and here you have that and a footer now let's move to about the about route so here it doesn't about so it neither has a header or footer so for that we need to integrate a a partial so here you can see we have embedded like a footer so let's add a footer and here we can add a header so we can have a header and now let's copy this list here as well and so here we have a header here now i'll above this and i'll remove this content so it seems perfectly fine so here we see we have a header and a footer now one thing to note here is that we don't uh like this is not uh like a business very basic html and if you want to integrate some styling we can achieve that so but before that i'll cover a few basics one is like now i'll close you files because they might create some create some confusion yes so let's create a route uh okay now we move to contact page okay and let's move to contact page so here we are on contact page okay so now we will move to root slash contact so we move to root contact and we are here okay so we render a contact page but what if we do this instead of commenting this i would do redirect underscore slash about if i do this let me restart my server i clear there is server yeah so what if i type this command redirect to about so let me refresh ah let me move to contact route and you can see that i was redirected uh i'll show you again this is the index okay uh now this is a contact one now when i click on contact you see i am redirected so you can use this uh to make a redirection but uh make sure like you you you use it for a good purpose because then it might create a conclusion so this is about the redirect route so basically you can redirect from one route to another using this uh next is i'll pass you parameters uh get uh get like user slash id okay and and i'll put name and it will be two slash to root slash hash user root hash user and let's create this method so basically find a user and let's make an end of this and let's simply render json with params okay so basically parents is what we return like i'll show you so let's again restart my server yeah yes so let's move to this route first let me check the server is running yes so your server is running let move to this user slash let's give it an id and name is joe okay now let's hit this and you see we get a json response of parents so controller is root action is user so now it defines very clearly controller is root action is user id is 10 a name is you what we can do here we can return parents of id first will return only this let's make a refresh we get 10 here only now let's make patterns of name we get joe so or we could simply do render pattern so this is how we access parents basically i will show you that pattern so id you can access id and parents of name you can access the name so basically now it seems perfect now you can refresh and here you can see that we have a controller root action with the response of parents a small activity we are going to do now to like you can embed bootstrap in your rails app very simply you can click here get started so basically when you click on get started either you can move to this page then you have a css js and like bundle so to copy this we want the bootstrap to be available on every page of our app so what we can do there is a main layout we can close this close this in views there is a main page application.html.erb inside here we can copy this link css link copy and we can put this just above the header okay so we see this has been embedded and then we can embed the js as well so let's embed the js yes so this is a like this is a bundle like you can the bundle means like both of them are like if you want separate you can do this like if you want it in a bundled way so you can use this so for the bundle one just put this below your closing body tag so the css has to be put like below your attack which is closed and the bundle has to be put like js bundle has to be put just before the closing body and now let's refresh the page and let's move to the just see the difference in the like uh for fonts so you might be seeing something different so it looks pretty nice so you can like make close call that bootstrap has been solved uh then you can press ctrl u so it will bring to the source code and in the source code you can see the bootstrap has been installed so basically this is a template now what we can do we can move to here and we can move to some components and let's move to the component navbar the simplest one is this okay so if we move to our header partial and let's remove this and let's copy the bootstrap and let's refresh now see how it's easy to integrate with our app so like we had already made a partial we changed that partial and all the changes which have been wherever this partial has been included all the changes are there so everywhere there like it's been included so for this you can like do this uh uh for footer we can just for an example i'm using this page the pagination and let's move to here and let's remove this and let's add this and let's refresh the page so here you can see how simple it's easy to add okay so just like this was like just like just to show you how things work now this was like a pretty pretty good exercise and decent one you can like if you want to like edit some css here you can click on inspect element this will open the chrome developer tools and basically uh here you can if you want to like align this to center so basically this is this is this and you can invent margin zero photo you can try a few things here and this would probably help you out okay so so this is this was it like this is how you can like take care of things and you can try some different css here like margin zero auto like anything you want to uh just keep on trying things here so basically this will really help you okay so thank you everyone for watching this tutorial so i'll catch you in the next video thank you everyone so basically we had uh first i'll start my server this server and then let's wait for the server to get started so your server is running let's fix this page so basically we had a footer here in last tutorial i took a small task to how to align this incentive so basically so since you can see that this is a flex box so align text box to center is justify content you have basically a few types of justified content that is center next end the end would move to move this end start will keep it as starting then basically there are a few things space around space between so space evenly so you can opt for any so basically the best one you can choose for is center okay and so basically you have to center and then you can see that this is in center so let's click on inspect and let's check yeah it's even it's here it's center so this is a flex class so let's we will give this a style is equal to justify content center so let's refresh this now we have perfectly moved to this so this was a good good thing to know about and now let's move to let's create a model so basically uh this is our like project directory so i have opened this in terminal so that it gives you clear view so i could do the same thing in the vs code terminal but that's why i opened a terminal here to like to have a good overview so now we are going to perform something let's create rails generate generate model article okay or let let's keep it as post there is generate a model also post is something you uh like uh like you define something a post which has a like a title so that is a string and it has a text so that is a you can say like this is title string and you have a description description so basically that is of text data type so let's run this and now you can see that it has created a model and now we can do rails db so basically model is like creating a table in your database now we want to permanently move to this table so we want this to like migrate this into database so we had created a model which defines that we are going to create something with the title string and description text now let's create rails db migrate and then you can see that this should be created permanently in the database so here it says this has been created created table post and the descriptions we have already mentioned what we are going to create so okay before you perform a few operations with the like uh this table or model which i say so basically so you can interact with this inside rails console okay so please type rails console and then you have interactive rails shell to work with then you can interact with this uh this inside the rails console so let's type post but it will it shall throw an error because it says po call post.connection to establish a connection okay so that's why i did this post dot connection so this so we have made a connection so it like it throws out a good amount of things so we shall ignore this okay and okay i have missed all of my cursor yes so we can type uh clear this you can type uh you can type control l control l control plus l so this would clear out okay so okay control plus l and now this will clear out and now you have now let's take a post make post a is equal to post okay so basically it defines uh a so id is an integer title is string description of the text created as a date time updated at a date time okay so let's skip a dot title is equal to hello okay okay undefined okay okay okay so uh i'll tell you what's the issue with this uh c so basically uh we need to call the constructor so you can for a second ignore this so we will call a is equal to post dot new okay now you see we get a post id is nil title is named description is created additional update results but at that time what i was doing i was doing a is equal to post which eventually meant a is equal to post which is a is equal to post so which is by default meant this that post and which was returning this okay so this is the class first is a class now a which i have created is going to post.new is is the object of that class or you can say the instance of that class now post is a class and a o a is equal to post dot new is the object of that class because we have called the new as a constructor so let's define a and let's do a dot title is equal to hello and a dot description is equal to word okay now we type a so we have title is equal to hello and descriptions good word now to save this inside our database we should call a dot save so it says which means it has been saved in our database and let's call a again so it says id one title is hello world description is world and this is a created ad and updated things which is throwing and one thing you can see it also gives out the sql query insert into post and title description created update value should be this is this and this so this is how it creates that into database let's create another one let's first call post as a class so it's not necessary to call it everything but i'm showing you again now let's call b is equal to post dot new let's call b so this is the post this has been let's try b dot title is equal to programming uh either we can say ruby okay and b dot description this is equal to rails simple let's call b again and it says this and let's call b dot save then it shall clear save the sensor database okay now we have to post one is this and another this so to access all the posts you could call post.all simply okay so it gives all the posts you have so this so and one with the id one and another is with the id two here you can see this is the id two and this is id one so both the post we get uh then we can call post dot find find is like i'll show you show you post dot find one let's find the post with the id one it so it finds us for us for that now we can see in the similar way called post dot find two this you could also call host dot where id uh you like ubiquito id okay there's some issue with my command line okay post dot where id is equal to one so where and what's the difference between the find and post uh find and where so this is and this is another way of doing the same thing but find has a limit one okay so so we have learned about like how to create now let's move to how to like let's do something uh something new uh let's make post dot find post dot find so let's make first now let's change this title to title is equal to ruby uh ruby new okay so we have b and that's b dot description is equal to rails new and let's see so we do b dot save so this is our update operation okay so say update post see update both set title is the description this and these are the value uh we could also do post dot find to and destroy so basically this forms a delete operation so we have learned how to like perform all the four thread operations that discrete date update and delete on the rails console so now we are going to implement this same thing with the ui so thank you everyone for watching this i will catch you in the next tutorial thank you now what in previous tutorial we have learned about models and rails so we are going to continue with like further development how to develop our application in rails so we had created a model in rails and basically you can type here so i have started already started my server i'll show you how to like you can type trails server to start your server and instead of server you can type rails console so it will open interactive shell on your rails machine okay so and here you can start your server rails server so i have opened the console here so that it gives you a better view and we had made post.connection so we had made a model post.connection and you can now press ctrl l and then you can print post so it gives you the data structure what we are following in the post so it has an id integer title string description text created at date time and updated data so we so this is how we i showed you flow operation in the last video of hostile what we can perform now let's this is our server and let's uh now let's move with some like something new to this edition uh now what you can do you can move to bootstrap website and i can click here open into tab and this would guide me to the bootstrap website i can refer to this page and here what i can do uh what i can do i can move to forms and and i can refer to forms and what i can do here is uh click on overview then click on like this and overview and this would give you like diff you will have different things or forms here uh then you can click on like form control so you can move to this page and you can copy this let's copy this uh let's copy this and let's paste this inside we have a few files let's paste this on index.html and let's print let's paste this this here and then your application just refresh this so basically now we have a form here okay so this forms looks pretty big so what we can do we can try to small it down and for this we can add this give this class as call call md6 to take the width of six and and let's give it a class of column d6 so okay so nothing to this so let me inspect this element and yeah so here yeah so i have this diff class rule called md6 and this should work i think okay so let's let's make another div let's make another dip div and let's wrap this inside this day yeah and let's this give this dip a class of call nd 6 because bushra has a total width of 12 columns we are asking it to take a width of 6 columns let's okay it doesn't look either now and let's give it a call six okay i forgot to like close the tag yeah yeah yeah so now it works perfectly fine uh and then you can give style of margin uh zero auto so this would place this inside the center okay so this should work perfectly fine yeah and you can like this is perfectly fine and inside our header uh let's create instead of header let's give this a go to app and let's give this a two to f and we can like now everything looks perfectly fine and we could do like so yeah so this is good okay so yeah so now we try to create a todo app here from now and this is example email address now let's modify the few things so that we can uh operate on them so instead of this let's give this a title and here if we give this a title name is equal to title so here we give it a name as a title and here we give this a name okay the name should the input type is equal to text and let's give it to input types okay try to close this yeah yeah so so this is this is the input type is equal to text and let's give this name is equal to title and here we have a text area let's give this as a name to text area okay so this is looks good so this is how we created so this is title and and this is basically for us this means description so we will give this a description and and this is here we also type it as description okay so this cryption is good yeah so let's and we remove this and we need to wrap this everything inside a form okay and let's close this here so let's yeah so we need to wrap this inside a form yeah so this looks pretty good yeah so fine so so this is like a kind of a footer for us this is like a kind of header and so we need to like this is how we define it so this looks good so we have made some boilerplate a front end for our app and instead of email you should change this to text okay and now we create a method for this method is equal to post and yeah so let's refresh this so good so we have made this method equal to post and let's create a action is equal to add okay let's create this to add so action is to slash add and uh so this should work fine and so let's create a so since like we have created this circulated this response so left let's create this uh action which takes a post request and give it a slash add and let's create something as this 2 is equal to root add okay and let's create a okay one thing you need to make sure that you need to add a token tag here because a post request the question is the cscs csf rf token and you need to define token underscore tag here and you can now close this tag and this is looks perfectly fine so let's finish this page so yeah good now we need to define a post request inside of controller so that is define add and that is end and render json params is the same thing we are going to do here and inside a form we need to define uh like a button so let's define a button so let's click this same class if class is equal to mb3 and let's get a button input let's create a button yeah so let's create a button input type is equal to text class is equal to btn btn primary and let's yeah so it's a good good and we can remove this placeholder because this is not needed we can move this placeholder okay we can move this placeholder id is also not needed okay okay id is needed and because id is equal to needed because let's get give this to a title id and let's give to this is this a description id description id and we need to like wrap this description id here because this is works one id and this is text id so like a good amount of changes has been done let's refresh this and yes so this is between butane primary and a value should be add okay and let's give a style is equal to display block okay and it should be done yeah so yeah so this is a button iron and let's give a display block and margin because margin zero auto will align this button to center okay so let's give this a refresh yeah so this looks perfectly fine so like in this tutorial we created all the like part needed to like perform this operation and so so thank you everyone for watching this tutorial i'll catch in the next tutorial so like you can go over this video like because it was needed to necessary to set up this bootstrap form so in the next tutorial we will like see how we can form other operations thank you everyone so in the previous tutorial i showed you like first i will start my rail server so i type rails server this would start the real server on my machine so we had created this frontend layout using our in the rails app so so like one few mistakes like a few things uh i would like to make clear uh that that is inside your index.html.erb this for input type is text actually this should be introduced equal to input type is equal to submit because this is a button and you need a submit button so when you make this change you can see this button so this knob this becomes a button uh and inside your header.html uh this is this snapbar you can do this to todo app okay and let's do this and here you can see that now this becomes a todo app we don't need these things so we can like cut them like they might create some confusion like with the code so we know don't need this drop down so this is fine and we also don't need this this is fine and let's refresh this so we have a home or link so let's see this so we can change this link to slash contact and this becomes contact okay and in the same way we can copy this we can replicate this and this can be changed to about about and this is about uh yeah and this can be changed to slash slash that is the root oh slash slash contact flash about let's refresh them here we can see so let's click on about move to about page contract is contact and home is this so this is perfectly fine now let's check how we can make a post request using this form so what we can do we can move to like these files have been sorted so let's move to index.html and let's make a we already made a method post please make sure that in uh below the post like below the form tag you add this token endoscope tag because if you don't add this token underscore tag you won't be able to make a post request because this will give an authentication error and to make a post request you need an authentication token so so that for every request we have a token and then you won't be able to make this okay so for we for this method post we move to action add so let's move to action add sorry you are allowed so post slash add move in a root controller we move to the action add and let's see this and then we simply add what we do okay this is not for now we simply do render json response patterns so let's create this let's create to do and let's copy this and paste this as well so let's make a request and here you can see authenticity token is this so that was the token underscore tag i was speaking about so which is here so this is the token underscope tag and the title is to do description is description controllers root and action is act so this means our form is working perfectly fine so let's try to get the data out of this form and post this okay so let's what we can do we can uh we can create add the right post is equal to post.new and we can do at the red post or title is equal to params of title and it post dot description is equal to patterns dot uh parents or description okay so we need to like follow this convention uh this should be strictly followed the title string and descriptions text okay and make sure you don't have any some spelling errors then this would be like something then render json at the right post so let's do this first let's do this now let's refresh this page and make a request again so say id is null title is due to description description works perfectly fine and we return the instance and we see that we don't save this in our database so let's do address post dot save and and we render json what we can do we can simply return this kind of response but let's copy this this would help really help us so we can say you can say message says saved successfully saved and success we can say successfully so this is like perfectly fine let's make another request and do this and here you can see this sign can't be reached like we have some like we have some issue let me check this hey everyone welcome back so like i now by mistake i must have closed the server that was it throwing an error so let's create a task task new now and let's make a description let's make a description this description new now so let's click on add and here you can see we have a status 200 which means okay and between this request okay and message is saved successfully okay to view this what we can do we can do post but all in our database and here you can see that we have a task new now and description you now created here so we could also do this post dot find by id5 since i've seen this ids 5 and here you can see we have already saved this to our database so this is good and works perfectly fine what if we want to like uh instead of doing this we could render our index page instead okay so let's make a hit again task do not task new node 2 description new node 2 and let's create add and here we can see that it must have been saved in the database let's check in the database so let's check in the database post dot find by id sticks because the new id created would be six and it says let's see we can see that it has been created in the database so it works perfectly fine uh but would instead of doing this we could do something like this drift post is equal to post dot all let's create our logic and let's create a logic yeah so we have rendered all posts in the index page so this would automatically be rendered okay in the index page and what we can do we can now access this inside of page so let's give a hr tag and let's give a post dot each do post and let's close this okay and let's close this and uh we could do something like this percent equal to post dot title and we could close this here something like this so similarly we i'm trying to achieve this so this is like what i meant so end tag i forgot to put like i'll put down yeah so this should work now like this is post dot each you do post and like it should work now so let's refresh this and no matches slash get route okay no we need to move to this okay there's an error let me check we need to i need to check this error hey everyone welcome back uh so a smart error like i found like like we have created we are like first when we add so we render an index page okay if we perform ad operation instead by default we are rendering the index page with this route which is the root route we need to define post here as well so if your render index if you render index then you would you need to add posts on both the sites like post is your post dot call and even here you have to define post world because in the same time you are rendering index okay because when you are rendering the index you need the post to be shown okay and when we move to individual html this is like this syntax is correct but it's a small error uh the accurate sign has to be put here now uh we can use a bootstrap card so i'll show you we can use a bootstrap card and let's search for card yeah so let's copy this and let's paste it here we don't need the image tag so this is fine we need this so let's paste it here and another thing we need is this description okay so another thing we need here is description this option let's refresh this and let's move to this so here you can see we have all the todo's okay they are not aligned in the center to align them in the center what we can do you can put margin zero auto okay now let's refresh this and yeah perfectly fine so and one thing we are rendering is pose.title this is not needed yes let's refresh this now and we like move to contact up index this works perfectly fine and let's add a new to do do done again and let's give this as same and let's create an ad and now you can see this has been added so this works perfectly fine thank you everyone for watching this video i'll catch you in the next tutorial thank you so here i have started my real server and here i've started my rails console so let's make a post dot connection post dot connection and then yeah then we it's fine then we can type post and we could see our database like schema so here is our database schema here you can see so here we can work on this schema and let's get started so basically uh i'll run my application so yeah this is application let's add it to do new uh let's give them some like task one and just for the simplicity let's add this yeah perfect task two so with the simplicity i am going to repeat this process like for a few tasks last three so here you can see that it is we have created three tasks works perfectly fine but when you click on this none of them is get gets deleted so we've been implementing delete functionality the first thing we need to do you need to move to this file uh index.html.erb and you need to convert this button to delete okay so first let's make it out or delete so let's move to this file uh we will move to roush.drp and let's create this delete let's create delete and for that we need an id so this is not a get method this is a delete method okay uh we go to root hash delete i hope this is fine so let's move to root hat delete so this is where we form the delete operation now let's move to our root controller and create a method delete and simply let's end this and render json patterns okay uh this is fine we have made this let's move to index.html.erb and let's change this button to btn btn danger and we have changed this to beating video and dangerous y because it will give a red feather and give let's give it give it a style also so we'll move the style is equal to display display or simply give margins here auto it will move to center okay uh yeah so we can refresh this so it gives an error so let me check extracted source around let me check what this error is throwing let me check please welcome back uh the error is like we need to check that i need to put a colon sign here so this is fine let's refresh this and no match for get ad okay okay this is something yeah so here we have move to the delete button so now let's click on this and this is not working okay so they've seen some issue with this so this is not working let me let the we have created delete route and let's move to our index.html.drb yeah because it won't work because there is no hrm so when we say hrf is equal to slash delete and we need to define uh we need to put the like we need to put the id basically we need the id so we will find post dot id then we will close this and now this is fine so basically what we do we call for a delete method and with the id we pass it here another thing we need to do we need to price data method is equal to delete because by default a anchor tag has a get nature so nature won't work here because yeah i can uh opt for this i will show you how first i'll refresh now here you can see now i'll call this so it says get delete nine is not possible yes it won't be possible because we had defined in a route.rb this was a delete method so let's move back to index.html.erb and make this data method from the third is equal to this could be either get either post uh either get post or delete so we make it delete let's move this so let's let's move to our app refresh it so let's call delete and here you can see we have a json response so it works perfectly fine what we need to do we need to move to root controller now and we will do at the post is able to post post dot find patterns of id okay so because we need to match with the id here and we will simply say did it post or destroy destroy and this would delete the post and everything else remains same instead of generate json response we render at the right position and render index because then we this is a single post this is all the post so let's refresh this let's check if this is working or not yeah so refresh the app let's create delete okay still it returns like json response okay let me check what's the issue yeah so now i have saved the file i must have forgot to save this now click on delete yeah now it works everything works fine because i forgot to save the file so chain these changes won't save so it was like till json so now after uh saving them the saving the file now reflects the changes so let's quickly check whether how to do this now to do one let's create a description to do one now do two let's create two two now delete both of them deleted so perfectly fine so this is how we get the delete functionality so let's create another functionality let's create uh let's create some to do to do one and let's create this two to one to do two let's click ask three let's let's create some to do's now because we we might need to implement a new functionality and we might need them so let's do this so task so let's dummy to do let's create this as well okay so we have five to do's here and we can delete one okay just for so we deleted this so perfectly fine so let's create a search functionality for search functionality to be created we need to write a query sql query so let's write post dot where where post dot title like and this is a sql operator like so question mark will the question mark just like to take the value so what value we want here we want a value which is inside this okay so first what i'll do i'll type here so it says select post dot star from pause your post dot like null because i didn't pass anything in this in this array so that's absolutely fine uh let's do post dot all so we get all of them so now let's do something let's take a variable query and make is our dummy okay and now let's write this query where where uh we are defining now where we need to define a percent operator and this is like a query this will take the value and this is now we again put a person operator and type this so so here it says select post dot from post your post or title like dummy so this return this to do perfectly fine so this is the query value we had put in so this is so it's perfectly working fine so we can copy this query i had posted i had wrote the same query here as well so let's move here and type define search search let's create this end so and we need to define them as address post and yes this is fine and we need to refine the render index uh now the only one thing is left we need to get the query okay and the query would be our patterns of query okay so from where we will get this query so let's implement this uh in our header so move to let's move to our header and here we have this input type is equal to search this is a search form which refers to this at the top right so what we can do we can define we can define name is equal to query because we would are going to take and method is equal to get so by default it is get so let's refresh and this is some we can ignore this so let's type hello let's type dummy dummy and let's click on search so we forgot to like make a request get slash search and which says to is equal to root hash search so this is what's error and now we need to put this inside an action okay so we would move to our header.html.erb and we need to put this inside an action so basically this name this method should we get this entire wrong place so this is get an action is equal to search so i hope it should work now so let's type dummy and let's hit the button so yeah so undefined color with variable method query okay so it's like a small error i figured out and we needed to find the root controller and this should be at the right query let's refresh this and here you can see the dummy has been searched successfully let's type to do and let's search it get many tools dummy to do and to do because both of them have a tool keyword so this is how we operate the search impression thank you everyone for watching this tutorial i'll catch you in the next one thank you so today we are continuing with the rails app so i'll show you a quick overview what we have like achieved till now so this is the home page this is contact page this is the about page and this is the home page we have all the todo's here so this is our rail server running and this is the rails console running we can type post.connection uh so like this is we have achieved the connection now we will type post and this is all the posts and we'll type post dot all and simply we get all the posts here so this is uh working so let's create a new to do let's create task three and let's paste this uh okay this already created that's created with task five and let's add this and it's has been added now we can delete this task as well and uh this is all the tasks we have we can also search one using here let's type task and we will get all the one so this is task three and task four so we have achieved lot of functionalities so one functionality is left that is the update functionality so update functionality is like uh so it is so let's start building the update functionality so for that what we need to do we need to move to the html file index.html.rb and here we have a button for uh like this is the add button so and this is this is that button and in the same way we have a delete button so let's move here and let's uh let's uh create a button so let's move copy this and let's this and data method we don't need a data method here so let's remove this hrf tag we can ignore for right now so now we are creating a update button so let's give this update and and let's give this a class button button warning so this will uh give the like yellow button so yeah so now it's perfectly fine so we have the update button so now we click on this it doesn't go anywhere so we need to create a route for this so let's do this uh the same way we have for delete let's create this for update okay so let's click here update okay now let's this is fine now we have to create a route for this on our routes.rb so let's create this so let's create here uh let's create a get method so let's create this after the search so let's create copy this yes so we need to create get request then update and root hash update okay oh yeah so this is fine so what we can do uh then we need to move to the root controller so in here we will create define update and let's end this method so we will do post dot find parenthood id and we will define title is equal to at the ratepost.title and address description is equal to at the red post dot description okay then what we can do we can render a template update let's render a template update now let's create a template update so in this we will create a new file update dot html dot erb and simply let's print this person tag is go to we will close this tag and add the red title and let's print this also add description so i hope it should work fine now let's refresh this so update we move to this page and so we have let me check let me cross this so yeah we have something here so uh we have something here so so we can see the text let's inspect element and we here you can see that we have the data that is task 4 task 4 so this is perfectly fine now what we want to do this that we have the data which has been coming the data is moving we have a move to update route then it fetches that post with that given id then it extracts some data and then it's update then it's under this template so what we need to do we need to update this so what we can do we can create index index.html and we can copy this form okay so we can like copy this template till here because we want to recreate that thing so let's copy this and let's remove this yeah so yeah so let's move this and here like what we can do we can put value that is percent equal to percent so yeah the value is equal to add the red title and in the same way we can achieve this thing we can achieve this thing by putting this between the text area so this is added description so let's make a request again and here we see automatically we get all the things the title and task so let's click go to home button let's click on this update so we get everything the dummy to do and we do as a description one small thing we can make sure here that this should be update now now this is not a ad okay so let's so this is update so we need to create something one thing i would show you so you need to create you need to maintain the id so for that what you can do you can do input type is equal to hidden okay and here you can see value is equal to value should be this so value can be your id so value can be your id so so this is fine so input types will do very value is equal to id so you need to actually maintain the id of the pose as well so let's go here and we will define at the rate id it is equal to params of id so simply simply we can do this and then let's again make a request we have home page let's click on update and let's inspect element and see uh because this is a here you can see input type is equal to hidden and we have a value 15 because the task corresponding to this let's move to rails console and check post dot find let's post find the post with the id15 yeah this is the same post so here you can see that we have that post with that id so we did this because we wanted to maintain the value so let's uh let's create a method again def define update form and let's end this okay now let's make this post slash update form okay uh then let's move to this to hash root root update form okay so this is fine let's move to controller so this is update form and then we can simply render json of patterns just for the simplicity of this so and now when we make update html so this same space everything remains same and this changes to update form so let's refresh this so let's move to the app so we have home let's click on update let's give it two to three and let's make it to do 20 let's make it 20 20 20 and let's click on update so here you can see now the title is this and 2 to 20 is this so now everything looks perfectly fine now a simple change is needed in the controller so i mean you're getting my point that i can okay i can move this method below okay this is and this will look fine so basically what we are doing first we are fetching the post which we have to update then we render the data into a form then we again submit that form so again what you can do because now you have all the patterns the title description and like you have the id okay two to twenty two so we need to fetch the id the id is missing here so let me check how it is missing hey everyone uh so i got like the uh it was a small error that name tag has to be mentioned here that name is equal to id so it's now perfectly fine when you submit this you get the id here so now the simply simply what you need to do now it seems like so what you need to do you need to find the post and then add the post dot title is equal to uh params of title and the rate post dot description is equal to parents of description and we need to then save that post post dot save and then we can uh simply our usual thing we render the index page we find all the post and we can we can simply do post dot all okay so now it should work perfectly fine then we have this we have the id title description then we save this then we render everything so let's move to the app let's start everything from scratch let's create an uh now let's create update that we change this to task 40 and change this to task 40 let's update this and here we go it's updated perfectly fine so thank you everyone for watching this tutorial you can also delete things yeah works perfectly fine fine now let's update this and yeah so everything is working fine 30. so this is how we did i'll give you a quick overview first you created the update method to check which post you have to update we rendered the same data update form then we got the values back and then we updated them so thank you everyone for watching this tutorial i hope you liked it thank you everyone today we are going to build a rails authentication app so let's build this so i have run this command rails new rail source app so this would create a rails or app your local machine so the next command you need to type is you need to find cd you need to move inside this rails new app new new auth app and uh like so this is like this is the command rails auth app so you need to define cd rails or app and you can move you have moved in this directory and you need to define code dot dot so this will open the vs code on your local machine so this is fine uh then you can click here and you click in rails terminal and then you can type real server and this would like probably uh this would open the like this like this would be on your local post so then you can copy this link and you can copy this link and then you can open chrome browser and then you can open the chrome browser and it's this url so this is how we have so now the app is running on your browser so this is fine so we need to define few things before we start our application so you can close the server and you can close the server and it would ask you to terminate the job yes so we need to define the rails g controller so we need to define first we need to define very first thing what you need to do you need to move to your gem file and this is your gem file and you need to uncomment this thing so you need to uncomment this and then you need to type so we need decrypt to store the password in a digested form because we are building authentication app and we cannot directly store the uh like like user password in a raw form so we need to like basically uh store it in a digested form okay so then we need to define create a controller rails g controller and we need to find sessions okay so basically this is we need to define rails free controller session so this would create a session controller and in the same way we need to define we need to find a user controller and a user model okay so let's move this session and roller dot rb so this is class session controller and application controller and this is end so this is our accessions controller and in the same way we define rails g controller users and this would create the user's controller so this is fine and we need to also define rails g model user act which has the email unique and a password in a digested form okay okay so this would create a user model in your machine and this is fine and then you need to type rails db migrate so then we have migrated the database so this looks perfectly fine and so this is fine so we would also have the usage controller this is here it is and we would also have the user model okay so so we need to define few things here validates email so we need to validate the email a few things that is presence presence is equal to true and uniqueness uniqueness is equal to true so this is how we do this we need to define validates email presence is going to be true and uniqueness is equal to true and let's open the console rails console and let's run few commands like we are sure that our model is being created or not so we need to define user dot connection so now it's fine so now let's define user and we have got a user ids integer email is string and a password digest is equal to string so basically this means we are storing the password in a string format but in an encrypted way that is a digested form okay so let's move to new file routes.rv and let's create few resources here so we are defining resources because we are telling them that we are using those controller in those routes because we need to define a map particular url to around so for that one we need to do we need to define resources and we need to find users and resources and we need to define sessions okay so this is how we do it and let's define get get method with sign up which says to users as new and let's define this as as sign up so and for this we need to define get login okay this is not needed now right now so we can ignore this and let's this is not needed and we can ignore this and let's move to this and we need to define the def new and let's end this method okay and we should also uh when we create more value the most probably we are going to create depth create and this and def destroy destroy and end and when we move to this use users and we create a file okay something wrong yeah new file and we need to define new dot html dot erb and let's define a page sign up so i hope this is fine and yeah so sign up is the page so let's see the flow first so we have a router rb we say get sign up user slash new and add sign up and in here we define a sign up method new and this has a like default statement of this render new okay so if you want to like have a good overview so this is a default statement it must be rendering so we can skip this as a practice we can skip this and it will definitely render the new dot html dot erp okay so let's run this and i hope the server is not running so let's exit this rails and let's define sign up so we have like so it says rendered user.new.htmlrb with layouts and let's see yeah the signup is there so this is the basic layout so in the same way uh a very quick we can do this we can also create a few things here also def new you can also create depth new end dev create and we can end this method and def destroy so so this is the basic architecture so we are maintaining user model user controller and a session controller for our application so basically these things are needed so this will help us out to like maintain the application so then in the same way we can create few more routes as well so one is like sign up and another is sign in and one is also like login logout so we can maintain those routes and help us so next what we are going to do we are going to create a form here so basically those form is also basically it is going to have like few things uh a registration form basically so we are going to register the user here so it will have a method a basically method which is going to be post okay so this is going to be post method and uh and we will define the action here action is away like it is being empty here so action is there and we need to define something for that okay so i'll catch in the next tutorial thank you for everyone for watching this thank you bye so basically to start the application you need to type rail server and this will type the application on your machine so like previous part we had created a form using a basic form layout using the signup method so let's create the input type for this so for this we can type input is equal to email uh so this is the email and the name is equal to uh we can give a name by any recent name this like let's give this a name email or like let's give this a username okay and let's give the name username and required and this is required so let's get this and so i hope this is fine and we can define our id is equal to username basically ids is needed for the label so for this corresponding let's create a label method so let's create a label table for username and let's create this label let's close this and let's type user name here so this is how it is done and to avoid any like cr csfr token since we are making a process so we need to define percent equal to token underscore tag and this is this okay so this is how we do it in types the good email name is going to the name id and required and this is like table for this is user password so we are creating a user password here and for this we are defining input type is equal to password and we need to define name is equal to user password and id equal to user password okay and this is also required so we keep this as required okay and since we need to define input type is equal to submit value is equal to register let's keep a value of register uh this is fine and we can close the stack so by default when we refresh this page so we need to find something like username and we need to find a password here okay yeah password is required so let's keep this and let's there has a password okay and this is fine okay so let's yeah so let's yeah we have option to sign up that is username and password and let's we have a register button okay so this is fine so let's give this as a sign up page so this is fine now so we have a user password and like so let's create when we submit this form so we need a method where we need to submit this form so let's create this method uh let's create this method uh sorry a route for this so that is post register and when we hit this register so basically we tell them okay uh we define users hash create and we need to define this as as register okay so this is fine he defined as the digital post register we need to find to use this hashtag as registers so when we make a post request so we need to hit this method okay so i have maintained this method so i'll give you to show you a trick or how to view this routes everywhere so move to this local route okay this is your base route app is working this sign up app is working hyper invalid route something like uh any invalid route maybe i type invalid a uh invalid xyz something anything invalid you get this and now you can type register uh you can like you can search from here as well and i'll use this so it says register underscore part which hits on users as great so i can use this copy this i'll copy this register underscore path and let's go to this page and i can type percent equal to this so this works perfectly fine so this would be like this would help you from defining like this works as a constant so it action moves to this row data but these are good to put okay so when you put this this register underscore path it will hit this method because i have told him to move hit this method and then you can simply render json is for this simplicity i am telling it to render json params okay so let's now hit the sign up uh let's uh type a user at mail.com and let's give a dummy password something like very dummy password you can give so one two three four five six okay and type again one two three four five six so let's hit this so when we hit so like never so we have authenticity broken is to this username is equal to this and user password is this and controller this action is great this is fine so what we need to define we need to define email is equal to parents of what parents you are getting here so we are getting a plan for user name let's copy this to avoid any and so it is equal to items of this user password okay and this is fine so we have already like i have shown you like in the previous tutorial so i'll just give you a quick overview yeah so we had created a user right so okay this is not needed i'll show you again exit and we'll type rails console okay so rails console will be open and when i type user dot connection and then i'll type user so this is how we have email and password underscore digest okay so this is we how we create a user so we can define user we can define simply user dot create we need to define user.grade where email is equal to email and password underscore digest equal to password i hope this is fine and then you can simply say response response is equal to this and let's define a success is equal to true and render json response okay so let's hit this request again okay i need to make sure the server is running server is not running so let's start the server so let's hit the request again and this time the user should be created okay so basically i'll show you again once again so password is this user is email.com let's again i'm making the request again let's make a request again okay i'll zoom this and now i'll make so this is the username and user password let's make the request again and i should get a success rule true okay good if the success is true then let me check let me check uh so l rails console okay so i'll do this console and this would be do user dot first okay so now you see the password is being stored in a digested form okay so thank you everyone for watching this tutorial i'll catch you in the next one thank you everyone so we left out with where if we have created a user so instead of sending a json response so what we will do we will create a message here which says uh android message your account is created successfully account is your you can simply give it your account is created okay so successfully so this would be a message to the user and in new dot html rb you can render this message like this so so let's again sign up so let's create on this and just sign up and let's create a new user who use it and we give a simple password okay let's create this and say your account is created successfully if your account is created successfully you should give them a sign up option right so you should give them a sign up option so let's move to write routes or rb so we will do it sign in and we would go to session hash new because now we are instead talking about creating a session sign in and we would put this as sign in okay i hope this is fine and here like if this is a uh like yeah so what you need to do uh you need to define a variable so what you need to do you need to move it and here your account is created successfully and either you can do this success is equal to success is equal to and what you can do you can remove this message not needed and what you can do if if at success you can end this end this tag as well if i did success you can say your account is created and you can end this tag and here you can see hrf you can give anchor tag to this anchor tag you would move them to the login i say click click here login i hope this is fine and now i told you a trick that you can move you can check the routes by randomly typing something here and then you can you can check the path and this is the path sign in path so you should copy this path and you should be able to paste this here so this gives a value sign in underscore path and let's close this okay so i hope this is fine so let's so let's again do a sign up and you do new user three and my uh you should give a simple password one two three four five six and here you can see your account is created click here to log in so when you click on this it might return a error so because this is a like error because you have not defined it and you can move to route.rb and this will be sessions so when you move to this and then it says is missing a template so we will create that okay so we will create a template for that so for that what we are going to do so we need to move here in uh sasha we need to move in the views folder app views sessions and let's create a new file new dot html dot erb okay so let's create a heading so let's create a heading h1 tag let's create this and we need to define h1 sign in okay and in the same way we need to define a form okay and let's define this form okay so input type is equal to okay so this form is like for the significant input is equal to email okay and label is equal to you can keep this as anything because since you have created the user so let's keep this very quick do this very quickly label is equal to my name is equal to email and id is equal to email okay and let's close this label for email so let's create the email uh basically this is our username also so you can comment this and put here and then input it just go to password and you can copy this name is equal to password id is equal to password and we can do table for label for password and we can close this so this is your password now you can do input type is equal to submit value is equal to login okay so value is equal to login so what you need to do let's refresh this page and here you get the sign in right so that's great we get a signin page now what we need to do we need to define a method is go to post action now let's keep this action as empty and now we need to define a post method for for sign up we define a register for sign in we define a login okay post login and let's now we define us sessions hash create now we define this as login okay so most probably we are going to move in sessions controller and we need to define render json params so the simplicity it is then and we have like the apps we have the views uh we have the new dot html and for here we defined person is equal to login underscore r and here we also defined percent equal to token so this is how we define the token and the like html so it is done yeah so let's just define a user at mail.com let's put the password one two three four five six so yeah it's working perfectly fine great so we are able to create the signin page as well now we have to check for the user authentication so next thing what we are going to do so first we will take the user and i'll show you what we are going to do so what we are going to do so what we are going to do we are going to take the email okay and we say items of email so simply see we take the email and password is go to parents of password so this is like we take and now i'll tell you you might also think for the next tutorial what we need to do new you do something like user dot find with this email if it exists if it exists then match for password right match for password else through so this we are going to do something if it exists in match for password as through error and if it matches if it matches create a session okay if it matches then create a system so that is what we are going to achieve in the next tutorial thank you everyone for watching this so let's start our application and let's see where we have ended in the last tutorial so let's create this rail server and let's create this and let's start our server so we were able to create the login page okay so one thing uh so server is already running okay let me check yeah it's running so perfectly fine let's yeah so the server is running the app is running so we have created a login page okay and but we need to check we need to check if this login page already exists or not so for that what we are going to do we are going to do rails console and we need to check uh like we can do since the email is unique so we will type user is equal to user dot find underscore by email equal to email okay so and we say if user if user so if there is if if there is a user let's do a end statement if user and this would use it is like this would mean that if user does exist okay so then we need to match password okay if user dot exist we need to patch password so if you use it and or we can do this way also user so first i'll show you what you need to do this is you this is your user dot first and we need to do if user dot password underscore digest is equal to password so then we can render a json this just for simplicity i'm running a json which says response and let response is equal to log then is equal to so this is just i'm thinking and let's remove this and else if else would be something this which says response logged in is equal to false and we could do this statement here only because we we want this json response to be sent after the file statement so first we will try with user gridmail.com okay and this is how we do it uh because i don't remember the passwords which i created so many passwords that let's create a user first so let's create a dummy at three mail.com and we would say one two three four five six and let's register so it says your account is created directly here to login and say dummy at the ratemail.com the user is created so now it should return for logged in zero to true so it says logins would just put a wrong password one two three four five okay what is false it's an incorrect email and see whether this works or not so we are going in right direction one two three four five six the password is right but the email is wrong so it says logins for the logic is right so it says it says uh instead of response now we are going to basically we are going to render a message so basically which says the rate uh success logged in is equal to false and this is false and we simply render new because we were coming from the new page of the views i'll show you how we move to app views sessions and this was our login page okay and here we say and then we say at the rate if there is logged in equal equal to false okay so we say and then end so we redirect the user to the same page okay and we say you say if at the rate login is going to false then we say either email or password doesn't match i hope this is right so let's create this and this yeah perfectly fine so let's move to our session controller so we say add the logged in go to render new yes okay okay this is like this is and then it's locked in is equal to true okay i created i put this into a long logic block this is fine android object would fall and and and let's do this as true okay so now let's down here treadmill.com one two three four five and it's a login how called and also known neither reader does not so there's an error in this line i'll see so it says render json response else render new or render json response it's fine so email or password doesn't match so either email so either email or password doesn't match so we tell them to log in and if we put the correct email id and password so let's see it says login so uh if this is true so let's maintain a session for it because this is true but let's maintain two session for it okay one thing i wanted to make this we did not add the error handling for users also uh if what i wanted to do like see if this email is already taken then what happens so we did not create this functionality on the user side okay so what we will do if user is equal to user dot find underscore by email is equal to email if user is there then let's end this else let's do the same thing what we did for the login part else if user is already there then let's create this for the success okay and this is fine it's if the user does i i mean this is what you create part okay so don't confuse yourself we are the login part is like done we have the login password and we are maintaining and the password is wrong we are maintaining but if the user if this email is already taken by republican then you need to take advantage success is equal to false okay okay let's name this as a register because this makes more sense and this also make more sense okay and we are going to render so basically we are doing the same thing so let's avoid this and we should render new this is fine and let's move to new dot html rb so if if register this okay if register is equal to and this and else we move to else okay one thing i'll show you okay let's do this one else is this block and we say email already taken okay so this is fine so let's move to this our app sign up yeah now you see see uh i'll show you one thing let's do user dot all and see okay if this is enabled okay this is not enabled so we have see we are taking user drivemail.com see this or maybe we have a dummy address you already taken okay fine one two three four five six let's check with this so yeah it says email already taken so what happens when we move to this page uh without checking in and it says email will be taken this is wrong because we need to avoid this and for that what we will do and at the red register uh if the register is equal to and for this box uh lf okay else let's say the rate register is not equal to nil because if it's nil we don't uh show this message okay so now it's perfectly fine because by default it has a nail value so if it's true your account is created if it's not equal to say then he will if it's nil then don't show anything or okay so this is fine now let's move this and check this with sign up yeah you are already taken let's create a new id user 22 and one two three four by six so created your account is created click here to log in okay perfectly fine so we are moving in right direction so this was the case when we had to add error handling on the page for both sign up and sign in so thank you again for watching bye so what i've done now is i have created a landing.html.erb so this is the landing page of the application so this is the landing page and it says landing page to check login or log out so simply it is the landing page to check login or logout and let's this is the uh this is the feature landing page to check login or logout so let's exit this facebook console and let's clear this so now we need to define in dot shot rb we need to define get log out because now this is the last feature we are building get lockout and then we will test our application to define sessions hash destroy as long so this is session.destroy as the whole so now let's move to session controller okay what happens when we make a session so what happens let's i'll show you okay so one thing i uh like one thing i'll show you one thing uh uh see so what happens when the user authentication is successful so if the user's authentication is successful so we what we do we do session of user id equal to user dot id okay now this is what happens when we see the like we see that the user has successfully logged in so we create a user id and assign that user.id or destroy what we do we do the opposite of this so okay we do the opposite of this that instead of assigning it id we assign it as a nail value okay so this is what we do and this is this happens okay uh yeah then uh uh we like this is we do and uh then we create a helper method and uh application controller dot this is the application controller so we create a help method in this and how do we define this we define a helper method helper underscope method which says current underscore user so basically in most of the rails application we use that access the current user using this and if and define find current underscore user and we define end so session of user id if that is not nil okay if that is not nil then we define current underscore user is equal to correct current control user or user dot find blue dot find session or user id else current underscore user is equal to name right so this is we do it so that exists if session id is exist then we find the current user then either then we do put that current user to net okay so if if in this page we say if and underscore user you can underscore user then we say and we say hello hello your current underscore dot email if it exists then we say this okay else else we need to show user that they are like okay let's first check this we are in session controller then we a transaction is able to use a dot id and then we say render layouts slash landing okay okay uh one thing we all uh like missed in this is uh like uh that is layouts on the landing so one thing i would like to tell you we can also render different layouts uh from here by defining the prefix so if you don't define the prefix then it assumes and we are defining the sessions then it assumes we are in sessions and users and users so if we can define the process for this so let's run the application sign in okay says unexpected error okay yeah because this is uh ruby so yes else and when we end this block like this fine so let's make again let's log in this and let's create so it's it hang landing page to check login or logout hello dummy directmail.com we are perfectly fine so now we on this page we need to create an option to block out if it's if it's if it is signed in okay a hrf and we say log out and for that i told you for if you want to check the confirm the path so what you can do you can simply type this log out and it says logo underscore path perfectly fine so this is logger underscore path and here we go and it says so let's again move to this page okay uh let's do move to sign in okay let's create a different route for this okay let's give it to this it slash blending and let's do two uh users hash landing we will create this and so let's create this as landing okay so let's move to user controller let's create this because we don't need to sign this every time to get into this method define landing and then simply render layouts a out dash landing okay and yeah so yeah yeah that is an error because we need to define this in codes so like that is an error now let's uh check for the landing round yeah this is slash landing so let's move to this route so yeah it still stays uh when we move to the landing page to check login our hello address let's move to logout so when we move to hit the logo button so we need to destroy the session and we already do that nothing and then we say render thing or instead of doing render render again again we can simply use redirect 2 because we have already created the route for that yeah it's perfectly fine we can do redirect redirect underscore to log code underscore i hope this is fine here yeah fine so let's repair this click on logout and here it hits the button and there is a logo because some seems an error with this okay three zero to four okay seem some error with this so let me check the route for this okay i did a mistake uh i had to render to landing paths sorry this was a mistake yeah so we say redirect to landing in move description landing page okay to connect it something seems wrong with the server now it's fine so landing page to check login and log out yeah it is not logged in because last at last you had created join the session so let's create a user from uh like that you assign it www.com and let's sign in with the user it says hello android developer let's do log out and we are logged out so perfectly fine when we are logged out we don't see anything okay so so for that we can create a message if this is the current user then we do this else as we can show else we can show the one we had on the page of the users this one uh hrx i click here to login so this was a better approach to check and yeah it says ending quick click here to log in when we do log in let's login and this one two three four five six log in and it's a hello data and we sell all we go so oh we are out of the session so this is how it worked so thank you everyone for watching this tutorial uh let's do a quick recap what we did so we had a signup page where we had signed let's get a new user new user uh mail.com let's create a password one two three four five six again keep the password same so this email is already taken yeah okay let's take user hundred one two three four five six your account is created so it's perfectly fine uh click here to log in let's create a user 100 let's login with this so landing page to check blogging yeah hello user at the 100ml.com let's click on lockout and we are out of this session click here to log in let's log in back so everything works perfectly fine so thank you everyone for watching this video so if you have like uh we can extend this to application for to some objective so i'll try to uh object this authentication so that you have a better word thank you everyone bye take care
