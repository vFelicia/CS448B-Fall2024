With timestamps:

00:00 - hey guys welcome to the next video on
00:01 - Python thread tutorial for beginners in
00:03 - the last video we have seen how to use
00:05 - thread module in Python now in this
00:08 - video I'm going to show you how to use
00:11 - threading module in Python and I'm going
00:14 - to give you some introduction about
00:16 - threading module how to create threads
00:19 - using threading modules and how to use
00:22 - threading module now threading module is
00:25 - more powerful and it has more higher
00:28 - level support for creating threads in
00:31 - Python so let's see how to use threading
00:35 - module in Python so in order to use
00:38 - threading module first of all we need to
00:40 - import it so I'm going to just import
00:43 - threading module and once threading
00:47 - module is imported we will be able to
00:49 - use threading module the second module
00:52 - which I am going to import here is the
00:54 - time module which we have also seen in
00:56 - the last video because we are going to
00:59 - create the same function and we are
01:02 - going to use this function using the
01:05 - threading module which we have seen in
01:07 - the last video now I'm going to create
01:09 - the same method which I have created in
01:11 - the last video also which is print a box
01:14 - so I'm going to just copy this method in
01:17 - order to save time and then I'm going to
01:21 - just paste it here so now we have our
01:24 - function which we want to call using the
01:26 - threading module and we want to create
01:29 - some threads using this threading module
01:31 - and call this function inside those
01:33 - threads so first of all I'm going to
01:35 - write this condition which is for the
01:39 - main method which is if name is equal to
01:43 - underscore underscore main underscore
01:46 - underscore and under this condition what
01:49 - I'm going to do is I'm going to create
01:51 - two variables let's say first variable
01:54 - name is t1 for thread 1 and then I'm
01:58 - going to call the threading module to
02:00 - create a thread now inside the threading
02:02 - module there is a class called thread
02:04 - which we will use to create threads so
02:08 - just call a thread class here and
02:11 - constructor of this class
02:13 - take several argument when you hover
02:16 - over here inside the parentheses you
02:18 - will see the signature of this thread
02:21 - class so it can take the target it can
02:24 - take the name of the thread and
02:26 - arguments also it can take in the form
02:28 - of tuple and it can also take the
02:31 - keyword argument in the form of
02:33 - dictionary so for our purpose we need to
02:37 - call the function which is print Apoc so
02:40 - we need to provide a target so in order
02:43 - to provide a target we are going to just
02:45 - write target equals and the name of the
02:50 - function so the name of the function is
02:52 - print epoch which we are going to call
02:55 - and this you need to give without the
02:59 - parentheses so just remove the
03:01 - parentheses in front of this method when
03:04 - you use it as the argument in front of
03:07 - target the second argument which we want
03:10 - to give here is the arguments which this
03:13 - function takes so this argument we can
03:15 - give using the odds parameter so I am
03:19 - going to just write as equals and then
03:23 - in the form of couple I'm going to give
03:25 - the name of the thread and that delay to
03:28 - the thread so let's give the name to the
03:31 - thread let's say this is thread 1 and
03:35 - the delay which we want to give here is
03:37 - 1 so this statement is going to create
03:39 - one thread and let me create one more
03:42 - thread in order to create multiple
03:44 - threads and instead of T 1 I'm going to
03:47 - change the name to T 2 so we have T 1
03:50 - variable and T 2 variable and in the
03:52 - odds I'm going to change the name of the
03:55 - thread which is thread 2 and let's say I
03:58 - want to give this delay of 2 seconds to
04:01 - the function using the thread 2 so now
04:04 - we have two variables T 1 and T 2 which
04:08 - is an instance of that thread class now
04:11 - using T 1 and T 2 we can call a method
04:15 - called start in order to start the
04:18 - thread so I'm going to just call T 1
04:20 - variable and then call a method called
04:23 - start which is going to start the thread
04:26 - T
04:27 - one similarly I'm going to call the
04:30 - instance t2 and I'm going to call the
04:32 - method start on this instance t2 also so
04:36 - start method we use to start that
04:40 - threads now if you remember in the last
04:42 - video when we have created the thread
04:45 - using the thread module we have given
04:48 - this condition which is the infinite
04:50 - loop and this infinite loop we have used
04:53 - to wait until the execution of thread is
04:56 - completed now in the threading module
04:59 - which is the new module this facility is
05:03 - available using a method called join so
05:07 - on T one instance I can call a method
05:10 - called join and on T two instance also I
05:14 - can call a method called join and this
05:18 - join method waits until thread 1 and
05:21 - thread 2 is completed its execution and
05:26 - then at the end we can print something
05:28 - let's say we are going to print that
05:30 - everything is done so I'm going to print
05:33 - done here so let's rewind what we have
05:36 - done inside this script we have an
05:39 - imported threading module and time
05:41 - module and then we have created the
05:44 - function which we want to call using
05:46 - that threads now in order to create the
05:49 - thread using threading module we need to
05:52 - call the class called thread inside the
05:56 - threading module now this class
05:58 - constructor takes several arguments and
06:01 - right now we have given two arguments to
06:04 - this thread constructor which is the
06:07 - target which takes the name of the
06:09 - function which we want to execute using
06:12 - this thread and second argument we have
06:14 - given here is the args which is the
06:17 - argument which we want to give to the
06:20 - function which we want to execute same
06:22 - we have done for the thread two also now
06:25 - the start method on these instances is
06:28 - going to start the thread for T 1 and T
06:31 - 2 and the join method we have used to
06:34 - wait until thread 1 and thread 2 is
06:37 - completed their execution so let's run
06:41 - the script and let's see what happens so
06:43 - I'm going to right click and then run
06:46 - the threading example Python script and
06:49 - you can see straight away that this
06:52 - output is printed here similar output we
06:56 - have seen in the case of thread module
06:59 - also so in this output thread one is
07:02 - printed and the a talk time is printed
07:03 - and then thread two is printed
07:07 - printed using the thread two so this
07:10 - output is printed using the thread one
07:12 - and thread two output is printed using
07:15 - the thread two and because we have given
07:17 - different intervals for a thread one and
07:20 - try to that's why we can see that thread
07:23 - one is printed and then thread two and
07:25 - then thread one is printed two times and
07:28 - then thread two is printed and then
07:30 - thread one is printed once again two
07:33 - times and then rest of the thread two
07:36 - outputs are printed now let's take one
07:40 - more example and what we are going to do
07:42 - if this example is we are going to
07:44 - create two different functions and we
07:46 - are going to try to call these two
07:48 - functions using these two threads so the
07:51 - first function I'm going to create here
07:52 - is the print underscore a cube which is
07:57 - going to print the value of cube of the
08:00 - number which we will provide as the
08:02 - argument to this function so I'm going
08:05 - to just write print here and then using
08:09 - this print statement I'm going to print
08:11 - the value of cube of the number so here
08:14 - I'm going to just write cube and then
08:17 - I'm going to provide these curly
08:19 - brackets and then I'm going to call the
08:22 - format method after this string so let's
08:25 - call the format method which we use in
08:29 - order to format a string now inside the
08:32 - string we want the cube of the number so
08:36 - we will just multiply this number three
08:38 - times so num Astrix num Asterix num
08:42 - which is going to print the cube of the
08:45 - number once again let me just copy this
08:50 - function and then I'm going to create
08:52 - one more function and
08:54 - time I'm going to name my function as
08:56 - Prince square so I'm going to just write
08:59 - print square here and then I'm going to
09:02 - just write square is equal to and here
09:06 - I'm going to just print the square of
09:07 - the number now in this statement where
09:10 - we have created t1 and t2 instances the
09:13 - target we can change which is the name
09:16 - of the function so now our target is
09:19 - print cube and print square without the
09:23 - parentheses we need to give the name of
09:26 - this function so print cube and print
09:29 - Square and arguments have also changed
09:32 - so earlier print
09:34 - Apoc used to take two argument and now
09:36 - we just want to give one argument to the
09:39 - function and let's say it's 2 and also
09:42 - the print queue function takes 1
09:45 - argument and let's say it's 2 also now
09:48 - let's run this script and let's see what
09:50 - happens so you will see that there is an
09:54 - exception here which is some kind of a
09:57 - weird exception which says that
10:00 - exception in thread 2 and this exception
10:05 - is this print square argument afters
10:09 - Asterix must be iterative all right so
10:13 - the problem here is we need to give a
10:16 - comma here which tells this parenthesis
10:21 - that this is a couple value ok that's
10:24 - why it's giving the exception so if your
10:27 - function takes 1 argument then you need
10:29 - to give the value of that argument and
10:31 - then give the comma so that it's able to
10:35 - understand that it's a tuple and then
10:37 - once again when you run this script you
10:40 - will see the value of cube is printed
10:43 - which is 8 and square is printed which
10:46 - is 4 so this cube value is printed using
10:49 - thread 1 and square value is printed
10:52 - using the threaded 2 so in this way you
10:55 - can also call a multiple function using
10:59 - multiple thread instances using
11:01 - threading module so this was a brief
11:04 - introduction about reading module there
11:07 - is
11:07 - much more to learn about threading
11:09 - module which we will learn in the future
11:12 - videos so stay tuned and please keep
11:15 - watching these videos and I will see you
11:18 - in the next video

Cleaned transcript:

hey guys welcome to the next video on Python thread tutorial for beginners in the last video we have seen how to use thread module in Python now in this video I'm going to show you how to use threading module in Python and I'm going to give you some introduction about threading module how to create threads using threading modules and how to use threading module now threading module is more powerful and it has more higher level support for creating threads in Python so let's see how to use threading module in Python so in order to use threading module first of all we need to import it so I'm going to just import threading module and once threading module is imported we will be able to use threading module the second module which I am going to import here is the time module which we have also seen in the last video because we are going to create the same function and we are going to use this function using the threading module which we have seen in the last video now I'm going to create the same method which I have created in the last video also which is print a box so I'm going to just copy this method in order to save time and then I'm going to just paste it here so now we have our function which we want to call using the threading module and we want to create some threads using this threading module and call this function inside those threads so first of all I'm going to write this condition which is for the main method which is if name is equal to underscore underscore main underscore underscore and under this condition what I'm going to do is I'm going to create two variables let's say first variable name is t1 for thread 1 and then I'm going to call the threading module to create a thread now inside the threading module there is a class called thread which we will use to create threads so just call a thread class here and constructor of this class take several argument when you hover over here inside the parentheses you will see the signature of this thread class so it can take the target it can take the name of the thread and arguments also it can take in the form of tuple and it can also take the keyword argument in the form of dictionary so for our purpose we need to call the function which is print Apoc so we need to provide a target so in order to provide a target we are going to just write target equals and the name of the function so the name of the function is print epoch which we are going to call and this you need to give without the parentheses so just remove the parentheses in front of this method when you use it as the argument in front of target the second argument which we want to give here is the arguments which this function takes so this argument we can give using the odds parameter so I am going to just write as equals and then in the form of couple I'm going to give the name of the thread and that delay to the thread so let's give the name to the thread let's say this is thread 1 and the delay which we want to give here is 1 so this statement is going to create one thread and let me create one more thread in order to create multiple threads and instead of T 1 I'm going to change the name to T 2 so we have T 1 variable and T 2 variable and in the odds I'm going to change the name of the thread which is thread 2 and let's say I want to give this delay of 2 seconds to the function using the thread 2 so now we have two variables T 1 and T 2 which is an instance of that thread class now using T 1 and T 2 we can call a method called start in order to start the thread so I'm going to just call T 1 variable and then call a method called start which is going to start the thread T one similarly I'm going to call the instance t2 and I'm going to call the method start on this instance t2 also so start method we use to start that threads now if you remember in the last video when we have created the thread using the thread module we have given this condition which is the infinite loop and this infinite loop we have used to wait until the execution of thread is completed now in the threading module which is the new module this facility is available using a method called join so on T one instance I can call a method called join and on T two instance also I can call a method called join and this join method waits until thread 1 and thread 2 is completed its execution and then at the end we can print something let's say we are going to print that everything is done so I'm going to print done here so let's rewind what we have done inside this script we have an imported threading module and time module and then we have created the function which we want to call using that threads now in order to create the thread using threading module we need to call the class called thread inside the threading module now this class constructor takes several arguments and right now we have given two arguments to this thread constructor which is the target which takes the name of the function which we want to execute using this thread and second argument we have given here is the args which is the argument which we want to give to the function which we want to execute same we have done for the thread two also now the start method on these instances is going to start the thread for T 1 and T 2 and the join method we have used to wait until thread 1 and thread 2 is completed their execution so let's run the script and let's see what happens so I'm going to right click and then run the threading example Python script and you can see straight away that this output is printed here similar output we have seen in the case of thread module also so in this output thread one is printed and the a talk time is printed and then thread two is printed printed using the thread two so this output is printed using the thread one and thread two output is printed using the thread two and because we have given different intervals for a thread one and try to that's why we can see that thread one is printed and then thread two and then thread one is printed two times and then thread two is printed and then thread one is printed once again two times and then rest of the thread two outputs are printed now let's take one more example and what we are going to do if this example is we are going to create two different functions and we are going to try to call these two functions using these two threads so the first function I'm going to create here is the print underscore a cube which is going to print the value of cube of the number which we will provide as the argument to this function so I'm going to just write print here and then using this print statement I'm going to print the value of cube of the number so here I'm going to just write cube and then I'm going to provide these curly brackets and then I'm going to call the format method after this string so let's call the format method which we use in order to format a string now inside the string we want the cube of the number so we will just multiply this number three times so num Astrix num Asterix num which is going to print the cube of the number once again let me just copy this function and then I'm going to create one more function and time I'm going to name my function as Prince square so I'm going to just write print square here and then I'm going to just write square is equal to and here I'm going to just print the square of the number now in this statement where we have created t1 and t2 instances the target we can change which is the name of the function so now our target is print cube and print square without the parentheses we need to give the name of this function so print cube and print Square and arguments have also changed so earlier print Apoc used to take two argument and now we just want to give one argument to the function and let's say it's 2 and also the print queue function takes 1 argument and let's say it's 2 also now let's run this script and let's see what happens so you will see that there is an exception here which is some kind of a weird exception which says that exception in thread 2 and this exception is this print square argument afters Asterix must be iterative all right so the problem here is we need to give a comma here which tells this parenthesis that this is a couple value ok that's why it's giving the exception so if your function takes 1 argument then you need to give the value of that argument and then give the comma so that it's able to understand that it's a tuple and then once again when you run this script you will see the value of cube is printed which is 8 and square is printed which is 4 so this cube value is printed using thread 1 and square value is printed using the threaded 2 so in this way you can also call a multiple function using multiple thread instances using threading module so this was a brief introduction about reading module there is much more to learn about threading module which we will learn in the future videos so stay tuned and please keep watching these videos and I will see you in the next video
