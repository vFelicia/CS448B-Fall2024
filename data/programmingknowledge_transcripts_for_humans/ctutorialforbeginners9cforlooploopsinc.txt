With timestamps:

00:00 - hey guys welcome to programming
00:01 - knowledge in this video we'll be looking
00:03 - at loops the water loops let's take an
00:06 - example so here I have sample program
00:09 - this does nothing but just taking name
00:12 - and age of a person and then print it
00:13 - onto the console so what if I ask you to
00:16 - take the data of ten people so what you
00:19 - will do is you either execute it ten
00:21 - times or you just copy the whole thing
00:25 - and then paste it ten times and just
00:27 - change the name like they name one name
00:29 - to name three and so on so that those
00:32 - are two ways through what happens when
00:35 - the user decides how many number of
00:37 - times you need to ask him so what is in
00:40 - the run time I'm the user and I and I
00:44 - tell you that I want to store the data
00:46 - of let's say 100 people and you just
00:49 - wrote the program for 10 people so at
00:51 - the time your program fails right so to
00:54 - counter such type of situations and the
00:57 - counter such redundant course you you
00:59 - are not doing anything practically
01:01 - useful right you are just copying and
01:04 - pasting the whole code again and again
01:06 - to counter those type of limitations we
01:09 - have something called loops so today we
01:11 - are going to look at four loops so for
01:15 - loops work like a counter based loop so
01:19 - you have a counter your starting value
01:21 - and then you have an ending value so the
01:23 - loop goes from the starting value to the
01:25 - ending value that's all for loop works
01:27 - so the syntax is you write four and then
01:29 - you have a starting value of a counter
01:31 - and then you put a semicolon and in
01:36 - between you put a condition so this
01:38 - condition is actually the loop condition
01:41 - so what happens is the counter is
01:45 - actually checked with a condition before
01:47 - going ahead so for every time the
01:50 - counter is compared with some value so
01:55 - that it stays true so this condition
01:58 - should stay true for the whole loop to
02:01 - execute if it fails the loop is going to
02:03 - break and then the control goes over to
02:06 - the next statement we south of the loop
02:07 - so for the loop to execute this
02:09 - condition it needs to be true and
02:12 - where you grow this starting the day you
02:14 - cannot stay or their rain if you just
02:17 - put the starting condition in the - this
02:19 - is also a for loop only but what happens
02:21 - is there is no growth condition right so
02:24 - the starting value stays the same and
02:26 - this condition also is always true so
02:28 - this loop will be going on forever so
02:31 - that type of loop is called an infinite
02:34 - loop so the easiest way to create an
02:36 - infinite loop is you just put two
02:37 - semicolons this becomes an infinite loop
02:39 - so because there is no starting value
02:41 - there is no condition so this becomes
02:43 - same value for these you just define
02:45 - some value over here so this makes it as
02:50 - an infinite loop so infinite loops are
02:53 - banned you don't want your program to
02:55 - keep executing the same set of
02:58 - statements again and again and again the
03:00 - user gets bored right so you want to end
03:02 - it after certain number of times so what
03:06 - you do is you put a counter and then you
03:09 - put a condition and you put an increment
03:12 - value so you increment the counter or
03:14 - you basically increase the value of the
03:18 - counter so that at some point this
03:20 - condition becomes false and the loop
03:23 - breaks so that's what you're going to do
03:25 - and it may I test my for loop over here
03:27 - so what we're going to do is fall and
03:29 - then for the counter variable I am going
03:32 - to in stresses inside this so there is
03:35 - something called a scope so what happens
03:37 - is I can even do like this also I can
03:39 - put an eye over here and I put I equal
03:41 - to zero or something like that that also
03:44 - works but what happens is this
03:48 - particular I will be used in the whole
03:50 - program I mean in the whole scope of the
03:53 - main so we'll talk about scope in a
03:55 - separate video for now it is best to use
03:59 - counters inside the loops itself because
04:02 - once the loop end the counter gets out
04:04 - of the scope and it is deleted
04:06 - automatically from the memory so it's
04:08 - best to use counters as a local variable
04:11 - we will talk about what are local
04:13 - variables global variables when you are
04:15 - talking about we will definitely do that
04:17 - in the video so for now I just want to
04:20 - write for I equal to 0 so that is the
04:23 - starting value and I want
04:24 - got it ten times right so for how for
04:27 - ten times I am going to check so let me
04:31 - start from one that becomes easier many
04:33 - times you will be starting your counter
04:36 - from zero there's a reason for that that
04:38 - we will understand when we are dealing
04:40 - with aureus or something
04:42 - generally computers counting start from
04:44 - zero so for now we will start from one
04:48 - and then suppose we want to go till ten
04:51 - when will the condition fail when we go
04:55 - for it number we are growing this number
04:57 - right so let me not write the condition
04:59 - right now I will just put the growth
05:01 - rate so I equal to one so I will just do
05:03 - and I plus place I talked about this
05:06 - increment operator right so what this
05:08 - does is it just increments the value of
05:10 - i from by one unit so if it is 1 it
05:15 - becomes 2 and then it becomes 3 and so
05:17 - on so now this I will go on increment it
05:20 - will go to the range of the integer that
05:23 - is some 2.32 something like that and
05:25 - then it again cycles back it again goes
05:28 - to minus 2 power something so this loop
05:31 - won't end at all because there is no cut
05:33 - ending condition for this so to end this
05:36 - loop I want to execute it 10 times so
05:38 - that condition will fail only if I
05:41 - becomes greater than 10 so till the
05:45 - value of I is less than or equal to 10
05:48 - execute this loop once it is greater
05:50 - just make out of it so here you put a
05:54 - brace this braces I said to this signify
05:57 - a block of commands so this block
06:00 - represents the for block inside this
06:02 - whatever you write is going to be
06:04 - executed this many number of tension
06:06 - depends on this condition in the set of
06:07 - conditions so here instead of writing
06:10 - all this I am just going to put the
06:12 - number itself so let's just put an eye
06:15 - over there because we don't want the
06:17 - whole set of statements getting confused
06:19 - so let's just put I over here and then I
06:22 - will just put a new line so ended and no
06:25 - semicolon
06:26 - so let's now execute this f9 so here if
06:29 - you see you have all the numbers from 1
06:31 - to 10 so that is because of this so what
06:35 - if I put less than 10 less than
06:38 - when it goes to ten it's going to break
06:40 - right so now you know the output it's
06:43 - going to come till nine so f 9 so here
06:45 - you have numbers from 1 to 9 what
06:50 - happens if I remove this condition as I
06:53 - told you we'll be going into an infinite
06:55 - loop so what it feels like it it feels
06:57 - like something like this you can see
06:59 - it's just going on increasing it went to
07:01 - 4,000 5,000 6,000 it won't stop it's
07:04 - just going on just printing the numbers
07:07 - that's because I don't have a stopping
07:09 - condition it doesn't know where to stop
07:10 - it's just going on
07:12 - it goes up to that whatever that value
07:14 - is it's to go into 10 power 9 or
07:16 - something and then it's even so you're
07:19 - going to cycle back and this process
07:21 - will continue it's never going to stop
07:23 - so to stop such a loop you can either
07:25 - die click close this or press control-c
07:27 - it's going to stop but this song use for
07:29 - loop and C++ there are pretty adult type
07:33 - of you said yes as well so instead of
07:36 - putting the counter here as I told you
07:38 - you can put it over here so if I equal
07:41 - to 0 and then here I will just put a
07:43 - semicolon and then I'll just put the
07:45 - condition over here and then I plus plus
07:47 - what this will do is it is automatically
07:50 - understood that I'm using I asked my
07:52 - controller and once it goes up to 10
07:54 - it's going to stop so it's just going to
07:56 - give me the same output is going to give
07:58 - me 1 to 10 and what if I you cannot
08:02 - remove this condition because once you
08:04 - remove this condition the loop is going
08:07 - to be infinite and one other thing you
08:10 - can do is you can put this thing inside
08:14 - here so this also does the same thing
08:17 - only thing is that this statement
08:19 - becomes this statement of the loop these
08:22 - statements are executed in an order so
08:26 - what happens is first this statement is
08:28 - executed let me number them down so
08:29 - first this statement is executed then
08:32 - this statement is executed so all these
08:35 - statements
08:36 - whatever is inside the block then this
08:38 - statement is executed let me number it
08:40 - as 3 and then it is checked over here so
08:43 - this check is performed at the last so
08:46 - once if it is true it is going to again
08:48 - go there and again this condition
08:51 - this statement will execute then this
08:53 - check will happen and then again if it
08:55 - is true this loop will continue that's
08:58 - how it goes
08:59 - and the other thing you can do is you
09:01 - can actually omit the condition also
09:03 - there is a way to actually stop the loop
09:05 - without the condition also what you do
09:07 - is you just put two blank semicolons and
09:10 - then to stop I will write if that
09:15 - particular I is greater than or equal to
09:18 - ten so all sorry greater than ten
09:21 - because once it is greater than ten I
09:23 - mean once the eye goes to the value of
09:25 - Leven the loop should stop right so what
09:28 - you do is you just break remember this
09:30 - break we use in switch case statements
09:32 - that's the same break this is actually a
09:34 - jump statement so this is how it is used
09:37 - for breaking out of an infinite loop for
09:39 - braiding breaking out of a loop at a
09:41 - particular point of time so we will be
09:43 - talking about these jump statements in
09:46 - our next video so this is how break
09:49 - works you get you also have continue so
09:52 - that will be talking about in the next
09:54 - video and now I will just increment the
09:57 - value so here this is the same exact
10:00 - loop so if we just execute it you will
10:02 - be getting output so here you have one
10:04 - to ten numbers so here see because I
10:06 - have zero over here well exchange it to
10:09 - one here you have numbers from 1 to 11
10:12 - now why did this happen that's because I
10:15 - checked after printing this so that's a
10:17 - logical mistake that's not the fault of
10:20 - the loop I just forgot to put it before
10:23 - printing it so once it goes to the value
10:26 - of love and it should break right so if
10:28 - it is less than sorry if it is less than
10:31 - or equal to ten then only I should print
10:33 - so first I need to check if it is not
10:35 - greater than ten if it is less than or
10:37 - equal to ten then underneath the print
10:39 - so this loop will exhibit a expected so
10:42 - this is how you use for loops in the
10:44 - next video we will be talking about
10:46 - while loop till then happy coding

Cleaned transcript:

hey guys welcome to programming knowledge in this video we'll be looking at loops the water loops let's take an example so here I have sample program this does nothing but just taking name and age of a person and then print it onto the console so what if I ask you to take the data of ten people so what you will do is you either execute it ten times or you just copy the whole thing and then paste it ten times and just change the name like they name one name to name three and so on so that those are two ways through what happens when the user decides how many number of times you need to ask him so what is in the run time I'm the user and I and I tell you that I want to store the data of let's say 100 people and you just wrote the program for 10 people so at the time your program fails right so to counter such type of situations and the counter such redundant course you you are not doing anything practically useful right you are just copying and pasting the whole code again and again to counter those type of limitations we have something called loops so today we are going to look at four loops so for loops work like a counter based loop so you have a counter your starting value and then you have an ending value so the loop goes from the starting value to the ending value that's all for loop works so the syntax is you write four and then you have a starting value of a counter and then you put a semicolon and in between you put a condition so this condition is actually the loop condition so what happens is the counter is actually checked with a condition before going ahead so for every time the counter is compared with some value so that it stays true so this condition should stay true for the whole loop to execute if it fails the loop is going to break and then the control goes over to the next statement we south of the loop so for the loop to execute this condition it needs to be true and where you grow this starting the day you cannot stay or their rain if you just put the starting condition in the this is also a for loop only but what happens is there is no growth condition right so the starting value stays the same and this condition also is always true so this loop will be going on forever so that type of loop is called an infinite loop so the easiest way to create an infinite loop is you just put two semicolons this becomes an infinite loop so because there is no starting value there is no condition so this becomes same value for these you just define some value over here so this makes it as an infinite loop so infinite loops are banned you don't want your program to keep executing the same set of statements again and again and again the user gets bored right so you want to end it after certain number of times so what you do is you put a counter and then you put a condition and you put an increment value so you increment the counter or you basically increase the value of the counter so that at some point this condition becomes false and the loop breaks so that's what you're going to do and it may I test my for loop over here so what we're going to do is fall and then for the counter variable I am going to in stresses inside this so there is something called a scope so what happens is I can even do like this also I can put an eye over here and I put I equal to zero or something like that that also works but what happens is this particular I will be used in the whole program I mean in the whole scope of the main so we'll talk about scope in a separate video for now it is best to use counters inside the loops itself because once the loop end the counter gets out of the scope and it is deleted automatically from the memory so it's best to use counters as a local variable we will talk about what are local variables global variables when you are talking about we will definitely do that in the video so for now I just want to write for I equal to 0 so that is the starting value and I want got it ten times right so for how for ten times I am going to check so let me start from one that becomes easier many times you will be starting your counter from zero there's a reason for that that we will understand when we are dealing with aureus or something generally computers counting start from zero so for now we will start from one and then suppose we want to go till ten when will the condition fail when we go for it number we are growing this number right so let me not write the condition right now I will just put the growth rate so I equal to one so I will just do and I plus place I talked about this increment operator right so what this does is it just increments the value of i from by one unit so if it is 1 it becomes 2 and then it becomes 3 and so on so now this I will go on increment it will go to the range of the integer that is some 2.32 something like that and then it again cycles back it again goes to minus 2 power something so this loop won't end at all because there is no cut ending condition for this so to end this loop I want to execute it 10 times so that condition will fail only if I becomes greater than 10 so till the value of I is less than or equal to 10 execute this loop once it is greater just make out of it so here you put a brace this braces I said to this signify a block of commands so this block represents the for block inside this whatever you write is going to be executed this many number of tension depends on this condition in the set of conditions so here instead of writing all this I am just going to put the number itself so let's just put an eye over there because we don't want the whole set of statements getting confused so let's just put I over here and then I will just put a new line so ended and no semicolon so let's now execute this f9 so here if you see you have all the numbers from 1 to 10 so that is because of this so what if I put less than 10 less than when it goes to ten it's going to break right so now you know the output it's going to come till nine so f 9 so here you have numbers from 1 to 9 what happens if I remove this condition as I told you we'll be going into an infinite loop so what it feels like it it feels like something like this you can see it's just going on increasing it went to 4,000 5,000 6,000 it won't stop it's just going on just printing the numbers that's because I don't have a stopping condition it doesn't know where to stop it's just going on it goes up to that whatever that value is it's to go into 10 power 9 or something and then it's even so you're going to cycle back and this process will continue it's never going to stop so to stop such a loop you can either die click close this or press controlc it's going to stop but this song use for loop and C++ there are pretty adult type of you said yes as well so instead of putting the counter here as I told you you can put it over here so if I equal to 0 and then here I will just put a semicolon and then I'll just put the condition over here and then I plus plus what this will do is it is automatically understood that I'm using I asked my controller and once it goes up to 10 it's going to stop so it's just going to give me the same output is going to give me 1 to 10 and what if I you cannot remove this condition because once you remove this condition the loop is going to be infinite and one other thing you can do is you can put this thing inside here so this also does the same thing only thing is that this statement becomes this statement of the loop these statements are executed in an order so what happens is first this statement is executed let me number them down so first this statement is executed then this statement is executed so all these statements whatever is inside the block then this statement is executed let me number it as 3 and then it is checked over here so this check is performed at the last so once if it is true it is going to again go there and again this condition this statement will execute then this check will happen and then again if it is true this loop will continue that's how it goes and the other thing you can do is you can actually omit the condition also there is a way to actually stop the loop without the condition also what you do is you just put two blank semicolons and then to stop I will write if that particular I is greater than or equal to ten so all sorry greater than ten because once it is greater than ten I mean once the eye goes to the value of Leven the loop should stop right so what you do is you just break remember this break we use in switch case statements that's the same break this is actually a jump statement so this is how it is used for breaking out of an infinite loop for braiding breaking out of a loop at a particular point of time so we will be talking about these jump statements in our next video so this is how break works you get you also have continue so that will be talking about in the next video and now I will just increment the value so here this is the same exact loop so if we just execute it you will be getting output so here you have one to ten numbers so here see because I have zero over here well exchange it to one here you have numbers from 1 to 11 now why did this happen that's because I checked after printing this so that's a logical mistake that's not the fault of the loop I just forgot to put it before printing it so once it goes to the value of love and it should break right so if it is less than sorry if it is less than or equal to ten then only I should print so first I need to check if it is not greater than ten if it is less than or equal to ten then underneath the print so this loop will exhibit a expected so this is how you use for loops in the next video we will be talking about while loop till then happy coding
