With timestamps:

00:03 - hey everyone today we're gonna talk
00:05 - about another General function of a
00:07 - character in a video game if you have a
00:09 - player in the video game you might need
00:11 - to add the jump function you might need
00:12 - your player to jump so that's what we
00:15 - are going to program today let me
00:16 - discuss first what we will do in the
00:18 - program we will have this rectangle made
00:20 - by the draw module then we would use the
00:22 - key module to move the rectangle up down
00:25 - left and right and we will have one more
00:27 - key that we would use to jump ladaki B
00:31 - spacebar so let's code all this
00:33 - I'll import Pi game I'll write and pour
00:36 - it by game
00:38 - I'll initialize it
00:42 - then I'll set up the screen I'll write
00:44 - screen equals spygame dot display dot
00:47 - set mode
00:48 - and the screen size is 500 comma 500
00:51 - I'll given the caption I'll write Pi
00:54 - game dot display dot set caption
00:57 - and let the caption be jump
01:01 - then I'll do my while loop I'll write
01:03 - while true
01:05 - for events
01:07 - in pie game dot event dot get
01:12 - if events
01:14 - DOT type equals spygame dot quit then
01:18 - I'll call the quit function by pi game
01:21 - and I'll quit
01:23 - I will also set up my screen
01:26 - with some color right screen dot fill
01:30 - this is a lighter shade of green
01:34 - and then I'll update this I'll write
01:36 - 5game.display.update
01:39 - and I'm done with the basic frame
01:41 - structure
01:43 - now I would need to set up the basic
01:46 - variables that I would use in the
01:47 - program so one would be the size height
01:52 - width and the initial position of the
01:55 - rectangle I would move around so you can
01:58 - use the right class or you can
02:00 - initialize the parameters
02:02 - just by taking variables
02:05 - and so I've used the right class I'll
02:07 - write my rect
02:09 - equals spygame Dot rect
02:14 - let the initial position be 200 comma
02:17 - 200
02:19 - and the size the width V10 and height
02:22 - B20 you can even take a larger rectangle
02:26 - then I'll do I'll have the speed
02:29 - variable
02:30 - let it be five
02:32 - the amount of distance the rectangle
02:35 - travels at once
02:37 - and I'll have this jump variable which
02:39 - would be a Boolean
02:41 - I'll set it up to false so that I can
02:43 - know when the object has to jump or not
02:45 - you'll get the use of it later in the
02:48 - code
02:49 - then you have this jumpsuit variable
02:52 - which is equal to 10 I'll put this equal
02:54 - to 10 this is the jump speed amount of
02:57 - distance a travel travels at once when
03:00 - you jump or you will click the space bar
03:03 - so we will use this later in the code
03:06 - now inside this while loop
03:09 - I will Define the movement of the
03:12 - rectangle drawn I'll write keys
03:16 - equals spygame dot key dot get pressed
03:22 - so here's the Boolean sequence as we
03:26 - have discussed a lot of times by now it
03:29 - stores the states of the keys on the
03:31 - keyboard as true or false if the key is
03:34 - pressed its state is true now
03:36 - accordingly I will check in which
03:38 - direction the object should move this is
03:40 - exactly the same thing as we did uh in
03:43 - moving an object so try to write this
03:45 - piece of code yourself it would help you
03:47 - practice
03:48 - I'll check for uh the left Arrow key if
03:51 - the left Arrow key is pressed I'll write
03:52 - if
03:55 - keys
03:57 - in square brackets by game dot k left so
04:02 - this is how we access the state of the
04:04 - left Arrow key and
04:07 - my underscore rec.x so this is the x
04:10 - coordinate of my rectangle the object is
04:14 - greater than zero then I will decrease
04:17 - the x coordinate of the rectangles by
04:20 - speed units so I'll write my rect
04:24 - dot X
04:26 - I have access to x coordinate minus
04:29 - equals speed
04:31 - okay I hope you remember if you need to
04:34 - go towards left side then we decrease
04:36 - the exponent now for the right arrow key
04:40 - I'll write if
04:42 - keys
04:44 - pygame dot k right I have accessed the
04:47 - writer okay and my rectangle dot X is
04:52 - less than 500 minus direct dot width
04:56 - DOTA blue would access your width
04:58 - this is just for keeping the rectangle
05:01 - complete rectangle within the boundaries
05:03 - I will increase the x coordinate by
05:06 - speed units so I'll write my erect
05:09 - dot X plus equals
05:12 - speed
05:14 - fine
05:16 - now check for the up key
05:19 - so I'll write F if Keys Pi game Dot K
05:25 - underscore up
05:28 - is
05:31 - greater than zero
05:34 - I'll access the y coordinate now since I
05:36 - am talking about vertical motion
05:39 - I'll write my erect dot y
05:42 - minus equals speed okay
05:46 - this is the normal motion of the
05:49 - rectangle okay I also need to talk about
05:51 - the down key
05:52 - if Keys Pi came dot k down
05:57 - and my react dot y the y coordinate is
06:00 - less than 500 minus my red dot h
06:04 - since we are talking about the vertical
06:06 - motion I have accessed the height not
06:08 - the width here
06:10 - my rec.y plus equal speed since we are
06:14 - moving downwards okay
06:16 - okay fine
06:19 - so this was something we had already
06:21 - done but now we'll move on to the jump
06:24 - function part
06:26 - so I'll write if jump equals false I'll
06:29 - check if jump is equals to false this is
06:32 - the initial condition right now and then
06:35 - I'll check if keys and basically I have
06:38 - pressed the space bar I'll write if Keys
06:41 - Pi Kim dot k underscore space I'll
06:44 - access this state of the space bar
06:47 - if it has been pressed I'll make jump
06:50 - equals to true now okay I'll reassign
06:53 - its value
06:54 - so if you actually analyze what would
06:56 - happen when the rectangle jumps it would
06:59 - cover a lot of distance vertically above
07:02 - more than it normally covers when we
07:04 - press an arrow key
07:06 - so I'll put this in the else condition
07:09 - let me write it first if jump C is
07:12 - greater than equal to minus 10
07:15 - I'll check if the object is back at this
07:18 - place
07:19 - my rect.y
07:22 - minus equals jump C
07:25 - into absolute jump C into 0.5
07:31 - jumps C minus equals 1.
07:35 - so let me explain now uh you should get
07:38 - that if the rectangle is jumping we will
07:40 - decrease the y coordinate just like the
07:42 - up Arrow key but by a larger value so
07:46 - that value is product of jump C into
07:49 - absolute jump C and 0.5 and after each
07:52 - decrement of y coordinate I will
07:55 - recommend the jump C by 1.
07:57 - jumpstick keeps the count how many times
08:00 - the there would be this kind of y
08:03 - coordinate decrement now you can think
08:05 - once the jump C value decreases and
08:08 - reaches zero you need the wreck to come
08:10 - back to its original position
08:13 - but for that we will increment the same
08:16 - that you decremented to the y coordinate
08:18 - so here is the role of this absolute
08:20 - function since jump C is negative if you
08:24 - don't use the absolute function you will
08:26 - end up decrementing more and the
08:28 - rectangle will not come back to its
08:29 - original position so all this will
08:32 - basically run a loop till the jump C
08:34 - becomes minus 10.
08:36 - as you went up 10 times you need to come
08:39 - back the same amount of times okay
08:41 - now else
08:44 - I will write jump C equals 10.
08:48 - I'll reassign jump C and jump equals
08:51 - false
08:53 - so every assigned these two variables
08:55 - just in case you click on the space bar
08:58 - again the space bar is pressed again the
09:01 - values are reassigned okay now I'll fill
09:05 - the screen with some color
09:06 - and I'll draw the rectangle now that
09:09 - would be moving around
09:11 - so I'll write Pi game dot draw dot rate
09:15 - screen
09:17 - and I'll given some color let it be
09:20 - purple
09:21 - and my rec.x
09:25 - myrec dot y
09:28 - direct.w on my vect.its
09:32 - okay so these were the parameters x y w
09:35 - and H with the parameters of the
09:38 - rectangle I would draw
09:40 - okay now this is it for this
09:43 - program let's run this and see if the
09:46 - rectangle jumps
09:53 - so here's the rectangle I made
09:56 - and I'll press the space bar first
10:00 - okay so rectangle jumps very well and
10:04 - the forward backward and down and above
10:06 - keys were fine left right up and down
10:09 - Keys work fine
10:11 - now you can even combine the two keys if
10:15 - you press the space bar and the left or
10:18 - right arrow key the there is a combined
10:21 - motion you can see like this
10:24 - it's a kind of a parabolic motion okay
10:29 - so yeah this was it for the program
10:32 - and
10:33 - I hope you understood whatever was done
10:36 - thank you

Cleaned transcript:

hey everyone today we're gonna talk about another General function of a character in a video game if you have a player in the video game you might need to add the jump function you might need your player to jump so that's what we are going to program today let me discuss first what we will do in the program we will have this rectangle made by the draw module then we would use the key module to move the rectangle up down left and right and we will have one more key that we would use to jump ladaki B spacebar so let's code all this I'll import Pi game I'll write and pour it by game I'll initialize it then I'll set up the screen I'll write screen equals spygame dot display dot set mode and the screen size is 500 comma 500 I'll given the caption I'll write Pi game dot display dot set caption and let the caption be jump then I'll do my while loop I'll write while true for events in pie game dot event dot get if events DOT type equals spygame dot quit then I'll call the quit function by pi game and I'll quit I will also set up my screen with some color right screen dot fill this is a lighter shade of green and then I'll update this I'll write 5game.display.update and I'm done with the basic frame structure now I would need to set up the basic variables that I would use in the program so one would be the size height width and the initial position of the rectangle I would move around so you can use the right class or you can initialize the parameters just by taking variables and so I've used the right class I'll write my rect equals spygame Dot rect let the initial position be 200 comma 200 and the size the width V10 and height B20 you can even take a larger rectangle then I'll do I'll have the speed variable let it be five the amount of distance the rectangle travels at once and I'll have this jump variable which would be a Boolean I'll set it up to false so that I can know when the object has to jump or not you'll get the use of it later in the code then you have this jumpsuit variable which is equal to 10 I'll put this equal to 10 this is the jump speed amount of distance a travel travels at once when you jump or you will click the space bar so we will use this later in the code now inside this while loop I will Define the movement of the rectangle drawn I'll write keys equals spygame dot key dot get pressed so here's the Boolean sequence as we have discussed a lot of times by now it stores the states of the keys on the keyboard as true or false if the key is pressed its state is true now accordingly I will check in which direction the object should move this is exactly the same thing as we did uh in moving an object so try to write this piece of code yourself it would help you practice I'll check for uh the left Arrow key if the left Arrow key is pressed I'll write if keys in square brackets by game dot k left so this is how we access the state of the left Arrow key and my underscore rec.x so this is the x coordinate of my rectangle the object is greater than zero then I will decrease the x coordinate of the rectangles by speed units so I'll write my rect dot X I have access to x coordinate minus equals speed okay I hope you remember if you need to go towards left side then we decrease the exponent now for the right arrow key I'll write if keys pygame dot k right I have accessed the writer okay and my rectangle dot X is less than 500 minus direct dot width DOTA blue would access your width this is just for keeping the rectangle complete rectangle within the boundaries I will increase the x coordinate by speed units so I'll write my erect dot X plus equals speed fine now check for the up key so I'll write F if Keys Pi game Dot K underscore up is greater than zero I'll access the y coordinate now since I am talking about vertical motion I'll write my erect dot y minus equals speed okay this is the normal motion of the rectangle okay I also need to talk about the down key if Keys Pi came dot k down and my react dot y the y coordinate is less than 500 minus my red dot h since we are talking about the vertical motion I have accessed the height not the width here my rec.y plus equal speed since we are moving downwards okay okay fine so this was something we had already done but now we'll move on to the jump function part so I'll write if jump equals false I'll check if jump is equals to false this is the initial condition right now and then I'll check if keys and basically I have pressed the space bar I'll write if Keys Pi Kim dot k underscore space I'll access this state of the space bar if it has been pressed I'll make jump equals to true now okay I'll reassign its value so if you actually analyze what would happen when the rectangle jumps it would cover a lot of distance vertically above more than it normally covers when we press an arrow key so I'll put this in the else condition let me write it first if jump C is greater than equal to minus 10 I'll check if the object is back at this place my rect.y minus equals jump C into absolute jump C into 0.5 jumps C minus equals 1. so let me explain now uh you should get that if the rectangle is jumping we will decrease the y coordinate just like the up Arrow key but by a larger value so that value is product of jump C into absolute jump C and 0.5 and after each decrement of y coordinate I will recommend the jump C by 1. jumpstick keeps the count how many times the there would be this kind of y coordinate decrement now you can think once the jump C value decreases and reaches zero you need the wreck to come back to its original position but for that we will increment the same that you decremented to the y coordinate so here is the role of this absolute function since jump C is negative if you don't use the absolute function you will end up decrementing more and the rectangle will not come back to its original position so all this will basically run a loop till the jump C becomes minus 10. as you went up 10 times you need to come back the same amount of times okay now else I will write jump C equals 10. I'll reassign jump C and jump equals false so every assigned these two variables just in case you click on the space bar again the space bar is pressed again the values are reassigned okay now I'll fill the screen with some color and I'll draw the rectangle now that would be moving around so I'll write Pi game dot draw dot rate screen and I'll given some color let it be purple and my rec.x myrec dot y direct.w on my vect.its okay so these were the parameters x y w and H with the parameters of the rectangle I would draw okay now this is it for this program let's run this and see if the rectangle jumps so here's the rectangle I made and I'll press the space bar first okay so rectangle jumps very well and the forward backward and down and above keys were fine left right up and down Keys work fine now you can even combine the two keys if you press the space bar and the left or right arrow key the there is a combined motion you can see like this it's a kind of a parabolic motion okay so yeah this was it for the program and I hope you understood whatever was done thank you
