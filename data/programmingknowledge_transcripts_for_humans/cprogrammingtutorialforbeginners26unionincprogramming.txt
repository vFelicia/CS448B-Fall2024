With timestamps:

00:00 - hey what's up guys welcome back to our
00:02 - YouTube channel and welcome to this
00:04 - video this is John from programming
00:06 - knowledge and in this video guys we're
00:09 - gonna learn how to use unions inside our
00:12 - C program so from the previous tutorial
00:14 - we learn how to define and use structure
00:19 - and then we also implemented different
00:23 - methods or different functions that we
00:24 - could use whenever we are working with
00:27 - structure right so at this point in time
00:31 - we will be learning how to use Union
00:34 - also so basically Union and structure is
00:38 - almost the same but there's a
00:40 - significant difference that we will
00:42 - discuss later on so the thing about
00:44 - strap is or the thing about structure is
00:47 - that we can store different data types
00:49 - in different memory location but when we
00:54 - say Union we can store different data
00:56 - types in the same memory location so
01:00 - that being said if we try to define
01:04 - Union a Union is a special data type
01:06 - available in C that will allow us to
01:09 - store different data types in this in
01:12 - the same memory location so you can
01:15 - define a Union with many members but
01:18 - only one member can contain a value at
01:21 - any given time that's because we store
01:26 - the data inside the same memory location
01:30 - so in other words all the members of the
01:33 - Union share the same memory location
01:37 - that's why every time we set a value to
01:40 - a particular member of the Union other
01:43 - values will be over will be erased and
01:47 - then replaced with the new value of a
01:51 - particular member so define a Union you
01:57 - must use the Union statement so from the
02:01 - previous tutorial we use truck for this
02:04 - structure but in the case of defining a
02:07 - Union we will define a Union by using
02:09 - the Union statement in the same way as
02:12 - you
02:13 - while defining the structure and the
02:17 - Union statement defines a new data type
02:19 - with more than one member for your
02:22 - program so basically it looks like this
02:27 - but instead of a strap you're gonna use
02:31 - Union okay so that's Union and then of
02:38 - course the name of your Union for
02:41 - example data right there and then you
02:45 - have to add open and close curly braces
02:48 - that signifies that all the variable
02:52 - inside these curly braces is a member of
02:56 - the Union data okay
03:01 - and then of course you can define the
03:04 - members here so the same thing with our
03:07 - structure so that being said we can say
03:11 - here in I okay and then we could also
03:17 - float F and that's a for example char
03:23 - STR and basically for example to learn
03:28 - for this is like 10 okay so let me show
03:33 - you first how this particular Union
03:36 - works so the Union tag is optional
03:42 - actually and each member definition is a
03:45 - normal variable definition so such as I
03:48 - or int i or flow F or any other valid
03:54 - variable definition and at the end of
03:57 - the union's definition before the finals
04:00 - and Colin
04:01 - you can specify one or more Union
04:05 - variables but it's but it is optional so
04:09 - you can also say here the name of your
04:12 - Union is like data okay so you can refer
04:19 - to this data and then you can now you
04:23 - now have the access to the members of
04:25 - your you
04:26 - by using this reference okay now a
04:29 - variable of data pipe can store integer
04:36 - float or string of characters so it
04:41 - means a single variable and then same
04:44 - memory allocation can be used to store
04:46 - multiple types of data so you can use
04:49 - any built-in or insert defined data
04:52 - types inside a union based on your
04:54 - requirement so it depends on you so the
04:57 - memory occupied by the Union will be
05:00 - large enough to hold the largest member
05:03 - of the Union so for example in this
05:07 - particular code data type will occupy 20
05:12 - by or I mean 10 bytes of memory space
05:15 - because this is the maximum space which
05:18 - can be occupied by a character string
05:21 - now we can display the values of this
05:27 - Union it's a very sample we try to
05:29 - display all the I mean any value coming
05:33 - from this Union so at first we could you
05:37 - know refer to the members by using this
05:41 - reference so data that and then we could
05:46 - say here I then we could initialize this
05:50 - value into for example five like that
05:54 - and then we could print the value of I
05:58 - so here we can say the value of I yes
06:04 - and then of course we need to have the
06:08 - format specifier for our I okay so D and
06:16 - then we could add also the new line and
06:19 - then comma and then of course data that
06:26 - I okay and then semicolon so let's try
06:32 - to run our program so basically let's
06:34 - hope that we won't have problems so
06:39 - build in run
06:40 - program and as you can see here the
06:43 - value of I is five so we were able to
06:48 - set the value of our data I member and
06:55 - initialize it to five now take a look at
06:59 - this for example we set the value of
07:03 - float into a something into some value
07:08 - for example data that F equals two
07:14 - for example let's say 22 or maybe like 8
07:20 - [Music]
07:21 - okay and then we could try to maybe add
07:30 - eight point five here just to make sure
07:33 - that it is time like float value so we
07:38 - set the value of our F into eight point
07:42 - five so we could you know build and run
07:46 - our application and as you can see here
07:51 - we're getting the value of I is
07:55 - something like this okay so the value of
08:01 - I is something like this that's because
08:05 - the value has been you know corrupted
08:09 - when we try to set the member F into
08:15 - something like eight point five and as
08:18 - you can probably remember that the
08:21 - members of the Union shared the same
08:24 - memory location so that's why if we try
08:28 - to change the value of a certain member
08:30 - then it will override the value of the
08:35 - other member so that's why it's somehow
08:38 - corrupted our value of I here and we're
08:42 - getting this random number like this but
08:45 - the purpose of using Union actually is
08:49 - to have a some sort of a value
08:54 - at a certain point of time so for
08:56 - example if we want to make use of the
08:59 - Union we could try to display the value
09:01 - of AI right here after the
09:06 - initialization so the value of IAS and
09:09 - then we're getting the value of AI
09:12 - member here and then also if we wanted
09:16 - you know display the value of the float
09:19 - F value or remember from this Union then
09:24 - we could what we could do here is change
09:27 - this into F that's the formal specifier
09:31 - for a float value and then we could say
09:34 - here the we want to display the member F
09:39 - from the data Union so we could actually
09:43 - get the correct value right after this
09:46 - so let's try to run this so build and
09:51 - run our application and as you can see
09:54 - here the that we're getting the value of
09:57 - our I is 5 so let's change this instead
10:01 - of I this is member F and this is member
10:09 - high because this is a member of this
10:13 - union so let's build and run our
10:16 - application and we're getting this
10:18 - output the value of member I is equal to
10:21 - 5 and then the value of member F is
10:24 - equal to 8 point 5 so that's basically
10:28 - the correct value that we're getting or
10:30 - we're setting here in our main function
10:34 - ok so I think that's all there is to it
10:36 - for this tutorial
10:37 - and a sort as a sort of summary or
10:40 - review we have learned how to use Union
10:43 - inside our C program and then we learn
10:46 - that we can store different data types
10:48 - in the same memory location by using
10:51 - this Union keyword and then store
10:54 - different variables with different data
10:56 - types and yeah we also set and
11:02 - initialize the value of the members of
11:04 - our Union and then also display
11:07 - the values individually right here in
11:11 - our C program so again that's all there
11:15 - is to it guys and if you have questions
11:17 - please let us know in the comment
11:18 - section below and thank you again for
11:21 - watching and see you in the next video

Cleaned transcript:

hey what's up guys welcome back to our YouTube channel and welcome to this video this is John from programming knowledge and in this video guys we're gonna learn how to use unions inside our C program so from the previous tutorial we learn how to define and use structure and then we also implemented different methods or different functions that we could use whenever we are working with structure right so at this point in time we will be learning how to use Union also so basically Union and structure is almost the same but there's a significant difference that we will discuss later on so the thing about strap is or the thing about structure is that we can store different data types in different memory location but when we say Union we can store different data types in the same memory location so that being said if we try to define Union a Union is a special data type available in C that will allow us to store different data types in this in the same memory location so you can define a Union with many members but only one member can contain a value at any given time that's because we store the data inside the same memory location so in other words all the members of the Union share the same memory location that's why every time we set a value to a particular member of the Union other values will be over will be erased and then replaced with the new value of a particular member so define a Union you must use the Union statement so from the previous tutorial we use truck for this structure but in the case of defining a Union we will define a Union by using the Union statement in the same way as you while defining the structure and the Union statement defines a new data type with more than one member for your program so basically it looks like this but instead of a strap you're gonna use Union okay so that's Union and then of course the name of your Union for example data right there and then you have to add open and close curly braces that signifies that all the variable inside these curly braces is a member of the Union data okay and then of course you can define the members here so the same thing with our structure so that being said we can say here in I okay and then we could also float F and that's a for example char STR and basically for example to learn for this is like 10 okay so let me show you first how this particular Union works so the Union tag is optional actually and each member definition is a normal variable definition so such as I or int i or flow F or any other valid variable definition and at the end of the union's definition before the finals and Colin you can specify one or more Union variables but it's but it is optional so you can also say here the name of your Union is like data okay so you can refer to this data and then you can now you now have the access to the members of your you by using this reference okay now a variable of data pipe can store integer float or string of characters so it means a single variable and then same memory allocation can be used to store multiple types of data so you can use any builtin or insert defined data types inside a union based on your requirement so it depends on you so the memory occupied by the Union will be large enough to hold the largest member of the Union so for example in this particular code data type will occupy 20 by or I mean 10 bytes of memory space because this is the maximum space which can be occupied by a character string now we can display the values of this Union it's a very sample we try to display all the I mean any value coming from this Union so at first we could you know refer to the members by using this reference so data that and then we could say here I then we could initialize this value into for example five like that and then we could print the value of I so here we can say the value of I yes and then of course we need to have the format specifier for our I okay so D and then we could add also the new line and then comma and then of course data that I okay and then semicolon so let's try to run our program so basically let's hope that we won't have problems so build in run program and as you can see here the value of I is five so we were able to set the value of our data I member and initialize it to five now take a look at this for example we set the value of float into a something into some value for example data that F equals two for example let's say 22 or maybe like 8 okay and then we could try to maybe add eight point five here just to make sure that it is time like float value so we set the value of our F into eight point five so we could you know build and run our application and as you can see here we're getting the value of I is something like this okay so the value of I is something like this that's because the value has been you know corrupted when we try to set the member F into something like eight point five and as you can probably remember that the members of the Union shared the same memory location so that's why if we try to change the value of a certain member then it will override the value of the other member so that's why it's somehow corrupted our value of I here and we're getting this random number like this but the purpose of using Union actually is to have a some sort of a value at a certain point of time so for example if we want to make use of the Union we could try to display the value of AI right here after the initialization so the value of IAS and then we're getting the value of AI member here and then also if we wanted you know display the value of the float F value or remember from this Union then we could what we could do here is change this into F that's the formal specifier for a float value and then we could say here the we want to display the member F from the data Union so we could actually get the correct value right after this so let's try to run this so build and run our application and as you can see here the that we're getting the value of our I is 5 so let's change this instead of I this is member F and this is member high because this is a member of this union so let's build and run our application and we're getting this output the value of member I is equal to 5 and then the value of member F is equal to 8 point 5 so that's basically the correct value that we're getting or we're setting here in our main function ok so I think that's all there is to it for this tutorial and a sort as a sort of summary or review we have learned how to use Union inside our C program and then we learn that we can store different data types in the same memory location by using this Union keyword and then store different variables with different data types and yeah we also set and initialize the value of the members of our Union and then also display the values individually right here in our C program so again that's all there is to it guys and if you have questions please let us know in the comment section below and thank you again for watching and see you in the next video
