With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - Python tutorial for beginners in this
00:04 - video I'm going to show you what is
00:06 - composition and how to use class
00:09 - composition in Python so to start with I
00:12 - have two classes here one is an employee
00:16 - class and other is the salary class now
00:20 - in the salary class I have this init
00:22 - method which takes two argument P and
00:25 - bonus and it sets these two arguments to
00:28 - the member variables of this class also
00:31 - I have a method called annual salary
00:33 - which is used to calculate the salary
00:36 - now in the employee class I have this
00:39 - constructor which takes four arguments
00:41 - which is name age P and bonus now what
00:47 - do you think can we apply inheritance
00:49 - here the answer is no because there is
00:52 - no is our relationship between salary
00:55 - and employee so employee is not a salary
00:58 - and salary is not an employee but
01:01 - somehow I want to delegate the
01:03 - responsibility of calculating the
01:06 - employee salary to the salary class
01:08 - because calculating salary is in itself
01:11 - is a big task I have just simplified
01:14 - this class in the form of just
01:17 - calculating the annual salary but the
01:21 - employee can have his own taxes or he
01:24 - has taken some leaves or many factors
01:27 - affects the salary of an employee so
01:31 - this salary calculation let's say we
01:34 - want to delegate to the salary class but
01:37 - whose salary is this this salary is the
01:40 - employees salary so we know that we
01:42 - cannot use inheritance here but we can
01:46 - use a concept called composition here
01:49 - and the composition means that we are
01:53 - just delegating some responsibilities
01:56 - from one class to the another class so
01:59 - how to delegate this responsibility we
02:02 - can just create one more variable here
02:06 - for example self dot obj underscore
02:10 - salary which is the salary object we
02:13 - going to create using the salary class
02:17 - okay
02:18 - and this salary class takes two
02:20 - parameters one is pay and other is bonus
02:23 - which we are already providing using the
02:27 - employee init method so I'm going to
02:30 - just pass this pay comma the bonus into
02:35 - the salary class so we are instantiating
02:37 - the salary class inside the employee
02:41 - class so here one class which is an
02:44 - employee class acts like a container of
02:48 - the other class which acts like a
02:51 - Content
02:52 - okay so salary class is the content and
02:55 - the employee class is the container of
02:58 - this salary class now in order to
03:02 - calculate the total salary we can define
03:04 - one more method here and I'm going to
03:05 - just say total underscore celery and
03:09 - then what we are going to do is we are
03:12 - going to call our object salary member
03:16 - variable because this gives us the
03:19 - object of the salary so I'm going to
03:21 - just call object salary and we can call
03:24 - this method from the salary class which
03:26 - gives us the annual salary and now I'm
03:29 - going to just create the object of this
03:32 - employee class so let me just write EMP
03:36 - is equal to employee which takes four
03:39 - parameter first is a name second is the
03:43 - age third is the pace so let's say P is
03:49 - 15,000 and the bonus is 10,000 and now I
03:53 - just want to print the total salary of
03:56 - this employee so I can just write print
03:59 - and then EMP object dot the total salary
04:04 - which is total salary method and you can
04:07 - see here this total salary is returning
04:09 - let me just use the return keyword also
04:13 - because we are returning this annual
04:15 - salary from the salary class using this
04:18 - total salary method so let's run the
04:20 - code once again and let's see what
04:22 - happens and you can see annual salary is
04:24 - printed and this annual salary is kal
04:27 - cállate 'add using the salary class so
04:31 - what this employee class has done it has
04:34 - delegated some responsibilities to the
04:39 - other class which is the salary class
04:41 - which gives us the annual salary of an
04:44 - employee and this here is called
04:47 - composition now one interesting thing
04:49 - which you will notice here is we are not
04:52 - instantiating salary here we are just
04:56 - instantiate in the salary inside an
04:59 - employee class so as soon as you delete
05:03 - an instance of an employee the salary
05:06 - class instance will be automatically
05:09 - deleted so whenever you want to delegate
05:12 - some responsibilities of one class to
05:15 - the another class
05:16 - it's called composition one more example
05:19 - of composition can be a book class and a
05:23 - chapter class so a chapter is not a book
05:28 - and book is not a chapter but we can
05:31 - delegate some responsibilities from a
05:34 - book class to the chapter class so this
05:37 - is how you can use composition in Python
05:39 - I hope you have learned something new
05:42 - this time and I will see you in the next
05:44 - video

Cleaned transcript:

hey guys welcome to the next video on Python tutorial for beginners in this video I'm going to show you what is composition and how to use class composition in Python so to start with I have two classes here one is an employee class and other is the salary class now in the salary class I have this init method which takes two argument P and bonus and it sets these two arguments to the member variables of this class also I have a method called annual salary which is used to calculate the salary now in the employee class I have this constructor which takes four arguments which is name age P and bonus now what do you think can we apply inheritance here the answer is no because there is no is our relationship between salary and employee so employee is not a salary and salary is not an employee but somehow I want to delegate the responsibility of calculating the employee salary to the salary class because calculating salary is in itself is a big task I have just simplified this class in the form of just calculating the annual salary but the employee can have his own taxes or he has taken some leaves or many factors affects the salary of an employee so this salary calculation let's say we want to delegate to the salary class but whose salary is this this salary is the employees salary so we know that we cannot use inheritance here but we can use a concept called composition here and the composition means that we are just delegating some responsibilities from one class to the another class so how to delegate this responsibility we can just create one more variable here for example self dot obj underscore salary which is the salary object we going to create using the salary class okay and this salary class takes two parameters one is pay and other is bonus which we are already providing using the employee init method so I'm going to just pass this pay comma the bonus into the salary class so we are instantiating the salary class inside the employee class so here one class which is an employee class acts like a container of the other class which acts like a Content okay so salary class is the content and the employee class is the container of this salary class now in order to calculate the total salary we can define one more method here and I'm going to just say total underscore celery and then what we are going to do is we are going to call our object salary member variable because this gives us the object of the salary so I'm going to just call object salary and we can call this method from the salary class which gives us the annual salary and now I'm going to just create the object of this employee class so let me just write EMP is equal to employee which takes four parameter first is a name second is the age third is the pace so let's say P is 15,000 and the bonus is 10,000 and now I just want to print the total salary of this employee so I can just write print and then EMP object dot the total salary which is total salary method and you can see here this total salary is returning let me just use the return keyword also because we are returning this annual salary from the salary class using this total salary method so let's run the code once again and let's see what happens and you can see annual salary is printed and this annual salary is kal cállate 'add using the salary class so what this employee class has done it has delegated some responsibilities to the other class which is the salary class which gives us the annual salary of an employee and this here is called composition now one interesting thing which you will notice here is we are not instantiating salary here we are just instantiate in the salary inside an employee class so as soon as you delete an instance of an employee the salary class instance will be automatically deleted so whenever you want to delegate some responsibilities of one class to the another class it's called composition one more example of composition can be a book class and a chapter class so a chapter is not a book and book is not a chapter but we can delegate some responsibilities from a book class to the chapter class so this is how you can use composition in Python I hope you have learned something new this time and I will see you in the next video
