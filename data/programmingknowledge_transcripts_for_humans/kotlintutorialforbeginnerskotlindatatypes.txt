With timestamps:

00:00 - in the last video we have discussed
00:01 - about the variables in kotlin
00:04 - so now we are going to move further and
00:08 - discuss the data types in kotlin
00:14 - okay
00:15 - so uh
00:16 - as i've already mentioned quarterly is a
00:18 - statically typed language
00:22 - that is the variable of
00:24 - the variable is already known during the
00:27 - compile time
00:31 - so
00:32 - there are
00:33 - a few type of
00:35 - variables in kotlin so i'll just
00:39 - start a function
00:41 - so when i
00:42 - uh so there are
00:44 - four mainly four types there are numbers
00:47 - there are characters
00:50 - there are booleans
00:52 - and there are
00:54 - arrays
00:57 - uh i'll cover them one by one
01:00 - so firstly i'll go to the number type so
01:03 - number in kotlin are similar to java and
01:06 - any other programming knowledge a
01:07 - programming language
01:08 - so there are six built-in types
01:11 - representing number so so the six are
01:14 - byte short and
01:16 - long
01:17 - float and double
01:19 - so out of them middling we were we will
01:22 - be using int and double
01:25 - most of the time
01:27 - so what is byte
01:30 - so i can create one
01:33 - byte for you so i'll create val
01:37 - range
01:39 - and i'll mention its type byte
01:43 - i'll mention it as 112.
01:46 - so
01:48 - the byte is
01:50 - is one byte is eight bits you might
01:52 - already know that so
01:54 - there are totally eight bit
01:57 - and eight sign bit to two's complement
02:00 - integer
02:02 - so byte data can have values from minus
02:04 - 128 to 127
02:07 - so when i
02:09 - have a
02:10 - concise
02:11 - data
02:12 - and it has a concise value between 0 to
02:16 - 100 or such that then i use byte so what
02:18 - it does is instead of using an integer
02:21 - or a long end
02:22 - or a double so it
02:25 - it concise the code in very small space
02:27 - it requires a very less space
02:31 - so
02:32 - when i assign it a value of
02:34 - 200 so it gives it shows and red
02:37 - underline and when i hover over it it
02:40 - says that the integer lateral does not
02:42 - conform the expect to the expected type
02:45 - byte so what it says basically it is
02:48 - it is out of the range out of the bound
02:50 - so when i go and
02:52 - print
02:54 - the
02:56 - range
02:58 - so it will be
03:01 - printing 1 2 as we expect so
03:10 - yeah it prints 112
03:13 - okay so we will move on and next is
03:16 - short under the number so short is a
03:18 - data type having a 16 so i'll mention
03:22 - here
03:23 - it is having
03:24 - eight eight bit eight bit one bit is
03:28 - eight one byte is eight bit
03:30 - so the short is having
03:33 - uh
03:35 - the
03:37 - the values can be assigned to a 16 bit
03:40 - 16 bit signed
03:43 - signed complement integer two's
03:45 - complement integer so the the data as
03:48 - short data type can have values from
03:50 - minus three to seven six eight two three
03:53 - two seven six seven we don't have to
03:56 - remember that or know that just for
03:58 - knowledge sake i am telling you this so
04:01 - the short has a
04:03 - capacity
04:05 - or we can say
04:06 - it uses 16 bit data
04:10 - okay
04:11 - so
04:12 - next we will move to enter so end is a
04:15 - 32-bit signed two's complement integer
04:18 - and mainly we will be using in in uh
04:21 - most of our codes
04:23 - so in data type can have values from
04:25 - minus to the power 31
04:27 - to 2 to the power 30 with one minus one
04:30 - okay so any uh value i assigned to
04:34 - a
04:36 - is by default stored as an int and i
04:39 - hover over a it shows that it is an int
04:42 - okay so it is also a default
04:45 - value
04:48 - so
04:49 - next is long
04:51 - so what happens when i have a integer
04:55 - of value more than 2 to the power 31
04:58 - so we can store it in
05:00 - long so basically long has a 64
05:03 - bit signed two's complement integer
05:06 - okay so when i have a long integer we
05:10 - will store it as long so the keyword
05:13 - used for it is i'll just mention
05:16 - one value
05:19 - say longint
05:22 - and
05:23 - i'll mention it
05:25 - as long
05:27 - and it can have any value okay
05:31 - so
05:32 - moving on we have double
05:35 - so double is
05:36 - a data type with double precision
05:40 - of 64-bit floating point
05:44 - so whenever i define any
05:48 - decimal as a
05:51 - value
05:52 - suppose 1.23 so it automatically
05:56 - is defined as a
05:59 - double
06:01 - okay as we can see here
06:04 - so if i print decimal it will be
06:07 - printing one point two three
06:10 - now what is float
06:13 - we have seen about double so double has
06:15 - al also 64 bit so float data type is a
06:19 - single precision 32-bit floating point
06:22 - okay
06:23 - so
06:25 - there was end that was getting by
06:27 - default assigned and there was byte and
06:30 - short
06:31 - that concise the storage so whenever we
06:35 - want to
06:36 - acquire it less storage we can use float
06:40 - so how to define float
06:42 - so we can define
06:43 - it as
06:45 - well
06:46 - decimal
06:50 - float
06:55 - in this way also
07:00 - okay but
07:03 - so we could have uh
07:05 - by
07:06 - the
07:07 - uh
07:08 - by the
07:10 - thing we are going uh
07:12 - the seeing like we
07:14 - define it in this way but it is not true
07:17 - so what i what if i have to define a
07:20 - float so what i do is i just uh
07:23 - define it as decimal and then put
07:26 - f
07:31 - so what it does is it convert it convert
07:34 - it to float so it is now a float
07:37 - so when i print
07:42 - decimal float
07:45 - so what it does is it will be printing
07:48 - 1.23 when
07:49 - only 1.123 and not the f
07:53 - so
07:54 - what it says is it is a float
07:57 - okay and nothing else
08:00 - so
08:02 - we have used
08:04 - 1.123 f instead of 1.123
08:08 - in the above in the program it is
08:10 - because
08:11 - 1.123 is a double literal and you cannot
08:14 - assign double value inside a type of
08:16 - float
08:18 - okay so i can
08:20 - now i can here mention float
08:23 - so it will not giving any error
08:27 - okay
08:29 - so
08:30 - what if i am not sure about the
08:34 - the
08:36 - what if i am not sure about what number
08:38 - value
08:39 - a variable will assign in the program so
08:41 - i can what i can do is i can use
08:44 - a number
08:45 - data type
08:46 - so
08:47 - i will
08:48 - define where test
08:50 - and assign it number data type
08:54 - okay
08:55 - so i can
08:56 - put anything into
08:58 - like i can put a string
09:01 - into
09:02 - the okay sorry i can put a string into
09:04 - test
09:08 - i can put a integer into text
09:11 - oh sorry number so i can put an integer
09:13 - into test i can put a decimal into test
09:16 - i can put anything into test if i have
09:19 - design defined it data type as number so
09:22 - now we have completed our numbers data
09:24 - type now we will move on to characters
09:27 - to represent character and kotlin
09:30 - care data types are used so
09:34 - what i'll do is i'll just create a
09:36 - letter where
09:38 - letter
09:40 - and
09:42 - what i do is i define its
09:44 - value as scale
09:46 - so the character type is used
09:49 - so i can assign it any
09:52 - character so please note that the
09:54 - character will be in single quotation
09:56 - marks
09:58 - okay
10:01 - so i have defined a character now the
10:03 - next data type is booleans so what
10:06 - booleans are booleans are simply
10:09 - either true either false they have only
10:11 - two possible values
10:13 - so
10:14 - when i define a boolean variable
10:18 - boolean
10:22 - so i'll name it as flag
10:25 - and it has a data types boolean
10:28 - so i can either
10:31 - uh give flag value
10:33 - a true true e2
10:36 - okay
10:37 - or a
10:38 - false
10:39 - okay
10:41 - so it has only two values
10:44 - so booleans are used generally used in
10:47 - decision making statement that we will
10:49 - be using in our later discussion
10:51 - okay then further we have arrays
10:55 - so we will be discussing areas in a
10:57 - separate topic but just to define it an
11:00 - array is a container that hold value
11:03 - offer of one single type for example you
11:06 - can create an array that can hold 100
11:08 - values of n time
11:09 - okay then we have string
11:11 - so just for defining purpose i'll define
11:14 - a string like val
11:17 - name i have already defined it but okay
11:20 - so
11:21 - this is
11:22 - my name
11:24 - okay so please note that the string must
11:27 - be in double quotation mark
11:30 - okay thank you for watching this video
11:32 - we have now covered the data types in
11:34 - kotlin

Cleaned transcript:

in the last video we have discussed about the variables in kotlin so now we are going to move further and discuss the data types in kotlin okay so uh as i've already mentioned quarterly is a statically typed language that is the variable of the variable is already known during the compile time so there are a few type of variables in kotlin so i'll just start a function so when i uh so there are four mainly four types there are numbers there are characters there are booleans and there are arrays uh i'll cover them one by one so firstly i'll go to the number type so number in kotlin are similar to java and any other programming knowledge a programming language so there are six builtin types representing number so so the six are byte short and long float and double so out of them middling we were we will be using int and double most of the time so what is byte so i can create one byte for you so i'll create val range and i'll mention its type byte i'll mention it as 112. so the byte is is one byte is eight bits you might already know that so there are totally eight bit and eight sign bit to two's complement integer so byte data can have values from minus 128 to 127 so when i have a concise data and it has a concise value between 0 to 100 or such that then i use byte so what it does is instead of using an integer or a long end or a double so it it concise the code in very small space it requires a very less space so when i assign it a value of 200 so it gives it shows and red underline and when i hover over it it says that the integer lateral does not conform the expect to the expected type byte so what it says basically it is it is out of the range out of the bound so when i go and print the range so it will be printing 1 2 as we expect so yeah it prints 112 okay so we will move on and next is short under the number so short is a data type having a 16 so i'll mention here it is having eight eight bit eight bit one bit is eight one byte is eight bit so the short is having uh the the values can be assigned to a 16 bit 16 bit signed signed complement integer two's complement integer so the the data as short data type can have values from minus three to seven six eight two three two seven six seven we don't have to remember that or know that just for knowledge sake i am telling you this so the short has a capacity or we can say it uses 16 bit data okay so next we will move to enter so end is a 32bit signed two's complement integer and mainly we will be using in in uh most of our codes so in data type can have values from minus to the power 31 to 2 to the power 30 with one minus one okay so any uh value i assigned to a is by default stored as an int and i hover over a it shows that it is an int okay so it is also a default value so next is long so what happens when i have a integer of value more than 2 to the power 31 so we can store it in long so basically long has a 64 bit signed two's complement integer okay so when i have a long integer we will store it as long so the keyword used for it is i'll just mention one value say longint and i'll mention it as long and it can have any value okay so moving on we have double so double is a data type with double precision of 64bit floating point so whenever i define any decimal as a value suppose 1.23 so it automatically is defined as a double okay as we can see here so if i print decimal it will be printing one point two three now what is float we have seen about double so double has al also 64 bit so float data type is a single precision 32bit floating point okay so there was end that was getting by default assigned and there was byte and short that concise the storage so whenever we want to acquire it less storage we can use float so how to define float so we can define it as well decimal float in this way also okay but so we could have uh by the uh by the thing we are going uh the seeing like we define it in this way but it is not true so what i what if i have to define a float so what i do is i just uh define it as decimal and then put f so what it does is it convert it convert it to float so it is now a float so when i print decimal float so what it does is it will be printing 1.23 when only 1.123 and not the f so what it says is it is a float okay and nothing else so we have used 1.123 f instead of 1.123 in the above in the program it is because 1.123 is a double literal and you cannot assign double value inside a type of float okay so i can now i can here mention float so it will not giving any error okay so what if i am not sure about the the what if i am not sure about what number value a variable will assign in the program so i can what i can do is i can use a number data type so i will define where test and assign it number data type okay so i can put anything into like i can put a string into the okay sorry i can put a string into test i can put a integer into text oh sorry number so i can put an integer into test i can put a decimal into test i can put anything into test if i have design defined it data type as number so now we have completed our numbers data type now we will move on to characters to represent character and kotlin care data types are used so what i'll do is i'll just create a letter where letter and what i do is i define its value as scale so the character type is used so i can assign it any character so please note that the character will be in single quotation marks okay so i have defined a character now the next data type is booleans so what booleans are booleans are simply either true either false they have only two possible values so when i define a boolean variable boolean so i'll name it as flag and it has a data types boolean so i can either uh give flag value a true true e2 okay or a false okay so it has only two values so booleans are used generally used in decision making statement that we will be using in our later discussion okay then further we have arrays so we will be discussing areas in a separate topic but just to define it an array is a container that hold value offer of one single type for example you can create an array that can hold 100 values of n time okay then we have string so just for defining purpose i'll define a string like val name i have already defined it but okay so this is my name okay so please note that the string must be in double quotation mark okay thank you for watching this video we have now covered the data types in kotlin
