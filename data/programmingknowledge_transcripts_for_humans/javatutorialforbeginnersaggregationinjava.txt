With timestamps:

00:00 - hello and welcome to the new head of the
00:02 - Java tutorial Series so today we will be
00:04 - covering aggregation in Java
00:06 - so till now we have covered uh in
00:08 - inheritance in Java and inheritance
00:10 - represents is a relationship and
00:13 - aggregation represents has a
00:15 - relationship I will tell you what what
00:17 - exactly this is uh so let's start this
00:20 - video If a class has an entity reference
00:23 - it is known as the aggregation and
00:24 - aggregation represents a hazard
00:26 - relationship okay because so consider a
00:28 - scenario where employee objects contain
00:30 - many information such as ID name email
00:33 - ID Etc it contains one more object that
00:36 - is name address so address contains so
00:38 - many fields like city state country zip
00:41 - code Etc
00:42 - okay uh so when to use aggregation and
00:46 - why to use aggregation so for y you can
00:49 - use aggregation for code reusability and
00:52 - when to use aggregation if the code
00:55 - reuses is also the best achieved by the
00:57 - aggregation when there is no is a
00:59 - relationship is a relationship is
01:01 - handled using uh inheritance and has a
01:04 - relationship is inside aggregation
01:07 - inheritance should be used only if the
01:09 - relationship is a either is maintained
01:11 - throughout the lifetime of the object
01:13 - involved otherwise aggregation is the
01:15 - best choice okay so I will cover one
01:18 - example
01:19 - uh that I have discussed earlier of the
01:22 - employee address so let me get into my
01:25 - IDE
01:26 - and I will create one new Java class
01:28 - name as
01:30 - aggregation
01:33 - let me increase the font size
01:39 - I will include my main method
01:43 - okay so I require one more class
01:47 - to hold the address of the employee
01:51 - I will name it as
01:54 - class
01:56 - address
01:58 - okay and inside this
02:02 - public static okay and insert this I
02:05 - will write string I will get City
02:12 - state
02:13 - and Country of that employee
02:18 - okay and
02:20 - I'll write one Constructor
02:22 - so public
02:25 - address
02:27 - and I will receive three parameters one
02:31 - is City
02:34 - no one needs state
02:38 - and another one is
02:41 - country
02:45 - and inside this I will map all those
02:48 - strings to the string that I have
02:50 - declared above that is City this
02:51 - velocity is equals to City
02:55 - uh again this Dot
02:59 - state is equals to state
03:03 - this dot country
03:07 - is equals to
03:11 - country
03:13 - okay
03:14 - so this declared one address class and
03:18 - one Constructor of the address class it
03:20 - which receives the three parameters city
03:23 - state and Country for that employee
03:29 - uh so I have created one address class
03:31 - which holds the address of the employee
03:33 - and now inside my main method public
03:36 - class I will write
03:39 - in ID which is uh
03:42 - receive the ID and string name to
03:46 - receive the employee's name and I will
03:49 - create
03:50 - address of type address
03:54 - this is where we are implementing
03:56 - aggregation in Java because we are
03:58 - receiving the address of the employee in
04:00 - in the format of address and this add
04:03 - format of the address we had declared
04:05 - over here which received the city state
04:07 - and control of the employee
04:10 - okay and I will write now one method
04:14 - Public Employee
04:17 - which receives the ID of the employee
04:22 - and string name of the employee
04:28 - and wait a minute
04:32 - uh aggregation
04:39 - in ID string name and address of type
04:44 - address
04:49 - okay so we have created
04:52 - Constructor for this class aggregation
04:55 - and upon create when we create a object
04:58 - of this class ID and name and address of
05:01 - the employees
05:03 - will receive and map those
05:07 - variable with this
05:10 - this Dot
05:14 - ID is equals to ID
05:19 - this dot name is equals to name
05:25 - this Dot
05:28 - address is equals to
05:31 - address let me check why I'm getting
05:34 - this error
05:38 - unexpected token
05:40 - wait a minute I should write Constructor
05:46 - outside the main method
05:50 - and all this declaration should be done
05:55 - I'll set the
05:57 - limit
05:58 - now it's okay
06:01 - and I need one more method to display
06:04 - the information of the employee
06:08 - display
06:12 - um
06:13 - system.out.printlain
06:16 - printer
06:20 - ID
06:24 - ID Plus
06:28 - name
06:34 - of that employee
06:39 - press name okay and below that I will
06:42 - print the address of that employee
06:44 - and address
06:46 - here you can see we have created address
06:47 - in the format of City then State and
06:51 - then
06:51 - country so I need to print in that
06:54 - format also
06:56 - address Dot
06:58 - City
07:00 - and then
07:02 - one space should be there
07:04 - address Dot
07:07 - state
07:09 - and space and then
07:13 - address Dot
07:16 - country
07:18 - this will print the address of the
07:20 - employee
07:28 - employee okay
07:30 - now inside my main method I will create
07:31 - the object of this classes to create the
07:35 - employee and I will create so now I have
07:38 - created a address one and address two of
07:40 - the employee and I have created two
07:42 - employees okay now I just need to
07:46 - display the information that we have got
07:49 - from this address one and employee one
07:52 - so to imprint that I will just simply
07:55 - call employee one dot display
07:59 - and employee two dot display okay
08:04 - and now now I will run this
08:08 - it should print the employee ID employee
08:11 - name and address of the employee okay so
08:13 - here you can see id101 name Jack a
08:16 - Mumbai Maharashtra India and id102 name
08:20 - hack and XYZ is the city uh State and
08:24 - Country of that employee so here you can
08:26 - see we can this by creating the separate
08:30 - class for the address we are reusing
08:32 - that code for to to create the multiple
08:36 - instances of the employee we just need
08:39 - to create one address for that employee
08:40 - and we we can pass it over here as in
08:43 - parameter to the employee class employee
08:46 - object sorry
08:47 - so in this way we can achieve a
08:49 - aggregation in Java so thank you for
08:51 - watching this video

Cleaned transcript:

hello and welcome to the new head of the Java tutorial Series so today we will be covering aggregation in Java so till now we have covered uh in inheritance in Java and inheritance represents is a relationship and aggregation represents has a relationship I will tell you what what exactly this is uh so let's start this video If a class has an entity reference it is known as the aggregation and aggregation represents a hazard relationship okay because so consider a scenario where employee objects contain many information such as ID name email ID Etc it contains one more object that is name address so address contains so many fields like city state country zip code Etc okay uh so when to use aggregation and why to use aggregation so for y you can use aggregation for code reusability and when to use aggregation if the code reuses is also the best achieved by the aggregation when there is no is a relationship is a relationship is handled using uh inheritance and has a relationship is inside aggregation inheritance should be used only if the relationship is a either is maintained throughout the lifetime of the object involved otherwise aggregation is the best choice okay so I will cover one example uh that I have discussed earlier of the employee address so let me get into my IDE and I will create one new Java class name as aggregation let me increase the font size I will include my main method okay so I require one more class to hold the address of the employee I will name it as class address okay and inside this public static okay and insert this I will write string I will get City state and Country of that employee okay and I'll write one Constructor so public address and I will receive three parameters one is City no one needs state and another one is country and inside this I will map all those strings to the string that I have declared above that is City this velocity is equals to City uh again this Dot state is equals to state this dot country is equals to country okay so this declared one address class and one Constructor of the address class it which receives the three parameters city state and Country for that employee uh so I have created one address class which holds the address of the employee and now inside my main method public class I will write in ID which is uh receive the ID and string name to receive the employee's name and I will create address of type address this is where we are implementing aggregation in Java because we are receiving the address of the employee in in the format of address and this add format of the address we had declared over here which received the city state and control of the employee okay and I will write now one method Public Employee which receives the ID of the employee and string name of the employee and wait a minute uh aggregation in ID string name and address of type address okay so we have created Constructor for this class aggregation and upon create when we create a object of this class ID and name and address of the employees will receive and map those variable with this this Dot ID is equals to ID this dot name is equals to name this Dot address is equals to address let me check why I'm getting this error unexpected token wait a minute I should write Constructor outside the main method and all this declaration should be done I'll set the limit now it's okay and I need one more method to display the information of the employee display um system.out.printlain printer ID ID Plus name of that employee press name okay and below that I will print the address of that employee and address here you can see we have created address in the format of City then State and then country so I need to print in that format also address Dot City and then one space should be there address Dot state and space and then address Dot country this will print the address of the employee employee okay now inside my main method I will create the object of this classes to create the employee and I will create so now I have created a address one and address two of the employee and I have created two employees okay now I just need to display the information that we have got from this address one and employee one so to imprint that I will just simply call employee one dot display and employee two dot display okay and now now I will run this it should print the employee ID employee name and address of the employee okay so here you can see id101 name Jack a Mumbai Maharashtra India and id102 name hack and XYZ is the city uh State and Country of that employee so here you can see we can this by creating the separate class for the address we are reusing that code for to to create the multiple instances of the employee we just need to create one address for that employee and we we can pass it over here as in parameter to the employee class employee object sorry so in this way we can achieve a aggregation in Java so thank you for watching this video
