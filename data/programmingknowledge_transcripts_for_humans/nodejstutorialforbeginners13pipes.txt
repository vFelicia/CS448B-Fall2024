With timestamps:

00:00 - hello guys welcome to the next video on
00:02 - node.js tutorial for beginners in the
00:04 - last two videos we have been seeing how
00:07 - to use readable streams and writable
00:09 - streams in no chairs and in this video
00:12 - we will learn an important concept
00:15 - called piping in node.js with readable
00:18 - streams and writable streams now in no
00:23 - chairs or any server application writing
00:27 - and reading streams is so important and
00:31 - frequently use thing that node.js has
00:36 - provided a back better mechanism for us
00:40 - to use which is called piping so if you
00:43 - think about a website for example what
00:48 - it basically does is it takes the HTML
00:52 - page for example and just giving a very
00:55 - simple example so a server takes a HTML
01:00 - page and it first of all reads this HTML
01:04 - page and create for example writable
01:07 - stream and send it to a browser in which
01:10 - we can see this HTML page content right
01:14 - so this operation is really basic to us
01:18 - over whenever you are making a website
01:22 - for example so first of all let's see
01:25 - what is piping or what are pipes so a
01:29 - piping is a great mechanism in which you
01:32 - can read data from a source and write to
01:35 - a destination without managing the flow
01:38 - yourself right so in the previous video
01:42 - we have seen that we had to create a
01:45 - readable stream first from a file and
01:48 - then we have created a writable stream
01:51 - and then we were you know listening for
01:56 - the data event to write it to file using
02:00 - the writable stream and here also we can
02:04 - handle the ending of the reading right
02:08 - now
02:09 - the piping makes it really easy and
02:13 - it manages all these things by itself so
02:17 - a pipe method listens for the data event
02:21 - by itself and it automatically you know
02:24 - sends this you know chunk of data which
02:27 - we are reading to the file we want so
02:32 - how we can create a pipe so we still
02:35 - need here are readable stream and also a
02:39 - writable stream so we will leave these
02:42 - two lines of code here now in order to
02:44 - use pipe you can use pipe only with
02:48 - readable stream so you need to have an
02:50 - object of readable stream and then call
02:53 - a method called pipe ok and this pipe
02:56 - takes an argument which is a writable
02:59 - stream so you can just give this object
03:02 - here and then it's going to do the stop
03:07 - automatically search it's going to
03:09 - listen for the data event and it's not
03:12 - going to worry about or we don't have to
03:15 - worry about if the you know data is read
03:18 - slowly or fast or or handling the chunks
03:21 - of data right this pipe method is going
03:24 - to do it by itself so let's run our code
03:28 - and first of all I'm going to delete
03:30 - this right file because it's already
03:32 - existing I'm just going to delete this
03:35 - and now I'm going to save my code and
03:38 - I'm going to run it so let's run it
03:41 - so the code has run and you can see it
03:44 - has created this file again which is
03:47 - writable stream and which has the same
03:49 - content as the input file which we have
03:52 - ok so this makes things really simple
03:58 - for us right now in server so in the
04:03 - previous videos we have created a
04:05 - node.js server right so let's use the
04:10 - server code again to send this file
04:13 - stream or this data of the file using
04:17 - stream to a web browser
04:19 - ok so let's use first of all this HTTP
04:24 - module
04:25 - which is an inbuilt module which we have
04:27 - also seen in the previous videos right
04:30 - so require and then you can just write
04:34 - HTTP okay and then we have created a
04:38 - server in the previous videos so I'm
04:41 - going to just take that code which we
04:44 - have written in the previous videos for
04:47 - creating a server and we will just use
04:51 - this code okay so if you don't know how
04:54 - we can use this code just see the
04:58 - previous videos where I have shown you
05:00 - how to use this HTTP module right now in
05:04 - here what we want to do basically is
05:07 - whatever we read from the file or input
05:13 - file we want to send it to a browser
05:15 - right so let's first remove this code
05:20 - first of all right and let's run this
05:24 - code for the first time and it's going
05:27 - to print hello world for us right so I'm
05:30 - going to run this code and I'm going to
05:32 - open the browser and it's going to just
05:37 - print hello world which is the basic
05:39 - functionality of this code right now in
05:43 - order to send the content of this file
05:45 - we don't need a writable stream right
05:48 - because we are going to directly send
05:51 - the you know file content to the browser
05:56 - okay so what we are going to do is we
06:00 - will just take this readable stream and
06:03 - we will create it inside this server
06:06 - okay and using this read stream object
06:10 - instead of using this response dot end
06:14 - which was sending this data to the
06:18 - browser we can just use this read stream
06:21 - dot pipe and then we can just add this
06:27 - argument called ref or response argument
06:30 - here and everything will be done by
06:34 - itself and we are going to just remove
06:36 - this code here
06:38 - okay so what we have basically done is
06:42 - we have created a readable stream and
06:46 - then using pipe we are sending this
06:49 - stream to the response okay and let's
06:53 - run the code and let's see if it runs or
06:55 - not so I'm going to just stop my server
06:57 - and run it once again and I'm going to
06:59 - refresh my browser and you can see all
07:03 - the content of the file is on our
07:07 - browser page okay so let's repeat what
07:11 - we have done here so in this server we
07:15 - have created a really small sour which
07:18 - relations on local host on port 3,000
07:23 - you can see here and what it's going to
07:26 - do is it's going to just write to the
07:30 - you know whenever a request come it's
07:33 - going to write or give the response in a
07:36 - plain text so this content type is plain
07:40 - text it's not HTML because we are
07:42 - sending the plain text okay and if you
07:45 - want to send the HTML page you may you
07:49 - know rightly guess that we just need
07:52 - HTML text dot HTML here right and this
07:57 - we are going to see in the next video to
07:59 - send HTML to the browser using this code
08:03 - but right now we are using the plain
08:06 - text that's why the content type is text
08:08 - slash plain and then we are reading the
08:11 - file using the file stream and then we
08:14 - are just piping it to the browser using
08:18 - this response variable okay ooh
08:21 - piping makes it really easy for us to
08:24 - serve the you know whatever we are
08:28 - reading as a stream so I hope you have
08:32 - understood this basic concept I hope you
08:34 - have enjoyed this video please rate
08:35 - comment subscribe and bye for now

Cleaned transcript:

hello guys welcome to the next video on node.js tutorial for beginners in the last two videos we have been seeing how to use readable streams and writable streams in no chairs and in this video we will learn an important concept called piping in node.js with readable streams and writable streams now in no chairs or any server application writing and reading streams is so important and frequently use thing that node.js has provided a back better mechanism for us to use which is called piping so if you think about a website for example what it basically does is it takes the HTML page for example and just giving a very simple example so a server takes a HTML page and it first of all reads this HTML page and create for example writable stream and send it to a browser in which we can see this HTML page content right so this operation is really basic to us over whenever you are making a website for example so first of all let's see what is piping or what are pipes so a piping is a great mechanism in which you can read data from a source and write to a destination without managing the flow yourself right so in the previous video we have seen that we had to create a readable stream first from a file and then we have created a writable stream and then we were you know listening for the data event to write it to file using the writable stream and here also we can handle the ending of the reading right now the piping makes it really easy and it manages all these things by itself so a pipe method listens for the data event by itself and it automatically you know sends this you know chunk of data which we are reading to the file we want so how we can create a pipe so we still need here are readable stream and also a writable stream so we will leave these two lines of code here now in order to use pipe you can use pipe only with readable stream so you need to have an object of readable stream and then call a method called pipe ok and this pipe takes an argument which is a writable stream so you can just give this object here and then it's going to do the stop automatically search it's going to listen for the data event and it's not going to worry about or we don't have to worry about if the you know data is read slowly or fast or or handling the chunks of data right this pipe method is going to do it by itself so let's run our code and first of all I'm going to delete this right file because it's already existing I'm just going to delete this and now I'm going to save my code and I'm going to run it so let's run it so the code has run and you can see it has created this file again which is writable stream and which has the same content as the input file which we have ok so this makes things really simple for us right now in server so in the previous videos we have created a node.js server right so let's use the server code again to send this file stream or this data of the file using stream to a web browser ok so let's use first of all this HTTP module which is an inbuilt module which we have also seen in the previous videos right so require and then you can just write HTTP okay and then we have created a server in the previous videos so I'm going to just take that code which we have written in the previous videos for creating a server and we will just use this code okay so if you don't know how we can use this code just see the previous videos where I have shown you how to use this HTTP module right now in here what we want to do basically is whatever we read from the file or input file we want to send it to a browser right so let's first remove this code first of all right and let's run this code for the first time and it's going to print hello world for us right so I'm going to run this code and I'm going to open the browser and it's going to just print hello world which is the basic functionality of this code right now in order to send the content of this file we don't need a writable stream right because we are going to directly send the you know file content to the browser okay so what we are going to do is we will just take this readable stream and we will create it inside this server okay and using this read stream object instead of using this response dot end which was sending this data to the browser we can just use this read stream dot pipe and then we can just add this argument called ref or response argument here and everything will be done by itself and we are going to just remove this code here okay so what we have basically done is we have created a readable stream and then using pipe we are sending this stream to the response okay and let's run the code and let's see if it runs or not so I'm going to just stop my server and run it once again and I'm going to refresh my browser and you can see all the content of the file is on our browser page okay so let's repeat what we have done here so in this server we have created a really small sour which relations on local host on port 3,000 you can see here and what it's going to do is it's going to just write to the you know whenever a request come it's going to write or give the response in a plain text so this content type is plain text it's not HTML because we are sending the plain text okay and if you want to send the HTML page you may you know rightly guess that we just need HTML text dot HTML here right and this we are going to see in the next video to send HTML to the browser using this code but right now we are using the plain text that's why the content type is text slash plain and then we are reading the file using the file stream and then we are just piping it to the browser using this response variable okay ooh piping makes it really easy for us to serve the you know whatever we are reading as a stream so I hope you have understood this basic concept I hope you have enjoyed this video please rate comment subscribe and bye for now
