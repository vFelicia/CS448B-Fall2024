With timestamps:

00:00 - now before starting our object oriented
00:02 - programming journey in Python let's
00:05 - discuss about what is the difference
00:07 - between the procedural programming and
00:10 - the object-oriented programming so you
00:14 - will have the better idea why we use
00:17 - object-oriented programming now
00:19 - traditional programming languages such
00:22 - as C or Pascal were called procedural
00:26 - programming languages or structural
00:28 - programming languages where the basic
00:31 - unit was functions now programming in
00:35 - these type of procedural languages
00:38 - involves choosing a data structure and
00:42 - then designing the algorithm and then
00:46 - translating that algorithm into a code
00:49 - so if this sounds little bit confusing
00:52 - let me try to explain it with an example
00:55 - so let's say you have been given a task
00:58 - to create a program for a passenger who
01:02 - wants to travel from one place to the
01:05 - another place using a cab service so if
01:09 - we think from the point of view of
01:11 - procedural programming what we do in the
01:14 - procedural programming is we create some
01:18 - global data structure which holds the
01:22 - data so here for example we create some
01:25 - kind of data structure which can hold
01:28 - the data for example in case of a cab
01:31 - service which cap service is it or which
01:35 - type of cab is it and at what location
01:38 - this cab is standing all these kind of
01:41 - data we store in a desta structure in
01:44 - our global environment
01:47 - now after storing the data we design an
01:50 - algorithm so let's see what kind of
01:54 - algorithm we can develop in the
01:57 - procedural programming language for our
01:59 - cab booking service so this is a
02:02 - pseudocode which I have written so first
02:04 - of all the passenger will open the app
02:08 - from which he can book a cab and then he
02:12 - will book the
02:13 - and once the cab is booked he will wait
02:16 - for the cab and then once cab arrives he
02:20 - will sit in the cab and then he will
02:23 - reach to his or her destination and at
02:26 - the end he will pay the fare of the cab
02:29 - and this is the pseudocode of that
02:31 - algorithm and then we will translate
02:34 - this algorithm into actual code in
02:38 - procedural programming language now in
02:40 - these type of procedural programming
02:42 - languages we concentrate on creating the
02:46 - functions and the major drawback of
02:48 - using these functions is that data and
02:53 - operations on the data are separated
02:56 - that means we need a methodology to send
03:00 - this data to these functions so here we
03:05 - need to send this data which we have
03:08 - saved globally into these functions and
03:11 - these functions take this data either as
03:14 - argument or as a global variable and
03:17 - then perform some actions on this data
03:19 - and give you some result now these kind
03:23 - of functions are passive what do I mean
03:26 - by passive here that is these kind of
03:29 - function cannot hold any information
03:32 - inside them so once you give the data
03:35 - they are able to give you the result
03:38 - back after performing some operations
03:40 - but they cannot save or hold the state
03:45 - or the data so that if you want to use
03:49 - that data in some other place in your
03:51 - code then it will be very difficult
03:54 - using these kind of functions which you
03:57 - use in procedural programming now let's
03:59 - look at the object-oriented approach of
04:03 - doing things
04:04 - so in object-oriented programming
04:06 - languages like C++ or Java or Python the
04:11 - basic unit is class now if we take the
04:15 - same example of a passenger who wants to
04:18 - travel from one place to another using a
04:22 - cab service using object-oriented
04:24 - programming thinking which depends up
04:27 - on the creation of object we can create
04:31 - different kind of object for example for
04:34 - a cab we can create a class called cab
04:37 - and then we can create a class for cab
04:41 - driver and the third class we can create
04:44 - for a passenger okay so a class you can
04:48 - create for any real-life object it can
04:51 - be a car it can be a motorbike it can be
04:54 - a book or employee or a person so
04:57 - object-oriented programming allows us to
04:59 - create object so first of all what is a
05:02 - class so a class refers to a blueprint
05:05 - in which we can have data and methods
05:10 - okay
05:11 - so for example for our cab class what
05:15 - attributes this cab class can have for
05:19 - example a cab service which cab service
05:21 - we want to take what is the make of the
05:24 - cab it is it a Toyota or a BMW or a fox
05:29 - wagon cab at which location this cab is
05:33 - right now what is the number plate of
05:35 - that cab so the passenger can recognize
05:38 - this cab so all these things which I
05:42 - have written here are called data
05:46 - because they can hold some kind of data
05:49 - number plate has number plate data
05:51 - location have geolocation data may have
05:55 - the make data cap service can have data
05:59 - like uber or any other cab service and
06:02 - the other thing which at last can have
06:05 - are called method so earlier we have
06:08 - seen that we can create functions and
06:10 - when these functions you use inside a
06:13 - class they are called method ok so
06:17 - functions inside a class are called
06:20 - method now the data inside this object
06:23 - or class is called attributes or the
06:27 - member variables which can hold some
06:31 - data and using this class we can create
06:34 - object of the cab class which means we
06:39 - can create different or
06:41 - checked using a same class and how to
06:44 - create object using classes we will see
06:47 - in the next video in the real life
06:49 - example so don't worry if you don't
06:51 - understand how these things works I will
06:54 - give you a real-life example so you will
06:56 - be able to understand in a better way
06:59 - now what is an object an object is a
07:02 - software unit that combines data and
07:05 - methods ok so we have this data here and
07:09 - then we have the methods inside the
07:12 - class and object is able to combine both
07:16 - of them which is data with the methods
07:20 - now these object for example a cab
07:22 - object and the passenger object can
07:25 - exchange the data between them also so
07:29 - data is interchangeable between for
07:33 - example the passenger object and a cab
07:37 - object so let's rewind once again what
07:40 - we have learned about object-oriented
07:42 - programming so the basic unit in
07:45 - object-oriented programming is a class
07:48 - and at last refers to a blueprint which
07:52 - can have the data and methods now using
07:57 - a class we can create objects and what
08:00 - is an object object is an instance of a
08:04 - class and each object can have its own
08:07 - data and method and an object is able to
08:11 - store the state of some kinds so at
08:15 - which location this cab is right now so
08:18 - this is a state and an object is able to
08:22 - store at that state now in procedural
08:24 - programming if you remember there is no
08:27 - relation between the data and the method
08:30 - right we need to provide the data to the
08:33 - method which are separate entities in
08:36 - the procedural programming language now
08:39 - these data members are called
08:41 - attributes or member variables and these
08:45 - functions which you define inside a
08:47 - class are called methods and what are
08:50 - some of the key differences between
08:52 - procedural programming language
08:54 - and object-oriented programming language
08:57 - the first is the unit in procedural
08:59 - programming language is function and on
09:02 - the other hand in object-oriented
09:04 - programming the unit is class the second
09:07 - is the procedural programming
09:09 - concentrate on creating functions while
09:13 - object-oriented programming starts from
09:15 - isolating classes and then they can have
09:19 - data and methods inside it in procedural
09:24 - programming language the data and the
09:26 - functions are separate and in
09:29 - object-oriented programming language
09:31 - data and methods are not separate they
09:34 - are on the part of a single object of a
09:38 - class now if all this seems to be little
09:40 - confusing to you don't worry you are not
09:44 - alone and I will try to solve this
09:47 - confusion so let's create a class in
09:50 - Python so for that I will create a new
09:53 - project so let's create a new project in
09:56 - pycharm so just click on file here and
09:59 - then click on new project and then the
10:02 - project name I'm going to give here is
10:04 - oops and then I will just click on
10:07 - create and I will choose this option
10:11 - which says open in current window and
10:13 - also this option which is added to
10:16 - currently open the project which is
10:18 - going to create this project in this
10:21 - window itself which is already open so
10:24 - now you can see we have our empty
10:27 - project here and inside this project
10:29 - let's create a Python file so right
10:32 - click on the project and then new and
10:34 - then we are going to create a new file
10:36 - and let's create a class called car so
10:41 - I'm going to name the file name as car
10:44 - because we are going to create the car
10:47 - class now in order to create a class in
10:51 - Python you use a keyword class and then
10:56 - you give the name to your class so the
10:59 - class name in our case is car and then
11:02 - you give this colon and for example I
11:06 - write here
11:08 - a keyword called pass now when you write
11:11 - this keyword after the Declaration of a
11:15 - class this means that it is a empty
11:18 - class you can also use this pass keyword
11:22 - to create an empty method so this
11:25 - keyword pass is used to create an empty
11:29 - class or an empty method now here after
11:33 - the class declaration let's see how we
11:35 - can create an instance of a class so
11:38 - it's really easy to create an instance
11:40 - of a class so let's create a first
11:42 - object and I'm going to name it as Ford
11:45 - which is a car brand and then you use
11:48 - your car class name and use these
11:52 - parentheses here okay so this here Ford
11:56 - is an object or you can also say it's an
12:00 - instance of the class car in a similar
12:04 - way we can create multiple objects for
12:07 - example Honda is another car brand and
12:11 - you can create the Honda object using
12:15 - this class car once again you can create
12:18 - a new object for example Audie and then
12:22 - you can once again use this car class to
12:25 - create this object so what we have done
12:28 - till now we have created three object
12:31 - from that last car now in the previous
12:34 - video I told you that you can associate
12:37 - some data with your object so let's
12:41 - associate some data so for example Ford
12:44 - we can associate attribute called speed
12:49 - right so we can assign the speed for
12:53 - example 200 here for Honda we can assign
12:59 - speed let's say 220 and for Adi we can
13:04 - assign the speed let's say 250 so speed
13:08 - here is called the attribute and
13:10 - whenever you create an empty class using
13:13 - this pass keyword you can add these
13:16 - attributes on the fly so you can see we
13:20 - have added these actually
13:22 - buuuut after the declaration of the
13:25 - class and after the creation of the
13:28 - objects let's add some more attribute to
13:32 - these instances or the object so a car
13:35 - can have the color so I'm going to just
13:38 - write color and the food has let's say
13:43 - the red color and let me just copy and
13:47 - paste here and let's say the Honda have
13:51 - the blue color and we have the ADI of
13:57 - black color so once again color is an
14:01 - attribute here if you want to print
14:03 - these attribute you can use this print
14:06 - method and then for example we want to
14:09 - print the speed of Ford and the color of
14:14 - Ford then we can do it like this and
14:18 - let's run the code so in order to run
14:20 - this code first of all when you create a
14:22 - new project and a new python file you
14:25 - need to right click on this file and
14:28 - then click on run the file name whatever
14:32 - is your file name my file name was car
14:34 - so you can see now the result is printed
14:39 - here first is the speed and second is
14:42 - the color of an instance Ford similarly
14:46 - you can print the color and speed of
14:48 - Honda and Audi objects also now if you
14:52 - want to change some attribute it's also
14:55 - possible so let's say I want to change
14:57 - the speed of Ford objects so I'm going
15:01 - to use Ford dot speed once again and
15:05 - this time I want to assign 300 speed to
15:08 - this attribute let's say we also want to
15:11 - change the color of the four objects so
15:16 - I'm going to just use 4 dot color and
15:18 - this time I want to use the color blue
15:23 - here and let's once again we will try to
15:26 - print the color and speed of the object
15:29 - Ford and now you can see this result so
15:34 - before the speed was 200
15:36 - and the new speed is 300 for the object
15:39 - Ford and before the color was red and
15:42 - the new color is blue for this object
15:45 - Ford now if you have followed the last
15:47 - video this speed and color is the data
15:51 - so speed and color are the variables
15:53 - which holds some data inside them but
15:57 - still we haven't added any behavior or
16:00 - methods to our class car and that we
16:05 - will do in the next video now let's
16:07 - create a new class because understanding
16:10 - classes in any language is difficult so
16:14 - let me give you another example so this
16:18 - time I'm going to create a new Python
16:19 - class and I'm going to name this Python
16:22 - class as a rectangle and then press ok
16:27 - which is going to create this class and
16:29 - to create a class you already know you
16:31 - use the keyword and the name of the
16:34 - class and then the colon and we will
16:37 - also make this class an empty class
16:40 - using this path keyboard and in order to
16:43 - create an instance I'm going to just
16:45 - write correct one which is the first
16:50 - object using the rectangle class and
16:53 - then I'm going to create rect 2 which is
16:57 - the second object using this rectangle
17:00 - class and now what are the attributes
17:03 - which we can relate to the rectangle a
17:07 - rectangle have a width and the height so
17:11 - let's add the herebut and height so let
17:15 - me use the first object and let's say
17:17 - height is 24 the rectangle 1 and then we
17:21 - are going to use the second object and
17:24 - once again we are going to add the
17:27 - height for the second rectangle let's
17:31 - say the height of second rectangle is 30
17:33 - similarly we can add the width to the
17:37 - rectangle so width is equal to let's say
17:41 - it's 40 and right to object have the
17:46 - width let's say 10 so what we have done
17:49 - here
17:50 - created a rectangle class and then we
17:53 - have created two instances of the
17:56 - rectangle class correct one and rag2
17:59 - which are also called objects and then
18:02 - we have added some attributes to our
18:05 - objects which are height and width now
18:09 - let's say you want to calculate the area
18:10 - of these two rectangles I can use the
18:14 - print method and then what is the area
18:17 - of the rectangle it's the multiplication
18:20 - of the height and the width right so I
18:24 - can use this rectangle one object and
18:28 - then I can call the height and width of
18:32 - this object and this will give me the
18:35 - area of the rectangle one using this
18:40 - multiplication operator similarly I will
18:43 - do the same for the object to here and
18:47 - let's run the code and if you remember
18:49 - what we need to do if we create a new
18:51 - Python file we need to right-click on
18:54 - the file and then click on run right so
18:59 - once the file is running you can choose
19:02 - from here which file you want to run but
19:05 - at least once you need to right-click on
19:07 - the file and just click on run whatever
19:10 - filename you have so you can see the
19:13 - area of rectangle one is 800 and the
19:17 - area of rectangle two is 300 so this is
19:20 - how you can create a very simple class
19:23 - in Python in the next video I'm going to
19:26 - show you how to add behaviors to your
19:29 - class that means how to add methods to
19:31 - your class and how to use this method to
19:35 - manipulate this data which we have
19:37 - provided here in the form of attributes
19:40 - so stay tuned and please keep watching
19:43 - these videos and I will see you in the
19:45 - next video

Cleaned transcript:

now before starting our object oriented programming journey in Python let's discuss about what is the difference between the procedural programming and the objectoriented programming so you will have the better idea why we use objectoriented programming now traditional programming languages such as C or Pascal were called procedural programming languages or structural programming languages where the basic unit was functions now programming in these type of procedural languages involves choosing a data structure and then designing the algorithm and then translating that algorithm into a code so if this sounds little bit confusing let me try to explain it with an example so let's say you have been given a task to create a program for a passenger who wants to travel from one place to the another place using a cab service so if we think from the point of view of procedural programming what we do in the procedural programming is we create some global data structure which holds the data so here for example we create some kind of data structure which can hold the data for example in case of a cab service which cap service is it or which type of cab is it and at what location this cab is standing all these kind of data we store in a desta structure in our global environment now after storing the data we design an algorithm so let's see what kind of algorithm we can develop in the procedural programming language for our cab booking service so this is a pseudocode which I have written so first of all the passenger will open the app from which he can book a cab and then he will book the and once the cab is booked he will wait for the cab and then once cab arrives he will sit in the cab and then he will reach to his or her destination and at the end he will pay the fare of the cab and this is the pseudocode of that algorithm and then we will translate this algorithm into actual code in procedural programming language now in these type of procedural programming languages we concentrate on creating the functions and the major drawback of using these functions is that data and operations on the data are separated that means we need a methodology to send this data to these functions so here we need to send this data which we have saved globally into these functions and these functions take this data either as argument or as a global variable and then perform some actions on this data and give you some result now these kind of functions are passive what do I mean by passive here that is these kind of function cannot hold any information inside them so once you give the data they are able to give you the result back after performing some operations but they cannot save or hold the state or the data so that if you want to use that data in some other place in your code then it will be very difficult using these kind of functions which you use in procedural programming now let's look at the objectoriented approach of doing things so in objectoriented programming languages like C++ or Java or Python the basic unit is class now if we take the same example of a passenger who wants to travel from one place to another using a cab service using objectoriented programming thinking which depends up on the creation of object we can create different kind of object for example for a cab we can create a class called cab and then we can create a class for cab driver and the third class we can create for a passenger okay so a class you can create for any reallife object it can be a car it can be a motorbike it can be a book or employee or a person so objectoriented programming allows us to create object so first of all what is a class so a class refers to a blueprint in which we can have data and methods okay so for example for our cab class what attributes this cab class can have for example a cab service which cab service we want to take what is the make of the cab it is it a Toyota or a BMW or a fox wagon cab at which location this cab is right now what is the number plate of that cab so the passenger can recognize this cab so all these things which I have written here are called data because they can hold some kind of data number plate has number plate data location have geolocation data may have the make data cap service can have data like uber or any other cab service and the other thing which at last can have are called method so earlier we have seen that we can create functions and when these functions you use inside a class they are called method ok so functions inside a class are called method now the data inside this object or class is called attributes or the member variables which can hold some data and using this class we can create object of the cab class which means we can create different or checked using a same class and how to create object using classes we will see in the next video in the real life example so don't worry if you don't understand how these things works I will give you a reallife example so you will be able to understand in a better way now what is an object an object is a software unit that combines data and methods ok so we have this data here and then we have the methods inside the class and object is able to combine both of them which is data with the methods now these object for example a cab object and the passenger object can exchange the data between them also so data is interchangeable between for example the passenger object and a cab object so let's rewind once again what we have learned about objectoriented programming so the basic unit in objectoriented programming is a class and at last refers to a blueprint which can have the data and methods now using a class we can create objects and what is an object object is an instance of a class and each object can have its own data and method and an object is able to store the state of some kinds so at which location this cab is right now so this is a state and an object is able to store at that state now in procedural programming if you remember there is no relation between the data and the method right we need to provide the data to the method which are separate entities in the procedural programming language now these data members are called attributes or member variables and these functions which you define inside a class are called methods and what are some of the key differences between procedural programming language and objectoriented programming language the first is the unit in procedural programming language is function and on the other hand in objectoriented programming the unit is class the second is the procedural programming concentrate on creating functions while objectoriented programming starts from isolating classes and then they can have data and methods inside it in procedural programming language the data and the functions are separate and in objectoriented programming language data and methods are not separate they are on the part of a single object of a class now if all this seems to be little confusing to you don't worry you are not alone and I will try to solve this confusion so let's create a class in Python so for that I will create a new project so let's create a new project in pycharm so just click on file here and then click on new project and then the project name I'm going to give here is oops and then I will just click on create and I will choose this option which says open in current window and also this option which is added to currently open the project which is going to create this project in this window itself which is already open so now you can see we have our empty project here and inside this project let's create a Python file so right click on the project and then new and then we are going to create a new file and let's create a class called car so I'm going to name the file name as car because we are going to create the car class now in order to create a class in Python you use a keyword class and then you give the name to your class so the class name in our case is car and then you give this colon and for example I write here a keyword called pass now when you write this keyword after the Declaration of a class this means that it is a empty class you can also use this pass keyword to create an empty method so this keyword pass is used to create an empty class or an empty method now here after the class declaration let's see how we can create an instance of a class so it's really easy to create an instance of a class so let's create a first object and I'm going to name it as Ford which is a car brand and then you use your car class name and use these parentheses here okay so this here Ford is an object or you can also say it's an instance of the class car in a similar way we can create multiple objects for example Honda is another car brand and you can create the Honda object using this class car once again you can create a new object for example Audie and then you can once again use this car class to create this object so what we have done till now we have created three object from that last car now in the previous video I told you that you can associate some data with your object so let's associate some data so for example Ford we can associate attribute called speed right so we can assign the speed for example 200 here for Honda we can assign speed let's say 220 and for Adi we can assign the speed let's say 250 so speed here is called the attribute and whenever you create an empty class using this pass keyword you can add these attributes on the fly so you can see we have added these actually buuuut after the declaration of the class and after the creation of the objects let's add some more attribute to these instances or the object so a car can have the color so I'm going to just write color and the food has let's say the red color and let me just copy and paste here and let's say the Honda have the blue color and we have the ADI of black color so once again color is an attribute here if you want to print these attribute you can use this print method and then for example we want to print the speed of Ford and the color of Ford then we can do it like this and let's run the code so in order to run this code first of all when you create a new project and a new python file you need to right click on this file and then click on run the file name whatever is your file name my file name was car so you can see now the result is printed here first is the speed and second is the color of an instance Ford similarly you can print the color and speed of Honda and Audi objects also now if you want to change some attribute it's also possible so let's say I want to change the speed of Ford objects so I'm going to use Ford dot speed once again and this time I want to assign 300 speed to this attribute let's say we also want to change the color of the four objects so I'm going to just use 4 dot color and this time I want to use the color blue here and let's once again we will try to print the color and speed of the object Ford and now you can see this result so before the speed was 200 and the new speed is 300 for the object Ford and before the color was red and the new color is blue for this object Ford now if you have followed the last video this speed and color is the data so speed and color are the variables which holds some data inside them but still we haven't added any behavior or methods to our class car and that we will do in the next video now let's create a new class because understanding classes in any language is difficult so let me give you another example so this time I'm going to create a new Python class and I'm going to name this Python class as a rectangle and then press ok which is going to create this class and to create a class you already know you use the keyword and the name of the class and then the colon and we will also make this class an empty class using this path keyboard and in order to create an instance I'm going to just write correct one which is the first object using the rectangle class and then I'm going to create rect 2 which is the second object using this rectangle class and now what are the attributes which we can relate to the rectangle a rectangle have a width and the height so let's add the herebut and height so let me use the first object and let's say height is 24 the rectangle 1 and then we are going to use the second object and once again we are going to add the height for the second rectangle let's say the height of second rectangle is 30 similarly we can add the width to the rectangle so width is equal to let's say it's 40 and right to object have the width let's say 10 so what we have done here created a rectangle class and then we have created two instances of the rectangle class correct one and rag2 which are also called objects and then we have added some attributes to our objects which are height and width now let's say you want to calculate the area of these two rectangles I can use the print method and then what is the area of the rectangle it's the multiplication of the height and the width right so I can use this rectangle one object and then I can call the height and width of this object and this will give me the area of the rectangle one using this multiplication operator similarly I will do the same for the object to here and let's run the code and if you remember what we need to do if we create a new Python file we need to rightclick on the file and then click on run right so once the file is running you can choose from here which file you want to run but at least once you need to rightclick on the file and just click on run whatever filename you have so you can see the area of rectangle one is 800 and the area of rectangle two is 300 so this is how you can create a very simple class in Python in the next video I'm going to show you how to add behaviors to your class that means how to add methods to your class and how to use this method to manipulate this data which we have provided here in the form of attributes so stay tuned and please keep watching these videos and I will see you in the next video
