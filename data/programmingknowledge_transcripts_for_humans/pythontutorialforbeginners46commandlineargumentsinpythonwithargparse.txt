With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - patented rule for beginners in this
00:04 - video I'm going to show you how you can
00:05 - pass the command-line arguments to your
00:08 - Python script so to start with I have a
00:12 - script called my parser dot py and in
00:15 - order to pass the command-line arguments
00:18 - to this dot py file first of all we need
00:22 - to import a built-in module which is
00:25 - called arg parse module now using this
00:28 - our parse module we can parse the
00:32 - parameters which is passed using the
00:36 - command line to this script so let's see
00:39 - how we can parse those parameters so
00:43 - first of all I'm going to declare a
00:45 - variable called parser and then I'm
00:49 - going to use this arc parse keyword
00:52 - which we have imported and there is a
00:54 - special class here which is called
00:56 - argument parser which we are going to
00:59 - use now this argument parser class takes
01:02 - an optional parameter which is the
01:05 - description which we will see little bit
01:08 - later so the first step is to initialize
01:10 - your parser the second step is to add
01:14 - the parameters which you want to parse
01:18 - so this we will see in a bit but let's
01:22 - see the next step which is actually
01:24 - parsing the arguments which is passed
01:27 - using the command-line so let me declare
01:30 - one more variable which will be our
01:32 - arguments which we want to parse and
01:35 - then we will use this parser variable
01:38 - which we have created and call the
01:40 - method called parse odd so now once you
01:44 - have used this method pass args with
01:47 - this parser variable then you will have
01:50 - all your arguments into this odds
01:54 - variable so let's run this script and
01:57 - let's see what happens when we run this
01:59 - script so in order to open the terminal
02:01 - in PyCharm you can just click on this
02:04 - option which says terminal and this is
02:07 - going to open the terminal in the
02:09 - pycharm ide now it depends in which
02:12 - project you are working in
02:13 - so if you see some other location which
02:16 - is opened using this terminal you just
02:19 - need to provide the part where your
02:21 - project is so I'm going to right click
02:22 - on my file and then I'm going to copy
02:26 - the path of this file so right click and
02:28 - copy part and I will just do CD and I
02:32 - will paste this part which I have copied
02:35 - and I will remove the name of the file
02:37 - because I just want to CD to the
02:39 - directory in which I'm working in so now
02:43 - I'm in the directory in which this my
02:46 - parser dot py file is present now in
02:49 - order to run this Python script I can
02:51 - use this Python keyword and then the
02:54 - name of my file which is my parser
02:57 - dot py file now whenever you import the
03:00 - arc pass module and you initialize this
03:03 - module there is a special help parameter
03:06 - which is available so you can write
03:09 - minus H here and then press enter and
03:12 - you will see that this help parameter is
03:16 - automatically present whenever you
03:19 - import this arc pass module and
03:21 - initialize it so this is one way of
03:24 - running your script you can also run
03:26 - your script on your Windows or Linux
03:28 - terminal the process is same so you need
03:32 - to CD to the directory in which you are
03:33 - working in so I'm going to once again
03:35 - copy the path and paste it here and once
03:40 - I'm in this directory I will just write
03:43 - Python and the name of the script which
03:46 - is my parser and then - H which is for
03:50 - help and it's going to give me the same
03:53 - kind of result so you can run your
03:55 - python script either on the windows
03:57 - command prompt or in the pycharm the
04:00 - choice is totally yours so I'm going to
04:02 - use this pycharm terminal so let me
04:05 - minimize this terminal for now now as I
04:08 - said you can pass some argument here in
04:11 - the argument parser class so the
04:15 - argument which you can provide here is
04:16 - that description which is the
04:18 - description you want to give whenever
04:21 - somebody runs this script so this is
04:23 - going to be the description whenever you
04:25 - run a your file
04:27 - on the terminal so I'm going to once
04:28 - again run this Python file and you can
04:32 - see the description is printed here now
04:35 - now how to pass the command-line
04:36 - arguments so you can pass two kinds of
04:40 - arguments as the command-line arguments
04:43 - one are called positional arguments and
04:46 - other are called optional arguments so
04:50 - first of all we will see how to pass the
04:52 - positional arguments so in order to pass
04:55 - the positional argument you use your
04:57 - parser variable and then call a method
05:00 - called add argument here and first of
05:04 - all inside the add argument you gave the
05:06 - name of your argument for example I want
05:09 - the user to provide two numbers and I
05:11 - want to perform some mathematical
05:13 - operations on these two numbers so I can
05:16 - store these two numbers into some
05:18 - variables and these variables I can
05:21 - define here so the first variable name I
05:23 - want to provide here is num1 and then as
05:28 - the second argument you provide the help
05:30 - parameter so in the help what you do is
05:33 - you provide some help about the argument
05:36 - which you want to receive from the user
05:40 - in a same way I can provide the number
05:42 - two argument and I can just change the
05:45 - name of the argument to and the help
05:48 - description of argument two now the
05:51 - third parameter or argument which I want
05:54 - to provide using command line is the
05:56 - operation so let's say we want that user
06:00 - should provide some kind of mathematical
06:02 - operations to work with so in the help I
06:06 - can just write provide operator so these
06:09 - are the three argument which I want the
06:11 - user to provide now once these three
06:14 - arguments are provided by the users
06:16 - these three arguments will be parsed
06:18 - using this function and then all these
06:21 - three argument lists will be assigned to
06:24 - this args variable so we can just print
06:27 - the value of this arg variable and let's
06:30 - see what is the content inside the arcs
06:33 - so i'm going to open the terminal once
06:35 - again so after the Python keyword and
06:38 - the name of your script you provide the
06:41 - most number which is let's say 80 for
06:44 - the second number let's say it's 41 and
06:48 - the operator so let's say I want to
06:50 - provide the operator plus to add these
06:53 - two numbers and then I'm going to press
06:55 - ENTER and you will see this print
06:58 - statement is going to print the value of
07:01 - number one which is 84 the value of
07:05 - number two which is 41 and the value of
07:09 - operation which is plus here you will
07:13 - also observe that all these three
07:15 - numbers are present in the form of
07:18 - string so in order to work on these
07:21 - numbers we need to convert these numbers
07:24 - first into a float value or the integer
07:27 - value and then only we will be able to
07:29 - work on these numbers so how we can
07:33 - provide the type of these two numbers so
07:37 - that our script understands that these
07:40 - are the numbers and not the strings so
07:42 - the way in which you provide the type of
07:44 - the argument is using the type keyword
07:49 - here and then you provide whatever type
07:51 - you want for your argument or the
07:55 - parameter so here I have written type is
07:57 - equal to float and in the second
08:00 - argument also I have written type is
08:02 - equal to float and by default the type
08:05 - is string so if you don't provide any
08:07 - type it's a string so now we have
08:09 - provided the type to our first two
08:11 - numbers and let's run the script once
08:14 - again so now you will see that these
08:17 - values are no longer string values but
08:21 - now they are some float values also
08:24 - whenever you run the script which - H
08:28 - keyword which is the help keyword it's
08:31 - going to show that these are the
08:33 - positional arguments which is required
08:36 - by the script which is number one number
08:39 - two and operation and also we can use -
08:43 - H as the help and also it's going to
08:46 - give us the description of this script
08:48 - which we have provided here so now we
08:51 - can perform some mathematical operations
08:53 - on the R
08:55 - humans so let's perform some
08:56 - mathematical operations on the arguments
08:58 - so we can extract these argument using
09:02 - the odds keyword and then calling the
09:04 - name of the variable which we have
09:06 - provided so arcs dot number one is going
09:09 - to give you the value of number one so
09:12 - what I want to do here is I want to know
09:14 - the operation first of all so arcs dot
09:17 - operation and if this operation is equal
09:20 - to plus then I will just add these two
09:25 - numbers so I'm going to just say args
09:27 - dot num1 plus r dot number two now after
09:32 - adding these two numbers I need to save
09:34 - these numbers into a variable so let's
09:36 - create a variable called result here and
09:40 - I will initialize this result by none so
09:43 - initial value of result is none and then
09:45 - we will assign the addition of the two
09:47 - numbers to the result parameter and then
09:50 - at the end we will just print the value
09:53 - of the result and the same I will do for
09:56 - the other operations also so let's
09:58 - define some more operations second
10:01 - operation I want to provide here is the
10:03 - subtraction third operation I want to
10:05 - provide here is the multiplication and
10:08 - let's say fourth argument I want to
10:10 - provide here is the power of operation
10:13 - so here I can use inbuilt function which
10:17 - is Pio W and then I will just pass the
10:20 - first number as the first parameter so
10:23 - arcs dot num1 and the second number as
10:27 - the second parameter so now let's run
10:29 - the script once again and let's see what
10:31 - happens when we run this script once
10:34 - again so I'm going to provide the same
10:36 - parameters 84 forty-one and operation
10:39 - classier and then press Enter
10:42 - and you will see the result here is the
10:45 - addition of these two numbers because
10:48 - our plus condition is matte for the
10:51 - operation and then it's going to just
10:53 - add these two numbers and print the
10:55 - result we can make this result a little
10:59 - bit more sensible by just saying this is
11:02 - our result so I'm going to just say
11:04 - result coolin and then provide the comma
11:07 - here and
11:08 - once again let's run the same script
11:10 - with the minus operation this time so
11:13 - I'm going to provide the minus operation
11:15 - now and then press ENTER and it's going
11:17 - to still give me the addition this is
11:19 - strange because I think I have done some
11:23 - mistake here which is I haven't provided
11:26 - or changed these operators from here so
11:29 - in the case of - I need to provide the -
11:33 - here and in the case of multiplication I
11:35 - need to provide the Asterix here so
11:37 - let's run the code or script once again
11:40 - with - and now you will see as a result
11:44 - you will see the subtraction of these
11:47 - two numbers let's run the script with P
11:50 - or W and then press Enter it's going to
11:53 - give me the power of operation of these
11:55 - two numbers so this is how you can
11:57 - provide the positional parameters now as
12:01 - the name suggests these are the
12:02 - positional parameters that means every
12:06 - parameter have its own position and this
12:09 - position is defined by the Declaration
12:12 - here so the first position is for the
12:15 - number one second position is for number
12:17 - two and the third position is for this
12:21 - operation parameter so if you change the
12:24 - position for example I will provide the
12:27 - plus operator first and then these two
12:31 - numbers this will give me an error and
12:33 - it will say that I was expecting a
12:37 - number as the first argument but you
12:40 - have provided some string parameter here
12:42 - also if you don't provide any parameter
12:45 - so I'm going to just say first two
12:48 - numbers I will provide but operations I
12:51 - haven't defined then also it's going to
12:53 - give me an error and this will say that
12:56 - operation is not defined because we
12:58 - haven't defined any operation here so
13:01 - it's going to give us an error so there
13:04 - is one way of solving this error which
13:06 - is by providing the default value and in
13:09 - order to provide the default value you
13:11 - use the keyboard default and then
13:13 - provide the value of it so let's say by
13:16 - default the operation is plus always and
13:20 - when I run this code once again
13:22 - it's going to still give me this error
13:24 - because these are the positional
13:27 - arguments we cannot change the position
13:30 - of this argument and we cannot provide
13:33 - the optional values here and that's
13:36 - where the optional parameters comes in
13:39 - so using these optional parameters you
13:42 - can provide the optional values so let
13:44 - me show you how you can provide the
13:46 - optional parameters so the way you
13:48 - provide the optional parameters is by
13:51 - simply adding double hyphen symbol in
13:54 - front of your parameters so I have
13:58 - provided double hyphen symbol in front
14:00 - of each and every argument which is
14:03 - provided to the script and let's go to
14:05 - the terminal once again and this time we
14:08 - need to provide the name of the
14:11 - parameter which is - - num1 space the
14:16 - value of it for example 80 and then we
14:19 - need to provide the second number which
14:21 - is - - num2 and then after the space the
14:25 - value of number 2 and let's say I don't
14:27 - want to provide the operation now and
14:30 - when I press ENTER here it's still going
14:32 - to give me the result which is plus
14:36 - because now we have the default value of
14:39 - operation which is + and if I don't
14:42 - provide the value using these command
14:46 - line arguments then the default value of
14:49 - this operation will be taken which is +
14:52 - if we provide any argument here so - -
14:56 - let's say operation and we will provide
14:59 - the value of operation let's say - here
15:02 - that is going to give us the subtraction
15:05 - of these two values so whatever argument
15:08 - you will provide here the default value
15:11 - is overwritten by that value so this is
15:14 - how you can use the optional parameters
15:16 - and in order to use the optional
15:18 - parameters you also need to give the
15:22 - name of your optional parameters now
15:24 - whenever you use the optional parameters
15:27 - it depends upon you at which position
15:29 - you want to use these optional
15:32 - parameters so I can use foreign
15:35 - example number one at first position
15:38 - operation at the second position let's
15:41 - say operation is multiply now and then I
15:45 - will provide the number two at the third
15:47 - position it doesn't matter now because
15:51 - the position is irrelevant here because
15:55 - we are providing the name of the
15:57 - variable and then the value so value
16:00 - will be passed using the name variable
16:03 - and not by the position now there is one
16:06 - more notation which you can use with
16:08 - these optional parameters and this is
16:11 - the short form of whatever parameter
16:15 - name you want to give so let's say I
16:18 - want to give n as the number one and
16:21 - let's say I want to give I as number two
16:24 - and for operation I want to provide this
16:27 - letter O so this is the short form of
16:30 - these three values so n is for number
16:34 - one I is for number two and O is for
16:37 - operation and also in front of each and
16:40 - every letter here we need to provide a
16:43 - single - so either you can provide this
16:46 - kind of notation with explanatory
16:49 - keyword and double - or a single letter
16:53 - and a single - in front of it so now in
16:57 - order to use this kind of notation what
16:59 - I can do here is first of all let me
17:01 - call Python and the name of my script
17:04 - and let's say first of all we call the
17:07 - help and you will see this helps shows
17:10 - this letter also which is - H or help
17:14 - and for our parameters we have - N or
17:18 - the number one - I or number two or - o
17:23 - or operation so the way we provide these
17:26 - shorthand notation is we just need to
17:28 - write the name of the notation which is
17:31 - - n for number one let's provide the
17:34 - value of number one and - I for number
17:38 - two so you use this equal to symbol in
17:40 - between the value and your shorthand
17:44 - notation not the space so this time I am
17:47 - using the equals to symbol
17:49 - so I equals 70 and the value of minus o
17:54 - is equal to let's say plus this time and
17:57 - then press ENTER and it's going to give
18:00 - you the addition of these two numbers so
18:02 - for this shorthand notation you use the
18:05 - equal to symbol not the space in between
18:07 - the name and the value so this is how
18:11 - you can provide the command-line
18:12 - arguments to your Python script I hope
18:15 - you have enjoyed this video and I will
18:17 - see you in the next video
18:29 - you

Cleaned transcript:

hey guys welcome to the next video on patented rule for beginners in this video I'm going to show you how you can pass the commandline arguments to your Python script so to start with I have a script called my parser dot py and in order to pass the commandline arguments to this dot py file first of all we need to import a builtin module which is called arg parse module now using this our parse module we can parse the parameters which is passed using the command line to this script so let's see how we can parse those parameters so first of all I'm going to declare a variable called parser and then I'm going to use this arc parse keyword which we have imported and there is a special class here which is called argument parser which we are going to use now this argument parser class takes an optional parameter which is the description which we will see little bit later so the first step is to initialize your parser the second step is to add the parameters which you want to parse so this we will see in a bit but let's see the next step which is actually parsing the arguments which is passed using the commandline so let me declare one more variable which will be our arguments which we want to parse and then we will use this parser variable which we have created and call the method called parse odd so now once you have used this method pass args with this parser variable then you will have all your arguments into this odds variable so let's run this script and let's see what happens when we run this script so in order to open the terminal in PyCharm you can just click on this option which says terminal and this is going to open the terminal in the pycharm ide now it depends in which project you are working in so if you see some other location which is opened using this terminal you just need to provide the part where your project is so I'm going to right click on my file and then I'm going to copy the path of this file so right click and copy part and I will just do CD and I will paste this part which I have copied and I will remove the name of the file because I just want to CD to the directory in which I'm working in so now I'm in the directory in which this my parser dot py file is present now in order to run this Python script I can use this Python keyword and then the name of my file which is my parser dot py file now whenever you import the arc pass module and you initialize this module there is a special help parameter which is available so you can write minus H here and then press enter and you will see that this help parameter is automatically present whenever you import this arc pass module and initialize it so this is one way of running your script you can also run your script on your Windows or Linux terminal the process is same so you need to CD to the directory in which you are working in so I'm going to once again copy the path and paste it here and once I'm in this directory I will just write Python and the name of the script which is my parser and then H which is for help and it's going to give me the same kind of result so you can run your python script either on the windows command prompt or in the pycharm the choice is totally yours so I'm going to use this pycharm terminal so let me minimize this terminal for now now as I said you can pass some argument here in the argument parser class so the argument which you can provide here is that description which is the description you want to give whenever somebody runs this script so this is going to be the description whenever you run a your file on the terminal so I'm going to once again run this Python file and you can see the description is printed here now now how to pass the commandline arguments so you can pass two kinds of arguments as the commandline arguments one are called positional arguments and other are called optional arguments so first of all we will see how to pass the positional arguments so in order to pass the positional argument you use your parser variable and then call a method called add argument here and first of all inside the add argument you gave the name of your argument for example I want the user to provide two numbers and I want to perform some mathematical operations on these two numbers so I can store these two numbers into some variables and these variables I can define here so the first variable name I want to provide here is num1 and then as the second argument you provide the help parameter so in the help what you do is you provide some help about the argument which you want to receive from the user in a same way I can provide the number two argument and I can just change the name of the argument to and the help description of argument two now the third parameter or argument which I want to provide using command line is the operation so let's say we want that user should provide some kind of mathematical operations to work with so in the help I can just write provide operator so these are the three argument which I want the user to provide now once these three arguments are provided by the users these three arguments will be parsed using this function and then all these three argument lists will be assigned to this args variable so we can just print the value of this arg variable and let's see what is the content inside the arcs so i'm going to open the terminal once again so after the Python keyword and the name of your script you provide the most number which is let's say 80 for the second number let's say it's 41 and the operator so let's say I want to provide the operator plus to add these two numbers and then I'm going to press ENTER and you will see this print statement is going to print the value of number one which is 84 the value of number two which is 41 and the value of operation which is plus here you will also observe that all these three numbers are present in the form of string so in order to work on these numbers we need to convert these numbers first into a float value or the integer value and then only we will be able to work on these numbers so how we can provide the type of these two numbers so that our script understands that these are the numbers and not the strings so the way in which you provide the type of the argument is using the type keyword here and then you provide whatever type you want for your argument or the parameter so here I have written type is equal to float and in the second argument also I have written type is equal to float and by default the type is string so if you don't provide any type it's a string so now we have provided the type to our first two numbers and let's run the script once again so now you will see that these values are no longer string values but now they are some float values also whenever you run the script which H keyword which is the help keyword it's going to show that these are the positional arguments which is required by the script which is number one number two and operation and also we can use H as the help and also it's going to give us the description of this script which we have provided here so now we can perform some mathematical operations on the R humans so let's perform some mathematical operations on the arguments so we can extract these argument using the odds keyword and then calling the name of the variable which we have provided so arcs dot number one is going to give you the value of number one so what I want to do here is I want to know the operation first of all so arcs dot operation and if this operation is equal to plus then I will just add these two numbers so I'm going to just say args dot num1 plus r dot number two now after adding these two numbers I need to save these numbers into a variable so let's create a variable called result here and I will initialize this result by none so initial value of result is none and then we will assign the addition of the two numbers to the result parameter and then at the end we will just print the value of the result and the same I will do for the other operations also so let's define some more operations second operation I want to provide here is the subtraction third operation I want to provide here is the multiplication and let's say fourth argument I want to provide here is the power of operation so here I can use inbuilt function which is Pio W and then I will just pass the first number as the first parameter so arcs dot num1 and the second number as the second parameter so now let's run the script once again and let's see what happens when we run this script once again so I'm going to provide the same parameters 84 fortyone and operation classier and then press Enter and you will see the result here is the addition of these two numbers because our plus condition is matte for the operation and then it's going to just add these two numbers and print the result we can make this result a little bit more sensible by just saying this is our result so I'm going to just say result coolin and then provide the comma here and once again let's run the same script with the minus operation this time so I'm going to provide the minus operation now and then press ENTER and it's going to still give me the addition this is strange because I think I have done some mistake here which is I haven't provided or changed these operators from here so in the case of I need to provide the here and in the case of multiplication I need to provide the Asterix here so let's run the code or script once again with and now you will see as a result you will see the subtraction of these two numbers let's run the script with P or W and then press Enter it's going to give me the power of operation of these two numbers so this is how you can provide the positional parameters now as the name suggests these are the positional parameters that means every parameter have its own position and this position is defined by the Declaration here so the first position is for the number one second position is for number two and the third position is for this operation parameter so if you change the position for example I will provide the plus operator first and then these two numbers this will give me an error and it will say that I was expecting a number as the first argument but you have provided some string parameter here also if you don't provide any parameter so I'm going to just say first two numbers I will provide but operations I haven't defined then also it's going to give me an error and this will say that operation is not defined because we haven't defined any operation here so it's going to give us an error so there is one way of solving this error which is by providing the default value and in order to provide the default value you use the keyboard default and then provide the value of it so let's say by default the operation is plus always and when I run this code once again it's going to still give me this error because these are the positional arguments we cannot change the position of this argument and we cannot provide the optional values here and that's where the optional parameters comes in so using these optional parameters you can provide the optional values so let me show you how you can provide the optional parameters so the way you provide the optional parameters is by simply adding double hyphen symbol in front of your parameters so I have provided double hyphen symbol in front of each and every argument which is provided to the script and let's go to the terminal once again and this time we need to provide the name of the parameter which is num1 space the value of it for example 80 and then we need to provide the second number which is num2 and then after the space the value of number 2 and let's say I don't want to provide the operation now and when I press ENTER here it's still going to give me the result which is plus because now we have the default value of operation which is + and if I don't provide the value using these command line arguments then the default value of this operation will be taken which is + if we provide any argument here so let's say operation and we will provide the value of operation let's say here that is going to give us the subtraction of these two values so whatever argument you will provide here the default value is overwritten by that value so this is how you can use the optional parameters and in order to use the optional parameters you also need to give the name of your optional parameters now whenever you use the optional parameters it depends upon you at which position you want to use these optional parameters so I can use foreign example number one at first position operation at the second position let's say operation is multiply now and then I will provide the number two at the third position it doesn't matter now because the position is irrelevant here because we are providing the name of the variable and then the value so value will be passed using the name variable and not by the position now there is one more notation which you can use with these optional parameters and this is the short form of whatever parameter name you want to give so let's say I want to give n as the number one and let's say I want to give I as number two and for operation I want to provide this letter O so this is the short form of these three values so n is for number one I is for number two and O is for operation and also in front of each and every letter here we need to provide a single so either you can provide this kind of notation with explanatory keyword and double or a single letter and a single in front of it so now in order to use this kind of notation what I can do here is first of all let me call Python and the name of my script and let's say first of all we call the help and you will see this helps shows this letter also which is H or help and for our parameters we have N or the number one I or number two or o or operation so the way we provide these shorthand notation is we just need to write the name of the notation which is n for number one let's provide the value of number one and I for number two so you use this equal to symbol in between the value and your shorthand notation not the space so this time I am using the equals to symbol so I equals 70 and the value of minus o is equal to let's say plus this time and then press ENTER and it's going to give you the addition of these two numbers so for this shorthand notation you use the equal to symbol not the space in between the name and the value so this is how you can provide the commandline arguments to your Python script I hope you have enjoyed this video and I will see you in the next video you
