With timestamps:

00:00 - hey what's up guys welcome back to our
00:01 - YouTube channel and welcome to this
00:03 - video this is John from programming
00:05 - knowledge and in this video guys we're
00:08 - going to discuss in I'm gonna teach you
00:10 - how to implement functions in our C
00:12 - program so basically again c function is
00:16 - a self-contained block statements that
00:19 - can be executed repeatedly whenever we
00:21 - need it so if you think about it it is
00:25 - just you know a group of statements that
00:27 - we could call and we can use repeatedly
00:31 - within our C program so in this
00:34 - particular video guys we're going to
00:36 - discuss the benefits of using the
00:38 - functions in C program we will also
00:42 - discuss two types of functions in C also
00:47 - the parts of function the function
00:51 - prototype the function definition and of
00:54 - course we're going to discuss also how
00:58 - to call each function inside our C
01:00 - program and lastly we will implement a
01:03 - basic program to illustrate the addition
01:06 - of two numbers using user-defined
01:09 - function so if you're excited guys
01:11 - please make sure to watch the full video
01:13 - you will learn more in this particular
01:16 - video tutorial and by the way guys if
01:19 - you are new here in our YouTube channel
01:21 - and you like content about programming
01:23 - so go ahead make sure to subscribe and
01:26 - press the notification bell so you'll
01:29 - get updated whenever we have a new
01:30 - upload regarding different programming's
01:32 - or different topics so we have topics
01:35 - Python Java Java FX C programming and
01:39 - many many other topics regarding
01:42 - programming so now let's try to talk
01:45 - about benefits of using function in C so
01:49 - there are a lot of functions that you
01:51 - know we could associate in using
01:54 - function inside our C program so the
01:57 - first one is with gelareh t so when we
02:01 - are using functions it could provide
02:03 - modularity in our code so it means that
02:08 - we could you know define different
02:09 - functions we could really call our
02:12 - functions
02:13 - and we could call this particular
02:17 - function if we need it or we need to
02:20 - execute certain statements and of course
02:23 - guys the function also provides you
02:25 - reusable code meaning it will save us a
02:29 - lot of space and you know it could be
02:33 - our code could be you know read more
02:36 - readable by using this particular
02:39 - function feature so that's readable or
02:43 - usable code and then in large programs
02:51 - debugging in editing tasks is easy with
02:54 - the use of functions so functions make
02:58 - it easy for us to implement our programs
03:02 - so the program can be modular eyes into
03:05 - smaller parts that's what I have said
03:08 - earlier that we could you know develop
03:10 - certain modules inside our C program and
03:13 - then we could call that particular
03:15 - module or statements or group of
03:17 - statements if we need in a particular
03:20 - situation and number the next one is a
03:25 - separate function independently can be
03:28 - developed according to the need so so
03:30 - for example guess we could group our
03:32 - statements depending on the need or you
03:35 - know depending on the the function or or
03:38 - the purpose of that statement so we
03:41 - could group that statements and place it
03:44 - inside our C function so actually guys
03:47 - there are two types of functions in C so
03:50 - the first one is let me type it here
03:55 - type of functions we have the first one
04:00 - built-in function okay so built-in
04:07 - function of course the system provided
04:10 - this functions and stored in the library
04:13 - therefore it is called library functions
04:17 - so we have like we are using scanf
04:21 - printf starck strcpy still
04:26 - and WR strcmp.c our land still are
04:32 - taught and many more functions that are
04:35 - already available for us whenever we try
04:38 - to run a program so from the previous
04:41 - tutorials we have used the printf so as
04:44 - you can see this particular function we
04:46 - did not implement this the system
04:50 - provided it for us the printf and this
04:52 - particular function will let us display
04:56 - certain objects or statements that we
05:00 - want is we want to display inside our C
05:03 - program so to use this functions you
05:07 - just need to include the appropriate C
05:10 - header files so that's why we have here
05:12 - the include statement at the top of our
05:16 - program so basically we're including all
05:19 - the necessary function that we could use
05:22 - inside our C program and of course guys
05:26 - the the second type of method is what we
05:32 - called the user-defined functions
05:36 - user-defined functions okay
05:41 - so user define user defined functions
05:44 - these are the functions that are defined
05:46 - by the user at the time writing the
05:49 - program so that's basically us or the
05:52 - programmer that you know define the
05:57 - functions okay and then of course the
06:00 - same with the built in function because
06:03 - you know we didn't use this particular
06:05 - functions inside our C program now there
06:09 - are there are also parts of our function
06:12 - in C programming language we have the
06:16 - function declaration we also have the
06:22 - definition and we also have the function
06:27 - call so this is basically the actual
06:32 - slope of the function we have the
06:35 - function declaration declaration and
06:38 - then we have the definition
06:40 - of course dysfunctional if you want to
06:43 - use that particular function so we have
06:48 - here for example syntax for function
06:52 - declaration so we could this will be the
06:58 - function declaration this is just an
07:03 - example guys on how you can declare in a
07:06 - certain function so the syntax for that
07:10 - is they too tight and then function name
07:14 - and then of course open and close
07:18 - parenthesis and then in here you can
07:21 - specify the parameter list okay or the
07:25 - variables that we want to use inside
07:27 - this particular function so our example
07:32 - of that is like this in which is the
07:36 - data type and of course addition which
07:39 - is the name of our function so addition
07:44 - and then the return type is int and then
07:47 - of course the list parameters and in
07:50 - this case we don't have any parameter in
07:53 - this particular function addition so we
07:56 - also have the function definition this
07:58 - is actually what the actual function
08:03 - would look like so this will be function
08:07 - declaration or I mean function
08:09 - definition okay
08:12 - so we could this the basic centers to
08:16 - this is return type and then functioning
08:23 - and then function arguments and then
08:31 - curly braces so it should include the
08:36 - closed or open and close curly braces
08:38 - and then inside here is the body of the
08:41 - function or simply the statements that
08:45 - we want to execute inside this
08:47 - particular function so whatever we want
08:49 - to call this function this will be the
08:53 - statement
08:54 - that you know would be executed inside
08:57 - this particular function so in order for
09:00 - us to call a function inside our C
09:03 - program we just need to specify the
09:07 - method name and of course we need to
09:10 - supply parameters if there's a if there
09:14 - are any and we would also need to
09:17 - specify the return type of our function
09:20 - so now let's try to implement a simple
09:23 - program that you know the codex
09:25 - illustrate the addition of two numbers
09:29 - using user-defined function so we have
09:33 - here the main function right and then in
09:36 - here after the main or after the closing
09:39 - curly brace of our main function we
09:41 - could create we could create our own
09:45 - function right here let me close this
09:49 - first so you can you know see better so
09:53 - we could add a function here returning
09:58 - the total of two numbers a so we could
10:04 - declare it like this in and then
10:06 - addition open and close parentheses and
10:13 - then open and close curly braces and of
10:16 - course guys as I've said this is this
10:18 - will be the body of our function so in
10:20 - here we could define local variables
10:27 - right so local variables so for example
10:35 - we have we have in num1 equals 10 and
10:40 - then you know 2 equals 5
10:44 - wait so these are local variables
10:47 - meaning these are the variables that are
10:51 - declared and defined inside the addition
10:54 - method or function right so we can say
10:57 - here return and then num1 plus num2 okay
11:04 - so the
11:06 - the statement that we want to execute
11:07 - whenever we try to call the addition
11:11 - method learning function so inside our
11:15 - main function we could call this method
11:19 - addition so we could declare a variable
11:22 - here in answer and then we could say
11:26 - answer equals and then the addition so
11:32 - basically whatever the return value of
11:35 - this addition method it will be assigned
11:38 - into our answer variable and of course
11:42 - we could print or display this
11:45 - particular value so we can say the total
11:50 - two numbers yes then the format
11:56 - specifier we're just you know percent D
11:58 - and then the answer which has the answer
12:05 - sorry one okay so we could you know
12:08 - build and run our application
12:10 - application and then we have here the
12:15 - output the total of two numbers is 58 so
12:21 - that's how the function works and as you
12:24 - can see here we have defined our
12:26 - function with these statements inside
12:30 - our C function to return the total of
12:32 - the number one in number two and then we
12:36 - said our main function we have declared
12:39 - the answer and then the type is in of
12:43 - course because the int is should
12:46 - correspond to the return type of this
12:48 - particular function and then answer
12:50 - equals the addition and then the last
12:54 - thing that we did here is to display the
12:58 - total of two numbers and in this case
13:01 - ten and five which makes eight you know
13:06 - the value or the output is 15 so I think
13:10 - that's all there is to it guys for this
13:12 - tutorial tutorial if you are you know
13:15 - questions regarding this please let me
13:17 - know in the comment section and in the
13:19 - next video guys we're going to discuss
13:21 - how we could you know add arguments into
13:24 - our functions so thank you for watching
13:26 - guys and see you in the next video

Cleaned transcript:

hey what's up guys welcome back to our YouTube channel and welcome to this video this is John from programming knowledge and in this video guys we're going to discuss in I'm gonna teach you how to implement functions in our C program so basically again c function is a selfcontained block statements that can be executed repeatedly whenever we need it so if you think about it it is just you know a group of statements that we could call and we can use repeatedly within our C program so in this particular video guys we're going to discuss the benefits of using the functions in C program we will also discuss two types of functions in C also the parts of function the function prototype the function definition and of course we're going to discuss also how to call each function inside our C program and lastly we will implement a basic program to illustrate the addition of two numbers using userdefined function so if you're excited guys please make sure to watch the full video you will learn more in this particular video tutorial and by the way guys if you are new here in our YouTube channel and you like content about programming so go ahead make sure to subscribe and press the notification bell so you'll get updated whenever we have a new upload regarding different programming's or different topics so we have topics Python Java Java FX C programming and many many other topics regarding programming so now let's try to talk about benefits of using function in C so there are a lot of functions that you know we could associate in using function inside our C program so the first one is with gelareh t so when we are using functions it could provide modularity in our code so it means that we could you know define different functions we could really call our functions and we could call this particular function if we need it or we need to execute certain statements and of course guys the function also provides you reusable code meaning it will save us a lot of space and you know it could be our code could be you know read more readable by using this particular function feature so that's readable or usable code and then in large programs debugging in editing tasks is easy with the use of functions so functions make it easy for us to implement our programs so the program can be modular eyes into smaller parts that's what I have said earlier that we could you know develop certain modules inside our C program and then we could call that particular module or statements or group of statements if we need in a particular situation and number the next one is a separate function independently can be developed according to the need so so for example guess we could group our statements depending on the need or you know depending on the the function or or the purpose of that statement so we could group that statements and place it inside our C function so actually guys there are two types of functions in C so the first one is let me type it here type of functions we have the first one builtin function okay so builtin function of course the system provided this functions and stored in the library therefore it is called library functions so we have like we are using scanf printf starck strcpy still and WR strcmp.c our land still are taught and many more functions that are already available for us whenever we try to run a program so from the previous tutorials we have used the printf so as you can see this particular function we did not implement this the system provided it for us the printf and this particular function will let us display certain objects or statements that we want is we want to display inside our C program so to use this functions you just need to include the appropriate C header files so that's why we have here the include statement at the top of our program so basically we're including all the necessary function that we could use inside our C program and of course guys the the second type of method is what we called the userdefined functions userdefined functions okay so user define user defined functions these are the functions that are defined by the user at the time writing the program so that's basically us or the programmer that you know define the functions okay and then of course the same with the built in function because you know we didn't use this particular functions inside our C program now there are there are also parts of our function in C programming language we have the function declaration we also have the definition and we also have the function call so this is basically the actual slope of the function we have the function declaration declaration and then we have the definition of course dysfunctional if you want to use that particular function so we have here for example syntax for function declaration so we could this will be the function declaration this is just an example guys on how you can declare in a certain function so the syntax for that is they too tight and then function name and then of course open and close parenthesis and then in here you can specify the parameter list okay or the variables that we want to use inside this particular function so our example of that is like this in which is the data type and of course addition which is the name of our function so addition and then the return type is int and then of course the list parameters and in this case we don't have any parameter in this particular function addition so we also have the function definition this is actually what the actual function would look like so this will be function declaration or I mean function definition okay so we could this the basic centers to this is return type and then functioning and then function arguments and then curly braces so it should include the closed or open and close curly braces and then inside here is the body of the function or simply the statements that we want to execute inside this particular function so whatever we want to call this function this will be the statement that you know would be executed inside this particular function so in order for us to call a function inside our C program we just need to specify the method name and of course we need to supply parameters if there's a if there are any and we would also need to specify the return type of our function so now let's try to implement a simple program that you know the codex illustrate the addition of two numbers using userdefined function so we have here the main function right and then in here after the main or after the closing curly brace of our main function we could create we could create our own function right here let me close this first so you can you know see better so we could add a function here returning the total of two numbers a so we could declare it like this in and then addition open and close parentheses and then open and close curly braces and of course guys as I've said this is this will be the body of our function so in here we could define local variables right so local variables so for example we have we have in num1 equals 10 and then you know 2 equals 5 wait so these are local variables meaning these are the variables that are declared and defined inside the addition method or function right so we can say here return and then num1 plus num2 okay so the the statement that we want to execute whenever we try to call the addition method learning function so inside our main function we could call this method addition so we could declare a variable here in answer and then we could say answer equals and then the addition so basically whatever the return value of this addition method it will be assigned into our answer variable and of course we could print or display this particular value so we can say the total two numbers yes then the format specifier we're just you know percent D and then the answer which has the answer sorry one okay so we could you know build and run our application application and then we have here the output the total of two numbers is 58 so that's how the function works and as you can see here we have defined our function with these statements inside our C function to return the total of the number one in number two and then we said our main function we have declared the answer and then the type is in of course because the int is should correspond to the return type of this particular function and then answer equals the addition and then the last thing that we did here is to display the total of two numbers and in this case ten and five which makes eight you know the value or the output is 15 so I think that's all there is to it guys for this tutorial tutorial if you are you know questions regarding this please let me know in the comment section and in the next video guys we're going to discuss how we could you know add arguments into our functions so thank you for watching guys and see you in the next video
