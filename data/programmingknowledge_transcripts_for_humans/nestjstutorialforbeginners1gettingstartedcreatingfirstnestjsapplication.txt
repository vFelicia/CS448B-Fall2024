With timestamps:

00:01 - hey guys welcome back in this video we
00:03 - will talk about
00:04 - nest js so ness js framework
00:08 - is increasingly becoming popular among
00:11 - developers who want to build
00:13 - scalable server-side applications so
00:17 - those of you who don't know what nest js
00:20 - is you can go to this website which is
00:22 - nestjs.com
00:24 - and according to this website ness js is
00:27 - a progressive
00:28 - node.js framework for building efficient
00:31 - reliable and scalable server-side
00:34 - applications
00:35 - so nest js fully supports
00:39 - typescript and in the background it
00:42 - uses node.js framework and express
00:45 - so what we are going to do is we are
00:47 - going to learn
00:48 - how we can use nest js to build
00:52 - uh rest application although ness js
00:55 - supports
00:55 - many different protocols but for start
00:59 - we are going to build a rest application
01:02 - using
01:02 - nest js now nest js have a very
01:06 - extensive
01:07 - and very good documentation so if you
01:09 - are thinking about starting
01:12 - nest chess you can click on the
01:14 - documentation
01:16 - tab and you will be able to see tons
01:19 - of good documentation so under the
01:22 - documentation you can see uh
01:24 - what nest js can do and what are the
01:27 - technologies it supports
01:29 - so you can see under the techniques
01:32 - it can support authentication database
01:34 - configuration validation caching
01:37 - so many things it can support also it
01:40 - can support
01:41 - graphql websockets microservices
01:44 - like redis mqtt rabbit mq kafka
01:48 - also it has the support for open api
01:52 - swagger ui and many other good stuff
01:56 - also if you can want to see how popular
01:59 - nest js is you can go to the github page
02:02 - for nest js
02:04 - and you can see as of today it has
02:07 - more than 31 000 stars so it's becoming
02:10 - really popular
02:11 - so let's talk about the prerequisites of
02:15 - learning nest js so knowledge of
02:18 - typescript
02:19 - and javascript will be very important
02:22 - for learning
02:23 - sjs if you have the experience of
02:26 - angular it will be a plus because
02:29 - it uses techniques which are already
02:32 - used in
02:32 - angular for example now because we
02:35 - are going to be building a restful api
02:38 - it's good to have
02:39 - a rest uh client such as postmen
02:43 - uh in order to test your arrest
02:45 - application
02:46 - also make sure you have the latest
02:48 - version of node.js
02:50 - installed on your operating system
02:53 - so once you have all these uh tools
02:56 - we are good to go and let's get started
03:00 - so what we are going to do we are going
03:03 - to
03:04 - just open our terminal and we are going
03:06 - to install some
03:08 - nest js packages so what i did is i
03:12 - created a directory so i am going to
03:15 - just
03:15 - go in that directory which is called
03:17 - work
03:18 - so the first step is to install nest js
03:22 - cli globally in order to create our nest
03:26 - js project with this cli tool
03:29 - so we are going to just give this
03:31 - command which is
03:32 - npmi hyphen g and then
03:35 - just write at the rate nest
03:38 - js forward slash cli
03:42 - and in my case because i want to install
03:46 - this globally i i need the sudo
03:48 - privileges
03:49 - also in your case it might not be
03:52 - necessary
03:53 - so i will just press enter and give my
03:56 - max password and now this cli is
03:59 - installed on my operating system
04:03 - so once this nest cli is
04:06 - installed we are ready to create our
04:08 - first project
04:09 - so in order to create a new nest
04:12 - project what you need to do is you just
04:15 - need to give this command
04:16 - nest because we have installed nest
04:18 - jscli
04:20 - globally this nest command is going to
04:22 - work and then write
04:24 - new and the name of your project so we
04:27 - are going to create
04:28 - a project called car
04:31 - manager so i'm going to give this name
04:34 - you can give any name for your nest
04:38 - js project and then press enter and it's
04:40 - going to create
04:41 - a new nesjs project for you now
04:45 - first step here it's going to ask you
04:47 - which package manager you want to use
04:49 - npm or yarn so i'm going to
04:52 - just use npm for this so i'm going to
04:55 - just press
04:56 - enter which is going to create our
04:59 - project
05:00 - using this npm package manager so now
05:03 - you can see our nest js project is
05:05 - created
05:06 - and you can see it gives us hint also
05:09 - that we can cd into this directory
05:12 - and then we can just run our project
05:14 - using npm run start
05:16 - so what we are going to do i'm going to
05:18 - just do ls you can see
05:19 - this project is created inside this
05:22 - directory so i'm going to go inside
05:24 - this directory and then i'm going to
05:27 - open this project using visual studio
05:29 - code you can open this project with
05:31 - any other editor or ide
05:34 - of your choice i'm going to use visual
05:37 - studio code here so i'm going to just
05:38 - open this project using visual studio
05:41 - code
05:41 - and let me open the terminal also inside
05:44 - visual studio code
05:46 - now let's discuss about the nest
05:49 - js project structure so
05:53 - you will be able to see this package dot
05:55 - json
05:56 - where under script you will be able to
05:58 - see
05:59 - uh all these commands so we can start
06:02 - our
06:03 - application using npm start which is
06:06 - going to
06:06 - essentially run nest start in order to
06:09 - start
06:10 - our application and you can see we can
06:13 - test our application using
06:16 - npm test under the hood it's going to
06:18 - use
06:19 - just for running our test you can also
06:22 - see
06:22 - how you can run different commands
06:26 - for running different kind of tests and
06:28 - coverages
06:29 - and running your application in
06:32 - different
06:32 - environment for example development or
06:35 - debug or production mode
06:36 - you can also run lint for linting your
06:41 - application files now let's talk about
06:44 - the source folder where our
06:48 - code is there so we are going to start
06:51 - with
06:51 - the main dot ts which is the main entry
06:55 - point
06:55 - of your nest js application
06:59 - so here you can see it's very simple
07:02 - it's going to just import this nest
07:05 - factory from the core nets js package
07:09 - and you just need to pass your app
07:12 - module
07:13 - which is there inside this app.module.ts
07:17 - file we are going to just see what's
07:20 - there in a bit
07:21 - but you just need to import this uh app
07:23 - module
07:24 - and you just need to pass this app
07:27 - module as
07:28 - as parameter in the create
07:31 - method and then you can just
07:35 - start your application on the port
07:38 - for example by default it's going to
07:40 - start on the
07:41 - port 3000 but you can change this port
07:44 - also so app.listen
07:46 - and it listens on the port 3000
07:49 - by default so now we are going to go
07:52 - inside the module.ts folder so
07:55 - app.module.ts which we have imported
07:58 - inside our main.ts so
08:02 - this app.module.ts
08:05 - file is going to contain the
08:07 - implementation of
08:08 - application root module now there are
08:12 - three important building blocks
08:15 - of a nest js application and these are
08:18 - called
08:19 - controllers providers and
08:22 - modules so three building blocks
08:25 - controllers
08:27 - providers and modules
08:30 - and you will be able to see one file for
08:33 - each component you will have
08:36 - the controller.ts file you will have the
08:39 - module.ts file
08:41 - and you will have the service.ts file so
08:44 - services
08:45 - are also called providers in
08:48 - nest js module.ts is going to contain
08:52 - the implementation
08:53 - of your applications root module
08:56 - and then app dot controller dot
09:00 - ts is going to contain the
09:02 - implementation
09:04 - of a basic nest js controller
09:07 - with just one route so by default it's
09:09 - going to just
09:11 - listen on this get route and it's going
09:14 - to
09:14 - just return you hello world
09:18 - so controllers are used to just define
09:21 - your end points so it
09:23 - will be a main interface for your
09:27 - application so you can define
09:29 - endpoints into the controllers
09:33 - now the app.service app.service.ts file
09:37 - is going to contain the implementation
09:40 - for
09:40 - your endpoint for example so for example
09:43 - some
09:44 - rest request comes into your application
09:48 - it's going to uh
09:49 - just go here and then
09:52 - this controller in this controller you
09:54 - can see there is an instance
09:56 - of app service and whatever you want to
10:00 - return as a response for that rest
10:02 - request
10:03 - you can just provide the implementation
10:05 - of your response
10:06 - inside the service so let's go inside
10:09 - the service
10:10 - here we just define the
10:13 - implementation about your service
10:17 - methods right now also
10:20 - you will be able to see for example when
10:22 - you go to
10:23 - the app.modules.ts
10:26 - this kind of uh annotation
10:29 - here so these are called the decorators
10:32 - so if you are familiar with
10:33 - the angular you might have seen these
10:36 - kind of decorator
10:38 - decorators right so because we are in
10:41 - the module
10:42 - uh decorator here we just provided at
10:46 - the raid module
10:47 - and then inside the module you can
10:49 - provide the imports
10:51 - controllers and providers so provider
10:54 - essentially
10:55 - are the services right so we have
10:57 - imported
10:58 - the app.service and app.controller here
11:02 - and here we provide the mapping of
11:05 - all the controllers you have inside your
11:07 - application
11:08 - and all the providers you have in your
11:12 - application and sometimes you need to
11:13 - import
11:14 - different kind of files
11:17 - in your nest js and those imports we are
11:21 - going to
11:21 - do here so we are going to see more
11:24 - about imports
11:25 - in the later part of our
11:28 - application right so uh
11:32 - as i said you have services modules and
11:35 - controllers
11:36 - also you have the app.controller.spec.ts
11:41 - file
11:42 - so this will be uh your unit test
11:45 - file so here you can write your unit
11:48 - tests
11:49 - okay and you can also define for example
11:52 - service dot spec dot ts file for
11:56 - testing your services and
11:59 - for your integration test you have this
12:01 - test folder so here you can
12:05 - run your integration test and in next js
12:08 - it is called
12:09 - end-to-end test okay so here you can
12:11 - test
12:12 - your whole application using
12:15 - uh jest and under the hood it uses
12:18 - super test for your integration tests so
12:21 - now let's
12:22 - run our application you just need to
12:25 - write an npm
12:26 - start here which is going to run our
12:29 - application and once you see this
12:31 - message which says
12:32 - nest application successfully started
12:34 - you can go to your browser
12:36 - and then just write localhost colon 3000
12:40 - and it's going to return hello world
12:43 - right
12:43 - you might be wondering uh this is our
12:46 - typescript project so we haven't
12:48 - transpiled our typescript
12:51 - into the javascript code and how it's
12:54 - running
12:56 - directly using npm start in the
12:58 - background
12:59 - nestjs is going to take care of
13:02 - transpiling and then running your
13:05 - application directly
13:07 - using npm start if you want to just
13:10 - explicitly build your project you can
13:13 - give this command npm
13:14 - run build it's going to transpile your
13:16 - tribe script files
13:17 - into uh javascript but if you
13:21 - directly use npm start also it's going
13:24 - to
13:24 - transpile directly your files and it's
13:27 - going to
13:28 - run your project for example i'm going
13:30 - to just stop this application
13:32 - i'm going to go to the service dot ts
13:35 - file
13:36 - and here we have the get hello world
13:38 - which is
13:39 - returning this hello world to us i'm
13:41 - going to just add hello world
13:44 - from me and then i'm going to just
13:49 - restart our application it's going to
13:51 - directly transpile our typescript code
13:54 - and it's going to start our application
13:56 - on the port
13:58 - 3000 so let's refresh this page now it
14:01 - says
14:02 - hello world from me so
14:05 - this is how you can create your first
14:08 - nest
14:09 - js application in the next video we are
14:11 - going to see
14:13 - what we are going to be implementing we
14:16 - are going to be implementing a rest
14:18 - api so we are going to see how we can
14:21 - create our own rest api using
14:24 - nest js i hope you enjoyed this video
14:27 - and i will see you in the next video

Cleaned transcript:

hey guys welcome back in this video we will talk about nest js so ness js framework is increasingly becoming popular among developers who want to build scalable serverside applications so those of you who don't know what nest js is you can go to this website which is nestjs.com and according to this website ness js is a progressive node.js framework for building efficient reliable and scalable serverside applications so nest js fully supports typescript and in the background it uses node.js framework and express so what we are going to do is we are going to learn how we can use nest js to build uh rest application although ness js supports many different protocols but for start we are going to build a rest application using nest js now nest js have a very extensive and very good documentation so if you are thinking about starting nest chess you can click on the documentation tab and you will be able to see tons of good documentation so under the documentation you can see uh what nest js can do and what are the technologies it supports so you can see under the techniques it can support authentication database configuration validation caching so many things it can support also it can support graphql websockets microservices like redis mqtt rabbit mq kafka also it has the support for open api swagger ui and many other good stuff also if you can want to see how popular nest js is you can go to the github page for nest js and you can see as of today it has more than 31 000 stars so it's becoming really popular so let's talk about the prerequisites of learning nest js so knowledge of typescript and javascript will be very important for learning sjs if you have the experience of angular it will be a plus because it uses techniques which are already used in angular for example now because we are going to be building a restful api it's good to have a rest uh client such as postmen uh in order to test your arrest application also make sure you have the latest version of node.js installed on your operating system so once you have all these uh tools we are good to go and let's get started so what we are going to do we are going to just open our terminal and we are going to install some nest js packages so what i did is i created a directory so i am going to just go in that directory which is called work so the first step is to install nest js cli globally in order to create our nest js project with this cli tool so we are going to just give this command which is npmi hyphen g and then just write at the rate nest js forward slash cli and in my case because i want to install this globally i i need the sudo privileges also in your case it might not be necessary so i will just press enter and give my max password and now this cli is installed on my operating system so once this nest cli is installed we are ready to create our first project so in order to create a new nest project what you need to do is you just need to give this command nest because we have installed nest jscli globally this nest command is going to work and then write new and the name of your project so we are going to create a project called car manager so i'm going to give this name you can give any name for your nest js project and then press enter and it's going to create a new nesjs project for you now first step here it's going to ask you which package manager you want to use npm or yarn so i'm going to just use npm for this so i'm going to just press enter which is going to create our project using this npm package manager so now you can see our nest js project is created and you can see it gives us hint also that we can cd into this directory and then we can just run our project using npm run start so what we are going to do i'm going to just do ls you can see this project is created inside this directory so i'm going to go inside this directory and then i'm going to open this project using visual studio code you can open this project with any other editor or ide of your choice i'm going to use visual studio code here so i'm going to just open this project using visual studio code and let me open the terminal also inside visual studio code now let's discuss about the nest js project structure so you will be able to see this package dot json where under script you will be able to see uh all these commands so we can start our application using npm start which is going to essentially run nest start in order to start our application and you can see we can test our application using npm test under the hood it's going to use just for running our test you can also see how you can run different commands for running different kind of tests and coverages and running your application in different environment for example development or debug or production mode you can also run lint for linting your application files now let's talk about the source folder where our code is there so we are going to start with the main dot ts which is the main entry point of your nest js application so here you can see it's very simple it's going to just import this nest factory from the core nets js package and you just need to pass your app module which is there inside this app.module.ts file we are going to just see what's there in a bit but you just need to import this uh app module and you just need to pass this app module as as parameter in the create method and then you can just start your application on the port for example by default it's going to start on the port 3000 but you can change this port also so app.listen and it listens on the port 3000 by default so now we are going to go inside the module.ts folder so app.module.ts which we have imported inside our main.ts so this app.module.ts file is going to contain the implementation of application root module now there are three important building blocks of a nest js application and these are called controllers providers and modules so three building blocks controllers providers and modules and you will be able to see one file for each component you will have the controller.ts file you will have the module.ts file and you will have the service.ts file so services are also called providers in nest js module.ts is going to contain the implementation of your applications root module and then app dot controller dot ts is going to contain the implementation of a basic nest js controller with just one route so by default it's going to just listen on this get route and it's going to just return you hello world so controllers are used to just define your end points so it will be a main interface for your application so you can define endpoints into the controllers now the app.service app.service.ts file is going to contain the implementation for your endpoint for example so for example some rest request comes into your application it's going to uh just go here and then this controller in this controller you can see there is an instance of app service and whatever you want to return as a response for that rest request you can just provide the implementation of your response inside the service so let's go inside the service here we just define the implementation about your service methods right now also you will be able to see for example when you go to the app.modules.ts this kind of uh annotation here so these are called the decorators so if you are familiar with the angular you might have seen these kind of decorator decorators right so because we are in the module uh decorator here we just provided at the raid module and then inside the module you can provide the imports controllers and providers so provider essentially are the services right so we have imported the app.service and app.controller here and here we provide the mapping of all the controllers you have inside your application and all the providers you have in your application and sometimes you need to import different kind of files in your nest js and those imports we are going to do here so we are going to see more about imports in the later part of our application right so uh as i said you have services modules and controllers also you have the app.controller.spec.ts file so this will be uh your unit test file so here you can write your unit tests okay and you can also define for example service dot spec dot ts file for testing your services and for your integration test you have this test folder so here you can run your integration test and in next js it is called endtoend test okay so here you can test your whole application using uh jest and under the hood it uses super test for your integration tests so now let's run our application you just need to write an npm start here which is going to run our application and once you see this message which says nest application successfully started you can go to your browser and then just write localhost colon 3000 and it's going to return hello world right you might be wondering uh this is our typescript project so we haven't transpiled our typescript into the javascript code and how it's running directly using npm start in the background nestjs is going to take care of transpiling and then running your application directly using npm start if you want to just explicitly build your project you can give this command npm run build it's going to transpile your tribe script files into uh javascript but if you directly use npm start also it's going to transpile directly your files and it's going to run your project for example i'm going to just stop this application i'm going to go to the service dot ts file and here we have the get hello world which is returning this hello world to us i'm going to just add hello world from me and then i'm going to just restart our application it's going to directly transpile our typescript code and it's going to start our application on the port 3000 so let's refresh this page now it says hello world from me so this is how you can create your first nest js application in the next video we are going to see what we are going to be implementing we are going to be implementing a rest api so we are going to see how we can create our own rest api using nest js i hope you enjoyed this video and i will see you in the next video
