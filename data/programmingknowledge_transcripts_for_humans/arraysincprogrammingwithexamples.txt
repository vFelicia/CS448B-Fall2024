With timestamps:

00:00 - and in this video guys we're going to
00:01 - learn how to use arrays
00:03 - inside our c program so basically guys
00:06 - we can
00:06 - declare variables to hold single element
00:09 - or single value
00:11 - inside our c program so for example like
00:13 - this
00:15 - age or in age and then we could
00:18 - um assign it to a value 5 for example
00:21 - like this
00:22 - so this particular variable will hold
00:26 - the value 5 for a single value 5
00:30 - and then it's going to assign to the
00:33 - variable age now what if you want to
00:36 - store
00:37 - like 50 um series
00:40 - of values like there are
00:44 - um 50 each that what uh that we want to
00:48 - save for example there are like 50
00:50 - percents that we want to save the ages
00:53 - then uh this particular declaration
00:57 - and statement will not suffice because
01:00 - we're going to like uh declare it one by
01:03 - one so for example in
01:04 - age two and then six and then
01:07 - in age three equals seven
01:13 - and in uh age
01:16 - four was like 10
01:19 - and so on so basically guys this is not
01:23 - a good
01:23 - programming practice to declare
01:26 - multiple variables or yeah multiple
01:29 - variables to hold
01:30 - a single set or a single type of data
01:34 - so that's why we need the capability
01:37 - of an array so basically guys the array
01:40 - is a
01:41 - data structure in c programming which
01:44 - can store
01:44 - a fixed size uh sequential collection of
01:47 - elements
01:48 - of the same data type so in this case
01:52 - guys we're just
01:53 - you know collecting and saving um
01:56 - the same data type of data which is in
01:59 - now what we can do here is we can
02:03 - define an array and then we could set
02:05 - the lens say for example we want to save
02:08 - 50 ages right
02:12 - and then we can save the age into that
02:14 - particular array so let me show you an
02:16 - example
02:17 - so this is how you can create an array
02:21 - inside your c program
02:22 - so basically the first
02:26 - thing is you have to specify the type of
02:28 - your
02:30 - data that you want to save in that
02:31 - particular array and then
02:33 - the array name so basically this is just
02:36 - like the
02:37 - uh variable name so you have to label
02:40 - your container
02:42 - and then of course you have to specify
02:44 - specify the type of data that you want
02:46 - to save in this particular array
02:48 - and then you have to add the square
02:50 - brackets
02:52 - and this signifies that this particular
02:54 - variable
02:55 - is an array and then inside uh this
02:58 - particular square bracket you can
03:01 - declare the size or you know specify the
03:04 - size or how many
03:06 - values that this particular variable
03:09 - could
03:10 - hold okay so in
03:13 - a typical c program you can do it like
03:16 - this so for example
03:17 - the type is in right and then you could
03:20 - say
03:21 - aegis or age right so this is the r name
03:25 - and then this uh square brackets
03:28 - and then you have to specify the size
03:32 - for example five so you want to collect
03:35 - five values or five age of five
03:39 - persons okay so again this is the type
03:42 - in you have to specify the type and then
03:44 - you have to specify the array name
03:47 - the the variable name and then of course
03:49 - square brackets
03:50 - and then the size of your
03:53 - array or basically
03:57 - the amount of values that this
03:59 - particular array could hold
04:01 - so after this you can say equals
04:04 - and then you can specify the array or
04:06 - the elements of your array
04:08 - so for example we could take all these
04:11 - values 5 6 7 and 10 so
04:15 - 5 6
04:18 - 7 and 10 and for example because our
04:23 - array contains or should contain
04:25 - five elements you could add another one
04:27 - here for example
04:29 - um eight or something okay
04:33 - so again this is how you can create an
04:36 - array of
04:37 - um values so in
04:40 - is the data type and then of course we
04:43 - have the r name
04:44 - and then square brackets with the size
04:47 - five uh for example your
04:51 - um array should be five and then equals
04:54 - and then the curly braces open and close
04:57 - curly braces
04:59 - and then the actual element value for
05:01 - example in this
05:03 - particular statement we have 5
05:06 - 6 7 10 and
05:09 - a so that's how you can initialize an
05:11 - array
05:12 - in c program now you can
05:17 - access this particular um
05:20 - or this elements or these values by
05:23 - using
05:24 - what we called index so in c programming
05:27 - or any other programming
05:29 - with um arrays you could
05:32 - access the values by using index
05:36 - so this index is zero
05:39 - based zero base it means that it will
05:42 - start
05:44 - it will start with zero okay
05:48 - so meaning uh if you want to access the
05:51 - value 5 so you have to use
05:55 - 0 index okay
05:59 - this will be
06:03 - 0 and then this will be
06:06 - one this will be two this will be three
06:11 - and this will be um four
06:14 - so again if you want to access or get
06:16 - the value
06:18 - of this particular element you have to
06:20 - use the zero
06:21 - uh value of your index and then one
06:25 - for the six two four seven three four
06:28 - ten
06:28 - and um four four eight so let me show
06:32 - you that
06:33 - how that works so for example you want
06:37 - to display the value
06:39 - 6 okay so all you have to do is use
06:43 - the printf statement and then
06:47 - google quotes and then person
06:50 - b the format specifier for our
06:53 - um integer values and then comma of
06:56 - course
06:56 - and then we could use the name of our
07:00 - um uh what do we call this array
07:04 - so ages and then we can
07:08 - um specify the square bracket and then
07:11 - index of the element that we want to use
07:14 - for example six so we want to use the
07:18 - index one for that
07:19 - to be able to get the value of six
07:22 - so let's try this uh
07:26 - build and run our program so as you can
07:29 - see the output
07:30 - is 6 as you can see here 6
07:34 - right now if you want to get the value
07:37 - 10
07:38 - you have to use the
07:41 - index 3 for that because as i said
07:45 - the value is equivalent to the
07:48 - index three of our particular array
07:52 - so build and run a program and it should
07:55 - output the value 10 which
07:59 - sits on the index three of our array
08:02 - so that's how you can access the value
08:05 - from our array
08:06 - now say for example you want to change
08:08 - the value of this array
08:10 - right so we have here five six seven
08:12 - eight or five six seven ten and eight
08:15 - and then if you if you want to change
08:17 - the value of
08:19 - for example this one five the first
08:21 - element all you have to do is specify
08:23 - the index also so please rest
08:29 - here as programs
08:33 - for example 11
08:37 - and silly column that's the depends it
08:40 - only goes okay
08:41 - so ages so for example we want to
08:44 - display this
08:45 - what will be the um value of our
08:50 - index 0 so we could test that by using
08:53 - the printf statement
08:54 - and then instead of three you could
08:56 - specify the
08:57 - value zero or index zero here
09:01 - so let's try this build and run
09:04 - and as you can see here instead of 5 the
09:07 - initial value of
09:08 - our index 0
09:12 - it returns 11 because we assign it or we
09:16 - modify it by using the element or index
09:20 - 0
09:21 - equal to the 11 which is
09:25 - that's why we are getting the 11 value
09:28 - here
09:28 - now this is particularly useful guys or
09:31 - if you want to work
09:32 - with the array
09:35 - one of the best structure or the best
09:38 - statement that you could use to iterate
09:41 - the array is by using the for loops or
09:44 - loops
09:45 - inside rc program so we could say this
09:48 - here
09:49 - for example for
09:52 - so we're going to use the for loop
09:54 - statement here
09:55 - and we can specify for example um
09:59 - index equals to zero we want to start
10:04 - with 0 because as i've said the index of
10:07 - our array is 0 base it will start with
10:10 - the 0 number okay so index equals 0
10:15 - and then semicolon and we're going to
10:18 - say here
10:19 - here index um less than
10:23 - the actual value of our array or
10:27 - i mean size of our array so five
10:31 - less than five so another
10:34 - semicolon and then index last plus
10:40 - and inside the for loop we could display
10:44 - the element of our array so we could use
10:46 - this
10:47 - printf statement and then
10:50 - we could use the index variable here
10:54 - and then change this
10:58 - you can say index
11:01 - equals percent d
11:06 - the format specifier and then
11:09 - um we could say
11:12 - equal to percent b
11:16 - and then of course the actual value of
11:19 - our
11:20 - array index so in here we could specify
11:23 - the index
11:25 - okay so it should display the index
11:29 - current index and then it should display
11:32 - the
11:32 - actual value of that particular index
11:36 - so we could build and run our program
11:40 - um let me add first the
11:43 - backslash n or newline um
11:47 - state sequence new line and then
11:50 - it should display this particular output
11:54 - so at index 0 we have the value 11
11:57 - at index 1 we have the value 6
12:01 - right index 0 is 11 because
12:05 - we already modified our array
12:08 - specifying the array or index 0 should
12:11 - be equal to 11
12:13 - and then at index 1 equal to 6 right
12:16 - here
12:17 - index 2 should be equal to 7 index 3
12:21 - is 10 index 4 is 8. okay so that's how
12:24 - easy for us to
12:25 - access and change the value of our array
12:29 - and that's how we can define our
12:33 - multi or i mean single
12:36 - dimension or one dimension array inside
12:39 - our c
12:40 - program and in this video guys we're
12:41 - going to talk about multi-dimensional
12:43 - arrays
12:44 - in our c program so from the previous
12:47 - tutorial we have learned
12:49 - how to use the basic array so
12:52 - we have implemented one dimensional
12:54 - array
12:55 - we try to display
12:58 - the contents of an array by using the
13:00 - for loop
13:01 - and of course we declare and initialize
13:04 - one dimensional array
13:06 - from the previous tutorial now as i've
13:08 - said from this tutorial we're going to
13:10 - learn
13:10 - how to work with multi-dimensional array
13:13 - so basically guys multi-dimensional
13:15 - array
13:17 - works like the same with the
13:19 - one-dimensional array
13:20 - but the difference is that it contains
13:23 - um
13:23 - the array contains a set of arrays so
13:27 - in c programming language it will allow
13:30 - us
13:30 - or it allows us to use multi-dimensional
13:33 - arrays and
13:34 - the declaration or multi-dimensional
13:37 - declaration
13:38 - for that is by using the type of force
13:41 - as i've said from the previous tutorial
13:43 - if you want to
13:45 - store multiple values you have to use
13:49 - arrays
13:50 - and in order for you to declare an array
13:53 - you have to specify
13:54 - the type of that particular array so
13:58 - you have to specify the type and then of
14:00 - course the name
14:02 - of the array and then you have to
14:04 - specify
14:05 - the size here so for example size
14:10 - now this is um good for
14:14 - a one dimensional array so you have to
14:16 - specify the type the name
14:18 - and of course the size of your array
14:22 - now comes the multi-dimensional array or
14:25 - two-dimensional array
14:26 - so you could do it like this
14:29 - so size 2 and then this is the size
14:32 - one so this is how you
14:36 - declare multi-dimensional array or
14:39 - two-dimensional array inside rc program
14:41 - so the type of course you don't uh you
14:45 - know you don't want to forget that the
14:46 - size of
14:47 - or i mean the type of the value
14:51 - that you want to save in this particular
14:52 - array so
14:54 - and then the name and then of course the
14:57 - size one and then the
15:01 - size two now if you want to create
15:04 - three dimensional array you could do it
15:06 - like this
15:09 - size two i'm in size 3
15:12 - so you have square brackets for your
15:14 - size 1
15:16 - square brackets for your size 2 and
15:18 - square brackets for your
15:20 - size 3 so again this is how you can
15:23 - declare your multi-dimensional array
15:27 - but you know the simplest form of
15:28 - multi-dimensional array is by just
15:30 - specifying two sizes
15:35 - and basically guys this uh this will
15:37 - represent
15:38 - the columns and rows
15:41 - of your array or multi-dimensional array
15:45 - because multi-dimensionally works like a
15:47 - table
15:48 - so size one will be your
15:51 - number of rows and the
15:54 - size 2 will represent the
15:58 - number of columns so let's try this
16:01 - let's try to declare and initialize
16:05 - a multi-dimensional array so following
16:08 - this particular declaration type
16:11 - so the first thing is of course the type
16:14 - so in and then we could say here
16:17 - a or a variable name a this is the name
16:20 - of our
16:21 - array multi-dimensional array and then
16:23 - of course we could specify
16:25 - the size for our rows say for example
16:28 - three right there and then the size
16:31 - of our columns or number of columns
16:35 - so that's basically like four and then
16:38 - you could
16:39 - you know initialize this by using the
16:41 - equal sign
16:42 - and then open and close curly braces
16:45 - so in this inside this curly braces we
16:48 - could
16:49 - declare or initialize the values for
16:52 - our rows and columns as i've said
16:57 - multi-dimensional arrays are you know
17:00 - composed of
17:02 - arrays right there okay so we could add
17:06 - array of values right here this will
17:09 - represent
17:10 - the row one of our array
17:14 - so like for example zero
17:19 - 1 and then
17:23 - 2 and then 3
17:26 - okay so again this is for
17:30 - initializing
17:35 - the row
17:39 - initializing the row index by
17:42 - zero okay so we could
17:46 - access this by using the index zero
17:49 - okay and for example
17:53 - uh basically uh we declare it here like
17:56 - um three so we need to add more
18:00 - arrays to this so open and close curly
18:04 - braces
18:07 - and another one to make it
18:10 - you know the length is three
18:14 - so in here we could display or add 4
18:18 - and then 5 and then 6 and then
18:21 - 7 okay
18:24 - and then the other row will have
18:28 - eight then nine and then ten
18:32 - and then eleven okay so basically
18:36 - we now have uh declared initialize
18:39 - our multi-dimensional array
18:42 - so the three here represent this
18:46 - rows three rows and as you can see here
18:49 - we have
18:50 - declared four columns so it should
18:53 - um count or i mean you know the columns
18:56 - start from this
18:57 - zero four eight and then um
19:00 - one five nine two six ten
19:03 - three seven eleven so this will
19:07 - be four the the 8 and the 0
19:11 - represents the column
19:14 - 0 and then 1 5 and 9 represents column
19:19 - 1. so why this is
19:23 - representing column zero that's because
19:25 - our index
19:26 - is you know um
19:30 - is zero base or meaning it will start
19:33 - counting from zero so this will be the
19:36 - column zero the column one the column
19:38 - two and
19:39 - the column three okay
19:43 - and of course um
19:47 - we could um try to display the value of
19:51 - this we could access the values of our
19:53 - multi-dimensional arrays
19:55 - by using the indexes of the columns and
19:58 - rows
19:59 - so for example we want to change the
20:03 - value of
20:08 - the values that we could get from
20:11 - the row 2 and
20:16 - column 3. so basically the value
20:20 - of or the value that we could get from
20:23 - um our array index 2 and
20:26 - 3 is 11
20:30 - because this is the row 2 and this is
20:33 - column
20:34 - three so zero one two
20:37 - three so we get the eleven
20:41 - or the value eleven so if you wanna
20:43 - change this to something like
20:46 - eight so we could do it or assign a
20:48 - value to this by eight
20:50 - so it should display eleven or i mean
20:52 - eight instead
20:53 - of eleven so we could try that so
20:56 - printf and then um percent d
21:00 - which is the format uh format specifier
21:03 - for our in
21:04 - value so we could specify the array
21:08 - index um two and then index
21:12 - three so if we try to
21:15 - compile and run our program we should
21:17 - get now the
21:18 - value 8
21:22 - value 8 as you can see here that's
21:25 - because we already modified
21:27 - the value inside the
21:30 - array of index two and three
21:33 - so let's try to comment this
21:37 - and then compile and build our
21:40 - program and as you can see we're getting
21:43 - 11
21:44 - that's because that's the initial value
21:46 - of
21:47 - the array index 2 n 3.
21:50 - now we could use array or i mean
21:54 - like we could use loops here
21:57 - to access and change the value of our
22:02 - array or multi-dimensional array and of
22:04 - course because we're using
22:05 - multi-dimensional array
22:06 - we could also use nested loops to
22:10 - change and access the values of our
22:13 - array
22:13 - so so for example we could declare for
22:17 - loop here
22:19 - and this is for example int
22:22 - and then row equals
22:25 - zero and then our
22:29 - row is less than or
22:32 - yeah rho is less than um
22:36 - that for example
22:40 - or three okay
22:44 - and then row plus plus so basically
22:47 - we're iterating from
22:49 - zero one and two
22:52 - because we're we only have like
22:56 - three um rows but we starting we're
22:59 - starting from zero so let's make
23:01 - uh that's making it like
23:04 - the value of our row should only be
23:08 - within two not three that's why we're
23:11 - using
23:12 - single or i mean um less than
23:15 - three right here and then of course we
23:18 - could
23:19 - make another loop for our column
23:23 - so int column and then equals to zero
23:28 - and then column
23:34 - is less than four and then
23:39 - um we're going to say here column
23:45 - plus plus okay and then of course we
23:47 - could use this particular pin
23:49 - printf statement to display the values
23:53 - of
23:53 - our array
23:56 - so percent d we could use here
24:00 - the array name
24:03 - which is a because we're using the array
24:05 - name a
24:06 - so a and then um
24:11 - we're going to specify here the columns
24:14 - and
24:14 - rows so percent d
24:17 - and then here percent d
24:20 - equals percent d
24:24 - so inside here we could specify
24:27 - the row and then the column and of
24:32 - course
24:33 - the value of that particular row and
24:36 - column
24:38 - okay so this will be row and of course
24:40 - this will be
24:42 - column okay so again we're just trying
24:45 - to get the
24:46 - value of uh inside our array represented
24:49 - by this particular
24:51 - row and column okay so these are the
24:53 - indexes
24:54 - the row and column so let's try to build
24:58 - or compile and run our program
25:00 - and we're getting this particular output
25:02 - right here but we don't want that
25:04 - let's try to add a backslash
25:08 - n to add a new line every
25:11 - execution so as you can see here we have
25:14 - all the values coming from our array
25:18 - so array and then we have index 0 0 so
25:21 - the value
25:22 - is 0 right there as you can see
25:26 - and then a zero one
25:29 - so the value is one a zero two is two
25:34 - a zero three is three
25:37 - and a one and a one zero is 4
25:41 - and so on so that's how you can uh
25:44 - that's how you can use the
25:47 - multi-dimensional array inside our c
25:49 - program
25:50 - okay and i think that's clear enough
25:53 - how you could iterate and modify
25:57 - your multi-dimensional array by using
26:00 - for loops
26:01 - so again if you have questions you can
26:03 - ask questions in the comment section
26:04 - below
26:05 - and again once again guys thank you for
26:07 - watching and see you in the next video

Cleaned transcript:

and in this video guys we're going to learn how to use arrays inside our c program so basically guys we can declare variables to hold single element or single value inside our c program so for example like this age or in age and then we could um assign it to a value 5 for example like this so this particular variable will hold the value 5 for a single value 5 and then it's going to assign to the variable age now what if you want to store like 50 um series of values like there are um 50 each that what uh that we want to save for example there are like 50 percents that we want to save the ages then uh this particular declaration and statement will not suffice because we're going to like uh declare it one by one so for example in age two and then six and then in age three equals seven and in uh age four was like 10 and so on so basically guys this is not a good programming practice to declare multiple variables or yeah multiple variables to hold a single set or a single type of data so that's why we need the capability of an array so basically guys the array is a data structure in c programming which can store a fixed size uh sequential collection of elements of the same data type so in this case guys we're just you know collecting and saving um the same data type of data which is in now what we can do here is we can define an array and then we could set the lens say for example we want to save 50 ages right and then we can save the age into that particular array so let me show you an example so this is how you can create an array inside your c program so basically the first thing is you have to specify the type of your data that you want to save in that particular array and then the array name so basically this is just like the uh variable name so you have to label your container and then of course you have to specify specify the type of data that you want to save in this particular array and then you have to add the square brackets and this signifies that this particular variable is an array and then inside uh this particular square bracket you can declare the size or you know specify the size or how many values that this particular variable could hold okay so in a typical c program you can do it like this so for example the type is in right and then you could say aegis or age right so this is the r name and then this uh square brackets and then you have to specify the size for example five so you want to collect five values or five age of five persons okay so again this is the type in you have to specify the type and then you have to specify the array name the the variable name and then of course square brackets and then the size of your array or basically the amount of values that this particular array could hold so after this you can say equals and then you can specify the array or the elements of your array so for example we could take all these values 5 6 7 and 10 so 5 6 7 and 10 and for example because our array contains or should contain five elements you could add another one here for example um eight or something okay so again this is how you can create an array of um values so in is the data type and then of course we have the r name and then square brackets with the size five uh for example your um array should be five and then equals and then the curly braces open and close curly braces and then the actual element value for example in this particular statement we have 5 6 7 10 and a so that's how you can initialize an array in c program now you can access this particular um or this elements or these values by using what we called index so in c programming or any other programming with um arrays you could access the values by using index so this index is zero based zero base it means that it will start it will start with zero okay so meaning uh if you want to access the value 5 so you have to use 0 index okay this will be 0 and then this will be one this will be two this will be three and this will be um four so again if you want to access or get the value of this particular element you have to use the zero uh value of your index and then one for the six two four seven three four ten and um four four eight so let me show you that how that works so for example you want to display the value 6 okay so all you have to do is use the printf statement and then google quotes and then person b the format specifier for our um integer values and then comma of course and then we could use the name of our um uh what do we call this array so ages and then we can um specify the square bracket and then index of the element that we want to use for example six so we want to use the index one for that to be able to get the value of six so let's try this uh build and run our program so as you can see the output is 6 as you can see here 6 right now if you want to get the value 10 you have to use the index 3 for that because as i said the value is equivalent to the index three of our particular array so build and run a program and it should output the value 10 which sits on the index three of our array so that's how you can access the value from our array now say for example you want to change the value of this array right so we have here five six seven eight or five six seven ten and eight and then if you if you want to change the value of for example this one five the first element all you have to do is specify the index also so please rest here as programs for example 11 and silly column that's the depends it only goes okay so ages so for example we want to display this what will be the um value of our index 0 so we could test that by using the printf statement and then instead of three you could specify the value zero or index zero here so let's try this build and run and as you can see here instead of 5 the initial value of our index 0 it returns 11 because we assign it or we modify it by using the element or index 0 equal to the 11 which is that's why we are getting the 11 value here now this is particularly useful guys or if you want to work with the array one of the best structure or the best statement that you could use to iterate the array is by using the for loops or loops inside rc program so we could say this here for example for so we're going to use the for loop statement here and we can specify for example um index equals to zero we want to start with 0 because as i've said the index of our array is 0 base it will start with the 0 number okay so index equals 0 and then semicolon and we're going to say here here index um less than the actual value of our array or i mean size of our array so five less than five so another semicolon and then index last plus and inside the for loop we could display the element of our array so we could use this printf statement and then we could use the index variable here and then change this you can say index equals percent d the format specifier and then um we could say equal to percent b and then of course the actual value of our array index so in here we could specify the index okay so it should display the index current index and then it should display the actual value of that particular index so we could build and run our program um let me add first the backslash n or newline um state sequence new line and then it should display this particular output so at index 0 we have the value 11 at index 1 we have the value 6 right index 0 is 11 because we already modified our array specifying the array or index 0 should be equal to 11 and then at index 1 equal to 6 right here index 2 should be equal to 7 index 3 is 10 index 4 is 8. okay so that's how easy for us to access and change the value of our array and that's how we can define our multi or i mean single dimension or one dimension array inside our c program and in this video guys we're going to talk about multidimensional arrays in our c program so from the previous tutorial we have learned how to use the basic array so we have implemented one dimensional array we try to display the contents of an array by using the for loop and of course we declare and initialize one dimensional array from the previous tutorial now as i've said from this tutorial we're going to learn how to work with multidimensional array so basically guys multidimensional array works like the same with the onedimensional array but the difference is that it contains um the array contains a set of arrays so in c programming language it will allow us or it allows us to use multidimensional arrays and the declaration or multidimensional declaration for that is by using the type of force as i've said from the previous tutorial if you want to store multiple values you have to use arrays and in order for you to declare an array you have to specify the type of that particular array so you have to specify the type and then of course the name of the array and then you have to specify the size here so for example size now this is um good for a one dimensional array so you have to specify the type the name and of course the size of your array now comes the multidimensional array or twodimensional array so you could do it like this so size 2 and then this is the size one so this is how you declare multidimensional array or twodimensional array inside rc program so the type of course you don't uh you know you don't want to forget that the size of or i mean the type of the value that you want to save in this particular array so and then the name and then of course the size one and then the size two now if you want to create three dimensional array you could do it like this size two i'm in size 3 so you have square brackets for your size 1 square brackets for your size 2 and square brackets for your size 3 so again this is how you can declare your multidimensional array but you know the simplest form of multidimensional array is by just specifying two sizes and basically guys this uh this will represent the columns and rows of your array or multidimensional array because multidimensionally works like a table so size one will be your number of rows and the size 2 will represent the number of columns so let's try this let's try to declare and initialize a multidimensional array so following this particular declaration type so the first thing is of course the type so in and then we could say here a or a variable name a this is the name of our array multidimensional array and then of course we could specify the size for our rows say for example three right there and then the size of our columns or number of columns so that's basically like four and then you could you know initialize this by using the equal sign and then open and close curly braces so in this inside this curly braces we could declare or initialize the values for our rows and columns as i've said multidimensional arrays are you know composed of arrays right there okay so we could add array of values right here this will represent the row one of our array so like for example zero 1 and then 2 and then 3 okay so again this is for initializing the row initializing the row index by zero okay so we could access this by using the index zero okay and for example uh basically uh we declare it here like um three so we need to add more arrays to this so open and close curly braces and another one to make it you know the length is three so in here we could display or add 4 and then 5 and then 6 and then 7 okay and then the other row will have eight then nine and then ten and then eleven okay so basically we now have uh declared initialize our multidimensional array so the three here represent this rows three rows and as you can see here we have declared four columns so it should um count or i mean you know the columns start from this zero four eight and then um one five nine two six ten three seven eleven so this will be four the the 8 and the 0 represents the column 0 and then 1 5 and 9 represents column 1. so why this is representing column zero that's because our index is you know um is zero base or meaning it will start counting from zero so this will be the column zero the column one the column two and the column three okay and of course um we could um try to display the value of this we could access the values of our multidimensional arrays by using the indexes of the columns and rows so for example we want to change the value of the values that we could get from the row 2 and column 3. so basically the value of or the value that we could get from um our array index 2 and 3 is 11 because this is the row 2 and this is column three so zero one two three so we get the eleven or the value eleven so if you wanna change this to something like eight so we could do it or assign a value to this by eight so it should display eleven or i mean eight instead of eleven so we could try that so printf and then um percent d which is the format uh format specifier for our in value so we could specify the array index um two and then index three so if we try to compile and run our program we should get now the value 8 value 8 as you can see here that's because we already modified the value inside the array of index two and three so let's try to comment this and then compile and build our program and as you can see we're getting 11 that's because that's the initial value of the array index 2 n 3. now we could use array or i mean like we could use loops here to access and change the value of our array or multidimensional array and of course because we're using multidimensional array we could also use nested loops to change and access the values of our array so so for example we could declare for loop here and this is for example int and then row equals zero and then our row is less than or yeah rho is less than um that for example or three okay and then row plus plus so basically we're iterating from zero one and two because we're we only have like three um rows but we starting we're starting from zero so let's make uh that's making it like the value of our row should only be within two not three that's why we're using single or i mean um less than three right here and then of course we could make another loop for our column so int column and then equals to zero and then column is less than four and then um we're going to say here column plus plus okay and then of course we could use this particular pin printf statement to display the values of our array so percent d we could use here the array name which is a because we're using the array name a so a and then um we're going to specify here the columns and rows so percent d and then here percent d equals percent d so inside here we could specify the row and then the column and of course the value of that particular row and column okay so this will be row and of course this will be column okay so again we're just trying to get the value of uh inside our array represented by this particular row and column okay so these are the indexes the row and column so let's try to build or compile and run our program and we're getting this particular output right here but we don't want that let's try to add a backslash n to add a new line every execution so as you can see here we have all the values coming from our array so array and then we have index 0 0 so the value is 0 right there as you can see and then a zero one so the value is one a zero two is two a zero three is three and a one and a one zero is 4 and so on so that's how you can uh that's how you can use the multidimensional array inside our c program okay and i think that's clear enough how you could iterate and modify your multidimensional array by using for loops so again if you have questions you can ask questions in the comment section below and again once again guys thank you for watching and see you in the next video
