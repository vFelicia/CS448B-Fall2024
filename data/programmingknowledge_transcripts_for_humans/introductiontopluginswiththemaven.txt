With timestamps:

00:01 - hello and welcome back to the new video
00:03 - of the maven tutorial series uh so in
00:05 - the previous video we we have actually
00:07 - started with uh creating a new project
00:09 - using Maven and that too in a eclipse uh
00:12 - not Eclipse uh IntelliJ IDEA IDE so I
00:15 - hope you have uh watched the previous
00:18 - video and you got some idea how to
00:20 - create a maven project inside IntelliJ
00:22 - IDEA you can use any any IDE of your
00:24 - choice uh but for this tutorial series I
00:27 - have choose IntelliJ IDEA uh okay so you
00:31 - can use anyone uh so I hope you watched
00:33 - that previous video where we have
00:34 - talking about the dependencies how we
00:37 - create the dependencies in our palm.xml
00:39 - file ypon.xml file is necessary to
00:42 - create and what is the importance of it
00:44 - so now uh we in this video we will focus
00:48 - give focus on this plugin sections okay
00:50 - so we have done with the life cycle we
00:52 - have done with the dependencies now for
00:54 - this video we will start with plugins
00:56 - all right so let's go
00:59 - foreign okay so let's understand the
01:02 - theoretical past first okay the maven
01:05 - plugins are central part of the balance
01:07 - framework it is used to perform specific
01:09 - goal according to according to Apache
01:12 - Maven there are two types of Maven
01:13 - plugins okay so to perform a specific
01:16 - task Maven has created
01:19 - Apache Maven has created Frameworks or
01:22 - they or they call them as plugins so to
01:25 - so you can use that plugin and perform
01:28 - some tasks for the for which they are
01:31 - they have they are created right so
01:33 - basically there there are two types of
01:34 - plugins in Maven one is build plugin and
01:37 - one is reporting plugin okay so what are
01:39 - build plugins these are these plugins
01:42 - are executed at the time of build okay
01:44 - so when you are executing when you are
01:47 - building your project these uh the
01:50 - plugins which are used a are known as
01:53 - plugins build plugins and the reporting
01:55 - plugins are these plugins are executed
01:57 - at the time of site generation when your
02:00 - site is actually or the project or when
02:02 - your project is getting generated and
02:05 - the plug is at that the at that time the
02:07 - plugins which are required are known as
02:09 - the reported plugins we'll see uh each
02:11 - one uh one by one okay so let's go and
02:15 - check what are the maven core plugins
02:17 - okay uh so here you can see uh these are
02:22 - some Maven code plugins first one is
02:24 - clean uh what it does is clean up the
02:27 - after build okay so if I will give you
02:30 - an example okay we will see one by one
02:32 - right so inside my plugins folder you
02:35 - can see clean okay so this is our first
02:37 - clean plugin uh so plugin and here you
02:41 - can see clean clean clean help if you
02:43 - double tap on clean help it will give
02:46 - you the this you can see okay so it's
02:51 - like a help you can see it it will tell
02:53 - you what it does is fling clean is the
02:55 - goal which cleans the build the certain
02:57 - to clean a project working directory out
02:59 - there that were generated at that build
03:01 - time okay and if you double click on
03:03 - clean clean uh so to demonstrate this
03:06 - first I have to build this project okay
03:08 - so to build uh I will go inside my life
03:10 - cycle and double click on install uh so
03:13 - that my target uh
03:15 - folder will get created over here you
03:18 - can see a Target folder will get created
03:20 - uh okay each time when I run the
03:24 - lifecycle command install the target
03:27 - folder will get created in and inside
03:29 - which all our files are there and what
03:32 - clean does is it will remove or delete
03:35 - the previous build okay so to remove
03:38 - this this is I have now previous build
03:40 - okay and now some changes I have done
03:42 - over here imagine I have done I have
03:44 - added dependence and I have done some
03:46 - Project work and and now I have to again
03:48 - uh generate that so before generating
03:50 - then I will clean I will double click on
03:52 - this
03:53 - it will again run that command
03:56 - now you can see Target folder will get
03:58 - removed uh since uh the clean command
04:00 - will clean up the after build okay and
04:03 - the compile what is compiler dial is it
04:05 - compiles the Java source code okay so
04:07 - these compile compile here you can see
04:10 - so again next plugin is compiler uh it
04:13 - will it will compile all the Java files
04:15 - like here you can see a main.java file
04:17 - is there it will compile those Java
04:19 - files and create the dot class files for
04:21 - the respective Java files okay and next
04:24 - is deploy deploys the artifact to the
04:27 - remote repository okay so in our
04:29 - previous video also we have discussed
04:31 - what is local repository and what is
04:33 - remote repository okay so uh so what the
04:36 - deploy command does is it will deploy
04:39 - not command it plugins what does it what
04:42 - it does is deploys the artifact to the
04:44 - remote repository okay and failsafe is
04:47 - runs the junit integration uh test with
04:50 - the isolated class for uh class loader
04:52 - so isolated class loader uh you can see
04:56 - what are these
04:59 - command does is
05:03 - okay so uh generated uh classes are
05:06 - there generated sources are there okay
05:09 - so what it does is uh it install runs
05:13 - the junit integration test so the
05:15 - testing part of our project is done uh
05:19 - using that plugin fail shape and next
05:22 - come install it installs the build
05:24 - artifact into the local repository okay
05:26 - and then resources plugin is there which
05:30 - copies the resources to the output
05:32 - directory for including in the jar okay
05:35 - so if you if I go here and I will check
05:38 - resources okay so this plugin is there
05:42 - so you can see again there are so many
05:45 - uh here resources copy resources which
05:48 - is Health Resources resources and
05:50 - resources test resources uh I will run
05:53 - one command for you so that you can
05:56 - understand okay so this command is run
05:59 - okay so now
06:03 - next command is site it generates a site
06:06 - for the current project okay so the site
06:09 - command is it generates one site for our
06:11 - current projects that we are
06:13 - working with okay so if I go here and
06:16 - click side site
06:21 - again in a lot of work it will do it
06:23 - will download from the central
06:24 - repository of Maven all the required
06:27 - things and after that it is a long
06:29 - process for for the first time when you
06:31 - run this okay and I I might get one
06:34 - error uh because I have not set up this
06:36 - project uh
06:37 - till now okay so we will do that in our
06:39 - upcoming videos the purpose of this
06:41 - video is just to understand what are the
06:44 - plugins and available in the Bible okay
06:46 - so again these are the two the rest of
06:49 - the appliance are there which are also
06:51 - one is junit and it's verifies the
06:54 - existence of the certain conditions so
06:56 - the condition that we did Define and it
06:59 - it is useful for the integration testing
07:01 - so to understand this plugin you have to
07:03 - know first what is integration testing
07:05 - what is testing also unit testing also
07:08 - so okay so we'll cover all this when we
07:11 - are at the uh
07:13 - ending part of this series because there
07:16 - we have one once project where we are uh
07:20 - has done some work in that project and
07:23 - we are trying to test that project using
07:25 - this uh
07:26 - plugins also okay and so I hope for this
07:30 - video you have understood what our valid
07:32 - plugins what it does and why they are
07:34 - important inside mapping okay so thank
07:36 - you for watching this video and I will
07:38 - see you in the next one

Cleaned transcript:

hello and welcome back to the new video of the maven tutorial series uh so in the previous video we we have actually started with uh creating a new project using Maven and that too in a eclipse uh not Eclipse uh IntelliJ IDEA IDE so I hope you have uh watched the previous video and you got some idea how to create a maven project inside IntelliJ IDEA you can use any any IDE of your choice uh but for this tutorial series I have choose IntelliJ IDEA uh okay so you can use anyone uh so I hope you watched that previous video where we have talking about the dependencies how we create the dependencies in our palm.xml file ypon.xml file is necessary to create and what is the importance of it so now uh we in this video we will focus give focus on this plugin sections okay so we have done with the life cycle we have done with the dependencies now for this video we will start with plugins all right so let's go foreign okay so let's understand the theoretical past first okay the maven plugins are central part of the balance framework it is used to perform specific goal according to according to Apache Maven there are two types of Maven plugins okay so to perform a specific task Maven has created Apache Maven has created Frameworks or they or they call them as plugins so to so you can use that plugin and perform some tasks for the for which they are they have they are created right so basically there there are two types of plugins in Maven one is build plugin and one is reporting plugin okay so what are build plugins these are these plugins are executed at the time of build okay so when you are executing when you are building your project these uh the plugins which are used a are known as plugins build plugins and the reporting plugins are these plugins are executed at the time of site generation when your site is actually or the project or when your project is getting generated and the plug is at that the at that time the plugins which are required are known as the reported plugins we'll see uh each one uh one by one okay so let's go and check what are the maven core plugins okay uh so here you can see uh these are some Maven code plugins first one is clean uh what it does is clean up the after build okay so if I will give you an example okay we will see one by one right so inside my plugins folder you can see clean okay so this is our first clean plugin uh so plugin and here you can see clean clean clean help if you double tap on clean help it will give you the this you can see okay so it's like a help you can see it it will tell you what it does is fling clean is the goal which cleans the build the certain to clean a project working directory out there that were generated at that build time okay and if you double click on clean clean uh so to demonstrate this first I have to build this project okay so to build uh I will go inside my life cycle and double click on install uh so that my target uh folder will get created over here you can see a Target folder will get created uh okay each time when I run the lifecycle command install the target folder will get created in and inside which all our files are there and what clean does is it will remove or delete the previous build okay so to remove this this is I have now previous build okay and now some changes I have done over here imagine I have done I have added dependence and I have done some Project work and and now I have to again uh generate that so before generating then I will clean I will double click on this it will again run that command now you can see Target folder will get removed uh since uh the clean command will clean up the after build okay and the compile what is compiler dial is it compiles the Java source code okay so these compile compile here you can see so again next plugin is compiler uh it will it will compile all the Java files like here you can see a main.java file is there it will compile those Java files and create the dot class files for the respective Java files okay and next is deploy deploys the artifact to the remote repository okay so in our previous video also we have discussed what is local repository and what is remote repository okay so uh so what the deploy command does is it will deploy not command it plugins what does it what it does is deploys the artifact to the remote repository okay and failsafe is runs the junit integration uh test with the isolated class for uh class loader so isolated class loader uh you can see what are these command does is okay so uh generated uh classes are there generated sources are there okay so what it does is uh it install runs the junit integration test so the testing part of our project is done uh using that plugin fail shape and next come install it installs the build artifact into the local repository okay and then resources plugin is there which copies the resources to the output directory for including in the jar okay so if you if I go here and I will check resources okay so this plugin is there so you can see again there are so many uh here resources copy resources which is Health Resources resources and resources test resources uh I will run one command for you so that you can understand okay so this command is run okay so now next command is site it generates a site for the current project okay so the site command is it generates one site for our current projects that we are working with okay so if I go here and click side site again in a lot of work it will do it will download from the central repository of Maven all the required things and after that it is a long process for for the first time when you run this okay and I I might get one error uh because I have not set up this project uh till now okay so we will do that in our upcoming videos the purpose of this video is just to understand what are the plugins and available in the Bible okay so again these are the two the rest of the appliance are there which are also one is junit and it's verifies the existence of the certain conditions so the condition that we did Define and it it is useful for the integration testing so to understand this plugin you have to know first what is integration testing what is testing also unit testing also so okay so we'll cover all this when we are at the uh ending part of this series because there we have one once project where we are uh has done some work in that project and we are trying to test that project using this uh plugins also okay and so I hope for this video you have understood what our valid plugins what it does and why they are important inside mapping okay so thank you for watching this video and I will see you in the next one
