With timestamps:

00:01 - [Music]
00:09 - [Music]
00:12 - hello everyone and welcome back in the
00:16 - introduction section of this course we
00:18 - discussed how one of the main features
00:20 - of angular is that it gives us the
00:22 - ability of creating our own custom
00:24 - elements so let's do that in this lesson
00:27 - we are going to be creating our very
00:29 - first angular custom component the
00:32 - component is between a course card
00:35 - similar to this one you can see here
00:37 - that the course card is visible and
00:40 - that's because we have added here some
00:42 - HTML in our application component
00:44 - template now imagine that our
00:46 - application has several places where we
00:48 - would like to display course cards so we
00:51 - don't want to repeat this HTML
00:54 - everywhere on the application also the
00:57 - data that we are displaying here in this
00:59 - course card might be dynamic we might
01:01 - have multiple cards such as for example
01:04 - a list of course is displayed and we
01:07 - want to pass to each card the data that
01:10 - we are retrieving from the backend
01:11 - instead of hard-coding everything on the
01:14 - front-end so let's see how a component
01:16 - is going to help us to implement those
01:18 - use cases in order to create a new
01:20 - component let's head over here to the
01:22 - command line stop our server and what we
01:26 - are about to do here is we are going to
01:28 - use the angular CLI to scaffold a new
01:31 - component for that we are going to run
01:33 - the following command ng generate
01:35 - component and then we need to give here
01:39 - a name for a component so we are going
01:41 - to call this the course - current
01:44 - component after running this command we
01:47 - see here that the angular CLI has
01:49 - generated here a few different files we
01:52 - have here a typescript file for the
01:54 - component we have here an HTML template
01:57 - some CSS and we also have here a test
02:01 - specification let's have a look at these
02:03 - files
02:04 - they are here inside the source folder
02:06 - inside the app directory and we have
02:09 - here the new course card folder
02:11 - containing all these files let's now
02:15 - have a look at each of these files
02:16 - separately let's start with the course
02:19 - card component so as you can see this
02:21 - file contains that
02:23 - script class called course card
02:25 - component we can see that these
02:28 - corresponds to an angular component
02:30 - which represents a custom element
02:32 - because of the presence of the add
02:35 - component decorator inside the decorator
02:38 - configuration we have here a series of
02:40 - properties the first is the selector
02:43 - property that defines what is the HTML
02:47 - tag that this component belongs to going
02:50 - back here to our application component
02:52 - the selector means that we are going to
02:55 - replace this course card HTML here by a
02:59 - new custom HTML element called course -
03:02 - card so the name of this custom HTML tag
03:06 - is the same as the selector string that
03:09 - we have here the next thing that we have
03:12 - here in our component configuration is
03:14 - the template URL which points to the
03:17 - location in the file system of a
03:19 - template file if we open it up we can
03:22 - see that this is essentially empty at
03:25 - the moment but the idea is that this
03:27 - file is going to contain the HTML that
03:30 - we are going to see on the screen that
03:32 - corresponds here to a course card so you
03:35 - can see that is which correspond here to
03:37 - this course card HTML that we have here
03:40 - so let's go ahead and remove it here
03:43 - from the home page and let's move it
03:47 - here inside the course card HTML so now
03:50 - we have copied here this static HTML and
03:53 - notice that we are applying here some
03:56 - styles we will see later in the course
03:58 - how to make these Styles specific only
04:01 - to this component right now what we're
04:04 - going to do is we are going to run our
04:06 - application using this new angular
04:09 - component that we have created here with
04:12 - a set of empty styles for the moment
04:15 - let's go to the command line and let's
04:18 - run NPM start after a moment our server
04:22 - is now up and running so if we now
04:24 - reload the application we can see that
04:26 - we get the exact same result that we had
04:29 - before but now we have extracted the
04:31 - HTML that we have here and we have moved
04:34 - it inside the custom HTML tag
04:37 - course card that we have created
04:38 - ourselves this means that if we create
04:41 - here to our free extra HTML tags in our
04:45 - template and we were fresh the
04:46 - application we are going to see that we
04:48 - have here free instances of the course
04:51 - card component as expected as we can see
04:55 - using angular we managed to create in
04:57 - only a couple of minutes a new HTML
05:00 - element that we can use to build our
05:03 - application if this application will
05:04 - have multiple screens where we have to
05:07 - show course cards such as for example
05:09 - and all courses page or a courses in
05:12 - promotion page we could use this
05:15 - component instead of copying all these
05:18 - HTML everywhere where we need it but
05:21 - notice that the strings that we have
05:22 - here with the description and also the
05:24 - image are hard-coded so we want to avoid
05:28 - that we want to make this content
05:30 - configurable we want to receive this
05:33 - content here as an input for the
05:36 - component the same way that for standard
05:38 - HTML tags we have configuration
05:40 - properties such as for example here the
05:42 - class property the source property etc
05:45 - let's then see how can we have
05:47 - configuration properties to our custom
05:50 - HTML element
05:54 - [Music]
05:57 - hello everyone and welcome back in these
06:00 - lessons we are going to talk about
06:01 - component inputs so as we have seen in
06:05 - the last lesson we now have here free
06:06 - instances of the course card component
06:09 - all this text here is the same and the
06:13 - image is also the same we would like to
06:15 - give to each course card a different
06:18 - title and image and let's see where we
06:21 - could get the data for that if you open
06:24 - here our angular course root repository
06:27 - and then open here the source folder
06:30 - you're going to see that there is a
06:32 - typescript file here called DB dated dot
06:35 - TS if we click on it we will see that it
06:38 - contains here a series of courses so
06:41 - each of these javascript objects that we
06:44 - see here corresponds to a given course
06:46 - let's see how can you use these to print
06:49 - to the screen one course card for each
06:52 - of the elements that we have here the
06:55 - first thing that we have to do is to
06:57 - make the data available to the template
07:00 - the template consumes data that is
07:03 - available here at a level of the
07:05 - component as a member variable so let's
07:08 - say that we're going to define here a
07:10 - variable called courses that is going to
07:12 - contain a few of the courses here
07:15 - available in this array let's say that
07:18 - we want to take here the course is
07:20 - number one number two and number three
07:22 - we can make this data available at a
07:25 - level of the application component so
07:27 - that we can add it to the screen by
07:29 - adding member variables here at the
07:32 - level of this component let's say that
07:33 - we want to make available the data for
07:35 - this course then we define here a
07:38 - variable called core course and we
07:41 - assign it the first element of the
07:44 - courses array you can do the same for a
07:46 - couple of other courses let's define
07:48 - here for example one for rxjs and the
07:52 - other for ng rx so here we have free
07:56 - member variables defined any of these
07:58 - member variables are available for being
08:00 - used here at the level of the template
08:02 - let's try this out we are going to add
08:04 - here an h1 tag and we're going to use
08:07 - here the angular
08:08 - template interpolation syntax and we're
08:11 - going to try to access the description
08:14 - of the core course if we now reload the
08:17 - application we are going to see that
08:18 - indeed we are using here the title of
08:21 - the first course if by some reason we
08:24 - would like to print instead the title of
08:26 - the second course we just have to use
08:28 - the second variable that we have defined
08:31 - here if we replace core course with rxjs
08:34 - course and reload our application we are
08:36 - going to see that now we have the title
08:38 - of the second course here in our courses
08:42 - array so as you can see in order to be
08:44 - able to use some data in our template we
08:48 - need to first assign it to a member
08:50 - variable at the level of a component if
08:53 - we don't do that first then the data
08:55 - will not be visible here at the level of
08:58 - the template now instead of printing out
09:00 - here the description of the first course
09:02 - what we would like to do is to pass the
09:04 - description as an input of the course
09:07 - card component we would like to do
09:09 - something like this we would like to
09:11 - define here a custom input property
09:13 - called title and inside it somehow we
09:16 - would like to pass in here the rxjs
09:20 - course description as we have seen
09:22 - before the angular syntax for inputs is
09:26 - the square bracket syntax so this says -
09:30 - angular that the content here inside
09:33 - these double quotes is to be interpreted
09:36 - as a JavaScript expression that is going
09:39 - to be evaluated in the context of the
09:41 - application component now the question
09:44 - is how to add this input property title
09:47 - to the course curve we can do so by
09:49 - defining here a member variable which
09:52 - will be a string at the level of the
09:55 - course curve component and we want to
09:57 - annotate it with the angular core input
10:00 - decorator this way angular will know
10:03 - that this is an improved property of the
10:06 - course card element with this in place
10:09 - we are now passing in here the
10:10 - description of the course what we want
10:13 - to do now is to use the title here at
10:16 - the level of the course card component
10:18 - template in order to do that we do the
10:21 - same as we
10:22 - doing here in our application component
10:25 - we are going to use here the angular
10:27 - double curly brace syntax for
10:29 - interpolating here an expression and we
10:32 - are going to access here the title
10:35 - property that is present here in the
10:38 - context of the course curve component
10:40 - class so let's try this out if we now
10:43 - reload our application we are going to
10:45 - see that for the first care that we have
10:48 - defined here in our list of cards we
10:51 - still have here the rxjs in practice
10:54 - course description actually I wanted to
10:57 - pass in here the core course description
11:00 - so let's quickly fix that we reload the
11:03 - application and we can see that we have
11:05 - here the correct title the other two
11:07 - cards however are not displaying
11:09 - anything and this is because the title
11:12 - property for these two other cards has
11:16 - not been defined so this means that each
11:19 - of the course card components has its
11:22 - own data scope there is an instance of
11:25 - the course card component for each of
11:28 - the courses here we have the title with
11:31 - this value but here this value is not
11:34 - defined so we have here an empty string
11:37 - let's now change here our template and
11:40 - pass in here the other course
11:42 - descriptions we are going to add here in
11:45 - the second car the title of the rxjs
11:48 - course and here we are going to pass in
11:51 - the title of the ngx course and now by
11:55 - reloading here our cards we can see that
11:57 - we have the titles as expected
11:59 - first the core deep dive then rxjs and
12:03 - then and grx now the next thing that we
12:06 - would like to do is to change the course
12:08 - image for each of the cards so we would
12:11 - like to pass to the component this
12:13 - second property here the icon URL we
12:17 - will also like to change here the long
12:19 - description of the course so that it
12:21 - corresponds to the text that we have
12:23 - here so one way of doing it would be to
12:26 - pass to this course car component two
12:29 - extra properties we would go here to the
12:31 - course car component and we will add
12:33 - here a couple of new properties
12:35 - we are going to do this in a different
12:37 - way we are going to instead pass as an
12:40 - input to the course car component the
12:43 - complete course object in one go with
12:46 - all its properties for that we are going
12:49 - to be using here a type definition that
12:51 - we will find here in the model folder if
12:55 - you open the course dot t-- s file
12:57 - you're going to see that we have here a
12:58 - very simple interface defined that
13:01 - defines a course type this is a very
13:04 - practical way of defining custom
13:06 - JavaScript object types in a type safe
13:09 - way as we will see this is going to give
13:12 - us Auto completion at the level of our
13:14 - component classes and even at a level of
13:16 - the template right now we want to
13:19 - refactor our course card component to
13:22 - take as input instead of only the course
13:25 - title we want to take as input a
13:28 - complete course object that we are going
13:31 - to import here from the model folder now
13:34 - moving to the template of our course
13:37 - care component this variable here is no
13:39 - longer present in the course card
13:41 - component class instead we have
13:44 - available the course object so we can
13:47 - now access the title of the course by
13:51 - Auto completing here the property that
13:53 - we want we have here all the properties
13:56 - available at a level template and we can
13:58 - now choose here course dot description
14:01 - the same way that we have printed here
14:03 - the description of the course we can
14:05 - also access here the course image so the
14:09 - source of this image is no longer going
14:12 - to be here an hard-coded value instead
14:15 - we are going to pass it the value of the
14:18 - course image we are going to again
14:20 - access the course object and we are
14:22 - going to see that in our autocomplete
14:24 - list we have available the icon URL
14:26 - property in a very similar way using an
14:30 - interpolation expression we are going to
14:32 - be able to pass in here the long
14:35 - description of the course now in order
14:38 - to view the free courses on the screen
14:40 - all we have to do is go back here to our
14:43 - application component template and
14:45 - instead of filling in the title property
14:47 - we are going to instead
14:49 - feeling the course property for each of
14:53 - the courses for the first car that we
14:55 - want to pass in the core course for the
14:58 - second the rxjs course in for the FIR
15:01 - the NZXT course if we now try this out
15:04 - we are going to see that our data is
15:06 - being correctly displayed as expected as
15:09 - we can see the input syntax with square
15:11 - brackets for passing input data to a
15:14 - custom component it's exactly the same
15:17 - syntax that we use for defining a
15:19 - property of a standard HTML element such
15:23 - as for example an image tag the syntax
15:26 - is consistent in both cases next what
15:29 - we're going to cover is component
15:31 - outputs how to generate custom events
15:34 - from our custom components hello
15:42 - everyone and welcome back in the last
15:44 - lesson we'll learn how to pass input
15:46 - data to a custom component using the
15:49 - square brackets template syntax and
15:52 - input a notation here at level of the
15:56 - component class this lesson we are going
15:58 - to see how can we make a component such
16:00 - as the course curve to emit custom
16:03 - events that can be handled here at a
16:06 - level of the parent component let's give
16:08 - an example of a custom event we would
16:11 - like to go here to our course car
16:13 - component and we would like to add here
16:15 - a button when this button is pushed the
16:18 - user is going to view the course so it's
16:21 - going to be redirected to a new page
16:23 - that is going to display the course that
16:25 - corresponds to the cart so if we hit
16:27 - command s we're going to see that now on
16:30 - each course card we have here a new view
16:33 - course button as we have seen before we
16:35 - can add here to this button a click
16:38 - handler using the following syntax we
16:41 - are going to add here between round
16:42 - braces the browser event that we want to
16:45 - handle and here on the right hand side
16:47 - we need to provide an expression that is
16:49 - typically a function call so I'm going
16:52 - to add here a new method on course
16:55 - viewed and this method needs to be part
16:58 - of the course card component so we're
17:01 - going to add
17:02 - here a new method that is going to be
17:05 - called in response to this click in
17:08 - order to confirm that this click handler
17:10 - is working correctly let's add here some
17:12 - logging and try this out if we now open
17:15 - here the console in the chrome dev tools
17:18 - we're going to see that whenever we
17:20 - click here on the View course button
17:22 - we're going to get here the logging
17:24 - statement as expected so this will
17:26 - happen independently of the car that we
17:29 - click notice that the template syntax
17:31 - that we are using here for having a
17:34 - click event handler it's just another
17:36 - way of adding a standard browser event
17:39 - listener these works as a standard
17:41 - browser event which means that the click
17:43 - event will bubble to outside the
17:46 - component itself to outside the course
17:49 - curve so this means that if we go here
17:51 - to our application component and we add
17:53 - here a click handler at level of the
17:56 - course card itself by using the same
17:59 - syntax we are going to see that this
18:01 - event handler is going to be triggered
18:03 - as expected let's try this out we are
18:06 - going to add here a click handler called
18:08 - on curve click and this function is
18:11 - going to exist here at the level of the
18:14 - application component to this event
18:16 - handler function we're going to be
18:17 - having here a new logging statement so
18:21 - what is going to happen here is that
18:22 - when we click here on the View course
18:25 - button these event handler here at the
18:28 - level of the course card component he's
18:30 - going to get triggered this logging
18:32 - statement is going to be issued to the
18:34 - console and then the browser click event
18:36 - is going to bubble up is going to be
18:39 - caught here at the level of this click
18:41 - Handler and then this function is going
18:44 - to get triggered let's try this out
18:46 - let's open the console and see what
18:49 - happens whenever we click on view course
18:52 - so as you can see we have here the click
18:55 - handler that was triggered at a level of
18:57 - the card component followed by the click
18:59 - handler at the level of the application
19:01 - component using the same syntax that we
19:04 - have used to handle here a normal
19:06 - browser event such as a click event we
19:09 - can also handle custom events let's say
19:12 - that instead of responding here to the
19:14 - click event
19:16 - that gets bubbled up from the view
19:18 - course button we would like to respond
19:20 - here to a course selected custom event
19:24 - so this is not a standard browser event
19:27 - let's rename here our function in order
19:30 - to reflect the fact that this is a
19:32 - custom browser event this is going to be
19:34 - called the on course selected method
19:37 - let's then go back to our application
19:39 - component and rename the event handling
19:43 - method at the level of our course CAD
19:45 - component what we want to do now is to
19:47 - omit the custom event in order to do
19:50 - that we are going to need here a custom
19:53 - event emitter so let's instantiate it
19:56 - using the event emitter class from
19:59 - angular core to our event emitter we can
20:02 - pass an optional type parameter that is
20:04 - going to define what type of values are
20:07 - getting emitted in this case we want to
20:09 - emit an instance of course so we can use
20:13 - this course selected emitter to emit
20:16 - here a custom value and here we can pass
20:20 - in the value of the course that got
20:22 - selected we can access this using these
20:25 - dot course with this new implementation
20:28 - whenever we click here on the view
20:30 - course button we are then going to be
20:33 - meeting here a custom event that is
20:35 - going to passing the selected course as
20:37 - a payload and that will be caught here
20:39 - at the level of the parent component
20:41 - using this event handler we can now
20:44 - retrieve the value that was emitted by
20:47 - the event emitter
20:48 - using the special dollar event variable
20:51 - this means that here on the on course
20:54 - selected method we can now add here a
20:56 - new parameter which is the value that
21:00 - got emitted by the event emitter in this
21:03 - case the course in order to confirm that
21:06 - we are indeed receiving here the course
21:08 - let's log it out to the console now if
21:11 - we would try this program as it is you
21:13 - might be surprised to see that on course
21:15 - selected is not getting triggered and
21:18 - this is because here in our course card
21:20 - component we did not mark this event
21:23 - emitter as being an output of the
21:26 - component
21:27 - so in order for our example to work we
21:30 - need to add here the output decorator
21:32 - from angular core in order to mark this
21:35 - event emitter as an output of this
21:38 - component if we don't add this here then
21:41 - the example would not work with this in
21:43 - place let's now try out our example as
21:45 - we can see we have added here our custom
21:48 - event handler only at the first care of
21:51 - our list let's have a look at what we
21:53 - have then in the console if we click
21:55 - here on the first course we are going to
21:58 - see that we have here indeed the first
22:00 - logging statement then here at the level
22:03 - of the course card component and we have
22:05 - here a second logging statement that was
22:08 - done at the level of the application
22:11 - component so our event emitter triggered
22:14 - here a custom event that was caught here
22:17 - and on course selected was triggered and
22:20 - the course was indeed printed out to the
22:23 - console as expected now if we click here
22:26 - on another course let's say for example
22:28 - the last in the list we are going to see
22:32 - that nothing happens
22:33 - other than we can see here the logging
22:36 - at the level of the course card
22:37 - component where the button click handler
22:40 - was triggered but no custom event was
22:44 - received here at the level of the
22:45 - application component and this is
22:47 - because we only added here an event
22:50 - handler to the first card of our list so
22:53 - if we add here similar event handlers to
22:57 - the other cards we are going to see that
22:59 - any care will be printed out to the
23:02 - console let's then try this out if we
23:05 - try this new version of the program we
23:07 - see here that the first care was printed
23:10 - out here to the screen but if we now
23:12 - click here on the second and on the
23:14 - further courses we are going to see that
23:16 - the correct data is being logged as
23:19 - expected so as you can see the template
23:21 - mechanism for handling custom events in
23:24 - angular looks exactly the same as the
23:27 - one for handling native browser events
23:30 - so handling here the native click button
23:32 - looks exactly the same
23:34 - as handling here a custom event there is
23:36 - one important difference though is that
23:38 - these type of events
23:40 - they do not bubble up the component
23:43 - error key so the click event that was
23:46 - emitted here did bubble up from the
23:49 - course card component up until here our
23:52 - application component this is just the
23:54 - standard browser mechanism it's not
23:56 - angular doing the bubbling of the event
23:59 - but these custom events
24:01 - unlike the native event will not bubble
24:04 - up also notice that the name of our
24:06 - custom event is exactly the same as the
24:09 - name here of our event emitter this is
24:12 - because angular takes the name of the
24:15 - event from the name of the emitter if
24:17 - nothing else gets specified let's say
24:20 - that we would now rename this variable
24:22 - to course emitter so if we would do so
24:25 - then our example would no longer work
24:27 - because here in the template we are
24:30 - expecting an output event named course
24:33 - selector and there isn't here an emitter
24:36 - name like that so if we want to be fine
24:38 - here at the level of the output
24:41 - decorator a different name for the
24:43 - custom event other than the name that we
24:45 - have here for the event emitter we can
24:47 - use here this string parameter so if we
24:50 - now specify here a value then this is
24:53 - going to be the name of the custom event
24:56 - link to this emitter so if we now retry
24:59 - our application we are going to see that
25:01 - everything is still working as expected
25:04 - so if we head over here to the console
25:06 - and we hit here for example the second
25:09 - kind of the list we are going to see
25:10 - that our custom event is still being
25:13 - triggered and with this we have covered
25:16 - the angular component inputs and outputs
25:21 - [Music]
25:30 - you

Cleaned transcript:

hello everyone and welcome back in the introduction section of this course we discussed how one of the main features of angular is that it gives us the ability of creating our own custom elements so let's do that in this lesson we are going to be creating our very first angular custom component the component is between a course card similar to this one you can see here that the course card is visible and that's because we have added here some HTML in our application component template now imagine that our application has several places where we would like to display course cards so we don't want to repeat this HTML everywhere on the application also the data that we are displaying here in this course card might be dynamic we might have multiple cards such as for example a list of course is displayed and we want to pass to each card the data that we are retrieving from the backend instead of hardcoding everything on the frontend so let's see how a component is going to help us to implement those use cases in order to create a new component let's head over here to the command line stop our server and what we are about to do here is we are going to use the angular CLI to scaffold a new component for that we are going to run the following command ng generate component and then we need to give here a name for a component so we are going to call this the course current component after running this command we see here that the angular CLI has generated here a few different files we have here a typescript file for the component we have here an HTML template some CSS and we also have here a test specification let's have a look at these files they are here inside the source folder inside the app directory and we have here the new course card folder containing all these files let's now have a look at each of these files separately let's start with the course card component so as you can see this file contains that script class called course card component we can see that these corresponds to an angular component which represents a custom element because of the presence of the add component decorator inside the decorator configuration we have here a series of properties the first is the selector property that defines what is the HTML tag that this component belongs to going back here to our application component the selector means that we are going to replace this course card HTML here by a new custom HTML element called course card so the name of this custom HTML tag is the same as the selector string that we have here the next thing that we have here in our component configuration is the template URL which points to the location in the file system of a template file if we open it up we can see that this is essentially empty at the moment but the idea is that this file is going to contain the HTML that we are going to see on the screen that corresponds here to a course card so you can see that is which correspond here to this course card HTML that we have here so let's go ahead and remove it here from the home page and let's move it here inside the course card HTML so now we have copied here this static HTML and notice that we are applying here some styles we will see later in the course how to make these Styles specific only to this component right now what we're going to do is we are going to run our application using this new angular component that we have created here with a set of empty styles for the moment let's go to the command line and let's run NPM start after a moment our server is now up and running so if we now reload the application we can see that we get the exact same result that we had before but now we have extracted the HTML that we have here and we have moved it inside the custom HTML tag course card that we have created ourselves this means that if we create here to our free extra HTML tags in our template and we were fresh the application we are going to see that we have here free instances of the course card component as expected as we can see using angular we managed to create in only a couple of minutes a new HTML element that we can use to build our application if this application will have multiple screens where we have to show course cards such as for example and all courses page or a courses in promotion page we could use this component instead of copying all these HTML everywhere where we need it but notice that the strings that we have here with the description and also the image are hardcoded so we want to avoid that we want to make this content configurable we want to receive this content here as an input for the component the same way that for standard HTML tags we have configuration properties such as for example here the class property the source property etc let's then see how can we have configuration properties to our custom HTML element hello everyone and welcome back in these lessons we are going to talk about component inputs so as we have seen in the last lesson we now have here free instances of the course card component all this text here is the same and the image is also the same we would like to give to each course card a different title and image and let's see where we could get the data for that if you open here our angular course root repository and then open here the source folder you're going to see that there is a typescript file here called DB dated dot TS if we click on it we will see that it contains here a series of courses so each of these javascript objects that we see here corresponds to a given course let's see how can you use these to print to the screen one course card for each of the elements that we have here the first thing that we have to do is to make the data available to the template the template consumes data that is available here at a level of the component as a member variable so let's say that we're going to define here a variable called courses that is going to contain a few of the courses here available in this array let's say that we want to take here the course is number one number two and number three we can make this data available at a level of the application component so that we can add it to the screen by adding member variables here at the level of this component let's say that we want to make available the data for this course then we define here a variable called core course and we assign it the first element of the courses array you can do the same for a couple of other courses let's define here for example one for rxjs and the other for ng rx so here we have free member variables defined any of these member variables are available for being used here at the level of the template let's try this out we are going to add here an h1 tag and we're going to use here the angular template interpolation syntax and we're going to try to access the description of the core course if we now reload the application we are going to see that indeed we are using here the title of the first course if by some reason we would like to print instead the title of the second course we just have to use the second variable that we have defined here if we replace core course with rxjs course and reload our application we are going to see that now we have the title of the second course here in our courses array so as you can see in order to be able to use some data in our template we need to first assign it to a member variable at the level of a component if we don't do that first then the data will not be visible here at the level of the template now instead of printing out here the description of the first course what we would like to do is to pass the description as an input of the course card component we would like to do something like this we would like to define here a custom input property called title and inside it somehow we would like to pass in here the rxjs course description as we have seen before the angular syntax for inputs is the square bracket syntax so this says angular that the content here inside these double quotes is to be interpreted as a JavaScript expression that is going to be evaluated in the context of the application component now the question is how to add this input property title to the course curve we can do so by defining here a member variable which will be a string at the level of the course curve component and we want to annotate it with the angular core input decorator this way angular will know that this is an improved property of the course card element with this in place we are now passing in here the description of the course what we want to do now is to use the title here at the level of the course card component template in order to do that we do the same as we doing here in our application component we are going to use here the angular double curly brace syntax for interpolating here an expression and we are going to access here the title property that is present here in the context of the course curve component class so let's try this out if we now reload our application we are going to see that for the first care that we have defined here in our list of cards we still have here the rxjs in practice course description actually I wanted to pass in here the core course description so let's quickly fix that we reload the application and we can see that we have here the correct title the other two cards however are not displaying anything and this is because the title property for these two other cards has not been defined so this means that each of the course card components has its own data scope there is an instance of the course card component for each of the courses here we have the title with this value but here this value is not defined so we have here an empty string let's now change here our template and pass in here the other course descriptions we are going to add here in the second car the title of the rxjs course and here we are going to pass in the title of the ngx course and now by reloading here our cards we can see that we have the titles as expected first the core deep dive then rxjs and then and grx now the next thing that we would like to do is to change the course image for each of the cards so we would like to pass to the component this second property here the icon URL we will also like to change here the long description of the course so that it corresponds to the text that we have here so one way of doing it would be to pass to this course car component two extra properties we would go here to the course car component and we will add here a couple of new properties we are going to do this in a different way we are going to instead pass as an input to the course car component the complete course object in one go with all its properties for that we are going to be using here a type definition that we will find here in the model folder if you open the course dot t s file you're going to see that we have here a very simple interface defined that defines a course type this is a very practical way of defining custom JavaScript object types in a type safe way as we will see this is going to give us Auto completion at the level of our component classes and even at a level of the template right now we want to refactor our course card component to take as input instead of only the course title we want to take as input a complete course object that we are going to import here from the model folder now moving to the template of our course care component this variable here is no longer present in the course card component class instead we have available the course object so we can now access the title of the course by Auto completing here the property that we want we have here all the properties available at a level template and we can now choose here course dot description the same way that we have printed here the description of the course we can also access here the course image so the source of this image is no longer going to be here an hardcoded value instead we are going to pass it the value of the course image we are going to again access the course object and we are going to see that in our autocomplete list we have available the icon URL property in a very similar way using an interpolation expression we are going to be able to pass in here the long description of the course now in order to view the free courses on the screen all we have to do is go back here to our application component template and instead of filling in the title property we are going to instead feeling the course property for each of the courses for the first car that we want to pass in the core course for the second the rxjs course in for the FIR the NZXT course if we now try this out we are going to see that our data is being correctly displayed as expected as we can see the input syntax with square brackets for passing input data to a custom component it's exactly the same syntax that we use for defining a property of a standard HTML element such as for example an image tag the syntax is consistent in both cases next what we're going to cover is component outputs how to generate custom events from our custom components hello everyone and welcome back in the last lesson we'll learn how to pass input data to a custom component using the square brackets template syntax and input a notation here at level of the component class this lesson we are going to see how can we make a component such as the course curve to emit custom events that can be handled here at a level of the parent component let's give an example of a custom event we would like to go here to our course car component and we would like to add here a button when this button is pushed the user is going to view the course so it's going to be redirected to a new page that is going to display the course that corresponds to the cart so if we hit command s we're going to see that now on each course card we have here a new view course button as we have seen before we can add here to this button a click handler using the following syntax we are going to add here between round braces the browser event that we want to handle and here on the right hand side we need to provide an expression that is typically a function call so I'm going to add here a new method on course viewed and this method needs to be part of the course card component so we're going to add here a new method that is going to be called in response to this click in order to confirm that this click handler is working correctly let's add here some logging and try this out if we now open here the console in the chrome dev tools we're going to see that whenever we click here on the View course button we're going to get here the logging statement as expected so this will happen independently of the car that we click notice that the template syntax that we are using here for having a click event handler it's just another way of adding a standard browser event listener these works as a standard browser event which means that the click event will bubble to outside the component itself to outside the course curve so this means that if we go here to our application component and we add here a click handler at level of the course card itself by using the same syntax we are going to see that this event handler is going to be triggered as expected let's try this out we are going to add here a click handler called on curve click and this function is going to exist here at the level of the application component to this event handler function we're going to be having here a new logging statement so what is going to happen here is that when we click here on the View course button these event handler here at the level of the course card component he's going to get triggered this logging statement is going to be issued to the console and then the browser click event is going to bubble up is going to be caught here at the level of this click Handler and then this function is going to get triggered let's try this out let's open the console and see what happens whenever we click on view course so as you can see we have here the click handler that was triggered at a level of the card component followed by the click handler at the level of the application component using the same syntax that we have used to handle here a normal browser event such as a click event we can also handle custom events let's say that instead of responding here to the click event that gets bubbled up from the view course button we would like to respond here to a course selected custom event so this is not a standard browser event let's rename here our function in order to reflect the fact that this is a custom browser event this is going to be called the on course selected method let's then go back to our application component and rename the event handling method at the level of our course CAD component what we want to do now is to omit the custom event in order to do that we are going to need here a custom event emitter so let's instantiate it using the event emitter class from angular core to our event emitter we can pass an optional type parameter that is going to define what type of values are getting emitted in this case we want to emit an instance of course so we can use this course selected emitter to emit here a custom value and here we can pass in the value of the course that got selected we can access this using these dot course with this new implementation whenever we click here on the view course button we are then going to be meeting here a custom event that is going to passing the selected course as a payload and that will be caught here at the level of the parent component using this event handler we can now retrieve the value that was emitted by the event emitter using the special dollar event variable this means that here on the on course selected method we can now add here a new parameter which is the value that got emitted by the event emitter in this case the course in order to confirm that we are indeed receiving here the course let's log it out to the console now if we would try this program as it is you might be surprised to see that on course selected is not getting triggered and this is because here in our course card component we did not mark this event emitter as being an output of the component so in order for our example to work we need to add here the output decorator from angular core in order to mark this event emitter as an output of this component if we don't add this here then the example would not work with this in place let's now try out our example as we can see we have added here our custom event handler only at the first care of our list let's have a look at what we have then in the console if we click here on the first course we are going to see that we have here indeed the first logging statement then here at the level of the course card component and we have here a second logging statement that was done at the level of the application component so our event emitter triggered here a custom event that was caught here and on course selected was triggered and the course was indeed printed out to the console as expected now if we click here on another course let's say for example the last in the list we are going to see that nothing happens other than we can see here the logging at the level of the course card component where the button click handler was triggered but no custom event was received here at the level of the application component and this is because we only added here an event handler to the first card of our list so if we add here similar event handlers to the other cards we are going to see that any care will be printed out to the console let's then try this out if we try this new version of the program we see here that the first care was printed out here to the screen but if we now click here on the second and on the further courses we are going to see that the correct data is being logged as expected so as you can see the template mechanism for handling custom events in angular looks exactly the same as the one for handling native browser events so handling here the native click button looks exactly the same as handling here a custom event there is one important difference though is that these type of events they do not bubble up the component error key so the click event that was emitted here did bubble up from the course card component up until here our application component this is just the standard browser mechanism it's not angular doing the bubbling of the event but these custom events unlike the native event will not bubble up also notice that the name of our custom event is exactly the same as the name here of our event emitter this is because angular takes the name of the event from the name of the emitter if nothing else gets specified let's say that we would now rename this variable to course emitter so if we would do so then our example would no longer work because here in the template we are expecting an output event named course selector and there isn't here an emitter name like that so if we want to be fine here at the level of the output decorator a different name for the custom event other than the name that we have here for the event emitter we can use here this string parameter so if we now specify here a value then this is going to be the name of the custom event link to this emitter so if we now retry our application we are going to see that everything is still working as expected so if we head over here to the console and we hit here for example the second kind of the list we are going to see that our custom event is still being triggered and with this we have covered the angular component inputs and outputs you
