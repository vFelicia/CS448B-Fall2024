With timestamps:

00:00 - hello everyone this is vasha and welcome
00:02 - to programming knowledge
00:10 - so in the previous tutorial we learnt
00:11 - about the shadow dom objects
00:13 - in this tutorial we're going to
00:15 - understand some of the important
00:16 - selenium commands which is frequently
00:18 - used to write the test scripts
00:21 - now these selenium commands consist of
00:23 - the browser commands
00:24 - the navigation commands and the web
00:26 - element commands
00:28 - today we are going to understand the
00:30 - browser commands like what are browser
00:32 - commands what are the different types of
00:33 - browser commands with their syntax
00:35 - also we will implement some set of test
00:38 - cases
00:39 - and then we will understand the
00:40 - difference between the close method and
00:42 - the quick method
00:43 - so let's get started now first let us
00:46 - understand what are browser commands
00:49 - browser commands are something that are
00:50 - very basic operations of the web driver
00:53 - which includes the closing of the
00:55 - browser performing some few tasks those
00:57 - few tasks
00:58 - is like get title to uh quit
01:02 - to manage to close the browser to get
01:04 - the current url to get the page source
01:07 - so these are some of the uh operations
01:09 - these are some of the few tasks that we
01:11 - perform on the selenium webdriver
01:13 - so and these are some of the list that
01:15 - is given over here
01:17 - this is the list that is given over here
01:19 - now if you write
01:20 - for example if i write driver dot
01:25 - you can see this list so these are the
01:27 - different this uh list which is getting
01:29 - highlighted over here
01:30 - so these are the different browser
01:32 - commands that is present over here
01:34 - okay so these are browser commands now i
01:36 - have just created this basic uh
01:39 - notes this basic sheet which consists of
01:42 - the browser commands
01:43 - the navigational commands the web
01:45 - element commands
01:47 - which consists of the commands the
01:48 - description the syntax
01:50 - and what parameters accepts and what it
01:52 - returns it will be very quick recap for
01:55 - you while going in interviews because
01:56 - they frequently ask these questions like
01:59 - what is the difference between the close
02:01 - the quit method the submit and the click
02:03 - method
02:04 - and what is the difference between find
02:06 - element and find elements
02:08 - so these are some of the differences
02:09 - which we will cover and also we will
02:12 - study these
02:12 - commands so uh this is the sheet that i
02:16 - have prepared i will give the link of
02:17 - the sheet in the description box
02:19 - you can download the pdf format also i
02:22 - have uploaded on my drive so i will give
02:24 - the link of this drive
02:25 - as well so you can get a hang of all
02:28 - those commands whenever you go for
02:30 - interviews
02:30 - now coming to the test cases these are
02:33 - the test cases which we will execute and
02:36 - while executing we will cover these
02:38 - commands
02:39 - these are the commands like the get the
02:41 - get title the get current url the get
02:43 - page source the close and the quit now
02:46 - get window handle and get window handles
02:48 - is a part of the browser command but it
02:50 - is a bit complicated
02:52 - i will cover that in the later tutorial
02:54 - so for now we need to get a hang of
02:56 - get get title get current url get paid
02:59 - source close and quick
03:01 - so by executing these test cases we will
03:03 - create the test scripts of these test
03:05 - cases
03:06 - we will understand these commands also
03:08 - okay first
03:09 - test case that we have is the open the
03:11 - chrome browser
03:13 - okay in which we use the system.cell
03:15 - property
03:16 - and the web driver driver is equal to
03:19 - new chrome driver these are the two
03:21 - commands that we
03:21 - use in opening the chrome browser then
03:24 - navigate to the url
03:25 - to navigate to the url we use the drive
03:28 - driver dot get command right
03:30 - so this is the part of the browser
03:31 - command next we will maximize the window
03:34 - the next we will verify the current url
03:36 - of the page for this we will use the
03:38 - current
03:39 - get current url command okay through if
03:43 - statement
03:44 - okay then we have to verify the title of
03:46 - the page
03:47 - now to verify the title of the page we
03:49 - will use the get title command
03:51 - okay and we will verify it through if
03:54 - statement
03:55 - next we will print the length of the
03:57 - title of the page
03:59 - in this we will use the length command
04:00 - we'll have a look at that okay
04:02 - next we will print the page source of
04:04 - the page
04:05 - in which we will use the get page source
04:07 - command also we will print the length of
04:09 - the page source
04:10 - okay next we have the close browser and
04:13 - quit the browser
04:14 - now uh we will understand the difference
04:16 - also uh practically okay so this is the
04:19 - webpage that i want to automate today
04:21 - now i have created
04:23 - a java class in my
04:27 - package combat selenium in which i have
04:29 - named it as selenium tutorials then
04:31 - i'll be executing my test scripts over
04:33 - here in this
04:35 - uh in this selenium tutorial 10. the
04:37 - first test case
04:38 - was to open the chrome browser for which
04:40 - we use the system.set properties
04:43 - in which we give the key and the value
04:45 - the key is the webdriver.chrome.driver
04:48 - and the value is the executable chrome
04:50 - driver file
04:51 - okay next we have the webdriver driver
04:54 - is equal to new chrome driver
04:57 - why do we write the statement i have
04:58 - explained in the previous tutorial you
05:00 - can have a look at that tutorial
05:03 - okay the next command is that we have to
05:06 - navigate to the url
05:08 - so what i'll do is i'll write driver
05:11 - dot get
05:15 - and i will write my url
05:18 - in this get this is the first method
05:22 - okay
05:23 - to navigate to the url
05:27 - the second method that you can do or you
05:29 - can navigate is
05:32 - i can assign the url to a string
05:34 - variable
05:35 - like i'll write string i will name that
05:39 - variable as
05:40 - url and i will place my url in this
05:44 - variable next i will write driver
05:47 - dot get url
05:52 - so i can navigate to the url through
05:54 - this way as well as this way
05:56 - both the ways it will work for example
05:58 - uh so let's see
05:59 - whether we can navigate or not so by
06:02 - using this method driver.getmethod
06:08 - okay so chrome browser is launched and
06:10 - also just navigated to this
06:12 - page i will
06:15 - comment this and let's see
06:21 - okay so i chrome browser is also known
06:23 - so net is also navigated
06:25 - so these are the two methods to which
06:26 - you can navigate to the url
06:29 - now get method i will just comment this
06:33 - for now we will use this driver dot get
06:35 - method now uh
06:36 - get my turn up this commands open the
06:38 - specified url in the browser
06:41 - it accepts string as a parameter and it
06:44 - returns
06:44 - nothing okay and this is the basic
06:46 - syntax of navigating to the url
06:48 - and it is a part of the browser command
06:52 - so next test case that we have
06:55 - is to maximize the window so i'll write
06:58 - driver
06:59 - dot manage dot
07:02 - window dot
07:06 - maximize okay so the next command is
07:11 - verify the current url of the page url
07:14 - of the page
07:15 - let's first find the url and then we
07:17 - will verify
07:19 - so i'll write driver dot get
07:23 - current url and i will store this in
07:27 - a string variable
07:31 - string url of the page
07:34 - and i will print this
07:43 - okay let's see what is the output
07:48 - so a chrome browser is launched
07:52 - it's navigated
07:56 - it's maximized
08:01 - [Music]
08:02 - and here it is the url of the pages this
08:05 - this is the url of the page now let's
08:08 - verify the url
08:10 - to verify the url we will use the if
08:13 - statement
08:13 - so i will write if url of the page
08:18 - dot equals now i will write
08:22 - the url over here
08:28 - now if i was uh executing this statement
08:30 - this navigation uh statement what would
08:32 - i do
08:33 - what did i do over here is that i have
08:35 - written string url right
08:36 - so what would i do over here i will
08:39 - simply write
08:40 - url
08:44 - okay so this means that the url of the
08:47 - page
08:47 - that is the output that we are getting
08:49 - the actual output and the expected
08:51 - output
08:52 - will be matched the expected output is
08:55 - this this which is stored in this url
08:57 - variable and the actual output is stored
09:00 - in the url of the page
09:02 - right so if i would execute this
09:04 - statement
09:05 - i would have written this way but since
09:07 - i'm executing driver.getcommand i'm not
09:09 - writing it this way i'm not storing it
09:11 - in
09:11 - a string variable and then writing
09:14 - driver.get and inside get i'm writing
09:16 - the url the parameter that i'm giving is
09:18 - the url that is a string parameter
09:20 - so i'm not executing it this way i'm
09:23 - executing through driver.getcommand so
09:25 - i'm not writing it this way so i'll just
09:27 - simply write
09:28 - what output do i want this is the
09:30 - expected output that i'm writing over
09:32 - here
09:32 - and the actual output that i'm getting
09:34 - is the url of the page okay
09:36 - [Music]
09:38 - now if the actual and the expected
09:41 - matches so what i want is
09:43 - i want the output as
09:47 - the url is verified
09:54 - and then else
09:57 - i want
10:01 - the url is not
10:04 - verified so now let's execute this
10:08 - so my chrome browser is launched it's
10:11 - navigated
10:14 - it's maximized
10:17 - and now let's see the url of the pages
10:19 - this is the url and the url is verified
10:22 - that means the uh actual url that we are
10:25 - getting that is this and the expected
10:27 - view
10:27 - url that is this both is matching
10:31 - okay this is the expected url and this
10:34 - is the actual url both are matching
10:36 - that's the reason why we have called the
10:38 - url is verified
10:39 - for example if i just uh
10:43 - write it this way now let's see if it
10:45 - works
10:48 - so my chrome browser is launched it's
10:51 - navigated
10:55 - it's maximized okay and here you can see
10:58 - the url is not verified
11:00 - why because my actual that is this is my
11:03 - actual
11:04 - and the expected is not matching that's
11:07 - the reason why
11:08 - the output is the url is not verified
11:11 - the next test case is verify the title
11:14 - of the page
11:15 - so first we will find the title of the
11:17 - page
11:18 - so i'll write driver dot
11:21 - get title and i will store this
11:25 - in a string variable
11:28 - i will write string title is equal to
11:32 - driver dot get title
11:35 - next i will print it so let's execute it
11:40 - my chrome browser is launched
11:49 - so here it is see this is the url of the
11:51 - page the url is verified and then here
11:53 - the title of the page is
11:55 - tools qa this is the title of the page
11:57 - now how do you see the title of the
11:59 - pages
11:59 - so i'll just inspect
12:06 - and here in the head tag here you can
12:09 - see
12:10 - you can see title tools qa title this is
12:13 - the title of the page
12:15 - this is the title of the page and the
12:18 - title that we got
12:19 - is the tools que so this is how you can
12:21 - find the title of the page on the
12:23 - web page okay next we have to verify the
12:26 - title right
12:28 - so i'll use the if statement
12:31 - i'll write if title
12:37 - dot equals
12:41 - okay so this is the title let me copy
12:44 - this
12:49 - and the output that i want if the
12:52 - actual and the expected is matching
12:57 - the title is
13:00 - verified
13:04 - in the else statement i will write
13:09 - the title is
13:13 - not verified
13:17 - okay so your uh we are verifying the
13:20 - title of the page
13:22 - so let's see let's see the output of it
13:25 - so my chrome browser is launched
13:30 - it's navigated it's maximized
13:35 - and here you can see the title is
13:37 - verified because the expected output
13:39 - and the actual output is matching okay
13:43 - so now next test case that we have is
13:47 - we need to print the length of the title
13:49 - of the page
13:50 - okay to print the length of the title of
13:52 - the page
13:53 - we're going to use the length comma so
13:55 - what i'm going to do is i'm going to
13:56 - write
13:57 - driver dot get title
14:01 - dot length okay and i will store it
14:04 - in the integer type of variable because
14:07 - the answer that we're going to get is an
14:09 - integer so we i'm going to write int
14:13 - and title length
14:17 - is equal to driver dot get title dot
14:20 - length
14:21 - and let's print it
14:24 - so let's execute this so my chrome
14:28 - browser launched
14:30 - it's navigated
14:34 - it's maximized
14:38 - and let's see the length of the title of
14:41 - the page is 7.
14:42 - now it is 7 because this is 1
14:46 - 2 3 4 5 6 7
14:50 - so the length of the title of the page
14:51 - is 7. so now the next
14:53 - test case that we have is to print the
14:56 - page source of the
14:57 - page
15:00 - now for that i'm going to write driver
15:03 - dot
15:06 - get page source i will store this in a
15:09 - string type of variable
15:16 - string i will write ps is equal to
15:20 - driver dot page source next let's print
15:23 - it
15:24 - okay so now let's execute this so my
15:27 - chrome browser is launched
15:29 - it's navigated and it's maximized
15:32 - and here you can see the page source
15:34 - this is the entire page so that here you
15:37 - can see is this
15:39 - it prints the entire core of the page
15:41 - okay so it's quite long
15:42 - now we have to print the length of this
15:45 - right
15:52 - so what i'm going to do is i'm going to
15:53 - write driver
15:56 - dot get paid source dot length
16:00 - and i'm going to store it in the integer
16:03 - type of variable
16:04 - so i'll write in it's source
16:09 - length is equal to
16:13 - driver.getpagesource.length
16:14 - okay now let's print it
16:18 - the length of the
16:25 - page sources
16:30 - length so this is the chrome browser
16:35 - now let's see here this is the length of
16:37 - the pesos now we we won't sit and count
16:40 - but since it's too long
16:43 - so this is the length of the page source
16:45 - now the next test case that we have is
16:48 - we have to click on the new tab right
16:51 - so we use the click command over here
16:53 - the click command is not a part of the
16:55 - browser
16:55 - uh command it is a part of a web element
16:58 - command but
16:58 - since we have to know the difference
17:01 - between the
17:02 - close and the quit so we are going to
17:04 - execute this command now this is the new
17:06 - tab command so i'll just inspect this
17:08 - i'll go to selectors hub here i can see
17:12 - the relative x path i'll just copy this
17:14 - relative xpath
17:16 - i will write driver dot find element
17:21 - by dot x path and i will place my
17:25 - relative x path over here
17:27 - and what i want to do is i want to click
17:29 - so i right click
17:32 - and let's see
17:34 - [Music]
17:36 - so my chrome browser is launched
17:40 - it's navigated and it's
17:44 - maximized and the new tab
17:47 - is clicked so here you can see there is
17:49 - a new tab okay
17:51 - so first we will see the close command
17:56 - okay now if i write driver dot
18:00 - close just look at
18:03 - it very closely so i'll just write
18:06 - thread
18:10 - dot sleep and i'll write 100 over here
18:15 - so that you just get to know that how
18:18 - close method works
18:21 - okay it adds the exception towards
18:23 - interrupted exception over here
18:25 - and we're going to use a thread.sleep
18:26 - now dot sleep is used in multi threading
18:28 - if you know your javascript concepts
18:30 - really well we
18:31 - you we use stand out sleep it causes the
18:34 - currently executing thread to sleep for
18:36 - some
18:36 - specified time so here i have specified
18:39 - the time of 100 milliseconds
18:40 - so now let's see the output
18:46 - i want you to closely look at the how
18:49 - driver.close works
18:53 - so our chrome browser is launched
18:57 - [Music]
19:01 - and the new tab is open and here you can
19:04 - see
19:05 - there was a parent tag over here the
19:08 - before tag
19:09 - okay let me increase the timing over
19:11 - here
19:16 - so my chrome browser is launched it's
19:18 - navigated now this is my parent tab
19:21 - and this is my child tab now let's look
19:23 - at it
19:24 - this tab will be close to close dot
19:26 - driver command
19:28 - if you can see let me show it you again
19:33 - i am executing the command now
19:38 - this is my parent tag that is this
19:41 - browser windows
19:42 - is my parent tag and this is my child
19:46 - tag
19:46 - now through driver.close the parent tag
19:49 - will be closed but my child
19:50 - is still open okay now i'll write
19:55 - now i will commend this and i will write
19:57 - driver
19:59 - now we'll use the quick method
20:03 - so i'll just write driver
20:06 - dot quit
20:10 - and i will write thread
20:13 - dot sleep okay
20:16 - now let's run this command so my chrome
20:19 - browser is launched
20:22 - it's navigated and this is my child tag
20:24 - that's my parent tag and
20:26 - you will see driver dot
20:29 - quit closes both the tabs so this is the
20:33 - parent tag now
20:34 - here when we perform the driver dot
20:36 - close command and the driver dot quit
20:38 - command
20:39 - there are two tabs okay uh this is the
20:42 - parent tab
20:43 - and here when i click on new tab this is
20:45 - the child tab
20:46 - okay so when i write driver.close
20:50 - command
20:51 - it will just close the parent tag it
20:54 - will not close the
20:55 - child tab okay whereas when i write
20:58 - driver.quit command it will close the
21:01 - parent
21:01 - tab as well as the child tab so let's
21:04 - have a recap of what we have done till
21:05 - now
21:06 - now the first test case was to open the
21:08 - chrome browser
21:09 - in which i have written the system dot
21:11 - set property in which i have given the
21:13 - key and the value the key is given that
21:15 - the webdriver.chrome.driver
21:17 - and the value is the chromedriver
21:19 - executable file
21:21 - next we have to navigate to the url we
21:23 - can navigate to the url through two ways
21:26 - the first way we can do
21:27 - driver.getcommand
21:29 - now this java dot get command it this
21:32 - opens a specified url in the browser
21:35 - and this accepts a string as a parameter
21:37 - here you can see this is a string as a
21:39 - parameter
21:40 - and it returns nothing okay so this is
21:43 - the first method where we can write the
21:45 - driver.getcommand the getcommand is a
21:47 - part of the browser command
21:49 - and the second method that we can you is
21:52 - use
21:52 - is the we can assign the url to a string
21:56 - variable
21:56 - now here i have created a string
21:58 - variable like i have create string url
22:00 - and i have assigned the url to the
22:02 - string variable
22:03 - and then i have written driver.get and i
22:06 - have written this
22:07 - variable in my get the parameter that
22:10 - you are
22:11 - using is the string okay so basically it
22:14 - accepts string as a parameter
22:15 - and it returns nothing this is about the
22:17 - get command
22:19 - next we have maximized the window for
22:21 - that we have used the
22:24 - driver.manage.window.maximizemy okay
22:24 - dot maximize
22:27 - next we have to
22:28 - uh find the url of the page what is the
22:32 - url of the page
22:34 - this is the page and this is the url so
22:36 - we have to find the url of this page
22:39 - so for that i have used the get current
22:42 - url method
22:43 - now this method fetches the string
22:46 - representing the current url which is
22:48 - opened in the browser
22:50 - okay and this accepts nothing as a
22:54 - parameter there is no parameter given
22:56 - over here but it returns a string value
22:59 - here you can see in the output here you
23:01 - can see in the output the url of the
23:02 - page
23:03 - so it returns the string value and it
23:05 - accepts nothing as a parameter
23:08 - and what does the get current url method
23:10 - does it does
23:11 - it fetches the string representing the
23:14 - current url
23:15 - which is open in the browser this page
23:18 - was opened right
23:19 - so it was fetching this string this is
23:21 - the current url of the page
23:24 - so for that we have given a string
23:26 - variable that is a string url of the
23:28 - page and i have written driver dot get
23:30 - current url
23:32 - and i've printed the url over here now
23:34 - to verify the url i have
23:36 - used the if command in which i have
23:37 - written the url of the page
23:39 - in which i am getting the actual output
23:43 - and here i am matching the actual and
23:44 - the expected output
23:46 - i'm using the equals method dot equals
23:49 - now i'm
23:50 - writing over here the expected output
23:52 - that i want
23:53 - now if the expected and the actual
23:55 - output matches the output will be the
23:57 - url is verified and if not
23:58 - the url is not verified now here it's
24:01 - matched
24:02 - so it is written the url is verified so
24:05 - the next is that we have to find the
24:07 - title of the page and we have to verify
24:09 - it
24:10 - now to find the title of the page i will
24:12 - be using the get
24:13 - title command now the get title command
24:15 - is used to retrieve the title of the
24:18 - web page that the user is currently
24:20 - working on
24:21 - now this is a page now when i inspect
24:23 - this here
24:24 - in the head tag you can see the title
24:29 - and here it is this is the title of the
24:31 - page that is the tools qa this is the
24:33 - title of the page okay
24:34 - now to get this title i have used the
24:36 - get title command
24:38 - which retrieves the title of the web
24:40 - page
24:42 - now it accepts nothing as a parameter
24:44 - can you see
24:45 - any parameters no right so it accepts
24:46 - nothing as a parameter but it returns a
24:48 - string value
24:50 - here you can see the value the title of
24:52 - the page is this this is the string
24:54 - value that it is returning
24:55 - so to get the title of the page i have
24:57 - written string title
24:58 - i have created a string variable a title
25:01 - i have named
25:02 - as title and i have written
25:03 - driver.gettitle the title is stored in
25:05 - this string variable
25:06 - then i'm printing the string variable
25:08 - over here to verify it i'm using the if
25:11 - statement
25:12 - first i will write the actual output
25:14 - that is the title
25:15 - dot equals the expected output that i
25:18 - want
25:19 - the expected output is our year this is
25:21 - the expected output
25:23 - okay so here the expected output is
25:25 - written when the expected and the actual
25:27 - output is matching
25:28 - the output will be the title is verified
25:30 - and if not the title is not verified
25:33 - like here you can see the title is
25:35 - verified now
25:36 - to print the length of the title i am
25:38 - using the length command
25:40 - okay what i'm going to do is i'm going
25:42 - to create a integer type of
25:44 - variable and i'll name it as integer
25:46 - length and i'll write driver dot get
25:48 - title
25:49 - dot length by writing length i'm
25:52 - actually fetching the total length
25:54 - of the title it returns the length of
25:56 - the string
25:57 - okay now uh to print it i'll write
26:00 - system dot out of println the length of
26:01 - the title is and i'll write the variable
26:03 - that is the title length
26:04 - and here the output is the length of the
26:07 - title is seven
26:08 - okay next is the page source
26:13 - now basically page source is a command
26:16 - it is a browser command
26:18 - which returns the source code of the
26:20 - page so
26:21 - this is a page and this is the entire
26:23 - source code of the page so it will
26:25 - return this entire source code of the
26:27 - page
26:28 - so for this we'll use the get page
26:29 - source uh
26:31 - and this get page source it accepts
26:33 - nothing as a parameter
26:34 - is there any parameter over here no
26:36 - right so it accepts nothing as a
26:37 - parameter
26:38 - but it returns a string value and the
26:40 - string value this is the entire string
26:42 - value that is given over here
26:43 - now to print the paste to source what i
26:45 - have written is string
26:46 - ps is equal to driver dot get page
26:49 - source i have used the get paste source
26:50 - command
26:51 - and i will print this variable this
26:53 - string variable
26:55 - then to find the length of the page
26:56 - source what i have done i have used the
26:58 - length
26:59 - method i'll write
27:01 - driver.getpagesource.length and i store
27:03 - this length in the integer type of
27:05 - variable named as
27:07 - ph length and i've printed over here
27:10 - so the total length is displayed over
27:11 - here
27:13 - this is the total length so these were
27:15 - the commands the browser commands
27:17 - next we will learn about the click and
27:20 - the uh next we will learn about the
27:21 - close and the quit command the
27:22 - difference between the close and the
27:23 - quit
27:24 - method okay for that we will click this
27:27 - new tab
27:28 - so first what did i do is i clicked this
27:31 - new tab
27:32 - so for that i inspected this element and
27:34 - i wrote the x path and i have performed
27:36 - the click operation on this web element
27:38 - next to differentiate between the close
27:40 - and the quit what i did is let me
27:42 - execute this again
27:43 - first i have written driver.close now
27:45 - then i've written thread.sleep which
27:47 - causes the currently
27:48 - executing thread to sleep for a
27:50 - specified time for example here i have
27:52 - written the 5000 milliseconds okay
27:54 - now let me execute this command and see
27:56 - the difference again
27:58 - so my chrome browser is launched it's
28:01 - maximized this is my parent
28:03 - and this is my child tab my parent tab
28:06 - will be closed
28:07 - so this is close driver dot close
28:10 - which means that the method terminates
28:12 - the current browser window okay
28:14 - whereas in quit it will terminate all
28:17 - the browsers
28:18 - so let's execute this so my chrome
28:21 - browser is launched
28:22 - it's navigated and here you can see this
28:25 - is the new tag
28:28 - and through driver.quite both the tabs
28:30 - are closed
28:31 - okay so uh this is the major difference
28:34 - between the close and the quit
28:36 - the close in both these commands they
28:37 - accept nothing as a parameter
28:40 - and uh it returns also nothing as a
28:42 - parameter this simply closes the
28:44 - tabs and the windows so this is all
28:47 - about the browser commands that we have
28:49 - studied till now
28:50 - we have studied about the get then we
28:53 - have studied about the get
28:54 - title the get current url
28:58 - and we have studied about the get page
29:01 - source
29:03 - then we have learnt the difference
29:05 - between the close
29:07 - and the quit command now let's
29:09 - understand the difference
29:11 - so the driver.quick command closes all
29:13 - the browsers
29:15 - whereas the closed method shall close
29:17 - the browser which is in focus that was
29:19 - the parent
29:20 - tab was in focus right so it closes that
29:22 - browser which is in focus
29:24 - now the quick method closes all the
29:26 - active webdriver instances
29:28 - whereas the close method closes the
29:30 - active webdriver instances
29:33 - so this is the difference between the
29:34 - quick and the close command
29:37 - so in the next tutorial we will learn
29:39 - about the navigational commands like
29:41 - what is navigation command what are the
29:42 - different types of navigation command
29:44 - with the syntax we will also implement
29:46 - the same
29:46 - test cases we will implement the
29:48 - different test cases
29:50 - and then we will understand the
29:51 - difference between the navigate to
29:53 - command and the get command so under
29:55 - then goodbye please like share and
29:56 - subscribe this video

Cleaned transcript:

hello everyone this is vasha and welcome to programming knowledge so in the previous tutorial we learnt about the shadow dom objects in this tutorial we're going to understand some of the important selenium commands which is frequently used to write the test scripts now these selenium commands consist of the browser commands the navigation commands and the web element commands today we are going to understand the browser commands like what are browser commands what are the different types of browser commands with their syntax also we will implement some set of test cases and then we will understand the difference between the close method and the quick method so let's get started now first let us understand what are browser commands browser commands are something that are very basic operations of the web driver which includes the closing of the browser performing some few tasks those few tasks is like get title to uh quit to manage to close the browser to get the current url to get the page source so these are some of the uh operations these are some of the few tasks that we perform on the selenium webdriver so and these are some of the list that is given over here this is the list that is given over here now if you write for example if i write driver dot you can see this list so these are the different this uh list which is getting highlighted over here so these are the different browser commands that is present over here okay so these are browser commands now i have just created this basic uh notes this basic sheet which consists of the browser commands the navigational commands the web element commands which consists of the commands the description the syntax and what parameters accepts and what it returns it will be very quick recap for you while going in interviews because they frequently ask these questions like what is the difference between the close the quit method the submit and the click method and what is the difference between find element and find elements so these are some of the differences which we will cover and also we will study these commands so uh this is the sheet that i have prepared i will give the link of the sheet in the description box you can download the pdf format also i have uploaded on my drive so i will give the link of this drive as well so you can get a hang of all those commands whenever you go for interviews now coming to the test cases these are the test cases which we will execute and while executing we will cover these commands these are the commands like the get the get title the get current url the get page source the close and the quit now get window handle and get window handles is a part of the browser command but it is a bit complicated i will cover that in the later tutorial so for now we need to get a hang of get get title get current url get paid source close and quick so by executing these test cases we will create the test scripts of these test cases we will understand these commands also okay first test case that we have is the open the chrome browser okay in which we use the system.cell property and the web driver driver is equal to new chrome driver these are the two commands that we use in opening the chrome browser then navigate to the url to navigate to the url we use the drive driver dot get command right so this is the part of the browser command next we will maximize the window the next we will verify the current url of the page for this we will use the current get current url command okay through if statement okay then we have to verify the title of the page now to verify the title of the page we will use the get title command okay and we will verify it through if statement next we will print the length of the title of the page in this we will use the length command we'll have a look at that okay next we will print the page source of the page in which we will use the get page source command also we will print the length of the page source okay next we have the close browser and quit the browser now uh we will understand the difference also uh practically okay so this is the webpage that i want to automate today now i have created a java class in my package combat selenium in which i have named it as selenium tutorials then i'll be executing my test scripts over here in this uh in this selenium tutorial 10. the first test case was to open the chrome browser for which we use the system.set properties in which we give the key and the value the key is the webdriver.chrome.driver and the value is the executable chrome driver file okay next we have the webdriver driver is equal to new chrome driver why do we write the statement i have explained in the previous tutorial you can have a look at that tutorial okay the next command is that we have to navigate to the url so what i'll do is i'll write driver dot get and i will write my url in this get this is the first method okay to navigate to the url the second method that you can do or you can navigate is i can assign the url to a string variable like i'll write string i will name that variable as url and i will place my url in this variable next i will write driver dot get url so i can navigate to the url through this way as well as this way both the ways it will work for example uh so let's see whether we can navigate or not so by using this method driver.getmethod okay so chrome browser is launched and also just navigated to this page i will comment this and let's see okay so i chrome browser is also known so net is also navigated so these are the two methods to which you can navigate to the url now get method i will just comment this for now we will use this driver dot get method now uh get my turn up this commands open the specified url in the browser it accepts string as a parameter and it returns nothing okay and this is the basic syntax of navigating to the url and it is a part of the browser command so next test case that we have is to maximize the window so i'll write driver dot manage dot window dot maximize okay so the next command is verify the current url of the page url of the page let's first find the url and then we will verify so i'll write driver dot get current url and i will store this in a string variable string url of the page and i will print this okay let's see what is the output so a chrome browser is launched it's navigated it's maximized and here it is the url of the pages this this is the url of the page now let's verify the url to verify the url we will use the if statement so i will write if url of the page dot equals now i will write the url over here now if i was uh executing this statement this navigation uh statement what would i do what did i do over here is that i have written string url right so what would i do over here i will simply write url okay so this means that the url of the page that is the output that we are getting the actual output and the expected output will be matched the expected output is this this which is stored in this url variable and the actual output is stored in the url of the page right so if i would execute this statement i would have written this way but since i'm executing driver.getcommand i'm not writing it this way i'm not storing it in a string variable and then writing driver.get and inside get i'm writing the url the parameter that i'm giving is the url that is a string parameter so i'm not executing it this way i'm executing through driver.getcommand so i'm not writing it this way so i'll just simply write what output do i want this is the expected output that i'm writing over here and the actual output that i'm getting is the url of the page okay now if the actual and the expected matches so what i want is i want the output as the url is verified and then else i want the url is not verified so now let's execute this so my chrome browser is launched it's navigated it's maximized and now let's see the url of the pages this is the url and the url is verified that means the uh actual url that we are getting that is this and the expected view url that is this both is matching okay this is the expected url and this is the actual url both are matching that's the reason why we have called the url is verified for example if i just uh write it this way now let's see if it works so my chrome browser is launched it's navigated it's maximized okay and here you can see the url is not verified why because my actual that is this is my actual and the expected is not matching that's the reason why the output is the url is not verified the next test case is verify the title of the page so first we will find the title of the page so i'll write driver dot get title and i will store this in a string variable i will write string title is equal to driver dot get title next i will print it so let's execute it my chrome browser is launched so here it is see this is the url of the page the url is verified and then here the title of the page is tools qa this is the title of the page now how do you see the title of the pages so i'll just inspect and here in the head tag here you can see you can see title tools qa title this is the title of the page this is the title of the page and the title that we got is the tools que so this is how you can find the title of the page on the web page okay next we have to verify the title right so i'll use the if statement i'll write if title dot equals okay so this is the title let me copy this and the output that i want if the actual and the expected is matching the title is verified in the else statement i will write the title is not verified okay so your uh we are verifying the title of the page so let's see let's see the output of it so my chrome browser is launched it's navigated it's maximized and here you can see the title is verified because the expected output and the actual output is matching okay so now next test case that we have is we need to print the length of the title of the page okay to print the length of the title of the page we're going to use the length comma so what i'm going to do is i'm going to write driver dot get title dot length okay and i will store it in the integer type of variable because the answer that we're going to get is an integer so we i'm going to write int and title length is equal to driver dot get title dot length and let's print it so let's execute this so my chrome browser launched it's navigated it's maximized and let's see the length of the title of the page is 7. now it is 7 because this is 1 2 3 4 5 6 7 so the length of the title of the page is 7. so now the next test case that we have is to print the page source of the page now for that i'm going to write driver dot get page source i will store this in a string type of variable string i will write ps is equal to driver dot page source next let's print it okay so now let's execute this so my chrome browser is launched it's navigated and it's maximized and here you can see the page source this is the entire page so that here you can see is this it prints the entire core of the page okay so it's quite long now we have to print the length of this right so what i'm going to do is i'm going to write driver dot get paid source dot length and i'm going to store it in the integer type of variable so i'll write in it's source length is equal to driver.getpagesource.length okay now let's print it the length of the page sources length so this is the chrome browser now let's see here this is the length of the pesos now we we won't sit and count but since it's too long so this is the length of the page source now the next test case that we have is we have to click on the new tab right so we use the click command over here the click command is not a part of the browser uh command it is a part of a web element command but since we have to know the difference between the close and the quit so we are going to execute this command now this is the new tab command so i'll just inspect this i'll go to selectors hub here i can see the relative x path i'll just copy this relative xpath i will write driver dot find element by dot x path and i will place my relative x path over here and what i want to do is i want to click so i right click and let's see so my chrome browser is launched it's navigated and it's maximized and the new tab is clicked so here you can see there is a new tab okay so first we will see the close command okay now if i write driver dot close just look at it very closely so i'll just write thread dot sleep and i'll write 100 over here so that you just get to know that how close method works okay it adds the exception towards interrupted exception over here and we're going to use a thread.sleep now dot sleep is used in multi threading if you know your javascript concepts really well we you we use stand out sleep it causes the currently executing thread to sleep for some specified time so here i have specified the time of 100 milliseconds so now let's see the output i want you to closely look at the how driver.close works so our chrome browser is launched and the new tab is open and here you can see there was a parent tag over here the before tag okay let me increase the timing over here so my chrome browser is launched it's navigated now this is my parent tab and this is my child tab now let's look at it this tab will be close to close dot driver command if you can see let me show it you again i am executing the command now this is my parent tag that is this browser windows is my parent tag and this is my child tag now through driver.close the parent tag will be closed but my child is still open okay now i'll write now i will commend this and i will write driver now we'll use the quick method so i'll just write driver dot quit and i will write thread dot sleep okay now let's run this command so my chrome browser is launched it's navigated and this is my child tag that's my parent tag and you will see driver dot quit closes both the tabs so this is the parent tag now here when we perform the driver dot close command and the driver dot quit command there are two tabs okay uh this is the parent tab and here when i click on new tab this is the child tab okay so when i write driver.close command it will just close the parent tag it will not close the child tab okay whereas when i write driver.quit command it will close the parent tab as well as the child tab so let's have a recap of what we have done till now now the first test case was to open the chrome browser in which i have written the system dot set property in which i have given the key and the value the key is given that the webdriver.chrome.driver and the value is the chromedriver executable file next we have to navigate to the url we can navigate to the url through two ways the first way we can do driver.getcommand now this java dot get command it this opens a specified url in the browser and this accepts a string as a parameter here you can see this is a string as a parameter and it returns nothing okay so this is the first method where we can write the driver.getcommand the getcommand is a part of the browser command and the second method that we can you is use is the we can assign the url to a string variable now here i have created a string variable like i have create string url and i have assigned the url to the string variable and then i have written driver.get and i have written this variable in my get the parameter that you are using is the string okay so basically it accepts string as a parameter and it returns nothing this is about the get command next we have maximized the window for that we have used the driver.manage.window.maximizemy okay dot maximize next we have to uh find the url of the page what is the url of the page this is the page and this is the url so we have to find the url of this page so for that i have used the get current url method now this method fetches the string representing the current url which is opened in the browser okay and this accepts nothing as a parameter there is no parameter given over here but it returns a string value here you can see in the output here you can see in the output the url of the page so it returns the string value and it accepts nothing as a parameter and what does the get current url method does it does it fetches the string representing the current url which is open in the browser this page was opened right so it was fetching this string this is the current url of the page so for that we have given a string variable that is a string url of the page and i have written driver dot get current url and i've printed the url over here now to verify the url i have used the if command in which i have written the url of the page in which i am getting the actual output and here i am matching the actual and the expected output i'm using the equals method dot equals now i'm writing over here the expected output that i want now if the expected and the actual output matches the output will be the url is verified and if not the url is not verified now here it's matched so it is written the url is verified so the next is that we have to find the title of the page and we have to verify it now to find the title of the page i will be using the get title command now the get title command is used to retrieve the title of the web page that the user is currently working on now this is a page now when i inspect this here in the head tag you can see the title and here it is this is the title of the page that is the tools qa this is the title of the page okay now to get this title i have used the get title command which retrieves the title of the web page now it accepts nothing as a parameter can you see any parameters no right so it accepts nothing as a parameter but it returns a string value here you can see the value the title of the page is this this is the string value that it is returning so to get the title of the page i have written string title i have created a string variable a title i have named as title and i have written driver.gettitle the title is stored in this string variable then i'm printing the string variable over here to verify it i'm using the if statement first i will write the actual output that is the title dot equals the expected output that i want the expected output is our year this is the expected output okay so here the expected output is written when the expected and the actual output is matching the output will be the title is verified and if not the title is not verified like here you can see the title is verified now to print the length of the title i am using the length command okay what i'm going to do is i'm going to create a integer type of variable and i'll name it as integer length and i'll write driver dot get title dot length by writing length i'm actually fetching the total length of the title it returns the length of the string okay now uh to print it i'll write system dot out of println the length of the title is and i'll write the variable that is the title length and here the output is the length of the title is seven okay next is the page source now basically page source is a command it is a browser command which returns the source code of the page so this is a page and this is the entire source code of the page so it will return this entire source code of the page so for this we'll use the get page source uh and this get page source it accepts nothing as a parameter is there any parameter over here no right so it accepts nothing as a parameter but it returns a string value and the string value this is the entire string value that is given over here now to print the paste to source what i have written is string ps is equal to driver dot get page source i have used the get paste source command and i will print this variable this string variable then to find the length of the page source what i have done i have used the length method i'll write driver.getpagesource.length and i store this length in the integer type of variable named as ph length and i've printed over here so the total length is displayed over here this is the total length so these were the commands the browser commands next we will learn about the click and the uh next we will learn about the close and the quit command the difference between the close and the quit method okay for that we will click this new tab so first what did i do is i clicked this new tab so for that i inspected this element and i wrote the x path and i have performed the click operation on this web element next to differentiate between the close and the quit what i did is let me execute this again first i have written driver.close now then i've written thread.sleep which causes the currently executing thread to sleep for a specified time for example here i have written the 5000 milliseconds okay now let me execute this command and see the difference again so my chrome browser is launched it's maximized this is my parent and this is my child tab my parent tab will be closed so this is close driver dot close which means that the method terminates the current browser window okay whereas in quit it will terminate all the browsers so let's execute this so my chrome browser is launched it's navigated and here you can see this is the new tag and through driver.quite both the tabs are closed okay so uh this is the major difference between the close and the quit the close in both these commands they accept nothing as a parameter and uh it returns also nothing as a parameter this simply closes the tabs and the windows so this is all about the browser commands that we have studied till now we have studied about the get then we have studied about the get title the get current url and we have studied about the get page source then we have learnt the difference between the close and the quit command now let's understand the difference so the driver.quick command closes all the browsers whereas the closed method shall close the browser which is in focus that was the parent tab was in focus right so it closes that browser which is in focus now the quick method closes all the active webdriver instances whereas the close method closes the active webdriver instances so this is the difference between the quick and the close command so in the next tutorial we will learn about the navigational commands like what is navigation command what are the different types of navigation command with the syntax we will also implement the same test cases we will implement the different test cases and then we will understand the difference between the navigate to command and the get command so under then goodbye please like share and subscribe this video
