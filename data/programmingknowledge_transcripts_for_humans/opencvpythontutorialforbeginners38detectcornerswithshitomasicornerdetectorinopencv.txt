With timestamps:

00:00 - hey guys welcome to the next video on
00:02 - open CV tutorials for beginners using
00:04 - Python in the last video we have seen
00:06 - how we can use harris corner detector in
00:10 - order to find out the corners inside an
00:13 - image in this video I'm going to show
00:15 - you how you can use sheet Tomasi corner
00:19 - detector method to detect the corners
00:22 - inside an image so in late 1994 J she
00:28 - and C Tomasi made a small modification
00:32 - in the harris corner detector method in
00:36 - their paper which was called good
00:38 - features to track so this sheet Tomasi
00:42 - method is similar to harris corner
00:44 - detector apart from the way the score of
00:47 - r is calculated which we have seen in
00:50 - the last video so this sheet Tomasi
00:54 - method gives us better result in
00:57 - comparison to harris corner detector and
01:00 - also when you use this c Tomasi method
01:04 - we can find the top and corners which
01:08 - means we can provide the number of
01:11 - corners we want and this might be useful
01:14 - in cases where we don't want to detect
01:18 - all the corners inside an image so let's
01:21 - see in the code how we can implement
01:24 - this sheet Tomasi corner detector in
01:28 - OpenCV so here i have already written
01:31 - all the code so let me explain you all
01:34 - the lines of the code one by one so as
01:38 - you can see here i'm just importing the
01:41 - libraries in the first two line and in
01:44 - the next line i am just reading the
01:47 - image using I am read method and then I
01:50 - am converting this image into a
01:52 - grayscale image using this cbt color
01:57 - method so i'm converting this image from
02:00 - BGR to create scale image now as i said
02:04 - the paper which was published by she and
02:08 - Tomasi was named good features to track
02:12 - that's why
02:14 - in OpenCV this method is also called
02:17 - good features to track so here in this
02:22 - line we are just using this method CV
02:25 - dot good features to track which takes
02:29 - few arguments so first argument here is
02:32 - our input image which is a grayscale
02:35 - image which we are providing as the
02:37 - first parameter the second parameter is
02:41 - the maximum number of corners so here we
02:45 - can limit the number of corners we want
02:48 - to detect so for example I have given 25
02:51 - here that means we just want to detect
02:54 - 25 corners and if there are more than 25
03:00 - corners which are present in the image
03:03 - they will not be shown so this value
03:06 - means maximum number of corners to
03:08 - return and if there are more corners
03:12 - then the corners found then the
03:15 - strongest corners will be returned right
03:20 - now the third parameter here is called
03:24 - the quality level so this is the
03:28 - parameter characterizing the minimal
03:31 - expected quality of the image corner the
03:35 - next parameter here is the mean distance
03:38 - which is the minimum possible Euclidean
03:41 - distance between the returned corners so
03:45 - I have taken 10 here as the minimum
03:49 - distance and 0.01 as the quality level
03:54 - now once all the corners are detected
03:58 - using this good features to track method
04:01 - we convert those corners into the
04:05 - integer values and here in zero is a mer
04:11 - alias for in 64 and once all the corners
04:16 - are detected we iterate over all the
04:19 - corners and then we find out the value
04:22 - of x and y using this I
04:27 - and then it's easier to just draw the
04:31 - circles over these values using the CB
04:36 - dot circle method so this CB dot circle
04:39 - method takes few arguments first is the
04:42 - input image so the second parameter is
04:44 - the center the third parameter is the
04:47 - radius of the circle which we want to
04:49 - provide the fourth parameter is the
04:52 - color we want to provide and the fifth
04:55 - parameter is the thickness and if it's
04:59 - minus 1 that means we want to fill the
05:02 - color inside that circle and at last
05:06 - once all the circles are drawn on the
05:10 - corner which are detected then we are
05:12 - just showing this using I am show method
05:15 - so let's see how this works in the case
05:20 - of XI Tomasi method on an image so I'm
05:24 - going to run this code so you can see
05:26 - all the corners inside this image are
05:30 - detected and because we have just
05:34 - provided this number 25 here so maximum
05:37 - number of corners which will be detected
05:40 - here will be 25 and rest of them will
05:44 - not be shown so if we increase the value
05:47 - of the maximum number of corners let's
05:51 - increase it 200 let's say so I'm going
05:54 - to just increase it to the value 100 you
05:58 - will see more number of circles are
06:01 - drawn on an image now let's compare the
06:05 - result of the Harris corner detector and
06:07 - see Tomasi corner detector so on the
06:12 - left hand side you can see the original
06:14 - image and this middle image shows the
06:17 - Harris corner detector method and you
06:21 - can see all the corners are detected
06:23 - using Harris corner detector and using
06:27 - the sheet Tomasi corner detector it
06:29 - gives us better result and we can
06:32 - control the number of corners we want to
06:35 - detect and you can see all the important
06:38 - corners are detected using
06:41 - she Tomasi corner detector in a better
06:44 - way so that's how she Tomasi corner
06:48 - detector works I hope you've enjoyed
06:50 - this video and I will see you in the
06:53 - next video
07:01 - you

Cleaned transcript:

hey guys welcome to the next video on open CV tutorials for beginners using Python in the last video we have seen how we can use harris corner detector in order to find out the corners inside an image in this video I'm going to show you how you can use sheet Tomasi corner detector method to detect the corners inside an image so in late 1994 J she and C Tomasi made a small modification in the harris corner detector method in their paper which was called good features to track so this sheet Tomasi method is similar to harris corner detector apart from the way the score of r is calculated which we have seen in the last video so this sheet Tomasi method gives us better result in comparison to harris corner detector and also when you use this c Tomasi method we can find the top and corners which means we can provide the number of corners we want and this might be useful in cases where we don't want to detect all the corners inside an image so let's see in the code how we can implement this sheet Tomasi corner detector in OpenCV so here i have already written all the code so let me explain you all the lines of the code one by one so as you can see here i'm just importing the libraries in the first two line and in the next line i am just reading the image using I am read method and then I am converting this image into a grayscale image using this cbt color method so i'm converting this image from BGR to create scale image now as i said the paper which was published by she and Tomasi was named good features to track that's why in OpenCV this method is also called good features to track so here in this line we are just using this method CV dot good features to track which takes few arguments so first argument here is our input image which is a grayscale image which we are providing as the first parameter the second parameter is the maximum number of corners so here we can limit the number of corners we want to detect so for example I have given 25 here that means we just want to detect 25 corners and if there are more than 25 corners which are present in the image they will not be shown so this value means maximum number of corners to return and if there are more corners then the corners found then the strongest corners will be returned right now the third parameter here is called the quality level so this is the parameter characterizing the minimal expected quality of the image corner the next parameter here is the mean distance which is the minimum possible Euclidean distance between the returned corners so I have taken 10 here as the minimum distance and 0.01 as the quality level now once all the corners are detected using this good features to track method we convert those corners into the integer values and here in zero is a mer alias for in 64 and once all the corners are detected we iterate over all the corners and then we find out the value of x and y using this I and then it's easier to just draw the circles over these values using the CB dot circle method so this CB dot circle method takes few arguments first is the input image so the second parameter is the center the third parameter is the radius of the circle which we want to provide the fourth parameter is the color we want to provide and the fifth parameter is the thickness and if it's minus 1 that means we want to fill the color inside that circle and at last once all the circles are drawn on the corner which are detected then we are just showing this using I am show method so let's see how this works in the case of XI Tomasi method on an image so I'm going to run this code so you can see all the corners inside this image are detected and because we have just provided this number 25 here so maximum number of corners which will be detected here will be 25 and rest of them will not be shown so if we increase the value of the maximum number of corners let's increase it 200 let's say so I'm going to just increase it to the value 100 you will see more number of circles are drawn on an image now let's compare the result of the Harris corner detector and see Tomasi corner detector so on the left hand side you can see the original image and this middle image shows the Harris corner detector method and you can see all the corners are detected using Harris corner detector and using the sheet Tomasi corner detector it gives us better result and we can control the number of corners we want to detect and you can see all the important corners are detected using she Tomasi corner detector in a better way so that's how she Tomasi corner detector works I hope you've enjoyed this video and I will see you in the next video you
